
STM32U5A9J-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000026c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00029118  0800026c  0800026c  0001026c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fdc  08029384  08029384  00039384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000018  0802c360  0802c360  0003c360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000001c  0802c378  0802c378  0003c378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0802c394  0802c394  0003c394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000012c  20000000  0802c39c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TouchGFX_Framebuffer 00151800  2000012c  0802c4c8  0004012c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00046534  20151930  0817dcc8  00191930  2**3
                  ALLOC
  9 ._user_heap_stack 00001804  20197e64  0817dcc8  00197e64  2**0
                  ALLOC
 10 .ARM.attributes 00000036  00000000  00000000  001a01b8  2**0
                  CONTENTS, READONLY
 11 FontFlashSection 000001a8  90000000  90000000  001a0000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 TextFlashSection 00000010  900001a8  900001a8  001a01a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 ExtFlashSection 00000000  900001b8  900001b8  001a01ee  2**0
                  CONTENTS
 14 .debug_info   000ad56f  00000000  00000000  001a01ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0001522b  00000000  00000000  0024d75d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000035d0  00000000  00000000  00262988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00003950  00000000  00000000  00265f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00051647  00000000  00000000  002698a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000592e9  00000000  00000000  002baeef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001ae337  00000000  00000000  003141d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000000cf  00000000  00000000  004c250f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000c81c  00000000  00000000  004c25e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00006947  00000000  00000000  004cedfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800026c <__do_global_dtors_aux>:
 800026c:	b510      	push	{r4, lr}
 800026e:	4c05      	ldr	r4, [pc, #20]	; (8000284 <__do_global_dtors_aux+0x18>)
 8000270:	7823      	ldrb	r3, [r4, #0]
 8000272:	b933      	cbnz	r3, 8000282 <__do_global_dtors_aux+0x16>
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <__do_global_dtors_aux+0x1c>)
 8000276:	b113      	cbz	r3, 800027e <__do_global_dtors_aux+0x12>
 8000278:	4804      	ldr	r0, [pc, #16]	; (800028c <__do_global_dtors_aux+0x20>)
 800027a:	e000      	b.n	800027e <__do_global_dtors_aux+0x12>
 800027c:	bf00      	nop
 800027e:	2301      	movs	r3, #1
 8000280:	7023      	strb	r3, [r4, #0]
 8000282:	bd10      	pop	{r4, pc}
 8000284:	20151930 	.word	0x20151930
 8000288:	00000000 	.word	0x00000000
 800028c:	0802936c 	.word	0x0802936c

08000290 <frame_dummy>:
 8000290:	b508      	push	{r3, lr}
 8000292:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <frame_dummy+0x10>)
 8000294:	b11b      	cbz	r3, 800029e <frame_dummy+0xe>
 8000296:	4903      	ldr	r1, [pc, #12]	; (80002a4 <frame_dummy+0x14>)
 8000298:	4803      	ldr	r0, [pc, #12]	; (80002a8 <frame_dummy+0x18>)
 800029a:	e000      	b.n	800029e <frame_dummy+0xe>
 800029c:	bf00      	nop
 800029e:	bd08      	pop	{r3, pc}
 80002a0:	00000000 	.word	0x00000000
 80002a4:	20151934 	.word	0x20151934
 80002a8:	0802936c 	.word	0x0802936c

080002ac <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 80002ac:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002ae:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002b2:	4917      	ldr	r1, [pc, #92]	; (8000310 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 80002b4:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002b8:	4816      	ldr	r0, [pc, #88]	; (8000314 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 80002ba:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 80002bc:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 80002c0:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002c2:	4815      	ldr	r0, [pc, #84]	; (8000318 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002c4:	4912      	ldr	r1, [pc, #72]	; (8000310 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 80002c6:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 80002c8:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002ca:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 80002ce:	4913      	ldr	r1, [pc, #76]	; (800031c <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 80002d0:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 80002d2:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002d6:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002d8:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002dc:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002e0:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002e4:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002e8:	490d      	ldr	r1, [pc, #52]	; (8000320 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002ea:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002ee:	4770      	bx	lr

080002f0 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002f0:	f7ff bffe 	b.w	80002f0 <__tx_BadHandler>

080002f4 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002f4:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002f6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002fa:	4770      	bx	lr

080002fc <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002fc:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002fe:	f000 f89f 	bl	8000440 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 8000302:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 8000306:	4770      	bx	lr

08000308 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000308:	f7ff bffe 	b.w	8000308 <__tx_NMIHandler>

0800030c <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 800030c:	f7ff bffe 	b.w	800030c <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000310:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000314:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 8000318:	20197340 	.word	0x20197340
    LDR     r1, =SYSTICK_CYCLES
 800031c:	000270ff 	.word	0x000270ff
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000320:	40ff0000 	.word	0x40ff0000

08000324 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 8000324:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000328:	4a31      	ldr	r2, [pc, #196]	; (80003f0 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 800032a:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 800032c:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 8000330:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000334:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000338:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 800033a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800033e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 8000342:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000346:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 800034a:	f3bf 8f6f 	isb	sy

0800034e <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800034e:	e7fe      	b.n	800034e <__tx_wait_here>

08000350 <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000350:	4828      	ldr	r0, [pc, #160]	; (80003f4 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000352:	4a29      	ldr	r2, [pc, #164]	; (80003f8 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000354:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000358:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 800035a:	b191      	cbz	r1, 8000382 <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 800035c:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800035e:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 8000362:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000366:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 800036a:	d101      	bne.n	8000370 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 800036c:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000370 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000370:	4c22      	ldr	r4, [pc, #136]	; (80003fc <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 8000372:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000376:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 800037a:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 800037c:	b10d      	cbz	r5, 8000382 <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800037e:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000380:	6023      	str	r3, [r4, #0]

08000382 <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000382:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000384:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000386:	b1d1      	cbz	r1, 80003be <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000388:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800038a:	b662      	cpsie	i

0800038c <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 800038c:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800038e:	4c1b      	ldr	r4, [pc, #108]	; (80003fc <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000390:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 8000392:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000396:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000398:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 800039a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800039e:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80003a2:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80003a6:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003aa:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80003ae:	d101      	bne.n	80003b4 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80003b0:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080003b4 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80003b4:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80003b8:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 80003bc:	4770      	bx	lr

080003be <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003be:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003c0:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003c2:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003c4:	b949      	cbnz	r1, 80003da <__tx_ts_ready>

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 80003c6:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_enter                      // Possibly enter low power mode
 80003c8:	f001 feca 	bl	8002160 <tx_low_power_enter>
    POP     {r0-r3}
 80003cc:	bc0f      	pop	{r0, r1, r2, r3}
    WFI                                             // Wait for interrupt
    ISB                                             // Ensure pipeline is flushed
#endif

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 80003ce:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_exit                       // Exit low power mode
 80003d0:	f001 fed0 	bl	8002174 <tx_low_power_exit>
    POP     {r0-r3}
 80003d4:	bc0f      	pop	{r0, r1, r2, r3}

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003d6:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003d8:	e7f1      	b.n	80003be <__tx_ts_wait>

080003da <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003da:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003de:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003e2:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003e6:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003e8:	e7d0      	b.n	800038c <__tx_ts_restore>
 80003ea:	bf00      	nop

080003ec <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003ec:	4770      	bx	lr
 80003ee:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003f0:	201973dc 	.word	0x201973dc
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003f4:	20197344 	.word	0x20197344
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003f8:	20197348 	.word	0x20197348
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003fc:	20197948 	.word	0x20197948

08000400 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000400:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000402:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000406:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 800040a:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 800040e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000410:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000414:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000416:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000418:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800041a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800041c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800041e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000420:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000422:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000424:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000426:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000428:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800042a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800042c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800042e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000432:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000434:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000436:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800043a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800043c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800043e:	4770      	bx	lr

08000440 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000440:	4922      	ldr	r1, [pc, #136]	; (80004cc <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000442:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000444:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000448:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800044a:	4b21      	ldr	r3, [pc, #132]	; (80004d0 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800044c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800044e:	b13a      	cbz	r2, 8000460 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000450:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000454:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000456:	b91a      	cbnz	r2, 8000460 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000458:	4b1e      	ldr	r3, [pc, #120]	; (80004d4 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 800045a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800045e:	6018      	str	r0, [r3, #0]

08000460 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000460:	491d      	ldr	r1, [pc, #116]	; (80004d8 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000462:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000464:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000466:	b122      	cbz	r2, 8000472 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000468:	4b1c      	ldr	r3, [pc, #112]	; (80004dc <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 800046a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800046e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000470:	e008      	b.n	8000484 <__tx_timer_done>

08000472 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000472:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000476:	4b1a      	ldr	r3, [pc, #104]	; (80004e0 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000478:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800047a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800047c:	d101      	bne.n	8000482 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800047e:	4b19      	ldr	r3, [pc, #100]	; (80004e4 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000480:	6818      	ldr	r0, [r3, #0]

08000482 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000482:	6008      	str	r0, [r1, #0]

08000484 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000486:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000488:	b912      	cbnz	r2, 8000490 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800048a:	4914      	ldr	r1, [pc, #80]	; (80004dc <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800048c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800048e:	b1c8      	cbz	r0, 80004c4 <__tx_timer_nothing_expired>

08000490 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000490:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 8000492:	4912      	ldr	r1, [pc, #72]	; (80004dc <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000494:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000496:	b108      	cbz	r0, 800049c <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000498:	f014 f9ec 	bl	8014874 <_tx_timer_expiration_process>

0800049c <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 800049c:	4b0d      	ldr	r3, [pc, #52]	; (80004d4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800049e:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80004a0:	b172      	cbz	r2, 80004c0 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80004a2:	f014 f959 	bl	8014758 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004a6:	4810      	ldr	r0, [pc, #64]	; (80004e8 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80004a8:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80004aa:	b949      	cbnz	r1, 80004c0 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004ac:	480f      	ldr	r0, [pc, #60]	; (80004ec <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80004ae:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004b0:	4a0f      	ldr	r2, [pc, #60]	; (80004f0 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80004b2:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004b4:	480f      	ldr	r0, [pc, #60]	; (80004f4 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80004b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80004ba:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80004bc:	d000      	beq.n	80004c0 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80004be:	6002      	str	r2, [r0, #0]

080004c0 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 80004c0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080004c4 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80004c4:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80004c8:	4770      	bx	lr
 80004ca:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004cc:	201973e8 	.word	0x201973e8
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004d0:	20197948 	.word	0x20197948
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004d4:	201973ec 	.word	0x201973ec
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004d8:	20197478 	.word	0x20197478
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004dc:	2019747c 	.word	0x2019747c
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004e0:	20197474 	.word	0x20197474
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004e4:	20197470 	.word	0x20197470
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004e8:	201973dc 	.word	0x201973dc
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004ec:	20197344 	.word	0x20197344
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004f0:	20197348 	.word	0x20197348
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004f4:	e000ed04 	.word	0xe000ed04

080004f8 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af02      	add	r7, sp, #8
 80004fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8000500:	2300      	movs	r3, #0
 8000502:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000504:	2334      	movs	r3, #52	; 0x34
 8000506:	9300      	str	r3, [sp, #0]
 8000508:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800050c:	4a13      	ldr	r2, [pc, #76]	; (800055c <tx_application_define+0x64>)
 800050e:	4914      	ldr	r1, [pc, #80]	; (8000560 <tx_application_define+0x68>)
 8000510:	4814      	ldr	r0, [pc, #80]	; (8000564 <tx_application_define+0x6c>)
 8000512:	f014 fc59 	bl	8014dc8 <_txe_byte_pool_create>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d109      	bne.n	8000530 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 800051c:	4b11      	ldr	r3, [pc, #68]	; (8000564 <tx_application_define+0x6c>)
 800051e:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000520:	68b8      	ldr	r0, [r7, #8]
 8000522:	f000 f827 	bl	8000574 <App_ThreadX_Init>
 8000526:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d000      	beq.n	8000530 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800052e:	e7fe      	b.n	800052e <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&touchgfx_app_byte_pool, "TouchGFX App memory pool", touchgfx_byte_pool_buffer, TOUCHGFX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000530:	2334      	movs	r3, #52	; 0x34
 8000532:	9300      	str	r3, [sp, #0]
 8000534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000538:	4a0b      	ldr	r2, [pc, #44]	; (8000568 <tx_application_define+0x70>)
 800053a:	490c      	ldr	r1, [pc, #48]	; (800056c <tx_application_define+0x74>)
 800053c:	480c      	ldr	r0, [pc, #48]	; (8000570 <tx_application_define+0x78>)
 800053e:	f014 fc43 	bl	8014dc8 <_txe_byte_pool_create>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d104      	bne.n	8000552 <tx_application_define+0x5a>
  {
    /* USER CODE BEGIN TouchGFX_Byte_Pool_Success */

    /* USER CODE END TouchGFX_Byte_Pool_Success */

    memory_ptr = (VOID *)&touchgfx_app_byte_pool;
 8000548:	4b09      	ldr	r3, [pc, #36]	; (8000570 <tx_application_define+0x78>)
 800054a:	60bb      	str	r3, [r7, #8]
    if (MX_TouchGFX_Init(memory_ptr) != TX_SUCCESS)
 800054c:	68b8      	ldr	r0, [r7, #8]
 800054e:	f001 fb43 	bl	8001bd8 <MX_TouchGFX_Init>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000552:	bf00      	nop
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	2015194c 	.word	0x2015194c
 8000560:	08029384 	.word	0x08029384
 8000564:	20151d4c 	.word	0x20151d4c
 8000568:	20151d80 	.word	0x20151d80
 800056c:	08029398 	.word	0x08029398
 8000570:	20152d80 	.word	0x20152d80

08000574 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]

  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000580:	68fb      	ldr	r3, [r7, #12]
}
 8000582:	4618      	mov	r0, r3
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000592:	f012 ff43 	bl	801341c <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}

0800059a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059e:	f006 fe8d 	bl	80072bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a2:	f000 f821 	bl	80005e8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005a6:	f000 f87e 	bl	80006a6 <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005aa:	f000 f8b1 	bl	8000710 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 fe79 	bl	80012a4 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80005b2:	f000 fadf 	bl	8000b74 <MX_ICACHE_Init>
  MX_CRC_Init();
 80005b6:	f000 f8b9 	bl	800072c <MX_CRC_Init>
  MX_TIM8_Init();
 80005ba:	f000 fdc3 	bl	8001144 <MX_TIM8_Init>
  MX_DMA2D_Init();
 80005be:	f000 f913 	bl	80007e8 <MX_DMA2D_Init>
  MX_GPU2D_Init();
 80005c2:	f000 fa83 	bl	8000acc <MX_GPU2D_Init>
  MX_DSIHOST_DSI_Init();
 80005c6:	f000 f933 	bl	8000830 <MX_DSIHOST_DSI_Init>
  MX_LTDC_Init();
 80005ca:	f000 fae7 	bl	8000b9c <MX_LTDC_Init>
  MX_OCTOSPI1_Init();
 80005ce:	f000 fd71 	bl	80010b4 <MX_OCTOSPI1_Init>
  MX_HSPI1_Init();
 80005d2:	f000 fa8f 	bl	8000af4 <MX_HSPI1_Init>
  MX_DCACHE1_Init();
 80005d6:	f000 f8cb 	bl	8000770 <MX_DCACHE1_Init>
  MX_DCACHE2_Init();
 80005da:	f000 f8e7 	bl	80007ac <MX_DCACHE2_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 80005de:	f001 faf2 	bl	8001bc6 <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80005e2:	f7ff ffd4 	bl	800058e <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e6:	e7fe      	b.n	80005e6 <main+0x4c>

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b09e      	sub	sp, #120	; 0x78
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0318 	add.w	r3, r7, #24
 80005f2:	2260      	movs	r2, #96	; 0x60
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f027 fdb8 	bl	802816c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	463b      	mov	r3, r7
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]
 800060a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800060c:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000610:	f00b f916 	bl	800b840 <HAL_PWREx_ControlVoltageScaling>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0x36>
  {
    Error_Handler();
 800061a:	f000 ff51 	bl	80014c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_MSI;
 800061e:	2311      	movs	r3, #17
 8000620:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000622:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000626:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000628:	2301      	movs	r3, #1
 800062a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800062c:	2310      	movs	r3, #16
 800062e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000630:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000634:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000636:	2302      	movs	r3, #2
 8000638:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800063a:	2301      	movs	r3, #1
 800063c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000642:	2301      	movs	r3, #1
 8000644:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000646:	2350      	movs	r3, #80	; 0x50
 8000648:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800064a:	2302      	movs	r3, #2
 800064c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800064e:	2302      	movs	r3, #2
 8000650:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000652:	2302      	movs	r3, #2
 8000654:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8000656:	2300      	movs	r3, #0
 8000658:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065e:	f107 0318 	add.w	r3, r7, #24
 8000662:	4618      	mov	r0, r3
 8000664:	f00b f9e8 	bl	800ba38 <HAL_RCC_OscConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800066e:	f000 ff27 	bl	80014c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000672:	231f      	movs	r3, #31
 8000674:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000676:	2303      	movs	r3, #3
 8000678:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800068a:	463b      	mov	r3, r7
 800068c:	2104      	movs	r1, #4
 800068e:	4618      	mov	r0, r3
 8000690:	f00c f8ae 	bl	800c7f0 <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800069a:	f000 ff11 	bl	80014c0 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3778      	adds	r7, #120	; 0x78
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b0b8      	sub	sp, #224	; 0xe0
 80006aa:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006ac:	463b      	mov	r3, r7
 80006ae:	22e0      	movs	r2, #224	; 0xe0
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f027 fd5a 	bl	802816c <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_DSI;
 80006b8:	f04f 0200 	mov.w	r2, #0
 80006bc:	f04f 0306 	mov.w	r3, #6
 80006c0:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_PLL3;
 80006c4:	2300      	movs	r3, #0
 80006c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL3;
 80006ca:	2300      	movs	r3, #0
 80006cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 80006d0:	2303      	movs	r3, #3
 80006d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.PLL3.PLL3M = 4;
 80006d4:	2304      	movs	r3, #4
 80006d6:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.PLL3.PLL3N = 125;
 80006d8:	237d      	movs	r3, #125	; 0x7d
 80006da:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.PLL3.PLL3P = 8;
 80006dc:	2308      	movs	r3, #8
 80006de:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.PLL3.PLL3Q = 2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.PLL3.PLL3R = 24;
 80006e4:	2318      	movs	r3, #24
 80006e6:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLL3.PLL3FRACN = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVP|RCC_PLL3_DIVR;
 80006f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f6:	463b      	mov	r3, r7
 80006f8:	4618      	mov	r0, r3
 80006fa:	f00c fc87 	bl	800d00c <HAL_RCCEx_PeriphCLKConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <PeriphCommonClock_Config+0x62>
  {
    Error_Handler();
 8000704:	f000 fedc 	bl	80014c0 <Error_Handler>
  }
}
 8000708:	bf00      	nop
 800070a:	37e0      	adds	r7, #224	; 0xe0
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000714:	f00b f980 	bl	800ba18 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000718:	2002      	movs	r0, #2
 800071a:	f00b f91d 	bl	800b958 <HAL_PWREx_ConfigSupply>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000724:	f000 fecc 	bl	80014c0 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}

0800072c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000730:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <MX_CRC_Init+0x3c>)
 8000732:	4a0e      	ldr	r2, [pc, #56]	; (800076c <MX_CRC_Init+0x40>)
 8000734:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_CRC_Init+0x3c>)
 8000738:	2200      	movs	r2, #0
 800073a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <MX_CRC_Init+0x3c>)
 800073e:	2200      	movs	r2, #0
 8000740:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_CRC_Init+0x3c>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <MX_CRC_Init+0x3c>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_CRC_Init+0x3c>)
 8000750:	2201      	movs	r2, #1
 8000752:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_CRC_Init+0x3c>)
 8000756:	f006 ff03 	bl	8007560 <HAL_CRC_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000760:	f000 feae 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20152db4 	.word	0x20152db4
 800076c:	40023000 	.word	0x40023000

08000770 <MX_DCACHE1_Init>:
  * @brief DCACHE1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 8000774:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_DCACHE1_Init+0x34>)
 8000776:	4a0c      	ldr	r2, [pc, #48]	; (80007a8 <MX_DCACHE1_Init+0x38>)
 8000778:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_INCR;
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <MX_DCACHE1_Init+0x34>)
 800077c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000780:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 8000782:	4808      	ldr	r0, [pc, #32]	; (80007a4 <MX_DCACHE1_Init+0x34>)
 8000784:	f006 ffde 	bl	8007744 <HAL_DCACHE_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_DCACHE1_Init+0x22>
  {
    Error_Handler();
 800078e:	f000 fe97 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */
  HAL_DCACHE_Enable(&hdcache1);
 8000792:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_DCACHE1_Init+0x34>)
 8000794:	f007 f828 	bl	80077e8 <HAL_DCACHE_Enable>
  HAL_DCACHE_Invalidate(&hdcache1);
 8000798:	4802      	ldr	r0, [pc, #8]	; (80007a4 <MX_DCACHE1_Init+0x34>)
 800079a:	f007 f84c 	bl	8007836 <HAL_DCACHE_Invalidate>
  /* USER CODE END DCACHE1_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20152dd8 	.word	0x20152dd8
 80007a8:	40031400 	.word	0x40031400

080007ac <MX_DCACHE2_Init>:
  * @brief DCACHE2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE2_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE2_Init 0 */

  /* USER CODE BEGIN DCACHE2_Init 1 */

  /* USER CODE END DCACHE2_Init 1 */
  hdcache2.Instance = DCACHE2;
 80007b0:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_DCACHE2_Init+0x34>)
 80007b2:	4a0c      	ldr	r2, [pc, #48]	; (80007e4 <MX_DCACHE2_Init+0x38>)
 80007b4:	601a      	str	r2, [r3, #0]
  hdcache2.Init.ReadBurstType = DCACHE_READ_BURST_INCR;
 80007b6:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <MX_DCACHE2_Init+0x34>)
 80007b8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80007bc:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache2) != HAL_OK)
 80007be:	4808      	ldr	r0, [pc, #32]	; (80007e0 <MX_DCACHE2_Init+0x34>)
 80007c0:	f006 ffc0 	bl	8007744 <HAL_DCACHE_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_DCACHE2_Init+0x22>
  {
    Error_Handler();
 80007ca:	f000 fe79 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE2_Init 2 */
  HAL_DCACHE_Enable(&hdcache2);
 80007ce:	4804      	ldr	r0, [pc, #16]	; (80007e0 <MX_DCACHE2_Init+0x34>)
 80007d0:	f007 f80a 	bl	80077e8 <HAL_DCACHE_Enable>
  HAL_DCACHE_Invalidate(&hdcache2);
 80007d4:	4802      	ldr	r0, [pc, #8]	; (80007e0 <MX_DCACHE2_Init+0x34>)
 80007d6:	f007 f82e 	bl	8007836 <HAL_DCACHE_Invalidate>
  /* USER CODE END DCACHE2_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20152e04 	.word	0x20152e04
 80007e4:	40031800 	.word	0x40031800

080007e8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_DMA2D_Init+0x40>)
 80007ee:	4a0f      	ldr	r2, [pc, #60]	; (800082c <MX_DMA2D_Init+0x44>)
 80007f0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MX_DMA2D_Init+0x40>)
 80007f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007f8:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_DMA2D_Init+0x40>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_DMA2D_Init+0x40>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_DMA2D_Init+0x40>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_DMA2D_Init+0x40>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_DMA2D_Init+0x40>)
 8000814:	f007 fcc8 	bl	80081a8 <HAL_DMA2D_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_DMA2D_Init+0x3a>
  {
    Error_Handler();
 800081e:	f000 fe4f 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20152e30 	.word	0x20152e30
 800082c:	4002b000 	.word	0x4002b000

08000830 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b0e8      	sub	sp, #416	; 0x1a0
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */
  HAL_GPIO_WritePin(DSI_PWR_ON_GPIO_Port, DSI_PWR_ON_Pin, GPIO_PIN_SET);
 8000836:	2201      	movs	r2, #1
 8000838:	2120      	movs	r1, #32
 800083a:	48a1      	ldr	r0, [pc, #644]	; (8000ac0 <MX_DSIHOST_DSI_Init+0x290>)
 800083c:	f009 fade 	bl	8009dfc <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000840:	2005      	movs	r0, #5
 8000842:	f006 fd89 	bl	8007358 <HAL_Delay>
  HAL_GPIO_WritePin(DSI_PWR_ON_GPIO_Port, DSI_PWR_ON_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2120      	movs	r1, #32
 800084a:	489d      	ldr	r0, [pc, #628]	; (8000ac0 <MX_DSIHOST_DSI_Init+0x290>)
 800084c:	f009 fad6 	bl	8009dfc <HAL_GPIO_WritePin>
  HAL_Delay(11);
 8000850:	200b      	movs	r0, #11
 8000852:	f006 fd81 	bl	8007358 <HAL_Delay>
  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000856:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]
 8000866:	615a      	str	r2, [r3, #20]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000868:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800086c:	2224      	movs	r2, #36	; 0x24
 800086e:	2100      	movs	r1, #0
 8000870:	4618      	mov	r0, r3
 8000872:	f027 fc7b 	bl	802816c <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000876:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]
 8000886:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 8000888:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800088c:	226c      	movs	r2, #108	; 0x6c
 800088e:	2100      	movs	r1, #0
 8000890:	4618      	mov	r0, r3
 8000892:	f027 fc6b 	bl	802816c <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000896:	4b8b      	ldr	r3, [pc, #556]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 8000898:	4a8b      	ldr	r2, [pc, #556]	; (8000ac8 <MX_DSIHOST_DSI_Init+0x298>)
 800089a:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800089c:	4b89      	ldr	r3, [pc, #548]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 800089e:	2200      	movs	r2, #0
 80008a0:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 80008a2:	4b88      	ldr	r3, [pc, #544]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 80008a4:	2204      	movs	r2, #4
 80008a6:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80008a8:	4b86      	ldr	r3, [pc, #536]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	60da      	str	r2, [r3, #12]
  hdsi.Init.PHYFrequencyRange = DSI_DPHY_FRANGE_450MHZ_510MHZ;
 80008ae:	4b85      	ldr	r3, [pc, #532]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 80008b0:	2208      	movs	r2, #8
 80008b2:	611a      	str	r2, [r3, #16]
  hdsi.Init.PHYLowPowerOffset = PHY_LP_OFFSSET_0_CLKP;
 80008b4:	4b83      	ldr	r3, [pc, #524]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	615a      	str	r2, [r3, #20]
  PLLInit.PLLNDIV = 125;
 80008ba:	237d      	movs	r3, #125	; 0x7d
 80008bc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
  PLLInit.PLLIDF = DSI_PLL_IN_DIV4;
 80008c0:	2304      	movs	r3, #4
 80008c2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 80008c6:	2302      	movs	r3, #2
 80008c8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  PLLInit.PLLVCORange = DSI_DPHY_VCO_FRANGE_800MHZ_1GHZ;
 80008cc:	2301      	movs	r3, #1
 80008ce:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
  PLLInit.PLLChargePump = DSI_PLL_CHARGE_PUMP_2000HZ_4400HZ;
 80008d2:	2300      	movs	r3, #0
 80008d4:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
  PLLInit.PLLTuning = DSI_PLL_LOOP_FILTER_2000HZ_4400HZ;
 80008d8:	2300      	movs	r3, #0
 80008da:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80008de:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80008e2:	4619      	mov	r1, r3
 80008e4:	4877      	ldr	r0, [pc, #476]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 80008e6:	f007 ff21 	bl	800872c <HAL_DSI_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_DSIHOST_DSI_Init+0xc4>
  {
    Error_Handler();
 80008f0:	f000 fde6 	bl	80014c0 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 80008f4:	2301      	movs	r3, #1
 80008f6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  HostTimeouts.LowPowerReadTimeout = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000918:	2300      	movs	r3, #0
 800091a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  HostTimeouts.LowPowerWriteTimeout = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
  HostTimeouts.BTATimeout = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800092a:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800092e:	4619      	mov	r1, r3
 8000930:	4864      	ldr	r0, [pc, #400]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 8000932:	f008 fb8c 	bl	800904e <HAL_DSI_ConfigHostTimeouts>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_DSIHOST_DSI_Init+0x110>
  {
    Error_Handler();
 800093c:	f000 fdc0 	bl	80014c0 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 11;
 8000940:	230b      	movs	r3, #11
 8000942:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  PhyTimings.ClockLaneLP2HSTime = 40;
 8000946:	2328      	movs	r3, #40	; 0x28
 8000948:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
  PhyTimings.DataLaneHS2LPTime = 12;
 800094c:	230c      	movs	r3, #12
 800094e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  PhyTimings.DataLaneLP2HSTime = 23;
 8000952:	2317      	movs	r3, #23
 8000954:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  PhyTimings.DataLaneMaxReadTime = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  PhyTimings.StopWaitTime = 7;
 800095e:	2307      	movs	r3, #7
 8000960:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000964:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8000968:	4619      	mov	r1, r3
 800096a:	4856      	ldr	r0, [pc, #344]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 800096c:	f008 fad9 	bl	8008f22 <HAL_DSI_ConfigPhyTimer>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_DSIHOST_DSI_Init+0x14a>
  {
    Error_Handler();
 8000976:	f000 fda3 	bl	80014c0 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 800097a:	2104      	movs	r1, #4
 800097c:	4851      	ldr	r0, [pc, #324]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 800097e:	f008 faa8 	bl	8008ed2 <HAL_DSI_ConfigFlowControl>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_DSIHOST_DSI_Init+0x15c>
  {
    Error_Handler();
 8000988:	f000 fd9a 	bl	80014c0 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 800098c:	2100      	movs	r1, #0
 800098e:	484d      	ldr	r0, [pc, #308]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 8000990:	f007 ffa0 	bl	80088d4 <HAL_DSI_ConfigErrorMonitor>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_DSIHOST_DSI_Init+0x16e>
  {
    Error_Handler();
 800099a:	f000 fd91 	bl	80014c0 <Error_Handler>
  }
  VidCfg.ColorCoding = DSI_RGB888;
 800099e:	2305      	movs	r3, #5
 80009a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  VidCfg.Mode = DSI_VID_MODE_BURST;
 80009aa:	2302      	movs	r3, #2
 80009ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  VidCfg.PacketSize = 480;
 80009b0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80009b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  VidCfg.NumberOfChunks = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  VidCfg.NullPacketSize = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 80009c4:	2300      	movs	r3, #0
 80009c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 80009ca:	2300      	movs	r3, #0
 80009cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 80009d0:	2300      	movs	r3, #0
 80009d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  VidCfg.HorizontalSyncActive = 6;
 80009d6:	2306      	movs	r3, #6
 80009d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  VidCfg.HorizontalBackPorch = 3;
 80009dc:	2303      	movs	r3, #3
 80009de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  VidCfg.HorizontalLine = 1452;
 80009e2:	f240 53ac 	movw	r3, #1452	; 0x5ac
 80009e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  VidCfg.VerticalSyncActive = 20;
 80009ea:	2314      	movs	r3, #20
 80009ec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  VidCfg.VerticalBackPorch = 12;
 80009f0:	230c      	movs	r3, #12
 80009f2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  VidCfg.VerticalFrontPorch = 200;
 80009f6:	23c8      	movs	r3, #200	; 0xc8
 80009f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  VidCfg.VerticalActive = 481;
 80009fc:	f240 13e1 	movw	r3, #481	; 0x1e1
 8000a00:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8000a04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a08:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  VidCfg.LPLargestPacketSize = 64;
 8000a0c:	2340      	movs	r3, #64	; 0x40
 8000a0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  VidCfg.LPVACTLargestPacketSize = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 8000a18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;
 8000a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a24:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;
 8000a28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a2c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;
 8000a30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a34:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;
 8000a38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a3c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE;
 8000a40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a44:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_ENABLE;
 8000a48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a4c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 8000a50:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000a54:	4619      	mov	r1, r3
 8000a56:	481b      	ldr	r0, [pc, #108]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 8000a58:	f008 f833 	bl	8008ac2 <HAL_DSI_ConfigVideoMode>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_DSIHOST_DSI_Init+0x236>
  {
    Error_Handler();
 8000a62:	f000 fd2d 	bl	80014c0 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000a66:	2100      	movs	r1, #0
 8000a68:	4816      	ldr	r0, [pc, #88]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 8000a6a:	f007 ffff 	bl	8008a6c <HAL_DSI_SetGenericVCID>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_DSIHOST_DSI_Init+0x248>
  {
    Error_Handler();
 8000a74:	f000 fd24 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  // Start DSI
  if (HAL_DSI_Start(&hdsi) != HAL_OK)
 8000a78:	4812      	ldr	r0, [pc, #72]	; (8000ac4 <MX_DSIHOST_DSI_Init+0x294>)
 8000a7a:	f008 fbae 	bl	80091da <HAL_DSI_Start>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_DSIHOST_DSI_Init+0x258>
  {
    Error_Handler();
 8000a84:	f000 fd1c 	bl	80014c0 <Error_Handler>
  }

  /* Switch to DSI PHY PLL clock */
  RCC_PeriphCLKInitTypeDef PeriphClkInit;
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8000a88:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000a8c:	f5a3 71d0 	sub.w	r1, r3, #416	; 0x1a0
 8000a90:	f04f 0200 	mov.w	r2, #0
 8000a94:	f04f 0304 	mov.w	r3, #4
 8000a98:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInit.DsiClockSelection    = RCC_DSICLKSOURCE_DSIPHY;
 8000a9c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000aa0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8000aa4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000aa8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8000aac:	463b      	mov	r3, r7
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f00c faac 	bl	800d00c <HAL_RCCEx_PeriphCLKConfig>
  /* USER CODE END DSIHOST_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	42022000 	.word	0x42022000
 8000ac4:	20152e90 	.word	0x20152e90
 8000ac8:	40016c00 	.word	0x40016c00

08000acc <MX_GPU2D_Init>:
  * @brief GPU2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPU2D_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END GPU2D_Init 0 */

  /* USER CODE BEGIN GPU2D_Init 1 */

  /* USER CODE END GPU2D_Init 1 */
  hgpu2d.Instance = GPU2D;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_GPU2D_Init+0x20>)
 8000ad2:	4a07      	ldr	r2, [pc, #28]	; (8000af0 <MX_GPU2D_Init+0x24>)
 8000ad4:	601a      	str	r2, [r3, #0]
  if (HAL_GPU2D_Init(&hgpu2d) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_GPU2D_Init+0x20>)
 8000ad8:	f009 fa4d 	bl	8009f76 <HAL_GPU2D_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_GPU2D_Init+0x1a>
  {
    Error_Handler();
 8000ae2:	f000 fced 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN GPU2D_Init 2 */

  /* USER CODE END GPU2D_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20152eb4 	.word	0x20152eb4
 8000af0:	4002f000 	.word	0x4002f000

08000af4 <MX_HSPI1_Init>:
  * @brief HSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HSPI1_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
  }
  /* USER CODE BEGIN HSPI1_Init 2 */
#endif
  BSP_HSPI_RAM_Cfg_t sHSPI_Init;

  sHSPI_Init.LatencyType      = BSP_HSPI_RAM_FIXED_LATENCY;
 8000afa:	2320      	movs	r3, #32
 8000afc:	703b      	strb	r3, [r7, #0]
  sHSPI_Init.BurstType        = BSP_HSPI_RAM_LINEAR_BURST;
 8000afe:	2300      	movs	r3, #0
 8000b00:	70fb      	strb	r3, [r7, #3]
  sHSPI_Init.BurstLength      = BSP_HSPI_RAM_BURST_16_BYTES;
 8000b02:	2300      	movs	r3, #0
 8000b04:	713b      	strb	r3, [r7, #4]
  sHSPI_Init.ReadLatencyCode  = BSP_HSPI_RAM_READ_LATENCY_6;
 8000b06:	230c      	movs	r3, #12
 8000b08:	707b      	strb	r3, [r7, #1]
  sHSPI_Init.WriteLatencyCode = BSP_HSPI_RAM_WRITE_LATENCY_6;
 8000b0a:	23c0      	movs	r3, #192	; 0xc0
 8000b0c:	70bb      	strb	r3, [r7, #2]
  sHSPI_Init.IOMode           = BSP_HSPI_RAM_IO_X16_MODE;
 8000b0e:	2340      	movs	r3, #64	; 0x40
 8000b10:	717b      	strb	r3, [r7, #5]

  if (BSP_HSPI_RAM_Init(0, &sHSPI_Init) != BSP_ERROR_NONE)
 8000b12:	463b      	mov	r3, r7
 8000b14:	4619      	mov	r1, r3
 8000b16:	2000      	movs	r0, #0
 8000b18:	f004 fb60 	bl	80051dc <BSP_HSPI_RAM_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d00a      	beq.n	8000b38 <MX_HSPI1_Init+0x44>
  {
    printf("\r\nHSPI RAM Initialization : Failed");
 8000b22:	4810      	ldr	r0, [pc, #64]	; (8000b64 <MX_HSPI1_Init+0x70>)
 8000b24:	f027 fefa 	bl	802891c <iprintf>
    printf("\r\nHSPI RAM Test Aborted");
 8000b28:	480f      	ldr	r0, [pc, #60]	; (8000b68 <MX_HSPI1_Init+0x74>)
 8000b2a:	f027 fef7 	bl	802891c <iprintf>
    printf("\r\n");
 8000b2e:	480f      	ldr	r0, [pc, #60]	; (8000b6c <MX_HSPI1_Init+0x78>)
 8000b30:	f027 ff7a 	bl	8028a28 <puts>
    Error_Handler();
 8000b34:	f000 fcc4 	bl	80014c0 <Error_Handler>
  }

  if(BSP_HSPI_RAM_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f004 fc53 	bl	80053e4 <BSP_HSPI_RAM_EnableMemoryMappedMode>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d00a      	beq.n	8000b5a <MX_HSPI1_Init+0x66>
  {
    printf("\r\nHSPI RAM Mem-Mapped Cfg : Failed");
 8000b44:	480a      	ldr	r0, [pc, #40]	; (8000b70 <MX_HSPI1_Init+0x7c>)
 8000b46:	f027 fee9 	bl	802891c <iprintf>
    printf("\r\nHSPI RAM Test Aborted");
 8000b4a:	4807      	ldr	r0, [pc, #28]	; (8000b68 <MX_HSPI1_Init+0x74>)
 8000b4c:	f027 fee6 	bl	802891c <iprintf>
    printf("\r\n");
 8000b50:	4806      	ldr	r0, [pc, #24]	; (8000b6c <MX_HSPI1_Init+0x78>)
 8000b52:	f027 ff69 	bl	8028a28 <puts>
    Error_Handler();
 8000b56:	f000 fcb3 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE END HSPI1_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	080293b4 	.word	0x080293b4
 8000b68:	080293d8 	.word	0x080293d8
 8000b6c:	080293f0 	.word	0x080293f0
 8000b70:	080293f4 	.word	0x080293f4

08000b74 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f00a fa65 	bl	800b048 <HAL_ICACHE_ConfigAssociativityMode>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000b84:	f000 fc9c 	bl	80014c0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000b88:	f00a fa7e 	bl	800b088 <HAL_ICACHE_Enable>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000b92:	f000 fc95 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000b9c:	b5b0      	push	{r4, r5, r7, lr}
 8000b9e:	b0e4      	sub	sp, #400	; 0x190
 8000ba0:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ba2:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000ba6:	2234      	movs	r2, #52	; 0x34
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f027 fade 	bl	802816c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000bb0:	4bc1      	ldr	r3, [pc, #772]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000bb2:	4ac2      	ldr	r2, [pc, #776]	; (8000ebc <MX_LTDC_Init+0x320>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000bb6:	4bc0      	ldr	r3, [pc, #768]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000bb8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000bbc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000bbe:	4bbe      	ldr	r3, [pc, #760]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000bc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bc4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000bc6:	4bbc      	ldr	r3, [pc, #752]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000bcc:	4bba      	ldr	r3, [pc, #744]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 1;
 8000bd2:	4bb9      	ldr	r3, [pc, #740]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 19;
 8000bd8:	4bb7      	ldr	r3, [pc, #732]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000bda:	2213      	movs	r2, #19
 8000bdc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 2;
 8000bde:	4bb6      	ldr	r3, [pc, #728]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000be0:	2202      	movs	r2, #2
 8000be2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 31;
 8000be4:	4bb4      	ldr	r3, [pc, #720]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000be6:	221f      	movs	r2, #31
 8000be8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 482;
 8000bea:	4bb3      	ldr	r3, [pc, #716]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000bec:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8000bf0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 512;
 8000bf2:	4bb1      	ldr	r3, [pc, #708]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf8:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 483;
 8000bfa:	4baf      	ldr	r3, [pc, #700]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000bfc:	f240 12e3 	movw	r2, #483	; 0x1e3
 8000c00:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 712;
 8000c02:	4bad      	ldr	r3, [pc, #692]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000c04:	f44f 7232 	mov.w	r2, #712	; 0x2c8
 8000c08:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000c0a:	4bab      	ldr	r3, [pc, #684]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000c12:	4ba9      	ldr	r3, [pc, #676]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000c1a:	4ba7      	ldr	r3, [pc, #668]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c22:	48a5      	ldr	r0, [pc, #660]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000c24:	f00a fa40 	bl	800b0a8 <HAL_LTDC_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_LTDC_Init+0x96>
  {
    Error_Handler();
 8000c2e:	f000 fc47 	bl	80014c0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  pLayerCfg.WindowX1 = 480;
 8000c38:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000c3c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  pLayerCfg.WindowY0 = 1;
 8000c40:	2301      	movs	r3, #1
 8000c42:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  pLayerCfg.WindowY1 = 481;
 8000c46:	f240 13e1 	movw	r3, #481	; 0x1e1
 8000c4a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  pLayerCfg.Alpha = 255;
 8000c54:	23ff      	movs	r3, #255	; 0xff
 8000c56:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  pLayerCfg.Alpha0 = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000c60:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c64:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000c68:	2307      	movs	r3, #7
 8000c6a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  pLayerCfg.FBStartAdress = 0x0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  pLayerCfg.ImageWidth = 480;
 8000c74:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000c78:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  pLayerCfg.ImageHeight = 480;
 8000c7c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000c80:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
  pLayerCfg.Backcolor.Blue = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
  pLayerCfg.Backcolor.Green = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
  pLayerCfg.Backcolor.Red = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c96:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4886      	ldr	r0, [pc, #536]	; (8000eb8 <MX_LTDC_Init+0x31c>)
 8000ca0:	f00a fb8a 	bl	800b3b8 <HAL_LTDC_ConfigLayer>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_LTDC_Init+0x112>
  {
    Error_Handler();
 8000caa:	f000 fc09 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */
  HAL_Delay(10);
 8000cae:	200a      	movs	r0, #10
 8000cb0:	f006 fb52 	bl	8007358 <HAL_Delay>
  HAL_DSI_EnterULPM(&hdsi);
 8000cb4:	4882      	ldr	r0, [pc, #520]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000cb6:	f008 fb85 	bl	80093c4 <HAL_DSI_EnterULPM>
  HAL_Delay(10);
 8000cba:	200a      	movs	r0, #10
 8000cbc:	f006 fb4c 	bl	8007358 <HAL_Delay>

  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2120      	movs	r1, #32
 8000cc4:	487f      	ldr	r0, [pc, #508]	; (8000ec4 <MX_LTDC_Init+0x328>)
 8000cc6:	f009 f899 	bl	8009dfc <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000cca:	200a      	movs	r0, #10
 8000ccc:	f006 fb44 	bl	8007358 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2120      	movs	r1, #32
 8000cd4:	487b      	ldr	r0, [pc, #492]	; (8000ec4 <MX_LTDC_Init+0x328>)
 8000cd6:	f009 f891 	bl	8009dfc <HAL_GPIO_WritePin>
  HAL_Delay(150);
 8000cda:	2096      	movs	r0, #150	; 0x96
 8000cdc:	f006 fb3c 	bl	8007358 <HAL_Delay>

  HAL_DSI_ExitULPM(&hdsi);
 8000ce0:	4877      	ldr	r0, [pc, #476]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000ce2:	f008 fc87 	bl	80095f4 <HAL_DSI_ExitULPM>
  HAL_Delay(10);
 8000ce6:	200a      	movs	r0, #10
 8000ce8:	f006 fb36 	bl	8007358 <HAL_Delay>

  // CMD Mode
  uint8_t InitParam1[3] = {0xFF ,0x83 , 0x79};
 8000cec:	4a76      	ldr	r2, [pc, #472]	; (8000ec8 <MX_LTDC_Init+0x32c>)
 8000cee:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000cf2:	6812      	ldr	r2, [r2, #0]
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	8019      	strh	r1, [r3, #0]
 8000cf8:	3302      	adds	r3, #2
 8000cfa:	0c12      	lsrs	r2, r2, #16
 8000cfc:	701a      	strb	r2, [r3, #0]
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 3, 0xB9, InitParam1) != HAL_OK)
 8000cfe:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	23b9      	movs	r3, #185	; 0xb9
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2303      	movs	r3, #3
 8000d0a:	2239      	movs	r2, #57	; 0x39
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	486c      	ldr	r0, [pc, #432]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000d10:	f008 fac1 	bl	8009296 <HAL_DSI_LongWrite>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_LTDC_Init+0x182>
  {
    Error_Handler();
 8000d1a:	f000 fbd1 	bl	80014c0 <Error_Handler>
  }

  // SETPOWER
  uint8_t InitParam3[16] = {0x44,0x1C,0x1C,0x37,0x57,0x90,0xD0,0xE2,0x58,0x80,0x38,0x38,0xF8,0x33,0x34,0x42};
 8000d1e:	4b6b      	ldr	r3, [pc, #428]	; (8000ecc <MX_LTDC_Init+0x330>)
 8000d20:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 8000d24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 16, 0xB1, InitParam3) != HAL_OK)
 8000d2a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d2e:	9301      	str	r3, [sp, #4]
 8000d30:	23b1      	movs	r3, #177	; 0xb1
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	2310      	movs	r3, #16
 8000d36:	2239      	movs	r2, #57	; 0x39
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4861      	ldr	r0, [pc, #388]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000d3c:	f008 faab 	bl	8009296 <HAL_DSI_LongWrite>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_LTDC_Init+0x1ae>
  {
    Error_Handler();
 8000d46:	f000 fbbb 	bl	80014c0 <Error_Handler>
  }

  // SETDISP
  uint8_t InitParam4[9] = {0x80,0x14,0x0C,0x30,0x20,0x50,0x11,0x42,0x1D};
 8000d4a:	4a61      	ldr	r2, [pc, #388]	; (8000ed0 <MX_LTDC_Init+0x334>)
 8000d4c:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8000d50:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d52:	c303      	stmia	r3!, {r0, r1}
 8000d54:	701a      	strb	r2, [r3, #0]
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xB2, InitParam4) != HAL_OK)
 8000d56:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8000d5a:	9301      	str	r3, [sp, #4]
 8000d5c:	23b2      	movs	r3, #178	; 0xb2
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	2309      	movs	r3, #9
 8000d62:	2239      	movs	r2, #57	; 0x39
 8000d64:	2100      	movs	r1, #0
 8000d66:	4856      	ldr	r0, [pc, #344]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000d68:	f008 fa95 	bl	8009296 <HAL_DSI_LongWrite>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_LTDC_Init+0x1da>
  {
    Error_Handler();
 8000d72:	f000 fba5 	bl	80014c0 <Error_Handler>
  }

  // Set display cycle timing
  uint8_t InitParam5[10] = {0x01,0xAA,0x01,0xAF,0x01,0xAF,0x10,0xEA,0x1C,0xEA};
 8000d76:	4a57      	ldr	r2, [pc, #348]	; (8000ed4 <MX_LTDC_Init+0x338>)
 8000d78:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000d7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d7e:	c303      	stmia	r3!, {r0, r1}
 8000d80:	801a      	strh	r2, [r3, #0]
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xB4, InitParam5) != HAL_OK)
 8000d82:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000d86:	9301      	str	r3, [sp, #4]
 8000d88:	23b4      	movs	r3, #180	; 0xb4
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	230a      	movs	r3, #10
 8000d8e:	2239      	movs	r2, #57	; 0x39
 8000d90:	2100      	movs	r1, #0
 8000d92:	484b      	ldr	r0, [pc, #300]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000d94:	f008 fa7f 	bl	8009296 <HAL_DSI_LongWrite>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_LTDC_Init+0x206>
  {
    Error_Handler();
 8000d9e:	f000 fb8f 	bl	80014c0 <Error_Handler>
  }

  // SETVCOM
  uint8_t InitParam60[4] = {00,00,00,0xC0};
 8000da2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000da6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xC7, InitParam60) != HAL_OK)
 8000daa:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8000dae:	9301      	str	r3, [sp, #4]
 8000db0:	23c7      	movs	r3, #199	; 0xc7
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	2304      	movs	r3, #4
 8000db6:	2239      	movs	r2, #57	; 0x39
 8000db8:	2100      	movs	r1, #0
 8000dba:	4841      	ldr	r0, [pc, #260]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000dbc:	f008 fa6b 	bl	8009296 <HAL_DSI_LongWrite>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_LTDC_Init+0x22e>
  {
    Error_Handler();
 8000dc6:	f000 fb7b 	bl	80014c0 <Error_Handler>
  }

  // Set Panel Related Registers
  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xCC, 0x02) != HAL_OK)
 8000dca:	2302      	movs	r3, #2
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	23cc      	movs	r3, #204	; 0xcc
 8000dd0:	2215      	movs	r2, #21
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	483a      	ldr	r0, [pc, #232]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000dd6:	f008 fa3c 	bl	8009252 <HAL_DSI_ShortWrite>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_LTDC_Init+0x248>
  {
    Error_Handler();
 8000de0:	f000 fb6e 	bl	80014c0 <Error_Handler>
  }

  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xD2, 0x77) != HAL_OK)
 8000de4:	2377      	movs	r3, #119	; 0x77
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	23d2      	movs	r3, #210	; 0xd2
 8000dea:	2215      	movs	r2, #21
 8000dec:	2100      	movs	r1, #0
 8000dee:	4834      	ldr	r0, [pc, #208]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000df0:	f008 fa2f 	bl	8009252 <HAL_DSI_ShortWrite>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_LTDC_Init+0x262>
  {
    Error_Handler();
 8000dfa:	f000 fb61 	bl	80014c0 <Error_Handler>
  }

  uint8_t InitParam50[37] = {
 8000dfe:	4b36      	ldr	r3, [pc, #216]	; (8000ed8 <MX_LTDC_Init+0x33c>)
 8000e00:	f107 04fc 	add.w	r4, r7, #252	; 0xfc
 8000e04:	461d      	mov	r5, r3
 8000e06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e0e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e12:	6020      	str	r0, [r4, #0]
 8000e14:	3404      	adds	r4, #4
 8000e16:	7021      	strb	r1, [r4, #0]
    0x00,0x07,0x00,0x00,0x00,0x08,0x08,0x32,0x10,0x01,0x00,0x01,0x03,0x72,0x03,0x72,0x00,0x08,0x00,
    0x08,0x33,0x33,0x05,0x05,0x37,0x05,0x05,0x37,0x0A,0x00,0x00,0x00,0x0A,0x00,0x01,0x00,0x0E
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 37, 0xD3, InitParam50) != HAL_OK)
 8000e18:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000e1c:	9301      	str	r3, [sp, #4]
 8000e1e:	23d3      	movs	r3, #211	; 0xd3
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	2325      	movs	r3, #37	; 0x25
 8000e24:	2239      	movs	r2, #57	; 0x39
 8000e26:	2100      	movs	r1, #0
 8000e28:	4825      	ldr	r0, [pc, #148]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000e2a:	f008 fa34 	bl	8009296 <HAL_DSI_LongWrite>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_LTDC_Init+0x29c>
  {
    Error_Handler();
 8000e34:	f000 fb44 	bl	80014c0 <Error_Handler>
  }

  uint8_t InitParam51[34] = {
 8000e38:	4b28      	ldr	r3, [pc, #160]	; (8000edc <MX_LTDC_Init+0x340>)
 8000e3a:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 8000e3e:	461d      	mov	r5, r3
 8000e40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e48:	682b      	ldr	r3, [r5, #0]
 8000e4a:	8023      	strh	r3, [r4, #0]
    0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x19,0x19,0x18,0x18,0x18,0x18,0x19,0x19,0x01,0x00,
    0x03,0x02,0x05,0x04,0x07,0x06,0x23,0x22,0x21,0x20,0x18,0x18,0x18,0x18,0x00,0x00
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 34, 0xD5, InitParam51) != HAL_OK)
 8000e4c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000e50:	9301      	str	r3, [sp, #4]
 8000e52:	23d5      	movs	r3, #213	; 0xd5
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	2322      	movs	r3, #34	; 0x22
 8000e58:	2239      	movs	r2, #57	; 0x39
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4818      	ldr	r0, [pc, #96]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000e5e:	f008 fa1a 	bl	8009296 <HAL_DSI_LongWrite>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_LTDC_Init+0x2d0>
  {
    Error_Handler();
 8000e68:	f000 fb2a 	bl	80014c0 <Error_Handler>
  }

  uint8_t InitParam52[35] = {
 8000e6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <MX_LTDC_Init+0x344>)
 8000e6e:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 8000e72:	461d      	mov	r5, r3
 8000e74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e7c:	682b      	ldr	r3, [r5, #0]
 8000e7e:	7023      	strb	r3, [r4, #0]
 8000e80:	f107 03d5 	add.w	r3, r7, #213	; 0xd5
 8000e84:	2200      	movs	r2, #0
 8000e86:	801a      	strh	r2, [r3, #0]
    0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x19,0x19,0x18,0x18,0x19,0x19,0x18,0x18,0x06,0x07,
    0x04,0x05,0x02,0x03,0x00,0x01,0x20,0x21,0x22,0x23,0x18,0x18,0x18,0x18
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 35, 0xD6, InitParam52) != HAL_OK)
 8000e88:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e8c:	9301      	str	r3, [sp, #4]
 8000e8e:	23d6      	movs	r3, #214	; 0xd6
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	2323      	movs	r3, #35	; 0x23
 8000e94:	2239      	movs	r2, #57	; 0x39
 8000e96:	2100      	movs	r1, #0
 8000e98:	4809      	ldr	r0, [pc, #36]	; (8000ec0 <MX_LTDC_Init+0x324>)
 8000e9a:	f008 f9fc 	bl	8009296 <HAL_DSI_LongWrite>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_LTDC_Init+0x30c>
  {
    Error_Handler();
 8000ea4:	f000 fb0c 	bl	80014c0 <Error_Handler>
  }

  // SET GAMMA
  uint8_t InitParam8[42] = {
 8000ea8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000eac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000eb0:	4a0c      	ldr	r2, [pc, #48]	; (8000ee4 <MX_LTDC_Init+0x348>)
 8000eb2:	461c      	mov	r4, r3
 8000eb4:	4615      	mov	r5, r2
 8000eb6:	e017      	b.n	8000ee8 <MX_LTDC_Init+0x34c>
 8000eb8:	20152ec0 	.word	0x20152ec0
 8000ebc:	40016800 	.word	0x40016800
 8000ec0:	20152e90 	.word	0x20152e90
 8000ec4:	42020c00 	.word	0x42020c00
 8000ec8:	08029418 	.word	0x08029418
 8000ecc:	0802941c 	.word	0x0802941c
 8000ed0:	0802942c 	.word	0x0802942c
 8000ed4:	08029438 	.word	0x08029438
 8000ed8:	08029444 	.word	0x08029444
 8000edc:	0802946c 	.word	0x0802946c
 8000ee0:	08029490 	.word	0x08029490
 8000ee4:	080294b4 	.word	0x080294b4
 8000ee8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ef4:	c403      	stmia	r4!, {r0, r1}
 8000ef6:	8022      	strh	r2, [r4, #0]
    0x00,0x16,0x1B,0x30,0x36,0x3F,0x24,0x40,0x09,0x0D,0x0F,0x18,0x0E,0x11,0x12,0x11,0x14,0x07,
    0x12,0x13,0x18,0x00,0x17,0x1C,0x30,0x36,0x3F,0x24,0x40,0x09,0x0C,0x0F,0x18,0x0E,0x11,0x14,
    0x11,0x12,0x07,0x12,0x14,0x18
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 42, 0xE0, InitParam8) != HAL_OK)
 8000ef8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000efc:	9301      	str	r3, [sp, #4]
 8000efe:	23e0      	movs	r3, #224	; 0xe0
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	232a      	movs	r3, #42	; 0x2a
 8000f04:	2239      	movs	r2, #57	; 0x39
 8000f06:	2100      	movs	r1, #0
 8000f08:	4865      	ldr	r0, [pc, #404]	; (80010a0 <MX_LTDC_Init+0x504>)
 8000f0a:	f008 f9c4 	bl	8009296 <HAL_DSI_LongWrite>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_LTDC_Init+0x37c>
  {
    Error_Handler();
 8000f14:	f000 fad4 	bl	80014c0 <Error_Handler>
  }

  uint8_t InitParam44[3] = {0x2C,0x2C,00};
 8000f18:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000f1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000f20:	4a60      	ldr	r2, [pc, #384]	; (80010a4 <MX_LTDC_Init+0x508>)
 8000f22:	6812      	ldr	r2, [r2, #0]
 8000f24:	4611      	mov	r1, r2
 8000f26:	8019      	strh	r1, [r3, #0]
 8000f28:	3302      	adds	r3, #2
 8000f2a:	0c12      	lsrs	r2, r2, #16
 8000f2c:	701a      	strb	r2, [r3, #0]
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 3, 0xB6, InitParam44) != HAL_OK)
 8000f2e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000f32:	9301      	str	r3, [sp, #4]
 8000f34:	23b6      	movs	r3, #182	; 0xb6
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	2303      	movs	r3, #3
 8000f3a:	2239      	movs	r2, #57	; 0x39
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4858      	ldr	r0, [pc, #352]	; (80010a0 <MX_LTDC_Init+0x504>)
 8000f40:	f008 f9a9 	bl	8009296 <HAL_DSI_LongWrite>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_LTDC_Init+0x3b2>
  {
    Error_Handler();
 8000f4a:	f000 fab9 	bl	80014c0 <Error_Handler>
  }

  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xBD, 0x00) != HAL_OK)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	23bd      	movs	r3, #189	; 0xbd
 8000f54:	2215      	movs	r2, #21
 8000f56:	2100      	movs	r1, #0
 8000f58:	4851      	ldr	r0, [pc, #324]	; (80010a0 <MX_LTDC_Init+0x504>)
 8000f5a:	f008 f97a 	bl	8009252 <HAL_DSI_ShortWrite>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_LTDC_Init+0x3cc>
  {
    Error_Handler();
 8000f64:	f000 faac 	bl	80014c0 <Error_Handler>
  }

  uint8_t InitParam14[] = {
 8000f68:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000f6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000f70:	4a4d      	ldr	r2, [pc, #308]	; (80010a8 <MX_LTDC_Init+0x50c>)
 8000f72:	461c      	mov	r4, r3
 8000f74:	4615      	mov	r5, r2
 8000f76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f82:	c403      	stmia	r4!, {r0, r1}
 8000f84:	8022      	strh	r2, [r4, #0]
 8000f86:	3402      	adds	r4, #2
 8000f88:	0c13      	lsrs	r3, r2, #16
 8000f8a:	7023      	strb	r3, [r4, #0]
    0x01,0x00,0x07,0x0F,0x16,0x1F,0x27,0x30,0x38,0x40,0x47,0x4E,0x56,0x5D,0x65,0x6D,0x74,0x7D,
    0x84,0x8A,0x90,0x99,0xA1,0xA9,0xB0,0xB6,0xBD,0xC4,0xCD,0xD4,0xDD,0xE5,0xEC,0xF3,0x36,0x07,
    0x1C,0xC0,0x1B,0x01,0xF1,0x34,0x00
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 42, 0xC1, InitParam14) != HAL_OK)
 8000f8c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f90:	9301      	str	r3, [sp, #4]
 8000f92:	23c1      	movs	r3, #193	; 0xc1
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	232a      	movs	r3, #42	; 0x2a
 8000f98:	2239      	movs	r2, #57	; 0x39
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4840      	ldr	r0, [pc, #256]	; (80010a0 <MX_LTDC_Init+0x504>)
 8000f9e:	f008 f97a 	bl	8009296 <HAL_DSI_LongWrite>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_LTDC_Init+0x410>
  {
    Error_Handler();
 8000fa8:	f000 fa8a 	bl	80014c0 <Error_Handler>
  }

  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xBD, 0x01) != HAL_OK)
 8000fac:	2301      	movs	r3, #1
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	23bd      	movs	r3, #189	; 0xbd
 8000fb2:	2215      	movs	r2, #21
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	483a      	ldr	r0, [pc, #232]	; (80010a0 <MX_LTDC_Init+0x504>)
 8000fb8:	f008 f94b 	bl	8009252 <HAL_DSI_ShortWrite>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_LTDC_Init+0x42a>
  {
    Error_Handler();
 8000fc2:	f000 fa7d 	bl	80014c0 <Error_Handler>
  }

  uint8_t InitParam15[] = {
 8000fc6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000fca:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8000fce:	4a37      	ldr	r2, [pc, #220]	; (80010ac <MX_LTDC_Init+0x510>)
 8000fd0:	461c      	mov	r4, r3
 8000fd2:	4615      	mov	r5, r2
 8000fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fdc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fe0:	c403      	stmia	r4!, {r0, r1}
 8000fe2:	8022      	strh	r2, [r4, #0]
    0x00,0x08,0x0F,0x16,0x1F,0x28,0x31,0x39,0x41,0x48,0x51,0x59,0x60,0x68,0x70,0x78,0x7F,0x87,
    0x8D,0x94,0x9C,0xA3,0xAB,0xB3,0xB9,0xC1,0xC8,0xD0,0xD8,0xE0,0xE8,0xEE,0xF5,0x3B,0x1A,0xB6,
    0xA0,0x07,0x45,0xC5,0x37,0x00
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 42, 0xC1, InitParam15) != HAL_OK)
 8000fe4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	23c1      	movs	r3, #193	; 0xc1
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	232a      	movs	r3, #42	; 0x2a
 8000ff0:	2239      	movs	r2, #57	; 0x39
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	482a      	ldr	r0, [pc, #168]	; (80010a0 <MX_LTDC_Init+0x504>)
 8000ff6:	f008 f94e 	bl	8009296 <HAL_DSI_LongWrite>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_LTDC_Init+0x468>
  {
    Error_Handler();
 8001000:	f000 fa5e 	bl	80014c0 <Error_Handler>
  }

  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xBD, 0x02) != HAL_OK)
 8001004:	2302      	movs	r3, #2
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	23bd      	movs	r3, #189	; 0xbd
 800100a:	2215      	movs	r2, #21
 800100c:	2100      	movs	r1, #0
 800100e:	4824      	ldr	r0, [pc, #144]	; (80010a0 <MX_LTDC_Init+0x504>)
 8001010:	f008 f91f 	bl	8009252 <HAL_DSI_ShortWrite>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_LTDC_Init+0x482>
  {
    Error_Handler();
 800101a:	f000 fa51 	bl	80014c0 <Error_Handler>
  }

  uint8_t InitParam20[42] = {
 800101e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001022:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001026:	4a22      	ldr	r2, [pc, #136]	; (80010b0 <MX_LTDC_Init+0x514>)
 8001028:	461c      	mov	r4, r3
 800102a:	4615      	mov	r5, r2
 800102c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800102e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001034:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001038:	c403      	stmia	r4!, {r0, r1}
 800103a:	8022      	strh	r2, [r4, #0]
    0x00,0x09,0x0F,0x18,0x21,0x2A,0x34,0x3C,0x45,0x4C,0x56,0x5E,0x66,0x6E,0x76,0x7E,0x87,0x8E,
    0x95,0x9D,0xA6,0xAF,0xB7,0xBD,0xC5,0xCE,0xD5,0xDF,0xE7,0xEE,0xF4,0xFA,0xFF,0x0C,0x31,0x83,
    0x3C,0x5B,0x56,0x1E,0x5A,0xFF
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 42, 0xC1, InitParam20) != HAL_OK)
 800103c:	463b      	mov	r3, r7
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	23c1      	movs	r3, #193	; 0xc1
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	232a      	movs	r3, #42	; 0x2a
 8001046:	2239      	movs	r2, #57	; 0x39
 8001048:	2100      	movs	r1, #0
 800104a:	4815      	ldr	r0, [pc, #84]	; (80010a0 <MX_LTDC_Init+0x504>)
 800104c:	f008 f923 	bl	8009296 <HAL_DSI_LongWrite>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_LTDC_Init+0x4be>
  {
    Error_Handler();
 8001056:	f000 fa33 	bl	80014c0 <Error_Handler>
  }

  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xBD, 0x00) != HAL_OK)
 800105a:	2300      	movs	r3, #0
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	23bd      	movs	r3, #189	; 0xbd
 8001060:	2215      	movs	r2, #21
 8001062:	2100      	movs	r1, #0
 8001064:	480e      	ldr	r0, [pc, #56]	; (80010a0 <MX_LTDC_Init+0x504>)
 8001066:	f008 f8f4 	bl	8009252 <HAL_DSI_ShortWrite>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_LTDC_Init+0x4d8>
  {
    Error_Handler();
 8001070:	f000 fa26 	bl	80014c0 <Error_Handler>
  }

  // Exit Sleep Mode
  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, DSI_EXIT_SLEEP_MODE, 0x00) != HAL_OK)
 8001074:	2300      	movs	r3, #0
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	2311      	movs	r3, #17
 800107a:	2205      	movs	r2, #5
 800107c:	2100      	movs	r1, #0
 800107e:	4808      	ldr	r0, [pc, #32]	; (80010a0 <MX_LTDC_Init+0x504>)
 8001080:	f008 f8e7 	bl	8009252 <HAL_DSI_ShortWrite>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_LTDC_Init+0x4f2>
  {
    Error_Handler();
 800108a:	f000 fa19 	bl	80014c0 <Error_Handler>
  }

  HAL_Delay(120);
 800108e:	2078      	movs	r0, #120	; 0x78
 8001090:	f006 f962 	bl	8007358 <HAL_Delay>
  /* USER CODE END LTDC_Init 2 */

}
 8001094:	bf00      	nop
 8001096:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 800109a:	46bd      	mov	sp, r7
 800109c:	bdb0      	pop	{r4, r5, r7, pc}
 800109e:	bf00      	nop
 80010a0:	20152e90 	.word	0x20152e90
 80010a4:	080294e0 	.word	0x080294e0
 80010a8:	080294e4 	.word	0x080294e4
 80010ac:	08029510 	.word	0x08029510
 80010b0:	0802953c 	.word	0x0802953c

080010b4 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08c      	sub	sp, #48	; 0x30
 80010b8:	af00      	add	r7, sp, #0
  BSP_OSPI_NOR_Info_t sOSPI_NOR_Info;
  BSP_OSPI_NOR_Init_t sOSPI_NOR_Init;

  int32_t status;

  memset(&sOSPI_NOR_Info, 0, sizeof(sOSPI_NOR_Info));
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	2224      	movs	r2, #36	; 0x24
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f027 f852 	bl	802816c <memset>
  memset(&sOSPI_NOR_Init, 0, sizeof(sOSPI_NOR_Init));
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	2202      	movs	r2, #2
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f027 f84c 	bl	802816c <memset>

  sOSPI_NOR_Init.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 80010d4:	2301      	movs	r3, #1
 80010d6:	713b      	strb	r3, [r7, #4]
  sOSPI_NOR_Init.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 80010d8:	2301      	movs	r3, #1
 80010da:	717b      	strb	r3, [r7, #5]

  status = BSP_OSPI_NOR_Init(0, &sOSPI_NOR_Init);
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	4619      	mov	r1, r3
 80010e0:	2000      	movs	r0, #0
 80010e2:	f004 ffb1 	bl	8006048 <BSP_OSPI_NOR_Init>
 80010e6:	62f8      	str	r0, [r7, #44]	; 0x2c

  if (status != BSP_ERROR_NONE)
 80010e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d008      	beq.n	8001100 <MX_OCTOSPI1_Init+0x4c>
  {
    printf("\r\nOSPI NOR Initialization : Failed");
 80010ee:	4811      	ldr	r0, [pc, #68]	; (8001134 <MX_OCTOSPI1_Init+0x80>)
 80010f0:	f027 fc14 	bl	802891c <iprintf>
    printf("\r\nOSPI NOR Test Aborted");
 80010f4:	4810      	ldr	r0, [pc, #64]	; (8001138 <MX_OCTOSPI1_Init+0x84>)
 80010f6:	f027 fc11 	bl	802891c <iprintf>
    printf("\r\n");
 80010fa:	4810      	ldr	r0, [pc, #64]	; (800113c <MX_OCTOSPI1_Init+0x88>)
 80010fc:	f027 fc94 	bl	8028a28 <puts>
  }

  BSP_OSPI_NOR_GetInfo(0, &sOSPI_NOR_Info);
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	4619      	mov	r1, r3
 8001106:	2000      	movs	r0, #0
 8001108:	f005 f894 	bl	8006234 <BSP_OSPI_NOR_GetInfo>

  if (BSP_OSPI_NOR_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 800110c:	2000      	movs	r0, #0
 800110e:	f005 f8a7 	bl	8006260 <BSP_OSPI_NOR_EnableMemoryMappedMode>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d008      	beq.n	800112a <MX_OCTOSPI1_Init+0x76>
  {
    printf("\r\nOSPI NOR Mem-Mapped Cfg : Failed");
 8001118:	4809      	ldr	r0, [pc, #36]	; (8001140 <MX_OCTOSPI1_Init+0x8c>)
 800111a:	f027 fbff 	bl	802891c <iprintf>
    printf("\r\nOSPI NOR Test Aborted");
 800111e:	4806      	ldr	r0, [pc, #24]	; (8001138 <MX_OCTOSPI1_Init+0x84>)
 8001120:	f027 fbfc 	bl	802891c <iprintf>
    printf("\r\n");
 8001124:	4805      	ldr	r0, [pc, #20]	; (800113c <MX_OCTOSPI1_Init+0x88>)
 8001126:	f027 fc7f 	bl	8028a28 <puts>
  }
  /* USER CODE END OCTOSPI1_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	3730      	adds	r7, #48	; 0x30
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	08029568 	.word	0x08029568
 8001138:	0802958c 	.word	0x0802958c
 800113c:	080293f0 	.word	0x080293f0
 8001140:	080295a4 	.word	0x080295a4

08001144 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b09c      	sub	sp, #112	; 0x70
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001158:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001164:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
 8001174:	615a      	str	r2, [r3, #20]
 8001176:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	2234      	movs	r2, #52	; 0x34
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f026 fff4 	bl	802816c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001184:	4b45      	ldr	r3, [pc, #276]	; (800129c <MX_TIM8_Init+0x158>)
 8001186:	4a46      	ldr	r2, [pc, #280]	; (80012a0 <MX_TIM8_Init+0x15c>)
 8001188:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 18;
 800118a:	4b44      	ldr	r3, [pc, #272]	; (800129c <MX_TIM8_Init+0x158>)
 800118c:	2212      	movs	r2, #18
 800118e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001190:	4b42      	ldr	r3, [pc, #264]	; (800129c <MX_TIM8_Init+0x158>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 139;
 8001196:	4b41      	ldr	r3, [pc, #260]	; (800129c <MX_TIM8_Init+0x158>)
 8001198:	228b      	movs	r2, #139	; 0x8b
 800119a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119c:	4b3f      	ldr	r3, [pc, #252]	; (800129c <MX_TIM8_Init+0x158>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80011a2:	4b3e      	ldr	r3, [pc, #248]	; (800129c <MX_TIM8_Init+0x158>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a8:	4b3c      	ldr	r3, [pc, #240]	; (800129c <MX_TIM8_Init+0x158>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80011ae:	483b      	ldr	r0, [pc, #236]	; (800129c <MX_TIM8_Init+0x158>)
 80011b0:	f00e ff54 	bl	801005c <HAL_TIM_Base_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80011ba:	f000 f981 	bl	80014c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c2:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80011c4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011c8:	4619      	mov	r1, r3
 80011ca:	4834      	ldr	r0, [pc, #208]	; (800129c <MX_TIM8_Init+0x158>)
 80011cc:	f00f fc86 	bl	8010adc <HAL_TIM_ConfigClockSource>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80011d6:	f000 f973 	bl	80014c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80011da:	4830      	ldr	r0, [pc, #192]	; (800129c <MX_TIM8_Init+0x158>)
 80011dc:	f00f f836 	bl	801024c <HAL_TIM_PWM_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80011e6:	f000 f96b 	bl	80014c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011ee:	2300      	movs	r3, #0
 80011f0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80011f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011fa:	4619      	mov	r1, r3
 80011fc:	4827      	ldr	r0, [pc, #156]	; (800129c <MX_TIM8_Init+0x158>)
 80011fe:	f010 fb29 	bl	8011854 <HAL_TIMEx_MasterConfigSynchronization>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8001208:	f000 f95a 	bl	80014c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800120c:	2360      	movs	r3, #96	; 0x60
 800120e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 100;
 8001210:	2364      	movs	r3, #100	; 0x64
 8001212:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001214:	2300      	movs	r3, #0
 8001216:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001218:	2300      	movs	r3, #0
 800121a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800121c:	2300      	movs	r3, #0
 800121e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001220:	2300      	movs	r3, #0
 8001222:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001224:	2300      	movs	r3, #0
 8001226:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001228:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800122c:	2204      	movs	r2, #4
 800122e:	4619      	mov	r1, r3
 8001230:	481a      	ldr	r0, [pc, #104]	; (800129c <MX_TIM8_Init+0x158>)
 8001232:	f00f fb3f 	bl	80108b4 <HAL_TIM_PWM_ConfigChannel>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 800123c:	f000 f940 	bl	80014c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001254:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001258:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800125e:	2300      	movs	r3, #0
 8001260:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001266:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001270:	2300      	movs	r3, #0
 8001272:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001274:	2300      	movs	r3, #0
 8001276:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	4619      	mov	r1, r3
 800127c:	4807      	ldr	r0, [pc, #28]	; (800129c <MX_TIM8_Init+0x158>)
 800127e:	f010 fbab 	bl	80119d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 8001288:	f000 f91a 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800128c:	4803      	ldr	r0, [pc, #12]	; (800129c <MX_TIM8_Init+0x158>)
 800128e:	f000 faa7 	bl	80017e0 <HAL_TIM_MspPostInit>

}
 8001292:	bf00      	nop
 8001294:	3770      	adds	r7, #112	; 0x70
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20152f68 	.word	0x20152f68
 80012a0:	40013400 	.word	0x40013400

080012a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	; 0x30
 80012a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012aa:	f107 031c 	add.w	r3, r7, #28
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
 80012b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ba:	4b71      	ldr	r3, [pc, #452]	; (8001480 <MX_GPIO_Init+0x1dc>)
 80012bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012c0:	4a6f      	ldr	r2, [pc, #444]	; (8001480 <MX_GPIO_Init+0x1dc>)
 80012c2:	f043 0310 	orr.w	r3, r3, #16
 80012c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012ca:	4b6d      	ldr	r3, [pc, #436]	; (8001480 <MX_GPIO_Init+0x1dc>)
 80012cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012d0:	f003 0310 	and.w	r3, r3, #16
 80012d4:	61bb      	str	r3, [r7, #24]
 80012d6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d8:	4b69      	ldr	r3, [pc, #420]	; (8001480 <MX_GPIO_Init+0x1dc>)
 80012da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012de:	4a68      	ldr	r2, [pc, #416]	; (8001480 <MX_GPIO_Init+0x1dc>)
 80012e0:	f043 0308 	orr.w	r3, r3, #8
 80012e4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012e8:	4b65      	ldr	r3, [pc, #404]	; (8001480 <MX_GPIO_Init+0x1dc>)
 80012ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012f6:	4b62      	ldr	r3, [pc, #392]	; (8001480 <MX_GPIO_Init+0x1dc>)
 80012f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012fc:	4a60      	ldr	r2, [pc, #384]	; (8001480 <MX_GPIO_Init+0x1dc>)
 80012fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001302:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001306:	4b5e      	ldr	r3, [pc, #376]	; (8001480 <MX_GPIO_Init+0x1dc>)
 8001308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800130c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001314:	4b5a      	ldr	r3, [pc, #360]	; (8001480 <MX_GPIO_Init+0x1dc>)
 8001316:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800131a:	4a59      	ldr	r2, [pc, #356]	; (8001480 <MX_GPIO_Init+0x1dc>)
 800131c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001320:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001324:	4b56      	ldr	r3, [pc, #344]	; (8001480 <MX_GPIO_Init+0x1dc>)
 8001326:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800132a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001332:	4b53      	ldr	r3, [pc, #332]	; (8001480 <MX_GPIO_Init+0x1dc>)
 8001334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001338:	4a51      	ldr	r2, [pc, #324]	; (8001480 <MX_GPIO_Init+0x1dc>)
 800133a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800133e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001342:	4b4f      	ldr	r3, [pc, #316]	; (8001480 <MX_GPIO_Init+0x1dc>)
 8001344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001348:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001350:	4b4b      	ldr	r3, [pc, #300]	; (8001480 <MX_GPIO_Init+0x1dc>)
 8001352:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001356:	4a4a      	ldr	r2, [pc, #296]	; (8001480 <MX_GPIO_Init+0x1dc>)
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001360:	4b47      	ldr	r3, [pc, #284]	; (8001480 <MX_GPIO_Init+0x1dc>)
 8001362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800136e:	4b44      	ldr	r3, [pc, #272]	; (8001480 <MX_GPIO_Init+0x1dc>)
 8001370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001374:	4a42      	ldr	r2, [pc, #264]	; (8001480 <MX_GPIO_Init+0x1dc>)
 8001376:	f043 0320 	orr.w	r3, r3, #32
 800137a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800137e:	4b40      	ldr	r3, [pc, #256]	; (8001480 <MX_GPIO_Init+0x1dc>)
 8001380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001384:	f003 0320 	and.w	r3, r3, #32
 8001388:	603b      	str	r3, [r7, #0]
 800138a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	2103      	movs	r1, #3
 8001390:	483c      	ldr	r0, [pc, #240]	; (8001484 <MX_GPIO_Init+0x1e0>)
 8001392:	f008 fd33 	bl	8009dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8001396:	2201      	movs	r2, #1
 8001398:	2120      	movs	r1, #32
 800139a:	483b      	ldr	r0, [pc, #236]	; (8001488 <MX_GPIO_Init+0x1e4>)
 800139c:	f008 fd2e 	bl	8009dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DSI_PWR_ON_GPIO_Port, DSI_PWR_ON_Pin, GPIO_PIN_RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2120      	movs	r1, #32
 80013a4:	4839      	ldr	r0, [pc, #228]	; (800148c <MX_GPIO_Init+0x1e8>)
 80013a6:	f008 fd29 	bl	8009dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, VSYNC_FREQ_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2103      	movs	r1, #3
 80013ae:	4836      	ldr	r0, [pc, #216]	; (8001488 <MX_GPIO_Init+0x1e4>)
 80013b0:	f008 fd24 	bl	8009dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MCU_ACTIVE_Pin|FRAME_RATE_Pin, GPIO_PIN_RESET);
 80013b4:	2200      	movs	r2, #0
 80013b6:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80013ba:	4835      	ldr	r0, [pc, #212]	; (8001490 <MX_GPIO_Init+0x1ec>)
 80013bc:	f008 fd1e 	bl	8009dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80013c0:	2303      	movs	r3, #3
 80013c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c4:	2301      	movs	r3, #1
 80013c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013cc:	2303      	movs	r3, #3
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013d0:	f107 031c 	add.w	r3, r7, #28
 80013d4:	4619      	mov	r1, r3
 80013d6:	482b      	ldr	r0, [pc, #172]	; (8001484 <MX_GPIO_Init+0x1e0>)
 80013d8:	f008 fa42 	bl	8009860 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin VSYNC_FREQ_Pin RENDER_TIME_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|VSYNC_FREQ_Pin|RENDER_TIME_Pin;
 80013dc:	2323      	movs	r3, #35	; 0x23
 80013de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e0:	2301      	movs	r3, #1
 80013e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013e8:	2302      	movs	r3, #2
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ec:	f107 031c 	add.w	r3, r7, #28
 80013f0:	4619      	mov	r1, r3
 80013f2:	4825      	ldr	r0, [pc, #148]	; (8001488 <MX_GPIO_Init+0x1e4>)
 80013f4:	f008 fa34 	bl	8009860 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_PWR_ON_Pin */
  GPIO_InitStruct.Pin = DSI_PWR_ON_Pin;
 80013f8:	2320      	movs	r3, #32
 80013fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fc:	2301      	movs	r3, #1
 80013fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DSI_PWR_ON_GPIO_Port, &GPIO_InitStruct);
 8001408:	f107 031c 	add.w	r3, r7, #28
 800140c:	4619      	mov	r1, r3
 800140e:	481f      	ldr	r0, [pc, #124]	; (800148c <MX_GPIO_Init+0x1e8>)
 8001410:	f008 fa26 	bl	8009860 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001414:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001418:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141a:	2300      	movs	r3, #0
 800141c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001422:	f107 031c 	add.w	r3, r7, #28
 8001426:	4619      	mov	r1, r3
 8001428:	481a      	ldr	r0, [pc, #104]	; (8001494 <MX_GPIO_Init+0x1f0>)
 800142a:	f008 fa19 	bl	8009860 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TOUCH_INT_Pin */
  GPIO_InitStruct.Pin = DSI_TOUCH_INT_Pin;
 800142e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001432:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001434:	4b18      	ldr	r3, [pc, #96]	; (8001498 <MX_GPIO_Init+0x1f4>)
 8001436:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001438:	2301      	movs	r3, #1
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DSI_TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 800143c:	f107 031c 	add.w	r3, r7, #28
 8001440:	4619      	mov	r1, r3
 8001442:	4810      	ldr	r0, [pc, #64]	; (8001484 <MX_GPIO_Init+0x1e0>)
 8001444:	f008 fa0c 	bl	8009860 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_ACTIVE_Pin FRAME_RATE_Pin */
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin|FRAME_RATE_Pin;
 8001448:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800144c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144e:	2301      	movs	r3, #1
 8001450:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001456:	2302      	movs	r3, #2
 8001458:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800145a:	f107 031c 	add.w	r3, r7, #28
 800145e:	4619      	mov	r1, r3
 8001460:	480b      	ldr	r0, [pc, #44]	; (8001490 <MX_GPIO_Init+0x1ec>)
 8001462:	f008 f9fd 	bl	8009860 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI8_IRQn, 10, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	210a      	movs	r1, #10
 800146a:	2013      	movs	r0, #19
 800146c:	f006 f850 	bl	8007510 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 8001470:	2013      	movs	r0, #19
 8001472:	f006 f867 	bl	8007544 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001476:	bf00      	nop
 8001478:	3730      	adds	r7, #48	; 0x30
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	46020c00 	.word	0x46020c00
 8001484:	42021000 	.word	0x42021000
 8001488:	42020c00 	.word	0x42020c00
 800148c:	42022000 	.word	0x42022000
 8001490:	42021400 	.word	0x42021400
 8001494:	42020800 	.word	0x42020800
 8001498:	10210000 	.word	0x10210000

0800149c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a04      	ldr	r2, [pc, #16]	; (80014bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d101      	bne.n	80014b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014ae:	f005 ff33 	bl	8007318 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40001000 	.word	0x40001000

080014c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c4:	b672      	cpsid	i
}
 80014c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <Error_Handler+0x8>
	...

080014cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <HAL_MspInit+0x30>)
 80014d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014d8:	4a08      	ldr	r2, [pc, #32]	; (80014fc <HAL_MspInit+0x30>)
 80014da:	f043 0304 	orr.w	r3, r3, #4
 80014de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_MspInit+0x30>)
 80014e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	46020c00 	.word	0x46020c00

08001500 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a0b      	ldr	r2, [pc, #44]	; (800153c <HAL_CRC_MspInit+0x3c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d10e      	bne.n	8001530 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <HAL_CRC_MspInit+0x40>)
 8001514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001518:	4a09      	ldr	r2, [pc, #36]	; (8001540 <HAL_CRC_MspInit+0x40>)
 800151a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800151e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001522:	4b07      	ldr	r3, [pc, #28]	; (8001540 <HAL_CRC_MspInit+0x40>)
 8001524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001528:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001530:	bf00      	nop
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	40023000 	.word	0x40023000
 8001540:	46020c00 	.word	0x46020c00

08001544 <HAL_DCACHE_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcache: DCACHE handle pointer
* @retval None
*/
void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef* hdcache)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  if(hdcache->Instance==DCACHE1)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a16      	ldr	r2, [pc, #88]	; (80015ac <HAL_DCACHE_MspInit+0x68>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d10f      	bne.n	8001576 <HAL_DCACHE_MspInit+0x32>
  {
  /* USER CODE BEGIN DCACHE1_MspInit 0 */

  /* USER CODE END DCACHE1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 8001556:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <HAL_DCACHE_MspInit+0x6c>)
 8001558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800155c:	4a14      	ldr	r2, [pc, #80]	; (80015b0 <HAL_DCACHE_MspInit+0x6c>)
 800155e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001562:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_DCACHE_MspInit+0x6c>)
 8001568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800156c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DCACHE2_MspInit 1 */

  /* USER CODE END DCACHE2_MspInit 1 */
  }

}
 8001574:	e013      	b.n	800159e <HAL_DCACHE_MspInit+0x5a>
  else if(hdcache->Instance==DCACHE2)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a0e      	ldr	r2, [pc, #56]	; (80015b4 <HAL_DCACHE_MspInit+0x70>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d10e      	bne.n	800159e <HAL_DCACHE_MspInit+0x5a>
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_DCACHE_MspInit+0x6c>)
 8001582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <HAL_DCACHE_MspInit+0x6c>)
 8001588:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800158c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <HAL_DCACHE_MspInit+0x6c>)
 8001592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001596:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
}
 800159e:	bf00      	nop
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40031400 	.word	0x40031400
 80015b0:	46020c00 	.word	0x46020c00
 80015b4:	40031800 	.word	0x40031800

080015b8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <HAL_DMA2D_MspInit+0x48>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d116      	bne.n	80015f8 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <HAL_DMA2D_MspInit+0x4c>)
 80015cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015d0:	4a0c      	ldr	r2, [pc, #48]	; (8001604 <HAL_DMA2D_MspInit+0x4c>)
 80015d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80015da:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <HAL_DMA2D_MspInit+0x4c>)
 80015dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2107      	movs	r1, #7
 80015ec:	2076      	movs	r0, #118	; 0x76
 80015ee:	f005 ff8f 	bl	8007510 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80015f2:	2076      	movs	r0, #118	; 0x76
 80015f4:	f005 ffa6 	bl	8007544 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	4002b000 	.word	0x4002b000
 8001604:	46020c00 	.word	0x46020c00

08001608 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0b      	ldr	r2, [pc, #44]	; (8001644 <HAL_DSI_MspInit+0x3c>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d10e      	bne.n	8001638 <HAL_DSI_MspInit+0x30>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 800161a:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <HAL_DSI_MspInit+0x40>)
 800161c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001620:	4a09      	ldr	r2, [pc, #36]	; (8001648 <HAL_DSI_MspInit+0x40>)
 8001622:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001626:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800162a:	4b07      	ldr	r3, [pc, #28]	; (8001648 <HAL_DSI_MspInit+0x40>)
 800162c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8001638:	bf00      	nop
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	40016c00 	.word	0x40016c00
 8001648:	46020c00 	.word	0x46020c00

0800164c <HAL_GPU2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hgpu2d: GPU2D handle pointer
* @retval None
*/
void HAL_GPU2D_MspInit(GPU2D_HandleTypeDef* hgpu2d)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  if(hgpu2d->Instance==GPU2D)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a24      	ldr	r2, [pc, #144]	; (80016ec <HAL_GPU2D_MspInit+0xa0>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d142      	bne.n	80016e4 <HAL_GPU2D_MspInit+0x98>
  {
  /* USER CODE BEGIN GPU2D_MspInit 0 */

  /* USER CODE END GPU2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GPU2D_CLK_ENABLE();
 800165e:	4b24      	ldr	r3, [pc, #144]	; (80016f0 <HAL_GPU2D_MspInit+0xa4>)
 8001660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001664:	4a22      	ldr	r2, [pc, #136]	; (80016f0 <HAL_GPU2D_MspInit+0xa4>)
 8001666:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800166a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800166e:	4b20      	ldr	r3, [pc, #128]	; (80016f0 <HAL_GPU2D_MspInit+0xa4>)
 8001670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001674:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 800167c:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <HAL_GPU2D_MspInit+0xa4>)
 800167e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001682:	4a1b      	ldr	r2, [pc, #108]	; (80016f0 <HAL_GPU2D_MspInit+0xa4>)
 8001684:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800168c:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <HAL_GPU2D_MspInit+0xa4>)
 800168e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001692:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]
    /* GPU2D interrupt Init */
    HAL_NVIC_SetPriority(GPU2D_IRQn, 7, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2107      	movs	r1, #7
 800169e:	2084      	movs	r0, #132	; 0x84
 80016a0:	f005 ff36 	bl	8007510 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_IRQn);
 80016a4:	2084      	movs	r0, #132	; 0x84
 80016a6:	f005 ff4d 	bl	8007544 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPU2D_ER_IRQn, 7, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2107      	movs	r1, #7
 80016ae:	2085      	movs	r0, #133	; 0x85
 80016b0:	f005 ff2e 	bl	8007510 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_ER_IRQn);
 80016b4:	2085      	movs	r0, #133	; 0x85
 80016b6:	f005 ff45 	bl	8007544 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN GPU2D_MspInit 1 */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ba:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <HAL_GPU2D_MspInit+0xa4>)
 80016bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80016c0:	4a0b      	ldr	r2, [pc, #44]	; (80016f0 <HAL_GPU2D_MspInit+0xa4>)
 80016c2:	f043 0302 	orr.w	r3, r3, #2
 80016c6:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <HAL_GPU2D_MspInit+0xa4>)
 80016cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
    SYSCFG->CFGR1 &= ~(1L << 28);
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_GPU2D_MspInit+0xa8>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	4a05      	ldr	r2, [pc, #20]	; (80016f4 <HAL_GPU2D_MspInit+0xa8>)
 80016de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016e2:	6053      	str	r3, [r2, #4]
  /* USER CODE END GPU2D_MspInit 1 */
  }

}
 80016e4:	bf00      	nop
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	4002f000 	.word	0x4002f000
 80016f0:	46020c00 	.word	0x46020c00
 80016f4:	46000400 	.word	0x46000400

080016f8 <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b0c0      	sub	sp, #256	; 0x100
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001710:	f107 0308 	add.w	r3, r7, #8
 8001714:	22e0      	movs	r2, #224	; 0xe0
 8001716:	2100      	movs	r1, #0
 8001718:	4618      	mov	r0, r3
 800171a:	f026 fd27 	bl	802816c <memset>
  /* USER CODE BEGIN HSPI1_MspInit 1 */
#endif
  /* USER CODE END HSPI1_MspInit 1 */
  }

}
 800171e:	bf00      	nop
 8001720:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <HAL_XSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspDeInit(XSPI_HandleTypeDef* hxspi)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HSPI1_MspDeInit 1 */
#endif
  /* USER CODE END HSPI1_MspDeInit 1 */
  }

}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a12      	ldr	r2, [pc, #72]	; (8001794 <HAL_LTDC_MspInit+0x58>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d11e      	bne.n	800178c <HAL_LTDC_MspInit+0x50>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800174e:	4b12      	ldr	r3, [pc, #72]	; (8001798 <HAL_LTDC_MspInit+0x5c>)
 8001750:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001754:	4a10      	ldr	r2, [pc, #64]	; (8001798 <HAL_LTDC_MspInit+0x5c>)
 8001756:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800175a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800175e:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <HAL_LTDC_MspInit+0x5c>)
 8001760:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001764:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 800176c:	2200      	movs	r2, #0
 800176e:	2107      	movs	r1, #7
 8001770:	2087      	movs	r0, #135	; 0x87
 8001772:	f005 fecd 	bl	8007510 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001776:	2087      	movs	r0, #135	; 0x87
 8001778:	f005 fee4 	bl	8007544 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 7, 0);
 800177c:	2200      	movs	r2, #0
 800177e:	2107      	movs	r1, #7
 8001780:	2088      	movs	r0, #136	; 0x88
 8001782:	f005 fec5 	bl	8007510 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 8001786:	2088      	movs	r0, #136	; 0x88
 8001788:	f005 fedc 	bl	8007544 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800178c:	bf00      	nop
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40016800 	.word	0x40016800
 8001798:	46020c00 	.word	0x46020c00

0800179c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <HAL_TIM_Base_MspInit+0x3c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d10e      	bne.n	80017cc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_TIM_Base_MspInit+0x40>)
 80017b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80017b4:	4a09      	ldr	r2, [pc, #36]	; (80017dc <HAL_TIM_Base_MspInit+0x40>)
 80017b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017ba:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80017be:	4b07      	ldr	r3, [pc, #28]	; (80017dc <HAL_TIM_Base_MspInit+0x40>)
 80017c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80017c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	40013400 	.word	0x40013400
 80017dc:	46020c00 	.word	0x46020c00

080017e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a12      	ldr	r2, [pc, #72]	; (8001848 <HAL_TIM_MspPostInit+0x68>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d11e      	bne.n	8001840 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001802:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_TIM_MspPostInit+0x6c>)
 8001804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001808:	4a10      	ldr	r2, [pc, #64]	; (800184c <HAL_TIM_MspPostInit+0x6c>)
 800180a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800180e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <HAL_TIM_MspPostInit+0x6c>)
 8001814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PI6     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = DSI_BL_CTRL_Pin;
 8001820:	2340      	movs	r3, #64	; 0x40
 8001822:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800182c:	2302      	movs	r3, #2
 800182e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001830:	2303      	movs	r3, #3
 8001832:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DSI_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001834:	f107 030c 	add.w	r3, r7, #12
 8001838:	4619      	mov	r1, r3
 800183a:	4805      	ldr	r0, [pc, #20]	; (8001850 <HAL_TIM_MspPostInit+0x70>)
 800183c:	f008 f810 	bl	8009860 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001840:	bf00      	nop
 8001842:	3720      	adds	r7, #32
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40013400 	.word	0x40013400
 800184c:	46020c00 	.word	0x46020c00
 8001850:	42022000 	.word	0x42022000

08001854 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08e      	sub	sp, #56	; 0x38
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001864:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <HAL_InitTick+0xcc>)
 8001866:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800186a:	4a2d      	ldr	r2, [pc, #180]	; (8001920 <HAL_InitTick+0xcc>)
 800186c:	f043 0310 	orr.w	r3, r3, #16
 8001870:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001874:	4b2a      	ldr	r3, [pc, #168]	; (8001920 <HAL_InitTick+0xcc>)
 8001876:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800187a:	f003 0310 	and.w	r3, r3, #16
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001882:	f107 0210 	add.w	r2, r7, #16
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4611      	mov	r1, r2
 800188c:	4618      	mov	r0, r3
 800188e:	f00b faff 	bl	800ce90 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001892:	f00b fac1 	bl	800ce18 <HAL_RCC_GetPCLK1Freq>
 8001896:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800189a:	4a22      	ldr	r2, [pc, #136]	; (8001924 <HAL_InitTick+0xd0>)
 800189c:	fba2 2303 	umull	r2, r3, r2, r3
 80018a0:	0c9b      	lsrs	r3, r3, #18
 80018a2:	3b01      	subs	r3, #1
 80018a4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80018a6:	4b20      	ldr	r3, [pc, #128]	; (8001928 <HAL_InitTick+0xd4>)
 80018a8:	4a20      	ldr	r2, [pc, #128]	; (800192c <HAL_InitTick+0xd8>)
 80018aa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80018ac:	4b1e      	ldr	r3, [pc, #120]	; (8001928 <HAL_InitTick+0xd4>)
 80018ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018b2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80018b4:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <HAL_InitTick+0xd4>)
 80018b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80018ba:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <HAL_InitTick+0xd4>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c0:	4b19      	ldr	r3, [pc, #100]	; (8001928 <HAL_InitTick+0xd4>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80018c6:	4818      	ldr	r0, [pc, #96]	; (8001928 <HAL_InitTick+0xd4>)
 80018c8:	f00e fbc8 	bl	801005c <HAL_TIM_Base_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 80018d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d118      	bne.n	800190c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80018da:	4813      	ldr	r0, [pc, #76]	; (8001928 <HAL_InitTick+0xd4>)
 80018dc:	f00e fc16 	bl	801010c <HAL_TIM_Base_Start_IT>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 80018e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10e      	bne.n	800190c <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b0f      	cmp	r3, #15
 80018f2:	d808      	bhi.n	8001906 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80018f4:	2200      	movs	r2, #0
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	2031      	movs	r0, #49	; 0x31
 80018fa:	f005 fe09 	bl	8007510 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018fe:	4a0c      	ldr	r2, [pc, #48]	; (8001930 <HAL_InitTick+0xdc>)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6013      	str	r3, [r2, #0]
 8001904:	e002      	b.n	800190c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800190c:	2031      	movs	r0, #49	; 0x31
 800190e:	f005 fe19 	bl	8007544 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8001912:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001916:	4618      	mov	r0, r3
 8001918:	3738      	adds	r7, #56	; 0x38
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	46020c00 	.word	0x46020c00
 8001924:	431bde83 	.word	0x431bde83
 8001928:	20152fb4 	.word	0x20152fb4
 800192c:	40001000 	.word	0x40001000
 8001930:	2000004c 	.word	0x2000004c

08001934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <NMI_Handler+0x4>

0800193a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800193e:	e7fe      	b.n	800193e <HardFault_Handler+0x4>

08001940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <MemManage_Handler+0x4>

08001946 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800194a:	e7fe      	b.n	800194a <BusFault_Handler+0x4>

0800194c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <UsageFault_Handler+0x4>

08001952 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <EXTI8_IRQHandler>:

/**
  * @brief This function handles EXTI Line8 interrupt.
  */
void EXTI8_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI8_IRQn 0 */

  /* USER CODE END EXTI8_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DSI_TOUCH_INT_Pin);
 8001964:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001968:	f008 fad4 	bl	8009f14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI8_IRQn 1 */

  /* USER CODE END EXTI8_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <TIM6_IRQHandler+0x10>)
 8001976:	f00e fe1d 	bl	80105b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20152fb4 	.word	0x20152fb4

08001984 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001988:	4802      	ldr	r0, [pc, #8]	; (8001994 <DMA2D_IRQHandler+0x10>)
 800198a:	f006 fc6e 	bl	800826a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20152e30 	.word	0x20152e30

08001998 <GPU2D_IRQHandler>:

/**
  * @brief This function handles GPU2D global interrupt.
  */
void GPU2D_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_IRQn 0 */

  /* USER CODE END GPU2D_IRQn 0 */
  HAL_GPU2D_IRQHandler(&hgpu2d);
 800199c:	4802      	ldr	r0, [pc, #8]	; (80019a8 <GPU2D_IRQHandler+0x10>)
 800199e:	f008 fb3a 	bl	800a016 <HAL_GPU2D_IRQHandler>
  /* USER CODE BEGIN GPU2D_IRQn 1 */

  /* USER CODE END GPU2D_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20152eb4 	.word	0x20152eb4

080019ac <GPU2D_ER_IRQHandler>:

/**
  * @brief This function handles GPU2D Error interrupt.
  */
void GPU2D_ER_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_ER_IRQn 0 */

  /* USER CODE END GPU2D_ER_IRQn 0 */
  HAL_GPU2D_ER_IRQHandler(&hgpu2d);
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <GPU2D_ER_IRQHandler+0x10>)
 80019b2:	f008 fb56 	bl	800a062 <HAL_GPU2D_ER_IRQHandler>
  /* USER CODE BEGIN GPU2D_ER_IRQn 1 */

  /* USER CODE END GPU2D_ER_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20152eb4 	.word	0x20152eb4

080019c0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80019c4:	4802      	ldr	r0, [pc, #8]	; (80019d0 <LTDC_IRQHandler+0x10>)
 80019c6:	f009 fc3f 	bl	800b248 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20152ec0 	.word	0x20152ec0

080019d4 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LCD-TFT Error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80019d8:	4802      	ldr	r0, [pc, #8]	; (80019e4 <LTDC_ER_IRQHandler+0x10>)
 80019da:	f009 fc35 	bl	800b248 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20152ec0 	.word	0x20152ec0

080019e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return 1;
 80019ec:	2301      	movs	r3, #1
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <_kill>:

int _kill(int pid, int sig)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a02:	f026 fb67 	bl	80280d4 <__errno>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2216      	movs	r2, #22
 8001a0a:	601a      	str	r2, [r3, #0]
  return -1;
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <_exit>:

void _exit (int status)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a20:	f04f 31ff 	mov.w	r1, #4294967295
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff ffe7 	bl	80019f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a2a:	e7fe      	b.n	8001a2a <_exit+0x12>

08001a2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	e00a      	b.n	8001a54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a3e:	e000      	b.n	8001a42 <_read+0x16>
 8001a40:	bf00      	nop
 8001a42:	4601      	mov	r1, r0
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	60ba      	str	r2, [r7, #8]
 8001a4a:	b2ca      	uxtb	r2, r1
 8001a4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	3301      	adds	r3, #1
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	dbf0      	blt.n	8001a3e <_read+0x12>
  }

  return len;
 8001a5c:	687b      	ldr	r3, [r7, #4]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b086      	sub	sp, #24
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	60f8      	str	r0, [r7, #12]
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	e009      	b.n	8001a8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	60ba      	str	r2, [r7, #8]
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	e000      	b.n	8001a86 <_write+0x20>
 8001a84:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	dbf1      	blt.n	8001a78 <_write+0x12>
  }
  return len;
 8001a94:	687b      	ldr	r3, [r7, #4]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <_close>:

int _close(int file)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ac6:	605a      	str	r2, [r3, #4]
  return 0;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <_isatty>:

int _isatty(int file)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ade:	2301      	movs	r3, #1
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b10:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <_sbrk+0x5c>)
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <_sbrk+0x60>)
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <_sbrk+0x64>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d102      	bne.n	8001b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b24:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <_sbrk+0x64>)
 8001b26:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <_sbrk+0x68>)
 8001b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <_sbrk+0x64>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d207      	bcs.n	8001b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b38:	f026 facc 	bl	80280d4 <__errno>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	220c      	movs	r2, #12
 8001b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b42:	f04f 33ff 	mov.w	r3, #4294967295
 8001b46:	e009      	b.n	8001b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b48:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <_sbrk+0x64>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b4e:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <_sbrk+0x64>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	4a05      	ldr	r2, [pc, #20]	; (8001b6c <_sbrk+0x64>)
 8001b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20270000 	.word	0x20270000
 8001b68:	00001000 	.word	0x00001000
 8001b6c:	20153000 	.word	0x20153000
 8001b70:	20197e68 	.word	0x20197e68

08001b74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001b74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bac <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b78:	f005 fb68 	bl	800724c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b7c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b7e:	e003      	b.n	8001b88 <LoopCopyDataInit>

08001b80 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b82:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b84:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b86:	3104      	adds	r1, #4

08001b88 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b88:	480a      	ldr	r0, [pc, #40]	; (8001bb4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b8c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b8e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b90:	d3f6      	bcc.n	8001b80 <CopyDataInit>
	ldr	r2, =_sbss
 8001b92:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b94:	e002      	b.n	8001b9c <LoopFillZerobss>

08001b96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b96:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b98:	f842 3b04 	str.w	r3, [r2], #4

08001b9c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b9c:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <LoopForever+0x16>)
	cmp	r2, r3
 8001b9e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ba0:	d3f9      	bcc.n	8001b96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ba2:	f026 faaf 	bl	8028104 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ba6:	f7fe fcf8 	bl	800059a <main>

08001baa <LoopForever>:

LoopForever:
    b LoopForever
 8001baa:	e7fe      	b.n	8001baa <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001bac:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8001bb0:	0802c39c 	.word	0x0802c39c
	ldr	r0, =_sdata
 8001bb4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001bb8:	2000012c 	.word	0x2000012c
	ldr	r2, =_sbss
 8001bbc:	20151930 	.word	0x20151930
	ldr	r3, = _ebss
 8001bc0:	20197e64 	.word	0x20197e64

08001bc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bc4:	e7fe      	b.n	8001bc4 <ADC1_2_IRQHandler>

08001bc6 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 8001bca:	f000 fe65 	bl	8002898 <touchgfx_components_init>
  touchgfx_init();
 8001bce:	f000 fdeb 	bl	80027a8 <touchgfx_init>
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <MX_TouchGFX_Init>:

/**
 * Create TouchGFX Thread
 */
UINT MX_TouchGFX_Init(VOID *memory_ptr)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08c      	sub	sp, #48	; 0x30
 8001bdc:	af08      	add	r7, sp, #32
 8001bde:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
  CHAR *pointer = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60bb      	str	r3, [r7, #8]

  /* Allocate the stack for TouchGFX Thread.  */
  if (tx_byte_allocate((TX_BYTE_POOL*)memory_ptr, (VOID **) &pointer,
 8001be8:	f107 0108 	add.w	r1, r7, #8
 8001bec:	2300      	movs	r3, #0
 8001bee:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f013 f874 	bl	8014ce0 <_txe_byte_allocate>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d002      	beq.n	8001c04 <MX_TouchGFX_Init+0x2c>
                       TOUCHGFX_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    ret = TX_POOL_ERROR;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	e019      	b.n	8001c38 <MX_TouchGFX_Init+0x60>
  }

  /* Create TouchGFX Thread */
  else if (tx_thread_create(&TouchGFXThread, (CHAR *)"TouchGFX", TouchGFX_Task, 0,
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	22b0      	movs	r2, #176	; 0xb0
 8001c08:	9206      	str	r2, [sp, #24]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	9205      	str	r2, [sp, #20]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	9204      	str	r2, [sp, #16]
 8001c12:	2205      	movs	r2, #5
 8001c14:	9203      	str	r2, [sp, #12]
 8001c16:	2205      	movs	r2, #5
 8001c18:	9202      	str	r2, [sp, #8]
 8001c1a:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001c1e:	9201      	str	r2, [sp, #4]
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	2300      	movs	r3, #0
 8001c24:	4a07      	ldr	r2, [pc, #28]	; (8001c44 <MX_TouchGFX_Init+0x6c>)
 8001c26:	4908      	ldr	r1, [pc, #32]	; (8001c48 <MX_TouchGFX_Init+0x70>)
 8001c28:	4808      	ldr	r0, [pc, #32]	; (8001c4c <MX_TouchGFX_Init+0x74>)
 8001c2a:	f013 fba7 	bl	801537c <_txe_thread_create>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TouchGFX_Init+0x60>
                       pointer, TOUCHGFX_STACK_SIZE,
                       5, 5,
                       TX_NO_TIME_SLICE, TX_AUTO_START) != TX_SUCCESS)
  {
    ret = TX_THREAD_ERROR;
 8001c34:	230e      	movs	r3, #14
 8001c36:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001c38:	68fb      	ldr	r3, [r7, #12]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	08001c51 	.word	0x08001c51
 8001c48:	080295c8 	.word	0x080295c8
 8001c4c:	20153004 	.word	0x20153004

08001c50 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(unsigned long thread_input)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8001c58:	f000 fe28 	bl	80028ac <touchgfx_taskEntry>
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <_ZN8touchgfx7Buttons4initEv>:
    BUTTON_USER  = '5',
} JOYState_TypeDef;

void Buttons::init()
{
}
 8001c64:	4770      	bx	lr
	...

08001c68 <_ZN8touchgfx7Buttons6sampleEv>:

unsigned int Buttons::sample()
{
    unsigned int buttonValue = BUTTON_NONE;

    if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_SET)
 8001c68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
{
 8001c6c:	b508      	push	{r3, lr}
    if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_SET)
 8001c6e:	4804      	ldr	r0, [pc, #16]	; (8001c80 <_ZN8touchgfx7Buttons6sampleEv+0x18>)
 8001c70:	f008 f8ac 	bl	8009dcc <HAL_GPIO_ReadPin>
        buttonValue = BUTTON_USER;
    }

    if (buttonValue == BUTTON_NONE)
    {
        return 0;
 8001c74:	2801      	cmp	r0, #1
    }

    return static_cast<unsigned int>(buttonValue);
}
 8001c76:	bf0c      	ite	eq
 8001c78:	2035      	moveq	r0, #53	; 0x35
 8001c7a:	2000      	movne	r0, #0
 8001c7c:	bd08      	pop	{r3, pc}
 8001c7e:	bf00      	nop
 8001c80:	42020800 	.word	0x42020800

08001c84 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8001c84:	6840      	ldr	r0, [r0, #4]
    }
 8001c86:	4770      	bx	lr

08001c88 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001c88:	6041      	str	r1, [r0, #4]
    }
 8001c8a:	4770      	bx	lr

08001c8c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8001c8c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001c90:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	; 0xdfc
 8001c94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c98:	f8c2 3dfc 	str.w	r3, [r2, #3580]	; 0xdfc
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 8001c9e:	4a06      	ldr	r2, [pc, #24]	; (8001cb8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8001ca0:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	f042 0201 	orr.w	r2, r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]
}
 8001cb2:	4770      	bx	lr
 8001cb4:	e0001000 	.word	0xe0001000
 8001cb8:	c5acce55 	.word	0xc5acce55

08001cbc <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001cbc:	1a51      	subs	r1, r2, r1
 8001cbe:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 8001cc2:	fbb1 f0f3 	udiv	r0, r1, r3
 8001cc6:	4770      	bx	lr

08001cc8 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 8001cc8:	4b01      	ldr	r3, [pc, #4]	; (8001cd0 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 8001cca:	6858      	ldr	r0, [r3, #4]
}
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e0001000 	.word	0xe0001000

08001cd4 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 8001cd4:	4770      	bx	lr

08001cd6 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 8001cd6:	b510      	push	{r4, lr}
 8001cd8:	4604      	mov	r4, r0
 8001cda:	210c      	movs	r1, #12
 8001cdc:	f026 f99b 	bl	8028016 <_ZdlPvj>
 8001ce0:	4620      	mov	r0, r4
 8001ce2:	bd10      	pop	{r4, pc}

08001ce4 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001ce4:	6803      	ldr	r3, [r0, #0]
{
 8001ce6:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001ce8:	691b      	ldr	r3, [r3, #16]
{
 8001cea:	4604      	mov	r4, r0
    if (active) //idle task sched out
 8001cec:	b131      	cbz	r1, 8001cfc <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001cee:	4798      	blx	r3
 8001cf0:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 8001cf2:	6863      	ldr	r3, [r4, #4]
 8001cf4:	1a9b      	subs	r3, r3, r2
 8001cf6:	4418      	add	r0, r3
 8001cf8:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001cfa:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 8001cfc:	4798      	blx	r3
 8001cfe:	60a0      	str	r0, [r4, #8]
}
 8001d00:	e7fb      	b.n	8001cfa <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>

08001d02 <_ZN8touchgfx16ButtonController5resetEv>:
    virtual bool sample(uint8_t& key) = 0;

    /** Resets button controller. Does nothing in the default implementation. */
    virtual void reset()
    {
    }
 8001d02:	4770      	bx	lr

08001d04 <_ZN8touchgfx10KeySamplerD1Ev>:
public:
    KeySampler()
    {
        init();
    }
    virtual ~KeySampler() {}
 8001d04:	4770      	bx	lr

08001d06 <_ZN8touchgfx10KeySampler4initEv>:

using namespace touchgfx;

void KeySampler::init()
{
    previousState = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	7103      	strb	r3, [r0, #4]
    Buttons::init();
 8001d0a:	f7ff bfab 	b.w	8001c64 <_ZN8touchgfx7Buttons4initEv>
	...

08001d10 <_ZN8touchgfx10KeySampler6sampleERh>:
}

bool KeySampler::sample(uint8_t& key)
{
 8001d10:	b570      	push	{r4, r5, r6, lr}
 8001d12:	4604      	mov	r4, r0
 8001d14:	460d      	mov	r5, r1
    static uint32_t last_time = 0;

    if ((HAL_GetTick() - last_time) > 800)
 8001d16:	f005 fb13 	bl	8007340 <HAL_GetTick>
 8001d1a:	4e0b      	ldr	r6, [pc, #44]	; (8001d48 <_ZN8touchgfx10KeySampler6sampleERh+0x38>)
 8001d1c:	6833      	ldr	r3, [r6, #0]
 8001d1e:	1ac0      	subs	r0, r0, r3
 8001d20:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
 8001d24:	d904      	bls.n	8001d30 <_ZN8touchgfx10KeySampler6sampleERh+0x20>
    {
        last_time = HAL_GetTick();
 8001d26:	f005 fb0b 	bl	8007340 <HAL_GetTick>
        previousState = 0;
 8001d2a:	2300      	movs	r3, #0
        last_time = HAL_GetTick();
 8001d2c:	6030      	str	r0, [r6, #0]
        previousState = 0;
 8001d2e:	7123      	strb	r3, [r4, #4]
    }

    key = static_cast<uint8_t>(Buttons::sample());
 8001d30:	f7ff ff9a 	bl	8001c68 <_ZN8touchgfx7Buttons6sampleEv>
 8001d34:	b2c0      	uxtb	r0, r0
 8001d36:	7028      	strb	r0, [r5, #0]

    //User key
    if (key && (key != previousState))
 8001d38:	b128      	cbz	r0, 8001d46 <_ZN8touchgfx10KeySampler6sampleERh+0x36>
 8001d3a:	7922      	ldrb	r2, [r4, #4]
 8001d3c:	4282      	cmp	r2, r0
    {
        previousState = key;
 8001d3e:	bf16      	itet	ne
 8001d40:	7120      	strbne	r0, [r4, #4]
        return true;
    }

    return false;
 8001d42:	2000      	moveq	r0, #0
        return true;
 8001d44:	2001      	movne	r0, #1
}
 8001d46:	bd70      	pop	{r4, r5, r6, pc}
 8001d48:	201530b4 	.word	0x201530b4

08001d4c <_ZN8touchgfx10KeySamplerD0Ev>:
 8001d4c:	b510      	push	{r4, lr}
 8001d4e:	4604      	mov	r4, r0
 8001d50:	2108      	movs	r1, #8
 8001d52:	f026 f960 	bl	8028016 <_ZdlPvj>
 8001d56:	4620      	mov	r0, r4
 8001d58:	bd10      	pop	{r4, pc}

08001d5a <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001d5a:	4770      	bx	lr

08001d5c <_ZN20STM32TouchControllerD0Ev>:
 8001d5c:	b510      	push	{r4, lr}
 8001d5e:	4604      	mov	r4, r0
 8001d60:	2104      	movs	r1, #4
 8001d62:	f026 f958 	bl	8028016 <_ZdlPvj>
 8001d66:	4620      	mov	r0, r4
 8001d68:	bd10      	pop	{r4, pc}
	...

08001d6c <_ZN20STM32TouchController11sampleTouchERlS0_>:
    }
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
    if (_initialized)
 8001d6c:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1c>)
{
 8001d6e:	b510      	push	{r4, lr}
    if (_initialized)
 8001d70:	7818      	ldrb	r0, [r3, #0]
 8001d72:	b130      	cbz	r0, 8001d82 <_ZN20STM32TouchController11sampleTouchERlS0_+0x16>
    {
        if (state.TouchDetected)
 8001d74:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <_ZN20STM32TouchController11sampleTouchERlS0_+0x20>)
 8001d76:	681c      	ldr	r4, [r3, #0]
 8001d78:	b124      	cbz	r4, 8001d84 <_ZN20STM32TouchController11sampleTouchERlS0_+0x18>
        {
            x = state.TouchX;
 8001d7a:	685c      	ldr	r4, [r3, #4]
 8001d7c:	600c      	str	r4, [r1, #0]
            y = state.TouchY;
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	6013      	str	r3, [r2, #0]
            return true;
        }
    }

    return false;
}
 8001d82:	bd10      	pop	{r4, pc}
    return false;
 8001d84:	4620      	mov	r0, r4
 8001d86:	e7fc      	b.n	8001d82 <_ZN20STM32TouchController11sampleTouchERlS0_+0x16>
 8001d88:	201530b8 	.word	0x201530b8
 8001d8c:	201530bc 	.word	0x201530bc

08001d90 <_ZN20STM32TouchController4initEv>:
{
 8001d90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (!_initialized)
 8001d92:	4c09      	ldr	r4, [pc, #36]	; (8001db8 <_ZN20STM32TouchController4initEv+0x28>)
 8001d94:	7820      	ldrb	r0, [r4, #0]
 8001d96:	b968      	cbnz	r0, 8001db4 <_ZN20STM32TouchController4initEv+0x24>
        TsInit.Width = HAL::DISPLAY_WIDTH;
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <_ZN20STM32TouchController4initEv+0x2c>)
        if (BSP_TS_Init(0, &TsInit) == BSP_ERROR_NONE)
 8001d9a:	4669      	mov	r1, sp
        TsInit.Width = HAL::DISPLAY_WIDTH;
 8001d9c:	881b      	ldrh	r3, [r3, #0]
        TsInit.Accuracy = 0;
 8001d9e:	9003      	str	r0, [sp, #12]
        TsInit.Width = HAL::DISPLAY_WIDTH;
 8001da0:	9300      	str	r3, [sp, #0]
        TsInit.Height = HAL::DISPLAY_HEIGHT;
 8001da2:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <_ZN20STM32TouchController4initEv+0x30>)
 8001da4:	881b      	ldrh	r3, [r3, #0]
        TsInit.Orientation = TS_ORIENTATION_PORTRAIT;
 8001da6:	e9cd 3001 	strd	r3, r0, [sp, #4]
        if (BSP_TS_Init(0, &TsInit) == BSP_ERROR_NONE)
 8001daa:	f005 f859 	bl	8006e60 <BSP_TS_Init>
 8001dae:	b908      	cbnz	r0, 8001db4 <_ZN20STM32TouchController4initEv+0x24>
            _initialized = true;
 8001db0:	2301      	movs	r3, #1
 8001db2:	7023      	strb	r3, [r4, #0]
}
 8001db4:	b004      	add	sp, #16
 8001db6:	bd10      	pop	{r4, pc}
 8001db8:	201530b8 	.word	0x201530b8
 8001dbc:	2019794c 	.word	0x2019794c
 8001dc0:	2019794e 	.word	0x2019794e

08001dc4 <HAL_GPIO_EXTI_Falling_Callback>:
    if (GPIO_Pin == TS_INT_PIN)
 8001dc4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8001dc8:	b508      	push	{r3, lr}
    if (GPIO_Pin == TS_INT_PIN)
 8001dca:	d10d      	bne.n	8001de8 <HAL_GPIO_EXTI_Falling_Callback+0x24>
        if (_initialized)
 8001dcc:	4b07      	ldr	r3, [pc, #28]	; (8001dec <HAL_GPIO_EXTI_Falling_Callback+0x28>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	b153      	cbz	r3, 8001de8 <HAL_GPIO_EXTI_Falling_Callback+0x24>
            if (BSP_TS_GetState(0, &state) != BSP_ERROR_NONE)
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	4906      	ldr	r1, [pc, #24]	; (8001df0 <HAL_GPIO_EXTI_Falling_Callback+0x2c>)
 8001dd6:	f005 f8df 	bl	8006f98 <BSP_TS_GetState>
 8001dda:	b128      	cbz	r0, 8001de8 <HAL_GPIO_EXTI_Falling_Callback+0x24>
                assert(0 && "Failed to read TS state");
 8001ddc:	213b      	movs	r1, #59	; 0x3b
 8001dde:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <HAL_GPIO_EXTI_Falling_Callback+0x30>)
 8001de0:	4a05      	ldr	r2, [pc, #20]	; (8001df8 <HAL_GPIO_EXTI_Falling_Callback+0x34>)
 8001de2:	4806      	ldr	r0, [pc, #24]	; (8001dfc <HAL_GPIO_EXTI_Falling_Callback+0x38>)
 8001de4:	f026 f944 	bl	8028070 <__assert_func>
}
 8001de8:	bd08      	pop	{r3, pc}
 8001dea:	bf00      	nop
 8001dec:	201530b8 	.word	0x201530b8
 8001df0:	201530bc 	.word	0x201530bc
 8001df4:	0802976c 	.word	0x0802976c
 8001df8:	0802978b 	.word	0x0802978b
 8001dfc:	080297b9 	.word	0x080297b9

08001e00 <_ZN8touchgfx4GPIO4initEv>:
 * Perform configuration of IO pins.
 */
void GPIO::init()
{

}
 8001e00:	4770      	bx	lr
	...

08001e04 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001e04:	2803      	cmp	r0, #3
 8001e06:	d814      	bhi.n	8001e32 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2e>
 8001e08:	e8df f000 	tbb	[pc, r0]
 8001e0c:	0f0a0702 	.word	0x0f0a0702
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
 8001e10:	2201      	movs	r2, #1
 8001e12:	2102      	movs	r1, #2
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_SET);
 8001e14:	4807      	ldr	r0, [pc, #28]	; (8001e34 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x30>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_SET);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
 8001e16:	f007 bff1 	b.w	8009dfc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_SET);
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	4611      	mov	r1, r2
 8001e1e:	e7f9      	b.n	8001e14 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x10>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_SET);
 8001e20:	2201      	movs	r2, #1
 8001e22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
 8001e26:	4804      	ldr	r0, [pc, #16]	; (8001e38 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x34>)
 8001e28:	e7f5      	b.n	8001e16 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x12>
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e30:	e7f9      	b.n	8001e26 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x22>
#endif
        break;
    }
}
 8001e32:	4770      	bx	lr
 8001e34:	42020c00 	.word	0x42020c00
 8001e38:	42021400 	.word	0x42021400

08001e3c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001e3c:	2803      	cmp	r0, #3
 8001e3e:	d814      	bhi.n	8001e6a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2e>
 8001e40:	e8df f000 	tbb	[pc, r0]
 8001e44:	0f0a0702 	.word	0x0f0a0702
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2102      	movs	r1, #2
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_RESET);
 8001e4c:	4807      	ldr	r0, [pc, #28]	; (8001e6c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x30>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001e4e:	f007 bfd5 	b.w	8009dfc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_RESET);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2101      	movs	r1, #1
 8001e56:	e7f9      	b.n	8001e4c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x10>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001e5e:	4804      	ldr	r0, [pc, #16]	; (8001e70 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x34>)
 8001e60:	e7f5      	b.n	8001e4e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x12>
 8001e62:	2200      	movs	r2, #0
 8001e64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e68:	e7f9      	b.n	8001e5e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x22>
#endif
        break;
    }
}
 8001e6a:	4770      	bx	lr
 8001e6c:	42020c00 	.word	0x42020c00
 8001e70:	42021400 	.word	0x42021400

08001e74 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001e74:	2803      	cmp	r0, #3
 8001e76:	d810      	bhi.n	8001e9a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x26>
 8001e78:	e8df f000 	tbb	[pc, r0]
 8001e7c:	0c080602 	.word	0x0c080602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001e80:	2102      	movs	r1, #2
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001e82:	4806      	ldr	r0, [pc, #24]	; (8001e9c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001e84:	f007 bfd2 	b.w	8009e2c <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001e88:	2101      	movs	r1, #1
 8001e8a:	e7fa      	b.n	8001e82 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001e8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001e90:	4803      	ldr	r0, [pc, #12]	; (8001ea0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
 8001e92:	e7f7      	b.n	8001e84 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
 8001e94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e98:	e7fa      	b.n	8001e90 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x1c>
#endif
        break;
    }
}
 8001e9a:	4770      	bx	lr
 8001e9c:	42020c00 	.word	0x42020c00
 8001ea0:	42021400 	.word	0x42021400

08001ea4 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001ea4:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001ea6:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001eaa:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8001eae:	4770      	bx	lr

08001eb0 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	4770      	bx	lr

08001eb4 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001eb4:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001eb6:	3900      	subs	r1, #0
 8001eb8:	bf18      	it	ne
 8001eba:	2101      	movne	r1, #1
 8001ebc:	4b01      	ldr	r3, [pc, #4]	; (8001ec4 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001ebe:	7019      	strb	r1, [r3, #0]
    }
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	20197957 	.word	0x20197957

08001ec8 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001ec8:	2000      	movs	r0, #0
 8001eca:	4770      	bx	lr

08001ecc <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001ecc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001ece:	b10b      	cbz	r3, 8001ed4 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001ed0:	4608      	mov	r0, r1
 8001ed2:	4718      	bx	r3
        }
    }
 8001ed4:	4770      	bx	lr

08001ed6 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001ed6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001eda:	4770      	bx	lr

08001edc <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001edc:	6840      	ldr	r0, [r0, #4]
 8001ede:	6803      	ldr	r3, [r0, #0]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	4718      	bx	r3

08001ee4 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
    {
    }
 8001ee4:	4770      	bx	lr

08001ee6 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
    {
    }
 8001ee6:	4770      	bx	lr

08001ee8 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001ee8:	4770      	bx	lr
	...

08001eec <_ZN11TouchGFXHAL10initializeEv>:
using namespace touchgfx;

KeySampler btnctrl;

void TouchGFXHAL::initialize()
{
 8001eec:	b538      	push	{r3, r4, r5, lr}
 8001eee:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001ef0:	f000 fd4e 	bl	8002990 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        buttonController = btnCtrl;
 8001ef4:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <_ZN11TouchGFXHAL10initializeEv+0x2c>)
    setButtonController(&btnctrl);
    lockDMAToFrontPorch(false);
    GPIO::init();
    instrumentation.init();
 8001ef6:	f104 05a8 	add.w	r5, r4, #168	; 0xa8
 8001efa:	6163      	str	r3, [r4, #20]
        lockDMAToPorch = enableLock;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
    GPIO::init();
 8001f02:	f7ff ff7d 	bl	8001e00 <_ZN8touchgfx4GPIO4initEv>
    instrumentation.init();
 8001f06:	4628      	mov	r0, r5
 8001f08:	f7ff fec0 	bl	8001c8c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8001f0c:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001f0e:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001f10:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    setMCUInstrumentation(&instrumentation);
    enableMCULoadCalculation(true);
}
 8001f14:	bd38      	pop	{r3, r4, r5, pc}
 8001f16:	bf00      	nop
 8001f18:	201530cc 	.word	0x201530cc

08001f1c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001f1c:	f000 bd2a 	b.w	8002974 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

08001f20 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8001f20:	b537      	push	{r0, r1, r2, r4, r5, lr}
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 8001f22:	2500      	movs	r5, #0
 8001f24:	4c10      	ldr	r4, [pc, #64]	; (8001f68 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt+0x48>)
 8001f26:	9500      	str	r5, [sp, #0]
 8001f28:	6823      	ldr	r3, [r4, #0]
 8001f2a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001f2e:	f022 0208 	bic.w	r2, r2, #8
 8001f32:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001f36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	9b00      	ldr	r3, [sp, #0]
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001f42:	f000 fd1d 	bl	8002980 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
    __HAL_DSI_WRAPPER_ENABLE(&hdsi);
 8001f46:	6823      	ldr	r3, [r4, #0]
 8001f48:	9501      	str	r5, [sp, #4]
 8001f4a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001f4e:	f042 0208 	orr.w	r2, r2, #8
 8001f52:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001f56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001f5a:	f003 0308 	and.w	r3, r3, #8
 8001f5e:	9301      	str	r3, [sp, #4]
 8001f60:	9b01      	ldr	r3, [sp, #4]
}
 8001f62:	b003      	add	sp, #12
 8001f64:	bd30      	pop	{r4, r5, pc}
 8001f66:	bf00      	nop
 8001f68:	20152e90 	.word	0x20152e90

08001f6c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001f6c:	f000 bd38 	b.w	80029e0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08001f70 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:
}

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8001f70:	f000 bd38 	b.w	80029e4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>

08001f74 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8001f74:	b508      	push	{r3, lr}
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    TouchGFXGeneratedHAL::configureInterrupts();
 8001f76:	f000 fcd7 	bl	8002928 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7a:	2290      	movs	r2, #144	; 0x90
 8001f7c:	4b01      	ldr	r3, [pc, #4]	; (8001f84 <_ZN11TouchGFXHAL19configureInterruptsEv+0x10>)
 8001f7e:	f883 2389 	strb.w	r2, [r3, #905]	; 0x389
    NVIC_SetPriority(DSI_IRQn, 9);
}
 8001f82:	bd08      	pop	{r3, pc}
 8001f84:	e000e100 	.word	0xe000e100

08001f88 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001f88:	f000 bcda 	b.w	8002940 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08001f8c <_ZN11TouchGFXHAL10beginFrameEv>:
}

bool TouchGFXHAL::beginFrame()
{
    return TouchGFXGeneratedHAL::beginFrame();
 8001f8c:	f000 bd1c 	b.w	80029c8 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>

08001f90 <_ZN11TouchGFXHAL8endFrameEv>:
}

void TouchGFXHAL::endFrame()
{
    if (!display_on)
 8001f90:	4b0d      	ldr	r3, [pc, #52]	; (8001fc8 <_ZN11TouchGFXHAL8endFrameEv+0x38>)
{
 8001f92:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!display_on)
 8001f94:	7819      	ldrb	r1, [r3, #0]
{
 8001f96:	4604      	mov	r4, r0
    if (!display_on)
 8001f98:	b979      	cbnz	r1, 8001fba <_ZN11TouchGFXHAL8endFrameEv+0x2a>
    {
        display_on = true;
 8001f9a:	2201      	movs	r2, #1
        /* Enable the LCD, Send Display on DCS command to display */
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, DSI_SET_DISPLAY_ON, 0x00);
        /* Start PWM Timer channel */
        (void)HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001f9c:	4d0b      	ldr	r5, [pc, #44]	; (8001fcc <_ZN11TouchGFXHAL8endFrameEv+0x3c>)
        display_on = true;
 8001f9e:	701a      	strb	r2, [r3, #0]
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, DSI_SET_DISPLAY_ON, 0x00);
 8001fa0:	480b      	ldr	r0, [pc, #44]	; (8001fd0 <_ZN11TouchGFXHAL8endFrameEv+0x40>)
 8001fa2:	2329      	movs	r3, #41	; 0x29
 8001fa4:	2215      	movs	r2, #21
 8001fa6:	9100      	str	r1, [sp, #0]
 8001fa8:	f007 f953 	bl	8009252 <HAL_DSI_ShortWrite>
        (void)HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001fac:	2104      	movs	r1, #4
 8001fae:	4628      	mov	r0, r5
 8001fb0:	f00e f9ae 	bl	8010310 <HAL_TIM_PWM_Start>
        /* Enable Backlight by setting Brightness to 100% */
        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 2U * 100);
 8001fb4:	22c8      	movs	r2, #200	; 0xc8
 8001fb6:	682b      	ldr	r3, [r5, #0]
 8001fb8:	639a      	str	r2, [r3, #56]	; 0x38
    }

    TouchGFXGeneratedHAL::endFrame();
 8001fba:	4620      	mov	r0, r4
}
 8001fbc:	b003      	add	sp, #12
 8001fbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    TouchGFXGeneratedHAL::endFrame();
 8001fc2:	f000 bd03 	b.w	80029cc <_ZN20TouchGFXGeneratedHAL8endFrameEv>
 8001fc6:	bf00      	nop
 8001fc8:	201530c8 	.word	0x201530c8
 8001fcc:	20152f68 	.word	0x20152f68
 8001fd0:	20152e90 	.word	0x20152e90

08001fd4 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001fd4:	b510      	push	{r4, lr}
 8001fd6:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001fd8:	f014 fb42 	bl	8016660 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001fdc:	6823      	ldr	r3, [r4, #0]
 8001fde:	4620      	mov	r0, r4
    }
 8001fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001fe4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001fe8:	4718      	bx	r3

08001fea <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8001fea:	f013 bd83 	b.w	8015af4 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001fee <_ZN11TouchGFXHALD0Ev>:
 8001fee:	b510      	push	{r4, lr}
 8001ff0:	4604      	mov	r4, r0
 8001ff2:	21b4      	movs	r1, #180	; 0xb4
 8001ff4:	f026 f80f 	bl	8028016 <_ZdlPvj>
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	bd10      	pop	{r4, pc}

08001ffc <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 8001ffc:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8002000:	b11b      	cbz	r3, 800200a <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 8002002:	6840      	ldr	r0, [r0, #4]
 8002004:	6803      	ldr	r3, [r0, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4718      	bx	r3
    }
 800200a:	4618      	mov	r0, r3
 800200c:	4770      	bx	lr
	...

08002010 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void performDisplayOrientationChange()
 8002010:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8002012:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
 8002016:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
            if (DISPLAY_ROTATION == rotate0)
 800201a:	4b0c      	ldr	r3, [pc, #48]	; (800204c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
        if (requestedOrientation != nativeDisplayOrientation)
 800201c:	428c      	cmp	r4, r1
            if (DISPLAY_ROTATION == rotate0)
 800201e:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8002020:	d009      	beq.n	8002036 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8002022:	b93a      	cbnz	r2, 8002034 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
                const uint16_t tmp = DISPLAY_HEIGHT;
 8002024:	490a      	ldr	r1, [pc, #40]	; (8002050 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002026:	4a0b      	ldr	r2, [pc, #44]	; (8002054 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8002028:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800202a:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 800202c:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 800202e:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002030:	800c      	strh	r4, [r1, #0]
            DISPLAY_ROTATION = rotate0;
 8002032:	701a      	strb	r2, [r3, #0]
    }
 8002034:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8002036:	2a00      	cmp	r2, #0
 8002038:	d0fc      	beq.n	8002034 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800203a:	4a06      	ldr	r2, [pc, #24]	; (8002054 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 800203c:	4904      	ldr	r1, [pc, #16]	; (8002050 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800203e:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8002040:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002042:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8002044:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8002046:	2200      	movs	r2, #0
 8002048:	e7f3      	b.n	8002032 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 800204a:	bf00      	nop
 800204c:	20197950 	.word	0x20197950
 8002050:	2019794e 	.word	0x2019794e
 8002054:	2019794c 	.word	0x2019794c

08002058 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8002058:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	428b      	cmp	r3, r1
 8002060:	d803      	bhi.n	800206a <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8002062:	4b08      	ldr	r3, [pc, #32]	; (8002084 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	4293      	cmp	r3, r2
 8002068:	d905      	bls.n	8002076 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 800206a:	219e      	movs	r1, #158	; 0x9e
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 800206e:	4a07      	ldr	r2, [pc, #28]	; (800208c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8002070:	4807      	ldr	r0, [pc, #28]	; (8002090 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8002072:	f025 fffd 	bl	8028070 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8002076:	4b07      	ldr	r3, [pc, #28]	; (8002094 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8002078:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 800207a:	4b07      	ldr	r3, [pc, #28]	; (8002098 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 800207c:	801a      	strh	r2, [r3, #0]
    }
 800207e:	bd08      	pop	{r3, pc}
 8002080:	2019794c 	.word	0x2019794c
 8002084:	2019794e 	.word	0x2019794e
 8002088:	08029820 	.word	0x08029820
 800208c:	08029883 	.word	0x08029883
 8002090:	080298c6 	.word	0x080298c6
 8002094:	20197952 	.word	0x20197952
 8002098:	20197954 	.word	0x20197954

0800209c <_ZN11TouchGFXHAL17disableInterruptsEv>:
{
 800209c:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::disableInterrupts();
 800209e:	f000 fcc3 	bl	8002a28 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020a6:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <_ZN11TouchGFXHAL17disableInterruptsEv+0x1c>)
 80020a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80020ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80020b0:	f3bf 8f6f 	isb	sy
}
 80020b4:	bd08      	pop	{r3, pc}
 80020b6:	bf00      	nop
 80020b8:	e000e100 	.word	0xe000e100

080020bc <_ZN11TouchGFXHAL16enableInterruptsEv>:
{
 80020bc:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::enableInterrupts();
 80020be:	f000 fccd 	bl	8002a5c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020c6:	4b01      	ldr	r3, [pc, #4]	; (80020cc <_ZN11TouchGFXHAL16enableInterruptsEv+0x10>)
 80020c8:	611a      	str	r2, [r3, #16]
}
 80020ca:	bd08      	pop	{r3, pc}
 80020cc:	e000e100 	.word	0xe000e100

080020d0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 80020d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80020d2:	460c      	mov	r4, r1
 80020d4:	b931      	cbnz	r1, 80020e4 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x14>
 80020d6:	f240 21d2 	movw	r1, #722	; 0x2d2
 80020da:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x78>)
 80020dc:	4a1b      	ldr	r2, [pc, #108]	; (800214c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x7c>)
 80020de:	481c      	ldr	r0, [pc, #112]	; (8002150 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x80>)
 80020e0:	f025 ffc6 	bl	8028070 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80020e4:	e9c0 120f 	strd	r1, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80020e8:	3a00      	subs	r2, #0
 80020ea:	bf18      	it	ne
 80020ec:	2201      	movne	r2, #1
    __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 80020ee:	2500      	movs	r5, #0
 80020f0:	4918      	ldr	r1, [pc, #96]	; (8002154 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x84>)
 80020f2:	4e19      	ldr	r6, [pc, #100]	; (8002158 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x88>)
 80020f4:	700a      	strb	r2, [r1, #0]
        setAnimationStorage(animationStorage);
 80020f6:	6802      	ldr	r2, [r0, #0]
 80020f8:	4619      	mov	r1, r3
 80020fa:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80020fe:	4790      	blx	r2
 8002100:	6833      	ldr	r3, [r6, #0]
 8002102:	9500      	str	r5, [sp, #0]
 8002104:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
    (void)HAL_LTDC_SetAddress(&hltdc, (uint32_t)frameBuffer, 0);
 8002108:	4621      	mov	r1, r4
    __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 800210a:	f022 0208 	bic.w	r2, r2, #8
 800210e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002112:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
    (void)HAL_LTDC_SetAddress(&hltdc, (uint32_t)frameBuffer, 0);
 8002116:	462a      	mov	r2, r5
    __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 8002118:	f003 0308 	and.w	r3, r3, #8
 800211c:	9300      	str	r3, [sp, #0]
    (void)HAL_LTDC_SetAddress(&hltdc, (uint32_t)frameBuffer, 0);
 800211e:	480f      	ldr	r0, [pc, #60]	; (800215c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x8c>)
    __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 8002120:	9b00      	ldr	r3, [sp, #0]
    (void)HAL_LTDC_SetAddress(&hltdc, (uint32_t)frameBuffer, 0);
 8002122:	f009 f987 	bl	800b434 <HAL_LTDC_SetAddress>
    __HAL_DSI_WRAPPER_ENABLE(&hdsi);
 8002126:	6833      	ldr	r3, [r6, #0]
 8002128:	9501      	str	r5, [sp, #4]
 800212a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800212e:	f042 0208 	orr.w	r2, r2, #8
 8002132:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002136:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	9301      	str	r3, [sp, #4]
 8002140:	9b01      	ldr	r3, [sp, #4]
}
 8002142:	b002      	add	sp, #8
 8002144:	bd70      	pop	{r4, r5, r6, pc}
 8002146:	bf00      	nop
 8002148:	0802990b 	.word	0x0802990b
 800214c:	08029943 	.word	0x08029943
 8002150:	080298c6 	.word	0x080298c6
 8002154:	20197956 	.word	0x20197956
 8002158:	20152e90 	.word	0x20152e90
 800215c:	20152ec0 	.word	0x20152ec0

08002160 <tx_low_power_enter>:
#ifdef TX_LOW_POWER
extern "C"
{

    void tx_low_power_enter()
    {
 8002160:	b508      	push	{r3, lr}
        // tgfx task going to sleep
        touchgfx::HAL::getInstance()->setMCUActive(false);
 8002162:	4b03      	ldr	r3, [pc, #12]	; (8002170 <tx_low_power_enter+0x10>)
 8002164:	2100      	movs	r1, #0
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	f014 fa94 	bl	8016694 <_ZN8touchgfx3HAL12setMCUActiveEb>
        __WFI();
 800216c:	bf30      	wfi
    }
 800216e:	bd08      	pop	{r3, pc}
 8002170:	20197958 	.word	0x20197958

08002174 <tx_low_power_exit>:
    void tx_low_power_exit()
    {

        // tgfx task waking up
        touchgfx::HAL::getInstance()->setMCUActive(true);
 8002174:	4b02      	ldr	r3, [pc, #8]	; (8002180 <tx_low_power_exit+0xc>)
 8002176:	2101      	movs	r1, #1
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	f014 ba8b 	b.w	8016694 <_ZN8touchgfx3HAL12setMCUActiveEb>
 800217e:	bf00      	nop
 8002180:	20197958 	.word	0x20197958

08002184 <_GLOBAL__sub_I_btnctrl>:
{
class KeySampler : public ButtonController
{
public:
    KeySampler()
    {
 8002184:	4802      	ldr	r0, [pc, #8]	; (8002190 <_GLOBAL__sub_I_btnctrl+0xc>)
 8002186:	4b03      	ldr	r3, [pc, #12]	; (8002194 <_GLOBAL__sub_I_btnctrl+0x10>)
 8002188:	6003      	str	r3, [r0, #0]
        init();
 800218a:	f7ff bdbc 	b.w	8001d06 <_ZN8touchgfx10KeySampler4initEv>
 800218e:	bf00      	nop
 8002190:	201530cc 	.word	0x201530cc
 8002194:	08029758 	.word	0x08029758

08002198 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8002198:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    CHAR* pointer;

    /* Create a byte memory pool from which to allocate the thread stacks.  */
    if (tx_byte_pool_create(&oswrapper_byte_pool, (CHAR*) "OSWrapper Byte Pool", oswrapper_pool_mem,
 800219a:	2334      	movs	r3, #52	; 0x34
 800219c:	4a1a      	ldr	r2, [pc, #104]	; (8002208 <_ZN8touchgfx10OSWrappers10initializeEv+0x70>)
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	491a      	ldr	r1, [pc, #104]	; (800220c <_ZN8touchgfx10OSWrappers10initializeEv+0x74>)
 80021a2:	2364      	movs	r3, #100	; 0x64
 80021a4:	481a      	ldr	r0, [pc, #104]	; (8002210 <_ZN8touchgfx10OSWrappers10initializeEv+0x78>)
 80021a6:	f012 fe0f 	bl	8014dc8 <_txe_byte_pool_create>
 80021aa:	4603      	mov	r3, r0
 80021ac:	b128      	cbz	r0, 80021ba <_ZN8touchgfx10OSWrappers10initializeEv+0x22>
                            OSWRAPPER_BYTE_POOL_SIZE) != TX_SUCCESS)
    {
        assert(0 && "Failed to create OSWrapper Pool memory!");
 80021ae:	2138      	movs	r1, #56	; 0x38
 80021b0:	4b18      	ldr	r3, [pc, #96]	; (8002214 <_ZN8touchgfx10OSWrappers10initializeEv+0x7c>)
 80021b2:	4a19      	ldr	r2, [pc, #100]	; (8002218 <_ZN8touchgfx10OSWrappers10initializeEv+0x80>)

    /* Allocate the vsync_q.  */
    if (tx_byte_allocate(&oswrapper_byte_pool, (VOID**) &pointer,
                         OSWRAPPER_QUEUE_SIZE, TX_NO_WAIT) != TX_SUCCESS)
    {
        assert(0 && "Failed to allocate memory for the Vsync Message Queue!");
 80021b4:	4819      	ldr	r0, [pc, #100]	; (800221c <_ZN8touchgfx10OSWrappers10initializeEv+0x84>)
 80021b6:	f025 ff5b 	bl	8028070 <__assert_func>
    if (tx_byte_allocate(&oswrapper_byte_pool, (VOID**) &pointer,
 80021ba:	2204      	movs	r2, #4
 80021bc:	4814      	ldr	r0, [pc, #80]	; (8002210 <_ZN8touchgfx10OSWrappers10initializeEv+0x78>)
 80021be:	a903      	add	r1, sp, #12
 80021c0:	f012 fd8e 	bl	8014ce0 <_txe_byte_allocate>
 80021c4:	b118      	cbz	r0, 80021ce <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
        assert(0 && "Failed to allocate memory for the Vsync Message Queue!");
 80021c6:	213f      	movs	r1, #63	; 0x3f
 80021c8:	4b15      	ldr	r3, [pc, #84]	; (8002220 <_ZN8touchgfx10OSWrappers10initializeEv+0x88>)
 80021ca:	4a13      	ldr	r2, [pc, #76]	; (8002218 <_ZN8touchgfx10OSWrappers10initializeEv+0x80>)
 80021cc:	e7f2      	b.n	80021b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x1c>
    }

    // Create a queue of length 1
    if (tx_queue_create(&vsync_q, (CHAR*) "Vsync Message Queue", TX_1_ULONG,
 80021ce:	2304      	movs	r3, #4
 80021d0:	2238      	movs	r2, #56	; 0x38
 80021d2:	4914      	ldr	r1, [pc, #80]	; (8002224 <_ZN8touchgfx10OSWrappers10initializeEv+0x8c>)
 80021d4:	e9cd 3200 	strd	r3, r2, [sp]
 80021d8:	4813      	ldr	r0, [pc, #76]	; (8002228 <_ZN8touchgfx10OSWrappers10initializeEv+0x90>)
 80021da:	2201      	movs	r2, #1
 80021dc:	9b03      	ldr	r3, [sp, #12]
 80021de:	f012 fe93 	bl	8014f08 <_txe_queue_create>
 80021e2:	b118      	cbz	r0, 80021ec <_ZN8touchgfx10OSWrappers10initializeEv+0x54>
                        pointer, OSWRAPPER_QUEUE_SIZE) != TX_SUCCESS)
    {
        assert(0 && "Failed to create Vsync Message Queue!");
 80021e4:	2146      	movs	r1, #70	; 0x46
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <_ZN8touchgfx10OSWrappers10initializeEv+0x94>)
 80021e8:	4a0b      	ldr	r2, [pc, #44]	; (8002218 <_ZN8touchgfx10OSWrappers10initializeEv+0x80>)
 80021ea:	e7e3      	b.n	80021b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x1c>
    }

    // Create the Framebuffer Semaphore (Binary)
    if (tx_semaphore_create(&frame_buffer_sem, (CHAR*) "FrameBuffer Semaphore", 1) != TX_SUCCESS)
 80021ec:	231c      	movs	r3, #28
 80021ee:	2201      	movs	r2, #1
 80021f0:	490f      	ldr	r1, [pc, #60]	; (8002230 <_ZN8touchgfx10OSWrappers10initializeEv+0x98>)
 80021f2:	4810      	ldr	r0, [pc, #64]	; (8002234 <_ZN8touchgfx10OSWrappers10initializeEv+0x9c>)
 80021f4:	f012 ffcc 	bl	8015190 <_txe_semaphore_create>
 80021f8:	b118      	cbz	r0, 8002202 <_ZN8touchgfx10OSWrappers10initializeEv+0x6a>
    {
        assert(0 && "Failed to create FrameBuffer Semaphore!");
 80021fa:	214c      	movs	r1, #76	; 0x4c
 80021fc:	4b0e      	ldr	r3, [pc, #56]	; (8002238 <_ZN8touchgfx10OSWrappers10initializeEv+0xa0>)
 80021fe:	4a06      	ldr	r2, [pc, #24]	; (8002218 <_ZN8touchgfx10OSWrappers10initializeEv+0x80>)
 8002200:	e7d8      	b.n	80021b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x1c>
    }
}
 8002202:	b005      	add	sp, #20
 8002204:	f85d fb04 	ldr.w	pc, [sp], #4
 8002208:	201530f0 	.word	0x201530f0
 800220c:	08029a6c 	.word	0x08029a6c
 8002210:	20153154 	.word	0x20153154
 8002214:	08029a80 	.word	0x08029a80
 8002218:	08029aaf 	.word	0x08029aaf
 800221c:	08029ade 	.word	0x08029ade
 8002220:	08029b2d 	.word	0x08029b2d
 8002224:	08029b6b 	.word	0x08029b6b
 8002228:	20153188 	.word	0x20153188
 800222c:	08029b7f 	.word	0x08029b7f
 8002230:	08029bac 	.word	0x08029bac
 8002234:	201530d4 	.word	0x201530d4
 8002238:	08029bc2 	.word	0x08029bc2

0800223c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 800223c:	b508      	push	{r3, lr}
    if (tx_semaphore_get(&frame_buffer_sem, TX_WAIT_FOREVER) != TX_SUCCESS)
 800223e:	f04f 31ff 	mov.w	r1, #4294967295
 8002242:	4805      	ldr	r0, [pc, #20]	; (8002258 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x1c>)
 8002244:	f013 f83a 	bl	80152bc <_txe_semaphore_get>
 8002248:	b128      	cbz	r0, 8002256 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x1a>
    {
        assert(0 && "Failed to get FrameBuffer Semaphore!");
 800224a:	2157      	movs	r1, #87	; 0x57
 800224c:	4b03      	ldr	r3, [pc, #12]	; (800225c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x20>)
 800224e:	4a04      	ldr	r2, [pc, #16]	; (8002260 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x24>)
 8002250:	4804      	ldr	r0, [pc, #16]	; (8002264 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x28>)
 8002252:	f025 ff0d 	bl	8028070 <__assert_func>
    }
}
 8002256:	bd08      	pop	{r3, pc}
 8002258:	201530d4 	.word	0x201530d4
 800225c:	08029bf1 	.word	0x08029bf1
 8002260:	08029c1d 	.word	0x08029c1d
 8002264:	08029ade 	.word	0x08029ade

08002268 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    if (!frame_buffer_sem.tx_semaphore_count)
 8002268:	4806      	ldr	r0, [pc, #24]	; (8002284 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x1c>)
{
 800226a:	b508      	push	{r3, lr}
    if (!frame_buffer_sem.tx_semaphore_count)
 800226c:	6883      	ldr	r3, [r0, #8]
 800226e:	b943      	cbnz	r3, 8002282 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x1a>
    {
        if (tx_semaphore_put(&frame_buffer_sem) != TX_SUCCESS)
 8002270:	f013 f866 	bl	8015340 <_txe_semaphore_put>
 8002274:	b128      	cbz	r0, 8002282 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x1a>
        {
            assert(0 && "Failed to put FrameBuffer Semaphore!");
 8002276:	2164      	movs	r1, #100	; 0x64
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x20>)
 800227a:	4a04      	ldr	r2, [pc, #16]	; (800228c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x24>)
 800227c:	4804      	ldr	r0, [pc, #16]	; (8002290 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x28>)
 800227e:	f025 fef7 	bl	8028070 <__assert_func>
        }
    }
}
 8002282:	bd08      	pop	{r3, pc}
 8002284:	201530d4 	.word	0x201530d4
 8002288:	08029c5a 	.word	0x08029c5a
 800228c:	08029c86 	.word	0x08029c86
 8002290:	08029ade 	.word	0x08029ade

08002294 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    if (tx_semaphore_get(&frame_buffer_sem, TX_NO_WAIT) != TX_SUCCESS)
 8002294:	2100      	movs	r1, #0
 8002296:	4801      	ldr	r0, [pc, #4]	; (800229c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x8>)
 8002298:	f013 b810 	b.w	80152bc <_txe_semaphore_get>
 800229c:	201530d4 	.word	0x201530d4

080022a0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80022a0:	b538      	push	{r3, r4, r5, lr}
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80022a2:	f3ef 8510 	mrs	r5, PRIMASK
    int_posture = __get_interrupt_posture();

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 80022a6:	b672      	cpsid	i
    TX_INTERRUPT_SAVE_AREA
    TX_DISABLE;
    _tx_thread_preempt_disable++;
 80022a8:	4c0c      	ldr	r4, [pc, #48]	; (80022dc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
    if (!frame_buffer_sem.tx_semaphore_count)
 80022aa:	480d      	ldr	r0, [pc, #52]	; (80022e0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x40>)
    _tx_thread_preempt_disable++;
 80022ac:	6823      	ldr	r3, [r4, #0]
 80022ae:	3301      	adds	r3, #1
 80022b0:	6023      	str	r3, [r4, #0]
    if (!frame_buffer_sem.tx_semaphore_count)
 80022b2:	6883      	ldr	r3, [r0, #8]
 80022b4:	b943      	cbnz	r3, 80022c8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x28>
    {
        if (tx_semaphore_put(&frame_buffer_sem) != TX_SUCCESS)
 80022b6:	f013 f843 	bl	8015340 <_txe_semaphore_put>
 80022ba:	b128      	cbz	r0, 80022c8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x28>
        {
            assert(0 && "Failed to put FrameBuffer Semaphore!");
 80022bc:	218a      	movs	r1, #138	; 0x8a
 80022be:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x44>)
 80022c0:	4a09      	ldr	r2, [pc, #36]	; (80022e8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x48>)
 80022c2:	480a      	ldr	r0, [pc, #40]	; (80022ec <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x4c>)
 80022c4:	f025 fed4 	bl	8028070 <__assert_func>
        }
    }
    _tx_thread_preempt_disable--;
 80022c8:	6823      	ldr	r3, [r4, #0]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	6023      	str	r3, [r4, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80022ce:	f385 8810 	msr	PRIMASK, r5
    TX_RESTORE;
    _tx_thread_system_preempt_check();
}
 80022d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _tx_thread_system_preempt_check();
 80022d6:	f011 bfed 	b.w	80142b4 <_tx_thread_system_preempt_check>
 80022da:	bf00      	nop
 80022dc:	201973dc 	.word	0x201973dc
 80022e0:	201530d4 	.word	0x201530d4
 80022e4:	08029c5a 	.word	0x08029c5a
 80022e8:	08029cc3 	.word	0x08029cc3
 80022ec:	08029ade 	.word	0x08029ade

080022f0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
    UINT ret;

    // Send the message only if the queue is empty.
    // This call is from ISR, so no need to re-send
    // the message if not yet consumed by threads
    if (vsync_q.tx_queue_enqueued == 0)
 80022f0:	4807      	ldr	r0, [pc, #28]	; (8002310 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x20>)
{
 80022f2:	b508      	push	{r3, lr}
    if (vsync_q.tx_queue_enqueued == 0)
 80022f4:	6902      	ldr	r2, [r0, #16]
 80022f6:	b94a      	cbnz	r2, 800230c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>
    {
        // This is supposed to be called from Vsync Interrupt Handler
        // So wait_option should be equal to TX_NO_WAIT
        ret = tx_queue_send(&vsync_q, &dummy_msg, TX_NO_WAIT);
 80022f8:	4906      	ldr	r1, [pc, #24]	; (8002314 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x24>)
 80022fa:	f012 feff 	bl	80150fc <_txe_queue_send>
        if (ret != TX_SUCCESS)
 80022fe:	b128      	cbz	r0, 800230c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>
        {
            assert(0 && "Failed to Signal Vsync!");
 8002300:	21a6      	movs	r1, #166	; 0xa6
 8002302:	4b05      	ldr	r3, [pc, #20]	; (8002318 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x28>)
 8002304:	4a05      	ldr	r2, [pc, #20]	; (800231c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x2c>)
 8002306:	4806      	ldr	r0, [pc, #24]	; (8002320 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x30>)
 8002308:	f025 feb2 	bl	8028070 <__assert_func>
        }
    }
}
 800230c:	bd08      	pop	{r3, pc}
 800230e:	bf00      	nop
 8002310:	20153188 	.word	0x20153188
 8002314:	20000004 	.word	0x20000004
 8002318:	08029d07 	.word	0x08029d07
 800231c:	08029d26 	.word	0x08029d26
 8002320:	08029ade 	.word	0x08029ade

08002324 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002324:	b508      	push	{r3, lr}
    UINT ret;

    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    ret = tx_queue_receive(&vsync_q, &dummy_msg, TX_NO_WAIT);
 8002326:	2200      	movs	r2, #0
 8002328:	490a      	ldr	r1, [pc, #40]	; (8002354 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x30>)
 800232a:	480b      	ldr	r0, [pc, #44]	; (8002358 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x34>)
 800232c:	f012 fe9c 	bl	8015068 <_txe_queue_receive>

    if ((ret == TX_SUCCESS) || (ret == TX_QUEUE_EMPTY))
 8002330:	b138      	cbz	r0, 8002342 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x1e>
 8002332:	280a      	cmp	r0, #10
 8002334:	d005      	beq.n	8002342 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x1e>
        ret = tx_queue_receive(&vsync_q, &dummy_msg, TX_WAIT_FOREVER);
    }

    if (ret != TX_SUCCESS)
    {
        assert(0 && "Failed to Wait for Vsync!");
 8002336:	21c9      	movs	r1, #201	; 0xc9
 8002338:	4b08      	ldr	r3, [pc, #32]	; (800235c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x38>)
 800233a:	4a09      	ldr	r2, [pc, #36]	; (8002360 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x3c>)
 800233c:	4809      	ldr	r0, [pc, #36]	; (8002364 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x40>)
 800233e:	f025 fe97 	bl	8028070 <__assert_func>
        ret = tx_queue_receive(&vsync_q, &dummy_msg, TX_WAIT_FOREVER);
 8002342:	f04f 32ff 	mov.w	r2, #4294967295
 8002346:	4903      	ldr	r1, [pc, #12]	; (8002354 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x30>)
 8002348:	4803      	ldr	r0, [pc, #12]	; (8002358 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x34>)
 800234a:	f012 fe8d 	bl	8015068 <_txe_queue_receive>
    if (ret != TX_SUCCESS)
 800234e:	2800      	cmp	r0, #0
 8002350:	d1f1      	bne.n	8002336 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x12>
    }
}
 8002352:	bd08      	pop	{r3, pc}
 8002354:	20000004 	.word	0x20000004
 8002358:	20153188 	.word	0x20153188
 800235c:	08029d56 	.word	0x08029d56
 8002360:	08029d77 	.word	0x08029d77
 8002364:	08029ade 	.word	0x08029ade

08002368 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8002368:	6803      	ldr	r3, [r0, #0]
 800236a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236c:	4718      	bx	r3

0800236e <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 800236e:	2001      	movs	r0, #1
 8002370:	4770      	bx	lr

08002372 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8002372:	6803      	ldr	r3, [r0, #0]
 8002374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002376:	4718      	bx	r3

08002378 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002378:	f240 30ef 	movw	r0, #1007	; 0x3ef
 800237c:	4770      	bx	lr
	...

08002380 <_ZN8STM32DMAD1Ev>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002380:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
STM32DMA::~STM32DMA()
 8002384:	4b04      	ldr	r3, [pc, #16]	; (8002398 <_ZN8STM32DMAD1Ev+0x18>)
 8002386:	6003      	str	r3, [r0, #0]
 8002388:	4b04      	ldr	r3, [pc, #16]	; (800239c <_ZN8STM32DMAD1Ev+0x1c>)
 800238a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __ASM volatile ("dsb 0xF":::"memory");
 800238e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002392:	f3bf 8f6f 	isb	sy
}
 8002396:	4770      	bx	lr
 8002398:	08029f08 	.word	0x08029f08
 800239c:	e000e100 	.word	0xe000e100

080023a0 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 80023a0:	b510      	push	{r4, lr}
 80023a2:	4604      	mov	r4, r0
}
 80023a4:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 80023a8:	f7ff ffea 	bl	8002380 <_ZN8STM32DMAD1Ev>
 80023ac:	4620      	mov	r0, r4
 80023ae:	f025 fe32 	bl	8028016 <_ZdlPvj>
 80023b2:	4620      	mov	r0, r4
 80023b4:	bd10      	pop	{r4, pc}
	...

080023b8 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80023b8:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <_ZN8STM32DMA10initializeEv+0x40>)
{
 80023ba:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80023bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80023c0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80023c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80023c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80023cc:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80023d0:	9201      	str	r2, [sp, #4]
 80023d2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80023d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023d6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80023da:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80023dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023e2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <_ZN8STM32DMA10initializeEv+0x44>)
 80023e6:	4a06      	ldr	r2, [pc, #24]	; (8002400 <_ZN8STM32DMA10initializeEv+0x48>)
 80023e8:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ea:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80023ee:	4b05      	ldr	r3, [pc, #20]	; (8002404 <_ZN8STM32DMA10initializeEv+0x4c>)
 80023f0:	60da      	str	r2, [r3, #12]
}
 80023f2:	b002      	add	sp, #8
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	46020c00 	.word	0x46020c00
 80023fc:	20152e30 	.word	0x20152e30
 8002400:	08002409 	.word	0x08002409
 8002404:	e000e100 	.word	0xe000e100

08002408 <DMA2D_XferCpltCallback>:
        return instance;
 8002408:	4b02      	ldr	r3, [pc, #8]	; (8002414 <DMA2D_XferCpltCallback+0xc>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 800240e:	6803      	ldr	r3, [r0, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	4718      	bx	r3
 8002414:	20197958 	.word	0x20197958

08002418 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8002418:	b570      	push	{r4, r5, r6, lr}
 800241a:	4604      	mov	r4, r0
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800241c:	2600      	movs	r6, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 800241e:	4625      	mov	r5, r4
 8002420:	4b09      	ldr	r3, [pc, #36]	; (8002448 <_ZN8STM32DMAC1Ev+0x30>)
 8002422:	300c      	adds	r0, #12
 8002424:	6060      	str	r0, [r4, #4]
 8002426:	7226      	strb	r6, [r4, #8]
 8002428:	7266      	strb	r6, [r4, #9]
 800242a:	f845 3b20 	str.w	r3, [r5], #32
 800242e:	2260      	movs	r2, #96	; 0x60
 8002430:	4629      	mov	r1, r5
 8002432:	f014 fa6d 	bl	8016910 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002436:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
        : color(0)
 800243a:	60ee      	str	r6, [r5, #12]
 800243c:	3524      	adds	r5, #36	; 0x24
 800243e:	42ab      	cmp	r3, r5
 8002440:	d1fb      	bne.n	800243a <_ZN8STM32DMAC1Ev+0x22>
}
 8002442:	4620      	mov	r0, r4
 8002444:	bd70      	pop	{r4, r5, r6, pc}
 8002446:	bf00      	nop
 8002448:	08029f08 	.word	0x08029f08

0800244c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 800244c:	b508      	push	{r3, lr}
    switch (format)
 800244e:	290b      	cmp	r1, #11
 8002450:	d80b      	bhi.n	800246a <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 8002452:	e8df f001 	tbb	[pc, r1]
 8002456:	0612      	.short	0x0612
 8002458:	0a0a0a10 	.word	0x0a0a0a10
 800245c:	0808080a 	.word	0x0808080a
 8002460:	0808      	.short	0x0808
 8002462:	2001      	movs	r0, #1
}
 8002464:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002466:	2005      	movs	r0, #5
        break;
 8002468:	e7fc      	b.n	8002464 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 800246a:	2166      	movs	r1, #102	; 0x66
 800246c:	4b04      	ldr	r3, [pc, #16]	; (8002480 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 800246e:	4a05      	ldr	r2, [pc, #20]	; (8002484 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8002470:	4805      	ldr	r0, [pc, #20]	; (8002488 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 8002472:	f025 fdfd 	bl	8028070 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002476:	2000      	movs	r0, #0
 8002478:	e7f4      	b.n	8002464 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800247a:	2002      	movs	r0, #2
    return dma2dColorMode;
 800247c:	e7f2      	b.n	8002464 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 800247e:	bf00      	nop
 8002480:	08029da8 	.word	0x08029da8
 8002484:	08029dc3 	.word	0x08029dc3
 8002488:	08029e0d 	.word	0x08029e0d

0800248c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 800248c:	b508      	push	{r3, lr}
    switch (format)
 800248e:	290a      	cmp	r1, #10
 8002490:	d809      	bhi.n	80024a6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 8002492:	e8df f001 	tbb	[pc, r1]
 8002496:	0610      	.short	0x0610
 8002498:	0808080e 	.word	0x0808080e
 800249c:	06060608 	.word	0x06060608
 80024a0:	06          	.byte	0x06
 80024a1:	00          	.byte	0x00
 80024a2:	2001      	movs	r0, #1
}
 80024a4:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 80024a6:	2187      	movs	r1, #135	; 0x87
 80024a8:	4b04      	ldr	r3, [pc, #16]	; (80024bc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 80024aa:	4a05      	ldr	r2, [pc, #20]	; (80024c0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 80024ac:	4805      	ldr	r0, [pc, #20]	; (80024c4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 80024ae:	f025 fddf 	bl	8028070 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80024b2:	2000      	movs	r0, #0
 80024b4:	e7f6      	b.n	80024a4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 80024b6:	2002      	movs	r0, #2
    return dma2dColorMode;
 80024b8:	e7f4      	b.n	80024a4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 80024ba:	bf00      	nop
 80024bc:	08029da8 	.word	0x08029da8
 80024c0:	08029e5a 	.word	0x08029e5a
 80024c4:	08029e0d 	.word	0x08029e0d

080024c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 80024c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80024cc:	7f4f      	ldrb	r7, [r1, #29]
{
 80024ce:	460c      	mov	r4, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80024d0:	4639      	mov	r1, r7
{
 80024d2:	4681      	mov	r9, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80024d4:	f7ff ffba 	bl	800244c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80024d8:	f894 801e 	ldrb.w	r8, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80024dc:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80024de:	4641      	mov	r1, r8
 80024e0:	4648      	mov	r0, r9
 80024e2:	f7ff ffb3 	bl	800244c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80024e6:	4641      	mov	r1, r8
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80024e8:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80024ea:	4648      	mov	r0, r9
 80024ec:	f7ff ffce 	bl	800248c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80024f0:	8aa1      	ldrh	r1, [r4, #20]
 80024f2:	8b62      	ldrh	r2, [r4, #26]
 80024f4:	4b42      	ldr	r3, [pc, #264]	; (8002600 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 80024f6:	1a52      	subs	r2, r2, r1
 80024f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80024fa:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80024fc:	8b22      	ldrh	r2, [r4, #24]
 80024fe:	1a52      	subs	r2, r2, r1
 8002500:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002502:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002504:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002506:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800250a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800250c:	6920      	ldr	r0, [r4, #16]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800250e:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002510:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002512:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8002514:	6821      	ldr	r1, [r4, #0]
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002516:	f894 c01c 	ldrb.w	ip, [r4, #28]
    switch (blitOp.operation)
 800251a:	2980      	cmp	r1, #128	; 0x80
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800251c:	ea4f 620c 	mov.w	r2, ip, lsl #24
    switch (blitOp.operation)
 8002520:	d026      	beq.n	8002570 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 8002522:	d810      	bhi.n	8002546 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7e>
 8002524:	2920      	cmp	r1, #32
 8002526:	ea45 0402 	orr.w	r4, r5, r2
 800252a:	d061      	beq.n	80025f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x128>
 800252c:	2940      	cmp	r1, #64	; 0x40
 800252e:	d05f      	beq.n	80025f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x128>
 8002530:	2904      	cmp	r1, #4
 8002532:	d05d      	beq.n	80025f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x128>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002534:	4b32      	ldr	r3, [pc, #200]	; (8002600 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8002536:	432a      	orrs	r2, r5
 8002538:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 800253c:	4547      	cmp	r7, r8
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800253e:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002540:	d05a      	beq.n	80025f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x130>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002542:	4a30      	ldr	r2, [pc, #192]	; (8002604 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8002544:	e040      	b.n	80025c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8002546:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800254a:	d007      	beq.n	800255c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
 800254c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002550:	d1f0      	bne.n	8002534 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002552:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002556:	f042 0209 	orr.w	r2, r2, #9
 800255a:	e003      	b.n	8002564 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800255c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002560:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002564:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8002566:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002568:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800256a:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800256c:	6158      	str	r0, [r3, #20]
 800256e:	e02a      	b.n	80025c6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002570:	68a4      	ldr	r4, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002572:	432a      	orrs	r2, r5
 8002574:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002578:	61da      	str	r2, [r3, #28]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800257a:	1d22      	adds	r2, r4, #4
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800257c:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800257e:	6158      	str	r0, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002580:	62da      	str	r2, [r3, #44]	; 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8002582:	7822      	ldrb	r2, [r4, #0]
 8002584:	b142      	cbz	r2, 8002598 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002586:	2a01      	cmp	r2, #1
 8002588:	d021      	beq.n	80025ce <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 800258a:	f240 1101 	movw	r1, #257	; 0x101
 800258e:	4b1e      	ldr	r3, [pc, #120]	; (8002608 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 8002590:	4a1e      	ldr	r2, [pc, #120]	; (800260c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002592:	481f      	ldr	r0, [pc, #124]	; (8002610 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8002594:	f025 fd6c 	bl	8028070 <__assert_func>
            bool blend = true;
 8002598:	2001      	movs	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800259a:	69da      	ldr	r2, [r3, #28]
 800259c:	8861      	ldrh	r1, [r4, #2]
 800259e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80025a2:	3901      	subs	r1, #1
 80025a4:	f022 0210 	bic.w	r2, r2, #16
 80025a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80025ac:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80025ae:	4b14      	ldr	r3, [pc, #80]	; (8002600 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 80025b0:	69da      	ldr	r2, [r3, #28]
 80025b2:	f042 0220 	orr.w	r2, r2, #32
 80025b6:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80025b8:	69da      	ldr	r2, [r3, #28]
 80025ba:	0692      	lsls	r2, r2, #26
 80025bc:	d4fc      	bmi.n	80025b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80025be:	2210      	movs	r2, #16
 80025c0:	609a      	str	r2, [r3, #8]
            if (blend)
 80025c2:	2800      	cmp	r0, #0
 80025c4:	d0bd      	beq.n	8002542 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80025c6:	4a13      	ldr	r2, [pc, #76]	; (8002614 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80025c8:	601a      	str	r2, [r3, #0]
        }

        break;
    }
}
 80025ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80025ce:	8862      	ldrh	r2, [r4, #2]
 80025d0:	69d9      	ldr	r1, [r3, #28]
 80025d2:	1e54      	subs	r4, r2, #1
 80025d4:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 80025d8:	f022 0210 	bic.w	r2, r2, #16
 80025dc:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
                if (blitOp.alpha == 255)
 80025e0:	f1bc 00ff 	subs.w	r0, ip, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80025e4:	f042 0210 	orr.w	r2, r2, #16
                if (blitOp.alpha == 255)
 80025e8:	bf18      	it	ne
 80025ea:	2001      	movne	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80025ec:	61da      	str	r2, [r3, #28]
                break;
 80025ee:	e7de      	b.n	80025ae <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80025f0:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 80025f4:	61dc      	str	r4, [r3, #28]
 80025f6:	e7b8      	b.n	800256a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80025f8:	f240 2201 	movw	r2, #513	; 0x201
 80025fc:	e7e4      	b.n	80025c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 80025fe:	bf00      	nop
 8002600:	4002b000 	.word	0x4002b000
 8002604:	00010201 	.word	0x00010201
 8002608:	08029ea5 	.word	0x08029ea5
 800260c:	08029ebf 	.word	0x08029ebf
 8002610:	08029e0d 	.word	0x08029e0d
 8002614:	00020201 	.word	0x00020201

08002618 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002618:	b570      	push	{r4, r5, r6, lr}
 800261a:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800261c:	7f89      	ldrb	r1, [r1, #30]
 800261e:	f7ff ff35 	bl	800248c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002622:	8aa5      	ldrh	r5, [r4, #20]
 8002624:	8ae1      	ldrh	r1, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002626:	4b11      	ldr	r3, [pc, #68]	; (800266c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002628:	ea41 4105 	orr.w	r1, r1, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800262c:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800262e:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002630:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002632:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002634:	1b52      	subs	r2, r2, r5
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002636:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002638:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 800263a:	6826      	ldr	r6, [r4, #0]
 800263c:	68e5      	ldr	r5, [r4, #12]
 800263e:	2e08      	cmp	r6, #8
 8002640:	d10d      	bne.n	800265e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002642:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002644:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002646:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002648:	7f20      	ldrb	r0, [r4, #28]
 800264a:	4a09      	ldr	r2, [pc, #36]	; (8002670 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 800264c:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002650:	61da      	str	r2, [r3, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002652:	4a08      	ldr	r2, [pc, #32]	; (8002674 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002654:	621d      	str	r5, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002656:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002658:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800265a:	601a      	str	r2, [r3, #0]
    }
}
 800265c:	bd70      	pop	{r4, r5, r6, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 800265e:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002660:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002662:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002664:	4a04      	ldr	r2, [pc, #16]	; (8002678 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002666:	639d      	str	r5, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002668:	e7f7      	b.n	800265a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 800266a:	bf00      	nop
 800266c:	4002b000 	.word	0x4002b000
 8002670:	00010009 	.word	0x00010009
 8002674:	00020201 	.word	0x00020201
 8002678:	00030201 	.word	0x00030201

0800267c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 800267c:	2001      	movs	r0, #1
 800267e:	4770      	bx	lr

08002680 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002680:	200c      	movs	r0, #12
 8002682:	4770      	bx	lr

08002684 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8002684:	230c      	movs	r3, #12
 8002686:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800268a:	3008      	adds	r0, #8
 800268c:	4770      	bx	lr

0800268e <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 800268e:	230c      	movs	r3, #12
 8002690:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002694:	3008      	adds	r0, #8
 8002696:	4770      	bx	lr

08002698 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002698:	2001      	movs	r0, #1
 800269a:	4770      	bx	lr

0800269c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 800269c:	f246 3098 	movw	r0, #25496	; 0x6398
 80026a0:	4770      	bx	lr

080026a2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80026a2:	f246 3398 	movw	r3, #25496	; 0x6398
 80026a6:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80026aa:	3008      	adds	r0, #8
 80026ac:	4770      	bx	lr

080026ae <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80026ae:	f246 3398 	movw	r3, #25496	; 0x6398
 80026b2:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80026b6:	3008      	adds	r0, #8
 80026b8:	4770      	bx	lr

080026ba <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80026ba:	2001      	movs	r0, #1
 80026bc:	4770      	bx	lr

080026be <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80026be:	2010      	movs	r0, #16
 80026c0:	4770      	bx	lr

080026c2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80026c2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80026c6:	3008      	adds	r0, #8
 80026c8:	4770      	bx	lr

080026ca <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80026ca:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80026ce:	3008      	adds	r0, #8
 80026d0:	4770      	bx	lr

080026d2 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 80026d2:	4608      	mov	r0, r1
 80026d4:	f000 bce0 	b.w	8003098 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

080026d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 80026d8:	b510      	push	{r4, lr}
 80026da:	4604      	mov	r4, r0
 80026dc:	4b02      	ldr	r3, [pc, #8]	; (80026e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80026de:	6003      	str	r3, [r0, #0]
 80026e0:	f012 ff61 	bl	80155a6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80026e4:	4620      	mov	r0, r4
 80026e6:	bd10      	pop	{r4, pc}
 80026e8:	08029fc0 	.word	0x08029fc0

080026ec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80026ec:	b510      	push	{r4, lr}
 80026ee:	4604      	mov	r4, r0
 80026f0:	f7ff fff2 	bl	80026d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80026f4:	4620      	mov	r0, r4
 80026f6:	2114      	movs	r1, #20
 80026f8:	f025 fc8d 	bl	8028016 <_ZdlPvj>
 80026fc:	4620      	mov	r0, r4
 80026fe:	bd10      	pop	{r4, pc}

08002700 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002700:	b510      	push	{r4, lr}
 8002702:	4604      	mov	r4, r0
 8002704:	4b02      	ldr	r3, [pc, #8]	; (8002710 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002706:	6003      	str	r3, [r0, #0]
 8002708:	f012 ff4d 	bl	80155a6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800270c:	4620      	mov	r0, r4
 800270e:	bd10      	pop	{r4, pc}
 8002710:	08029f8c 	.word	0x08029f8c

08002714 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002714:	b510      	push	{r4, lr}
 8002716:	4604      	mov	r4, r0
 8002718:	f7ff fff2 	bl	8002700 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800271c:	4620      	mov	r0, r4
 800271e:	f246 31a0 	movw	r1, #25504	; 0x63a0
 8002722:	f025 fc78 	bl	8028016 <_ZdlPvj>
 8002726:	4620      	mov	r0, r4
 8002728:	bd10      	pop	{r4, pc}
	...

0800272c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800272c:	b510      	push	{r4, lr}
 800272e:	4604      	mov	r4, r0
 8002730:	4b02      	ldr	r3, [pc, #8]	; (800273c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002732:	6003      	str	r3, [r0, #0]
 8002734:	f012 ff37 	bl	80155a6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002738:	4620      	mov	r0, r4
 800273a:	bd10      	pop	{r4, pc}
 800273c:	08029f58 	.word	0x08029f58

08002740 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002740:	b510      	push	{r4, lr}
 8002742:	4604      	mov	r4, r0
 8002744:	f7ff fff2 	bl	800272c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002748:	4620      	mov	r0, r4
 800274a:	2118      	movs	r1, #24
 800274c:	f025 fc63 	bl	8028016 <_ZdlPvj>
 8002750:	4620      	mov	r0, r4
 8002752:	bd10      	pop	{r4, pc}

08002754 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8002754:	b510      	push	{r4, lr}
 8002756:	4604      	mov	r4, r0
 8002758:	4b08      	ldr	r3, [pc, #32]	; (800277c <_ZN12FrontendHeapD1Ev+0x28>)
 800275a:	6003      	str	r3, [r0, #0]
 800275c:	f500 40c7 	add.w	r0, r0, #25472	; 0x6380
 8002760:	304c      	adds	r0, #76	; 0x4c
 8002762:	f7ff ffb9 	bl	80026d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002766:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800276a:	f7ff ffc9 	bl	8002700 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800276e:	f104 0014 	add.w	r0, r4, #20
 8002772:	f7ff ffdb 	bl	800272c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002776:	4620      	mov	r0, r4
 8002778:	bd10      	pop	{r4, pc}
 800277a:	bf00      	nop
 800277c:	08029ff4 	.word	0x08029ff4

08002780 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002780:	b508      	push	{r3, lr}
 8002782:	4802      	ldr	r0, [pc, #8]	; (800278c <__tcf_0+0xc>)
 8002784:	f7ff ffe6 	bl	8002754 <_ZN12FrontendHeapD1Ev>
 8002788:	bd08      	pop	{r3, pc}
 800278a:	bf00      	nop
 800278c:	201531c4 	.word	0x201531c4

08002790 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8002790:	b510      	push	{r4, lr}
 8002792:	4604      	mov	r4, r0
 8002794:	f7ff ffde 	bl	8002754 <_ZN12FrontendHeapD1Ev>
 8002798:	4620      	mov	r0, r4
 800279a:	f246 5140 	movw	r1, #25920	; 0x6540
 800279e:	f025 fc3a 	bl	8028016 <_ZdlPvj>
 80027a2:	4620      	mov	r0, r4
 80027a4:	bd10      	pop	{r4, pc}
	...

080027a8 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 480);

void touchgfx_init()
{
 80027a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80027ac:	f000 fb14 	bl	8002dd8 <_ZN14BitmapDatabase11getInstanceEv>
 80027b0:	2400      	movs	r4, #0
 80027b2:	4605      	mov	r5, r0
 80027b4:	f000 fb14 	bl	8002de0 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80027b8:	4623      	mov	r3, r4
 80027ba:	4601      	mov	r1, r0
 80027bc:	4622      	mov	r2, r4
 80027be:	4628      	mov	r0, r5
 80027c0:	9400      	str	r4, [sp, #0]
 80027c2:	f017 fd41 	bl	801a248 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80027c6:	4b27      	ldr	r3, [pc, #156]	; (8002864 <touchgfx_init+0xbc>)
 80027c8:	4a27      	ldr	r2, [pc, #156]	; (8002868 <touchgfx_init+0xc0>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80027ca:	4620      	mov	r0, r4
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	f000 fe61 	bl	8003494 <_ZN8touchgfx5Texts11setLanguageEt>

    display.setFrameBufferFormat(Bitmap::RGB888);
 80027d2:	2101      	movs	r1, #1
 80027d4:	4825      	ldr	r0, [pc, #148]	; (800286c <touchgfx_init+0xc4>)
 80027d6:	f01e fcb3 	bl	8021140 <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE>

    FontManager::setFontProvider(&fontProvider);
 80027da:	4825      	ldr	r0, [pc, #148]	; (8002870 <touchgfx_init+0xc8>)
 80027dc:	f017 fc9c 	bl	801a118 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
        static FrontendHeap instance;
 80027e0:	4d24      	ldr	r5, [pc, #144]	; (8002874 <touchgfx_init+0xcc>)
 80027e2:	e8d5 3f8f 	ldab	r3, [r5]
 80027e6:	07db      	lsls	r3, r3, #31
 80027e8:	d436      	bmi.n	8002858 <touchgfx_init+0xb0>
 80027ea:	4628      	mov	r0, r5
 80027ec:	f025 fc15 	bl	802801a <__cxa_guard_acquire>
 80027f0:	b390      	cbz	r0, 8002858 <touchgfx_init+0xb0>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80027f2:	4c21      	ldr	r4, [pc, #132]	; (8002878 <touchgfx_init+0xd0>)
 80027f4:	4f21      	ldr	r7, [pc, #132]	; (800287c <touchgfx_init+0xd4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 80027f6:	4b22      	ldr	r3, [pc, #136]	; (8002880 <touchgfx_init+0xd8>)
 80027f8:	f107 0618 	add.w	r6, r7, #24
 80027fc:	f104 0014 	add.w	r0, r4, #20
 8002800:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8002804:	6023      	str	r3, [r4, #0]
 8002806:	6060      	str	r0, [r4, #4]
 8002808:	f8c4 8008 	str.w	r8, [r4, #8]
 800280c:	60e7      	str	r7, [r4, #12]
 800280e:	6126      	str	r6, [r4, #16]
 8002810:	f012 feca 	bl	80155a8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002814:	4b1b      	ldr	r3, [pc, #108]	; (8002884 <touchgfx_init+0xdc>)
 8002816:	4640      	mov	r0, r8
 8002818:	6163      	str	r3, [r4, #20]
 800281a:	f012 fec5 	bl	80155a8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800281e:	4b1a      	ldr	r3, [pc, #104]	; (8002888 <touchgfx_init+0xe0>)
 8002820:	4638      	mov	r0, r7
 8002822:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002824:	f012 fec0 	bl	80155a8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002828:	4a18      	ldr	r2, [pc, #96]	; (800288c <touchgfx_init+0xe4>)
 800282a:	f504 43c0 	add.w	r3, r4, #24576	; 0x6000
 800282e:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 8002832:	f503 7078 	add.w	r0, r3, #992	; 0x3e0
 8002836:	f000 fe9b 	bl	8003570 <_ZN5ModelC1Ev>
 800283a:	4622      	mov	r2, r4
 800283c:	f107 0114 	add.w	r1, r7, #20
 8002840:	4630      	mov	r0, r6
 8002842:	f000 fe8b 	bl	800355c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8002846:	4630      	mov	r0, r6
 8002848:	f000 fc26 	bl	8003098 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 800284c:	4810      	ldr	r0, [pc, #64]	; (8002890 <touchgfx_init+0xe8>)
 800284e:	f025 fc2d 	bl	80280ac <atexit>
 8002852:	4628      	mov	r0, r5
 8002854:	f025 fbed 	bl	8028032 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8002858:	480e      	ldr	r0, [pc, #56]	; (8002894 <touchgfx_init+0xec>)
}
 800285a:	b002      	add	sp, #8
 800285c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8002860:	f7ff bb44 	b.w	8001eec <_ZN11TouchGFXHAL10initializeEv>
 8002864:	201979b4 	.word	0x201979b4
 8002868:	2015a55c 	.word	0x2015a55c
 800286c:	2015a560 	.word	0x2015a560
 8002870:	20000008 	.word	0x20000008
 8002874:	201531c0 	.word	0x201531c0
 8002878:	201531c4 	.word	0x201531c4
 800287c:	20159590 	.word	0x20159590
 8002880:	08029ff4 	.word	0x08029ff4
 8002884:	08029f58 	.word	0x08029f58
 8002888:	08029f8c 	.word	0x08029f8c
 800288c:	08029fc0 	.word	0x08029fc0
 8002890:	08002781 	.word	0x08002781
 8002894:	2015a4a8 	.word	0x2015a4a8

08002898 <touchgfx_components_init>:

void touchgfx_components_init()
{
 8002898:	b508      	push	{r3, lr}
    nema_init();
 800289a:	f018 f94f 	bl	801ab3c <nema_init>
    nema_vg_init(480, 480);
}
 800289e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nema_vg_init(480, 480);
 80028a2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80028a6:	4608      	mov	r0, r1
 80028a8:	f019 ba0a 	b.w	801bcc0 <nema_vg_init>

080028ac <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80028ac:	4801      	ldr	r0, [pc, #4]	; (80028b4 <touchgfx_taskEntry+0x8>)
 80028ae:	f013 b98a 	b.w	8015bc6 <_ZN8touchgfx3HAL9taskEntryEv>
 80028b2:	bf00      	nop
 80028b4:	2015a4a8 	.word	0x2015a4a8

080028b8 <_GLOBAL__sub_I_touchgfx_init>:
}
 80028b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
static STM32DMA dma;
 80028ba:	4911      	ldr	r1, [pc, #68]	; (8002900 <_GLOBAL__sub_I_touchgfx_init+0x48>)
{
public:

    STM32TouchController() {}
 80028bc:	4b11      	ldr	r3, [pc, #68]	; (8002904 <_GLOBAL__sub_I_touchgfx_init+0x4c>)
 80028be:	4d12      	ldr	r5, [pc, #72]	; (8002908 <_GLOBAL__sub_I_touchgfx_init+0x50>)
 80028c0:	4608      	mov	r0, r1
 80028c2:	602b      	str	r3, [r5, #0]
 80028c4:	f7ff fda8 	bl	8002418 <_ZN8STM32DMAC1Ev>
static LCDGPU2D display;
 80028c8:	4a10      	ldr	r2, [pc, #64]	; (800290c <_GLOBAL__sub_I_touchgfx_init+0x54>)
        touchgfx::HALGPU2D(dma, display, tc, width, height)
 80028ca:	4c11      	ldr	r4, [pc, #68]	; (8002910 <_GLOBAL__sub_I_touchgfx_init+0x58>)
 80028cc:	4610      	mov	r0, r2
 80028ce:	f01e fc2b 	bl	8021128 <_ZN8touchgfx8LCDGPU2DC1Ev>
 80028d2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80028d6:	4620      	mov	r0, r4
 80028d8:	e9cd 3300 	strd	r3, r3, [sp]
 80028dc:	4a0b      	ldr	r2, [pc, #44]	; (800290c <_GLOBAL__sub_I_touchgfx_init+0x54>)
 80028de:	462b      	mov	r3, r5
 80028e0:	4907      	ldr	r1, [pc, #28]	; (8002900 <_GLOBAL__sub_I_touchgfx_init+0x48>)
 80028e2:	f01a fbdf 	bl	801d0a4 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80028e6:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <_GLOBAL__sub_I_touchgfx_init+0x5c>)
 80028e8:	6023      	str	r3, [r4, #0]
          cc_in(0)
 80028ea:	2300      	movs	r3, #0
 80028ec:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 80028f0:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 80028f4:	4b08      	ldr	r3, [pc, #32]	; (8002918 <_GLOBAL__sub_I_touchgfx_init+0x60>)
 80028f6:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
}
 80028fa:	b003      	add	sp, #12
 80028fc:	bd30      	pop	{r4, r5, pc}
 80028fe:	bf00      	nop
 8002900:	20159708 	.word	0x20159708
 8002904:	08029810 	.word	0x08029810
 8002908:	20159704 	.word	0x20159704
 800290c:	2015a560 	.word	0x2015a560
 8002910:	2015a4a8 	.word	0x2015a4a8
 8002914:	0802999c 	.word	0x0802999c
 8002918:	08029730 	.word	0x08029730

0800291c <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 800291c:	4801      	ldr	r0, [pc, #4]	; (8002924 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 800291e:	f7ff bd2f 	b.w	8002380 <_ZN8STM32DMAD1Ev>
 8002922:	bf00      	nop
 8002924:	20159708 	.word	0x20159708

08002928 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002928:	2290      	movs	r2, #144	; 0x90
 800292a:	4b04      	ldr	r3, [pc, #16]	; (800293c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x14>)
 800292c:	f883 2376 	strb.w	r2, [r3, #886]	; 0x376
 8002930:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
 8002934:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
    NVIC_SetPriority(GPU2D_IRQn, 9);
}
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	e000e100 	.word	0xe000e100

08002940 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(GPU2D_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002940:	4a09      	ldr	r2, [pc, #36]	; (8002968 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8002942:	490a      	ldr	r1, [pc, #40]	; (800296c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8002944:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002946:	480a      	ldr	r0, [pc, #40]	; (8002970 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002948:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800294c:	3b01      	subs	r3, #1
 800294e:	b29b      	uxth	r3, r3
 8002950:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002952:	6911      	ldr	r1, [r2, #16]
 8002954:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8002958:	3901      	subs	r1, #1
 800295a:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 800295c:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 800295e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002966:	4770      	bx	lr
 8002968:	40016800 	.word	0x40016800
 800296c:	2015a570 	.word	0x2015a570
 8002970:	2015a56e 	.word	0x2015a56e

08002974 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HALGPU2D::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8002974:	4b01      	ldr	r3, [pc, #4]	; (800297c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8002976:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
 800297a:	4770      	bx	lr
 800297c:	40016800 	.word	0x40016800

08002980 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002980:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002982:	4b02      	ldr	r3, [pc, #8]	; (800298c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)
 8002984:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002988:	625a      	str	r2, [r3, #36]	; 0x24
}
 800298a:	4770      	bx	lr
 800298c:	40016800 	.word	0x40016800

08002990 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8002990:	b570      	push	{r4, r5, r6, lr}
 8002992:	4604      	mov	r4, r0
    HALGPU2D::initialize(8192);
 8002994:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002998:	f01a fbec 	bl	801d174 <_ZN8touchgfx8HALGPU2D10initializeEi>
    registerEventListener(*(Application::getInstance()));
 800299c:	6823      	ldr	r3, [r4, #0]
 800299e:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80029a0:	f015 f81e 	bl	80179e0 <_ZN8touchgfx11Application11getInstanceEv>
 80029a4:	4601      	mov	r1, r0
 80029a6:	4620      	mov	r0, r4
 80029a8:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 80029aa:	6823      	ldr	r3, [r4, #0]
 80029ac:	4620      	mov	r0, r4
 80029ae:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 80029b2:	4a03      	ldr	r2, [pc, #12]	; (80029c0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x30>)
 80029b4:	46ac      	mov	ip, r5
}
 80029b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 80029ba:	2300      	movs	r3, #0
 80029bc:	4901      	ldr	r1, [pc, #4]	; (80029c4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x34>)
 80029be:	4760      	bx	ip
 80029c0:	200a8d2c 	.word	0x200a8d2c
 80029c4:	2000012c 	.word	0x2000012c

080029c8 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HALGPU2D::beginFrame();
 80029c8:	f01a bb1c 	b.w	801d004 <_ZN8touchgfx8HALGPU2D10beginFrameEv>

080029cc <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
 80029cc:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 80029d0:	b113      	cbz	r3, 80029d8 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xc>
        refreshRequested = true;
 80029d2:	2201      	movs	r2, #1
 80029d4:	4b01      	ldr	r3, [pc, #4]	; (80029dc <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x10>)
 80029d6:	701a      	strb	r2, [r3, #0]
    HALGPU2D::endFrame();
 80029d8:	f01a bb26 	b.w	801d028 <_ZN8touchgfx8HALGPU2D8endFrameEv>
 80029dc:	2015a56c 	.word	0x2015a56c

080029e0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HALGPU2D::flushFrameBuffer(rect);
 80029e0:	f013 b88e 	b.w	8015b00 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080029e4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HALGPU2D::blockCopy(dest, src, numBytes);
 80029e4:	f013 b9f7 	b.w	8015dd6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080029e8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80029e8:	b570      	push	{r4, r5, r6, lr}
 80029ea:	460d      	mov	r5, r1
 80029ec:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80029ee:	b935      	cbnz	r5, 80029fe <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 80029f0:	f240 21d2 	movw	r1, #722	; 0x2d2
 80029f4:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 80029f6:	4a09      	ldr	r2, [pc, #36]	; (8002a1c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 80029f8:	4809      	ldr	r0, [pc, #36]	; (8002a20 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 80029fa:	f025 fb39 	bl	8028070 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80029fe:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
    }
 8002a02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8002a06:	3a00      	subs	r2, #0
 8002a08:	bf18      	it	ne
 8002a0a:	2201      	movne	r2, #1
 8002a0c:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 8002a0e:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8002a10:	6803      	ldr	r3, [r0, #0]
 8002a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a16:	4718      	bx	r3
 8002a18:	0802990b 	.word	0x0802990b
 8002a1c:	08029943 	.word	0x08029943
 8002a20:	080298c6 	.word	0x080298c6
 8002a24:	20197956 	.word	0x20197956

08002a28 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a28:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002a2c:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x30>)
 8002a2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __ASM volatile ("dsb 0xF":::"memory");
 8002a32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002a36:	f3bf 8f6f 	isb	sy
 8002a3a:	2280      	movs	r2, #128	; 0x80
 8002a3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __ASM volatile ("dsb 0xF":::"memory");
 8002a40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002a44:	f3bf 8f6f 	isb	sy
 8002a48:	2210      	movs	r2, #16
 8002a4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __ASM volatile ("dsb 0xF":::"memory");
 8002a4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002a52:	f3bf 8f6f 	isb	sy
}
 8002a56:	4770      	bx	lr
 8002a58:	e000e100 	.word	0xe000e100

08002a5c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a5c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002a60:	4b03      	ldr	r3, [pc, #12]	; (8002a70 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x14>)
 8002a62:	60da      	str	r2, [r3, #12]
 8002a64:	2280      	movs	r2, #128	; 0x80
 8002a66:	611a      	str	r2, [r3, #16]
 8002a68:	2210      	movs	r2, #16
 8002a6a:	611a      	str	r2, [r3, #16]
}
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	e000e100 	.word	0xe000e100

08002a74 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8002a74:	b510      	push	{r4, lr}
        return instance;
 8002a76:	4c14      	ldr	r4, [pc, #80]	; (8002ac8 <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 8002a78:	6823      	ldr	r3, [r4, #0]
 8002a7a:	b323      	cbz	r3, 8002ac6 <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8002a7c:	4b13      	ldr	r3, [pc, #76]	; (8002acc <HAL_LTDC_LineEventCallback+0x58>)
 8002a7e:	4a14      	ldr	r2, [pc, #80]	; (8002ad0 <HAL_LTDC_LineEventCallback+0x5c>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	8811      	ldrh	r1, [r2, #0]
 8002a84:	428b      	cmp	r3, r1
 8002a86:	d113      	bne.n	8002ab0 <HAL_LTDC_LineEventCallback+0x3c>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8002a88:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <HAL_LTDC_LineEventCallback+0x60>)
 8002a8a:	8819      	ldrh	r1, [r3, #0]
 8002a8c:	f008 fd08 	bl	800b4a0 <HAL_LTDC_ProgramLineEvent>
 8002a90:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 8002a92:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8002a96:	3301      	adds	r3, #1
 8002a98:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 8002a9c:	f7ff fc28 	bl	80022f0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8002aa0:	6820      	ldr	r0, [r4, #0]
 8002aa2:	f013 fddd 	bl	8016660 <_ZN8touchgfx3HAL16swapFrameBuffersEv>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8002aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f7ff b9aa 	b.w	8001e04 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8002ab0:	f008 fcf6 	bl	800b4a0 <HAL_LTDC_ProgramLineEvent>
        return instance;
 8002ab4:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 8002ab6:	6803      	ldr	r3, [r0, #0]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	4798      	blx	r3
    }
 8002abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f7ff b9bb 	b.w	8001e3c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 8002ac6:	bd10      	pop	{r4, pc}
 8002ac8:	20197958 	.word	0x20197958
 8002acc:	40016800 	.word	0x40016800
 8002ad0:	2015a570 	.word	0x2015a570
 8002ad4:	2015a56e 	.word	0x2015a56e

08002ad8 <HAL_GPU2D_CommandListCpltCallback>:
#if (USE_HAL_GPU2D_REGISTER_CALLBACKS == 1)
static void GPU2D_CommandListCpltCallback(GPU2D_HandleTypeDef *hgpu2d, uint32_t CmdListID)
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
void HAL_GPU2D_CommandListCpltCallback(GPU2D_HandleTypeDef *hgpu2d, uint32_t CmdListID)
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(hgpu2d);

    last_cl_id = CmdListID;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	4a04      	ldr	r2, [pc, #16]	; (8002af8 <HAL_GPU2D_CommandListCpltCallback+0x20>)
 8002ae6:	6013      	str	r3, [r2, #0]

    /* Return a token back to a semaphore */
    tx_semaphore_put(&nema_irq_sem);
 8002ae8:	4804      	ldr	r0, [pc, #16]	; (8002afc <HAL_GPU2D_CommandListCpltCallback+0x24>)
 8002aea:	f012 fc29 	bl	8015340 <_txe_semaphore_put>
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	2000000c 	.word	0x2000000c
 8002afc:	20196490 	.word	0x20196490

08002b00 <nema_sys_init>:

int32_t nema_sys_init(void)
{
 8002b00:	b590      	push	{r4, r7, lr}
 8002b02:	b089      	sub	sp, #36	; 0x24
 8002b04:	af02      	add	r7, sp, #8
    int error_code = 0;
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]
    /* Register Command List Comlete Callback */
    HAL_GPU2D_RegisterCommandListCpltCallback(&hgpu2d, GPU2D_CommandListCpltCallback);
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

    /* Create IRQ semaphore */
    error_code = tx_semaphore_create(&nema_irq_sem, "nema sema irq", 0);
 8002b0a:	231c      	movs	r3, #28
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	4924      	ldr	r1, [pc, #144]	; (8002ba0 <nema_sys_init+0xa0>)
 8002b10:	4824      	ldr	r0, [pc, #144]	; (8002ba4 <nema_sys_init+0xa4>)
 8002b12:	f012 fb3d 	bl	8015190 <_txe_semaphore_create>
 8002b16:	4603      	mov	r3, r0
 8002b18:	617b      	str	r3, [r7, #20]
    assert(error_code == TX_SUCCESS);
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <nema_sys_init+0x2c>
 8002b20:	4b21      	ldr	r3, [pc, #132]	; (8002ba8 <nema_sys_init+0xa8>)
 8002b22:	4a22      	ldr	r2, [pc, #136]	; (8002bac <nema_sys_init+0xac>)
 8002b24:	2150      	movs	r1, #80	; 0x50
 8002b26:	4822      	ldr	r0, [pc, #136]	; (8002bb0 <nema_sys_init+0xb0>)
 8002b28:	f025 faa2 	bl	8028070 <__assert_func>

    /* Initialise Mem Space */
    error_code = tsi_malloc_init_pool(0, (void*)nemagfx_pool_mem, (uintptr_t)nemagfx_pool_mem, NEMAGFX_BYTE_POOL_SIZE, 1);
 8002b2c:	4a21      	ldr	r2, [pc, #132]	; (8002bb4 <nema_sys_init+0xb4>)
 8002b2e:	2301      	movs	r3, #1
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	4b21      	ldr	r3, [pc, #132]	; (8002bb8 <nema_sys_init+0xb8>)
 8002b34:	491f      	ldr	r1, [pc, #124]	; (8002bb4 <nema_sys_init+0xb4>)
 8002b36:	2000      	movs	r0, #0
 8002b38:	f019 fa48 	bl	801bfcc <tsi_malloc_init_pool>
 8002b3c:	6178      	str	r0, [r7, #20]
    assert(error_code == 0);
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <nema_sys_init+0x50>
 8002b44:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <nema_sys_init+0xbc>)
 8002b46:	4a19      	ldr	r2, [pc, #100]	; (8002bac <nema_sys_init+0xac>)
 8002b48:	2154      	movs	r1, #84	; 0x54
 8002b4a:	4819      	ldr	r0, [pc, #100]	; (8002bb0 <nema_sys_init+0xb0>)
 8002b4c:	f025 fa90 	bl	8028070 <__assert_func>

    /* Allocate ring_buffer memory */
    ring_buffer_str.bo = nema_buffer_create(RING_SIZE);
 8002b50:	4c1b      	ldr	r4, [pc, #108]	; (8002bc0 <nema_sys_init+0xc0>)
 8002b52:	463b      	mov	r3, r7
 8002b54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 f891 	bl	8002c80 <nema_buffer_create>
 8002b5e:	463b      	mov	r3, r7
 8002b60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    assert(ring_buffer_str.bo.base_virt);
 8002b66:	4b16      	ldr	r3, [pc, #88]	; (8002bc0 <nema_sys_init+0xc0>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d105      	bne.n	8002b7a <nema_sys_init+0x7a>
 8002b6e:	4b15      	ldr	r3, [pc, #84]	; (8002bc4 <nema_sys_init+0xc4>)
 8002b70:	4a0e      	ldr	r2, [pc, #56]	; (8002bac <nema_sys_init+0xac>)
 8002b72:	2158      	movs	r1, #88	; 0x58
 8002b74:	480e      	ldr	r0, [pc, #56]	; (8002bb0 <nema_sys_init+0xb0>)
 8002b76:	f025 fa7b 	bl	8028070 <__assert_func>

    /* Initialize Ring Buffer */
    error_code = nema_rb_init(&ring_buffer_str, 1);
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	4810      	ldr	r0, [pc, #64]	; (8002bc0 <nema_sys_init+0xc0>)
 8002b7e:	f017 fd9f 	bl	801a6c0 <nema_rb_init>
 8002b82:	6178      	str	r0, [r7, #20]
    if (error_code < 0)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	da01      	bge.n	8002b8e <nema_sys_init+0x8e>
    {
        return error_code;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	e003      	b.n	8002b96 <nema_sys_init+0x96>
    }

    /* Reset last_cl_id counter */
    last_cl_id = 0;
 8002b8e:	4b0e      	ldr	r3, [pc, #56]	; (8002bc8 <nema_sys_init+0xc8>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]

    return error_code;
 8002b94:	697b      	ldr	r3, [r7, #20]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	371c      	adds	r7, #28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd90      	pop	{r4, r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	080295d4 	.word	0x080295d4
 8002ba4:	20196490 	.word	0x20196490
 8002ba8:	080295e4 	.word	0x080295e4
 8002bac:	0802a000 	.word	0x0802a000
 8002bb0:	08029600 	.word	0x08029600
 8002bb4:	2015a578 	.word	0x2015a578
 8002bb8:	0003bf00 	.word	0x0003bf00
 8002bbc:	0802964c 	.word	0x0802964c
 8002bc0:	20196478 	.word	0x20196478
 8002bc4:	0802965c 	.word	0x0802965c
 8002bc8:	2000000c 	.word	0x2000000c

08002bcc <nema_reg_read>:

uint32_t nema_reg_read(uint32_t reg)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
    return HAL_GPU2D_ReadRegister(&hgpu2d, reg);
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	4804      	ldr	r0, [pc, #16]	; (8002be8 <nema_reg_read+0x1c>)
 8002bd8:	f007 f9f7 	bl	8009fca <HAL_GPU2D_ReadRegister>
 8002bdc:	4603      	mov	r3, r0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20152eb4 	.word	0x20152eb4

08002bec <nema_reg_write>:

void nema_reg_write(uint32_t reg, uint32_t value)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
    HAL_GPU2D_WriteRegister(&hgpu2d, reg, value);
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	4803      	ldr	r0, [pc, #12]	; (8002c08 <nema_reg_write+0x1c>)
 8002bfc:	f007 f9f7 	bl	8009fee <HAL_GPU2D_WriteRegister>
}
 8002c00:	bf00      	nop
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20152eb4 	.word	0x20152eb4

08002c0c <nema_wait_irq>:

int nema_wait_irq(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
    /* Wait indefinitely for a free semaphore */
    tx_semaphore_get(&nema_irq_sem, TX_WAIT_FOREVER);
 8002c10:	f04f 31ff 	mov.w	r1, #4294967295
 8002c14:	4802      	ldr	r0, [pc, #8]	; (8002c20 <nema_wait_irq+0x14>)
 8002c16:	f012 fb51 	bl	80152bc <_txe_semaphore_get>

    return 0;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	20196490 	.word	0x20196490

08002c24 <nema_wait_irq_cl>:

int nema_wait_irq_cl(int cl_id)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
    while (last_cl_id < cl_id)
 8002c2c:	e001      	b.n	8002c32 <nema_wait_irq_cl+0xe>
    {
        (void)nema_wait_irq();
 8002c2e:	f7ff ffed 	bl	8002c0c <nema_wait_irq>
    while (last_cl_id < cl_id)
 8002c32:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <nema_wait_irq_cl+0x24>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	dcf8      	bgt.n	8002c2e <nema_wait_irq_cl+0xa>
    }

    return 0;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	2000000c 	.word	0x2000000c

08002c4c <nema_host_free>:

    return 0;
}

void nema_host_free(void *ptr)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
    tsi_free(ptr);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f019 fa21 	bl	801c09c <tsi_free>
}
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <nema_host_malloc>:

void *nema_host_malloc(unsigned size)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b082      	sub	sp, #8
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
    return tsi_malloc(size);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	2000      	movs	r0, #0
 8002c70:	f019 f9d4 	bl	801c01c <tsi_malloc_pool>
 8002c74:	4603      	mov	r3, r0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
	...

08002c80 <nema_buffer_create>:

nema_buffer_t nema_buffer_create(int size)
{
 8002c80:	b590      	push	{r4, r7, lr}
 8002c82:	b087      	sub	sp, #28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
    nema_buffer_t bo;
    memset(&bo, 0, sizeof(bo));
 8002c8a:	f107 0308 	add.w	r3, r7, #8
 8002c8e:	2210      	movs	r2, #16
 8002c90:	2100      	movs	r1, #0
 8002c92:	4618      	mov	r0, r3
 8002c94:	f025 fa6a 	bl	802816c <memset>
    bo.base_virt = tsi_malloc(size);
 8002c98:	6839      	ldr	r1, [r7, #0]
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	f019 f9be 	bl	801c01c <tsi_malloc_pool>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	613b      	str	r3, [r7, #16]
    bo.base_phys = (uint32_t)bo.base_virt;
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	617b      	str	r3, [r7, #20]
    bo.size      = size;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	60bb      	str	r3, [r7, #8]
    assert(bo.base_virt != 0 && "Unable to allocate memory in nema_buffer_create");
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d105      	bne.n	8002cbe <nema_buffer_create+0x3e>
 8002cb2:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <nema_buffer_create+0x54>)
 8002cb4:	4a08      	ldr	r2, [pc, #32]	; (8002cd8 <nema_buffer_create+0x58>)
 8002cb6:	219e      	movs	r1, #158	; 0x9e
 8002cb8:	4808      	ldr	r0, [pc, #32]	; (8002cdc <nema_buffer_create+0x5c>)
 8002cba:	f025 f9d9 	bl	8028070 <__assert_func>

    return bo;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	461c      	mov	r4, r3
 8002cc2:	f107 0308 	add.w	r3, r7, #8
 8002cc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	371c      	adds	r7, #28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd90      	pop	{r4, r7, pc}
 8002cd4:	0802967c 	.word	0x0802967c
 8002cd8:	0802a010 	.word	0x0802a010
 8002cdc:	08029600 	.word	0x08029600

08002ce0 <nema_buffer_create_pool>:

nema_buffer_t nema_buffer_create_pool(int pool, int size)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(pool);

    return nema_buffer_create(size);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff ffc5 	bl	8002c80 <nema_buffer_create>
}
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <nema_buffer_map>:

void *nema_buffer_map(nema_buffer_t *bo)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
    return bo->base_virt;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <nema_buffer_destroy>:
    /* Prevent unused argument(s) compilation warning */
    UNUSED(bo);
}

void nema_buffer_destroy(nema_buffer_t *bo)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
    if (bo->fd == -1)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d26:	d012      	beq.n	8002d4e <nema_buffer_destroy+0x38>
    {
        return; /* Buffer weren't allocated! */
    }

    tsi_free(bo->base_virt);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f019 f9b5 	bl	801c09c <tsi_free>

    bo->base_virt = (void *)0;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	609a      	str	r2, [r3, #8]
    bo->base_phys = 0;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	60da      	str	r2, [r3, #12]
    bo->size      = 0;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
    bo->fd        = -1; /* Buffer not allocated */
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f04f 32ff 	mov.w	r2, #4294967295
 8002d4a:	605a      	str	r2, [r3, #4]
 8002d4c:	e000      	b.n	8002d50 <nema_buffer_destroy+0x3a>
        return; /* Buffer weren't allocated! */
 8002d4e:	bf00      	nop
}
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <nema_buffer_flush>:
{
    return bo->base_phys;
}

void nema_buffer_flush(nema_buffer_t * bo)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(bo);
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <nema_mutex_lock>:

int nema_mutex_lock(int mutex_id)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b085      	sub	sp, #20
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
    int retval = 0;
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
/* USER CODE BEGIN nema_mutex_lock */
    /* Prevent unused argument(s) compilation warning */
    UNUSED(mutex_id);
/* USER CODE END nema_mutex_lock */

    return retval;
 8002d76:	68fb      	ldr	r3, [r7, #12]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <nema_mutex_unlock>:

int nema_mutex_unlock(int mutex_id)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
    int retval = 0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	60fb      	str	r3, [r7, #12]
/* USER CODE BEGIN nema_mutex_unlock */
    /* Prevent unused argument(s) compilation warning */
    UNUSED(mutex_id);
/* USER CODE END nema_mutex_unlock */

    return retval;
 8002d90:	68fb      	ldr	r3, [r7, #12]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8002d9e:	4770      	bx	lr

08002da0 <_ZN23ApplicationFontProviderD0Ev>:
 8002da0:	b510      	push	{r4, lr}
 8002da2:	4604      	mov	r4, r0
 8002da4:	2104      	movs	r1, #4
 8002da6:	f025 f936 	bl	8028016 <_ZdlPvj>
 8002daa:	4620      	mov	r0, r4
 8002dac:	bd10      	pop	{r4, pc}

08002dae <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 8002dae:	2901      	cmp	r1, #1
{
 8002db0:	b508      	push	{r3, lr}
    switch (typography)
 8002db2:	d006      	beq.n	8002dc2 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 8002db4:	2902      	cmp	r1, #2
 8002db6:	d008      	beq.n	8002dca <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 8002db8:	b959      	cbnz	r1, 8002dd2 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8002dba:	f000 fba9 	bl	8003510 <_ZN17TypedTextDatabase8getFontsEv>
 8002dbe:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 8002dc0:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8002dc2:	f000 fba5 	bl	8003510 <_ZN17TypedTextDatabase8getFontsEv>
 8002dc6:	6840      	ldr	r0, [r0, #4]
 8002dc8:	e7fa      	b.n	8002dc0 <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8002dca:	f000 fba1 	bl	8003510 <_ZN17TypedTextDatabase8getFontsEv>
 8002dce:	6880      	ldr	r0, [r0, #8]
 8002dd0:	e7f6      	b.n	8002dc0 <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	e7f4      	b.n	8002dc0 <_ZN23ApplicationFontProvider7getFontEt+0x12>
	...

08002dd8 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8002dd8:	4800      	ldr	r0, [pc, #0]	; (8002ddc <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8002dda:	4770      	bx	lr
 8002ddc:	0802a038 	.word	0x0802a038

08002de0 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8002de0:	2001      	movs	r0, #1
 8002de2:	4770      	bx	lr

08002de4 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8002de4:	b513      	push	{r0, r1, r4, lr}
 8002de6:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8002de8:	b151      	cbz	r1, 8002e00 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8002dea:	6803      	ldr	r3, [r0, #0]
        const uint8_t* dummyPixelDataPointer = 0;
 8002dec:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8002dee:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8002df2:	aa01      	add	r2, sp, #4
 8002df4:	689c      	ldr	r4, [r3, #8]
 8002df6:	f10d 0303 	add.w	r3, sp, #3
 8002dfa:	47a0      	blx	r4
        return glyph;
    }
 8002dfc:	b002      	add	sp, #8
 8002dfe:	bd10      	pop	{r4, pc}
            return 0;
 8002e00:	4608      	mov	r0, r1
 8002e02:	e7fb      	b.n	8002dfc <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08002e04 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8002e04:	89c0      	ldrh	r0, [r0, #14]
 8002e06:	4770      	bx	lr

08002e08 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8002e08:	8a00      	ldrh	r0, [r0, #16]
 8002e0a:	4770      	bx	lr

08002e0c <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8002e0c:	88c0      	ldrh	r0, [r0, #6]
 8002e0e:	4770      	bx	lr

08002e10 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8002e10:	8880      	ldrh	r0, [r0, #4]
 8002e12:	4770      	bx	lr

08002e14 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8002e14:	7a80      	ldrb	r0, [r0, #10]
    }
 8002e16:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8002e1a:	4770      	bx	lr

08002e1c <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8002e1c:	7a80      	ldrb	r0, [r0, #10]
    }
 8002e1e:	09c0      	lsrs	r0, r0, #7
 8002e20:	4770      	bx	lr

08002e22 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8002e22:	4770      	bx	lr

08002e24 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8002e24:	4770      	bx	lr

08002e26 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8002e26:	f500 7398 	add.w	r3, r0, #304	; 0x130
 8002e2a:	6808      	ldr	r0, [r1, #0]
 8002e2c:	6849      	ldr	r1, [r1, #4]
 8002e2e:	c303      	stmia	r3!, {r0, r1}
    }
 8002e30:	4770      	bx	lr

08002e32 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8002e32:	4770      	bx	lr

08002e34 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8002e34:	4770      	bx	lr

08002e36 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8002e36:	6041      	str	r1, [r0, #4]
    }
 8002e38:	4770      	bx	lr

08002e3a <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8002e3a:	4770      	bx	lr

08002e3c <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002e3c:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8002e3e:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8002e42:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8002e46:	2300      	movs	r3, #0
 8002e48:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8002e4c:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8002e50:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	08002efd 	.word	0x08002efd

08002e5c <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	7203      	strb	r3, [r0, #8]
    }
 8002e60:	4770      	bx	lr

08002e62 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8002e62:	4770      	bx	lr

08002e64 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8002e64:	4770      	bx	lr

08002e66 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8002e66:	4603      	mov	r3, r0
 8002e68:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8002e6a:	6841      	ldr	r1, [r0, #4]
 8002e6c:	68c2      	ldr	r2, [r0, #12]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	1054      	asrs	r4, r2, #1
 8002e72:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8002e76:	07d2      	lsls	r2, r2, #31
 8002e78:	bf48      	it	mi
 8002e7a:	590a      	ldrmi	r2, [r1, r4]
    }
 8002e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8002e80:	bf48      	it	mi
 8002e82:	58d3      	ldrmi	r3, [r2, r3]
 8002e84:	4718      	bx	r3

08002e86 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 8002e86:	6843      	ldr	r3, [r0, #4]
 8002e88:	b12b      	cbz	r3, 8002e96 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 8002e8a:	6883      	ldr	r3, [r0, #8]
 8002e8c:	b92b      	cbnz	r3, 8002e9a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8002e8e:	68c0      	ldr	r0, [r0, #12]
 8002e90:	f000 0001 	and.w	r0, r0, #1
 8002e94:	4770      	bx	lr
 8002e96:	4618      	mov	r0, r3
 8002e98:	4770      	bx	lr
 8002e9a:	2001      	movs	r0, #1
    }
 8002e9c:	4770      	bx	lr

08002e9e <_ZN8touchgfx12NoTransitionD0Ev>:
 8002e9e:	b510      	push	{r4, lr}
 8002ea0:	4604      	mov	r4, r0
 8002ea2:	210c      	movs	r1, #12
 8002ea4:	f025 f8b7 	bl	8028016 <_ZdlPvj>
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	bd10      	pop	{r4, pc}

08002eac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002eac:	b510      	push	{r4, lr}
 8002eae:	4604      	mov	r4, r0
 8002eb0:	2110      	movs	r1, #16
 8002eb2:	f025 f8b0 	bl	8028016 <_ZdlPvj>
 8002eb6:	4620      	mov	r0, r4
 8002eb8:	bd10      	pop	{r4, pc}

08002eba <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8002eba:	b510      	push	{r4, lr}
 8002ebc:	4604      	mov	r4, r0
 8002ebe:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8002ec2:	f025 f8a8 	bl	8028016 <_ZdlPvj>
 8002ec6:	4620      	mov	r0, r4
 8002ec8:	bd10      	pop	{r4, pc}

08002eca <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8002eca:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 8002ecc:	f014 fd88 	bl	80179e0 <_ZN8touchgfx11Application11getInstanceEv>
    }
 8002ed0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
 8002ed4:	f015 b9cc 	b.w	8018270 <_ZN8touchgfx11Application10invalidateEv>

08002ed8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002ed8:	b510      	push	{r4, lr}
 8002eda:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002edc:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 8002ee0:	b158      	cbz	r0, 8002efa <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8002ee2:	6803      	ldr	r3, [r0, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	4798      	blx	r3
 8002ee8:	b138      	cbz	r0, 8002efa <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8002eea:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 8002eee:	6803      	ldr	r3, [r0, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
 8002efa:	bd10      	pop	{r4, pc}

08002efc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8002efc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002f00:	e9d0 5a55 	ldrd	r5, sl, [r0, #340]	; 0x154
{
 8002f04:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002f06:	68a8      	ldr	r0, [r5, #8]
 8002f08:	6803      	ldr	r3, [r0, #0]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	4798      	blx	r3
 8002f0e:	f246 3397 	movw	r3, #25495	; 0x6397
 8002f12:	4298      	cmp	r0, r3
 8002f14:	d805      	bhi.n	8002f22 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x26>
 8002f16:	21a3      	movs	r1, #163	; 0xa3
 8002f18:	4b45      	ldr	r3, [pc, #276]	; (8003030 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8002f1a:	4a46      	ldr	r2, [pc, #280]	; (8003034 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002f1c:	4846      	ldr	r0, [pc, #280]	; (8003038 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8002f1e:	f025 f8a7 	bl	8028070 <__assert_func>
 8002f22:	6868      	ldr	r0, [r5, #4]
 8002f24:	6803      	ldr	r3, [r0, #0]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	4798      	blx	r3
 8002f2a:	280f      	cmp	r0, #15
 8002f2c:	d803      	bhi.n	8002f36 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x3a>
 8002f2e:	21a4      	movs	r1, #164	; 0xa4
 8002f30:	4b42      	ldr	r3, [pc, #264]	; (800303c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 8002f32:	4a40      	ldr	r2, [pc, #256]	; (8003034 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8002f34:	e7f2      	b.n	8002f1c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002f36:	68e8      	ldr	r0, [r5, #12]
 8002f38:	6803      	ldr	r3, [r0, #0]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	4798      	blx	r3
 8002f3e:	280b      	cmp	r0, #11
 8002f40:	d803      	bhi.n	8002f4a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4e>
 8002f42:	21a5      	movs	r1, #165	; 0xa5
 8002f44:	4b3e      	ldr	r3, [pc, #248]	; (8003040 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>)
 8002f46:	4a3b      	ldr	r2, [pc, #236]	; (8003034 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8002f48:	e7e8      	b.n	8002f1c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    Application::getInstance()->clearAllTimerWidgets();
 8002f4a:	f014 fd49 	bl	80179e0 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 8002f4e:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8003048 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x14c>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8002f52:	3004      	adds	r0, #4
 8002f54:	f014 fd69 	bl	8017a2a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8002f58:	f8d9 0000 	ldr.w	r0, [r9]
 8002f5c:	b110      	cbz	r0, 8002f64 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 8002f5e:	6803      	ldr	r3, [r0, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	4798      	blx	r3
    if (*currentTrans)
 8002f64:	f8d9 0000 	ldr.w	r0, [r9]
 8002f68:	b110      	cbz	r0, 8002f70 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 8002f6a:	6803      	ldr	r3, [r0, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4798      	blx	r3
    if (*currentScreen)
 8002f70:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 800304c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x150>
 8002f74:	f8d8 0000 	ldr.w	r0, [r8]
 8002f78:	b110      	cbz	r0, 8002f80 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 8002f7a:	6803      	ldr	r3, [r0, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	4798      	blx	r3
    if (*currentPresenter)
 8002f80:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8002f84:	b110      	cbz	r0, 8002f8c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 8002f86:	6803      	ldr	r3, [r0, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	4798      	blx	r3
    if (*currentScreen)
 8002f8c:	f8d8 0000 	ldr.w	r0, [r8]
 8002f90:	b110      	cbz	r0, 8002f98 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 8002f92:	6803      	ldr	r3, [r0, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4798      	blx	r3
    if (*currentPresenter)
 8002f98:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8002f9c:	b110      	cbz	r0, 8002fa4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 8002f9e:	6803      	ldr	r3, [r0, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002fa4:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	6803      	ldr	r3, [r0, #0]
        : screenContainer(0), done(false)
 8002faa:	f04f 0b00 	mov.w	fp, #0
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	4798      	blx	r3
 8002fb2:	4b24      	ldr	r3, [pc, #144]	; (8003044 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>)
 8002fb4:	4604      	mov	r4, r0
 8002fb6:	6003      	str	r3, [r0, #0]
 8002fb8:	f8c0 b004 	str.w	fp, [r0, #4]
 8002fbc:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002fc0:	68a8      	ldr	r0, [r5, #8]
 8002fc2:	4659      	mov	r1, fp
 8002fc4:	6803      	ldr	r3, [r0, #0]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	4798      	blx	r3
 8002fca:	4606      	mov	r6, r0
 8002fcc:	f000 fbd8 	bl	8003780 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002fd0:	6868      	ldr	r0, [r5, #4]
 8002fd2:	4659      	mov	r1, fp
 8002fd4:	6803      	ldr	r3, [r0, #0]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	4798      	blx	r3
 8002fda:	4605      	mov	r5, r0
 8002fdc:	4631      	mov	r1, r6
 8002fde:	f000 fad9 	bl	8003594 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 8002fe2:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8002fe6:	f8c7 513c 	str.w	r5, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 8002fea:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 8002fee:	b1e5      	cbz	r5, 800302a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12e>
 8002ff0:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8002ff2:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8002ff6:	6833      	ldr	r3, [r6, #0]
 8002ff8:	4630      	mov	r0, r6
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8002ffa:	f8c5 a008 	str.w	sl, [r5, #8]
 8002ffe:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8003000:	63f5      	str	r5, [r6, #60]	; 0x3c
 8003002:	4798      	blx	r3
    newPresenter->activate();
 8003004:	682b      	ldr	r3, [r5, #0]
 8003006:	4628      	mov	r0, r5
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800300c:	4621      	mov	r1, r4
 800300e:	4630      	mov	r0, r6
 8003010:	f016 f97e 	bl	8019310 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003014:	6823      	ldr	r3, [r4, #0]
 8003016:	4620      	mov	r0, r4
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	4798      	blx	r3
    newTransition->invalidate();
 800301c:	4620      	mov	r0, r4
 800301e:	6823      	ldr	r3, [r4, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
}
 8003022:	b001      	add	sp, #4
 8003024:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003028:	4718      	bx	r3
    model->bind(newPresenter);
 800302a:	462b      	mov	r3, r5
 800302c:	e7e1      	b.n	8002ff2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xf6>
 800302e:	bf00      	nop
 8003030:	0802a04c 	.word	0x0802a04c
 8003034:	0802a0da 	.word	0x0802a0da
 8003038:	0802a1de 	.word	0x0802a1de
 800303c:	0802a225 	.word	0x0802a225
 8003040:	0802a2c8 	.word	0x0802a2c8
 8003044:	0802a3d8 	.word	0x0802a3d8
 8003048:	20197998 	.word	0x20197998
 800304c:	20197994 	.word	0x20197994

08003050 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003050:	b570      	push	{r4, r5, r6, lr}
 8003052:	4604      	mov	r4, r0
 8003054:	460d      	mov	r5, r1
 8003056:	4616      	mov	r6, r2
          pendingScreenTransitionCallback(0)
 8003058:	f014 fd84 	bl	8017b64 <_ZN8touchgfx11ApplicationC1Ev>
 800305c:	2100      	movs	r1, #0
        instance = this;
 800305e:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x38>)
        : pobject(0), pmemfun(0)
 8003060:	e9c4 1153 	strd	r1, r1, [r4, #332]	; 0x14c
 8003064:	601c      	str	r4, [r3, #0]
      model(m)
 8003066:	4b09      	ldr	r3, [pc, #36]	; (800308c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x3c>)
          pendingScreenTransitionCallback(0)
 8003068:	e9c4 114f 	strd	r1, r1, [r4, #316]	; 0x13c
 800306c:	6023      	str	r3, [r4, #0]
 800306e:	4b08      	ldr	r3, [pc, #32]	; (8003090 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x40>)
 8003070:	e9c4 6555 	strd	r6, r5, [r4, #340]	; 0x154
 8003074:	e9c4 3151 	strd	r3, r1, [r4, #324]	; 0x144
        return instance;
 8003078:	4b06      	ldr	r3, [pc, #24]	; (8003094 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x44>)
 800307a:	6818      	ldr	r0, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800307c:	6803      	ldr	r3, [r0, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	4798      	blx	r3
}
 8003082:	4620      	mov	r0, r4
 8003084:	bd70      	pop	{r4, r5, r6, pc}
 8003086:	bf00      	nop
 8003088:	201979a4 	.word	0x201979a4
 800308c:	0802a38c 	.word	0x0802a38c
 8003090:	0802a374 	.word	0x0802a374
 8003094:	20197958 	.word	0x20197958

08003098 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003098:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 800309a:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 800309e:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 80030a2:	2300      	movs	r3, #0
 80030a4:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 80030a8:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 80030ac:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	08002efd 	.word	0x08002efd

080030b8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 80030b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80030ba:	4770      	bx	lr

080030bc <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 80030bc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80030be:	4770      	bx	lr

080030c0 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 80030c0:	4770      	bx	lr

080030c2 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80030c2:	888b      	ldrh	r3, [r1, #4]
 80030c4:	69c0      	ldr	r0, [r0, #28]
 80030c6:	0adb      	lsrs	r3, r3, #11
 80030c8:	680a      	ldr	r2, [r1, #0]
 80030ca:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 80030ce:	4410      	add	r0, r2
 80030d0:	4770      	bx	lr

080030d2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80030d2:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 80030d4:	b1c2      	cbz	r2, 8003108 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 80030d6:	7b13      	ldrb	r3, [r2, #12]
 80030d8:	b1b3      	cbz	r3, 8003108 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80030da:	7b54      	ldrb	r4, [r2, #13]
 80030dc:	7ad2      	ldrb	r2, [r2, #11]
 80030de:	0224      	lsls	r4, r4, #8
 80030e0:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80030e4:	4314      	orrs	r4, r2
 80030e6:	6a02      	ldr	r2, [r0, #32]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80030e8:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80030ea:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 80030ee:	8813      	ldrh	r3, [r2, #0]
 80030f0:	428b      	cmp	r3, r1
 80030f2:	d102      	bne.n	80030fa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 80030f4:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 80030f8:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 80030fa:	d805      	bhi.n	8003108 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80030fc:	3801      	subs	r0, #1
 80030fe:	b280      	uxth	r0, r0
 8003100:	3204      	adds	r2, #4
 8003102:	2800      	cmp	r0, #0
 8003104:	d1f3      	bne.n	80030ee <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8003106:	e7f7      	b.n	80030f8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8003108:	2000      	movs	r0, #0
 800310a:	e7f5      	b.n	80030f8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

0800310c <_ZN8touchgfx13GeneratedFontD0Ev>:
 800310c:	b510      	push	{r4, lr}
 800310e:	4604      	mov	r4, r0
 8003110:	212c      	movs	r1, #44	; 0x2c
 8003112:	f024 ff80 	bl	8028016 <_ZdlPvj>
 8003116:	4620      	mov	r0, r4
 8003118:	bd10      	pop	{r4, pc}
	...

0800311c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800311c:	b530      	push	{r4, r5, lr}
 800311e:	4604      	mov	r4, r0
 8003120:	b08b      	sub	sp, #44	; 0x2c
      arabicTable(formsTable)
 8003122:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
 8003126:	9508      	str	r5, [sp, #32]
 8003128:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 800312c:	9507      	str	r5, [sp, #28]
 800312e:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8003132:	9506      	str	r5, [sp, #24]
 8003134:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 8003138:	9505      	str	r5, [sp, #20]
 800313a:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800313e:	9504      	str	r5, [sp, #16]
 8003140:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8003144:	9503      	str	r5, [sp, #12]
 8003146:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 800314a:	9502      	str	r5, [sp, #8]
 800314c:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8003150:	9501      	str	r5, [sp, #4]
 8003152:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8003156:	9500      	str	r5, [sp, #0]
 8003158:	f015 fd34 	bl	8018bc4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
}
 800315c:	4620      	mov	r0, r4
      arabicTable(formsTable)
 800315e:	4b06      	ldr	r3, [pc, #24]	; (8003178 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
 8003160:	6023      	str	r3, [r4, #0]
 8003162:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003164:	61e3      	str	r3, [r4, #28]
 8003166:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003168:	6223      	str	r3, [r4, #32]
 800316a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800316c:	6263      	str	r3, [r4, #36]	; 0x24
 800316e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003170:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8003172:	b00b      	add	sp, #44	; 0x2c
 8003174:	bd30      	pop	{r4, r5, pc}
 8003176:	bf00      	nop
 8003178:	0802a3fc 	.word	0x0802a3fc

0800317c <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 800317c:	2000      	movs	r0, #0
 800317e:	4770      	bx	lr

08003180 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8003180:	8081      	strh	r1, [r0, #4]
    }
 8003182:	4770      	bx	lr

08003184 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8003184:	80c1      	strh	r1, [r0, #6]
    }
 8003186:	4770      	bx	lr

08003188 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8003188:	8101      	strh	r1, [r0, #8]
    }
 800318a:	4770      	bx	lr

0800318c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 800318c:	8141      	strh	r1, [r0, #10]
    }
 800318e:	4770      	bx	lr

08003190 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8003190:	4770      	bx	lr

08003192 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8003192:	4770      	bx	lr

08003194 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8003194:	4770      	bx	lr

08003196 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8003196:	4770      	bx	lr

08003198 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8003198:	4770      	bx	lr

0800319a <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800319a:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 800319c:	88c4      	ldrh	r4, [r0, #6]
 800319e:	6803      	ldr	r3, [r0, #0]
 80031a0:	1b12      	subs	r2, r2, r4
 80031a2:	8884      	ldrh	r4, [r0, #4]
 80031a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a6:	1b09      	subs	r1, r1, r4
 80031a8:	b212      	sxth	r2, r2
    }
 80031aa:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 80031ae:	b209      	sxth	r1, r1
 80031b0:	4718      	bx	r3

080031b2 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80031b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031b6:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80031b8:	f04f 33ff 	mov.w	r3, #4294967295
 80031bc:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 80031be:	6813      	ldr	r3, [r2, #0]
 80031c0:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 80031c2:	6010      	str	r0, [r2, #0]
    }
 80031c4:	4770      	bx	lr

080031c6 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 80031c6:	4770      	bx	lr

080031c8 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 80031c8:	4770      	bx	lr

080031ca <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 80031ca:	4770      	bx	lr

080031cc <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 80031cc:	4770      	bx	lr

080031ce <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 80031ce:	4770      	bx	lr

080031d0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 80031d0:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80031d4:	b11a      	cbz	r2, 80031de <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 80031d6:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 80031da:	b102      	cbz	r2, 80031de <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 80031dc:	6018      	str	r0, [r3, #0]
        }
    }
 80031de:	4770      	bx	lr

080031e0 <_ZN15Screen1ViewBase9tick_funcEv>:
     * Virtual Action Handlers
     */
    virtual void tick_func()
    {
        // Override and implement this function in Screen1
    }
 80031e0:	4770      	bx	lr

080031e2 <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 80031e2:	4770      	bx	lr

080031e4 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 80031e4:	4770      	bx	lr

080031e6 <_ZN15Screen1ViewBase15handleTickEventEv>:
void Screen1ViewBase::handleTickEvent()
{
    //tick_func
    //When every N tick call virtual function
    //Call tick_func
    tick_func();
 80031e6:	6803      	ldr	r3, [r0, #0]
 80031e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ea:	4718      	bx	r3

080031ec <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 80031ec:	b510      	push	{r4, lr}
 80031ee:	4604      	mov	r4, r0
}
 80031f0:	216c      	movs	r1, #108	; 0x6c
 80031f2:	f024 ff10 	bl	8028016 <_ZdlPvj>
 80031f6:	4620      	mov	r0, r4
 80031f8:	bd10      	pop	{r4, pc}

080031fa <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80031fa:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80031fe:	b112      	cbz	r2, 8003206 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8003200:	6803      	ldr	r3, [r0, #0]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	4718      	bx	r3
    }
 8003206:	4770      	bx	lr

08003208 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
 8003208:	b538      	push	{r3, r4, r5, lr}
 800320a:	4604      	mov	r4, r0
        : presenter(0)
 800320c:	f015 fed4 	bl	8018fb8 <_ZN8touchgfx6ScreenC1Ev>
 8003210:	4625      	mov	r5, r4
 8003212:	2300      	movs	r3, #0
 8003214:	4a14      	ldr	r2, [pc, #80]	; (8003268 <_ZN15Screen1ViewBaseC1Ev+0x60>)
 8003216:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003218:	f845 2b40 	str.w	r2, [r5], #64
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 800321c:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
 8003220:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
          visible(true)
 8003224:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 8003228:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
        : color(col)
 800322c:	66a3      	str	r3, [r4, #104]	; 0x68
 800322e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003232:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8003236:	23ff      	movs	r3, #255	; 0xff
 8003238:	4a0c      	ldr	r2, [pc, #48]	; (800326c <_ZN15Screen1ViewBaseC1Ev+0x64>)
 800323a:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
 800323e:	6422      	str	r2, [r4, #64]	; 0x40
        setWidth(width);
 8003240:	4628      	mov	r0, r5
 8003242:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003246:	f7ff ff9f 	bl	8003188 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 800324a:	4628      	mov	r0, r5
 800324c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003250:	f7ff ff9c 	bl	800318c <_ZN8touchgfx8Drawable9setHeightEs>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8003254:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003258:	1d20      	adds	r0, r4, #4
 800325a:	4629      	mov	r1, r5
 800325c:	66a3      	str	r3, [r4, #104]	; 0x68
 800325e:	f012 f9b7 	bl	80155d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003262:	4620      	mov	r0, r4
 8003264:	bd38      	pop	{r3, r4, r5, pc}
 8003266:	bf00      	nop
 8003268:	0802a45c 	.word	0x0802a45c
 800326c:	0802a970 	.word	0x0802a970

08003270 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003270:	4770      	bx	lr
	...

08003274 <_Z23getFont_verdana_10_4bppv>:
{
 8003274:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003276:	4d15      	ldr	r5, [pc, #84]	; (80032cc <_Z23getFont_verdana_10_4bppv+0x58>)
{
 8003278:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800327a:	e8d5 4f8f 	ldab	r4, [r5]
 800327e:	f014 0401 	ands.w	r4, r4, #1
 8003282:	d120      	bne.n	80032c6 <_Z23getFont_verdana_10_4bppv+0x52>
 8003284:	4628      	mov	r0, r5
 8003286:	f024 fec8 	bl	802801a <__cxa_guard_acquire>
 800328a:	b1e0      	cbz	r0, 80032c6 <_Z23getFont_verdana_10_4bppv+0x52>
 800328c:	233f      	movs	r3, #63	; 0x3f
 800328e:	9309      	str	r3, [sp, #36]	; 0x24
 8003290:	4b0f      	ldr	r3, [pc, #60]	; (80032d0 <_Z23getFont_verdana_10_4bppv+0x5c>)
 8003292:	2201      	movs	r2, #1
 8003294:	9308      	str	r3, [sp, #32]
 8003296:	4b0f      	ldr	r3, [pc, #60]	; (80032d4 <_Z23getFont_verdana_10_4bppv+0x60>)
 8003298:	490f      	ldr	r1, [pc, #60]	; (80032d8 <_Z23getFont_verdana_10_4bppv+0x64>)
 800329a:	e9cd 4306 	strd	r4, r3, [sp, #24]
 800329e:	2304      	movs	r3, #4
 80032a0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80032a4:	230a      	movs	r3, #10
 80032a6:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80032b0:	480a      	ldr	r0, [pc, #40]	; (80032dc <_Z23getFont_verdana_10_4bppv+0x68>)
 80032b2:	940a      	str	r4, [sp, #40]	; 0x28
 80032b4:	9405      	str	r4, [sp, #20]
 80032b6:	f7ff ff31 	bl	800311c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80032ba:	4809      	ldr	r0, [pc, #36]	; (80032e0 <_Z23getFont_verdana_10_4bppv+0x6c>)
 80032bc:	f024 fef6 	bl	80280ac <atexit>
 80032c0:	4628      	mov	r0, r5
 80032c2:	f024 feb6 	bl	8028032 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 80032c6:	4805      	ldr	r0, [pc, #20]	; (80032dc <_Z23getFont_verdana_10_4bppv+0x68>)
 80032c8:	b00f      	add	sp, #60	; 0x3c
 80032ca:	bd30      	pop	{r4, r5, pc}
 80032cc:	201964ac 	.word	0x201964ac
 80032d0:	0802c360 	.word	0x0802c360
 80032d4:	0802c36c 	.word	0x0802c36c
 80032d8:	90000178 	.word	0x90000178
 80032dc:	201964b0 	.word	0x201964b0
 80032e0:	08003271 	.word	0x08003271

080032e4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80032e4:	4770      	bx	lr
	...

080032e8 <_Z23getFont_verdana_20_4bppv>:
{
 80032e8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80032ea:	4d15      	ldr	r5, [pc, #84]	; (8003340 <_Z23getFont_verdana_20_4bppv+0x58>)
{
 80032ec:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80032ee:	e8d5 4f8f 	ldab	r4, [r5]
 80032f2:	f014 0401 	ands.w	r4, r4, #1
 80032f6:	d120      	bne.n	800333a <_Z23getFont_verdana_20_4bppv+0x52>
 80032f8:	4628      	mov	r0, r5
 80032fa:	f024 fe8e 	bl	802801a <__cxa_guard_acquire>
 80032fe:	b1e0      	cbz	r0, 800333a <_Z23getFont_verdana_20_4bppv+0x52>
 8003300:	233f      	movs	r3, #63	; 0x3f
 8003302:	9309      	str	r3, [sp, #36]	; 0x24
 8003304:	4b0f      	ldr	r3, [pc, #60]	; (8003344 <_Z23getFont_verdana_20_4bppv+0x5c>)
 8003306:	2201      	movs	r2, #1
 8003308:	9308      	str	r3, [sp, #32]
 800330a:	4b0f      	ldr	r3, [pc, #60]	; (8003348 <_Z23getFont_verdana_20_4bppv+0x60>)
 800330c:	490f      	ldr	r1, [pc, #60]	; (800334c <_Z23getFont_verdana_20_4bppv+0x64>)
 800330e:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003312:	2304      	movs	r3, #4
 8003314:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003318:	2314      	movs	r3, #20
 800331a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003324:	480a      	ldr	r0, [pc, #40]	; (8003350 <_Z23getFont_verdana_20_4bppv+0x68>)
 8003326:	940a      	str	r4, [sp, #40]	; 0x28
 8003328:	9405      	str	r4, [sp, #20]
 800332a:	f7ff fef7 	bl	800311c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800332e:	4809      	ldr	r0, [pc, #36]	; (8003354 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8003330:	f024 febc 	bl	80280ac <atexit>
 8003334:	4628      	mov	r0, r5
 8003336:	f024 fe7c 	bl	8028032 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 800333a:	4805      	ldr	r0, [pc, #20]	; (8003350 <_Z23getFont_verdana_20_4bppv+0x68>)
 800333c:	b00f      	add	sp, #60	; 0x3c
 800333e:	bd30      	pop	{r4, r5, pc}
 8003340:	201964dc 	.word	0x201964dc
 8003344:	0802c364 	.word	0x0802c364
 8003348:	0802c370 	.word	0x0802c370
 800334c:	90000188 	.word	0x90000188
 8003350:	201964e0 	.word	0x201964e0
 8003354:	080032e5 	.word	0x080032e5

08003358 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003358:	4770      	bx	lr
	...

0800335c <_Z23getFont_verdana_40_4bppv>:
{
 800335c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800335e:	4d15      	ldr	r5, [pc, #84]	; (80033b4 <_Z23getFont_verdana_40_4bppv+0x58>)
{
 8003360:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003362:	e8d5 4f8f 	ldab	r4, [r5]
 8003366:	f014 0401 	ands.w	r4, r4, #1
 800336a:	d120      	bne.n	80033ae <_Z23getFont_verdana_40_4bppv+0x52>
 800336c:	4628      	mov	r0, r5
 800336e:	f024 fe54 	bl	802801a <__cxa_guard_acquire>
 8003372:	b1e0      	cbz	r0, 80033ae <_Z23getFont_verdana_40_4bppv+0x52>
 8003374:	233f      	movs	r3, #63	; 0x3f
 8003376:	9309      	str	r3, [sp, #36]	; 0x24
 8003378:	4b0f      	ldr	r3, [pc, #60]	; (80033b8 <_Z23getFont_verdana_40_4bppv+0x5c>)
 800337a:	2201      	movs	r2, #1
 800337c:	9308      	str	r3, [sp, #32]
 800337e:	4b0f      	ldr	r3, [pc, #60]	; (80033bc <_Z23getFont_verdana_40_4bppv+0x60>)
 8003380:	490f      	ldr	r1, [pc, #60]	; (80033c0 <_Z23getFont_verdana_40_4bppv+0x64>)
 8003382:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003386:	2304      	movs	r3, #4
 8003388:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800338c:	2328      	movs	r3, #40	; 0x28
 800338e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003398:	480a      	ldr	r0, [pc, #40]	; (80033c4 <_Z23getFont_verdana_40_4bppv+0x68>)
 800339a:	940a      	str	r4, [sp, #40]	; 0x28
 800339c:	9405      	str	r4, [sp, #20]
 800339e:	f7ff febd 	bl	800311c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80033a2:	4809      	ldr	r0, [pc, #36]	; (80033c8 <_Z23getFont_verdana_40_4bppv+0x6c>)
 80033a4:	f024 fe82 	bl	80280ac <atexit>
 80033a8:	4628      	mov	r0, r5
 80033aa:	f024 fe42 	bl	8028032 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 80033ae:	4805      	ldr	r0, [pc, #20]	; (80033c4 <_Z23getFont_verdana_40_4bppv+0x68>)
 80033b0:	b00f      	add	sp, #60	; 0x3c
 80033b2:	bd30      	pop	{r4, r5, pc}
 80033b4:	2019650c 	.word	0x2019650c
 80033b8:	0802c368 	.word	0x0802c368
 80033bc:	0802c374 	.word	0x0802c374
 80033c0:	90000198 	.word	0x90000198
 80033c4:	20196510 	.word	0x20196510
 80033c8:	08003359 	.word	0x08003359

080033cc <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 80033cc:	2000      	movs	r0, #0
 80033ce:	4770      	bx	lr

080033d0 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 80033d0:	2000      	movs	r0, #0
 80033d2:	4770      	bx	lr

080033d4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80033d4:	b40e      	push	{r1, r2, r3}
 80033d6:	b503      	push	{r0, r1, lr}
 80033d8:	ab03      	add	r3, sp, #12
 80033da:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80033de:	2100      	movs	r1, #0
    va_start(pArg, text);
 80033e0:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80033e2:	f015 fa17 	bl	8018814 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80033e6:	b002      	add	sp, #8
 80033e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80033ec:	b003      	add	sp, #12
 80033ee:	4770      	bx	lr

080033f0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80033f0:	b40c      	push	{r2, r3}
 80033f2:	b507      	push	{r0, r1, r2, lr}
 80033f4:	ab04      	add	r3, sp, #16
 80033f6:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 80033fa:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80033fc:	f015 fa0a 	bl	8018814 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003400:	b003      	add	sp, #12
 8003402:	f85d eb04 	ldr.w	lr, [sp], #4
 8003406:	b002      	add	sp, #8
 8003408:	4770      	bx	lr
	...

0800340c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 800340c:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 800340e:	b510      	push	{r4, lr}
 8003410:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8003412:	b373      	cbz	r3, 8003472 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8003414:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8003416:	b92b      	cbnz	r3, 8003424 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8003418:	21c5      	movs	r1, #197	; 0xc5
 800341a:	4b18      	ldr	r3, [pc, #96]	; (800347c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 800341c:	4a18      	ldr	r2, [pc, #96]	; (8003480 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800341e:	4819      	ldr	r0, [pc, #100]	; (8003484 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8003420:	f024 fe26 	bl	8028070 <__assert_func>
            return buffer[pos];
 8003424:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8003426:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800342a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800342c:	b30b      	cbz	r3, 8003472 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 800342e:	f016 fc36 	bl	8019c9e <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8003432:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8003434:	2b01      	cmp	r3, #1
 8003436:	d803      	bhi.n	8003440 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8003438:	21cb      	movs	r1, #203	; 0xcb
 800343a:	4b13      	ldr	r3, [pc, #76]	; (8003488 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 800343c:	4a13      	ldr	r2, [pc, #76]	; (800348c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 800343e:	e7ee      	b.n	800341e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8003440:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8003442:	f640 103f 	movw	r0, #2367	; 0x93f
 8003446:	1c53      	adds	r3, r2, #1
 8003448:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 800344a:	4619      	mov	r1, r3
 800344c:	2b09      	cmp	r3, #9
 800344e:	bf88      	it	hi
 8003450:	f1a3 010a 	subhi.w	r1, r3, #10
 8003454:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8003458:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 800345a:	4281      	cmp	r1, r0
 800345c:	d109      	bne.n	8003472 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 800345e:	2b0a      	cmp	r3, #10
 8003460:	bf28      	it	cs
 8003462:	2300      	movcs	r3, #0
 8003464:	eb04 0242 	add.w	r2, r4, r2, lsl #1
            return buffer[pos];
 8003468:	8c50      	ldrh	r0, [r2, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 800346a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800346e:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8003470:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8003472:	4620      	mov	r0, r4
}
 8003474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8003478:	f016 bb14 	b.w	8019aa4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800347c:	0802a48c 	.word	0x0802a48c
 8003480:	0802a495 	.word	0x0802a495
 8003484:	0802a540 	.word	0x0802a540
 8003488:	0802a58a 	.word	0x0802a58a
 800348c:	0802a598 	.word	0x0802a598

08003490 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8003490:	f016 bacf 	b.w	8019a32 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08003494 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8003494:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8003496:	bb18      	cbnz	r0, 80034e0 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8003498:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 800349a:	4813      	ldr	r0, [pc, #76]	; (80034e8 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4913      	ldr	r1, [pc, #76]	; (80034ec <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 80034a0:	b1b3      	cbz	r3, 80034d0 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80034a2:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80034a4:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80034a6:	441a      	add	r2, r3
 80034a8:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80034aa:	685a      	ldr	r2, [r3, #4]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80034ac:	441c      	add	r4, r3
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80034ae:	441a      	add	r2, r3
 80034b0:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 80034b2:	2200      	movs	r2, #0
 80034b4:	4b0e      	ldr	r3, [pc, #56]	; (80034f0 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80034b6:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80034b8:	f000 f82a 	bl	8003510 <_ZN17TypedTextDatabase8getFontsEv>
 80034bc:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80034be:	f000 f825 	bl	800350c <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 80034c2:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80034c4:	601c      	str	r4, [r3, #0]
        fonts = f;
 80034c6:	4b0c      	ldr	r3, [pc, #48]	; (80034f8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 80034c8:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 80034ca:	4b0c      	ldr	r3, [pc, #48]	; (80034fc <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 80034cc:	8018      	strh	r0, [r3, #0]
    }
}
 80034ce:	e007      	b.n	80034e0 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 80034d0:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 80034d2:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80034d4:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 80034d6:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80034d8:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 80034da:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 80034dc:	2c00      	cmp	r4, #0
 80034de:	d1e8      	bne.n	80034b2 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 80034e0:	bd38      	pop	{r3, r4, r5, pc}
 80034e2:	bf00      	nop
 80034e4:	2019653c 	.word	0x2019653c
 80034e8:	20196540 	.word	0x20196540
 80034ec:	20196544 	.word	0x20196544
 80034f0:	20196548 	.word	0x20196548
 80034f4:	201979a8 	.word	0x201979a8
 80034f8:	201979b0 	.word	0x201979b0
 80034fc:	201979ac 	.word	0x201979ac
 8003500:	900001ac 	.word	0x900001ac
 8003504:	900001a8 	.word	0x900001a8
 8003508:	900001b4 	.word	0x900001b4

0800350c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return 0;
}
 800350c:	2000      	movs	r0, #0
 800350e:	4770      	bx	lr

08003510 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8003510:	4800      	ldr	r0, [pc, #0]	; (8003514 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8003512:	4770      	bx	lr
 8003514:	2019654c 	.word	0x2019654c

08003518 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8003518:	b510      	push	{r4, lr}
    &(getFont_verdana_20_4bpp()),
 800351a:	f7ff fee5 	bl	80032e8 <_Z23getFont_verdana_20_4bppv>
};
 800351e:	4c04      	ldr	r4, [pc, #16]	; (8003530 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
 8003520:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8003522:	f7ff ff1b 	bl	800335c <_Z23getFont_verdana_40_4bppv>
};
 8003526:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8003528:	f7ff fea4 	bl	8003274 <_Z23getFont_verdana_10_4bppv>
};
 800352c:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 800352e:	bd10      	pop	{r4, pc}
 8003530:	2019654c 	.word	0x2019654c

08003534 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003534:	4770      	bx	lr

08003536 <_ZN19FrontendApplicationD0Ev>:
 8003536:	b510      	push	{r4, lr}
 8003538:	4604      	mov	r4, r0
 800353a:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800353e:	f024 fd6a 	bl	8028016 <_ZdlPvj>
 8003542:	4620      	mov	r0, r4
 8003544:	bd10      	pop	{r4, pc}

08003546 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8003546:	b510      	push	{r4, lr}
 8003548:	4604      	mov	r4, r0
    {
        model.tick();
 800354a:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 800354e:	f000 f812 	bl	8003576 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8003552:	4620      	mov	r0, r4
    }
 8003554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8003558:	f014 bac4 	b.w	8017ae4 <_ZN8touchgfx11Application15handleTickEventEv>

0800355c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800355c:	b510      	push	{r4, lr}
 800355e:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8003560:	f7ff fd76 	bl	8003050 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8003564:	4b01      	ldr	r3, [pc, #4]	; (800356c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8003566:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8003568:	6023      	str	r3, [r4, #0]
}
 800356a:	bd10      	pop	{r4, pc}
 800356c:	0802a674 	.word	0x0802a674

08003570 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8003570:	2200      	movs	r2, #0
 8003572:	6002      	str	r2, [r0, #0]
{

}
 8003574:	4770      	bx	lr

08003576 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8003576:	4770      	bx	lr

08003578 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8003578:	4770      	bx	lr

0800357a <_ZThn4_N16Screen1PresenterD1Ev>:
 800357a:	3804      	subs	r0, #4
 800357c:	4770      	bx	lr

0800357e <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 800357e:	4770      	bx	lr

08003580 <_ZN16Screen1PresenterD0Ev>:
 8003580:	b510      	push	{r4, lr}
 8003582:	4604      	mov	r4, r0
 8003584:	2110      	movs	r1, #16
 8003586:	f024 fd46 	bl	8028016 <_ZdlPvj>
 800358a:	4620      	mov	r0, r4
 800358c:	bd10      	pop	{r4, pc}

0800358e <_ZThn4_N16Screen1PresenterD0Ev>:
 800358e:	f1a0 0004 	sub.w	r0, r0, #4
 8003592:	e7f5      	b.n	8003580 <_ZN16Screen1PresenterD0Ev>

08003594 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8003594:	2200      	movs	r2, #0
Screen1Presenter::Screen1Presenter(Screen1View& v)
 8003596:	b510      	push	{r4, lr}
 8003598:	6082      	str	r2, [r0, #8]
    : view(v)
 800359a:	4a04      	ldr	r2, [pc, #16]	; (80035ac <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
 800359c:	60c1      	str	r1, [r0, #12]
 800359e:	f102 0408 	add.w	r4, r2, #8
 80035a2:	3220      	adds	r2, #32
 80035a4:	6004      	str	r4, [r0, #0]
 80035a6:	6042      	str	r2, [r0, #4]
}
 80035a8:	bd10      	pop	{r4, pc}
 80035aa:	bf00      	nop
 80035ac:	0802a6b8 	.word	0x0802a6b8

080035b0 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 80035b0:	4770      	bx	lr
	...

080035b4 <_ZN11Screen1View9tick_funcEv>:

void Screen1View::tick_func(){
 80035b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035b8:	4f55      	ldr	r7, [pc, #340]	; (8003710 <_ZN11Screen1View9tick_funcEv+0x15c>)
 80035ba:	4606      	mov	r6, r0
 80035bc:	46b8      	mov	r8, r7
 80035be:	2408      	movs	r4, #8
			if( grid[c][r] > 0 ){
				if( rand()%20 != 0 ){
					grid[c][r]--;
				}
			}else{
				grid[c][r] = 160;
 80035c0:	f04f 0ba0 	mov.w	fp, #160	; 0xa0
				if( rand()%20 != 0 ){
 80035c4:	f04f 0a14 	mov.w	sl, #20
void Screen1View::tick_func(){
 80035c8:	4645      	mov	r5, r8
 80035ca:	f04f 0900 	mov.w	r9, #0
			if( grid[c][r] > 0 ){
 80035ce:	682b      	ldr	r3, [r5, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	dd68      	ble.n	80036a6 <_ZN11Screen1View9tick_funcEv+0xf2>
				if( rand()%20 != 0 ){
 80035d4:	f025 fa30 	bl	8028a38 <rand>
 80035d8:	fb90 f3fa 	sdiv	r3, r0, sl
 80035dc:	fb03 001a 	mls	r0, r3, sl, r0
 80035e0:	b110      	cbz	r0, 80035e8 <_ZN11Screen1View9tick_funcEv+0x34>
					grid[c][r]--;
 80035e2:	682b      	ldr	r3, [r5, #0]
 80035e4:	3b01      	subs	r3, #1
 80035e6:	602b      	str	r3, [r5, #0]
		for(uint8_t c = 0; c < COLS; c ++ ){
 80035e8:	f109 0908 	add.w	r9, r9, #8
 80035ec:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 80035f0:	f105 0520 	add.w	r5, r5, #32
 80035f4:	d1eb      	bne.n	80035ce <_ZN11Screen1View9tick_funcEv+0x1a>
	for(uint8_t r = 0; r < ROWS; r ++ ){
 80035f6:	3c01      	subs	r4, #1
 80035f8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80035fc:	f108 0804 	add.w	r8, r8, #4
 8003600:	d1e2      	bne.n	80035c8 <_ZN11Screen1View9tick_funcEv+0x14>
        {
            red = green = blue = value;
            return;
        }

        const uint8_t region = (hue * 6) >> 8;
 8003602:	f04f 0806 	mov.w	r8, #6
			}
		}
	}

	//Draw cells
	uint16_t index = 0;
 8003606:	2500      	movs	r5, #0
        const int next_region_start = ((((region + 1) << 8) + 5) / 6); // Can go up to 256, uint8_t not enough
        const uint8_t region_size = next_region_start - (((region << 8) + 5) / 6);
 8003608:	f06f 0905 	mvn.w	r9, #5
	for(uint8_t r = 0; r < ROWS; r ++ ){
		for(uint8_t c = 0; c < COLS; c ++ ){
			//box[index].setColor(touchgfx::Color::getColorFromRGB(0, 119, 178));
			box[index].setColor(touchgfx::Color::getColorFromHSV(grid[c][r], 255, 255));
 800360c:	016b      	lsls	r3, r5, #5
 800360e:	5cf9      	ldrb	r1, [r7, r3]
 8003610:	1960      	adds	r0, r4, r5
        const uint8_t region = (hue * 6) >> 8;
 8003612:	fb08 f201 	mul.w	r2, r8, r1
        const int next_region_start = ((((region + 1) << 8) + 5) / 6); // Can go up to 256, uint8_t not enough
 8003616:	f402 63e0 	and.w	r3, r2, #1792	; 0x700
 800361a:	f203 1305 	addw	r3, r3, #261	; 0x105
 800361e:	fbb3 fef8 	udiv	lr, r3, r8
        const uint8_t region_size = next_region_start - (((region << 8) + 5) / 6);
 8003622:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 8003626:	3305      	adds	r3, #5
 8003628:	fb93 f3f9 	sdiv	r3, r3, r9
        const uint8_t remainder = 255 - (next_region_start - hue) * 255 / region_size;
 800362c:	ebae 0101 	sub.w	r1, lr, r1
        const uint8_t region_size = next_region_start - (((region << 8) + 5) / 6);
 8003630:	4473      	add	r3, lr
        const uint8_t remainder = 255 - (next_region_start - hue) * 255 / region_size;
 8003632:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 8003636:	b2db      	uxtb	r3, r3
 8003638:	fb91 f3f3 	sdiv	r3, r1, r3
 800363c:	43db      	mvns	r3, r3
 800363e:	b2db      	uxtb	r3, r3

        const uint8_t p = LCD::div255(value * (255 - saturation));
        const uint8_t q = LCD::div255(value * (255 - LCD::div255(saturation * remainder)));
 8003640:	ebc3 2103 	rsb	r1, r3, r3, lsl #8
 8003644:	b289      	uxth	r1, r1
        const uint8_t region = (hue * 6) >> 8;
 8003646:	ea4f 2c22 	mov.w	ip, r2, asr #8
     *
     * @return The result of a division by 255.
     */
    FORCE_INLINE_FUNCTION static uint8_t div255(uint16_t num)
    {
        return (num + 1 + (num >> 8)) >> 8;
 800364a:	1c4a      	adds	r2, r1, #1
 800364c:	0a09      	lsrs	r1, r1, #8
 800364e:	fa11 f282 	uxtah	r2, r1, r2
 8003652:	1212      	asrs	r2, r2, #8
        const uint8_t q = LCD::div255(value * (255 - LCD::div255(saturation * remainder)));
 8003654:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8003658:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 800365c:	b292      	uxth	r2, r2
        const uint8_t t = LCD::div255(value * (255 - LCD::div255(saturation * (255 - remainder))));
 800365e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8003662:	1c51      	adds	r1, r2, #1
 8003664:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 8003668:	0a12      	lsrs	r2, r2, #8
 800366a:	fa12 f281 	uxtah	r2, r2, r1
 800366e:	b29b      	uxth	r3, r3
 8003670:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	0a1b      	lsrs	r3, r3, #8
 8003678:	fa13 f282 	uxtah	r2, r3, r2
 800367c:	1212      	asrs	r2, r2, #8
 800367e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8003682:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8003686:	b292      	uxth	r2, r2
 8003688:	1c53      	adds	r3, r2, #1
 800368a:	0a12      	lsrs	r2, r2, #8
 800368c:	fa12 f383 	uxtah	r3, r2, r3
 8003690:	b280      	uxth	r0, r0
 8003692:	f3c3 2307 	ubfx	r3, r3, #8, #8

        switch (region)
 8003696:	f1bc 0f04 	cmp.w	ip, #4
 800369a:	d832      	bhi.n	8003702 <_ZN11Screen1View9tick_funcEv+0x14e>
 800369c:	e8df f00c 	tbb	[pc, ip]
 80036a0:	29260635 	.word	0x29260635
 80036a4:	2e          	.byte	0x2e
 80036a5:	00          	.byte	0x00
				grid[c][r] = 160;
 80036a6:	f8c5 b000 	str.w	fp, [r5]
 80036aa:	e79d      	b.n	80035e8 <_ZN11Screen1View9tick_funcEv+0x34>
 80036ac:	f04f 0c00 	mov.w	ip, #0
            green = value;
            blue = p;
            break;
        case 2:
            red = p;
            green = value;
 80036b0:	23ff      	movs	r3, #255	; 0xff
 80036b2:	222c      	movs	r2, #44	; 0x2c
 80036b4:	4350      	muls	r0, r2
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80036b6:	021b      	lsls	r3, r3, #8
 80036b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80036bc:	ea43 030c 	orr.w	r3, r3, ip
 80036c0:	1832      	adds	r2, r6, r0
 80036c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036c6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
			box[index].invalidate();
 80036ca:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80036ce:	3098      	adds	r0, #152	; 0x98
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	4430      	add	r0, r6
		for(uint8_t c = 0; c < COLS; c ++ ){
 80036d4:	3501      	adds	r5, #1
			box[index].invalidate();
 80036d6:	4798      	blx	r3
		for(uint8_t c = 0; c < COLS; c ++ ){
 80036d8:	2d08      	cmp	r5, #8
 80036da:	d197      	bne.n	800360c <_ZN11Screen1View9tick_funcEv+0x58>
			index++;
 80036dc:	3408      	adds	r4, #8
 80036de:	b2a4      	uxth	r4, r4
	for(uint8_t r = 0; r < ROWS; r ++ ){
 80036e0:	2c40      	cmp	r4, #64	; 0x40
 80036e2:	f107 0704 	add.w	r7, r7, #4
 80036e6:	d18e      	bne.n	8003606 <_ZN11Screen1View9tick_funcEv+0x52>
		}
	}
}
 80036e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            blue = t;
 80036ec:	469c      	mov	ip, r3
            red = p;
 80036ee:	2100      	movs	r1, #0
 80036f0:	e7de      	b.n	80036b0 <_ZN11Screen1View9tick_funcEv+0xfc>
            break;
        case 3:
            red = p;
            green = q;
 80036f2:	460b      	mov	r3, r1
            red = p;
 80036f4:	2100      	movs	r1, #0
            blue = value;
            break;
        case 4:
            red = t;
            green = p;
            blue = value;
 80036f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
            break;
 80036fa:	e7da      	b.n	80036b2 <_ZN11Screen1View9tick_funcEv+0xfe>
            red = t;
 80036fc:	4619      	mov	r1, r3
            green = p;
 80036fe:	2300      	movs	r3, #0
 8003700:	e7f9      	b.n	80036f6 <_ZN11Screen1View9tick_funcEv+0x142>
        default:
            red = value;
            green = p;
            blue = q;
 8003702:	468c      	mov	ip, r1
            green = p;
 8003704:	2300      	movs	r3, #0
            red = value;
 8003706:	21ff      	movs	r1, #255	; 0xff
 8003708:	e7d3      	b.n	80036b2 <_ZN11Screen1View9tick_funcEv+0xfe>
            blue = p;
 800370a:	f04f 0c00 	mov.w	ip, #0
 800370e:	e7fa      	b.n	8003706 <_ZN11Screen1View9tick_funcEv+0x152>
 8003710:	20196558 	.word	0x20196558

08003714 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8003714:	b538      	push	{r3, r4, r5, lr}
 8003716:	4604      	mov	r4, r0
 8003718:	f246 356c 	movw	r5, #25452	; 0x636c
 800371c:	4b06      	ldr	r3, [pc, #24]	; (8003738 <_ZN11Screen1ViewD1Ev+0x24>)
 800371e:	6003      	str	r3, [r0, #0]
 8003720:	5963      	ldr	r3, [r4, r5]
 8003722:	1960      	adds	r0, r4, r5
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	3d2c      	subs	r5, #44	; 0x2c
 8003728:	4798      	blx	r3
 800372a:	2d6c      	cmp	r5, #108	; 0x6c
 800372c:	d1f8      	bne.n	8003720 <_ZN11Screen1ViewD1Ev+0xc>
 800372e:	4620      	mov	r0, r4
 8003730:	f7ff fd57 	bl	80031e2 <_ZN15Screen1ViewBaseD1Ev>
 8003734:	4620      	mov	r0, r4
 8003736:	bd38      	pop	{r3, r4, r5, pc}
 8003738:	0802a6e8 	.word	0x0802a6e8

0800373c <_ZN11Screen1ViewD0Ev>:
 800373c:	b510      	push	{r4, lr}
 800373e:	4604      	mov	r4, r0
 8003740:	f7ff ffe8 	bl	8003714 <_ZN11Screen1ViewD1Ev>
 8003744:	4620      	mov	r0, r4
 8003746:	f246 3198 	movw	r1, #25496	; 0x6398
 800374a:	f024 fc64 	bl	8028016 <_ZdlPvj>
 800374e:	4620      	mov	r0, r4
 8003750:	bd10      	pop	{r4, pc}
	...

08003754 <_ZN8touchgfx3BoxC1Ev>:
          visible(true)
 8003754:	f44f 7180 	mov.w	r1, #256	; 0x100
        : Widget(), alpha(255), color(0)
 8003758:	4a08      	ldr	r2, [pc, #32]	; (800377c <_ZN8touchgfx3BoxC1Ev+0x28>)
 800375a:	8481      	strh	r1, [r0, #36]	; 0x24
 800375c:	6002      	str	r2, [r0, #0]
 800375e:	21ff      	movs	r1, #255	; 0xff
        : x(0), y(0), width(0), height(0)
 8003760:	2200      	movs	r2, #0
 8003762:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 8003766:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800376a:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800376e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8003772:	e9c0 2207 	strd	r2, r2, [r0, #28]
        : color(col)
 8003776:	6282      	str	r2, [r0, #40]	; 0x28
    }
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	0802a970 	.word	0x0802a970

08003780 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8003780:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003784:	4606      	mov	r6, r0
 8003786:	f7ff fd3f 	bl	8003208 <_ZN15Screen1ViewBaseC1Ev>
 800378a:	4630      	mov	r0, r6
 800378c:	4b34      	ldr	r3, [pc, #208]	; (8003860 <_ZN11Screen1ViewC1Ev+0xe0>)
 800378e:	f506 45c7 	add.w	r5, r6, #25472	; 0x6380
 8003792:	f840 3b6c 	str.w	r3, [r0], #108
 8003796:	f7ff ffdd 	bl	8003754 <_ZN8touchgfx3BoxC1Ev>
 800379a:	f106 0498 	add.w	r4, r6, #152	; 0x98
 800379e:	3518      	adds	r5, #24
 80037a0:	4620      	mov	r0, r4
 80037a2:	342c      	adds	r4, #44	; 0x2c
 80037a4:	f7ff ffd6 	bl	8003754 <_ZN8touchgfx3BoxC1Ev>
 80037a8:	42ac      	cmp	r4, r5
 80037aa:	d1f9      	bne.n	80037a0 <_ZN11Screen1ViewC1Ev+0x20>
 80037ac:	2408      	movs	r4, #8
			grid[c][r] = 140+rand()%20;
 80037ae:	f04f 0814 	mov.w	r8, #20
 80037b2:	4f2c      	ldr	r7, [pc, #176]	; (8003864 <_ZN11Screen1ViewC1Ev+0xe4>)
Screen1View::Screen1View()
 80037b4:	2500      	movs	r5, #0
			grid[c][r] = 140+rand()%20;
 80037b6:	f025 f93f 	bl	8028a38 <rand>
 80037ba:	fb90 f3f8 	sdiv	r3, r0, r8
 80037be:	fb03 0018 	mls	r0, r3, r8, r0
 80037c2:	308c      	adds	r0, #140	; 0x8c
 80037c4:	f847 0025 	str.w	r0, [r7, r5, lsl #2]
		for(uint8_t c = 0; c < COLS; c ++ ){
 80037c8:	3508      	adds	r5, #8
 80037ca:	2d40      	cmp	r5, #64	; 0x40
 80037cc:	d1f3      	bne.n	80037b6 <_ZN11Screen1ViewC1Ev+0x36>
	for(uint8_t r = 0; r < ROWS; r ++ ){
 80037ce:	3c01      	subs	r4, #1
 80037d0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80037d4:	f107 0704 	add.w	r7, r7, #4
 80037d8:	d1ec      	bne.n	80037b4 <_ZN11Screen1ViewC1Ev+0x34>
			box[index].setPosition(80+c*40, 80+r*40, 39, 39);
 80037da:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
	uint16_t index = 0;
 80037de:	46a0      	mov	r8, r4
 80037e0:	f04f 0b50 	mov.w	fp, #80	; 0x50
 80037e4:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80037e8:	3150      	adds	r1, #80	; 0x50
 80037ea:	fa0f f981 	sxth.w	r9, r1
			box[index].setPosition(80+c*40, 80+r*40, 39, 39);
 80037ee:	fb0a f508 	mul.w	r5, sl, r8
 80037f2:	f105 0798 	add.w	r7, r5, #152	; 0x98
        setX(x);
 80037f6:	4435      	add	r5, r6
 80037f8:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 80037fc:	4437      	add	r7, r6
 80037fe:	fa0f f18b 	sxth.w	r1, fp
 8003802:	4638      	mov	r0, r7
 8003804:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003806:	4790      	blx	r2
        setY(y);
 8003808:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 800380c:	4649      	mov	r1, r9
 800380e:	4638      	mov	r0, r7
 8003810:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003812:	4790      	blx	r2
        setWidth(width);
 8003814:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 8003818:	2127      	movs	r1, #39	; 0x27
 800381a:	4638      	mov	r0, r7
 800381c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800381e:	4790      	blx	r2
        setHeight(height);
 8003820:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 8003824:	2127      	movs	r1, #39	; 0x27
 8003826:	4638      	mov	r0, r7
 8003828:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800382a:	4790      	blx	r2
        color = newColor;
 800382c:	4b0e      	ldr	r3, [pc, #56]	; (8003868 <_ZN11Screen1ViewC1Ev+0xe8>)
		for(uint8_t c = 0; c < COLS; c ++ ){
 800382e:	f10b 0b28 	add.w	fp, fp, #40	; 0x28
 8003832:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 8003836:	4639      	mov	r1, r7
 8003838:	1d30      	adds	r0, r6, #4
 800383a:	fa1f fb8b 	uxth.w	fp, fp
 800383e:	f011 fec7 	bl	80155d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
			index++;
 8003842:	f108 0301 	add.w	r3, r8, #1
		for(uint8_t c = 0; c < COLS; c ++ ){
 8003846:	f5bb 7fc8 	cmp.w	fp, #400	; 0x190
			index++;
 800384a:	fa1f f883 	uxth.w	r8, r3
		for(uint8_t c = 0; c < COLS; c ++ ){
 800384e:	d1ce      	bne.n	80037ee <_ZN11Screen1ViewC1Ev+0x6e>
			index++;
 8003850:	3408      	adds	r4, #8
 8003852:	b2a4      	uxth	r4, r4
	for(uint8_t r = 0; r < ROWS; r ++ ){
 8003854:	2c40      	cmp	r4, #64	; 0x40
 8003856:	d1c2      	bne.n	80037de <_ZN11Screen1ViewC1Ev+0x5e>
}
 8003858:	4630      	mov	r0, r6
 800385a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800385e:	bf00      	nop
 8003860:	0802a6e8 	.word	0x0802a6e8
 8003864:	20196558 	.word	0x20196558
 8003868:	ff0077b2 	.word	0xff0077b2

0800386c <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 800386c:	f7ff bcba 	b.w	80031e4 <_ZN15Screen1ViewBase11setupScreenEv>

08003870 <APS512XX_EnableMemoryMappedMode>:
  * @param  BurstType Type of burst used for the access
  * @retval Memory status
  */
int32_t APS512XX_EnableMemoryMappedMode(XSPI_HandleTypeDef *Ctx, uint32_t ReadLatencyCode, uint32_t WriteLatencyCode,
                                        uint32_t IOMode, uint32_t BurstType)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b09a      	sub	sp, #104	; 0x68
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	603b      	str	r3, [r7, #0]
  XSPI_RegularCmdTypeDef   sCommand = {0};
 800387e:	f107 0318 	add.w	r3, r7, #24
 8003882:	2250      	movs	r2, #80	; 0x50
 8003884:	2100      	movs	r1, #0
 8003886:	4618      	mov	r0, r3
 8003888:	f024 fc70 	bl	802816c <memset>
  XSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
 800388c:	f107 0310 	add.w	r3, r7, #16
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	605a      	str	r2, [r3, #4]

  /* Initialize the write command */
  sCommand.OperationType       = HAL_XSPI_OPTYPE_WRITE_CFG;
 8003896:	2302      	movs	r3, #2
 8003898:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode     = HAL_XSPI_INSTRUCTION_8_LINES;
 800389a:	2304      	movs	r3, #4
 800389c:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.InstructionWidth    = HAL_XSPI_INSTRUCTION_8_BITS;
 800389e:	2300      	movs	r3, #0
 80038a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionDTRMode  = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 80038a2:	2300      	movs	r3, #0
 80038a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction         = ((BurstType == 0U) ? APS512XX_WRITE_LINEAR_BURST_CMD : APS512XX_WRITE_CMD);
 80038a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <APS512XX_EnableMemoryMappedMode+0x40>
 80038ac:	23a0      	movs	r3, #160	; 0xa0
 80038ae:	e000      	b.n	80038b2 <APS512XX_EnableMemoryMappedMode+0x42>
 80038b0:	2380      	movs	r3, #128	; 0x80
 80038b2:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode         = HAL_XSPI_ADDRESS_8_LINES;
 80038b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038b8:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
 80038ba:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80038be:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AddressDTRMode      = HAL_XSPI_ADDRESS_DTR_ENABLE;
 80038c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode  = HAL_XSPI_ALT_BYTES_NONE;
 80038c6:	2300      	movs	r3, #0
 80038c8:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode            = ((IOMode == 0U) ? HAL_XSPI_DATA_8_LINES : HAL_XSPI_DATA_16_LINES);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d102      	bne.n	80038d6 <APS512XX_EnableMemoryMappedMode+0x66>
 80038d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80038d4:	e001      	b.n	80038da <APS512XX_EnableMemoryMappedMode+0x6a>
 80038d6:	f04f 63a0 	mov.w	r3, #83886080	; 0x5000000
 80038da:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DataDTRMode         = HAL_XSPI_DATA_DTR_ENABLE;
 80038dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80038e0:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles         = (WriteLatencyCode - 1U);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3b01      	subs	r3, #1
 80038e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DQSMode             = HAL_XSPI_DQS_ENABLE;
 80038e8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80038ec:	663b      	str	r3, [r7, #96]	; 0x60
#if defined (XSPI_CCR_SIOO)
  sCommand.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 80038ee:	2300      	movs	r3, #0
 80038f0:	667b      	str	r3, [r7, #100]	; 0x64
#endif

  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80038f2:	f107 0318 	add.w	r3, r7, #24
 80038f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fa:	4619      	mov	r1, r3
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f00e fb07 	bl	8011f10 <HAL_XSPI_Command>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <APS512XX_EnableMemoryMappedMode+0x9e>
  {
    return APS512XX_ERROR;
 8003908:	f04f 33ff 	mov.w	r3, #4294967295
 800390c:	e028      	b.n	8003960 <APS512XX_EnableMemoryMappedMode+0xf0>
  }

  /* Initialize the read command */
  sCommand.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
 800390e:	2301      	movs	r3, #1
 8003910:	61bb      	str	r3, [r7, #24]
  sCommand.Instruction   = ((BurstType == 0U) ? APS512XX_READ_LINEAR_BURST_CMD : APS512XX_READ_CMD);
 8003912:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <APS512XX_EnableMemoryMappedMode+0xac>
 8003918:	2320      	movs	r3, #32
 800391a:	e000      	b.n	800391e <APS512XX_EnableMemoryMappedMode+0xae>
 800391c:	2300      	movs	r3, #0
 800391e:	623b      	str	r3, [r7, #32]
  sCommand.DummyCycles   = (ReadLatencyCode - 1U);
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	3b01      	subs	r3, #1
 8003924:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003926:	f107 0318 	add.w	r3, r7, #24
 800392a:	f241 3288 	movw	r2, #5000	; 0x1388
 800392e:	4619      	mov	r1, r3
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f00e faed 	bl	8011f10 <HAL_XSPI_Command>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d002      	beq.n	8003942 <APS512XX_EnableMemoryMappedMode+0xd2>
  {
    return APS512XX_ERROR;
 800393c:	f04f 33ff 	mov.w	r3, #4294967295
 8003940:	e00e      	b.n	8003960 <APS512XX_EnableMemoryMappedMode+0xf0>
  }

  /* Activation of memory-mapped mode */
  sMemMappedCfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
 8003942:	2300      	movs	r3, #0
 8003944:	613b      	str	r3, [r7, #16]

  if (HAL_XSPI_MemoryMapped(Ctx, &sMemMappedCfg) != HAL_OK)
 8003946:	f107 0310 	add.w	r3, r7, #16
 800394a:	4619      	mov	r1, r3
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f00e fd6b 	bl	8012428 <HAL_XSPI_MemoryMapped>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <APS512XX_EnableMemoryMappedMode+0xee>
  {
    return APS512XX_ERROR;
 8003958:	f04f 33ff 	mov.w	r3, #4294967295
 800395c:	e000      	b.n	8003960 <APS512XX_EnableMemoryMappedMode+0xf0>
  }

  return APS512XX_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3768      	adds	r7, #104	; 0x68
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <APS512XX_ReadReg>:
  * @param  Value Register value pointer
  * @param  LatencyCode Latency used for the access
  * @retval error status
  */
int32_t APS512XX_ReadReg(XSPI_HandleTypeDef *Ctx, uint32_t Address, uint8_t *Value, uint32_t LatencyCode)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b098      	sub	sp, #96	; 0x60
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
 8003974:	603b      	str	r3, [r7, #0]
  XSPI_RegularCmdTypeDef sCommand = {0};
 8003976:	f107 0310 	add.w	r3, r7, #16
 800397a:	2250      	movs	r2, #80	; 0x50
 800397c:	2100      	movs	r1, #0
 800397e:	4618      	mov	r0, r3
 8003980:	f024 fbf4 	bl	802816c <memset>

  /* Initialize the read register command */
  sCommand.OperationType       = HAL_XSPI_OPTYPE_COMMON_CFG;
 8003984:	2300      	movs	r3, #0
 8003986:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode     = HAL_XSPI_INSTRUCTION_8_LINES;
 8003988:	2304      	movs	r3, #4
 800398a:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionWidth    = HAL_XSPI_INSTRUCTION_8_BITS;
 800398c:	2300      	movs	r3, #0
 800398e:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDTRMode  = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8003990:	2300      	movs	r3, #0
 8003992:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction         = APS512XX_READ_REG_CMD;
 8003994:	2340      	movs	r3, #64	; 0x40
 8003996:	61bb      	str	r3, [r7, #24]
  sCommand.AddressMode         = HAL_XSPI_ADDRESS_8_LINES;
 8003998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800399c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
 800399e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80039a2:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDTRMode      = HAL_XSPI_ADDRESS_DTR_ENABLE;
 80039a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039a8:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.Address             = Address;
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AlternateBytesMode  = HAL_XSPI_ALT_BYTES_NONE;
 80039ae:	2300      	movs	r3, #0
 80039b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode            = HAL_XSPI_DATA_8_LINES;
 80039b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80039b6:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDTRMode         = HAL_XSPI_DATA_DTR_ENABLE;
 80039b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039bc:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DataLength          = 2;
 80039be:	2302      	movs	r3, #2
 80039c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DummyCycles         = (LatencyCode - 1U);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	3b01      	subs	r3, #1
 80039c6:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode             = HAL_XSPI_DQS_ENABLE;
 80039c8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80039cc:	65bb      	str	r3, [r7, #88]	; 0x58
#if defined (XSPI_CCR_SIOO)
  sCommand.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 80039ce:	2300      	movs	r3, #0
 80039d0:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

  /* Configure the command */
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80039d2:	f107 0310 	add.w	r3, r7, #16
 80039d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039da:	4619      	mov	r1, r3
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f00e fa97 	bl	8011f10 <HAL_XSPI_Command>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <APS512XX_ReadReg+0x86>
  {
    return APS512XX_ERROR;
 80039e8:	f04f 33ff 	mov.w	r3, #4294967295
 80039ec:	e00c      	b.n	8003a08 <APS512XX_ReadReg+0xa0>
  }

  /* Reception of the data */
  if (HAL_XSPI_Receive(Ctx, (uint8_t *)Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80039ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f00e fbea 	bl	80121ce <HAL_XSPI_Receive>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <APS512XX_ReadReg+0x9e>
  {
    return APS512XX_ERROR;
 8003a00:	f04f 33ff 	mov.w	r3, #4294967295
 8003a04:	e000      	b.n	8003a08 <APS512XX_ReadReg+0xa0>
  }

  return APS512XX_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3760      	adds	r7, #96	; 0x60
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <APS512XX_WriteReg>:
  * @param  Address Register address
  * @param  Value Value to write to register
  * @retval error status
  */
int32_t APS512XX_WriteReg(XSPI_HandleTypeDef *Ctx, uint32_t Address, uint8_t Value)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b098      	sub	sp, #96	; 0x60
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	71fb      	strb	r3, [r7, #7]
  XSPI_RegularCmdTypeDef sCommand = {0};
 8003a1e:	f107 0310 	add.w	r3, r7, #16
 8003a22:	2250      	movs	r2, #80	; 0x50
 8003a24:	2100      	movs	r1, #0
 8003a26:	4618      	mov	r0, r3
 8003a28:	f024 fba0 	bl	802816c <memset>

  /* Initialize the write register command */
  sCommand.OperationType       = HAL_XSPI_OPTYPE_COMMON_CFG;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode     = HAL_XSPI_INSTRUCTION_8_LINES;
 8003a30:	2304      	movs	r3, #4
 8003a32:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionWidth    = HAL_XSPI_INSTRUCTION_8_BITS;
 8003a34:	2300      	movs	r3, #0
 8003a36:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDTRMode  = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction         = APS512XX_WRITE_REG_CMD;
 8003a3c:	23c0      	movs	r3, #192	; 0xc0
 8003a3e:	61bb      	str	r3, [r7, #24]
  sCommand.AddressMode         = HAL_XSPI_ADDRESS_8_LINES;
 8003a40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
 8003a46:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003a4a:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDTRMode      = HAL_XSPI_ADDRESS_DTR_ENABLE;
 8003a4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a50:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.Address             = Address;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AlternateBytesMode  = HAL_XSPI_ALT_BYTES_NONE;
 8003a56:	2300      	movs	r3, #0
 8003a58:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode            = HAL_XSPI_DATA_8_LINES;
 8003a5a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003a5e:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDTRMode         = HAL_XSPI_DATA_DTR_ENABLE;
 8003a60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a64:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DataLength          = 2;
 8003a66:	2302      	movs	r3, #2
 8003a68:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DummyCycles         = 0;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode             = HAL_XSPI_DQS_DISABLE;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	65bb      	str	r3, [r7, #88]	; 0x58
#if defined (XSPI_CCR_SIOO)
  sCommand.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8003a72:	2300      	movs	r3, #0
 8003a74:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

  /* Configure the command */
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a76:	f107 0310 	add.w	r3, r7, #16
 8003a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7e:	4619      	mov	r1, r3
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f00e fa45 	bl	8011f10 <HAL_XSPI_Command>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <APS512XX_WriteReg+0x82>
  {
    return APS512XX_ERROR;
 8003a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a90:	e00d      	b.n	8003aae <APS512XX_WriteReg+0x9e>
  }

  /* Transmission of the data */
  if (HAL_XSPI_Transmit(Ctx, (uint8_t *)(&Value), HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a92:	1dfb      	adds	r3, r7, #7
 8003a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a98:	4619      	mov	r1, r3
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f00e fb24 	bl	80120e8 <HAL_XSPI_Transmit>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <APS512XX_WriteReg+0x9c>
  {
    return APS512XX_ERROR;
 8003aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aaa:	e000      	b.n	8003aae <APS512XX_WriteReg+0x9e>
  }

  return APS512XX_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3760      	adds	r7, #96	; 0x60
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <APS512XX_Reset>:
  * @brief  Reset the memory
  * @param  Ctx Component object pointer
  * @retval error status
  */
int32_t APS512XX_Reset(XSPI_HandleTypeDef *Ctx)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b096      	sub	sp, #88	; 0x58
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  XSPI_RegularCmdTypeDef sCommand = {0};
 8003abe:	f107 0308 	add.w	r3, r7, #8
 8003ac2:	2250      	movs	r2, #80	; 0x50
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f024 fb50 	bl	802816c <memset>

  /* Initialize the command */
  sCommand.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8003acc:	2300      	movs	r3, #0
 8003ace:	60bb      	str	r3, [r7, #8]
  sCommand.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
 8003ad0:	2304      	movs	r3, #4
 8003ad2:	617b      	str	r3, [r7, #20]
  sCommand.InstructionWidth   = HAL_XSPI_INSTRUCTION_8_BITS;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	61fb      	str	r3, [r7, #28]
  sCommand.Instruction        = APS512XX_RESET_CMD;
 8003adc:	23ff      	movs	r3, #255	; 0xff
 8003ade:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
 8003ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ae4:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressWidth       = HAL_XSPI_ADDRESS_24_BITS;
 8003ae6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003aea:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_DISABLE;
 8003aec:	2300      	movs	r3, #0
 8003aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Address            = 0;
 8003af0:	2300      	movs	r3, #0
 8003af2:	623b      	str	r3, [r7, #32]
  sCommand.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8003af4:	2300      	movs	r3, #0
 8003af6:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_XSPI_DATA_NONE;
 8003af8:	2300      	movs	r3, #0
 8003afa:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataLength         = 0;
 8003afc:	2300      	movs	r3, #0
 8003afe:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles        = 0;
 8003b00:	2300      	movs	r3, #0
 8003b02:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8003b04:	2300      	movs	r3, #0
 8003b06:	653b      	str	r3, [r7, #80]	; 0x50
#if defined (XSPI_CCR_SIOO)
  sCommand.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	657b      	str	r3, [r7, #84]	; 0x54
#endif

  /* Configure the command */
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003b0c:	f107 0308 	add.w	r3, r7, #8
 8003b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b14:	4619      	mov	r1, r3
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f00e f9fa 	bl	8011f10 <HAL_XSPI_Command>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <APS512XX_Reset+0x72>
  {
    return APS512XX_ERROR;
 8003b22:	f04f 33ff 	mov.w	r3, #4294967295
 8003b26:	e003      	b.n	8003b30 <APS512XX_Reset+0x7a>
  }

  /* Need to wait tRST */
  HAL_Delay(1);
 8003b28:	2001      	movs	r0, #1
 8003b2a:	f003 fc15 	bl	8007358 <HAL_Delay>
  return 0/*APS512XX_OK*/;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3758      	adds	r7, #88	; 0x58
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <MX25UM51245G_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval error status
  */
int32_t MX25UM51245G_GetFlashInfo(MX25UM51245G_Info_t *pInfo)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25UM51245G_FLASH_SIZE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003b46:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize        = MX25UM51245G_SECTOR_64K;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003b4e:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber     = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SECTOR_64K);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b56:	609a      	str	r2, [r3, #8]
  pInfo->EraseSubSectorSize     = MX25UM51245G_SUBSECTOR_4K;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b5e:	60da      	str	r2, [r3, #12]
  pInfo->EraseSubSectorNumber   = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b66:	611a      	str	r2, [r3, #16]
  pInfo->EraseSubSector1Size    = MX25UM51245G_SUBSECTOR_4K;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b6e:	615a      	str	r2, [r3, #20]
  pInfo->EraseSubSector1Number  = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b76:	619a      	str	r2, [r3, #24]
  pInfo->ProgPageSize           = MX25UM51245G_PAGE_SIZE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b7e:	61da      	str	r2, [r3, #28]
  pInfo->ProgPagesNumber        = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_PAGE_SIZE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003b86:	621a      	str	r2, [r3, #32]

  return MX25UM51245G_OK;
 8003b88:	2300      	movs	r3, #0
};
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <MX25UM51245G_AutoPollingMemReady>:
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25UM51245G_AutoPollingMemReady(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                         MX25UM51245G_Transfer_t Rate)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b09c      	sub	sp, #112	; 0x70
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	70fb      	strb	r3, [r7, #3]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef  s_command = {0};
 8003ba6:	f107 0320 	add.w	r3, r7, #32
 8003baa:	2250      	movs	r2, #80	; 0x50
 8003bac:	2100      	movs	r1, #0
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f024 fadc 	bl	802816c <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
 8003bb4:	f107 030c 	add.w	r3, r7, #12
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	605a      	str	r2, [r3, #4]
 8003bbe:	609a      	str	r2, [r3, #8]
 8003bc0:	60da      	str	r2, [r3, #12]
 8003bc2:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 8003bc4:	78fb      	ldrb	r3, [r7, #3]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d105      	bne.n	8003bd6 <MX25UM51245G_AutoPollingMemReady+0x40>
 8003bca:	78bb      	ldrb	r3, [r7, #2]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d102      	bne.n	8003bd6 <MX25UM51245G_AutoPollingMemReady+0x40>
  {
    return MX25UM51245G_ERROR;
 8003bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd4:	e08d      	b.n	8003cf2 <MX25UM51245G_AutoPollingMemReady+0x15c>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	623b      	str	r3, [r7, #32]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8003bde:	78fb      	ldrb	r3, [r7, #3]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <MX25UM51245G_AutoPollingMemReady+0x52>
 8003be4:	2301      	movs	r3, #1
 8003be6:	e000      	b.n	8003bea <MX25UM51245G_AutoPollingMemReady+0x54>
 8003be8:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 8003bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8003bec:	78bb      	ldrb	r3, [r7, #2]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <MX25UM51245G_AutoPollingMemReady+0x60>
 8003bf2:	2308      	movs	r3, #8
 8003bf4:	e000      	b.n	8003bf8 <MX25UM51245G_AutoPollingMemReady+0x62>
 8003bf6:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 8003bf8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 8003bfa:	78fb      	ldrb	r3, [r7, #3]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <MX25UM51245G_AutoPollingMemReady+0x6e>
 8003c00:	2300      	movs	r3, #0
 8003c02:	e000      	b.n	8003c06 <MX25UM51245G_AutoPollingMemReady+0x70>
 8003c04:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 8003c06:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_READ_STATUS_REG_CMD
                                 : MX25UM51245G_OCTA_READ_STATUS_REG_CMD;
 8003c08:	78fb      	ldrb	r3, [r7, #3]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <MX25UM51245G_AutoPollingMemReady+0x7c>
 8003c0e:	2305      	movs	r3, #5
 8003c10:	e001      	b.n	8003c16 <MX25UM51245G_AutoPollingMemReady+0x80>
 8003c12:	f240 53fa 	movw	r3, #1530	; 0x5fa
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 8003c16:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
 8003c18:	78fb      	ldrb	r3, [r7, #3]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <MX25UM51245G_AutoPollingMemReady+0x8c>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	e001      	b.n	8003c26 <MX25UM51245G_AutoPollingMemReady+0x90>
 8003c22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c26:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
 8003c28:	78bb      	ldrb	r3, [r7, #2]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d102      	bne.n	8003c34 <MX25UM51245G_AutoPollingMemReady+0x9e>
 8003c2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c32:	e000      	b.n	8003c36 <MX25UM51245G_AutoPollingMemReady+0xa0>
 8003c34:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
 8003c36:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
 8003c38:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003c3c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address            = 0U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8003c42:	2300      	movs	r3, #0
 8003c44:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 8003c46:	78fb      	ldrb	r3, [r7, #3]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d102      	bne.n	8003c52 <MX25UM51245G_AutoPollingMemReady+0xbc>
 8003c4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c50:	e001      	b.n	8003c56 <MX25UM51245G_AutoPollingMemReady+0xc0>
 8003c52:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003c56:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
 8003c58:	78bb      	ldrb	r3, [r7, #2]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d102      	bne.n	8003c64 <MX25UM51245G_AutoPollingMemReady+0xce>
 8003c5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c62:	e000      	b.n	8003c66 <MX25UM51245G_AutoPollingMemReady+0xd0>
 8003c64:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
 8003c66:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? 0U
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
 8003c68:	78fb      	ldrb	r3, [r7, #3]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d006      	beq.n	8003c7c <MX25UM51245G_AutoPollingMemReady+0xe6>
 8003c6e:	78bb      	ldrb	r3, [r7, #2]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d101      	bne.n	8003c78 <MX25UM51245G_AutoPollingMemReady+0xe2>
 8003c74:	2305      	movs	r3, #5
 8003c76:	e002      	b.n	8003c7e <MX25UM51245G_AutoPollingMemReady+0xe8>
 8003c78:	2304      	movs	r3, #4
 8003c7a:	e000      	b.n	8003c7e <MX25UM51245G_AutoPollingMemReady+0xe8>
 8003c7c:	2300      	movs	r3, #0
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
 8003c7e:	667b      	str	r3, [r7, #100]	; 0x64
                                    ? DUMMY_CYCLES_REG_OCTAL_DTR
                                    : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
 8003c80:	78bb      	ldrb	r3, [r7, #2]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d101      	bne.n	8003c8a <MX25UM51245G_AutoPollingMemReady+0xf4>
 8003c86:	2302      	movs	r3, #2
 8003c88:	e000      	b.n	8003c8c <MX25UM51245G_AutoPollingMemReady+0xf6>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
 8003c8e:	78bb      	ldrb	r3, [r7, #2]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d102      	bne.n	8003c9a <MX25UM51245G_AutoPollingMemReady+0x104>
 8003c94:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003c98:	e000      	b.n	8003c9c <MX25UM51245G_AutoPollingMemReady+0x106>
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	66fb      	str	r3, [r7, #108]	; 0x6c

  s_config.MatchValue    = 0U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60fb      	str	r3, [r7, #12]
  s_config.MatchMask     = MX25UM51245G_SR_WIP;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	613b      	str	r3, [r7, #16]
  s_config.MatchMode     = HAL_XSPI_MATCH_MODE_AND;
 8003caa:	2300      	movs	r3, #0
 8003cac:	617b      	str	r3, [r7, #20]
  s_config.IntervalTime  = MX25UM51245G_AUTOPOLLING_INTERVAL_TIME;
 8003cae:	2310      	movs	r3, #16
 8003cb0:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
 8003cb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003cb6:	61bb      	str	r3, [r7, #24]

  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cb8:	f107 0320 	add.w	r3, r7, #32
 8003cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f00e f924 	bl	8011f10 <HAL_XSPI_Command>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d002      	beq.n	8003cd4 <MX25UM51245G_AutoPollingMemReady+0x13e>
  {
    return MX25UM51245G_ERROR;
 8003cce:	f04f 33ff 	mov.w	r3, #4294967295
 8003cd2:	e00e      	b.n	8003cf2 <MX25UM51245G_AutoPollingMemReady+0x15c>
  }

  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cd4:	f107 030c 	add.w	r3, r7, #12
 8003cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cdc:	4619      	mov	r1, r3
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f00e fb18 	bl	8012314 <HAL_XSPI_AutoPolling>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <MX25UM51245G_AutoPollingMemReady+0x15a>
  {
    return MX25UM51245G_ERROR;
 8003cea:	f04f 33ff 	mov.w	r3, #4294967295
 8003cee:	e000      	b.n	8003cf2 <MX25UM51245G_AutoPollingMemReady+0x15c>
  }

  return MX25UM51245G_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3770      	adds	r7, #112	; 0x70
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <MX25UM51245G_EnableSTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @retval Memory status
  */
int32_t MX25UM51245G_EnableSTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                               MX25UM51245G_AddressSize_t AddressSize)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b098      	sub	sp, #96	; 0x60
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
 8003d02:	460b      	mov	r3, r1
 8003d04:	70fb      	strb	r3, [r7, #3]
 8003d06:	4613      	mov	r3, r2
 8003d08:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef      s_command = {0};
 8003d0a:	f107 0310 	add.w	r3, r7, #16
 8003d0e:	2250      	movs	r2, #80	; 0x50
 8003d10:	2100      	movs	r1, #0
 8003d12:	4618      	mov	r0, r3
 8003d14:	f024 fa2a 	bl	802816c <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8003d18:	f107 0308 	add.w	r3, r7, #8
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	605a      	str	r2, [r3, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25UM51245G_OPI_MODE) && (AddressSize == MX25UM51245G_3BYTES_SIZE))
 8003d22:	78fb      	ldrb	r3, [r7, #3]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d105      	bne.n	8003d34 <MX25UM51245G_EnableSTRMemoryMappedMode+0x3a>
 8003d28:	78bb      	ldrb	r3, [r7, #2]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d102      	bne.n	8003d34 <MX25UM51245G_EnableSTRMemoryMappedMode+0x3a>
  {
    return MX25UM51245G_ERROR;
 8003d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d32:	e088      	b.n	8003e46 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
 8003d34:	2301      	movs	r3, #1
 8003d36:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8003d3c:	78fb      	ldrb	r3, [r7, #3]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <MX25UM51245G_EnableSTRMemoryMappedMode+0x4c>
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <MX25UM51245G_EnableSTRMemoryMappedMode+0x4e>
 8003d46:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 8003d48:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 8003d4e:	78fb      	ldrb	r3, [r7, #3]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <MX25UM51245G_EnableSTRMemoryMappedMode+0x5e>
 8003d54:	2300      	movs	r3, #0
 8003d56:	e000      	b.n	8003d5a <MX25UM51245G_EnableSTRMemoryMappedMode+0x60>
 8003d58:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 8003d5a:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? ((AddressSize == MX25UM51245G_3BYTES_SIZE)
                                    ? MX25UM51245G_FAST_READ_CMD
                                    : MX25UM51245G_4_BYTE_ADDR_FAST_READ_CMD)
                                 : MX25UM51245G_OCTA_READ_CMD;
 8003d5c:	78fb      	ldrb	r3, [r7, #3]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d106      	bne.n	8003d70 <MX25UM51245G_EnableSTRMemoryMappedMode+0x76>
 8003d62:	78bb      	ldrb	r3, [r7, #2]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <MX25UM51245G_EnableSTRMemoryMappedMode+0x72>
 8003d68:	230b      	movs	r3, #11
 8003d6a:	e003      	b.n	8003d74 <MX25UM51245G_EnableSTRMemoryMappedMode+0x7a>
 8003d6c:	230c      	movs	r3, #12
 8003d6e:	e001      	b.n	8003d74 <MX25UM51245G_EnableSTRMemoryMappedMode+0x7a>
 8003d70:	f64e 4313 	movw	r3, #60435	; 0xec13
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 8003d74:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
 8003d76:	78fb      	ldrb	r3, [r7, #3]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d102      	bne.n	8003d82 <MX25UM51245G_EnableSTRMemoryMappedMode+0x88>
 8003d7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d80:	e001      	b.n	8003d86 <MX25UM51245G_EnableSTRMemoryMappedMode+0x8c>
 8003d82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_DISABLE;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressWidth       = (AddressSize == MX25UM51245G_3BYTES_SIZE)
                                 ? HAL_XSPI_ADDRESS_24_BITS
                                 : HAL_XSPI_ADDRESS_32_BITS;
 8003d8c:	78bb      	ldrb	r3, [r7, #2]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d102      	bne.n	8003d98 <MX25UM51245G_EnableSTRMemoryMappedMode+0x9e>
 8003d92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d96:	e001      	b.n	8003d9c <MX25UM51245G_EnableSTRMemoryMappedMode+0xa2>
 8003d98:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  s_command.AddressWidth       = (AddressSize == MX25UM51245G_3BYTES_SIZE)
 8003d9c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 8003da2:	78fb      	ldrb	r3, [r7, #3]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d102      	bne.n	8003dae <MX25UM51245G_EnableSTRMemoryMappedMode+0xb4>
 8003da8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003dac:	e001      	b.n	8003db2 <MX25UM51245G_EnableSTRMemoryMappedMode+0xb8>
 8003dae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003db2:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_DISABLE;
 8003db4:	2300      	movs	r3, #0
 8003db6:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8003db8:	78fb      	ldrb	r3, [r7, #3]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <MX25UM51245G_EnableSTRMemoryMappedMode+0xc8>
 8003dbe:	2308      	movs	r3, #8
 8003dc0:	e000      	b.n	8003dc4 <MX25UM51245G_EnableSTRMemoryMappedMode+0xca>
 8003dc2:	2306      	movs	r3, #6
 8003dc4:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the read command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003dce:	f107 0310 	add.w	r3, r7, #16
 8003dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f00e f899 	bl	8011f10 <HAL_XSPI_Command>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d002      	beq.n	8003dea <MX25UM51245G_EnableSTRMemoryMappedMode+0xf0>
  {
    return MX25UM51245G_ERROR;
 8003de4:	f04f 33ff 	mov.w	r3, #4294967295
 8003de8:	e02d      	b.n	8003e46 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_WRITE_CFG;
 8003dea:	2302      	movs	r3, #2
 8003dec:	613b      	str	r3, [r7, #16]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? ((AddressSize == MX25UM51245G_3BYTES_SIZE)
                                    ? MX25UM51245G_PAGE_PROG_CMD
                                    : MX25UM51245G_4_BYTE_PAGE_PROG_CMD)
                                 : MX25UM51245G_OCTA_PAGE_PROG_CMD;
 8003dee:	78fb      	ldrb	r3, [r7, #3]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d106      	bne.n	8003e02 <MX25UM51245G_EnableSTRMemoryMappedMode+0x108>
 8003df4:	78bb      	ldrb	r3, [r7, #2]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <MX25UM51245G_EnableSTRMemoryMappedMode+0x104>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	e003      	b.n	8003e06 <MX25UM51245G_EnableSTRMemoryMappedMode+0x10c>
 8003dfe:	2312      	movs	r3, #18
 8003e00:	e001      	b.n	8003e06 <MX25UM51245G_EnableSTRMemoryMappedMode+0x10c>
 8003e02:	f241 23ed 	movw	r3, #4845	; 0x12ed
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 8003e06:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles        = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the write command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003e0c:	f107 0310 	add.w	r3, r7, #16
 8003e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e14:	4619      	mov	r1, r3
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f00e f87a 	bl	8011f10 <HAL_XSPI_Command>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <MX25UM51245G_EnableSTRMemoryMappedMode+0x12e>
  {
    return MX25UM51245G_ERROR;
 8003e22:	f04f 33ff 	mov.w	r3, #4294967295
 8003e26:	e00e      	b.n	8003e46 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	60bb      	str	r3, [r7, #8]

  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8003e2c:	f107 0308 	add.w	r3, r7, #8
 8003e30:	4619      	mov	r1, r3
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f00e faf8 	bl	8012428 <HAL_XSPI_MemoryMapped>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d002      	beq.n	8003e44 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14a>
  {
    return MX25UM51245G_ERROR;
 8003e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e42:	e000      	b.n	8003e46 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  return MX25UM51245G_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3760      	adds	r7, #96	; 0x60
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <MX25UM51245G_EnableDTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval Memory status
  */
int32_t MX25UM51245G_EnableDTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b098      	sub	sp, #96	; 0x60
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
 8003e56:	460b      	mov	r3, r1
 8003e58:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  XSPI_RegularCmdTypeDef      s_command = {0};
 8003e5a:	f107 0310 	add.w	r3, r7, #16
 8003e5e:	2250      	movs	r2, #80	; 0x50
 8003e60:	2100      	movs	r1, #0
 8003e62:	4618      	mov	r0, r3
 8003e64:	f024 f982 	bl	802816c <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8003e68:	f107 0308 	add.w	r3, r7, #8
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	605a      	str	r2, [r3, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
 8003e72:	2301      	movs	r3, #1
 8003e74:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8003e76:	2300      	movs	r3, #0
 8003e78:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
 8003e7a:	2304      	movs	r3, #4
 8003e7c:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
 8003e7e:	2308      	movs	r3, #8
 8003e80:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionWidth   = HAL_XSPI_INSTRUCTION_16_BITS;
 8003e82:	2310      	movs	r3, #16
 8003e84:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = MX25UM51245G_OCTA_READ_DTR_CMD;
 8003e86:	f64e 6311 	movw	r3, #60945	; 0xee11
 8003e8a:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
 8003e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
 8003e92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e96:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
 8003e98:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003e9c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = HAL_XSPI_DATA_8_LINES;
 8003ea2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003ea6:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
 8003ea8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003eac:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 8003eae:	2306      	movs	r3, #6
 8003eb0:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_XSPI_DQS_ENABLE;
 8003eb2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003eb6:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ebc:	f107 0310 	add.w	r3, r7, #16
 8003ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f00e f822 	bl	8011f10 <HAL_XSPI_Command>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d002      	beq.n	8003ed8 <MX25UM51245G_EnableDTRMemoryMappedMode+0x8a>
  {
    return MX25UM51245G_ERROR;
 8003ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed6:	e025      	b.n	8003f24 <MX25UM51245G_EnableDTRMemoryMappedMode+0xd6>
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_XSPI_OPTYPE_WRITE_CFG;
 8003ed8:	2302      	movs	r3, #2
 8003eda:	613b      	str	r3, [r7, #16]
  s_command.Instruction   = MX25UM51245G_OCTA_PAGE_PROG_CMD;
 8003edc:	f241 23ed 	movw	r3, #4845	; 0x12ed
 8003ee0:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles   = 0U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode       = HAL_XSPI_DQS_DISABLE;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003eea:	f107 0310 	add.w	r3, r7, #16
 8003eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f00e f80b 	bl	8011f10 <HAL_XSPI_Command>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <MX25UM51245G_EnableDTRMemoryMappedMode+0xb8>
  {
    return MX25UM51245G_ERROR;
 8003f00:	f04f 33ff 	mov.w	r3, #4294967295
 8003f04:	e00e      	b.n	8003f24 <MX25UM51245G_EnableDTRMemoryMappedMode+0xd6>
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
 8003f06:	2300      	movs	r3, #0
 8003f08:	60bb      	str	r3, [r7, #8]

  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8003f0a:	f107 0308 	add.w	r3, r7, #8
 8003f0e:	4619      	mov	r1, r3
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f00e fa89 	bl	8012428 <HAL_XSPI_MemoryMapped>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <MX25UM51245G_EnableDTRMemoryMappedMode+0xd4>
  {
    return MX25UM51245G_ERROR;
 8003f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f20:	e000      	b.n	8003f24 <MX25UM51245G_EnableDTRMemoryMappedMode+0xd6>
  }

  return MX25UM51245G_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3760      	adds	r7, #96	; 0x60
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <MX25UM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_WriteEnable(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b09c      	sub	sp, #112	; 0x70
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	460b      	mov	r3, r1
 8003f36:	70fb      	strb	r3, [r7, #3]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef     s_command = {0};
 8003f3c:	f107 0320 	add.w	r3, r7, #32
 8003f40:	2250      	movs	r2, #80	; 0x50
 8003f42:	2100      	movs	r1, #0
 8003f44:	4618      	mov	r0, r3
 8003f46:	f024 f911 	bl	802816c <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
 8003f4a:	f107 030c 	add.w	r3, r7, #12
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	605a      	str	r2, [r3, #4]
 8003f54:	609a      	str	r2, [r3, #8]
 8003f56:	60da      	str	r2, [r3, #12]
 8003f58:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 8003f5a:	78fb      	ldrb	r3, [r7, #3]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d105      	bne.n	8003f6c <MX25UM51245G_WriteEnable+0x40>
 8003f60:	78bb      	ldrb	r3, [r7, #2]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d102      	bne.n	8003f6c <MX25UM51245G_WriteEnable+0x40>
  {
    return MX25UM51245G_ERROR;
 8003f66:	f04f 33ff 	mov.w	r3, #4294967295
 8003f6a:	e0ab      	b.n	80040c4 <MX25UM51245G_WriteEnable+0x198>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	623b      	str	r3, [r7, #32]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8003f70:	2300      	movs	r3, #0
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8003f74:	78fb      	ldrb	r3, [r7, #3]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <MX25UM51245G_WriteEnable+0x52>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <MX25UM51245G_WriteEnable+0x54>
 8003f7e:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 8003f80:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8003f82:	78bb      	ldrb	r3, [r7, #2]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d101      	bne.n	8003f8c <MX25UM51245G_WriteEnable+0x60>
 8003f88:	2308      	movs	r3, #8
 8003f8a:	e000      	b.n	8003f8e <MX25UM51245G_WriteEnable+0x62>
 8003f8c:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 8003f8e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 8003f90:	78fb      	ldrb	r3, [r7, #3]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <MX25UM51245G_WriteEnable+0x6e>
 8003f96:	2300      	movs	r3, #0
 8003f98:	e000      	b.n	8003f9c <MX25UM51245G_WriteEnable+0x70>
 8003f9a:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 8003f9c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_WRITE_ENABLE_CMD
                                 : MX25UM51245G_OCTA_WRITE_ENABLE_CMD;
 8003f9e:	78fb      	ldrb	r3, [r7, #3]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <MX25UM51245G_WriteEnable+0x7c>
 8003fa4:	2306      	movs	r3, #6
 8003fa6:	e001      	b.n	8003fac <MX25UM51245G_WriteEnable+0x80>
 8003fa8:	f240 63f9 	movw	r3, #1785	; 0x6f9
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 8003fac:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DummyCycles        = 0U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003fc6:	f107 0320 	add.w	r3, r7, #32
 8003fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fce:	4619      	mov	r1, r3
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f00d ff9d 	bl	8011f10 <HAL_XSPI_Command>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d002      	beq.n	8003fe2 <MX25UM51245G_WriteEnable+0xb6>
  {
    return MX25UM51245G_ERROR;
 8003fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe0:	e070      	b.n	80040c4 <MX25UM51245G_WriteEnable+0x198>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25UM51245G_SPI_MODE)
                             ? MX25UM51245G_READ_STATUS_REG_CMD
                             : MX25UM51245G_OCTA_READ_STATUS_REG_CMD;
 8003fe2:	78fb      	ldrb	r3, [r7, #3]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d101      	bne.n	8003fec <MX25UM51245G_WriteEnable+0xc0>
 8003fe8:	2305      	movs	r3, #5
 8003fea:	e001      	b.n	8003ff0 <MX25UM51245G_WriteEnable+0xc4>
 8003fec:	f240 53fa 	movw	r3, #1530	; 0x5fa
  s_command.Instruction    = (Mode == MX25UM51245G_SPI_MODE)
 8003ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode    = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
 8003ff2:	78fb      	ldrb	r3, [r7, #3]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <MX25UM51245G_WriteEnable+0xd0>
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	e001      	b.n	8004000 <MX25UM51245G_WriteEnable+0xd4>
 8003ffc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004000:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                             ? HAL_XSPI_ADDRESS_DTR_ENABLE
                             : HAL_XSPI_ADDRESS_DTR_DISABLE;
 8004002:	78bb      	ldrb	r3, [r7, #2]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d102      	bne.n	800400e <MX25UM51245G_WriteEnable+0xe2>
 8004008:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800400c:	e000      	b.n	8004010 <MX25UM51245G_WriteEnable+0xe4>
 800400e:	2300      	movs	r3, #0
  s_command.AddressDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 8004010:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressWidth   = HAL_XSPI_ADDRESS_32_BITS;
 8004012:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004016:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address        = 0U;
 8004018:	2300      	movs	r3, #0
 800401a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DataMode       = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 800401c:	78fb      	ldrb	r3, [r7, #3]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d102      	bne.n	8004028 <MX25UM51245G_WriteEnable+0xfc>
 8004022:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004026:	e001      	b.n	800402c <MX25UM51245G_WriteEnable+0x100>
 8004028:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800402c:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDTRMode    = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DATA_DTR_ENABLE : HAL_XSPI_DATA_DTR_DISABLE;
 800402e:	78bb      	ldrb	r3, [r7, #2]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d102      	bne.n	800403a <MX25UM51245G_WriteEnable+0x10e>
 8004034:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004038:	e000      	b.n	800403c <MX25UM51245G_WriteEnable+0x110>
 800403a:	2300      	movs	r3, #0
 800403c:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles    = (Mode == MX25UM51245G_SPI_MODE)
                             ? 0U
                             : ((Rate == MX25UM51245G_DTR_TRANSFER)
 800403e:	78fb      	ldrb	r3, [r7, #3]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d006      	beq.n	8004052 <MX25UM51245G_WriteEnable+0x126>
 8004044:	78bb      	ldrb	r3, [r7, #2]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d101      	bne.n	800404e <MX25UM51245G_WriteEnable+0x122>
 800404a:	2305      	movs	r3, #5
 800404c:	e002      	b.n	8004054 <MX25UM51245G_WriteEnable+0x128>
 800404e:	2304      	movs	r3, #4
 8004050:	e000      	b.n	8004054 <MX25UM51245G_WriteEnable+0x128>
 8004052:	2300      	movs	r3, #0
  s_command.DummyCycles    = (Mode == MX25UM51245G_SPI_MODE)
 8004054:	667b      	str	r3, [r7, #100]	; 0x64
                                ? DUMMY_CYCLES_REG_OCTAL_DTR
                                : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
 8004056:	78bb      	ldrb	r3, [r7, #2]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <MX25UM51245G_WriteEnable+0x134>
 800405c:	2302      	movs	r3, #2
 800405e:	e000      	b.n	8004062 <MX25UM51245G_WriteEnable+0x136>
 8004060:	2301      	movs	r3, #1
 8004062:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode        = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
 8004064:	78bb      	ldrb	r3, [r7, #2]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d102      	bne.n	8004070 <MX25UM51245G_WriteEnable+0x144>
 800406a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800406e:	e000      	b.n	8004072 <MX25UM51245G_WriteEnable+0x146>
 8004070:	2300      	movs	r3, #0
 8004072:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004074:	f107 0320 	add.w	r3, r7, #32
 8004078:	f241 3288 	movw	r2, #5000	; 0x1388
 800407c:	4619      	mov	r1, r3
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f00d ff46 	bl	8011f10 <HAL_XSPI_Command>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <MX25UM51245G_WriteEnable+0x164>
  {
    return MX25UM51245G_ERROR;
 800408a:	f04f 33ff 	mov.w	r3, #4294967295
 800408e:	e019      	b.n	80040c4 <MX25UM51245G_WriteEnable+0x198>
  }

  s_config.MatchValue      = 2U;
 8004090:	2302      	movs	r3, #2
 8004092:	60fb      	str	r3, [r7, #12]
  s_config.MatchMask       = 2U;
 8004094:	2302      	movs	r3, #2
 8004096:	613b      	str	r3, [r7, #16]
  s_config.MatchMode       = HAL_XSPI_MATCH_MODE_AND;
 8004098:	2300      	movs	r3, #0
 800409a:	617b      	str	r3, [r7, #20]
  s_config.IntervalTime    = MX25UM51245G_AUTOPOLLING_INTERVAL_TIME;
 800409c:	2310      	movs	r3, #16
 800409e:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop   = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
 80040a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80040a4:	61bb      	str	r3, [r7, #24]

  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80040a6:	f107 030c 	add.w	r3, r7, #12
 80040aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ae:	4619      	mov	r1, r3
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f00e f92f 	bl	8012314 <HAL_XSPI_AutoPolling>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <MX25UM51245G_WriteEnable+0x196>
  {
    return MX25UM51245G_ERROR;
 80040bc:	f04f 33ff 	mov.w	r3, #4294967295
 80040c0:	e000      	b.n	80040c4 <MX25UM51245G_WriteEnable+0x198>
  }

  return MX25UM51245G_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3770      	adds	r7, #112	; 0x70
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <MX25UM51245G_WriteCfg2Register>:
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25UM51245G_WriteCfg2Register(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                       MX25UM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b098      	sub	sp, #96	; 0x60
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	607b      	str	r3, [r7, #4]
 80040d6:	460b      	mov	r3, r1
 80040d8:	72fb      	strb	r3, [r7, #11]
 80040da:	4613      	mov	r3, r2
 80040dc:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = {0};
 80040de:	f107 0310 	add.w	r3, r7, #16
 80040e2:	2250      	movs	r2, #80	; 0x50
 80040e4:	2100      	movs	r1, #0
 80040e6:	4618      	mov	r0, r3
 80040e8:	f024 f840 	bl	802816c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 80040ec:	7afb      	ldrb	r3, [r7, #11]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d105      	bne.n	80040fe <MX25UM51245G_WriteCfg2Register+0x32>
 80040f2:	7abb      	ldrb	r3, [r7, #10]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d102      	bne.n	80040fe <MX25UM51245G_WriteCfg2Register+0x32>
  {
    return MX25UM51245G_ERROR;
 80040f8:	f04f 33ff 	mov.w	r3, #4294967295
 80040fc:	e077      	b.n	80041ee <MX25UM51245G_WriteCfg2Register+0x122>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 80040fe:	2300      	movs	r3, #0
 8004100:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8004102:	2300      	movs	r3, #0
 8004104:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8004106:	7afb      	ldrb	r3, [r7, #11]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <MX25UM51245G_WriteCfg2Register+0x44>
 800410c:	2301      	movs	r3, #1
 800410e:	e000      	b.n	8004112 <MX25UM51245G_WriteCfg2Register+0x46>
 8004110:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 8004112:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8004114:	7abb      	ldrb	r3, [r7, #10]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d101      	bne.n	800411e <MX25UM51245G_WriteCfg2Register+0x52>
 800411a:	2308      	movs	r3, #8
 800411c:	e000      	b.n	8004120 <MX25UM51245G_WriteCfg2Register+0x54>
 800411e:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 8004120:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 8004122:	7afb      	ldrb	r3, [r7, #11]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <MX25UM51245G_WriteCfg2Register+0x60>
 8004128:	2300      	movs	r3, #0
 800412a:	e000      	b.n	800412e <MX25UM51245G_WriteCfg2Register+0x62>
 800412c:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 800412e:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_WRITE_CFG_REG2_CMD
                                 : MX25UM51245G_OCTA_WRITE_CFG_REG2_CMD;
 8004130:	7afb      	ldrb	r3, [r7, #11]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <MX25UM51245G_WriteCfg2Register+0x6e>
 8004136:	2372      	movs	r3, #114	; 0x72
 8004138:	e001      	b.n	800413e <MX25UM51245G_WriteCfg2Register+0x72>
 800413a:	f247 238d 	movw	r3, #29325	; 0x728d
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 800413e:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
 8004140:	7afb      	ldrb	r3, [r7, #11]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d102      	bne.n	800414c <MX25UM51245G_WriteCfg2Register+0x80>
 8004146:	f44f 7380 	mov.w	r3, #256	; 0x100
 800414a:	e001      	b.n	8004150 <MX25UM51245G_WriteCfg2Register+0x84>
 800414c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004150:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
 8004152:	7abb      	ldrb	r3, [r7, #10]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d102      	bne.n	800415e <MX25UM51245G_WriteCfg2Register+0x92>
 8004158:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800415c:	e000      	b.n	8004160 <MX25UM51245G_WriteCfg2Register+0x94>
 800415e:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
 8004160:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
 8004162:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004166:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = WriteAddr;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 800416c:	2300      	movs	r3, #0
 800416e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 8004170:	7afb      	ldrb	r3, [r7, #11]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d102      	bne.n	800417c <MX25UM51245G_WriteCfg2Register+0xb0>
 8004176:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800417a:	e001      	b.n	8004180 <MX25UM51245G_WriteCfg2Register+0xb4>
 800417c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004180:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
 8004182:	7abb      	ldrb	r3, [r7, #10]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d102      	bne.n	800418e <MX25UM51245G_WriteCfg2Register+0xc2>
 8004188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800418c:	e000      	b.n	8004190 <MX25UM51245G_WriteCfg2Register+0xc4>
 800418e:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
 8004190:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = 0U;
 8004192:	2300      	movs	r3, #0
 8004194:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DataLength             = (Mode == MX25UM51245G_SPI_MODE) ? 1U : ((Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U);
 8004196:	7afb      	ldrb	r3, [r7, #11]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d006      	beq.n	80041aa <MX25UM51245G_WriteCfg2Register+0xde>
 800419c:	7abb      	ldrb	r3, [r7, #10]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d101      	bne.n	80041a6 <MX25UM51245G_WriteCfg2Register+0xda>
 80041a2:	2302      	movs	r3, #2
 80041a4:	e002      	b.n	80041ac <MX25UM51245G_WriteCfg2Register+0xe0>
 80041a6:	2301      	movs	r3, #1
 80041a8:	e000      	b.n	80041ac <MX25UM51245G_WriteCfg2Register+0xe0>
 80041aa:	2301      	movs	r3, #1
 80041ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 80041ae:	2300      	movs	r3, #0
 80041b0:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 80041b2:	2300      	movs	r3, #0
 80041b4:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80041b6:	f107 0310 	add.w	r3, r7, #16
 80041ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80041be:	4619      	mov	r1, r3
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f00d fea5 	bl	8011f10 <HAL_XSPI_Command>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d002      	beq.n	80041d2 <MX25UM51245G_WriteCfg2Register+0x106>
  {
    return MX25UM51245G_ERROR;
 80041cc:	f04f 33ff 	mov.w	r3, #4294967295
 80041d0:	e00d      	b.n	80041ee <MX25UM51245G_WriteCfg2Register+0x122>
  }

  if (HAL_XSPI_Transmit(Ctx, &Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80041d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d6:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f00d ff84 	bl	80120e8 <HAL_XSPI_Transmit>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d002      	beq.n	80041ec <MX25UM51245G_WriteCfg2Register+0x120>
  {
    return MX25UM51245G_ERROR;
 80041e6:	f04f 33ff 	mov.w	r3, #4294967295
 80041ea:	e000      	b.n	80041ee <MX25UM51245G_WriteCfg2Register+0x122>
  }

  return MX25UM51245G_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3760      	adds	r7, #96	; 0x60
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <MX25UM51245G_ReadCfg2Register>:
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25UM51245G_ReadCfg2Register(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                      MX25UM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b098      	sub	sp, #96	; 0x60
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	60f8      	str	r0, [r7, #12]
 80041fe:	607b      	str	r3, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	72fb      	strb	r3, [r7, #11]
 8004204:	4613      	mov	r3, r2
 8004206:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = {0};
 8004208:	f107 0310 	add.w	r3, r7, #16
 800420c:	2250      	movs	r2, #80	; 0x50
 800420e:	2100      	movs	r1, #0
 8004210:	4618      	mov	r0, r3
 8004212:	f023 ffab 	bl	802816c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 8004216:	7afb      	ldrb	r3, [r7, #11]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d105      	bne.n	8004228 <MX25UM51245G_ReadCfg2Register+0x32>
 800421c:	7abb      	ldrb	r3, [r7, #10]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d102      	bne.n	8004228 <MX25UM51245G_ReadCfg2Register+0x32>
  {
    return MX25UM51245G_ERROR;
 8004222:	f04f 33ff 	mov.w	r3, #4294967295
 8004226:	e081      	b.n	800432c <MX25UM51245G_ReadCfg2Register+0x136>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8004228:	2300      	movs	r3, #0
 800422a:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 800422c:	2300      	movs	r3, #0
 800422e:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8004230:	7afb      	ldrb	r3, [r7, #11]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <MX25UM51245G_ReadCfg2Register+0x44>
 8004236:	2301      	movs	r3, #1
 8004238:	e000      	b.n	800423c <MX25UM51245G_ReadCfg2Register+0x46>
 800423a:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 800423c:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 800423e:	7abb      	ldrb	r3, [r7, #10]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <MX25UM51245G_ReadCfg2Register+0x52>
 8004244:	2308      	movs	r3, #8
 8004246:	e000      	b.n	800424a <MX25UM51245G_ReadCfg2Register+0x54>
 8004248:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 800424a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 800424c:	7afb      	ldrb	r3, [r7, #11]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <MX25UM51245G_ReadCfg2Register+0x60>
 8004252:	2300      	movs	r3, #0
 8004254:	e000      	b.n	8004258 <MX25UM51245G_ReadCfg2Register+0x62>
 8004256:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 8004258:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_READ_CFG_REG2_CMD
                                 : MX25UM51245G_OCTA_READ_CFG_REG2_CMD;
 800425a:	7afb      	ldrb	r3, [r7, #11]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <MX25UM51245G_ReadCfg2Register+0x6e>
 8004260:	2371      	movs	r3, #113	; 0x71
 8004262:	e001      	b.n	8004268 <MX25UM51245G_ReadCfg2Register+0x72>
 8004264:	f247 138e 	movw	r3, #29070	; 0x718e
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 8004268:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
 800426a:	7afb      	ldrb	r3, [r7, #11]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d102      	bne.n	8004276 <MX25UM51245G_ReadCfg2Register+0x80>
 8004270:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004274:	e001      	b.n	800427a <MX25UM51245G_ReadCfg2Register+0x84>
 8004276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800427a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
 800427c:	7abb      	ldrb	r3, [r7, #10]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d102      	bne.n	8004288 <MX25UM51245G_ReadCfg2Register+0x92>
 8004282:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004286:	e000      	b.n	800428a <MX25UM51245G_ReadCfg2Register+0x94>
 8004288:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
 800428a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
 800428c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004290:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = ReadAddr;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8004296:	2300      	movs	r3, #0
 8004298:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 800429a:	7afb      	ldrb	r3, [r7, #11]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d102      	bne.n	80042a6 <MX25UM51245G_ReadCfg2Register+0xb0>
 80042a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042a4:	e001      	b.n	80042aa <MX25UM51245G_ReadCfg2Register+0xb4>
 80042a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80042aa:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
 80042ac:	7abb      	ldrb	r3, [r7, #10]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d102      	bne.n	80042b8 <MX25UM51245G_ReadCfg2Register+0xc2>
 80042b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042b6:	e000      	b.n	80042ba <MX25UM51245G_ReadCfg2Register+0xc4>
 80042b8:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
 80042ba:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? 0U
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
 80042bc:	7afb      	ldrb	r3, [r7, #11]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d006      	beq.n	80042d0 <MX25UM51245G_ReadCfg2Register+0xda>
 80042c2:	7abb      	ldrb	r3, [r7, #10]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d101      	bne.n	80042cc <MX25UM51245G_ReadCfg2Register+0xd6>
 80042c8:	2305      	movs	r3, #5
 80042ca:	e002      	b.n	80042d2 <MX25UM51245G_ReadCfg2Register+0xdc>
 80042cc:	2304      	movs	r3, #4
 80042ce:	e000      	b.n	80042d2 <MX25UM51245G_ReadCfg2Register+0xdc>
 80042d0:	2300      	movs	r3, #0
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
 80042d2:	657b      	str	r3, [r7, #84]	; 0x54
                                    ? DUMMY_CYCLES_REG_OCTAL_DTR
                                    : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength             = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
 80042d4:	7abb      	ldrb	r3, [r7, #10]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d101      	bne.n	80042de <MX25UM51245G_ReadCfg2Register+0xe8>
 80042da:	2302      	movs	r3, #2
 80042dc:	e000      	b.n	80042e0 <MX25UM51245G_ReadCfg2Register+0xea>
 80042de:	2301      	movs	r3, #1
 80042e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
 80042e2:	7abb      	ldrb	r3, [r7, #10]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d102      	bne.n	80042ee <MX25UM51245G_ReadCfg2Register+0xf8>
 80042e8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80042ec:	e000      	b.n	80042f0 <MX25UM51245G_ReadCfg2Register+0xfa>
 80042ee:	2300      	movs	r3, #0
 80042f0:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 80042f2:	2300      	movs	r3, #0
 80042f4:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80042f6:	f107 0310 	add.w	r3, r7, #16
 80042fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80042fe:	4619      	mov	r1, r3
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f00d fe05 	bl	8011f10 <HAL_XSPI_Command>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d002      	beq.n	8004312 <MX25UM51245G_ReadCfg2Register+0x11c>
  {
    return MX25UM51245G_ERROR;
 800430c:	f04f 33ff 	mov.w	r3, #4294967295
 8004310:	e00c      	b.n	800432c <MX25UM51245G_ReadCfg2Register+0x136>
  }

  /* Reception of the data */
  if (HAL_XSPI_Receive(Ctx, Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004312:	f241 3288 	movw	r2, #5000	; 0x1388
 8004316:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f00d ff58 	bl	80121ce <HAL_XSPI_Receive>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d002      	beq.n	800432a <MX25UM51245G_ReadCfg2Register+0x134>
  {
    return MX25UM51245G_ERROR;
 8004324:	f04f 33ff 	mov.w	r3, #4294967295
 8004328:	e000      	b.n	800432c <MX25UM51245G_ReadCfg2Register+0x136>
  }

  return MX25UM51245G_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3760      	adds	r7, #96	; 0x60
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <MX25UM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_ResetEnable(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b096      	sub	sp, #88	; 0x58
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	460b      	mov	r3, r1
 800433e:	70fb      	strb	r3, [r7, #3]
 8004340:	4613      	mov	r3, r2
 8004342:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef s_command = {0};
 8004344:	f107 0308 	add.w	r3, r7, #8
 8004348:	2250      	movs	r2, #80	; 0x50
 800434a:	2100      	movs	r1, #0
 800434c:	4618      	mov	r0, r3
 800434e:	f023 ff0d 	bl	802816c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 8004352:	78fb      	ldrb	r3, [r7, #3]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d105      	bne.n	8004364 <MX25UM51245G_ResetEnable+0x30>
 8004358:	78bb      	ldrb	r3, [r7, #2]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d102      	bne.n	8004364 <MX25UM51245G_ResetEnable+0x30>
  {
    return MX25UM51245G_ERROR;
 800435e:	f04f 33ff 	mov.w	r3, #4294967295
 8004362:	e03b      	b.n	80043dc <MX25UM51245G_ResetEnable+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8004364:	2300      	movs	r3, #0
 8004366:	60bb      	str	r3, [r7, #8]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8004368:	2300      	movs	r3, #0
 800436a:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 800436c:	78fb      	ldrb	r3, [r7, #3]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <MX25UM51245G_ResetEnable+0x42>
 8004372:	2301      	movs	r3, #1
 8004374:	e000      	b.n	8004378 <MX25UM51245G_ResetEnable+0x44>
 8004376:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 8004378:	617b      	str	r3, [r7, #20]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 800437a:	78bb      	ldrb	r3, [r7, #2]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d101      	bne.n	8004384 <MX25UM51245G_ResetEnable+0x50>
 8004380:	2308      	movs	r3, #8
 8004382:	e000      	b.n	8004386 <MX25UM51245G_ResetEnable+0x52>
 8004384:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 8004386:	61fb      	str	r3, [r7, #28]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 8004388:	78fb      	ldrb	r3, [r7, #3]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <MX25UM51245G_ResetEnable+0x5e>
 800438e:	2300      	movs	r3, #0
 8004390:	e000      	b.n	8004394 <MX25UM51245G_ResetEnable+0x60>
 8004392:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 8004394:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_RESET_ENABLE_CMD
                                 : MX25UM51245G_OCTA_RESET_ENABLE_CMD;
 8004396:	78fb      	ldrb	r3, [r7, #3]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d101      	bne.n	80043a0 <MX25UM51245G_ResetEnable+0x6c>
 800439c:	2366      	movs	r3, #102	; 0x66
 800439e:	e001      	b.n	80043a4 <MX25UM51245G_ResetEnable+0x70>
 80043a0:	f246 6399 	movw	r3, #26265	; 0x6699
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 80043a4:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
 80043a6:	2300      	movs	r3, #0
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 80043aa:	2300      	movs	r3, #0
 80043ac:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
 80043ae:	2300      	movs	r3, #0
 80043b0:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 80043b6:	2300      	movs	r3, #0
 80043b8:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 80043ba:	2300      	movs	r3, #0
 80043bc:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043be:	f107 0308 	add.w	r3, r7, #8
 80043c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c6:	4619      	mov	r1, r3
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f00d fda1 	bl	8011f10 <HAL_XSPI_Command>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d002      	beq.n	80043da <MX25UM51245G_ResetEnable+0xa6>
  {
    return MX25UM51245G_ERROR;
 80043d4:	f04f 33ff 	mov.w	r3, #4294967295
 80043d8:	e000      	b.n	80043dc <MX25UM51245G_ResetEnable+0xa8>
  }

  return MX25UM51245G_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3758      	adds	r7, #88	; 0x58
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <MX25UM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_ResetMemory(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b096      	sub	sp, #88	; 0x58
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	460b      	mov	r3, r1
 80043ee:	70fb      	strb	r3, [r7, #3]
 80043f0:	4613      	mov	r3, r2
 80043f2:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef s_command = {0};
 80043f4:	f107 0308 	add.w	r3, r7, #8
 80043f8:	2250      	movs	r2, #80	; 0x50
 80043fa:	2100      	movs	r1, #0
 80043fc:	4618      	mov	r0, r3
 80043fe:	f023 feb5 	bl	802816c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 8004402:	78fb      	ldrb	r3, [r7, #3]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d105      	bne.n	8004414 <MX25UM51245G_ResetMemory+0x30>
 8004408:	78bb      	ldrb	r3, [r7, #2]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d102      	bne.n	8004414 <MX25UM51245G_ResetMemory+0x30>
  {
    return MX25UM51245G_ERROR;
 800440e:	f04f 33ff 	mov.w	r3, #4294967295
 8004412:	e03b      	b.n	800448c <MX25UM51245G_ResetMemory+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8004414:	2300      	movs	r3, #0
 8004416:	60bb      	str	r3, [r7, #8]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8004418:	2300      	movs	r3, #0
 800441a:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 800441c:	78fb      	ldrb	r3, [r7, #3]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <MX25UM51245G_ResetMemory+0x42>
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <MX25UM51245G_ResetMemory+0x44>
 8004426:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 8004428:	617b      	str	r3, [r7, #20]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 800442a:	78bb      	ldrb	r3, [r7, #2]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <MX25UM51245G_ResetMemory+0x50>
 8004430:	2308      	movs	r3, #8
 8004432:	e000      	b.n	8004436 <MX25UM51245G_ResetMemory+0x52>
 8004434:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 8004436:	61fb      	str	r3, [r7, #28]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 8004438:	78fb      	ldrb	r3, [r7, #3]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <MX25UM51245G_ResetMemory+0x5e>
 800443e:	2300      	movs	r3, #0
 8004440:	e000      	b.n	8004444 <MX25UM51245G_ResetMemory+0x60>
 8004442:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 8004444:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_RESET_MEMORY_CMD
                                 : MX25UM51245G_OCTA_RESET_MEMORY_CMD;
 8004446:	78fb      	ldrb	r3, [r7, #3]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <MX25UM51245G_ResetMemory+0x6c>
 800444c:	2399      	movs	r3, #153	; 0x99
 800444e:	e001      	b.n	8004454 <MX25UM51245G_ResetMemory+0x70>
 8004450:	f649 1366 	movw	r3, #39270	; 0x9966
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 8004454:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
 8004456:	2300      	movs	r3, #0
 8004458:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 800445a:	2300      	movs	r3, #0
 800445c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
 800445e:	2300      	movs	r3, #0
 8004460:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 8004462:	2300      	movs	r3, #0
 8004464:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8004466:	2300      	movs	r3, #0
 8004468:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 800446a:	2300      	movs	r3, #0
 800446c:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800446e:	f107 0308 	add.w	r3, r7, #8
 8004472:	f241 3288 	movw	r2, #5000	; 0x1388
 8004476:	4619      	mov	r1, r3
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f00d fd49 	bl	8011f10 <HAL_XSPI_Command>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d002      	beq.n	800448a <MX25UM51245G_ResetMemory+0xa6>
  {
    return MX25UM51245G_ERROR;
 8004484:	f04f 33ff 	mov.w	r3, #4294967295
 8004488:	e000      	b.n	800448c <MX25UM51245G_ResetMemory+0xa8>
  }

  return MX25UM51245G_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3758      	adds	r7, #88	; 0x58
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <SITRONIX_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t SITRONIX_RegisterBusIO(SITRONIX_Object_t *pObj, SITRONIX_IO_t *pIO)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d103      	bne.n	80044ac <SITRONIX_RegisterBusIO+0x18>
  {
    ret = SITRONIX_ERROR;
 80044a4:	f04f 33ff 	mov.w	r3, #4294967295
 80044a8:	60fb      	str	r3, [r7, #12]
 80044aa:	e033      	b.n	8004514 <SITRONIX_RegisterBusIO+0x80>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	891a      	ldrh	r2, [r3, #8]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	68da      	ldr	r2, [r3, #12]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	691a      	ldr	r2, [r3, #16]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadData  = pIO->ReadData;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	695a      	ldr	r2, [r3, #20]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	699a      	ldr	r2, [r3, #24]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a0e      	ldr	r2, [pc, #56]	; (8004520 <SITRONIX_RegisterBusIO+0x8c>)
 80044e8:	621a      	str	r2, [r3, #32]
    pObj->Ctx.WriteReg = WriteRegWrap;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a0d      	ldr	r2, [pc, #52]	; (8004524 <SITRONIX_RegisterBusIO+0x90>)
 80044ee:	61da      	str	r2, [r3, #28]
    pObj->Ctx.ReadData = ReadDataWrap;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a0d      	ldr	r2, [pc, #52]	; (8004528 <SITRONIX_RegisterBusIO+0x94>)
 80044f4:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.handle   = pObj;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	629a      	str	r2, [r3, #40]	; 0x28

    if (pObj->IO.Init != NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d004      	beq.n	800450e <SITRONIX_RegisterBusIO+0x7a>
    {
      ret = pObj->IO.Init();
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4798      	blx	r3
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	e002      	b.n	8004514 <SITRONIX_RegisterBusIO+0x80>
    }
    else
    {
      ret = SITRONIX_ERROR;
 800450e:	f04f 33ff 	mov.w	r3, #4294967295
 8004512:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8004514:	68fb      	ldr	r3, [r7, #12]
}
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	080047cf 	.word	0x080047cf
 8004524:	08004803 	.word	0x08004803
 8004528:	08004837 	.word	0x08004837

0800452c <SITRONIX_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to SITRONIX sensor capabilities
  * @retval Component status
  */
int32_t SITRONIX_GetCapabilities(SITRONIX_Object_t *pObj, SITRONIX_Capabilities_t *Capabilities)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2201      	movs	r2, #1
 800453a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	2200      	movs	r2, #0
 8004540:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = SITRONIX_MAX_DETECTABLE_TOUCH;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	220a      	movs	r2, #10
 8004546:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = SITRONIX_MAX_X_LENGTH;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800454e:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = SITRONIX_MAX_Y_LENGTH;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004556:	609a      	str	r2, [r3, #8]

  return SITRONIX_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <SITRONIX_Init>:
  *         from MCU to SITRONIX : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_Init(SITRONIX_Object_t *pObj)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b08a      	sub	sp, #40	; 0x28
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]

  int32_t ret = SITRONIX_OK;
 800456e:	2300      	movs	r3, #0
 8004570:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t data[28U];

  if (pObj->IsInitialized == 0U)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004578:	2b00      	cmp	r3, #0
 800457a:	d114      	bne.n	80045a6 <SITRONIX_Init+0x40>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4798      	blx	r3

    if (sitronix_read_data(&pObj->Ctx, data, (uint16_t)sizeof(data)) != SITRONIX_OK)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	331c      	adds	r3, #28
 8004586:	f107 0108 	add.w	r1, r7, #8
 800458a:	221c      	movs	r2, #28
 800458c:	4618      	mov	r0, r3
 800458e:	f000 f97e 	bl	800488e <sitronix_read_data>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d002      	beq.n	800459e <SITRONIX_Init+0x38>
    {
      ret = SITRONIX_ERROR;
 8004598:	f04f 33ff 	mov.w	r3, #4294967295
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    pObj->IsInitialized = 1;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }

  if (ret != SITRONIX_OK)
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d002      	beq.n	80045b2 <SITRONIX_Init+0x4c>
  {
    ret = SITRONIX_ERROR;
 80045ac:	f04f 33ff 	mov.w	r3, #4294967295
 80045b0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  return ret;
 80045b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3728      	adds	r7, #40	; 0x28
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <SITRONIX_DeInit>:
  *         from MCU to SITRONIX : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_DeInit(SITRONIX_Object_t *pObj)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d103      	bne.n	80045d6 <SITRONIX_DeInit+0x1a>
  {
    pObj->IsInitialized = 0;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }

  return SITRONIX_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <SITRONIX_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval Component status
  */
int32_t SITRONIX_GestureConfig(SITRONIX_Object_t *pObj, SITRONIX_Gesture_Init_t *GestureInit)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  return SITRONIX_ERROR;
 80045ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <SITRONIX_ReadID>:
  * @param  pObj Component object pointer
  * @param  Id Pointer to component's ID
  * @retval Component status
  */
int32_t SITRONIX_ReadID(SITRONIX_Object_t *pObj, uint32_t *Id)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b08c      	sub	sp, #48	; 0x30
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
 8004606:	6039      	str	r1, [r7, #0]
  int32_t ret = SITRONIX_OK;
 8004608:	2300      	movs	r3, #0
 800460a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t data[28];
  uint8_t trial = 0;
 800460c:	2300      	movs	r3, #0
 800460e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  for (trial = 0; trial < 10; trial++)
 8004612:	2300      	movs	r3, #0
 8004614:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004618:	e01c      	b.n	8004654 <SITRONIX_ReadID+0x56>
  {
    if (sitronix_read_data(&pObj->Ctx, data, 28) != SITRONIX_OK)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	331c      	adds	r3, #28
 800461e:	f107 010c 	add.w	r1, r7, #12
 8004622:	221c      	movs	r2, #28
 8004624:	4618      	mov	r0, r3
 8004626:	f000 f932 	bl	800488e <sitronix_read_data>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d003      	beq.n	8004638 <SITRONIX_ReadID+0x3a>
    {
      ret = SITRONIX_ERROR;
 8004630:	f04f 33ff 	mov.w	r3, #4294967295
 8004634:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004636:	e008      	b.n	800464a <SITRONIX_ReadID+0x4c>
    }
    else
    {
      if ((uint32_t)data[0] == SITRONIX_ID)
 8004638:	7b3b      	ldrb	r3, [r7, #12]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d105      	bne.n	800464a <SITRONIX_ReadID+0x4c>
      {
        *Id = (uint32_t)data[0];
 800463e:	7b3b      	ldrb	r3, [r7, #12]
 8004640:	461a      	mov	r2, r3
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	601a      	str	r2, [r3, #0]
        return ret;
 8004646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004648:	e009      	b.n	800465e <SITRONIX_ReadID+0x60>
  for (trial = 0; trial < 10; trial++)
 800464a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800464e:	3301      	adds	r3, #1
 8004650:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004654:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004658:	2b09      	cmp	r3, #9
 800465a:	d9de      	bls.n	800461a <SITRONIX_ReadID+0x1c>
      }
    }
  }
  return ret;
 800465c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800465e:	4618      	mov	r0, r3
 8004660:	3730      	adds	r7, #48	; 0x30
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <SITRONIX_GetState>:
  * @param  pObj Component object pointer
  * @param  State Single Touch structure pointer
  * @retval Component status.
  */
int32_t SITRONIX_GetState(SITRONIX_Object_t *pObj, SITRONIX_State_t *State)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b086      	sub	sp, #24
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
 800466e:	6039      	str	r1, [r7, #0]
  int32_t ret = SITRONIX_OK;
 8004670:	2300      	movs	r3, #0
 8004672:	617b      	str	r3, [r7, #20]
  uint8_t data[5];

  if (sitronix_read_data(&pObj->Ctx, data, (uint16_t)sizeof(data)) != SITRONIX_OK)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	331c      	adds	r3, #28
 8004678:	f107 010c 	add.w	r1, r7, #12
 800467c:	2205      	movs	r2, #5
 800467e:	4618      	mov	r0, r3
 8004680:	f000 f905 	bl	800488e <sitronix_read_data>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <SITRONIX_GetState+0x2c>
  {
    ret = SITRONIX_ERROR;
 800468a:	f04f 33ff 	mov.w	r3, #4294967295
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	e017      	b.n	80046c2 <SITRONIX_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = ((((uint32_t)data[2] & SITRONIX_TOUCH_POS_LSB_MASK) << 4) | ((uint32_t)data[3]));
 8004692:	7bbb      	ldrb	r3, [r7, #14]
 8004694:	011b      	lsls	r3, r3, #4
 8004696:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800469a:	7bfa      	ldrb	r2, [r7, #15]
 800469c:	431a      	orrs	r2, r3
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & SITRONIX_TOUCH_POS_MSB_MASK) << 8) | ((uint32_t)data[4]);
 80046a2:	7bbb      	ldrb	r3, [r7, #14]
 80046a4:	021b      	lsls	r3, r3, #8
 80046a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046aa:	7c3a      	ldrb	r2, [r7, #16]
 80046ac:	431a      	orrs	r2, r3
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	609a      	str	r2, [r3, #8]
	
    State->TouchDetected = ((data[2] & 0x80) == 0x80 ? 1 : 0);
 80046b2:	7bbb      	ldrb	r3, [r7, #14]
 80046b4:	b25b      	sxtb	r3, r3
 80046b6:	11db      	asrs	r3, r3, #7
 80046b8:	b25b      	sxtb	r3, r3
 80046ba:	f003 0201 	and.w	r2, r3, #1
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80046c2:	697b      	ldr	r3, [r7, #20]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3718      	adds	r7, #24
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <SITRONIX_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval Component status.
  */
int32_t SITRONIX_GetMultiTouchState(SITRONIX_Object_t *pObj, SITRONIX_MultiTouch_State_t *State)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b08a      	sub	sp, #40	; 0x28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  int32_t ret = SITRONIX_OK;
 80046d6:	2300      	movs	r3, #0
 80046d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t  data[28];

  State->TouchDetected = (uint32_t)SITRONIX_DetectTouch(pObj);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f855 	bl	800478a <SITRONIX_DetectTouch>
 80046e0:	4603      	mov	r3, r0
 80046e2:	461a      	mov	r2, r3
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	601a      	str	r2, [r3, #0]

  if (sitronix_read_reg(&pObj->Ctx, SITRONIX_P1_XH_REG, data, (uint16_t)sizeof(data)) != SITRONIX_OK)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f103 001c 	add.w	r0, r3, #28
 80046ee:	f107 0208 	add.w	r2, r7, #8
 80046f2:	231c      	movs	r3, #28
 80046f4:	2109      	movs	r1, #9
 80046f6:	f000 f8b3 	bl	8004860 <sitronix_read_reg>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <SITRONIX_GetMultiTouchState+0x3a>
  {
    ret = SITRONIX_ERROR;
 8004700:	f04f 33ff 	mov.w	r3, #4294967295
 8004704:	627b      	str	r3, [r7, #36]	; 0x24
  else
  {
    /* To be implemented */
  }

  return ret;
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004708:	4618      	mov	r0, r3
 800470a:	3728      	adds	r7, #40	; 0x28
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <SITRONIX_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId gesture ID
  * @retval Component status
  */
int32_t SITRONIX_GetGesture(SITRONIX_Object_t *pObj, uint8_t *GestureId)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return SITRONIX_OK as feature not supported by SITRONIX */
  return SITRONIX_ERROR;
 800471a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800471e:	4618      	mov	r0, r3
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <SITRONIX_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_EnableIT(SITRONIX_Object_t *pObj)
{
 800472a:	b480      	push	{r7}
 800472c:	b083      	sub	sp, #12
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return SITRONIX_OK as feature not supported by SITRONIX */
  return SITRONIX_ERROR;
 8004732:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004736:	4618      	mov	r0, r3
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <SITRONIX_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_DisableIT(SITRONIX_Object_t *pObj)
{
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return SITRONIX_OK as feature not supported by SITRONIX */
  return SITRONIX_ERROR;
 800474a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800474e:	4618      	mov	r0, r3
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <SITRONIX_ITStatus>:
  *         @note : This feature is not supported by SITRONIX.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_ITStatus(SITRONIX_Object_t *pObj)
{
 800475a:	b480      	push	{r7}
 800475c:	b083      	sub	sp, #12
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return SITRONIX_OK as feature not supported by SITRONIX */
  return SITRONIX_ERROR;
 8004762:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004766:	4618      	mov	r0, r3
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <SITRONIX_ClearIT>:
  *         @note : This feature is not supported by SITRONIX.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_ClearIT(SITRONIX_Object_t *pObj)
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return SITRONIX_OK as feature not supported by SITRONIX */
  return SITRONIX_ERROR;
 800477a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800477e:	4618      	mov	r0, r3
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <SITRONIX_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be between 0 and10) or SITRONIX_ERROR
  *         in case of error
  */
static int32_t SITRONIX_DetectTouch(SITRONIX_Object_t *pObj)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b08c      	sub	sp, #48	; 0x30
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch = 0;
 8004792:	2300      	movs	r3, #0
 8004794:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t data[28];

  if (sitronix_read_data(&pObj->Ctx, (uint8_t *)&data, 28) != SITRONIX_OK)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	331c      	adds	r3, #28
 800479c:	f107 010c 	add.w	r1, r7, #12
 80047a0:	221c      	movs	r2, #28
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 f873 	bl	800488e <sitronix_read_data>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <SITRONIX_DetectTouch+0x2c>
  {
    ret = SITRONIX_ERROR;
 80047ae:	f04f 33ff 	mov.w	r3, #4294967295
 80047b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047b4:	e006      	b.n	80047c4 <SITRONIX_DetectTouch+0x3a>
  }
  else
  {
    nb_touch = ((data[2] & 0x80) == 0x80 ? 1 : 0);
 80047b6:	7bbb      	ldrb	r3, [r7, #14]
 80047b8:	09db      	lsrs	r3, r3, #7
 80047ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    ret = (int32_t)nb_touch;
 80047be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80047c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  return ret;
 80047c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3730      	adds	r7, #48	; 0x30
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80047ce:	b590      	push	{r4, r7, lr}
 80047d0:	b087      	sub	sp, #28
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	60f8      	str	r0, [r7, #12]
 80047d6:	607a      	str	r2, [r7, #4]
 80047d8:	461a      	mov	r2, r3
 80047da:	460b      	mov	r3, r1
 80047dc:	72fb      	strb	r3, [r7, #11]
 80047de:	4613      	mov	r3, r2
 80047e0:	813b      	strh	r3, [r7, #8]
  SITRONIX_Object_t *pObj = (SITRONIX_Object_t *)handle;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	691c      	ldr	r4, [r3, #16]
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	8918      	ldrh	r0, [r3, #8]
 80047ee:	7afb      	ldrb	r3, [r7, #11]
 80047f0:	b299      	uxth	r1, r3
 80047f2:	893b      	ldrh	r3, [r7, #8]
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	47a0      	blx	r4
 80047f8:	4603      	mov	r3, r0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	371c      	adds	r7, #28
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd90      	pop	{r4, r7, pc}

08004802 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004802:	b590      	push	{r4, r7, lr}
 8004804:	b087      	sub	sp, #28
 8004806:	af00      	add	r7, sp, #0
 8004808:	60f8      	str	r0, [r7, #12]
 800480a:	607a      	str	r2, [r7, #4]
 800480c:	461a      	mov	r2, r3
 800480e:	460b      	mov	r3, r1
 8004810:	72fb      	strb	r3, [r7, #11]
 8004812:	4613      	mov	r3, r2
 8004814:	813b      	strh	r3, [r7, #8]
  SITRONIX_Object_t *pObj = (SITRONIX_Object_t *)handle;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	68dc      	ldr	r4, [r3, #12]
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	8918      	ldrh	r0, [r3, #8]
 8004822:	7afb      	ldrb	r3, [r7, #11]
 8004824:	b299      	uxth	r1, r3
 8004826:	893b      	ldrh	r3, [r7, #8]
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	47a0      	blx	r4
 800482c:	4603      	mov	r3, r0
}
 800482e:	4618      	mov	r0, r3
 8004830:	371c      	adds	r7, #28
 8004832:	46bd      	mov	sp, r7
 8004834:	bd90      	pop	{r4, r7, pc}

08004836 <ReadDataWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadDataWrap(void *handle, uint8_t *pData, uint16_t Length)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b086      	sub	sp, #24
 800483a:	af00      	add	r7, sp, #0
 800483c:	60f8      	str	r0, [r7, #12]
 800483e:	60b9      	str	r1, [r7, #8]
 8004840:	4613      	mov	r3, r2
 8004842:	80fb      	strh	r3, [r7, #6]
  SITRONIX_Object_t *pObj = (SITRONIX_Object_t *)handle;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadData(pObj->IO.Address, pData, Length);
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	8910      	ldrh	r0, [r2, #8]
 8004850:	88fa      	ldrh	r2, [r7, #6]
 8004852:	68b9      	ldr	r1, [r7, #8]
 8004854:	4798      	blx	r3
 8004856:	4603      	mov	r3, r0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <sitronix_read_reg>:
  *                 I2C or SPI reading functions
  * Input         : Register Address, length of buffer
  * Output        : pdata Read
  *******************************************************************************/
int32_t sitronix_read_reg(sitronix_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8004860:	b590      	push	{r4, r7, lr}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	607a      	str	r2, [r7, #4]
 800486a:	461a      	mov	r2, r3
 800486c:	460b      	mov	r3, r1
 800486e:	72fb      	strb	r3, [r7, #11]
 8004870:	4613      	mov	r3, r2
 8004872:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	685c      	ldr	r4, [r3, #4]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	68d8      	ldr	r0, [r3, #12]
 800487c:	893b      	ldrh	r3, [r7, #8]
 800487e:	7af9      	ldrb	r1, [r7, #11]
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	47a0      	blx	r4
 8004884:	4603      	mov	r3, r0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	bd90      	pop	{r4, r7, pc}

0800488e <sitronix_read_data>:
  *                 I2C or SPI reading functions
  * Input         : Register Address, length of buffer
  * Output        : pdata Read
  *******************************************************************************/
int32_t sitronix_read_data(sitronix_ctx_t *ctx, uint8_t *pdata, uint16_t length)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b084      	sub	sp, #16
 8004892:	af00      	add	r7, sp, #0
 8004894:	60f8      	str	r0, [r7, #12]
 8004896:	60b9      	str	r1, [r7, #8]
 8004898:	4613      	mov	r3, r2
 800489a:	80fb      	strh	r3, [r7, #6]
  return ctx->ReadData(ctx->handle, pdata, length);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	68d0      	ldr	r0, [r2, #12]
 80048a4:	88fa      	ldrh	r2, [r7, #6]
 80048a6:	68b9      	ldr	r1, [r7, #8]
 80048a8:	4798      	blx	r3
 80048aa:	4603      	mov	r3, r0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <BSP_I2C5_Init>:
/**
  * @brief  Initializes I2C5 HAL.
  * @retval BSP status
  */
int32_t BSP_I2C5_Init(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80048ba:	2300      	movs	r3, #0
 80048bc:	607b      	str	r3, [r7, #4]

  hbus_i2c5.Instance = BUS_I2C5;
 80048be:	4b16      	ldr	r3, [pc, #88]	; (8004918 <BSP_I2C5_Init+0x64>)
 80048c0:	4a16      	ldr	r2, [pc, #88]	; (800491c <BSP_I2C5_Init+0x68>)
 80048c2:	601a      	str	r2, [r3, #0]

  if (I2c5InitCounter == 0U)
 80048c4:	4b16      	ldr	r3, [pc, #88]	; (8004920 <BSP_I2C5_Init+0x6c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d11f      	bne.n	800490c <BSP_I2C5_Init+0x58>
  {
    I2c5InitCounter++;
 80048cc:	4b14      	ldr	r3, [pc, #80]	; (8004920 <BSP_I2C5_Init+0x6c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3301      	adds	r3, #1
 80048d2:	4a13      	ldr	r2, [pc, #76]	; (8004920 <BSP_I2C5_Init+0x6c>)
 80048d4:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c5) == HAL_I2C_STATE_RESET)
 80048d6:	4810      	ldr	r0, [pc, #64]	; (8004918 <BSP_I2C5_Init+0x64>)
 80048d8:	f005 ffca 	bl	800a870 <HAL_I2C_GetState>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d114      	bne.n	800490c <BSP_I2C5_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif /* BSP_USE_CMSIS_OS */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C5 Msp */
      I2C5_MspInit(&hbus_i2c5);
 80048e2:	480d      	ldr	r0, [pc, #52]	; (8004918 <BSP_I2C5_Init+0x64>)
 80048e4:	f000 fb88 	bl	8004ff8 <I2C5_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */
      if (MX_I2C5_Init(&hbus_i2c5, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C5_FREQUENCY)) != HAL_OK)
 80048e8:	f008 fa96 	bl	800ce18 <HAL_RCC_GetPCLK1Freq>
 80048ec:	4603      	mov	r3, r0
 80048ee:	490d      	ldr	r1, [pc, #52]	; (8004924 <BSP_I2C5_Init+0x70>)
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 f90b 	bl	8004b0c <I2C_GetTiming>
 80048f6:	4603      	mov	r3, r0
 80048f8:	4619      	mov	r1, r3
 80048fa:	4807      	ldr	r0, [pc, #28]	; (8004918 <BSP_I2C5_Init+0x64>)
 80048fc:	f000 f838 	bl	8004970 <MX_I2C5_Init>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <BSP_I2C5_Init+0x58>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8004906:	f06f 0307 	mvn.w	r3, #7
 800490a:	607b      	str	r3, [r7, #4]
#if (USE_HAL_I2C_REGISTER_CALLBACKS > 0)
    }
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS > 0) */
  }
}
return ret;
 800490c:	687b      	ldr	r3, [r7, #4]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	20197060 	.word	0x20197060
 800491c:	40009800 	.word	0x40009800
 8004920:	20196658 	.word	0x20196658
 8004924:	00061a80 	.word	0x00061a80

08004928 <BSP_I2C5_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C5_DeInit(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800492e:	2300      	movs	r3, #0
 8004930:	607b      	str	r3, [r7, #4]

  I2c5InitCounter--;
 8004932:	4b0d      	ldr	r3, [pc, #52]	; (8004968 <BSP_I2C5_DeInit+0x40>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3b01      	subs	r3, #1
 8004938:	4a0b      	ldr	r2, [pc, #44]	; (8004968 <BSP_I2C5_DeInit+0x40>)
 800493a:	6013      	str	r3, [r2, #0]

  if (I2c5InitCounter == 0U)
 800493c:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <BSP_I2C5_DeInit+0x40>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10b      	bne.n	800495c <BSP_I2C5_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C5_MspDeInit(&hbus_i2c5);
 8004944:	4809      	ldr	r0, [pc, #36]	; (800496c <BSP_I2C5_DeInit+0x44>)
 8004946:	f000 fbbd 	bl	80050c4 <I2C5_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c5) != HAL_OK)
 800494a:	4808      	ldr	r0, [pc, #32]	; (800496c <BSP_I2C5_DeInit+0x44>)
 800494c:	f005 fc28 	bl	800a1a0 <HAL_I2C_DeInit>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d002      	beq.n	800495c <BSP_I2C5_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8004956:	f06f 0307 	mvn.w	r3, #7
 800495a:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800495c:	687b      	ldr	r3, [r7, #4]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	20196658 	.word	0x20196658
 800496c:	20197060 	.word	0x20197060

08004970 <MX_I2C5_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C5_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800497a:	2300      	movs	r3, #0
 800497c:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f005 fb67 	bl	800a082 <HAL_I2C_Init>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d002      	beq.n	80049c0 <MX_I2C5_Init+0x50>
  {
    status = HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	73fb      	strb	r3, [r7, #15]
 80049be:	e014      	b.n	80049ea <MX_I2C5_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 80049c0:	2300      	movs	r3, #0
 80049c2:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 80049c4:	68b9      	ldr	r1, [r7, #8]
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f006 faa6 	bl	800af18 <HAL_I2CEx_ConfigAnalogFilter>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d002      	beq.n	80049d8 <MX_I2C5_Init+0x68>
    {
      status = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	73fb      	strb	r3, [r7, #15]
 80049d6:	e008      	b.n	80049ea <MX_I2C5_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80049d8:	2100      	movs	r1, #0
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f006 fae7 	bl	800afae <HAL_I2CEx_ConfigDigitalFilter>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <MX_I2C5_Init+0x7a>
      {
        status = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 80049ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <BSP_I2C5_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C5_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b088      	sub	sp, #32
 80049f8:	af02      	add	r7, sp, #8
 80049fa:	60ba      	str	r2, [r7, #8]
 80049fc:	461a      	mov	r2, r3
 80049fe:	4603      	mov	r3, r0
 8004a00:	81fb      	strh	r3, [r7, #14]
 8004a02:	460b      	mov	r3, r1
 8004a04:	81bb      	strh	r3, [r7, #12]
 8004a06:	4613      	mov	r3, r2
 8004a08:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C5_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8004a0a:	89b9      	ldrh	r1, [r7, #12]
 8004a0c:	89f8      	ldrh	r0, [r7, #14]
 8004a0e:	88fb      	ldrh	r3, [r7, #6]
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f000 fb77 	bl	8005108 <I2C5_WriteReg>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d102      	bne.n	8004a26 <BSP_I2C5_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8004a20:	2300      	movs	r3, #0
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	e00c      	b.n	8004a40 <BSP_I2C5_WriteReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c5) == HAL_I2C_ERROR_AF)
 8004a26:	4809      	ldr	r0, [pc, #36]	; (8004a4c <BSP_I2C5_WriteReg+0x58>)
 8004a28:	f005 ff30 	bl	800a88c <HAL_I2C_GetError>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b04      	cmp	r3, #4
 8004a30:	d103      	bne.n	8004a3a <BSP_I2C5_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8004a32:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8004a36:	617b      	str	r3, [r7, #20]
 8004a38:	e002      	b.n	8004a40 <BSP_I2C5_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8004a3a:	f06f 0303 	mvn.w	r3, #3
 8004a3e:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8004a40:	697b      	ldr	r3, [r7, #20]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3718      	adds	r7, #24
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20197060 	.word	0x20197060

08004a50 <BSP_I2C5_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C5_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b088      	sub	sp, #32
 8004a54:	af02      	add	r7, sp, #8
 8004a56:	60ba      	str	r2, [r7, #8]
 8004a58:	461a      	mov	r2, r3
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	81fb      	strh	r3, [r7, #14]
 8004a5e:	460b      	mov	r3, r1
 8004a60:	81bb      	strh	r3, [r7, #12]
 8004a62:	4613      	mov	r3, r2
 8004a64:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C5_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8004a66:	89b9      	ldrh	r1, [r7, #12]
 8004a68:	89f8      	ldrh	r0, [r7, #14]
 8004a6a:	88fb      	ldrh	r3, [r7, #6]
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f000 fb6f 	bl	8005154 <I2C5_ReadReg>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d102      	bne.n	8004a82 <BSP_I2C5_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	617b      	str	r3, [r7, #20]
 8004a80:	e00c      	b.n	8004a9c <BSP_I2C5_ReadReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c5) == HAL_I2C_ERROR_AF)
 8004a82:	4809      	ldr	r0, [pc, #36]	; (8004aa8 <BSP_I2C5_ReadReg+0x58>)
 8004a84:	f005 ff02 	bl	800a88c <HAL_I2C_GetError>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	d103      	bne.n	8004a96 <BSP_I2C5_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8004a8e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8004a92:	617b      	str	r3, [r7, #20]
 8004a94:	e002      	b.n	8004a9c <BSP_I2C5_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8004a96:	f06f 0303 	mvn.w	r3, #3
 8004a9a:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8004a9c:	697b      	ldr	r3, [r7, #20]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20197060 	.word	0x20197060

08004aac <BSP_I2C5_Recv>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C5_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	6039      	str	r1, [r7, #0]
 8004ab6:	80fb      	strh	r3, [r7, #6]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	80bb      	strh	r3, [r7, #4]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C5_Recv(DevAddr, pData, Length) == 0)
 8004abc:	88ba      	ldrh	r2, [r7, #4]
 8004abe:	88fb      	ldrh	r3, [r7, #6]
 8004ac0:	6839      	ldr	r1, [r7, #0]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 fb6c 	bl	80051a0 <I2C5_Recv>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d102      	bne.n	8004ad4 <BSP_I2C5_Recv+0x28>
  {
    ret = BSP_ERROR_NONE;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60fb      	str	r3, [r7, #12]
 8004ad2:	e00c      	b.n	8004aee <BSP_I2C5_Recv+0x42>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c5) == HAL_I2C_ERROR_AF)
 8004ad4:	4808      	ldr	r0, [pc, #32]	; (8004af8 <BSP_I2C5_Recv+0x4c>)
 8004ad6:	f005 fed9 	bl	800a88c <HAL_I2C_GetError>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b04      	cmp	r3, #4
 8004ade:	d103      	bne.n	8004ae8 <BSP_I2C5_Recv+0x3c>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8004ae0:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	e002      	b.n	8004aee <BSP_I2C5_Recv+0x42>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8004ae8:	f06f 0303 	mvn.w	r3, #3
 8004aec:	60fb      	str	r3, [r7, #12]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8004aee:	68fb      	ldr	r3, [r7, #12]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	20197060 	.word	0x20197060

08004afc <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8004b00:	f002 fc1e 	bl	8007340 <HAL_GetTick>
 8004b04:	4603      	mov	r3, r0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	bd80      	pop	{r7, pc}
	...

08004b0c <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8004b16:	2300      	movs	r3, #0
 8004b18:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if ((clock_src_freq != 0U) && (i2c_freq != 0U))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d06b      	beq.n	8004bf8 <I2C_GetTiming+0xec>
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d068      	beq.n	8004bf8 <I2C_GetTiming+0xec>
  {
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8004b26:	2300      	movs	r3, #0
 8004b28:	613b      	str	r3, [r7, #16]
 8004b2a:	e060      	b.n	8004bee <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8004b2c:	4a35      	ldr	r2, [pc, #212]	; (8004c04 <I2C_GetTiming+0xf8>)
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	212c      	movs	r1, #44	; 0x2c
 8004b32:	fb01 f303 	mul.w	r3, r1, r3
 8004b36:	4413      	add	r3, r2
 8004b38:	3304      	adds	r3, #4
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d352      	bcc.n	8004be8 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8004b42:	4a30      	ldr	r2, [pc, #192]	; (8004c04 <I2C_GetTiming+0xf8>)
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	212c      	movs	r1, #44	; 0x2c
 8004b48:	fb01 f303 	mul.w	r3, r1, r3
 8004b4c:	4413      	add	r3, r2
 8004b4e:	3308      	adds	r3, #8
 8004b50:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d847      	bhi.n	8004be8 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8004b58:	6939      	ldr	r1, [r7, #16]
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f856 	bl	8004c0c <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8004b60:	6939      	ldr	r1, [r7, #16]
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f940 	bl	8004de8 <I2C_Compute_SCLL_SCLH>
 8004b68:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2b7f      	cmp	r3, #127	; 0x7f
 8004b6e:	d842      	bhi.n	8004bf6 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8004b70:	4925      	ldr	r1, [pc, #148]	; (8004c08 <I2C_GetTiming+0xfc>)
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	4613      	mov	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	440b      	add	r3, r1
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 8004b82:	4821      	ldr	r0, [pc, #132]	; (8004c08 <I2C_GetTiming+0xfc>)
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	4613      	mov	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4403      	add	r3, r0
 8004b90:	3304      	adds	r3, #4
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	051b      	lsls	r3, r3, #20
 8004b96:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8004b9a:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 8004b9c:	481a      	ldr	r0, [pc, #104]	; (8004c08 <I2C_GetTiming+0xfc>)
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4403      	add	r3, r0
 8004baa:	3308      	adds	r3, #8
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	041b      	lsls	r3, r3, #16
 8004bb0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 8004bb4:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) | \
 8004bb6:	4814      	ldr	r0, [pc, #80]	; (8004c08 <I2C_GetTiming+0xfc>)
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4403      	add	r3, r0
 8004bc4:	330c      	adds	r3, #12
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	021b      	lsls	r3, r3, #8
 8004bca:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 8004bcc:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8004bce:	480e      	ldr	r0, [pc, #56]	; (8004c08 <I2C_GetTiming+0xfc>)
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4403      	add	r3, r0
 8004bdc:	3310      	adds	r3, #16
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8004be2:	430b      	orrs	r3, r1
 8004be4:	617b      	str	r3, [r7, #20]
        }
        break;
 8004be6:	e006      	b.n	8004bf6 <I2C_GetTiming+0xea>
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	3301      	adds	r3, #1
 8004bec:	613b      	str	r3, [r7, #16]
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d99b      	bls.n	8004b2c <I2C_GetTiming+0x20>
 8004bf4:	e000      	b.n	8004bf8 <I2C_GetTiming+0xec>
        break;
 8004bf6:	bf00      	nop
      }
    }
  }

  return ret;
 8004bf8:	697b      	ldr	r3, [r7, #20]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3718      	adds	r7, #24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	0802a718 	.word	0x0802a718
 8004c08:	2019665c 	.word	0x2019665c

08004c0c <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b08f      	sub	sp, #60	; 0x3c
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8004c16:	2310      	movs	r3, #16
 8004c18:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t presc;
  uint32_t scldel;
  uint32_t sdadel;
  uint32_t tafdel_min;
  uint32_t tafdel_max;
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	085a      	lsrs	r2, r3, #1
 8004c1e:	4b6e      	ldr	r3, [pc, #440]	; (8004dd8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8004c20:	4413      	add	r3, r2
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c28:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8004c2a:	2332      	movs	r3, #50	; 0x32
 8004c2c:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8004c2e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004c32:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8004c34:	4a69      	ldr	r2, [pc, #420]	; (8004ddc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	212c      	movs	r1, #44	; 0x2c
 8004c3a:	fb01 f303 	mul.w	r3, r1, r3
 8004c3e:	4413      	add	r3, r2
 8004c40:	3324      	adds	r3, #36	; 0x24
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4618      	mov	r0, r3
 8004c46:	4a65      	ldr	r2, [pc, #404]	; (8004ddc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	212c      	movs	r1, #44	; 0x2c
 8004c4c:	fb01 f303 	mul.w	r3, r1, r3
 8004c50:	4413      	add	r3, r2
 8004c52:	330c      	adds	r3, #12
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	18c2      	adds	r2, r0, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8004c58:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8004c5a:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8004c5c:	495f      	ldr	r1, [pc, #380]	; (8004ddc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	202c      	movs	r0, #44	; 0x2c
 8004c62:	fb00 f303 	mul.w	r3, r0, r3
 8004c66:	440b      	add	r3, r1
 8004c68:	3328      	adds	r3, #40	; 0x28
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3303      	adds	r3, #3
 8004c6e:	69f9      	ldr	r1, [r7, #28]
 8004c70:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8004c78:	4a58      	ldr	r2, [pc, #352]	; (8004ddc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	212c      	movs	r1, #44	; 0x2c
 8004c7e:	fb01 f303 	mul.w	r3, r1, r3
 8004c82:	4413      	add	r3, r2
 8004c84:	3310      	adds	r3, #16
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	4a54      	ldr	r2, [pc, #336]	; (8004ddc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	212c      	movs	r1, #44	; 0x2c
 8004c90:	fb01 f303 	mul.w	r3, r1, r3
 8004c94:	4413      	add	r3, r2
 8004c96:	3320      	adds	r3, #32
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	1ac2      	subs	r2, r0, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8004c9c:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8004c9e:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8004ca0:	494e      	ldr	r1, [pc, #312]	; (8004ddc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	202c      	movs	r0, #44	; 0x2c
 8004ca6:	fb00 f303 	mul.w	r3, r0, r3
 8004caa:	440b      	add	r3, r1
 8004cac:	3328      	adds	r3, #40	; 0x28
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	3304      	adds	r3, #4
 8004cb2:	69f9      	ldr	r1, [r7, #28]
 8004cb4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8004cbc:	4a47      	ldr	r2, [pc, #284]	; (8004ddc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	212c      	movs	r1, #44	; 0x2c
 8004cc2:	fb01 f303 	mul.w	r3, r1, r3
 8004cc6:	4413      	add	r3, r2
 8004cc8:	3320      	adds	r3, #32
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	4a43      	ldr	r2, [pc, #268]	; (8004ddc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	212c      	movs	r1, #44	; 0x2c
 8004cd4:	fb01 f303 	mul.w	r3, r1, r3
 8004cd8:	4413      	add	r3, r2
 8004cda:	3314      	adds	r3, #20
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4403      	add	r3, r0
 8004ce0:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8004ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	dc01      	bgt.n	8004cec <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8004cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	dc01      	bgt.n	8004cf6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cfa:	e062      	b.n	8004dc2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8004d00:	e059      	b.n	8004db6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d04:	3301      	adds	r3, #1
 8004d06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d08:	3201      	adds	r2, #1
 8004d0a:	fb03 f202 	mul.w	r2, r3, r2
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	fb02 f303 	mul.w	r3, r2, r3
 8004d14:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d348      	bcc.n	8004db0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8004d1e:	2300      	movs	r3, #0
 8004d20:	623b      	str	r3, [r7, #32]
 8004d22:	e042      	b.n	8004daa <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8004d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d26:	3301      	adds	r3, #1
 8004d28:	6a3a      	ldr	r2, [r7, #32]
 8004d2a:	fb03 f202 	mul.w	r2, r3, r2
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	fb02 f303 	mul.w	r3, r2, r3
 8004d34:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8004d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d332      	bcc.n	8004da4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8004d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d82e      	bhi.n	8004da4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if (presc != prev_presc)
 8004d46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d02a      	beq.n	8004da4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8004d4e:	4b24      	ldr	r3, [pc, #144]	; (8004de0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	4924      	ldr	r1, [pc, #144]	; (8004de4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8004d54:	4613      	mov	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	440b      	add	r3, r1
 8004d5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d60:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8004d62:	4b1f      	ldr	r3, [pc, #124]	; (8004de0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	491f      	ldr	r1, [pc, #124]	; (8004de4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8004d68:	4613      	mov	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	440b      	add	r3, r1
 8004d72:	3304      	adds	r3, #4
 8004d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d76:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8004d78:	4b19      	ldr	r3, [pc, #100]	; (8004de0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	4919      	ldr	r1, [pc, #100]	; (8004de4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8004d7e:	4613      	mov	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	440b      	add	r3, r1
 8004d88:	3308      	adds	r3, #8
 8004d8a:	6a3a      	ldr	r2, [r7, #32]
 8004d8c:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8004d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d90:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8004d92:	4b13      	ldr	r3, [pc, #76]	; (8004de0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	3301      	adds	r3, #1
 8004d98:	4a11      	ldr	r2, [pc, #68]	; (8004de0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004d9a:	6013      	str	r3, [r2, #0]

              if (I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8004d9c:	4b10      	ldr	r3, [pc, #64]	; (8004de0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b7f      	cmp	r3, #127	; 0x7f
 8004da2:	d812      	bhi.n	8004dca <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	3301      	adds	r3, #1
 8004da8:	623b      	str	r3, [r7, #32]
 8004daa:	6a3b      	ldr	r3, [r7, #32]
 8004dac:	2b0f      	cmp	r3, #15
 8004dae:	d9b9      	bls.n	8004d24 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	3301      	adds	r3, #1
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	2b0f      	cmp	r3, #15
 8004dba:	d9a2      	bls.n	8004d02 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8004dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc4:	2b0f      	cmp	r3, #15
 8004dc6:	d999      	bls.n	8004cfc <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8004dc8:	e000      	b.n	8004dcc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8004dca:	bf00      	nop
          }
        }
      }
    }
  }
}
 8004dcc:	373c      	adds	r7, #60	; 0x3c
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	3b9aca00 	.word	0x3b9aca00
 8004ddc:	0802a718 	.word	0x0802a718
 8004de0:	2019705c 	.word	0x2019705c
 8004de4:	2019665c 	.word	0x2019665c

08004de8 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b093      	sub	sp, #76	; 0x4c
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0xFFFFFFFFU;
 8004df2:	f04f 33ff 	mov.w	r3, #4294967295
 8004df6:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t clk_max;
  uint32_t scll;
  uint32_t sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	085a      	lsrs	r2, r3, #1
 8004dfc:	4b7a      	ldr	r3, [pc, #488]	; (8004fe8 <I2C_Compute_SCLL_SCLH+0x200>)
 8004dfe:	4413      	add	r3, r2
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U)) / I2C_Charac[I2C_speed].freq;
 8004e08:	4a78      	ldr	r2, [pc, #480]	; (8004fec <I2C_Compute_SCLL_SCLH+0x204>)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	212c      	movs	r1, #44	; 0x2c
 8004e0e:	fb01 f303 	mul.w	r3, r1, r3
 8004e12:	4413      	add	r3, r2
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	085a      	lsrs	r2, r3, #1
 8004e18:	4b73      	ldr	r3, [pc, #460]	; (8004fe8 <I2C_Compute_SCLL_SCLH+0x200>)
 8004e1a:	4413      	add	r3, r2
 8004e1c:	4973      	ldr	r1, [pc, #460]	; (8004fec <I2C_Compute_SCLL_SCLH+0x204>)
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	202c      	movs	r0, #44	; 0x2c
 8004e22:	fb00 f202 	mul.w	r2, r0, r2
 8004e26:	440a      	add	r2, r1
 8004e28:	6812      	ldr	r2, [r2, #0]
 8004e2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e2e:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8004e30:	2332      	movs	r3, #50	; 0x32
 8004e32:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8004e34:	4a6d      	ldr	r2, [pc, #436]	; (8004fec <I2C_Compute_SCLL_SCLH+0x204>)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	212c      	movs	r1, #44	; 0x2c
 8004e3a:	fb01 f303 	mul.w	r3, r1, r3
 8004e3e:	4413      	add	r3, r2
 8004e40:	3328      	adds	r3, #40	; 0x28
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e46:	fb02 f303 	mul.w	r3, r2, r3
 8004e4a:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8004e4c:	4a67      	ldr	r2, [pc, #412]	; (8004fec <I2C_Compute_SCLL_SCLH+0x204>)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	212c      	movs	r1, #44	; 0x2c
 8004e52:	fb01 f303 	mul.w	r3, r1, r3
 8004e56:	4413      	add	r3, r2
 8004e58:	3304      	adds	r3, #4
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a62      	ldr	r2, [pc, #392]	; (8004fe8 <I2C_Compute_SCLL_SCLH+0x200>)
 8004e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e62:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8004e64:	4a61      	ldr	r2, [pc, #388]	; (8004fec <I2C_Compute_SCLL_SCLH+0x204>)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	212c      	movs	r1, #44	; 0x2c
 8004e6a:	fb01 f303 	mul.w	r3, r1, r3
 8004e6e:	4413      	add	r3, r2
 8004e70:	3308      	adds	r3, #8
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a5c      	ldr	r2, [pc, #368]	; (8004fe8 <I2C_Compute_SCLL_SCLH+0x200>)
 8004e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7a:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8004e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7e:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8004e80:	2300      	movs	r3, #0
 8004e82:	637b      	str	r3, [r7, #52]	; 0x34
 8004e84:	e0a3      	b.n	8004fce <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8004e86:	495a      	ldr	r1, [pc, #360]	; (8004ff0 <I2C_Compute_SCLL_SCLH+0x208>)
 8004e88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	440b      	add	r3, r1
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	1c5a      	adds	r2, r3, #1
 8004e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9a:	fb02 f303 	mul.w	r3, r2, r3
 8004e9e:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ea4:	e08c      	b.n	8004fc0 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8004ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	441a      	add	r2, r3
 8004eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eae:	3301      	adds	r3, #1
 8004eb0:	6979      	ldr	r1, [r7, #20]
 8004eb2:	fb03 f101 	mul.w	r1, r3, r1
 8004eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb8:	005b      	lsls	r3, r3, #1
 8004eba:	440b      	add	r3, r1
 8004ebc:	4413      	add	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8004ec0:	4a4a      	ldr	r2, [pc, #296]	; (8004fec <I2C_Compute_SCLL_SCLH+0x204>)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	212c      	movs	r1, #44	; 0x2c
 8004ec6:	fb01 f303 	mul.w	r3, r1, r3
 8004eca:	4413      	add	r3, r2
 8004ecc:	3318      	adds	r3, #24
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d971      	bls.n	8004fba <I2C_Compute_SCLL_SCLH+0x1d2>
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	1ad2      	subs	r2, r2, r3
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	089b      	lsrs	r3, r3, #2
 8004ee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d268      	bcs.n	8004fba <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8004ee8:	2300      	movs	r3, #0
 8004eea:	63bb      	str	r3, [r7, #56]	; 0x38
 8004eec:	e062      	b.n	8004fb4 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8004eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	441a      	add	r2, r3
 8004ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	6979      	ldr	r1, [r7, #20]
 8004efa:	fb03 f101 	mul.w	r1, r3, r1
 8004efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	440b      	add	r3, r1
 8004f04:	4413      	add	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	441a      	add	r2, r3
 8004f0e:	4937      	ldr	r1, [pc, #220]	; (8004fec <I2C_Compute_SCLL_SCLH+0x204>)
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	202c      	movs	r0, #44	; 0x2c
 8004f14:	fb00 f303 	mul.w	r3, r0, r3
 8004f18:	440b      	add	r3, r1
 8004f1a:	3320      	adds	r3, #32
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	441a      	add	r2, r3
 8004f20:	4932      	ldr	r1, [pc, #200]	; (8004fec <I2C_Compute_SCLL_SCLH+0x204>)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	202c      	movs	r0, #44	; 0x2c
 8004f26:	fb00 f303 	mul.w	r3, r0, r3
 8004f2a:	440b      	add	r3, r1
 8004f2c:	3324      	adds	r3, #36	; 0x24
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4413      	add	r3, r2
 8004f32:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && \
 8004f34:	68ba      	ldr	r2, [r7, #8]
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d338      	bcc.n	8004fae <I2C_Compute_SCLL_SCLH+0x1c6>
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d834      	bhi.n	8004fae <I2C_Compute_SCLL_SCLH+0x1c6>
 8004f44:	4a29      	ldr	r2, [pc, #164]	; (8004fec <I2C_Compute_SCLL_SCLH+0x204>)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	212c      	movs	r1, #44	; 0x2c
 8004f4a:	fb01 f303 	mul.w	r3, r1, r3
 8004f4e:	4413      	add	r3, r2
 8004f50:	331c      	adds	r3, #28
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d329      	bcc.n	8004fae <I2C_Compute_SCLL_SCLH+0x1c6>
 8004f5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d225      	bcs.n	8004fae <I2C_Compute_SCLL_SCLH+0x1c6>
              (ti2cclk < tscl_h))
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	da02      	bge.n	8004f76 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8004f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f72:	425b      	negs	r3, r3
 8004f74:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8004f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d917      	bls.n	8004fae <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8004f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f80:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8004f82:	491b      	ldr	r1, [pc, #108]	; (8004ff0 <I2C_Compute_SCLL_SCLH+0x208>)
 8004f84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f86:	4613      	mov	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	3310      	adds	r3, #16
 8004f92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f94:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8004f96:	4916      	ldr	r1, [pc, #88]	; (8004ff0 <I2C_Compute_SCLL_SCLH+0x208>)
 8004f98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	4413      	add	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	440b      	add	r3, r1
 8004fa4:	330c      	adds	r3, #12
 8004fa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fa8:	601a      	str	r2, [r3, #0]
              ret = count;
 8004faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fac:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8004fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb6:	2bff      	cmp	r3, #255	; 0xff
 8004fb8:	d999      	bls.n	8004eee <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8004fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fc2:	2bff      	cmp	r3, #255	; 0xff
 8004fc4:	f67f af6f 	bls.w	8004ea6 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8004fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fca:	3301      	adds	r3, #1
 8004fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8004fce:	4b09      	ldr	r3, [pc, #36]	; (8004ff4 <I2C_Compute_SCLL_SCLH+0x20c>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	f4ff af56 	bcc.w	8004e86 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8004fda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	374c      	adds	r7, #76	; 0x4c
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	3b9aca00 	.word	0x3b9aca00
 8004fec:	0802a718 	.word	0x0802a718
 8004ff0:	2019665c 	.word	0x2019665c
 8004ff4:	2019705c 	.word	0x2019705c

08004ff8 <I2C5_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C5_MspInit(I2C_HandleTypeDef *hI2c)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b08a      	sub	sp, #40	; 0x28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C5_SCL_GPIO_CLK_ENABLE();
 8005000:	4b2e      	ldr	r3, [pc, #184]	; (80050bc <I2C5_MspInit+0xc4>)
 8005002:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005006:	4a2d      	ldr	r2, [pc, #180]	; (80050bc <I2C5_MspInit+0xc4>)
 8005008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800500c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005010:	4b2a      	ldr	r3, [pc, #168]	; (80050bc <I2C5_MspInit+0xc4>)
 8005012:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800501a:	613b      	str	r3, [r7, #16]
 800501c:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C5_SDA_GPIO_CLK_ENABLE();
 800501e:	4b27      	ldr	r3, [pc, #156]	; (80050bc <I2C5_MspInit+0xc4>)
 8005020:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005024:	4a25      	ldr	r2, [pc, #148]	; (80050bc <I2C5_MspInit+0xc4>)
 8005026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800502a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800502e:	4b23      	ldr	r3, [pc, #140]	; (80050bc <I2C5_MspInit+0xc4>)
 8005030:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005038:	60fb      	str	r3, [r7, #12]
 800503a:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C5_SCL_PIN;
 800503c:	2320      	movs	r3, #32
 800503e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 8005040:	2312      	movs	r3, #18
 8005042:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 8005044:	2301      	movs	r3, #1
 8005046:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 8005048:	2302      	movs	r3, #2
 800504a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C5_SCL_AF;
 800504c:	2302      	movs	r3, #2
 800504e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C5_SCL_GPIO_PORT, &gpio_init_structure);
 8005050:	f107 0314 	add.w	r3, r7, #20
 8005054:	4619      	mov	r1, r3
 8005056:	481a      	ldr	r0, [pc, #104]	; (80050c0 <I2C5_MspInit+0xc8>)
 8005058:	f004 fc02 	bl	8009860 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C5_SDA_PIN;
 800505c:	2310      	movs	r3, #16
 800505e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 8005060:	2312      	movs	r3, #18
 8005062:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 8005064:	2301      	movs	r3, #1
 8005066:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 8005068:	2302      	movs	r3, #2
 800506a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C5_SDA_AF;
 800506c:	2302      	movs	r3, #2
 800506e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C5_SDA_GPIO_PORT, &gpio_init_structure);
 8005070:	f107 0314 	add.w	r3, r7, #20
 8005074:	4619      	mov	r1, r3
 8005076:	4812      	ldr	r0, [pc, #72]	; (80050c0 <I2C5_MspInit+0xc8>)
 8005078:	f004 fbf2 	bl	8009860 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C5_CLK_ENABLE();
 800507c:	4b0f      	ldr	r3, [pc, #60]	; (80050bc <I2C5_MspInit+0xc4>)
 800507e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005082:	4a0e      	ldr	r2, [pc, #56]	; (80050bc <I2C5_MspInit+0xc4>)
 8005084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005088:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 800508c:	4b0b      	ldr	r3, [pc, #44]	; (80050bc <I2C5_MspInit+0xc4>)
 800508e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005096:	60bb      	str	r3, [r7, #8]
 8005098:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C5_FORCE_RESET();
 800509a:	4b08      	ldr	r3, [pc, #32]	; (80050bc <I2C5_MspInit+0xc4>)
 800509c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800509e:	4a07      	ldr	r2, [pc, #28]	; (80050bc <I2C5_MspInit+0xc4>)
 80050a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050a4:	6793      	str	r3, [r2, #120]	; 0x78

  /* Release the I2C peripheral clock reset */
  BUS_I2C5_RELEASE_RESET();
 80050a6:	4b05      	ldr	r3, [pc, #20]	; (80050bc <I2C5_MspInit+0xc4>)
 80050a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050aa:	4a04      	ldr	r2, [pc, #16]	; (80050bc <I2C5_MspInit+0xc4>)
 80050ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050b0:	6793      	str	r3, [r2, #120]	; 0x78
}
 80050b2:	bf00      	nop
 80050b4:	3728      	adds	r7, #40	; 0x28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	46020c00 	.word	0x46020c00
 80050c0:	42021c00 	.word	0x42021c00

080050c4 <I2C5_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C5_MspDeInit(I2C_HandleTypeDef *hI2c)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b088      	sub	sp, #32
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C5_SCL_PIN;
 80050cc:	2320      	movs	r3, #32
 80050ce:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C5_SCL_GPIO_PORT, gpio_init_structure.Pin);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	4619      	mov	r1, r3
 80050d4:	480a      	ldr	r0, [pc, #40]	; (8005100 <I2C5_MspDeInit+0x3c>)
 80050d6:	f004 fd9b 	bl	8009c10 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C5_SDA_PIN;
 80050da:	2310      	movs	r3, #16
 80050dc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C5_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	4619      	mov	r1, r3
 80050e2:	4807      	ldr	r0, [pc, #28]	; (8005100 <I2C5_MspDeInit+0x3c>)
 80050e4:	f004 fd94 	bl	8009c10 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C5_CLK_DISABLE();
 80050e8:	4b06      	ldr	r3, [pc, #24]	; (8005104 <I2C5_MspDeInit+0x40>)
 80050ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80050ee:	4a05      	ldr	r2, [pc, #20]	; (8005104 <I2C5_MspDeInit+0x40>)
 80050f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050f4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
}
 80050f8:	bf00      	nop
 80050fa:	3720      	adds	r7, #32
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	42021c00 	.word	0x42021c00
 8005104:	46020c00 	.word	0x46020c00

08005108 <I2C5_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C5_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b088      	sub	sp, #32
 800510c:	af04      	add	r7, sp, #16
 800510e:	607b      	str	r3, [r7, #4]
 8005110:	4603      	mov	r3, r0
 8005112:	81fb      	strh	r3, [r7, #14]
 8005114:	460b      	mov	r3, r1
 8005116:	81bb      	strh	r3, [r7, #12]
 8005118:	4613      	mov	r3, r2
 800511a:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Write(&hbus_i2c5, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 800511c:	8978      	ldrh	r0, [r7, #10]
 800511e:	89ba      	ldrh	r2, [r7, #12]
 8005120:	89f9      	ldrh	r1, [r7, #14]
 8005122:	f242 7310 	movw	r3, #10000	; 0x2710
 8005126:	9302      	str	r3, [sp, #8]
 8005128:	8b3b      	ldrh	r3, [r7, #24]
 800512a:	9301      	str	r3, [sp, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	4603      	mov	r3, r0
 8005132:	4807      	ldr	r0, [pc, #28]	; (8005150 <I2C5_WriteReg+0x48>)
 8005134:	f005 f96e 	bl	800a414 <HAL_I2C_Mem_Write>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <I2C5_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800513e:	2300      	movs	r3, #0
 8005140:	e001      	b.n	8005146 <I2C5_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8005142:	f06f 0307 	mvn.w	r3, #7
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	20197060 	.word	0x20197060

08005154 <I2C5_ReadReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C5_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b088      	sub	sp, #32
 8005158:	af04      	add	r7, sp, #16
 800515a:	607b      	str	r3, [r7, #4]
 800515c:	4603      	mov	r3, r0
 800515e:	81fb      	strh	r3, [r7, #14]
 8005160:	460b      	mov	r3, r1
 8005162:	81bb      	strh	r3, [r7, #12]
 8005164:	4613      	mov	r3, r2
 8005166:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c5, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 8005168:	8978      	ldrh	r0, [r7, #10]
 800516a:	89ba      	ldrh	r2, [r7, #12]
 800516c:	89f9      	ldrh	r1, [r7, #14]
 800516e:	f242 7310 	movw	r3, #10000	; 0x2710
 8005172:	9302      	str	r3, [sp, #8]
 8005174:	8b3b      	ldrh	r3, [r7, #24]
 8005176:	9301      	str	r3, [sp, #4]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	9300      	str	r3, [sp, #0]
 800517c:	4603      	mov	r3, r0
 800517e:	4807      	ldr	r0, [pc, #28]	; (800519c <I2C5_ReadReg+0x48>)
 8005180:	f005 fa5c 	bl	800a63c <HAL_I2C_Mem_Read>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <I2C5_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800518a:	2300      	movs	r3, #0
 800518c:	e001      	b.n	8005192 <I2C5_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800518e:	f06f 0307 	mvn.w	r3, #7
}
 8005192:	4618      	mov	r0, r3
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	20197060 	.word	0x20197060

080051a0 <I2C5_Recv>:
  * @param  pData      The target register value to be received
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C5_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af02      	add	r7, sp, #8
 80051a6:	4603      	mov	r3, r0
 80051a8:	6039      	str	r1, [r7, #0]
 80051aa:	80fb      	strh	r3, [r7, #6]
 80051ac:	4613      	mov	r3, r2
 80051ae:	80bb      	strh	r3, [r7, #4]
  if (HAL_I2C_Master_Receive(&hbus_i2c5, DevAddr, pData, Length, 10000) == HAL_OK)
 80051b0:	88bb      	ldrh	r3, [r7, #4]
 80051b2:	88f9      	ldrh	r1, [r7, #6]
 80051b4:	f242 7210 	movw	r2, #10000	; 0x2710
 80051b8:	9200      	str	r2, [sp, #0]
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	4806      	ldr	r0, [pc, #24]	; (80051d8 <I2C5_Recv+0x38>)
 80051be:	f005 f833 	bl	800a228 <HAL_I2C_Master_Receive>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d101      	bne.n	80051cc <I2C5_Recv+0x2c>
  {
    return BSP_ERROR_NONE;
 80051c8:	2300      	movs	r3, #0
 80051ca:	e001      	b.n	80051d0 <I2C5_Recv+0x30>
  }

  return BSP_ERROR_BUS_FAILURE;
 80051cc:	f06f 0307 	mvn.w	r3, #7
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	20197060 	.word	0x20197060

080051dc <BSP_HSPI_RAM_Init>:
  * @param  Instance   HSPI Instance
  * @param  Init       HSPI Init structure
  * @retval BSP status
  */
int32_t BSP_HSPI_RAM_Init(uint32_t Instance, BSP_HSPI_RAM_Cfg_t *Init)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b08a      	sub	sp, #40	; 0x28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  MX_HSPI_InitTypeDef hspi_init;

  /* Check if the instance is supported */
  if (Instance >= HSPI_RAM_INSTANCES_NUMBER)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d003      	beq.n	80051f4 <BSP_HSPI_RAM_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80051ec:	f06f 0301 	mvn.w	r3, #1
 80051f0:	627b      	str	r3, [r7, #36]	; 0x24
 80051f2:	e066      	b.n	80052c2 <BSP_HSPI_RAM_Init+0xe6>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Hspi_Ram_Ctx[Instance].IsInitialized == HSPI_ACCESS_NONE)
 80051f4:	4935      	ldr	r1, [pc, #212]	; (80052cc <BSP_HSPI_RAM_Init+0xf0>)
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	4613      	mov	r3, r2
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	1a9b      	subs	r3, r3, r2
 80051fe:	440b      	add	r3, r1
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d15b      	bne.n	80052be <BSP_HSPI_RAM_Init+0xe2>
    {
#if (USE_HAL_XSPI_REGISTER_CALLBACKS == 0)
      /* Msp HSPI initialization */
      HSPI_RAM_MspInit(&hhspi_ram[Instance]);
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	4613      	mov	r3, r2
 800520a:	005b      	lsls	r3, r3, #1
 800520c:	4413      	add	r3, r2
 800520e:	015b      	lsls	r3, r3, #5
 8005210:	4a2f      	ldr	r2, [pc, #188]	; (80052d0 <BSP_HSPI_RAM_Init+0xf4>)
 8005212:	4413      	add	r3, r2
 8005214:	4618      	mov	r0, r3
 8005216:	f000 fbab 	bl	8005970 <HSPI_RAM_MspInit>
        }
      }
#endif /* USE_HAL_XSPI_REGISTER_CALLBACKS */

      /* Fill config structure */
      hspi_init.ClockPrescaler = 0; /* HSPI clock = 160MHz / ClockPrescaler = 160MHz */
 800521a:	2300      	movs	r3, #0
 800521c:	60fb      	str	r3, [r7, #12]
 800521e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005222:	61fb      	str	r3, [r7, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	fa93 f3a3 	rbit	r3, r3
 800522a:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	623b      	str	r3, [r7, #32]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005230:	6a3b      	ldr	r3, [r7, #32]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <BSP_HSPI_RAM_Init+0x5e>
  {
    return 32U;
 8005236:	2320      	movs	r3, #32
 8005238:	e003      	b.n	8005242 <BSP_HSPI_RAM_Init+0x66>
  }
  return __builtin_clz(value);
 800523a:	6a3b      	ldr	r3, [r7, #32]
 800523c:	fab3 f383 	clz	r3, r3
 8005240:	b2db      	uxtb	r3, r3
      hspi_init.MemorySize     = (uint32_t)POSITION_VAL(APS512XX_RAM_SIZE);
 8005242:	60bb      	str	r3, [r7, #8]
      hspi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8005244:	2300      	movs	r3, #0
 8005246:	613b      	str	r3, [r7, #16]

      /* STM32 HSPI interface initialization */
      if (MX_HSPI_RAM_Init(&hhspi_ram[Instance], &hspi_init) != HAL_OK)
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	4613      	mov	r3, r2
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	4413      	add	r3, r2
 8005250:	015b      	lsls	r3, r3, #5
 8005252:	4a1f      	ldr	r2, [pc, #124]	; (80052d0 <BSP_HSPI_RAM_Init+0xf4>)
 8005254:	4413      	add	r3, r2
 8005256:	f107 0208 	add.w	r2, r7, #8
 800525a:	4611      	mov	r1, r2
 800525c:	4618      	mov	r0, r3
 800525e:	f000 f867 	bl	8005330 <MX_HSPI_RAM_Init>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d003      	beq.n	8005270 <BSP_HSPI_RAM_Init+0x94>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8005268:	f06f 0303 	mvn.w	r3, #3
 800526c:	627b      	str	r3, [r7, #36]	; 0x24
 800526e:	e028      	b.n	80052c2 <BSP_HSPI_RAM_Init+0xe6>
      }
      /* Reset the memory */
      else if (APS512XX_Reset(&hhspi_ram[Instance]) != 0)/*APS512XX_OK*/
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	4613      	mov	r3, r2
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	4413      	add	r3, r2
 8005278:	015b      	lsls	r3, r3, #5
 800527a:	4a15      	ldr	r2, [pc, #84]	; (80052d0 <BSP_HSPI_RAM_Init+0xf4>)
 800527c:	4413      	add	r3, r2
 800527e:	4618      	mov	r0, r3
 8005280:	f7fe fc19 	bl	8003ab6 <APS512XX_Reset>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <BSP_HSPI_RAM_Init+0xb6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800528a:	f06f 0304 	mvn.w	r3, #4
 800528e:	627b      	str	r3, [r7, #36]	; 0x24
 8005290:	e017      	b.n	80052c2 <BSP_HSPI_RAM_Init+0xe6>
      }
      /* Configure the memory */
      else if (BSP_HSPI_RAM_Config16BitsOctalRAM(Instance, Init) != BSP_ERROR_NONE)
 8005292:	6839      	ldr	r1, [r7, #0]
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f957 	bl	8005548 <BSP_HSPI_RAM_Config16BitsOctalRAM>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d003      	beq.n	80052a8 <BSP_HSPI_RAM_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80052a0:	f06f 0304 	mvn.w	r3, #4
 80052a4:	627b      	str	r3, [r7, #36]	; 0x24
 80052a6:	e00c      	b.n	80052c2 <BSP_HSPI_RAM_Init+0xe6>
      }
      else
      {
        Hspi_Ram_Ctx[Instance].IsInitialized = HSPI_ACCESS_INDIRECT;
 80052a8:	4908      	ldr	r1, [pc, #32]	; (80052cc <BSP_HSPI_RAM_Init+0xf0>)
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	4613      	mov	r3, r2
 80052ae:	00db      	lsls	r3, r3, #3
 80052b0:	1a9b      	subs	r3, r3, r2
 80052b2:	440b      	add	r3, r1
 80052b4:	2201      	movs	r2, #1
 80052b6:	701a      	strb	r2, [r3, #0]
        ret = BSP_ERROR_NONE;
 80052b8:	2300      	movs	r3, #0
 80052ba:	627b      	str	r3, [r7, #36]	; 0x24
 80052bc:	e001      	b.n	80052c2 <BSP_HSPI_RAM_Init+0xe6>
      }
    }
    else
    {
      ret = BSP_ERROR_NONE;
 80052be:	2300      	movs	r3, #0
 80052c0:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  /* Return BSP status */
  return ret;
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3728      	adds	r7, #40	; 0x28
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	20000040 	.word	0x20000040
 80052d0:	201970b4 	.word	0x201970b4

080052d4 <Tuning_HSPI_Write>:
  * @brief  Tuning the HSPI write.
  * @param  hhspi          HSPI handle
  * @retval BSP status
  */
static int32_t Tuning_HSPI_Write(XSPI_HandleTypeDef *hhspi)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b088      	sub	sp, #32
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80052dc:	2300      	movs	r3, #0
 80052de:	61fb      	str	r3, [r7, #28]
  XSPI_HSCalTypeDef sCfg;

  hhspi->Instance = HSPI1;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a12      	ldr	r2, [pc, #72]	; (800532c <Tuning_HSPI_Write+0x58>)
 80052e4:	601a      	str	r2, [r3, #0]
  hhspi->State    = HAL_XSPI_STATE_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2202      	movs	r2, #2
 80052ea:	655a      	str	r2, [r3, #84]	; 0x54

  sCfg.DelayValueType        = HAL_XSPI_CAL_DATA_OUTPUT_DELAY;
 80052ec:	2302      	movs	r3, #2
 80052ee:	60fb      	str	r3, [r7, #12]
  sCfg.FineCalibrationUnit   = 0x11;
 80052f0:	2311      	movs	r3, #17
 80052f2:	613b      	str	r3, [r7, #16]
  sCfg.CoarseCalibrationUnit = 0x05;
 80052f4:	2305      	movs	r3, #5
 80052f6:	617b      	str	r3, [r7, #20]
  sCfg.MaxCalibration        = HAL_XSPI_MAXCAL_REACHED;
 80052f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80052fc:	61bb      	str	r3, [r7, #24]
  if (HAL_XSPI_SetDelayValue(hhspi, &sCfg) != HAL_OK)
 80052fe:	f107 030c 	add.w	r3, r7, #12
 8005302:	4619      	mov	r1, r3
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f00d fa47 	bl	8012798 <HAL_XSPI_SetDelayValue>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d007      	beq.n	8005320 <Tuning_HSPI_Write+0x4c>
  {
    if (hhspi->Instance == HSPI1)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a05      	ldr	r2, [pc, #20]	; (800532c <Tuning_HSPI_Write+0x58>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d102      	bne.n	8005320 <Tuning_HSPI_Write+0x4c>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800531a:	f06f 0303 	mvn.w	r3, #3
 800531e:	61fb      	str	r3, [r7, #28]
    }
  }

  /* Return BSP status */
  return ret;
 8005320:	69fb      	ldr	r3, [r7, #28]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3720      	adds	r7, #32
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	420d3400 	.word	0x420d3400

08005330 <MX_HSPI_RAM_Init>:
  * @param  hhspi          HSPI handle
  * @param  Init           HSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_HSPI_RAM_Init(XSPI_HandleTypeDef *hhspi, MX_HSPI_InitTypeDef *Init)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t hspi_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_HSPI);
 800533a:	f04f 0000 	mov.w	r0, #0
 800533e:	f04f 0101 	mov.w	r1, #1
 8005342:	f009 f9d3 	bl	800e6ec <HAL_RCCEx_GetPeriphCLKFreq>
 8005346:	60f8      	str	r0, [r7, #12]

  /* HSPI initialization */
  hhspi->Instance = HSPI1;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a24      	ldr	r2, [pc, #144]	; (80053dc <MX_HSPI_RAM_Init+0xac>)
 800534c:	601a      	str	r2, [r3, #0]

  hhspi->Init.FifoThresholdByte       = 2U;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2202      	movs	r2, #2
 8005352:	605a      	str	r2, [r3, #4]
  hhspi->Init.MemoryMode              = HAL_XSPI_SINGLE_MEM;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	609a      	str	r2, [r3, #8]
  hhspi->Init.MemoryType              = HAL_XSPI_MEMTYPE_APMEM_16BITS;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005360:	60da      	str	r2, [r3, #12]
  hhspi->Init.MemorySize              = Init->MemorySize;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	611a      	str	r2, [r3, #16]
  hhspi->Init.ChipSelectHighTimeCycle = 1U;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	615a      	str	r2, [r3, #20]
  hhspi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	619a      	str	r2, [r3, #24]
  hhspi->Init.ClockMode               = HAL_XSPI_CLOCK_MODE_0;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	61da      	str	r2, [r3, #28]
  hhspi->Init.WrapSize                = HAL_XSPI_WRAP_32_BYTES;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005382:	621a      	str	r2, [r3, #32]
  hhspi->Init.ClockPrescaler          = Init->ClockPrescaler;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685a      	ldr	r2, [r3, #4]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	625a      	str	r2, [r3, #36]	; 0x24
  hhspi->Init.SampleShifting          = Init->SampleShifting;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	689a      	ldr	r2, [r3, #8]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	629a      	str	r2, [r3, #40]	; 0x28
  hhspi->Init.DelayHoldQuarterCycle   = HAL_XSPI_DHQC_DISABLE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	62da      	str	r2, [r3, #44]	; 0x2c
  hhspi->Init.ChipSelectBoundary      = 11U;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	220b      	movs	r2, #11
 800539e:	631a      	str	r2, [r3, #48]	; 0x30
  hhspi->Init.DelayBlockBypass        = HAL_XSPI_DELAY_BLOCK_ON;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	635a      	str	r2, [r3, #52]	; 0x34
  /* tCEM = 2 us max => REFRESH+4 clock cycles for read */
  hhspi->Init.Refresh                 = ((2U * (hspi_clk / (Init->ClockPrescaler + 1))) / 1000000U) - 4U;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	3301      	adds	r3, #1
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b2:	005b      	lsls	r3, r3, #1
 80053b4:	4a0a      	ldr	r2, [pc, #40]	; (80053e0 <MX_HSPI_RAM_Init+0xb0>)
 80053b6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ba:	0c9b      	lsrs	r3, r3, #18
 80053bc:	1f1a      	subs	r2, r3, #4
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	63da      	str	r2, [r3, #60]	; 0x3c
  hhspi->Init.MaxTran                 = 0U;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	639a      	str	r2, [r3, #56]	; 0x38

  status = HAL_XSPI_Init(hhspi);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f00c fc2d 	bl	8011c28 <HAL_XSPI_Init>
 80053ce:	4603      	mov	r3, r0
 80053d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80053d2:	7afb      	ldrb	r3, [r7, #11]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	420d3400 	.word	0x420d3400
 80053e0:	431bde83 	.word	0x431bde83

080053e4 <BSP_HSPI_RAM_EnableMemoryMappedMode>:
  * @brief  Configure the HSPI in memory-mapped mode
  * @param  Instance  HSPI instance
  * @retval BSP status
  */
int32_t BSP_HSPI_RAM_EnableMemoryMappedMode(uint32_t Instance)
{
 80053e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af02      	add	r7, sp, #8
 80053ea:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80053ec:	2300      	movs	r3, #0
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= HSPI_RAM_INSTANCES_NUMBER)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <BSP_HSPI_RAM_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80053f6:	f06f 0301 	mvn.w	r3, #1
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	e09a      	b.n	8005534 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x150>
  }
  else
  {
    if (Tuning_HSPI_Write(&hhspi_ram[Instance]) != 0UL)
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	4613      	mov	r3, r2
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	4413      	add	r3, r2
 8005406:	015b      	lsls	r3, r3, #5
 8005408:	4a4d      	ldr	r2, [pc, #308]	; (8005540 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x15c>)
 800540a:	4413      	add	r3, r2
 800540c:	4618      	mov	r0, r3
 800540e:	f7ff ff61 	bl	80052d4 <Tuning_HSPI_Write>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d003      	beq.n	8005420 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x3c>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005418:	f06f 0303 	mvn.w	r3, #3
 800541c:	60fb      	str	r3, [r7, #12]
 800541e:	e089      	b.n	8005534 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x150>
    }
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	4613      	mov	r3, r2
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	4413      	add	r3, r2
 8005428:	015b      	lsls	r3, r3, #5
 800542a:	4a45      	ldr	r2, [pc, #276]	; (8005540 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x15c>)
 800542c:	189c      	adds	r4, r3, r2
                                             (uint32_t)APS512XX_READ_LATENCY((uint32_t)((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode)),
 800542e:	4945      	ldr	r1, [pc, #276]	; (8005544 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	4613      	mov	r3, r2
 8005434:	00db      	lsls	r3, r3, #3
 8005436:	1a9b      	subs	r3, r3, r2
 8005438:	440b      	add	r3, r1
 800543a:	3301      	adds	r3, #1
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	f003 0320 	and.w	r3, r3, #32
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10c      	bne.n	8005460 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x7c>
                                             (uint32_t)APS512XX_READ_LATENCY((uint32_t)((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode)),
 8005446:	493f      	ldr	r1, [pc, #252]	; (8005544 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	4613      	mov	r3, r2
 800544c:	00db      	lsls	r3, r3, #3
 800544e:	1a9b      	subs	r3, r3, r2
 8005450:	440b      	add	r3, r1
 8005452:	3302      	adds	r3, #2
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	089b      	lsrs	r3, r3, #2
 8005458:	f003 0307 	and.w	r3, r3, #7
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 800545c:	1cd9      	adds	r1, r3, #3
 800545e:	e00c      	b.n	800547a <BSP_HSPI_RAM_EnableMemoryMappedMode+0x96>
                                             (uint32_t)APS512XX_READ_LATENCY((uint32_t)((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode)),
 8005460:	4938      	ldr	r1, [pc, #224]	; (8005544 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	4613      	mov	r3, r2
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	1a9b      	subs	r3, r3, r2
 800546a:	440b      	add	r3, r1
 800546c:	3302      	adds	r3, #2
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	089b      	lsrs	r3, r3, #2
 8005472:	f003 0307 	and.w	r3, r3, #7
 8005476:	3303      	adds	r3, #3
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 8005478:	0059      	lsls	r1, r3, #1
                                                                             (uint32_t)(Hspi_Ram_Ctx[Instance].LatencyType)),
                                             APS512XX_WRITE_LATENCY((uint32_t)(Hspi_Ram_Ctx[Instance].WriteLatencyCode)),
 800547a:	4832      	ldr	r0, [pc, #200]	; (8005544 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	4613      	mov	r3, r2
 8005480:	00db      	lsls	r3, r3, #3
 8005482:	1a9b      	subs	r3, r3, r2
 8005484:	4403      	add	r3, r0
 8005486:	3303      	adds	r3, #3
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 800548e:	2b00      	cmp	r3, #0
 8005490:	d02a      	beq.n	80054e8 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x104>
                                             APS512XX_WRITE_LATENCY((uint32_t)(Hspi_Ram_Ctx[Instance].WriteLatencyCode)),
 8005492:	482c      	ldr	r0, [pc, #176]	; (8005544 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	4613      	mov	r3, r2
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	1a9b      	subs	r3, r3, r2
 800549c:	4403      	add	r3, r0
 800549e:	3303      	adds	r3, #3
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	f003 0320 	and.w	r3, r3, #32
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d11c      	bne.n	80054e4 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x100>
 80054aa:	4826      	ldr	r0, [pc, #152]	; (8005544 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	4613      	mov	r3, r2
 80054b0:	00db      	lsls	r3, r3, #3
 80054b2:	1a9b      	subs	r3, r3, r2
 80054b4:	4403      	add	r3, r0
 80054b6:	3303      	adds	r3, #3
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00e      	beq.n	80054e0 <BSP_HSPI_RAM_EnableMemoryMappedMode+0xfc>
 80054c2:	4820      	ldr	r0, [pc, #128]	; (8005544 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	4613      	mov	r3, r2
 80054c8:	00db      	lsls	r3, r3, #3
 80054ca:	1a9b      	subs	r3, r3, r2
 80054cc:	4403      	add	r3, r0
 80054ce:	3303      	adds	r3, #3
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	b25b      	sxtb	r3, r3
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	db01      	blt.n	80054dc <BSP_HSPI_RAM_EnableMemoryMappedMode+0xf8>
 80054d8:	2205      	movs	r2, #5
 80054da:	e006      	b.n	80054ea <BSP_HSPI_RAM_EnableMemoryMappedMode+0x106>
 80054dc:	2206      	movs	r2, #6
 80054de:	e004      	b.n	80054ea <BSP_HSPI_RAM_EnableMemoryMappedMode+0x106>
 80054e0:	2204      	movs	r2, #4
 80054e2:	e002      	b.n	80054ea <BSP_HSPI_RAM_EnableMemoryMappedMode+0x106>
 80054e4:	2207      	movs	r2, #7
 80054e6:	e000      	b.n	80054ea <BSP_HSPI_RAM_EnableMemoryMappedMode+0x106>
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 80054e8:	2203      	movs	r2, #3
                                             (uint32_t)(Hspi_Ram_Ctx[Instance].IOMode),
 80054ea:	4d16      	ldr	r5, [pc, #88]	; (8005544 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	4603      	mov	r3, r0
 80054f0:	00db      	lsls	r3, r3, #3
 80054f2:	1a1b      	subs	r3, r3, r0
 80054f4:	442b      	add	r3, r5
 80054f6:	3306      	adds	r3, #6
 80054f8:	781b      	ldrb	r3, [r3, #0]
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 80054fa:	461e      	mov	r6, r3
                                             (uint32_t)(Hspi_Ram_Ctx[Instance].BurstType)) != (int32_t)APS512XX_OK)
 80054fc:	4d11      	ldr	r5, [pc, #68]	; (8005544 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	4603      	mov	r3, r0
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	1a1b      	subs	r3, r3, r0
 8005506:	442b      	add	r3, r5
 8005508:	3304      	adds	r3, #4
 800550a:	781b      	ldrb	r3, [r3, #0]
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	4633      	mov	r3, r6
 8005510:	4620      	mov	r0, r4
 8005512:	f7fe f9ad 	bl	8003870 <APS512XX_EnableMemoryMappedMode>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d003      	beq.n	8005524 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x140>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800551c:	f06f 0304 	mvn.w	r3, #4
 8005520:	60fb      	str	r3, [r7, #12]
 8005522:	e007      	b.n	8005534 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x150>
    }
    else /* Update HSPI context if all operations are well done */
    {
      Hspi_Ram_Ctx[Instance].IsInitialized = HSPI_ACCESS_MMP;
 8005524:	4907      	ldr	r1, [pc, #28]	; (8005544 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	4613      	mov	r3, r2
 800552a:	00db      	lsls	r3, r3, #3
 800552c:	1a9b      	subs	r3, r3, r2
 800552e:	440b      	add	r3, r1
 8005530:	2202      	movs	r2, #2
 8005532:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Return BSP status */
  return ret;
 8005534:	68fb      	ldr	r3, [r7, #12]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800553e:	bf00      	nop
 8005540:	201970b4 	.word	0x201970b4
 8005544:	20000040 	.word	0x20000040

08005548 <BSP_HSPI_RAM_Config16BitsOctalRAM>:
  * @param  Instance    HSPI instance
  * @param  Cfg         pointer to the RAM config
  * @retval BSP status
  */
int32_t BSP_HSPI_RAM_Config16BitsOctalRAM(uint32_t Instance, BSP_HSPI_RAM_Cfg_t *Cfg)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005552:	2300      	movs	r3, #0
 8005554:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Check if the instance is supported */
  if ((Instance >= HSPI_RAM_INSTANCES_NUMBER)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d103      	bne.n	8005564 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x1c>
      || (Cfg->BurstLength == (BSP_HSPI_RAM_BurstLength_t)APS512XX_MR8_BL_2K_BYTES))
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	791b      	ldrb	r3, [r3, #4]
 8005560:	2b03      	cmp	r3, #3
 8005562:	d103      	bne.n	800556c <BSP_HSPI_RAM_Config16BitsOctalRAM+0x24>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005564:	f06f 0301 	mvn.w	r3, #1
 8005568:	60fb      	str	r3, [r7, #12]
 800556a:	e1f7      	b.n	800595c <BSP_HSPI_RAM_Config16BitsOctalRAM+0x414>
  }
  else
  {
    /* Check if MMP mode locked ***********************************************/
    if (Hspi_Ram_Ctx[Instance].IsInitialized == HSPI_ACCESS_MMP)
 800556c:	49a9      	ldr	r1, [pc, #676]	; (8005814 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	4613      	mov	r3, r2
 8005572:	00db      	lsls	r3, r3, #3
 8005574:	1a9b      	subs	r3, r3, r2
 8005576:	440b      	add	r3, r1
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	2b02      	cmp	r3, #2
 800557c:	d103      	bne.n	8005586 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x3e>
    {
      ret = BSP_ERROR_HSPI_MMP_LOCK_FAILURE;
 800557e:	f06f 031f 	mvn.w	r3, #31
 8005582:	60fb      	str	r3, [r7, #12]
 8005584:	e1ea      	b.n	800595c <BSP_HSPI_RAM_Config16BitsOctalRAM+0x414>
    }
    else
    {
      if ((Hspi_Ram_Ctx[Instance].IsInitialized  == HSPI_ACCESS_NONE) ||
 8005586:	49a3      	ldr	r1, [pc, #652]	; (8005814 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	4613      	mov	r3, r2
 800558c:	00db      	lsls	r3, r3, #3
 800558e:	1a9b      	subs	r3, r3, r2
 8005590:	440b      	add	r3, r1
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d017      	beq.n	80055c8 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x80>
          (Hspi_Ram_Ctx[Instance].LatencyType     != Cfg->LatencyType)  ||
 8005598:	499e      	ldr	r1, [pc, #632]	; (8005814 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	4613      	mov	r3, r2
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	1a9b      	subs	r3, r3, r2
 80055a2:	440b      	add	r3, r1
 80055a4:	3301      	adds	r3, #1
 80055a6:	781a      	ldrb	r2, [r3, #0]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	781b      	ldrb	r3, [r3, #0]
      if ((Hspi_Ram_Ctx[Instance].IsInitialized  == HSPI_ACCESS_NONE) ||
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d10b      	bne.n	80055c8 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x80>
          (Hspi_Ram_Ctx[Instance].ReadLatencyCode != Cfg->ReadLatencyCode))
 80055b0:	4998      	ldr	r1, [pc, #608]	; (8005814 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	4613      	mov	r3, r2
 80055b6:	00db      	lsls	r3, r3, #3
 80055b8:	1a9b      	subs	r3, r3, r2
 80055ba:	440b      	add	r3, r1
 80055bc:	3302      	adds	r3, #2
 80055be:	781a      	ldrb	r2, [r3, #0]
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	785b      	ldrb	r3, [r3, #1]
          (Hspi_Ram_Ctx[Instance].LatencyType     != Cfg->LatencyType)  ||
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d040      	beq.n	800564a <BSP_HSPI_RAM_Config16BitsOctalRAM+0x102>
      {
        /* Reading the configuration of Mode Register 0 ***********************/
        if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR0_ADDRESS, reg,
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	4613      	mov	r3, r2
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	4413      	add	r3, r2
 80055d0:	015b      	lsls	r3, r3, #5
 80055d2:	4a91      	ldr	r2, [pc, #580]	; (8005818 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 80055d4:	1898      	adds	r0, r3, r2
                             (uint32_t)APS512XX_READ_REG_LATENCY((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode))) != \
 80055d6:	498f      	ldr	r1, [pc, #572]	; (8005814 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	4613      	mov	r3, r2
 80055dc:	00db      	lsls	r3, r3, #3
 80055de:	1a9b      	subs	r3, r3, r2
 80055e0:	440b      	add	r3, r1
 80055e2:	3302      	adds	r3, #2
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	089b      	lsrs	r3, r3, #2
 80055e8:	f003 0307 	and.w	r3, r3, #7
        if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR0_ADDRESS, reg,
 80055ec:	3303      	adds	r3, #3
 80055ee:	f107 0208 	add.w	r2, r7, #8
 80055f2:	2100      	movs	r1, #0
 80055f4:	f7fe f9b8 	bl	8003968 <APS512XX_ReadReg>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <BSP_HSPI_RAM_Config16BitsOctalRAM+0xbe>
            (int32_t)APS512XX_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80055fe:	f06f 0304 	mvn.w	r3, #4
 8005602:	60fb      	str	r3, [r7, #12]
 8005604:	e021      	b.n	800564a <BSP_HSPI_RAM_Config16BitsOctalRAM+0x102>
        }
        else
        {
          /* Configure the 16-bits Octal RAM memory ***************************/
          MODIFY_REG(reg[0], ((uint32_t)APS512XX_MR0_LATENCY_TYPE | (uint32_t)APS512XX_MR0_READ_LATENCY_CODE |
 8005606:	7a3b      	ldrb	r3, [r7, #8]
 8005608:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800560c:	b2da      	uxtb	r2, r3
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	7819      	ldrb	r1, [r3, #0]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	785b      	ldrb	r3, [r3, #1]
 8005616:	430b      	orrs	r3, r1
 8005618:	b2db      	uxtb	r3, r3
 800561a:	4313      	orrs	r3, r2
 800561c:	b2db      	uxtb	r3, r3
 800561e:	f043 0301 	orr.w	r3, r3, #1
 8005622:	b2db      	uxtb	r3, r3
 8005624:	723b      	strb	r3, [r7, #8]
                              (uint32_t)APS512XX_MR0_DRIVE_STRENGTH),
                     ((uint32_t)(Cfg->LatencyType) | (uint32_t)(Cfg->ReadLatencyCode) | (uint32_t)CONF_HSPI_DS));

          if (APS512XX_WriteReg(&hhspi_ram[Instance], APS512XX_MR0_ADDRESS, reg[0]) != APS512XX_OK)
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	4613      	mov	r3, r2
 800562a:	005b      	lsls	r3, r3, #1
 800562c:	4413      	add	r3, r2
 800562e:	015b      	lsls	r3, r3, #5
 8005630:	4a79      	ldr	r2, [pc, #484]	; (8005818 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 8005632:	4413      	add	r3, r2
 8005634:	7a3a      	ldrb	r2, [r7, #8]
 8005636:	2100      	movs	r1, #0
 8005638:	4618      	mov	r0, r3
 800563a:	f7fe f9e9 	bl	8003a10 <APS512XX_WriteReg>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d002      	beq.n	800564a <BSP_HSPI_RAM_Config16BitsOctalRAM+0x102>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8005644:	f06f 0304 	mvn.w	r3, #4
 8005648:	60fb      	str	r3, [r7, #12]
          }
          /* Configure the peripheral *****************************************/
        }
      }

      if (ret == BSP_ERROR_NONE)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d148      	bne.n	80056e2 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x19a>
      {
        if ((Hspi_Ram_Ctx[Instance].IsInitialized   == HSPI_ACCESS_NONE) ||
 8005650:	4970      	ldr	r1, [pc, #448]	; (8005814 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	4613      	mov	r3, r2
 8005656:	00db      	lsls	r3, r3, #3
 8005658:	1a9b      	subs	r3, r3, r2
 800565a:	440b      	add	r3, r1
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00b      	beq.n	800567a <BSP_HSPI_RAM_Config16BitsOctalRAM+0x132>
            (Hspi_Ram_Ctx[Instance].WriteLatencyCode != Cfg->WriteLatencyCode))
 8005662:	496c      	ldr	r1, [pc, #432]	; (8005814 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	4613      	mov	r3, r2
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	1a9b      	subs	r3, r3, r2
 800566c:	440b      	add	r3, r1
 800566e:	3303      	adds	r3, #3
 8005670:	781a      	ldrb	r2, [r3, #0]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	789b      	ldrb	r3, [r3, #2]
        if ((Hspi_Ram_Ctx[Instance].IsInitialized   == HSPI_ACCESS_NONE) ||
 8005676:	429a      	cmp	r2, r3
 8005678:	d033      	beq.n	80056e2 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x19a>
        {
          /* Reading the configuration of Mode Register 4 ***********************/
          if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR4_ADDRESS, reg,
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	4613      	mov	r3, r2
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	4413      	add	r3, r2
 8005682:	015b      	lsls	r3, r3, #5
 8005684:	4a64      	ldr	r2, [pc, #400]	; (8005818 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 8005686:	1898      	adds	r0, r3, r2
                               (uint32_t)APS512XX_READ_REG_LATENCY((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode))) != (int32_t)APS512XX_OK)
 8005688:	4962      	ldr	r1, [pc, #392]	; (8005814 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	4613      	mov	r3, r2
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	1a9b      	subs	r3, r3, r2
 8005692:	440b      	add	r3, r1
 8005694:	3302      	adds	r3, #2
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	089b      	lsrs	r3, r3, #2
 800569a:	f003 0307 	and.w	r3, r3, #7
          if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR4_ADDRESS, reg,
 800569e:	3303      	adds	r3, #3
 80056a0:	f107 0208 	add.w	r2, r7, #8
 80056a4:	2104      	movs	r1, #4
 80056a6:	f7fe f95f 	bl	8003968 <APS512XX_ReadReg>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x170>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 80056b0:	f06f 0304 	mvn.w	r3, #4
 80056b4:	60fb      	str	r3, [r7, #12]
 80056b6:	e014      	b.n	80056e2 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x19a>
          }
          else
          {
            /* Configure the 16-bits Octal RAM memory ***************************/
            MODIFY_REG(reg[0], (APS512XX_MR4_WRITE_LATENCY_CODE | APS512XX_MR4_RF_RATE | APS512XX_MR4_PASR),
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	789b      	ldrb	r3, [r3, #2]
 80056bc:	723b      	strb	r3, [r7, #8]
                       (Cfg->WriteLatencyCode | CONF_HSPI_RF | CONF_HSPI_PASR));

            if (APS512XX_WriteReg(&hhspi_ram[Instance], APS512XX_MR4_ADDRESS, reg[0]) != APS512XX_OK)
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	4613      	mov	r3, r2
 80056c2:	005b      	lsls	r3, r3, #1
 80056c4:	4413      	add	r3, r2
 80056c6:	015b      	lsls	r3, r3, #5
 80056c8:	4a53      	ldr	r2, [pc, #332]	; (8005818 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 80056ca:	4413      	add	r3, r2
 80056cc:	7a3a      	ldrb	r2, [r7, #8]
 80056ce:	2104      	movs	r1, #4
 80056d0:	4618      	mov	r0, r3
 80056d2:	f7fe f99d 	bl	8003a10 <APS512XX_WriteReg>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d002      	beq.n	80056e2 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x19a>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 80056dc:	f06f 0304 	mvn.w	r3, #4
 80056e0:	60fb      	str	r3, [r7, #12]
            }
          }
        }
      }

      if (ret == BSP_ERROR_NONE)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f040 80ec 	bne.w	80058c2 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x37a>
      {
        if ((Hspi_Ram_Ctx[Instance].IsInitialized == HSPI_ACCESS_NONE)  ||
 80056ea:	494a      	ldr	r1, [pc, #296]	; (8005814 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	4613      	mov	r3, r2
 80056f0:	00db      	lsls	r3, r3, #3
 80056f2:	1a9b      	subs	r3, r3, r2
 80056f4:	440b      	add	r3, r1
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d024      	beq.n	8005746 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x1fe>
            (Hspi_Ram_Ctx[Instance].BurstType      != Cfg->BurstType)   ||
 80056fc:	4945      	ldr	r1, [pc, #276]	; (8005814 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	4613      	mov	r3, r2
 8005702:	00db      	lsls	r3, r3, #3
 8005704:	1a9b      	subs	r3, r3, r2
 8005706:	440b      	add	r3, r1
 8005708:	3304      	adds	r3, #4
 800570a:	781a      	ldrb	r2, [r3, #0]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	78db      	ldrb	r3, [r3, #3]
        if ((Hspi_Ram_Ctx[Instance].IsInitialized == HSPI_ACCESS_NONE)  ||
 8005710:	429a      	cmp	r2, r3
 8005712:	d118      	bne.n	8005746 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x1fe>
            (Hspi_Ram_Ctx[Instance].BurstLength    != Cfg->BurstLength) ||
 8005714:	493f      	ldr	r1, [pc, #252]	; (8005814 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	4613      	mov	r3, r2
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	1a9b      	subs	r3, r3, r2
 800571e:	440b      	add	r3, r1
 8005720:	3305      	adds	r3, #5
 8005722:	781a      	ldrb	r2, [r3, #0]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	791b      	ldrb	r3, [r3, #4]
            (Hspi_Ram_Ctx[Instance].BurstType      != Cfg->BurstType)   ||
 8005728:	429a      	cmp	r2, r3
 800572a:	d10c      	bne.n	8005746 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x1fe>
            (Hspi_Ram_Ctx[Instance].IOMode         != Cfg->IOMode))
 800572c:	4939      	ldr	r1, [pc, #228]	; (8005814 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	4613      	mov	r3, r2
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	1a9b      	subs	r3, r3, r2
 8005736:	440b      	add	r3, r1
 8005738:	3306      	adds	r3, #6
 800573a:	781a      	ldrb	r2, [r3, #0]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	795b      	ldrb	r3, [r3, #5]
            (Hspi_Ram_Ctx[Instance].BurstLength    != Cfg->BurstLength) ||
 8005740:	429a      	cmp	r2, r3
 8005742:	f000 80be 	beq.w	80058c2 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x37a>
        {
          /* Reading the configuration of Mode Register 8 ***********************/
          if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR8_ADDRESS, reg,
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	4613      	mov	r3, r2
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	4413      	add	r3, r2
 800574e:	015b      	lsls	r3, r3, #5
 8005750:	4a31      	ldr	r2, [pc, #196]	; (8005818 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 8005752:	1898      	adds	r0, r3, r2
                               (uint32_t)APS512XX_READ_REG_LATENCY((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode))) != (int32_t)APS512XX_OK)
 8005754:	492f      	ldr	r1, [pc, #188]	; (8005814 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	4613      	mov	r3, r2
 800575a:	00db      	lsls	r3, r3, #3
 800575c:	1a9b      	subs	r3, r3, r2
 800575e:	440b      	add	r3, r1
 8005760:	3302      	adds	r3, #2
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	089b      	lsrs	r3, r3, #2
 8005766:	f003 0307 	and.w	r3, r3, #7
          if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR8_ADDRESS, reg,
 800576a:	3303      	adds	r3, #3
 800576c:	f107 0208 	add.w	r2, r7, #8
 8005770:	2108      	movs	r1, #8
 8005772:	f7fe f8f9 	bl	8003968 <APS512XX_ReadReg>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x23c>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800577c:	f06f 0304 	mvn.w	r3, #4
 8005780:	60fb      	str	r3, [r7, #12]
 8005782:	e09e      	b.n	80058c2 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x37a>
          }
          else
          {
            /* Configure the 16-bits Octal RAM memory ***************************/
            MODIFY_REG(reg[0], ((uint32_t)APS512XX_MR8_X8_X16 | (uint32_t)APS512XX_MR8_BL),
 8005784:	7a3b      	ldrb	r3, [r7, #8]
 8005786:	f023 0343 	bic.w	r3, r3, #67	; 0x43
 800578a:	b2da      	uxtb	r2, r3
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	7959      	ldrb	r1, [r3, #5]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	791b      	ldrb	r3, [r3, #4]
 8005794:	430b      	orrs	r3, r1
 8005796:	b2db      	uxtb	r3, r3
 8005798:	4313      	orrs	r3, r2
 800579a:	b2db      	uxtb	r3, r3
 800579c:	723b      	strb	r3, [r7, #8]
                       ((uint32_t)(Cfg->IOMode) | (uint32_t)(Cfg->BurstLength)));

            if (APS512XX_WriteReg(&hhspi_ram[Instance], APS512XX_MR8_ADDRESS, reg[0]) != APS512XX_OK)
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	4613      	mov	r3, r2
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	4413      	add	r3, r2
 80057a6:	015b      	lsls	r3, r3, #5
 80057a8:	4a1b      	ldr	r2, [pc, #108]	; (8005818 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 80057aa:	4413      	add	r3, r2
 80057ac:	7a3a      	ldrb	r2, [r7, #8]
 80057ae:	2108      	movs	r1, #8
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7fe f92d 	bl	8003a10 <APS512XX_WriteReg>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d003      	beq.n	80057c4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x27c>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 80057bc:	f06f 0304 	mvn.w	r3, #4
 80057c0:	60fb      	str	r3, [r7, #12]
 80057c2:	e07e      	b.n	80058c2 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x37a>
            }
            else
            {
              /* Configure the peripheral *****************************************/
              if (Cfg->BurstType == BSP_HSPI_RAM_HYBRID_BURST)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	78db      	ldrb	r3, [r3, #3]
 80057c8:	2b04      	cmp	r3, #4
 80057ca:	d133      	bne.n	8005834 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2ec>
              {
                switch (Cfg->BurstLength)
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	791b      	ldrb	r3, [r3, #4]
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d023      	beq.n	800581c <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d4>
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	dc38      	bgt.n	800584a <BSP_HSPI_RAM_Config16BitsOctalRAM+0x302>
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x29a>
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d00c      	beq.n	80057fa <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2b2>
                    break;
                  case APS512XX_MR8_BL_64_BYTES :
                    hhspi_ram[Instance].Init.WrapSize = HAL_XSPI_WRAP_64_BYTES;
                    break;
                  default :
                    break;
 80057e0:	e033      	b.n	800584a <BSP_HSPI_RAM_Config16BitsOctalRAM+0x302>
                    hhspi_ram[Instance].Init.WrapSize = HAL_XSPI_WRAP_16_BYTES;
 80057e2:	490d      	ldr	r1, [pc, #52]	; (8005818 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	4613      	mov	r3, r2
 80057e8:	005b      	lsls	r3, r3, #1
 80057ea:	4413      	add	r3, r2
 80057ec:	015b      	lsls	r3, r3, #5
 80057ee:	440b      	add	r3, r1
 80057f0:	3320      	adds	r3, #32
 80057f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80057f6:	601a      	str	r2, [r3, #0]
                    break;
 80057f8:	e028      	b.n	800584c <BSP_HSPI_RAM_Config16BitsOctalRAM+0x304>
                    hhspi_ram[Instance].Init.WrapSize = HAL_XSPI_WRAP_32_BYTES;
 80057fa:	4907      	ldr	r1, [pc, #28]	; (8005818 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	4613      	mov	r3, r2
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	4413      	add	r3, r2
 8005804:	015b      	lsls	r3, r3, #5
 8005806:	440b      	add	r3, r1
 8005808:	3320      	adds	r3, #32
 800580a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800580e:	601a      	str	r2, [r3, #0]
                    break;
 8005810:	e01c      	b.n	800584c <BSP_HSPI_RAM_Config16BitsOctalRAM+0x304>
 8005812:	bf00      	nop
 8005814:	20000040 	.word	0x20000040
 8005818:	201970b4 	.word	0x201970b4
                    hhspi_ram[Instance].Init.WrapSize = HAL_XSPI_WRAP_64_BYTES;
 800581c:	4952      	ldr	r1, [pc, #328]	; (8005968 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	4613      	mov	r3, r2
 8005822:	005b      	lsls	r3, r3, #1
 8005824:	4413      	add	r3, r2
 8005826:	015b      	lsls	r3, r3, #5
 8005828:	440b      	add	r3, r1
 800582a:	3320      	adds	r3, #32
 800582c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005830:	601a      	str	r2, [r3, #0]
                    break;
 8005832:	e00b      	b.n	800584c <BSP_HSPI_RAM_Config16BitsOctalRAM+0x304>
                }
              }
              else
              {
                hhspi_ram[Instance].Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 8005834:	494c      	ldr	r1, [pc, #304]	; (8005968 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	4613      	mov	r3, r2
 800583a:	005b      	lsls	r3, r3, #1
 800583c:	4413      	add	r3, r2
 800583e:	015b      	lsls	r3, r3, #5
 8005840:	440b      	add	r3, r1
 8005842:	3320      	adds	r3, #32
 8005844:	2200      	movs	r2, #0
 8005846:	601a      	str	r2, [r3, #0]
 8005848:	e000      	b.n	800584c <BSP_HSPI_RAM_Config16BitsOctalRAM+0x304>
                    break;
 800584a:	bf00      	nop
              }

              if (Cfg->IOMode == BSP_HSPI_RAM_IO_X16_MODE)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	795b      	ldrb	r3, [r3, #5]
 8005850:	2b40      	cmp	r3, #64	; 0x40
 8005852:	d10b      	bne.n	800586c <BSP_HSPI_RAM_Config16BitsOctalRAM+0x324>
              {
                hhspi_ram[Instance].Init.MemoryType = HAL_XSPI_MEMTYPE_APMEM_16BITS;
 8005854:	4944      	ldr	r1, [pc, #272]	; (8005968 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	4613      	mov	r3, r2
 800585a:	005b      	lsls	r3, r3, #1
 800585c:	4413      	add	r3, r2
 800585e:	015b      	lsls	r3, r3, #5
 8005860:	440b      	add	r3, r1
 8005862:	330c      	adds	r3, #12
 8005864:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005868:	601a      	str	r2, [r3, #0]
 800586a:	e00a      	b.n	8005882 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x33a>
              }
              else
              {
                hhspi_ram[Instance].Init.MemoryType = HAL_XSPI_MEMTYPE_APMEM;
 800586c:	493e      	ldr	r1, [pc, #248]	; (8005968 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	4613      	mov	r3, r2
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	4413      	add	r3, r2
 8005876:	015b      	lsls	r3, r3, #5
 8005878:	440b      	add	r3, r1
 800587a:	330c      	adds	r3, #12
 800587c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005880:	601a      	str	r2, [r3, #0]
              }

              if (HAL_XSPI_DeInit(&hhspi_ram[Instance]) != HAL_OK)
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	4613      	mov	r3, r2
 8005886:	005b      	lsls	r3, r3, #1
 8005888:	4413      	add	r3, r2
 800588a:	015b      	lsls	r3, r3, #5
 800588c:	4a36      	ldr	r2, [pc, #216]	; (8005968 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 800588e:	4413      	add	r3, r2
 8005890:	4618      	mov	r0, r3
 8005892:	f00c fb15 	bl	8011ec0 <HAL_XSPI_DeInit>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d002      	beq.n	80058a2 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x35a>
              {
                ret = BSP_ERROR_PERIPH_FAILURE;
 800589c:	f06f 0303 	mvn.w	r3, #3
 80058a0:	60fb      	str	r3, [r7, #12]
              }

              if (HAL_XSPI_Init(&hhspi_ram[Instance]) != HAL_OK)
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	4613      	mov	r3, r2
 80058a6:	005b      	lsls	r3, r3, #1
 80058a8:	4413      	add	r3, r2
 80058aa:	015b      	lsls	r3, r3, #5
 80058ac:	4a2e      	ldr	r2, [pc, #184]	; (8005968 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 80058ae:	4413      	add	r3, r2
 80058b0:	4618      	mov	r0, r3
 80058b2:	f00c f9b9 	bl	8011c28 <HAL_XSPI_Init>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x37a>
              {
                ret = BSP_ERROR_PERIPH_FAILURE;
 80058bc:	f06f 0303 	mvn.w	r3, #3
 80058c0:	60fb      	str	r3, [r7, #12]
          }
        }
      }

      /* Update HSPI context if all operations are well done */
      if (ret == BSP_ERROR_NONE)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d149      	bne.n	800595c <BSP_HSPI_RAM_Config16BitsOctalRAM+0x414>
      {
        /* Update current status parameter *****************************************/
        Hspi_Ram_Ctx[Instance].IsInitialized    = HSPI_ACCESS_INDIRECT;
 80058c8:	4928      	ldr	r1, [pc, #160]	; (800596c <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	4613      	mov	r3, r2
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	1a9b      	subs	r3, r3, r2
 80058d2:	440b      	add	r3, r1
 80058d4:	2201      	movs	r2, #1
 80058d6:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].LatencyType      = Cfg->LatencyType;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	7818      	ldrb	r0, [r3, #0]
 80058dc:	4923      	ldr	r1, [pc, #140]	; (800596c <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	4613      	mov	r3, r2
 80058e2:	00db      	lsls	r3, r3, #3
 80058e4:	1a9b      	subs	r3, r3, r2
 80058e6:	440b      	add	r3, r1
 80058e8:	3301      	adds	r3, #1
 80058ea:	4602      	mov	r2, r0
 80058ec:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].ReadLatencyCode  = Cfg->ReadLatencyCode;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	7858      	ldrb	r0, [r3, #1]
 80058f2:	491e      	ldr	r1, [pc, #120]	; (800596c <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	4613      	mov	r3, r2
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	1a9b      	subs	r3, r3, r2
 80058fc:	440b      	add	r3, r1
 80058fe:	3302      	adds	r3, #2
 8005900:	4602      	mov	r2, r0
 8005902:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].WriteLatencyCode = Cfg->WriteLatencyCode;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	7898      	ldrb	r0, [r3, #2]
 8005908:	4918      	ldr	r1, [pc, #96]	; (800596c <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	4613      	mov	r3, r2
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	1a9b      	subs	r3, r3, r2
 8005912:	440b      	add	r3, r1
 8005914:	3303      	adds	r3, #3
 8005916:	4602      	mov	r2, r0
 8005918:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].BurstType        = Cfg->BurstType;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	78d8      	ldrb	r0, [r3, #3]
 800591e:	4913      	ldr	r1, [pc, #76]	; (800596c <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	4613      	mov	r3, r2
 8005924:	00db      	lsls	r3, r3, #3
 8005926:	1a9b      	subs	r3, r3, r2
 8005928:	440b      	add	r3, r1
 800592a:	3304      	adds	r3, #4
 800592c:	4602      	mov	r2, r0
 800592e:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].BurstLength      = Cfg->BurstLength;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	7918      	ldrb	r0, [r3, #4]
 8005934:	490d      	ldr	r1, [pc, #52]	; (800596c <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	4613      	mov	r3, r2
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	1a9b      	subs	r3, r3, r2
 800593e:	440b      	add	r3, r1
 8005940:	3305      	adds	r3, #5
 8005942:	4602      	mov	r2, r0
 8005944:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].IOMode           = Cfg->IOMode;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	7958      	ldrb	r0, [r3, #5]
 800594a:	4908      	ldr	r1, [pc, #32]	; (800596c <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	4613      	mov	r3, r2
 8005950:	00db      	lsls	r3, r3, #3
 8005952:	1a9b      	subs	r3, r3, r2
 8005954:	440b      	add	r3, r1
 8005956:	3306      	adds	r3, #6
 8005958:	4602      	mov	r2, r0
 800595a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800595c:	68fb      	ldr	r3, [r7, #12]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	201970b4 	.word	0x201970b4
 800596c:	20000040 	.word	0x20000040

08005970 <HSPI_RAM_MspInit>:
  * @brief  Initializes the HSPI MSP.
  * @param  hhspi HSPI handle
  * @retval None
  */
static void HSPI_RAM_MspInit(XSPI_HandleTypeDef *hhspi)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b0a0      	sub	sp, #128	; 0x80
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  static DMA_HandleTypeDef hdmatx, hdmarx;
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8005978:	4bbe      	ldr	r3, [pc, #760]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 800597a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800597e:	4abd      	ldr	r2, [pc, #756]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005980:	f043 0304 	orr.w	r3, r3, #4
 8005984:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005988:	4bba      	ldr	r3, [pc, #744]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 800598a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800598e:	f003 0304 	and.w	r3, r3, #4
 8005992:	66bb      	str	r3, [r7, #104]	; 0x68
 8005994:	6ebb      	ldr	r3, [r7, #104]	; 0x68
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8005996:	4bb8      	ldr	r3, [pc, #736]	; (8005c78 <HSPI_RAM_MspInit+0x308>)
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	4ab7      	ldr	r2, [pc, #732]	; (8005c78 <HSPI_RAM_MspInit+0x308>)
 800599c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059a0:	6113      	str	r3, [r2, #16]

  /* Enable the HSPI memory interface, DMA and GPIO clocks */
  HSPI_CLK_ENABLE();
 80059a2:	4bb4      	ldr	r3, [pc, #720]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 80059a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a8:	4ab2      	ldr	r2, [pc, #712]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 80059aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80059ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059b2:	4bb0      	ldr	r3, [pc, #704]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 80059b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059bc:	667b      	str	r3, [r7, #100]	; 0x64
 80059be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  HSPI_RAM_DMAx_CLK_ENABLE();
 80059c0:	4bac      	ldr	r3, [pc, #688]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 80059c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c6:	4aab      	ldr	r2, [pc, #684]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 80059c8:	f043 0301 	orr.w	r3, r3, #1
 80059cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80059d0:	4ba8      	ldr	r3, [pc, #672]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 80059d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	663b      	str	r3, [r7, #96]	; 0x60
 80059dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  HSPI_CLK_GPIO_CLK_ENABLE();
 80059de:	4ba5      	ldr	r3, [pc, #660]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 80059e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059e4:	4aa3      	ldr	r2, [pc, #652]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 80059e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80059ee:	4ba1      	ldr	r3, [pc, #644]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 80059f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  HSPI_DQS0_GPIO_CLK_ENABLE();
 80059fc:	4b9d      	ldr	r3, [pc, #628]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 80059fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a02:	4a9c      	ldr	r2, [pc, #624]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a08:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005a0c:	4b99      	ldr	r3, [pc, #612]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005a0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a16:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  HSPI_DQS1_GPIO_CLK_ENABLE();
 8005a1a:	4b96      	ldr	r3, [pc, #600]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a20:	4a94      	ldr	r2, [pc, #592]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a26:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005a2a:	4b92      	ldr	r3, [pc, #584]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a34:	657b      	str	r3, [r7, #84]	; 0x54
 8005a36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  HSPI_CS_GPIO_CLK_ENABLE();
 8005a38:	4b8e      	ldr	r3, [pc, #568]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a3e:	4a8d      	ldr	r2, [pc, #564]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a44:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005a48:	4b8a      	ldr	r3, [pc, #552]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a52:	653b      	str	r3, [r7, #80]	; 0x50
 8005a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  HSPI_D0_GPIO_CLK_ENABLE();
 8005a56:	4b87      	ldr	r3, [pc, #540]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a5c:	4a85      	ldr	r2, [pc, #532]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a62:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005a66:	4b83      	ldr	r3, [pc, #524]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  HSPI_D1_GPIO_CLK_ENABLE();
 8005a74:	4b7f      	ldr	r3, [pc, #508]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a7a:	4a7e      	ldr	r2, [pc, #504]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a80:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005a84:	4b7b      	ldr	r3, [pc, #492]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  HSPI_D2_GPIO_CLK_ENABLE();
 8005a92:	4b78      	ldr	r3, [pc, #480]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a98:	4a76      	ldr	r2, [pc, #472]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a9e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005aa2:	4b74      	ldr	r3, [pc, #464]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aac:	647b      	str	r3, [r7, #68]	; 0x44
 8005aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  HSPI_D3_GPIO_CLK_ENABLE();
 8005ab0:	4b70      	ldr	r3, [pc, #448]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ab6:	4a6f      	ldr	r2, [pc, #444]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005abc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005ac0:	4b6c      	ldr	r3, [pc, #432]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aca:	643b      	str	r3, [r7, #64]	; 0x40
 8005acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  HSPI_D4_GPIO_CLK_ENABLE();
 8005ace:	4b69      	ldr	r3, [pc, #420]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ad4:	4a67      	ldr	r2, [pc, #412]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ada:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005ade:	4b65      	ldr	r3, [pc, #404]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  HSPI_D5_GPIO_CLK_ENABLE();
 8005aec:	4b61      	ldr	r3, [pc, #388]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005aee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005af2:	4a60      	ldr	r2, [pc, #384]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005af8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005afc:	4b5d      	ldr	r3, [pc, #372]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b06:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  HSPI_D6_GPIO_CLK_ENABLE();
 8005b0a:	4b5a      	ldr	r3, [pc, #360]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b10:	4a58      	ldr	r2, [pc, #352]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005b1a:	4b56      	ldr	r3, [pc, #344]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b24:	637b      	str	r3, [r7, #52]	; 0x34
 8005b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  HSPI_D7_GPIO_CLK_ENABLE();
 8005b28:	4b52      	ldr	r3, [pc, #328]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b2e:	4a51      	ldr	r2, [pc, #324]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b34:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005b38:	4b4e      	ldr	r3, [pc, #312]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005b3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b42:	633b      	str	r3, [r7, #48]	; 0x30
 8005b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  HSPI_D8_GPIO_CLK_ENABLE();
 8005b46:	4b4b      	ldr	r3, [pc, #300]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b4c:	4a49      	ldr	r2, [pc, #292]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b52:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005b56:	4b47      	ldr	r3, [pc, #284]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  HSPI_D9_GPIO_CLK_ENABLE();
 8005b64:	4b43      	ldr	r3, [pc, #268]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b6a:	4a42      	ldr	r2, [pc, #264]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b70:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005b74:	4b3f      	ldr	r3, [pc, #252]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005b76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
  HSPI_D10_GPIO_CLK_ENABLE();
 8005b82:	4b3c      	ldr	r3, [pc, #240]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b88:	4a3a      	ldr	r2, [pc, #232]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005b92:	4b38      	ldr	r3, [pc, #224]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  HSPI_D11_GPIO_CLK_ENABLE();
 8005ba0:	4b34      	ldr	r3, [pc, #208]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005ba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ba6:	4a33      	ldr	r2, [pc, #204]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bac:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005bb0:	4b30      	ldr	r3, [pc, #192]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005bb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bba:	623b      	str	r3, [r7, #32]
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
  HSPI_D12_GPIO_CLK_ENABLE();
 8005bbe:	4b2d      	ldr	r3, [pc, #180]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bc4:	4a2b      	ldr	r2, [pc, #172]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005bce:	4b29      	ldr	r3, [pc, #164]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd8:	61fb      	str	r3, [r7, #28]
 8005bda:	69fb      	ldr	r3, [r7, #28]
  HSPI_D13_GPIO_CLK_ENABLE();
 8005bdc:	4b25      	ldr	r3, [pc, #148]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005bde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005be2:	4a24      	ldr	r2, [pc, #144]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005be8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005bec:	4b21      	ldr	r3, [pc, #132]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005bee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf6:	61bb      	str	r3, [r7, #24]
 8005bf8:	69bb      	ldr	r3, [r7, #24]
  HSPI_D14_GPIO_CLK_ENABLE();
 8005bfa:	4b1e      	ldr	r3, [pc, #120]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c00:	4a1c      	ldr	r2, [pc, #112]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005c0a:	4b1a      	ldr	r3, [pc, #104]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c14:	617b      	str	r3, [r7, #20]
 8005c16:	697b      	ldr	r3, [r7, #20]
  HSPI_D15_GPIO_CLK_ENABLE();
 8005c18:	4b16      	ldr	r3, [pc, #88]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c1e:	4a15      	ldr	r2, [pc, #84]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005c20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c24:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005c28:	4b12      	ldr	r3, [pc, #72]	; (8005c74 <HSPI_RAM_MspInit+0x304>)
 8005c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c32:	613b      	str	r3, [r7, #16]
 8005c34:	693b      	ldr	r3, [r7, #16]

  /*  Activate HSLV  */
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_CS_GPIO_PORT, HSPI_CS_PIN);
 8005c36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c3a:	4810      	ldr	r0, [pc, #64]	; (8005c7c <HSPI_RAM_MspInit+0x30c>)
 8005c3c:	f004 f910 	bl	8009e60 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_DQS0_GPIO_PORT, HSPI_DQS0_PIN);
 8005c40:	2104      	movs	r1, #4
 8005c42:	480f      	ldr	r0, [pc, #60]	; (8005c80 <HSPI_RAM_MspInit+0x310>)
 8005c44:	f004 f90c 	bl	8009e60 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_DQS1_GPIO_PORT, HSPI_DQS1_PIN);
 8005c48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c4c:	480c      	ldr	r0, [pc, #48]	; (8005c80 <HSPI_RAM_MspInit+0x310>)
 8005c4e:	f004 f907 	bl	8009e60 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_CLK_GPIO_PORT, HSPI_CLK_PIN);
 8005c52:	2108      	movs	r1, #8
 8005c54:	480a      	ldr	r0, [pc, #40]	; (8005c80 <HSPI_RAM_MspInit+0x310>)
 8005c56:	f004 f903 	bl	8009e60 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_NCLK_GPIO_PORT, HSPI_NCLK_PIN);
 8005c5a:	2110      	movs	r1, #16
 8005c5c:	4808      	ldr	r0, [pc, #32]	; (8005c80 <HSPI_RAM_MspInit+0x310>)
 8005c5e:	f004 f8ff 	bl	8009e60 <HAL_GPIO_EnableHighSPeedLowVoltage>

  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D0_GPIO_PORT, HSPI_D0_PIN);
 8005c62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005c66:	4805      	ldr	r0, [pc, #20]	; (8005c7c <HSPI_RAM_MspInit+0x30c>)
 8005c68:	f004 f8fa 	bl	8009e60 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D1_GPIO_PORT, HSPI_D1_PIN);
 8005c6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005c70:	e008      	b.n	8005c84 <HSPI_RAM_MspInit+0x314>
 8005c72:	bf00      	nop
 8005c74:	46020c00 	.word	0x46020c00
 8005c78:	46020800 	.word	0x46020800
 8005c7c:	42021c00 	.word	0x42021c00
 8005c80:	42022000 	.word	0x42022000
 8005c84:	48bf      	ldr	r0, [pc, #764]	; (8005f84 <HSPI_RAM_MspInit+0x614>)
 8005c86:	f004 f8eb 	bl	8009e60 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D2_GPIO_PORT, HSPI_D2_PIN);
 8005c8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005c8e:	48bd      	ldr	r0, [pc, #756]	; (8005f84 <HSPI_RAM_MspInit+0x614>)
 8005c90:	f004 f8e6 	bl	8009e60 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D3_GPIO_PORT, HSPI_D3_PIN);
 8005c94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c98:	48ba      	ldr	r0, [pc, #744]	; (8005f84 <HSPI_RAM_MspInit+0x614>)
 8005c9a:	f004 f8e1 	bl	8009e60 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D4_GPIO_PORT, HSPI_D4_PIN);
 8005c9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005ca2:	48b8      	ldr	r0, [pc, #736]	; (8005f84 <HSPI_RAM_MspInit+0x614>)
 8005ca4:	f004 f8dc 	bl	8009e60 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D5_GPIO_PORT, HSPI_D5_PIN);
 8005ca8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005cac:	48b5      	ldr	r0, [pc, #724]	; (8005f84 <HSPI_RAM_MspInit+0x614>)
 8005cae:	f004 f8d7 	bl	8009e60 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D6_GPIO_PORT, HSPI_D6_PIN);
 8005cb2:	2101      	movs	r1, #1
 8005cb4:	48b4      	ldr	r0, [pc, #720]	; (8005f88 <HSPI_RAM_MspInit+0x618>)
 8005cb6:	f004 f8d3 	bl	8009e60 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D7_GPIO_PORT, HSPI_D7_PIN);
 8005cba:	2102      	movs	r1, #2
 8005cbc:	48b2      	ldr	r0, [pc, #712]	; (8005f88 <HSPI_RAM_MspInit+0x618>)
 8005cbe:	f004 f8cf 	bl	8009e60 <HAL_GPIO_EnableHighSPeedLowVoltage>

  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D8_GPIO_PORT, HSPI_D8_PIN);
 8005cc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005cc6:	48b0      	ldr	r0, [pc, #704]	; (8005f88 <HSPI_RAM_MspInit+0x618>)
 8005cc8:	f004 f8ca 	bl	8009e60 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D9_GPIO_PORT, HSPI_D9_PIN);
 8005ccc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005cd0:	48ad      	ldr	r0, [pc, #692]	; (8005f88 <HSPI_RAM_MspInit+0x618>)
 8005cd2:	f004 f8c5 	bl	8009e60 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D10_GPIO_PORT, HSPI_D10_PIN);
 8005cd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005cda:	48ab      	ldr	r0, [pc, #684]	; (8005f88 <HSPI_RAM_MspInit+0x618>)
 8005cdc:	f004 f8c0 	bl	8009e60 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D11_GPIO_PORT, HSPI_D11_PIN);
 8005ce0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005ce4:	48a8      	ldr	r0, [pc, #672]	; (8005f88 <HSPI_RAM_MspInit+0x618>)
 8005ce6:	f004 f8bb 	bl	8009e60 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D12_GPIO_PORT, HSPI_D12_PIN);
 8005cea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005cee:	48a6      	ldr	r0, [pc, #664]	; (8005f88 <HSPI_RAM_MspInit+0x618>)
 8005cf0:	f004 f8b6 	bl	8009e60 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D13_GPIO_PORT, HSPI_D13_PIN);
 8005cf4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005cf8:	48a3      	ldr	r0, [pc, #652]	; (8005f88 <HSPI_RAM_MspInit+0x618>)
 8005cfa:	f004 f8b1 	bl	8009e60 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D14_GPIO_PORT, HSPI_D14_PIN);
 8005cfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d02:	48a1      	ldr	r0, [pc, #644]	; (8005f88 <HSPI_RAM_MspInit+0x618>)
 8005d04:	f004 f8ac 	bl	8009e60 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D15_GPIO_PORT, HSPI_D15_PIN);
 8005d08:	2101      	movs	r1, #1
 8005d0a:	48a0      	ldr	r0, [pc, #640]	; (8005f8c <HSPI_RAM_MspInit+0x61c>)
 8005d0c:	f004 f8a8 	bl	8009e60 <HAL_GPIO_EnableHighSPeedLowVoltage>

  /* Reset the HSPI memory interface */
  HSPI_FORCE_RESET();
 8005d10:	4b9f      	ldr	r3, [pc, #636]	; (8005f90 <HSPI_RAM_MspInit+0x620>)
 8005d12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d14:	4a9e      	ldr	r2, [pc, #632]	; (8005f90 <HSPI_RAM_MspInit+0x620>)
 8005d16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d1a:	6693      	str	r3, [r2, #104]	; 0x68
  HSPI_RELEASE_RESET();
 8005d1c:	4b9c      	ldr	r3, [pc, #624]	; (8005f90 <HSPI_RAM_MspInit+0x620>)
 8005d1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d20:	4a9b      	ldr	r2, [pc, #620]	; (8005f90 <HSPI_RAM_MspInit+0x620>)
 8005d22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d26:	6693      	str	r3, [r2, #104]	; 0x68

  /* HSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_CS_PIN;
 8005d28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8005d2e:	2302      	movs	r3, #2
 8005d30:	673b      	str	r3, [r7, #112]	; 0x70
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8005d32:	2300      	movs	r3, #0
 8005d34:	677b      	str	r3, [r7, #116]	; 0x74
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005d36:	2302      	movs	r3, #2
 8005d38:	67bb      	str	r3, [r7, #120]	; 0x78
  GPIO_InitStruct.Alternate = HSPI_CS_PIN_AF;
 8005d3a:	2308      	movs	r3, #8
 8005d3c:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 8005d3e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005d42:	4619      	mov	r1, r3
 8005d44:	488f      	ldr	r0, [pc, #572]	; (8005f84 <HSPI_RAM_MspInit+0x614>)
 8005d46:	f003 fd8b 	bl	8009860 <HAL_GPIO_Init>

  /* HSPI DQS0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_DQS0_PIN;
 8005d4a:	2304      	movs	r3, #4
 8005d4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_DQS0_PIN_AF;
 8005d4e:	2308      	movs	r3, #8
 8005d50:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_DQS0_GPIO_PORT, &GPIO_InitStruct);
 8005d52:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005d56:	4619      	mov	r1, r3
 8005d58:	488b      	ldr	r0, [pc, #556]	; (8005f88 <HSPI_RAM_MspInit+0x618>)
 8005d5a:	f003 fd81 	bl	8009860 <HAL_GPIO_Init>

  /* HSPI DQS1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_DQS1_PIN;
 8005d5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d62:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_DQS1_PIN_AF;
 8005d64:	2308      	movs	r3, #8
 8005d66:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_DQS1_GPIO_PORT, &GPIO_InitStruct);
 8005d68:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	4886      	ldr	r0, [pc, #536]	; (8005f88 <HSPI_RAM_MspInit+0x618>)
 8005d70:	f003 fd76 	bl	8009860 <HAL_GPIO_Init>

  /* HSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_CLK_PIN;
 8005d74:	2308      	movs	r3, #8
 8005d76:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_CLK_PIN_AF;
 8005d78:	2308      	movs	r3, #8
 8005d7a:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 8005d7c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005d80:	4619      	mov	r1, r3
 8005d82:	4881      	ldr	r0, [pc, #516]	; (8005f88 <HSPI_RAM_MspInit+0x618>)
 8005d84:	f003 fd6c 	bl	8009860 <HAL_GPIO_Init>

  /* HSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D0_PIN;
 8005d88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D0_PIN_AF;
 8005d8e:	2308      	movs	r3, #8
 8005d90:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 8005d92:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005d96:	4619      	mov	r1, r3
 8005d98:	487a      	ldr	r0, [pc, #488]	; (8005f84 <HSPI_RAM_MspInit+0x614>)
 8005d9a:	f003 fd61 	bl	8009860 <HAL_GPIO_Init>

  /* HSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D1_PIN;
 8005d9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005da2:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D1_PIN_AF;
 8005da4:	2308      	movs	r3, #8
 8005da6:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 8005da8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005dac:	4619      	mov	r1, r3
 8005dae:	4875      	ldr	r0, [pc, #468]	; (8005f84 <HSPI_RAM_MspInit+0x614>)
 8005db0:	f003 fd56 	bl	8009860 <HAL_GPIO_Init>

  /* HSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D2_PIN;
 8005db4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005db8:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D2_PIN_AF;
 8005dba:	2308      	movs	r3, #8
 8005dbc:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 8005dbe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	486f      	ldr	r0, [pc, #444]	; (8005f84 <HSPI_RAM_MspInit+0x614>)
 8005dc6:	f003 fd4b 	bl	8009860 <HAL_GPIO_Init>

  /* HSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D3_PIN;
 8005dca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005dce:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D3_PIN_AF;
 8005dd0:	2308      	movs	r3, #8
 8005dd2:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 8005dd4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005dd8:	4619      	mov	r1, r3
 8005dda:	486a      	ldr	r0, [pc, #424]	; (8005f84 <HSPI_RAM_MspInit+0x614>)
 8005ddc:	f003 fd40 	bl	8009860 <HAL_GPIO_Init>

  /* HSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D4_PIN;
 8005de0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005de4:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D4_PIN_AF;
 8005de6:	2308      	movs	r3, #8
 8005de8:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 8005dea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005dee:	4619      	mov	r1, r3
 8005df0:	4864      	ldr	r0, [pc, #400]	; (8005f84 <HSPI_RAM_MspInit+0x614>)
 8005df2:	f003 fd35 	bl	8009860 <HAL_GPIO_Init>

  /* HSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D5_PIN;
 8005df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dfa:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D5_PIN_AF;
 8005dfc:	2308      	movs	r3, #8
 8005dfe:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 8005e00:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005e04:	4619      	mov	r1, r3
 8005e06:	485f      	ldr	r0, [pc, #380]	; (8005f84 <HSPI_RAM_MspInit+0x614>)
 8005e08:	f003 fd2a 	bl	8009860 <HAL_GPIO_Init>

  /* HSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D6_PIN;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D6_PIN_AF;
 8005e10:	2308      	movs	r3, #8
 8005e12:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 8005e14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005e18:	4619      	mov	r1, r3
 8005e1a:	485b      	ldr	r0, [pc, #364]	; (8005f88 <HSPI_RAM_MspInit+0x618>)
 8005e1c:	f003 fd20 	bl	8009860 <HAL_GPIO_Init>

  /* HSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D7_PIN;
 8005e20:	2302      	movs	r3, #2
 8005e22:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D7_PIN_AF;
 8005e24:	2308      	movs	r3, #8
 8005e26:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 8005e28:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	4856      	ldr	r0, [pc, #344]	; (8005f88 <HSPI_RAM_MspInit+0x618>)
 8005e30:	f003 fd16 	bl	8009860 <HAL_GPIO_Init>

  /* HSPI D8 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D8_PIN;
 8005e34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e38:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D8_PIN_AF;
 8005e3a:	2308      	movs	r3, #8
 8005e3c:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D8_GPIO_PORT, &GPIO_InitStruct);
 8005e3e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005e42:	4619      	mov	r1, r3
 8005e44:	4850      	ldr	r0, [pc, #320]	; (8005f88 <HSPI_RAM_MspInit+0x618>)
 8005e46:	f003 fd0b 	bl	8009860 <HAL_GPIO_Init>

  /* HSPI D9 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D9_PIN;
 8005e4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e4e:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D9_PIN_AF;
 8005e50:	2308      	movs	r3, #8
 8005e52:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D9_GPIO_PORT, &GPIO_InitStruct);
 8005e54:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005e58:	4619      	mov	r1, r3
 8005e5a:	484b      	ldr	r0, [pc, #300]	; (8005f88 <HSPI_RAM_MspInit+0x618>)
 8005e5c:	f003 fd00 	bl	8009860 <HAL_GPIO_Init>

  /* HSPI D10 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D10_PIN;
 8005e60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e64:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D10_PIN_AF;
 8005e66:	2308      	movs	r3, #8
 8005e68:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D10_GPIO_PORT, &GPIO_InitStruct);
 8005e6a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005e6e:	4619      	mov	r1, r3
 8005e70:	4845      	ldr	r0, [pc, #276]	; (8005f88 <HSPI_RAM_MspInit+0x618>)
 8005e72:	f003 fcf5 	bl	8009860 <HAL_GPIO_Init>

  /* HSPI D11 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D11_PIN;
 8005e76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e7a:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D11_PIN_AF;
 8005e7c:	2308      	movs	r3, #8
 8005e7e:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D11_GPIO_PORT, &GPIO_InitStruct);
 8005e80:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005e84:	4619      	mov	r1, r3
 8005e86:	4840      	ldr	r0, [pc, #256]	; (8005f88 <HSPI_RAM_MspInit+0x618>)
 8005e88:	f003 fcea 	bl	8009860 <HAL_GPIO_Init>

  /* HSPI D12 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D12_PIN;
 8005e8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e90:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D12_PIN_AF;
 8005e92:	2308      	movs	r3, #8
 8005e94:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D12_GPIO_PORT, &GPIO_InitStruct);
 8005e96:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	483a      	ldr	r0, [pc, #232]	; (8005f88 <HSPI_RAM_MspInit+0x618>)
 8005e9e:	f003 fcdf 	bl	8009860 <HAL_GPIO_Init>

  /* HSPI D13 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D13_PIN;
 8005ea2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005ea6:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D13_PIN_AF;
 8005ea8:	2308      	movs	r3, #8
 8005eaa:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D13_GPIO_PORT, &GPIO_InitStruct);
 8005eac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	4835      	ldr	r0, [pc, #212]	; (8005f88 <HSPI_RAM_MspInit+0x618>)
 8005eb4:	f003 fcd4 	bl	8009860 <HAL_GPIO_Init>

  /* HSPI D14 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D14_PIN;
 8005eb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ebc:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D14_PIN_AF;
 8005ebe:	2308      	movs	r3, #8
 8005ec0:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D14_GPIO_PORT, &GPIO_InitStruct);
 8005ec2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	482f      	ldr	r0, [pc, #188]	; (8005f88 <HSPI_RAM_MspInit+0x618>)
 8005eca:	f003 fcc9 	bl	8009860 <HAL_GPIO_Init>

  /* HSPI D15 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D15_PIN;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D15_PIN_AF;
 8005ed2:	2308      	movs	r3, #8
 8005ed4:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D15_GPIO_PORT, &GPIO_InitStruct);
 8005ed6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005eda:	4619      	mov	r1, r3
 8005edc:	482b      	ldr	r0, [pc, #172]	; (8005f8c <HSPI_RAM_MspInit+0x61c>)
 8005ede:	f003 fcbf 	bl	8009860 <HAL_GPIO_Init>

  hdmatx.Init.Request = GPDMA1_REQUEST_HSPI1;
 8005ee2:	4b2c      	ldr	r3, [pc, #176]	; (8005f94 <HSPI_RAM_MspInit+0x624>)
 8005ee4:	2272      	movs	r2, #114	; 0x72
 8005ee6:	605a      	str	r2, [r3, #4]
  hdmatx.Instance = GPDMA1_Channel12;
 8005ee8:	4b2a      	ldr	r3, [pc, #168]	; (8005f94 <HSPI_RAM_MspInit+0x624>)
 8005eea:	4a2b      	ldr	r2, [pc, #172]	; (8005f98 <HSPI_RAM_MspInit+0x628>)
 8005eec:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriority(GPDMA1_Channel12_IRQn, 0x00, 0);
 8005eee:	2200      	movs	r2, #0
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	2054      	movs	r0, #84	; 0x54
 8005ef4:	f001 fb0c 	bl	8007510 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(GPDMA1_Channel12_IRQn);
 8005ef8:	2054      	movs	r0, #84	; 0x54
 8005efa:	f001 fb23 	bl	8007544 <HAL_NVIC_EnableIRQ>

  /* Configure the HSPI DMA transmit */
  hdmatx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8005efe:	4b25      	ldr	r3, [pc, #148]	; (8005f94 <HSPI_RAM_MspInit+0x624>)
 8005f00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f04:	60da      	str	r2, [r3, #12]
  hdmatx.Init.SrcInc              = DMA_SINC_INCREMENTED;
 8005f06:	4b23      	ldr	r3, [pc, #140]	; (8005f94 <HSPI_RAM_MspInit+0x624>)
 8005f08:	2208      	movs	r2, #8
 8005f0a:	611a      	str	r2, [r3, #16]
  hdmatx.Init.DestInc             = DMA_DINC_FIXED;
 8005f0c:	4b21      	ldr	r3, [pc, #132]	; (8005f94 <HSPI_RAM_MspInit+0x624>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	615a      	str	r2, [r3, #20]
  hdmatx.Init.Priority            = DMA_HIGH_PRIORITY;
 8005f12:	4b20      	ldr	r3, [pc, #128]	; (8005f94 <HSPI_RAM_MspInit+0x624>)
 8005f14:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005f18:	621a      	str	r2, [r3, #32]
  hdmatx.Init.SrcBurstLength      = 1;
 8005f1a:	4b1e      	ldr	r3, [pc, #120]	; (8005f94 <HSPI_RAM_MspInit+0x624>)
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	625a      	str	r2, [r3, #36]	; 0x24
  hdmatx.Init.DestBurstLength     = 1;
 8005f20:	4b1c      	ldr	r3, [pc, #112]	; (8005f94 <HSPI_RAM_MspInit+0x624>)
 8005f22:	2201      	movs	r2, #1
 8005f24:	629a      	str	r2, [r3, #40]	; 0x28
  hdmatx.Init.TransferEventMode   = DMA_TCEM_BLOCK_TRANSFER;
 8005f26:	4b1b      	ldr	r3, [pc, #108]	; (8005f94 <HSPI_RAM_MspInit+0x624>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hdmatx.Init.SrcDataWidth        = DMA_SRC_DATAWIDTH_WORD ;
 8005f2c:	4b19      	ldr	r3, [pc, #100]	; (8005f94 <HSPI_RAM_MspInit+0x624>)
 8005f2e:	2202      	movs	r2, #2
 8005f30:	619a      	str	r2, [r3, #24]
  hdmatx.Init.DestDataWidth       = DMA_DEST_DATAWIDTH_WORD  ;
 8005f32:	4b18      	ldr	r3, [pc, #96]	; (8005f94 <HSPI_RAM_MspInit+0x624>)
 8005f34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005f38:	61da      	str	r2, [r3, #28]

  /* Enable the GPDMA clock */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8005f3a:	4b15      	ldr	r3, [pc, #84]	; (8005f90 <HSPI_RAM_MspInit+0x620>)
 8005f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f40:	4a13      	ldr	r2, [pc, #76]	; (8005f90 <HSPI_RAM_MspInit+0x620>)
 8005f42:	f043 0301 	orr.w	r3, r3, #1
 8005f46:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8005f4a:	4b11      	ldr	r3, [pc, #68]	; (8005f90 <HSPI_RAM_MspInit+0x620>)
 8005f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f50:	f003 0301 	and.w	r3, r3, #1
 8005f54:	60fb      	str	r3, [r7, #12]
 8005f56:	68fb      	ldr	r3, [r7, #12]

  /* Initialize the DMA channel */
  __HAL_LINKDMA(hhspi, hdmatx, hdmatx);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a0e      	ldr	r2, [pc, #56]	; (8005f94 <HSPI_RAM_MspInit+0x624>)
 8005f5c:	64da      	str	r2, [r3, #76]	; 0x4c
 8005f5e:	4a0d      	ldr	r2, [pc, #52]	; (8005f94 <HSPI_RAM_MspInit+0x624>)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	65d3      	str	r3, [r2, #92]	; 0x5c
  HAL_DMA_Init(&hdmatx);
 8005f64:	480b      	ldr	r0, [pc, #44]	; (8005f94 <HSPI_RAM_MspInit+0x624>)
 8005f66:	f001 fcf1 	bl	800794c <HAL_DMA_Init>

  hdmarx.Init.Request = GPDMA1_REQUEST_HSPI1;
 8005f6a:	4b0c      	ldr	r3, [pc, #48]	; (8005f9c <HSPI_RAM_MspInit+0x62c>)
 8005f6c:	2272      	movs	r2, #114	; 0x72
 8005f6e:	605a      	str	r2, [r3, #4]
  hdmarx.Instance = GPDMA1_Channel7;
 8005f70:	4b0a      	ldr	r3, [pc, #40]	; (8005f9c <HSPI_RAM_MspInit+0x62c>)
 8005f72:	4a0b      	ldr	r2, [pc, #44]	; (8005fa0 <HSPI_RAM_MspInit+0x630>)
 8005f74:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriority(GPDMA1_Channel7_IRQn, 0x00, 0);
 8005f76:	2200      	movs	r2, #0
 8005f78:	2100      	movs	r1, #0
 8005f7a:	2024      	movs	r0, #36	; 0x24
 8005f7c:	f001 fac8 	bl	8007510 <HAL_NVIC_SetPriority>
 8005f80:	e010      	b.n	8005fa4 <HSPI_RAM_MspInit+0x634>
 8005f82:	bf00      	nop
 8005f84:	42021c00 	.word	0x42021c00
 8005f88:	42022000 	.word	0x42022000
 8005f8c:	42022400 	.word	0x42022400
 8005f90:	46020c00 	.word	0x46020c00
 8005f94:	20197114 	.word	0x20197114
 8005f98:	40020650 	.word	0x40020650
 8005f9c:	2019718c 	.word	0x2019718c
 8005fa0:	400203d0 	.word	0x400203d0
  HAL_NVIC_EnableIRQ(GPDMA1_Channel7_IRQn);
 8005fa4:	2024      	movs	r0, #36	; 0x24
 8005fa6:	f001 facd 	bl	8007544 <HAL_NVIC_EnableIRQ>

  /* Configure the HSPI DMA receive */
  hdmarx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8005faa:	4b25      	ldr	r3, [pc, #148]	; (8006040 <HSPI_RAM_MspInit+0x6d0>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	60da      	str	r2, [r3, #12]
  hdmarx.Init.SrcInc              = DMA_SINC_FIXED;
 8005fb0:	4b23      	ldr	r3, [pc, #140]	; (8006040 <HSPI_RAM_MspInit+0x6d0>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	611a      	str	r2, [r3, #16]
  hdmarx.Init.DestInc             = DMA_DINC_INCREMENTED;
 8005fb6:	4b22      	ldr	r3, [pc, #136]	; (8006040 <HSPI_RAM_MspInit+0x6d0>)
 8005fb8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005fbc:	615a      	str	r2, [r3, #20]
  hdmarx.Init.Priority            = DMA_HIGH_PRIORITY;
 8005fbe:	4b20      	ldr	r3, [pc, #128]	; (8006040 <HSPI_RAM_MspInit+0x6d0>)
 8005fc0:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005fc4:	621a      	str	r2, [r3, #32]
  hdmarx.Init.SrcBurstLength      = 1;
 8005fc6:	4b1e      	ldr	r3, [pc, #120]	; (8006040 <HSPI_RAM_MspInit+0x6d0>)
 8005fc8:	2201      	movs	r2, #1
 8005fca:	625a      	str	r2, [r3, #36]	; 0x24
  hdmarx.Init.DestBurstLength     = 1;
 8005fcc:	4b1c      	ldr	r3, [pc, #112]	; (8006040 <HSPI_RAM_MspInit+0x6d0>)
 8005fce:	2201      	movs	r2, #1
 8005fd0:	629a      	str	r2, [r3, #40]	; 0x28
  hdmarx.Init.TransferEventMode   = DMA_TCEM_BLOCK_TRANSFER;
 8005fd2:	4b1b      	ldr	r3, [pc, #108]	; (8006040 <HSPI_RAM_MspInit+0x6d0>)
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	631a      	str	r2, [r3, #48]	; 0x30
  hdmarx.Init.SrcDataWidth        = DMA_SRC_DATAWIDTH_WORD ;
 8005fd8:	4b19      	ldr	r3, [pc, #100]	; (8006040 <HSPI_RAM_MspInit+0x6d0>)
 8005fda:	2202      	movs	r2, #2
 8005fdc:	619a      	str	r2, [r3, #24]
  hdmarx.Init.DestDataWidth       = DMA_DEST_DATAWIDTH_WORD  ;
 8005fde:	4b18      	ldr	r3, [pc, #96]	; (8006040 <HSPI_RAM_MspInit+0x6d0>)
 8005fe0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005fe4:	61da      	str	r2, [r3, #28]

  /* Enable the GPDMA clock */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8005fe6:	4b17      	ldr	r3, [pc, #92]	; (8006044 <HSPI_RAM_MspInit+0x6d4>)
 8005fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fec:	4a15      	ldr	r2, [pc, #84]	; (8006044 <HSPI_RAM_MspInit+0x6d4>)
 8005fee:	f043 0301 	orr.w	r3, r3, #1
 8005ff2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8005ff6:	4b13      	ldr	r3, [pc, #76]	; (8006044 <HSPI_RAM_MspInit+0x6d4>)
 8005ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	60bb      	str	r3, [r7, #8]
 8006002:	68bb      	ldr	r3, [r7, #8]

  /* Initialize the DMA channel */
  __HAL_LINKDMA(hhspi, hdmarx, hdmarx);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a0e      	ldr	r2, [pc, #56]	; (8006040 <HSPI_RAM_MspInit+0x6d0>)
 8006008:	651a      	str	r2, [r3, #80]	; 0x50
 800600a:	4a0d      	ldr	r2, [pc, #52]	; (8006040 <HSPI_RAM_MspInit+0x6d0>)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	65d3      	str	r3, [r2, #92]	; 0x5c
  HAL_DMA_Init(&hdmarx);
 8006010:	480b      	ldr	r0, [pc, #44]	; (8006040 <HSPI_RAM_MspInit+0x6d0>)
 8006012:	f001 fc9b 	bl	800794c <HAL_DMA_Init>

  /* Enable and set priority of the HSPI and DMA interrupts */
  HAL_NVIC_SetPriority(HSPI1_IRQn, BSP_HSPI_RAM_IT_PRIORITY, 0);
 8006016:	2200      	movs	r2, #0
 8006018:	210f      	movs	r1, #15
 800601a:	2083      	movs	r0, #131	; 0x83
 800601c:	f001 fa78 	bl	8007510 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(HSPI_RAM_DMAx_IRQn, BSP_HSPI_RAM_DMA_IT_PRIORITY, 0);
 8006020:	2200      	movs	r2, #0
 8006022:	210f      	movs	r1, #15
 8006024:	201f      	movs	r0, #31
 8006026:	f001 fa73 	bl	8007510 <HAL_NVIC_SetPriority>

  HAL_NVIC_EnableIRQ(HSPI1_IRQn);
 800602a:	2083      	movs	r0, #131	; 0x83
 800602c:	f001 fa8a 	bl	8007544 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(HSPI_RAM_DMAx_IRQn);
 8006030:	201f      	movs	r0, #31
 8006032:	f001 fa87 	bl	8007544 <HAL_NVIC_EnableIRQ>
}
 8006036:	bf00      	nop
 8006038:	3780      	adds	r7, #128	; 0x80
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	2019718c 	.word	0x2019718c
 8006044:	46020c00 	.word	0x46020c00

08006048 <BSP_OSPI_NOR_Init>:
  * @param  Instance   OSPI Instance
  * @param  Init       OSPI Init structure
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Init(uint32_t Instance, BSP_OSPI_NOR_Init_t *Init)
{
 8006048:	b590      	push	{r4, r7, lr}
 800604a:	b095      	sub	sp, #84	; 0x54
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  int32_t ret;
  BSP_OSPI_NOR_Info_t pInfo;
  MX_OSPI_InitTypeDef ospi_init;

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d003      	beq.n	8006060 <BSP_OSPI_NOR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006058:	f06f 0301 	mvn.w	r3, #1
 800605c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800605e:	e095      	b.n	800618c <BSP_OSPI_NOR_Init+0x144>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 8006060:	494d      	ldr	r1, [pc, #308]	; (8006198 <BSP_OSPI_NOR_Init+0x150>)
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	4613      	mov	r3, r2
 8006066:	005b      	lsls	r3, r3, #1
 8006068:	4413      	add	r3, r2
 800606a:	440b      	add	r3, r1
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	f040 808a 	bne.w	8006188 <BSP_OSPI_NOR_Init+0x140>
    {
#if (USE_HAL_XSPI_REGISTER_CALLBACKS == 0)
      /* Msp OSPI initialization */
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	4613      	mov	r3, r2
 8006078:	005b      	lsls	r3, r3, #1
 800607a:	4413      	add	r3, r2
 800607c:	015b      	lsls	r3, r3, #5
 800607e:	4a47      	ldr	r2, [pc, #284]	; (800619c <BSP_OSPI_NOR_Init+0x154>)
 8006080:	4413      	add	r3, r2
 8006082:	4618      	mov	r0, r3
 8006084:	f000 fa26 	bl	80064d4 <OSPI_NOR_MspInit>
        }
      }
#endif /* USE_HAL_XSPI_REGISTER_CALLBACKS */

      /* Get Flash information of one memory */
      (void)MX25UM51245G_GetFlashInfo(&pInfo);
 8006088:	f107 031c 	add.w	r3, r7, #28
 800608c:	4618      	mov	r0, r3
 800608e:	f7fd fd53 	bl	8003b38 <MX25UM51245G_GetFlashInfo>

      /* Fill config structure */
      ospi_init.ClockPrescaler = 1;
 8006092:	2301      	movs	r3, #1
 8006094:	613b      	str	r3, [r7, #16]
      ospi_init.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800609a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800609c:	fa93 f3a3 	rbit	r3, r3
 80060a0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80060a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060a4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80060a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <BSP_OSPI_NOR_Init+0x68>
    return 32U;
 80060ac:	2320      	movs	r3, #32
 80060ae:	e003      	b.n	80060b8 <BSP_OSPI_NOR_Init+0x70>
  return __builtin_clz(value);
 80060b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060b2:	fab3 f383 	clz	r3, r3
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	60fb      	str	r3, [r7, #12]
      ospi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 80060ba:	2300      	movs	r3, #0
 80060bc:	617b      	str	r3, [r7, #20]
      ospi_init.TransferRate   = (uint32_t) Init->TransferRate;
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	785b      	ldrb	r3, [r3, #1]
 80060c2:	61bb      	str	r3, [r7, #24]

      /* STM32 OSPI interface initialization */
      if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_init) != HAL_OK)
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	4613      	mov	r3, r2
 80060c8:	005b      	lsls	r3, r3, #1
 80060ca:	4413      	add	r3, r2
 80060cc:	015b      	lsls	r3, r3, #5
 80060ce:	4a33      	ldr	r2, [pc, #204]	; (800619c <BSP_OSPI_NOR_Init+0x154>)
 80060d0:	4413      	add	r3, r2
 80060d2:	f107 020c 	add.w	r2, r7, #12
 80060d6:	4611      	mov	r1, r2
 80060d8:	4618      	mov	r0, r3
 80060da:	f000 f861 	bl	80061a0 <MX_OSPI_NOR_Init>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d003      	beq.n	80060ec <BSP_OSPI_NOR_Init+0xa4>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 80060e4:	f06f 0303 	mvn.w	r3, #3
 80060e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060ea:	e04f      	b.n	800618c <BSP_OSPI_NOR_Init+0x144>
      }
      /* OSPI Delay Block enable */
      else if (OSPI_DLYB_Enable(&hospi_nor[Instance]) != BSP_ERROR_NONE)
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	4613      	mov	r3, r2
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	4413      	add	r3, r2
 80060f4:	015b      	lsls	r3, r3, #5
 80060f6:	4a29      	ldr	r2, [pc, #164]	; (800619c <BSP_OSPI_NOR_Init+0x154>)
 80060f8:	4413      	add	r3, r2
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 f9a0 	bl	8006440 <OSPI_DLYB_Enable>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d003      	beq.n	800610e <BSP_OSPI_NOR_Init+0xc6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006106:	f06f 0304 	mvn.w	r3, #4
 800610a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800610c:	e03e      	b.n	800618c <BSP_OSPI_NOR_Init+0x144>
      }
      /* OSPI memory reset */
      else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fb72 	bl	80067f8 <OSPI_NOR_ResetMemory>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <BSP_OSPI_NOR_Init+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800611a:	f06f 0304 	mvn.w	r3, #4
 800611e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006120:	e034      	b.n	800618c <BSP_OSPI_NOR_Init+0x144>
      }
      /* Check if memory is ready */
      else if (MX25UM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	4613      	mov	r3, r2
 8006126:	005b      	lsls	r3, r3, #1
 8006128:	4413      	add	r3, r2
 800612a:	015b      	lsls	r3, r3, #5
 800612c:	4a1b      	ldr	r2, [pc, #108]	; (800619c <BSP_OSPI_NOR_Init+0x154>)
 800612e:	1898      	adds	r0, r3, r2
 8006130:	4919      	ldr	r1, [pc, #100]	; (8006198 <BSP_OSPI_NOR_Init+0x150>)
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	4613      	mov	r3, r2
 8006136:	005b      	lsls	r3, r3, #1
 8006138:	4413      	add	r3, r2
 800613a:	440b      	add	r3, r1
 800613c:	3301      	adds	r3, #1
 800613e:	7819      	ldrb	r1, [r3, #0]
 8006140:	4c15      	ldr	r4, [pc, #84]	; (8006198 <BSP_OSPI_NOR_Init+0x150>)
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	4613      	mov	r3, r2
 8006146:	005b      	lsls	r3, r3, #1
 8006148:	4413      	add	r3, r2
 800614a:	4423      	add	r3, r4
 800614c:	3302      	adds	r3, #2
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	461a      	mov	r2, r3
 8006152:	f7fd fd20 	bl	8003b96 <MX25UM51245G_AutoPollingMemReady>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d003      	beq.n	8006164 <BSP_OSPI_NOR_Init+0x11c>
                                                Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800615c:	f06f 0304 	mvn.w	r3, #4
 8006160:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006162:	e013      	b.n	800618c <BSP_OSPI_NOR_Init+0x144>
      }
      /* Configure the memory */
      else if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	7819      	ldrb	r1, [r3, #0]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	785b      	ldrb	r3, [r3, #1]
 800616c:	461a      	mov	r2, r3
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f8da 	bl	8006328 <BSP_OSPI_NOR_ConfigFlash>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <BSP_OSPI_NOR_Init+0x13a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800617a:	f06f 0304 	mvn.w	r3, #4
 800617e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006180:	e004      	b.n	800618c <BSP_OSPI_NOR_Init+0x144>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006182:	2300      	movs	r3, #0
 8006184:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006186:	e001      	b.n	800618c <BSP_OSPI_NOR_Init+0x144>
      }
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8006188:	2300      	movs	r3, #0
 800618a:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  /* Return BSP status */
  return ret;
 800618c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800618e:	4618      	mov	r0, r3
 8006190:	3754      	adds	r7, #84	; 0x54
 8006192:	46bd      	mov	sp, r7
 8006194:	bd90      	pop	{r4, r7, pc}
 8006196:	bf00      	nop
 8006198:	20197264 	.word	0x20197264
 800619c:	20197204 	.word	0x20197204

080061a0 <MX_OSPI_NOR_Init>:
  * @param  hospi          OSPI handle
  * @param  Init           OSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_OSPI_NOR_Init(XSPI_HandleTypeDef *hospi, MX_OSPI_InitTypeDef *Init)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  /* OctoSPI initialization */
  hospi->Instance = OCTOSPI1;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a20      	ldr	r2, [pc, #128]	; (8006230 <MX_OSPI_NOR_Init+0x90>)
 80061ae:	601a      	str	r2, [r3, #0]

  hospi->Init.FifoThresholdByte       = 4;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2204      	movs	r2, #4
 80061b4:	605a      	str	r2, [r3, #4]
  hospi->Init.MemoryMode              = HAL_XSPI_SINGLE_MEM;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	609a      	str	r2, [r3, #8]
  hospi->Init.MemorySize              = Init->MemorySize; /* 512 MBits */
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	611a      	str	r2, [r3, #16]
  hospi->Init.ChipSelectHighTimeCycle = 2;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2202      	movs	r2, #2
 80061c8:	615a      	str	r2, [r3, #20]
  hospi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	619a      	str	r2, [r3, #24]
  hospi->Init.ClockMode               = HAL_XSPI_CLOCK_MODE_0;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	61da      	str	r2, [r3, #28]
  hospi->Init.WrapSize                = HAL_XSPI_WRAP_NOT_SUPPORTED;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	621a      	str	r2, [r3, #32]
  hospi->Init.ClockPrescaler          = Init->ClockPrescaler;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	625a      	str	r2, [r3, #36]	; 0x24
  hospi->Init.SampleShifting          = Init->SampleShifting;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	689a      	ldr	r2, [r3, #8]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	629a      	str	r2, [r3, #40]	; 0x28
  hospi->Init.ChipSelectBoundary      = 0;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	631a      	str	r2, [r3, #48]	; 0x30
  hospi->Init.DelayBlockBypass        = HAL_XSPI_DELAY_BLOCK_ON;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	635a      	str	r2, [r3, #52]	; 0x34

  if (Init->TransferRate == (uint32_t) BSP_OSPI_NOR_DTR_TRANSFER)
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d108      	bne.n	8006212 <MX_OSPI_NOR_Init+0x72>
  {
    hospi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006206:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800620e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006210:	e005      	b.n	800621e <MX_OSPI_NOR_Init+0x7e>
  }
  else
  {
    hospi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  return HAL_XSPI_Init(hospi);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f00b fd02 	bl	8011c28 <HAL_XSPI_Init>
 8006224:	4603      	mov	r3, r0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	420d1400 	.word	0x420d1400

08006234 <BSP_OSPI_NOR_GetInfo>:
  * @param  Instance  OSPI instance
  * @param  pInfo     pointer on the configuration structure
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_GetInfo(uint32_t Instance, BSP_OSPI_NOR_Info_t *pInfo)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800623e:	2300      	movs	r3, #0
 8006240:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d003      	beq.n	8006250 <BSP_OSPI_NOR_GetInfo+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006248:	f06f 0301 	mvn.w	r3, #1
 800624c:	60fb      	str	r3, [r7, #12]
 800624e:	e002      	b.n	8006256 <BSP_OSPI_NOR_GetInfo+0x22>
  }
  else
  {
    (void)MX25UM51245G_GetFlashInfo(pInfo);
 8006250:	6838      	ldr	r0, [r7, #0]
 8006252:	f7fd fc71 	bl	8003b38 <MX25UM51245G_GetFlashInfo>
  }

  /* Return BSP status */
  return ret;
 8006256:	68fb      	ldr	r3, [r7, #12]
}
 8006258:	4618      	mov	r0, r3
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  * @brief  Configure the OSPI in memory-mapped mode
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_EnableMemoryMappedMode(uint32_t Instance)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006268:	2300      	movs	r3, #0
 800626a:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d003      	beq.n	800627a <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006272:	f06f 0301 	mvn.w	r3, #1
 8006276:	60fb      	str	r3, [r7, #12]
 8006278:	e04d      	b.n	8006316 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xb6>
  }
  else
  {
    if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 800627a:	4929      	ldr	r1, [pc, #164]	; (8006320 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc0>)
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	4613      	mov	r3, r2
 8006280:	005b      	lsls	r3, r3, #1
 8006282:	4413      	add	r3, r2
 8006284:	440b      	add	r3, r1
 8006286:	3302      	adds	r3, #2
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d122      	bne.n	80062d4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x74>
    {
      if (MX25UM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	4613      	mov	r3, r2
 8006292:	005b      	lsls	r3, r3, #1
 8006294:	4413      	add	r3, r2
 8006296:	015b      	lsls	r3, r3, #5
 8006298:	4a22      	ldr	r2, [pc, #136]	; (8006324 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc4>)
 800629a:	1898      	adds	r0, r3, r2
 800629c:	4920      	ldr	r1, [pc, #128]	; (8006320 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc0>)
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	4613      	mov	r3, r2
 80062a2:	005b      	lsls	r3, r3, #1
 80062a4:	4413      	add	r3, r2
 80062a6:	440b      	add	r3, r1
 80062a8:	3301      	adds	r3, #1
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	2201      	movs	r2, #1
 80062ae:	4619      	mov	r1, r3
 80062b0:	f7fd fd23 	bl	8003cfa <MX25UM51245G_EnableSTRMemoryMappedMode>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d003      	beq.n	80062c2 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x62>
                                                 MX25UM51245G_4BYTES_SIZE) != MX25UM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80062ba:	f06f 0304 	mvn.w	r3, #4
 80062be:	60fb      	str	r3, [r7, #12]
 80062c0:	e029      	b.n	8006316 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xb6>
      }
      else /* Update OSPI context if all operations are well done */
      {
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 80062c2:	4917      	ldr	r1, [pc, #92]	; (8006320 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc0>)
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	4613      	mov	r3, r2
 80062c8:	005b      	lsls	r3, r3, #1
 80062ca:	4413      	add	r3, r2
 80062cc:	440b      	add	r3, r1
 80062ce:	2202      	movs	r2, #2
 80062d0:	701a      	strb	r2, [r3, #0]
 80062d2:	e020      	b.n	8006316 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xb6>
      }
    }
    else
    {
      if (MX25UM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance],
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	4613      	mov	r3, r2
 80062d8:	005b      	lsls	r3, r3, #1
 80062da:	4413      	add	r3, r2
 80062dc:	015b      	lsls	r3, r3, #5
 80062de:	4a11      	ldr	r2, [pc, #68]	; (8006324 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc4>)
 80062e0:	1898      	adds	r0, r3, r2
 80062e2:	490f      	ldr	r1, [pc, #60]	; (8006320 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc0>)
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	4613      	mov	r3, r2
 80062e8:	005b      	lsls	r3, r3, #1
 80062ea:	4413      	add	r3, r2
 80062ec:	440b      	add	r3, r1
 80062ee:	3301      	adds	r3, #1
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	4619      	mov	r1, r3
 80062f4:	f7fd fdab 	bl	8003e4e <MX25UM51245G_EnableDTRMemoryMappedMode>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d003      	beq.n	8006306 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa6>
                                                 Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25UM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80062fe:	f06f 0304 	mvn.w	r3, #4
 8006302:	60fb      	str	r3, [r7, #12]
 8006304:	e007      	b.n	8006316 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xb6>
      }
      else /* Update OSPI context if all operations are well done */
      {
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8006306:	4906      	ldr	r1, [pc, #24]	; (8006320 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc0>)
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	4613      	mov	r3, r2
 800630c:	005b      	lsls	r3, r3, #1
 800630e:	4413      	add	r3, r2
 8006310:	440b      	add	r3, r1
 8006312:	2202      	movs	r2, #2
 8006314:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8006316:	68fb      	ldr	r3, [r7, #12]
}
 8006318:	4618      	mov	r0, r3
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	20197264 	.word	0x20197264
 8006324:	20197204 	.word	0x20197204

08006328 <BSP_OSPI_NOR_ConfigFlash>:
  * @param  Mode      OSPI mode
  * @param  Rate      OSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_ConfigFlash(uint32_t Instance, BSP_OSPI_NOR_Interface_t Mode, BSP_OSPI_NOR_Transfer_t Rate)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	460b      	mov	r3, r1
 8006332:	70fb      	strb	r3, [r7, #3]
 8006334:	4613      	mov	r3, r2
 8006336:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8006338:	2300      	movs	r3, #0
 800633a:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <BSP_OSPI_NOR_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006342:	f06f 0301 	mvn.w	r3, #1
 8006346:	60fb      	str	r3, [r7, #12]
 8006348:	e072      	b.n	8006430 <BSP_OSPI_NOR_ConfigFlash+0x108>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 800634a:	493c      	ldr	r1, [pc, #240]	; (800643c <BSP_OSPI_NOR_ConfigFlash+0x114>)
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	4613      	mov	r3, r2
 8006350:	005b      	lsls	r3, r3, #1
 8006352:	4413      	add	r3, r2
 8006354:	440b      	add	r3, r1
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	2b02      	cmp	r3, #2
 800635a:	d103      	bne.n	8006364 <BSP_OSPI_NOR_ConfigFlash+0x3c>
    {
      ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 800635c:	f06f 0315 	mvn.w	r3, #21
 8006360:	60fb      	str	r3, [r7, #12]
 8006362:	e065      	b.n	8006430 <BSP_OSPI_NOR_ConfigFlash+0x108>
    }
    else
    {
      /* Setup Flash interface ***************************************************/
      switch (Ospi_Nor_Ctx[Instance].InterfaceMode)
 8006364:	4935      	ldr	r1, [pc, #212]	; (800643c <BSP_OSPI_NOR_ConfigFlash+0x114>)
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	4613      	mov	r3, r2
 800636a:	005b      	lsls	r3, r3, #1
 800636c:	4413      	add	r3, r2
 800636e:	440b      	add	r3, r1
 8006370:	3301      	adds	r3, #1
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d12b      	bne.n	80063d0 <BSP_OSPI_NOR_ConfigFlash+0xa8>
      {
        case BSP_OSPI_NOR_OPI_MODE :  /* 8-8-8 commands */
          if ((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 8006378:	78fb      	ldrb	r3, [r7, #3]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d10a      	bne.n	8006394 <BSP_OSPI_NOR_ConfigFlash+0x6c>
 800637e:	492f      	ldr	r1, [pc, #188]	; (800643c <BSP_OSPI_NOR_ConfigFlash+0x114>)
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	4613      	mov	r3, r2
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	4413      	add	r3, r2
 8006388:	440b      	add	r3, r1
 800638a:	3302      	adds	r3, #2
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	78ba      	ldrb	r2, [r7, #2]
 8006390:	429a      	cmp	r2, r3
 8006392:	d02d      	beq.n	80063f0 <BSP_OSPI_NOR_ConfigFlash+0xc8>
          {
            /* Exit OPI mode */
            ret = OSPI_NOR_ExitOPIMode(Instance);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 fca1 	bl	8006cdc <OSPI_NOR_ExitOPIMode>
 800639a:	60f8      	str	r0, [r7, #12]

            if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d126      	bne.n	80063f0 <BSP_OSPI_NOR_ConfigFlash+0xc8>
 80063a2:	78fb      	ldrb	r3, [r7, #3]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d123      	bne.n	80063f0 <BSP_OSPI_NOR_ConfigFlash+0xc8>
            {

              if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 80063a8:	4924      	ldr	r1, [pc, #144]	; (800643c <BSP_OSPI_NOR_ConfigFlash+0x114>)
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	4613      	mov	r3, r2
 80063ae:	005b      	lsls	r3, r3, #1
 80063b0:	4413      	add	r3, r2
 80063b2:	440b      	add	r3, r1
 80063b4:	3302      	adds	r3, #2
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d104      	bne.n	80063c6 <BSP_OSPI_NOR_ConfigFlash+0x9e>
              {
                /* Enter DTR OPI mode */
                ret = OSPI_NOR_EnterDOPIMode(Instance);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 fac1 	bl	8006944 <OSPI_NOR_EnterDOPIMode>
 80063c2:	60f8      	str	r0, [r7, #12]
                /* Enter STR OPI mode */
                ret = OSPI_NOR_EnterSOPIMode(Instance);
              }
            }
          }
          break;
 80063c4:	e014      	b.n	80063f0 <BSP_OSPI_NOR_ConfigFlash+0xc8>
                ret = OSPI_NOR_EnterSOPIMode(Instance);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fbb6 	bl	8006b38 <OSPI_NOR_EnterSOPIMode>
 80063cc:	60f8      	str	r0, [r7, #12]
          break;
 80063ce:	e00f      	b.n	80063f0 <BSP_OSPI_NOR_ConfigFlash+0xc8>

        case BSP_OSPI_NOR_SPI_MODE :  /* 1-1-1 commands, Power on H/W default setting */
        default :
          if (Mode == BSP_OSPI_NOR_OPI_MODE)
 80063d0:	78fb      	ldrb	r3, [r7, #3]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d10e      	bne.n	80063f4 <BSP_OSPI_NOR_ConfigFlash+0xcc>
          {
            if (Rate == BSP_OSPI_NOR_STR_TRANSFER)
 80063d6:	78bb      	ldrb	r3, [r7, #2]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d104      	bne.n	80063e6 <BSP_OSPI_NOR_ConfigFlash+0xbe>
            {
              /* Enter STR OPI mode */
              ret = OSPI_NOR_EnterSOPIMode(Instance);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 fbab 	bl	8006b38 <OSPI_NOR_EnterSOPIMode>
 80063e2:	60f8      	str	r0, [r7, #12]
            {
              /* Enter DTR OPI mode */
              ret = OSPI_NOR_EnterDOPIMode(Instance);
            }
          }
          break;
 80063e4:	e006      	b.n	80063f4 <BSP_OSPI_NOR_ConfigFlash+0xcc>
              ret = OSPI_NOR_EnterDOPIMode(Instance);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 faac 	bl	8006944 <OSPI_NOR_EnterDOPIMode>
 80063ec:	60f8      	str	r0, [r7, #12]
          break;
 80063ee:	e001      	b.n	80063f4 <BSP_OSPI_NOR_ConfigFlash+0xcc>
          break;
 80063f0:	bf00      	nop
 80063f2:	e000      	b.n	80063f6 <BSP_OSPI_NOR_ConfigFlash+0xce>
          break;
 80063f4:	bf00      	nop
      }

      /* Update OSPI context if all operations are well done */
      if (ret == BSP_ERROR_NONE)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d119      	bne.n	8006430 <BSP_OSPI_NOR_ConfigFlash+0x108>
      {
        /* Update current status parameter *****************************************/
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 80063fc:	490f      	ldr	r1, [pc, #60]	; (800643c <BSP_OSPI_NOR_ConfigFlash+0x114>)
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	4613      	mov	r3, r2
 8006402:	005b      	lsls	r3, r3, #1
 8006404:	4413      	add	r3, r2
 8006406:	440b      	add	r3, r1
 8006408:	2201      	movs	r2, #1
 800640a:	701a      	strb	r2, [r3, #0]
        Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 800640c:	490b      	ldr	r1, [pc, #44]	; (800643c <BSP_OSPI_NOR_ConfigFlash+0x114>)
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	4613      	mov	r3, r2
 8006412:	005b      	lsls	r3, r3, #1
 8006414:	4413      	add	r3, r2
 8006416:	440b      	add	r3, r1
 8006418:	3301      	adds	r3, #1
 800641a:	78fa      	ldrb	r2, [r7, #3]
 800641c:	701a      	strb	r2, [r3, #0]
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 800641e:	4907      	ldr	r1, [pc, #28]	; (800643c <BSP_OSPI_NOR_ConfigFlash+0x114>)
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	4613      	mov	r3, r2
 8006424:	005b      	lsls	r3, r3, #1
 8006426:	4413      	add	r3, r2
 8006428:	440b      	add	r3, r1
 800642a:	3302      	adds	r3, #2
 800642c:	78ba      	ldrb	r2, [r7, #2]
 800642e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8006430:	68fb      	ldr	r3, [r7, #12]
}
 8006432:	4618      	mov	r0, r3
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	20197264 	.word	0x20197264

08006440 <OSPI_DLYB_Enable>:
  * @brief  This function enables delay block.
  * @param  hospi OSPI handle
  * @retval BSP status
  */
static int32_t OSPI_DLYB_Enable(XSPI_HandleTypeDef *hospi)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b088      	sub	sp, #32
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  LL_DLYB_CfgTypeDef dlyb_cfg, dlyb_cfg_test;
  int32_t ret = BSP_ERROR_NONE;
 8006448:	2300      	movs	r3, #0
 800644a:	61fb      	str	r3, [r7, #28]
  uint32_t div_value = 4;
 800644c:	2304      	movs	r3, #4
 800644e:	61bb      	str	r3, [r7, #24]

  /* Delay block configuration ------------------------------------------------ */
  if (HAL_XSPI_DLYB_GetClockPeriod(hospi, &dlyb_cfg) != HAL_OK)
 8006450:	f107 0310 	add.w	r3, r7, #16
 8006454:	4619      	mov	r1, r3
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f00c f944 	bl	80126e4 <HAL_XSPI_DLYB_GetClockPeriod>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d002      	beq.n	8006468 <OSPI_DLYB_Enable+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8006462:	f06f 0303 	mvn.w	r3, #3
 8006466:	61fb      	str	r3, [r7, #28]
  }

  /* PhaseSel is divided by 4 (emperic value)*/
  dlyb_cfg.PhaseSel /= div_value;
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006470:	617b      	str	r3, [r7, #20]

  /* save the present configuration for check*/
  dlyb_cfg_test = dlyb_cfg;
 8006472:	f107 0308 	add.w	r3, r7, #8
 8006476:	f107 0210 	add.w	r2, r7, #16
 800647a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800647e:	e883 0003 	stmia.w	r3, {r0, r1}

  /*set delay block configuration*/
  if (HAL_XSPI_DLYB_SetConfig(hospi, &dlyb_cfg) != HAL_OK)
 8006482:	f107 0310 	add.w	r3, r7, #16
 8006486:	4619      	mov	r1, r3
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f00c f8ab 	bl	80125e4 <HAL_XSPI_DLYB_SetConfig>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d002      	beq.n	800649a <OSPI_DLYB_Enable+0x5a>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8006494:	f06f 0303 	mvn.w	r3, #3
 8006498:	61fb      	str	r3, [r7, #28]
  }

  /*check the set value*/
  if (HAL_XSPI_DLYB_GetConfig(hospi, &dlyb_cfg) != HAL_OK)
 800649a:	f107 0310 	add.w	r3, r7, #16
 800649e:	4619      	mov	r1, r3
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f00c f8ed 	bl	8012680 <HAL_XSPI_DLYB_GetConfig>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d002      	beq.n	80064b2 <OSPI_DLYB_Enable+0x72>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 80064ac:	f06f 0303 	mvn.w	r3, #3
 80064b0:	61fb      	str	r3, [r7, #28]
  }

  if ((dlyb_cfg.PhaseSel != dlyb_cfg_test.PhaseSel) || (dlyb_cfg.Units != dlyb_cfg_test.Units))
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d103      	bne.n	80064c2 <OSPI_DLYB_Enable+0x82>
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d002      	beq.n	80064c8 <OSPI_DLYB_Enable+0x88>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 80064c2:	f06f 0303 	mvn.w	r3, #3
 80064c6:	61fb      	str	r3, [r7, #28]
  }

  /* Return BSP status */
  return ret;
 80064c8:	69fb      	ldr	r3, [r7, #28]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3720      	adds	r7, #32
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
	...

080064d4 <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(XSPI_HandleTypeDef *hospi)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b094      	sub	sp, #80	; 0x50
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_CLK_ENABLE();
 80064dc:	4bc1      	ldr	r3, [pc, #772]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 80064de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064e2:	4ac0      	ldr	r2, [pc, #768]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 80064e4:	f043 0310 	orr.w	r3, r3, #16
 80064e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80064ec:	4bbd      	ldr	r3, [pc, #756]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 80064ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f2:	f003 0310 	and.w	r3, r3, #16
 80064f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80064f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38

  __HAL_RCC_PWR_CLK_ENABLE();
 80064fa:	4bba      	ldr	r3, [pc, #744]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 80064fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006500:	4ab8      	ldr	r2, [pc, #736]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 8006502:	f043 0304 	orr.w	r3, r3, #4
 8006506:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800650a:	4bb6      	ldr	r3, [pc, #728]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 800650c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006510:	f003 0304 	and.w	r3, r3, #4
 8006514:	637b      	str	r3, [r7, #52]	; 0x34
 8006516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  /* Enable VDDIO2 supply */
  HAL_PWREx_EnableVddIO2();
 8006518:	f005 fa6e 	bl	800b9f8 <HAL_PWREx_EnableVddIO2>

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 800651c:	4bb1      	ldr	r3, [pc, #708]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 800651e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006520:	4ab0      	ldr	r2, [pc, #704]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 8006522:	f043 0310 	orr.w	r3, r3, #16
 8006526:	6693      	str	r3, [r2, #104]	; 0x68
  OSPI_RELEASE_RESET();
 8006528:	4bae      	ldr	r3, [pc, #696]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 800652a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800652c:	4aad      	ldr	r2, [pc, #692]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 800652e:	f023 0310 	bic.w	r3, r3, #16
 8006532:	6693      	str	r3, [r2, #104]	; 0x68

  /* Enable GPIO clocks */
  OSPI_CLK_GPIO_CLK_ENABLE();
 8006534:	4bab      	ldr	r3, [pc, #684]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 8006536:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800653a:	4aaa      	ldr	r2, [pc, #680]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 800653c:	f043 0320 	orr.w	r3, r3, #32
 8006540:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006544:	4ba7      	ldr	r3, [pc, #668]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 8006546:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800654a:	f003 0320 	and.w	r3, r3, #32
 800654e:	633b      	str	r3, [r7, #48]	; 0x30
 8006550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  OSPI_DQS_GPIO_CLK_ENABLE();
 8006552:	4ba4      	ldr	r3, [pc, #656]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 8006554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006558:	4aa2      	ldr	r2, [pc, #648]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 800655a:	f043 0301 	orr.w	r3, r3, #1
 800655e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006562:	4ba0      	ldr	r3, [pc, #640]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 8006564:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800656e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  OSPI_CS_GPIO_CLK_ENABLE();
 8006570:	4b9c      	ldr	r3, [pc, #624]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 8006572:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006576:	4a9b      	ldr	r2, [pc, #620]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 8006578:	f043 0301 	orr.w	r3, r3, #1
 800657c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006580:	4b98      	ldr	r3, [pc, #608]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 8006582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	62bb      	str	r3, [r7, #40]	; 0x28
 800658c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  OSPI_D0_GPIO_CLK_ENABLE();
 800658e:	4b95      	ldr	r3, [pc, #596]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 8006590:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006594:	4a93      	ldr	r2, [pc, #588]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 8006596:	f043 0320 	orr.w	r3, r3, #32
 800659a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800659e:	4b91      	ldr	r3, [pc, #580]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 80065a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065a4:	f003 0320 	and.w	r3, r3, #32
 80065a8:	627b      	str	r3, [r7, #36]	; 0x24
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  OSPI_D1_GPIO_CLK_ENABLE();
 80065ac:	4b8d      	ldr	r3, [pc, #564]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 80065ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065b2:	4a8c      	ldr	r2, [pc, #560]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 80065b4:	f043 0320 	orr.w	r3, r3, #32
 80065b8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80065bc:	4b89      	ldr	r3, [pc, #548]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 80065be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065c2:	f003 0320 	and.w	r3, r3, #32
 80065c6:	623b      	str	r3, [r7, #32]
 80065c8:	6a3b      	ldr	r3, [r7, #32]
  OSPI_D2_GPIO_CLK_ENABLE();
 80065ca:	4b86      	ldr	r3, [pc, #536]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 80065cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065d0:	4a84      	ldr	r2, [pc, #528]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 80065d2:	f043 0320 	orr.w	r3, r3, #32
 80065d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80065da:	4b82      	ldr	r3, [pc, #520]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 80065dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065e0:	f003 0320 	and.w	r3, r3, #32
 80065e4:	61fb      	str	r3, [r7, #28]
 80065e6:	69fb      	ldr	r3, [r7, #28]
  OSPI_D3_GPIO_CLK_ENABLE();
 80065e8:	4b7e      	ldr	r3, [pc, #504]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 80065ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065ee:	4a7d      	ldr	r2, [pc, #500]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 80065f0:	f043 0320 	orr.w	r3, r3, #32
 80065f4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80065f8:	4b7a      	ldr	r3, [pc, #488]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 80065fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065fe:	f003 0320 	and.w	r3, r3, #32
 8006602:	61bb      	str	r3, [r7, #24]
 8006604:	69bb      	ldr	r3, [r7, #24]
  OSPI_D4_GPIO_CLK_ENABLE();
 8006606:	4b77      	ldr	r3, [pc, #476]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 8006608:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800660c:	4a75      	ldr	r2, [pc, #468]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 800660e:	f043 0304 	orr.w	r3, r3, #4
 8006612:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006616:	4b73      	ldr	r3, [pc, #460]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 8006618:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800661c:	f003 0304 	and.w	r3, r3, #4
 8006620:	617b      	str	r3, [r7, #20]
 8006622:	697b      	ldr	r3, [r7, #20]
  OSPI_D5_GPIO_CLK_ENABLE();
 8006624:	4b6f      	ldr	r3, [pc, #444]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 8006626:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800662a:	4a6e      	ldr	r2, [pc, #440]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 800662c:	f043 0304 	orr.w	r3, r3, #4
 8006630:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006634:	4b6b      	ldr	r3, [pc, #428]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 8006636:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800663a:	f003 0304 	and.w	r3, r3, #4
 800663e:	613b      	str	r3, [r7, #16]
 8006640:	693b      	ldr	r3, [r7, #16]
  OSPI_D6_GPIO_CLK_ENABLE();
 8006642:	4b68      	ldr	r3, [pc, #416]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 8006644:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006648:	4a66      	ldr	r2, [pc, #408]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 800664a:	f043 0304 	orr.w	r3, r3, #4
 800664e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006652:	4b64      	ldr	r3, [pc, #400]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 8006654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006658:	f003 0304 	and.w	r3, r3, #4
 800665c:	60fb      	str	r3, [r7, #12]
 800665e:	68fb      	ldr	r3, [r7, #12]
  OSPI_D7_GPIO_CLK_ENABLE();
 8006660:	4b60      	ldr	r3, [pc, #384]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 8006662:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006666:	4a5f      	ldr	r2, [pc, #380]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 8006668:	f043 0304 	orr.w	r3, r3, #4
 800666c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006670:	4b5c      	ldr	r3, [pc, #368]	; (80067e4 <OSPI_NOR_MspInit+0x310>)
 8006672:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006676:	f003 0304 	and.w	r3, r3, #4
 800667a:	60bb      	str	r3, [r7, #8]
 800667c:	68bb      	ldr	r3, [r7, #8]

  /* Enable HSLV GPIOs */
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_CLK_GPIO_PORT, OSPI_CLK_PIN);
 800667e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006682:	4859      	ldr	r0, [pc, #356]	; (80067e8 <OSPI_NOR_MspInit+0x314>)
 8006684:	f003 fbec 	bl	8009e60 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_CS_GPIO_PORT, OSPI_CS_PIN);
 8006688:	2104      	movs	r1, #4
 800668a:	4858      	ldr	r0, [pc, #352]	; (80067ec <OSPI_NOR_MspInit+0x318>)
 800668c:	f003 fbe8 	bl	8009e60 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_DQS_GPIO_PORT, OSPI_DQS_PIN);
 8006690:	2102      	movs	r1, #2
 8006692:	4856      	ldr	r0, [pc, #344]	; (80067ec <OSPI_NOR_MspInit+0x318>)
 8006694:	f003 fbe4 	bl	8009e60 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D0_GPIO_PORT, OSPI_D0_PIN);
 8006698:	f44f 7180 	mov.w	r1, #256	; 0x100
 800669c:	4852      	ldr	r0, [pc, #328]	; (80067e8 <OSPI_NOR_MspInit+0x314>)
 800669e:	f003 fbdf 	bl	8009e60 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D1_GPIO_PORT, OSPI_D1_PIN);
 80066a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066a6:	4850      	ldr	r0, [pc, #320]	; (80067e8 <OSPI_NOR_MspInit+0x314>)
 80066a8:	f003 fbda 	bl	8009e60 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D2_GPIO_PORT, OSPI_D2_PIN);
 80066ac:	2180      	movs	r1, #128	; 0x80
 80066ae:	484e      	ldr	r0, [pc, #312]	; (80067e8 <OSPI_NOR_MspInit+0x314>)
 80066b0:	f003 fbd6 	bl	8009e60 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D3_GPIO_PORT, OSPI_D3_PIN);
 80066b4:	2140      	movs	r1, #64	; 0x40
 80066b6:	484c      	ldr	r0, [pc, #304]	; (80067e8 <OSPI_NOR_MspInit+0x314>)
 80066b8:	f003 fbd2 	bl	8009e60 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D4_GPIO_PORT, OSPI_D4_PIN);
 80066bc:	2102      	movs	r1, #2
 80066be:	484c      	ldr	r0, [pc, #304]	; (80067f0 <OSPI_NOR_MspInit+0x31c>)
 80066c0:	f003 fbce 	bl	8009e60 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D5_GPIO_PORT, OSPI_D5_PIN);
 80066c4:	2104      	movs	r1, #4
 80066c6:	484a      	ldr	r0, [pc, #296]	; (80067f0 <OSPI_NOR_MspInit+0x31c>)
 80066c8:	f003 fbca 	bl	8009e60 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D6_GPIO_PORT, OSPI_D6_PIN);
 80066cc:	2108      	movs	r1, #8
 80066ce:	4848      	ldr	r0, [pc, #288]	; (80067f0 <OSPI_NOR_MspInit+0x31c>)
 80066d0:	f003 fbc6 	bl	8009e60 <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D7_GPIO_PORT, OSPI_D7_PIN);
 80066d4:	2101      	movs	r1, #1
 80066d6:	4846      	ldr	r0, [pc, #280]	; (80067f0 <OSPI_NOR_MspInit+0x31c>)
 80066d8:	f003 fbc2 	bl	8009e60 <HAL_GPIO_EnableHighSPeedLowVoltage>

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CS_PIN;
 80066dc:	2304      	movs	r3, #4
 80066de:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80066e0:	2302      	movs	r3, #2
 80066e2:	643b      	str	r3, [r7, #64]	; 0x40
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80066e4:	2301      	movs	r3, #1
 80066e6:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80066e8:	2303      	movs	r3, #3
 80066ea:	64bb      	str	r3, [r7, #72]	; 0x48
  GPIO_InitStruct.Alternate = OSPI_CS_PIN_AF;
 80066ec:	230a      	movs	r3, #10
 80066ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 80066f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80066f4:	4619      	mov	r1, r3
 80066f6:	483d      	ldr	r0, [pc, #244]	; (80067ec <OSPI_NOR_MspInit+0x318>)
 80066f8:	f003 f8b2 	bl	8009860 <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CLK_PIN;
 80066fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006700:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8006702:	2300      	movs	r3, #0
 8006704:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_CLK_PIN_AF;
 8006706:	2303      	movs	r3, #3
 8006708:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 800670a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800670e:	4619      	mov	r1, r3
 8006710:	4835      	ldr	r0, [pc, #212]	; (80067e8 <OSPI_NOR_MspInit+0x314>)
 8006712:	f003 f8a5 	bl	8009860 <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D0_PIN;
 8006716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800671a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D0_PIN_AF;
 800671c:	230a      	movs	r3, #10
 800671e:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 8006720:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006724:	4619      	mov	r1, r3
 8006726:	4830      	ldr	r0, [pc, #192]	; (80067e8 <OSPI_NOR_MspInit+0x314>)
 8006728:	f003 f89a 	bl	8009860 <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D1_PIN;
 800672c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006730:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D1_PIN_AF;
 8006732:	230a      	movs	r3, #10
 8006734:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 8006736:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800673a:	4619      	mov	r1, r3
 800673c:	482a      	ldr	r0, [pc, #168]	; (80067e8 <OSPI_NOR_MspInit+0x314>)
 800673e:	f003 f88f 	bl	8009860 <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D2_PIN;
 8006742:	2380      	movs	r3, #128	; 0x80
 8006744:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D2_PIN_AF;
 8006746:	230a      	movs	r3, #10
 8006748:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 800674a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800674e:	4619      	mov	r1, r3
 8006750:	4825      	ldr	r0, [pc, #148]	; (80067e8 <OSPI_NOR_MspInit+0x314>)
 8006752:	f003 f885 	bl	8009860 <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D3_PIN;
 8006756:	2340      	movs	r3, #64	; 0x40
 8006758:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D3_PIN_AF;
 800675a:	230a      	movs	r3, #10
 800675c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 800675e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006762:	4619      	mov	r1, r3
 8006764:	4820      	ldr	r0, [pc, #128]	; (80067e8 <OSPI_NOR_MspInit+0x314>)
 8006766:	f003 f87b 	bl	8009860 <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D4_PIN;
 800676a:	2302      	movs	r3, #2
 800676c:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D4_PIN_AF;
 800676e:	230a      	movs	r3, #10
 8006770:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 8006772:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006776:	4619      	mov	r1, r3
 8006778:	481d      	ldr	r0, [pc, #116]	; (80067f0 <OSPI_NOR_MspInit+0x31c>)
 800677a:	f003 f871 	bl	8009860 <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D5_PIN;
 800677e:	2304      	movs	r3, #4
 8006780:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D5_PIN_AF;
 8006782:	230a      	movs	r3, #10
 8006784:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 8006786:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800678a:	4619      	mov	r1, r3
 800678c:	4818      	ldr	r0, [pc, #96]	; (80067f0 <OSPI_NOR_MspInit+0x31c>)
 800678e:	f003 f867 	bl	8009860 <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D6_PIN;
 8006792:	2308      	movs	r3, #8
 8006794:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D6_PIN_AF;
 8006796:	230a      	movs	r3, #10
 8006798:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 800679a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800679e:	4619      	mov	r1, r3
 80067a0:	4813      	ldr	r0, [pc, #76]	; (80067f0 <OSPI_NOR_MspInit+0x31c>)
 80067a2:	f003 f85d 	bl	8009860 <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D7_PIN;
 80067a6:	2301      	movs	r3, #1
 80067a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D7_PIN_AF;
 80067aa:	2303      	movs	r3, #3
 80067ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 80067ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80067b2:	4619      	mov	r1, r3
 80067b4:	480e      	ldr	r0, [pc, #56]	; (80067f0 <OSPI_NOR_MspInit+0x31c>)
 80067b6:	f003 f853 	bl	8009860 <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_DQS_PIN;
 80067ba:	2302      	movs	r3, #2
 80067bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_DQS_PIN_AF;
 80067be:	230a      	movs	r3, #10
 80067c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
 80067c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80067c6:	4619      	mov	r1, r3
 80067c8:	4808      	ldr	r0, [pc, #32]	; (80067ec <OSPI_NOR_MspInit+0x318>)
 80067ca:	f003 f849 	bl	8009860 <HAL_GPIO_Init>

  /* Configure the NVIC for OSPI */
  /* NVIC configuration for OSPI interrupt */
  HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 0x0F, 0);
 80067ce:	2200      	movs	r2, #0
 80067d0:	210f      	movs	r1, #15
 80067d2:	204c      	movs	r0, #76	; 0x4c
 80067d4:	f000 fe9c 	bl	8007510 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 80067d8:	204c      	movs	r0, #76	; 0x4c
 80067da:	f000 feb3 	bl	8007544 <HAL_NVIC_EnableIRQ>
}
 80067de:	bf00      	nop
 80067e0:	3750      	adds	r7, #80	; 0x50
 80067e2:	e007      	b.n	80067f4 <OSPI_NOR_MspInit+0x320>
 80067e4:	46020c00 	.word	0x46020c00
 80067e8:	42021400 	.word	0x42021400
 80067ec:	42020000 	.word	0x42020000
 80067f0:	42020800 	.word	0x42020800
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory(uint32_t Instance)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006800:	2300      	movs	r3, #0
 8006802:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <OSPI_NOR_ResetMemory+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800680a:	f06f 0301 	mvn.w	r3, #1
 800680e:	60fb      	str	r3, [r7, #12]
 8006810:	e08e      	b.n	8006930 <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE,
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	4613      	mov	r3, r2
 8006816:	005b      	lsls	r3, r3, #1
 8006818:	4413      	add	r3, r2
 800681a:	015b      	lsls	r3, r3, #5
 800681c:	4a47      	ldr	r2, [pc, #284]	; (800693c <OSPI_NOR_ResetMemory+0x144>)
 800681e:	4413      	add	r3, r2
 8006820:	2200      	movs	r2, #0
 8006822:	2100      	movs	r1, #0
 8006824:	4618      	mov	r0, r3
 8006826:	f7fd fd85 	bl	8004334 <MX25UM51245G_ResetEnable>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d003      	beq.n	8006838 <OSPI_NOR_ResetMemory+0x40>
                                    BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006830:	f06f 0304 	mvn.w	r3, #4
 8006834:	60fb      	str	r3, [r7, #12]
 8006836:	e07b      	b.n	8006930 <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE,
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	4613      	mov	r3, r2
 800683c:	005b      	lsls	r3, r3, #1
 800683e:	4413      	add	r3, r2
 8006840:	015b      	lsls	r3, r3, #5
 8006842:	4a3e      	ldr	r2, [pc, #248]	; (800693c <OSPI_NOR_ResetMemory+0x144>)
 8006844:	4413      	add	r3, r2
 8006846:	2200      	movs	r2, #0
 8006848:	2100      	movs	r1, #0
 800684a:	4618      	mov	r0, r3
 800684c:	f7fd fdca 	bl	80043e4 <MX25UM51245G_ResetMemory>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <OSPI_NOR_ResetMemory+0x66>
                                    BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006856:	f06f 0304 	mvn.w	r3, #4
 800685a:	60fb      	str	r3, [r7, #12]
 800685c:	e068      	b.n	8006930 <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	4613      	mov	r3, r2
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	4413      	add	r3, r2
 8006866:	015b      	lsls	r3, r3, #5
 8006868:	4a34      	ldr	r2, [pc, #208]	; (800693c <OSPI_NOR_ResetMemory+0x144>)
 800686a:	4413      	add	r3, r2
 800686c:	2200      	movs	r2, #0
 800686e:	2101      	movs	r1, #1
 8006870:	4618      	mov	r0, r3
 8006872:	f7fd fd5f 	bl	8004334 <MX25UM51245G_ResetEnable>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d003      	beq.n	8006884 <OSPI_NOR_ResetMemory+0x8c>
                                    BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800687c:	f06f 0304 	mvn.w	r3, #4
 8006880:	60fb      	str	r3, [r7, #12]
 8006882:	e055      	b.n	8006930 <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	4613      	mov	r3, r2
 8006888:	005b      	lsls	r3, r3, #1
 800688a:	4413      	add	r3, r2
 800688c:	015b      	lsls	r3, r3, #5
 800688e:	4a2b      	ldr	r2, [pc, #172]	; (800693c <OSPI_NOR_ResetMemory+0x144>)
 8006890:	4413      	add	r3, r2
 8006892:	2200      	movs	r2, #0
 8006894:	2101      	movs	r1, #1
 8006896:	4618      	mov	r0, r3
 8006898:	f7fd fda4 	bl	80043e4 <MX25UM51245G_ResetMemory>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <OSPI_NOR_ResetMemory+0xb2>
                                    BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80068a2:	f06f 0304 	mvn.w	r3, #4
 80068a6:	60fb      	str	r3, [r7, #12]
 80068a8:	e042      	b.n	8006930 <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	4613      	mov	r3, r2
 80068ae:	005b      	lsls	r3, r3, #1
 80068b0:	4413      	add	r3, r2
 80068b2:	015b      	lsls	r3, r3, #5
 80068b4:	4a21      	ldr	r2, [pc, #132]	; (800693c <OSPI_NOR_ResetMemory+0x144>)
 80068b6:	4413      	add	r3, r2
 80068b8:	2201      	movs	r2, #1
 80068ba:	2101      	movs	r1, #1
 80068bc:	4618      	mov	r0, r3
 80068be:	f7fd fd39 	bl	8004334 <MX25UM51245G_ResetEnable>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d003      	beq.n	80068d0 <OSPI_NOR_ResetMemory+0xd8>
                                    BSP_OSPI_NOR_DTR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80068c8:	f06f 0304 	mvn.w	r3, #4
 80068cc:	60fb      	str	r3, [r7, #12]
 80068ce:	e02f      	b.n	8006930 <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	4613      	mov	r3, r2
 80068d4:	005b      	lsls	r3, r3, #1
 80068d6:	4413      	add	r3, r2
 80068d8:	015b      	lsls	r3, r3, #5
 80068da:	4a18      	ldr	r2, [pc, #96]	; (800693c <OSPI_NOR_ResetMemory+0x144>)
 80068dc:	4413      	add	r3, r2
 80068de:	2201      	movs	r2, #1
 80068e0:	2101      	movs	r1, #1
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7fd fd7e 	bl	80043e4 <MX25UM51245G_ResetMemory>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d003      	beq.n	80068f6 <OSPI_NOR_ResetMemory+0xfe>
                                    BSP_OSPI_NOR_DTR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80068ee:	f06f 0304 	mvn.w	r3, #4
 80068f2:	60fb      	str	r3, [r7, #12]
 80068f4:	e01c      	b.n	8006930 <OSPI_NOR_ResetMemory+0x138>
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access  */
 80068f6:	4912      	ldr	r1, [pc, #72]	; (8006940 <OSPI_NOR_ResetMemory+0x148>)
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	4613      	mov	r3, r2
 80068fc:	005b      	lsls	r3, r3, #1
 80068fe:	4413      	add	r3, r2
 8006900:	440b      	add	r3, r1
 8006902:	2201      	movs	r2, #1
 8006904:	701a      	strb	r2, [r3, #0]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;     /* After reset H/W back to SPI mode by default */
 8006906:	490e      	ldr	r1, [pc, #56]	; (8006940 <OSPI_NOR_ResetMemory+0x148>)
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	4613      	mov	r3, r2
 800690c:	005b      	lsls	r3, r3, #1
 800690e:	4413      	add	r3, r2
 8006910:	440b      	add	r3, r1
 8006912:	3301      	adds	r3, #1
 8006914:	2200      	movs	r2, #0
 8006916:	701a      	strb	r2, [r3, #0]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER; /* After reset S/W setting to STR mode         */
 8006918:	4909      	ldr	r1, [pc, #36]	; (8006940 <OSPI_NOR_ResetMemory+0x148>)
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	4613      	mov	r3, r2
 800691e:	005b      	lsls	r3, r3, #1
 8006920:	4413      	add	r3, r2
 8006922:	440b      	add	r3, r1
 8006924:	3302      	adds	r3, #2
 8006926:	2200      	movs	r2, #0
 8006928:	701a      	strb	r2, [r3, #0]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25UM51245G_RESET_MAX_TIME);
 800692a:	2064      	movs	r0, #100	; 0x64
 800692c:	f000 fd14 	bl	8007358 <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
 8006930:	68fb      	ldr	r3, [r7, #12]
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	20197204 	.word	0x20197204
 8006940:	20197264 	.word	0x20197264

08006944 <OSPI_NOR_EnterDOPIMode>:
  * @brief  This function enables the octal DTR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
{
 8006944:	b590      	push	{r4, r7, lr}
 8006946:	b087      	sub	sp, #28
 8006948:	af02      	add	r7, sp, #8
 800694a:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t reg[2];

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d003      	beq.n	800695a <OSPI_NOR_EnterDOPIMode+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006952:	f06f 0301 	mvn.w	r3, #1
 8006956:	60fb      	str	r3, [r7, #12]
 8006958:	e0e4      	b.n	8006b24 <OSPI_NOR_EnterDOPIMode+0x1e0>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	4613      	mov	r3, r2
 800695e:	005b      	lsls	r3, r3, #1
 8006960:	4413      	add	r3, r2
 8006962:	015b      	lsls	r3, r3, #5
 8006964:	4a72      	ldr	r2, [pc, #456]	; (8006b30 <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8006966:	1898      	adds	r0, r3, r2
 8006968:	4972      	ldr	r1, [pc, #456]	; (8006b34 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	4613      	mov	r3, r2
 800696e:	005b      	lsls	r3, r3, #1
 8006970:	4413      	add	r3, r2
 8006972:	440b      	add	r3, r1
 8006974:	3301      	adds	r3, #1
 8006976:	7819      	ldrb	r1, [r3, #0]
 8006978:	4c6e      	ldr	r4, [pc, #440]	; (8006b34 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	4613      	mov	r3, r2
 800697e:	005b      	lsls	r3, r3, #1
 8006980:	4413      	add	r3, r2
 8006982:	4423      	add	r3, r4
 8006984:	3302      	adds	r3, #2
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	461a      	mov	r2, r3
 800698a:	f7fd facf 	bl	8003f2c <MX25UM51245G_WriteEnable>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d003      	beq.n	800699c <OSPI_NOR_EnterDOPIMode+0x58>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006994:	f06f 0304 	mvn.w	r3, #4
 8006998:	60fb      	str	r3, [r7, #12]
 800699a:	e0c3      	b.n	8006b24 <OSPI_NOR_EnterDOPIMode+0x1e0>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25UM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	4613      	mov	r3, r2
 80069a0:	005b      	lsls	r3, r3, #1
 80069a2:	4413      	add	r3, r2
 80069a4:	015b      	lsls	r3, r3, #5
 80069a6:	4a62      	ldr	r2, [pc, #392]	; (8006b30 <OSPI_NOR_EnterDOPIMode+0x1ec>)
 80069a8:	1898      	adds	r0, r3, r2
 80069aa:	4962      	ldr	r1, [pc, #392]	; (8006b34 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	4613      	mov	r3, r2
 80069b0:	005b      	lsls	r3, r3, #1
 80069b2:	4413      	add	r3, r2
 80069b4:	440b      	add	r3, r1
 80069b6:	3301      	adds	r3, #1
 80069b8:	7819      	ldrb	r1, [r3, #0]
 80069ba:	4c5e      	ldr	r4, [pc, #376]	; (8006b34 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	4613      	mov	r3, r2
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	4413      	add	r3, r2
 80069c4:	4423      	add	r3, r4
 80069c6:	3302      	adds	r3, #2
 80069c8:	781a      	ldrb	r2, [r3, #0]
 80069ca:	2307      	movs	r3, #7
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80069d2:	f7fd fb7b 	bl	80040cc <MX25UM51245G_WriteCfg2Register>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d003      	beq.n	80069e4 <OSPI_NOR_EnterDOPIMode+0xa0>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG3_ADDR,
                                          MX25UM51245G_CR2_DC_6_CYCLES) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80069dc:	f06f 0304 	mvn.w	r3, #4
 80069e0:	60fb      	str	r3, [r7, #12]
 80069e2:	e09f      	b.n	8006b24 <OSPI_NOR_EnterDOPIMode+0x1e0>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	4613      	mov	r3, r2
 80069e8:	005b      	lsls	r3, r3, #1
 80069ea:	4413      	add	r3, r2
 80069ec:	015b      	lsls	r3, r3, #5
 80069ee:	4a50      	ldr	r2, [pc, #320]	; (8006b30 <OSPI_NOR_EnterDOPIMode+0x1ec>)
 80069f0:	1898      	adds	r0, r3, r2
 80069f2:	4950      	ldr	r1, [pc, #320]	; (8006b34 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	4613      	mov	r3, r2
 80069f8:	005b      	lsls	r3, r3, #1
 80069fa:	4413      	add	r3, r2
 80069fc:	440b      	add	r3, r1
 80069fe:	3301      	adds	r3, #1
 8006a00:	7819      	ldrb	r1, [r3, #0]
 8006a02:	4c4c      	ldr	r4, [pc, #304]	; (8006b34 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	4613      	mov	r3, r2
 8006a08:	005b      	lsls	r3, r3, #1
 8006a0a:	4413      	add	r3, r2
 8006a0c:	4423      	add	r3, r4
 8006a0e:	3302      	adds	r3, #2
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	461a      	mov	r2, r3
 8006a14:	f7fd fa8a 	bl	8003f2c <MX25UM51245G_WriteEnable>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d003      	beq.n	8006a26 <OSPI_NOR_EnterDOPIMode+0xe2>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006a1e:	f06f 0304 	mvn.w	r3, #4
 8006a22:	60fb      	str	r3, [r7, #12]
 8006a24:	e07e      	b.n	8006b24 <OSPI_NOR_EnterDOPIMode+0x1e0>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25UM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	4613      	mov	r3, r2
 8006a2a:	005b      	lsls	r3, r3, #1
 8006a2c:	4413      	add	r3, r2
 8006a2e:	015b      	lsls	r3, r3, #5
 8006a30:	4a3f      	ldr	r2, [pc, #252]	; (8006b30 <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8006a32:	1898      	adds	r0, r3, r2
 8006a34:	493f      	ldr	r1, [pc, #252]	; (8006b34 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	4613      	mov	r3, r2
 8006a3a:	005b      	lsls	r3, r3, #1
 8006a3c:	4413      	add	r3, r2
 8006a3e:	440b      	add	r3, r1
 8006a40:	3301      	adds	r3, #1
 8006a42:	7819      	ldrb	r1, [r3, #0]
 8006a44:	4c3b      	ldr	r4, [pc, #236]	; (8006b34 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	4613      	mov	r3, r2
 8006a4a:	005b      	lsls	r3, r3, #1
 8006a4c:	4413      	add	r3, r2
 8006a4e:	4423      	add	r3, r4
 8006a50:	3302      	adds	r3, #2
 8006a52:	781a      	ldrb	r2, [r3, #0]
 8006a54:	2302      	movs	r3, #2
 8006a56:	9300      	str	r3, [sp, #0]
 8006a58:	2300      	movs	r3, #0
 8006a5a:	f7fd fb37 	bl	80040cc <MX25UM51245G_WriteCfg2Register>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d003      	beq.n	8006a6c <OSPI_NOR_EnterDOPIMode+0x128>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG1_ADDR,
                                          MX25UM51245G_CR2_DOPI) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006a64:	f06f 0304 	mvn.w	r3, #4
 8006a68:	60fb      	str	r3, [r7, #12]
 8006a6a:	e05b      	b.n	8006b24 <OSPI_NOR_EnterDOPIMode+0x1e0>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
 8006a6c:	2028      	movs	r0, #40	; 0x28
 8006a6e:	f000 fc73 	bl	8007358 <HAL_Delay>

    /* Reconfigure the memory type of the peripheral */
    hospi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
 8006a72:	492f      	ldr	r1, [pc, #188]	; (8006b30 <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	4613      	mov	r3, r2
 8006a78:	005b      	lsls	r3, r3, #1
 8006a7a:	4413      	add	r3, r2
 8006a7c:	015b      	lsls	r3, r3, #5
 8006a7e:	440b      	add	r3, r1
 8006a80:	330c      	adds	r3, #12
 8006a82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a86:	601a      	str	r2, [r3, #0]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
 8006a88:	4929      	ldr	r1, [pc, #164]	; (8006b30 <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	005b      	lsls	r3, r3, #1
 8006a90:	4413      	add	r3, r2
 8006a92:	015b      	lsls	r3, r3, #5
 8006a94:	440b      	add	r3, r1
 8006a96:	332c      	adds	r3, #44	; 0x2c
 8006a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a9c:	601a      	str	r2, [r3, #0]
    if (HAL_XSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	005b      	lsls	r3, r3, #1
 8006aa4:	4413      	add	r3, r2
 8006aa6:	015b      	lsls	r3, r3, #5
 8006aa8:	4a21      	ldr	r2, [pc, #132]	; (8006b30 <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8006aaa:	4413      	add	r3, r2
 8006aac:	4618      	mov	r0, r3
 8006aae:	f00b f8bb 	bl	8011c28 <HAL_XSPI_Init>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d003      	beq.n	8006ac0 <OSPI_NOR_EnterDOPIMode+0x17c>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006ab8:	f06f 0303 	mvn.w	r3, #3
 8006abc:	60fb      	str	r3, [r7, #12]
 8006abe:	e031      	b.n	8006b24 <OSPI_NOR_EnterDOPIMode+0x1e0>
    }
    /* Check Flash busy ? */
    else if (MX25UM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	005b      	lsls	r3, r3, #1
 8006ac6:	4413      	add	r3, r2
 8006ac8:	015b      	lsls	r3, r3, #5
 8006aca:	4a19      	ldr	r2, [pc, #100]	; (8006b30 <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8006acc:	4413      	add	r3, r2
 8006ace:	2201      	movs	r2, #1
 8006ad0:	2101      	movs	r1, #1
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7fd f85f 	bl	8003b96 <MX25UM51245G_AutoPollingMemReady>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d003      	beq.n	8006ae6 <OSPI_NOR_EnterDOPIMode+0x1a2>
                                              BSP_OSPI_NOR_DTR_TRANSFER) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006ade:	f06f 0304 	mvn.w	r3, #4
 8006ae2:	60fb      	str	r3, [r7, #12]
 8006ae4:	e01e      	b.n	8006b24 <OSPI_NOR_EnterDOPIMode+0x1e0>
    }
    /* Check the configuration has been correctly done */
    else if (MX25UM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER,
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	005b      	lsls	r3, r3, #1
 8006aec:	4413      	add	r3, r2
 8006aee:	015b      	lsls	r3, r3, #5
 8006af0:	4a0f      	ldr	r2, [pc, #60]	; (8006b30 <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8006af2:	1898      	adds	r0, r3, r2
 8006af4:	f107 0308 	add.w	r3, r7, #8
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	2300      	movs	r3, #0
 8006afc:	2201      	movs	r2, #1
 8006afe:	2101      	movs	r1, #1
 8006b00:	f7fd fb79 	bl	80041f6 <MX25UM51245G_ReadCfg2Register>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d003      	beq.n	8006b12 <OSPI_NOR_EnterDOPIMode+0x1ce>
                                           MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b0a:	f06f 0304 	mvn.w	r3, #4
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	e008      	b.n	8006b24 <OSPI_NOR_EnterDOPIMode+0x1e0>
    }
    else if (reg[0] != MX25UM51245G_CR2_DOPI)
 8006b12:	7a3b      	ldrb	r3, [r7, #8]
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d003      	beq.n	8006b20 <OSPI_NOR_EnterDOPIMode+0x1dc>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b18:	f06f 0304 	mvn.w	r3, #4
 8006b1c:	60fb      	str	r3, [r7, #12]
 8006b1e:	e001      	b.n	8006b24 <OSPI_NOR_EnterDOPIMode+0x1e0>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8006b20:	2300      	movs	r3, #0
 8006b22:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
 8006b24:	68fb      	ldr	r3, [r7, #12]
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3714      	adds	r7, #20
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd90      	pop	{r4, r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	20197204 	.word	0x20197204
 8006b34:	20197264 	.word	0x20197264

08006b38 <OSPI_NOR_EnterSOPIMode>:
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
{
 8006b38:	b590      	push	{r4, r7, lr}
 8006b3a:	b087      	sub	sp, #28
 8006b3c:	af02      	add	r7, sp, #8
 8006b3e:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t reg[2];

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <OSPI_NOR_EnterSOPIMode+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006b46:	f06f 0301 	mvn.w	r3, #1
 8006b4a:	60fb      	str	r3, [r7, #12]
 8006b4c:	e0bd      	b.n	8006cca <OSPI_NOR_EnterSOPIMode+0x192>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	4613      	mov	r3, r2
 8006b52:	005b      	lsls	r3, r3, #1
 8006b54:	4413      	add	r3, r2
 8006b56:	015b      	lsls	r3, r3, #5
 8006b58:	4a5e      	ldr	r2, [pc, #376]	; (8006cd4 <OSPI_NOR_EnterSOPIMode+0x19c>)
 8006b5a:	1898      	adds	r0, r3, r2
 8006b5c:	495e      	ldr	r1, [pc, #376]	; (8006cd8 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	4613      	mov	r3, r2
 8006b62:	005b      	lsls	r3, r3, #1
 8006b64:	4413      	add	r3, r2
 8006b66:	440b      	add	r3, r1
 8006b68:	3301      	adds	r3, #1
 8006b6a:	7819      	ldrb	r1, [r3, #0]
 8006b6c:	4c5a      	ldr	r4, [pc, #360]	; (8006cd8 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	4613      	mov	r3, r2
 8006b72:	005b      	lsls	r3, r3, #1
 8006b74:	4413      	add	r3, r2
 8006b76:	4423      	add	r3, r4
 8006b78:	3302      	adds	r3, #2
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	f7fd f9d5 	bl	8003f2c <MX25UM51245G_WriteEnable>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d003      	beq.n	8006b90 <OSPI_NOR_EnterSOPIMode+0x58>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b88:	f06f 0304 	mvn.w	r3, #4
 8006b8c:	60fb      	str	r3, [r7, #12]
 8006b8e:	e09c      	b.n	8006cca <OSPI_NOR_EnterSOPIMode+0x192>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25UM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	4613      	mov	r3, r2
 8006b94:	005b      	lsls	r3, r3, #1
 8006b96:	4413      	add	r3, r2
 8006b98:	015b      	lsls	r3, r3, #5
 8006b9a:	4a4e      	ldr	r2, [pc, #312]	; (8006cd4 <OSPI_NOR_EnterSOPIMode+0x19c>)
 8006b9c:	1898      	adds	r0, r3, r2
 8006b9e:	494e      	ldr	r1, [pc, #312]	; (8006cd8 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	005b      	lsls	r3, r3, #1
 8006ba6:	4413      	add	r3, r2
 8006ba8:	440b      	add	r3, r1
 8006baa:	3301      	adds	r3, #1
 8006bac:	7819      	ldrb	r1, [r3, #0]
 8006bae:	4c4a      	ldr	r4, [pc, #296]	; (8006cd8 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	005b      	lsls	r3, r3, #1
 8006bb6:	4413      	add	r3, r2
 8006bb8:	4423      	add	r3, r4
 8006bba:	3302      	adds	r3, #2
 8006bbc:	781a      	ldrb	r2, [r3, #0]
 8006bbe:	2307      	movs	r3, #7
 8006bc0:	9300      	str	r3, [sp, #0]
 8006bc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006bc6:	f7fd fa81 	bl	80040cc <MX25UM51245G_WriteCfg2Register>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d003      	beq.n	8006bd8 <OSPI_NOR_EnterSOPIMode+0xa0>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG3_ADDR,
                                          MX25UM51245G_CR2_DC_6_CYCLES) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006bd0:	f06f 0304 	mvn.w	r3, #4
 8006bd4:	60fb      	str	r3, [r7, #12]
 8006bd6:	e078      	b.n	8006cca <OSPI_NOR_EnterSOPIMode+0x192>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	005b      	lsls	r3, r3, #1
 8006bde:	4413      	add	r3, r2
 8006be0:	015b      	lsls	r3, r3, #5
 8006be2:	4a3c      	ldr	r2, [pc, #240]	; (8006cd4 <OSPI_NOR_EnterSOPIMode+0x19c>)
 8006be4:	1898      	adds	r0, r3, r2
 8006be6:	493c      	ldr	r1, [pc, #240]	; (8006cd8 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	4613      	mov	r3, r2
 8006bec:	005b      	lsls	r3, r3, #1
 8006bee:	4413      	add	r3, r2
 8006bf0:	440b      	add	r3, r1
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	7819      	ldrb	r1, [r3, #0]
 8006bf6:	4c38      	ldr	r4, [pc, #224]	; (8006cd8 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	005b      	lsls	r3, r3, #1
 8006bfe:	4413      	add	r3, r2
 8006c00:	4423      	add	r3, r4
 8006c02:	3302      	adds	r3, #2
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	461a      	mov	r2, r3
 8006c08:	f7fd f990 	bl	8003f2c <MX25UM51245G_WriteEnable>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d003      	beq.n	8006c1a <OSPI_NOR_EnterSOPIMode+0xe2>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006c12:	f06f 0304 	mvn.w	r3, #4
 8006c16:	60fb      	str	r3, [r7, #12]
 8006c18:	e057      	b.n	8006cca <OSPI_NOR_EnterSOPIMode+0x192>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25UM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	005b      	lsls	r3, r3, #1
 8006c20:	4413      	add	r3, r2
 8006c22:	015b      	lsls	r3, r3, #5
 8006c24:	4a2b      	ldr	r2, [pc, #172]	; (8006cd4 <OSPI_NOR_EnterSOPIMode+0x19c>)
 8006c26:	1898      	adds	r0, r3, r2
 8006c28:	492b      	ldr	r1, [pc, #172]	; (8006cd8 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	005b      	lsls	r3, r3, #1
 8006c30:	4413      	add	r3, r2
 8006c32:	440b      	add	r3, r1
 8006c34:	3301      	adds	r3, #1
 8006c36:	7819      	ldrb	r1, [r3, #0]
 8006c38:	4c27      	ldr	r4, [pc, #156]	; (8006cd8 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	005b      	lsls	r3, r3, #1
 8006c40:	4413      	add	r3, r2
 8006c42:	4423      	add	r3, r4
 8006c44:	3302      	adds	r3, #2
 8006c46:	781a      	ldrb	r2, [r3, #0]
 8006c48:	2301      	movs	r3, #1
 8006c4a:	9300      	str	r3, [sp, #0]
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	f7fd fa3d 	bl	80040cc <MX25UM51245G_WriteCfg2Register>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d003      	beq.n	8006c60 <OSPI_NOR_EnterSOPIMode+0x128>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG1_ADDR,
                                          MX25UM51245G_CR2_SOPI) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006c58:	f06f 0304 	mvn.w	r3, #4
 8006c5c:	60fb      	str	r3, [r7, #12]
 8006c5e:	e034      	b.n	8006cca <OSPI_NOR_EnterSOPIMode+0x192>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
 8006c60:	2028      	movs	r0, #40	; 0x28
 8006c62:	f000 fb79 	bl	8007358 <HAL_Delay>

    /* Check Flash busy ? */
    if (MX25UM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	005b      	lsls	r3, r3, #1
 8006c6c:	4413      	add	r3, r2
 8006c6e:	015b      	lsls	r3, r3, #5
 8006c70:	4a18      	ldr	r2, [pc, #96]	; (8006cd4 <OSPI_NOR_EnterSOPIMode+0x19c>)
 8006c72:	4413      	add	r3, r2
 8006c74:	2200      	movs	r2, #0
 8006c76:	2101      	movs	r1, #1
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7fc ff8c 	bl	8003b96 <MX25UM51245G_AutoPollingMemReady>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d003      	beq.n	8006c8c <OSPI_NOR_EnterSOPIMode+0x154>
                                         BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006c84:	f06f 0304 	mvn.w	r3, #4
 8006c88:	60fb      	str	r3, [r7, #12]
 8006c8a:	e01e      	b.n	8006cca <OSPI_NOR_EnterSOPIMode+0x192>
    }
    /* Check the configuration has been correctly done */
    else if (MX25UM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER,
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	005b      	lsls	r3, r3, #1
 8006c92:	4413      	add	r3, r2
 8006c94:	015b      	lsls	r3, r3, #5
 8006c96:	4a0f      	ldr	r2, [pc, #60]	; (8006cd4 <OSPI_NOR_EnterSOPIMode+0x19c>)
 8006c98:	1898      	adds	r0, r3, r2
 8006c9a:	f107 0308 	add.w	r3, r7, #8
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	2101      	movs	r1, #1
 8006ca6:	f7fd faa6 	bl	80041f6 <MX25UM51245G_ReadCfg2Register>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d003      	beq.n	8006cb8 <OSPI_NOR_EnterSOPIMode+0x180>
                                           MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006cb0:	f06f 0304 	mvn.w	r3, #4
 8006cb4:	60fb      	str	r3, [r7, #12]
 8006cb6:	e008      	b.n	8006cca <OSPI_NOR_EnterSOPIMode+0x192>
    }
    else if (reg[0] != MX25UM51245G_CR2_SOPI)
 8006cb8:	7a3b      	ldrb	r3, [r7, #8]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d003      	beq.n	8006cc6 <OSPI_NOR_EnterSOPIMode+0x18e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006cbe:	f06f 0304 	mvn.w	r3, #4
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	e001      	b.n	8006cca <OSPI_NOR_EnterSOPIMode+0x192>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
 8006cca:	68fb      	ldr	r3, [r7, #12]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd90      	pop	{r4, r7, pc}
 8006cd4:	20197204 	.word	0x20197204
 8006cd8:	20197264 	.word	0x20197264

08006cdc <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode(uint32_t Instance)
{
 8006cdc:	b590      	push	{r4, r7, lr}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af02      	add	r7, sp, #8
 8006ce2:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d003      	beq.n	8006cf6 <OSPI_NOR_ExitOPIMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006cee:	f06f 0301 	mvn.w	r3, #1
 8006cf2:	60fb      	str	r3, [r7, #12]
 8006cf4:	e0aa      	b.n	8006e4c <OSPI_NOR_ExitOPIMode+0x170>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	005b      	lsls	r3, r3, #1
 8006cfc:	4413      	add	r3, r2
 8006cfe:	015b      	lsls	r3, r3, #5
 8006d00:	4a55      	ldr	r2, [pc, #340]	; (8006e58 <OSPI_NOR_ExitOPIMode+0x17c>)
 8006d02:	1898      	adds	r0, r3, r2
 8006d04:	4955      	ldr	r1, [pc, #340]	; (8006e5c <OSPI_NOR_ExitOPIMode+0x180>)
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	4613      	mov	r3, r2
 8006d0a:	005b      	lsls	r3, r3, #1
 8006d0c:	4413      	add	r3, r2
 8006d0e:	440b      	add	r3, r1
 8006d10:	3301      	adds	r3, #1
 8006d12:	7819      	ldrb	r1, [r3, #0]
 8006d14:	4c51      	ldr	r4, [pc, #324]	; (8006e5c <OSPI_NOR_ExitOPIMode+0x180>)
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	4613      	mov	r3, r2
 8006d1a:	005b      	lsls	r3, r3, #1
 8006d1c:	4413      	add	r3, r2
 8006d1e:	4423      	add	r3, r4
 8006d20:	3302      	adds	r3, #2
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	461a      	mov	r2, r3
 8006d26:	f7fd f901 	bl	8003f2c <MX25UM51245G_WriteEnable>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d003      	beq.n	8006d38 <OSPI_NOR_ExitOPIMode+0x5c>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006d30:	f06f 0304 	mvn.w	r3, #4
 8006d34:	60fb      	str	r3, [r7, #12]
 8006d36:	e089      	b.n	8006e4c <OSPI_NOR_ExitOPIMode+0x170>
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	723b      	strb	r3, [r7, #8]
    reg[1] = 0;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	727b      	strb	r3, [r7, #9]
    if (MX25UM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	4613      	mov	r3, r2
 8006d44:	005b      	lsls	r3, r3, #1
 8006d46:	4413      	add	r3, r2
 8006d48:	015b      	lsls	r3, r3, #5
 8006d4a:	4a43      	ldr	r2, [pc, #268]	; (8006e58 <OSPI_NOR_ExitOPIMode+0x17c>)
 8006d4c:	1898      	adds	r0, r3, r2
 8006d4e:	4943      	ldr	r1, [pc, #268]	; (8006e5c <OSPI_NOR_ExitOPIMode+0x180>)
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	4613      	mov	r3, r2
 8006d54:	005b      	lsls	r3, r3, #1
 8006d56:	4413      	add	r3, r2
 8006d58:	440b      	add	r3, r1
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	7819      	ldrb	r1, [r3, #0]
 8006d5e:	4c3f      	ldr	r4, [pc, #252]	; (8006e5c <OSPI_NOR_ExitOPIMode+0x180>)
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	4613      	mov	r3, r2
 8006d64:	005b      	lsls	r3, r3, #1
 8006d66:	4413      	add	r3, r2
 8006d68:	4423      	add	r3, r4
 8006d6a:	3302      	adds	r3, #2
 8006d6c:	781a      	ldrb	r2, [r3, #0]
 8006d6e:	7a3b      	ldrb	r3, [r7, #8]
 8006d70:	9300      	str	r3, [sp, #0]
 8006d72:	2300      	movs	r3, #0
 8006d74:	f7fd f9aa 	bl	80040cc <MX25UM51245G_WriteCfg2Register>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d003      	beq.n	8006d86 <OSPI_NOR_ExitOPIMode+0xaa>
                                       Ospi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG1_ADDR,
                                       reg[0]) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006d7e:	f06f 0304 	mvn.w	r3, #4
 8006d82:	60fb      	str	r3, [r7, #12]
 8006d84:	e062      	b.n	8006e4c <OSPI_NOR_ExitOPIMode+0x170>
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
 8006d86:	2028      	movs	r0, #40	; 0x28
 8006d88:	f000 fae6 	bl	8007358 <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8006d8c:	4933      	ldr	r1, [pc, #204]	; (8006e5c <OSPI_NOR_ExitOPIMode+0x180>)
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	4613      	mov	r3, r2
 8006d92:	005b      	lsls	r3, r3, #1
 8006d94:	4413      	add	r3, r2
 8006d96:	440b      	add	r3, r1
 8006d98:	3302      	adds	r3, #2
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d123      	bne.n	8006de8 <OSPI_NOR_ExitOPIMode+0x10c>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
 8006da0:	492d      	ldr	r1, [pc, #180]	; (8006e58 <OSPI_NOR_ExitOPIMode+0x17c>)
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	4613      	mov	r3, r2
 8006da6:	005b      	lsls	r3, r3, #1
 8006da8:	4413      	add	r3, r2
 8006daa:	015b      	lsls	r3, r3, #5
 8006dac:	440b      	add	r3, r1
 8006dae:	330c      	adds	r3, #12
 8006db0:	2200      	movs	r2, #0
 8006db2:	601a      	str	r2, [r3, #0]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8006db4:	4928      	ldr	r1, [pc, #160]	; (8006e58 <OSPI_NOR_ExitOPIMode+0x17c>)
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	4613      	mov	r3, r2
 8006dba:	005b      	lsls	r3, r3, #1
 8006dbc:	4413      	add	r3, r2
 8006dbe:	015b      	lsls	r3, r3, #5
 8006dc0:	440b      	add	r3, r1
 8006dc2:	332c      	adds	r3, #44	; 0x2c
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	601a      	str	r2, [r3, #0]
        if (HAL_XSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	005b      	lsls	r3, r3, #1
 8006dce:	4413      	add	r3, r2
 8006dd0:	015b      	lsls	r3, r3, #5
 8006dd2:	4a21      	ldr	r2, [pc, #132]	; (8006e58 <OSPI_NOR_ExitOPIMode+0x17c>)
 8006dd4:	4413      	add	r3, r2
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f00a ff26 	bl	8011c28 <HAL_XSPI_Init>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d002      	beq.n	8006de8 <OSPI_NOR_ExitOPIMode+0x10c>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006de2:	f06f 0303 	mvn.w	r3, #3
 8006de6:	60fb      	str	r3, [r7, #12]
        }
      }

      if (ret == BSP_ERROR_NONE)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d12e      	bne.n	8006e4c <OSPI_NOR_ExitOPIMode+0x170>
      {
        /* Check Flash busy ? */
        if (MX25UM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE,
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	4613      	mov	r3, r2
 8006df2:	005b      	lsls	r3, r3, #1
 8006df4:	4413      	add	r3, r2
 8006df6:	015b      	lsls	r3, r3, #5
 8006df8:	4a17      	ldr	r2, [pc, #92]	; (8006e58 <OSPI_NOR_ExitOPIMode+0x17c>)
 8006dfa:	4413      	add	r3, r2
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	2100      	movs	r1, #0
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7fc fec8 	bl	8003b96 <MX25UM51245G_AutoPollingMemReady>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d003      	beq.n	8006e14 <OSPI_NOR_ExitOPIMode+0x138>
                                             BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8006e0c:	f06f 0304 	mvn.w	r3, #4
 8006e10:	60fb      	str	r3, [r7, #12]
 8006e12:	e01b      	b.n	8006e4c <OSPI_NOR_ExitOPIMode+0x170>
        }
        /* Check the configuration has been correctly done */
        else if (MX25UM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER,
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	4613      	mov	r3, r2
 8006e18:	005b      	lsls	r3, r3, #1
 8006e1a:	4413      	add	r3, r2
 8006e1c:	015b      	lsls	r3, r3, #5
 8006e1e:	4a0e      	ldr	r2, [pc, #56]	; (8006e58 <OSPI_NOR_ExitOPIMode+0x17c>)
 8006e20:	1898      	adds	r0, r3, r2
 8006e22:	f107 0308 	add.w	r3, r7, #8
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	2300      	movs	r3, #0
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	f7fd f9e2 	bl	80041f6 <MX25UM51245G_ReadCfg2Register>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d003      	beq.n	8006e40 <OSPI_NOR_ExitOPIMode+0x164>
                                               MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8006e38:	f06f 0304 	mvn.w	r3, #4
 8006e3c:	60fb      	str	r3, [r7, #12]
 8006e3e:	e005      	b.n	8006e4c <OSPI_NOR_ExitOPIMode+0x170>
        }
        else if (reg[0] != 0U)
 8006e40:	7a3b      	ldrb	r3, [r7, #8]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d002      	beq.n	8006e4c <OSPI_NOR_ExitOPIMode+0x170>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8006e46:	f06f 0304 	mvn.w	r3, #4
 8006e4a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3714      	adds	r7, #20
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd90      	pop	{r4, r7, pc}
 8006e56:	bf00      	nop
 8006e58:	20197204 	.word	0x20197204
 8006e5c:	20197264 	.word	0x20197264

08006e60 <BSP_TS_Init>:
  * @param  Instance TS Instance.
  * @param  TS_Init  Pointer to TS initialization structure.
  * @retval BSP status.
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b088      	sub	sp, #32
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	61fb      	str	r3, [r7, #28]

  if ((TS_Init == NULL) || (Instance >= TS_INSTANCES_NBR))
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d002      	beq.n	8006e7a <BSP_TS_Init+0x1a>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <BSP_TS_Init+0x22>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8006e7a:	f06f 0301 	mvn.w	r3, #1
 8006e7e:	61fb      	str	r3, [r7, #28]
 8006e80:	e07f      	b.n	8006f82 <BSP_TS_Init+0x122>
  }
  else
  {
    /* Probe the TS driver */
    if (SITRONIX_Probe(Instance) != BSP_ERROR_NONE)
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 f98c 	bl	80071a0 <SITRONIX_Probe>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d003      	beq.n	8006e96 <BSP_TS_Init+0x36>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8006e8e:	f06f 0304 	mvn.w	r3, #4
 8006e92:	61fb      	str	r3, [r7, #28]
 8006e94:	e075      	b.n	8006f82 <BSP_TS_Init+0x122>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t          i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	493c      	ldr	r1, [pc, #240]	; (8006f8c <BSP_TS_Init+0x12c>)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2068      	movs	r0, #104	; 0x68
 8006ea0:	fb00 f303 	mul.w	r3, r0, r3
 8006ea4:	440b      	add	r3, r1
 8006ea6:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	4937      	ldr	r1, [pc, #220]	; (8006f8c <BSP_TS_Init+0x12c>)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2068      	movs	r0, #104	; 0x68
 8006eb2:	fb00 f303 	mul.w	r3, r0, r3
 8006eb6:	440b      	add	r3, r1
 8006eb8:	3304      	adds	r3, #4
 8006eba:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	689a      	ldr	r2, [r3, #8]
 8006ec0:	4932      	ldr	r1, [pc, #200]	; (8006f8c <BSP_TS_Init+0x12c>)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2068      	movs	r0, #104	; 0x68
 8006ec6:	fb00 f303 	mul.w	r3, r0, r3
 8006eca:	440b      	add	r3, r1
 8006ecc:	3308      	adds	r3, #8
 8006ece:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	68da      	ldr	r2, [r3, #12]
 8006ed4:	492d      	ldr	r1, [pc, #180]	; (8006f8c <BSP_TS_Init+0x12c>)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2068      	movs	r0, #104	; 0x68
 8006eda:	fb00 f303 	mul.w	r3, r0, r3
 8006ede:	440b      	add	r3, r1
 8006ee0:	330c      	adds	r3, #12
 8006ee2:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
      if (Ts_Drv[Instance]->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8006ee4:	4a2a      	ldr	r2, [pc, #168]	; (8006f90 <BSP_TS_Init+0x130>)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eec:	69db      	ldr	r3, [r3, #28]
 8006eee:	4929      	ldr	r1, [pc, #164]	; (8006f94 <BSP_TS_Init+0x134>)
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006ef6:	f107 010c 	add.w	r1, r7, #12
 8006efa:	4610      	mov	r0, r2
 8006efc:	4798      	blx	r3
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	da03      	bge.n	8006f0c <BSP_TS_Init+0xac>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 8006f04:	f06f 0304 	mvn.w	r3, #4
 8006f08:	61fb      	str	r3, [r7, #28]
 8006f0a:	e03a      	b.n	8006f82 <BSP_TS_Init+0x122>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	491f      	ldr	r1, [pc, #124]	; (8006f8c <BSP_TS_Init+0x12c>)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2068      	movs	r0, #104	; 0x68
 8006f14:	fb00 f303 	mul.w	r3, r0, r3
 8006f18:	440b      	add	r3, r1
 8006f1a:	3310      	adds	r3, #16
 8006f1c:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8006f1e:	697a      	ldr	r2, [r7, #20]
 8006f20:	491a      	ldr	r1, [pc, #104]	; (8006f8c <BSP_TS_Init+0x12c>)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2068      	movs	r0, #104	; 0x68
 8006f26:	fb00 f303 	mul.w	r3, r0, r3
 8006f2a:	440b      	add	r3, r1
 8006f2c:	3314      	adds	r3, #20
 8006f2e:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for (i = 0; i < TS_TOUCH_NBR; i++)
 8006f30:	2300      	movs	r3, #0
 8006f32:	61bb      	str	r3, [r7, #24]
 8006f34:	e022      	b.n	8006f7c <BSP_TS_Init+0x11c>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	4413      	add	r3, r2
 8006f40:	1c5a      	adds	r2, r3, #1
 8006f42:	4812      	ldr	r0, [pc, #72]	; (8006f8c <BSP_TS_Init+0x12c>)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	211a      	movs	r1, #26
 8006f48:	fb03 f101 	mul.w	r1, r3, r1
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	440b      	add	r3, r1
 8006f50:	3306      	adds	r3, #6
 8006f52:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	685a      	ldr	r2, [r3, #4]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	4413      	add	r3, r2
 8006f60:	1c5a      	adds	r2, r3, #1
 8006f62:	480a      	ldr	r0, [pc, #40]	; (8006f8c <BSP_TS_Init+0x12c>)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	211a      	movs	r1, #26
 8006f68:	fb03 f101 	mul.w	r1, r3, r1
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	440b      	add	r3, r1
 8006f70:	3310      	adds	r3, #16
 8006f72:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        for (i = 0; i < TS_TOUCH_NBR; i++)
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	61bb      	str	r3, [r7, #24]
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	2b09      	cmp	r3, #9
 8006f80:	d9d9      	bls.n	8006f36 <BSP_TS_Init+0xd6>
        }
      }
    }
  }

  return status;
 8006f82:	69fb      	ldr	r3, [r7, #28]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3720      	adds	r7, #32
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	20197270 	.word	0x20197270
 8006f90:	2019726c 	.word	0x2019726c
 8006f94:	20197268 	.word	0x20197268

08006f98 <BSP_TS_GetState>:
  * @param  Instance TS Instance.
  * @param  TS_State Pointer to single touch structure.
  * @retval BSP status.
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b08a      	sub	sp, #40	; 0x28
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented;
  uint32_t y_oriented;
  uint32_t x_diff;
  uint32_t y_diff;

  if (Instance >= TS_INSTANCES_NBR)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d003      	beq.n	8006fb4 <BSP_TS_GetState+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8006fac:	f06f 0301 	mvn.w	r3, #1
 8006fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8006fb2:	e0ea      	b.n	800718a <BSP_TS_GetState+0x1f2>
  else
  {
    SITRONIX_State_t state;

    /* Get each touch coordinates */
    if (Ts_Drv[Instance]->GetState(Ts_CompObj[Instance], &state) < 0)
 8006fb4:	4a77      	ldr	r2, [pc, #476]	; (8007194 <BSP_TS_GetState+0x1fc>)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	4976      	ldr	r1, [pc, #472]	; (8007198 <BSP_TS_GetState+0x200>)
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006fc6:	f107 0108 	add.w	r1, r7, #8
 8006fca:	4610      	mov	r0, r2
 8006fcc:	4798      	blx	r3
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	da03      	bge.n	8006fdc <BSP_TS_GetState+0x44>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8006fd4:	f06f 0304 	mvn.w	r3, #4
 8006fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8006fda:	e0d6      	b.n	800718a <BSP_TS_GetState+0x1f2>
    }/* Check and update the number of touches active detected */
    else if (state.TouchDetected != 0U)
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	f000 80bc 	beq.w	800715c <BSP_TS_GetState+0x1c4>
    {
      x_oriented = /*Ts_Ctx[Instance].MaxX -*/ state.TouchX;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	623b      	str	r3, [r7, #32]
      y_oriented = /*Ts_Ctx[Instance].MaxY -*/ state.TouchY;
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	61fb      	str	r3, [r7, #28]

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / (Ts_Ctx[Instance].MaxX);
 8006fec:	4a6b      	ldr	r2, [pc, #428]	; (800719c <BSP_TS_GetState+0x204>)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2168      	movs	r1, #104	; 0x68
 8006ff2:	fb01 f303 	mul.w	r3, r1, r3
 8006ff6:	4413      	add	r3, r2
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	6a3a      	ldr	r2, [r7, #32]
 8006ffc:	fb03 f202 	mul.w	r2, r3, r2
 8007000:	4966      	ldr	r1, [pc, #408]	; (800719c <BSP_TS_GetState+0x204>)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2068      	movs	r0, #104	; 0x68
 8007006:	fb00 f303 	mul.w	r3, r0, r3
 800700a:	440b      	add	r3, r1
 800700c:	3310      	adds	r3, #16
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	fbb2 f2f3 	udiv	r2, r2, r3
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / (Ts_Ctx[Instance].MaxY);
 8007018:	4a60      	ldr	r2, [pc, #384]	; (800719c <BSP_TS_GetState+0x204>)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2168      	movs	r1, #104	; 0x68
 800701e:	fb01 f303 	mul.w	r3, r1, r3
 8007022:	4413      	add	r3, r2
 8007024:	3304      	adds	r3, #4
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	69fa      	ldr	r2, [r7, #28]
 800702a:	fb03 f202 	mul.w	r2, r3, r2
 800702e:	495b      	ldr	r1, [pc, #364]	; (800719c <BSP_TS_GetState+0x204>)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2068      	movs	r0, #104	; 0x68
 8007034:	fb00 f303 	mul.w	r3, r0, r3
 8007038:	440b      	add	r3, r1
 800703a:	3314      	adds	r3, #20
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0]) ?
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	4952      	ldr	r1, [pc, #328]	; (800719c <BSP_TS_GetState+0x204>)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2068      	movs	r0, #104	; 0x68
 8007056:	fb00 f303 	mul.w	r3, r0, r3
 800705a:	440b      	add	r3, r1
 800705c:	3318      	adds	r3, #24
 800705e:	681b      	ldr	r3, [r3, #0]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]) :
 8007060:	429a      	cmp	r2, r3
 8007062:	d90b      	bls.n	800707c <BSP_TS_GetState+0xe4>
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	494c      	ldr	r1, [pc, #304]	; (800719c <BSP_TS_GetState+0x204>)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2068      	movs	r0, #104	; 0x68
 800706e:	fb00 f303 	mul.w	r3, r0, r3
 8007072:	440b      	add	r3, r1
 8007074:	3318      	adds	r3, #24
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	e00a      	b.n	8007092 <BSP_TS_GetState+0xfa>
               (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 800707c:	4a47      	ldr	r2, [pc, #284]	; (800719c <BSP_TS_GetState+0x204>)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2168      	movs	r1, #104	; 0x68
 8007082:	fb01 f303 	mul.w	r3, r1, r3
 8007086:	4413      	add	r3, r2
 8007088:	3318      	adds	r3, #24
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]) :
 8007090:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0]) ?
 8007092:	61bb      	str	r3, [r7, #24]

      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0]) ?
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	689a      	ldr	r2, [r3, #8]
 8007098:	4940      	ldr	r1, [pc, #256]	; (800719c <BSP_TS_GetState+0x204>)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2068      	movs	r0, #104	; 0x68
 800709e:	fb00 f303 	mul.w	r3, r0, r3
 80070a2:	440b      	add	r3, r1
 80070a4:	3340      	adds	r3, #64	; 0x40
 80070a6:	681b      	ldr	r3, [r3, #0]
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]) :
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d90b      	bls.n	80070c4 <BSP_TS_GetState+0x12c>
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	689a      	ldr	r2, [r3, #8]
 80070b0:	493a      	ldr	r1, [pc, #232]	; (800719c <BSP_TS_GetState+0x204>)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2068      	movs	r0, #104	; 0x68
 80070b6:	fb00 f303 	mul.w	r3, r0, r3
 80070ba:	440b      	add	r3, r1
 80070bc:	3340      	adds	r3, #64	; 0x40
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	e00a      	b.n	80070da <BSP_TS_GetState+0x142>
               (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 80070c4:	4a35      	ldr	r2, [pc, #212]	; (800719c <BSP_TS_GetState+0x204>)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2168      	movs	r1, #104	; 0x68
 80070ca:	fb01 f303 	mul.w	r3, r1, r3
 80070ce:	4413      	add	r3, r2
 80070d0:	3340      	adds	r3, #64	; 0x40
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	689b      	ldr	r3, [r3, #8]
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]) :
 80070d8:	1ad3      	subs	r3, r2, r3
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0]) ?
 80070da:	617b      	str	r3, [r7, #20]

      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80070dc:	4a2f      	ldr	r2, [pc, #188]	; (800719c <BSP_TS_GetState+0x204>)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2168      	movs	r1, #104	; 0x68
 80070e2:	fb01 f303 	mul.w	r3, r1, r3
 80070e6:	4413      	add	r3, r2
 80070e8:	330c      	adds	r3, #12
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	69ba      	ldr	r2, [r7, #24]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d80a      	bhi.n	8007108 <BSP_TS_GetState+0x170>
 80070f2:	4a2a      	ldr	r2, [pc, #168]	; (800719c <BSP_TS_GetState+0x204>)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2168      	movs	r1, #104	; 0x68
 80070f8:	fb01 f303 	mul.w	r3, r1, r3
 80070fc:	4413      	add	r3, r2
 80070fe:	330c      	adds	r3, #12
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	429a      	cmp	r2, r3
 8007106:	d914      	bls.n	8007132 <BSP_TS_GetState+0x19a>
      {
        /* New touch detected */
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	685a      	ldr	r2, [r3, #4]
 800710c:	4923      	ldr	r1, [pc, #140]	; (800719c <BSP_TS_GetState+0x204>)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2068      	movs	r0, #104	; 0x68
 8007112:	fb00 f303 	mul.w	r3, r0, r3
 8007116:	440b      	add	r3, r1
 8007118:	3318      	adds	r3, #24
 800711a:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	689a      	ldr	r2, [r3, #8]
 8007120:	491e      	ldr	r1, [pc, #120]	; (800719c <BSP_TS_GetState+0x204>)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2068      	movs	r0, #104	; 0x68
 8007126:	fb00 f303 	mul.w	r3, r0, r3
 800712a:	440b      	add	r3, r1
 800712c:	3340      	adds	r3, #64	; 0x40
 800712e:	601a      	str	r2, [r3, #0]
 8007130:	e02b      	b.n	800718a <BSP_TS_GetState+0x1f2>
      }
      else
      {
        TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8007132:	4a1a      	ldr	r2, [pc, #104]	; (800719c <BSP_TS_GetState+0x204>)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2168      	movs	r1, #104	; 0x68
 8007138:	fb01 f303 	mul.w	r3, r1, r3
 800713c:	4413      	add	r3, r2
 800713e:	3318      	adds	r3, #24
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	605a      	str	r2, [r3, #4]
        TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8007146:	4a15      	ldr	r2, [pc, #84]	; (800719c <BSP_TS_GetState+0x204>)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2168      	movs	r1, #104	; 0x68
 800714c:	fb01 f303 	mul.w	r3, r1, r3
 8007150:	4413      	add	r3, r2
 8007152:	3340      	adds	r3, #64	; 0x40
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	609a      	str	r2, [r3, #8]
 800715a:	e016      	b.n	800718a <BSP_TS_GetState+0x1f2>
      }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	2200      	movs	r2, #0
 8007160:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8007162:	4a0e      	ldr	r2, [pc, #56]	; (800719c <BSP_TS_GetState+0x204>)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2168      	movs	r1, #104	; 0x68
 8007168:	fb01 f303 	mul.w	r3, r1, r3
 800716c:	4413      	add	r3, r2
 800716e:	3318      	adds	r3, #24
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8007176:	4a09      	ldr	r2, [pc, #36]	; (800719c <BSP_TS_GetState+0x204>)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2168      	movs	r1, #104	; 0x68
 800717c:	fb01 f303 	mul.w	r3, r1, r3
 8007180:	4413      	add	r3, r2
 8007182:	3340      	adds	r3, #64	; 0x40
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	609a      	str	r2, [r3, #8]
    }
  }

  return status;
 800718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800718c:	4618      	mov	r0, r3
 800718e:	3728      	adds	r7, #40	; 0x28
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}
 8007194:	2019726c 	.word	0x2019726c
 8007198:	20197268 	.word	0x20197268
 800719c:	20197270 	.word	0x20197270

080071a0 <SITRONIX_Probe>:
  * @brief  Probe the SITRONIX TS driver.
  * @param  Instance TS Instance.
  * @retval BSP status.
  */
static int32_t SITRONIX_Probe(uint32_t Instance)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b08a      	sub	sp, #40	; 0x28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  int32_t                  status;
  SITRONIX_IO_t              IOCtx;
  static SITRONIX_Object_t SITRONIXObj;

  /* Configure the TS driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 80071a8:	23e0      	movs	r3, #224	; 0xe0
 80071aa:	823b      	strh	r3, [r7, #16]
  IOCtx.Init        = BSP_I2C5_Init;
 80071ac:	4b1d      	ldr	r3, [pc, #116]	; (8007224 <SITRONIX_Probe+0x84>)
 80071ae:	60bb      	str	r3, [r7, #8]
  IOCtx.DeInit      = BSP_I2C5_DeInit;
 80071b0:	4b1d      	ldr	r3, [pc, #116]	; (8007228 <SITRONIX_Probe+0x88>)
 80071b2:	60fb      	str	r3, [r7, #12]
  IOCtx.ReadReg     = BSP_I2C5_ReadReg;
 80071b4:	4b1d      	ldr	r3, [pc, #116]	; (800722c <SITRONIX_Probe+0x8c>)
 80071b6:	61bb      	str	r3, [r7, #24]
  IOCtx.WriteReg    = BSP_I2C5_WriteReg;
 80071b8:	4b1d      	ldr	r3, [pc, #116]	; (8007230 <SITRONIX_Probe+0x90>)
 80071ba:	617b      	str	r3, [r7, #20]
  IOCtx.ReadData    = BSP_I2C5_Recv;
 80071bc:	4b1d      	ldr	r3, [pc, #116]	; (8007234 <SITRONIX_Probe+0x94>)
 80071be:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = BSP_GetTick;
 80071c0:	4b1d      	ldr	r3, [pc, #116]	; (8007238 <SITRONIX_Probe+0x98>)
 80071c2:	623b      	str	r3, [r7, #32]

  if (SITRONIX_RegisterBusIO(&SITRONIXObj, &IOCtx) != SITRONIX_OK)
 80071c4:	f107 0308 	add.w	r3, r7, #8
 80071c8:	4619      	mov	r1, r3
 80071ca:	481c      	ldr	r0, [pc, #112]	; (800723c <SITRONIX_Probe+0x9c>)
 80071cc:	f7fd f962 	bl	8004494 <SITRONIX_RegisterBusIO>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d003      	beq.n	80071de <SITRONIX_Probe+0x3e>
  {
    status = BSP_ERROR_BUS_FAILURE;
 80071d6:	f06f 0307 	mvn.w	r3, #7
 80071da:	627b      	str	r3, [r7, #36]	; 0x24
 80071dc:	e01d      	b.n	800721a <SITRONIX_Probe+0x7a>
  }
  else
  {
    Ts_CompObj[Instance] = &SITRONIXObj;
 80071de:	4a18      	ldr	r2, [pc, #96]	; (8007240 <SITRONIX_Probe+0xa0>)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4916      	ldr	r1, [pc, #88]	; (800723c <SITRONIX_Probe+0x9c>)
 80071e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv[Instance]     = (TS_Drv_t *) &SITRONIX_TS_Driver;
 80071e8:	4a16      	ldr	r2, [pc, #88]	; (8007244 <SITRONIX_Probe+0xa4>)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4916      	ldr	r1, [pc, #88]	; (8007248 <SITRONIX_Probe+0xa8>)
 80071ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if (Ts_Drv[Instance]->Init(Ts_CompObj[Instance]) < 0)
 80071f2:	4a14      	ldr	r2, [pc, #80]	; (8007244 <SITRONIX_Probe+0xa4>)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4910      	ldr	r1, [pc, #64]	; (8007240 <SITRONIX_Probe+0xa0>)
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007204:	4610      	mov	r0, r2
 8007206:	4798      	blx	r3
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	da03      	bge.n	8007216 <SITRONIX_Probe+0x76>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 800720e:	f06f 0304 	mvn.w	r3, #4
 8007212:	627b      	str	r3, [r7, #36]	; 0x24
 8007214:	e001      	b.n	800721a <SITRONIX_Probe+0x7a>
    }
    else
    {
      status = BSP_ERROR_NONE;
 8007216:	2300      	movs	r3, #0
 8007218:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return status;
 800721a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800721c:	4618      	mov	r0, r3
 800721e:	3728      	adds	r7, #40	; 0x28
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	080048b5 	.word	0x080048b5
 8007228:	08004929 	.word	0x08004929
 800722c:	08004a51 	.word	0x08004a51
 8007230:	080049f5 	.word	0x080049f5
 8007234:	08004aad 	.word	0x08004aad
 8007238:	08004afd 	.word	0x08004afd
 800723c:	201972d8 	.word	0x201972d8
 8007240:	20197268 	.word	0x20197268
 8007244:	2019726c 	.word	0x2019726c
 8007248:	20000010 	.word	0x20000010

0800724c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800724c:	b480      	push	{r7}
 800724e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8007250:	4b18      	ldr	r3, [pc, #96]	; (80072b4 <SystemInit+0x68>)
 8007252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007256:	4a17      	ldr	r2, [pc, #92]	; (80072b4 <SystemInit+0x68>)
 8007258:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800725c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8007260:	4b15      	ldr	r3, [pc, #84]	; (80072b8 <SystemInit+0x6c>)
 8007262:	2201      	movs	r2, #1
 8007264:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8007266:	4b14      	ldr	r3, [pc, #80]	; (80072b8 <SystemInit+0x6c>)
 8007268:	2200      	movs	r2, #0
 800726a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800726c:	4b12      	ldr	r3, [pc, #72]	; (80072b8 <SystemInit+0x6c>)
 800726e:	2200      	movs	r2, #0
 8007270:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8007272:	4b11      	ldr	r3, [pc, #68]	; (80072b8 <SystemInit+0x6c>)
 8007274:	2200      	movs	r2, #0
 8007276:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8007278:	4b0f      	ldr	r3, [pc, #60]	; (80072b8 <SystemInit+0x6c>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a0e      	ldr	r2, [pc, #56]	; (80072b8 <SystemInit+0x6c>)
 800727e:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8007282:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8007286:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8007288:	4b0b      	ldr	r3, [pc, #44]	; (80072b8 <SystemInit+0x6c>)
 800728a:	2200      	movs	r2, #0
 800728c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800728e:	4b0a      	ldr	r3, [pc, #40]	; (80072b8 <SystemInit+0x6c>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a09      	ldr	r2, [pc, #36]	; (80072b8 <SystemInit+0x6c>)
 8007294:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007298:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800729a:	4b07      	ldr	r3, [pc, #28]	; (80072b8 <SystemInit+0x6c>)
 800729c:	2200      	movs	r2, #0
 800729e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80072a0:	4b04      	ldr	r3, [pc, #16]	; (80072b4 <SystemInit+0x68>)
 80072a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80072a6:	609a      	str	r2, [r3, #8]
  #endif
}
 80072a8:	bf00      	nop
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	e000ed00 	.word	0xe000ed00
 80072b8:	46020c00 	.word	0x46020c00

080072bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80072c0:	4b11      	ldr	r3, [pc, #68]	; (8007308 <HAL_Init+0x4c>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a10      	ldr	r2, [pc, #64]	; (8007308 <HAL_Init+0x4c>)
 80072c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80072cc:	2003      	movs	r0, #3
 80072ce:	f000 f914 	bl	80074fa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80072d2:	f005 fc7f 	bl	800cbd4 <HAL_RCC_GetSysClockFreq>
 80072d6:	4602      	mov	r2, r0
 80072d8:	4b0c      	ldr	r3, [pc, #48]	; (800730c <HAL_Init+0x50>)
 80072da:	6a1b      	ldr	r3, [r3, #32]
 80072dc:	f003 030f 	and.w	r3, r3, #15
 80072e0:	490b      	ldr	r1, [pc, #44]	; (8007310 <HAL_Init+0x54>)
 80072e2:	5ccb      	ldrb	r3, [r1, r3]
 80072e4:	fa22 f303 	lsr.w	r3, r2, r3
 80072e8:	4a0a      	ldr	r2, [pc, #40]	; (8007314 <HAL_Init+0x58>)
 80072ea:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80072ec:	2000      	movs	r0, #0
 80072ee:	f7fa fab1 	bl	8001854 <HAL_InitTick>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d001      	beq.n	80072fc <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e002      	b.n	8007302 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80072fc:	f7fa f8e6 	bl	80014cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	40022000 	.word	0x40022000
 800730c:	46020c00 	.word	0x46020c00
 8007310:	0802a79c 	.word	0x0802a79c
 8007314:	20000048 	.word	0x20000048

08007318 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007318:	b480      	push	{r7}
 800731a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800731c:	4b06      	ldr	r3, [pc, #24]	; (8007338 <HAL_IncTick+0x20>)
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	461a      	mov	r2, r3
 8007322:	4b06      	ldr	r3, [pc, #24]	; (800733c <HAL_IncTick+0x24>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4413      	add	r3, r2
 8007328:	4a04      	ldr	r2, [pc, #16]	; (800733c <HAL_IncTick+0x24>)
 800732a:	6013      	str	r3, [r2, #0]
}
 800732c:	bf00      	nop
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	20000050 	.word	0x20000050
 800733c:	20197308 	.word	0x20197308

08007340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007340:	b480      	push	{r7}
 8007342:	af00      	add	r7, sp, #0
  return uwTick;
 8007344:	4b03      	ldr	r3, [pc, #12]	; (8007354 <HAL_GetTick+0x14>)
 8007346:	681b      	ldr	r3, [r3, #0]
}
 8007348:	4618      	mov	r0, r3
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	20197308 	.word	0x20197308

08007358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007360:	f7ff ffee 	bl	8007340 <HAL_GetTick>
 8007364:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007370:	d005      	beq.n	800737e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007372:	4b0a      	ldr	r3, [pc, #40]	; (800739c <HAL_Delay+0x44>)
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	461a      	mov	r2, r3
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	4413      	add	r3, r2
 800737c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800737e:	bf00      	nop
 8007380:	f7ff ffde 	bl	8007340 <HAL_GetTick>
 8007384:	4602      	mov	r2, r0
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	1ad3      	subs	r3, r2, r3
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	429a      	cmp	r2, r3
 800738e:	d8f7      	bhi.n	8007380 <HAL_Delay+0x28>
  {
  }
}
 8007390:	bf00      	nop
 8007392:	bf00      	nop
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	20000050 	.word	0x20000050

080073a0 <__NVIC_SetPriorityGrouping>:
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f003 0307 	and.w	r3, r3, #7
 80073ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80073b0:	4b0c      	ldr	r3, [pc, #48]	; (80073e4 <__NVIC_SetPriorityGrouping+0x44>)
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80073bc:	4013      	ands	r3, r2
 80073be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80073c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80073cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80073d2:	4a04      	ldr	r2, [pc, #16]	; (80073e4 <__NVIC_SetPriorityGrouping+0x44>)
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	60d3      	str	r3, [r2, #12]
}
 80073d8:	bf00      	nop
 80073da:	3714      	adds	r7, #20
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr
 80073e4:	e000ed00 	.word	0xe000ed00

080073e8 <__NVIC_GetPriorityGrouping>:
{
 80073e8:	b480      	push	{r7}
 80073ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80073ec:	4b04      	ldr	r3, [pc, #16]	; (8007400 <__NVIC_GetPriorityGrouping+0x18>)
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	0a1b      	lsrs	r3, r3, #8
 80073f2:	f003 0307 	and.w	r3, r3, #7
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr
 8007400:	e000ed00 	.word	0xe000ed00

08007404 <__NVIC_EnableIRQ>:
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	4603      	mov	r3, r0
 800740c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800740e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007412:	2b00      	cmp	r3, #0
 8007414:	db0b      	blt.n	800742e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007416:	88fb      	ldrh	r3, [r7, #6]
 8007418:	f003 021f 	and.w	r2, r3, #31
 800741c:	4907      	ldr	r1, [pc, #28]	; (800743c <__NVIC_EnableIRQ+0x38>)
 800741e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007422:	095b      	lsrs	r3, r3, #5
 8007424:	2001      	movs	r0, #1
 8007426:	fa00 f202 	lsl.w	r2, r0, r2
 800742a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800742e:	bf00      	nop
 8007430:	370c      	adds	r7, #12
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	e000e100 	.word	0xe000e100

08007440 <__NVIC_SetPriority>:
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	4603      	mov	r3, r0
 8007448:	6039      	str	r1, [r7, #0]
 800744a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800744c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007450:	2b00      	cmp	r3, #0
 8007452:	db0a      	blt.n	800746a <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	b2da      	uxtb	r2, r3
 8007458:	490c      	ldr	r1, [pc, #48]	; (800748c <__NVIC_SetPriority+0x4c>)
 800745a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800745e:	0112      	lsls	r2, r2, #4
 8007460:	b2d2      	uxtb	r2, r2
 8007462:	440b      	add	r3, r1
 8007464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007468:	e00a      	b.n	8007480 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	b2da      	uxtb	r2, r3
 800746e:	4908      	ldr	r1, [pc, #32]	; (8007490 <__NVIC_SetPriority+0x50>)
 8007470:	88fb      	ldrh	r3, [r7, #6]
 8007472:	f003 030f 	and.w	r3, r3, #15
 8007476:	3b04      	subs	r3, #4
 8007478:	0112      	lsls	r2, r2, #4
 800747a:	b2d2      	uxtb	r2, r2
 800747c:	440b      	add	r3, r1
 800747e:	761a      	strb	r2, [r3, #24]
}
 8007480:	bf00      	nop
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr
 800748c:	e000e100 	.word	0xe000e100
 8007490:	e000ed00 	.word	0xe000ed00

08007494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007494:	b480      	push	{r7}
 8007496:	b089      	sub	sp, #36	; 0x24
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f003 0307 	and.w	r3, r3, #7
 80074a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	f1c3 0307 	rsb	r3, r3, #7
 80074ae:	2b04      	cmp	r3, #4
 80074b0:	bf28      	it	cs
 80074b2:	2304      	movcs	r3, #4
 80074b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	3304      	adds	r3, #4
 80074ba:	2b06      	cmp	r3, #6
 80074bc:	d902      	bls.n	80074c4 <NVIC_EncodePriority+0x30>
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	3b03      	subs	r3, #3
 80074c2:	e000      	b.n	80074c6 <NVIC_EncodePriority+0x32>
 80074c4:	2300      	movs	r3, #0
 80074c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074c8:	f04f 32ff 	mov.w	r2, #4294967295
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	fa02 f303 	lsl.w	r3, r2, r3
 80074d2:	43da      	mvns	r2, r3
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	401a      	ands	r2, r3
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80074dc:	f04f 31ff 	mov.w	r1, #4294967295
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	fa01 f303 	lsl.w	r3, r1, r3
 80074e6:	43d9      	mvns	r1, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074ec:	4313      	orrs	r3, r2
         );
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3724      	adds	r7, #36	; 0x24
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b082      	sub	sp, #8
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f7ff ff4c 	bl	80073a0 <__NVIC_SetPriorityGrouping>
}
 8007508:	bf00      	nop
 800750a:	3708      	adds	r7, #8
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af00      	add	r7, sp, #0
 8007516:	4603      	mov	r3, r0
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]
 800751c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800751e:	f7ff ff63 	bl	80073e8 <__NVIC_GetPriorityGrouping>
 8007522:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	68b9      	ldr	r1, [r7, #8]
 8007528:	6978      	ldr	r0, [r7, #20]
 800752a:	f7ff ffb3 	bl	8007494 <NVIC_EncodePriority>
 800752e:	4602      	mov	r2, r0
 8007530:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007534:	4611      	mov	r1, r2
 8007536:	4618      	mov	r0, r3
 8007538:	f7ff ff82 	bl	8007440 <__NVIC_SetPriority>
}
 800753c:	bf00      	nop
 800753e:	3718      	adds	r7, #24
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	4603      	mov	r3, r0
 800754c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800754e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007552:	4618      	mov	r0, r3
 8007554:	f7ff ff56 	bl	8007404 <__NVIC_EnableIRQ>
}
 8007558:	bf00      	nop
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d101      	bne.n	8007572 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e054      	b.n	800761c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	7f5b      	ldrb	r3, [r3, #29]
 8007576:	b2db      	uxtb	r3, r3
 8007578:	2b00      	cmp	r3, #0
 800757a:	d105      	bne.n	8007588 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7f9 ffbc 	bl	8001500 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2202      	movs	r2, #2
 800758c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	791b      	ldrb	r3, [r3, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10c      	bne.n	80075b0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a22      	ldr	r2, [pc, #136]	; (8007624 <HAL_CRC_Init+0xc4>)
 800759c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	689a      	ldr	r2, [r3, #8]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f022 0218 	bic.w	r2, r2, #24
 80075ac:	609a      	str	r2, [r3, #8]
 80075ae:	e00c      	b.n	80075ca <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6899      	ldr	r1, [r3, #8]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	461a      	mov	r2, r3
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f834 	bl	8007628 <HAL_CRCEx_Polynomial_Set>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d001      	beq.n	80075ca <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e028      	b.n	800761c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	795b      	ldrb	r3, [r3, #5]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d105      	bne.n	80075de <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f04f 32ff 	mov.w	r2, #4294967295
 80075da:	611a      	str	r2, [r3, #16]
 80075dc:	e004      	b.n	80075e8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	6912      	ldr	r2, [r2, #16]
 80075e6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	695a      	ldr	r2, [r3, #20]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	430a      	orrs	r2, r1
 80075fc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	699a      	ldr	r2, [r3, #24]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	430a      	orrs	r2, r1
 8007612:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3708      	adds	r7, #8
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	04c11db7 	.word	0x04c11db7

08007628 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8007628:	b480      	push	{r7}
 800762a:	b087      	sub	sp, #28
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007634:	2300      	movs	r3, #0
 8007636:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8007638:	231f      	movs	r3, #31
 800763a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	f003 0301 	and.w	r3, r3, #1
 8007642:	2b00      	cmp	r3, #0
 8007644:	d102      	bne.n	800764c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	75fb      	strb	r3, [r7, #23]
 800764a:	e063      	b.n	8007714 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800764c:	bf00      	nop
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	1e5a      	subs	r2, r3, #1
 8007652:	613a      	str	r2, [r7, #16]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d009      	beq.n	800766c <HAL_CRCEx_Polynomial_Set+0x44>
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	f003 031f 	and.w	r3, r3, #31
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	fa22 f303 	lsr.w	r3, r2, r3
 8007664:	f003 0301 	and.w	r3, r3, #1
 8007668:	2b00      	cmp	r3, #0
 800766a:	d0f0      	beq.n	800764e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2b18      	cmp	r3, #24
 8007670:	d846      	bhi.n	8007700 <HAL_CRCEx_Polynomial_Set+0xd8>
 8007672:	a201      	add	r2, pc, #4	; (adr r2, 8007678 <HAL_CRCEx_Polynomial_Set+0x50>)
 8007674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007678:	08007707 	.word	0x08007707
 800767c:	08007701 	.word	0x08007701
 8007680:	08007701 	.word	0x08007701
 8007684:	08007701 	.word	0x08007701
 8007688:	08007701 	.word	0x08007701
 800768c:	08007701 	.word	0x08007701
 8007690:	08007701 	.word	0x08007701
 8007694:	08007701 	.word	0x08007701
 8007698:	080076f5 	.word	0x080076f5
 800769c:	08007701 	.word	0x08007701
 80076a0:	08007701 	.word	0x08007701
 80076a4:	08007701 	.word	0x08007701
 80076a8:	08007701 	.word	0x08007701
 80076ac:	08007701 	.word	0x08007701
 80076b0:	08007701 	.word	0x08007701
 80076b4:	08007701 	.word	0x08007701
 80076b8:	080076e9 	.word	0x080076e9
 80076bc:	08007701 	.word	0x08007701
 80076c0:	08007701 	.word	0x08007701
 80076c4:	08007701 	.word	0x08007701
 80076c8:	08007701 	.word	0x08007701
 80076cc:	08007701 	.word	0x08007701
 80076d0:	08007701 	.word	0x08007701
 80076d4:	08007701 	.word	0x08007701
 80076d8:	080076dd 	.word	0x080076dd
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	2b06      	cmp	r3, #6
 80076e0:	d913      	bls.n	800770a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80076e6:	e010      	b.n	800770a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	2b07      	cmp	r3, #7
 80076ec:	d90f      	bls.n	800770e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80076f2:	e00c      	b.n	800770e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	2b0f      	cmp	r3, #15
 80076f8:	d90b      	bls.n	8007712 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80076fe:	e008      	b.n	8007712 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	75fb      	strb	r3, [r7, #23]
        break;
 8007704:	e006      	b.n	8007714 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007706:	bf00      	nop
 8007708:	e004      	b.n	8007714 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800770a:	bf00      	nop
 800770c:	e002      	b.n	8007714 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800770e:	bf00      	nop
 8007710:	e000      	b.n	8007714 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007712:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8007714:	7dfb      	ldrb	r3, [r7, #23]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d10d      	bne.n	8007736 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68ba      	ldr	r2, [r7, #8]
 8007720:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	f023 0118 	bic.w	r1, r3, #24
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	430a      	orrs	r2, r1
 8007734:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8007736:	7dfb      	ldrb	r3, [r7, #23]
}
 8007738:	4618      	mov	r0, r3
 800773a:	371c      	adds	r7, #28
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e037      	b.n	80077c6 <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800775c:	b2db      	uxtb	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d119      	bne.n	8007796 <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a1a      	ldr	r2, [pc, #104]	; (80077d0 <HAL_DCACHE_Init+0x8c>)
 8007766:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a1a      	ldr	r2, [pc, #104]	; (80077d4 <HAL_DCACHE_Init+0x90>)
 800776c:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a19      	ldr	r2, [pc, #100]	; (80077d8 <HAL_DCACHE_Init+0x94>)
 8007772:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4a19      	ldr	r2, [pc, #100]	; (80077dc <HAL_DCACHE_Init+0x98>)
 8007778:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a18      	ldr	r2, [pc, #96]	; (80077e0 <HAL_DCACHE_Init+0x9c>)
 800777e:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	69db      	ldr	r3, [r3, #28]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d102      	bne.n	800778e <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a16      	ldr	r2, [pc, #88]	; (80077e4 <HAL_DCACHE_Init+0xa0>)
 800778c:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	69db      	ldr	r3, [r3, #28]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	685a      	ldr	r2, [r3, #4]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	430a      	orrs	r2, r1
 80077b8:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f814 	bl	80077e8 <HAL_DCACHE_Enable>
 80077c0:	4603      	mov	r3, r0
 80077c2:	73fb      	strb	r3, [r7, #15]

  return status;
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	08007937 	.word	0x08007937
 80077d4:	080078e7 	.word	0x080078e7
 80077d8:	080078fb 	.word	0x080078fb
 80077dc:	08007923 	.word	0x08007923
 80077e0:	0800790f 	.word	0x0800790f
 80077e4:	08001545 	.word	0x08001545

080077e8 <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077f0:	2300      	movs	r3, #0
 80077f2:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d101      	bne.n	80077fe <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e015      	b.n	800782a <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	f003 0309 	and.w	r3, r3, #9
 8007808:	2b00      	cmp	r3, #0
 800780a:	d002      	beq.n	8007812 <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 800780c:	2302      	movs	r3, #2
 800780e:	73fb      	strb	r3, [r7, #15]
 8007810:	e00a      	b.n	8007828 <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	629a      	str	r2, [r3, #40]	; 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f042 0201 	orr.w	r2, r2, #1
 8007826:	601a      	str	r2, [r3, #0]
  }

  return status;
 8007828:	7bfb      	ldrb	r3, [r7, #15]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3714      	adds	r7, #20
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr

08007836 <HAL_DCACHE_Invalidate>:
  *                 the configuration information for the specified DCACHEx peripheral.
  * @note   This function waits for end of full cache invalidation
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Invalidate(DCACHE_HandleTypeDef *hdcache)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b084      	sub	sp, #16
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800783e:	2300      	movs	r3, #0
 8007840:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d101      	bne.n	800784c <HAL_DCACHE_Invalidate+0x16>
  {
    return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e048      	b.n	80078de <HAL_DCACHE_Invalidate+0xa8>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	f003 0309 	and.w	r3, r3, #9
 8007856:	2b00      	cmp	r3, #0
 8007858:	d002      	beq.n	8007860 <HAL_DCACHE_Invalidate+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 800785a:	2302      	movs	r3, #2
 800785c:	73fb      	strb	r3, [r7, #15]
 800785e:	e03d      	b.n	80078dc <HAL_DCACHE_Invalidate+0xa6>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	629a      	str	r2, [r3, #40]	; 0x28

    /* Change DCACHE Handle state */
    hdcache->State = HAL_DCACHE_STATE_READY;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2201      	movs	r2, #1
 800786a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Make sure flags are reset */
    WRITE_REG(hdcache->Instance->FCR, (DCACHE_FCR_CBSYENDF | DCACHE_FCR_CCMDENDF));
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2212      	movs	r2, #18
 8007874:	60da      	str	r2, [r3, #12]

    /* Set no operation on address range */
    MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_CACHECMD, 0U);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007884:	601a      	str	r2, [r3, #0]

    /* Launch cache invalidation */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_CACHEINV);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f042 0202 	orr.w	r2, r2, #2
 8007894:	601a      	str	r2, [r3, #0]

    /* Get timeout */
    tickstart = HAL_GetTick();
 8007896:	f7ff fd53 	bl	8007340 <HAL_GetTick>
 800789a:	60b8      	str	r0, [r7, #8]

    /* Wait for end of cache invalidation */
    while (READ_BIT(hdcache->Instance->SR, DCACHE_SR_BUSYF) != 0U)
 800789c:	e017      	b.n	80078ce <HAL_DCACHE_Invalidate+0x98>
    {
      if ((HAL_GetTick() - tickstart) > DCACHE_COMMAND_TIMEOUT_VALUE)
 800789e:	f7ff fd4f 	bl	8007340 <HAL_GetTick>
 80078a2:	4602      	mov	r2, r0
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	2bc8      	cmp	r3, #200	; 0xc8
 80078aa:	d910      	bls.n	80078ce <HAL_DCACHE_Invalidate+0x98>
      {
        if (READ_BIT(hdcache->Instance->SR, DCACHE_SR_BUSYF) != 0U)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	f003 0301 	and.w	r3, r3, #1
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d009      	beq.n	80078ce <HAL_DCACHE_Invalidate+0x98>
        {
          /* Update error code */
          hdcache->ErrorCode = HAL_DCACHE_ERROR_TIMEOUT;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2210      	movs	r2, #16
 80078be:	629a      	str	r2, [r3, #40]	; 0x28

          /* Change the DCACHE state */
          hdcache->State = HAL_DCACHE_STATE_ERROR;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2206      	movs	r2, #6
 80078c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          /* Return error status */
          status =  HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	73fb      	strb	r3, [r7, #15]
          break;
 80078cc:	e006      	b.n	80078dc <HAL_DCACHE_Invalidate+0xa6>
    while (READ_BIT(hdcache->Instance->SR, DCACHE_SR_BUSYF) != 0U)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	f003 0301 	and.w	r3, r3, #1
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1e0      	bne.n	800789e <HAL_DCACHE_Invalidate+0x68>
        }
      }
    }
  }

  return status;
 80078dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3710      	adds	r7, #16
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 80078e6:	b480      	push	{r7}
 80078e8:	b083      	sub	sp, #12
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 80078ee:	bf00      	nop
 80078f0:	370c      	adds	r7, #12
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr

080078fa <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b083      	sub	sp, #12
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 8007902:	bf00      	nop
 8007904:	370c      	adds	r7, #12
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr

0800790e <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 800790e:	b480      	push	{r7}
 8007910:	b083      	sub	sp, #12
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 8007916:	bf00      	nop
 8007918:	370c      	adds	r7, #12
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr

08007922 <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 8007922:	b480      	push	{r7}
 8007924:	b083      	sub	sp, #12
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 800792a:	bf00      	nop
 800792c:	370c      	adds	r7, #12
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr

08007936 <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 8007936:	b480      	push	{r7}
 8007938:	b083      	sub	sp, #12
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 800793e:	bf00      	nop
 8007940:	370c      	adds	r7, #12
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
	...

0800794c <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8007954:	f7ff fcf4 	bl	8007340 <HAL_GetTick>
 8007958:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d101      	bne.n	8007964 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	e0e0      	b.n	8007b26 <HAL_DMA_Init+0x1da>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
  if ((hdma->Init.Direction == DMA_MEMORY_TO_PERIPH) || (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a6f      	ldr	r2, [pc, #444]	; (8007b30 <HAL_DMA_Init+0x1e4>)
 8007972:	4293      	cmp	r3, r2
 8007974:	f000 809f 	beq.w	8007ab6 <HAL_DMA_Init+0x16a>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a6d      	ldr	r2, [pc, #436]	; (8007b34 <HAL_DMA_Init+0x1e8>)
 800797e:	4293      	cmp	r3, r2
 8007980:	f000 8099 	beq.w	8007ab6 <HAL_DMA_Init+0x16a>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a6b      	ldr	r2, [pc, #428]	; (8007b38 <HAL_DMA_Init+0x1ec>)
 800798a:	4293      	cmp	r3, r2
 800798c:	f000 8093 	beq.w	8007ab6 <HAL_DMA_Init+0x16a>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a69      	ldr	r2, [pc, #420]	; (8007b3c <HAL_DMA_Init+0x1f0>)
 8007996:	4293      	cmp	r3, r2
 8007998:	f000 808d 	beq.w	8007ab6 <HAL_DMA_Init+0x16a>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a67      	ldr	r2, [pc, #412]	; (8007b40 <HAL_DMA_Init+0x1f4>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	f000 8087 	beq.w	8007ab6 <HAL_DMA_Init+0x16a>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a65      	ldr	r2, [pc, #404]	; (8007b44 <HAL_DMA_Init+0x1f8>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	f000 8081 	beq.w	8007ab6 <HAL_DMA_Init+0x16a>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a63      	ldr	r2, [pc, #396]	; (8007b48 <HAL_DMA_Init+0x1fc>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d07b      	beq.n	8007ab6 <HAL_DMA_Init+0x16a>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a62      	ldr	r2, [pc, #392]	; (8007b4c <HAL_DMA_Init+0x200>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d076      	beq.n	8007ab6 <HAL_DMA_Init+0x16a>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a60      	ldr	r2, [pc, #384]	; (8007b50 <HAL_DMA_Init+0x204>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d071      	beq.n	8007ab6 <HAL_DMA_Init+0x16a>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a5f      	ldr	r2, [pc, #380]	; (8007b54 <HAL_DMA_Init+0x208>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d06c      	beq.n	8007ab6 <HAL_DMA_Init+0x16a>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a5d      	ldr	r2, [pc, #372]	; (8007b58 <HAL_DMA_Init+0x20c>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d067      	beq.n	8007ab6 <HAL_DMA_Init+0x16a>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a5c      	ldr	r2, [pc, #368]	; (8007b5c <HAL_DMA_Init+0x210>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d062      	beq.n	8007ab6 <HAL_DMA_Init+0x16a>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a5a      	ldr	r2, [pc, #360]	; (8007b60 <HAL_DMA_Init+0x214>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d05d      	beq.n	8007ab6 <HAL_DMA_Init+0x16a>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a59      	ldr	r2, [pc, #356]	; (8007b64 <HAL_DMA_Init+0x218>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d058      	beq.n	8007ab6 <HAL_DMA_Init+0x16a>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a57      	ldr	r2, [pc, #348]	; (8007b68 <HAL_DMA_Init+0x21c>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d053      	beq.n	8007ab6 <HAL_DMA_Init+0x16a>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a56      	ldr	r2, [pc, #344]	; (8007b6c <HAL_DMA_Init+0x220>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d04e      	beq.n	8007ab6 <HAL_DMA_Init+0x16a>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a54      	ldr	r2, [pc, #336]	; (8007b70 <HAL_DMA_Init+0x224>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d049      	beq.n	8007ab6 <HAL_DMA_Init+0x16a>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a53      	ldr	r2, [pc, #332]	; (8007b74 <HAL_DMA_Init+0x228>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d044      	beq.n	8007ab6 <HAL_DMA_Init+0x16a>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a51      	ldr	r2, [pc, #324]	; (8007b78 <HAL_DMA_Init+0x22c>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d03f      	beq.n	8007ab6 <HAL_DMA_Init+0x16a>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a50      	ldr	r2, [pc, #320]	; (8007b7c <HAL_DMA_Init+0x230>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d03a      	beq.n	8007ab6 <HAL_DMA_Init+0x16a>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a4e      	ldr	r2, [pc, #312]	; (8007b80 <HAL_DMA_Init+0x234>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d035      	beq.n	8007ab6 <HAL_DMA_Init+0x16a>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a4d      	ldr	r2, [pc, #308]	; (8007b84 <HAL_DMA_Init+0x238>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d030      	beq.n	8007ab6 <HAL_DMA_Init+0x16a>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a4b      	ldr	r2, [pc, #300]	; (8007b88 <HAL_DMA_Init+0x23c>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d02b      	beq.n	8007ab6 <HAL_DMA_Init+0x16a>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a4a      	ldr	r2, [pc, #296]	; (8007b8c <HAL_DMA_Init+0x240>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d026      	beq.n	8007ab6 <HAL_DMA_Init+0x16a>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a48      	ldr	r2, [pc, #288]	; (8007b90 <HAL_DMA_Init+0x244>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d021      	beq.n	8007ab6 <HAL_DMA_Init+0x16a>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a47      	ldr	r2, [pc, #284]	; (8007b94 <HAL_DMA_Init+0x248>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d01c      	beq.n	8007ab6 <HAL_DMA_Init+0x16a>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a45      	ldr	r2, [pc, #276]	; (8007b98 <HAL_DMA_Init+0x24c>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d017      	beq.n	8007ab6 <HAL_DMA_Init+0x16a>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a44      	ldr	r2, [pc, #272]	; (8007b9c <HAL_DMA_Init+0x250>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d012      	beq.n	8007ab6 <HAL_DMA_Init+0x16a>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a42      	ldr	r2, [pc, #264]	; (8007ba0 <HAL_DMA_Init+0x254>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d00d      	beq.n	8007ab6 <HAL_DMA_Init+0x16a>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a41      	ldr	r2, [pc, #260]	; (8007ba4 <HAL_DMA_Init+0x258>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d008      	beq.n	8007ab6 <HAL_DMA_Init+0x16a>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a3f      	ldr	r2, [pc, #252]	; (8007ba8 <HAL_DMA_Init+0x25c>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d003      	beq.n	8007ab6 <HAL_DMA_Init+0x16a>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a3e      	ldr	r2, [pc, #248]	; (8007bac <HAL_DMA_Init+0x260>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	bf00      	nop
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2202      	movs	r2, #2
 8007ac4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	695a      	ldr	r2, [r3, #20]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f042 0206 	orr.w	r2, r2, #6
 8007ad6:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8007ad8:	e00f      	b.n	8007afa <HAL_DMA_Init+0x1ae>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8007ada:	f7ff fc31 	bl	8007340 <HAL_GetTick>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	2b05      	cmp	r3, #5
 8007ae6:	d908      	bls.n	8007afa <HAL_DMA_Init+0x1ae>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2210      	movs	r2, #16
 8007aec:	659a      	str	r2, [r3, #88]	; 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2203      	movs	r2, #3
 8007af2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e015      	b.n	8007b26 <HAL_DMA_Init+0x1da>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	695b      	ldr	r3, [r3, #20]
 8007b00:	f003 0301 	and.w	r3, r3, #1
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1e8      	bne.n	8007ada <HAL_DMA_Init+0x18e>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 f8cd 	bl	8007ca8 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	40020050 	.word	0x40020050
 8007b34:	50020050 	.word	0x50020050
 8007b38:	400200d0 	.word	0x400200d0
 8007b3c:	500200d0 	.word	0x500200d0
 8007b40:	40020150 	.word	0x40020150
 8007b44:	50020150 	.word	0x50020150
 8007b48:	400201d0 	.word	0x400201d0
 8007b4c:	500201d0 	.word	0x500201d0
 8007b50:	40020250 	.word	0x40020250
 8007b54:	50020250 	.word	0x50020250
 8007b58:	400202d0 	.word	0x400202d0
 8007b5c:	500202d0 	.word	0x500202d0
 8007b60:	40020350 	.word	0x40020350
 8007b64:	50020350 	.word	0x50020350
 8007b68:	400203d0 	.word	0x400203d0
 8007b6c:	500203d0 	.word	0x500203d0
 8007b70:	40020450 	.word	0x40020450
 8007b74:	50020450 	.word	0x50020450
 8007b78:	400204d0 	.word	0x400204d0
 8007b7c:	500204d0 	.word	0x500204d0
 8007b80:	40020550 	.word	0x40020550
 8007b84:	50020550 	.word	0x50020550
 8007b88:	400205d0 	.word	0x400205d0
 8007b8c:	500205d0 	.word	0x500205d0
 8007b90:	40020650 	.word	0x40020650
 8007b94:	50020650 	.word	0x50020650
 8007b98:	400206d0 	.word	0x400206d0
 8007b9c:	500206d0 	.word	0x500206d0
 8007ba0:	40020750 	.word	0x40020750
 8007ba4:	50020750 	.word	0x50020750
 8007ba8:	400207d0 	.word	0x400207d0
 8007bac:	500207d0 	.word	0x500207d0

08007bb0 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8007bb8:	f7ff fbc2 	bl	8007340 <HAL_GetTick>
 8007bbc:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d101      	bne.n	8007bc8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e06b      	b.n	8007ca0 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	d008      	beq.n	8007be6 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2220      	movs	r2, #32
 8007bd8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e05c      	b.n	8007ca0 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	695a      	ldr	r2, [r3, #20]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f042 0204 	orr.w	r2, r2, #4
 8007bf4:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2205      	movs	r2, #5
 8007bfa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8007bfe:	e020      	b.n	8007c42 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8007c00:	f7ff fb9e 	bl	8007340 <HAL_GetTick>
 8007c04:	4602      	mov	r2, r0
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	1ad3      	subs	r3, r2, r3
 8007c0a:	2b05      	cmp	r3, #5
 8007c0c:	d919      	bls.n	8007c42 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c12:	f043 0210 	orr.w	r2, r3, #16
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2203      	movs	r2, #3
 8007c1e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d003      	beq.n	8007c36 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c32:	2201      	movs	r2, #1
 8007c34:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e02e      	b.n	8007ca0 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d0d7      	beq.n	8007c00 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	695a      	ldr	r2, [r3, #20]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f042 0202 	orr.w	r2, r2, #2
 8007c5e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2204      	movs	r2, #4
 8007c64:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8007c70:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d007      	beq.n	8007c96 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2200      	movs	r2, #0
 8007c94:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3710      	adds	r7, #16
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a1b      	ldr	r3, [r3, #32]
 8007cb4:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	695b      	ldr	r3, [r3, #20]
 8007cbc:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	430a      	orrs	r2, r1
 8007cc8:	615a      	str	r2, [r3, #20]


  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	695a      	ldr	r2, [r3, #20]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	69db      	ldr	r3, [r3, #28]
 8007cd2:	431a      	orrs	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	431a      	orrs	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a53      	ldr	r2, [pc, #332]	; (8007e34 <DMA_Init+0x18c>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	f000 80a0 	beq.w	8007e2e <DMA_Init+0x186>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a51      	ldr	r2, [pc, #324]	; (8007e38 <DMA_Init+0x190>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	f000 809a 	beq.w	8007e2e <DMA_Init+0x186>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a4f      	ldr	r2, [pc, #316]	; (8007e3c <DMA_Init+0x194>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	f000 8094 	beq.w	8007e2e <DMA_Init+0x186>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a4d      	ldr	r2, [pc, #308]	; (8007e40 <DMA_Init+0x198>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	f000 808e 	beq.w	8007e2e <DMA_Init+0x186>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a4b      	ldr	r2, [pc, #300]	; (8007e44 <DMA_Init+0x19c>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	f000 8088 	beq.w	8007e2e <DMA_Init+0x186>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a49      	ldr	r2, [pc, #292]	; (8007e48 <DMA_Init+0x1a0>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	f000 8082 	beq.w	8007e2e <DMA_Init+0x186>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a47      	ldr	r2, [pc, #284]	; (8007e4c <DMA_Init+0x1a4>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d07c      	beq.n	8007e2e <DMA_Init+0x186>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a45      	ldr	r2, [pc, #276]	; (8007e50 <DMA_Init+0x1a8>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d077      	beq.n	8007e2e <DMA_Init+0x186>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a44      	ldr	r2, [pc, #272]	; (8007e54 <DMA_Init+0x1ac>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d072      	beq.n	8007e2e <DMA_Init+0x186>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a42      	ldr	r2, [pc, #264]	; (8007e58 <DMA_Init+0x1b0>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d06d      	beq.n	8007e2e <DMA_Init+0x186>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a41      	ldr	r2, [pc, #260]	; (8007e5c <DMA_Init+0x1b4>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d068      	beq.n	8007e2e <DMA_Init+0x186>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a3f      	ldr	r2, [pc, #252]	; (8007e60 <DMA_Init+0x1b8>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d063      	beq.n	8007e2e <DMA_Init+0x186>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a3e      	ldr	r2, [pc, #248]	; (8007e64 <DMA_Init+0x1bc>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d05e      	beq.n	8007e2e <DMA_Init+0x186>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a3c      	ldr	r2, [pc, #240]	; (8007e68 <DMA_Init+0x1c0>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d059      	beq.n	8007e2e <DMA_Init+0x186>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a3b      	ldr	r2, [pc, #236]	; (8007e6c <DMA_Init+0x1c4>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d054      	beq.n	8007e2e <DMA_Init+0x186>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a39      	ldr	r2, [pc, #228]	; (8007e70 <DMA_Init+0x1c8>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d04f      	beq.n	8007e2e <DMA_Init+0x186>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a38      	ldr	r2, [pc, #224]	; (8007e74 <DMA_Init+0x1cc>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d04a      	beq.n	8007e2e <DMA_Init+0x186>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a36      	ldr	r2, [pc, #216]	; (8007e78 <DMA_Init+0x1d0>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d045      	beq.n	8007e2e <DMA_Init+0x186>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a35      	ldr	r2, [pc, #212]	; (8007e7c <DMA_Init+0x1d4>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d040      	beq.n	8007e2e <DMA_Init+0x186>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a33      	ldr	r2, [pc, #204]	; (8007e80 <DMA_Init+0x1d8>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d03b      	beq.n	8007e2e <DMA_Init+0x186>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a32      	ldr	r2, [pc, #200]	; (8007e84 <DMA_Init+0x1dc>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d036      	beq.n	8007e2e <DMA_Init+0x186>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a30      	ldr	r2, [pc, #192]	; (8007e88 <DMA_Init+0x1e0>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d031      	beq.n	8007e2e <DMA_Init+0x186>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a2f      	ldr	r2, [pc, #188]	; (8007e8c <DMA_Init+0x1e4>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d02c      	beq.n	8007e2e <DMA_Init+0x186>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a2d      	ldr	r2, [pc, #180]	; (8007e90 <DMA_Init+0x1e8>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d027      	beq.n	8007e2e <DMA_Init+0x186>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a2c      	ldr	r2, [pc, #176]	; (8007e94 <DMA_Init+0x1ec>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d022      	beq.n	8007e2e <DMA_Init+0x186>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a2a      	ldr	r2, [pc, #168]	; (8007e98 <DMA_Init+0x1f0>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d01d      	beq.n	8007e2e <DMA_Init+0x186>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a29      	ldr	r2, [pc, #164]	; (8007e9c <DMA_Init+0x1f4>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d018      	beq.n	8007e2e <DMA_Init+0x186>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a27      	ldr	r2, [pc, #156]	; (8007ea0 <DMA_Init+0x1f8>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d013      	beq.n	8007e2e <DMA_Init+0x186>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a26      	ldr	r2, [pc, #152]	; (8007ea4 <DMA_Init+0x1fc>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d00e      	beq.n	8007e2e <DMA_Init+0x186>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a24      	ldr	r2, [pc, #144]	; (8007ea8 <DMA_Init+0x200>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d009      	beq.n	8007e2e <DMA_Init+0x186>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a23      	ldr	r2, [pc, #140]	; (8007eac <DMA_Init+0x204>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d004      	beq.n	8007e2e <DMA_Init+0x186>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a21      	ldr	r2, [pc, #132]	; (8007eb0 <DMA_Init+0x208>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d142      	bne.n	8007eb4 <DMA_Init+0x20c>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e041      	b.n	8007eb6 <DMA_Init+0x20e>
 8007e32:	bf00      	nop
 8007e34:	40020050 	.word	0x40020050
 8007e38:	50020050 	.word	0x50020050
 8007e3c:	400200d0 	.word	0x400200d0
 8007e40:	500200d0 	.word	0x500200d0
 8007e44:	40020150 	.word	0x40020150
 8007e48:	50020150 	.word	0x50020150
 8007e4c:	400201d0 	.word	0x400201d0
 8007e50:	500201d0 	.word	0x500201d0
 8007e54:	40020250 	.word	0x40020250
 8007e58:	50020250 	.word	0x50020250
 8007e5c:	400202d0 	.word	0x400202d0
 8007e60:	500202d0 	.word	0x500202d0
 8007e64:	40020350 	.word	0x40020350
 8007e68:	50020350 	.word	0x50020350
 8007e6c:	400203d0 	.word	0x400203d0
 8007e70:	500203d0 	.word	0x500203d0
 8007e74:	40020450 	.word	0x40020450
 8007e78:	50020450 	.word	0x50020450
 8007e7c:	400204d0 	.word	0x400204d0
 8007e80:	500204d0 	.word	0x500204d0
 8007e84:	40020550 	.word	0x40020550
 8007e88:	50020550 	.word	0x50020550
 8007e8c:	400205d0 	.word	0x400205d0
 8007e90:	500205d0 	.word	0x500205d0
 8007e94:	40020650 	.word	0x40020650
 8007e98:	50020650 	.word	0x50020650
 8007e9c:	400206d0 	.word	0x400206d0
 8007ea0:	500206d0 	.word	0x500206d0
 8007ea4:	40020750 	.word	0x40020750
 8007ea8:	50020750 	.word	0x50020750
 8007eac:	400207d0 	.word	0x400207d0
 8007eb0:	500207d0 	.word	0x500207d0
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d012      	beq.n	8007ee0 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	051b      	lsls	r3, r3, #20
 8007ec6:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8007eca:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	011b      	lsls	r3, r3, #4
 8007ed4:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8007ed8:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee6:	f003 2180 	and.w	r1, r3, #2147516416	; 0x80008000
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	430a      	orrs	r2, r1
 8007ef2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	689a      	ldr	r2, [r3, #8]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f00:	431a      	orrs	r2, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f06:	4313      	orrs	r3, r2
 8007f08:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f12:	f040 80b0 	bne.w	8008076 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a82      	ldr	r2, [pc, #520]	; (8008124 <DMA_Init+0x47c>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	f000 80a0 	beq.w	8008062 <DMA_Init+0x3ba>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a80      	ldr	r2, [pc, #512]	; (8008128 <DMA_Init+0x480>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	f000 809a 	beq.w	8008062 <DMA_Init+0x3ba>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a7e      	ldr	r2, [pc, #504]	; (800812c <DMA_Init+0x484>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	f000 8094 	beq.w	8008062 <DMA_Init+0x3ba>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a7c      	ldr	r2, [pc, #496]	; (8008130 <DMA_Init+0x488>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	f000 808e 	beq.w	8008062 <DMA_Init+0x3ba>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a7a      	ldr	r2, [pc, #488]	; (8008134 <DMA_Init+0x48c>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	f000 8088 	beq.w	8008062 <DMA_Init+0x3ba>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a78      	ldr	r2, [pc, #480]	; (8008138 <DMA_Init+0x490>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	f000 8082 	beq.w	8008062 <DMA_Init+0x3ba>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a76      	ldr	r2, [pc, #472]	; (800813c <DMA_Init+0x494>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d07c      	beq.n	8008062 <DMA_Init+0x3ba>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a74      	ldr	r2, [pc, #464]	; (8008140 <DMA_Init+0x498>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d077      	beq.n	8008062 <DMA_Init+0x3ba>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a73      	ldr	r2, [pc, #460]	; (8008144 <DMA_Init+0x49c>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d072      	beq.n	8008062 <DMA_Init+0x3ba>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a71      	ldr	r2, [pc, #452]	; (8008148 <DMA_Init+0x4a0>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d06d      	beq.n	8008062 <DMA_Init+0x3ba>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a70      	ldr	r2, [pc, #448]	; (800814c <DMA_Init+0x4a4>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d068      	beq.n	8008062 <DMA_Init+0x3ba>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a6e      	ldr	r2, [pc, #440]	; (8008150 <DMA_Init+0x4a8>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d063      	beq.n	8008062 <DMA_Init+0x3ba>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a6d      	ldr	r2, [pc, #436]	; (8008154 <DMA_Init+0x4ac>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d05e      	beq.n	8008062 <DMA_Init+0x3ba>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a6b      	ldr	r2, [pc, #428]	; (8008158 <DMA_Init+0x4b0>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d059      	beq.n	8008062 <DMA_Init+0x3ba>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a6a      	ldr	r2, [pc, #424]	; (800815c <DMA_Init+0x4b4>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d054      	beq.n	8008062 <DMA_Init+0x3ba>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a68      	ldr	r2, [pc, #416]	; (8008160 <DMA_Init+0x4b8>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d04f      	beq.n	8008062 <DMA_Init+0x3ba>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a67      	ldr	r2, [pc, #412]	; (8008164 <DMA_Init+0x4bc>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d04a      	beq.n	8008062 <DMA_Init+0x3ba>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a65      	ldr	r2, [pc, #404]	; (8008168 <DMA_Init+0x4c0>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d045      	beq.n	8008062 <DMA_Init+0x3ba>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a64      	ldr	r2, [pc, #400]	; (800816c <DMA_Init+0x4c4>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d040      	beq.n	8008062 <DMA_Init+0x3ba>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a62      	ldr	r2, [pc, #392]	; (8008170 <DMA_Init+0x4c8>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d03b      	beq.n	8008062 <DMA_Init+0x3ba>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a61      	ldr	r2, [pc, #388]	; (8008174 <DMA_Init+0x4cc>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d036      	beq.n	8008062 <DMA_Init+0x3ba>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a5f      	ldr	r2, [pc, #380]	; (8008178 <DMA_Init+0x4d0>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d031      	beq.n	8008062 <DMA_Init+0x3ba>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a5e      	ldr	r2, [pc, #376]	; (800817c <DMA_Init+0x4d4>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d02c      	beq.n	8008062 <DMA_Init+0x3ba>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a5c      	ldr	r2, [pc, #368]	; (8008180 <DMA_Init+0x4d8>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d027      	beq.n	8008062 <DMA_Init+0x3ba>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a5b      	ldr	r2, [pc, #364]	; (8008184 <DMA_Init+0x4dc>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d022      	beq.n	8008062 <DMA_Init+0x3ba>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a59      	ldr	r2, [pc, #356]	; (8008188 <DMA_Init+0x4e0>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d01d      	beq.n	8008062 <DMA_Init+0x3ba>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a58      	ldr	r2, [pc, #352]	; (800818c <DMA_Init+0x4e4>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d018      	beq.n	8008062 <DMA_Init+0x3ba>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a56      	ldr	r2, [pc, #344]	; (8008190 <DMA_Init+0x4e8>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d013      	beq.n	8008062 <DMA_Init+0x3ba>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a55      	ldr	r2, [pc, #340]	; (8008194 <DMA_Init+0x4ec>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d00e      	beq.n	8008062 <DMA_Init+0x3ba>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a53      	ldr	r2, [pc, #332]	; (8008198 <DMA_Init+0x4f0>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d009      	beq.n	8008062 <DMA_Init+0x3ba>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a52      	ldr	r2, [pc, #328]	; (800819c <DMA_Init+0x4f4>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d004      	beq.n	8008062 <DMA_Init+0x3ba>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a50      	ldr	r2, [pc, #320]	; (80081a0 <DMA_Init+0x4f8>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d101      	bne.n	8008066 <DMA_Init+0x3be>
 8008062:	2301      	movs	r3, #1
 8008064:	e000      	b.n	8008068 <DMA_Init+0x3c0>
 8008066:	2300      	movs	r3, #0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00d      	beq.n	8008088 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008072:	60fb      	str	r3, [r7, #12]
 8008074:	e008      	b.n	8008088 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800807e:	d103      	bne.n	8008088 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008086:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800808e:	4b45      	ldr	r3, [pc, #276]	; (80081a4 <DMA_Init+0x4fc>)
 8008090:	4013      	ands	r3, r2
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	6812      	ldr	r2, [r2, #0]
 8008096:	68f9      	ldr	r1, [r7, #12]
 8008098:	430b      	orrs	r3, r1
 800809a:	6453      	str	r3, [r2, #68]	; 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2200      	movs	r2, #0
 80080a2:	649a      	str	r2, [r3, #72]	; 0x48


  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a36      	ldr	r2, [pc, #216]	; (8008184 <DMA_Init+0x4dc>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d022      	beq.n	80080f4 <DMA_Init+0x44c>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a35      	ldr	r2, [pc, #212]	; (8008188 <DMA_Init+0x4e0>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d01d      	beq.n	80080f4 <DMA_Init+0x44c>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a33      	ldr	r2, [pc, #204]	; (800818c <DMA_Init+0x4e4>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d018      	beq.n	80080f4 <DMA_Init+0x44c>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a32      	ldr	r2, [pc, #200]	; (8008190 <DMA_Init+0x4e8>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d013      	beq.n	80080f4 <DMA_Init+0x44c>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a30      	ldr	r2, [pc, #192]	; (8008194 <DMA_Init+0x4ec>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d00e      	beq.n	80080f4 <DMA_Init+0x44c>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a2f      	ldr	r2, [pc, #188]	; (8008198 <DMA_Init+0x4f0>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d009      	beq.n	80080f4 <DMA_Init+0x44c>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a2d      	ldr	r2, [pc, #180]	; (800819c <DMA_Init+0x4f4>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d004      	beq.n	80080f4 <DMA_Init+0x44c>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a2c      	ldr	r2, [pc, #176]	; (80081a0 <DMA_Init+0x4f8>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d101      	bne.n	80080f8 <DMA_Init+0x450>
 80080f4:	2301      	movs	r3, #1
 80080f6:	e000      	b.n	80080fa <DMA_Init+0x452>
 80080f8:	2300      	movs	r3, #0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d007      	beq.n	800810e <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2200      	movs	r2, #0
 8008104:	655a      	str	r2, [r3, #84]	; 0x54


    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2200      	movs	r2, #0
 800810c:	659a      	str	r2, [r3, #88]	; 0x58
  }


  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2200      	movs	r2, #0
 8008114:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8008116:	bf00      	nop
 8008118:	3714      	adds	r7, #20
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	40020050 	.word	0x40020050
 8008128:	50020050 	.word	0x50020050
 800812c:	400200d0 	.word	0x400200d0
 8008130:	500200d0 	.word	0x500200d0
 8008134:	40020150 	.word	0x40020150
 8008138:	50020150 	.word	0x50020150
 800813c:	400201d0 	.word	0x400201d0
 8008140:	500201d0 	.word	0x500201d0
 8008144:	40020250 	.word	0x40020250
 8008148:	50020250 	.word	0x50020250
 800814c:	400202d0 	.word	0x400202d0
 8008150:	500202d0 	.word	0x500202d0
 8008154:	40020350 	.word	0x40020350
 8008158:	50020350 	.word	0x50020350
 800815c:	400203d0 	.word	0x400203d0
 8008160:	500203d0 	.word	0x500203d0
 8008164:	40020450 	.word	0x40020450
 8008168:	50020450 	.word	0x50020450
 800816c:	400204d0 	.word	0x400204d0
 8008170:	500204d0 	.word	0x500204d0
 8008174:	40020550 	.word	0x40020550
 8008178:	50020550 	.word	0x50020550
 800817c:	400205d0 	.word	0x400205d0
 8008180:	500205d0 	.word	0x500205d0
 8008184:	40020650 	.word	0x40020650
 8008188:	50020650 	.word	0x50020650
 800818c:	400206d0 	.word	0x400206d0
 8008190:	500206d0 	.word	0x500206d0
 8008194:	40020750 	.word	0x40020750
 8008198:	50020750 	.word	0x50020750
 800819c:	400207d0 	.word	0x400207d0
 80081a0:	500207d0 	.word	0x500207d0
 80081a4:	3cc03180 	.word	0x3cc03180

080081a8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d101      	bne.n	80081ba <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e053      	b.n	8008262 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d106      	bne.n	80081d4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f7f9 f9f2 	bl	80015b8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2202      	movs	r2, #2
 80081d8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80081e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	6851      	ldr	r1, [r2, #4]
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	69d2      	ldr	r2, [r2, #28]
 80081f2:	4311      	orrs	r1, r2
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	6812      	ldr	r2, [r2, #0]
 80081f8:	430b      	orrs	r3, r1
 80081fa:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008202:	f423 7383 	bic.w	r3, r3, #262	; 0x106
 8008206:	f023 0301 	bic.w	r3, r3, #1
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	6891      	ldr	r1, [r2, #8]
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	6992      	ldr	r2, [r2, #24]
 8008212:	4311      	orrs	r1, r2
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	6812      	ldr	r2, [r2, #0]
 8008218:	430b      	orrs	r3, r1
 800821a:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008222:	0c1b      	lsrs	r3, r3, #16
 8008224:	041b      	lsls	r3, r3, #16
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	68d1      	ldr	r1, [r2, #12]
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	6812      	ldr	r2, [r2, #0]
 800822e:	430b      	orrs	r3, r1
 8008230:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008238:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	051a      	lsls	r2, r3, #20
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	695b      	ldr	r3, [r3, #20]
 8008246:	055b      	lsls	r3, r3, #21
 8008248:	431a      	orrs	r2, r3
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	430a      	orrs	r2, r1
 8008250:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3708      	adds	r7, #8
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b084      	sub	sp, #16
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f003 0301 	and.w	r3, r3, #1
 8008288:	2b00      	cmp	r3, #0
 800828a:	d026      	beq.n	80082da <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008292:	2b00      	cmp	r3, #0
 8008294:	d021      	beq.n	80082da <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082a4:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082aa:	f043 0201 	orr.w	r2, r3, #1
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2201      	movs	r2, #1
 80082b8:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2204      	movs	r2, #4
 80082be:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d003      	beq.n	80082da <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f003 0320 	and.w	r3, r3, #32
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d026      	beq.n	8008332 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d021      	beq.n	8008332 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80082fc:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2220      	movs	r2, #32
 8008304:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800830a:	f043 0202 	orr.w	r2, r3, #2
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2204      	movs	r2, #4
 8008316:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008326:	2b00      	cmp	r3, #0
 8008328:	d003      	beq.n	8008332 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f003 0308 	and.w	r3, r3, #8
 8008338:	2b00      	cmp	r3, #0
 800833a:	d026      	beq.n	800838a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008342:	2b00      	cmp	r3, #0
 8008344:	d021      	beq.n	800838a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008354:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2208      	movs	r2, #8
 800835c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008362:	f043 0204 	orr.w	r2, r3, #4
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2204      	movs	r2, #4
 800836e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837e:	2b00      	cmp	r3, #0
 8008380:	d003      	beq.n	800838a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f003 0304 	and.w	r3, r3, #4
 8008390:	2b00      	cmp	r3, #0
 8008392:	d013      	beq.n	80083bc <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00e      	beq.n	80083bc <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083ac:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2204      	movs	r2, #4
 80083b4:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 f853 	bl	8008462 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f003 0302 	and.w	r3, r3, #2
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d024      	beq.n	8008410 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d01f      	beq.n	8008410 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80083de:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2202      	movs	r2, #2
 80083e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferCpltCallback != NULL)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a1b      	ldr	r3, [r3, #32]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d003      	beq.n	8008410 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a1b      	ldr	r3, [r3, #32]
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f003 0310 	and.w	r3, r3, #16
 8008416:	2b00      	cmp	r3, #0
 8008418:	d01f      	beq.n	800845a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008420:	2b00      	cmp	r3, #0
 8008422:	d01a      	beq.n	800845a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008432:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2210      	movs	r2, #16
 800843a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2201      	movs	r2, #1
 8008448:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 f80e 	bl	8008476 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800845a:	bf00      	nop
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}

08008462 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8008462:	b480      	push	{r7}
 8008464:	b083      	sub	sp, #12
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800846a:	bf00      	nop
 800846c:	370c      	adds	r7, #12
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr

08008476 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8008476:	b480      	push	{r7}
 8008478:	b083      	sub	sp, #12
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800847e:	bf00      	nop
 8008480:	370c      	adds	r7, #12
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr

0800848a <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 800848a:	b480      	push	{r7}
 800848c:	b085      	sub	sp, #20
 800848e:	af00      	add	r7, sp, #0
 8008490:	60f8      	str	r0, [r7, #12]
 8008492:	60b9      	str	r1, [r7, #8]
 8008494:	607a      	str	r2, [r7, #4]
 8008496:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	019a      	lsls	r2, r3, #6
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	431a      	orrs	r2, r3
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	021b      	lsls	r3, r3, #8
 80084a4:	431a      	orrs	r2, r3
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	041b      	lsls	r3, r3, #16
 80084aa:	431a      	orrs	r2, r3
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80084b0:	bf00      	nop
 80084b2:	3714      	adds	r7, #20
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b086      	sub	sp, #24
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	607a      	str	r2, [r7, #4]
 80084c8:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80084ca:	f7fe ff39 	bl	8007340 <HAL_GetTick>
 80084ce:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80084d0:	e008      	b.n	80084e4 <DSI_ShortWrite+0x28>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80084d2:	f7fe ff35 	bl	8007340 <HAL_GetTick>
 80084d6:	4602      	mov	r2, r0
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	2b64      	cmp	r3, #100	; 0x64
 80084de:	d901      	bls.n	80084e4 <DSI_ShortWrite+0x28>
    {
      return HAL_TIMEOUT;
 80084e0:	2303      	movs	r3, #3
 80084e2:	e015      	b.n	8008510 <DSI_ShortWrite+0x54>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084ea:	f003 0301 	and.w	r3, r3, #1
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d0ef      	beq.n	80084d2 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	019a      	lsls	r2, r3, #6
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	431a      	orrs	r2, r3
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	021b      	lsls	r3, r3, #8
 80084fe:	ea42 0103 	orr.w	r1, r2, r3
 8008502:	6a3b      	ldr	r3, [r7, #32]
 8008504:	041a      	lsls	r2, r3, #16
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	430a      	orrs	r2, r1
 800850c:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	3718      	adds	r7, #24
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <DSI_ConfigBandControl>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
static void DSI_ConfigBandControl(DSI_HandleTypeDef *hdsi)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]

  /* Set Band Control Frequency for clock lane */
  hdsi->Instance->DPCBCR &= ~DSI_DPCBCR;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8008530:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
  hdsi->Instance->DPCBCR |= (hdsi->Init.PHYFrequencyRange << DSI_DPCBCR_Pos);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f8d3 1c04 	ldr.w	r1, [r3, #3076]	; 0xc04
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	00da      	lsls	r2, r3, #3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	430a      	orrs	r2, r1
 8008548:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04

  /* Set the slew rate for clock lane */
  hdsi->Instance->DPCSRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	220e      	movs	r2, #14
 8008552:	f8c3 2c34 	str.w	r2, [r3, #3124]	; 0xc34

  /* Set Band Control Frequency for Data Lane0 */
  hdsi->Instance->DPDL0BCR &= ~DSI_DPDL0BCR;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f8d3 2c70 	ldr.w	r2, [r3, #3184]	; 0xc70
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f022 021f 	bic.w	r2, r2, #31
 8008566:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70
  hdsi->Instance->DPDL0BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL0BCR_Pos);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	6912      	ldr	r2, [r2, #16]
 8008572:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70

  /* Set the slew rate for data Lane0 */
  hdsi->Instance->DPDL0SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	220e      	movs	r2, #14
 800857c:	f8c3 2ca0 	str.w	r2, [r3, #3232]	; 0xca0

  /* Set Band Control Frequency for Data Lane1 */
  hdsi->Instance->DPDL1BCR &= ~DSI_DPDL1BCR;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f8d3 2d08 	ldr.w	r2, [r3, #3336]	; 0xd08
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f022 021f 	bic.w	r2, r2, #31
 8008590:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
  hdsi->Instance->DPDL1BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL1BCR_Pos);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	6912      	ldr	r2, [r2, #16]
 800859c:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08

  /* Set Slew rate for data Lane1 */
  hdsi->Instance->DPDL1SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	220e      	movs	r2, #14
 80085a6:	f8c3 2d38 	str.w	r2, [r3, #3384]	; 0xd38

  /* Set HS prepare offset for data lanes */
  hdsi->Instance->DPDL0HSOCR &= ~DSI_DPDL0HSOCR;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f8d3 2c5c 	ldr.w	r2, [r3, #3164]	; 0xc5c
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80085ba:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
  hdsi->Instance->DPDL1HSOCR &= ~DSI_DPDL1HSOCR;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80085ce:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4

  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d007      	beq.n	80085ea <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	691b      	ldr	r3, [r3, #16]
  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 80085de:	2b02      	cmp	r3, #2
 80085e0:	d003      	beq.n	80085ea <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_240MHZ_320MHZ))
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	691b      	ldr	r3, [r3, #16]
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 80085e6:	2b05      	cmp	r3, #5
 80085e8:	d10a      	bne.n	8008600 <DSI_ConfigBandControl+0xe8>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL0HSOCR_Pos);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL1HSOCR_Pos);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
 80085fe:	e02c      	b.n	800865a <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00b      	beq.n	8008620 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 800860c:	2b03      	cmp	r3, #3
 800860e:	d007      	beq.n	8008620 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 8008614:	2b04      	cmp	r3, #4
 8008616:	d003      	beq.n	8008620 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_320MHZ_390MHZ))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 800861c:	2b06      	cmp	r3, #6
 800861e:	d10a      	bne.n	8008636 <DSI_ConfigBandControl+0x11e>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL0HSOCR_Pos);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2210      	movs	r2, #16
 8008626:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL1HSOCR_Pos);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2210      	movs	r2, #16
 8008630:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
 8008634:	e011      	b.n	800865a <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	2b07      	cmp	r3, #7
 800863c:	d003      	beq.n	8008646 <DSI_ConfigBandControl+0x12e>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_450MHZ_510MHZ))
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 8008642:	2b08      	cmp	r3, #8
 8008644:	d109      	bne.n	800865a <DSI_ConfigBandControl+0x142>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL0HSOCR_Pos);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2220      	movs	r2, #32
 800864c:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL1HSOCR_Pos);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2220      	movs	r2, #32
 8008656:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
  {
    /* Nothing to do */
  }

  /* Set LPXO value for data lanes */
  hdsi->Instance->DPDL0LPXOCR &= ~DSI_DPDL0LPXOCR;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f8d3 2c60 	ldr.w	r2, [r3, #3168]	; 0xc60
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f022 020f 	bic.w	r2, r2, #15
 800866a:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
  hdsi->Instance->DPDL1LPXOCR &= ~DSI_DPDL1LPXOCR;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f8d3 2cf8 	ldr.w	r2, [r3, #3320]	; 0xcf8
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f022 020f 	bic.w	r2, r2, #15
 800867e:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8

  hdsi->Instance->DPDL0LPXOCR = hdsi->Init.PHYLowPowerOffset;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	6952      	ldr	r2, [r2, #20]
 800868a:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
  hdsi->Instance->DPDL1LPXOCR = hdsi->Init.PHYLowPowerOffset;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	6952      	ldr	r2, [r2, #20]
 8008696:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8

}
 800869a:	bf00      	nop
 800869c:	370c      	adds	r7, #12
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr

080086a6 <DSI_SetWrapperPLLTuning>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
static void DSI_SetWrapperPLLTuning(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80086a6:	b480      	push	{r7}
 80086a8:	b083      	sub	sp, #12
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
 80086ae:	6039      	str	r1, [r7, #0]
  /* Set the VCO Frequency */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_BC);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80086c0:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (PLLInit->PLLVCORange << DSI_WRPCR_BC_Pos);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	075a      	lsls	r2, r3, #29
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	430a      	orrs	r2, r1
 80086d8:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  hdsi->Instance->WPTR &= ~(DSI_WPTR_LPF | DSI_WPTR_CP);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f8d3 2434 	ldr.w	r2, [r3, #1076]	; 0x434
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80086ec:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

  /* Set PLL Tuning */
  hdsi->Instance->WPTR |= (PLLInit->PLLTuning << DSI_WPTR_LPF_Pos);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	695b      	ldr	r3, [r3, #20]
 80086fc:	031a      	lsls	r2, r3, #12
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	430a      	orrs	r2, r1
 8008704:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

  /* Set PLL_Charge Value */
  hdsi->Instance->WPTR |= (PLLInit->PLLChargePump << DSI_WPTR_CP_Pos);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	691b      	ldr	r3, [r3, #16]
 8008714:	021a      	lsls	r2, r3, #8
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	430a      	orrs	r2, r1
 800871c:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

}
 8008720:	bf00      	nop
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d101      	bne.n	8008740 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	e0c3      	b.n	80088c8 <HAL_DSI_Init+0x19c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	7e5b      	ldrb	r3, [r3, #25]
 8008744:	b2db      	uxtb	r3, r3
 8008746:	2b00      	cmp	r3, #0
 8008748:	d102      	bne.n	8008750 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f7f8 ff5c 	bl	8001608 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2203      	movs	r2, #3
 8008754:	765a      	strb	r2, [r3, #25]

  /**************** Turn on the Reference Bias and enable the DSI PLL ****************/
  /* bias power up */
  hdsi->Instance->BCFGR |= DSI_BCFGR_PWRUP;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008766:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808

  /* Requires min of 2ms delay, 2ms delay is inserted */
  HAL_Delay(2);
 800876a:	2002      	movs	r0, #2
 800876c:	f7fe fdf4 	bl	8007358 <HAL_Delay>


  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	4b54      	ldr	r3, [pc, #336]	; (80088d0 <HAL_DSI_Init+0x1a4>)
 800877e:	400b      	ands	r3, r1
 8008780:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008798:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	051b      	lsls	r3, r3, #20
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80087a0:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	430a      	orrs	r2, r1
 80087a8:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /************************ Set D-PHY Band Control registers ******************************/
  /* Set Band Control Frequency and LPX Offset */
  DSI_ConfigBandControl(hdsi);
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f7ff feb3 	bl	8008518 <DSI_ConfigBandControl>

  /* Set PLL Tuning */
  DSI_SetWrapperPLLTuning(hdsi, PLLInit);
 80087b2:	6839      	ldr	r1, [r7, #0]
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f7ff ff76 	bl	80086a6 <DSI_SetWrapperPLLTuning>

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 80087ba:	2300      	movs	r3, #0
 80087bc:	60bb      	str	r3, [r7, #8]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f042 0201 	orr.w	r2, r2, #1
 80087ce:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80087da:	f003 0301 	and.w	r3, r3, #1
 80087de:	60bb      	str	r3, [r7, #8]
 80087e0:	68bb      	ldr	r3, [r7, #8]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 80087e2:	2001      	movs	r0, #1
 80087e4:	f7fe fdb8 	bl	8007358 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 80087e8:	f7fe fdaa 	bl	8007340 <HAL_GetTick>
 80087ec:	60f8      	str	r0, [r7, #12]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80087ee:	e008      	b.n	8008802 <HAL_DSI_Init+0xd6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80087f0:	f7fe fda6 	bl	8007340 <HAL_GetTick>
 80087f4:	4602      	mov	r2, r0
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	2b64      	cmp	r3, #100	; 0x64
 80087fc:	d901      	bls.n	8008802 <HAL_DSI_Init+0xd6>
    {
      return HAL_TIMEOUT;
 80087fe:	2303      	movs	r3, #3
 8008800:	e062      	b.n	80088c8 <HAL_DSI_Init+0x19c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800880a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800880e:	2b00      	cmp	r3, #0
 8008810:	d0ee      	beq.n	80087f0 <HAL_DSI_Init+0xc4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f042 0206 	orr.w	r2, r2, #6
 8008822:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f022 0203 	bic.w	r2, r2, #3
 8008836:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	431a      	orrs	r2, r3
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f042 0201 	orr.w	r2, r2, #1
 8008850:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f022 0203 	bic.w	r2, r2, #3
 8008864:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	68da      	ldr	r2, [r3, #12]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	430a      	orrs	r2, r1
 800887a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	689a      	ldr	r2, [r3, #8]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800888c:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	6899      	ldr	r1, [r3, #8]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	689a      	ldr	r2, [r3, #8]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	430a      	orrs	r2, r1
 800889e:	609a      	str	r2, [r3, #8]


  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	621a      	str	r2, [r3, #32]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	61da      	str	r2, [r3, #28]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	765a      	strb	r2, [r3, #25]

  return HAL_OK;
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3710      	adds	r7, #16
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	e0000003 	.word	0xe0000003

080088d4 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	7e1b      	ldrb	r3, [r3, #24]
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d101      	bne.n	80088ea <HAL_DSI_ConfigErrorMonitor+0x16>
 80088e6:	2302      	movs	r3, #2
 80088e8:	e0ba      	b.n	8008a60 <HAL_DSI_ConfigErrorMonitor+0x18c>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2201      	movs	r2, #1
 80088ee:	761a      	strb	r2, [r3, #24]

  hdsi->Instance->IER[0U] = 0U;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2200      	movs	r2, #0
 8008900:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	683a      	ldr	r2, [r7, #0]
 8008908:	621a      	str	r2, [r3, #32]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	f003 0301 	and.w	r3, r3, #1
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00b      	beq.n	800892c <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	6812      	ldr	r2, [r2, #0]
 8008920:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8008924:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8008928:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	f003 0302 	and.w	r3, r3, #2
 8008932:	2b00      	cmp	r3, #0
 8008934:	d009      	beq.n	800894a <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8008946:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	f003 0304 	and.w	r3, r3, #4
 8008950:	2b00      	cmp	r3, #0
 8008952:	d009      	beq.n	8008968 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f042 0201 	orr.w	r2, r2, #1
 8008964:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	f003 0308 	and.w	r3, r3, #8
 800896e:	2b00      	cmp	r3, #0
 8008970:	d009      	beq.n	8008986 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f042 0202 	orr.w	r2, r2, #2
 8008982:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	f003 0310 	and.w	r3, r3, #16
 800898c:	2b00      	cmp	r3, #0
 800898e:	d009      	beq.n	80089a4 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f042 020c 	orr.w	r2, r2, #12
 80089a0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	f003 0320 	and.w	r3, r3, #32
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d009      	beq.n	80089c2 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f042 0210 	orr.w	r2, r2, #16
 80089be:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d009      	beq.n	80089e0 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f042 0220 	orr.w	r2, r2, #32
 80089dc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d009      	beq.n	80089fe <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089fa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d009      	beq.n	8008a1c <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008a18:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d009      	beq.n	8008a3a <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8008a36:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PBU) != 0U)
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d009      	beq.n	8008a58 <HAL_DSI_ConfigErrorMonitor+0x184>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PBU_MASK;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8008a54:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	7e1b      	ldrb	r3, [r3, #24]
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d101      	bne.n	8008a82 <HAL_DSI_SetGenericVCID+0x16>
 8008a7e:	2302      	movs	r3, #2
 8008a80:	e019      	b.n	8008ab6 <HAL_DSI_SetGenericVCID+0x4a>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2201      	movs	r2, #1
 8008a86:	761a      	strb	r2, [r3, #24]

  /* Update the GVCIDR register with the Tx and Rx Virtual channel ID */
  hdsi->Instance->GVCIDR &= ~(DSI_GVCIDR_VCIDRX | DSI_GVCIDR_VCIDTX);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f022 1203 	bic.w	r2, r2, #196611	; 0x30003
 8008a96:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
                             (VirtualChannelID << DSI_GVCIDR_VCIDTX_Pos));
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	041a      	lsls	r2, r3, #16
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	431a      	orrs	r2, r3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	430a      	orrs	r2, r1
 8008aac:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	370c      	adds	r7, #12
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr

08008ac2 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8008ac2:	b480      	push	{r7}
 8008ac4:	b083      	sub	sp, #12
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
 8008aca:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	7e1b      	ldrb	r3, [r3, #24]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d101      	bne.n	8008ad8 <HAL_DSI_ConfigVideoMode+0x16>
 8008ad4:	2302      	movs	r3, #2
 8008ad6:	e1f6      	b.n	8008ec6 <HAL_DSI_ConfigVideoMode+0x404>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	761a      	strb	r2, [r3, #24]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f022 0201 	bic.w	r2, r2, #1
 8008aec:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f022 0201 	bic.w	r2, r2, #1
 8008afe:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f022 0203 	bic.w	r2, r2, #3
 8008b10:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	68da      	ldr	r2, [r3, #12]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	430a      	orrs	r2, r1
 8008b22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	6812      	ldr	r2, [r2, #0]
 8008b2e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008b32:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008b36:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	691a      	ldr	r2, [r3, #16]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	430a      	orrs	r2, r1
 8008b48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	6812      	ldr	r2, [r2, #0]
 8008b54:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8008b58:	f023 031f 	bic.w	r3, r3, #31
 8008b5c:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	695a      	ldr	r2, [r3, #20]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	430a      	orrs	r2, r1
 8008b6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	6812      	ldr	r2, [r2, #0]
 8008b7a:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8008b7e:	f023 031f 	bic.w	r3, r3, #31
 8008b82:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	699a      	ldr	r2, [r3, #24]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	430a      	orrs	r2, r1
 8008b94:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68da      	ldr	r2, [r3, #12]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f022 0203 	bic.w	r2, r2, #3
 8008ba4:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	68d9      	ldr	r1, [r3, #12]
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	430a      	orrs	r2, r1
 8008bb6:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	695a      	ldr	r2, [r3, #20]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f022 0207 	bic.w	r2, r2, #7
 8008bc6:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	6959      	ldr	r1, [r3, #20]
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	6a1b      	ldr	r3, [r3, #32]
 8008bd6:	431a      	orrs	r2, r3
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	69db      	ldr	r3, [r3, #28]
 8008bdc:	431a      	orrs	r2, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	430a      	orrs	r2, r1
 8008be4:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	691a      	ldr	r2, [r3, #16]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f022 020f 	bic.w	r2, r2, #15
 8008bf4:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	6919      	ldr	r1, [r3, #16]
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	685a      	ldr	r2, [r3, #4]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	430a      	orrs	r2, r1
 8008c06:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f022 020e 	bic.w	r2, r2, #14
 8008c18:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	005a      	lsls	r2, r3, #1
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	430a      	orrs	r2, r1
 8008c30:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	2b03      	cmp	r3, #3
 8008c3a:	d110      	bne.n	8008c5e <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	691a      	ldr	r2, [r3, #16]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c4a:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	6919      	ldr	r1, [r3, #16]
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	689a      	ldr	r2, [r3, #8]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	430a      	orrs	r2, r1
 8008c5c:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	6812      	ldr	r2, [r2, #0]
 8008c68:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008c6c:	f023 030f 	bic.w	r3, r3, #15
 8008c70:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	430a      	orrs	r2, r1
 8008c82:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	6812      	ldr	r2, [r2, #0]
 8008c8e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008c92:	f023 030f 	bic.w	r3, r3, #15
 8008c96:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	430a      	orrs	r2, r1
 8008ca8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	6812      	ldr	r2, [r2, #0]
 8008cb4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008cb8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008cbc:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	430a      	orrs	r2, r1
 8008cce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	6812      	ldr	r2, [r2, #0]
 8008cda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008cde:	f023 0303 	bic.w	r3, r3, #3
 8008ce2:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	430a      	orrs	r2, r1
 8008cf4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	6812      	ldr	r2, [r2, #0]
 8008d00:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008d04:	f023 0303 	bic.w	r3, r3, #3
 8008d08:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	430a      	orrs	r2, r1
 8008d1a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	6812      	ldr	r2, [r2, #0]
 8008d26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008d2a:	f023 0303 	bic.w	r3, r3, #3
 8008d2e:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	430a      	orrs	r2, r1
 8008d40:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	6812      	ldr	r2, [r2, #0]
 8008d4c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008d50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008d54:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	430a      	orrs	r2, r1
 8008d66:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008d76:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	430a      	orrs	r2, r1
 8008d88:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	699a      	ldr	r2, [r3, #24]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8008d98:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	6999      	ldr	r1, [r3, #24]
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008da4:	041a      	lsls	r2, r3, #16
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	430a      	orrs	r2, r1
 8008dac:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	699a      	ldr	r2, [r3, #24]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008dbc:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	6999      	ldr	r1, [r3, #24]
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	430a      	orrs	r2, r1
 8008dce:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008dde:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	430a      	orrs	r2, r1
 8008df0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008e00:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	430a      	orrs	r2, r1
 8008e12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e22:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	430a      	orrs	r2, r1
 8008e34:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e44:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	430a      	orrs	r2, r1
 8008e56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008e66:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	430a      	orrs	r2, r1
 8008e78:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e88:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	430a      	orrs	r2, r1
 8008e9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008eaa:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	430a      	orrs	r2, r1
 8008ebc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	370c      	adds	r7, #12
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr

08008ed2 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8008ed2:	b480      	push	{r7}
 8008ed4:	b083      	sub	sp, #12
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
 8008eda:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	7e1b      	ldrb	r3, [r3, #24]
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d101      	bne.n	8008ee8 <HAL_DSI_ConfigFlowControl+0x16>
 8008ee4:	2302      	movs	r3, #2
 8008ee6:	e016      	b.n	8008f16 <HAL_DSI_ConfigFlowControl+0x44>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2201      	movs	r2, #1
 8008eec:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8008efc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	683a      	ldr	r2, [r7, #0]
 8008f0a:	430a      	orrs	r2, r1
 8008f0c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8008f14:	2300      	movs	r3, #0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	370c      	adds	r7, #12
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr

08008f22 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8008f22:	b480      	push	{r7}
 8008f24:	b085      	sub	sp, #20
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
 8008f2a:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	7e1b      	ldrb	r3, [r3, #24]
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d101      	bne.n	8008f38 <HAL_DSI_ConfigPhyTimer+0x16>
 8008f34:	2302      	movs	r3, #2
 8008f36:	e084      	b.n	8009042 <HAL_DSI_ConfigPhyTimer+0x120>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	761a      	strb	r2, [r3, #24]

  /* Insert LPX Offset into the timings */
  PhyTimers->ClockLaneHS2LPTime = PhyTimers->ClockLaneHS2LPTime + hdsi->Init.PHYLowPowerOffset;
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	695b      	ldr	r3, [r3, #20]
 8008f46:	441a      	add	r2, r3
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	601a      	str	r2, [r3, #0]
  PhyTimers->ClockLaneLP2HSTime = PhyTimers->ClockLaneLP2HSTime + (3U * hdsi->Init.PHYLowPowerOffset);
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	6859      	ldr	r1, [r3, #4]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	695a      	ldr	r2, [r3, #20]
 8008f54:	4613      	mov	r3, r2
 8008f56:	005b      	lsls	r3, r3, #1
 8008f58:	4413      	add	r3, r2
 8008f5a:	18ca      	adds	r2, r1, r3
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	605a      	str	r2, [r3, #4]
  PhyTimers->DataLaneLP2HSTime  = PhyTimers->DataLaneLP2HSTime + (2U * hdsi->Init.PHYLowPowerOffset);
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	68da      	ldr	r2, [r3, #12]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	695b      	ldr	r3, [r3, #20]
 8008f68:	005b      	lsls	r3, r3, #1
 8008f6a:	441a      	add	r2, r3
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	60da      	str	r2, [r3, #12]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	bf38      	it	cc
 8008f7c:	4613      	movcc	r3, r2
 8008f7e:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8008f90:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	041a      	lsls	r2, r3, #16
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	431a      	orrs	r2, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	430a      	orrs	r2, r1
 8008faa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8008fbe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneLP2HSTime | ((PhyTimers->DataLaneHS2LPTime) << 16U));
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	68da      	ldr	r2, [r3, #12]
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	041b      	lsls	r3, r3, #16
 8008fd4:	431a      	orrs	r2, r3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	430a      	orrs	r2, r1
 8008fdc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTRCR &= ~DSI_DLTRCR_MRD_TIME;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	6812      	ldr	r2, [r2, #0]
 8008fec:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008ff0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ff4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
  hdsi->Instance->DLTRCR |= PhyTimers->DataLaneMaxReadTime;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	691a      	ldr	r2, [r3, #16]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	430a      	orrs	r2, r1
 800900a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800901e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	695b      	ldr	r3, [r3, #20]
 800902e:	021a      	lsls	r2, r3, #8
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	430a      	orrs	r2, r1
 8009036:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8009040:	2300      	movs	r3, #0
}
 8009042:	4618      	mov	r0, r3
 8009044:	3714      	adds	r7, #20
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr

0800904e <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 800904e:	b480      	push	{r7}
 8009050:	b083      	sub	sp, #12
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
 8009056:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	7e1b      	ldrb	r3, [r3, #24]
 800905c:	2b01      	cmp	r3, #1
 800905e:	d101      	bne.n	8009064 <HAL_DSI_ConfigHostTimeouts+0x16>
 8009060:	2302      	movs	r3, #2
 8009062:	e0b4      	b.n	80091ce <HAL_DSI_ConfigHostTimeouts+0x180>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	761a      	strb	r2, [r3, #24]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	689a      	ldr	r2, [r3, #8]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8009078:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	6899      	ldr	r1, [r3, #8]
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	021a      	lsls	r2, r3, #8
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	430a      	orrs	r2, r1
 800908c:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	b292      	uxth	r2, r2
 800909a:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	041a      	lsls	r2, r3, #16
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	430a      	orrs	r2, r1
 80090ae:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	6812      	ldr	r2, [r2, #0]
 80090ba:	0c1b      	lsrs	r3, r3, #16
 80090bc:	041b      	lsls	r3, r3, #16
 80090be:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	689a      	ldr	r2, [r3, #8]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	430a      	orrs	r2, r1
 80090d0:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	6812      	ldr	r2, [r2, #0]
 80090dc:	0c1b      	lsrs	r3, r3, #16
 80090de:	041b      	lsls	r3, r3, #16
 80090e0:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	68da      	ldr	r2, [r3, #12]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	430a      	orrs	r2, r1
 80090f2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090fc:	687a      	ldr	r2, [r7, #4]
 80090fe:	6812      	ldr	r2, [r2, #0]
 8009100:	0c1b      	lsrs	r3, r3, #16
 8009102:	041b      	lsls	r3, r3, #16
 8009104:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	691a      	ldr	r2, [r3, #16]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	430a      	orrs	r2, r1
 800911a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	6812      	ldr	r2, [r2, #0]
 800912a:	0c1b      	lsrs	r3, r3, #16
 800912c:	041b      	lsls	r3, r3, #16
 800912e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	695a      	ldr	r2, [r3, #20]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	430a      	orrs	r2, r1
 8009144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	699a      	ldr	r2, [r3, #24]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	430a      	orrs	r2, r1
 800916e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	6812      	ldr	r2, [r2, #0]
 800917e:	0c1b      	lsrs	r3, r3, #16
 8009180:	041b      	lsls	r3, r3, #16
 8009182:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	69da      	ldr	r2, [r3, #28]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	430a      	orrs	r2, r1
 8009198:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	6812      	ldr	r2, [r2, #0]
 80091a8:	0c1b      	lsrs	r3, r3, #16
 80091aa:	041b      	lsls	r3, r3, #16
 80091ac:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	6a1a      	ldr	r2, [r3, #32]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	430a      	orrs	r2, r1
 80091c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80091cc:	2300      	movs	r3, #0
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	370c      	adds	r7, #12
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr

080091da <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 80091da:	b480      	push	{r7}
 80091dc:	b085      	sub	sp, #20
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	7e1b      	ldrb	r3, [r3, #24]
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d101      	bne.n	80091ee <HAL_DSI_Start+0x14>
 80091ea:	2302      	movs	r3, #2
 80091ec:	e02b      	b.n	8009246 <HAL_DSI_Start+0x6c>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2201      	movs	r2, #1
 80091f2:	761a      	strb	r2, [r3, #24]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80091f4:	2300      	movs	r3, #0
 80091f6:	60fb      	str	r3, [r7, #12]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	685a      	ldr	r2, [r3, #4]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f042 0201 	orr.w	r2, r2, #1
 8009206:	605a      	str	r2, [r3, #4]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	f003 0301 	and.w	r3, r3, #1
 8009212:	60fb      	str	r3, [r7, #12]
 8009214:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8009216:	2300      	movs	r3, #0
 8009218:	60bb      	str	r3, [r7, #8]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f042 0208 	orr.w	r2, r2, #8
 800922a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009236:	f003 0308 	and.w	r3, r3, #8
 800923a:	60bb      	str	r3, [r7, #8]
 800923c:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8009244:	2300      	movs	r3, #0
}
 8009246:	4618      	mov	r0, r3
 8009248:	3714      	adds	r7, #20
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr

08009252 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b088      	sub	sp, #32
 8009256:	af02      	add	r7, sp, #8
 8009258:	60f8      	str	r0, [r7, #12]
 800925a:	60b9      	str	r1, [r7, #8]
 800925c:	607a      	str	r2, [r7, #4]
 800925e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	7e1b      	ldrb	r3, [r3, #24]
 8009264:	2b01      	cmp	r3, #1
 8009266:	d101      	bne.n	800926c <HAL_DSI_ShortWrite+0x1a>
 8009268:	2302      	movs	r3, #2
 800926a:	e010      	b.n	800928e <HAL_DSI_ShortWrite+0x3c>
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2201      	movs	r2, #1
 8009270:	761a      	strb	r2, [r3, #24]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8009272:	6a3b      	ldr	r3, [r7, #32]
 8009274:	9300      	str	r3, [sp, #0]
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	68b9      	ldr	r1, [r7, #8]
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f7ff f91d 	bl	80084bc <DSI_ShortWrite>
 8009282:	4603      	mov	r3, r0
 8009284:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2200      	movs	r2, #0
 800928a:	761a      	strb	r2, [r3, #24]

  return status;
 800928c:	7dfb      	ldrb	r3, [r7, #23]
}
 800928e:	4618      	mov	r0, r3
 8009290:	3718      	adds	r7, #24
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8009296:	b580      	push	{r7, lr}
 8009298:	b08c      	sub	sp, #48	; 0x30
 800929a:	af02      	add	r7, sp, #8
 800929c:	60f8      	str	r0, [r7, #12]
 800929e:	60b9      	str	r1, [r7, #8]
 80092a0:	607a      	str	r2, [r7, #4]
 80092a2:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 80092a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092a6:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	7e1b      	ldrb	r3, [r3, #24]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d101      	bne.n	80092b4 <HAL_DSI_LongWrite+0x1e>
 80092b0:	2302      	movs	r3, #2
 80092b2:	e083      	b.n	80093bc <HAL_DSI_LongWrite+0x126>
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2201      	movs	r2, #1
 80092b8:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 80092ba:	f7fe f841 	bl	8007340 <HAL_GetTick>
 80092be:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80092c0:	e00b      	b.n	80092da <HAL_DSI_LongWrite+0x44>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80092c2:	f7fe f83d 	bl	8007340 <HAL_GetTick>
 80092c6:	4602      	mov	r2, r0
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	1ad3      	subs	r3, r2, r3
 80092cc:	2b64      	cmp	r3, #100	; 0x64
 80092ce:	d904      	bls.n	80092da <HAL_DSI_LongWrite+0x44>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2200      	movs	r2, #0
 80092d4:	761a      	strb	r2, [r3, #24]

      return HAL_TIMEOUT;
 80092d6:	2303      	movs	r3, #3
 80092d8:	e070      	b.n	80093bc <HAL_DSI_LongWrite+0x126>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092e0:	f003 0301 	and.w	r3, r3, #1
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d0ec      	beq.n	80092c2 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 80092e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ea:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	2b03      	cmp	r3, #3
 80092f0:	bf28      	it	cs
 80092f2:	2303      	movcs	r3, #3
 80092f4:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 80092f6:	2300      	movs	r3, #0
 80092f8:	623b      	str	r3, [r7, #32]
 80092fa:	e00f      	b.n	800931c <HAL_DSI_LongWrite+0x86>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80092fc:	69ba      	ldr	r2, [r7, #24]
 80092fe:	6a3b      	ldr	r3, [r7, #32]
 8009300:	4413      	add	r3, r2
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	461a      	mov	r2, r3
 8009306:	6a3b      	ldr	r3, [r7, #32]
 8009308:	3301      	adds	r3, #1
 800930a:	00db      	lsls	r3, r3, #3
 800930c:	fa02 f303 	lsl.w	r3, r2, r3
 8009310:	69fa      	ldr	r2, [r7, #28]
 8009312:	4313      	orrs	r3, r2
 8009314:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8009316:	6a3b      	ldr	r3, [r7, #32]
 8009318:	3301      	adds	r3, #1
 800931a:	623b      	str	r3, [r7, #32]
 800931c:	6a3a      	ldr	r2, [r7, #32]
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	429a      	cmp	r2, r3
 8009322:	d3eb      	bcc.n	80092fc <HAL_DSI_LongWrite+0x66>
  }
  hdsi->Instance->GPDR = fifoword;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	69fa      	ldr	r2, [r7, #28]
 800932a:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 800932c:	683a      	ldr	r2, [r7, #0]
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8009334:	69ba      	ldr	r2, [r7, #24]
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	4413      	add	r3, r2
 800933a:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800933c:	e028      	b.n	8009390 <HAL_DSI_LongWrite+0xfa>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800933e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009340:	2b04      	cmp	r3, #4
 8009342:	bf28      	it	cs
 8009344:	2304      	movcs	r3, #4
 8009346:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8009348:	2300      	movs	r3, #0
 800934a:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 800934c:	2300      	movs	r3, #0
 800934e:	623b      	str	r3, [r7, #32]
 8009350:	e00e      	b.n	8009370 <HAL_DSI_LongWrite+0xda>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8009352:	69ba      	ldr	r2, [r7, #24]
 8009354:	6a3b      	ldr	r3, [r7, #32]
 8009356:	4413      	add	r3, r2
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	461a      	mov	r2, r3
 800935c:	6a3b      	ldr	r3, [r7, #32]
 800935e:	00db      	lsls	r3, r3, #3
 8009360:	fa02 f303 	lsl.w	r3, r2, r3
 8009364:	69fa      	ldr	r2, [r7, #28]
 8009366:	4313      	orrs	r3, r2
 8009368:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 800936a:	6a3b      	ldr	r3, [r7, #32]
 800936c:	3301      	adds	r3, #1
 800936e:	623b      	str	r3, [r7, #32]
 8009370:	6a3a      	ldr	r2, [r7, #32]
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	429a      	cmp	r2, r3
 8009376:	d3ec      	bcc.n	8009352 <HAL_DSI_LongWrite+0xbc>
    }
    hdsi->Instance->GPDR = fifoword;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	69fa      	ldr	r2, [r7, #28]
 800937e:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8009380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8009388:	69ba      	ldr	r2, [r7, #24]
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	4413      	add	r3, r2
 800938e:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8009390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009392:	2b00      	cmp	r3, #0
 8009394:	d1d3      	bne.n	800933e <HAL_DSI_LongWrite+0xa8>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 800939e:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	3301      	adds	r3, #1
 80093a4:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	9300      	str	r3, [sp, #0]
 80093aa:	4613      	mov	r3, r2
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	68b9      	ldr	r1, [r7, #8]
 80093b0:	f7ff f86b 	bl	800848a <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2200      	movs	r2, #0
 80093b8:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80093ba:	2300      	movs	r3, #0
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3728      	adds	r7, #40	; 0x28
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <HAL_DSI_EnterULPM>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_EnterULPM(DSI_HandleTypeDef *hdsi)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process locked */
  __HAL_LOCK(hdsi);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	7e1b      	ldrb	r3, [r3, #24]
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d101      	bne.n	80093d8 <HAL_DSI_EnterULPM+0x14>
 80093d4:	2302      	movs	r3, #2
 80093d6:	e106      	b.n	80095e6 <HAL_DSI_EnterULPM+0x222>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2201      	movs	r2, #1
 80093dc:	761a      	strb	r2, [r3, #24]

  /* Verify the initial status of the DSI Host */

  /* Verify that the clock lane and the digital section of the D-PHY are enabled */
  if ((hdsi->Instance->PCTLR & (DSI_PCTLR_CKE | DSI_PCTLR_DEN)) != (DSI_PCTLR_CKE | DSI_PCTLR_DEN))
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80093e6:	f003 0306 	and.w	r3, r3, #6
 80093ea:	2b06      	cmp	r3, #6
 80093ec:	d004      	beq.n	80093f8 <HAL_DSI_EnterULPM+0x34>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2200      	movs	r2, #0
 80093f2:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	e0f6      	b.n	80095e6 <HAL_DSI_EnterULPM+0x222>
  }

  /* Verify that the D-PHY PLL and the reference bias are enabled */
  if ((hdsi->Instance->WRPCR & DSI_WRPCR_PLLEN) != DSI_WRPCR_PLLEN)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8009400:	f003 0301 	and.w	r3, r3, #1
 8009404:	2b01      	cmp	r3, #1
 8009406:	d004      	beq.n	8009412 <HAL_DSI_EnterULPM+0x4e>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 800940e:	2301      	movs	r3, #1
 8009410:	e0e9      	b.n	80095e6 <HAL_DSI_EnterULPM+0x222>
  }
  else if ((hdsi->Instance->BCFGR  & DSI_BCFGR_PWRUP) != DSI_BCFGR_PWRUP)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800941a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800941e:	2b40      	cmp	r3, #64	; 0x40
 8009420:	d004      	beq.n	800942c <HAL_DSI_EnterULPM+0x68>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 8009428:	2301      	movs	r3, #1
 800942a:	e0dc      	b.n	80095e6 <HAL_DSI_EnterULPM+0x222>
  {
    /* Nothing to do */
  }

  /* Verify that there are no ULPS exit or request on both data and clock lanes */
  if ((hdsi->Instance->PUCR & (DSI_PUCR_UEDL | DSI_PUCR_URDL | DSI_PUCR_UECL | DSI_PUCR_URCL)) != 0U)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009434:	f003 030f 	and.w	r3, r3, #15
 8009438:	2b00      	cmp	r3, #0
 800943a:	d004      	beq.n	8009446 <HAL_DSI_EnterULPM+0x82>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	e0cf      	b.n	80095e6 <HAL_DSI_EnterULPM+0x222>
  }

  /* Verify that there are no Transmission trigger */
  if ((hdsi->Instance->PTTCR & DSI_PTTCR_TX_TRIG) != 0U)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800944e:	f003 030f 	and.w	r3, r3, #15
 8009452:	2b00      	cmp	r3, #0
 8009454:	d004      	beq.n	8009460 <HAL_DSI_EnterULPM+0x9c>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 800945c:	2301      	movs	r3, #1
 800945e:	e0c2      	b.n	80095e6 <HAL_DSI_EnterULPM+0x222>
  }

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8009460:	2001      	movs	r0, #1
 8009462:	f7fd ff79 	bl	8007358 <HAL_Delay>

  /* Verify that D-PHY PLL is locked */
  tickstart = HAL_GetTick();
 8009466:	f7fd ff6b 	bl	8007340 <HAL_GetTick>
 800946a:	60f8      	str	r0, [r7, #12]

  while ((__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U))
 800946c:	e00b      	b.n	8009486 <HAL_DSI_EnterULPM+0xc2>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800946e:	f7fd ff67 	bl	8007340 <HAL_GetTick>
 8009472:	4602      	mov	r2, r0
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	1ad3      	subs	r3, r2, r3
 8009478:	2b64      	cmp	r3, #100	; 0x64
 800947a:	d904      	bls.n	8009486 <HAL_DSI_EnterULPM+0xc2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2200      	movs	r2, #0
 8009480:	761a      	strb	r2, [r3, #24]

      return HAL_TIMEOUT;
 8009482:	2303      	movs	r3, #3
 8009484:	e0af      	b.n	80095e6 <HAL_DSI_EnterULPM+0x222>
  while ((__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U))
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800948e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009492:	2b00      	cmp	r3, #0
 8009494:	d0eb      	beq.n	800946e <HAL_DSI_EnterULPM+0xaa>
    }
  }

  /* Verify that all active lanes are in Stop state */
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800949e:	f003 0303 	and.w	r3, r3, #3
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d10c      	bne.n	80094c0 <HAL_DSI_EnterULPM+0xfc>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_PSS0)) != (DSI_PSR_UAN0 | DSI_PSR_PSS0))
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80094ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80094b2:	2b30      	cmp	r3, #48	; 0x30
 80094b4:	d01f      	beq.n	80094f6 <HAL_DSI_EnterULPM+0x132>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	761a      	strb	r2, [r3, #24]
      return HAL_ERROR;
 80094bc:	2301      	movs	r3, #1
 80094be:	e092      	b.n	80095e6 <HAL_DSI_EnterULPM+0x222>
    }
  }
  else if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_TWO_DATA_LANES)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80094c8:	f003 0303 	and.w	r3, r3, #3
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d10d      	bne.n	80094ec <HAL_DSI_EnterULPM+0x128>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_PSS0 | DSI_PSR_PSS1 | \
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80094d8:	f403 73d8 	and.w	r3, r3, #432	; 0x1b0
 80094dc:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80094e0:	d009      	beq.n	80094f6 <HAL_DSI_EnterULPM+0x132>
                                DSI_PSR_UAN1)) != (DSI_PSR_UAN0 | DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_UAN1))
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	761a      	strb	r2, [r3, #24]
      return HAL_ERROR;
 80094e8:	2301      	movs	r3, #1
 80094ea:	e07c      	b.n	80095e6 <HAL_DSI_EnterULPM+0x222>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdsi);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	e077      	b.n	80095e6 <HAL_DSI_EnterULPM+0x222>
  }

  /* Clock lane configuration: no more HS request */
  hdsi->Instance->CLCR &= ~DSI_CLCR_DPCC;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f022 0201 	bic.w	r2, r2, #1
 8009506:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Use system PLL as byte lane clock source before stopping DSIPHY clock source */
  __HAL_RCC_DSI_CONFIG(RCC_DSICLKSOURCE_PLL3);
 800950a:	4b39      	ldr	r3, [pc, #228]	; (80095f0 <HAL_DSI_EnterULPM+0x22c>)
 800950c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009510:	4a37      	ldr	r2, [pc, #220]	; (80095f0 <HAL_DSI_EnterULPM+0x22c>)
 8009512:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009516:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4

  /* ULPS Request on Clock and Data Lanes */
  hdsi->Instance->PUCR |= (DSI_PUCR_URCL | DSI_PUCR_URDL);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f042 0205 	orr.w	r2, r2, #5
 800952a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  /* Get tick */
  tickstart = HAL_GetTick();
 800952e:	f7fd ff07 	bl	8007340 <HAL_GetTick>
 8009532:	60f8      	str	r0, [r7, #12]

  /* Wait until all active lanes enter ULPM */
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800953c:	f003 0303 	and.w	r3, r3, #3
 8009540:	2b00      	cmp	r3, #0
 8009542:	d115      	bne.n	8009570 <HAL_DSI_EnterULPM+0x1ac>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UANC)) != 0U)
 8009544:	e00b      	b.n	800955e <HAL_DSI_EnterULPM+0x19a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009546:	f7fd fefb 	bl	8007340 <HAL_GetTick>
 800954a:	4602      	mov	r2, r0
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	1ad3      	subs	r3, r2, r3
 8009550:	2b64      	cmp	r3, #100	; 0x64
 8009552:	d904      	bls.n	800955e <HAL_DSI_EnterULPM+0x19a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	761a      	strb	r2, [r3, #24]

        return HAL_TIMEOUT;
 800955a:	2303      	movs	r3, #3
 800955c:	e043      	b.n	80095e6 <HAL_DSI_EnterULPM+0x222>
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UANC)) != 0U)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009566:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800956a:	2b00      	cmp	r3, #0
 800956c:	d1eb      	bne.n	8009546 <HAL_DSI_EnterULPM+0x182>
 800956e:	e022      	b.n	80095b6 <HAL_DSI_EnterULPM+0x1f2>
      }
    }
  }
  else if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_TWO_DATA_LANES)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009578:	f003 0303 	and.w	r3, r3, #3
 800957c:	2b01      	cmp	r3, #1
 800957e:	d115      	bne.n	80095ac <HAL_DSI_EnterULPM+0x1e8>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UAN1 | DSI_PSR_UANC)) != 0U)
 8009580:	e00b      	b.n	800959a <HAL_DSI_EnterULPM+0x1d6>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009582:	f7fd fedd 	bl	8007340 <HAL_GetTick>
 8009586:	4602      	mov	r2, r0
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	1ad3      	subs	r3, r2, r3
 800958c:	2b64      	cmp	r3, #100	; 0x64
 800958e:	d904      	bls.n	800959a <HAL_DSI_EnterULPM+0x1d6>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	761a      	strb	r2, [r3, #24]

        return HAL_TIMEOUT;
 8009596:	2303      	movs	r3, #3
 8009598:	e025      	b.n	80095e6 <HAL_DSI_EnterULPM+0x222>
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UAN1 | DSI_PSR_UANC)) != 0U)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80095a2:	f403 7394 	and.w	r3, r3, #296	; 0x128
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d1eb      	bne.n	8009582 <HAL_DSI_EnterULPM+0x1be>
 80095aa:	e004      	b.n	80095b6 <HAL_DSI_EnterULPM+0x1f2>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdsi);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	761a      	strb	r2, [r3, #24]

    return HAL_ERROR;
 80095b2:	2301      	movs	r3, #1
 80095b4:	e017      	b.n	80095e6 <HAL_DSI_EnterULPM+0x222>
  }

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 80095b6:	2300      	movs	r3, #0
 80095b8:	60bb      	str	r3, [r7, #8]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f022 0201 	bic.w	r2, r2, #1
 80095ca:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80095d6:	f003 0301 	and.w	r3, r3, #1
 80095da:	60bb      	str	r3, [r7, #8]
 80095dc:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	46020c00 	.word	0x46020c00

080095f4 <HAL_DSI_ExitULPM>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ExitULPM(DSI_HandleTypeDef *hdsi)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process locked */
  __HAL_LOCK(hdsi);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	7e1b      	ldrb	r3, [r3, #24]
 8009600:	2b01      	cmp	r3, #1
 8009602:	d101      	bne.n	8009608 <HAL_DSI_ExitULPM+0x14>
 8009604:	2302      	movs	r3, #2
 8009606:	e125      	b.n	8009854 <HAL_DSI_ExitULPM+0x260>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	761a      	strb	r2, [r3, #24]

  /* Verify that all active lanes are in ULPM */
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009616:	f003 0303 	and.w	r3, r3, #3
 800961a:	2b00      	cmp	r3, #0
 800961c:	d10c      	bne.n	8009638 <HAL_DSI_ExitULPM+0x44>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_RUE0 | DSI_PSR_UAN0 | DSI_PSR_PSS0 | \
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009626:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800962a:	2b00      	cmp	r3, #0
 800962c:	d01e      	beq.n	800966c <HAL_DSI_ExitULPM+0x78>
                                DSI_PSR_UANC | DSI_PSR_PSSC | DSI_PSR_PD)) != 0U)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	761a      	strb	r2, [r3, #24]

      return HAL_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	e10d      	b.n	8009854 <HAL_DSI_ExitULPM+0x260>
    }
  }
  else if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_TWO_DATA_LANES)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009640:	f003 0303 	and.w	r3, r3, #3
 8009644:	2b01      	cmp	r3, #1
 8009646:	d10c      	bne.n	8009662 <HAL_DSI_ExitULPM+0x6e>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_RUE0 | DSI_PSR_UAN0 | DSI_PSR_PSS0 | DSI_PSR_UAN1 | \
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009650:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009654:	2b00      	cmp	r3, #0
 8009656:	d009      	beq.n	800966c <HAL_DSI_ExitULPM+0x78>
                                DSI_PSR_PSS1 | DSI_PSR_UANC | DSI_PSR_PSSC | DSI_PSR_PD)) != 0U)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	761a      	strb	r2, [r3, #24]

      return HAL_ERROR;
 800965e:	2301      	movs	r3, #1
 8009660:	e0f8      	b.n	8009854 <HAL_DSI_ExitULPM+0x260>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdsi);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	761a      	strb	r2, [r3, #24]

    return HAL_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	e0f3      	b.n	8009854 <HAL_DSI_ExitULPM+0x260>
  }

  /* Turn on the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 800966c:	2300      	movs	r3, #0
 800966e:	60bb      	str	r3, [r7, #8]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f042 0201 	orr.w	r2, r2, #1
 8009680:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800968c:	f003 0301 	and.w	r3, r3, #1
 8009690:	60bb      	str	r3, [r7, #8]
 8009692:	68bb      	ldr	r3, [r7, #8]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8009694:	2001      	movs	r0, #1
 8009696:	f7fd fe5f 	bl	8007358 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 800969a:	f7fd fe51 	bl	8007340 <HAL_GetTick>
 800969e:	60f8      	str	r0, [r7, #12]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80096a0:	e00b      	b.n	80096ba <HAL_DSI_ExitULPM+0xc6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80096a2:	f7fd fe4d 	bl	8007340 <HAL_GetTick>
 80096a6:	4602      	mov	r2, r0
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	1ad3      	subs	r3, r2, r3
 80096ac:	2b64      	cmp	r3, #100	; 0x64
 80096ae:	d904      	bls.n	80096ba <HAL_DSI_ExitULPM+0xc6>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	761a      	strb	r2, [r3, #24]

      return HAL_TIMEOUT;
 80096b6:	2303      	movs	r3, #3
 80096b8:	e0cc      	b.n	8009854 <HAL_DSI_ExitULPM+0x260>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80096c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d0eb      	beq.n	80096a2 <HAL_DSI_ExitULPM+0xae>
    }
  }

  /* Exit ULPS on Clock and Data Lanes */
  hdsi->Instance->PUCR |= (DSI_PUCR_UECL | DSI_PUCR_UEDL);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f042 020a 	orr.w	r2, r2, #10
 80096da:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  /* Get tick */
  tickstart = HAL_GetTick();
 80096de:	f7fd fe2f 	bl	8007340 <HAL_GetTick>
 80096e2:	60f8      	str	r0, [r7, #12]

  /* Wait until all active lanes exit ULPM */
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80096ec:	f003 0303 	and.w	r3, r3, #3
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d115      	bne.n	8009720 <HAL_DSI_ExitULPM+0x12c>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UANC)) != (DSI_PSR_UAN0 | DSI_PSR_UANC))
 80096f4:	e00b      	b.n	800970e <HAL_DSI_ExitULPM+0x11a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80096f6:	f7fd fe23 	bl	8007340 <HAL_GetTick>
 80096fa:	4602      	mov	r2, r0
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	1ad3      	subs	r3, r2, r3
 8009700:	2b64      	cmp	r3, #100	; 0x64
 8009702:	d904      	bls.n	800970e <HAL_DSI_ExitULPM+0x11a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	761a      	strb	r2, [r3, #24]

        return HAL_TIMEOUT;
 800970a:	2303      	movs	r3, #3
 800970c:	e0a2      	b.n	8009854 <HAL_DSI_ExitULPM+0x260>
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UANC)) != (DSI_PSR_UAN0 | DSI_PSR_UANC))
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009716:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800971a:	2b28      	cmp	r3, #40	; 0x28
 800971c:	d1eb      	bne.n	80096f6 <HAL_DSI_ExitULPM+0x102>
 800971e:	e023      	b.n	8009768 <HAL_DSI_ExitULPM+0x174>
      }
    }
  }
  else if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_TWO_DATA_LANES)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009728:	f003 0303 	and.w	r3, r3, #3
 800972c:	2b01      	cmp	r3, #1
 800972e:	d116      	bne.n	800975e <HAL_DSI_ExitULPM+0x16a>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UAN1 | DSI_PSR_UANC)) != (DSI_PSR_UAN0 | DSI_PSR_UAN1 |
 8009730:	e00b      	b.n	800974a <HAL_DSI_ExitULPM+0x156>
                                                                                    DSI_PSR_UANC))
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009732:	f7fd fe05 	bl	8007340 <HAL_GetTick>
 8009736:	4602      	mov	r2, r0
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	1ad3      	subs	r3, r2, r3
 800973c:	2b64      	cmp	r3, #100	; 0x64
 800973e:	d904      	bls.n	800974a <HAL_DSI_ExitULPM+0x156>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	761a      	strb	r2, [r3, #24]

        return HAL_TIMEOUT;
 8009746:	2303      	movs	r3, #3
 8009748:	e084      	b.n	8009854 <HAL_DSI_ExitULPM+0x260>
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UAN1 | DSI_PSR_UANC)) != (DSI_PSR_UAN0 | DSI_PSR_UAN1 |
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009752:	f403 7394 	and.w	r3, r3, #296	; 0x128
 8009756:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 800975a:	d1ea      	bne.n	8009732 <HAL_DSI_ExitULPM+0x13e>
 800975c:	e004      	b.n	8009768 <HAL_DSI_ExitULPM+0x174>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdsi);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	761a      	strb	r2, [r3, #24]

    return HAL_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	e075      	b.n	8009854 <HAL_DSI_ExitULPM+0x260>
  }

  /* wait for 1 ms */
  HAL_Delay(1U);
 8009768:	2001      	movs	r0, #1
 800976a:	f7fd fdf5 	bl	8007358 <HAL_Delay>

  /* De-assert the ULPM requests and the ULPM exit bits */
  hdsi->Instance->PUCR = 0U;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	2200      	movs	r2, #0
 8009774:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  /* Switch the lane byte clock source in the RCC from system PLL to D-PHY */
  __HAL_RCC_DSI_CONFIG(RCC_DSICLKSOURCE_DSIPHY);
 8009778:	4b38      	ldr	r3, [pc, #224]	; (800985c <HAL_DSI_ExitULPM+0x268>)
 800977a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800977e:	4a37      	ldr	r2, [pc, #220]	; (800985c <HAL_DSI_ExitULPM+0x268>)
 8009780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009784:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4

  /* Restore clock lane configuration to HS */
  hdsi->Instance->CLCR |= DSI_CLCR_DPCC;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f042 0201 	orr.w	r2, r2, #1
 8009798:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Verify that D-PHY PLL is enabled */
  if ((hdsi->Instance->WRPCR & DSI_WRPCR_PLLEN) != DSI_WRPCR_PLLEN)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80097a4:	f003 0301 	and.w	r3, r3, #1
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d004      	beq.n	80097b6 <HAL_DSI_ExitULPM+0x1c2>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 80097b2:	2301      	movs	r3, #1
 80097b4:	e04e      	b.n	8009854 <HAL_DSI_ExitULPM+0x260>
  }

  /* Verify that all active lanes are in Stop state */
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80097be:	f003 0303 	and.w	r3, r3, #3
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d10c      	bne.n	80097e0 <HAL_DSI_ExitULPM+0x1ec>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_PSS0)) != (DSI_PSR_UAN0 | DSI_PSR_PSS0))
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80097ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80097d2:	2b30      	cmp	r3, #48	; 0x30
 80097d4:	d01f      	beq.n	8009816 <HAL_DSI_ExitULPM+0x222>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2200      	movs	r2, #0
 80097da:	761a      	strb	r2, [r3, #24]
      return HAL_ERROR;
 80097dc:	2301      	movs	r3, #1
 80097de:	e039      	b.n	8009854 <HAL_DSI_ExitULPM+0x260>
    }
  }
  else if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_TWO_DATA_LANES)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80097e8:	f003 0303 	and.w	r3, r3, #3
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d10d      	bne.n	800980c <HAL_DSI_ExitULPM+0x218>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_PSS0 | DSI_PSR_PSS1 | \
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80097f8:	f403 73d8 	and.w	r3, r3, #432	; 0x1b0
 80097fc:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8009800:	d009      	beq.n	8009816 <HAL_DSI_ExitULPM+0x222>
                                DSI_PSR_UAN1)) != (DSI_PSR_UAN0 | DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_UAN1))
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	761a      	strb	r2, [r3, #24]
      return HAL_ERROR;
 8009808:	2301      	movs	r3, #1
 800980a:	e023      	b.n	8009854 <HAL_DSI_ExitULPM+0x260>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdsi);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	e01e      	b.n	8009854 <HAL_DSI_ExitULPM+0x260>
  }

  /* Verify that D-PHY PLL is locked */
  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8009816:	2001      	movs	r0, #1
 8009818:	f7fd fd9e 	bl	8007358 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 800981c:	f7fd fd90 	bl	8007340 <HAL_GetTick>
 8009820:	60f8      	str	r0, [r7, #12]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8009822:	e00b      	b.n	800983c <HAL_DSI_ExitULPM+0x248>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009824:	f7fd fd8c 	bl	8007340 <HAL_GetTick>
 8009828:	4602      	mov	r2, r0
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	1ad3      	subs	r3, r2, r3
 800982e:	2b64      	cmp	r3, #100	; 0x64
 8009830:	d904      	bls.n	800983c <HAL_DSI_ExitULPM+0x248>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	761a      	strb	r2, [r3, #24]

      return HAL_TIMEOUT;
 8009838:	2303      	movs	r3, #3
 800983a:	e00b      	b.n	8009854 <HAL_DSI_ExitULPM+0x260>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009848:	2b00      	cmp	r3, #0
 800984a:	d0eb      	beq.n	8009824 <HAL_DSI_ExitULPM+0x230>
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2200      	movs	r2, #0
 8009850:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8009852:	2300      	movs	r3, #0
}
 8009854:	4618      	mov	r0, r3
 8009856:	3710      	adds	r7, #16
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}
 800985c:	46020c00 	.word	0x46020c00

08009860 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8009860:	b480      	push	{r7}
 8009862:	b089      	sub	sp, #36	; 0x24
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800986a:	2300      	movs	r3, #0
 800986c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8009872:	e1ba      	b.n	8009bea <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	2101      	movs	r1, #1
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	fa01 f303 	lsl.w	r3, r1, r3
 8009880:	4013      	ands	r3, r2
 8009882:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2b00      	cmp	r3, #0
 800988c:	f000 81aa 	beq.w	8009be4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a55      	ldr	r2, [pc, #340]	; (80099e8 <HAL_GPIO_Init+0x188>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d15d      	bne.n	8009954 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800989e:	2201      	movs	r2, #1
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	fa02 f303 	lsl.w	r3, r2, r3
 80098a6:	43db      	mvns	r3, r3
 80098a8:	69fa      	ldr	r2, [r7, #28]
 80098aa:	4013      	ands	r3, r2
 80098ac:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	f003 0201 	and.w	r2, r3, #1
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	fa02 f303 	lsl.w	r3, r2, r3
 80098bc:	69fa      	ldr	r2, [r7, #28]
 80098be:	4313      	orrs	r3, r2
 80098c0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	69fa      	ldr	r2, [r7, #28]
 80098c6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80098c8:	4a48      	ldr	r2, [pc, #288]	; (80099ec <HAL_GPIO_Init+0x18c>)
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80098d0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80098d2:	4a46      	ldr	r2, [pc, #280]	; (80099ec <HAL_GPIO_Init+0x18c>)
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	00db      	lsls	r3, r3, #3
 80098d8:	4413      	add	r3, r2
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	08da      	lsrs	r2, r3, #3
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	3208      	adds	r2, #8
 80098e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098ea:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80098ec:	69bb      	ldr	r3, [r7, #24]
 80098ee:	f003 0307 	and.w	r3, r3, #7
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	220f      	movs	r2, #15
 80098f6:	fa02 f303 	lsl.w	r3, r2, r3
 80098fa:	43db      	mvns	r3, r3
 80098fc:	69fa      	ldr	r2, [r7, #28]
 80098fe:	4013      	ands	r3, r2
 8009900:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8009902:	69bb      	ldr	r3, [r7, #24]
 8009904:	f003 0307 	and.w	r3, r3, #7
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	220b      	movs	r2, #11
 800990c:	fa02 f303 	lsl.w	r3, r2, r3
 8009910:	69fa      	ldr	r2, [r7, #28]
 8009912:	4313      	orrs	r3, r2
 8009914:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	08da      	lsrs	r2, r3, #3
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	3208      	adds	r2, #8
 800991e:	69f9      	ldr	r1, [r7, #28]
 8009920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	005b      	lsls	r3, r3, #1
 800992e:	2203      	movs	r2, #3
 8009930:	fa02 f303 	lsl.w	r3, r2, r3
 8009934:	43db      	mvns	r3, r3
 8009936:	69fa      	ldr	r2, [r7, #28]
 8009938:	4013      	ands	r3, r2
 800993a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 800993c:	69bb      	ldr	r3, [r7, #24]
 800993e:	005b      	lsls	r3, r3, #1
 8009940:	2202      	movs	r2, #2
 8009942:	fa02 f303 	lsl.w	r3, r2, r3
 8009946:	69fa      	ldr	r2, [r7, #28]
 8009948:	4313      	orrs	r3, r2
 800994a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	69fa      	ldr	r2, [r7, #28]
 8009950:	601a      	str	r2, [r3, #0]
 8009952:	e067      	b.n	8009a24 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	2b02      	cmp	r3, #2
 800995a:	d003      	beq.n	8009964 <HAL_GPIO_Init+0x104>
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	2b12      	cmp	r3, #18
 8009962:	d145      	bne.n	80099f0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	08da      	lsrs	r2, r3, #3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	3208      	adds	r2, #8
 800996c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009970:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	f003 0307 	and.w	r3, r3, #7
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	220f      	movs	r2, #15
 800997c:	fa02 f303 	lsl.w	r3, r2, r3
 8009980:	43db      	mvns	r3, r3
 8009982:	69fa      	ldr	r2, [r7, #28]
 8009984:	4013      	ands	r3, r2
 8009986:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	691b      	ldr	r3, [r3, #16]
 800998c:	f003 020f 	and.w	r2, r3, #15
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	f003 0307 	and.w	r3, r3, #7
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	fa02 f303 	lsl.w	r3, r2, r3
 800999c:	69fa      	ldr	r2, [r7, #28]
 800999e:	4313      	orrs	r3, r2
 80099a0:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	08da      	lsrs	r2, r3, #3
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	3208      	adds	r2, #8
 80099aa:	69f9      	ldr	r1, [r7, #28]
 80099ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80099b6:	69bb      	ldr	r3, [r7, #24]
 80099b8:	005b      	lsls	r3, r3, #1
 80099ba:	2203      	movs	r2, #3
 80099bc:	fa02 f303 	lsl.w	r3, r2, r3
 80099c0:	43db      	mvns	r3, r3
 80099c2:	69fa      	ldr	r2, [r7, #28]
 80099c4:	4013      	ands	r3, r2
 80099c6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	f003 0203 	and.w	r2, r3, #3
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	005b      	lsls	r3, r3, #1
 80099d4:	fa02 f303 	lsl.w	r3, r2, r3
 80099d8:	69fa      	ldr	r2, [r7, #28]
 80099da:	4313      	orrs	r3, r2
 80099dc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	69fa      	ldr	r2, [r7, #28]
 80099e2:	601a      	str	r2, [r3, #0]
 80099e4:	e01e      	b.n	8009a24 <HAL_GPIO_Init+0x1c4>
 80099e6:	bf00      	nop
 80099e8:	46020000 	.word	0x46020000
 80099ec:	0802a7f4 	.word	0x0802a7f4
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80099f6:	69bb      	ldr	r3, [r7, #24]
 80099f8:	005b      	lsls	r3, r3, #1
 80099fa:	2203      	movs	r2, #3
 80099fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009a00:	43db      	mvns	r3, r3
 8009a02:	69fa      	ldr	r2, [r7, #28]
 8009a04:	4013      	ands	r3, r2
 8009a06:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	f003 0203 	and.w	r2, r3, #3
 8009a10:	69bb      	ldr	r3, [r7, #24]
 8009a12:	005b      	lsls	r3, r3, #1
 8009a14:	fa02 f303 	lsl.w	r3, r2, r3
 8009a18:	69fa      	ldr	r2, [r7, #28]
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	69fa      	ldr	r2, [r7, #28]
 8009a22:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d00b      	beq.n	8009a44 <HAL_GPIO_Init+0x1e4>
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	2b02      	cmp	r3, #2
 8009a32:	d007      	beq.n	8009a44 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009a38:	2b11      	cmp	r3, #17
 8009a3a:	d003      	beq.n	8009a44 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	2b12      	cmp	r3, #18
 8009a42:	d130      	bne.n	8009aa6 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8009a4a:	69bb      	ldr	r3, [r7, #24]
 8009a4c:	005b      	lsls	r3, r3, #1
 8009a4e:	2203      	movs	r2, #3
 8009a50:	fa02 f303 	lsl.w	r3, r2, r3
 8009a54:	43db      	mvns	r3, r3
 8009a56:	69fa      	ldr	r2, [r7, #28]
 8009a58:	4013      	ands	r3, r2
 8009a5a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	68da      	ldr	r2, [r3, #12]
 8009a60:	69bb      	ldr	r3, [r7, #24]
 8009a62:	005b      	lsls	r3, r3, #1
 8009a64:	fa02 f303 	lsl.w	r3, r2, r3
 8009a68:	69fa      	ldr	r2, [r7, #28]
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	69fa      	ldr	r2, [r7, #28]
 8009a72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	69bb      	ldr	r3, [r7, #24]
 8009a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a82:	43db      	mvns	r3, r3
 8009a84:	69fa      	ldr	r2, [r7, #28]
 8009a86:	4013      	ands	r3, r2
 8009a88:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	091b      	lsrs	r3, r3, #4
 8009a90:	f003 0201 	and.w	r2, r3, #1
 8009a94:	69bb      	ldr	r3, [r7, #24]
 8009a96:	fa02 f303 	lsl.w	r3, r2, r3
 8009a9a:	69fa      	ldr	r2, [r7, #28]
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	69fa      	ldr	r2, [r7, #28]
 8009aa4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	2b03      	cmp	r3, #3
 8009aac:	d017      	beq.n	8009ade <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	005b      	lsls	r3, r3, #1
 8009ab8:	2203      	movs	r2, #3
 8009aba:	fa02 f303 	lsl.w	r3, r2, r3
 8009abe:	43db      	mvns	r3, r3
 8009ac0:	69fa      	ldr	r2, [r7, #28]
 8009ac2:	4013      	ands	r3, r2
 8009ac4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	689a      	ldr	r2, [r3, #8]
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	005b      	lsls	r3, r3, #1
 8009ace:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad2:	69fa      	ldr	r2, [r7, #28]
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	69fa      	ldr	r2, [r7, #28]
 8009adc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d07c      	beq.n	8009be4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8009aea:	4a47      	ldr	r2, [pc, #284]	; (8009c08 <HAL_GPIO_Init+0x3a8>)
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	089b      	lsrs	r3, r3, #2
 8009af0:	3318      	adds	r3, #24
 8009af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009af6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	f003 0303 	and.w	r3, r3, #3
 8009afe:	00db      	lsls	r3, r3, #3
 8009b00:	220f      	movs	r2, #15
 8009b02:	fa02 f303 	lsl.w	r3, r2, r3
 8009b06:	43db      	mvns	r3, r3
 8009b08:	69fa      	ldr	r2, [r7, #28]
 8009b0a:	4013      	ands	r3, r2
 8009b0c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	0a9a      	lsrs	r2, r3, #10
 8009b12:	4b3e      	ldr	r3, [pc, #248]	; (8009c0c <HAL_GPIO_Init+0x3ac>)
 8009b14:	4013      	ands	r3, r2
 8009b16:	697a      	ldr	r2, [r7, #20]
 8009b18:	f002 0203 	and.w	r2, r2, #3
 8009b1c:	00d2      	lsls	r2, r2, #3
 8009b1e:	4093      	lsls	r3, r2
 8009b20:	69fa      	ldr	r2, [r7, #28]
 8009b22:	4313      	orrs	r3, r2
 8009b24:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8009b26:	4938      	ldr	r1, [pc, #224]	; (8009c08 <HAL_GPIO_Init+0x3a8>)
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	089b      	lsrs	r3, r3, #2
 8009b2c:	3318      	adds	r3, #24
 8009b2e:	69fa      	ldr	r2, [r7, #28]
 8009b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8009b34:	4b34      	ldr	r3, [pc, #208]	; (8009c08 <HAL_GPIO_Init+0x3a8>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	43db      	mvns	r3, r3
 8009b3e:	69fa      	ldr	r2, [r7, #28]
 8009b40:	4013      	ands	r3, r2
 8009b42:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d003      	beq.n	8009b58 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8009b50:	69fa      	ldr	r2, [r7, #28]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	4313      	orrs	r3, r2
 8009b56:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8009b58:	4a2b      	ldr	r2, [pc, #172]	; (8009c08 <HAL_GPIO_Init+0x3a8>)
 8009b5a:	69fb      	ldr	r3, [r7, #28]
 8009b5c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8009b5e:	4b2a      	ldr	r3, [pc, #168]	; (8009c08 <HAL_GPIO_Init+0x3a8>)
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	43db      	mvns	r3, r3
 8009b68:	69fa      	ldr	r2, [r7, #28]
 8009b6a:	4013      	ands	r3, r2
 8009b6c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d003      	beq.n	8009b82 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8009b7a:	69fa      	ldr	r2, [r7, #28]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8009b82:	4a21      	ldr	r2, [pc, #132]	; (8009c08 <HAL_GPIO_Init+0x3a8>)
 8009b84:	69fb      	ldr	r3, [r7, #28]
 8009b86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8009b88:	4b1f      	ldr	r3, [pc, #124]	; (8009c08 <HAL_GPIO_Init+0x3a8>)
 8009b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b8e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	43db      	mvns	r3, r3
 8009b94:	69fa      	ldr	r2, [r7, #28]
 8009b96:	4013      	ands	r3, r2
 8009b98:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d003      	beq.n	8009bae <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8009ba6:	69fa      	ldr	r2, [r7, #28]
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	4313      	orrs	r3, r2
 8009bac:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8009bae:	4a16      	ldr	r2, [pc, #88]	; (8009c08 <HAL_GPIO_Init+0x3a8>)
 8009bb0:	69fb      	ldr	r3, [r7, #28]
 8009bb2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8009bb6:	4b14      	ldr	r3, [pc, #80]	; (8009c08 <HAL_GPIO_Init+0x3a8>)
 8009bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bbc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	43db      	mvns	r3, r3
 8009bc2:	69fa      	ldr	r2, [r7, #28]
 8009bc4:	4013      	ands	r3, r2
 8009bc6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d003      	beq.n	8009bdc <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8009bd4:	69fa      	ldr	r2, [r7, #28]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8009bdc:	4a0a      	ldr	r2, [pc, #40]	; (8009c08 <HAL_GPIO_Init+0x3a8>)
 8009bde:	69fb      	ldr	r3, [r7, #28]
 8009be0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	3301      	adds	r3, #1
 8009be8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	f47f ae3d 	bne.w	8009874 <HAL_GPIO_Init+0x14>
  }
}
 8009bfa:	bf00      	nop
 8009bfc:	bf00      	nop
 8009bfe:	3724      	adds	r7, #36	; 0x24
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr
 8009c08:	46022000 	.word	0x46022000
 8009c0c:	002f7f7f 	.word	0x002f7f7f

08009c10 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b089      	sub	sp, #36	; 0x24
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8009c22:	e0bc      	b.n	8009d9e <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8009c24:	2201      	movs	r2, #1
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	fa02 f303 	lsl.w	r3, r2, r3
 8009c2c:	683a      	ldr	r2, [r7, #0]
 8009c2e:	4013      	ands	r3, r2
 8009c30:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 8009c32:	69bb      	ldr	r3, [r7, #24]
 8009c34:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	f000 80ad 	beq.w	8009d98 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	4a5e      	ldr	r2, [pc, #376]	; (8009dbc <HAL_GPIO_DeInit+0x1ac>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d115      	bne.n	8009c72 <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 8009c46:	4a5e      	ldr	r2, [pc, #376]	; (8009dc0 <HAL_GPIO_DeInit+0x1b0>)
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009c4e:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8009c50:	4a5b      	ldr	r2, [pc, #364]	; (8009dc0 <HAL_GPIO_DeInit+0x1b0>)
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	00db      	lsls	r3, r3, #3
 8009c56:	4413      	add	r3, r2
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8009c5c:	4b57      	ldr	r3, [pc, #348]	; (8009dbc <HAL_GPIO_DeInit+0x1ac>)
 8009c5e:	681a      	ldr	r2, [r3, #0]
 8009c60:	2101      	movs	r1, #1
 8009c62:	69fb      	ldr	r3, [r7, #28]
 8009c64:	fa01 f303 	lsl.w	r3, r1, r3
 8009c68:	43db      	mvns	r3, r3
 8009c6a:	4954      	ldr	r1, [pc, #336]	; (8009dbc <HAL_GPIO_DeInit+0x1ac>)
 8009c6c:	4013      	ands	r3, r2
 8009c6e:	600b      	str	r3, [r1, #0]
 8009c70:	e053      	b.n	8009d1a <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 8009c72:	4a54      	ldr	r2, [pc, #336]	; (8009dc4 <HAL_GPIO_DeInit+0x1b4>)
 8009c74:	69bb      	ldr	r3, [r7, #24]
 8009c76:	089b      	lsrs	r3, r3, #2
 8009c78:	3318      	adds	r3, #24
 8009c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c7e:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	f003 0303 	and.w	r3, r3, #3
 8009c86:	00db      	lsls	r3, r3, #3
 8009c88:	220f      	movs	r2, #15
 8009c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c8e:	68fa      	ldr	r2, [r7, #12]
 8009c90:	4013      	ands	r3, r2
 8009c92:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	0a9a      	lsrs	r2, r3, #10
 8009c98:	4b4b      	ldr	r3, [pc, #300]	; (8009dc8 <HAL_GPIO_DeInit+0x1b8>)
 8009c9a:	4013      	ands	r3, r2
 8009c9c:	69ba      	ldr	r2, [r7, #24]
 8009c9e:	f002 0203 	and.w	r2, r2, #3
 8009ca2:	00d2      	lsls	r2, r2, #3
 8009ca4:	4093      	lsls	r3, r2
 8009ca6:	68fa      	ldr	r2, [r7, #12]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d136      	bne.n	8009d1a <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 8009cac:	4b45      	ldr	r3, [pc, #276]	; (8009dc4 <HAL_GPIO_DeInit+0x1b4>)
 8009cae:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	43db      	mvns	r3, r3
 8009cb6:	4943      	ldr	r1, [pc, #268]	; (8009dc4 <HAL_GPIO_DeInit+0x1b4>)
 8009cb8:	4013      	ands	r3, r2
 8009cba:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
          EXTI->EMR1 &= ~(iocurrent);
 8009cbe:	4b41      	ldr	r3, [pc, #260]	; (8009dc4 <HAL_GPIO_DeInit+0x1b4>)
 8009cc0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	43db      	mvns	r3, r3
 8009cc8:	493e      	ldr	r1, [pc, #248]	; (8009dc4 <HAL_GPIO_DeInit+0x1b4>)
 8009cca:	4013      	ands	r3, r2
 8009ccc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 8009cd0:	4b3c      	ldr	r3, [pc, #240]	; (8009dc4 <HAL_GPIO_DeInit+0x1b4>)
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	43db      	mvns	r3, r3
 8009cd8:	493a      	ldr	r1, [pc, #232]	; (8009dc4 <HAL_GPIO_DeInit+0x1b4>)
 8009cda:	4013      	ands	r3, r2
 8009cdc:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 8009cde:	4b39      	ldr	r3, [pc, #228]	; (8009dc4 <HAL_GPIO_DeInit+0x1b4>)
 8009ce0:	685a      	ldr	r2, [r3, #4]
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	43db      	mvns	r3, r3
 8009ce6:	4937      	ldr	r1, [pc, #220]	; (8009dc4 <HAL_GPIO_DeInit+0x1b4>)
 8009ce8:	4013      	ands	r3, r2
 8009cea:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	f003 0303 	and.w	r3, r3, #3
 8009cf2:	00db      	lsls	r3, r3, #3
 8009cf4:	220f      	movs	r2, #15
 8009cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8009cfa:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 8009cfc:	4a31      	ldr	r2, [pc, #196]	; (8009dc4 <HAL_GPIO_DeInit+0x1b4>)
 8009cfe:	69bb      	ldr	r3, [r7, #24]
 8009d00:	089b      	lsrs	r3, r3, #2
 8009d02:	3318      	adds	r3, #24
 8009d04:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	43da      	mvns	r2, r3
 8009d0c:	482d      	ldr	r0, [pc, #180]	; (8009dc4 <HAL_GPIO_DeInit+0x1b4>)
 8009d0e:	69bb      	ldr	r3, [r7, #24]
 8009d10:	089b      	lsrs	r3, r3, #2
 8009d12:	400a      	ands	r2, r1
 8009d14:	3318      	adds	r3, #24
 8009d16:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	69fb      	ldr	r3, [r7, #28]
 8009d20:	005b      	lsls	r3, r3, #1
 8009d22:	2103      	movs	r1, #3
 8009d24:	fa01 f303 	lsl.w	r3, r1, r3
 8009d28:	431a      	orrs	r2, r3
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 8009d2e:	69fb      	ldr	r3, [r7, #28]
 8009d30:	08da      	lsrs	r2, r3, #3
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	3208      	adds	r2, #8
 8009d36:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	f003 0307 	and.w	r3, r3, #7
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	220f      	movs	r2, #15
 8009d44:	fa02 f303 	lsl.w	r3, r2, r3
 8009d48:	43db      	mvns	r3, r3
 8009d4a:	69fa      	ldr	r2, [r7, #28]
 8009d4c:	08d2      	lsrs	r2, r2, #3
 8009d4e:	4019      	ands	r1, r3
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	3208      	adds	r2, #8
 8009d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	689a      	ldr	r2, [r3, #8]
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	005b      	lsls	r3, r3, #1
 8009d60:	2103      	movs	r1, #3
 8009d62:	fa01 f303 	lsl.w	r3, r1, r3
 8009d66:	43db      	mvns	r3, r3
 8009d68:	401a      	ands	r2, r3
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	685a      	ldr	r2, [r3, #4]
 8009d72:	2101      	movs	r1, #1
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	fa01 f303 	lsl.w	r3, r1, r3
 8009d7a:	43db      	mvns	r3, r3
 8009d7c:	401a      	ands	r2, r3
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	68da      	ldr	r2, [r3, #12]
 8009d86:	69fb      	ldr	r3, [r7, #28]
 8009d88:	005b      	lsls	r3, r3, #1
 8009d8a:	2103      	movs	r1, #3
 8009d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8009d90:	43db      	mvns	r3, r3
 8009d92:	401a      	ands	r2, r3
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009d98:	69bb      	ldr	r3, [r7, #24]
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 8009d9e:	683a      	ldr	r2, [r7, #0]
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	fa22 f303 	lsr.w	r3, r2, r3
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	f47f af3c 	bne.w	8009c24 <HAL_GPIO_DeInit+0x14>
  }
}
 8009dac:	bf00      	nop
 8009dae:	bf00      	nop
 8009db0:	3724      	adds	r7, #36	; 0x24
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr
 8009dba:	bf00      	nop
 8009dbc:	46020000 	.word	0x46020000
 8009dc0:	0802a7f4 	.word	0x0802a7f4
 8009dc4:	46022000 	.word	0x46022000
 8009dc8:	002f7f7f 	.word	0x002f7f7f

08009dcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b085      	sub	sp, #20
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	691a      	ldr	r2, [r3, #16]
 8009ddc:	887b      	ldrh	r3, [r7, #2]
 8009dde:	4013      	ands	r3, r2
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d002      	beq.n	8009dea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009de4:	2301      	movs	r3, #1
 8009de6:	73fb      	strb	r3, [r7, #15]
 8009de8:	e001      	b.n	8009dee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009dea:	2300      	movs	r3, #0
 8009dec:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8009dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3714      	adds	r7, #20
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr

08009dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	460b      	mov	r3, r1
 8009e06:	807b      	strh	r3, [r7, #2]
 8009e08:	4613      	mov	r3, r2
 8009e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009e0c:	787b      	ldrb	r3, [r7, #1]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d003      	beq.n	8009e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009e12:	887a      	ldrh	r2, [r7, #2]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8009e18:	e002      	b.n	8009e20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8009e1a:	887a      	ldrh	r2, [r7, #2]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009e20:	bf00      	nop
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b085      	sub	sp, #20
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	460b      	mov	r3, r1
 8009e36:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	695b      	ldr	r3, [r3, #20]
 8009e3c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009e3e:	887a      	ldrh	r2, [r7, #2]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	4013      	ands	r3, r2
 8009e44:	041a      	lsls	r2, r3, #16
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	43d9      	mvns	r1, r3
 8009e4a:	887b      	ldrh	r3, [r7, #2]
 8009e4c:	400b      	ands	r3, r1
 8009e4e:	431a      	orrs	r2, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	619a      	str	r2, [r3, #24]
}
 8009e54:	bf00      	nop
 8009e56:	3714      	adds	r7, #20
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <HAL_GPIO_EnableHighSPeedLowVoltage>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_EnableHighSPeedLowVoltage(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b08b      	sub	sp, #44	; 0x2c
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	460b      	mov	r3, r1
 8009e6a:	807b      	strh	r3, [r7, #2]
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	623b      	str	r3, [r7, #32]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8009e74:	e03c      	b.n	8009ef0 <HAL_GPIO_EnableHighSPeedLowVoltage+0x90>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position);
 8009e76:	887a      	ldrh	r2, [r7, #2]
 8009e78:	2101      	movs	r1, #1
 8009e7a:	6a3b      	ldr	r3, [r7, #32]
 8009e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8009e80:	4013      	ands	r3, r2
 8009e82:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8009e84:	69bb      	ldr	r3, [r7, #24]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d02f      	beq.n	8009eea <HAL_GPIO_EnableHighSPeedLowVoltage+0x8a>
    {
      /* In case of LPGPIO Port */
      if (GPIOx == LPGPIO1)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	4a1f      	ldr	r2, [pc, #124]	; (8009f0c <HAL_GPIO_EnableHighSPeedLowVoltage+0xac>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d120      	bne.n	8009ed4 <HAL_GPIO_EnableHighSPeedLowVoltage+0x74>
      {
        /* Get GPIO pin position */
        position = POSITION_VAL(GPIO_Pin);
 8009e92:	887b      	ldrh	r3, [r7, #2]
 8009e94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	fa93 f3a3 	rbit	r3, r3
 8009e9c:	60fb      	str	r3, [r7, #12]
  return result;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d101      	bne.n	8009eac <HAL_GPIO_EnableHighSPeedLowVoltage+0x4c>
    return 32U;
 8009ea8:	2320      	movs	r3, #32
 8009eaa:	e003      	b.n	8009eb4 <HAL_GPIO_EnableHighSPeedLowVoltage+0x54>
  return __builtin_clz(value);
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	fab3 f383 	clz	r3, r3
 8009eb2:	b2db      	uxtb	r3, r3
 8009eb4:	623b      	str	r3, [r7, #32]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8009eb6:	4a16      	ldr	r2, [pc, #88]	; (8009f10 <HAL_GPIO_EnableHighSPeedLowVoltage+0xb0>)
 8009eb8:	6a3b      	ldr	r3, [r7, #32]
 8009eba:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009ebe:	61fb      	str	r3, [r7, #28]
        pin_position = (1UL << (LPGPIO_Map[position].Pin_Pos));
 8009ec0:	4a13      	ldr	r2, [pc, #76]	; (8009f10 <HAL_GPIO_EnableHighSPeedLowVoltage+0xb0>)
 8009ec2:	6a3b      	ldr	r3, [r7, #32]
 8009ec4:	00db      	lsls	r3, r3, #3
 8009ec6:	4413      	add	r3, r2
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8009ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8009ed2:	e004      	b.n	8009ede <HAL_GPIO_EnableHighSPeedLowVoltage+0x7e>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Save GPIO pin pos */
        pin_position = (1UL << position);
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	6a3b      	ldr	r3, [r7, #32]
 8009ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8009edc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      /* Set HSLVR gpio pin */
      SET_BIT(p_gpio->HSLVR, pin_position);
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee4:	431a      	orrs	r2, r3
 8009ee6:	69fb      	ldr	r3, [r7, #28]
 8009ee8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    position++;
 8009eea:	6a3b      	ldr	r3, [r7, #32]
 8009eec:	3301      	adds	r3, #1
 8009eee:	623b      	str	r3, [r7, #32]
  while ((GPIO_Pin >> position) != 0U)
 8009ef0:	887a      	ldrh	r2, [r7, #2]
 8009ef2:	6a3b      	ldr	r3, [r7, #32]
 8009ef4:	fa42 f303 	asr.w	r3, r2, r3
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d1bc      	bne.n	8009e76 <HAL_GPIO_EnableHighSPeedLowVoltage+0x16>
  }
}
 8009efc:	bf00      	nop
 8009efe:	bf00      	nop
 8009f00:	372c      	adds	r7, #44	; 0x2c
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr
 8009f0a:	bf00      	nop
 8009f0c:	46020000 	.word	0x46020000
 8009f10:	0802a7f4 	.word	0x0802a7f4

08009f14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8009f1e:	4b0f      	ldr	r3, [pc, #60]	; (8009f5c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8009f20:	68da      	ldr	r2, [r3, #12]
 8009f22:	88fb      	ldrh	r3, [r7, #6]
 8009f24:	4013      	ands	r3, r2
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d006      	beq.n	8009f38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8009f2a:	4a0c      	ldr	r2, [pc, #48]	; (8009f5c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8009f2c:	88fb      	ldrh	r3, [r7, #6]
 8009f2e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8009f30:	88fb      	ldrh	r3, [r7, #6]
 8009f32:	4618      	mov	r0, r3
 8009f34:	f000 f814 	bl	8009f60 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8009f38:	4b08      	ldr	r3, [pc, #32]	; (8009f5c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8009f3a:	691a      	ldr	r2, [r3, #16]
 8009f3c:	88fb      	ldrh	r3, [r7, #6]
 8009f3e:	4013      	ands	r3, r2
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d006      	beq.n	8009f52 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8009f44:	4a05      	ldr	r2, [pc, #20]	; (8009f5c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8009f46:	88fb      	ldrh	r3, [r7, #6]
 8009f48:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8009f4a:	88fb      	ldrh	r3, [r7, #6]
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f7f7 ff39 	bl	8001dc4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8009f52:	bf00      	nop
 8009f54:	3708      	adds	r7, #8
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	46022000 	.word	0x46022000

08009f60 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	4603      	mov	r3, r0
 8009f68:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8009f6a:	bf00      	nop
 8009f6c:	370c      	adds	r7, #12
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr

08009f76 <HAL_GPU2D_Init>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_GPU2D_Init(GPU2D_HandleTypeDef *hgpu2d)
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b082      	sub	sp, #8
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
  /* Check the GPU2D handle validity */
  if (hgpu2d == NULL)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d101      	bne.n	8009f88 <HAL_GPU2D_Init+0x12>
  {
    return HAL_ERROR;
 8009f84:	2301      	movs	r3, #1
 8009f86:	e01c      	b.n	8009fc2 <HAL_GPU2D_Init+0x4c>
  }

  /* Check the parameters */
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));

  if (hgpu2d->State == HAL_GPU2D_STATE_RESET)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	795b      	ldrb	r3, [r3, #5]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d105      	bne.n	8009f9c <HAL_GPU2D_Init+0x26>

    /* Init the low level hardware */
    hgpu2d->MspInitCallback(hgpu2d);
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    /* Init the low level hardware */
    HAL_GPU2D_MspInit(hgpu2d);
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f7f7 fb5b 	bl	800164c <HAL_GPU2D_MspInit>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

    /* Allocate lock resource and initialize it */
    hgpu2d->Lock = HAL_UNLOCKED;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	711a      	strb	r2, [r3, #4]
  }

  /* Process locked */
  __HAL_LOCK(hgpu2d);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	791b      	ldrb	r3, [r3, #4]
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d101      	bne.n	8009fa8 <HAL_GPU2D_Init+0x32>
 8009fa4:	2302      	movs	r3, #2
 8009fa6:	e00c      	b.n	8009fc2 <HAL_GPU2D_Init+0x4c>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2201      	movs	r2, #1
 8009fac:	711a      	strb	r2, [r3, #4]
  /* Reset the CommandListCpltCallback handler */
  hgpu2d->CommandListCpltCallback = NULL;
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

  /* Update error code */
  hgpu2d->ErrorCode = HAL_GPU2D_ERROR_NONE;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	609a      	str	r2, [r3, #8]

  /* Initialize the GPU2D state*/
  hgpu2d->State = HAL_GPU2D_STATE_READY;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	715a      	strb	r2, [r3, #5]

  /* Release Lock */
  __HAL_UNLOCK(hgpu2d);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	711a      	strb	r2, [r3, #4]

  return HAL_OK;
 8009fc0:	2300      	movs	r3, #0
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3708      	adds	r7, #8
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}

08009fca <HAL_GPU2D_ReadRegister>:
  *                   the configuration information for the GPU2D.
  * @param  offset    The register offset from GPU2D base address to read.
  * @retval Register value
  */
uint32_t HAL_GPU2D_ReadRegister(GPU2D_HandleTypeDef *hgpu2d, uint32_t offset)
{
 8009fca:	b480      	push	{r7}
 8009fcc:	b085      	sub	sp, #20
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
 8009fd2:	6039      	str	r1, [r7, #0]
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));
  assert_param(IS_GPU2D_OFFSET(offset));

  /* No locking is required since reading a register is an atomic operation
   * and doesn't incur a state change in hal_gpu2d. */
  value = GPU2D_ReadReg(hgpu2d->Instance, offset);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	4413      	add	r3, r2
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	60fb      	str	r3, [r7, #12]

  return value;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3714      	adds	r7, #20
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr

08009fee <HAL_GPU2D_WriteRegister>:
  * @param  offset    The register offset from GPU2D base address to write.
  * @param  value     The value to be written to provided register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_GPU2D_WriteRegister(GPU2D_HandleTypeDef *hgpu2d, uint32_t offset, uint32_t value)
{
 8009fee:	b480      	push	{r7}
 8009ff0:	b085      	sub	sp, #20
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	60f8      	str	r0, [r7, #12]
 8009ff6:	60b9      	str	r1, [r7, #8]
 8009ff8:	607a      	str	r2, [r7, #4]
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));
  assert_param(IS_GPU2D_OFFSET(offset));

  /* No locking is required since writing a register is an atomic operation
   * and doesn't incur a state change in hal_gpu2d. */
  GPU2D_WriteReg(hgpu2d->Instance, offset, value);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	4413      	add	r3, r2
 800a002:	461a      	mov	r2, r3
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a008:	2300      	movs	r3, #0
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3714      	adds	r7, #20
 800a00e:	46bd      	mov	sp, r7
 800a010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a014:	4770      	bx	lr

0800a016 <HAL_GPU2D_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 800a016:	b580      	push	{r7, lr}
 800a018:	b086      	sub	sp, #24
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	6078      	str	r0, [r7, #4]
  uint32_t isr_flags = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_ITCTRL);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	33f8      	adds	r3, #248	; 0xf8
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	617b      	str	r3, [r7, #20]

  /* Command List Complete Interrupt management */
  if ((isr_flags & GPU2D_FLAG_CLC) != 0U)
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	f003 0301 	and.w	r3, r3, #1
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d013      	beq.n	800a05a <HAL_GPU2D_IRQHandler+0x44>
  {
    uint32_t last_cl_id;

    /* Clear the completion flag */
    __HAL_GPU2D_CLEAR_FLAG(hgpu2d, GPU2D_FLAG_CLC);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	33f8      	adds	r3, #248	; 0xf8
 800a038:	613b      	str	r3, [r7, #16]
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f023 0201 	bic.w	r2, r3, #1
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	601a      	str	r2, [r3, #0]

    last_cl_id = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_CLID);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	60fb      	str	r3, [r7, #12]
    if (hgpu2d->CommandListCpltCallback != NULL)
    {
      hgpu2d->CommandListCpltCallback(hgpu2d, last_cl_id);
    }
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    HAL_GPU2D_CommandListCpltCallback(hgpu2d, last_cl_id);
 800a052:	68f9      	ldr	r1, [r7, #12]
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f7f8 fd3f 	bl	8002ad8 <HAL_GPU2D_CommandListCpltCallback>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */
  }
}
 800a05a:	bf00      	nop
 800a05c:	3718      	adds	r7, #24
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}

0800a062 <HAL_GPU2D_ER_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_ER_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 800a062:	b580      	push	{r7, lr}
 800a064:	b082      	sub	sp, #8
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
  HAL_GPU2D_ErrorCallback(hgpu2d);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 f804 	bl	800a078 <HAL_GPU2D_ErrorCallback>
}
 800a070:	bf00      	nop
 800a072:	3708      	adds	r7, #8
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <HAL_GPU2D_ErrorCallback>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
__weak void HAL_GPU2D_ErrorCallback(GPU2D_HandleTypeDef *hgpu2d)
{
 800a078:	b480      	push	{r7}
 800a07a:	b083      	sub	sp, #12
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
            the HAL_GPU2D_ErrorCallback can be implemented in the user file.
            The default implementation stops the execution as an error is considered
            fatal and non recoverable.
   */

  for (;;)
 800a080:	e7fe      	b.n	800a080 <HAL_GPU2D_ErrorCallback+0x8>

0800a082 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a082:	b580      	push	{r7, lr}
 800a084:	b082      	sub	sp, #8
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d101      	bne.n	800a094 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a090:	2301      	movs	r3, #1
 800a092:	e081      	b.n	800a198 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a09a:	b2db      	uxtb	r3, r3
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d106      	bne.n	800a0ae <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 f8a8 	bl	800a1fe <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2224      	movs	r2, #36	; 0x24
 800a0b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f022 0201 	bic.w	r2, r2, #1
 800a0c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	685a      	ldr	r2, [r3, #4]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a0d2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	689a      	ldr	r2, [r3, #8]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a0e2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	68db      	ldr	r3, [r3, #12]
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d107      	bne.n	800a0fc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	689a      	ldr	r2, [r3, #8]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a0f8:	609a      	str	r2, [r3, #8]
 800a0fa:	e006      	b.n	800a10a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	689a      	ldr	r2, [r3, #8]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a108:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	68db      	ldr	r3, [r3, #12]
 800a10e:	2b02      	cmp	r3, #2
 800a110:	d104      	bne.n	800a11c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a11a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	6812      	ldr	r2, [r2, #0]
 800a126:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a12a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a12e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	68da      	ldr	r2, [r3, #12]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a13e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	691a      	ldr	r2, [r3, #16]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	695b      	ldr	r3, [r3, #20]
 800a148:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	699b      	ldr	r3, [r3, #24]
 800a150:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	430a      	orrs	r2, r1
 800a158:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	69d9      	ldr	r1, [r3, #28]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6a1a      	ldr	r2, [r3, #32]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	430a      	orrs	r2, r1
 800a168:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f042 0201 	orr.w	r2, r2, #1
 800a178:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2200      	movs	r2, #0
 800a17e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2220      	movs	r2, #32
 800a184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2200      	movs	r2, #0
 800a192:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a196:	2300      	movs	r3, #0
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3708      	adds	r7, #8
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b082      	sub	sp, #8
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d101      	bne.n	800a1b2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	e021      	b.n	800a1f6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2224      	movs	r2, #36	; 0x24
 800a1b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f022 0201 	bic.w	r2, r2, #1
 800a1c8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f000 f821 	bl	800a212 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3708      	adds	r7, #8
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800a1fe:	b480      	push	{r7}
 800a200:	b083      	sub	sp, #12
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800a206:	bf00      	nop
 800a208:	370c      	adds	r7, #12
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr

0800a212 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800a212:	b480      	push	{r7}
 800a214:	b083      	sub	sp, #12
 800a216:	af00      	add	r7, sp, #0
 800a218:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800a21a:	bf00      	nop
 800a21c:	370c      	adds	r7, #12
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr
	...

0800a228 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b088      	sub	sp, #32
 800a22c:	af02      	add	r7, sp, #8
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	607a      	str	r2, [r7, #4]
 800a232:	461a      	mov	r2, r3
 800a234:	460b      	mov	r3, r1
 800a236:	817b      	strh	r3, [r7, #10]
 800a238:	4613      	mov	r3, r2
 800a23a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a242:	b2db      	uxtb	r3, r3
 800a244:	2b20      	cmp	r3, #32
 800a246:	f040 80db 	bne.w	800a400 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a250:	2b01      	cmp	r3, #1
 800a252:	d101      	bne.n	800a258 <HAL_I2C_Master_Receive+0x30>
 800a254:	2302      	movs	r3, #2
 800a256:	e0d4      	b.n	800a402 <HAL_I2C_Master_Receive+0x1da>
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2201      	movs	r2, #1
 800a25c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a260:	f7fd f86e 	bl	8007340 <HAL_GetTick>
 800a264:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	9300      	str	r3, [sp, #0]
 800a26a:	2319      	movs	r3, #25
 800a26c:	2201      	movs	r2, #1
 800a26e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a272:	68f8      	ldr	r0, [r7, #12]
 800a274:	f000 fbe2 	bl	800aa3c <I2C_WaitOnFlagUntilTimeout>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d001      	beq.n	800a282 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	e0bf      	b.n	800a402 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2222      	movs	r2, #34	; 0x22
 800a286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2210      	movs	r2, #16
 800a28e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2200      	movs	r2, #0
 800a296:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	893a      	ldrh	r2, [r7, #8]
 800a2a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	2bff      	cmp	r3, #255	; 0xff
 800a2b2:	d90e      	bls.n	800a2d2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	22ff      	movs	r2, #255	; 0xff
 800a2b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2be:	b2da      	uxtb	r2, r3
 800a2c0:	8979      	ldrh	r1, [r7, #10]
 800a2c2:	4b52      	ldr	r3, [pc, #328]	; (800a40c <HAL_I2C_Master_Receive+0x1e4>)
 800a2c4:	9300      	str	r3, [sp, #0]
 800a2c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a2ca:	68f8      	ldr	r0, [r7, #12]
 800a2cc:	f000 fdf2 	bl	800aeb4 <I2C_TransferConfig>
 800a2d0:	e06d      	b.n	800a3ae <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2d6:	b29a      	uxth	r2, r3
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2e0:	b2da      	uxtb	r2, r3
 800a2e2:	8979      	ldrh	r1, [r7, #10]
 800a2e4:	4b49      	ldr	r3, [pc, #292]	; (800a40c <HAL_I2C_Master_Receive+0x1e4>)
 800a2e6:	9300      	str	r3, [sp, #0]
 800a2e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	f000 fde1 	bl	800aeb4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800a2f2:	e05c      	b.n	800a3ae <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a2f4:	697a      	ldr	r2, [r7, #20]
 800a2f6:	6a39      	ldr	r1, [r7, #32]
 800a2f8:	68f8      	ldr	r0, [r7, #12]
 800a2fa:	f000 fc79 	bl	800abf0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a2fe:	4603      	mov	r3, r0
 800a300:	2b00      	cmp	r3, #0
 800a302:	d001      	beq.n	800a308 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800a304:	2301      	movs	r3, #1
 800a306:	e07c      	b.n	800a402 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a312:	b2d2      	uxtb	r2, r2
 800a314:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a31a:	1c5a      	adds	r2, r3, #1
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a324:	3b01      	subs	r3, #1
 800a326:	b29a      	uxth	r2, r3
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a330:	b29b      	uxth	r3, r3
 800a332:	3b01      	subs	r3, #1
 800a334:	b29a      	uxth	r2, r3
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a33e:	b29b      	uxth	r3, r3
 800a340:	2b00      	cmp	r3, #0
 800a342:	d034      	beq.n	800a3ae <HAL_I2C_Master_Receive+0x186>
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d130      	bne.n	800a3ae <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	9300      	str	r3, [sp, #0]
 800a350:	6a3b      	ldr	r3, [r7, #32]
 800a352:	2200      	movs	r2, #0
 800a354:	2180      	movs	r1, #128	; 0x80
 800a356:	68f8      	ldr	r0, [r7, #12]
 800a358:	f000 fb70 	bl	800aa3c <I2C_WaitOnFlagUntilTimeout>
 800a35c:	4603      	mov	r3, r0
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d001      	beq.n	800a366 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800a362:	2301      	movs	r3, #1
 800a364:	e04d      	b.n	800a402 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	2bff      	cmp	r3, #255	; 0xff
 800a36e:	d90e      	bls.n	800a38e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	22ff      	movs	r2, #255	; 0xff
 800a374:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a37a:	b2da      	uxtb	r2, r3
 800a37c:	8979      	ldrh	r1, [r7, #10]
 800a37e:	2300      	movs	r3, #0
 800a380:	9300      	str	r3, [sp, #0]
 800a382:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a386:	68f8      	ldr	r0, [r7, #12]
 800a388:	f000 fd94 	bl	800aeb4 <I2C_TransferConfig>
 800a38c:	e00f      	b.n	800a3ae <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a392:	b29a      	uxth	r2, r3
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a39c:	b2da      	uxtb	r2, r3
 800a39e:	8979      	ldrh	r1, [r7, #10]
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	9300      	str	r3, [sp, #0]
 800a3a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a3a8:	68f8      	ldr	r0, [r7, #12]
 800a3aa:	f000 fd83 	bl	800aeb4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d19d      	bne.n	800a2f4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a3b8:	697a      	ldr	r2, [r7, #20]
 800a3ba:	6a39      	ldr	r1, [r7, #32]
 800a3bc:	68f8      	ldr	r0, [r7, #12]
 800a3be:	f000 fbd3 	bl	800ab68 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d001      	beq.n	800a3cc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	e01a      	b.n	800a402 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	2220      	movs	r2, #32
 800a3d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	6859      	ldr	r1, [r3, #4]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	4b0c      	ldr	r3, [pc, #48]	; (800a410 <HAL_I2C_Master_Receive+0x1e8>)
 800a3e0:	400b      	ands	r3, r1
 800a3e2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2220      	movs	r2, #32
 800a3e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	e000      	b.n	800a402 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800a400:	2302      	movs	r3, #2
  }
}
 800a402:	4618      	mov	r0, r3
 800a404:	3718      	adds	r7, #24
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	80002400 	.word	0x80002400
 800a410:	fe00e800 	.word	0xfe00e800

0800a414 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b088      	sub	sp, #32
 800a418:	af02      	add	r7, sp, #8
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	4608      	mov	r0, r1
 800a41e:	4611      	mov	r1, r2
 800a420:	461a      	mov	r2, r3
 800a422:	4603      	mov	r3, r0
 800a424:	817b      	strh	r3, [r7, #10]
 800a426:	460b      	mov	r3, r1
 800a428:	813b      	strh	r3, [r7, #8]
 800a42a:	4613      	mov	r3, r2
 800a42c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a434:	b2db      	uxtb	r3, r3
 800a436:	2b20      	cmp	r3, #32
 800a438:	f040 80f9 	bne.w	800a62e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a43c:	6a3b      	ldr	r3, [r7, #32]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d002      	beq.n	800a448 <HAL_I2C_Mem_Write+0x34>
 800a442:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a444:	2b00      	cmp	r3, #0
 800a446:	d105      	bne.n	800a454 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a44e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a450:	2301      	movs	r3, #1
 800a452:	e0ed      	b.n	800a630 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d101      	bne.n	800a462 <HAL_I2C_Mem_Write+0x4e>
 800a45e:	2302      	movs	r3, #2
 800a460:	e0e6      	b.n	800a630 <HAL_I2C_Mem_Write+0x21c>
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2201      	movs	r2, #1
 800a466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a46a:	f7fc ff69 	bl	8007340 <HAL_GetTick>
 800a46e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	9300      	str	r3, [sp, #0]
 800a474:	2319      	movs	r3, #25
 800a476:	2201      	movs	r2, #1
 800a478:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a47c:	68f8      	ldr	r0, [r7, #12]
 800a47e:	f000 fadd 	bl	800aa3c <I2C_WaitOnFlagUntilTimeout>
 800a482:	4603      	mov	r3, r0
 800a484:	2b00      	cmp	r3, #0
 800a486:	d001      	beq.n	800a48c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a488:	2301      	movs	r3, #1
 800a48a:	e0d1      	b.n	800a630 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2221      	movs	r2, #33	; 0x21
 800a490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2240      	movs	r2, #64	; 0x40
 800a498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	6a3a      	ldr	r2, [r7, #32]
 800a4a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a4ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a4b4:	88f8      	ldrh	r0, [r7, #6]
 800a4b6:	893a      	ldrh	r2, [r7, #8]
 800a4b8:	8979      	ldrh	r1, [r7, #10]
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	9301      	str	r3, [sp, #4]
 800a4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c0:	9300      	str	r3, [sp, #0]
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f000 f9ed 	bl	800a8a4 <I2C_RequestMemoryWrite>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d005      	beq.n	800a4dc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	e0a9      	b.n	800a630 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	2bff      	cmp	r3, #255	; 0xff
 800a4e4:	d90e      	bls.n	800a504 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	22ff      	movs	r2, #255	; 0xff
 800a4ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4f0:	b2da      	uxtb	r2, r3
 800a4f2:	8979      	ldrh	r1, [r7, #10]
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	9300      	str	r3, [sp, #0]
 800a4f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a4fc:	68f8      	ldr	r0, [r7, #12]
 800a4fe:	f000 fcd9 	bl	800aeb4 <I2C_TransferConfig>
 800a502:	e00f      	b.n	800a524 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a508:	b29a      	uxth	r2, r3
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a512:	b2da      	uxtb	r2, r3
 800a514:	8979      	ldrh	r1, [r7, #10]
 800a516:	2300      	movs	r3, #0
 800a518:	9300      	str	r3, [sp, #0]
 800a51a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a51e:	68f8      	ldr	r0, [r7, #12]
 800a520:	f000 fcc8 	bl	800aeb4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a524:	697a      	ldr	r2, [r7, #20]
 800a526:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a528:	68f8      	ldr	r0, [r7, #12]
 800a52a:	f000 fad6 	bl	800aada <I2C_WaitOnTXISFlagUntilTimeout>
 800a52e:	4603      	mov	r3, r0
 800a530:	2b00      	cmp	r3, #0
 800a532:	d001      	beq.n	800a538 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a534:	2301      	movs	r3, #1
 800a536:	e07b      	b.n	800a630 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53c:	781a      	ldrb	r2, [r3, #0]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a548:	1c5a      	adds	r2, r3, #1
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a552:	b29b      	uxth	r3, r3
 800a554:	3b01      	subs	r3, #1
 800a556:	b29a      	uxth	r2, r3
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a560:	3b01      	subs	r3, #1
 800a562:	b29a      	uxth	r2, r3
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d034      	beq.n	800a5dc <HAL_I2C_Mem_Write+0x1c8>
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a576:	2b00      	cmp	r3, #0
 800a578:	d130      	bne.n	800a5dc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	9300      	str	r3, [sp, #0]
 800a57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a580:	2200      	movs	r2, #0
 800a582:	2180      	movs	r1, #128	; 0x80
 800a584:	68f8      	ldr	r0, [r7, #12]
 800a586:	f000 fa59 	bl	800aa3c <I2C_WaitOnFlagUntilTimeout>
 800a58a:	4603      	mov	r3, r0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d001      	beq.n	800a594 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a590:	2301      	movs	r3, #1
 800a592:	e04d      	b.n	800a630 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a598:	b29b      	uxth	r3, r3
 800a59a:	2bff      	cmp	r3, #255	; 0xff
 800a59c:	d90e      	bls.n	800a5bc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	22ff      	movs	r2, #255	; 0xff
 800a5a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5a8:	b2da      	uxtb	r2, r3
 800a5aa:	8979      	ldrh	r1, [r7, #10]
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	9300      	str	r3, [sp, #0]
 800a5b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a5b4:	68f8      	ldr	r0, [r7, #12]
 800a5b6:	f000 fc7d 	bl	800aeb4 <I2C_TransferConfig>
 800a5ba:	e00f      	b.n	800a5dc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5c0:	b29a      	uxth	r2, r3
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5ca:	b2da      	uxtb	r2, r3
 800a5cc:	8979      	ldrh	r1, [r7, #10]
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	9300      	str	r3, [sp, #0]
 800a5d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	f000 fc6c 	bl	800aeb4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d19e      	bne.n	800a524 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a5e6:	697a      	ldr	r2, [r7, #20]
 800a5e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a5ea:	68f8      	ldr	r0, [r7, #12]
 800a5ec:	f000 fabc 	bl	800ab68 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d001      	beq.n	800a5fa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	e01a      	b.n	800a630 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	2220      	movs	r2, #32
 800a600:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	6859      	ldr	r1, [r3, #4]
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	4b0a      	ldr	r3, [pc, #40]	; (800a638 <HAL_I2C_Mem_Write+0x224>)
 800a60e:	400b      	ands	r3, r1
 800a610:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2220      	movs	r2, #32
 800a616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2200      	movs	r2, #0
 800a61e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2200      	movs	r2, #0
 800a626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a62a:	2300      	movs	r3, #0
 800a62c:	e000      	b.n	800a630 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a62e:	2302      	movs	r3, #2
  }
}
 800a630:	4618      	mov	r0, r3
 800a632:	3718      	adds	r7, #24
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	fe00e800 	.word	0xfe00e800

0800a63c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b088      	sub	sp, #32
 800a640:	af02      	add	r7, sp, #8
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	4608      	mov	r0, r1
 800a646:	4611      	mov	r1, r2
 800a648:	461a      	mov	r2, r3
 800a64a:	4603      	mov	r3, r0
 800a64c:	817b      	strh	r3, [r7, #10]
 800a64e:	460b      	mov	r3, r1
 800a650:	813b      	strh	r3, [r7, #8]
 800a652:	4613      	mov	r3, r2
 800a654:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a65c:	b2db      	uxtb	r3, r3
 800a65e:	2b20      	cmp	r3, #32
 800a660:	f040 80fd 	bne.w	800a85e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a664:	6a3b      	ldr	r3, [r7, #32]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d002      	beq.n	800a670 <HAL_I2C_Mem_Read+0x34>
 800a66a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d105      	bne.n	800a67c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a676:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a678:	2301      	movs	r3, #1
 800a67a:	e0f1      	b.n	800a860 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a682:	2b01      	cmp	r3, #1
 800a684:	d101      	bne.n	800a68a <HAL_I2C_Mem_Read+0x4e>
 800a686:	2302      	movs	r3, #2
 800a688:	e0ea      	b.n	800a860 <HAL_I2C_Mem_Read+0x224>
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2201      	movs	r2, #1
 800a68e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a692:	f7fc fe55 	bl	8007340 <HAL_GetTick>
 800a696:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	9300      	str	r3, [sp, #0]
 800a69c:	2319      	movs	r3, #25
 800a69e:	2201      	movs	r2, #1
 800a6a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f000 f9c9 	bl	800aa3c <I2C_WaitOnFlagUntilTimeout>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d001      	beq.n	800a6b4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	e0d5      	b.n	800a860 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2222      	movs	r2, #34	; 0x22
 800a6b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2240      	movs	r2, #64	; 0x40
 800a6c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6a3a      	ldr	r2, [r7, #32]
 800a6ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a6d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a6dc:	88f8      	ldrh	r0, [r7, #6]
 800a6de:	893a      	ldrh	r2, [r7, #8]
 800a6e0:	8979      	ldrh	r1, [r7, #10]
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	9301      	str	r3, [sp, #4]
 800a6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e8:	9300      	str	r3, [sp, #0]
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	68f8      	ldr	r0, [r7, #12]
 800a6ee:	f000 f92d 	bl	800a94c <I2C_RequestMemoryRead>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d005      	beq.n	800a704 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a700:	2301      	movs	r3, #1
 800a702:	e0ad      	b.n	800a860 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a708:	b29b      	uxth	r3, r3
 800a70a:	2bff      	cmp	r3, #255	; 0xff
 800a70c:	d90e      	bls.n	800a72c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	22ff      	movs	r2, #255	; 0xff
 800a712:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a718:	b2da      	uxtb	r2, r3
 800a71a:	8979      	ldrh	r1, [r7, #10]
 800a71c:	4b52      	ldr	r3, [pc, #328]	; (800a868 <HAL_I2C_Mem_Read+0x22c>)
 800a71e:	9300      	str	r3, [sp, #0]
 800a720:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a724:	68f8      	ldr	r0, [r7, #12]
 800a726:	f000 fbc5 	bl	800aeb4 <I2C_TransferConfig>
 800a72a:	e00f      	b.n	800a74c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a730:	b29a      	uxth	r2, r3
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a73a:	b2da      	uxtb	r2, r3
 800a73c:	8979      	ldrh	r1, [r7, #10]
 800a73e:	4b4a      	ldr	r3, [pc, #296]	; (800a868 <HAL_I2C_Mem_Read+0x22c>)
 800a740:	9300      	str	r3, [sp, #0]
 800a742:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a746:	68f8      	ldr	r0, [r7, #12]
 800a748:	f000 fbb4 	bl	800aeb4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	9300      	str	r3, [sp, #0]
 800a750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a752:	2200      	movs	r2, #0
 800a754:	2104      	movs	r1, #4
 800a756:	68f8      	ldr	r0, [r7, #12]
 800a758:	f000 f970 	bl	800aa3c <I2C_WaitOnFlagUntilTimeout>
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d001      	beq.n	800a766 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a762:	2301      	movs	r3, #1
 800a764:	e07c      	b.n	800a860 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a770:	b2d2      	uxtb	r2, r2
 800a772:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a778:	1c5a      	adds	r2, r3, #1
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a782:	3b01      	subs	r3, #1
 800a784:	b29a      	uxth	r2, r3
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a78e:	b29b      	uxth	r3, r3
 800a790:	3b01      	subs	r3, #1
 800a792:	b29a      	uxth	r2, r3
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d034      	beq.n	800a80c <HAL_I2C_Mem_Read+0x1d0>
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d130      	bne.n	800a80c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	9300      	str	r3, [sp, #0]
 800a7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	2180      	movs	r1, #128	; 0x80
 800a7b4:	68f8      	ldr	r0, [r7, #12]
 800a7b6:	f000 f941 	bl	800aa3c <I2C_WaitOnFlagUntilTimeout>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d001      	beq.n	800a7c4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	e04d      	b.n	800a860 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7c8:	b29b      	uxth	r3, r3
 800a7ca:	2bff      	cmp	r3, #255	; 0xff
 800a7cc:	d90e      	bls.n	800a7ec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	22ff      	movs	r2, #255	; 0xff
 800a7d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7d8:	b2da      	uxtb	r2, r3
 800a7da:	8979      	ldrh	r1, [r7, #10]
 800a7dc:	2300      	movs	r3, #0
 800a7de:	9300      	str	r3, [sp, #0]
 800a7e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a7e4:	68f8      	ldr	r0, [r7, #12]
 800a7e6:	f000 fb65 	bl	800aeb4 <I2C_TransferConfig>
 800a7ea:	e00f      	b.n	800a80c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7f0:	b29a      	uxth	r2, r3
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7fa:	b2da      	uxtb	r2, r3
 800a7fc:	8979      	ldrh	r1, [r7, #10]
 800a7fe:	2300      	movs	r3, #0
 800a800:	9300      	str	r3, [sp, #0]
 800a802:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	f000 fb54 	bl	800aeb4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a810:	b29b      	uxth	r3, r3
 800a812:	2b00      	cmp	r3, #0
 800a814:	d19a      	bne.n	800a74c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a816:	697a      	ldr	r2, [r7, #20]
 800a818:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a81a:	68f8      	ldr	r0, [r7, #12]
 800a81c:	f000 f9a4 	bl	800ab68 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a820:	4603      	mov	r3, r0
 800a822:	2b00      	cmp	r3, #0
 800a824:	d001      	beq.n	800a82a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a826:	2301      	movs	r3, #1
 800a828:	e01a      	b.n	800a860 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2220      	movs	r2, #32
 800a830:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	6859      	ldr	r1, [r3, #4]
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	4b0b      	ldr	r3, [pc, #44]	; (800a86c <HAL_I2C_Mem_Read+0x230>)
 800a83e:	400b      	ands	r3, r1
 800a840:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2220      	movs	r2, #32
 800a846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2200      	movs	r2, #0
 800a84e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2200      	movs	r2, #0
 800a856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a85a:	2300      	movs	r3, #0
 800a85c:	e000      	b.n	800a860 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a85e:	2302      	movs	r3, #2
  }
}
 800a860:	4618      	mov	r0, r3
 800a862:	3718      	adds	r7, #24
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}
 800a868:	80002400 	.word	0x80002400
 800a86c:	fe00e800 	.word	0xfe00e800

0800a870 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800a870:	b480      	push	{r7}
 800a872:	b083      	sub	sp, #12
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a87e:	b2db      	uxtb	r3, r3
}
 800a880:	4618      	mov	r0, r3
 800a882:	370c      	adds	r7, #12
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b083      	sub	sp, #12
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800a898:	4618      	mov	r0, r3
 800a89a:	370c      	adds	r7, #12
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b086      	sub	sp, #24
 800a8a8:	af02      	add	r7, sp, #8
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	4608      	mov	r0, r1
 800a8ae:	4611      	mov	r1, r2
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	817b      	strh	r3, [r7, #10]
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	813b      	strh	r3, [r7, #8]
 800a8ba:	4613      	mov	r3, r2
 800a8bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a8be:	88fb      	ldrh	r3, [r7, #6]
 800a8c0:	b2da      	uxtb	r2, r3
 800a8c2:	8979      	ldrh	r1, [r7, #10]
 800a8c4:	4b20      	ldr	r3, [pc, #128]	; (800a948 <I2C_RequestMemoryWrite+0xa4>)
 800a8c6:	9300      	str	r3, [sp, #0]
 800a8c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a8cc:	68f8      	ldr	r0, [r7, #12]
 800a8ce:	f000 faf1 	bl	800aeb4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a8d2:	69fa      	ldr	r2, [r7, #28]
 800a8d4:	69b9      	ldr	r1, [r7, #24]
 800a8d6:	68f8      	ldr	r0, [r7, #12]
 800a8d8:	f000 f8ff 	bl	800aada <I2C_WaitOnTXISFlagUntilTimeout>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d001      	beq.n	800a8e6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e02c      	b.n	800a940 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a8e6:	88fb      	ldrh	r3, [r7, #6]
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d105      	bne.n	800a8f8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a8ec:	893b      	ldrh	r3, [r7, #8]
 800a8ee:	b2da      	uxtb	r2, r3
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	629a      	str	r2, [r3, #40]	; 0x28
 800a8f6:	e015      	b.n	800a924 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a8f8:	893b      	ldrh	r3, [r7, #8]
 800a8fa:	0a1b      	lsrs	r3, r3, #8
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	b2da      	uxtb	r2, r3
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a906:	69fa      	ldr	r2, [r7, #28]
 800a908:	69b9      	ldr	r1, [r7, #24]
 800a90a:	68f8      	ldr	r0, [r7, #12]
 800a90c:	f000 f8e5 	bl	800aada <I2C_WaitOnTXISFlagUntilTimeout>
 800a910:	4603      	mov	r3, r0
 800a912:	2b00      	cmp	r3, #0
 800a914:	d001      	beq.n	800a91a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a916:	2301      	movs	r3, #1
 800a918:	e012      	b.n	800a940 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a91a:	893b      	ldrh	r3, [r7, #8]
 800a91c:	b2da      	uxtb	r2, r3
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a924:	69fb      	ldr	r3, [r7, #28]
 800a926:	9300      	str	r3, [sp, #0]
 800a928:	69bb      	ldr	r3, [r7, #24]
 800a92a:	2200      	movs	r2, #0
 800a92c:	2180      	movs	r1, #128	; 0x80
 800a92e:	68f8      	ldr	r0, [r7, #12]
 800a930:	f000 f884 	bl	800aa3c <I2C_WaitOnFlagUntilTimeout>
 800a934:	4603      	mov	r3, r0
 800a936:	2b00      	cmp	r3, #0
 800a938:	d001      	beq.n	800a93e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a93a:	2301      	movs	r3, #1
 800a93c:	e000      	b.n	800a940 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a93e:	2300      	movs	r3, #0
}
 800a940:	4618      	mov	r0, r3
 800a942:	3710      	adds	r7, #16
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}
 800a948:	80002000 	.word	0x80002000

0800a94c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b086      	sub	sp, #24
 800a950:	af02      	add	r7, sp, #8
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	4608      	mov	r0, r1
 800a956:	4611      	mov	r1, r2
 800a958:	461a      	mov	r2, r3
 800a95a:	4603      	mov	r3, r0
 800a95c:	817b      	strh	r3, [r7, #10]
 800a95e:	460b      	mov	r3, r1
 800a960:	813b      	strh	r3, [r7, #8]
 800a962:	4613      	mov	r3, r2
 800a964:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a966:	88fb      	ldrh	r3, [r7, #6]
 800a968:	b2da      	uxtb	r2, r3
 800a96a:	8979      	ldrh	r1, [r7, #10]
 800a96c:	4b20      	ldr	r3, [pc, #128]	; (800a9f0 <I2C_RequestMemoryRead+0xa4>)
 800a96e:	9300      	str	r3, [sp, #0]
 800a970:	2300      	movs	r3, #0
 800a972:	68f8      	ldr	r0, [r7, #12]
 800a974:	f000 fa9e 	bl	800aeb4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a978:	69fa      	ldr	r2, [r7, #28]
 800a97a:	69b9      	ldr	r1, [r7, #24]
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	f000 f8ac 	bl	800aada <I2C_WaitOnTXISFlagUntilTimeout>
 800a982:	4603      	mov	r3, r0
 800a984:	2b00      	cmp	r3, #0
 800a986:	d001      	beq.n	800a98c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a988:	2301      	movs	r3, #1
 800a98a:	e02c      	b.n	800a9e6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a98c:	88fb      	ldrh	r3, [r7, #6]
 800a98e:	2b01      	cmp	r3, #1
 800a990:	d105      	bne.n	800a99e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a992:	893b      	ldrh	r3, [r7, #8]
 800a994:	b2da      	uxtb	r2, r3
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	629a      	str	r2, [r3, #40]	; 0x28
 800a99c:	e015      	b.n	800a9ca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a99e:	893b      	ldrh	r3, [r7, #8]
 800a9a0:	0a1b      	lsrs	r3, r3, #8
 800a9a2:	b29b      	uxth	r3, r3
 800a9a4:	b2da      	uxtb	r2, r3
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a9ac:	69fa      	ldr	r2, [r7, #28]
 800a9ae:	69b9      	ldr	r1, [r7, #24]
 800a9b0:	68f8      	ldr	r0, [r7, #12]
 800a9b2:	f000 f892 	bl	800aada <I2C_WaitOnTXISFlagUntilTimeout>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d001      	beq.n	800a9c0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	e012      	b.n	800a9e6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a9c0:	893b      	ldrh	r3, [r7, #8]
 800a9c2:	b2da      	uxtb	r2, r3
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a9ca:	69fb      	ldr	r3, [r7, #28]
 800a9cc:	9300      	str	r3, [sp, #0]
 800a9ce:	69bb      	ldr	r3, [r7, #24]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	2140      	movs	r1, #64	; 0x40
 800a9d4:	68f8      	ldr	r0, [r7, #12]
 800a9d6:	f000 f831 	bl	800aa3c <I2C_WaitOnFlagUntilTimeout>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d001      	beq.n	800a9e4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e000      	b.n	800a9e6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a9e4:	2300      	movs	r3, #0
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3710      	adds	r7, #16
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	80002000 	.word	0x80002000

0800a9f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	699b      	ldr	r3, [r3, #24]
 800aa02:	f003 0302 	and.w	r3, r3, #2
 800aa06:	2b02      	cmp	r3, #2
 800aa08:	d103      	bne.n	800aa12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	699b      	ldr	r3, [r3, #24]
 800aa18:	f003 0301 	and.w	r3, r3, #1
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	d007      	beq.n	800aa30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	699a      	ldr	r2, [r3, #24]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f042 0201 	orr.w	r2, r2, #1
 800aa2e:	619a      	str	r2, [r3, #24]
  }
}
 800aa30:	bf00      	nop
 800aa32:	370c      	adds	r7, #12
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr

0800aa3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	60f8      	str	r0, [r7, #12]
 800aa44:	60b9      	str	r1, [r7, #8]
 800aa46:	603b      	str	r3, [r7, #0]
 800aa48:	4613      	mov	r3, r2
 800aa4a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aa4c:	e031      	b.n	800aab2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa54:	d02d      	beq.n	800aab2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa56:	f7fc fc73 	bl	8007340 <HAL_GetTick>
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	69bb      	ldr	r3, [r7, #24]
 800aa5e:	1ad3      	subs	r3, r2, r3
 800aa60:	683a      	ldr	r2, [r7, #0]
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d302      	bcc.n	800aa6c <I2C_WaitOnFlagUntilTimeout+0x30>
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d122      	bne.n	800aab2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	699a      	ldr	r2, [r3, #24]
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	4013      	ands	r3, r2
 800aa76:	68ba      	ldr	r2, [r7, #8]
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	bf0c      	ite	eq
 800aa7c:	2301      	moveq	r3, #1
 800aa7e:	2300      	movne	r3, #0
 800aa80:	b2db      	uxtb	r3, r3
 800aa82:	461a      	mov	r2, r3
 800aa84:	79fb      	ldrb	r3, [r7, #7]
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d113      	bne.n	800aab2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa8e:	f043 0220 	orr.w	r2, r3, #32
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2220      	movs	r2, #32
 800aa9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800aaae:	2301      	movs	r3, #1
 800aab0:	e00f      	b.n	800aad2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	699a      	ldr	r2, [r3, #24]
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	4013      	ands	r3, r2
 800aabc:	68ba      	ldr	r2, [r7, #8]
 800aabe:	429a      	cmp	r2, r3
 800aac0:	bf0c      	ite	eq
 800aac2:	2301      	moveq	r3, #1
 800aac4:	2300      	movne	r3, #0
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	461a      	mov	r2, r3
 800aaca:	79fb      	ldrb	r3, [r7, #7]
 800aacc:	429a      	cmp	r2, r3
 800aace:	d0be      	beq.n	800aa4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aad0:	2300      	movs	r3, #0
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3710      	adds	r7, #16
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}

0800aada <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800aada:	b580      	push	{r7, lr}
 800aadc:	b084      	sub	sp, #16
 800aade:	af00      	add	r7, sp, #0
 800aae0:	60f8      	str	r0, [r7, #12]
 800aae2:	60b9      	str	r1, [r7, #8]
 800aae4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800aae6:	e033      	b.n	800ab50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800aae8:	687a      	ldr	r2, [r7, #4]
 800aaea:	68b9      	ldr	r1, [r7, #8]
 800aaec:	68f8      	ldr	r0, [r7, #12]
 800aaee:	f000 f901 	bl	800acf4 <I2C_IsErrorOccurred>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d001      	beq.n	800aafc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800aaf8:	2301      	movs	r3, #1
 800aafa:	e031      	b.n	800ab60 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab02:	d025      	beq.n	800ab50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab04:	f7fc fc1c 	bl	8007340 <HAL_GetTick>
 800ab08:	4602      	mov	r2, r0
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	1ad3      	subs	r3, r2, r3
 800ab0e:	68ba      	ldr	r2, [r7, #8]
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d302      	bcc.n	800ab1a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d11a      	bne.n	800ab50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	699b      	ldr	r3, [r3, #24]
 800ab20:	f003 0302 	and.w	r3, r3, #2
 800ab24:	2b02      	cmp	r3, #2
 800ab26:	d013      	beq.n	800ab50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab2c:	f043 0220 	orr.w	r2, r3, #32
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2220      	movs	r2, #32
 800ab38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2200      	movs	r2, #0
 800ab48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	e007      	b.n	800ab60 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	699b      	ldr	r3, [r3, #24]
 800ab56:	f003 0302 	and.w	r3, r3, #2
 800ab5a:	2b02      	cmp	r3, #2
 800ab5c:	d1c4      	bne.n	800aae8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ab5e:	2300      	movs	r3, #0
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3710      	adds	r7, #16
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b084      	sub	sp, #16
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	60f8      	str	r0, [r7, #12]
 800ab70:	60b9      	str	r1, [r7, #8]
 800ab72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ab74:	e02f      	b.n	800abd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab76:	687a      	ldr	r2, [r7, #4]
 800ab78:	68b9      	ldr	r1, [r7, #8]
 800ab7a:	68f8      	ldr	r0, [r7, #12]
 800ab7c:	f000 f8ba 	bl	800acf4 <I2C_IsErrorOccurred>
 800ab80:	4603      	mov	r3, r0
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d001      	beq.n	800ab8a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ab86:	2301      	movs	r3, #1
 800ab88:	e02d      	b.n	800abe6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab8a:	f7fc fbd9 	bl	8007340 <HAL_GetTick>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	1ad3      	subs	r3, r2, r3
 800ab94:	68ba      	ldr	r2, [r7, #8]
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d302      	bcc.n	800aba0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d11a      	bne.n	800abd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	699b      	ldr	r3, [r3, #24]
 800aba6:	f003 0320 	and.w	r3, r3, #32
 800abaa:	2b20      	cmp	r3, #32
 800abac:	d013      	beq.n	800abd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abb2:	f043 0220 	orr.w	r2, r3, #32
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	2220      	movs	r2, #32
 800abbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2200      	movs	r2, #0
 800abc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2200      	movs	r2, #0
 800abce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800abd2:	2301      	movs	r3, #1
 800abd4:	e007      	b.n	800abe6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	699b      	ldr	r3, [r3, #24]
 800abdc:	f003 0320 	and.w	r3, r3, #32
 800abe0:	2b20      	cmp	r3, #32
 800abe2:	d1c8      	bne.n	800ab76 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800abe4:	2300      	movs	r3, #0
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3710      	adds	r7, #16
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
	...

0800abf0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800abfc:	e06b      	b.n	800acd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800abfe:	687a      	ldr	r2, [r7, #4]
 800ac00:	68b9      	ldr	r1, [r7, #8]
 800ac02:	68f8      	ldr	r0, [r7, #12]
 800ac04:	f000 f876 	bl	800acf4 <I2C_IsErrorOccurred>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d001      	beq.n	800ac12 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ac0e:	2301      	movs	r3, #1
 800ac10:	e069      	b.n	800ace6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	699b      	ldr	r3, [r3, #24]
 800ac18:	f003 0320 	and.w	r3, r3, #32
 800ac1c:	2b20      	cmp	r3, #32
 800ac1e:	d138      	bne.n	800ac92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	699b      	ldr	r3, [r3, #24]
 800ac26:	f003 0304 	and.w	r3, r3, #4
 800ac2a:	2b04      	cmp	r3, #4
 800ac2c:	d105      	bne.n	800ac3a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d001      	beq.n	800ac3a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800ac36:	2300      	movs	r3, #0
 800ac38:	e055      	b.n	800ace6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	699b      	ldr	r3, [r3, #24]
 800ac40:	f003 0310 	and.w	r3, r3, #16
 800ac44:	2b10      	cmp	r3, #16
 800ac46:	d107      	bne.n	800ac58 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	2210      	movs	r2, #16
 800ac4e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2204      	movs	r2, #4
 800ac54:	645a      	str	r2, [r3, #68]	; 0x44
 800ac56:	e002      	b.n	800ac5e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	2220      	movs	r2, #32
 800ac64:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	6859      	ldr	r1, [r3, #4]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681a      	ldr	r2, [r3, #0]
 800ac70:	4b1f      	ldr	r3, [pc, #124]	; (800acf0 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800ac72:	400b      	ands	r3, r1
 800ac74:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2220      	movs	r2, #32
 800ac7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2200      	movs	r2, #0
 800ac82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e029      	b.n	800ace6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac92:	f7fc fb55 	bl	8007340 <HAL_GetTick>
 800ac96:	4602      	mov	r2, r0
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	1ad3      	subs	r3, r2, r3
 800ac9c:	68ba      	ldr	r2, [r7, #8]
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d302      	bcc.n	800aca8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d116      	bne.n	800acd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	699b      	ldr	r3, [r3, #24]
 800acae:	f003 0304 	and.w	r3, r3, #4
 800acb2:	2b04      	cmp	r3, #4
 800acb4:	d00f      	beq.n	800acd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acba:	f043 0220 	orr.w	r2, r3, #32
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2220      	movs	r2, #32
 800acc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2200      	movs	r2, #0
 800acce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800acd2:	2301      	movs	r3, #1
 800acd4:	e007      	b.n	800ace6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	699b      	ldr	r3, [r3, #24]
 800acdc:	f003 0304 	and.w	r3, r3, #4
 800ace0:	2b04      	cmp	r3, #4
 800ace2:	d18c      	bne.n	800abfe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ace4:	2300      	movs	r3, #0
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3710      	adds	r7, #16
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}
 800acee:	bf00      	nop
 800acf0:	fe00e800 	.word	0xfe00e800

0800acf4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b08a      	sub	sp, #40	; 0x28
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad00:	2300      	movs	r3, #0
 800ad02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	699b      	ldr	r3, [r3, #24]
 800ad0c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800ad16:	69bb      	ldr	r3, [r7, #24]
 800ad18:	f003 0310 	and.w	r3, r3, #16
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d068      	beq.n	800adf2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	2210      	movs	r2, #16
 800ad26:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ad28:	e049      	b.n	800adbe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad30:	d045      	beq.n	800adbe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ad32:	f7fc fb05 	bl	8007340 <HAL_GetTick>
 800ad36:	4602      	mov	r2, r0
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	1ad3      	subs	r3, r2, r3
 800ad3c:	68ba      	ldr	r2, [r7, #8]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d302      	bcc.n	800ad48 <I2C_IsErrorOccurred+0x54>
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d13a      	bne.n	800adbe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad52:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ad5a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	699b      	ldr	r3, [r3, #24]
 800ad62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad6a:	d121      	bne.n	800adb0 <I2C_IsErrorOccurred+0xbc>
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad72:	d01d      	beq.n	800adb0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800ad74:	7cfb      	ldrb	r3, [r7, #19]
 800ad76:	2b20      	cmp	r3, #32
 800ad78:	d01a      	beq.n	800adb0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	685a      	ldr	r2, [r3, #4]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad88:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800ad8a:	f7fc fad9 	bl	8007340 <HAL_GetTick>
 800ad8e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ad90:	e00e      	b.n	800adb0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800ad92:	f7fc fad5 	bl	8007340 <HAL_GetTick>
 800ad96:	4602      	mov	r2, r0
 800ad98:	69fb      	ldr	r3, [r7, #28]
 800ad9a:	1ad3      	subs	r3, r2, r3
 800ad9c:	2b19      	cmp	r3, #25
 800ad9e:	d907      	bls.n	800adb0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800ada0:	6a3b      	ldr	r3, [r7, #32]
 800ada2:	f043 0320 	orr.w	r3, r3, #32
 800ada6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800ada8:	2301      	movs	r3, #1
 800adaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800adae:	e006      	b.n	800adbe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	699b      	ldr	r3, [r3, #24]
 800adb6:	f003 0320 	and.w	r3, r3, #32
 800adba:	2b20      	cmp	r3, #32
 800adbc:	d1e9      	bne.n	800ad92 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	699b      	ldr	r3, [r3, #24]
 800adc4:	f003 0320 	and.w	r3, r3, #32
 800adc8:	2b20      	cmp	r3, #32
 800adca:	d003      	beq.n	800add4 <I2C_IsErrorOccurred+0xe0>
 800adcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800add0:	2b00      	cmp	r3, #0
 800add2:	d0aa      	beq.n	800ad2a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800add4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800add8:	2b00      	cmp	r3, #0
 800adda:	d103      	bne.n	800ade4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	2220      	movs	r2, #32
 800ade2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800ade4:	6a3b      	ldr	r3, [r7, #32]
 800ade6:	f043 0304 	orr.w	r3, r3, #4
 800adea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800adec:	2301      	movs	r3, #1
 800adee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	699b      	ldr	r3, [r3, #24]
 800adf8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800adfa:	69bb      	ldr	r3, [r7, #24]
 800adfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d00b      	beq.n	800ae1c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800ae04:	6a3b      	ldr	r3, [r7, #32]
 800ae06:	f043 0301 	orr.w	r3, r3, #1
 800ae0a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ae16:	2301      	movs	r3, #1
 800ae18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800ae1c:	69bb      	ldr	r3, [r7, #24]
 800ae1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d00b      	beq.n	800ae3e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800ae26:	6a3b      	ldr	r3, [r7, #32]
 800ae28:	f043 0308 	orr.w	r3, r3, #8
 800ae2c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ae36:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ae3e:	69bb      	ldr	r3, [r7, #24]
 800ae40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d00b      	beq.n	800ae60 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800ae48:	6a3b      	ldr	r3, [r7, #32]
 800ae4a:	f043 0302 	orr.w	r3, r3, #2
 800ae4e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800ae60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d01c      	beq.n	800aea2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ae68:	68f8      	ldr	r0, [r7, #12]
 800ae6a:	f7ff fdc3 	bl	800a9f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	6859      	ldr	r1, [r3, #4]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681a      	ldr	r2, [r3, #0]
 800ae78:	4b0d      	ldr	r3, [pc, #52]	; (800aeb0 <I2C_IsErrorOccurred+0x1bc>)
 800ae7a:	400b      	ands	r3, r1
 800ae7c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae82:	6a3b      	ldr	r3, [r7, #32]
 800ae84:	431a      	orrs	r2, r3
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2220      	movs	r2, #32
 800ae8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2200      	movs	r2, #0
 800ae96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800aea2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3728      	adds	r7, #40	; 0x28
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop
 800aeb0:	fe00e800 	.word	0xfe00e800

0800aeb4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b087      	sub	sp, #28
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	607b      	str	r3, [r7, #4]
 800aebe:	460b      	mov	r3, r1
 800aec0:	817b      	strh	r3, [r7, #10]
 800aec2:	4613      	mov	r3, r2
 800aec4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800aec6:	897b      	ldrh	r3, [r7, #10]
 800aec8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800aecc:	7a7b      	ldrb	r3, [r7, #9]
 800aece:	041b      	lsls	r3, r3, #16
 800aed0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800aed4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800aeda:	6a3b      	ldr	r3, [r7, #32]
 800aedc:	4313      	orrs	r3, r2
 800aede:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aee2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	685a      	ldr	r2, [r3, #4]
 800aeea:	6a3b      	ldr	r3, [r7, #32]
 800aeec:	0d5b      	lsrs	r3, r3, #21
 800aeee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800aef2:	4b08      	ldr	r3, [pc, #32]	; (800af14 <I2C_TransferConfig+0x60>)
 800aef4:	430b      	orrs	r3, r1
 800aef6:	43db      	mvns	r3, r3
 800aef8:	ea02 0103 	and.w	r1, r2, r3
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	697a      	ldr	r2, [r7, #20]
 800af02:	430a      	orrs	r2, r1
 800af04:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800af06:	bf00      	nop
 800af08:	371c      	adds	r7, #28
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr
 800af12:	bf00      	nop
 800af14:	03ff63ff 	.word	0x03ff63ff

0800af18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800af18:	b480      	push	{r7}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af28:	b2db      	uxtb	r3, r3
 800af2a:	2b20      	cmp	r3, #32
 800af2c:	d138      	bne.n	800afa0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800af34:	2b01      	cmp	r3, #1
 800af36:	d101      	bne.n	800af3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800af38:	2302      	movs	r3, #2
 800af3a:	e032      	b.n	800afa2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2201      	movs	r2, #1
 800af40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2224      	movs	r2, #36	; 0x24
 800af48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	681a      	ldr	r2, [r3, #0]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f022 0201 	bic.w	r2, r2, #1
 800af5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	681a      	ldr	r2, [r3, #0]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800af6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	6819      	ldr	r1, [r3, #0]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	683a      	ldr	r2, [r7, #0]
 800af78:	430a      	orrs	r2, r1
 800af7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	681a      	ldr	r2, [r3, #0]
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f042 0201 	orr.w	r2, r2, #1
 800af8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2220      	movs	r2, #32
 800af90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2200      	movs	r2, #0
 800af98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800af9c:	2300      	movs	r3, #0
 800af9e:	e000      	b.n	800afa2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800afa0:	2302      	movs	r3, #2
  }
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	370c      	adds	r7, #12
 800afa6:	46bd      	mov	sp, r7
 800afa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afac:	4770      	bx	lr

0800afae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800afae:	b480      	push	{r7}
 800afb0:	b085      	sub	sp, #20
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
 800afb6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800afbe:	b2db      	uxtb	r3, r3
 800afc0:	2b20      	cmp	r3, #32
 800afc2:	d139      	bne.n	800b038 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800afca:	2b01      	cmp	r3, #1
 800afcc:	d101      	bne.n	800afd2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800afce:	2302      	movs	r3, #2
 800afd0:	e033      	b.n	800b03a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2201      	movs	r2, #1
 800afd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2224      	movs	r2, #36	; 0x24
 800afde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	681a      	ldr	r2, [r3, #0]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f022 0201 	bic.w	r2, r2, #1
 800aff0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b000:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	021b      	lsls	r3, r3, #8
 800b006:	68fa      	ldr	r2, [r7, #12]
 800b008:	4313      	orrs	r3, r2
 800b00a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	68fa      	ldr	r2, [r7, #12]
 800b012:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	681a      	ldr	r2, [r3, #0]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f042 0201 	orr.w	r2, r2, #1
 800b022:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2220      	movs	r2, #32
 800b028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2200      	movs	r2, #0
 800b030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b034:	2300      	movs	r3, #0
 800b036:	e000      	b.n	800b03a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b038:	2302      	movs	r3, #2
  }
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3714      	adds	r7, #20
 800b03e:	46bd      	mov	sp, r7
 800b040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b044:	4770      	bx	lr
	...

0800b048 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800b048:	b480      	push	{r7}
 800b04a:	b085      	sub	sp, #20
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b050:	2300      	movs	r3, #0
 800b052:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800b054:	4b0b      	ldr	r3, [pc, #44]	; (800b084 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f003 0301 	and.w	r3, r3, #1
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d002      	beq.n	800b066 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800b060:	2301      	movs	r3, #1
 800b062:	73fb      	strb	r3, [r7, #15]
 800b064:	e007      	b.n	800b076 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800b066:	4b07      	ldr	r3, [pc, #28]	; (800b084 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f023 0204 	bic.w	r2, r3, #4
 800b06e:	4905      	ldr	r1, [pc, #20]	; (800b084 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	4313      	orrs	r3, r2
 800b074:	600b      	str	r3, [r1, #0]
  }

  return status;
 800b076:	7bfb      	ldrb	r3, [r7, #15]
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3714      	adds	r7, #20
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr
 800b084:	40030400 	.word	0x40030400

0800b088 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800b088:	b480      	push	{r7}
 800b08a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800b08c:	4b05      	ldr	r3, [pc, #20]	; (800b0a4 <HAL_ICACHE_Enable+0x1c>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4a04      	ldr	r2, [pc, #16]	; (800b0a4 <HAL_ICACHE_Enable+0x1c>)
 800b092:	f043 0301 	orr.w	r3, r3, #1
 800b096:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b098:	2300      	movs	r3, #0
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	46bd      	mov	sp, r7
 800b09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a2:	4770      	bx	lr
 800b0a4:	40030400 	.word	0x40030400

0800b0a8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b084      	sub	sp, #16
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d101      	bne.n	800b0ba <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	e0bf      	b.n	800b23a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800b0c0:	b2db      	uxtb	r3, r3
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d106      	bne.n	800b0d4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f7f6 fb34 	bl	800173c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2202      	movs	r2, #2
 800b0d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	699a      	ldr	r2, [r3, #24]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800b0ea:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	6999      	ldr	r1, [r3, #24]
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	685a      	ldr	r2, [r3, #4]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	689b      	ldr	r3, [r3, #8]
 800b0fa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b100:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	691b      	ldr	r3, [r3, #16]
 800b106:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	430a      	orrs	r2, r1
 800b10e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	6899      	ldr	r1, [r3, #8]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681a      	ldr	r2, [r3, #0]
 800b11a:	4b4a      	ldr	r3, [pc, #296]	; (800b244 <HAL_LTDC_Init+0x19c>)
 800b11c:	400b      	ands	r3, r1
 800b11e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	695b      	ldr	r3, [r3, #20]
 800b124:	041b      	lsls	r3, r3, #16
 800b126:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	6899      	ldr	r1, [r3, #8]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	699a      	ldr	r2, [r3, #24]
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	431a      	orrs	r2, r3
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	430a      	orrs	r2, r1
 800b13c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	68d9      	ldr	r1, [r3, #12]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681a      	ldr	r2, [r3, #0]
 800b148:	4b3e      	ldr	r3, [pc, #248]	; (800b244 <HAL_LTDC_Init+0x19c>)
 800b14a:	400b      	ands	r3, r1
 800b14c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	69db      	ldr	r3, [r3, #28]
 800b152:	041b      	lsls	r3, r3, #16
 800b154:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	68d9      	ldr	r1, [r3, #12]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6a1a      	ldr	r2, [r3, #32]
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	431a      	orrs	r2, r3
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	430a      	orrs	r2, r1
 800b16a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	6919      	ldr	r1, [r3, #16]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681a      	ldr	r2, [r3, #0]
 800b176:	4b33      	ldr	r3, [pc, #204]	; (800b244 <HAL_LTDC_Init+0x19c>)
 800b178:	400b      	ands	r3, r1
 800b17a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b180:	041b      	lsls	r3, r3, #16
 800b182:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	6919      	ldr	r1, [r3, #16]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	431a      	orrs	r2, r3
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	430a      	orrs	r2, r1
 800b198:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	6959      	ldr	r1, [r3, #20]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	4b27      	ldr	r3, [pc, #156]	; (800b244 <HAL_LTDC_Init+0x19c>)
 800b1a6:	400b      	ands	r3, r1
 800b1a8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ae:	041b      	lsls	r3, r3, #16
 800b1b0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	6959      	ldr	r1, [r3, #20]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	431a      	orrs	r2, r3
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	430a      	orrs	r2, r1
 800b1c6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b1ce:	021b      	lsls	r3, r3, #8
 800b1d0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b1d8:	041b      	lsls	r3, r3, #16
 800b1da:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800b1ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b1f2:	68ba      	ldr	r2, [r7, #8]
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	4313      	orrs	r3, r2
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800b1fe:	431a      	orrs	r2, r3
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	430a      	orrs	r2, r1
 800b206:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f042 0206 	orr.w	r2, r2, #6
 800b216:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	699a      	ldr	r2, [r3, #24]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f042 0201 	orr.w	r2, r2, #1
 800b226:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2200      	movs	r2, #0
 800b22c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2201      	movs	r2, #1
 800b234:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800b238:	2300      	movs	r3, #0
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3710      	adds	r7, #16
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	f000f800 	.word	0xf000f800

0800b248 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b256:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b25e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	f003 0304 	and.w	r3, r3, #4
 800b266:	2b00      	cmp	r3, #0
 800b268:	d023      	beq.n	800b2b2 <HAL_LTDC_IRQHandler+0x6a>
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	f003 0304 	and.w	r3, r3, #4
 800b270:	2b00      	cmp	r3, #0
 800b272:	d01e      	beq.n	800b2b2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f022 0204 	bic.w	r2, r2, #4
 800b282:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	2204      	movs	r2, #4
 800b28a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b292:	f043 0201 	orr.w	r2, r3, #1
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2204      	movs	r2, #4
 800b2a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 f86f 	bl	800b390 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f003 0302 	and.w	r3, r3, #2
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d023      	beq.n	800b304 <HAL_LTDC_IRQHandler+0xbc>
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	f003 0302 	and.w	r3, r3, #2
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d01e      	beq.n	800b304 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f022 0202 	bic.w	r2, r2, #2
 800b2d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	2202      	movs	r2, #2
 800b2dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b2e4:	f043 0202 	orr.w	r2, r3, #2
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2204      	movs	r2, #4
 800b2f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f000 f846 	bl	800b390 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f003 0301 	and.w	r3, r3, #1
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d01b      	beq.n	800b346 <HAL_LTDC_IRQHandler+0xfe>
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	f003 0301 	and.w	r3, r3, #1
 800b314:	2b00      	cmp	r3, #0
 800b316:	d016      	beq.n	800b346 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f022 0201 	bic.w	r2, r2, #1
 800b326:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	2201      	movs	r2, #1
 800b32e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2201      	movs	r2, #1
 800b334:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2200      	movs	r2, #0
 800b33c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f7f7 fb97 	bl	8002a74 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	f003 0308 	and.w	r3, r3, #8
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d01b      	beq.n	800b388 <HAL_LTDC_IRQHandler+0x140>
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	f003 0308 	and.w	r3, r3, #8
 800b356:	2b00      	cmp	r3, #0
 800b358:	d016      	beq.n	800b388 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f022 0208 	bic.w	r2, r2, #8
 800b368:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	2208      	movs	r2, #8
 800b370:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2201      	movs	r2, #1
 800b376:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2200      	movs	r2, #0
 800b37e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f000 f80e 	bl	800b3a4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800b388:	bf00      	nop
 800b38a:	3710      	adds	r7, #16
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800b390:	b480      	push	{r7}
 800b392:	b083      	sub	sp, #12
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800b398:	bf00      	nop
 800b39a:	370c      	adds	r7, #12
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr

0800b3a4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b083      	sub	sp, #12
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800b3ac:	bf00      	nop
 800b3ae:	370c      	adds	r7, #12
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr

0800b3b8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800b3b8:	b5b0      	push	{r4, r5, r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800b3ca:	2b01      	cmp	r3, #1
 800b3cc:	d101      	bne.n	800b3d2 <HAL_LTDC_ConfigLayer+0x1a>
 800b3ce:	2302      	movs	r3, #2
 800b3d0:	e02c      	b.n	800b42c <HAL_LTDC_ConfigLayer+0x74>
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	2202      	movs	r2, #2
 800b3de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b3e2:	68fa      	ldr	r2, [r7, #12]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2134      	movs	r1, #52	; 0x34
 800b3e8:	fb01 f303 	mul.w	r3, r1, r3
 800b3ec:	4413      	add	r3, r2
 800b3ee:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	4614      	mov	r4, r2
 800b3f6:	461d      	mov	r5, r3
 800b3f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b3fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b3fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b3fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b400:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b404:	682b      	ldr	r3, [r5, #0]
 800b406:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800b408:	687a      	ldr	r2, [r7, #4]
 800b40a:	68b9      	ldr	r1, [r7, #8]
 800b40c:	68f8      	ldr	r0, [r7, #12]
 800b40e:	f000 f87f 	bl	800b510 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	2201      	movs	r2, #1
 800b418:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	2201      	movs	r2, #1
 800b41e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	2200      	movs	r2, #0
 800b426:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800b42a:	2300      	movs	r3, #0
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3710      	adds	r7, #16
 800b430:	46bd      	mov	sp, r7
 800b432:	bdb0      	pop	{r4, r5, r7, pc}

0800b434 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b086      	sub	sp, #24
 800b438:	af00      	add	r7, sp, #0
 800b43a:	60f8      	str	r0, [r7, #12]
 800b43c:	60b9      	str	r1, [r7, #8]
 800b43e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800b446:	2b01      	cmp	r3, #1
 800b448:	d101      	bne.n	800b44e <HAL_LTDC_SetAddress+0x1a>
 800b44a:	2302      	movs	r3, #2
 800b44c:	e024      	b.n	800b498 <HAL_LTDC_SetAddress+0x64>
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2201      	movs	r2, #1
 800b452:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2202      	movs	r2, #2
 800b45a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2234      	movs	r2, #52	; 0x34
 800b462:	fb02 f303 	mul.w	r3, r2, r3
 800b466:	3338      	adds	r3, #56	; 0x38
 800b468:	68fa      	ldr	r2, [r7, #12]
 800b46a:	4413      	add	r3, r2
 800b46c:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	68ba      	ldr	r2, [r7, #8]
 800b472:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	6979      	ldr	r1, [r7, #20]
 800b478:	68f8      	ldr	r0, [r7, #12]
 800b47a:	f000 f849 	bl	800b510 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	2201      	movs	r2, #1
 800b484:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2201      	movs	r2, #1
 800b48a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2200      	movs	r2, #0
 800b492:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800b496:	2300      	movs	r3, #0
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3718      	adds	r7, #24
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b083      	sub	sp, #12
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d101      	bne.n	800b4b8 <HAL_LTDC_ProgramLineEvent+0x18>
 800b4b4:	2302      	movs	r3, #2
 800b4b6:	e023      	b.n	800b500 <HAL_LTDC_ProgramLineEvent+0x60>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2202      	movs	r2, #2
 800b4c4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f022 0201 	bic.w	r2, r2, #1
 800b4d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800b4d8:	4a0c      	ldr	r2, [pc, #48]	; (800b50c <HAL_LTDC_ProgramLineEvent+0x6c>)
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f042 0201 	orr.w	r2, r2, #1
 800b4ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800b4fe:	2300      	movs	r3, #0
}
 800b500:	4618      	mov	r0, r3
 800b502:	370c      	adds	r7, #12
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr
 800b50c:	40016800 	.word	0x40016800

0800b510 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800b510:	b480      	push	{r7}
 800b512:	b089      	sub	sp, #36	; 0x24
 800b514:	af00      	add	r7, sp, #0
 800b516:	60f8      	str	r0, [r7, #12]
 800b518:	60b9      	str	r1, [r7, #8]
 800b51a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	685a      	ldr	r2, [r3, #4]
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	68db      	ldr	r3, [r3, #12]
 800b526:	0c1b      	lsrs	r3, r3, #16
 800b528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b52c:	4413      	add	r3, r2
 800b52e:	041b      	lsls	r3, r3, #16
 800b530:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	461a      	mov	r2, r3
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	01db      	lsls	r3, r3, #7
 800b53c:	4413      	add	r3, r2
 800b53e:	3384      	adds	r3, #132	; 0x84
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	68fa      	ldr	r2, [r7, #12]
 800b544:	6812      	ldr	r2, [r2, #0]
 800b546:	4611      	mov	r1, r2
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	01d2      	lsls	r2, r2, #7
 800b54c:	440a      	add	r2, r1
 800b54e:	3284      	adds	r2, #132	; 0x84
 800b550:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800b554:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	68db      	ldr	r3, [r3, #12]
 800b560:	0c1b      	lsrs	r3, r3, #16
 800b562:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b566:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800b568:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4619      	mov	r1, r3
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	01db      	lsls	r3, r3, #7
 800b574:	440b      	add	r3, r1
 800b576:	3384      	adds	r3, #132	; 0x84
 800b578:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800b57a:	69fb      	ldr	r3, [r7, #28]
 800b57c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b57e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	68da      	ldr	r2, [r3, #12]
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	68db      	ldr	r3, [r3, #12]
 800b58a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b58e:	4413      	add	r3, r2
 800b590:	041b      	lsls	r3, r3, #16
 800b592:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	461a      	mov	r2, r3
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	01db      	lsls	r3, r3, #7
 800b59e:	4413      	add	r3, r2
 800b5a0:	3384      	adds	r3, #132	; 0x84
 800b5a2:	689b      	ldr	r3, [r3, #8]
 800b5a4:	68fa      	ldr	r2, [r7, #12]
 800b5a6:	6812      	ldr	r2, [r2, #0]
 800b5a8:	4611      	mov	r1, r2
 800b5aa:	687a      	ldr	r2, [r7, #4]
 800b5ac:	01d2      	lsls	r2, r2, #7
 800b5ae:	440a      	add	r2, r1
 800b5b0:	3284      	adds	r2, #132	; 0x84
 800b5b2:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800b5b6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	689a      	ldr	r2, [r3, #8]
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	68db      	ldr	r3, [r3, #12]
 800b5c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b5c6:	4413      	add	r3, r2
 800b5c8:	1c5a      	adds	r2, r3, #1
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	01db      	lsls	r3, r3, #7
 800b5d4:	440b      	add	r3, r1
 800b5d6:	3384      	adds	r3, #132	; 0x84
 800b5d8:	4619      	mov	r1, r3
 800b5da:	69fb      	ldr	r3, [r7, #28]
 800b5dc:	4313      	orrs	r3, r2
 800b5de:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	01db      	lsls	r3, r3, #7
 800b5ea:	4413      	add	r3, r2
 800b5ec:	3384      	adds	r3, #132	; 0x84
 800b5ee:	691b      	ldr	r3, [r3, #16]
 800b5f0:	68fa      	ldr	r2, [r7, #12]
 800b5f2:	6812      	ldr	r2, [r2, #0]
 800b5f4:	4611      	mov	r1, r2
 800b5f6:	687a      	ldr	r2, [r7, #4]
 800b5f8:	01d2      	lsls	r2, r2, #7
 800b5fa:	440a      	add	r2, r1
 800b5fc:	3284      	adds	r2, #132	; 0x84
 800b5fe:	f023 0307 	bic.w	r3, r3, #7
 800b602:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	461a      	mov	r2, r3
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	01db      	lsls	r3, r3, #7
 800b60e:	4413      	add	r3, r2
 800b610:	3384      	adds	r3, #132	; 0x84
 800b612:	461a      	mov	r2, r3
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	691b      	ldr	r3, [r3, #16]
 800b618:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b620:	021b      	lsls	r3, r3, #8
 800b622:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b62a:	041b      	lsls	r3, r3, #16
 800b62c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	699b      	ldr	r3, [r3, #24]
 800b632:	061b      	lsls	r3, r3, #24
 800b634:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	461a      	mov	r2, r3
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	01db      	lsls	r3, r3, #7
 800b640:	4413      	add	r3, r2
 800b642:	3384      	adds	r3, #132	; 0x84
 800b644:	699b      	ldr	r3, [r3, #24]
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	461a      	mov	r2, r3
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	01db      	lsls	r3, r3, #7
 800b650:	4413      	add	r3, r2
 800b652:	3384      	adds	r3, #132	; 0x84
 800b654:	461a      	mov	r2, r3
 800b656:	2300      	movs	r3, #0
 800b658:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b660:	461a      	mov	r2, r3
 800b662:	69fb      	ldr	r3, [r7, #28]
 800b664:	431a      	orrs	r2, r3
 800b666:	69bb      	ldr	r3, [r7, #24]
 800b668:	431a      	orrs	r2, r3
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4619      	mov	r1, r3
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	01db      	lsls	r3, r3, #7
 800b674:	440b      	add	r3, r1
 800b676:	3384      	adds	r3, #132	; 0x84
 800b678:	4619      	mov	r1, r3
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	4313      	orrs	r3, r2
 800b67e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	461a      	mov	r2, r3
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	01db      	lsls	r3, r3, #7
 800b68a:	4413      	add	r3, r2
 800b68c:	3384      	adds	r3, #132	; 0x84
 800b68e:	695b      	ldr	r3, [r3, #20]
 800b690:	68fa      	ldr	r2, [r7, #12]
 800b692:	6812      	ldr	r2, [r2, #0]
 800b694:	4611      	mov	r1, r2
 800b696:	687a      	ldr	r2, [r7, #4]
 800b698:	01d2      	lsls	r2, r2, #7
 800b69a:	440a      	add	r2, r1
 800b69c:	3284      	adds	r2, #132	; 0x84
 800b69e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b6a2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	01db      	lsls	r3, r3, #7
 800b6ae:	4413      	add	r3, r2
 800b6b0:	3384      	adds	r3, #132	; 0x84
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	695b      	ldr	r3, [r3, #20]
 800b6b8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	461a      	mov	r2, r3
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	01db      	lsls	r3, r3, #7
 800b6c4:	4413      	add	r3, r2
 800b6c6:	3384      	adds	r3, #132	; 0x84
 800b6c8:	69db      	ldr	r3, [r3, #28]
 800b6ca:	68fa      	ldr	r2, [r7, #12]
 800b6cc:	6812      	ldr	r2, [r2, #0]
 800b6ce:	4611      	mov	r1, r2
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	01d2      	lsls	r2, r2, #7
 800b6d4:	440a      	add	r2, r1
 800b6d6:	3284      	adds	r2, #132	; 0x84
 800b6d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800b6dc:	f023 0307 	bic.w	r3, r3, #7
 800b6e0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	69da      	ldr	r2, [r3, #28]
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	6a1b      	ldr	r3, [r3, #32]
 800b6ea:	68f9      	ldr	r1, [r7, #12]
 800b6ec:	6809      	ldr	r1, [r1, #0]
 800b6ee:	4608      	mov	r0, r1
 800b6f0:	6879      	ldr	r1, [r7, #4]
 800b6f2:	01c9      	lsls	r1, r1, #7
 800b6f4:	4401      	add	r1, r0
 800b6f6:	3184      	adds	r1, #132	; 0x84
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	461a      	mov	r2, r3
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	01db      	lsls	r3, r3, #7
 800b706:	4413      	add	r3, r2
 800b708:	3384      	adds	r3, #132	; 0x84
 800b70a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	461a      	mov	r2, r3
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	01db      	lsls	r3, r3, #7
 800b716:	4413      	add	r3, r2
 800b718:	3384      	adds	r3, #132	; 0x84
 800b71a:	461a      	mov	r2, r3
 800b71c:	2300      	movs	r3, #0
 800b71e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	461a      	mov	r2, r3
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	01db      	lsls	r3, r3, #7
 800b72a:	4413      	add	r3, r2
 800b72c:	3384      	adds	r3, #132	; 0x84
 800b72e:	461a      	mov	r2, r3
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b734:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	691b      	ldr	r3, [r3, #16]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d102      	bne.n	800b744 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800b73e:	2304      	movs	r3, #4
 800b740:	61fb      	str	r3, [r7, #28]
 800b742:	e01b      	b.n	800b77c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	691b      	ldr	r3, [r3, #16]
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d102      	bne.n	800b752 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800b74c:	2303      	movs	r3, #3
 800b74e:	61fb      	str	r3, [r7, #28]
 800b750:	e014      	b.n	800b77c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	691b      	ldr	r3, [r3, #16]
 800b756:	2b04      	cmp	r3, #4
 800b758:	d00b      	beq.n	800b772 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b75e:	2b02      	cmp	r3, #2
 800b760:	d007      	beq.n	800b772 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800b766:	2b03      	cmp	r3, #3
 800b768:	d003      	beq.n	800b772 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800b76e:	2b07      	cmp	r3, #7
 800b770:	d102      	bne.n	800b778 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800b772:	2302      	movs	r3, #2
 800b774:	61fb      	str	r3, [r7, #28]
 800b776:	e001      	b.n	800b77c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800b778:	2301      	movs	r3, #1
 800b77a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	461a      	mov	r2, r3
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	01db      	lsls	r3, r3, #7
 800b786:	4413      	add	r3, r2
 800b788:	3384      	adds	r3, #132	; 0x84
 800b78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b78c:	68fa      	ldr	r2, [r7, #12]
 800b78e:	6812      	ldr	r2, [r2, #0]
 800b790:	4611      	mov	r1, r2
 800b792:	687a      	ldr	r2, [r7, #4]
 800b794:	01d2      	lsls	r2, r2, #7
 800b796:	440a      	add	r2, r1
 800b798:	3284      	adds	r2, #132	; 0x84
 800b79a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800b79e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7a4:	69fa      	ldr	r2, [r7, #28]
 800b7a6:	fb02 f303 	mul.w	r3, r2, r3
 800b7aa:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	6859      	ldr	r1, [r3, #4]
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	1acb      	subs	r3, r1, r3
 800b7b6:	69f9      	ldr	r1, [r7, #28]
 800b7b8:	fb01 f303 	mul.w	r3, r1, r3
 800b7bc:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800b7be:	68f9      	ldr	r1, [r7, #12]
 800b7c0:	6809      	ldr	r1, [r1, #0]
 800b7c2:	4608      	mov	r0, r1
 800b7c4:	6879      	ldr	r1, [r7, #4]
 800b7c6:	01c9      	lsls	r1, r1, #7
 800b7c8:	4401      	add	r1, r0
 800b7ca:	3184      	adds	r1, #132	; 0x84
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	01db      	lsls	r3, r3, #7
 800b7da:	4413      	add	r3, r2
 800b7dc:	3384      	adds	r3, #132	; 0x84
 800b7de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7e0:	68fa      	ldr	r2, [r7, #12]
 800b7e2:	6812      	ldr	r2, [r2, #0]
 800b7e4:	4611      	mov	r1, r2
 800b7e6:	687a      	ldr	r2, [r7, #4]
 800b7e8:	01d2      	lsls	r2, r2, #7
 800b7ea:	440a      	add	r2, r1
 800b7ec:	3284      	adds	r2, #132	; 0x84
 800b7ee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b7f2:	f023 0307 	bic.w	r3, r3, #7
 800b7f6:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	01db      	lsls	r3, r3, #7
 800b802:	4413      	add	r3, r2
 800b804:	3384      	adds	r3, #132	; 0x84
 800b806:	461a      	mov	r2, r3
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b80c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	461a      	mov	r2, r3
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	01db      	lsls	r3, r3, #7
 800b818:	4413      	add	r3, r2
 800b81a:	3384      	adds	r3, #132	; 0x84
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	68fa      	ldr	r2, [r7, #12]
 800b820:	6812      	ldr	r2, [r2, #0]
 800b822:	4611      	mov	r1, r2
 800b824:	687a      	ldr	r2, [r7, #4]
 800b826:	01d2      	lsls	r2, r2, #7
 800b828:	440a      	add	r2, r1
 800b82a:	3284      	adds	r2, #132	; 0x84
 800b82c:	f043 0301 	orr.w	r3, r3, #1
 800b830:	6013      	str	r3, [r2, #0]
}
 800b832:	bf00      	nop
 800b834:	3724      	adds	r7, #36	; 0x24
 800b836:	46bd      	mov	sp, r7
 800b838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83c:	4770      	bx	lr
	...

0800b840 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b840:	b480      	push	{r7}
 800b842:	b085      	sub	sp, #20
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800b848:	4b39      	ldr	r3, [pc, #228]	; (800b930 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b84a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b84c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b850:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800b852:	68ba      	ldr	r2, [r7, #8]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	429a      	cmp	r2, r3
 800b858:	d10b      	bne.n	800b872 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b860:	d905      	bls.n	800b86e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800b862:	4b33      	ldr	r3, [pc, #204]	; (800b930 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b864:	68db      	ldr	r3, [r3, #12]
 800b866:	4a32      	ldr	r2, [pc, #200]	; (800b930 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b86c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800b86e:	2300      	movs	r3, #0
 800b870:	e057      	b.n	800b922 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b878:	d90a      	bls.n	800b890 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800b87a:	4b2d      	ldr	r3, [pc, #180]	; (800b930 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b87c:	68db      	ldr	r3, [r3, #12]
 800b87e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	4313      	orrs	r3, r2
 800b886:	4a2a      	ldr	r2, [pc, #168]	; (800b930 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b88c:	60d3      	str	r3, [r2, #12]
 800b88e:	e007      	b.n	800b8a0 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800b890:	4b27      	ldr	r3, [pc, #156]	; (800b930 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b892:	68db      	ldr	r3, [r3, #12]
 800b894:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b898:	4925      	ldr	r1, [pc, #148]	; (800b930 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	4313      	orrs	r3, r2
 800b89e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800b8a0:	4b24      	ldr	r3, [pc, #144]	; (800b934 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4a24      	ldr	r2, [pc, #144]	; (800b938 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800b8a6:	fba2 2303 	umull	r2, r3, r2, r3
 800b8aa:	099b      	lsrs	r3, r3, #6
 800b8ac:	2232      	movs	r2, #50	; 0x32
 800b8ae:	fb02 f303 	mul.w	r3, r2, r3
 800b8b2:	4a21      	ldr	r2, [pc, #132]	; (800b938 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800b8b4:	fba2 2303 	umull	r2, r3, r2, r3
 800b8b8:	099b      	lsrs	r3, r3, #6
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800b8be:	e002      	b.n	800b8c6 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	3b01      	subs	r3, #1
 800b8c4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800b8c6:	4b1a      	ldr	r3, [pc, #104]	; (800b930 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b8c8:	68db      	ldr	r3, [r3, #12]
 800b8ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d102      	bne.n	800b8d8 <HAL_PWREx_ControlVoltageScaling+0x98>
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d1f3      	bne.n	800b8c0 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d01b      	beq.n	800b916 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800b8de:	4b15      	ldr	r3, [pc, #84]	; (800b934 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	4a15      	ldr	r2, [pc, #84]	; (800b938 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800b8e4:	fba2 2303 	umull	r2, r3, r2, r3
 800b8e8:	099b      	lsrs	r3, r3, #6
 800b8ea:	2232      	movs	r2, #50	; 0x32
 800b8ec:	fb02 f303 	mul.w	r3, r2, r3
 800b8f0:	4a11      	ldr	r2, [pc, #68]	; (800b938 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800b8f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b8f6:	099b      	lsrs	r3, r3, #6
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800b8fc:	e002      	b.n	800b904 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	3b01      	subs	r3, #1
 800b902:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800b904:	4b0a      	ldr	r3, [pc, #40]	; (800b930 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800b906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b908:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d102      	bne.n	800b916 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d1f3      	bne.n	800b8fe <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d101      	bne.n	800b920 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800b91c:	2303      	movs	r3, #3
 800b91e:	e000      	b.n	800b922 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800b920:	2300      	movs	r3, #0
}
 800b922:	4618      	mov	r0, r3
 800b924:	3714      	adds	r7, #20
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr
 800b92e:	bf00      	nop
 800b930:	46020800 	.word	0x46020800
 800b934:	20000048 	.word	0x20000048
 800b938:	10624dd3 	.word	0x10624dd3

0800b93c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b93c:	b480      	push	{r7}
 800b93e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800b940:	4b04      	ldr	r3, [pc, #16]	; (800b954 <HAL_PWREx_GetVoltageRange+0x18>)
 800b942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b944:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800b948:	4618      	mov	r0, r3
 800b94a:	46bd      	mov	sp, r7
 800b94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b950:	4770      	bx	lr
 800b952:	bf00      	nop
 800b954:	46020800 	.word	0x46020800

0800b958 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800b958:	b480      	push	{r7}
 800b95a:	b085      	sub	sp, #20
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800b960:	4b22      	ldr	r3, [pc, #136]	; (800b9ec <HAL_PWREx_ConfigSupply+0x94>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	4a22      	ldr	r2, [pc, #136]	; (800b9f0 <HAL_PWREx_ConfigSupply+0x98>)
 800b966:	fba2 2303 	umull	r2, r3, r2, r3
 800b96a:	099b      	lsrs	r3, r3, #6
 800b96c:	2232      	movs	r2, #50	; 0x32
 800b96e:	fb02 f303 	mul.w	r3, r2, r3
 800b972:	4a1f      	ldr	r2, [pc, #124]	; (800b9f0 <HAL_PWREx_ConfigSupply+0x98>)
 800b974:	fba2 2303 	umull	r2, r3, r2, r3
 800b978:	099b      	lsrs	r3, r3, #6
 800b97a:	3301      	adds	r3, #1
 800b97c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d113      	bne.n	800b9ac <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800b984:	4b1b      	ldr	r3, [pc, #108]	; (800b9f4 <HAL_PWREx_ConfigSupply+0x9c>)
 800b986:	689b      	ldr	r3, [r3, #8]
 800b988:	4a1a      	ldr	r2, [pc, #104]	; (800b9f4 <HAL_PWREx_ConfigSupply+0x9c>)
 800b98a:	f023 0302 	bic.w	r3, r3, #2
 800b98e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800b990:	e002      	b.n	800b998 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	3b01      	subs	r3, #1
 800b996:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800b998:	4b16      	ldr	r3, [pc, #88]	; (800b9f4 <HAL_PWREx_ConfigSupply+0x9c>)
 800b99a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b99c:	f003 0302 	and.w	r3, r3, #2
 800b9a0:	2b02      	cmp	r3, #2
 800b9a2:	d116      	bne.n	800b9d2 <HAL_PWREx_ConfigSupply+0x7a>
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d1f3      	bne.n	800b992 <HAL_PWREx_ConfigSupply+0x3a>
 800b9aa:	e012      	b.n	800b9d2 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800b9ac:	4b11      	ldr	r3, [pc, #68]	; (800b9f4 <HAL_PWREx_ConfigSupply+0x9c>)
 800b9ae:	689b      	ldr	r3, [r3, #8]
 800b9b0:	4a10      	ldr	r2, [pc, #64]	; (800b9f4 <HAL_PWREx_ConfigSupply+0x9c>)
 800b9b2:	f043 0302 	orr.w	r3, r3, #2
 800b9b6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800b9b8:	e002      	b.n	800b9c0 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	3b01      	subs	r3, #1
 800b9be:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800b9c0:	4b0c      	ldr	r3, [pc, #48]	; (800b9f4 <HAL_PWREx_ConfigSupply+0x9c>)
 800b9c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9c4:	f003 0302 	and.w	r3, r3, #2
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d102      	bne.n	800b9d2 <HAL_PWREx_ConfigSupply+0x7a>
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d1f3      	bne.n	800b9ba <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d101      	bne.n	800b9dc <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800b9d8:	2303      	movs	r3, #3
 800b9da:	e000      	b.n	800b9de <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800b9dc:	2300      	movs	r3, #0
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3714      	adds	r7, #20
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e8:	4770      	bx	lr
 800b9ea:	bf00      	nop
 800b9ec:	20000048 	.word	0x20000048
 800b9f0:	10624dd3 	.word	0x10624dd3
 800b9f4:	46020800 	.word	0x46020800

0800b9f8 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800b9fc:	4b05      	ldr	r3, [pc, #20]	; (800ba14 <HAL_PWREx_EnableVddIO2+0x1c>)
 800b9fe:	691b      	ldr	r3, [r3, #16]
 800ba00:	4a04      	ldr	r2, [pc, #16]	; (800ba14 <HAL_PWREx_EnableVddIO2+0x1c>)
 800ba02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ba06:	6113      	str	r3, [r2, #16]
}
 800ba08:	bf00      	nop
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr
 800ba12:	bf00      	nop
 800ba14:	46020800 	.word	0x46020800

0800ba18 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 800ba1c:	4b05      	ldr	r3, [pc, #20]	; (800ba34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800ba1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba20:	4a04      	ldr	r2, [pc, #16]	; (800ba34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800ba22:	f043 0301 	orr.w	r3, r3, #1
 800ba26:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800ba28:	bf00      	nop
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba30:	4770      	bx	lr
 800ba32:	bf00      	nop
 800ba34:	46020800 	.word	0x46020800

0800ba38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b08e      	sub	sp, #56	; 0x38
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800ba40:	2300      	movs	r3, #0
 800ba42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d102      	bne.n	800ba52 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	f000 bec8 	b.w	800c7e2 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ba52:	4b99      	ldr	r3, [pc, #612]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800ba54:	69db      	ldr	r3, [r3, #28]
 800ba56:	f003 030c 	and.w	r3, r3, #12
 800ba5a:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ba5c:	4b96      	ldr	r3, [pc, #600]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800ba5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba60:	f003 0303 	and.w	r3, r3, #3
 800ba64:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f003 0310 	and.w	r3, r3, #16
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	f000 816c 	beq.w	800bd4c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800ba74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d007      	beq.n	800ba8a <HAL_RCC_OscConfig+0x52>
 800ba7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba7c:	2b0c      	cmp	r3, #12
 800ba7e:	f040 80de 	bne.w	800bc3e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800ba82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	f040 80da 	bne.w	800bc3e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	69db      	ldr	r3, [r3, #28]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d102      	bne.n	800ba98 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800ba92:	2301      	movs	r3, #1
 800ba94:	f000 bea5 	b.w	800c7e2 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba9c:	4b86      	ldr	r3, [pc, #536]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800ba9e:	689b      	ldr	r3, [r3, #8]
 800baa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d004      	beq.n	800bab2 <HAL_RCC_OscConfig+0x7a>
 800baa8:	4b83      	ldr	r3, [pc, #524]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800baaa:	689b      	ldr	r3, [r3, #8]
 800baac:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bab0:	e005      	b.n	800babe <HAL_RCC_OscConfig+0x86>
 800bab2:	4b81      	ldr	r3, [pc, #516]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800bab4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bab8:	041b      	lsls	r3, r3, #16
 800baba:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800babe:	4293      	cmp	r3, r2
 800bac0:	d255      	bcs.n	800bb6e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800bac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d10a      	bne.n	800bade <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bacc:	4618      	mov	r0, r3
 800bace:	f001 fa17 	bl	800cf00 <RCC_SetFlashLatencyFromMSIRange>
 800bad2:	4603      	mov	r3, r0
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d002      	beq.n	800bade <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800bad8:	2301      	movs	r3, #1
 800bada:	f000 be82 	b.w	800c7e2 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800bade:	4b76      	ldr	r3, [pc, #472]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800bae0:	689b      	ldr	r3, [r3, #8]
 800bae2:	4a75      	ldr	r2, [pc, #468]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800bae4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bae8:	6093      	str	r3, [r2, #8]
 800baea:	4b73      	ldr	r3, [pc, #460]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800baec:	689b      	ldr	r3, [r3, #8]
 800baee:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf6:	4970      	ldr	r1, [pc, #448]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800baf8:	4313      	orrs	r3, r2
 800bafa:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb00:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800bb04:	d309      	bcc.n	800bb1a <HAL_RCC_OscConfig+0xe2>
 800bb06:	4b6c      	ldr	r3, [pc, #432]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800bb08:	68db      	ldr	r3, [r3, #12]
 800bb0a:	f023 021f 	bic.w	r2, r3, #31
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6a1b      	ldr	r3, [r3, #32]
 800bb12:	4969      	ldr	r1, [pc, #420]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800bb14:	4313      	orrs	r3, r2
 800bb16:	60cb      	str	r3, [r1, #12]
 800bb18:	e07e      	b.n	800bc18 <HAL_RCC_OscConfig+0x1e0>
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	da0a      	bge.n	800bb38 <HAL_RCC_OscConfig+0x100>
 800bb22:	4b65      	ldr	r3, [pc, #404]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800bb24:	68db      	ldr	r3, [r3, #12]
 800bb26:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6a1b      	ldr	r3, [r3, #32]
 800bb2e:	015b      	lsls	r3, r3, #5
 800bb30:	4961      	ldr	r1, [pc, #388]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800bb32:	4313      	orrs	r3, r2
 800bb34:	60cb      	str	r3, [r1, #12]
 800bb36:	e06f      	b.n	800bc18 <HAL_RCC_OscConfig+0x1e0>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb40:	d30a      	bcc.n	800bb58 <HAL_RCC_OscConfig+0x120>
 800bb42:	4b5d      	ldr	r3, [pc, #372]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800bb44:	68db      	ldr	r3, [r3, #12]
 800bb46:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6a1b      	ldr	r3, [r3, #32]
 800bb4e:	029b      	lsls	r3, r3, #10
 800bb50:	4959      	ldr	r1, [pc, #356]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800bb52:	4313      	orrs	r3, r2
 800bb54:	60cb      	str	r3, [r1, #12]
 800bb56:	e05f      	b.n	800bc18 <HAL_RCC_OscConfig+0x1e0>
 800bb58:	4b57      	ldr	r3, [pc, #348]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800bb5a:	68db      	ldr	r3, [r3, #12]
 800bb5c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6a1b      	ldr	r3, [r3, #32]
 800bb64:	03db      	lsls	r3, r3, #15
 800bb66:	4954      	ldr	r1, [pc, #336]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800bb68:	4313      	orrs	r3, r2
 800bb6a:	60cb      	str	r3, [r1, #12]
 800bb6c:	e054      	b.n	800bc18 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800bb6e:	4b52      	ldr	r3, [pc, #328]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800bb70:	689b      	ldr	r3, [r3, #8]
 800bb72:	4a51      	ldr	r2, [pc, #324]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800bb74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bb78:	6093      	str	r3, [r2, #8]
 800bb7a:	4b4f      	ldr	r3, [pc, #316]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800bb7c:	689b      	ldr	r3, [r3, #8]
 800bb7e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb86:	494c      	ldr	r1, [pc, #304]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb90:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800bb94:	d309      	bcc.n	800bbaa <HAL_RCC_OscConfig+0x172>
 800bb96:	4b48      	ldr	r3, [pc, #288]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800bb98:	68db      	ldr	r3, [r3, #12]
 800bb9a:	f023 021f 	bic.w	r2, r3, #31
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6a1b      	ldr	r3, [r3, #32]
 800bba2:	4945      	ldr	r1, [pc, #276]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800bba4:	4313      	orrs	r3, r2
 800bba6:	60cb      	str	r3, [r1, #12]
 800bba8:	e028      	b.n	800bbfc <HAL_RCC_OscConfig+0x1c4>
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	da0a      	bge.n	800bbc8 <HAL_RCC_OscConfig+0x190>
 800bbb2:	4b41      	ldr	r3, [pc, #260]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800bbb4:	68db      	ldr	r3, [r3, #12]
 800bbb6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6a1b      	ldr	r3, [r3, #32]
 800bbbe:	015b      	lsls	r3, r3, #5
 800bbc0:	493d      	ldr	r1, [pc, #244]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800bbc2:	4313      	orrs	r3, r2
 800bbc4:	60cb      	str	r3, [r1, #12]
 800bbc6:	e019      	b.n	800bbfc <HAL_RCC_OscConfig+0x1c4>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbd0:	d30a      	bcc.n	800bbe8 <HAL_RCC_OscConfig+0x1b0>
 800bbd2:	4b39      	ldr	r3, [pc, #228]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800bbd4:	68db      	ldr	r3, [r3, #12]
 800bbd6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6a1b      	ldr	r3, [r3, #32]
 800bbde:	029b      	lsls	r3, r3, #10
 800bbe0:	4935      	ldr	r1, [pc, #212]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800bbe2:	4313      	orrs	r3, r2
 800bbe4:	60cb      	str	r3, [r1, #12]
 800bbe6:	e009      	b.n	800bbfc <HAL_RCC_OscConfig+0x1c4>
 800bbe8:	4b33      	ldr	r3, [pc, #204]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800bbea:	68db      	ldr	r3, [r3, #12]
 800bbec:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6a1b      	ldr	r3, [r3, #32]
 800bbf4:	03db      	lsls	r3, r3, #15
 800bbf6:	4930      	ldr	r1, [pc, #192]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800bbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d10a      	bne.n	800bc18 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc06:	4618      	mov	r0, r3
 800bc08:	f001 f97a 	bl	800cf00 <RCC_SetFlashLatencyFromMSIRange>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d002      	beq.n	800bc18 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800bc12:	2301      	movs	r3, #1
 800bc14:	f000 bde5 	b.w	800c7e2 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800bc18:	f001 f8e4 	bl	800cde4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800bc1c:	4b27      	ldr	r3, [pc, #156]	; (800bcbc <HAL_RCC_OscConfig+0x284>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4618      	mov	r0, r3
 800bc22:	f7f5 fe17 	bl	8001854 <HAL_InitTick>
 800bc26:	4603      	mov	r3, r0
 800bc28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 800bc2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	f000 808a 	beq.w	800bd4a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800bc36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc3a:	f000 bdd2 	b.w	800c7e2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	69db      	ldr	r3, [r3, #28]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d066      	beq.n	800bd14 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800bc46:	4b1c      	ldr	r3, [pc, #112]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	4a1b      	ldr	r2, [pc, #108]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800bc4c:	f043 0301 	orr.w	r3, r3, #1
 800bc50:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800bc52:	f7fb fb75 	bl	8007340 <HAL_GetTick>
 800bc56:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800bc58:	e009      	b.n	800bc6e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bc5a:	f7fb fb71 	bl	8007340 <HAL_GetTick>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc62:	1ad3      	subs	r3, r2, r3
 800bc64:	2b02      	cmp	r3, #2
 800bc66:	d902      	bls.n	800bc6e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800bc68:	2303      	movs	r3, #3
 800bc6a:	f000 bdba 	b.w	800c7e2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800bc6e:	4b12      	ldr	r3, [pc, #72]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f003 0304 	and.w	r3, r3, #4
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d0ef      	beq.n	800bc5a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800bc7a:	4b0f      	ldr	r3, [pc, #60]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800bc7c:	689b      	ldr	r3, [r3, #8]
 800bc7e:	4a0e      	ldr	r2, [pc, #56]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800bc80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bc84:	6093      	str	r3, [r2, #8]
 800bc86:	4b0c      	ldr	r3, [pc, #48]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800bc88:	689b      	ldr	r3, [r3, #8]
 800bc8a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc92:	4909      	ldr	r1, [pc, #36]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800bc94:	4313      	orrs	r3, r2
 800bc96:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc9c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800bca0:	d30e      	bcc.n	800bcc0 <HAL_RCC_OscConfig+0x288>
 800bca2:	4b05      	ldr	r3, [pc, #20]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800bca4:	68db      	ldr	r3, [r3, #12]
 800bca6:	f023 021f 	bic.w	r2, r3, #31
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6a1b      	ldr	r3, [r3, #32]
 800bcae:	4902      	ldr	r1, [pc, #8]	; (800bcb8 <HAL_RCC_OscConfig+0x280>)
 800bcb0:	4313      	orrs	r3, r2
 800bcb2:	60cb      	str	r3, [r1, #12]
 800bcb4:	e04a      	b.n	800bd4c <HAL_RCC_OscConfig+0x314>
 800bcb6:	bf00      	nop
 800bcb8:	46020c00 	.word	0x46020c00
 800bcbc:	2000004c 	.word	0x2000004c
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	da0a      	bge.n	800bcde <HAL_RCC_OscConfig+0x2a6>
 800bcc8:	4b98      	ldr	r3, [pc, #608]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800bcca:	68db      	ldr	r3, [r3, #12]
 800bccc:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6a1b      	ldr	r3, [r3, #32]
 800bcd4:	015b      	lsls	r3, r3, #5
 800bcd6:	4995      	ldr	r1, [pc, #596]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	60cb      	str	r3, [r1, #12]
 800bcdc:	e036      	b.n	800bd4c <HAL_RCC_OscConfig+0x314>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bce6:	d30a      	bcc.n	800bcfe <HAL_RCC_OscConfig+0x2c6>
 800bce8:	4b90      	ldr	r3, [pc, #576]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800bcea:	68db      	ldr	r3, [r3, #12]
 800bcec:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6a1b      	ldr	r3, [r3, #32]
 800bcf4:	029b      	lsls	r3, r3, #10
 800bcf6:	498d      	ldr	r1, [pc, #564]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	60cb      	str	r3, [r1, #12]
 800bcfc:	e026      	b.n	800bd4c <HAL_RCC_OscConfig+0x314>
 800bcfe:	4b8b      	ldr	r3, [pc, #556]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800bd00:	68db      	ldr	r3, [r3, #12]
 800bd02:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6a1b      	ldr	r3, [r3, #32]
 800bd0a:	03db      	lsls	r3, r3, #15
 800bd0c:	4987      	ldr	r1, [pc, #540]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800bd0e:	4313      	orrs	r3, r2
 800bd10:	60cb      	str	r3, [r1, #12]
 800bd12:	e01b      	b.n	800bd4c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800bd14:	4b85      	ldr	r3, [pc, #532]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	4a84      	ldr	r2, [pc, #528]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800bd1a:	f023 0301 	bic.w	r3, r3, #1
 800bd1e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800bd20:	f7fb fb0e 	bl	8007340 <HAL_GetTick>
 800bd24:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800bd26:	e009      	b.n	800bd3c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bd28:	f7fb fb0a 	bl	8007340 <HAL_GetTick>
 800bd2c:	4602      	mov	r2, r0
 800bd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd30:	1ad3      	subs	r3, r2, r3
 800bd32:	2b02      	cmp	r3, #2
 800bd34:	d902      	bls.n	800bd3c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800bd36:	2303      	movs	r3, #3
 800bd38:	f000 bd53 	b.w	800c7e2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800bd3c:	4b7b      	ldr	r3, [pc, #492]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f003 0304 	and.w	r3, r3, #4
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d1ef      	bne.n	800bd28 <HAL_RCC_OscConfig+0x2f0>
 800bd48:	e000      	b.n	800bd4c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800bd4a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f003 0301 	and.w	r3, r3, #1
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	f000 808b 	beq.w	800be70 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800bd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5c:	2b08      	cmp	r3, #8
 800bd5e:	d005      	beq.n	800bd6c <HAL_RCC_OscConfig+0x334>
 800bd60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd62:	2b0c      	cmp	r3, #12
 800bd64:	d109      	bne.n	800bd7a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800bd66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd68:	2b03      	cmp	r3, #3
 800bd6a:	d106      	bne.n	800bd7a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d17d      	bne.n	800be70 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800bd74:	2301      	movs	r3, #1
 800bd76:	f000 bd34 	b.w	800c7e2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	685b      	ldr	r3, [r3, #4]
 800bd7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd82:	d106      	bne.n	800bd92 <HAL_RCC_OscConfig+0x35a>
 800bd84:	4b69      	ldr	r3, [pc, #420]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	4a68      	ldr	r2, [pc, #416]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800bd8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bd8e:	6013      	str	r3, [r2, #0]
 800bd90:	e041      	b.n	800be16 <HAL_RCC_OscConfig+0x3de>
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	685b      	ldr	r3, [r3, #4]
 800bd96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bd9a:	d112      	bne.n	800bdc2 <HAL_RCC_OscConfig+0x38a>
 800bd9c:	4b63      	ldr	r3, [pc, #396]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	4a62      	ldr	r2, [pc, #392]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800bda2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bda6:	6013      	str	r3, [r2, #0]
 800bda8:	4b60      	ldr	r3, [pc, #384]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4a5f      	ldr	r2, [pc, #380]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800bdae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bdb2:	6013      	str	r3, [r2, #0]
 800bdb4:	4b5d      	ldr	r3, [pc, #372]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	4a5c      	ldr	r2, [pc, #368]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800bdba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bdbe:	6013      	str	r3, [r2, #0]
 800bdc0:	e029      	b.n	800be16 <HAL_RCC_OscConfig+0x3de>
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800bdca:	d112      	bne.n	800bdf2 <HAL_RCC_OscConfig+0x3ba>
 800bdcc:	4b57      	ldr	r3, [pc, #348]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	4a56      	ldr	r2, [pc, #344]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800bdd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bdd6:	6013      	str	r3, [r2, #0]
 800bdd8:	4b54      	ldr	r3, [pc, #336]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4a53      	ldr	r2, [pc, #332]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800bdde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bde2:	6013      	str	r3, [r2, #0]
 800bde4:	4b51      	ldr	r3, [pc, #324]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	4a50      	ldr	r2, [pc, #320]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800bdea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bdee:	6013      	str	r3, [r2, #0]
 800bdf0:	e011      	b.n	800be16 <HAL_RCC_OscConfig+0x3de>
 800bdf2:	4b4e      	ldr	r3, [pc, #312]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	4a4d      	ldr	r2, [pc, #308]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800bdf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bdfc:	6013      	str	r3, [r2, #0]
 800bdfe:	4b4b      	ldr	r3, [pc, #300]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	4a4a      	ldr	r2, [pc, #296]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800be04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800be08:	6013      	str	r3, [r2, #0]
 800be0a:	4b48      	ldr	r3, [pc, #288]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	4a47      	ldr	r2, [pc, #284]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800be10:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800be14:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d014      	beq.n	800be48 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800be1e:	f7fb fa8f 	bl	8007340 <HAL_GetTick>
 800be22:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800be24:	e009      	b.n	800be3a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800be26:	f7fb fa8b 	bl	8007340 <HAL_GetTick>
 800be2a:	4602      	mov	r2, r0
 800be2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be2e:	1ad3      	subs	r3, r2, r3
 800be30:	2b64      	cmp	r3, #100	; 0x64
 800be32:	d902      	bls.n	800be3a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800be34:	2303      	movs	r3, #3
 800be36:	f000 bcd4 	b.w	800c7e2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800be3a:	4b3c      	ldr	r3, [pc, #240]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be42:	2b00      	cmp	r3, #0
 800be44:	d0ef      	beq.n	800be26 <HAL_RCC_OscConfig+0x3ee>
 800be46:	e013      	b.n	800be70 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800be48:	f7fb fa7a 	bl	8007340 <HAL_GetTick>
 800be4c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800be4e:	e009      	b.n	800be64 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800be50:	f7fb fa76 	bl	8007340 <HAL_GetTick>
 800be54:	4602      	mov	r2, r0
 800be56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be58:	1ad3      	subs	r3, r2, r3
 800be5a:	2b64      	cmp	r3, #100	; 0x64
 800be5c:	d902      	bls.n	800be64 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800be5e:	2303      	movs	r3, #3
 800be60:	f000 bcbf 	b.w	800c7e2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800be64:	4b31      	ldr	r3, [pc, #196]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d1ef      	bne.n	800be50 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f003 0302 	and.w	r3, r3, #2
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d05f      	beq.n	800bf3c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800be7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7e:	2b04      	cmp	r3, #4
 800be80:	d005      	beq.n	800be8e <HAL_RCC_OscConfig+0x456>
 800be82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be84:	2b0c      	cmp	r3, #12
 800be86:	d114      	bne.n	800beb2 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800be88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be8a:	2b02      	cmp	r3, #2
 800be8c:	d111      	bne.n	800beb2 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	68db      	ldr	r3, [r3, #12]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d102      	bne.n	800be9c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800be96:	2301      	movs	r3, #1
 800be98:	f000 bca3 	b.w	800c7e2 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800be9c:	4b23      	ldr	r3, [pc, #140]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800be9e:	691b      	ldr	r3, [r3, #16]
 800bea0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	691b      	ldr	r3, [r3, #16]
 800bea8:	041b      	lsls	r3, r3, #16
 800beaa:	4920      	ldr	r1, [pc, #128]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800beac:	4313      	orrs	r3, r2
 800beae:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800beb0:	e044      	b.n	800bf3c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	68db      	ldr	r3, [r3, #12]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d024      	beq.n	800bf04 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800beba:	4b1c      	ldr	r3, [pc, #112]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	4a1b      	ldr	r2, [pc, #108]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800bec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bec4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800bec6:	f7fb fa3b 	bl	8007340 <HAL_GetTick>
 800beca:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800becc:	e009      	b.n	800bee2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bece:	f7fb fa37 	bl	8007340 <HAL_GetTick>
 800bed2:	4602      	mov	r2, r0
 800bed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed6:	1ad3      	subs	r3, r2, r3
 800bed8:	2b02      	cmp	r3, #2
 800beda:	d902      	bls.n	800bee2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800bedc:	2303      	movs	r3, #3
 800bede:	f000 bc80 	b.w	800c7e2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bee2:	4b12      	ldr	r3, [pc, #72]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800beea:	2b00      	cmp	r3, #0
 800beec:	d0ef      	beq.n	800bece <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800beee:	4b0f      	ldr	r3, [pc, #60]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800bef0:	691b      	ldr	r3, [r3, #16]
 800bef2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	691b      	ldr	r3, [r3, #16]
 800befa:	041b      	lsls	r3, r3, #16
 800befc:	490b      	ldr	r1, [pc, #44]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800befe:	4313      	orrs	r3, r2
 800bf00:	610b      	str	r3, [r1, #16]
 800bf02:	e01b      	b.n	800bf3c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800bf04:	4b09      	ldr	r3, [pc, #36]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	4a08      	ldr	r2, [pc, #32]	; (800bf2c <HAL_RCC_OscConfig+0x4f4>)
 800bf0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf0e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800bf10:	f7fb fa16 	bl	8007340 <HAL_GetTick>
 800bf14:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bf16:	e00b      	b.n	800bf30 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bf18:	f7fb fa12 	bl	8007340 <HAL_GetTick>
 800bf1c:	4602      	mov	r2, r0
 800bf1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf20:	1ad3      	subs	r3, r2, r3
 800bf22:	2b02      	cmp	r3, #2
 800bf24:	d904      	bls.n	800bf30 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800bf26:	2303      	movs	r3, #3
 800bf28:	f000 bc5b 	b.w	800c7e2 <HAL_RCC_OscConfig+0xdaa>
 800bf2c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bf30:	4baf      	ldr	r3, [pc, #700]	; (800c1f0 <HAL_RCC_OscConfig+0x7b8>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d1ed      	bne.n	800bf18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f003 0308 	and.w	r3, r3, #8
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	f000 80c8 	beq.w	800c0da <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bf50:	4ba7      	ldr	r3, [pc, #668]	; (800c1f0 <HAL_RCC_OscConfig+0x7b8>)
 800bf52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf56:	f003 0304 	and.w	r3, r3, #4
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d111      	bne.n	800bf82 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bf5e:	4ba4      	ldr	r3, [pc, #656]	; (800c1f0 <HAL_RCC_OscConfig+0x7b8>)
 800bf60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf64:	4aa2      	ldr	r2, [pc, #648]	; (800c1f0 <HAL_RCC_OscConfig+0x7b8>)
 800bf66:	f043 0304 	orr.w	r3, r3, #4
 800bf6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800bf6e:	4ba0      	ldr	r3, [pc, #640]	; (800c1f0 <HAL_RCC_OscConfig+0x7b8>)
 800bf70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf74:	f003 0304 	and.w	r3, r3, #4
 800bf78:	617b      	str	r3, [r7, #20]
 800bf7a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800bf82:	4b9c      	ldr	r3, [pc, #624]	; (800c1f4 <HAL_RCC_OscConfig+0x7bc>)
 800bf84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf86:	f003 0301 	and.w	r3, r3, #1
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d119      	bne.n	800bfc2 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800bf8e:	4b99      	ldr	r3, [pc, #612]	; (800c1f4 <HAL_RCC_OscConfig+0x7bc>)
 800bf90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf92:	4a98      	ldr	r2, [pc, #608]	; (800c1f4 <HAL_RCC_OscConfig+0x7bc>)
 800bf94:	f043 0301 	orr.w	r3, r3, #1
 800bf98:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bf9a:	f7fb f9d1 	bl	8007340 <HAL_GetTick>
 800bf9e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800bfa0:	e009      	b.n	800bfb6 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bfa2:	f7fb f9cd 	bl	8007340 <HAL_GetTick>
 800bfa6:	4602      	mov	r2, r0
 800bfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfaa:	1ad3      	subs	r3, r2, r3
 800bfac:	2b02      	cmp	r3, #2
 800bfae:	d902      	bls.n	800bfb6 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800bfb0:	2303      	movs	r3, #3
 800bfb2:	f000 bc16 	b.w	800c7e2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800bfb6:	4b8f      	ldr	r3, [pc, #572]	; (800c1f4 <HAL_RCC_OscConfig+0x7bc>)
 800bfb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfba:	f003 0301 	and.w	r3, r3, #1
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d0ef      	beq.n	800bfa2 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	695b      	ldr	r3, [r3, #20]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d05f      	beq.n	800c08a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800bfca:	4b89      	ldr	r3, [pc, #548]	; (800c1f0 <HAL_RCC_OscConfig+0x7b8>)
 800bfcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bfd0:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	699a      	ldr	r2, [r3, #24]
 800bfd6:	6a3b      	ldr	r3, [r7, #32]
 800bfd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	d037      	beq.n	800c050 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800bfe0:	6a3b      	ldr	r3, [r7, #32]
 800bfe2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d006      	beq.n	800bff8 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800bfea:	6a3b      	ldr	r3, [r7, #32]
 800bfec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d101      	bne.n	800bff8 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800bff4:	2301      	movs	r3, #1
 800bff6:	e3f4      	b.n	800c7e2 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800bff8:	6a3b      	ldr	r3, [r7, #32]
 800bffa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d01b      	beq.n	800c03a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800c002:	4b7b      	ldr	r3, [pc, #492]	; (800c1f0 <HAL_RCC_OscConfig+0x7b8>)
 800c004:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c008:	4a79      	ldr	r2, [pc, #484]	; (800c1f0 <HAL_RCC_OscConfig+0x7b8>)
 800c00a:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800c00e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800c012:	f7fb f995 	bl	8007340 <HAL_GetTick>
 800c016:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c018:	e008      	b.n	800c02c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c01a:	f7fb f991 	bl	8007340 <HAL_GetTick>
 800c01e:	4602      	mov	r2, r0
 800c020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c022:	1ad3      	subs	r3, r2, r3
 800c024:	2b05      	cmp	r3, #5
 800c026:	d901      	bls.n	800c02c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800c028:	2303      	movs	r3, #3
 800c02a:	e3da      	b.n	800c7e2 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c02c:	4b70      	ldr	r3, [pc, #448]	; (800c1f0 <HAL_RCC_OscConfig+0x7b8>)
 800c02e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c032:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c036:	2b00      	cmp	r3, #0
 800c038:	d1ef      	bne.n	800c01a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800c03a:	4b6d      	ldr	r3, [pc, #436]	; (800c1f0 <HAL_RCC_OscConfig+0x7b8>)
 800c03c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c040:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	699b      	ldr	r3, [r3, #24]
 800c048:	4969      	ldr	r1, [pc, #420]	; (800c1f0 <HAL_RCC_OscConfig+0x7b8>)
 800c04a:	4313      	orrs	r3, r2
 800c04c:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800c050:	4b67      	ldr	r3, [pc, #412]	; (800c1f0 <HAL_RCC_OscConfig+0x7b8>)
 800c052:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c056:	4a66      	ldr	r2, [pc, #408]	; (800c1f0 <HAL_RCC_OscConfig+0x7b8>)
 800c058:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c05c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800c060:	f7fb f96e 	bl	8007340 <HAL_GetTick>
 800c064:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800c066:	e008      	b.n	800c07a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c068:	f7fb f96a 	bl	8007340 <HAL_GetTick>
 800c06c:	4602      	mov	r2, r0
 800c06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c070:	1ad3      	subs	r3, r2, r3
 800c072:	2b05      	cmp	r3, #5
 800c074:	d901      	bls.n	800c07a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800c076:	2303      	movs	r3, #3
 800c078:	e3b3      	b.n	800c7e2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800c07a:	4b5d      	ldr	r3, [pc, #372]	; (800c1f0 <HAL_RCC_OscConfig+0x7b8>)
 800c07c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c080:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c084:	2b00      	cmp	r3, #0
 800c086:	d0ef      	beq.n	800c068 <HAL_RCC_OscConfig+0x630>
 800c088:	e01b      	b.n	800c0c2 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800c08a:	4b59      	ldr	r3, [pc, #356]	; (800c1f0 <HAL_RCC_OscConfig+0x7b8>)
 800c08c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c090:	4a57      	ldr	r2, [pc, #348]	; (800c1f0 <HAL_RCC_OscConfig+0x7b8>)
 800c092:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800c096:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800c09a:	f7fb f951 	bl	8007340 <HAL_GetTick>
 800c09e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c0a0:	e008      	b.n	800c0b4 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c0a2:	f7fb f94d 	bl	8007340 <HAL_GetTick>
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0aa:	1ad3      	subs	r3, r2, r3
 800c0ac:	2b05      	cmp	r3, #5
 800c0ae:	d901      	bls.n	800c0b4 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800c0b0:	2303      	movs	r3, #3
 800c0b2:	e396      	b.n	800c7e2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c0b4:	4b4e      	ldr	r3, [pc, #312]	; (800c1f0 <HAL_RCC_OscConfig+0x7b8>)
 800c0b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c0ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d1ef      	bne.n	800c0a2 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c0c2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	d107      	bne.n	800c0da <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c0ca:	4b49      	ldr	r3, [pc, #292]	; (800c1f0 <HAL_RCC_OscConfig+0x7b8>)
 800c0cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c0d0:	4a47      	ldr	r2, [pc, #284]	; (800c1f0 <HAL_RCC_OscConfig+0x7b8>)
 800c0d2:	f023 0304 	bic.w	r3, r3, #4
 800c0d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f003 0304 	and.w	r3, r3, #4
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	f000 8111 	beq.w	800c30a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c0ee:	4b40      	ldr	r3, [pc, #256]	; (800c1f0 <HAL_RCC_OscConfig+0x7b8>)
 800c0f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c0f4:	f003 0304 	and.w	r3, r3, #4
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d111      	bne.n	800c120 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c0fc:	4b3c      	ldr	r3, [pc, #240]	; (800c1f0 <HAL_RCC_OscConfig+0x7b8>)
 800c0fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c102:	4a3b      	ldr	r2, [pc, #236]	; (800c1f0 <HAL_RCC_OscConfig+0x7b8>)
 800c104:	f043 0304 	orr.w	r3, r3, #4
 800c108:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800c10c:	4b38      	ldr	r3, [pc, #224]	; (800c1f0 <HAL_RCC_OscConfig+0x7b8>)
 800c10e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c112:	f003 0304 	and.w	r3, r3, #4
 800c116:	613b      	str	r3, [r7, #16]
 800c118:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800c11a:	2301      	movs	r3, #1
 800c11c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c120:	4b34      	ldr	r3, [pc, #208]	; (800c1f4 <HAL_RCC_OscConfig+0x7bc>)
 800c122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c124:	f003 0301 	and.w	r3, r3, #1
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d118      	bne.n	800c15e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800c12c:	4b31      	ldr	r3, [pc, #196]	; (800c1f4 <HAL_RCC_OscConfig+0x7bc>)
 800c12e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c130:	4a30      	ldr	r2, [pc, #192]	; (800c1f4 <HAL_RCC_OscConfig+0x7bc>)
 800c132:	f043 0301 	orr.w	r3, r3, #1
 800c136:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c138:	f7fb f902 	bl	8007340 <HAL_GetTick>
 800c13c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c13e:	e008      	b.n	800c152 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c140:	f7fb f8fe 	bl	8007340 <HAL_GetTick>
 800c144:	4602      	mov	r2, r0
 800c146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c148:	1ad3      	subs	r3, r2, r3
 800c14a:	2b02      	cmp	r3, #2
 800c14c:	d901      	bls.n	800c152 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800c14e:	2303      	movs	r3, #3
 800c150:	e347      	b.n	800c7e2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c152:	4b28      	ldr	r3, [pc, #160]	; (800c1f4 <HAL_RCC_OscConfig+0x7bc>)
 800c154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c156:	f003 0301 	and.w	r3, r3, #1
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d0f0      	beq.n	800c140 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	689b      	ldr	r3, [r3, #8]
 800c162:	f003 0301 	and.w	r3, r3, #1
 800c166:	2b00      	cmp	r3, #0
 800c168:	d01f      	beq.n	800c1aa <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	689b      	ldr	r3, [r3, #8]
 800c16e:	f003 0304 	and.w	r3, r3, #4
 800c172:	2b00      	cmp	r3, #0
 800c174:	d010      	beq.n	800c198 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800c176:	4b1e      	ldr	r3, [pc, #120]	; (800c1f0 <HAL_RCC_OscConfig+0x7b8>)
 800c178:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c17c:	4a1c      	ldr	r2, [pc, #112]	; (800c1f0 <HAL_RCC_OscConfig+0x7b8>)
 800c17e:	f043 0304 	orr.w	r3, r3, #4
 800c182:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c186:	4b1a      	ldr	r3, [pc, #104]	; (800c1f0 <HAL_RCC_OscConfig+0x7b8>)
 800c188:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c18c:	4a18      	ldr	r2, [pc, #96]	; (800c1f0 <HAL_RCC_OscConfig+0x7b8>)
 800c18e:	f043 0301 	orr.w	r3, r3, #1
 800c192:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800c196:	e018      	b.n	800c1ca <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c198:	4b15      	ldr	r3, [pc, #84]	; (800c1f0 <HAL_RCC_OscConfig+0x7b8>)
 800c19a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c19e:	4a14      	ldr	r2, [pc, #80]	; (800c1f0 <HAL_RCC_OscConfig+0x7b8>)
 800c1a0:	f043 0301 	orr.w	r3, r3, #1
 800c1a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800c1a8:	e00f      	b.n	800c1ca <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c1aa:	4b11      	ldr	r3, [pc, #68]	; (800c1f0 <HAL_RCC_OscConfig+0x7b8>)
 800c1ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c1b0:	4a0f      	ldr	r2, [pc, #60]	; (800c1f0 <HAL_RCC_OscConfig+0x7b8>)
 800c1b2:	f023 0301 	bic.w	r3, r3, #1
 800c1b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800c1ba:	4b0d      	ldr	r3, [pc, #52]	; (800c1f0 <HAL_RCC_OscConfig+0x7b8>)
 800c1bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c1c0:	4a0b      	ldr	r2, [pc, #44]	; (800c1f0 <HAL_RCC_OscConfig+0x7b8>)
 800c1c2:	f023 0304 	bic.w	r3, r3, #4
 800c1c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	689b      	ldr	r3, [r3, #8]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d057      	beq.n	800c282 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800c1d2:	f7fb f8b5 	bl	8007340 <HAL_GetTick>
 800c1d6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c1d8:	e00e      	b.n	800c1f8 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c1da:	f7fb f8b1 	bl	8007340 <HAL_GetTick>
 800c1de:	4602      	mov	r2, r0
 800c1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e2:	1ad3      	subs	r3, r2, r3
 800c1e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d905      	bls.n	800c1f8 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800c1ec:	2303      	movs	r3, #3
 800c1ee:	e2f8      	b.n	800c7e2 <HAL_RCC_OscConfig+0xdaa>
 800c1f0:	46020c00 	.word	0x46020c00
 800c1f4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c1f8:	4b9c      	ldr	r3, [pc, #624]	; (800c46c <HAL_RCC_OscConfig+0xa34>)
 800c1fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c1fe:	f003 0302 	and.w	r3, r3, #2
 800c202:	2b00      	cmp	r3, #0
 800c204:	d0e9      	beq.n	800c1da <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	689b      	ldr	r3, [r3, #8]
 800c20a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d01b      	beq.n	800c24a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c212:	4b96      	ldr	r3, [pc, #600]	; (800c46c <HAL_RCC_OscConfig+0xa34>)
 800c214:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c218:	4a94      	ldr	r2, [pc, #592]	; (800c46c <HAL_RCC_OscConfig+0xa34>)
 800c21a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c21e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800c222:	e00a      	b.n	800c23a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c224:	f7fb f88c 	bl	8007340 <HAL_GetTick>
 800c228:	4602      	mov	r2, r0
 800c22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c22c:	1ad3      	subs	r3, r2, r3
 800c22e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c232:	4293      	cmp	r3, r2
 800c234:	d901      	bls.n	800c23a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800c236:	2303      	movs	r3, #3
 800c238:	e2d3      	b.n	800c7e2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800c23a:	4b8c      	ldr	r3, [pc, #560]	; (800c46c <HAL_RCC_OscConfig+0xa34>)
 800c23c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c244:	2b00      	cmp	r3, #0
 800c246:	d0ed      	beq.n	800c224 <HAL_RCC_OscConfig+0x7ec>
 800c248:	e053      	b.n	800c2f2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c24a:	4b88      	ldr	r3, [pc, #544]	; (800c46c <HAL_RCC_OscConfig+0xa34>)
 800c24c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c250:	4a86      	ldr	r2, [pc, #536]	; (800c46c <HAL_RCC_OscConfig+0xa34>)
 800c252:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c256:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c25a:	e00a      	b.n	800c272 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c25c:	f7fb f870 	bl	8007340 <HAL_GetTick>
 800c260:	4602      	mov	r2, r0
 800c262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c264:	1ad3      	subs	r3, r2, r3
 800c266:	f241 3288 	movw	r2, #5000	; 0x1388
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d901      	bls.n	800c272 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800c26e:	2303      	movs	r3, #3
 800c270:	e2b7      	b.n	800c7e2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c272:	4b7e      	ldr	r3, [pc, #504]	; (800c46c <HAL_RCC_OscConfig+0xa34>)
 800c274:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c278:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d1ed      	bne.n	800c25c <HAL_RCC_OscConfig+0x824>
 800c280:	e037      	b.n	800c2f2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800c282:	f7fb f85d 	bl	8007340 <HAL_GetTick>
 800c286:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c288:	e00a      	b.n	800c2a0 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c28a:	f7fb f859 	bl	8007340 <HAL_GetTick>
 800c28e:	4602      	mov	r2, r0
 800c290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c292:	1ad3      	subs	r3, r2, r3
 800c294:	f241 3288 	movw	r2, #5000	; 0x1388
 800c298:	4293      	cmp	r3, r2
 800c29a:	d901      	bls.n	800c2a0 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800c29c:	2303      	movs	r3, #3
 800c29e:	e2a0      	b.n	800c7e2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c2a0:	4b72      	ldr	r3, [pc, #456]	; (800c46c <HAL_RCC_OscConfig+0xa34>)
 800c2a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c2a6:	f003 0302 	and.w	r3, r3, #2
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d1ed      	bne.n	800c28a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800c2ae:	4b6f      	ldr	r3, [pc, #444]	; (800c46c <HAL_RCC_OscConfig+0xa34>)
 800c2b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c2b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d01a      	beq.n	800c2f2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c2bc:	4b6b      	ldr	r3, [pc, #428]	; (800c46c <HAL_RCC_OscConfig+0xa34>)
 800c2be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c2c2:	4a6a      	ldr	r2, [pc, #424]	; (800c46c <HAL_RCC_OscConfig+0xa34>)
 800c2c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c2c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c2cc:	e00a      	b.n	800c2e4 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c2ce:	f7fb f837 	bl	8007340 <HAL_GetTick>
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d6:	1ad3      	subs	r3, r2, r3
 800c2d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d901      	bls.n	800c2e4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800c2e0:	2303      	movs	r3, #3
 800c2e2:	e27e      	b.n	800c7e2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c2e4:	4b61      	ldr	r3, [pc, #388]	; (800c46c <HAL_RCC_OscConfig+0xa34>)
 800c2e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c2ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d1ed      	bne.n	800c2ce <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c2f2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800c2f6:	2b01      	cmp	r3, #1
 800c2f8:	d107      	bne.n	800c30a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c2fa:	4b5c      	ldr	r3, [pc, #368]	; (800c46c <HAL_RCC_OscConfig+0xa34>)
 800c2fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c300:	4a5a      	ldr	r2, [pc, #360]	; (800c46c <HAL_RCC_OscConfig+0xa34>)
 800c302:	f023 0304 	bic.w	r3, r3, #4
 800c306:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f003 0320 	and.w	r3, r3, #32
 800c312:	2b00      	cmp	r3, #0
 800c314:	d036      	beq.n	800c384 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d019      	beq.n	800c352 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800c31e:	4b53      	ldr	r3, [pc, #332]	; (800c46c <HAL_RCC_OscConfig+0xa34>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	4a52      	ldr	r2, [pc, #328]	; (800c46c <HAL_RCC_OscConfig+0xa34>)
 800c324:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c328:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c32a:	f7fb f809 	bl	8007340 <HAL_GetTick>
 800c32e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800c330:	e008      	b.n	800c344 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c332:	f7fb f805 	bl	8007340 <HAL_GetTick>
 800c336:	4602      	mov	r2, r0
 800c338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c33a:	1ad3      	subs	r3, r2, r3
 800c33c:	2b02      	cmp	r3, #2
 800c33e:	d901      	bls.n	800c344 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800c340:	2303      	movs	r3, #3
 800c342:	e24e      	b.n	800c7e2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800c344:	4b49      	ldr	r3, [pc, #292]	; (800c46c <HAL_RCC_OscConfig+0xa34>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d0f0      	beq.n	800c332 <HAL_RCC_OscConfig+0x8fa>
 800c350:	e018      	b.n	800c384 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800c352:	4b46      	ldr	r3, [pc, #280]	; (800c46c <HAL_RCC_OscConfig+0xa34>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	4a45      	ldr	r2, [pc, #276]	; (800c46c <HAL_RCC_OscConfig+0xa34>)
 800c358:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c35c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c35e:	f7fa ffef 	bl	8007340 <HAL_GetTick>
 800c362:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800c364:	e008      	b.n	800c378 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c366:	f7fa ffeb 	bl	8007340 <HAL_GetTick>
 800c36a:	4602      	mov	r2, r0
 800c36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c36e:	1ad3      	subs	r3, r2, r3
 800c370:	2b02      	cmp	r3, #2
 800c372:	d901      	bls.n	800c378 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800c374:	2303      	movs	r3, #3
 800c376:	e234      	b.n	800c7e2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800c378:	4b3c      	ldr	r3, [pc, #240]	; (800c46c <HAL_RCC_OscConfig+0xa34>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c380:	2b00      	cmp	r3, #0
 800c382:	d1f0      	bne.n	800c366 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d036      	beq.n	800c3fe <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c394:	2b00      	cmp	r3, #0
 800c396:	d019      	beq.n	800c3cc <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800c398:	4b34      	ldr	r3, [pc, #208]	; (800c46c <HAL_RCC_OscConfig+0xa34>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	4a33      	ldr	r2, [pc, #204]	; (800c46c <HAL_RCC_OscConfig+0xa34>)
 800c39e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c3a2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c3a4:	f7fa ffcc 	bl	8007340 <HAL_GetTick>
 800c3a8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800c3aa:	e008      	b.n	800c3be <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800c3ac:	f7fa ffc8 	bl	8007340 <HAL_GetTick>
 800c3b0:	4602      	mov	r2, r0
 800c3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b4:	1ad3      	subs	r3, r2, r3
 800c3b6:	2b02      	cmp	r3, #2
 800c3b8:	d901      	bls.n	800c3be <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800c3ba:	2303      	movs	r3, #3
 800c3bc:	e211      	b.n	800c7e2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800c3be:	4b2b      	ldr	r3, [pc, #172]	; (800c46c <HAL_RCC_OscConfig+0xa34>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d0f0      	beq.n	800c3ac <HAL_RCC_OscConfig+0x974>
 800c3ca:	e018      	b.n	800c3fe <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800c3cc:	4b27      	ldr	r3, [pc, #156]	; (800c46c <HAL_RCC_OscConfig+0xa34>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4a26      	ldr	r2, [pc, #152]	; (800c46c <HAL_RCC_OscConfig+0xa34>)
 800c3d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c3d6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c3d8:	f7fa ffb2 	bl	8007340 <HAL_GetTick>
 800c3dc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800c3de:	e008      	b.n	800c3f2 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800c3e0:	f7fa ffae 	bl	8007340 <HAL_GetTick>
 800c3e4:	4602      	mov	r2, r0
 800c3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3e8:	1ad3      	subs	r3, r2, r3
 800c3ea:	2b02      	cmp	r3, #2
 800c3ec:	d901      	bls.n	800c3f2 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800c3ee:	2303      	movs	r3, #3
 800c3f0:	e1f7      	b.n	800c7e2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800c3f2:	4b1e      	ldr	r3, [pc, #120]	; (800c46c <HAL_RCC_OscConfig+0xa34>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d1f0      	bne.n	800c3e0 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c406:	2b00      	cmp	r3, #0
 800c408:	d07f      	beq.n	800c50a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d062      	beq.n	800c4d8 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800c412:	4b16      	ldr	r3, [pc, #88]	; (800c46c <HAL_RCC_OscConfig+0xa34>)
 800c414:	689b      	ldr	r3, [r3, #8]
 800c416:	4a15      	ldr	r2, [pc, #84]	; (800c46c <HAL_RCC_OscConfig+0xa34>)
 800c418:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c41c:	6093      	str	r3, [r2, #8]
 800c41e:	4b13      	ldr	r3, [pc, #76]	; (800c46c <HAL_RCC_OscConfig+0xa34>)
 800c420:	689b      	ldr	r3, [r3, #8]
 800c422:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c42a:	4910      	ldr	r1, [pc, #64]	; (800c46c <HAL_RCC_OscConfig+0xa34>)
 800c42c:	4313      	orrs	r3, r2
 800c42e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c434:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800c438:	d309      	bcc.n	800c44e <HAL_RCC_OscConfig+0xa16>
 800c43a:	4b0c      	ldr	r3, [pc, #48]	; (800c46c <HAL_RCC_OscConfig+0xa34>)
 800c43c:	68db      	ldr	r3, [r3, #12]
 800c43e:	f023 021f 	bic.w	r2, r3, #31
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6a1b      	ldr	r3, [r3, #32]
 800c446:	4909      	ldr	r1, [pc, #36]	; (800c46c <HAL_RCC_OscConfig+0xa34>)
 800c448:	4313      	orrs	r3, r2
 800c44a:	60cb      	str	r3, [r1, #12]
 800c44c:	e02a      	b.n	800c4a4 <HAL_RCC_OscConfig+0xa6c>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c452:	2b00      	cmp	r3, #0
 800c454:	da0c      	bge.n	800c470 <HAL_RCC_OscConfig+0xa38>
 800c456:	4b05      	ldr	r3, [pc, #20]	; (800c46c <HAL_RCC_OscConfig+0xa34>)
 800c458:	68db      	ldr	r3, [r3, #12]
 800c45a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6a1b      	ldr	r3, [r3, #32]
 800c462:	015b      	lsls	r3, r3, #5
 800c464:	4901      	ldr	r1, [pc, #4]	; (800c46c <HAL_RCC_OscConfig+0xa34>)
 800c466:	4313      	orrs	r3, r2
 800c468:	60cb      	str	r3, [r1, #12]
 800c46a:	e01b      	b.n	800c4a4 <HAL_RCC_OscConfig+0xa6c>
 800c46c:	46020c00 	.word	0x46020c00
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c478:	d30a      	bcc.n	800c490 <HAL_RCC_OscConfig+0xa58>
 800c47a:	4ba1      	ldr	r3, [pc, #644]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c47c:	68db      	ldr	r3, [r3, #12]
 800c47e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6a1b      	ldr	r3, [r3, #32]
 800c486:	029b      	lsls	r3, r3, #10
 800c488:	499d      	ldr	r1, [pc, #628]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c48a:	4313      	orrs	r3, r2
 800c48c:	60cb      	str	r3, [r1, #12]
 800c48e:	e009      	b.n	800c4a4 <HAL_RCC_OscConfig+0xa6c>
 800c490:	4b9b      	ldr	r3, [pc, #620]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c492:	68db      	ldr	r3, [r3, #12]
 800c494:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6a1b      	ldr	r3, [r3, #32]
 800c49c:	03db      	lsls	r3, r3, #15
 800c49e:	4998      	ldr	r1, [pc, #608]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c4a0:	4313      	orrs	r3, r2
 800c4a2:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800c4a4:	4b96      	ldr	r3, [pc, #600]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4a95      	ldr	r2, [pc, #596]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c4aa:	f043 0310 	orr.w	r3, r3, #16
 800c4ae:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c4b0:	f7fa ff46 	bl	8007340 <HAL_GetTick>
 800c4b4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800c4b6:	e008      	b.n	800c4ca <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800c4b8:	f7fa ff42 	bl	8007340 <HAL_GetTick>
 800c4bc:	4602      	mov	r2, r0
 800c4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c0:	1ad3      	subs	r3, r2, r3
 800c4c2:	2b02      	cmp	r3, #2
 800c4c4:	d901      	bls.n	800c4ca <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800c4c6:	2303      	movs	r3, #3
 800c4c8:	e18b      	b.n	800c7e2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800c4ca:	4b8d      	ldr	r3, [pc, #564]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f003 0320 	and.w	r3, r3, #32
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d0f0      	beq.n	800c4b8 <HAL_RCC_OscConfig+0xa80>
 800c4d6:	e018      	b.n	800c50a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800c4d8:	4b89      	ldr	r3, [pc, #548]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4a88      	ldr	r2, [pc, #544]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c4de:	f023 0310 	bic.w	r3, r3, #16
 800c4e2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c4e4:	f7fa ff2c 	bl	8007340 <HAL_GetTick>
 800c4e8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800c4ea:	e008      	b.n	800c4fe <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800c4ec:	f7fa ff28 	bl	8007340 <HAL_GetTick>
 800c4f0:	4602      	mov	r2, r0
 800c4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4f4:	1ad3      	subs	r3, r2, r3
 800c4f6:	2b02      	cmp	r3, #2
 800c4f8:	d901      	bls.n	800c4fe <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800c4fa:	2303      	movs	r3, #3
 800c4fc:	e171      	b.n	800c7e2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800c4fe:	4b80      	ldr	r3, [pc, #512]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f003 0320 	and.w	r3, r3, #32
 800c506:	2b00      	cmp	r3, #0
 800c508:	d1f0      	bne.n	800c4ec <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c50e:	2b00      	cmp	r3, #0
 800c510:	f000 8166 	beq.w	800c7e0 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800c514:	2300      	movs	r3, #0
 800c516:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c51a:	4b79      	ldr	r3, [pc, #484]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c51c:	69db      	ldr	r3, [r3, #28]
 800c51e:	f003 030c 	and.w	r3, r3, #12
 800c522:	2b0c      	cmp	r3, #12
 800c524:	f000 80f2 	beq.w	800c70c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c52c:	2b02      	cmp	r3, #2
 800c52e:	f040 80c5 	bne.w	800c6bc <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800c532:	4b73      	ldr	r3, [pc, #460]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	4a72      	ldr	r2, [pc, #456]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c538:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c53c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c53e:	f7fa feff 	bl	8007340 <HAL_GetTick>
 800c542:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c544:	e008      	b.n	800c558 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c546:	f7fa fefb 	bl	8007340 <HAL_GetTick>
 800c54a:	4602      	mov	r2, r0
 800c54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c54e:	1ad3      	subs	r3, r2, r3
 800c550:	2b02      	cmp	r3, #2
 800c552:	d901      	bls.n	800c558 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800c554:	2303      	movs	r3, #3
 800c556:	e144      	b.n	800c7e2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c558:	4b69      	ldr	r3, [pc, #420]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c560:	2b00      	cmp	r3, #0
 800c562:	d1f0      	bne.n	800c546 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c564:	4b66      	ldr	r3, [pc, #408]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c566:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c56a:	f003 0304 	and.w	r3, r3, #4
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d111      	bne.n	800c596 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800c572:	4b63      	ldr	r3, [pc, #396]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c578:	4a61      	ldr	r2, [pc, #388]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c57a:	f043 0304 	orr.w	r3, r3, #4
 800c57e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800c582:	4b5f      	ldr	r3, [pc, #380]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c584:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c588:	f003 0304 	and.w	r3, r3, #4
 800c58c:	60fb      	str	r3, [r7, #12]
 800c58e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800c590:	2301      	movs	r3, #1
 800c592:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800c596:	4b5b      	ldr	r3, [pc, #364]	; (800c704 <HAL_RCC_OscConfig+0xccc>)
 800c598:	68db      	ldr	r3, [r3, #12]
 800c59a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c59e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c5a2:	d102      	bne.n	800c5aa <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800c5aa:	4b56      	ldr	r3, [pc, #344]	; (800c704 <HAL_RCC_OscConfig+0xccc>)
 800c5ac:	68db      	ldr	r3, [r3, #12]
 800c5ae:	4a55      	ldr	r2, [pc, #340]	; (800c704 <HAL_RCC_OscConfig+0xccc>)
 800c5b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c5b4:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800c5b6:	4b52      	ldr	r3, [pc, #328]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c5b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c5be:	f023 0303 	bic.w	r3, r3, #3
 800c5c2:	687a      	ldr	r2, [r7, #4]
 800c5c4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c5ca:	3a01      	subs	r2, #1
 800c5cc:	0212      	lsls	r2, r2, #8
 800c5ce:	4311      	orrs	r1, r2
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c5d4:	430a      	orrs	r2, r1
 800c5d6:	494a      	ldr	r1, [pc, #296]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c5d8:	4313      	orrs	r3, r2
 800c5da:	628b      	str	r3, [r1, #40]	; 0x28
 800c5dc:	4b48      	ldr	r3, [pc, #288]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c5de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c5e0:	4b49      	ldr	r3, [pc, #292]	; (800c708 <HAL_RCC_OscConfig+0xcd0>)
 800c5e2:	4013      	ands	r3, r2
 800c5e4:	687a      	ldr	r2, [r7, #4]
 800c5e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c5e8:	3a01      	subs	r2, #1
 800c5ea:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c5ee:	687a      	ldr	r2, [r7, #4]
 800c5f0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800c5f2:	3a01      	subs	r2, #1
 800c5f4:	0252      	lsls	r2, r2, #9
 800c5f6:	b292      	uxth	r2, r2
 800c5f8:	4311      	orrs	r1, r2
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c5fe:	3a01      	subs	r2, #1
 800c600:	0412      	lsls	r2, r2, #16
 800c602:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800c606:	4311      	orrs	r1, r2
 800c608:	687a      	ldr	r2, [r7, #4]
 800c60a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800c60c:	3a01      	subs	r2, #1
 800c60e:	0612      	lsls	r2, r2, #24
 800c610:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800c614:	430a      	orrs	r2, r1
 800c616:	493a      	ldr	r1, [pc, #232]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c618:	4313      	orrs	r3, r2
 800c61a:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800c61c:	4b38      	ldr	r3, [pc, #224]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c61e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c620:	4a37      	ldr	r2, [pc, #220]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c622:	f023 0310 	bic.w	r3, r3, #16
 800c626:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c62c:	4a34      	ldr	r2, [pc, #208]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c62e:	00db      	lsls	r3, r3, #3
 800c630:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800c632:	4b33      	ldr	r3, [pc, #204]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c636:	4a32      	ldr	r2, [pc, #200]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c638:	f043 0310 	orr.w	r3, r3, #16
 800c63c:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800c63e:	4b30      	ldr	r3, [pc, #192]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c642:	f023 020c 	bic.w	r2, r3, #12
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c64a:	492d      	ldr	r1, [pc, #180]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c64c:	4313      	orrs	r3, r2
 800c64e:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800c650:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c654:	2b01      	cmp	r3, #1
 800c656:	d105      	bne.n	800c664 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800c658:	4b2a      	ldr	r3, [pc, #168]	; (800c704 <HAL_RCC_OscConfig+0xccc>)
 800c65a:	68db      	ldr	r3, [r3, #12]
 800c65c:	4a29      	ldr	r2, [pc, #164]	; (800c704 <HAL_RCC_OscConfig+0xccc>)
 800c65e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c662:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800c664:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c668:	2b01      	cmp	r3, #1
 800c66a:	d107      	bne.n	800c67c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800c66c:	4b24      	ldr	r3, [pc, #144]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c66e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c672:	4a23      	ldr	r2, [pc, #140]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c674:	f023 0304 	bic.w	r3, r3, #4
 800c678:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c67c:	4b20      	ldr	r3, [pc, #128]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c67e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c680:	4a1f      	ldr	r2, [pc, #124]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c682:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c686:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800c688:	4b1d      	ldr	r3, [pc, #116]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	4a1c      	ldr	r2, [pc, #112]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c68e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c692:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c694:	f7fa fe54 	bl	8007340 <HAL_GetTick>
 800c698:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800c69a:	e008      	b.n	800c6ae <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c69c:	f7fa fe50 	bl	8007340 <HAL_GetTick>
 800c6a0:	4602      	mov	r2, r0
 800c6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a4:	1ad3      	subs	r3, r2, r3
 800c6a6:	2b02      	cmp	r3, #2
 800c6a8:	d901      	bls.n	800c6ae <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 800c6aa:	2303      	movs	r3, #3
 800c6ac:	e099      	b.n	800c7e2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800c6ae:	4b14      	ldr	r3, [pc, #80]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d0f0      	beq.n	800c69c <HAL_RCC_OscConfig+0xc64>
 800c6ba:	e091      	b.n	800c7e0 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800c6bc:	4b10      	ldr	r3, [pc, #64]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4a0f      	ldr	r2, [pc, #60]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c6c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c6c6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c6c8:	f7fa fe3a 	bl	8007340 <HAL_GetTick>
 800c6cc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c6ce:	e008      	b.n	800c6e2 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c6d0:	f7fa fe36 	bl	8007340 <HAL_GetTick>
 800c6d4:	4602      	mov	r2, r0
 800c6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d8:	1ad3      	subs	r3, r2, r3
 800c6da:	2b02      	cmp	r3, #2
 800c6dc:	d901      	bls.n	800c6e2 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800c6de:	2303      	movs	r3, #3
 800c6e0:	e07f      	b.n	800c7e2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800c6e2:	4b07      	ldr	r3, [pc, #28]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d1f0      	bne.n	800c6d0 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800c6ee:	4b04      	ldr	r3, [pc, #16]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c6f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6f2:	4a03      	ldr	r2, [pc, #12]	; (800c700 <HAL_RCC_OscConfig+0xcc8>)
 800c6f4:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800c6f8:	f023 0303 	bic.w	r3, r3, #3
 800c6fc:	6293      	str	r3, [r2, #40]	; 0x28
 800c6fe:	e06f      	b.n	800c7e0 <HAL_RCC_OscConfig+0xda8>
 800c700:	46020c00 	.word	0x46020c00
 800c704:	46020800 	.word	0x46020800
 800c708:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800c70c:	4b37      	ldr	r3, [pc, #220]	; (800c7ec <HAL_RCC_OscConfig+0xdb4>)
 800c70e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c710:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c712:	4b36      	ldr	r3, [pc, #216]	; (800c7ec <HAL_RCC_OscConfig+0xdb4>)
 800c714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c716:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c71c:	2b01      	cmp	r3, #1
 800c71e:	d039      	beq.n	800c794 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800c720:	69fb      	ldr	r3, [r7, #28]
 800c722:	f003 0203 	and.w	r2, r3, #3
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d132      	bne.n	800c794 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800c72e:	69fb      	ldr	r3, [r7, #28]
 800c730:	0a1b      	lsrs	r3, r3, #8
 800c732:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c73a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d129      	bne.n	800c794 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800c740:	69fb      	ldr	r3, [r7, #28]
 800c742:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d122      	bne.n	800c794 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c74e:	69bb      	ldr	r3, [r7, #24]
 800c750:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c758:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800c75a:	429a      	cmp	r2, r3
 800c75c:	d11a      	bne.n	800c794 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800c75e:	69bb      	ldr	r3, [r7, #24]
 800c760:	0a5b      	lsrs	r3, r3, #9
 800c762:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c76a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d111      	bne.n	800c794 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800c770:	69bb      	ldr	r3, [r7, #24]
 800c772:	0c1b      	lsrs	r3, r3, #16
 800c774:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c77c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c77e:	429a      	cmp	r2, r3
 800c780:	d108      	bne.n	800c794 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800c782:	69bb      	ldr	r3, [r7, #24]
 800c784:	0e1b      	lsrs	r3, r3, #24
 800c786:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c78e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c790:	429a      	cmp	r2, r3
 800c792:	d001      	beq.n	800c798 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800c794:	2301      	movs	r3, #1
 800c796:	e024      	b.n	800c7e2 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800c798:	4b14      	ldr	r3, [pc, #80]	; (800c7ec <HAL_RCC_OscConfig+0xdb4>)
 800c79a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c79c:	08db      	lsrs	r3, r3, #3
 800c79e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	d01a      	beq.n	800c7e0 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800c7aa:	4b10      	ldr	r3, [pc, #64]	; (800c7ec <HAL_RCC_OscConfig+0xdb4>)
 800c7ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7ae:	4a0f      	ldr	r2, [pc, #60]	; (800c7ec <HAL_RCC_OscConfig+0xdb4>)
 800c7b0:	f023 0310 	bic.w	r3, r3, #16
 800c7b4:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7b6:	f7fa fdc3 	bl	8007340 <HAL_GetTick>
 800c7ba:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800c7bc:	bf00      	nop
 800c7be:	f7fa fdbf 	bl	8007340 <HAL_GetTick>
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d0f9      	beq.n	800c7be <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7ce:	4a07      	ldr	r2, [pc, #28]	; (800c7ec <HAL_RCC_OscConfig+0xdb4>)
 800c7d0:	00db      	lsls	r3, r3, #3
 800c7d2:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800c7d4:	4b05      	ldr	r3, [pc, #20]	; (800c7ec <HAL_RCC_OscConfig+0xdb4>)
 800c7d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7d8:	4a04      	ldr	r2, [pc, #16]	; (800c7ec <HAL_RCC_OscConfig+0xdb4>)
 800c7da:	f043 0310 	orr.w	r3, r3, #16
 800c7de:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 800c7e0:	2300      	movs	r3, #0
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3738      	adds	r7, #56	; 0x38
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	46020c00 	.word	0x46020c00

0800c7f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b086      	sub	sp, #24
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d101      	bne.n	800c804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c800:	2301      	movs	r3, #1
 800c802:	e1d9      	b.n	800cbb8 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c804:	4b9b      	ldr	r3, [pc, #620]	; (800ca74 <HAL_RCC_ClockConfig+0x284>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f003 030f 	and.w	r3, r3, #15
 800c80c:	683a      	ldr	r2, [r7, #0]
 800c80e:	429a      	cmp	r2, r3
 800c810:	d910      	bls.n	800c834 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c812:	4b98      	ldr	r3, [pc, #608]	; (800ca74 <HAL_RCC_ClockConfig+0x284>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f023 020f 	bic.w	r2, r3, #15
 800c81a:	4996      	ldr	r1, [pc, #600]	; (800ca74 <HAL_RCC_ClockConfig+0x284>)
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	4313      	orrs	r3, r2
 800c820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c822:	4b94      	ldr	r3, [pc, #592]	; (800ca74 <HAL_RCC_ClockConfig+0x284>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f003 030f 	and.w	r3, r3, #15
 800c82a:	683a      	ldr	r2, [r7, #0]
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d001      	beq.n	800c834 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c830:	2301      	movs	r3, #1
 800c832:	e1c1      	b.n	800cbb8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f003 0310 	and.w	r3, r3, #16
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d010      	beq.n	800c862 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	695a      	ldr	r2, [r3, #20]
 800c844:	4b8c      	ldr	r3, [pc, #560]	; (800ca78 <HAL_RCC_ClockConfig+0x288>)
 800c846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c848:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d908      	bls.n	800c862 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800c850:	4b89      	ldr	r3, [pc, #548]	; (800ca78 <HAL_RCC_ClockConfig+0x288>)
 800c852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c854:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	695b      	ldr	r3, [r3, #20]
 800c85c:	4986      	ldr	r1, [pc, #536]	; (800ca78 <HAL_RCC_ClockConfig+0x288>)
 800c85e:	4313      	orrs	r3, r2
 800c860:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	f003 0308 	and.w	r3, r3, #8
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d012      	beq.n	800c894 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	691a      	ldr	r2, [r3, #16]
 800c872:	4b81      	ldr	r3, [pc, #516]	; (800ca78 <HAL_RCC_ClockConfig+0x288>)
 800c874:	6a1b      	ldr	r3, [r3, #32]
 800c876:	091b      	lsrs	r3, r3, #4
 800c878:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c87c:	429a      	cmp	r2, r3
 800c87e:	d909      	bls.n	800c894 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800c880:	4b7d      	ldr	r3, [pc, #500]	; (800ca78 <HAL_RCC_ClockConfig+0x288>)
 800c882:	6a1b      	ldr	r3, [r3, #32]
 800c884:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	691b      	ldr	r3, [r3, #16]
 800c88c:	011b      	lsls	r3, r3, #4
 800c88e:	497a      	ldr	r1, [pc, #488]	; (800ca78 <HAL_RCC_ClockConfig+0x288>)
 800c890:	4313      	orrs	r3, r2
 800c892:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	f003 0304 	and.w	r3, r3, #4
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d010      	beq.n	800c8c2 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	68da      	ldr	r2, [r3, #12]
 800c8a4:	4b74      	ldr	r3, [pc, #464]	; (800ca78 <HAL_RCC_ClockConfig+0x288>)
 800c8a6:	6a1b      	ldr	r3, [r3, #32]
 800c8a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c8ac:	429a      	cmp	r2, r3
 800c8ae:	d908      	bls.n	800c8c2 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800c8b0:	4b71      	ldr	r3, [pc, #452]	; (800ca78 <HAL_RCC_ClockConfig+0x288>)
 800c8b2:	6a1b      	ldr	r3, [r3, #32]
 800c8b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	68db      	ldr	r3, [r3, #12]
 800c8bc:	496e      	ldr	r1, [pc, #440]	; (800ca78 <HAL_RCC_ClockConfig+0x288>)
 800c8be:	4313      	orrs	r3, r2
 800c8c0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f003 0302 	and.w	r3, r3, #2
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d010      	beq.n	800c8f0 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	689a      	ldr	r2, [r3, #8]
 800c8d2:	4b69      	ldr	r3, [pc, #420]	; (800ca78 <HAL_RCC_ClockConfig+0x288>)
 800c8d4:	6a1b      	ldr	r3, [r3, #32]
 800c8d6:	f003 030f 	and.w	r3, r3, #15
 800c8da:	429a      	cmp	r2, r3
 800c8dc:	d908      	bls.n	800c8f0 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800c8de:	4b66      	ldr	r3, [pc, #408]	; (800ca78 <HAL_RCC_ClockConfig+0x288>)
 800c8e0:	6a1b      	ldr	r3, [r3, #32]
 800c8e2:	f023 020f 	bic.w	r2, r3, #15
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	689b      	ldr	r3, [r3, #8]
 800c8ea:	4963      	ldr	r1, [pc, #396]	; (800ca78 <HAL_RCC_ClockConfig+0x288>)
 800c8ec:	4313      	orrs	r3, r2
 800c8ee:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	f003 0301 	and.w	r3, r3, #1
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	f000 80d2 	beq.w	800caa2 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800c8fe:	2300      	movs	r3, #0
 800c900:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	2b03      	cmp	r3, #3
 800c908:	d143      	bne.n	800c992 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c90a:	4b5b      	ldr	r3, [pc, #364]	; (800ca78 <HAL_RCC_ClockConfig+0x288>)
 800c90c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c910:	f003 0304 	and.w	r3, r3, #4
 800c914:	2b00      	cmp	r3, #0
 800c916:	d110      	bne.n	800c93a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800c918:	4b57      	ldr	r3, [pc, #348]	; (800ca78 <HAL_RCC_ClockConfig+0x288>)
 800c91a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c91e:	4a56      	ldr	r2, [pc, #344]	; (800ca78 <HAL_RCC_ClockConfig+0x288>)
 800c920:	f043 0304 	orr.w	r3, r3, #4
 800c924:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800c928:	4b53      	ldr	r3, [pc, #332]	; (800ca78 <HAL_RCC_ClockConfig+0x288>)
 800c92a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c92e:	f003 0304 	and.w	r3, r3, #4
 800c932:	60bb      	str	r3, [r7, #8]
 800c934:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800c936:	2301      	movs	r3, #1
 800c938:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800c93a:	f7fa fd01 	bl	8007340 <HAL_GetTick>
 800c93e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800c940:	4b4e      	ldr	r3, [pc, #312]	; (800ca7c <HAL_RCC_ClockConfig+0x28c>)
 800c942:	68db      	ldr	r3, [r3, #12]
 800c944:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d00f      	beq.n	800c96c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800c94c:	e008      	b.n	800c960 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800c94e:	f7fa fcf7 	bl	8007340 <HAL_GetTick>
 800c952:	4602      	mov	r2, r0
 800c954:	693b      	ldr	r3, [r7, #16]
 800c956:	1ad3      	subs	r3, r2, r3
 800c958:	2b02      	cmp	r3, #2
 800c95a:	d901      	bls.n	800c960 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800c95c:	2303      	movs	r3, #3
 800c95e:	e12b      	b.n	800cbb8 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800c960:	4b46      	ldr	r3, [pc, #280]	; (800ca7c <HAL_RCC_ClockConfig+0x28c>)
 800c962:	68db      	ldr	r3, [r3, #12]
 800c964:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d0f0      	beq.n	800c94e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800c96c:	7dfb      	ldrb	r3, [r7, #23]
 800c96e:	2b01      	cmp	r3, #1
 800c970:	d107      	bne.n	800c982 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800c972:	4b41      	ldr	r3, [pc, #260]	; (800ca78 <HAL_RCC_ClockConfig+0x288>)
 800c974:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c978:	4a3f      	ldr	r2, [pc, #252]	; (800ca78 <HAL_RCC_ClockConfig+0x288>)
 800c97a:	f023 0304 	bic.w	r3, r3, #4
 800c97e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800c982:	4b3d      	ldr	r3, [pc, #244]	; (800ca78 <HAL_RCC_ClockConfig+0x288>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d121      	bne.n	800c9d2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800c98e:	2301      	movs	r3, #1
 800c990:	e112      	b.n	800cbb8 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	685b      	ldr	r3, [r3, #4]
 800c996:	2b02      	cmp	r3, #2
 800c998:	d107      	bne.n	800c9aa <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c99a:	4b37      	ldr	r3, [pc, #220]	; (800ca78 <HAL_RCC_ClockConfig+0x288>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d115      	bne.n	800c9d2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	e106      	b.n	800cbb8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	685b      	ldr	r3, [r3, #4]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d107      	bne.n	800c9c2 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800c9b2:	4b31      	ldr	r3, [pc, #196]	; (800ca78 <HAL_RCC_ClockConfig+0x288>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	f003 0304 	and.w	r3, r3, #4
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d109      	bne.n	800c9d2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800c9be:	2301      	movs	r3, #1
 800c9c0:	e0fa      	b.n	800cbb8 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c9c2:	4b2d      	ldr	r3, [pc, #180]	; (800ca78 <HAL_RCC_ClockConfig+0x288>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d101      	bne.n	800c9d2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	e0f2      	b.n	800cbb8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800c9d2:	4b29      	ldr	r3, [pc, #164]	; (800ca78 <HAL_RCC_ClockConfig+0x288>)
 800c9d4:	69db      	ldr	r3, [r3, #28]
 800c9d6:	f023 0203 	bic.w	r2, r3, #3
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	685b      	ldr	r3, [r3, #4]
 800c9de:	4926      	ldr	r1, [pc, #152]	; (800ca78 <HAL_RCC_ClockConfig+0x288>)
 800c9e0:	4313      	orrs	r3, r2
 800c9e2:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800c9e4:	f7fa fcac 	bl	8007340 <HAL_GetTick>
 800c9e8:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	685b      	ldr	r3, [r3, #4]
 800c9ee:	2b03      	cmp	r3, #3
 800c9f0:	d112      	bne.n	800ca18 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c9f2:	e00a      	b.n	800ca0a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c9f4:	f7fa fca4 	bl	8007340 <HAL_GetTick>
 800c9f8:	4602      	mov	r2, r0
 800c9fa:	693b      	ldr	r3, [r7, #16]
 800c9fc:	1ad3      	subs	r3, r2, r3
 800c9fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d901      	bls.n	800ca0a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800ca06:	2303      	movs	r3, #3
 800ca08:	e0d6      	b.n	800cbb8 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ca0a:	4b1b      	ldr	r3, [pc, #108]	; (800ca78 <HAL_RCC_ClockConfig+0x288>)
 800ca0c:	69db      	ldr	r3, [r3, #28]
 800ca0e:	f003 030c 	and.w	r3, r3, #12
 800ca12:	2b0c      	cmp	r3, #12
 800ca14:	d1ee      	bne.n	800c9f4 <HAL_RCC_ClockConfig+0x204>
 800ca16:	e044      	b.n	800caa2 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	685b      	ldr	r3, [r3, #4]
 800ca1c:	2b02      	cmp	r3, #2
 800ca1e:	d112      	bne.n	800ca46 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800ca20:	e00a      	b.n	800ca38 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ca22:	f7fa fc8d 	bl	8007340 <HAL_GetTick>
 800ca26:	4602      	mov	r2, r0
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	1ad3      	subs	r3, r2, r3
 800ca2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca30:	4293      	cmp	r3, r2
 800ca32:	d901      	bls.n	800ca38 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800ca34:	2303      	movs	r3, #3
 800ca36:	e0bf      	b.n	800cbb8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800ca38:	4b0f      	ldr	r3, [pc, #60]	; (800ca78 <HAL_RCC_ClockConfig+0x288>)
 800ca3a:	69db      	ldr	r3, [r3, #28]
 800ca3c:	f003 030c 	and.w	r3, r3, #12
 800ca40:	2b08      	cmp	r3, #8
 800ca42:	d1ee      	bne.n	800ca22 <HAL_RCC_ClockConfig+0x232>
 800ca44:	e02d      	b.n	800caa2 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d123      	bne.n	800ca96 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800ca4e:	e00a      	b.n	800ca66 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ca50:	f7fa fc76 	bl	8007340 <HAL_GetTick>
 800ca54:	4602      	mov	r2, r0
 800ca56:	693b      	ldr	r3, [r7, #16]
 800ca58:	1ad3      	subs	r3, r2, r3
 800ca5a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d901      	bls.n	800ca66 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800ca62:	2303      	movs	r3, #3
 800ca64:	e0a8      	b.n	800cbb8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800ca66:	4b04      	ldr	r3, [pc, #16]	; (800ca78 <HAL_RCC_ClockConfig+0x288>)
 800ca68:	69db      	ldr	r3, [r3, #28]
 800ca6a:	f003 030c 	and.w	r3, r3, #12
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d1ee      	bne.n	800ca50 <HAL_RCC_ClockConfig+0x260>
 800ca72:	e016      	b.n	800caa2 <HAL_RCC_ClockConfig+0x2b2>
 800ca74:	40022000 	.word	0x40022000
 800ca78:	46020c00 	.word	0x46020c00
 800ca7c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ca80:	f7fa fc5e 	bl	8007340 <HAL_GetTick>
 800ca84:	4602      	mov	r2, r0
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	1ad3      	subs	r3, r2, r3
 800ca8a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	d901      	bls.n	800ca96 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800ca92:	2303      	movs	r3, #3
 800ca94:	e090      	b.n	800cbb8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800ca96:	4b4a      	ldr	r3, [pc, #296]	; (800cbc0 <HAL_RCC_ClockConfig+0x3d0>)
 800ca98:	69db      	ldr	r3, [r3, #28]
 800ca9a:	f003 030c 	and.w	r3, r3, #12
 800ca9e:	2b04      	cmp	r3, #4
 800caa0:	d1ee      	bne.n	800ca80 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f003 0302 	and.w	r3, r3, #2
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d010      	beq.n	800cad0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	689a      	ldr	r2, [r3, #8]
 800cab2:	4b43      	ldr	r3, [pc, #268]	; (800cbc0 <HAL_RCC_ClockConfig+0x3d0>)
 800cab4:	6a1b      	ldr	r3, [r3, #32]
 800cab6:	f003 030f 	and.w	r3, r3, #15
 800caba:	429a      	cmp	r2, r3
 800cabc:	d208      	bcs.n	800cad0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800cabe:	4b40      	ldr	r3, [pc, #256]	; (800cbc0 <HAL_RCC_ClockConfig+0x3d0>)
 800cac0:	6a1b      	ldr	r3, [r3, #32]
 800cac2:	f023 020f 	bic.w	r2, r3, #15
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	689b      	ldr	r3, [r3, #8]
 800caca:	493d      	ldr	r1, [pc, #244]	; (800cbc0 <HAL_RCC_ClockConfig+0x3d0>)
 800cacc:	4313      	orrs	r3, r2
 800cace:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cad0:	4b3c      	ldr	r3, [pc, #240]	; (800cbc4 <HAL_RCC_ClockConfig+0x3d4>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	f003 030f 	and.w	r3, r3, #15
 800cad8:	683a      	ldr	r2, [r7, #0]
 800cada:	429a      	cmp	r2, r3
 800cadc:	d210      	bcs.n	800cb00 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cade:	4b39      	ldr	r3, [pc, #228]	; (800cbc4 <HAL_RCC_ClockConfig+0x3d4>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f023 020f 	bic.w	r2, r3, #15
 800cae6:	4937      	ldr	r1, [pc, #220]	; (800cbc4 <HAL_RCC_ClockConfig+0x3d4>)
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	4313      	orrs	r3, r2
 800caec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800caee:	4b35      	ldr	r3, [pc, #212]	; (800cbc4 <HAL_RCC_ClockConfig+0x3d4>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	f003 030f 	and.w	r3, r3, #15
 800caf6:	683a      	ldr	r2, [r7, #0]
 800caf8:	429a      	cmp	r2, r3
 800cafa:	d001      	beq.n	800cb00 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800cafc:	2301      	movs	r3, #1
 800cafe:	e05b      	b.n	800cbb8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	f003 0304 	and.w	r3, r3, #4
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d010      	beq.n	800cb2e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	68da      	ldr	r2, [r3, #12]
 800cb10:	4b2b      	ldr	r3, [pc, #172]	; (800cbc0 <HAL_RCC_ClockConfig+0x3d0>)
 800cb12:	6a1b      	ldr	r3, [r3, #32]
 800cb14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	d208      	bcs.n	800cb2e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800cb1c:	4b28      	ldr	r3, [pc, #160]	; (800cbc0 <HAL_RCC_ClockConfig+0x3d0>)
 800cb1e:	6a1b      	ldr	r3, [r3, #32]
 800cb20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	68db      	ldr	r3, [r3, #12]
 800cb28:	4925      	ldr	r1, [pc, #148]	; (800cbc0 <HAL_RCC_ClockConfig+0x3d0>)
 800cb2a:	4313      	orrs	r3, r2
 800cb2c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f003 0308 	and.w	r3, r3, #8
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d012      	beq.n	800cb60 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	691a      	ldr	r2, [r3, #16]
 800cb3e:	4b20      	ldr	r3, [pc, #128]	; (800cbc0 <HAL_RCC_ClockConfig+0x3d0>)
 800cb40:	6a1b      	ldr	r3, [r3, #32]
 800cb42:	091b      	lsrs	r3, r3, #4
 800cb44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d209      	bcs.n	800cb60 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800cb4c:	4b1c      	ldr	r3, [pc, #112]	; (800cbc0 <HAL_RCC_ClockConfig+0x3d0>)
 800cb4e:	6a1b      	ldr	r3, [r3, #32]
 800cb50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	691b      	ldr	r3, [r3, #16]
 800cb58:	011b      	lsls	r3, r3, #4
 800cb5a:	4919      	ldr	r1, [pc, #100]	; (800cbc0 <HAL_RCC_ClockConfig+0x3d0>)
 800cb5c:	4313      	orrs	r3, r2
 800cb5e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f003 0310 	and.w	r3, r3, #16
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d010      	beq.n	800cb8e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	695a      	ldr	r2, [r3, #20]
 800cb70:	4b13      	ldr	r3, [pc, #76]	; (800cbc0 <HAL_RCC_ClockConfig+0x3d0>)
 800cb72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d208      	bcs.n	800cb8e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800cb7c:	4b10      	ldr	r3, [pc, #64]	; (800cbc0 <HAL_RCC_ClockConfig+0x3d0>)
 800cb7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	695b      	ldr	r3, [r3, #20]
 800cb88:	490d      	ldr	r1, [pc, #52]	; (800cbc0 <HAL_RCC_ClockConfig+0x3d0>)
 800cb8a:	4313      	orrs	r3, r2
 800cb8c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800cb8e:	f000 f821 	bl	800cbd4 <HAL_RCC_GetSysClockFreq>
 800cb92:	4602      	mov	r2, r0
 800cb94:	4b0a      	ldr	r3, [pc, #40]	; (800cbc0 <HAL_RCC_ClockConfig+0x3d0>)
 800cb96:	6a1b      	ldr	r3, [r3, #32]
 800cb98:	f003 030f 	and.w	r3, r3, #15
 800cb9c:	490a      	ldr	r1, [pc, #40]	; (800cbc8 <HAL_RCC_ClockConfig+0x3d8>)
 800cb9e:	5ccb      	ldrb	r3, [r1, r3]
 800cba0:	fa22 f303 	lsr.w	r3, r2, r3
 800cba4:	4a09      	ldr	r2, [pc, #36]	; (800cbcc <HAL_RCC_ClockConfig+0x3dc>)
 800cba6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800cba8:	4b09      	ldr	r3, [pc, #36]	; (800cbd0 <HAL_RCC_ClockConfig+0x3e0>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	4618      	mov	r0, r3
 800cbae:	f7f4 fe51 	bl	8001854 <HAL_InitTick>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	73fb      	strb	r3, [r7, #15]

  return status;
 800cbb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3718      	adds	r7, #24
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}
 800cbc0:	46020c00 	.word	0x46020c00
 800cbc4:	40022000 	.word	0x40022000
 800cbc8:	0802a79c 	.word	0x0802a79c
 800cbcc:	20000048 	.word	0x20000048
 800cbd0:	2000004c 	.word	0x2000004c

0800cbd4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b08b      	sub	sp, #44	; 0x2c
 800cbd8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cbe2:	4b7b      	ldr	r3, [pc, #492]	; (800cdd0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cbe4:	69db      	ldr	r3, [r3, #28]
 800cbe6:	f003 030c 	and.w	r3, r3, #12
 800cbea:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cbec:	4b78      	ldr	r3, [pc, #480]	; (800cdd0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cbee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbf0:	f003 0303 	and.w	r3, r3, #3
 800cbf4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800cbf6:	69bb      	ldr	r3, [r7, #24]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d005      	beq.n	800cc08 <HAL_RCC_GetSysClockFreq+0x34>
 800cbfc:	69bb      	ldr	r3, [r7, #24]
 800cbfe:	2b0c      	cmp	r3, #12
 800cc00:	d121      	bne.n	800cc46 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d11e      	bne.n	800cc46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800cc08:	4b71      	ldr	r3, [pc, #452]	; (800cdd0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cc0a:	689b      	ldr	r3, [r3, #8]
 800cc0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d107      	bne.n	800cc24 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800cc14:	4b6e      	ldr	r3, [pc, #440]	; (800cdd0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cc16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cc1a:	0b1b      	lsrs	r3, r3, #12
 800cc1c:	f003 030f 	and.w	r3, r3, #15
 800cc20:	627b      	str	r3, [r7, #36]	; 0x24
 800cc22:	e005      	b.n	800cc30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800cc24:	4b6a      	ldr	r3, [pc, #424]	; (800cdd0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cc26:	689b      	ldr	r3, [r3, #8]
 800cc28:	0f1b      	lsrs	r3, r3, #28
 800cc2a:	f003 030f 	and.w	r3, r3, #15
 800cc2e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800cc30:	4a68      	ldr	r2, [pc, #416]	; (800cdd4 <HAL_RCC_GetSysClockFreq+0x200>)
 800cc32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc38:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800cc3a:	69bb      	ldr	r3, [r7, #24]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d110      	bne.n	800cc62 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800cc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc42:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800cc44:	e00d      	b.n	800cc62 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800cc46:	4b62      	ldr	r3, [pc, #392]	; (800cdd0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cc48:	69db      	ldr	r3, [r3, #28]
 800cc4a:	f003 030c 	and.w	r3, r3, #12
 800cc4e:	2b04      	cmp	r3, #4
 800cc50:	d102      	bne.n	800cc58 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800cc52:	4b61      	ldr	r3, [pc, #388]	; (800cdd8 <HAL_RCC_GetSysClockFreq+0x204>)
 800cc54:	623b      	str	r3, [r7, #32]
 800cc56:	e004      	b.n	800cc62 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800cc58:	69bb      	ldr	r3, [r7, #24]
 800cc5a:	2b08      	cmp	r3, #8
 800cc5c:	d101      	bne.n	800cc62 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800cc5e:	4b5e      	ldr	r3, [pc, #376]	; (800cdd8 <HAL_RCC_GetSysClockFreq+0x204>)
 800cc60:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cc62:	69bb      	ldr	r3, [r7, #24]
 800cc64:	2b0c      	cmp	r3, #12
 800cc66:	f040 80ac 	bne.w	800cdc2 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800cc6a:	4b59      	ldr	r3, [pc, #356]	; (800cdd0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cc6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc6e:	f003 0303 	and.w	r3, r3, #3
 800cc72:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800cc74:	4b56      	ldr	r3, [pc, #344]	; (800cdd0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cc76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc78:	0a1b      	lsrs	r3, r3, #8
 800cc7a:	f003 030f 	and.w	r3, r3, #15
 800cc7e:	3301      	adds	r3, #1
 800cc80:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800cc82:	4b53      	ldr	r3, [pc, #332]	; (800cdd0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cc84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc86:	091b      	lsrs	r3, r3, #4
 800cc88:	f003 0301 	and.w	r3, r3, #1
 800cc8c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800cc8e:	4b50      	ldr	r3, [pc, #320]	; (800cdd0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cc90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc92:	08db      	lsrs	r3, r3, #3
 800cc94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cc98:	68ba      	ldr	r2, [r7, #8]
 800cc9a:	fb02 f303 	mul.w	r3, r2, r3
 800cc9e:	ee07 3a90 	vmov	s15, r3
 800cca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cca6:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	f000 8086 	beq.w	800cdbe <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	2b02      	cmp	r3, #2
 800ccb6:	d003      	beq.n	800ccc0 <HAL_RCC_GetSysClockFreq+0xec>
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	2b03      	cmp	r3, #3
 800ccbc:	d022      	beq.n	800cd04 <HAL_RCC_GetSysClockFreq+0x130>
 800ccbe:	e043      	b.n	800cd48 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	ee07 3a90 	vmov	s15, r3
 800ccc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccca:	eddf 6a44 	vldr	s13, [pc, #272]	; 800cddc <HAL_RCC_GetSysClockFreq+0x208>
 800ccce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccd2:	4b3f      	ldr	r3, [pc, #252]	; (800cdd0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800ccd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccda:	ee07 3a90 	vmov	s15, r3
 800ccde:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800cce2:	ed97 6a01 	vldr	s12, [r7, #4]
 800cce6:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800cde0 <HAL_RCC_GetSysClockFreq+0x20c>
 800ccea:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ccee:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ccf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ccfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccfe:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800cd02:	e046      	b.n	800cd92 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	ee07 3a90 	vmov	s15, r3
 800cd0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd0e:	eddf 6a33 	vldr	s13, [pc, #204]	; 800cddc <HAL_RCC_GetSysClockFreq+0x208>
 800cd12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd16:	4b2e      	ldr	r3, [pc, #184]	; (800cdd0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cd18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd1e:	ee07 3a90 	vmov	s15, r3
 800cd22:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800cd26:	ed97 6a01 	vldr	s12, [r7, #4]
 800cd2a:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800cde0 <HAL_RCC_GetSysClockFreq+0x20c>
 800cd2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cd32:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800cd36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cd3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd42:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800cd46:	e024      	b.n	800cd92 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd4a:	ee07 3a90 	vmov	s15, r3
 800cd4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	ee07 3a90 	vmov	s15, r3
 800cd58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd60:	4b1b      	ldr	r3, [pc, #108]	; (800cdd0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cd62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd68:	ee07 3a90 	vmov	s15, r3
 800cd6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800cd70:	ed97 6a01 	vldr	s12, [r7, #4]
 800cd74:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800cde0 <HAL_RCC_GetSysClockFreq+0x20c>
 800cd78:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cd7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800cd80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd84:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800cd88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd8c:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800cd90:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800cd92:	4b0f      	ldr	r3, [pc, #60]	; (800cdd0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800cd94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd96:	0e1b      	lsrs	r3, r3, #24
 800cd98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	ee07 3a90 	vmov	s15, r3
 800cda6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cdaa:	edd7 6a07 	vldr	s13, [r7, #28]
 800cdae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cdb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdb6:	ee17 3a90 	vmov	r3, s15
 800cdba:	623b      	str	r3, [r7, #32]
 800cdbc:	e001      	b.n	800cdc2 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800cdc2:	6a3b      	ldr	r3, [r7, #32]
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	372c      	adds	r7, #44	; 0x2c
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdce:	4770      	bx	lr
 800cdd0:	46020c00 	.word	0x46020c00
 800cdd4:	0802a7b4 	.word	0x0802a7b4
 800cdd8:	00f42400 	.word	0x00f42400
 800cddc:	4b742400 	.word	0x4b742400
 800cde0:	46000000 	.word	0x46000000

0800cde4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800cde8:	f7ff fef4 	bl	800cbd4 <HAL_RCC_GetSysClockFreq>
 800cdec:	4602      	mov	r2, r0
 800cdee:	4b07      	ldr	r3, [pc, #28]	; (800ce0c <HAL_RCC_GetHCLKFreq+0x28>)
 800cdf0:	6a1b      	ldr	r3, [r3, #32]
 800cdf2:	f003 030f 	and.w	r3, r3, #15
 800cdf6:	4906      	ldr	r1, [pc, #24]	; (800ce10 <HAL_RCC_GetHCLKFreq+0x2c>)
 800cdf8:	5ccb      	ldrb	r3, [r1, r3]
 800cdfa:	fa22 f303 	lsr.w	r3, r2, r3
 800cdfe:	4a05      	ldr	r2, [pc, #20]	; (800ce14 <HAL_RCC_GetHCLKFreq+0x30>)
 800ce00:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800ce02:	4b04      	ldr	r3, [pc, #16]	; (800ce14 <HAL_RCC_GetHCLKFreq+0x30>)
 800ce04:	681b      	ldr	r3, [r3, #0]
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	bd80      	pop	{r7, pc}
 800ce0a:	bf00      	nop
 800ce0c:	46020c00 	.word	0x46020c00
 800ce10:	0802a79c 	.word	0x0802a79c
 800ce14:	20000048 	.word	0x20000048

0800ce18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800ce1c:	f7ff ffe2 	bl	800cde4 <HAL_RCC_GetHCLKFreq>
 800ce20:	4602      	mov	r2, r0
 800ce22:	4b05      	ldr	r3, [pc, #20]	; (800ce38 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ce24:	6a1b      	ldr	r3, [r3, #32]
 800ce26:	091b      	lsrs	r3, r3, #4
 800ce28:	f003 0307 	and.w	r3, r3, #7
 800ce2c:	4903      	ldr	r1, [pc, #12]	; (800ce3c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ce2e:	5ccb      	ldrb	r3, [r1, r3]
 800ce30:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	bd80      	pop	{r7, pc}
 800ce38:	46020c00 	.word	0x46020c00
 800ce3c:	0802a7ac 	.word	0x0802a7ac

0800ce40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800ce44:	f7ff ffce 	bl	800cde4 <HAL_RCC_GetHCLKFreq>
 800ce48:	4602      	mov	r2, r0
 800ce4a:	4b05      	ldr	r3, [pc, #20]	; (800ce60 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ce4c:	6a1b      	ldr	r3, [r3, #32]
 800ce4e:	0a1b      	lsrs	r3, r3, #8
 800ce50:	f003 0307 	and.w	r3, r3, #7
 800ce54:	4903      	ldr	r1, [pc, #12]	; (800ce64 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ce56:	5ccb      	ldrb	r3, [r1, r3]
 800ce58:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	bd80      	pop	{r7, pc}
 800ce60:	46020c00 	.word	0x46020c00
 800ce64:	0802a7ac 	.word	0x0802a7ac

0800ce68 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800ce6c:	f7ff ffba 	bl	800cde4 <HAL_RCC_GetHCLKFreq>
 800ce70:	4602      	mov	r2, r0
 800ce72:	4b05      	ldr	r3, [pc, #20]	; (800ce88 <HAL_RCC_GetPCLK3Freq+0x20>)
 800ce74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce76:	091b      	lsrs	r3, r3, #4
 800ce78:	f003 0307 	and.w	r3, r3, #7
 800ce7c:	4903      	ldr	r1, [pc, #12]	; (800ce8c <HAL_RCC_GetPCLK3Freq+0x24>)
 800ce7e:	5ccb      	ldrb	r3, [r1, r3]
 800ce80:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	bd80      	pop	{r7, pc}
 800ce88:	46020c00 	.word	0x46020c00
 800ce8c:	0802a7ac 	.word	0x0802a7ac

0800ce90 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b083      	sub	sp, #12
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	221f      	movs	r2, #31
 800ce9e:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 800cea0:	4b15      	ldr	r3, [pc, #84]	; (800cef8 <HAL_RCC_GetClockConfig+0x68>)
 800cea2:	69db      	ldr	r3, [r3, #28]
 800cea4:	f003 0203 	and.w	r2, r3, #3
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 800ceac:	4b12      	ldr	r3, [pc, #72]	; (800cef8 <HAL_RCC_GetClockConfig+0x68>)
 800ceae:	6a1b      	ldr	r3, [r3, #32]
 800ceb0:	f003 020f 	and.w	r2, r3, #15
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 800ceb8:	4b0f      	ldr	r3, [pc, #60]	; (800cef8 <HAL_RCC_GetClockConfig+0x68>)
 800ceba:	6a1b      	ldr	r3, [r3, #32]
 800cebc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 800cec4:	4b0c      	ldr	r3, [pc, #48]	; (800cef8 <HAL_RCC_GetClockConfig+0x68>)
 800cec6:	6a1b      	ldr	r3, [r3, #32]
 800cec8:	091b      	lsrs	r3, r3, #4
 800ceca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 800ced2:	4b09      	ldr	r3, [pc, #36]	; (800cef8 <HAL_RCC_GetClockConfig+0x68>)
 800ced4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ced6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cede:	4b07      	ldr	r3, [pc, #28]	; (800cefc <HAL_RCC_GetClockConfig+0x6c>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f003 020f 	and.w	r2, r3, #15
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	601a      	str	r2, [r3, #0]
}
 800ceea:	bf00      	nop
 800ceec:	370c      	adds	r7, #12
 800ceee:	46bd      	mov	sp, r7
 800cef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef4:	4770      	bx	lr
 800cef6:	bf00      	nop
 800cef8:	46020c00 	.word	0x46020c00
 800cefc:	40022000 	.word	0x40022000

0800cf00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b086      	sub	sp, #24
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800cf08:	4b3e      	ldr	r3, [pc, #248]	; (800d004 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800cf0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cf0e:	f003 0304 	and.w	r3, r3, #4
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d003      	beq.n	800cf1e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800cf16:	f7fe fd11 	bl	800b93c <HAL_PWREx_GetVoltageRange>
 800cf1a:	6178      	str	r0, [r7, #20]
 800cf1c:	e019      	b.n	800cf52 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800cf1e:	4b39      	ldr	r3, [pc, #228]	; (800d004 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800cf20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cf24:	4a37      	ldr	r2, [pc, #220]	; (800d004 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800cf26:	f043 0304 	orr.w	r3, r3, #4
 800cf2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800cf2e:	4b35      	ldr	r3, [pc, #212]	; (800d004 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800cf30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cf34:	f003 0304 	and.w	r3, r3, #4
 800cf38:	60fb      	str	r3, [r7, #12]
 800cf3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800cf3c:	f7fe fcfe 	bl	800b93c <HAL_PWREx_GetVoltageRange>
 800cf40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800cf42:	4b30      	ldr	r3, [pc, #192]	; (800d004 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800cf44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cf48:	4a2e      	ldr	r2, [pc, #184]	; (800d004 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800cf4a:	f023 0304 	bic.w	r3, r3, #4
 800cf4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cf58:	d003      	beq.n	800cf62 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf60:	d109      	bne.n	800cf76 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cf68:	d202      	bcs.n	800cf70 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800cf6e:	e033      	b.n	800cfd8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800cf70:	2300      	movs	r3, #0
 800cf72:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800cf74:	e030      	b.n	800cfd8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cf7c:	d208      	bcs.n	800cf90 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf84:	d102      	bne.n	800cf8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800cf86:	2303      	movs	r3, #3
 800cf88:	613b      	str	r3, [r7, #16]
 800cf8a:	e025      	b.n	800cfd8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	e035      	b.n	800cffc <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf96:	d90f      	bls.n	800cfb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d109      	bne.n	800cfb2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cfa4:	d902      	bls.n	800cfac <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	613b      	str	r3, [r7, #16]
 800cfaa:	e015      	b.n	800cfd8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800cfac:	2301      	movs	r3, #1
 800cfae:	613b      	str	r3, [r7, #16]
 800cfb0:	e012      	b.n	800cfd8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	613b      	str	r3, [r7, #16]
 800cfb6:	e00f      	b.n	800cfd8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cfbe:	d109      	bne.n	800cfd4 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfc6:	d102      	bne.n	800cfce <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800cfc8:	2301      	movs	r3, #1
 800cfca:	613b      	str	r3, [r7, #16]
 800cfcc:	e004      	b.n	800cfd8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800cfce:	2302      	movs	r3, #2
 800cfd0:	613b      	str	r3, [r7, #16]
 800cfd2:	e001      	b.n	800cfd8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800cfd8:	4b0b      	ldr	r3, [pc, #44]	; (800d008 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f023 020f 	bic.w	r2, r3, #15
 800cfe0:	4909      	ldr	r1, [pc, #36]	; (800d008 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	4313      	orrs	r3, r2
 800cfe6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800cfe8:	4b07      	ldr	r3, [pc, #28]	; (800d008 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f003 030f 	and.w	r3, r3, #15
 800cff0:	693a      	ldr	r2, [r7, #16]
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d001      	beq.n	800cffa <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800cff6:	2301      	movs	r3, #1
 800cff8:	e000      	b.n	800cffc <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800cffa:	2300      	movs	r3, #0
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3718      	adds	r7, #24
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}
 800d004:	46020c00 	.word	0x46020c00
 800d008:	40022000 	.word	0x40022000

0800d00c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800d00c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d010:	b0c8      	sub	sp, #288	; 0x120
 800d012:	af00      	add	r7, sp, #0
 800d014:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d018:	2300      	movs	r3, #0
 800d01a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d01e:	2300      	movs	r3, #0
 800d020:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d024:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d02c:	f002 0401 	and.w	r4, r2, #1
 800d030:	2500      	movs	r5, #0
 800d032:	ea54 0305 	orrs.w	r3, r4, r5
 800d036:	d00b      	beq.n	800d050 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800d038:	4bd5      	ldr	r3, [pc, #852]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d03a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d03e:	f023 0103 	bic.w	r1, r3, #3
 800d042:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d048:	4ad1      	ldr	r2, [pc, #836]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d04a:	430b      	orrs	r3, r1
 800d04c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d050:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d058:	f002 0802 	and.w	r8, r2, #2
 800d05c:	f04f 0900 	mov.w	r9, #0
 800d060:	ea58 0309 	orrs.w	r3, r8, r9
 800d064:	d00b      	beq.n	800d07e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800d066:	4bca      	ldr	r3, [pc, #808]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d06c:	f023 010c 	bic.w	r1, r3, #12
 800d070:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d076:	4ac6      	ldr	r2, [pc, #792]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d078:	430b      	orrs	r3, r1
 800d07a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d07e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d086:	f002 0a04 	and.w	sl, r2, #4
 800d08a:	f04f 0b00 	mov.w	fp, #0
 800d08e:	ea5a 030b 	orrs.w	r3, sl, fp
 800d092:	d00b      	beq.n	800d0ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800d094:	4bbe      	ldr	r3, [pc, #760]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d09a:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800d09e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d0a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0a4:	4aba      	ldr	r2, [pc, #744]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d0a6:	430b      	orrs	r3, r1
 800d0a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d0ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b4:	f002 0308 	and.w	r3, r2, #8
 800d0b8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d0bc:	2300      	movs	r3, #0
 800d0be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d0c2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800d0c6:	460b      	mov	r3, r1
 800d0c8:	4313      	orrs	r3, r2
 800d0ca:	d00b      	beq.n	800d0e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800d0cc:	4bb0      	ldr	r3, [pc, #704]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d0ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d0d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d0d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d0da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d0dc:	4aac      	ldr	r2, [pc, #688]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d0de:	430b      	orrs	r3, r1
 800d0e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d0e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ec:	f002 0310 	and.w	r3, r2, #16
 800d0f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d0fa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800d0fe:	460b      	mov	r3, r1
 800d100:	4313      	orrs	r3, r2
 800d102:	d00b      	beq.n	800d11c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800d104:	4ba2      	ldr	r3, [pc, #648]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d10a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d10e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d114:	4a9e      	ldr	r2, [pc, #632]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d116:	430b      	orrs	r3, r1
 800d118:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800d11c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d124:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800d128:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d12c:	2300      	movs	r3, #0
 800d12e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d132:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800d136:	460b      	mov	r3, r1
 800d138:	4313      	orrs	r3, r2
 800d13a:	d00b      	beq.n	800d154 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800d13c:	4b94      	ldr	r3, [pc, #592]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d13e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d142:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800d146:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d14a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d14c:	4a90      	ldr	r2, [pc, #576]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d14e:	430b      	orrs	r3, r1
 800d150:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d154:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d15c:	f002 0320 	and.w	r3, r2, #32
 800d160:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d164:	2300      	movs	r3, #0
 800d166:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d16a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800d16e:	460b      	mov	r3, r1
 800d170:	4313      	orrs	r3, r2
 800d172:	d00b      	beq.n	800d18c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800d174:	4b86      	ldr	r3, [pc, #536]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d176:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d17a:	f023 0107 	bic.w	r1, r3, #7
 800d17e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d184:	4a82      	ldr	r2, [pc, #520]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d186:	430b      	orrs	r3, r1
 800d188:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d18c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d194:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800d198:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d19c:	2300      	movs	r3, #0
 800d19e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d1a2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800d1a6:	460b      	mov	r3, r1
 800d1a8:	4313      	orrs	r3, r2
 800d1aa:	d00b      	beq.n	800d1c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800d1ac:	4b78      	ldr	r3, [pc, #480]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d1ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d1b2:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800d1b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d1ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1bc:	4a74      	ldr	r2, [pc, #464]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d1be:	430b      	orrs	r3, r1
 800d1c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d1c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1cc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800d1d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d1da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d1de:	460b      	mov	r3, r1
 800d1e0:	4313      	orrs	r3, r2
 800d1e2:	d00b      	beq.n	800d1fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800d1e4:	4b6a      	ldr	r3, [pc, #424]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d1e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d1ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d1ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d1f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1f4:	4a66      	ldr	r2, [pc, #408]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d1f6:	430b      	orrs	r3, r1
 800d1f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d1fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d204:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800d208:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d20c:	2300      	movs	r3, #0
 800d20e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d212:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800d216:	460b      	mov	r3, r1
 800d218:	4313      	orrs	r3, r2
 800d21a:	d00b      	beq.n	800d234 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800d21c:	4b5c      	ldr	r3, [pc, #368]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d21e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d222:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d226:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d22a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d22c:	4a58      	ldr	r2, [pc, #352]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d22e:	430b      	orrs	r3, r1
 800d230:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d234:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d23c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800d240:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d244:	2300      	movs	r3, #0
 800d246:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d24a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800d24e:	460b      	mov	r3, r1
 800d250:	4313      	orrs	r3, r2
 800d252:	d00b      	beq.n	800d26c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800d254:	4b4e      	ldr	r3, [pc, #312]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d25a:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800d25e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d262:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d264:	4a4a      	ldr	r2, [pc, #296]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d266:	430b      	orrs	r3, r1
 800d268:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800d26c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d274:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800d278:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d27c:	2300      	movs	r3, #0
 800d27e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d282:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d286:	460b      	mov	r3, r1
 800d288:	4313      	orrs	r3, r2
 800d28a:	d00b      	beq.n	800d2a4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800d28c:	4b40      	ldr	r3, [pc, #256]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d28e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d292:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 800d296:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d29a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d29c:	4a3c      	ldr	r2, [pc, #240]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d29e:	430b      	orrs	r3, r1
 800d2a0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800d2a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ac:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800d2b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d2ba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800d2be:	460b      	mov	r3, r1
 800d2c0:	4313      	orrs	r3, r2
 800d2c2:	d00c      	beq.n	800d2de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800d2c4:	4b32      	ldr	r3, [pc, #200]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d2c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d2ca:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800d2ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d2d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d2d6:	4a2e      	ldr	r2, [pc, #184]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d2d8:	430b      	orrs	r3, r1
 800d2da:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d2de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2e6:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800d2ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d2f4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800d2f8:	460b      	mov	r3, r1
 800d2fa:	4313      	orrs	r3, r2
 800d2fc:	d00c      	beq.n	800d318 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800d2fe:	4b24      	ldr	r3, [pc, #144]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d300:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d304:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800d308:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d30c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d310:	4a1f      	ldr	r2, [pc, #124]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d312:	430b      	orrs	r3, r1
 800d314:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d318:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d320:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800d324:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d328:	2300      	movs	r3, #0
 800d32a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d32e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d332:	460b      	mov	r3, r1
 800d334:	4313      	orrs	r3, r2
 800d336:	d00c      	beq.n	800d352 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800d338:	4b15      	ldr	r3, [pc, #84]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d33a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d33e:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800d342:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d34a:	4a11      	ldr	r2, [pc, #68]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d34c:	430b      	orrs	r3, r1
 800d34e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800d352:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d35a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800d35e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d362:	2300      	movs	r3, #0
 800d364:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d368:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800d36c:	460b      	mov	r3, r1
 800d36e:	4313      	orrs	r3, r2
 800d370:	d010      	beq.n	800d394 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800d372:	4b07      	ldr	r3, [pc, #28]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d374:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d378:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d37c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d384:	4a02      	ldr	r2, [pc, #8]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d386:	430b      	orrs	r3, r1
 800d388:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800d38c:	e002      	b.n	800d394 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800d38e:	bf00      	nop
 800d390:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d39c:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800d3a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d3aa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800d3ae:	460b      	mov	r3, r1
 800d3b0:	4313      	orrs	r3, r2
 800d3b2:	d04c      	beq.n	800d44e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800d3b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d3b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d3bc:	2b80      	cmp	r3, #128	; 0x80
 800d3be:	d02d      	beq.n	800d41c <HAL_RCCEx_PeriphCLKConfig+0x410>
 800d3c0:	2b80      	cmp	r3, #128	; 0x80
 800d3c2:	d827      	bhi.n	800d414 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800d3c4:	2b60      	cmp	r3, #96	; 0x60
 800d3c6:	d02b      	beq.n	800d420 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800d3c8:	2b60      	cmp	r3, #96	; 0x60
 800d3ca:	d823      	bhi.n	800d414 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800d3cc:	2b40      	cmp	r3, #64	; 0x40
 800d3ce:	d006      	beq.n	800d3de <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800d3d0:	2b40      	cmp	r3, #64	; 0x40
 800d3d2:	d81f      	bhi.n	800d414 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d009      	beq.n	800d3ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800d3d8:	2b20      	cmp	r3, #32
 800d3da:	d011      	beq.n	800d400 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800d3dc:	e01a      	b.n	800d414 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d3de:	4bc0      	ldr	r3, [pc, #768]	; (800d6e0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d3e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3e2:	4abf      	ldr	r2, [pc, #764]	; (800d6e0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d3e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d3e8:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d3ea:	e01a      	b.n	800d422 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d3ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d3f0:	3308      	adds	r3, #8
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f002 fd02 	bl	800fdfc <RCCEx_PLL2_Config>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d3fe:	e010      	b.n	800d422 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d400:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d404:	332c      	adds	r3, #44	; 0x2c
 800d406:	4618      	mov	r0, r3
 800d408:	f002 fd90 	bl	800ff2c <RCCEx_PLL3_Config>
 800d40c:	4603      	mov	r3, r0
 800d40e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d412:	e006      	b.n	800d422 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d414:	2301      	movs	r3, #1
 800d416:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d41a:	e002      	b.n	800d422 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800d41c:	bf00      	nop
 800d41e:	e000      	b.n	800d422 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800d420:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d422:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d426:	2b00      	cmp	r3, #0
 800d428:	d10d      	bne.n	800d446 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800d42a:	4bad      	ldr	r3, [pc, #692]	; (800d6e0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d42c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d430:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 800d434:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d438:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d43c:	4aa8      	ldr	r2, [pc, #672]	; (800d6e0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d43e:	430b      	orrs	r3, r1
 800d440:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800d444:	e003      	b.n	800d44e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d446:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d44a:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800d44e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d456:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800d45a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d45e:	2300      	movs	r3, #0
 800d460:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d464:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800d468:	460b      	mov	r3, r1
 800d46a:	4313      	orrs	r3, r2
 800d46c:	d053      	beq.n	800d516 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800d46e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d472:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d47a:	d033      	beq.n	800d4e4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800d47c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d480:	d82c      	bhi.n	800d4dc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800d482:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d486:	d02f      	beq.n	800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800d488:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d48c:	d826      	bhi.n	800d4dc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800d48e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d492:	d008      	beq.n	800d4a6 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800d494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d498:	d820      	bhi.n	800d4dc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d00a      	beq.n	800d4b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800d49e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4a2:	d011      	beq.n	800d4c8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800d4a4:	e01a      	b.n	800d4dc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d4a6:	4b8e      	ldr	r3, [pc, #568]	; (800d6e0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d4a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4aa:	4a8d      	ldr	r2, [pc, #564]	; (800d6e0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d4ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d4b0:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800d4b2:	e01a      	b.n	800d4ea <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d4b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d4b8:	3308      	adds	r3, #8
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f002 fc9e 	bl	800fdfc <RCCEx_PLL2_Config>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800d4c6:	e010      	b.n	800d4ea <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d4c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d4cc:	332c      	adds	r3, #44	; 0x2c
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	f002 fd2c 	bl	800ff2c <RCCEx_PLL3_Config>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800d4da:	e006      	b.n	800d4ea <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d4dc:	2301      	movs	r3, #1
 800d4de:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d4e2:	e002      	b.n	800d4ea <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800d4e4:	bf00      	nop
 800d4e6:	e000      	b.n	800d4ea <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800d4e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d4ea:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d10d      	bne.n	800d50e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800d4f2:	4b7b      	ldr	r3, [pc, #492]	; (800d6e0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d4f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d4f8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800d4fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d500:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d504:	4a76      	ldr	r2, [pc, #472]	; (800d6e0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d506:	430b      	orrs	r3, r1
 800d508:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800d50c:	e003      	b.n	800d516 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d50e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d512:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800d516:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d51e:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800d522:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d526:	2300      	movs	r3, #0
 800d528:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d52c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800d530:	460b      	mov	r3, r1
 800d532:	4313      	orrs	r3, r2
 800d534:	d046      	beq.n	800d5c4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800d536:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d53a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d53e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d542:	d028      	beq.n	800d596 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800d544:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d548:	d821      	bhi.n	800d58e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800d54a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d54e:	d022      	beq.n	800d596 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800d550:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d554:	d81b      	bhi.n	800d58e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800d556:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d55a:	d01c      	beq.n	800d596 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800d55c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d560:	d815      	bhi.n	800d58e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800d562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d566:	d008      	beq.n	800d57a <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800d568:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d56c:	d80f      	bhi.n	800d58e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d011      	beq.n	800d596 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800d572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d576:	d00e      	beq.n	800d596 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800d578:	e009      	b.n	800d58e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d57a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d57e:	3308      	adds	r3, #8
 800d580:	4618      	mov	r0, r3
 800d582:	f002 fc3b 	bl	800fdfc <RCCEx_PLL2_Config>
 800d586:	4603      	mov	r3, r0
 800d588:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d58c:	e004      	b.n	800d598 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800d58e:	2301      	movs	r3, #1
 800d590:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d594:	e000      	b.n	800d598 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800d596:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d598:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d10d      	bne.n	800d5bc <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800d5a0:	4b4f      	ldr	r3, [pc, #316]	; (800d6e0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d5a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d5a6:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800d5aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d5ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d5b2:	4a4b      	ldr	r2, [pc, #300]	; (800d6e0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d5b4:	430b      	orrs	r3, r1
 800d5b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800d5ba:	e003      	b.n	800d5c4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5bc:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d5c0:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800d5c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5cc:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800d5d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d5da:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800d5de:	460b      	mov	r3, r1
 800d5e0:	4313      	orrs	r3, r2
 800d5e2:	d03f      	beq.n	800d664 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800d5e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d5e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d5ec:	2b04      	cmp	r3, #4
 800d5ee:	d81e      	bhi.n	800d62e <HAL_RCCEx_PeriphCLKConfig+0x622>
 800d5f0:	a201      	add	r2, pc, #4	; (adr r2, 800d5f8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800d5f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5f6:	bf00      	nop
 800d5f8:	0800d637 	.word	0x0800d637
 800d5fc:	0800d60d 	.word	0x0800d60d
 800d600:	0800d61b 	.word	0x0800d61b
 800d604:	0800d637 	.word	0x0800d637
 800d608:	0800d637 	.word	0x0800d637
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d60c:	4b34      	ldr	r3, [pc, #208]	; (800d6e0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d60e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d610:	4a33      	ldr	r2, [pc, #204]	; (800d6e0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d616:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800d618:	e00e      	b.n	800d638 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d61a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d61e:	332c      	adds	r3, #44	; 0x2c
 800d620:	4618      	mov	r0, r3
 800d622:	f002 fc83 	bl	800ff2c <RCCEx_PLL3_Config>
 800d626:	4603      	mov	r3, r0
 800d628:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d62c:	e004      	b.n	800d638 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800d62e:	2301      	movs	r3, #1
 800d630:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d634:	e000      	b.n	800d638 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800d636:	bf00      	nop
    }
    if (ret == HAL_OK)
 800d638:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d10d      	bne.n	800d65c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800d640:	4b27      	ldr	r3, [pc, #156]	; (800d6e0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d642:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d646:	f023 0107 	bic.w	r1, r3, #7
 800d64a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d64e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d652:	4a23      	ldr	r2, [pc, #140]	; (800d6e0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d654:	430b      	orrs	r3, r1
 800d656:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800d65a:	e003      	b.n	800d664 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d65c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d660:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800d664:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d66c:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800d670:	67bb      	str	r3, [r7, #120]	; 0x78
 800d672:	2300      	movs	r3, #0
 800d674:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d676:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800d67a:	460b      	mov	r3, r1
 800d67c:	4313      	orrs	r3, r2
 800d67e:	d04c      	beq.n	800d71a <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800d680:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d684:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d688:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d68c:	d02a      	beq.n	800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800d68e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d692:	d821      	bhi.n	800d6d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800d694:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d698:	d026      	beq.n	800d6e8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800d69a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d69e:	d81b      	bhi.n	800d6d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800d6a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d6a4:	d00e      	beq.n	800d6c4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800d6a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d6aa:	d815      	bhi.n	800d6d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d01d      	beq.n	800d6ec <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800d6b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d6b4:	d110      	bne.n	800d6d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d6b6:	4b0a      	ldr	r3, [pc, #40]	; (800d6e0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d6b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6ba:	4a09      	ldr	r2, [pc, #36]	; (800d6e0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d6bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d6c0:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800d6c2:	e014      	b.n	800d6ee <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d6c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d6c8:	332c      	adds	r3, #44	; 0x2c
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f002 fc2e 	bl	800ff2c <RCCEx_PLL3_Config>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d6d6:	e00a      	b.n	800d6ee <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800d6d8:	2301      	movs	r3, #1
 800d6da:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d6de:	e006      	b.n	800d6ee <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800d6e0:	46020c00 	.word	0x46020c00
        break;
 800d6e4:	bf00      	nop
 800d6e6:	e002      	b.n	800d6ee <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800d6e8:	bf00      	nop
 800d6ea:	e000      	b.n	800d6ee <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800d6ec:	bf00      	nop
    }
    if (ret == HAL_OK)
 800d6ee:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d10d      	bne.n	800d712 <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800d6f6:	4baf      	ldr	r3, [pc, #700]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d6f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d6fc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800d700:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d704:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d708:	4aaa      	ldr	r2, [pc, #680]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d70a:	430b      	orrs	r3, r1
 800d70c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800d710:	e003      	b.n	800d71a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d712:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d716:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d71a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d722:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800d726:	673b      	str	r3, [r7, #112]	; 0x70
 800d728:	2300      	movs	r3, #0
 800d72a:	677b      	str	r3, [r7, #116]	; 0x74
 800d72c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800d730:	460b      	mov	r3, r1
 800d732:	4313      	orrs	r3, r2
 800d734:	f000 80b5 	beq.w	800d8a2 <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d738:	2300      	movs	r3, #0
 800d73a:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d73e:	4b9d      	ldr	r3, [pc, #628]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d740:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d744:	f003 0304 	and.w	r3, r3, #4
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d113      	bne.n	800d774 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d74c:	4b99      	ldr	r3, [pc, #612]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d74e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d752:	4a98      	ldr	r2, [pc, #608]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d754:	f043 0304 	orr.w	r3, r3, #4
 800d758:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800d75c:	4b95      	ldr	r3, [pc, #596]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d75e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d762:	f003 0304 	and.w	r3, r3, #4
 800d766:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800d76a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
      pwrclkchanged = SET;
 800d76e:	2301      	movs	r3, #1
 800d770:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800d774:	4b90      	ldr	r3, [pc, #576]	; (800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800d776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d778:	4a8f      	ldr	r2, [pc, #572]	; (800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800d77a:	f043 0301 	orr.w	r3, r3, #1
 800d77e:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d780:	f7f9 fdde 	bl	8007340 <HAL_GetTick>
 800d784:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800d788:	e00b      	b.n	800d7a2 <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d78a:	f7f9 fdd9 	bl	8007340 <HAL_GetTick>
 800d78e:	4602      	mov	r2, r0
 800d790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d794:	1ad3      	subs	r3, r2, r3
 800d796:	2b02      	cmp	r3, #2
 800d798:	d903      	bls.n	800d7a2 <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800d79a:	2303      	movs	r3, #3
 800d79c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d7a0:	e005      	b.n	800d7ae <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800d7a2:	4b85      	ldr	r3, [pc, #532]	; (800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800d7a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7a6:	f003 0301 	and.w	r3, r3, #1
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d0ed      	beq.n	800d78a <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800d7ae:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d165      	bne.n	800d882 <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d7b6:	4b7f      	ldr	r3, [pc, #508]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d7b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d7bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d7c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800d7c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d023      	beq.n	800d814 <HAL_RCCEx_PeriphCLKConfig+0x808>
 800d7cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d7d0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800d7d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d7d8:	4293      	cmp	r3, r2
 800d7da:	d01b      	beq.n	800d814 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d7dc:	4b75      	ldr	r3, [pc, #468]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d7de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d7e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d7e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d7ea:	4b72      	ldr	r3, [pc, #456]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d7ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d7f0:	4a70      	ldr	r2, [pc, #448]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d7f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d7f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d7fa:	4b6e      	ldr	r3, [pc, #440]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d7fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d800:	4a6c      	ldr	r2, [pc, #432]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d806:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d80a:	4a6a      	ldr	r2, [pc, #424]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d80c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d810:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d814:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d818:	f003 0301 	and.w	r3, r3, #1
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d019      	beq.n	800d854 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d820:	f7f9 fd8e 	bl	8007340 <HAL_GetTick>
 800d824:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d828:	e00d      	b.n	800d846 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d82a:	f7f9 fd89 	bl	8007340 <HAL_GetTick>
 800d82e:	4602      	mov	r2, r0
 800d830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d834:	1ad2      	subs	r2, r2, r3
 800d836:	f241 3388 	movw	r3, #5000	; 0x1388
 800d83a:	429a      	cmp	r2, r3
 800d83c:	d903      	bls.n	800d846 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800d83e:	2303      	movs	r3, #3
 800d840:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
            break;
 800d844:	e006      	b.n	800d854 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d846:	4b5b      	ldr	r3, [pc, #364]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d848:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d84c:	f003 0302 	and.w	r3, r3, #2
 800d850:	2b00      	cmp	r3, #0
 800d852:	d0ea      	beq.n	800d82a <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800d854:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d10d      	bne.n	800d878 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800d85c:	4b55      	ldr	r3, [pc, #340]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d85e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d862:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d866:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d86a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800d86e:	4a51      	ldr	r2, [pc, #324]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d870:	430b      	orrs	r3, r1
 800d872:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800d876:	e008      	b.n	800d88a <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d878:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d87c:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
 800d880:	e003      	b.n	800d88a <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d882:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d886:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d88a:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 800d88e:	2b01      	cmp	r3, #1
 800d890:	d107      	bne.n	800d8a2 <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d892:	4b48      	ldr	r3, [pc, #288]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d894:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d898:	4a46      	ldr	r2, [pc, #280]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d89a:	f023 0304 	bic.w	r3, r3, #4
 800d89e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800d8a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8aa:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800d8ae:	66bb      	str	r3, [r7, #104]	; 0x68
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d8b4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800d8b8:	460b      	mov	r3, r1
 800d8ba:	4313      	orrs	r3, r2
 800d8bc:	d042      	beq.n	800d944 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800d8be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d8c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d8c6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800d8ca:	d022      	beq.n	800d912 <HAL_RCCEx_PeriphCLKConfig+0x906>
 800d8cc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800d8d0:	d81b      	bhi.n	800d90a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800d8d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d8d6:	d011      	beq.n	800d8fc <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800d8d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d8dc:	d815      	bhi.n	800d90a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d019      	beq.n	800d916 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800d8e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d8e6:	d110      	bne.n	800d90a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d8e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d8ec:	3308      	adds	r3, #8
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f002 fa84 	bl	800fdfc <RCCEx_PLL2_Config>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d8fa:	e00d      	b.n	800d918 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d8fc:	4b2d      	ldr	r3, [pc, #180]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d8fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d900:	4a2c      	ldr	r2, [pc, #176]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d906:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800d908:	e006      	b.n	800d918 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800d90a:	2301      	movs	r3, #1
 800d90c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d910:	e002      	b.n	800d918 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800d912:	bf00      	nop
 800d914:	e000      	b.n	800d918 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800d916:	bf00      	nop
    }
    if (ret == HAL_OK)
 800d918:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d10d      	bne.n	800d93c <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800d920:	4b24      	ldr	r3, [pc, #144]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d926:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800d92a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d92e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d932:	4a20      	ldr	r2, [pc, #128]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d934:	430b      	orrs	r3, r1
 800d936:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d93a:	e003      	b.n	800d944 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d93c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d940:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d944:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d94c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800d950:	663b      	str	r3, [r7, #96]	; 0x60
 800d952:	2300      	movs	r3, #0
 800d954:	667b      	str	r3, [r7, #100]	; 0x64
 800d956:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800d95a:	460b      	mov	r3, r1
 800d95c:	4313      	orrs	r3, r2
 800d95e:	d031      	beq.n	800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800d960:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d964:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d968:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d96c:	d00b      	beq.n	800d986 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800d96e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d972:	d804      	bhi.n	800d97e <HAL_RCCEx_PeriphCLKConfig+0x972>
 800d974:	2b00      	cmp	r3, #0
 800d976:	d008      	beq.n	800d98a <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800d978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d97c:	d007      	beq.n	800d98e <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800d97e:	2301      	movs	r3, #1
 800d980:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d984:	e004      	b.n	800d990 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800d986:	bf00      	nop
 800d988:	e002      	b.n	800d990 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800d98a:	bf00      	nop
 800d98c:	e000      	b.n	800d990 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800d98e:	bf00      	nop
    }
    if (ret == HAL_OK)
 800d990:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d994:	2b00      	cmp	r3, #0
 800d996:	d111      	bne.n	800d9bc <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800d998:	4b06      	ldr	r3, [pc, #24]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d99a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d99e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d9a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d9a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d9aa:	4a02      	ldr	r2, [pc, #8]	; (800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800d9ac:	430b      	orrs	r3, r1
 800d9ae:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800d9b2:	e007      	b.n	800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800d9b4:	46020c00 	.word	0x46020c00
 800d9b8:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9bc:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d9c0:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800d9c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9cc:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800d9d0:	65bb      	str	r3, [r7, #88]	; 0x58
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d9d6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800d9da:	460b      	mov	r3, r1
 800d9dc:	4313      	orrs	r3, r2
 800d9de:	d00c      	beq.n	800d9fa <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800d9e0:	4bb2      	ldr	r3, [pc, #712]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d9e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d9e6:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800d9ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d9ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d9f2:	4aae      	ldr	r2, [pc, #696]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d9f4:	430b      	orrs	r3, r1
 800d9f6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800d9fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da02:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800da06:	653b      	str	r3, [r7, #80]	; 0x50
 800da08:	2300      	movs	r3, #0
 800da0a:	657b      	str	r3, [r7, #84]	; 0x54
 800da0c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800da10:	460b      	mov	r3, r1
 800da12:	4313      	orrs	r3, r2
 800da14:	d019      	beq.n	800da4a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800da16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800da1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800da22:	d105      	bne.n	800da30 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800da24:	4ba1      	ldr	r3, [pc, #644]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800da26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da28:	4aa0      	ldr	r2, [pc, #640]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800da2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800da2e:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800da30:	4b9e      	ldr	r3, [pc, #632]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800da32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800da36:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800da3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800da42:	4a9a      	ldr	r2, [pc, #616]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800da44:	430b      	orrs	r3, r1
 800da46:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800da4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da52:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800da56:	64bb      	str	r3, [r7, #72]	; 0x48
 800da58:	2300      	movs	r3, #0
 800da5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800da5c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800da60:	460b      	mov	r3, r1
 800da62:	4313      	orrs	r3, r2
 800da64:	d00c      	beq.n	800da80 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800da66:	4b91      	ldr	r3, [pc, #580]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800da68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800da6c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800da70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da74:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800da78:	4a8c      	ldr	r2, [pc, #560]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800da7a:	430b      	orrs	r3, r1
 800da7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800da80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da88:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800da8c:	643b      	str	r3, [r7, #64]	; 0x40
 800da8e:	2300      	movs	r3, #0
 800da90:	647b      	str	r3, [r7, #68]	; 0x44
 800da92:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800da96:	460b      	mov	r3, r1
 800da98:	4313      	orrs	r3, r2
 800da9a:	d00c      	beq.n	800dab6 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800da9c:	4b83      	ldr	r3, [pc, #524]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800da9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800daa2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800daa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800daaa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800daae:	4a7f      	ldr	r2, [pc, #508]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dab0:	430b      	orrs	r3, r1
 800dab2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800dab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800daba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dabe:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800dac2:	63bb      	str	r3, [r7, #56]	; 0x38
 800dac4:	2300      	movs	r3, #0
 800dac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dac8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800dacc:	460b      	mov	r3, r1
 800dace:	4313      	orrs	r3, r2
 800dad0:	d00c      	beq.n	800daec <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800dad2:	4b76      	ldr	r3, [pc, #472]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dad4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800dad8:	f023 0118 	bic.w	r1, r3, #24
 800dadc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dae0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800dae4:	4a71      	ldr	r2, [pc, #452]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dae6:	430b      	orrs	r3, r1
 800dae8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800daec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800daf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf4:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800daf8:	633b      	str	r3, [r7, #48]	; 0x30
 800dafa:	2300      	movs	r3, #0
 800dafc:	637b      	str	r3, [r7, #52]	; 0x34
 800dafe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800db02:	460b      	mov	r3, r1
 800db04:	4313      	orrs	r3, r2
 800db06:	d032      	beq.n	800db6e <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800db08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db0c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800db10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800db14:	d105      	bne.n	800db22 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800db16:	4b65      	ldr	r3, [pc, #404]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800db18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db1a:	4a64      	ldr	r2, [pc, #400]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800db1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800db20:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800db22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db26:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800db2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800db2e:	d108      	bne.n	800db42 <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800db30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db34:	3308      	adds	r3, #8
 800db36:	4618      	mov	r0, r3
 800db38:	f002 f960 	bl	800fdfc <RCCEx_PLL2_Config>
 800db3c:	4603      	mov	r3, r0
 800db3e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    }
    if (ret == HAL_OK)
 800db42:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800db46:	2b00      	cmp	r3, #0
 800db48:	d10d      	bne.n	800db66 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800db4a:	4b58      	ldr	r3, [pc, #352]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800db4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800db50:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800db54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db58:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800db5c:	4a53      	ldr	r2, [pc, #332]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800db5e:	430b      	orrs	r3, r1
 800db60:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800db64:	e003      	b.n	800db6e <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db66:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800db6a:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800db6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db76:	2100      	movs	r1, #0
 800db78:	62b9      	str	r1, [r7, #40]	; 0x28
 800db7a:	f003 0301 	and.w	r3, r3, #1
 800db7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db80:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800db84:	460b      	mov	r3, r1
 800db86:	4313      	orrs	r3, r2
 800db88:	d04a      	beq.n	800dc20 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800db8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db8e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800db92:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800db96:	d01e      	beq.n	800dbd6 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800db98:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800db9c:	d825      	bhi.n	800dbea <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800db9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dba2:	d00e      	beq.n	800dbc2 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800dba4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dba8:	d81f      	bhi.n	800dbea <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d021      	beq.n	800dbf2 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800dbae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dbb2:	d11a      	bne.n	800dbea <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dbb4:	4b3d      	ldr	r3, [pc, #244]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dbb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbb8:	4a3c      	ldr	r2, [pc, #240]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dbba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dbbe:	6293      	str	r3, [r2, #40]	; 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800dbc0:	e018      	b.n	800dbf4 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800dbc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dbc6:	3308      	adds	r3, #8
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f002 f917 	bl	800fdfc <RCCEx_PLL2_Config>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800dbd4:	e00e      	b.n	800dbf4 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800dbd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dbda:	332c      	adds	r3, #44	; 0x2c
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f002 f9a5 	bl	800ff2c <RCCEx_PLL3_Config>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800dbe8:	e004      	b.n	800dbf4 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800dbea:	2301      	movs	r3, #1
 800dbec:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800dbf0:	e000      	b.n	800dbf4 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800dbf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dbf4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d10d      	bne.n	800dc18 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800dbfc:	4b2b      	ldr	r3, [pc, #172]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dbfe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800dc02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800dc06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc0a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800dc0e:	4927      	ldr	r1, [pc, #156]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dc10:	4313      	orrs	r3, r2
 800dc12:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800dc16:	e003      	b.n	800dc20 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc18:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dc1c:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800dc20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc28:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800dc2c:	623b      	str	r3, [r7, #32]
 800dc2e:	2300      	movs	r3, #0
 800dc30:	627b      	str	r3, [r7, #36]	; 0x24
 800dc32:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800dc36:	460b      	mov	r3, r1
 800dc38:	4313      	orrs	r3, r2
 800dc3a:	d03d      	beq.n	800dcb8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800dc3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dc48:	d00e      	beq.n	800dc68 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800dc4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dc4e:	d815      	bhi.n	800dc7c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d017      	beq.n	800dc84 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800dc54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800dc58:	d110      	bne.n	800dc7c <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc5a:	4b14      	ldr	r3, [pc, #80]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dc5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc5e:	4a13      	ldr	r2, [pc, #76]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dc60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dc64:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800dc66:	e00e      	b.n	800dc86 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800dc68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc6c:	3308      	adds	r3, #8
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f002 f8c4 	bl	800fdfc <RCCEx_PLL2_Config>
 800dc74:	4603      	mov	r3, r0
 800dc76:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800dc7a:	e004      	b.n	800dc86 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800dc7c:	2301      	movs	r3, #1
 800dc7e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800dc82:	e000      	b.n	800dc86 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800dc84:	bf00      	nop
    }
    if (ret == HAL_OK)
 800dc86:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d110      	bne.n	800dcb0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800dc8e:	4b07      	ldr	r3, [pc, #28]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dc90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dc94:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800dc98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dca0:	4902      	ldr	r1, [pc, #8]	; (800dcac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dca2:	4313      	orrs	r3, r2
 800dca4:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800dca8:	e006      	b.n	800dcb8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800dcaa:	bf00      	nop
 800dcac:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dcb0:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dcb4:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800dcb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dcbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800dcc4:	61bb      	str	r3, [r7, #24]
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	61fb      	str	r3, [r7, #28]
 800dcca:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800dcce:	460b      	mov	r3, r1
 800dcd0:	4313      	orrs	r3, r2
 800dcd2:	d00c      	beq.n	800dcee <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800dcd4:	4b68      	ldr	r3, [pc, #416]	; (800de78 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800dcd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800dcda:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800dcde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dce2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800dce6:	4964      	ldr	r1, [pc, #400]	; (800de78 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800dce8:	4313      	orrs	r3, r2
 800dcea:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800dcee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dcf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf6:	2100      	movs	r1, #0
 800dcf8:	6139      	str	r1, [r7, #16]
 800dcfa:	f003 0302 	and.w	r3, r3, #2
 800dcfe:	617b      	str	r3, [r7, #20]
 800dd00:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800dd04:	460b      	mov	r3, r1
 800dd06:	4313      	orrs	r3, r2
 800dd08:	d036      	beq.n	800dd78 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800dd0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd0e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d00c      	beq.n	800dd30 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800dd16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800dd1a:	d113      	bne.n	800dd44 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800dd1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd20:	3308      	adds	r3, #8
 800dd22:	4618      	mov	r0, r3
 800dd24:	f002 f86a 	bl	800fdfc <RCCEx_PLL2_Config>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800dd2e:	e00d      	b.n	800dd4c <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800dd30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd34:	332c      	adds	r3, #44	; 0x2c
 800dd36:	4618      	mov	r0, r3
 800dd38:	f002 f8f8 	bl	800ff2c <RCCEx_PLL3_Config>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800dd42:	e003      	b.n	800dd4c <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800dd44:	2301      	movs	r3, #1
 800dd46:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800dd4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dd4c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d10d      	bne.n	800dd70 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800dd54:	4b48      	ldr	r3, [pc, #288]	; (800de78 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800dd56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800dd5a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800dd5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd62:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800dd66:	4944      	ldr	r1, [pc, #272]	; (800de78 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800dd68:	4313      	orrs	r3, r2
 800dd6a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800dd6e:	e003      	b.n	800dd78 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd70:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dd74:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800dd78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd80:	2100      	movs	r1, #0
 800dd82:	60b9      	str	r1, [r7, #8]
 800dd84:	f003 0304 	and.w	r3, r3, #4
 800dd88:	60fb      	str	r3, [r7, #12]
 800dd8a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800dd8e:	460b      	mov	r3, r1
 800dd90:	4313      	orrs	r3, r2
 800dd92:	d024      	beq.n	800ddde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800dd94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d108      	bne.n	800ddb2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800dda0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dda4:	332c      	adds	r3, #44	; 0x2c
 800dda6:	4618      	mov	r0, r3
 800dda8:	f002 f8c0 	bl	800ff2c <RCCEx_PLL3_Config>
 800ddac:	4603      	mov	r3, r0
 800ddae:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    }

    if (ret == HAL_OK)
 800ddb2:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d10d      	bne.n	800ddd6 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800ddba:	4b2f      	ldr	r3, [pc, #188]	; (800de78 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800ddbc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ddc0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800ddc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ddc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ddcc:	492a      	ldr	r1, [pc, #168]	; (800de78 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800ddce:	4313      	orrs	r3, r2
 800ddd0:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800ddd4:	e003      	b.n	800ddde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ddd6:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800ddda:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800ddde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dde6:	2100      	movs	r1, #0
 800dde8:	6039      	str	r1, [r7, #0]
 800ddea:	f003 0308 	and.w	r3, r3, #8
 800ddee:	607b      	str	r3, [r7, #4]
 800ddf0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ddf4:	460b      	mov	r3, r1
 800ddf6:	4313      	orrs	r3, r2
 800ddf8:	d036      	beq.n	800de68 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800ddfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ddfe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800de02:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800de06:	d00d      	beq.n	800de24 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800de08:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800de0c:	d811      	bhi.n	800de32 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800de0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de12:	d012      	beq.n	800de3a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800de14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de18:	d80b      	bhi.n	800de32 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d00d      	beq.n	800de3a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800de1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de22:	d106      	bne.n	800de32 <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800de24:	4b14      	ldr	r3, [pc, #80]	; (800de78 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800de26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de28:	4a13      	ldr	r2, [pc, #76]	; (800de78 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800de2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800de2e:	6293      	str	r3, [r2, #40]	; 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800de30:	e004      	b.n	800de3c <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800de32:	2301      	movs	r3, #1
 800de34:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800de38:	e000      	b.n	800de3c <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800de3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800de3c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800de40:	2b00      	cmp	r3, #0
 800de42:	d10d      	bne.n	800de60 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800de44:	4b0c      	ldr	r3, [pc, #48]	; (800de78 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800de46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800de4a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800de4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de52:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800de56:	4908      	ldr	r1, [pc, #32]	; (800de78 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800de58:	4313      	orrs	r3, r2
 800de5a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800de5e:	e003      	b.n	800de68 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de60:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800de64:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800de68:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
}
 800de6c:	4618      	mov	r0, r3
 800de6e:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800de72:	46bd      	mov	sp, r7
 800de74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800de78:	46020c00 	.word	0x46020c00

0800de7c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800de7c:	b480      	push	{r7}
 800de7e:	b089      	sub	sp, #36	; 0x24
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800de84:	4bad      	ldr	r3, [pc, #692]	; (800e13c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800de86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de8c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800de8e:	4bab      	ldr	r3, [pc, #684]	; (800e13c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800de90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de92:	f003 0303 	and.w	r3, r3, #3
 800de96:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800de98:	4ba8      	ldr	r3, [pc, #672]	; (800e13c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800de9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de9c:	0a1b      	lsrs	r3, r3, #8
 800de9e:	f003 030f 	and.w	r3, r3, #15
 800dea2:	3301      	adds	r3, #1
 800dea4:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800dea6:	4ba5      	ldr	r3, [pc, #660]	; (800e13c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800dea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800deaa:	091b      	lsrs	r3, r3, #4
 800deac:	f003 0301 	and.w	r3, r3, #1
 800deb0:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800deb2:	4ba2      	ldr	r3, [pc, #648]	; (800e13c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800deb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deb6:	08db      	lsrs	r3, r3, #3
 800deb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800debc:	68fa      	ldr	r2, [r7, #12]
 800debe:	fb02 f303 	mul.w	r3, r2, r3
 800dec2:	ee07 3a90 	vmov	s15, r3
 800dec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800deca:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800dece:	693b      	ldr	r3, [r7, #16]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	f000 8123 	beq.w	800e11c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 800ded6:	697b      	ldr	r3, [r7, #20]
 800ded8:	2b03      	cmp	r3, #3
 800deda:	d062      	beq.n	800dfa2 <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 800dedc:	697b      	ldr	r3, [r7, #20]
 800dede:	2b03      	cmp	r3, #3
 800dee0:	f200 8081 	bhi.w	800dfe6 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 800dee4:	697b      	ldr	r3, [r7, #20]
 800dee6:	2b01      	cmp	r3, #1
 800dee8:	d024      	beq.n	800df34 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 800deea:	697b      	ldr	r3, [r7, #20]
 800deec:	2b02      	cmp	r3, #2
 800deee:	d17a      	bne.n	800dfe6 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800def0:	693b      	ldr	r3, [r7, #16]
 800def2:	ee07 3a90 	vmov	s15, r3
 800def6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800defa:	eddf 6a91 	vldr	s13, [pc, #580]	; 800e140 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800defe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df02:	4b8e      	ldr	r3, [pc, #568]	; (800e13c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800df04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df0a:	ee07 3a90 	vmov	s15, r3
 800df0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800df12:	ed97 6a02 	vldr	s12, [r7, #8]
 800df16:	eddf 5a8b 	vldr	s11, [pc, #556]	; 800e144 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800df1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800df1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800df22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800df26:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800df2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800df32:	e08f      	b.n	800e054 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800df34:	4b81      	ldr	r3, [pc, #516]	; (800e13c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800df36:	689b      	ldr	r3, [r3, #8]
 800df38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d005      	beq.n	800df4c <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 800df40:	4b7e      	ldr	r3, [pc, #504]	; (800e13c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800df42:	689b      	ldr	r3, [r3, #8]
 800df44:	0f1b      	lsrs	r3, r3, #28
 800df46:	f003 030f 	and.w	r3, r3, #15
 800df4a:	e006      	b.n	800df5a <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 800df4c:	4b7b      	ldr	r3, [pc, #492]	; (800e13c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800df4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800df52:	041b      	lsls	r3, r3, #16
 800df54:	0f1b      	lsrs	r3, r3, #28
 800df56:	f003 030f 	and.w	r3, r3, #15
 800df5a:	4a7b      	ldr	r2, [pc, #492]	; (800e148 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 800df5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df60:	ee07 3a90 	vmov	s15, r3
 800df64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	ee07 3a90 	vmov	s15, r3
 800df6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800df76:	69bb      	ldr	r3, [r7, #24]
 800df78:	ee07 3a90 	vmov	s15, r3
 800df7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df80:	ed97 6a02 	vldr	s12, [r7, #8]
 800df84:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800e144 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800df88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800df94:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800df98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dfa0:	e058      	b.n	800e054 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800dfa2:	693b      	ldr	r3, [r7, #16]
 800dfa4:	ee07 3a90 	vmov	s15, r3
 800dfa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfac:	eddf 6a64 	vldr	s13, [pc, #400]	; 800e140 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800dfb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dfb4:	4b61      	ldr	r3, [pc, #388]	; (800e13c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800dfb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfbc:	ee07 3a90 	vmov	s15, r3
 800dfc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800dfc4:	ed97 6a02 	vldr	s12, [r7, #8]
 800dfc8:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800e144 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800dfcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800dfd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800dfd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dfd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800dfdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfe0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dfe4:	e036      	b.n	800e054 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800dfe6:	4b55      	ldr	r3, [pc, #340]	; (800e13c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800dfe8:	689b      	ldr	r3, [r3, #8]
 800dfea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d005      	beq.n	800dffe <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 800dff2:	4b52      	ldr	r3, [pc, #328]	; (800e13c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800dff4:	689b      	ldr	r3, [r3, #8]
 800dff6:	0f1b      	lsrs	r3, r3, #28
 800dff8:	f003 030f 	and.w	r3, r3, #15
 800dffc:	e006      	b.n	800e00c <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 800dffe:	4b4f      	ldr	r3, [pc, #316]	; (800e13c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e000:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e004:	041b      	lsls	r3, r3, #16
 800e006:	0f1b      	lsrs	r3, r3, #28
 800e008:	f003 030f 	and.w	r3, r3, #15
 800e00c:	4a4e      	ldr	r2, [pc, #312]	; (800e148 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 800e00e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e012:	ee07 3a90 	vmov	s15, r3
 800e016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e01a:	693b      	ldr	r3, [r7, #16]
 800e01c:	ee07 3a90 	vmov	s15, r3
 800e020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e024:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e028:	69bb      	ldr	r3, [r7, #24]
 800e02a:	ee07 3a90 	vmov	s15, r3
 800e02e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e032:	ed97 6a02 	vldr	s12, [r7, #8]
 800e036:	eddf 5a43 	vldr	s11, [pc, #268]	; 800e144 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800e03a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e03e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e046:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e04a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e04e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e052:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800e054:	4b39      	ldr	r3, [pc, #228]	; (800e13c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d017      	beq.n	800e090 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e060:	4b36      	ldr	r3, [pc, #216]	; (800e13c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e064:	0a5b      	lsrs	r3, r3, #9
 800e066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e06a:	ee07 3a90 	vmov	s15, r3
 800e06e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800e072:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e076:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e07a:	edd7 6a07 	vldr	s13, [r7, #28]
 800e07e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e086:	ee17 2a90 	vmov	r2, s15
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	601a      	str	r2, [r3, #0]
 800e08e:	e002      	b.n	800e096 <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2200      	movs	r2, #0
 800e094:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800e096:	4b29      	ldr	r3, [pc, #164]	; (800e13c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e09a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d017      	beq.n	800e0d2 <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e0a2:	4b26      	ldr	r3, [pc, #152]	; (800e13c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e0a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0a6:	0c1b      	lsrs	r3, r3, #16
 800e0a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0ac:	ee07 3a90 	vmov	s15, r3
 800e0b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800e0b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e0b8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e0bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800e0c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e0c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e0c8:	ee17 2a90 	vmov	r2, s15
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	605a      	str	r2, [r3, #4]
 800e0d0:	e002      	b.n	800e0d8 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800e0d8:	4b18      	ldr	r3, [pc, #96]	; (800e13c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e0da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d017      	beq.n	800e114 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e0e4:	4b15      	ldr	r3, [pc, #84]	; (800e13c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e0e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0e8:	0e1b      	lsrs	r3, r3, #24
 800e0ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0ee:	ee07 3a90 	vmov	s15, r3
 800e0f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800e0f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e0fa:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e0fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800e102:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e10a:	ee17 2a90 	vmov	r2, s15
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800e112:	e00c      	b.n	800e12e <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2200      	movs	r2, #0
 800e118:	609a      	str	r2, [r3, #8]
}
 800e11a:	e008      	b.n	800e12e <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2200      	movs	r2, #0
 800e120:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	2200      	movs	r2, #0
 800e126:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2200      	movs	r2, #0
 800e12c:	609a      	str	r2, [r3, #8]
}
 800e12e:	bf00      	nop
 800e130:	3724      	adds	r7, #36	; 0x24
 800e132:	46bd      	mov	sp, r7
 800e134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e138:	4770      	bx	lr
 800e13a:	bf00      	nop
 800e13c:	46020c00 	.word	0x46020c00
 800e140:	4b742400 	.word	0x4b742400
 800e144:	46000000 	.word	0x46000000
 800e148:	0802a7b4 	.word	0x0802a7b4

0800e14c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800e14c:	b480      	push	{r7}
 800e14e:	b089      	sub	sp, #36	; 0x24
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800e154:	4bad      	ldr	r3, [pc, #692]	; (800e40c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e15c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800e15e:	4bab      	ldr	r3, [pc, #684]	; (800e40c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e162:	f003 0303 	and.w	r3, r3, #3
 800e166:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800e168:	4ba8      	ldr	r3, [pc, #672]	; (800e40c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e16c:	0a1b      	lsrs	r3, r3, #8
 800e16e:	f003 030f 	and.w	r3, r3, #15
 800e172:	3301      	adds	r3, #1
 800e174:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800e176:	4ba5      	ldr	r3, [pc, #660]	; (800e40c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e17a:	091b      	lsrs	r3, r3, #4
 800e17c:	f003 0301 	and.w	r3, r3, #1
 800e180:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800e182:	4ba2      	ldr	r3, [pc, #648]	; (800e40c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e186:	08db      	lsrs	r3, r3, #3
 800e188:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e18c:	68fa      	ldr	r2, [r7, #12]
 800e18e:	fb02 f303 	mul.w	r3, r2, r3
 800e192:	ee07 3a90 	vmov	s15, r3
 800e196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e19a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800e19e:	693b      	ldr	r3, [r7, #16]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	f000 8123 	beq.w	800e3ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	2b03      	cmp	r3, #3
 800e1aa:	d062      	beq.n	800e272 <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	2b03      	cmp	r3, #3
 800e1b0:	f200 8081 	bhi.w	800e2b6 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 800e1b4:	697b      	ldr	r3, [r7, #20]
 800e1b6:	2b01      	cmp	r3, #1
 800e1b8:	d024      	beq.n	800e204 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	2b02      	cmp	r3, #2
 800e1be:	d17a      	bne.n	800e2b6 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	ee07 3a90 	vmov	s15, r3
 800e1c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1ca:	eddf 6a91 	vldr	s13, [pc, #580]	; 800e410 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800e1ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e1d2:	4b8e      	ldr	r3, [pc, #568]	; (800e40c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e1d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1da:	ee07 3a90 	vmov	s15, r3
 800e1de:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800e1e2:	ed97 6a02 	vldr	s12, [r7, #8]
 800e1e6:	eddf 5a8b 	vldr	s11, [pc, #556]	; 800e414 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800e1ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e1ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800e1f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e1f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e1fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e1fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e202:	e08f      	b.n	800e324 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800e204:	4b81      	ldr	r3, [pc, #516]	; (800e40c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e206:	689b      	ldr	r3, [r3, #8]
 800e208:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d005      	beq.n	800e21c <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 800e210:	4b7e      	ldr	r3, [pc, #504]	; (800e40c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e212:	689b      	ldr	r3, [r3, #8]
 800e214:	0f1b      	lsrs	r3, r3, #28
 800e216:	f003 030f 	and.w	r3, r3, #15
 800e21a:	e006      	b.n	800e22a <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 800e21c:	4b7b      	ldr	r3, [pc, #492]	; (800e40c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e21e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e222:	041b      	lsls	r3, r3, #16
 800e224:	0f1b      	lsrs	r3, r3, #28
 800e226:	f003 030f 	and.w	r3, r3, #15
 800e22a:	4a7b      	ldr	r2, [pc, #492]	; (800e418 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 800e22c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e230:	ee07 3a90 	vmov	s15, r3
 800e234:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e238:	693b      	ldr	r3, [r7, #16]
 800e23a:	ee07 3a90 	vmov	s15, r3
 800e23e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e246:	69bb      	ldr	r3, [r7, #24]
 800e248:	ee07 3a90 	vmov	s15, r3
 800e24c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e250:	ed97 6a02 	vldr	s12, [r7, #8]
 800e254:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800e414 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800e258:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e25c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e260:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e264:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800e268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e26c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e270:	e058      	b.n	800e324 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e272:	693b      	ldr	r3, [r7, #16]
 800e274:	ee07 3a90 	vmov	s15, r3
 800e278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e27c:	eddf 6a64 	vldr	s13, [pc, #400]	; 800e410 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800e280:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e284:	4b61      	ldr	r3, [pc, #388]	; (800e40c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e28c:	ee07 3a90 	vmov	s15, r3
 800e290:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800e294:	ed97 6a02 	vldr	s12, [r7, #8]
 800e298:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800e414 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800e29c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e2a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800e2a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e2a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e2ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e2b4:	e036      	b.n	800e324 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800e2b6:	4b55      	ldr	r3, [pc, #340]	; (800e40c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e2b8:	689b      	ldr	r3, [r3, #8]
 800e2ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d005      	beq.n	800e2ce <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 800e2c2:	4b52      	ldr	r3, [pc, #328]	; (800e40c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e2c4:	689b      	ldr	r3, [r3, #8]
 800e2c6:	0f1b      	lsrs	r3, r3, #28
 800e2c8:	f003 030f 	and.w	r3, r3, #15
 800e2cc:	e006      	b.n	800e2dc <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 800e2ce:	4b4f      	ldr	r3, [pc, #316]	; (800e40c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e2d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e2d4:	041b      	lsls	r3, r3, #16
 800e2d6:	0f1b      	lsrs	r3, r3, #28
 800e2d8:	f003 030f 	and.w	r3, r3, #15
 800e2dc:	4a4e      	ldr	r2, [pc, #312]	; (800e418 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 800e2de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2e2:	ee07 3a90 	vmov	s15, r3
 800e2e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e2ea:	693b      	ldr	r3, [r7, #16]
 800e2ec:	ee07 3a90 	vmov	s15, r3
 800e2f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e2f8:	69bb      	ldr	r3, [r7, #24]
 800e2fa:	ee07 3a90 	vmov	s15, r3
 800e2fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e302:	ed97 6a02 	vldr	s12, [r7, #8]
 800e306:	eddf 5a43 	vldr	s11, [pc, #268]	; 800e414 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800e30a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e30e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e312:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e316:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800e31a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e31e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e322:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800e324:	4b39      	ldr	r3, [pc, #228]	; (800e40c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d017      	beq.n	800e360 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e330:	4b36      	ldr	r3, [pc, #216]	; (800e40c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e334:	0a5b      	lsrs	r3, r3, #9
 800e336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e33a:	ee07 3a90 	vmov	s15, r3
 800e33e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800e342:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e346:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e34a:	edd7 6a07 	vldr	s13, [r7, #28]
 800e34e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e352:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e356:	ee17 2a90 	vmov	r2, s15
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	601a      	str	r2, [r3, #0]
 800e35e:	e002      	b.n	800e366 <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2200      	movs	r2, #0
 800e364:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800e366:	4b29      	ldr	r3, [pc, #164]	; (800e40c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e36a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d017      	beq.n	800e3a2 <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e372:	4b26      	ldr	r3, [pc, #152]	; (800e40c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e376:	0c1b      	lsrs	r3, r3, #16
 800e378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e37c:	ee07 3a90 	vmov	s15, r3
 800e380:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800e384:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e388:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e38c:	edd7 6a07 	vldr	s13, [r7, #28]
 800e390:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e394:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e398:	ee17 2a90 	vmov	r2, s15
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	605a      	str	r2, [r3, #4]
 800e3a0:	e002      	b.n	800e3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800e3a8:	4b18      	ldr	r3, [pc, #96]	; (800e40c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d017      	beq.n	800e3e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e3b4:	4b15      	ldr	r3, [pc, #84]	; (800e40c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e3b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3b8:	0e1b      	lsrs	r3, r3, #24
 800e3ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e3be:	ee07 3a90 	vmov	s15, r3
 800e3c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800e3c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e3ca:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e3ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800e3d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e3d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e3da:	ee17 2a90 	vmov	r2, s15
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800e3e2:	e00c      	b.n	800e3fe <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	609a      	str	r2, [r3, #8]
}
 800e3ea:	e008      	b.n	800e3fe <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	609a      	str	r2, [r3, #8]
}
 800e3fe:	bf00      	nop
 800e400:	3724      	adds	r7, #36	; 0x24
 800e402:	46bd      	mov	sp, r7
 800e404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e408:	4770      	bx	lr
 800e40a:	bf00      	nop
 800e40c:	46020c00 	.word	0x46020c00
 800e410:	4b742400 	.word	0x4b742400
 800e414:	46000000 	.word	0x46000000
 800e418:	0802a7b4 	.word	0x0802a7b4

0800e41c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800e41c:	b480      	push	{r7}
 800e41e:	b089      	sub	sp, #36	; 0x24
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800e424:	4bad      	ldr	r3, [pc, #692]	; (800e6dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e42c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800e42e:	4bab      	ldr	r3, [pc, #684]	; (800e6dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e432:	f003 0303 	and.w	r3, r3, #3
 800e436:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800e438:	4ba8      	ldr	r3, [pc, #672]	; (800e6dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e43a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e43c:	0a1b      	lsrs	r3, r3, #8
 800e43e:	f003 030f 	and.w	r3, r3, #15
 800e442:	3301      	adds	r3, #1
 800e444:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800e446:	4ba5      	ldr	r3, [pc, #660]	; (800e6dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e44a:	091b      	lsrs	r3, r3, #4
 800e44c:	f003 0301 	and.w	r3, r3, #1
 800e450:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800e452:	4ba2      	ldr	r3, [pc, #648]	; (800e6dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e456:	08db      	lsrs	r3, r3, #3
 800e458:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e45c:	68fa      	ldr	r2, [r7, #12]
 800e45e:	fb02 f303 	mul.w	r3, r2, r3
 800e462:	ee07 3a90 	vmov	s15, r3
 800e466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e46a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800e46e:	693b      	ldr	r3, [r7, #16]
 800e470:	2b00      	cmp	r3, #0
 800e472:	f000 8123 	beq.w	800e6bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	2b03      	cmp	r3, #3
 800e47a:	d062      	beq.n	800e542 <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 800e47c:	697b      	ldr	r3, [r7, #20]
 800e47e:	2b03      	cmp	r3, #3
 800e480:	f200 8081 	bhi.w	800e586 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 800e484:	697b      	ldr	r3, [r7, #20]
 800e486:	2b01      	cmp	r3, #1
 800e488:	d024      	beq.n	800e4d4 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 800e48a:	697b      	ldr	r3, [r7, #20]
 800e48c:	2b02      	cmp	r3, #2
 800e48e:	d17a      	bne.n	800e586 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e490:	693b      	ldr	r3, [r7, #16]
 800e492:	ee07 3a90 	vmov	s15, r3
 800e496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e49a:	eddf 6a91 	vldr	s13, [pc, #580]	; 800e6e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800e49e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e4a2:	4b8e      	ldr	r3, [pc, #568]	; (800e6dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e4a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4aa:	ee07 3a90 	vmov	s15, r3
 800e4ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800e4b2:	ed97 6a02 	vldr	s12, [r7, #8]
 800e4b6:	eddf 5a8b 	vldr	s11, [pc, #556]	; 800e6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800e4ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e4be:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800e4c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e4c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e4ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4ce:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 800e4d2:	e08f      	b.n	800e5f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800e4d4:	4b81      	ldr	r3, [pc, #516]	; (800e6dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e4d6:	689b      	ldr	r3, [r3, #8]
 800e4d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d005      	beq.n	800e4ec <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 800e4e0:	4b7e      	ldr	r3, [pc, #504]	; (800e6dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e4e2:	689b      	ldr	r3, [r3, #8]
 800e4e4:	0f1b      	lsrs	r3, r3, #28
 800e4e6:	f003 030f 	and.w	r3, r3, #15
 800e4ea:	e006      	b.n	800e4fa <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 800e4ec:	4b7b      	ldr	r3, [pc, #492]	; (800e6dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e4ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e4f2:	041b      	lsls	r3, r3, #16
 800e4f4:	0f1b      	lsrs	r3, r3, #28
 800e4f6:	f003 030f 	and.w	r3, r3, #15
 800e4fa:	4a7b      	ldr	r2, [pc, #492]	; (800e6e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 800e4fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e500:	ee07 3a90 	vmov	s15, r3
 800e504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e508:	693b      	ldr	r3, [r7, #16]
 800e50a:	ee07 3a90 	vmov	s15, r3
 800e50e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e516:	69bb      	ldr	r3, [r7, #24]
 800e518:	ee07 3a90 	vmov	s15, r3
 800e51c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e520:	ed97 6a02 	vldr	s12, [r7, #8]
 800e524:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800e6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800e528:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e52c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e530:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e534:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800e538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e53c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e540:	e058      	b.n	800e5f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e542:	693b      	ldr	r3, [r7, #16]
 800e544:	ee07 3a90 	vmov	s15, r3
 800e548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e54c:	eddf 6a64 	vldr	s13, [pc, #400]	; 800e6e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800e550:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e554:	4b61      	ldr	r3, [pc, #388]	; (800e6dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e55c:	ee07 3a90 	vmov	s15, r3
 800e560:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800e564:	ed97 6a02 	vldr	s12, [r7, #8]
 800e568:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800e6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800e56c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e570:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800e574:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e578:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e57c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e580:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e584:	e036      	b.n	800e5f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800e586:	4b55      	ldr	r3, [pc, #340]	; (800e6dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e588:	689b      	ldr	r3, [r3, #8]
 800e58a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d005      	beq.n	800e59e <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 800e592:	4b52      	ldr	r3, [pc, #328]	; (800e6dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e594:	689b      	ldr	r3, [r3, #8]
 800e596:	0f1b      	lsrs	r3, r3, #28
 800e598:	f003 030f 	and.w	r3, r3, #15
 800e59c:	e006      	b.n	800e5ac <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 800e59e:	4b4f      	ldr	r3, [pc, #316]	; (800e6dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e5a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e5a4:	041b      	lsls	r3, r3, #16
 800e5a6:	0f1b      	lsrs	r3, r3, #28
 800e5a8:	f003 030f 	and.w	r3, r3, #15
 800e5ac:	4a4e      	ldr	r2, [pc, #312]	; (800e6e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 800e5ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5b2:	ee07 3a90 	vmov	s15, r3
 800e5b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e5ba:	693b      	ldr	r3, [r7, #16]
 800e5bc:	ee07 3a90 	vmov	s15, r3
 800e5c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e5c8:	69bb      	ldr	r3, [r7, #24]
 800e5ca:	ee07 3a90 	vmov	s15, r3
 800e5ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e5d2:	ed97 6a02 	vldr	s12, [r7, #8]
 800e5d6:	eddf 5a43 	vldr	s11, [pc, #268]	; 800e6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800e5da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e5de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e5e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e5e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800e5ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e5ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e5f2:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800e5f4:	4b39      	ldr	r3, [pc, #228]	; (800e6dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e5f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d017      	beq.n	800e630 <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e600:	4b36      	ldr	r3, [pc, #216]	; (800e6dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e604:	0a5b      	lsrs	r3, r3, #9
 800e606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e60a:	ee07 3a90 	vmov	s15, r3
 800e60e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800e612:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e616:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e61a:	edd7 6a07 	vldr	s13, [r7, #28]
 800e61e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e622:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e626:	ee17 2a90 	vmov	r2, s15
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	601a      	str	r2, [r3, #0]
 800e62e:	e002      	b.n	800e636 <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2200      	movs	r2, #0
 800e634:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800e636:	4b29      	ldr	r3, [pc, #164]	; (800e6dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e63a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d017      	beq.n	800e672 <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e642:	4b26      	ldr	r3, [pc, #152]	; (800e6dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e646:	0c1b      	lsrs	r3, r3, #16
 800e648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e64c:	ee07 3a90 	vmov	s15, r3
 800e650:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800e654:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e658:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e65c:	edd7 6a07 	vldr	s13, [r7, #28]
 800e660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e668:	ee17 2a90 	vmov	r2, s15
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	605a      	str	r2, [r3, #4]
 800e670:	e002      	b.n	800e678 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	2200      	movs	r2, #0
 800e676:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800e678:	4b18      	ldr	r3, [pc, #96]	; (800e6dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e67a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e67c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e680:	2b00      	cmp	r3, #0
 800e682:	d017      	beq.n	800e6b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e684:	4b15      	ldr	r3, [pc, #84]	; (800e6dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e688:	0e1b      	lsrs	r3, r3, #24
 800e68a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e68e:	ee07 3a90 	vmov	s15, r3
 800e692:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800e696:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e69a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800e69e:	edd7 6a07 	vldr	s13, [r7, #28]
 800e6a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e6a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e6aa:	ee17 2a90 	vmov	r2, s15
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800e6b2:	e00c      	b.n	800e6ce <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	609a      	str	r2, [r3, #8]
}
 800e6ba:	e008      	b.n	800e6ce <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2200      	movs	r2, #0
 800e6c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	609a      	str	r2, [r3, #8]
}
 800e6ce:	bf00      	nop
 800e6d0:	3724      	adds	r7, #36	; 0x24
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d8:	4770      	bx	lr
 800e6da:	bf00      	nop
 800e6dc:	46020c00 	.word	0x46020c00
 800e6e0:	4b742400 	.word	0x4b742400
 800e6e4:	46000000 	.word	0x46000000
 800e6e8:	0802a7b4 	.word	0x0802a7b4

0800e6ec <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b08e      	sub	sp, #56	; 0x38
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800e6f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e6fa:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800e6fe:	430b      	orrs	r3, r1
 800e700:	d145      	bne.n	800e78e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800e702:	4ba7      	ldr	r3, [pc, #668]	; (800e9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e704:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e708:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e70c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800e70e:	4ba4      	ldr	r3, [pc, #656]	; (800e9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e710:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e714:	f003 0302 	and.w	r3, r3, #2
 800e718:	2b02      	cmp	r3, #2
 800e71a:	d108      	bne.n	800e72e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800e71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e71e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e722:	d104      	bne.n	800e72e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800e724:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e728:	637b      	str	r3, [r7, #52]	; 0x34
 800e72a:	f001 bb58 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800e72e:	4b9c      	ldr	r3, [pc, #624]	; (800e9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e738:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e73c:	d114      	bne.n	800e768 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800e73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e744:	d110      	bne.n	800e768 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e746:	4b96      	ldr	r3, [pc, #600]	; (800e9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e748:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e74c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e750:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e754:	d103      	bne.n	800e75e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800e756:	23fa      	movs	r3, #250	; 0xfa
 800e758:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e75a:	f001 bb40 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = LSI_VALUE;
 800e75e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800e762:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e764:	f001 bb3b 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800e768:	4b8d      	ldr	r3, [pc, #564]	; (800e9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e770:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e774:	d107      	bne.n	800e786 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800e776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e778:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e77c:	d103      	bne.n	800e786 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800e77e:	4b89      	ldr	r3, [pc, #548]	; (800e9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800e780:	637b      	str	r3, [r7, #52]	; 0x34
 800e782:	f001 bb2c 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800e786:	2300      	movs	r3, #0
 800e788:	637b      	str	r3, [r7, #52]	; 0x34
 800e78a:	f001 bb28 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800e78e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e792:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800e796:	430b      	orrs	r3, r1
 800e798:	d151      	bne.n	800e83e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800e79a:	4b81      	ldr	r3, [pc, #516]	; (800e9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e79c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e7a0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800e7a4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800e7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7a8:	2b80      	cmp	r3, #128	; 0x80
 800e7aa:	d035      	beq.n	800e818 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800e7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ae:	2b80      	cmp	r3, #128	; 0x80
 800e7b0:	d841      	bhi.n	800e836 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800e7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b4:	2b60      	cmp	r3, #96	; 0x60
 800e7b6:	d02a      	beq.n	800e80e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800e7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ba:	2b60      	cmp	r3, #96	; 0x60
 800e7bc:	d83b      	bhi.n	800e836 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800e7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7c0:	2b40      	cmp	r3, #64	; 0x40
 800e7c2:	d009      	beq.n	800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800e7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7c6:	2b40      	cmp	r3, #64	; 0x40
 800e7c8:	d835      	bhi.n	800e836 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800e7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d00c      	beq.n	800e7ea <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800e7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d2:	2b20      	cmp	r3, #32
 800e7d4:	d012      	beq.n	800e7fc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800e7d6:	e02e      	b.n	800e836 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e7d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f7ff fb4d 	bl	800de7c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800e7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e7e6:	f001 bafa 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e7ea:	f107 0318 	add.w	r3, r7, #24
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f7ff fcac 	bl	800e14c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800e7f4:	69bb      	ldr	r3, [r7, #24]
 800e7f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e7f8:	f001 baf1 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e7fc:	f107 030c 	add.w	r3, r7, #12
 800e800:	4618      	mov	r0, r3
 800e802:	f7ff fe0b 	bl	800e41c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e80a:	f001 bae8 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800e80e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800e812:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e814:	f001 bae3 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e818:	4b61      	ldr	r3, [pc, #388]	; (800e9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e824:	d103      	bne.n	800e82e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800e826:	4b60      	ldr	r3, [pc, #384]	; (800e9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800e828:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e82a:	f001 bad8 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800e82e:	2300      	movs	r3, #0
 800e830:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e832:	f001 bad4 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default :
      {
        frequency = 0U;
 800e836:	2300      	movs	r3, #0
 800e838:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e83a:	f001 bad0 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800e83e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e842:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800e846:	430b      	orrs	r3, r1
 800e848:	d158      	bne.n	800e8fc <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800e84a:	4b55      	ldr	r3, [pc, #340]	; (800e9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e84c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e850:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e854:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800e856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e85c:	d03b      	beq.n	800e8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800e85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e864:	d846      	bhi.n	800e8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800e866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e868:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e86c:	d02e      	beq.n	800e8cc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800e86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e870:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e874:	d83e      	bhi.n	800e8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800e876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e87c:	d00b      	beq.n	800e896 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800e87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e884:	d836      	bhi.n	800e8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800e886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d00d      	beq.n	800e8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800e88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e88e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e892:	d012      	beq.n	800e8ba <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800e894:	e02e      	b.n	800e8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e89a:	4618      	mov	r0, r3
 800e89c:	f7ff faee 	bl	800de7c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800e8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e8a4:	f001 ba9b 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e8a8:	f107 0318 	add.w	r3, r7, #24
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	f7ff fc4d 	bl	800e14c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800e8b2:	69bb      	ldr	r3, [r7, #24]
 800e8b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e8b6:	f001 ba92 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e8ba:	f107 030c 	add.w	r3, r7, #12
 800e8be:	4618      	mov	r0, r3
 800e8c0:	f7ff fdac 	bl	800e41c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e8c8:	f001 ba89 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800e8cc:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800e8d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e8d2:	f001 ba84 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e8d6:	4b32      	ldr	r3, [pc, #200]	; (800e9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e8de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e8e2:	d103      	bne.n	800e8ec <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800e8e4:	4b30      	ldr	r3, [pc, #192]	; (800e9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800e8e6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e8e8:	f001 ba79 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e8f0:	f001 ba75 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default :

        frequency = 0U;
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e8f8:	f001 ba71 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800e8fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e900:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800e904:	430b      	orrs	r3, r1
 800e906:	d126      	bne.n	800e956 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800e908:	4b25      	ldr	r3, [pc, #148]	; (800e9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e90a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e90e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e912:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800e914:	4b22      	ldr	r3, [pc, #136]	; (800e9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e91c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e920:	d106      	bne.n	800e930 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800e922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e924:	2b00      	cmp	r3, #0
 800e926:	d103      	bne.n	800e930 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800e928:	4b1f      	ldr	r3, [pc, #124]	; (800e9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800e92a:	637b      	str	r3, [r7, #52]	; 0x34
 800e92c:	f001 ba57 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800e930:	4b1b      	ldr	r3, [pc, #108]	; (800e9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e93c:	d107      	bne.n	800e94e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800e93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e944:	d103      	bne.n	800e94e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800e946:	4b19      	ldr	r3, [pc, #100]	; (800e9ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800e948:	637b      	str	r3, [r7, #52]	; 0x34
 800e94a:	f001 ba48 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800e94e:	2300      	movs	r3, #0
 800e950:	637b      	str	r3, [r7, #52]	; 0x34
 800e952:	f001 ba44 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800e956:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e95a:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800e95e:	430b      	orrs	r3, r1
 800e960:	d16e      	bne.n	800ea40 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800e962:	4b0f      	ldr	r3, [pc, #60]	; (800e9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800e964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e968:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800e96c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800e96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e970:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e974:	d03d      	beq.n	800e9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800e976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e978:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e97c:	d85c      	bhi.n	800ea38 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800e97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e980:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e984:	d014      	beq.n	800e9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800e986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e988:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e98c:	d854      	bhi.n	800ea38 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800e98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e990:	2b00      	cmp	r3, #0
 800e992:	d01f      	beq.n	800e9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800e994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e996:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e99a:	d012      	beq.n	800e9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800e99c:	e04c      	b.n	800ea38 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800e99e:	bf00      	nop
 800e9a0:	46020c00 	.word	0x46020c00
 800e9a4:	0007a120 	.word	0x0007a120
 800e9a8:	00f42400 	.word	0x00f42400
 800e9ac:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e9b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	f7ff fa61 	bl	800de7c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800e9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e9be:	f001 ba0e 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e9c2:	f107 0318 	add.w	r3, r7, #24
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f7ff fbc0 	bl	800e14c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800e9cc:	69fb      	ldr	r3, [r7, #28]
 800e9ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e9d0:	f001 ba05 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800e9d4:	4ba7      	ldr	r3, [pc, #668]	; (800ec74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e9dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e9e0:	d103      	bne.n	800e9ea <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800e9e2:	4ba5      	ldr	r3, [pc, #660]	; (800ec78 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800e9e4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e9e6:	f001 b9fa 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800e9ee:	f001 b9f6 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800e9f2:	4ba0      	ldr	r3, [pc, #640]	; (800ec74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	f003 0320 	and.w	r3, r3, #32
 800e9fa:	2b20      	cmp	r3, #32
 800e9fc:	d118      	bne.n	800ea30 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e9fe:	4b9d      	ldr	r3, [pc, #628]	; (800ec74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ea00:	689b      	ldr	r3, [r3, #8]
 800ea02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d005      	beq.n	800ea16 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800ea0a:	4b9a      	ldr	r3, [pc, #616]	; (800ec74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ea0c:	689b      	ldr	r3, [r3, #8]
 800ea0e:	0e1b      	lsrs	r3, r3, #24
 800ea10:	f003 030f 	and.w	r3, r3, #15
 800ea14:	e006      	b.n	800ea24 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800ea16:	4b97      	ldr	r3, [pc, #604]	; (800ec74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ea18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ea1c:	041b      	lsls	r3, r3, #16
 800ea1e:	0e1b      	lsrs	r3, r3, #24
 800ea20:	f003 030f 	and.w	r3, r3, #15
 800ea24:	4a95      	ldr	r2, [pc, #596]	; (800ec7c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ea26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea2a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ea2c:	f001 b9d7 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800ea30:	2300      	movs	r3, #0
 800ea32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ea34:	f001 b9d3 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default :

        frequency = 0U;
 800ea38:	2300      	movs	r3, #0
 800ea3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ea3c:	f001 b9cf 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ea40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea44:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800ea48:	430b      	orrs	r3, r1
 800ea4a:	d17f      	bne.n	800eb4c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ea4c:	4b89      	ldr	r3, [pc, #548]	; (800ec74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ea4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ea52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ea56:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800ea58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d165      	bne.n	800eb2a <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800ea5e:	4b85      	ldr	r3, [pc, #532]	; (800ec74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ea60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ea64:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800ea68:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800ea6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea6c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ea70:	d034      	beq.n	800eadc <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800ea72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea74:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ea78:	d853      	bhi.n	800eb22 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800ea7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ea80:	d00b      	beq.n	800ea9a <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800ea82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ea88:	d84b      	bhi.n	800eb22 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800ea8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d016      	beq.n	800eabe <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800ea90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ea96:	d009      	beq.n	800eaac <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800ea98:	e043      	b.n	800eb22 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ea9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	f7ff f9ec 	bl	800de7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800eaa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaa6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800eaa8:	f001 b999 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eaac:	f107 0318 	add.w	r3, r7, #24
 800eab0:	4618      	mov	r0, r3
 800eab2:	f7ff fb4b 	bl	800e14c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800eab6:	69fb      	ldr	r3, [r7, #28]
 800eab8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800eaba:	f001 b990 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800eabe:	4b6d      	ldr	r3, [pc, #436]	; (800ec74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800eac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eaca:	d103      	bne.n	800ead4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800eacc:	4b6a      	ldr	r3, [pc, #424]	; (800ec78 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800eace:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800ead0:	f001 b985 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
            frequency = 0U;
 800ead4:	2300      	movs	r3, #0
 800ead6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800ead8:	f001 b981 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800eadc:	4b65      	ldr	r3, [pc, #404]	; (800ec74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	f003 0320 	and.w	r3, r3, #32
 800eae4:	2b20      	cmp	r3, #32
 800eae6:	d118      	bne.n	800eb1a <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800eae8:	4b62      	ldr	r3, [pc, #392]	; (800ec74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eaea:	689b      	ldr	r3, [r3, #8]
 800eaec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d005      	beq.n	800eb00 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800eaf4:	4b5f      	ldr	r3, [pc, #380]	; (800ec74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eaf6:	689b      	ldr	r3, [r3, #8]
 800eaf8:	0e1b      	lsrs	r3, r3, #24
 800eafa:	f003 030f 	and.w	r3, r3, #15
 800eafe:	e006      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800eb00:	4b5c      	ldr	r3, [pc, #368]	; (800ec74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eb02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800eb06:	041b      	lsls	r3, r3, #16
 800eb08:	0e1b      	lsrs	r3, r3, #24
 800eb0a:	f003 030f 	and.w	r3, r3, #15
 800eb0e:	4a5b      	ldr	r2, [pc, #364]	; (800ec7c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800eb10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb14:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800eb16:	f001 b962 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
            frequency = 0U;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800eb1e:	f001 b95e 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
        }
        default :
        {
          frequency = 0U;
 800eb22:	2300      	movs	r3, #0
 800eb24:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800eb26:	f001 b95a 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800eb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800eb30:	d108      	bne.n	800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800eb32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eb36:	4618      	mov	r0, r3
 800eb38:	f7ff f9a0 	bl	800de7c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800eb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb3e:	637b      	str	r3, [r7, #52]	; 0x34
 800eb40:	f001 b94d 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else
    {
      frequency = 0U;
 800eb44:	2300      	movs	r3, #0
 800eb46:	637b      	str	r3, [r7, #52]	; 0x34
 800eb48:	f001 b949 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800eb4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eb50:	1e51      	subs	r1, r2, #1
 800eb52:	430b      	orrs	r3, r1
 800eb54:	d136      	bne.n	800ebc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800eb56:	4b47      	ldr	r3, [pc, #284]	; (800ec74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eb58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eb5c:	f003 0303 	and.w	r3, r3, #3
 800eb60:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800eb62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d104      	bne.n	800eb72 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800eb68:	f7fe f96a 	bl	800ce40 <HAL_RCC_GetPCLK2Freq>
 800eb6c:	6378      	str	r0, [r7, #52]	; 0x34
 800eb6e:	f001 b936 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800eb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb74:	2b01      	cmp	r3, #1
 800eb76:	d104      	bne.n	800eb82 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800eb78:	f7fe f82c 	bl	800cbd4 <HAL_RCC_GetSysClockFreq>
 800eb7c:	6378      	str	r0, [r7, #52]	; 0x34
 800eb7e:	f001 b92e 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800eb82:	4b3c      	ldr	r3, [pc, #240]	; (800ec74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eb8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eb8e:	d106      	bne.n	800eb9e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800eb90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb92:	2b02      	cmp	r3, #2
 800eb94:	d103      	bne.n	800eb9e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800eb96:	4b3a      	ldr	r3, [pc, #232]	; (800ec80 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800eb98:	637b      	str	r3, [r7, #52]	; 0x34
 800eb9a:	f001 b920 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800eb9e:	4b35      	ldr	r3, [pc, #212]	; (800ec74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eba0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800eba4:	f003 0302 	and.w	r3, r3, #2
 800eba8:	2b02      	cmp	r3, #2
 800ebaa:	d107      	bne.n	800ebbc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800ebac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebae:	2b03      	cmp	r3, #3
 800ebb0:	d104      	bne.n	800ebbc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800ebb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ebb6:	637b      	str	r3, [r7, #52]	; 0x34
 800ebb8:	f001 b911 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	637b      	str	r3, [r7, #52]	; 0x34
 800ebc0:	f001 b90d 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800ebc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ebc8:	1e91      	subs	r1, r2, #2
 800ebca:	430b      	orrs	r3, r1
 800ebcc:	d136      	bne.n	800ec3c <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800ebce:	4b29      	ldr	r3, [pc, #164]	; (800ec74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ebd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ebd4:	f003 030c 	and.w	r3, r3, #12
 800ebd8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800ebda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d104      	bne.n	800ebea <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ebe0:	f7fe f91a 	bl	800ce18 <HAL_RCC_GetPCLK1Freq>
 800ebe4:	6378      	str	r0, [r7, #52]	; 0x34
 800ebe6:	f001 b8fa 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800ebea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebec:	2b04      	cmp	r3, #4
 800ebee:	d104      	bne.n	800ebfa <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ebf0:	f7fd fff0 	bl	800cbd4 <HAL_RCC_GetSysClockFreq>
 800ebf4:	6378      	str	r0, [r7, #52]	; 0x34
 800ebf6:	f001 b8f2 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800ebfa:	4b1e      	ldr	r3, [pc, #120]	; (800ec74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ec02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ec06:	d106      	bne.n	800ec16 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800ec08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec0a:	2b08      	cmp	r3, #8
 800ec0c:	d103      	bne.n	800ec16 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800ec0e:	4b1c      	ldr	r3, [pc, #112]	; (800ec80 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800ec10:	637b      	str	r3, [r7, #52]	; 0x34
 800ec12:	f001 b8e4 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800ec16:	4b17      	ldr	r3, [pc, #92]	; (800ec74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ec18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ec1c:	f003 0302 	and.w	r3, r3, #2
 800ec20:	2b02      	cmp	r3, #2
 800ec22:	d107      	bne.n	800ec34 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800ec24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec26:	2b0c      	cmp	r3, #12
 800ec28:	d104      	bne.n	800ec34 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800ec2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec2e:	637b      	str	r3, [r7, #52]	; 0x34
 800ec30:	f001 b8d5 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800ec34:	2300      	movs	r3, #0
 800ec36:	637b      	str	r3, [r7, #52]	; 0x34
 800ec38:	f001 b8d1 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800ec3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec40:	1f11      	subs	r1, r2, #4
 800ec42:	430b      	orrs	r3, r1
 800ec44:	d13f      	bne.n	800ecc6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800ec46:	4b0b      	ldr	r3, [pc, #44]	; (800ec74 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ec48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ec4c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ec50:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800ec52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d104      	bne.n	800ec62 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ec58:	f7fe f8de 	bl	800ce18 <HAL_RCC_GetPCLK1Freq>
 800ec5c:	6378      	str	r0, [r7, #52]	; 0x34
 800ec5e:	f001 b8be 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800ec62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec64:	2b10      	cmp	r3, #16
 800ec66:	d10d      	bne.n	800ec84 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ec68:	f7fd ffb4 	bl	800cbd4 <HAL_RCC_GetSysClockFreq>
 800ec6c:	6378      	str	r0, [r7, #52]	; 0x34
 800ec6e:	f001 b8b6 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 800ec72:	bf00      	nop
 800ec74:	46020c00 	.word	0x46020c00
 800ec78:	02dc6c00 	.word	0x02dc6c00
 800ec7c:	0802a7b4 	.word	0x0802a7b4
 800ec80:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800ec84:	4ba8      	ldr	r3, [pc, #672]	; (800ef28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ec8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ec90:	d106      	bne.n	800eca0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800ec92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec94:	2b20      	cmp	r3, #32
 800ec96:	d103      	bne.n	800eca0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800ec98:	4ba4      	ldr	r3, [pc, #656]	; (800ef2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ec9a:	637b      	str	r3, [r7, #52]	; 0x34
 800ec9c:	f001 b89f 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800eca0:	4ba1      	ldr	r3, [pc, #644]	; (800ef28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800eca2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800eca6:	f003 0302 	and.w	r3, r3, #2
 800ecaa:	2b02      	cmp	r3, #2
 800ecac:	d107      	bne.n	800ecbe <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800ecae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecb0:	2b30      	cmp	r3, #48	; 0x30
 800ecb2:	d104      	bne.n	800ecbe <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800ecb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ecb8:	637b      	str	r3, [r7, #52]	; 0x34
 800ecba:	f001 b890 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	637b      	str	r3, [r7, #52]	; 0x34
 800ecc2:	f001 b88c 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800ecc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ecca:	f1a2 0108 	sub.w	r1, r2, #8
 800ecce:	430b      	orrs	r3, r1
 800ecd0:	d136      	bne.n	800ed40 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800ecd2:	4b95      	ldr	r3, [pc, #596]	; (800ef28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ecd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ecd8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ecdc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800ecde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d104      	bne.n	800ecee <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ece4:	f7fe f898 	bl	800ce18 <HAL_RCC_GetPCLK1Freq>
 800ece8:	6378      	str	r0, [r7, #52]	; 0x34
 800ecea:	f001 b878 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800ecee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecf0:	2b40      	cmp	r3, #64	; 0x40
 800ecf2:	d104      	bne.n	800ecfe <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ecf4:	f7fd ff6e 	bl	800cbd4 <HAL_RCC_GetSysClockFreq>
 800ecf8:	6378      	str	r0, [r7, #52]	; 0x34
 800ecfa:	f001 b870 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800ecfe:	4b8a      	ldr	r3, [pc, #552]	; (800ef28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ed06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed0a:	d106      	bne.n	800ed1a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800ed0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed0e:	2b80      	cmp	r3, #128	; 0x80
 800ed10:	d103      	bne.n	800ed1a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800ed12:	4b86      	ldr	r3, [pc, #536]	; (800ef2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ed14:	637b      	str	r3, [r7, #52]	; 0x34
 800ed16:	f001 b862 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800ed1a:	4b83      	ldr	r3, [pc, #524]	; (800ef28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ed1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ed20:	f003 0302 	and.w	r3, r3, #2
 800ed24:	2b02      	cmp	r3, #2
 800ed26:	d107      	bne.n	800ed38 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800ed28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed2a:	2bc0      	cmp	r3, #192	; 0xc0
 800ed2c:	d104      	bne.n	800ed38 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800ed2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ed32:	637b      	str	r3, [r7, #52]	; 0x34
 800ed34:	f001 b853 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	637b      	str	r3, [r7, #52]	; 0x34
 800ed3c:	f001 b84f 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800ed40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed44:	f1a2 0110 	sub.w	r1, r2, #16
 800ed48:	430b      	orrs	r3, r1
 800ed4a:	d139      	bne.n	800edc0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800ed4c:	4b76      	ldr	r3, [pc, #472]	; (800ef28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ed4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ed52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ed56:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800ed58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d104      	bne.n	800ed68 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ed5e:	f7fe f85b 	bl	800ce18 <HAL_RCC_GetPCLK1Freq>
 800ed62:	6378      	str	r0, [r7, #52]	; 0x34
 800ed64:	f001 b83b 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800ed68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed6e:	d104      	bne.n	800ed7a <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ed70:	f7fd ff30 	bl	800cbd4 <HAL_RCC_GetSysClockFreq>
 800ed74:	6378      	str	r0, [r7, #52]	; 0x34
 800ed76:	f001 b832 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800ed7a:	4b6b      	ldr	r3, [pc, #428]	; (800ef28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ed82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed86:	d107      	bne.n	800ed98 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800ed88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed8e:	d103      	bne.n	800ed98 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800ed90:	4b66      	ldr	r3, [pc, #408]	; (800ef2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ed92:	637b      	str	r3, [r7, #52]	; 0x34
 800ed94:	f001 b823 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800ed98:	4b63      	ldr	r3, [pc, #396]	; (800ef28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ed9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ed9e:	f003 0302 	and.w	r3, r3, #2
 800eda2:	2b02      	cmp	r3, #2
 800eda4:	d108      	bne.n	800edb8 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800eda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800edac:	d104      	bne.n	800edb8 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800edae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800edb2:	637b      	str	r3, [r7, #52]	; 0x34
 800edb4:	f001 b813 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800edb8:	2300      	movs	r3, #0
 800edba:	637b      	str	r3, [r7, #52]	; 0x34
 800edbc:	f001 b80f 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800edc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800edc4:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
 800edc8:	430b      	orrs	r3, r1
 800edca:	d139      	bne.n	800ee40 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800edcc:	4b56      	ldr	r3, [pc, #344]	; (800ef28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800edce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800edd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800edd6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800edd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d104      	bne.n	800ede8 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800edde:	f7fe f81b 	bl	800ce18 <HAL_RCC_GetPCLK1Freq>
 800ede2:	6378      	str	r0, [r7, #52]	; 0x34
 800ede4:	f000 bffb 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800ede8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800edee:	d104      	bne.n	800edfa <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800edf0:	f7fd fef0 	bl	800cbd4 <HAL_RCC_GetSysClockFreq>
 800edf4:	6378      	str	r0, [r7, #52]	; 0x34
 800edf6:	f000 bff2 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800edfa:	4b4b      	ldr	r3, [pc, #300]	; (800ef28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ee02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee06:	d107      	bne.n	800ee18 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800ee08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ee0e:	d103      	bne.n	800ee18 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800ee10:	4b46      	ldr	r3, [pc, #280]	; (800ef2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ee12:	637b      	str	r3, [r7, #52]	; 0x34
 800ee14:	f000 bfe3 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800ee18:	4b43      	ldr	r3, [pc, #268]	; (800ef28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ee1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ee1e:	f003 0302 	and.w	r3, r3, #2
 800ee22:	2b02      	cmp	r3, #2
 800ee24:	d108      	bne.n	800ee38 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800ee26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ee2c:	d104      	bne.n	800ee38 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800ee2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee32:	637b      	str	r3, [r7, #52]	; 0x34
 800ee34:	f000 bfd3 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	637b      	str	r3, [r7, #52]	; 0x34
 800ee3c:	f000 bfcf 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800ee40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee44:	f1a2 0120 	sub.w	r1, r2, #32
 800ee48:	430b      	orrs	r3, r1
 800ee4a:	d158      	bne.n	800eefe <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800ee4c:	4b36      	ldr	r3, [pc, #216]	; (800ef28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ee4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ee52:	f003 0307 	and.w	r3, r3, #7
 800ee56:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800ee58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d104      	bne.n	800ee68 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800ee5e:	f7fe f803 	bl	800ce68 <HAL_RCC_GetPCLK3Freq>
 800ee62:	6378      	str	r0, [r7, #52]	; 0x34
 800ee64:	f000 bfbb 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800ee68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee6a:	2b01      	cmp	r3, #1
 800ee6c:	d104      	bne.n	800ee78 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ee6e:	f7fd feb1 	bl	800cbd4 <HAL_RCC_GetSysClockFreq>
 800ee72:	6378      	str	r0, [r7, #52]	; 0x34
 800ee74:	f000 bfb3 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800ee78:	4b2b      	ldr	r3, [pc, #172]	; (800ef28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ee80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee84:	d106      	bne.n	800ee94 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800ee86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee88:	2b02      	cmp	r3, #2
 800ee8a:	d103      	bne.n	800ee94 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800ee8c:	4b27      	ldr	r3, [pc, #156]	; (800ef2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ee8e:	637b      	str	r3, [r7, #52]	; 0x34
 800ee90:	f000 bfa5 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800ee94:	4b24      	ldr	r3, [pc, #144]	; (800ef28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ee96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ee9a:	f003 0302 	and.w	r3, r3, #2
 800ee9e:	2b02      	cmp	r3, #2
 800eea0:	d107      	bne.n	800eeb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800eea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eea4:	2b03      	cmp	r3, #3
 800eea6:	d104      	bne.n	800eeb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800eea8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eeac:	637b      	str	r3, [r7, #52]	; 0x34
 800eeae:	f000 bf96 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800eeb2:	4b1d      	ldr	r3, [pc, #116]	; (800ef28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	f003 0320 	and.w	r3, r3, #32
 800eeba:	2b20      	cmp	r3, #32
 800eebc:	d11b      	bne.n	800eef6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800eebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eec0:	2b04      	cmp	r3, #4
 800eec2:	d118      	bne.n	800eef6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800eec4:	4b18      	ldr	r3, [pc, #96]	; (800ef28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800eec6:	689b      	ldr	r3, [r3, #8]
 800eec8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d005      	beq.n	800eedc <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800eed0:	4b15      	ldr	r3, [pc, #84]	; (800ef28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800eed2:	689b      	ldr	r3, [r3, #8]
 800eed4:	0e1b      	lsrs	r3, r3, #24
 800eed6:	f003 030f 	and.w	r3, r3, #15
 800eeda:	e006      	b.n	800eeea <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800eedc:	4b12      	ldr	r3, [pc, #72]	; (800ef28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800eede:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800eee2:	041b      	lsls	r3, r3, #16
 800eee4:	0e1b      	lsrs	r3, r3, #24
 800eee6:	f003 030f 	and.w	r3, r3, #15
 800eeea:	4a11      	ldr	r2, [pc, #68]	; (800ef30 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800eeec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eef0:	637b      	str	r3, [r7, #52]	; 0x34
 800eef2:	f000 bf74 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800eef6:	2300      	movs	r3, #0
 800eef8:	637b      	str	r3, [r7, #52]	; 0x34
 800eefa:	f000 bf70 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800eefe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef02:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800ef06:	430b      	orrs	r3, r1
 800ef08:	d172      	bne.n	800eff0 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800ef0a:	4b07      	ldr	r3, [pc, #28]	; (800ef28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ef0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ef10:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ef14:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800ef16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef1c:	d10a      	bne.n	800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ef1e:	f7fd fe59 	bl	800cbd4 <HAL_RCC_GetSysClockFreq>
 800ef22:	6378      	str	r0, [r7, #52]	; 0x34
 800ef24:	f000 bf5b 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 800ef28:	46020c00 	.word	0x46020c00
 800ef2c:	00f42400 	.word	0x00f42400
 800ef30:	0802a7b4 	.word	0x0802a7b4
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800ef34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ef3a:	d108      	bne.n	800ef4e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef3c:	f107 0318 	add.w	r3, r7, #24
 800ef40:	4618      	mov	r0, r3
 800ef42:	f7ff f903 	bl	800e14c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800ef46:	6a3b      	ldr	r3, [r7, #32]
 800ef48:	637b      	str	r3, [r7, #52]	; 0x34
 800ef4a:	f000 bf48 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800ef4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d104      	bne.n	800ef5e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800ef54:	f7fd ff46 	bl	800cde4 <HAL_RCC_GetHCLKFreq>
 800ef58:	6378      	str	r0, [r7, #52]	; 0x34
 800ef5a:	f000 bf40 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800ef5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef60:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800ef64:	d122      	bne.n	800efac <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ef66:	4baa      	ldr	r3, [pc, #680]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	f003 0320 	and.w	r3, r3, #32
 800ef6e:	2b20      	cmp	r3, #32
 800ef70:	d118      	bne.n	800efa4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ef72:	4ba7      	ldr	r3, [pc, #668]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800ef74:	689b      	ldr	r3, [r3, #8]
 800ef76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d005      	beq.n	800ef8a <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800ef7e:	4ba4      	ldr	r3, [pc, #656]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800ef80:	689b      	ldr	r3, [r3, #8]
 800ef82:	0e1b      	lsrs	r3, r3, #24
 800ef84:	f003 030f 	and.w	r3, r3, #15
 800ef88:	e006      	b.n	800ef98 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800ef8a:	4ba1      	ldr	r3, [pc, #644]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800ef8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ef90:	041b      	lsls	r3, r3, #16
 800ef92:	0e1b      	lsrs	r3, r3, #24
 800ef94:	f003 030f 	and.w	r3, r3, #15
 800ef98:	4a9e      	ldr	r2, [pc, #632]	; (800f214 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800ef9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef9e:	637b      	str	r3, [r7, #52]	; 0x34
 800efa0:	f000 bf1d 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = 0U;
 800efa4:	2300      	movs	r3, #0
 800efa6:	637b      	str	r3, [r7, #52]	; 0x34
 800efa8:	f000 bf19 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800efac:	4b98      	ldr	r3, [pc, #608]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800efb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800efb8:	d107      	bne.n	800efca <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800efba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efbc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800efc0:	d103      	bne.n	800efca <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800efc2:	4b95      	ldr	r3, [pc, #596]	; (800f218 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800efc4:	637b      	str	r3, [r7, #52]	; 0x34
 800efc6:	f000 bf0a 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800efca:	4b91      	ldr	r3, [pc, #580]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800efd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800efd6:	d107      	bne.n	800efe8 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800efd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800efde:	d103      	bne.n	800efe8 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800efe0:	4b8d      	ldr	r3, [pc, #564]	; (800f218 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800efe2:	637b      	str	r3, [r7, #52]	; 0x34
 800efe4:	f000 befb 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800efe8:	2300      	movs	r3, #0
 800efea:	637b      	str	r3, [r7, #52]	; 0x34
 800efec:	f000 bef7 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800eff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eff4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800eff8:	430b      	orrs	r3, r1
 800effa:	d158      	bne.n	800f0ae <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800effc:	4b84      	ldr	r3, [pc, #528]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800effe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f002:	f003 0307 	and.w	r3, r3, #7
 800f006:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f00a:	2b04      	cmp	r3, #4
 800f00c:	d84b      	bhi.n	800f0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800f00e:	a201      	add	r2, pc, #4	; (adr r2, 800f014 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800f010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f014:	0800f04d 	.word	0x0800f04d
 800f018:	0800f029 	.word	0x0800f029
 800f01c:	0800f03b 	.word	0x0800f03b
 800f020:	0800f057 	.word	0x0800f057
 800f024:	0800f061 	.word	0x0800f061
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f028:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f02c:	4618      	mov	r0, r3
 800f02e:	f7fe ff25 	bl	800de7c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800f032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f034:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f036:	f000 bed2 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f03a:	f107 030c 	add.w	r3, r7, #12
 800f03e:	4618      	mov	r0, r3
 800f040:	f7ff f9ec 	bl	800e41c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800f044:	693b      	ldr	r3, [r7, #16]
 800f046:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f048:	f000 bec9 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800f04c:	f7fd feca 	bl	800cde4 <HAL_RCC_GetHCLKFreq>
 800f050:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f052:	f000 bec4 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800f056:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800f05a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f05c:	f000 bebf 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f060:	4b6b      	ldr	r3, [pc, #428]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	f003 0320 	and.w	r3, r3, #32
 800f068:	2b20      	cmp	r3, #32
 800f06a:	d118      	bne.n	800f09e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f06c:	4b68      	ldr	r3, [pc, #416]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f06e:	689b      	ldr	r3, [r3, #8]
 800f070:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f074:	2b00      	cmp	r3, #0
 800f076:	d005      	beq.n	800f084 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800f078:	4b65      	ldr	r3, [pc, #404]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f07a:	689b      	ldr	r3, [r3, #8]
 800f07c:	0e1b      	lsrs	r3, r3, #24
 800f07e:	f003 030f 	and.w	r3, r3, #15
 800f082:	e006      	b.n	800f092 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800f084:	4b62      	ldr	r3, [pc, #392]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f086:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f08a:	041b      	lsls	r3, r3, #16
 800f08c:	0e1b      	lsrs	r3, r3, #24
 800f08e:	f003 030f 	and.w	r3, r3, #15
 800f092:	4a60      	ldr	r2, [pc, #384]	; (800f214 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800f094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f098:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f09a:	f000 bea0 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f0a2:	f000 be9c 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f0aa:	f000 be98 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800f0ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f0b2:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800f0b6:	430b      	orrs	r3, r1
 800f0b8:	d167      	bne.n	800f18a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800f0ba:	4b55      	ldr	r3, [pc, #340]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f0bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f0c0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800f0c4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f0cc:	d036      	beq.n	800f13c <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800f0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f0d4:	d855      	bhi.n	800f182 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800f0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f0dc:	d029      	beq.n	800f132 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800f0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f0e4:	d84d      	bhi.n	800f182 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800f0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f0ec:	d013      	beq.n	800f116 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800f0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f0f4:	d845      	bhi.n	800f182 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800f0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d015      	beq.n	800f128 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800f0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f102:	d13e      	bne.n	800f182 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f108:	4618      	mov	r0, r3
 800f10a:	f7fe feb7 	bl	800de7c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800f10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f110:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f112:	f000 be64 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f116:	f107 030c 	add.w	r3, r7, #12
 800f11a:	4618      	mov	r0, r3
 800f11c:	f7ff f97e 	bl	800e41c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800f120:	693b      	ldr	r3, [r7, #16]
 800f122:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f124:	f000 be5b 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800f128:	f7fd fe5c 	bl	800cde4 <HAL_RCC_GetHCLKFreq>
 800f12c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f12e:	f000 be56 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800f132:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800f136:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f138:	f000 be51 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f13c:	4b34      	ldr	r3, [pc, #208]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	f003 0320 	and.w	r3, r3, #32
 800f144:	2b20      	cmp	r3, #32
 800f146:	d118      	bne.n	800f17a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f148:	4b31      	ldr	r3, [pc, #196]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f14a:	689b      	ldr	r3, [r3, #8]
 800f14c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f150:	2b00      	cmp	r3, #0
 800f152:	d005      	beq.n	800f160 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800f154:	4b2e      	ldr	r3, [pc, #184]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f156:	689b      	ldr	r3, [r3, #8]
 800f158:	0e1b      	lsrs	r3, r3, #24
 800f15a:	f003 030f 	and.w	r3, r3, #15
 800f15e:	e006      	b.n	800f16e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800f160:	4b2b      	ldr	r3, [pc, #172]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f162:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f166:	041b      	lsls	r3, r3, #16
 800f168:	0e1b      	lsrs	r3, r3, #24
 800f16a:	f003 030f 	and.w	r3, r3, #15
 800f16e:	4a29      	ldr	r2, [pc, #164]	; (800f214 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800f170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f174:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f176:	f000 be32 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800f17a:	2300      	movs	r3, #0
 800f17c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f17e:	f000 be2e 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 800f182:	2300      	movs	r3, #0
 800f184:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f186:	f000 be2a 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800f18a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f18e:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800f192:	430b      	orrs	r3, r1
 800f194:	d153      	bne.n	800f23e <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800f196:	4b1e      	ldr	r3, [pc, #120]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f19c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f1a0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800f1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d104      	bne.n	800f1b2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f1a8:	f7fd fe36 	bl	800ce18 <HAL_RCC_GetPCLK1Freq>
 800f1ac:	6378      	str	r0, [r7, #52]	; 0x34
 800f1ae:	f000 be16 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800f1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f1b8:	d104      	bne.n	800f1c4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f1ba:	f7fd fd0b 	bl	800cbd4 <HAL_RCC_GetSysClockFreq>
 800f1be:	6378      	str	r0, [r7, #52]	; 0x34
 800f1c0:	f000 be0d 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800f1c4:	4b12      	ldr	r3, [pc, #72]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f1cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f1d0:	d107      	bne.n	800f1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800f1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f1d8:	d103      	bne.n	800f1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800f1da:	4b0f      	ldr	r3, [pc, #60]	; (800f218 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800f1dc:	637b      	str	r3, [r7, #52]	; 0x34
 800f1de:	f000 bdfe 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800f1e2:	4b0b      	ldr	r3, [pc, #44]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	f003 0320 	and.w	r3, r3, #32
 800f1ea:	2b20      	cmp	r3, #32
 800f1ec:	d123      	bne.n	800f236 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 800f1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f1f4:	d11f      	bne.n	800f236 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f1f6:	4b06      	ldr	r3, [pc, #24]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f1f8:	689b      	ldr	r3, [r3, #8]
 800f1fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d00c      	beq.n	800f21c <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800f202:	4b03      	ldr	r3, [pc, #12]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f204:	689b      	ldr	r3, [r3, #8]
 800f206:	0e1b      	lsrs	r3, r3, #24
 800f208:	f003 030f 	and.w	r3, r3, #15
 800f20c:	e00d      	b.n	800f22a <HAL_RCCEx_GetPeriphCLKFreq+0xb3e>
 800f20e:	bf00      	nop
 800f210:	46020c00 	.word	0x46020c00
 800f214:	0802a7b4 	.word	0x0802a7b4
 800f218:	00f42400 	.word	0x00f42400
 800f21c:	4ba0      	ldr	r3, [pc, #640]	; (800f4a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f21e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f222:	041b      	lsls	r3, r3, #16
 800f224:	0e1b      	lsrs	r3, r3, #24
 800f226:	f003 030f 	and.w	r3, r3, #15
 800f22a:	4a9e      	ldr	r2, [pc, #632]	; (800f4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 800f22c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f230:	637b      	str	r3, [r7, #52]	; 0x34
 800f232:	f000 bdd4 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800f236:	2300      	movs	r3, #0
 800f238:	637b      	str	r3, [r7, #52]	; 0x34
 800f23a:	f000 bdd0 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800f23e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f242:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800f246:	430b      	orrs	r3, r1
 800f248:	d14c      	bne.n	800f2e4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf8>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800f24a:	4b95      	ldr	r3, [pc, #596]	; (800f4a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f24c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f250:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800f254:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800f256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d104      	bne.n	800f266 <HAL_RCCEx_GetPeriphCLKFreq+0xb7a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f25c:	f7fd fddc 	bl	800ce18 <HAL_RCC_GetPCLK1Freq>
 800f260:	6378      	str	r0, [r7, #52]	; 0x34
 800f262:	f000 bdbc 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800f266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f26c:	d104      	bne.n	800f278 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f26e:	f7fd fcb1 	bl	800cbd4 <HAL_RCC_GetSysClockFreq>
 800f272:	6378      	str	r0, [r7, #52]	; 0x34
 800f274:	f000 bdb3 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800f278:	4b89      	ldr	r3, [pc, #548]	; (800f4a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f284:	d107      	bne.n	800f296 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 800f286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f28c:	d103      	bne.n	800f296 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
    {
      frequency = HSI_VALUE;
 800f28e:	4b86      	ldr	r3, [pc, #536]	; (800f4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xdbc>)
 800f290:	637b      	str	r3, [r7, #52]	; 0x34
 800f292:	f000 bda4 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800f296:	4b82      	ldr	r3, [pc, #520]	; (800f4a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	f003 0320 	and.w	r3, r3, #32
 800f29e:	2b20      	cmp	r3, #32
 800f2a0:	d11c      	bne.n	800f2dc <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
 800f2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f2a8:	d118      	bne.n	800f2dc <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f2aa:	4b7d      	ldr	r3, [pc, #500]	; (800f4a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f2ac:	689b      	ldr	r3, [r3, #8]
 800f2ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d005      	beq.n	800f2c2 <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 800f2b6:	4b7a      	ldr	r3, [pc, #488]	; (800f4a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f2b8:	689b      	ldr	r3, [r3, #8]
 800f2ba:	0e1b      	lsrs	r3, r3, #24
 800f2bc:	f003 030f 	and.w	r3, r3, #15
 800f2c0:	e006      	b.n	800f2d0 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 800f2c2:	4b77      	ldr	r3, [pc, #476]	; (800f4a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f2c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f2c8:	041b      	lsls	r3, r3, #16
 800f2ca:	0e1b      	lsrs	r3, r3, #24
 800f2cc:	f003 030f 	and.w	r3, r3, #15
 800f2d0:	4a74      	ldr	r2, [pc, #464]	; (800f4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 800f2d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2d6:	637b      	str	r3, [r7, #52]	; 0x34
 800f2d8:	f000 bd81 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800f2dc:	2300      	movs	r3, #0
 800f2de:	637b      	str	r3, [r7, #52]	; 0x34
 800f2e0:	f000 bd7d 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800f2e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f2e8:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800f2ec:	430b      	orrs	r3, r1
 800f2ee:	d158      	bne.n	800f3a2 <HAL_RCCEx_GetPeriphCLKFreq+0xcb6>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800f2f0:	4b6b      	ldr	r3, [pc, #428]	; (800f4a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f2f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f2f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f2fa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2fe:	2bc0      	cmp	r3, #192	; 0xc0
 800f300:	d028      	beq.n	800f354 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
 800f302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f304:	2bc0      	cmp	r3, #192	; 0xc0
 800f306:	d848      	bhi.n	800f39a <HAL_RCCEx_GetPeriphCLKFreq+0xcae>
 800f308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f30a:	2b80      	cmp	r3, #128	; 0x80
 800f30c:	d00e      	beq.n	800f32c <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
 800f30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f310:	2b80      	cmp	r3, #128	; 0x80
 800f312:	d842      	bhi.n	800f39a <HAL_RCCEx_GetPeriphCLKFreq+0xcae>
 800f314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f316:	2b00      	cmp	r3, #0
 800f318:	d003      	beq.n	800f322 <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
 800f31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f31c:	2b40      	cmp	r3, #64	; 0x40
 800f31e:	d014      	beq.n	800f34a <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
 800f320:	e03b      	b.n	800f39a <HAL_RCCEx_GetPeriphCLKFreq+0xcae>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800f322:	f7fd fda1 	bl	800ce68 <HAL_RCC_GetPCLK3Freq>
 800f326:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f328:	f000 bd59 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f32c:	4b5c      	ldr	r3, [pc, #368]	; (800f4a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f338:	d103      	bne.n	800f342 <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
        {
          frequency = HSI_VALUE;
 800f33a:	4b5b      	ldr	r3, [pc, #364]	; (800f4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xdbc>)
 800f33c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f33e:	f000 bd4e 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800f342:	2300      	movs	r3, #0
 800f344:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f346:	f000 bd4a 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800f34a:	f7fd fc43 	bl	800cbd4 <HAL_RCC_GetSysClockFreq>
 800f34e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f350:	f000 bd45 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f354:	4b52      	ldr	r3, [pc, #328]	; (800f4a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	f003 0320 	and.w	r3, r3, #32
 800f35c:	2b20      	cmp	r3, #32
 800f35e:	d118      	bne.n	800f392 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f360:	4b4f      	ldr	r3, [pc, #316]	; (800f4a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f362:	689b      	ldr	r3, [r3, #8]
 800f364:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d005      	beq.n	800f378 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
 800f36c:	4b4c      	ldr	r3, [pc, #304]	; (800f4a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f36e:	689b      	ldr	r3, [r3, #8]
 800f370:	0e1b      	lsrs	r3, r3, #24
 800f372:	f003 030f 	and.w	r3, r3, #15
 800f376:	e006      	b.n	800f386 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800f378:	4b49      	ldr	r3, [pc, #292]	; (800f4a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f37a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f37e:	041b      	lsls	r3, r3, #16
 800f380:	0e1b      	lsrs	r3, r3, #24
 800f382:	f003 030f 	and.w	r3, r3, #15
 800f386:	4a47      	ldr	r2, [pc, #284]	; (800f4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 800f388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f38c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f38e:	f000 bd26 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800f392:	2300      	movs	r3, #0
 800f394:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f396:	f000 bd22 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      default:
      {
        frequency = 0U;
 800f39a:	2300      	movs	r3, #0
 800f39c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f39e:	f000 bd1e 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800f3a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f3a6:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800f3aa:	430b      	orrs	r3, r1
 800f3ac:	d14c      	bne.n	800f448 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800f3ae:	4b3c      	ldr	r3, [pc, #240]	; (800f4a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f3b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f3b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800f3b8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800f3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d104      	bne.n	800f3ca <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f3c0:	f7fd fd2a 	bl	800ce18 <HAL_RCC_GetPCLK1Freq>
 800f3c4:	6378      	str	r0, [r7, #52]	; 0x34
 800f3c6:	f000 bd0a 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800f3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f3d0:	d104      	bne.n	800f3dc <HAL_RCCEx_GetPeriphCLKFreq+0xcf0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f3d2:	f7fd fbff 	bl	800cbd4 <HAL_RCC_GetSysClockFreq>
 800f3d6:	6378      	str	r0, [r7, #52]	; 0x34
 800f3d8:	f000 bd01 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800f3dc:	4b30      	ldr	r3, [pc, #192]	; (800f4a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f3e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f3e8:	d107      	bne.n	800f3fa <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
 800f3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f3f0:	d103      	bne.n	800f3fa <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
    {
      frequency = HSI_VALUE;
 800f3f2:	4b2d      	ldr	r3, [pc, #180]	; (800f4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xdbc>)
 800f3f4:	637b      	str	r3, [r7, #52]	; 0x34
 800f3f6:	f000 bcf2 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800f3fa:	4b29      	ldr	r3, [pc, #164]	; (800f4a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	f003 0320 	and.w	r3, r3, #32
 800f402:	2b20      	cmp	r3, #32
 800f404:	d11c      	bne.n	800f440 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 800f406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f408:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f40c:	d118      	bne.n	800f440 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f40e:	4b24      	ldr	r3, [pc, #144]	; (800f4a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f410:	689b      	ldr	r3, [r3, #8]
 800f412:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f416:	2b00      	cmp	r3, #0
 800f418:	d005      	beq.n	800f426 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 800f41a:	4b21      	ldr	r3, [pc, #132]	; (800f4a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f41c:	689b      	ldr	r3, [r3, #8]
 800f41e:	0e1b      	lsrs	r3, r3, #24
 800f420:	f003 030f 	and.w	r3, r3, #15
 800f424:	e006      	b.n	800f434 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>
 800f426:	4b1e      	ldr	r3, [pc, #120]	; (800f4a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f428:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f42c:	041b      	lsls	r3, r3, #16
 800f42e:	0e1b      	lsrs	r3, r3, #24
 800f430:	f003 030f 	and.w	r3, r3, #15
 800f434:	4a1b      	ldr	r2, [pc, #108]	; (800f4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 800f436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f43a:	637b      	str	r3, [r7, #52]	; 0x34
 800f43c:	f000 bccf 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800f440:	2300      	movs	r3, #0
 800f442:	637b      	str	r3, [r7, #52]	; 0x34
 800f444:	f000 bccb 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800f448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f44c:	f102 4140 	add.w	r1, r2, #3221225472	; 0xc0000000
 800f450:	430b      	orrs	r3, r1
 800f452:	d152      	bne.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800f454:	4b12      	ldr	r3, [pc, #72]	; (800f4a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f456:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f45a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800f45e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800f460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f462:	2b00      	cmp	r3, #0
 800f464:	d104      	bne.n	800f470 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f466:	f7fd fcd7 	bl	800ce18 <HAL_RCC_GetPCLK1Freq>
 800f46a:	6378      	str	r0, [r7, #52]	; 0x34
 800f46c:	f000 bcb7 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800f470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f472:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f476:	d104      	bne.n	800f482 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f478:	f7fd fbac 	bl	800cbd4 <HAL_RCC_GetSysClockFreq>
 800f47c:	6378      	str	r0, [r7, #52]	; 0x34
 800f47e:	f000 bcae 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800f482:	4b07      	ldr	r3, [pc, #28]	; (800f4a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f48a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f48e:	d10d      	bne.n	800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0xdc0>
 800f490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f492:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f496:	d109      	bne.n	800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0xdc0>
    {
      frequency = HSI_VALUE;
 800f498:	4b03      	ldr	r3, [pc, #12]	; (800f4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xdbc>)
 800f49a:	637b      	str	r3, [r7, #52]	; 0x34
 800f49c:	f000 bc9f 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 800f4a0:	46020c00 	.word	0x46020c00
 800f4a4:	0802a7b4 	.word	0x0802a7b4
 800f4a8:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800f4ac:	4ba6      	ldr	r3, [pc, #664]	; (800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	f003 0320 	and.w	r3, r3, #32
 800f4b4:	2b20      	cmp	r3, #32
 800f4b6:	d11c      	bne.n	800f4f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
 800f4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f4be:	d118      	bne.n	800f4f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f4c0:	4ba1      	ldr	r3, [pc, #644]	; (800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f4c2:	689b      	ldr	r3, [r3, #8]
 800f4c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d005      	beq.n	800f4d8 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800f4cc:	4b9e      	ldr	r3, [pc, #632]	; (800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f4ce:	689b      	ldr	r3, [r3, #8]
 800f4d0:	0e1b      	lsrs	r3, r3, #24
 800f4d2:	f003 030f 	and.w	r3, r3, #15
 800f4d6:	e006      	b.n	800f4e6 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
 800f4d8:	4b9b      	ldr	r3, [pc, #620]	; (800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f4da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f4de:	041b      	lsls	r3, r3, #16
 800f4e0:	0e1b      	lsrs	r3, r3, #24
 800f4e2:	f003 030f 	and.w	r3, r3, #15
 800f4e6:	4a99      	ldr	r2, [pc, #612]	; (800f74c <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 800f4e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4ec:	637b      	str	r3, [r7, #52]	; 0x34
 800f4ee:	f000 bc76 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	637b      	str	r3, [r7, #52]	; 0x34
 800f4f6:	f000 bc72 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800f4fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f4fe:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 800f502:	430b      	orrs	r3, r1
 800f504:	d14c      	bne.n	800f5a0 <HAL_RCCEx_GetPeriphCLKFreq+0xeb4>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800f506:	4b90      	ldr	r3, [pc, #576]	; (800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f508:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f50c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800f510:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800f512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f514:	2b00      	cmp	r3, #0
 800f516:	d104      	bne.n	800f522 <HAL_RCCEx_GetPeriphCLKFreq+0xe36>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f518:	f7fd fc7e 	bl	800ce18 <HAL_RCC_GetPCLK1Freq>
 800f51c:	6378      	str	r0, [r7, #52]	; 0x34
 800f51e:	f000 bc5e 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800f522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f524:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f528:	d104      	bne.n	800f534 <HAL_RCCEx_GetPeriphCLKFreq+0xe48>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f52a:	f7fd fb53 	bl	800cbd4 <HAL_RCC_GetSysClockFreq>
 800f52e:	6378      	str	r0, [r7, #52]	; 0x34
 800f530:	f000 bc55 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800f534:	4b84      	ldr	r3, [pc, #528]	; (800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f53c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f540:	d107      	bne.n	800f552 <HAL_RCCEx_GetPeriphCLKFreq+0xe66>
 800f542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f544:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f548:	d103      	bne.n	800f552 <HAL_RCCEx_GetPeriphCLKFreq+0xe66>
    {
      frequency = HSI_VALUE;
 800f54a:	4b81      	ldr	r3, [pc, #516]	; (800f750 <HAL_RCCEx_GetPeriphCLKFreq+0x1064>)
 800f54c:	637b      	str	r3, [r7, #52]	; 0x34
 800f54e:	f000 bc46 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800f552:	4b7d      	ldr	r3, [pc, #500]	; (800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	f003 0320 	and.w	r3, r3, #32
 800f55a:	2b20      	cmp	r3, #32
 800f55c:	d11c      	bne.n	800f598 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
 800f55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f560:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800f564:	d118      	bne.n	800f598 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f566:	4b78      	ldr	r3, [pc, #480]	; (800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f568:	689b      	ldr	r3, [r3, #8]
 800f56a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d005      	beq.n	800f57e <HAL_RCCEx_GetPeriphCLKFreq+0xe92>
 800f572:	4b75      	ldr	r3, [pc, #468]	; (800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f574:	689b      	ldr	r3, [r3, #8]
 800f576:	0e1b      	lsrs	r3, r3, #24
 800f578:	f003 030f 	and.w	r3, r3, #15
 800f57c:	e006      	b.n	800f58c <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 800f57e:	4b72      	ldr	r3, [pc, #456]	; (800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f580:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f584:	041b      	lsls	r3, r3, #16
 800f586:	0e1b      	lsrs	r3, r3, #24
 800f588:	f003 030f 	and.w	r3, r3, #15
 800f58c:	4a6f      	ldr	r2, [pc, #444]	; (800f74c <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 800f58e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f592:	637b      	str	r3, [r7, #52]	; 0x34
 800f594:	f000 bc23 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800f598:	2300      	movs	r3, #0
 800f59a:	637b      	str	r3, [r7, #52]	; 0x34
 800f59c:	f000 bc1f 	b.w	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800f5a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5a4:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800f5a8:	430b      	orrs	r3, r1
 800f5aa:	d164      	bne.n	800f676 <HAL_RCCEx_GetPeriphCLKFreq+0xf8a>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800f5ac:	4b66      	ldr	r3, [pc, #408]	; (800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f5ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f5b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f5b6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800f5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d120      	bne.n	800f600 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f5be:	4b62      	ldr	r3, [pc, #392]	; (800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	f003 0320 	and.w	r3, r3, #32
 800f5c6:	2b20      	cmp	r3, #32
 800f5c8:	d117      	bne.n	800f5fa <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f5ca:	4b5f      	ldr	r3, [pc, #380]	; (800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f5cc:	689b      	ldr	r3, [r3, #8]
 800f5ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d005      	beq.n	800f5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
 800f5d6:	4b5c      	ldr	r3, [pc, #368]	; (800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f5d8:	689b      	ldr	r3, [r3, #8]
 800f5da:	0e1b      	lsrs	r3, r3, #24
 800f5dc:	f003 030f 	and.w	r3, r3, #15
 800f5e0:	e006      	b.n	800f5f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 800f5e2:	4b59      	ldr	r3, [pc, #356]	; (800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f5e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f5e8:	041b      	lsls	r3, r3, #16
 800f5ea:	0e1b      	lsrs	r3, r3, #24
 800f5ec:	f003 030f 	and.w	r3, r3, #15
 800f5f0:	4a56      	ldr	r2, [pc, #344]	; (800f74c <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 800f5f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5f6:	637b      	str	r3, [r7, #52]	; 0x34
 800f5f8:	e3f1      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = 0U;
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	637b      	str	r3, [r7, #52]	; 0x34
 800f5fe:	e3ee      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800f600:	4b51      	ldr	r3, [pc, #324]	; (800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f602:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f606:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f60a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f60e:	d112      	bne.n	800f636 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800f610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f616:	d10e      	bne.n	800f636 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f618:	4b4b      	ldr	r3, [pc, #300]	; (800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f61a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f61e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f622:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f626:	d102      	bne.n	800f62e <HAL_RCCEx_GetPeriphCLKFreq+0xf42>
      {
        frequency = LSI_VALUE / 128U;
 800f628:	23fa      	movs	r3, #250	; 0xfa
 800f62a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f62c:	e3d7      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = LSI_VALUE;
 800f62e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800f632:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f634:	e3d3      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800f636:	4b44      	ldr	r3, [pc, #272]	; (800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f63e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f642:	d106      	bne.n	800f652 <HAL_RCCEx_GetPeriphCLKFreq+0xf66>
 800f644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f64a:	d102      	bne.n	800f652 <HAL_RCCEx_GetPeriphCLKFreq+0xf66>
    {
      frequency = HSI_VALUE;
 800f64c:	4b40      	ldr	r3, [pc, #256]	; (800f750 <HAL_RCCEx_GetPeriphCLKFreq+0x1064>)
 800f64e:	637b      	str	r3, [r7, #52]	; 0x34
 800f650:	e3c5      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800f652:	4b3d      	ldr	r3, [pc, #244]	; (800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f654:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f658:	f003 0302 	and.w	r3, r3, #2
 800f65c:	2b02      	cmp	r3, #2
 800f65e:	d107      	bne.n	800f670 <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
 800f660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f662:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f666:	d103      	bne.n	800f670 <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
    {
      frequency = LSE_VALUE;
 800f668:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f66c:	637b      	str	r3, [r7, #52]	; 0x34
 800f66e:	e3b6      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800f670:	2300      	movs	r3, #0
 800f672:	637b      	str	r3, [r7, #52]	; 0x34
 800f674:	e3b3      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800f676:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f67a:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800f67e:	430b      	orrs	r3, r1
 800f680:	d16b      	bne.n	800f75a <HAL_RCCEx_GetPeriphCLKFreq+0x106e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800f682:	4b31      	ldr	r3, [pc, #196]	; (800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f684:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f688:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f68c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800f68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f690:	2b00      	cmp	r3, #0
 800f692:	d120      	bne.n	800f6d6 <HAL_RCCEx_GetPeriphCLKFreq+0xfea>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f694:	4b2c      	ldr	r3, [pc, #176]	; (800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	f003 0320 	and.w	r3, r3, #32
 800f69c:	2b20      	cmp	r3, #32
 800f69e:	d117      	bne.n	800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f6a0:	4b29      	ldr	r3, [pc, #164]	; (800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f6a2:	689b      	ldr	r3, [r3, #8]
 800f6a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d005      	beq.n	800f6b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 800f6ac:	4b26      	ldr	r3, [pc, #152]	; (800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f6ae:	689b      	ldr	r3, [r3, #8]
 800f6b0:	0e1b      	lsrs	r3, r3, #24
 800f6b2:	f003 030f 	and.w	r3, r3, #15
 800f6b6:	e006      	b.n	800f6c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
 800f6b8:	4b23      	ldr	r3, [pc, #140]	; (800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f6ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f6be:	041b      	lsls	r3, r3, #16
 800f6c0:	0e1b      	lsrs	r3, r3, #24
 800f6c2:	f003 030f 	and.w	r3, r3, #15
 800f6c6:	4a21      	ldr	r2, [pc, #132]	; (800f74c <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 800f6c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6cc:	637b      	str	r3, [r7, #52]	; 0x34
 800f6ce:	e386      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = 0U;
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	637b      	str	r3, [r7, #52]	; 0x34
 800f6d4:	e383      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800f6d6:	4b1c      	ldr	r3, [pc, #112]	; (800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f6d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f6dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f6e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f6e4:	d112      	bne.n	800f70c <HAL_RCCEx_GetPeriphCLKFreq+0x1020>
 800f6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f6ec:	d10e      	bne.n	800f70c <HAL_RCCEx_GetPeriphCLKFreq+0x1020>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f6ee:	4b16      	ldr	r3, [pc, #88]	; (800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f6f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f6f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f6f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f6fc:	d102      	bne.n	800f704 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
      {
        frequency = LSI_VALUE / 128U;
 800f6fe:	23fa      	movs	r3, #250	; 0xfa
 800f700:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f702:	e36c      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = LSI_VALUE;
 800f704:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800f708:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f70a:	e368      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800f70c:	4b0e      	ldr	r3, [pc, #56]	; (800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f718:	d106      	bne.n	800f728 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>
 800f71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f71c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f720:	d102      	bne.n	800f728 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>
    {
      frequency = HSI_VALUE;
 800f722:	4b0b      	ldr	r3, [pc, #44]	; (800f750 <HAL_RCCEx_GetPeriphCLKFreq+0x1064>)
 800f724:	637b      	str	r3, [r7, #52]	; 0x34
 800f726:	e35a      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800f728:	4b07      	ldr	r3, [pc, #28]	; (800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f72a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f72e:	f003 0302 	and.w	r3, r3, #2
 800f732:	2b02      	cmp	r3, #2
 800f734:	d10e      	bne.n	800f754 <HAL_RCCEx_GetPeriphCLKFreq+0x1068>
 800f736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f738:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f73c:	d10a      	bne.n	800f754 <HAL_RCCEx_GetPeriphCLKFreq+0x1068>
    {
      frequency = LSE_VALUE;
 800f73e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f742:	637b      	str	r3, [r7, #52]	; 0x34
 800f744:	e34b      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 800f746:	bf00      	nop
 800f748:	46020c00 	.word	0x46020c00
 800f74c:	0802a7b4 	.word	0x0802a7b4
 800f750:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800f754:	2300      	movs	r3, #0
 800f756:	637b      	str	r3, [r7, #52]	; 0x34
 800f758:	e341      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800f75a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f75e:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800f762:	430b      	orrs	r3, r1
 800f764:	d147      	bne.n	800f7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x110a>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800f766:	4b9b      	ldr	r3, [pc, #620]	; (800f9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f76c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800f770:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800f772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f774:	2b00      	cmp	r3, #0
 800f776:	d103      	bne.n	800f780 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f778:	f7fd fb4e 	bl	800ce18 <HAL_RCC_GetPCLK1Freq>
 800f77c:	6378      	str	r0, [r7, #52]	; 0x34
 800f77e:	e32e      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800f780:	4b94      	ldr	r3, [pc, #592]	; (800f9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f782:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f786:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f78a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f78e:	d112      	bne.n	800f7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
 800f790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f792:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f796:	d10e      	bne.n	800f7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f798:	4b8e      	ldr	r3, [pc, #568]	; (800f9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f79a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f79e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f7a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f7a6:	d102      	bne.n	800f7ae <HAL_RCCEx_GetPeriphCLKFreq+0x10c2>
      {
        frequency = LSI_VALUE / 128U;
 800f7a8:	23fa      	movs	r3, #250	; 0xfa
 800f7aa:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f7ac:	e317      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = LSI_VALUE;
 800f7ae:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800f7b2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f7b4:	e313      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800f7b6:	4b87      	ldr	r3, [pc, #540]	; (800f9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f7be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f7c2:	d106      	bne.n	800f7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e6>
 800f7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800f7ca:	d102      	bne.n	800f7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e6>
    {
      frequency = HSI_VALUE;
 800f7cc:	4b82      	ldr	r3, [pc, #520]	; (800f9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f7ce:	637b      	str	r3, [r7, #52]	; 0x34
 800f7d0:	e305      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800f7d2:	4b80      	ldr	r3, [pc, #512]	; (800f9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f7d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f7d8:	f003 0302 	and.w	r3, r3, #2
 800f7dc:	2b02      	cmp	r3, #2
 800f7de:	d107      	bne.n	800f7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
 800f7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7e2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800f7e6:	d103      	bne.n	800f7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
    {
      frequency = LSE_VALUE;
 800f7e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f7ec:	637b      	str	r3, [r7, #52]	; 0x34
 800f7ee:	e2f6      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	637b      	str	r3, [r7, #52]	; 0x34
 800f7f4:	e2f3      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800f7f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f7fa:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800f7fe:	430b      	orrs	r3, r1
 800f800:	d12d      	bne.n	800f85e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800f802:	4b74      	ldr	r3, [pc, #464]	; (800f9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f808:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800f80c:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800f80e:	4b71      	ldr	r3, [pc, #452]	; (800f9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f816:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f81a:	d105      	bne.n	800f828 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800f81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d102      	bne.n	800f828 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
    {
      frequency = HSE_VALUE;
 800f822:	4b6d      	ldr	r3, [pc, #436]	; (800f9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f824:	637b      	str	r3, [r7, #52]	; 0x34
 800f826:	e2da      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800f828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f82a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f82e:	d107      	bne.n	800f840 <HAL_RCCEx_GetPeriphCLKFreq+0x1154>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f834:	4618      	mov	r0, r3
 800f836:	f7fe fb21 	bl	800de7c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800f83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f83c:	637b      	str	r3, [r7, #52]	; 0x34
 800f83e:	e2ce      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800f840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f842:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f846:	d107      	bne.n	800f858 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f848:	f107 0318 	add.w	r3, r7, #24
 800f84c:	4618      	mov	r0, r3
 800f84e:	f7fe fc7d 	bl	800e14c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800f852:	69bb      	ldr	r3, [r7, #24]
 800f854:	637b      	str	r3, [r7, #52]	; 0x34
 800f856:	e2c2      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800f858:	2300      	movs	r3, #0
 800f85a:	637b      	str	r3, [r7, #52]	; 0x34
 800f85c:	e2bf      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800f85e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f862:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800f866:	430b      	orrs	r3, r1
 800f868:	d156      	bne.n	800f918 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800f86a:	4b5a      	ldr	r3, [pc, #360]	; (800f9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f86c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f870:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800f874:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800f876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f878:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f87c:	d028      	beq.n	800f8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>
 800f87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f880:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f884:	d845      	bhi.n	800f912 <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
 800f886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f888:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f88c:	d013      	beq.n	800f8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x11ca>
 800f88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f890:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f894:	d83d      	bhi.n	800f912 <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
 800f896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d004      	beq.n	800f8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x11ba>
 800f89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f89e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f8a2:	d004      	beq.n	800f8ae <HAL_RCCEx_GetPeriphCLKFreq+0x11c2>
 800f8a4:	e035      	b.n	800f912 <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800f8a6:	f7fd facb 	bl	800ce40 <HAL_RCC_GetPCLK2Freq>
 800f8aa:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f8ac:	e297      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800f8ae:	f7fd f991 	bl	800cbd4 <HAL_RCC_GetSysClockFreq>
 800f8b2:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f8b4:	e293      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f8b6:	4b47      	ldr	r3, [pc, #284]	; (800f9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f8be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f8c2:	d102      	bne.n	800f8ca <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        {
          frequency = HSI_VALUE;
 800f8c4:	4b44      	ldr	r3, [pc, #272]	; (800f9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f8c6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f8c8:	e289      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f8ce:	e286      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f8d0:	4b40      	ldr	r3, [pc, #256]	; (800f9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	f003 0320 	and.w	r3, r3, #32
 800f8d8:	2b20      	cmp	r3, #32
 800f8da:	d117      	bne.n	800f90c <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f8dc:	4b3d      	ldr	r3, [pc, #244]	; (800f9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f8de:	689b      	ldr	r3, [r3, #8]
 800f8e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d005      	beq.n	800f8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800f8e8:	4b3a      	ldr	r3, [pc, #232]	; (800f9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f8ea:	689b      	ldr	r3, [r3, #8]
 800f8ec:	0e1b      	lsrs	r3, r3, #24
 800f8ee:	f003 030f 	and.w	r3, r3, #15
 800f8f2:	e006      	b.n	800f902 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 800f8f4:	4b37      	ldr	r3, [pc, #220]	; (800f9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f8f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f8fa:	041b      	lsls	r3, r3, #16
 800f8fc:	0e1b      	lsrs	r3, r3, #24
 800f8fe:	f003 030f 	and.w	r3, r3, #15
 800f902:	4a36      	ldr	r2, [pc, #216]	; (800f9dc <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 800f904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f908:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f90a:	e268      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800f90c:	2300      	movs	r3, #0
 800f90e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f910:	e265      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 800f912:	2300      	movs	r3, #0
 800f914:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f916:	e262      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800f918:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f91c:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800f920:	430b      	orrs	r3, r1
 800f922:	d15d      	bne.n	800f9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800f924:	4b2b      	ldr	r3, [pc, #172]	; (800f9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f92a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f92e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800f930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f932:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f936:	d028      	beq.n	800f98a <HAL_RCCEx_GetPeriphCLKFreq+0x129e>
 800f938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f93a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f93e:	d845      	bhi.n	800f9cc <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
 800f940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f942:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f946:	d013      	beq.n	800f970 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>
 800f948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f94a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f94e:	d83d      	bhi.n	800f9cc <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
 800f950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f952:	2b00      	cmp	r3, #0
 800f954:	d004      	beq.n	800f960 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>
 800f956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f95c:	d004      	beq.n	800f968 <HAL_RCCEx_GetPeriphCLKFreq+0x127c>
 800f95e:	e035      	b.n	800f9cc <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800f960:	f7fd fa5a 	bl	800ce18 <HAL_RCC_GetPCLK1Freq>
 800f964:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f966:	e23a      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800f968:	f7fd f934 	bl	800cbd4 <HAL_RCC_GetSysClockFreq>
 800f96c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f96e:	e236      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f970:	4b18      	ldr	r3, [pc, #96]	; (800f9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f97c:	d102      	bne.n	800f984 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
        {
          frequency = HSI_VALUE;
 800f97e:	4b16      	ldr	r3, [pc, #88]	; (800f9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800f980:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f982:	e22c      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800f984:	2300      	movs	r3, #0
 800f986:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f988:	e229      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f98a:	4b12      	ldr	r3, [pc, #72]	; (800f9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	f003 0320 	and.w	r3, r3, #32
 800f992:	2b20      	cmp	r3, #32
 800f994:	d117      	bne.n	800f9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f996:	4b0f      	ldr	r3, [pc, #60]	; (800f9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f998:	689b      	ldr	r3, [r3, #8]
 800f99a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d005      	beq.n	800f9ae <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 800f9a2:	4b0c      	ldr	r3, [pc, #48]	; (800f9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f9a4:	689b      	ldr	r3, [r3, #8]
 800f9a6:	0e1b      	lsrs	r3, r3, #24
 800f9a8:	f003 030f 	and.w	r3, r3, #15
 800f9ac:	e006      	b.n	800f9bc <HAL_RCCEx_GetPeriphCLKFreq+0x12d0>
 800f9ae:	4b09      	ldr	r3, [pc, #36]	; (800f9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800f9b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f9b4:	041b      	lsls	r3, r3, #16
 800f9b6:	0e1b      	lsrs	r3, r3, #24
 800f9b8:	f003 030f 	and.w	r3, r3, #15
 800f9bc:	4a07      	ldr	r2, [pc, #28]	; (800f9dc <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 800f9be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9c2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f9c4:	e20b      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f9ca:	e208      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f9d0:	e205      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 800f9d2:	bf00      	nop
 800f9d4:	46020c00 	.word	0x46020c00
 800f9d8:	00f42400 	.word	0x00f42400
 800f9dc:	0802a7b4 	.word	0x0802a7b4
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800f9e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f9e4:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800f9e8:	430b      	orrs	r3, r1
 800f9ea:	d176      	bne.n	800fada <HAL_RCCEx_GetPeriphCLKFreq+0x13ee>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800f9ec:	4ba6      	ldr	r3, [pc, #664]	; (800fc88 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800f9ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f9f2:	f003 0318 	and.w	r3, r3, #24
 800f9f6:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800f9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9fa:	2b18      	cmp	r3, #24
 800f9fc:	d86a      	bhi.n	800fad4 <HAL_RCCEx_GetPeriphCLKFreq+0x13e8>
 800f9fe:	a201      	add	r2, pc, #4	; (adr r2, 800fa04 <HAL_RCCEx_GetPeriphCLKFreq+0x1318>)
 800fa00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa04:	0800fa69 	.word	0x0800fa69
 800fa08:	0800fad5 	.word	0x0800fad5
 800fa0c:	0800fad5 	.word	0x0800fad5
 800fa10:	0800fad5 	.word	0x0800fad5
 800fa14:	0800fad5 	.word	0x0800fad5
 800fa18:	0800fad5 	.word	0x0800fad5
 800fa1c:	0800fad5 	.word	0x0800fad5
 800fa20:	0800fad5 	.word	0x0800fad5
 800fa24:	0800fa71 	.word	0x0800fa71
 800fa28:	0800fad5 	.word	0x0800fad5
 800fa2c:	0800fad5 	.word	0x0800fad5
 800fa30:	0800fad5 	.word	0x0800fad5
 800fa34:	0800fad5 	.word	0x0800fad5
 800fa38:	0800fad5 	.word	0x0800fad5
 800fa3c:	0800fad5 	.word	0x0800fad5
 800fa40:	0800fad5 	.word	0x0800fad5
 800fa44:	0800fa79 	.word	0x0800fa79
 800fa48:	0800fad5 	.word	0x0800fad5
 800fa4c:	0800fad5 	.word	0x0800fad5
 800fa50:	0800fad5 	.word	0x0800fad5
 800fa54:	0800fad5 	.word	0x0800fad5
 800fa58:	0800fad5 	.word	0x0800fad5
 800fa5c:	0800fad5 	.word	0x0800fad5
 800fa60:	0800fad5 	.word	0x0800fad5
 800fa64:	0800fa93 	.word	0x0800fa93
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800fa68:	f7fd f9fe 	bl	800ce68 <HAL_RCC_GetPCLK3Freq>
 800fa6c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fa6e:	e1b6      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800fa70:	f7fd f8b0 	bl	800cbd4 <HAL_RCC_GetSysClockFreq>
 800fa74:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fa76:	e1b2      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fa78:	4b83      	ldr	r3, [pc, #524]	; (800fc88 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fa80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fa84:	d102      	bne.n	800fa8c <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
        {
          frequency = HSI_VALUE;
 800fa86:	4b81      	ldr	r3, [pc, #516]	; (800fc8c <HAL_RCCEx_GetPeriphCLKFreq+0x15a0>)
 800fa88:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fa8a:	e1a8      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fa90:	e1a5      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800fa92:	4b7d      	ldr	r3, [pc, #500]	; (800fc88 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	f003 0320 	and.w	r3, r3, #32
 800fa9a:	2b20      	cmp	r3, #32
 800fa9c:	d117      	bne.n	800face <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fa9e:	4b7a      	ldr	r3, [pc, #488]	; (800fc88 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800faa0:	689b      	ldr	r3, [r3, #8]
 800faa2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d005      	beq.n	800fab6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ca>
 800faaa:	4b77      	ldr	r3, [pc, #476]	; (800fc88 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800faac:	689b      	ldr	r3, [r3, #8]
 800faae:	0e1b      	lsrs	r3, r3, #24
 800fab0:	f003 030f 	and.w	r3, r3, #15
 800fab4:	e006      	b.n	800fac4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 800fab6:	4b74      	ldr	r3, [pc, #464]	; (800fc88 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fab8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fabc:	041b      	lsls	r3, r3, #16
 800fabe:	0e1b      	lsrs	r3, r3, #24
 800fac0:	f003 030f 	and.w	r3, r3, #15
 800fac4:	4a72      	ldr	r2, [pc, #456]	; (800fc90 <HAL_RCCEx_GetPeriphCLKFreq+0x15a4>)
 800fac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800faca:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800facc:	e187      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800face:	2300      	movs	r3, #0
 800fad0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fad2:	e184      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 800fad4:	2300      	movs	r3, #0
 800fad6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fad8:	e181      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800fada:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fade:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800fae2:	430b      	orrs	r3, r1
 800fae4:	d155      	bne.n	800fb92 <HAL_RCCEx_GetPeriphCLKFreq+0x14a6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800fae6:	4b68      	ldr	r3, [pc, #416]	; (800fc88 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fae8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800faec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800faf0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800faf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faf4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800faf8:	d013      	beq.n	800fb22 <HAL_RCCEx_GetPeriphCLKFreq+0x1436>
 800fafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fafc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fb00:	d844      	bhi.n	800fb8c <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 800fb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fb08:	d013      	beq.n	800fb32 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
 800fb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fb10:	d83c      	bhi.n	800fb8c <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 800fb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d014      	beq.n	800fb42 <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 800fb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fb1e:	d014      	beq.n	800fb4a <HAL_RCCEx_GetPeriphCLKFreq+0x145e>
 800fb20:	e034      	b.n	800fb8c <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fb22:	f107 0318 	add.w	r3, r7, #24
 800fb26:	4618      	mov	r0, r3
 800fb28:	f7fe fb10 	bl	800e14c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800fb2c:	69fb      	ldr	r3, [r7, #28]
 800fb2e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fb30:	e155      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fb32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb36:	4618      	mov	r0, r3
 800fb38:	f7fe f9a0 	bl	800de7c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800fb3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fb40:	e14d      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800fb42:	f7fd f847 	bl	800cbd4 <HAL_RCC_GetSysClockFreq>
 800fb46:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fb48:	e149      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800fb4a:	4b4f      	ldr	r3, [pc, #316]	; (800fc88 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	f003 0320 	and.w	r3, r3, #32
 800fb52:	2b20      	cmp	r3, #32
 800fb54:	d117      	bne.n	800fb86 <HAL_RCCEx_GetPeriphCLKFreq+0x149a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fb56:	4b4c      	ldr	r3, [pc, #304]	; (800fc88 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fb58:	689b      	ldr	r3, [r3, #8]
 800fb5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d005      	beq.n	800fb6e <HAL_RCCEx_GetPeriphCLKFreq+0x1482>
 800fb62:	4b49      	ldr	r3, [pc, #292]	; (800fc88 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fb64:	689b      	ldr	r3, [r3, #8]
 800fb66:	0e1b      	lsrs	r3, r3, #24
 800fb68:	f003 030f 	and.w	r3, r3, #15
 800fb6c:	e006      	b.n	800fb7c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>
 800fb6e:	4b46      	ldr	r3, [pc, #280]	; (800fc88 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fb70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fb74:	041b      	lsls	r3, r3, #16
 800fb76:	0e1b      	lsrs	r3, r3, #24
 800fb78:	f003 030f 	and.w	r3, r3, #15
 800fb7c:	4a44      	ldr	r2, [pc, #272]	; (800fc90 <HAL_RCCEx_GetPeriphCLKFreq+0x15a4>)
 800fb7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb82:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fb84:	e12b      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800fb86:	2300      	movs	r3, #0
 800fb88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fb8a:	e128      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fb90:	e125      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800fb92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb96:	1e59      	subs	r1, r3, #1
 800fb98:	ea52 0301 	orrs.w	r3, r2, r1
 800fb9c:	d13c      	bne.n	800fc18 <HAL_RCCEx_GetPeriphCLKFreq+0x152c>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800fb9e:	4b3a      	ldr	r3, [pc, #232]	; (800fc88 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fba0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800fba4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800fba8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800fbaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800fbb0:	d027      	beq.n	800fc02 <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 800fbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbb4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800fbb8:	d82b      	bhi.n	800fc12 <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 800fbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fbc0:	d017      	beq.n	800fbf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1506>
 800fbc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fbc8:	d823      	bhi.n	800fc12 <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 800fbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d004      	beq.n	800fbda <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 800fbd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fbd6:	d004      	beq.n	800fbe2 <HAL_RCCEx_GetPeriphCLKFreq+0x14f6>
 800fbd8:	e01b      	b.n	800fc12 <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800fbda:	f7fc fffb 	bl	800cbd4 <HAL_RCC_GetSysClockFreq>
 800fbde:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fbe0:	e0fd      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fbe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f7fe f948 	bl	800de7c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800fbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fbf0:	e0f5      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fbf2:	f107 0318 	add.w	r3, r7, #24
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	f7fe faa8 	bl	800e14c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800fbfc:	69fb      	ldr	r3, [r7, #28]
 800fbfe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fc00:	e0ed      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fc02:	f107 030c 	add.w	r3, r7, #12
 800fc06:	4618      	mov	r0, r3
 800fc08:	f7fe fc08 	bl	800e41c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fc10:	e0e5      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 800fc12:	2300      	movs	r3, #0
 800fc14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fc16:	e0e2      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800fc18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc1c:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800fc20:	430b      	orrs	r3, r1
 800fc22:	d137      	bne.n	800fc94 <HAL_RCCEx_GetPeriphCLKFreq+0x15a8>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800fc24:	4b18      	ldr	r3, [pc, #96]	; (800fc88 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fc26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800fc2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fc2e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800fc30:	4b15      	ldr	r3, [pc, #84]	; (800fc88 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fc32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fc36:	f003 0302 	and.w	r3, r3, #2
 800fc3a:	2b02      	cmp	r3, #2
 800fc3c:	d106      	bne.n	800fc4c <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
 800fc3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d103      	bne.n	800fc4c <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
    {
      frequency = LSE_VALUE;
 800fc44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fc48:	637b      	str	r3, [r7, #52]	; 0x34
 800fc4a:	e0c8      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800fc4c:	4b0e      	ldr	r3, [pc, #56]	; (800fc88 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fc4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fc52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fc56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fc5a:	d112      	bne.n	800fc82 <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
 800fc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fc62:	d10e      	bne.n	800fc82 <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fc64:	4b08      	ldr	r3, [pc, #32]	; (800fc88 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800fc66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fc6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fc6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fc72:	d102      	bne.n	800fc7a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
      {
        frequency = LSI_VALUE / 128U;
 800fc74:	23fa      	movs	r3, #250	; 0xfa
 800fc76:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fc78:	e0b1      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = LSI_VALUE;
 800fc7a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800fc7e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fc80:	e0ad      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800fc82:	2300      	movs	r3, #0
 800fc84:	637b      	str	r3, [r7, #52]	; 0x34
 800fc86:	e0aa      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 800fc88:	46020c00 	.word	0x46020c00
 800fc8c:	00f42400 	.word	0x00f42400
 800fc90:	0802a7b4 	.word	0x0802a7b4
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800fc94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc98:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800fc9c:	430b      	orrs	r3, r1
 800fc9e:	d131      	bne.n	800fd04 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800fca0:	4b51      	ldr	r3, [pc, #324]	; (800fde8 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 800fca2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800fca6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800fcaa:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800fcac:	4b4e      	ldr	r3, [pc, #312]	; (800fde8 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fcb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fcb8:	d105      	bne.n	800fcc6 <HAL_RCCEx_GetPeriphCLKFreq+0x15da>
 800fcba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d102      	bne.n	800fcc6 <HAL_RCCEx_GetPeriphCLKFreq+0x15da>
    {
      frequency = HSI48_VALUE;
 800fcc0:	4b4a      	ldr	r3, [pc, #296]	; (800fdec <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800fcc2:	637b      	str	r3, [r7, #52]	; 0x34
 800fcc4:	e08b      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800fcc6:	4b48      	ldr	r3, [pc, #288]	; (800fde8 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fcce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fcd2:	d106      	bne.n	800fce2 <HAL_RCCEx_GetPeriphCLKFreq+0x15f6>
 800fcd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fcda:	d102      	bne.n	800fce2 <HAL_RCCEx_GetPeriphCLKFreq+0x15f6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800fcdc:	4b44      	ldr	r3, [pc, #272]	; (800fdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800fcde:	637b      	str	r3, [r7, #52]	; 0x34
 800fce0:	e07d      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800fce2:	4b41      	ldr	r3, [pc, #260]	; (800fde8 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fcea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fcee:	d106      	bne.n	800fcfe <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
 800fcf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fcf6:	d102      	bne.n	800fcfe <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
    {
      frequency = HSI_VALUE;
 800fcf8:	4b3e      	ldr	r3, [pc, #248]	; (800fdf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800fcfa:	637b      	str	r3, [r7, #52]	; 0x34
 800fcfc:	e06f      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800fcfe:	2300      	movs	r3, #0
 800fd00:	637b      	str	r3, [r7, #52]	; 0x34
 800fd02:	e06c      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800fd04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd08:	1e99      	subs	r1, r3, #2
 800fd0a:	ea52 0301 	orrs.w	r3, r2, r1
 800fd0e:	d120      	bne.n	800fd52 <HAL_RCCEx_GetPeriphCLKFreq+0x1666>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800fd10:	4b35      	ldr	r3, [pc, #212]	; (800fde8 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 800fd12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800fd16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fd1a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800fd1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d004      	beq.n	800fd2c <HAL_RCCEx_GetPeriphCLKFreq+0x1640>
 800fd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800fd28:	d008      	beq.n	800fd3c <HAL_RCCEx_GetPeriphCLKFreq+0x1650>
 800fd2a:	e00f      	b.n	800fd4c <HAL_RCCEx_GetPeriphCLKFreq+0x1660>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fd2c:	f107 030c 	add.w	r3, r7, #12
 800fd30:	4618      	mov	r0, r3
 800fd32:	f7fe fb73 	bl	800e41c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800fd36:	697b      	ldr	r3, [r7, #20]
 800fd38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fd3a:	e050      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fd3c:	f107 0318 	add.w	r3, r7, #24
 800fd40:	4618      	mov	r0, r3
 800fd42:	f7fe fa03 	bl	800e14c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800fd46:	6a3b      	ldr	r3, [r7, #32]
 800fd48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fd4a:	e048      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fd50:	e045      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800fd52:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd56:	f1a3 0108 	sub.w	r1, r3, #8
 800fd5a:	ea52 0301 	orrs.w	r3, r2, r1
 800fd5e:	d13c      	bne.n	800fdda <HAL_RCCEx_GetPeriphCLKFreq+0x16ee>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800fd60:	4b21      	ldr	r3, [pc, #132]	; (800fde8 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 800fd62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800fd66:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800fd6a:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800fd6c:	4b1e      	ldr	r3, [pc, #120]	; (800fde8 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fd74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fd78:	d105      	bne.n	800fd86 <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
 800fd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d102      	bne.n	800fd86 <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
    {
      frequency = HSE_VALUE;
 800fd80:	4b1c      	ldr	r3, [pc, #112]	; (800fdf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800fd82:	637b      	str	r3, [r7, #52]	; 0x34
 800fd84:	e02b      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800fd86:	4b18      	ldr	r3, [pc, #96]	; (800fde8 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fd8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fd92:	d106      	bne.n	800fda2 <HAL_RCCEx_GetPeriphCLKFreq+0x16b6>
 800fd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fd9a:	d102      	bne.n	800fda2 <HAL_RCCEx_GetPeriphCLKFreq+0x16b6>
    {
      frequency = HSE_VALUE >> 1U ;
 800fd9c:	4b16      	ldr	r3, [pc, #88]	; (800fdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x170c>)
 800fd9e:	637b      	str	r3, [r7, #52]	; 0x34
 800fda0:	e01d      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800fda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fda4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fda8:	d107      	bne.n	800fdba <HAL_RCCEx_GetPeriphCLKFreq+0x16ce>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fdaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f7fe f864 	bl	800de7c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800fdb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdb6:	637b      	str	r3, [r7, #52]	; 0x34
 800fdb8:	e011      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800fdba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdbc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800fdc0:	d108      	bne.n	800fdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x16e8>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fdc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	f7fe f858 	bl	800de7c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800fdcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdce:	085b      	lsrs	r3, r3, #1
 800fdd0:	637b      	str	r3, [r7, #52]	; 0x34
 800fdd2:	e004      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	637b      	str	r3, [r7, #52]	; 0x34
 800fdd8:	e001      	b.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800fdda:	2300      	movs	r3, #0
 800fddc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800fdde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fde0:	4618      	mov	r0, r3
 800fde2:	3738      	adds	r7, #56	; 0x38
 800fde4:	46bd      	mov	sp, r7
 800fde6:	bd80      	pop	{r7, pc}
 800fde8:	46020c00 	.word	0x46020c00
 800fdec:	02dc6c00 	.word	0x02dc6c00
 800fdf0:	016e3600 	.word	0x016e3600
 800fdf4:	00f42400 	.word	0x00f42400
 800fdf8:	007a1200 	.word	0x007a1200

0800fdfc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b084      	sub	sp, #16
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800fe04:	4b47      	ldr	r3, [pc, #284]	; (800ff24 <RCCEx_PLL2_Config+0x128>)
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	4a46      	ldr	r2, [pc, #280]	; (800ff24 <RCCEx_PLL2_Config+0x128>)
 800fe0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fe0e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800fe10:	f7f7 fa96 	bl	8007340 <HAL_GetTick>
 800fe14:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fe16:	e008      	b.n	800fe2a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800fe18:	f7f7 fa92 	bl	8007340 <HAL_GetTick>
 800fe1c:	4602      	mov	r2, r0
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	1ad3      	subs	r3, r2, r3
 800fe22:	2b02      	cmp	r3, #2
 800fe24:	d901      	bls.n	800fe2a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800fe26:	2303      	movs	r3, #3
 800fe28:	e077      	b.n	800ff1a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fe2a:	4b3e      	ldr	r3, [pc, #248]	; (800ff24 <RCCEx_PLL2_Config+0x128>)
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d1f0      	bne.n	800fe18 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800fe36:	4b3b      	ldr	r3, [pc, #236]	; (800ff24 <RCCEx_PLL2_Config+0x128>)
 800fe38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe3a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800fe3e:	f023 0303 	bic.w	r3, r3, #3
 800fe42:	687a      	ldr	r2, [r7, #4]
 800fe44:	6811      	ldr	r1, [r2, #0]
 800fe46:	687a      	ldr	r2, [r7, #4]
 800fe48:	6852      	ldr	r2, [r2, #4]
 800fe4a:	3a01      	subs	r2, #1
 800fe4c:	0212      	lsls	r2, r2, #8
 800fe4e:	430a      	orrs	r2, r1
 800fe50:	4934      	ldr	r1, [pc, #208]	; (800ff24 <RCCEx_PLL2_Config+0x128>)
 800fe52:	4313      	orrs	r3, r2
 800fe54:	62cb      	str	r3, [r1, #44]	; 0x2c
 800fe56:	4b33      	ldr	r3, [pc, #204]	; (800ff24 <RCCEx_PLL2_Config+0x128>)
 800fe58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fe5a:	4b33      	ldr	r3, [pc, #204]	; (800ff28 <RCCEx_PLL2_Config+0x12c>)
 800fe5c:	4013      	ands	r3, r2
 800fe5e:	687a      	ldr	r2, [r7, #4]
 800fe60:	6892      	ldr	r2, [r2, #8]
 800fe62:	3a01      	subs	r2, #1
 800fe64:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800fe68:	687a      	ldr	r2, [r7, #4]
 800fe6a:	68d2      	ldr	r2, [r2, #12]
 800fe6c:	3a01      	subs	r2, #1
 800fe6e:	0252      	lsls	r2, r2, #9
 800fe70:	b292      	uxth	r2, r2
 800fe72:	4311      	orrs	r1, r2
 800fe74:	687a      	ldr	r2, [r7, #4]
 800fe76:	6912      	ldr	r2, [r2, #16]
 800fe78:	3a01      	subs	r2, #1
 800fe7a:	0412      	lsls	r2, r2, #16
 800fe7c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800fe80:	4311      	orrs	r1, r2
 800fe82:	687a      	ldr	r2, [r7, #4]
 800fe84:	6952      	ldr	r2, [r2, #20]
 800fe86:	3a01      	subs	r2, #1
 800fe88:	0612      	lsls	r2, r2, #24
 800fe8a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800fe8e:	430a      	orrs	r2, r1
 800fe90:	4924      	ldr	r1, [pc, #144]	; (800ff24 <RCCEx_PLL2_Config+0x128>)
 800fe92:	4313      	orrs	r3, r2
 800fe94:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800fe96:	4b23      	ldr	r3, [pc, #140]	; (800ff24 <RCCEx_PLL2_Config+0x128>)
 800fe98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe9a:	f023 020c 	bic.w	r2, r3, #12
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	699b      	ldr	r3, [r3, #24]
 800fea2:	4920      	ldr	r1, [pc, #128]	; (800ff24 <RCCEx_PLL2_Config+0x128>)
 800fea4:	4313      	orrs	r3, r2
 800fea6:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800fea8:	4b1e      	ldr	r3, [pc, #120]	; (800ff24 <RCCEx_PLL2_Config+0x128>)
 800feaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	6a1b      	ldr	r3, [r3, #32]
 800feb0:	491c      	ldr	r1, [pc, #112]	; (800ff24 <RCCEx_PLL2_Config+0x128>)
 800feb2:	4313      	orrs	r3, r2
 800feb4:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800feb6:	4b1b      	ldr	r3, [pc, #108]	; (800ff24 <RCCEx_PLL2_Config+0x128>)
 800feb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800feba:	4a1a      	ldr	r2, [pc, #104]	; (800ff24 <RCCEx_PLL2_Config+0x128>)
 800febc:	f023 0310 	bic.w	r3, r3, #16
 800fec0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800fec2:	4b18      	ldr	r3, [pc, #96]	; (800ff24 <RCCEx_PLL2_Config+0x128>)
 800fec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fec6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800feca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800fece:	687a      	ldr	r2, [r7, #4]
 800fed0:	69d2      	ldr	r2, [r2, #28]
 800fed2:	00d2      	lsls	r2, r2, #3
 800fed4:	4913      	ldr	r1, [pc, #76]	; (800ff24 <RCCEx_PLL2_Config+0x128>)
 800fed6:	4313      	orrs	r3, r2
 800fed8:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800feda:	4b12      	ldr	r3, [pc, #72]	; (800ff24 <RCCEx_PLL2_Config+0x128>)
 800fedc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fede:	4a11      	ldr	r2, [pc, #68]	; (800ff24 <RCCEx_PLL2_Config+0x128>)
 800fee0:	f043 0310 	orr.w	r3, r3, #16
 800fee4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800fee6:	4b0f      	ldr	r3, [pc, #60]	; (800ff24 <RCCEx_PLL2_Config+0x128>)
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	4a0e      	ldr	r2, [pc, #56]	; (800ff24 <RCCEx_PLL2_Config+0x128>)
 800feec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800fef0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800fef2:	f7f7 fa25 	bl	8007340 <HAL_GetTick>
 800fef6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800fef8:	e008      	b.n	800ff0c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800fefa:	f7f7 fa21 	bl	8007340 <HAL_GetTick>
 800fefe:	4602      	mov	r2, r0
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	1ad3      	subs	r3, r2, r3
 800ff04:	2b02      	cmp	r3, #2
 800ff06:	d901      	bls.n	800ff0c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800ff08:	2303      	movs	r3, #3
 800ff0a:	e006      	b.n	800ff1a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ff0c:	4b05      	ldr	r3, [pc, #20]	; (800ff24 <RCCEx_PLL2_Config+0x128>)
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d0f0      	beq.n	800fefa <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800ff18:	2300      	movs	r3, #0

}
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	3710      	adds	r7, #16
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	bd80      	pop	{r7, pc}
 800ff22:	bf00      	nop
 800ff24:	46020c00 	.word	0x46020c00
 800ff28:	80800000 	.word	0x80800000

0800ff2c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b084      	sub	sp, #16
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800ff34:	4b47      	ldr	r3, [pc, #284]	; (8010054 <RCCEx_PLL3_Config+0x128>)
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	4a46      	ldr	r2, [pc, #280]	; (8010054 <RCCEx_PLL3_Config+0x128>)
 800ff3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ff3e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ff40:	f7f7 f9fe 	bl	8007340 <HAL_GetTick>
 800ff44:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ff46:	e008      	b.n	800ff5a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ff48:	f7f7 f9fa 	bl	8007340 <HAL_GetTick>
 800ff4c:	4602      	mov	r2, r0
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	1ad3      	subs	r3, r2, r3
 800ff52:	2b02      	cmp	r3, #2
 800ff54:	d901      	bls.n	800ff5a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800ff56:	2303      	movs	r3, #3
 800ff58:	e077      	b.n	801004a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ff5a:	4b3e      	ldr	r3, [pc, #248]	; (8010054 <RCCEx_PLL3_Config+0x128>)
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d1f0      	bne.n	800ff48 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800ff66:	4b3b      	ldr	r3, [pc, #236]	; (8010054 <RCCEx_PLL3_Config+0x128>)
 800ff68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff6a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ff6e:	f023 0303 	bic.w	r3, r3, #3
 800ff72:	687a      	ldr	r2, [r7, #4]
 800ff74:	6811      	ldr	r1, [r2, #0]
 800ff76:	687a      	ldr	r2, [r7, #4]
 800ff78:	6852      	ldr	r2, [r2, #4]
 800ff7a:	3a01      	subs	r2, #1
 800ff7c:	0212      	lsls	r2, r2, #8
 800ff7e:	430a      	orrs	r2, r1
 800ff80:	4934      	ldr	r1, [pc, #208]	; (8010054 <RCCEx_PLL3_Config+0x128>)
 800ff82:	4313      	orrs	r3, r2
 800ff84:	630b      	str	r3, [r1, #48]	; 0x30
 800ff86:	4b33      	ldr	r3, [pc, #204]	; (8010054 <RCCEx_PLL3_Config+0x128>)
 800ff88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ff8a:	4b33      	ldr	r3, [pc, #204]	; (8010058 <RCCEx_PLL3_Config+0x12c>)
 800ff8c:	4013      	ands	r3, r2
 800ff8e:	687a      	ldr	r2, [r7, #4]
 800ff90:	6892      	ldr	r2, [r2, #8]
 800ff92:	3a01      	subs	r2, #1
 800ff94:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800ff98:	687a      	ldr	r2, [r7, #4]
 800ff9a:	68d2      	ldr	r2, [r2, #12]
 800ff9c:	3a01      	subs	r2, #1
 800ff9e:	0252      	lsls	r2, r2, #9
 800ffa0:	b292      	uxth	r2, r2
 800ffa2:	4311      	orrs	r1, r2
 800ffa4:	687a      	ldr	r2, [r7, #4]
 800ffa6:	6912      	ldr	r2, [r2, #16]
 800ffa8:	3a01      	subs	r2, #1
 800ffaa:	0412      	lsls	r2, r2, #16
 800ffac:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800ffb0:	4311      	orrs	r1, r2
 800ffb2:	687a      	ldr	r2, [r7, #4]
 800ffb4:	6952      	ldr	r2, [r2, #20]
 800ffb6:	3a01      	subs	r2, #1
 800ffb8:	0612      	lsls	r2, r2, #24
 800ffba:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800ffbe:	430a      	orrs	r2, r1
 800ffc0:	4924      	ldr	r1, [pc, #144]	; (8010054 <RCCEx_PLL3_Config+0x128>)
 800ffc2:	4313      	orrs	r3, r2
 800ffc4:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800ffc6:	4b23      	ldr	r3, [pc, #140]	; (8010054 <RCCEx_PLL3_Config+0x128>)
 800ffc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffca:	f023 020c 	bic.w	r2, r3, #12
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	699b      	ldr	r3, [r3, #24]
 800ffd2:	4920      	ldr	r1, [pc, #128]	; (8010054 <RCCEx_PLL3_Config+0x128>)
 800ffd4:	4313      	orrs	r3, r2
 800ffd6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800ffd8:	4b1e      	ldr	r3, [pc, #120]	; (8010054 <RCCEx_PLL3_Config+0x128>)
 800ffda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	6a1b      	ldr	r3, [r3, #32]
 800ffe0:	491c      	ldr	r1, [pc, #112]	; (8010054 <RCCEx_PLL3_Config+0x128>)
 800ffe2:	4313      	orrs	r3, r2
 800ffe4:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800ffe6:	4b1b      	ldr	r3, [pc, #108]	; (8010054 <RCCEx_PLL3_Config+0x128>)
 800ffe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffea:	4a1a      	ldr	r2, [pc, #104]	; (8010054 <RCCEx_PLL3_Config+0x128>)
 800ffec:	f023 0310 	bic.w	r3, r3, #16
 800fff0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800fff2:	4b18      	ldr	r3, [pc, #96]	; (8010054 <RCCEx_PLL3_Config+0x128>)
 800fff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fff6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fffa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800fffe:	687a      	ldr	r2, [r7, #4]
 8010000:	69d2      	ldr	r2, [r2, #28]
 8010002:	00d2      	lsls	r2, r2, #3
 8010004:	4913      	ldr	r1, [pc, #76]	; (8010054 <RCCEx_PLL3_Config+0x128>)
 8010006:	4313      	orrs	r3, r2
 8010008:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 801000a:	4b12      	ldr	r3, [pc, #72]	; (8010054 <RCCEx_PLL3_Config+0x128>)
 801000c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801000e:	4a11      	ldr	r2, [pc, #68]	; (8010054 <RCCEx_PLL3_Config+0x128>)
 8010010:	f043 0310 	orr.w	r3, r3, #16
 8010014:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8010016:	4b0f      	ldr	r3, [pc, #60]	; (8010054 <RCCEx_PLL3_Config+0x128>)
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	4a0e      	ldr	r2, [pc, #56]	; (8010054 <RCCEx_PLL3_Config+0x128>)
 801001c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010020:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8010022:	f7f7 f98d 	bl	8007340 <HAL_GetTick>
 8010026:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010028:	e008      	b.n	801003c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801002a:	f7f7 f989 	bl	8007340 <HAL_GetTick>
 801002e:	4602      	mov	r2, r0
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	1ad3      	subs	r3, r2, r3
 8010034:	2b02      	cmp	r3, #2
 8010036:	d901      	bls.n	801003c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8010038:	2303      	movs	r3, #3
 801003a:	e006      	b.n	801004a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801003c:	4b05      	ldr	r3, [pc, #20]	; (8010054 <RCCEx_PLL3_Config+0x128>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010044:	2b00      	cmp	r3, #0
 8010046:	d0f0      	beq.n	801002a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8010048:	2300      	movs	r3, #0
}
 801004a:	4618      	mov	r0, r3
 801004c:	3710      	adds	r7, #16
 801004e:	46bd      	mov	sp, r7
 8010050:	bd80      	pop	{r7, pc}
 8010052:	bf00      	nop
 8010054:	46020c00 	.word	0x46020c00
 8010058:	80800000 	.word	0x80800000

0801005c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801005c:	b580      	push	{r7, lr}
 801005e:	b082      	sub	sp, #8
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d101      	bne.n	801006e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801006a:	2301      	movs	r3, #1
 801006c:	e049      	b.n	8010102 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010074:	b2db      	uxtb	r3, r3
 8010076:	2b00      	cmp	r3, #0
 8010078:	d106      	bne.n	8010088 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	2200      	movs	r2, #0
 801007e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	f7f1 fb8a 	bl	800179c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2202      	movs	r2, #2
 801008c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681a      	ldr	r2, [r3, #0]
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	3304      	adds	r3, #4
 8010098:	4619      	mov	r1, r3
 801009a:	4610      	mov	r0, r2
 801009c:	f000 fe48 	bl	8010d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2201      	movs	r2, #1
 80100a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	2201      	movs	r2, #1
 80100ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	2201      	movs	r2, #1
 80100b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	2201      	movs	r2, #1
 80100bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	2201      	movs	r2, #1
 80100c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	2201      	movs	r2, #1
 80100cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	2201      	movs	r2, #1
 80100d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	2201      	movs	r2, #1
 80100dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	2201      	movs	r2, #1
 80100e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	2201      	movs	r2, #1
 80100ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2201      	movs	r2, #1
 80100f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	2201      	movs	r2, #1
 80100fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010100:	2300      	movs	r3, #0
}
 8010102:	4618      	mov	r0, r3
 8010104:	3708      	adds	r7, #8
 8010106:	46bd      	mov	sp, r7
 8010108:	bd80      	pop	{r7, pc}
	...

0801010c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801010c:	b480      	push	{r7}
 801010e:	b085      	sub	sp, #20
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801011a:	b2db      	uxtb	r3, r3
 801011c:	2b01      	cmp	r3, #1
 801011e:	d001      	beq.n	8010124 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010120:	2301      	movs	r3, #1
 8010122:	e072      	b.n	801020a <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	2202      	movs	r2, #2
 8010128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	68da      	ldr	r2, [r3, #12]
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	f042 0201 	orr.w	r2, r2, #1
 801013a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	4a35      	ldr	r2, [pc, #212]	; (8010218 <HAL_TIM_Base_Start_IT+0x10c>)
 8010142:	4293      	cmp	r3, r2
 8010144:	d040      	beq.n	80101c8 <HAL_TIM_Base_Start_IT+0xbc>
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	4a34      	ldr	r2, [pc, #208]	; (801021c <HAL_TIM_Base_Start_IT+0x110>)
 801014c:	4293      	cmp	r3, r2
 801014e:	d03b      	beq.n	80101c8 <HAL_TIM_Base_Start_IT+0xbc>
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010158:	d036      	beq.n	80101c8 <HAL_TIM_Base_Start_IT+0xbc>
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010162:	d031      	beq.n	80101c8 <HAL_TIM_Base_Start_IT+0xbc>
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	4a2d      	ldr	r2, [pc, #180]	; (8010220 <HAL_TIM_Base_Start_IT+0x114>)
 801016a:	4293      	cmp	r3, r2
 801016c:	d02c      	beq.n	80101c8 <HAL_TIM_Base_Start_IT+0xbc>
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	4a2c      	ldr	r2, [pc, #176]	; (8010224 <HAL_TIM_Base_Start_IT+0x118>)
 8010174:	4293      	cmp	r3, r2
 8010176:	d027      	beq.n	80101c8 <HAL_TIM_Base_Start_IT+0xbc>
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	4a2a      	ldr	r2, [pc, #168]	; (8010228 <HAL_TIM_Base_Start_IT+0x11c>)
 801017e:	4293      	cmp	r3, r2
 8010180:	d022      	beq.n	80101c8 <HAL_TIM_Base_Start_IT+0xbc>
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	4a29      	ldr	r2, [pc, #164]	; (801022c <HAL_TIM_Base_Start_IT+0x120>)
 8010188:	4293      	cmp	r3, r2
 801018a:	d01d      	beq.n	80101c8 <HAL_TIM_Base_Start_IT+0xbc>
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	4a27      	ldr	r2, [pc, #156]	; (8010230 <HAL_TIM_Base_Start_IT+0x124>)
 8010192:	4293      	cmp	r3, r2
 8010194:	d018      	beq.n	80101c8 <HAL_TIM_Base_Start_IT+0xbc>
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	4a26      	ldr	r2, [pc, #152]	; (8010234 <HAL_TIM_Base_Start_IT+0x128>)
 801019c:	4293      	cmp	r3, r2
 801019e:	d013      	beq.n	80101c8 <HAL_TIM_Base_Start_IT+0xbc>
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	4a24      	ldr	r2, [pc, #144]	; (8010238 <HAL_TIM_Base_Start_IT+0x12c>)
 80101a6:	4293      	cmp	r3, r2
 80101a8:	d00e      	beq.n	80101c8 <HAL_TIM_Base_Start_IT+0xbc>
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	4a23      	ldr	r2, [pc, #140]	; (801023c <HAL_TIM_Base_Start_IT+0x130>)
 80101b0:	4293      	cmp	r3, r2
 80101b2:	d009      	beq.n	80101c8 <HAL_TIM_Base_Start_IT+0xbc>
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	4a21      	ldr	r2, [pc, #132]	; (8010240 <HAL_TIM_Base_Start_IT+0x134>)
 80101ba:	4293      	cmp	r3, r2
 80101bc:	d004      	beq.n	80101c8 <HAL_TIM_Base_Start_IT+0xbc>
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	4a20      	ldr	r2, [pc, #128]	; (8010244 <HAL_TIM_Base_Start_IT+0x138>)
 80101c4:	4293      	cmp	r3, r2
 80101c6:	d115      	bne.n	80101f4 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	689a      	ldr	r2, [r3, #8]
 80101ce:	4b1e      	ldr	r3, [pc, #120]	; (8010248 <HAL_TIM_Base_Start_IT+0x13c>)
 80101d0:	4013      	ands	r3, r2
 80101d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	2b06      	cmp	r3, #6
 80101d8:	d015      	beq.n	8010206 <HAL_TIM_Base_Start_IT+0xfa>
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80101e0:	d011      	beq.n	8010206 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	681a      	ldr	r2, [r3, #0]
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	f042 0201 	orr.w	r2, r2, #1
 80101f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80101f2:	e008      	b.n	8010206 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	681a      	ldr	r2, [r3, #0]
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	f042 0201 	orr.w	r2, r2, #1
 8010202:	601a      	str	r2, [r3, #0]
 8010204:	e000      	b.n	8010208 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010206:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010208:	2300      	movs	r3, #0
}
 801020a:	4618      	mov	r0, r3
 801020c:	3714      	adds	r7, #20
 801020e:	46bd      	mov	sp, r7
 8010210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010214:	4770      	bx	lr
 8010216:	bf00      	nop
 8010218:	40012c00 	.word	0x40012c00
 801021c:	50012c00 	.word	0x50012c00
 8010220:	40000400 	.word	0x40000400
 8010224:	50000400 	.word	0x50000400
 8010228:	40000800 	.word	0x40000800
 801022c:	50000800 	.word	0x50000800
 8010230:	40000c00 	.word	0x40000c00
 8010234:	50000c00 	.word	0x50000c00
 8010238:	40013400 	.word	0x40013400
 801023c:	50013400 	.word	0x50013400
 8010240:	40014000 	.word	0x40014000
 8010244:	50014000 	.word	0x50014000
 8010248:	00010007 	.word	0x00010007

0801024c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b082      	sub	sp, #8
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d101      	bne.n	801025e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801025a:	2301      	movs	r3, #1
 801025c:	e049      	b.n	80102f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010264:	b2db      	uxtb	r3, r3
 8010266:	2b00      	cmp	r3, #0
 8010268:	d106      	bne.n	8010278 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	2200      	movs	r2, #0
 801026e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010272:	6878      	ldr	r0, [r7, #4]
 8010274:	f000 f841 	bl	80102fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	2202      	movs	r2, #2
 801027c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	681a      	ldr	r2, [r3, #0]
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	3304      	adds	r3, #4
 8010288:	4619      	mov	r1, r3
 801028a:	4610      	mov	r0, r2
 801028c:	f000 fd50 	bl	8010d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	2201      	movs	r2, #1
 8010294:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	2201      	movs	r2, #1
 801029c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2201      	movs	r2, #1
 80102a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	2201      	movs	r2, #1
 80102ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	2201      	movs	r2, #1
 80102b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	2201      	movs	r2, #1
 80102bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2201      	movs	r2, #1
 80102c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	2201      	movs	r2, #1
 80102cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	2201      	movs	r2, #1
 80102d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	2201      	movs	r2, #1
 80102dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	2201      	movs	r2, #1
 80102e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	2201      	movs	r2, #1
 80102ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80102f0:	2300      	movs	r3, #0
}
 80102f2:	4618      	mov	r0, r3
 80102f4:	3708      	adds	r7, #8
 80102f6:	46bd      	mov	sp, r7
 80102f8:	bd80      	pop	{r7, pc}

080102fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80102fa:	b480      	push	{r7}
 80102fc:	b083      	sub	sp, #12
 80102fe:	af00      	add	r7, sp, #0
 8010300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8010302:	bf00      	nop
 8010304:	370c      	adds	r7, #12
 8010306:	46bd      	mov	sp, r7
 8010308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030c:	4770      	bx	lr
	...

08010310 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b084      	sub	sp, #16
 8010314:	af00      	add	r7, sp, #0
 8010316:	6078      	str	r0, [r7, #4]
 8010318:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801031a:	683b      	ldr	r3, [r7, #0]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d109      	bne.n	8010334 <HAL_TIM_PWM_Start+0x24>
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010326:	b2db      	uxtb	r3, r3
 8010328:	2b01      	cmp	r3, #1
 801032a:	bf14      	ite	ne
 801032c:	2301      	movne	r3, #1
 801032e:	2300      	moveq	r3, #0
 8010330:	b2db      	uxtb	r3, r3
 8010332:	e03c      	b.n	80103ae <HAL_TIM_PWM_Start+0x9e>
 8010334:	683b      	ldr	r3, [r7, #0]
 8010336:	2b04      	cmp	r3, #4
 8010338:	d109      	bne.n	801034e <HAL_TIM_PWM_Start+0x3e>
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010340:	b2db      	uxtb	r3, r3
 8010342:	2b01      	cmp	r3, #1
 8010344:	bf14      	ite	ne
 8010346:	2301      	movne	r3, #1
 8010348:	2300      	moveq	r3, #0
 801034a:	b2db      	uxtb	r3, r3
 801034c:	e02f      	b.n	80103ae <HAL_TIM_PWM_Start+0x9e>
 801034e:	683b      	ldr	r3, [r7, #0]
 8010350:	2b08      	cmp	r3, #8
 8010352:	d109      	bne.n	8010368 <HAL_TIM_PWM_Start+0x58>
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801035a:	b2db      	uxtb	r3, r3
 801035c:	2b01      	cmp	r3, #1
 801035e:	bf14      	ite	ne
 8010360:	2301      	movne	r3, #1
 8010362:	2300      	moveq	r3, #0
 8010364:	b2db      	uxtb	r3, r3
 8010366:	e022      	b.n	80103ae <HAL_TIM_PWM_Start+0x9e>
 8010368:	683b      	ldr	r3, [r7, #0]
 801036a:	2b0c      	cmp	r3, #12
 801036c:	d109      	bne.n	8010382 <HAL_TIM_PWM_Start+0x72>
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010374:	b2db      	uxtb	r3, r3
 8010376:	2b01      	cmp	r3, #1
 8010378:	bf14      	ite	ne
 801037a:	2301      	movne	r3, #1
 801037c:	2300      	moveq	r3, #0
 801037e:	b2db      	uxtb	r3, r3
 8010380:	e015      	b.n	80103ae <HAL_TIM_PWM_Start+0x9e>
 8010382:	683b      	ldr	r3, [r7, #0]
 8010384:	2b10      	cmp	r3, #16
 8010386:	d109      	bne.n	801039c <HAL_TIM_PWM_Start+0x8c>
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801038e:	b2db      	uxtb	r3, r3
 8010390:	2b01      	cmp	r3, #1
 8010392:	bf14      	ite	ne
 8010394:	2301      	movne	r3, #1
 8010396:	2300      	moveq	r3, #0
 8010398:	b2db      	uxtb	r3, r3
 801039a:	e008      	b.n	80103ae <HAL_TIM_PWM_Start+0x9e>
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80103a2:	b2db      	uxtb	r3, r3
 80103a4:	2b01      	cmp	r3, #1
 80103a6:	bf14      	ite	ne
 80103a8:	2301      	movne	r3, #1
 80103aa:	2300      	moveq	r3, #0
 80103ac:	b2db      	uxtb	r3, r3
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d001      	beq.n	80103b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80103b2:	2301      	movs	r3, #1
 80103b4:	e0d8      	b.n	8010568 <HAL_TIM_PWM_Start+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d104      	bne.n	80103c6 <HAL_TIM_PWM_Start+0xb6>
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2202      	movs	r2, #2
 80103c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80103c4:	e023      	b.n	801040e <HAL_TIM_PWM_Start+0xfe>
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	2b04      	cmp	r3, #4
 80103ca:	d104      	bne.n	80103d6 <HAL_TIM_PWM_Start+0xc6>
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	2202      	movs	r2, #2
 80103d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80103d4:	e01b      	b.n	801040e <HAL_TIM_PWM_Start+0xfe>
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	2b08      	cmp	r3, #8
 80103da:	d104      	bne.n	80103e6 <HAL_TIM_PWM_Start+0xd6>
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	2202      	movs	r2, #2
 80103e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80103e4:	e013      	b.n	801040e <HAL_TIM_PWM_Start+0xfe>
 80103e6:	683b      	ldr	r3, [r7, #0]
 80103e8:	2b0c      	cmp	r3, #12
 80103ea:	d104      	bne.n	80103f6 <HAL_TIM_PWM_Start+0xe6>
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	2202      	movs	r2, #2
 80103f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80103f4:	e00b      	b.n	801040e <HAL_TIM_PWM_Start+0xfe>
 80103f6:	683b      	ldr	r3, [r7, #0]
 80103f8:	2b10      	cmp	r3, #16
 80103fa:	d104      	bne.n	8010406 <HAL_TIM_PWM_Start+0xf6>
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	2202      	movs	r2, #2
 8010400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010404:	e003      	b.n	801040e <HAL_TIM_PWM_Start+0xfe>
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	2202      	movs	r2, #2
 801040a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	2201      	movs	r2, #1
 8010414:	6839      	ldr	r1, [r7, #0]
 8010416:	4618      	mov	r0, r3
 8010418:	f001 f9f6 	bl	8011808 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	4a53      	ldr	r2, [pc, #332]	; (8010570 <HAL_TIM_PWM_Start+0x260>)
 8010422:	4293      	cmp	r3, r2
 8010424:	d02c      	beq.n	8010480 <HAL_TIM_PWM_Start+0x170>
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	4a52      	ldr	r2, [pc, #328]	; (8010574 <HAL_TIM_PWM_Start+0x264>)
 801042c:	4293      	cmp	r3, r2
 801042e:	d027      	beq.n	8010480 <HAL_TIM_PWM_Start+0x170>
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	4a50      	ldr	r2, [pc, #320]	; (8010578 <HAL_TIM_PWM_Start+0x268>)
 8010436:	4293      	cmp	r3, r2
 8010438:	d022      	beq.n	8010480 <HAL_TIM_PWM_Start+0x170>
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	4a4f      	ldr	r2, [pc, #316]	; (801057c <HAL_TIM_PWM_Start+0x26c>)
 8010440:	4293      	cmp	r3, r2
 8010442:	d01d      	beq.n	8010480 <HAL_TIM_PWM_Start+0x170>
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	4a4d      	ldr	r2, [pc, #308]	; (8010580 <HAL_TIM_PWM_Start+0x270>)
 801044a:	4293      	cmp	r3, r2
 801044c:	d018      	beq.n	8010480 <HAL_TIM_PWM_Start+0x170>
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	4a4c      	ldr	r2, [pc, #304]	; (8010584 <HAL_TIM_PWM_Start+0x274>)
 8010454:	4293      	cmp	r3, r2
 8010456:	d013      	beq.n	8010480 <HAL_TIM_PWM_Start+0x170>
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	4a4a      	ldr	r2, [pc, #296]	; (8010588 <HAL_TIM_PWM_Start+0x278>)
 801045e:	4293      	cmp	r3, r2
 8010460:	d00e      	beq.n	8010480 <HAL_TIM_PWM_Start+0x170>
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	4a49      	ldr	r2, [pc, #292]	; (801058c <HAL_TIM_PWM_Start+0x27c>)
 8010468:	4293      	cmp	r3, r2
 801046a:	d009      	beq.n	8010480 <HAL_TIM_PWM_Start+0x170>
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	4a47      	ldr	r2, [pc, #284]	; (8010590 <HAL_TIM_PWM_Start+0x280>)
 8010472:	4293      	cmp	r3, r2
 8010474:	d004      	beq.n	8010480 <HAL_TIM_PWM_Start+0x170>
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	4a46      	ldr	r2, [pc, #280]	; (8010594 <HAL_TIM_PWM_Start+0x284>)
 801047c:	4293      	cmp	r3, r2
 801047e:	d101      	bne.n	8010484 <HAL_TIM_PWM_Start+0x174>
 8010480:	2301      	movs	r3, #1
 8010482:	e000      	b.n	8010486 <HAL_TIM_PWM_Start+0x176>
 8010484:	2300      	movs	r3, #0
 8010486:	2b00      	cmp	r3, #0
 8010488:	d007      	beq.n	801049a <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010498:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	4a34      	ldr	r2, [pc, #208]	; (8010570 <HAL_TIM_PWM_Start+0x260>)
 80104a0:	4293      	cmp	r3, r2
 80104a2:	d040      	beq.n	8010526 <HAL_TIM_PWM_Start+0x216>
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	4a32      	ldr	r2, [pc, #200]	; (8010574 <HAL_TIM_PWM_Start+0x264>)
 80104aa:	4293      	cmp	r3, r2
 80104ac:	d03b      	beq.n	8010526 <HAL_TIM_PWM_Start+0x216>
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80104b6:	d036      	beq.n	8010526 <HAL_TIM_PWM_Start+0x216>
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80104c0:	d031      	beq.n	8010526 <HAL_TIM_PWM_Start+0x216>
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	4a34      	ldr	r2, [pc, #208]	; (8010598 <HAL_TIM_PWM_Start+0x288>)
 80104c8:	4293      	cmp	r3, r2
 80104ca:	d02c      	beq.n	8010526 <HAL_TIM_PWM_Start+0x216>
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	4a32      	ldr	r2, [pc, #200]	; (801059c <HAL_TIM_PWM_Start+0x28c>)
 80104d2:	4293      	cmp	r3, r2
 80104d4:	d027      	beq.n	8010526 <HAL_TIM_PWM_Start+0x216>
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	4a31      	ldr	r2, [pc, #196]	; (80105a0 <HAL_TIM_PWM_Start+0x290>)
 80104dc:	4293      	cmp	r3, r2
 80104de:	d022      	beq.n	8010526 <HAL_TIM_PWM_Start+0x216>
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	4a2f      	ldr	r2, [pc, #188]	; (80105a4 <HAL_TIM_PWM_Start+0x294>)
 80104e6:	4293      	cmp	r3, r2
 80104e8:	d01d      	beq.n	8010526 <HAL_TIM_PWM_Start+0x216>
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	4a2e      	ldr	r2, [pc, #184]	; (80105a8 <HAL_TIM_PWM_Start+0x298>)
 80104f0:	4293      	cmp	r3, r2
 80104f2:	d018      	beq.n	8010526 <HAL_TIM_PWM_Start+0x216>
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	4a2c      	ldr	r2, [pc, #176]	; (80105ac <HAL_TIM_PWM_Start+0x29c>)
 80104fa:	4293      	cmp	r3, r2
 80104fc:	d013      	beq.n	8010526 <HAL_TIM_PWM_Start+0x216>
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	4a1d      	ldr	r2, [pc, #116]	; (8010578 <HAL_TIM_PWM_Start+0x268>)
 8010504:	4293      	cmp	r3, r2
 8010506:	d00e      	beq.n	8010526 <HAL_TIM_PWM_Start+0x216>
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	4a1b      	ldr	r2, [pc, #108]	; (801057c <HAL_TIM_PWM_Start+0x26c>)
 801050e:	4293      	cmp	r3, r2
 8010510:	d009      	beq.n	8010526 <HAL_TIM_PWM_Start+0x216>
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	4a1a      	ldr	r2, [pc, #104]	; (8010580 <HAL_TIM_PWM_Start+0x270>)
 8010518:	4293      	cmp	r3, r2
 801051a:	d004      	beq.n	8010526 <HAL_TIM_PWM_Start+0x216>
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	4a18      	ldr	r2, [pc, #96]	; (8010584 <HAL_TIM_PWM_Start+0x274>)
 8010522:	4293      	cmp	r3, r2
 8010524:	d115      	bne.n	8010552 <HAL_TIM_PWM_Start+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	689a      	ldr	r2, [r3, #8]
 801052c:	4b20      	ldr	r3, [pc, #128]	; (80105b0 <HAL_TIM_PWM_Start+0x2a0>)
 801052e:	4013      	ands	r3, r2
 8010530:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	2b06      	cmp	r3, #6
 8010536:	d015      	beq.n	8010564 <HAL_TIM_PWM_Start+0x254>
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801053e:	d011      	beq.n	8010564 <HAL_TIM_PWM_Start+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	681a      	ldr	r2, [r3, #0]
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	f042 0201 	orr.w	r2, r2, #1
 801054e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010550:	e008      	b.n	8010564 <HAL_TIM_PWM_Start+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	681a      	ldr	r2, [r3, #0]
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	f042 0201 	orr.w	r2, r2, #1
 8010560:	601a      	str	r2, [r3, #0]
 8010562:	e000      	b.n	8010566 <HAL_TIM_PWM_Start+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010564:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010566:	2300      	movs	r3, #0
}
 8010568:	4618      	mov	r0, r3
 801056a:	3710      	adds	r7, #16
 801056c:	46bd      	mov	sp, r7
 801056e:	bd80      	pop	{r7, pc}
 8010570:	40012c00 	.word	0x40012c00
 8010574:	50012c00 	.word	0x50012c00
 8010578:	40013400 	.word	0x40013400
 801057c:	50013400 	.word	0x50013400
 8010580:	40014000 	.word	0x40014000
 8010584:	50014000 	.word	0x50014000
 8010588:	40014400 	.word	0x40014400
 801058c:	50014400 	.word	0x50014400
 8010590:	40014800 	.word	0x40014800
 8010594:	50014800 	.word	0x50014800
 8010598:	40000400 	.word	0x40000400
 801059c:	50000400 	.word	0x50000400
 80105a0:	40000800 	.word	0x40000800
 80105a4:	50000800 	.word	0x50000800
 80105a8:	40000c00 	.word	0x40000c00
 80105ac:	50000c00 	.word	0x50000c00
 80105b0:	00010007 	.word	0x00010007

080105b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b082      	sub	sp, #8
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	691b      	ldr	r3, [r3, #16]
 80105c2:	f003 0302 	and.w	r3, r3, #2
 80105c6:	2b02      	cmp	r3, #2
 80105c8:	d122      	bne.n	8010610 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	68db      	ldr	r3, [r3, #12]
 80105d0:	f003 0302 	and.w	r3, r3, #2
 80105d4:	2b02      	cmp	r3, #2
 80105d6:	d11b      	bne.n	8010610 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	f06f 0202 	mvn.w	r2, #2
 80105e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	2201      	movs	r2, #1
 80105e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	699b      	ldr	r3, [r3, #24]
 80105ee:	f003 0303 	and.w	r3, r3, #3
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d003      	beq.n	80105fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80105f6:	6878      	ldr	r0, [r7, #4]
 80105f8:	f000 fb7c 	bl	8010cf4 <HAL_TIM_IC_CaptureCallback>
 80105fc:	e005      	b.n	801060a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80105fe:	6878      	ldr	r0, [r7, #4]
 8010600:	f000 fb6e 	bl	8010ce0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010604:	6878      	ldr	r0, [r7, #4]
 8010606:	f000 fb7f 	bl	8010d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	2200      	movs	r2, #0
 801060e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	691b      	ldr	r3, [r3, #16]
 8010616:	f003 0304 	and.w	r3, r3, #4
 801061a:	2b04      	cmp	r3, #4
 801061c:	d122      	bne.n	8010664 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	68db      	ldr	r3, [r3, #12]
 8010624:	f003 0304 	and.w	r3, r3, #4
 8010628:	2b04      	cmp	r3, #4
 801062a:	d11b      	bne.n	8010664 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	f06f 0204 	mvn.w	r2, #4
 8010634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	2202      	movs	r2, #2
 801063a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	699b      	ldr	r3, [r3, #24]
 8010642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010646:	2b00      	cmp	r3, #0
 8010648:	d003      	beq.n	8010652 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	f000 fb52 	bl	8010cf4 <HAL_TIM_IC_CaptureCallback>
 8010650:	e005      	b.n	801065e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010652:	6878      	ldr	r0, [r7, #4]
 8010654:	f000 fb44 	bl	8010ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010658:	6878      	ldr	r0, [r7, #4]
 801065a:	f000 fb55 	bl	8010d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	2200      	movs	r2, #0
 8010662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	691b      	ldr	r3, [r3, #16]
 801066a:	f003 0308 	and.w	r3, r3, #8
 801066e:	2b08      	cmp	r3, #8
 8010670:	d122      	bne.n	80106b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	68db      	ldr	r3, [r3, #12]
 8010678:	f003 0308 	and.w	r3, r3, #8
 801067c:	2b08      	cmp	r3, #8
 801067e:	d11b      	bne.n	80106b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	f06f 0208 	mvn.w	r2, #8
 8010688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	2204      	movs	r2, #4
 801068e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	69db      	ldr	r3, [r3, #28]
 8010696:	f003 0303 	and.w	r3, r3, #3
 801069a:	2b00      	cmp	r3, #0
 801069c:	d003      	beq.n	80106a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801069e:	6878      	ldr	r0, [r7, #4]
 80106a0:	f000 fb28 	bl	8010cf4 <HAL_TIM_IC_CaptureCallback>
 80106a4:	e005      	b.n	80106b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80106a6:	6878      	ldr	r0, [r7, #4]
 80106a8:	f000 fb1a 	bl	8010ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80106ac:	6878      	ldr	r0, [r7, #4]
 80106ae:	f000 fb2b 	bl	8010d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	2200      	movs	r2, #0
 80106b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	691b      	ldr	r3, [r3, #16]
 80106be:	f003 0310 	and.w	r3, r3, #16
 80106c2:	2b10      	cmp	r3, #16
 80106c4:	d122      	bne.n	801070c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	68db      	ldr	r3, [r3, #12]
 80106cc:	f003 0310 	and.w	r3, r3, #16
 80106d0:	2b10      	cmp	r3, #16
 80106d2:	d11b      	bne.n	801070c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	f06f 0210 	mvn.w	r2, #16
 80106dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	2208      	movs	r2, #8
 80106e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	69db      	ldr	r3, [r3, #28]
 80106ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d003      	beq.n	80106fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80106f2:	6878      	ldr	r0, [r7, #4]
 80106f4:	f000 fafe 	bl	8010cf4 <HAL_TIM_IC_CaptureCallback>
 80106f8:	e005      	b.n	8010706 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80106fa:	6878      	ldr	r0, [r7, #4]
 80106fc:	f000 faf0 	bl	8010ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010700:	6878      	ldr	r0, [r7, #4]
 8010702:	f000 fb01 	bl	8010d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	2200      	movs	r2, #0
 801070a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	691b      	ldr	r3, [r3, #16]
 8010712:	f003 0301 	and.w	r3, r3, #1
 8010716:	2b01      	cmp	r3, #1
 8010718:	d10e      	bne.n	8010738 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	68db      	ldr	r3, [r3, #12]
 8010720:	f003 0301 	and.w	r3, r3, #1
 8010724:	2b01      	cmp	r3, #1
 8010726:	d107      	bne.n	8010738 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	f06f 0201 	mvn.w	r2, #1
 8010730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010732:	6878      	ldr	r0, [r7, #4]
 8010734:	f7f0 feb2 	bl	800149c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	691b      	ldr	r3, [r3, #16]
 801073e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010742:	2b80      	cmp	r3, #128	; 0x80
 8010744:	d10e      	bne.n	8010764 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	68db      	ldr	r3, [r3, #12]
 801074c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010750:	2b80      	cmp	r3, #128	; 0x80
 8010752:	d107      	bne.n	8010764 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801075c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801075e:	6878      	ldr	r0, [r7, #4]
 8010760:	f001 fa06 	bl	8011b70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	691b      	ldr	r3, [r3, #16]
 801076a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801076e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010772:	d10e      	bne.n	8010792 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	68db      	ldr	r3, [r3, #12]
 801077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801077e:	2b80      	cmp	r3, #128	; 0x80
 8010780:	d107      	bne.n	8010792 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801078a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801078c:	6878      	ldr	r0, [r7, #4]
 801078e:	f001 f9f9 	bl	8011b84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	691b      	ldr	r3, [r3, #16]
 8010798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801079c:	2b40      	cmp	r3, #64	; 0x40
 801079e:	d10e      	bne.n	80107be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	68db      	ldr	r3, [r3, #12]
 80107a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107aa:	2b40      	cmp	r3, #64	; 0x40
 80107ac:	d107      	bne.n	80107be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80107b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80107b8:	6878      	ldr	r0, [r7, #4]
 80107ba:	f000 faaf 	bl	8010d1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	691b      	ldr	r3, [r3, #16]
 80107c4:	f003 0320 	and.w	r3, r3, #32
 80107c8:	2b20      	cmp	r3, #32
 80107ca:	d10e      	bne.n	80107ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	68db      	ldr	r3, [r3, #12]
 80107d2:	f003 0320 	and.w	r3, r3, #32
 80107d6:	2b20      	cmp	r3, #32
 80107d8:	d107      	bne.n	80107ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	f06f 0220 	mvn.w	r2, #32
 80107e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80107e4:	6878      	ldr	r0, [r7, #4]
 80107e6:	f001 f9b9 	bl	8011b5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	691b      	ldr	r3, [r3, #16]
 80107f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80107f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80107f8:	d10f      	bne.n	801081a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	68db      	ldr	r3, [r3, #12]
 8010800:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010804:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010808:	d107      	bne.n	801081a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8010812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8010814:	6878      	ldr	r0, [r7, #4]
 8010816:	f001 f9bf 	bl	8011b98 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	691b      	ldr	r3, [r3, #16]
 8010820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010824:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010828:	d10f      	bne.n	801084a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	68db      	ldr	r3, [r3, #12]
 8010830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010834:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010838:	d107      	bne.n	801084a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8010842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8010844:	6878      	ldr	r0, [r7, #4]
 8010846:	f001 f9b1 	bl	8011bac <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	691b      	ldr	r3, [r3, #16]
 8010850:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010854:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010858:	d10f      	bne.n	801087a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	68db      	ldr	r3, [r3, #12]
 8010860:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010864:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010868:	d107      	bne.n	801087a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8010872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8010874:	6878      	ldr	r0, [r7, #4]
 8010876:	f001 f9a3 	bl	8011bc0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	691b      	ldr	r3, [r3, #16]
 8010880:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010884:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010888:	d10f      	bne.n	80108aa <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	68db      	ldr	r3, [r3, #12]
 8010890:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010894:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010898:	d107      	bne.n	80108aa <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80108a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80108a4:	6878      	ldr	r0, [r7, #4]
 80108a6:	f001 f995 	bl	8011bd4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80108aa:	bf00      	nop
 80108ac:	3708      	adds	r7, #8
 80108ae:	46bd      	mov	sp, r7
 80108b0:	bd80      	pop	{r7, pc}
	...

080108b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b086      	sub	sp, #24
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	60f8      	str	r0, [r7, #12]
 80108bc:	60b9      	str	r1, [r7, #8]
 80108be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80108c0:	2300      	movs	r3, #0
 80108c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80108ca:	2b01      	cmp	r3, #1
 80108cc:	d101      	bne.n	80108d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80108ce:	2302      	movs	r3, #2
 80108d0:	e0ff      	b.n	8010ad2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	2201      	movs	r2, #1
 80108d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	2b14      	cmp	r3, #20
 80108de:	f200 80f0 	bhi.w	8010ac2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80108e2:	a201      	add	r2, pc, #4	; (adr r2, 80108e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80108e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108e8:	0801093d 	.word	0x0801093d
 80108ec:	08010ac3 	.word	0x08010ac3
 80108f0:	08010ac3 	.word	0x08010ac3
 80108f4:	08010ac3 	.word	0x08010ac3
 80108f8:	0801097d 	.word	0x0801097d
 80108fc:	08010ac3 	.word	0x08010ac3
 8010900:	08010ac3 	.word	0x08010ac3
 8010904:	08010ac3 	.word	0x08010ac3
 8010908:	080109bf 	.word	0x080109bf
 801090c:	08010ac3 	.word	0x08010ac3
 8010910:	08010ac3 	.word	0x08010ac3
 8010914:	08010ac3 	.word	0x08010ac3
 8010918:	080109ff 	.word	0x080109ff
 801091c:	08010ac3 	.word	0x08010ac3
 8010920:	08010ac3 	.word	0x08010ac3
 8010924:	08010ac3 	.word	0x08010ac3
 8010928:	08010a41 	.word	0x08010a41
 801092c:	08010ac3 	.word	0x08010ac3
 8010930:	08010ac3 	.word	0x08010ac3
 8010934:	08010ac3 	.word	0x08010ac3
 8010938:	08010a81 	.word	0x08010a81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	68b9      	ldr	r1, [r7, #8]
 8010942:	4618      	mov	r0, r3
 8010944:	f000 faee 	bl	8010f24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	699a      	ldr	r2, [r3, #24]
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	f042 0208 	orr.w	r2, r2, #8
 8010956:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	699a      	ldr	r2, [r3, #24]
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	f022 0204 	bic.w	r2, r2, #4
 8010966:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	6999      	ldr	r1, [r3, #24]
 801096e:	68bb      	ldr	r3, [r7, #8]
 8010970:	691a      	ldr	r2, [r3, #16]
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	430a      	orrs	r2, r1
 8010978:	619a      	str	r2, [r3, #24]
      break;
 801097a:	e0a5      	b.n	8010ac8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	68b9      	ldr	r1, [r7, #8]
 8010982:	4618      	mov	r0, r3
 8010984:	f000 fb90 	bl	80110a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	699a      	ldr	r2, [r3, #24]
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	699a      	ldr	r2, [r3, #24]
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80109a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	6999      	ldr	r1, [r3, #24]
 80109ae:	68bb      	ldr	r3, [r7, #8]
 80109b0:	691b      	ldr	r3, [r3, #16]
 80109b2:	021a      	lsls	r2, r3, #8
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	430a      	orrs	r2, r1
 80109ba:	619a      	str	r2, [r3, #24]
      break;
 80109bc:	e084      	b.n	8010ac8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	68b9      	ldr	r1, [r7, #8]
 80109c4:	4618      	mov	r0, r3
 80109c6:	f000 fc1f 	bl	8011208 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	69da      	ldr	r2, [r3, #28]
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	f042 0208 	orr.w	r2, r2, #8
 80109d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	69da      	ldr	r2, [r3, #28]
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	f022 0204 	bic.w	r2, r2, #4
 80109e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	69d9      	ldr	r1, [r3, #28]
 80109f0:	68bb      	ldr	r3, [r7, #8]
 80109f2:	691a      	ldr	r2, [r3, #16]
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	430a      	orrs	r2, r1
 80109fa:	61da      	str	r2, [r3, #28]
      break;
 80109fc:	e064      	b.n	8010ac8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	68b9      	ldr	r1, [r7, #8]
 8010a04:	4618      	mov	r0, r3
 8010a06:	f000 fcad 	bl	8011364 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	69da      	ldr	r2, [r3, #28]
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010a18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	69da      	ldr	r2, [r3, #28]
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010a28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	69d9      	ldr	r1, [r3, #28]
 8010a30:	68bb      	ldr	r3, [r7, #8]
 8010a32:	691b      	ldr	r3, [r3, #16]
 8010a34:	021a      	lsls	r2, r3, #8
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	430a      	orrs	r2, r1
 8010a3c:	61da      	str	r2, [r3, #28]
      break;
 8010a3e:	e043      	b.n	8010ac8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	68b9      	ldr	r1, [r7, #8]
 8010a46:	4618      	mov	r0, r3
 8010a48:	f000 fd3c 	bl	80114c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	f042 0208 	orr.w	r2, r2, #8
 8010a5a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	f022 0204 	bic.w	r2, r2, #4
 8010a6a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8010a72:	68bb      	ldr	r3, [r7, #8]
 8010a74:	691a      	ldr	r2, [r3, #16]
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	430a      	orrs	r2, r1
 8010a7c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8010a7e:	e023      	b.n	8010ac8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	68b9      	ldr	r1, [r7, #8]
 8010a86:	4618      	mov	r0, r3
 8010a88:	f000 fd9e 	bl	80115c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010a9a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010aaa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8010ab2:	68bb      	ldr	r3, [r7, #8]
 8010ab4:	691b      	ldr	r3, [r3, #16]
 8010ab6:	021a      	lsls	r2, r3, #8
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	430a      	orrs	r2, r1
 8010abe:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8010ac0:	e002      	b.n	8010ac8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8010ac2:	2301      	movs	r3, #1
 8010ac4:	75fb      	strb	r3, [r7, #23]
      break;
 8010ac6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	2200      	movs	r2, #0
 8010acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	3718      	adds	r7, #24
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	bd80      	pop	{r7, pc}
 8010ada:	bf00      	nop

08010adc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010adc:	b580      	push	{r7, lr}
 8010ade:	b084      	sub	sp, #16
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
 8010ae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010af0:	2b01      	cmp	r3, #1
 8010af2:	d101      	bne.n	8010af8 <HAL_TIM_ConfigClockSource+0x1c>
 8010af4:	2302      	movs	r3, #2
 8010af6:	e0e6      	b.n	8010cc6 <HAL_TIM_ConfigClockSource+0x1ea>
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	2201      	movs	r2, #1
 8010afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2202      	movs	r2, #2
 8010b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	689b      	ldr	r3, [r3, #8]
 8010b0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010b10:	68bb      	ldr	r3, [r7, #8]
 8010b12:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8010b16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8010b1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010b1c:	68bb      	ldr	r3, [r7, #8]
 8010b1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010b22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	68ba      	ldr	r2, [r7, #8]
 8010b2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010b2c:	683b      	ldr	r3, [r7, #0]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	4a67      	ldr	r2, [pc, #412]	; (8010cd0 <HAL_TIM_ConfigClockSource+0x1f4>)
 8010b32:	4293      	cmp	r3, r2
 8010b34:	f000 80b1 	beq.w	8010c9a <HAL_TIM_ConfigClockSource+0x1be>
 8010b38:	4a65      	ldr	r2, [pc, #404]	; (8010cd0 <HAL_TIM_ConfigClockSource+0x1f4>)
 8010b3a:	4293      	cmp	r3, r2
 8010b3c:	f200 80b6 	bhi.w	8010cac <HAL_TIM_ConfigClockSource+0x1d0>
 8010b40:	4a64      	ldr	r2, [pc, #400]	; (8010cd4 <HAL_TIM_ConfigClockSource+0x1f8>)
 8010b42:	4293      	cmp	r3, r2
 8010b44:	f000 80a9 	beq.w	8010c9a <HAL_TIM_ConfigClockSource+0x1be>
 8010b48:	4a62      	ldr	r2, [pc, #392]	; (8010cd4 <HAL_TIM_ConfigClockSource+0x1f8>)
 8010b4a:	4293      	cmp	r3, r2
 8010b4c:	f200 80ae 	bhi.w	8010cac <HAL_TIM_ConfigClockSource+0x1d0>
 8010b50:	4a61      	ldr	r2, [pc, #388]	; (8010cd8 <HAL_TIM_ConfigClockSource+0x1fc>)
 8010b52:	4293      	cmp	r3, r2
 8010b54:	f000 80a1 	beq.w	8010c9a <HAL_TIM_ConfigClockSource+0x1be>
 8010b58:	4a5f      	ldr	r2, [pc, #380]	; (8010cd8 <HAL_TIM_ConfigClockSource+0x1fc>)
 8010b5a:	4293      	cmp	r3, r2
 8010b5c:	f200 80a6 	bhi.w	8010cac <HAL_TIM_ConfigClockSource+0x1d0>
 8010b60:	4a5e      	ldr	r2, [pc, #376]	; (8010cdc <HAL_TIM_ConfigClockSource+0x200>)
 8010b62:	4293      	cmp	r3, r2
 8010b64:	f000 8099 	beq.w	8010c9a <HAL_TIM_ConfigClockSource+0x1be>
 8010b68:	4a5c      	ldr	r2, [pc, #368]	; (8010cdc <HAL_TIM_ConfigClockSource+0x200>)
 8010b6a:	4293      	cmp	r3, r2
 8010b6c:	f200 809e 	bhi.w	8010cac <HAL_TIM_ConfigClockSource+0x1d0>
 8010b70:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010b74:	f000 8091 	beq.w	8010c9a <HAL_TIM_ConfigClockSource+0x1be>
 8010b78:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010b7c:	f200 8096 	bhi.w	8010cac <HAL_TIM_ConfigClockSource+0x1d0>
 8010b80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010b84:	f000 8089 	beq.w	8010c9a <HAL_TIM_ConfigClockSource+0x1be>
 8010b88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010b8c:	f200 808e 	bhi.w	8010cac <HAL_TIM_ConfigClockSource+0x1d0>
 8010b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010b94:	d03e      	beq.n	8010c14 <HAL_TIM_ConfigClockSource+0x138>
 8010b96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010b9a:	f200 8087 	bhi.w	8010cac <HAL_TIM_ConfigClockSource+0x1d0>
 8010b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010ba2:	f000 8086 	beq.w	8010cb2 <HAL_TIM_ConfigClockSource+0x1d6>
 8010ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010baa:	d87f      	bhi.n	8010cac <HAL_TIM_ConfigClockSource+0x1d0>
 8010bac:	2b70      	cmp	r3, #112	; 0x70
 8010bae:	d01a      	beq.n	8010be6 <HAL_TIM_ConfigClockSource+0x10a>
 8010bb0:	2b70      	cmp	r3, #112	; 0x70
 8010bb2:	d87b      	bhi.n	8010cac <HAL_TIM_ConfigClockSource+0x1d0>
 8010bb4:	2b60      	cmp	r3, #96	; 0x60
 8010bb6:	d050      	beq.n	8010c5a <HAL_TIM_ConfigClockSource+0x17e>
 8010bb8:	2b60      	cmp	r3, #96	; 0x60
 8010bba:	d877      	bhi.n	8010cac <HAL_TIM_ConfigClockSource+0x1d0>
 8010bbc:	2b50      	cmp	r3, #80	; 0x50
 8010bbe:	d03c      	beq.n	8010c3a <HAL_TIM_ConfigClockSource+0x15e>
 8010bc0:	2b50      	cmp	r3, #80	; 0x50
 8010bc2:	d873      	bhi.n	8010cac <HAL_TIM_ConfigClockSource+0x1d0>
 8010bc4:	2b40      	cmp	r3, #64	; 0x40
 8010bc6:	d058      	beq.n	8010c7a <HAL_TIM_ConfigClockSource+0x19e>
 8010bc8:	2b40      	cmp	r3, #64	; 0x40
 8010bca:	d86f      	bhi.n	8010cac <HAL_TIM_ConfigClockSource+0x1d0>
 8010bcc:	2b30      	cmp	r3, #48	; 0x30
 8010bce:	d064      	beq.n	8010c9a <HAL_TIM_ConfigClockSource+0x1be>
 8010bd0:	2b30      	cmp	r3, #48	; 0x30
 8010bd2:	d86b      	bhi.n	8010cac <HAL_TIM_ConfigClockSource+0x1d0>
 8010bd4:	2b20      	cmp	r3, #32
 8010bd6:	d060      	beq.n	8010c9a <HAL_TIM_ConfigClockSource+0x1be>
 8010bd8:	2b20      	cmp	r3, #32
 8010bda:	d867      	bhi.n	8010cac <HAL_TIM_ConfigClockSource+0x1d0>
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d05c      	beq.n	8010c9a <HAL_TIM_ConfigClockSource+0x1be>
 8010be0:	2b10      	cmp	r3, #16
 8010be2:	d05a      	beq.n	8010c9a <HAL_TIM_ConfigClockSource+0x1be>
 8010be4:	e062      	b.n	8010cac <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	6818      	ldr	r0, [r3, #0]
 8010bea:	683b      	ldr	r3, [r7, #0]
 8010bec:	6899      	ldr	r1, [r3, #8]
 8010bee:	683b      	ldr	r3, [r7, #0]
 8010bf0:	685a      	ldr	r2, [r3, #4]
 8010bf2:	683b      	ldr	r3, [r7, #0]
 8010bf4:	68db      	ldr	r3, [r3, #12]
 8010bf6:	f000 fde7 	bl	80117c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	689b      	ldr	r3, [r3, #8]
 8010c00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010c02:	68bb      	ldr	r3, [r7, #8]
 8010c04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8010c08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	68ba      	ldr	r2, [r7, #8]
 8010c10:	609a      	str	r2, [r3, #8]
      break;
 8010c12:	e04f      	b.n	8010cb4 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	6818      	ldr	r0, [r3, #0]
 8010c18:	683b      	ldr	r3, [r7, #0]
 8010c1a:	6899      	ldr	r1, [r3, #8]
 8010c1c:	683b      	ldr	r3, [r7, #0]
 8010c1e:	685a      	ldr	r2, [r3, #4]
 8010c20:	683b      	ldr	r3, [r7, #0]
 8010c22:	68db      	ldr	r3, [r3, #12]
 8010c24:	f000 fdd0 	bl	80117c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	689a      	ldr	r2, [r3, #8]
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010c36:	609a      	str	r2, [r3, #8]
      break;
 8010c38:	e03c      	b.n	8010cb4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	6818      	ldr	r0, [r3, #0]
 8010c3e:	683b      	ldr	r3, [r7, #0]
 8010c40:	6859      	ldr	r1, [r3, #4]
 8010c42:	683b      	ldr	r3, [r7, #0]
 8010c44:	68db      	ldr	r3, [r3, #12]
 8010c46:	461a      	mov	r2, r3
 8010c48:	f000 fd42 	bl	80116d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	2150      	movs	r1, #80	; 0x50
 8010c52:	4618      	mov	r0, r3
 8010c54:	f000 fd9b 	bl	801178e <TIM_ITRx_SetConfig>
      break;
 8010c58:	e02c      	b.n	8010cb4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	6818      	ldr	r0, [r3, #0]
 8010c5e:	683b      	ldr	r3, [r7, #0]
 8010c60:	6859      	ldr	r1, [r3, #4]
 8010c62:	683b      	ldr	r3, [r7, #0]
 8010c64:	68db      	ldr	r3, [r3, #12]
 8010c66:	461a      	mov	r2, r3
 8010c68:	f000 fd61 	bl	801172e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	2160      	movs	r1, #96	; 0x60
 8010c72:	4618      	mov	r0, r3
 8010c74:	f000 fd8b 	bl	801178e <TIM_ITRx_SetConfig>
      break;
 8010c78:	e01c      	b.n	8010cb4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	6818      	ldr	r0, [r3, #0]
 8010c7e:	683b      	ldr	r3, [r7, #0]
 8010c80:	6859      	ldr	r1, [r3, #4]
 8010c82:	683b      	ldr	r3, [r7, #0]
 8010c84:	68db      	ldr	r3, [r3, #12]
 8010c86:	461a      	mov	r2, r3
 8010c88:	f000 fd22 	bl	80116d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	2140      	movs	r1, #64	; 0x40
 8010c92:	4618      	mov	r0, r3
 8010c94:	f000 fd7b 	bl	801178e <TIM_ITRx_SetConfig>
      break;
 8010c98:	e00c      	b.n	8010cb4 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	681a      	ldr	r2, [r3, #0]
 8010c9e:	683b      	ldr	r3, [r7, #0]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	4619      	mov	r1, r3
 8010ca4:	4610      	mov	r0, r2
 8010ca6:	f000 fd72 	bl	801178e <TIM_ITRx_SetConfig>
      break;
 8010caa:	e003      	b.n	8010cb4 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8010cac:	2301      	movs	r3, #1
 8010cae:	73fb      	strb	r3, [r7, #15]
      break;
 8010cb0:	e000      	b.n	8010cb4 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8010cb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	2201      	movs	r2, #1
 8010cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	3710      	adds	r7, #16
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bd80      	pop	{r7, pc}
 8010cce:	bf00      	nop
 8010cd0:	00100070 	.word	0x00100070
 8010cd4:	00100040 	.word	0x00100040
 8010cd8:	00100030 	.word	0x00100030
 8010cdc:	00100020 	.word	0x00100020

08010ce0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010ce0:	b480      	push	{r7}
 8010ce2:	b083      	sub	sp, #12
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010ce8:	bf00      	nop
 8010cea:	370c      	adds	r7, #12
 8010cec:	46bd      	mov	sp, r7
 8010cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf2:	4770      	bx	lr

08010cf4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010cf4:	b480      	push	{r7}
 8010cf6:	b083      	sub	sp, #12
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010cfc:	bf00      	nop
 8010cfe:	370c      	adds	r7, #12
 8010d00:	46bd      	mov	sp, r7
 8010d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d06:	4770      	bx	lr

08010d08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010d08:	b480      	push	{r7}
 8010d0a:	b083      	sub	sp, #12
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010d10:	bf00      	nop
 8010d12:	370c      	adds	r7, #12
 8010d14:	46bd      	mov	sp, r7
 8010d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1a:	4770      	bx	lr

08010d1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010d1c:	b480      	push	{r7}
 8010d1e:	b083      	sub	sp, #12
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010d24:	bf00      	nop
 8010d26:	370c      	adds	r7, #12
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2e:	4770      	bx	lr

08010d30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010d30:	b480      	push	{r7}
 8010d32:	b085      	sub	sp, #20
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
 8010d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	4a68      	ldr	r2, [pc, #416]	; (8010ee4 <TIM_Base_SetConfig+0x1b4>)
 8010d44:	4293      	cmp	r3, r2
 8010d46:	d02b      	beq.n	8010da0 <TIM_Base_SetConfig+0x70>
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	4a67      	ldr	r2, [pc, #412]	; (8010ee8 <TIM_Base_SetConfig+0x1b8>)
 8010d4c:	4293      	cmp	r3, r2
 8010d4e:	d027      	beq.n	8010da0 <TIM_Base_SetConfig+0x70>
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d56:	d023      	beq.n	8010da0 <TIM_Base_SetConfig+0x70>
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010d5e:	d01f      	beq.n	8010da0 <TIM_Base_SetConfig+0x70>
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	4a62      	ldr	r2, [pc, #392]	; (8010eec <TIM_Base_SetConfig+0x1bc>)
 8010d64:	4293      	cmp	r3, r2
 8010d66:	d01b      	beq.n	8010da0 <TIM_Base_SetConfig+0x70>
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	4a61      	ldr	r2, [pc, #388]	; (8010ef0 <TIM_Base_SetConfig+0x1c0>)
 8010d6c:	4293      	cmp	r3, r2
 8010d6e:	d017      	beq.n	8010da0 <TIM_Base_SetConfig+0x70>
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	4a60      	ldr	r2, [pc, #384]	; (8010ef4 <TIM_Base_SetConfig+0x1c4>)
 8010d74:	4293      	cmp	r3, r2
 8010d76:	d013      	beq.n	8010da0 <TIM_Base_SetConfig+0x70>
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	4a5f      	ldr	r2, [pc, #380]	; (8010ef8 <TIM_Base_SetConfig+0x1c8>)
 8010d7c:	4293      	cmp	r3, r2
 8010d7e:	d00f      	beq.n	8010da0 <TIM_Base_SetConfig+0x70>
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	4a5e      	ldr	r2, [pc, #376]	; (8010efc <TIM_Base_SetConfig+0x1cc>)
 8010d84:	4293      	cmp	r3, r2
 8010d86:	d00b      	beq.n	8010da0 <TIM_Base_SetConfig+0x70>
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	4a5d      	ldr	r2, [pc, #372]	; (8010f00 <TIM_Base_SetConfig+0x1d0>)
 8010d8c:	4293      	cmp	r3, r2
 8010d8e:	d007      	beq.n	8010da0 <TIM_Base_SetConfig+0x70>
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	4a5c      	ldr	r2, [pc, #368]	; (8010f04 <TIM_Base_SetConfig+0x1d4>)
 8010d94:	4293      	cmp	r3, r2
 8010d96:	d003      	beq.n	8010da0 <TIM_Base_SetConfig+0x70>
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	4a5b      	ldr	r2, [pc, #364]	; (8010f08 <TIM_Base_SetConfig+0x1d8>)
 8010d9c:	4293      	cmp	r3, r2
 8010d9e:	d108      	bne.n	8010db2 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010da6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010da8:	683b      	ldr	r3, [r7, #0]
 8010daa:	685b      	ldr	r3, [r3, #4]
 8010dac:	68fa      	ldr	r2, [r7, #12]
 8010dae:	4313      	orrs	r3, r2
 8010db0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	4a4b      	ldr	r2, [pc, #300]	; (8010ee4 <TIM_Base_SetConfig+0x1b4>)
 8010db6:	4293      	cmp	r3, r2
 8010db8:	d043      	beq.n	8010e42 <TIM_Base_SetConfig+0x112>
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	4a4a      	ldr	r2, [pc, #296]	; (8010ee8 <TIM_Base_SetConfig+0x1b8>)
 8010dbe:	4293      	cmp	r3, r2
 8010dc0:	d03f      	beq.n	8010e42 <TIM_Base_SetConfig+0x112>
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010dc8:	d03b      	beq.n	8010e42 <TIM_Base_SetConfig+0x112>
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010dd0:	d037      	beq.n	8010e42 <TIM_Base_SetConfig+0x112>
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	4a45      	ldr	r2, [pc, #276]	; (8010eec <TIM_Base_SetConfig+0x1bc>)
 8010dd6:	4293      	cmp	r3, r2
 8010dd8:	d033      	beq.n	8010e42 <TIM_Base_SetConfig+0x112>
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	4a44      	ldr	r2, [pc, #272]	; (8010ef0 <TIM_Base_SetConfig+0x1c0>)
 8010dde:	4293      	cmp	r3, r2
 8010de0:	d02f      	beq.n	8010e42 <TIM_Base_SetConfig+0x112>
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	4a43      	ldr	r2, [pc, #268]	; (8010ef4 <TIM_Base_SetConfig+0x1c4>)
 8010de6:	4293      	cmp	r3, r2
 8010de8:	d02b      	beq.n	8010e42 <TIM_Base_SetConfig+0x112>
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	4a42      	ldr	r2, [pc, #264]	; (8010ef8 <TIM_Base_SetConfig+0x1c8>)
 8010dee:	4293      	cmp	r3, r2
 8010df0:	d027      	beq.n	8010e42 <TIM_Base_SetConfig+0x112>
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	4a41      	ldr	r2, [pc, #260]	; (8010efc <TIM_Base_SetConfig+0x1cc>)
 8010df6:	4293      	cmp	r3, r2
 8010df8:	d023      	beq.n	8010e42 <TIM_Base_SetConfig+0x112>
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	4a40      	ldr	r2, [pc, #256]	; (8010f00 <TIM_Base_SetConfig+0x1d0>)
 8010dfe:	4293      	cmp	r3, r2
 8010e00:	d01f      	beq.n	8010e42 <TIM_Base_SetConfig+0x112>
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	4a3f      	ldr	r2, [pc, #252]	; (8010f04 <TIM_Base_SetConfig+0x1d4>)
 8010e06:	4293      	cmp	r3, r2
 8010e08:	d01b      	beq.n	8010e42 <TIM_Base_SetConfig+0x112>
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	4a3e      	ldr	r2, [pc, #248]	; (8010f08 <TIM_Base_SetConfig+0x1d8>)
 8010e0e:	4293      	cmp	r3, r2
 8010e10:	d017      	beq.n	8010e42 <TIM_Base_SetConfig+0x112>
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	4a3d      	ldr	r2, [pc, #244]	; (8010f0c <TIM_Base_SetConfig+0x1dc>)
 8010e16:	4293      	cmp	r3, r2
 8010e18:	d013      	beq.n	8010e42 <TIM_Base_SetConfig+0x112>
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	4a3c      	ldr	r2, [pc, #240]	; (8010f10 <TIM_Base_SetConfig+0x1e0>)
 8010e1e:	4293      	cmp	r3, r2
 8010e20:	d00f      	beq.n	8010e42 <TIM_Base_SetConfig+0x112>
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	4a3b      	ldr	r2, [pc, #236]	; (8010f14 <TIM_Base_SetConfig+0x1e4>)
 8010e26:	4293      	cmp	r3, r2
 8010e28:	d00b      	beq.n	8010e42 <TIM_Base_SetConfig+0x112>
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	4a3a      	ldr	r2, [pc, #232]	; (8010f18 <TIM_Base_SetConfig+0x1e8>)
 8010e2e:	4293      	cmp	r3, r2
 8010e30:	d007      	beq.n	8010e42 <TIM_Base_SetConfig+0x112>
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	4a39      	ldr	r2, [pc, #228]	; (8010f1c <TIM_Base_SetConfig+0x1ec>)
 8010e36:	4293      	cmp	r3, r2
 8010e38:	d003      	beq.n	8010e42 <TIM_Base_SetConfig+0x112>
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	4a38      	ldr	r2, [pc, #224]	; (8010f20 <TIM_Base_SetConfig+0x1f0>)
 8010e3e:	4293      	cmp	r3, r2
 8010e40:	d108      	bne.n	8010e54 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010e48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	68db      	ldr	r3, [r3, #12]
 8010e4e:	68fa      	ldr	r2, [r7, #12]
 8010e50:	4313      	orrs	r3, r2
 8010e52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010e5a:	683b      	ldr	r3, [r7, #0]
 8010e5c:	695b      	ldr	r3, [r3, #20]
 8010e5e:	4313      	orrs	r3, r2
 8010e60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	68fa      	ldr	r2, [r7, #12]
 8010e66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010e68:	683b      	ldr	r3, [r7, #0]
 8010e6a:	689a      	ldr	r2, [r3, #8]
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010e70:	683b      	ldr	r3, [r7, #0]
 8010e72:	681a      	ldr	r2, [r3, #0]
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	4a1a      	ldr	r2, [pc, #104]	; (8010ee4 <TIM_Base_SetConfig+0x1b4>)
 8010e7c:	4293      	cmp	r3, r2
 8010e7e:	d023      	beq.n	8010ec8 <TIM_Base_SetConfig+0x198>
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	4a19      	ldr	r2, [pc, #100]	; (8010ee8 <TIM_Base_SetConfig+0x1b8>)
 8010e84:	4293      	cmp	r3, r2
 8010e86:	d01f      	beq.n	8010ec8 <TIM_Base_SetConfig+0x198>
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	4a1e      	ldr	r2, [pc, #120]	; (8010f04 <TIM_Base_SetConfig+0x1d4>)
 8010e8c:	4293      	cmp	r3, r2
 8010e8e:	d01b      	beq.n	8010ec8 <TIM_Base_SetConfig+0x198>
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	4a1d      	ldr	r2, [pc, #116]	; (8010f08 <TIM_Base_SetConfig+0x1d8>)
 8010e94:	4293      	cmp	r3, r2
 8010e96:	d017      	beq.n	8010ec8 <TIM_Base_SetConfig+0x198>
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	4a1c      	ldr	r2, [pc, #112]	; (8010f0c <TIM_Base_SetConfig+0x1dc>)
 8010e9c:	4293      	cmp	r3, r2
 8010e9e:	d013      	beq.n	8010ec8 <TIM_Base_SetConfig+0x198>
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	4a1b      	ldr	r2, [pc, #108]	; (8010f10 <TIM_Base_SetConfig+0x1e0>)
 8010ea4:	4293      	cmp	r3, r2
 8010ea6:	d00f      	beq.n	8010ec8 <TIM_Base_SetConfig+0x198>
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	4a1a      	ldr	r2, [pc, #104]	; (8010f14 <TIM_Base_SetConfig+0x1e4>)
 8010eac:	4293      	cmp	r3, r2
 8010eae:	d00b      	beq.n	8010ec8 <TIM_Base_SetConfig+0x198>
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	4a19      	ldr	r2, [pc, #100]	; (8010f18 <TIM_Base_SetConfig+0x1e8>)
 8010eb4:	4293      	cmp	r3, r2
 8010eb6:	d007      	beq.n	8010ec8 <TIM_Base_SetConfig+0x198>
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	4a18      	ldr	r2, [pc, #96]	; (8010f1c <TIM_Base_SetConfig+0x1ec>)
 8010ebc:	4293      	cmp	r3, r2
 8010ebe:	d003      	beq.n	8010ec8 <TIM_Base_SetConfig+0x198>
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	4a17      	ldr	r2, [pc, #92]	; (8010f20 <TIM_Base_SetConfig+0x1f0>)
 8010ec4:	4293      	cmp	r3, r2
 8010ec6:	d103      	bne.n	8010ed0 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010ec8:	683b      	ldr	r3, [r7, #0]
 8010eca:	691a      	ldr	r2, [r3, #16]
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	2201      	movs	r2, #1
 8010ed4:	615a      	str	r2, [r3, #20]
}
 8010ed6:	bf00      	nop
 8010ed8:	3714      	adds	r7, #20
 8010eda:	46bd      	mov	sp, r7
 8010edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee0:	4770      	bx	lr
 8010ee2:	bf00      	nop
 8010ee4:	40012c00 	.word	0x40012c00
 8010ee8:	50012c00 	.word	0x50012c00
 8010eec:	40000400 	.word	0x40000400
 8010ef0:	50000400 	.word	0x50000400
 8010ef4:	40000800 	.word	0x40000800
 8010ef8:	50000800 	.word	0x50000800
 8010efc:	40000c00 	.word	0x40000c00
 8010f00:	50000c00 	.word	0x50000c00
 8010f04:	40013400 	.word	0x40013400
 8010f08:	50013400 	.word	0x50013400
 8010f0c:	40014000 	.word	0x40014000
 8010f10:	50014000 	.word	0x50014000
 8010f14:	40014400 	.word	0x40014400
 8010f18:	50014400 	.word	0x50014400
 8010f1c:	40014800 	.word	0x40014800
 8010f20:	50014800 	.word	0x50014800

08010f24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010f24:	b480      	push	{r7}
 8010f26:	b087      	sub	sp, #28
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
 8010f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	6a1b      	ldr	r3, [r3, #32]
 8010f32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	6a1b      	ldr	r3, [r3, #32]
 8010f38:	f023 0201 	bic.w	r2, r3, #1
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	685b      	ldr	r3, [r3, #4]
 8010f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	699b      	ldr	r3, [r3, #24]
 8010f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	f023 0303 	bic.w	r3, r3, #3
 8010f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010f60:	683b      	ldr	r3, [r7, #0]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	68fa      	ldr	r2, [r7, #12]
 8010f66:	4313      	orrs	r3, r2
 8010f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010f6a:	697b      	ldr	r3, [r7, #20]
 8010f6c:	f023 0302 	bic.w	r3, r3, #2
 8010f70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010f72:	683b      	ldr	r3, [r7, #0]
 8010f74:	689b      	ldr	r3, [r3, #8]
 8010f76:	697a      	ldr	r2, [r7, #20]
 8010f78:	4313      	orrs	r3, r2
 8010f7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	4a40      	ldr	r2, [pc, #256]	; (8011080 <TIM_OC1_SetConfig+0x15c>)
 8010f80:	4293      	cmp	r3, r2
 8010f82:	d023      	beq.n	8010fcc <TIM_OC1_SetConfig+0xa8>
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	4a3f      	ldr	r2, [pc, #252]	; (8011084 <TIM_OC1_SetConfig+0x160>)
 8010f88:	4293      	cmp	r3, r2
 8010f8a:	d01f      	beq.n	8010fcc <TIM_OC1_SetConfig+0xa8>
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	4a3e      	ldr	r2, [pc, #248]	; (8011088 <TIM_OC1_SetConfig+0x164>)
 8010f90:	4293      	cmp	r3, r2
 8010f92:	d01b      	beq.n	8010fcc <TIM_OC1_SetConfig+0xa8>
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	4a3d      	ldr	r2, [pc, #244]	; (801108c <TIM_OC1_SetConfig+0x168>)
 8010f98:	4293      	cmp	r3, r2
 8010f9a:	d017      	beq.n	8010fcc <TIM_OC1_SetConfig+0xa8>
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	4a3c      	ldr	r2, [pc, #240]	; (8011090 <TIM_OC1_SetConfig+0x16c>)
 8010fa0:	4293      	cmp	r3, r2
 8010fa2:	d013      	beq.n	8010fcc <TIM_OC1_SetConfig+0xa8>
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	4a3b      	ldr	r2, [pc, #236]	; (8011094 <TIM_OC1_SetConfig+0x170>)
 8010fa8:	4293      	cmp	r3, r2
 8010faa:	d00f      	beq.n	8010fcc <TIM_OC1_SetConfig+0xa8>
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	4a3a      	ldr	r2, [pc, #232]	; (8011098 <TIM_OC1_SetConfig+0x174>)
 8010fb0:	4293      	cmp	r3, r2
 8010fb2:	d00b      	beq.n	8010fcc <TIM_OC1_SetConfig+0xa8>
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	4a39      	ldr	r2, [pc, #228]	; (801109c <TIM_OC1_SetConfig+0x178>)
 8010fb8:	4293      	cmp	r3, r2
 8010fba:	d007      	beq.n	8010fcc <TIM_OC1_SetConfig+0xa8>
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	4a38      	ldr	r2, [pc, #224]	; (80110a0 <TIM_OC1_SetConfig+0x17c>)
 8010fc0:	4293      	cmp	r3, r2
 8010fc2:	d003      	beq.n	8010fcc <TIM_OC1_SetConfig+0xa8>
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	4a37      	ldr	r2, [pc, #220]	; (80110a4 <TIM_OC1_SetConfig+0x180>)
 8010fc8:	4293      	cmp	r3, r2
 8010fca:	d10c      	bne.n	8010fe6 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010fcc:	697b      	ldr	r3, [r7, #20]
 8010fce:	f023 0308 	bic.w	r3, r3, #8
 8010fd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010fd4:	683b      	ldr	r3, [r7, #0]
 8010fd6:	68db      	ldr	r3, [r3, #12]
 8010fd8:	697a      	ldr	r2, [r7, #20]
 8010fda:	4313      	orrs	r3, r2
 8010fdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010fde:	697b      	ldr	r3, [r7, #20]
 8010fe0:	f023 0304 	bic.w	r3, r3, #4
 8010fe4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	4a25      	ldr	r2, [pc, #148]	; (8011080 <TIM_OC1_SetConfig+0x15c>)
 8010fea:	4293      	cmp	r3, r2
 8010fec:	d023      	beq.n	8011036 <TIM_OC1_SetConfig+0x112>
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	4a24      	ldr	r2, [pc, #144]	; (8011084 <TIM_OC1_SetConfig+0x160>)
 8010ff2:	4293      	cmp	r3, r2
 8010ff4:	d01f      	beq.n	8011036 <TIM_OC1_SetConfig+0x112>
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	4a23      	ldr	r2, [pc, #140]	; (8011088 <TIM_OC1_SetConfig+0x164>)
 8010ffa:	4293      	cmp	r3, r2
 8010ffc:	d01b      	beq.n	8011036 <TIM_OC1_SetConfig+0x112>
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	4a22      	ldr	r2, [pc, #136]	; (801108c <TIM_OC1_SetConfig+0x168>)
 8011002:	4293      	cmp	r3, r2
 8011004:	d017      	beq.n	8011036 <TIM_OC1_SetConfig+0x112>
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	4a21      	ldr	r2, [pc, #132]	; (8011090 <TIM_OC1_SetConfig+0x16c>)
 801100a:	4293      	cmp	r3, r2
 801100c:	d013      	beq.n	8011036 <TIM_OC1_SetConfig+0x112>
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	4a20      	ldr	r2, [pc, #128]	; (8011094 <TIM_OC1_SetConfig+0x170>)
 8011012:	4293      	cmp	r3, r2
 8011014:	d00f      	beq.n	8011036 <TIM_OC1_SetConfig+0x112>
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	4a1f      	ldr	r2, [pc, #124]	; (8011098 <TIM_OC1_SetConfig+0x174>)
 801101a:	4293      	cmp	r3, r2
 801101c:	d00b      	beq.n	8011036 <TIM_OC1_SetConfig+0x112>
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	4a1e      	ldr	r2, [pc, #120]	; (801109c <TIM_OC1_SetConfig+0x178>)
 8011022:	4293      	cmp	r3, r2
 8011024:	d007      	beq.n	8011036 <TIM_OC1_SetConfig+0x112>
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	4a1d      	ldr	r2, [pc, #116]	; (80110a0 <TIM_OC1_SetConfig+0x17c>)
 801102a:	4293      	cmp	r3, r2
 801102c:	d003      	beq.n	8011036 <TIM_OC1_SetConfig+0x112>
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	4a1c      	ldr	r2, [pc, #112]	; (80110a4 <TIM_OC1_SetConfig+0x180>)
 8011032:	4293      	cmp	r3, r2
 8011034:	d111      	bne.n	801105a <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8011036:	693b      	ldr	r3, [r7, #16]
 8011038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801103c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801103e:	693b      	ldr	r3, [r7, #16]
 8011040:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011044:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8011046:	683b      	ldr	r3, [r7, #0]
 8011048:	695b      	ldr	r3, [r3, #20]
 801104a:	693a      	ldr	r2, [r7, #16]
 801104c:	4313      	orrs	r3, r2
 801104e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011050:	683b      	ldr	r3, [r7, #0]
 8011052:	699b      	ldr	r3, [r3, #24]
 8011054:	693a      	ldr	r2, [r7, #16]
 8011056:	4313      	orrs	r3, r2
 8011058:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	693a      	ldr	r2, [r7, #16]
 801105e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	68fa      	ldr	r2, [r7, #12]
 8011064:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011066:	683b      	ldr	r3, [r7, #0]
 8011068:	685a      	ldr	r2, [r3, #4]
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	697a      	ldr	r2, [r7, #20]
 8011072:	621a      	str	r2, [r3, #32]
}
 8011074:	bf00      	nop
 8011076:	371c      	adds	r7, #28
 8011078:	46bd      	mov	sp, r7
 801107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801107e:	4770      	bx	lr
 8011080:	40012c00 	.word	0x40012c00
 8011084:	50012c00 	.word	0x50012c00
 8011088:	40013400 	.word	0x40013400
 801108c:	50013400 	.word	0x50013400
 8011090:	40014000 	.word	0x40014000
 8011094:	50014000 	.word	0x50014000
 8011098:	40014400 	.word	0x40014400
 801109c:	50014400 	.word	0x50014400
 80110a0:	40014800 	.word	0x40014800
 80110a4:	50014800 	.word	0x50014800

080110a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80110a8:	b480      	push	{r7}
 80110aa:	b087      	sub	sp, #28
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
 80110b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	6a1b      	ldr	r3, [r3, #32]
 80110b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	6a1b      	ldr	r3, [r3, #32]
 80110bc:	f023 0210 	bic.w	r2, r3, #16
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	685b      	ldr	r3, [r3, #4]
 80110c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	699b      	ldr	r3, [r3, #24]
 80110ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80110d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80110da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80110e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80110e4:	683b      	ldr	r3, [r7, #0]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	021b      	lsls	r3, r3, #8
 80110ea:	68fa      	ldr	r2, [r7, #12]
 80110ec:	4313      	orrs	r3, r2
 80110ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80110f0:	697b      	ldr	r3, [r7, #20]
 80110f2:	f023 0320 	bic.w	r3, r3, #32
 80110f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80110f8:	683b      	ldr	r3, [r7, #0]
 80110fa:	689b      	ldr	r3, [r3, #8]
 80110fc:	011b      	lsls	r3, r3, #4
 80110fe:	697a      	ldr	r2, [r7, #20]
 8011100:	4313      	orrs	r3, r2
 8011102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	4a36      	ldr	r2, [pc, #216]	; (80111e0 <TIM_OC2_SetConfig+0x138>)
 8011108:	4293      	cmp	r3, r2
 801110a:	d00b      	beq.n	8011124 <TIM_OC2_SetConfig+0x7c>
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	4a35      	ldr	r2, [pc, #212]	; (80111e4 <TIM_OC2_SetConfig+0x13c>)
 8011110:	4293      	cmp	r3, r2
 8011112:	d007      	beq.n	8011124 <TIM_OC2_SetConfig+0x7c>
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	4a34      	ldr	r2, [pc, #208]	; (80111e8 <TIM_OC2_SetConfig+0x140>)
 8011118:	4293      	cmp	r3, r2
 801111a:	d003      	beq.n	8011124 <TIM_OC2_SetConfig+0x7c>
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	4a33      	ldr	r2, [pc, #204]	; (80111ec <TIM_OC2_SetConfig+0x144>)
 8011120:	4293      	cmp	r3, r2
 8011122:	d10d      	bne.n	8011140 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011124:	697b      	ldr	r3, [r7, #20]
 8011126:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801112a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801112c:	683b      	ldr	r3, [r7, #0]
 801112e:	68db      	ldr	r3, [r3, #12]
 8011130:	011b      	lsls	r3, r3, #4
 8011132:	697a      	ldr	r2, [r7, #20]
 8011134:	4313      	orrs	r3, r2
 8011136:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011138:	697b      	ldr	r3, [r7, #20]
 801113a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801113e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	4a27      	ldr	r2, [pc, #156]	; (80111e0 <TIM_OC2_SetConfig+0x138>)
 8011144:	4293      	cmp	r3, r2
 8011146:	d023      	beq.n	8011190 <TIM_OC2_SetConfig+0xe8>
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	4a26      	ldr	r2, [pc, #152]	; (80111e4 <TIM_OC2_SetConfig+0x13c>)
 801114c:	4293      	cmp	r3, r2
 801114e:	d01f      	beq.n	8011190 <TIM_OC2_SetConfig+0xe8>
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	4a25      	ldr	r2, [pc, #148]	; (80111e8 <TIM_OC2_SetConfig+0x140>)
 8011154:	4293      	cmp	r3, r2
 8011156:	d01b      	beq.n	8011190 <TIM_OC2_SetConfig+0xe8>
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	4a24      	ldr	r2, [pc, #144]	; (80111ec <TIM_OC2_SetConfig+0x144>)
 801115c:	4293      	cmp	r3, r2
 801115e:	d017      	beq.n	8011190 <TIM_OC2_SetConfig+0xe8>
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	4a23      	ldr	r2, [pc, #140]	; (80111f0 <TIM_OC2_SetConfig+0x148>)
 8011164:	4293      	cmp	r3, r2
 8011166:	d013      	beq.n	8011190 <TIM_OC2_SetConfig+0xe8>
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	4a22      	ldr	r2, [pc, #136]	; (80111f4 <TIM_OC2_SetConfig+0x14c>)
 801116c:	4293      	cmp	r3, r2
 801116e:	d00f      	beq.n	8011190 <TIM_OC2_SetConfig+0xe8>
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	4a21      	ldr	r2, [pc, #132]	; (80111f8 <TIM_OC2_SetConfig+0x150>)
 8011174:	4293      	cmp	r3, r2
 8011176:	d00b      	beq.n	8011190 <TIM_OC2_SetConfig+0xe8>
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	4a20      	ldr	r2, [pc, #128]	; (80111fc <TIM_OC2_SetConfig+0x154>)
 801117c:	4293      	cmp	r3, r2
 801117e:	d007      	beq.n	8011190 <TIM_OC2_SetConfig+0xe8>
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	4a1f      	ldr	r2, [pc, #124]	; (8011200 <TIM_OC2_SetConfig+0x158>)
 8011184:	4293      	cmp	r3, r2
 8011186:	d003      	beq.n	8011190 <TIM_OC2_SetConfig+0xe8>
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	4a1e      	ldr	r2, [pc, #120]	; (8011204 <TIM_OC2_SetConfig+0x15c>)
 801118c:	4293      	cmp	r3, r2
 801118e:	d113      	bne.n	80111b8 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011190:	693b      	ldr	r3, [r7, #16]
 8011192:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011196:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011198:	693b      	ldr	r3, [r7, #16]
 801119a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801119e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80111a0:	683b      	ldr	r3, [r7, #0]
 80111a2:	695b      	ldr	r3, [r3, #20]
 80111a4:	009b      	lsls	r3, r3, #2
 80111a6:	693a      	ldr	r2, [r7, #16]
 80111a8:	4313      	orrs	r3, r2
 80111aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80111ac:	683b      	ldr	r3, [r7, #0]
 80111ae:	699b      	ldr	r3, [r3, #24]
 80111b0:	009b      	lsls	r3, r3, #2
 80111b2:	693a      	ldr	r2, [r7, #16]
 80111b4:	4313      	orrs	r3, r2
 80111b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	693a      	ldr	r2, [r7, #16]
 80111bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	68fa      	ldr	r2, [r7, #12]
 80111c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80111c4:	683b      	ldr	r3, [r7, #0]
 80111c6:	685a      	ldr	r2, [r3, #4]
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	697a      	ldr	r2, [r7, #20]
 80111d0:	621a      	str	r2, [r3, #32]
}
 80111d2:	bf00      	nop
 80111d4:	371c      	adds	r7, #28
 80111d6:	46bd      	mov	sp, r7
 80111d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111dc:	4770      	bx	lr
 80111de:	bf00      	nop
 80111e0:	40012c00 	.word	0x40012c00
 80111e4:	50012c00 	.word	0x50012c00
 80111e8:	40013400 	.word	0x40013400
 80111ec:	50013400 	.word	0x50013400
 80111f0:	40014000 	.word	0x40014000
 80111f4:	50014000 	.word	0x50014000
 80111f8:	40014400 	.word	0x40014400
 80111fc:	50014400 	.word	0x50014400
 8011200:	40014800 	.word	0x40014800
 8011204:	50014800 	.word	0x50014800

08011208 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011208:	b480      	push	{r7}
 801120a:	b087      	sub	sp, #28
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
 8011210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	6a1b      	ldr	r3, [r3, #32]
 8011216:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	6a1b      	ldr	r3, [r3, #32]
 801121c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	685b      	ldr	r3, [r3, #4]
 8011228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	69db      	ldr	r3, [r3, #28]
 801122e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801123a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	f023 0303 	bic.w	r3, r3, #3
 8011242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011244:	683b      	ldr	r3, [r7, #0]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	68fa      	ldr	r2, [r7, #12]
 801124a:	4313      	orrs	r3, r2
 801124c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801124e:	697b      	ldr	r3, [r7, #20]
 8011250:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011256:	683b      	ldr	r3, [r7, #0]
 8011258:	689b      	ldr	r3, [r3, #8]
 801125a:	021b      	lsls	r3, r3, #8
 801125c:	697a      	ldr	r2, [r7, #20]
 801125e:	4313      	orrs	r3, r2
 8011260:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	4a35      	ldr	r2, [pc, #212]	; (801133c <TIM_OC3_SetConfig+0x134>)
 8011266:	4293      	cmp	r3, r2
 8011268:	d00b      	beq.n	8011282 <TIM_OC3_SetConfig+0x7a>
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	4a34      	ldr	r2, [pc, #208]	; (8011340 <TIM_OC3_SetConfig+0x138>)
 801126e:	4293      	cmp	r3, r2
 8011270:	d007      	beq.n	8011282 <TIM_OC3_SetConfig+0x7a>
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	4a33      	ldr	r2, [pc, #204]	; (8011344 <TIM_OC3_SetConfig+0x13c>)
 8011276:	4293      	cmp	r3, r2
 8011278:	d003      	beq.n	8011282 <TIM_OC3_SetConfig+0x7a>
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	4a32      	ldr	r2, [pc, #200]	; (8011348 <TIM_OC3_SetConfig+0x140>)
 801127e:	4293      	cmp	r3, r2
 8011280:	d10d      	bne.n	801129e <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011282:	697b      	ldr	r3, [r7, #20]
 8011284:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011288:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801128a:	683b      	ldr	r3, [r7, #0]
 801128c:	68db      	ldr	r3, [r3, #12]
 801128e:	021b      	lsls	r3, r3, #8
 8011290:	697a      	ldr	r2, [r7, #20]
 8011292:	4313      	orrs	r3, r2
 8011294:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011296:	697b      	ldr	r3, [r7, #20]
 8011298:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801129c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	4a26      	ldr	r2, [pc, #152]	; (801133c <TIM_OC3_SetConfig+0x134>)
 80112a2:	4293      	cmp	r3, r2
 80112a4:	d023      	beq.n	80112ee <TIM_OC3_SetConfig+0xe6>
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	4a25      	ldr	r2, [pc, #148]	; (8011340 <TIM_OC3_SetConfig+0x138>)
 80112aa:	4293      	cmp	r3, r2
 80112ac:	d01f      	beq.n	80112ee <TIM_OC3_SetConfig+0xe6>
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	4a24      	ldr	r2, [pc, #144]	; (8011344 <TIM_OC3_SetConfig+0x13c>)
 80112b2:	4293      	cmp	r3, r2
 80112b4:	d01b      	beq.n	80112ee <TIM_OC3_SetConfig+0xe6>
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	4a23      	ldr	r2, [pc, #140]	; (8011348 <TIM_OC3_SetConfig+0x140>)
 80112ba:	4293      	cmp	r3, r2
 80112bc:	d017      	beq.n	80112ee <TIM_OC3_SetConfig+0xe6>
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	4a22      	ldr	r2, [pc, #136]	; (801134c <TIM_OC3_SetConfig+0x144>)
 80112c2:	4293      	cmp	r3, r2
 80112c4:	d013      	beq.n	80112ee <TIM_OC3_SetConfig+0xe6>
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	4a21      	ldr	r2, [pc, #132]	; (8011350 <TIM_OC3_SetConfig+0x148>)
 80112ca:	4293      	cmp	r3, r2
 80112cc:	d00f      	beq.n	80112ee <TIM_OC3_SetConfig+0xe6>
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	4a20      	ldr	r2, [pc, #128]	; (8011354 <TIM_OC3_SetConfig+0x14c>)
 80112d2:	4293      	cmp	r3, r2
 80112d4:	d00b      	beq.n	80112ee <TIM_OC3_SetConfig+0xe6>
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	4a1f      	ldr	r2, [pc, #124]	; (8011358 <TIM_OC3_SetConfig+0x150>)
 80112da:	4293      	cmp	r3, r2
 80112dc:	d007      	beq.n	80112ee <TIM_OC3_SetConfig+0xe6>
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	4a1e      	ldr	r2, [pc, #120]	; (801135c <TIM_OC3_SetConfig+0x154>)
 80112e2:	4293      	cmp	r3, r2
 80112e4:	d003      	beq.n	80112ee <TIM_OC3_SetConfig+0xe6>
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	4a1d      	ldr	r2, [pc, #116]	; (8011360 <TIM_OC3_SetConfig+0x158>)
 80112ea:	4293      	cmp	r3, r2
 80112ec:	d113      	bne.n	8011316 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80112ee:	693b      	ldr	r3, [r7, #16]
 80112f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80112f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80112f6:	693b      	ldr	r3, [r7, #16]
 80112f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80112fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	695b      	ldr	r3, [r3, #20]
 8011302:	011b      	lsls	r3, r3, #4
 8011304:	693a      	ldr	r2, [r7, #16]
 8011306:	4313      	orrs	r3, r2
 8011308:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801130a:	683b      	ldr	r3, [r7, #0]
 801130c:	699b      	ldr	r3, [r3, #24]
 801130e:	011b      	lsls	r3, r3, #4
 8011310:	693a      	ldr	r2, [r7, #16]
 8011312:	4313      	orrs	r3, r2
 8011314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	693a      	ldr	r2, [r7, #16]
 801131a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	68fa      	ldr	r2, [r7, #12]
 8011320:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011322:	683b      	ldr	r3, [r7, #0]
 8011324:	685a      	ldr	r2, [r3, #4]
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	697a      	ldr	r2, [r7, #20]
 801132e:	621a      	str	r2, [r3, #32]
}
 8011330:	bf00      	nop
 8011332:	371c      	adds	r7, #28
 8011334:	46bd      	mov	sp, r7
 8011336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133a:	4770      	bx	lr
 801133c:	40012c00 	.word	0x40012c00
 8011340:	50012c00 	.word	0x50012c00
 8011344:	40013400 	.word	0x40013400
 8011348:	50013400 	.word	0x50013400
 801134c:	40014000 	.word	0x40014000
 8011350:	50014000 	.word	0x50014000
 8011354:	40014400 	.word	0x40014400
 8011358:	50014400 	.word	0x50014400
 801135c:	40014800 	.word	0x40014800
 8011360:	50014800 	.word	0x50014800

08011364 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011364:	b480      	push	{r7}
 8011366:	b087      	sub	sp, #28
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
 801136c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	6a1b      	ldr	r3, [r3, #32]
 8011372:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	6a1b      	ldr	r3, [r3, #32]
 8011378:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	685b      	ldr	r3, [r3, #4]
 8011384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	69db      	ldr	r3, [r3, #28]
 801138a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801139e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80113a0:	683b      	ldr	r3, [r7, #0]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	021b      	lsls	r3, r3, #8
 80113a6:	68fa      	ldr	r2, [r7, #12]
 80113a8:	4313      	orrs	r3, r2
 80113aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80113ac:	697b      	ldr	r3, [r7, #20]
 80113ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80113b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80113b4:	683b      	ldr	r3, [r7, #0]
 80113b6:	689b      	ldr	r3, [r3, #8]
 80113b8:	031b      	lsls	r3, r3, #12
 80113ba:	697a      	ldr	r2, [r7, #20]
 80113bc:	4313      	orrs	r3, r2
 80113be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	4a36      	ldr	r2, [pc, #216]	; (801149c <TIM_OC4_SetConfig+0x138>)
 80113c4:	4293      	cmp	r3, r2
 80113c6:	d00b      	beq.n	80113e0 <TIM_OC4_SetConfig+0x7c>
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	4a35      	ldr	r2, [pc, #212]	; (80114a0 <TIM_OC4_SetConfig+0x13c>)
 80113cc:	4293      	cmp	r3, r2
 80113ce:	d007      	beq.n	80113e0 <TIM_OC4_SetConfig+0x7c>
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	4a34      	ldr	r2, [pc, #208]	; (80114a4 <TIM_OC4_SetConfig+0x140>)
 80113d4:	4293      	cmp	r3, r2
 80113d6:	d003      	beq.n	80113e0 <TIM_OC4_SetConfig+0x7c>
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	4a33      	ldr	r2, [pc, #204]	; (80114a8 <TIM_OC4_SetConfig+0x144>)
 80113dc:	4293      	cmp	r3, r2
 80113de:	d10d      	bne.n	80113fc <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80113e0:	697b      	ldr	r3, [r7, #20]
 80113e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80113e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80113e8:	683b      	ldr	r3, [r7, #0]
 80113ea:	68db      	ldr	r3, [r3, #12]
 80113ec:	031b      	lsls	r3, r3, #12
 80113ee:	697a      	ldr	r2, [r7, #20]
 80113f0:	4313      	orrs	r3, r2
 80113f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80113f4:	697b      	ldr	r3, [r7, #20]
 80113f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80113fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	4a27      	ldr	r2, [pc, #156]	; (801149c <TIM_OC4_SetConfig+0x138>)
 8011400:	4293      	cmp	r3, r2
 8011402:	d023      	beq.n	801144c <TIM_OC4_SetConfig+0xe8>
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	4a26      	ldr	r2, [pc, #152]	; (80114a0 <TIM_OC4_SetConfig+0x13c>)
 8011408:	4293      	cmp	r3, r2
 801140a:	d01f      	beq.n	801144c <TIM_OC4_SetConfig+0xe8>
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	4a25      	ldr	r2, [pc, #148]	; (80114a4 <TIM_OC4_SetConfig+0x140>)
 8011410:	4293      	cmp	r3, r2
 8011412:	d01b      	beq.n	801144c <TIM_OC4_SetConfig+0xe8>
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	4a24      	ldr	r2, [pc, #144]	; (80114a8 <TIM_OC4_SetConfig+0x144>)
 8011418:	4293      	cmp	r3, r2
 801141a:	d017      	beq.n	801144c <TIM_OC4_SetConfig+0xe8>
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	4a23      	ldr	r2, [pc, #140]	; (80114ac <TIM_OC4_SetConfig+0x148>)
 8011420:	4293      	cmp	r3, r2
 8011422:	d013      	beq.n	801144c <TIM_OC4_SetConfig+0xe8>
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	4a22      	ldr	r2, [pc, #136]	; (80114b0 <TIM_OC4_SetConfig+0x14c>)
 8011428:	4293      	cmp	r3, r2
 801142a:	d00f      	beq.n	801144c <TIM_OC4_SetConfig+0xe8>
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	4a21      	ldr	r2, [pc, #132]	; (80114b4 <TIM_OC4_SetConfig+0x150>)
 8011430:	4293      	cmp	r3, r2
 8011432:	d00b      	beq.n	801144c <TIM_OC4_SetConfig+0xe8>
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	4a20      	ldr	r2, [pc, #128]	; (80114b8 <TIM_OC4_SetConfig+0x154>)
 8011438:	4293      	cmp	r3, r2
 801143a:	d007      	beq.n	801144c <TIM_OC4_SetConfig+0xe8>
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	4a1f      	ldr	r2, [pc, #124]	; (80114bc <TIM_OC4_SetConfig+0x158>)
 8011440:	4293      	cmp	r3, r2
 8011442:	d003      	beq.n	801144c <TIM_OC4_SetConfig+0xe8>
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	4a1e      	ldr	r2, [pc, #120]	; (80114c0 <TIM_OC4_SetConfig+0x15c>)
 8011448:	4293      	cmp	r3, r2
 801144a:	d113      	bne.n	8011474 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801144c:	693b      	ldr	r3, [r7, #16]
 801144e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011452:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8011454:	693b      	ldr	r3, [r7, #16]
 8011456:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801145a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801145c:	683b      	ldr	r3, [r7, #0]
 801145e:	695b      	ldr	r3, [r3, #20]
 8011460:	019b      	lsls	r3, r3, #6
 8011462:	693a      	ldr	r2, [r7, #16]
 8011464:	4313      	orrs	r3, r2
 8011466:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8011468:	683b      	ldr	r3, [r7, #0]
 801146a:	699b      	ldr	r3, [r3, #24]
 801146c:	019b      	lsls	r3, r3, #6
 801146e:	693a      	ldr	r2, [r7, #16]
 8011470:	4313      	orrs	r3, r2
 8011472:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	693a      	ldr	r2, [r7, #16]
 8011478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	68fa      	ldr	r2, [r7, #12]
 801147e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011480:	683b      	ldr	r3, [r7, #0]
 8011482:	685a      	ldr	r2, [r3, #4]
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	697a      	ldr	r2, [r7, #20]
 801148c:	621a      	str	r2, [r3, #32]
}
 801148e:	bf00      	nop
 8011490:	371c      	adds	r7, #28
 8011492:	46bd      	mov	sp, r7
 8011494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011498:	4770      	bx	lr
 801149a:	bf00      	nop
 801149c:	40012c00 	.word	0x40012c00
 80114a0:	50012c00 	.word	0x50012c00
 80114a4:	40013400 	.word	0x40013400
 80114a8:	50013400 	.word	0x50013400
 80114ac:	40014000 	.word	0x40014000
 80114b0:	50014000 	.word	0x50014000
 80114b4:	40014400 	.word	0x40014400
 80114b8:	50014400 	.word	0x50014400
 80114bc:	40014800 	.word	0x40014800
 80114c0:	50014800 	.word	0x50014800

080114c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80114c4:	b480      	push	{r7}
 80114c6:	b087      	sub	sp, #28
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	6078      	str	r0, [r7, #4]
 80114cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	6a1b      	ldr	r3, [r3, #32]
 80114d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	6a1b      	ldr	r3, [r3, #32]
 80114d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	685b      	ldr	r3, [r3, #4]
 80114e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80114ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80114f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80114f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80114f8:	683b      	ldr	r3, [r7, #0]
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	68fa      	ldr	r2, [r7, #12]
 80114fe:	4313      	orrs	r3, r2
 8011500:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011502:	693b      	ldr	r3, [r7, #16]
 8011504:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8011508:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801150a:	683b      	ldr	r3, [r7, #0]
 801150c:	689b      	ldr	r3, [r3, #8]
 801150e:	041b      	lsls	r3, r3, #16
 8011510:	693a      	ldr	r2, [r7, #16]
 8011512:	4313      	orrs	r3, r2
 8011514:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	4a21      	ldr	r2, [pc, #132]	; (80115a0 <TIM_OC5_SetConfig+0xdc>)
 801151a:	4293      	cmp	r3, r2
 801151c:	d023      	beq.n	8011566 <TIM_OC5_SetConfig+0xa2>
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	4a20      	ldr	r2, [pc, #128]	; (80115a4 <TIM_OC5_SetConfig+0xe0>)
 8011522:	4293      	cmp	r3, r2
 8011524:	d01f      	beq.n	8011566 <TIM_OC5_SetConfig+0xa2>
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	4a1f      	ldr	r2, [pc, #124]	; (80115a8 <TIM_OC5_SetConfig+0xe4>)
 801152a:	4293      	cmp	r3, r2
 801152c:	d01b      	beq.n	8011566 <TIM_OC5_SetConfig+0xa2>
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	4a1e      	ldr	r2, [pc, #120]	; (80115ac <TIM_OC5_SetConfig+0xe8>)
 8011532:	4293      	cmp	r3, r2
 8011534:	d017      	beq.n	8011566 <TIM_OC5_SetConfig+0xa2>
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	4a1d      	ldr	r2, [pc, #116]	; (80115b0 <TIM_OC5_SetConfig+0xec>)
 801153a:	4293      	cmp	r3, r2
 801153c:	d013      	beq.n	8011566 <TIM_OC5_SetConfig+0xa2>
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	4a1c      	ldr	r2, [pc, #112]	; (80115b4 <TIM_OC5_SetConfig+0xf0>)
 8011542:	4293      	cmp	r3, r2
 8011544:	d00f      	beq.n	8011566 <TIM_OC5_SetConfig+0xa2>
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	4a1b      	ldr	r2, [pc, #108]	; (80115b8 <TIM_OC5_SetConfig+0xf4>)
 801154a:	4293      	cmp	r3, r2
 801154c:	d00b      	beq.n	8011566 <TIM_OC5_SetConfig+0xa2>
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	4a1a      	ldr	r2, [pc, #104]	; (80115bc <TIM_OC5_SetConfig+0xf8>)
 8011552:	4293      	cmp	r3, r2
 8011554:	d007      	beq.n	8011566 <TIM_OC5_SetConfig+0xa2>
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	4a19      	ldr	r2, [pc, #100]	; (80115c0 <TIM_OC5_SetConfig+0xfc>)
 801155a:	4293      	cmp	r3, r2
 801155c:	d003      	beq.n	8011566 <TIM_OC5_SetConfig+0xa2>
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	4a18      	ldr	r2, [pc, #96]	; (80115c4 <TIM_OC5_SetConfig+0x100>)
 8011562:	4293      	cmp	r3, r2
 8011564:	d109      	bne.n	801157a <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011566:	697b      	ldr	r3, [r7, #20]
 8011568:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801156c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801156e:	683b      	ldr	r3, [r7, #0]
 8011570:	695b      	ldr	r3, [r3, #20]
 8011572:	021b      	lsls	r3, r3, #8
 8011574:	697a      	ldr	r2, [r7, #20]
 8011576:	4313      	orrs	r3, r2
 8011578:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	697a      	ldr	r2, [r7, #20]
 801157e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	68fa      	ldr	r2, [r7, #12]
 8011584:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011586:	683b      	ldr	r3, [r7, #0]
 8011588:	685a      	ldr	r2, [r3, #4]
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	693a      	ldr	r2, [r7, #16]
 8011592:	621a      	str	r2, [r3, #32]
}
 8011594:	bf00      	nop
 8011596:	371c      	adds	r7, #28
 8011598:	46bd      	mov	sp, r7
 801159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159e:	4770      	bx	lr
 80115a0:	40012c00 	.word	0x40012c00
 80115a4:	50012c00 	.word	0x50012c00
 80115a8:	40013400 	.word	0x40013400
 80115ac:	50013400 	.word	0x50013400
 80115b0:	40014000 	.word	0x40014000
 80115b4:	50014000 	.word	0x50014000
 80115b8:	40014400 	.word	0x40014400
 80115bc:	50014400 	.word	0x50014400
 80115c0:	40014800 	.word	0x40014800
 80115c4:	50014800 	.word	0x50014800

080115c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80115c8:	b480      	push	{r7}
 80115ca:	b087      	sub	sp, #28
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
 80115d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	6a1b      	ldr	r3, [r3, #32]
 80115d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	6a1b      	ldr	r3, [r3, #32]
 80115dc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	685b      	ldr	r3, [r3, #4]
 80115e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80115ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80115f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80115fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80115fc:	683b      	ldr	r3, [r7, #0]
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	021b      	lsls	r3, r3, #8
 8011602:	68fa      	ldr	r2, [r7, #12]
 8011604:	4313      	orrs	r3, r2
 8011606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011608:	693b      	ldr	r3, [r7, #16]
 801160a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801160e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011610:	683b      	ldr	r3, [r7, #0]
 8011612:	689b      	ldr	r3, [r3, #8]
 8011614:	051b      	lsls	r3, r3, #20
 8011616:	693a      	ldr	r2, [r7, #16]
 8011618:	4313      	orrs	r3, r2
 801161a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	4a22      	ldr	r2, [pc, #136]	; (80116a8 <TIM_OC6_SetConfig+0xe0>)
 8011620:	4293      	cmp	r3, r2
 8011622:	d023      	beq.n	801166c <TIM_OC6_SetConfig+0xa4>
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	4a21      	ldr	r2, [pc, #132]	; (80116ac <TIM_OC6_SetConfig+0xe4>)
 8011628:	4293      	cmp	r3, r2
 801162a:	d01f      	beq.n	801166c <TIM_OC6_SetConfig+0xa4>
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	4a20      	ldr	r2, [pc, #128]	; (80116b0 <TIM_OC6_SetConfig+0xe8>)
 8011630:	4293      	cmp	r3, r2
 8011632:	d01b      	beq.n	801166c <TIM_OC6_SetConfig+0xa4>
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	4a1f      	ldr	r2, [pc, #124]	; (80116b4 <TIM_OC6_SetConfig+0xec>)
 8011638:	4293      	cmp	r3, r2
 801163a:	d017      	beq.n	801166c <TIM_OC6_SetConfig+0xa4>
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	4a1e      	ldr	r2, [pc, #120]	; (80116b8 <TIM_OC6_SetConfig+0xf0>)
 8011640:	4293      	cmp	r3, r2
 8011642:	d013      	beq.n	801166c <TIM_OC6_SetConfig+0xa4>
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	4a1d      	ldr	r2, [pc, #116]	; (80116bc <TIM_OC6_SetConfig+0xf4>)
 8011648:	4293      	cmp	r3, r2
 801164a:	d00f      	beq.n	801166c <TIM_OC6_SetConfig+0xa4>
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	4a1c      	ldr	r2, [pc, #112]	; (80116c0 <TIM_OC6_SetConfig+0xf8>)
 8011650:	4293      	cmp	r3, r2
 8011652:	d00b      	beq.n	801166c <TIM_OC6_SetConfig+0xa4>
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	4a1b      	ldr	r2, [pc, #108]	; (80116c4 <TIM_OC6_SetConfig+0xfc>)
 8011658:	4293      	cmp	r3, r2
 801165a:	d007      	beq.n	801166c <TIM_OC6_SetConfig+0xa4>
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	4a1a      	ldr	r2, [pc, #104]	; (80116c8 <TIM_OC6_SetConfig+0x100>)
 8011660:	4293      	cmp	r3, r2
 8011662:	d003      	beq.n	801166c <TIM_OC6_SetConfig+0xa4>
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	4a19      	ldr	r2, [pc, #100]	; (80116cc <TIM_OC6_SetConfig+0x104>)
 8011668:	4293      	cmp	r3, r2
 801166a:	d109      	bne.n	8011680 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801166c:	697b      	ldr	r3, [r7, #20]
 801166e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011672:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011674:	683b      	ldr	r3, [r7, #0]
 8011676:	695b      	ldr	r3, [r3, #20]
 8011678:	029b      	lsls	r3, r3, #10
 801167a:	697a      	ldr	r2, [r7, #20]
 801167c:	4313      	orrs	r3, r2
 801167e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	697a      	ldr	r2, [r7, #20]
 8011684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	68fa      	ldr	r2, [r7, #12]
 801168a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801168c:	683b      	ldr	r3, [r7, #0]
 801168e:	685a      	ldr	r2, [r3, #4]
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	693a      	ldr	r2, [r7, #16]
 8011698:	621a      	str	r2, [r3, #32]
}
 801169a:	bf00      	nop
 801169c:	371c      	adds	r7, #28
 801169e:	46bd      	mov	sp, r7
 80116a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a4:	4770      	bx	lr
 80116a6:	bf00      	nop
 80116a8:	40012c00 	.word	0x40012c00
 80116ac:	50012c00 	.word	0x50012c00
 80116b0:	40013400 	.word	0x40013400
 80116b4:	50013400 	.word	0x50013400
 80116b8:	40014000 	.word	0x40014000
 80116bc:	50014000 	.word	0x50014000
 80116c0:	40014400 	.word	0x40014400
 80116c4:	50014400 	.word	0x50014400
 80116c8:	40014800 	.word	0x40014800
 80116cc:	50014800 	.word	0x50014800

080116d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80116d0:	b480      	push	{r7}
 80116d2:	b087      	sub	sp, #28
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	60f8      	str	r0, [r7, #12]
 80116d8:	60b9      	str	r1, [r7, #8]
 80116da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	6a1b      	ldr	r3, [r3, #32]
 80116e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	6a1b      	ldr	r3, [r3, #32]
 80116e6:	f023 0201 	bic.w	r2, r3, #1
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	699b      	ldr	r3, [r3, #24]
 80116f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80116f4:	693b      	ldr	r3, [r7, #16]
 80116f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80116fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	011b      	lsls	r3, r3, #4
 8011700:	693a      	ldr	r2, [r7, #16]
 8011702:	4313      	orrs	r3, r2
 8011704:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011706:	697b      	ldr	r3, [r7, #20]
 8011708:	f023 030a 	bic.w	r3, r3, #10
 801170c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801170e:	697a      	ldr	r2, [r7, #20]
 8011710:	68bb      	ldr	r3, [r7, #8]
 8011712:	4313      	orrs	r3, r2
 8011714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	693a      	ldr	r2, [r7, #16]
 801171a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	697a      	ldr	r2, [r7, #20]
 8011720:	621a      	str	r2, [r3, #32]
}
 8011722:	bf00      	nop
 8011724:	371c      	adds	r7, #28
 8011726:	46bd      	mov	sp, r7
 8011728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801172c:	4770      	bx	lr

0801172e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801172e:	b480      	push	{r7}
 8011730:	b087      	sub	sp, #28
 8011732:	af00      	add	r7, sp, #0
 8011734:	60f8      	str	r0, [r7, #12]
 8011736:	60b9      	str	r1, [r7, #8]
 8011738:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	6a1b      	ldr	r3, [r3, #32]
 801173e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	6a1b      	ldr	r3, [r3, #32]
 8011744:	f023 0210 	bic.w	r2, r3, #16
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	699b      	ldr	r3, [r3, #24]
 8011750:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011752:	693b      	ldr	r3, [r7, #16]
 8011754:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011758:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	031b      	lsls	r3, r3, #12
 801175e:	693a      	ldr	r2, [r7, #16]
 8011760:	4313      	orrs	r3, r2
 8011762:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011764:	697b      	ldr	r3, [r7, #20]
 8011766:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801176a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801176c:	68bb      	ldr	r3, [r7, #8]
 801176e:	011b      	lsls	r3, r3, #4
 8011770:	697a      	ldr	r2, [r7, #20]
 8011772:	4313      	orrs	r3, r2
 8011774:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	693a      	ldr	r2, [r7, #16]
 801177a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	697a      	ldr	r2, [r7, #20]
 8011780:	621a      	str	r2, [r3, #32]
}
 8011782:	bf00      	nop
 8011784:	371c      	adds	r7, #28
 8011786:	46bd      	mov	sp, r7
 8011788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178c:	4770      	bx	lr

0801178e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801178e:	b480      	push	{r7}
 8011790:	b085      	sub	sp, #20
 8011792:	af00      	add	r7, sp, #0
 8011794:	6078      	str	r0, [r7, #4]
 8011796:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	689b      	ldr	r3, [r3, #8]
 801179c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80117a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80117a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80117aa:	683a      	ldr	r2, [r7, #0]
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	4313      	orrs	r3, r2
 80117b0:	f043 0307 	orr.w	r3, r3, #7
 80117b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	68fa      	ldr	r2, [r7, #12]
 80117ba:	609a      	str	r2, [r3, #8]
}
 80117bc:	bf00      	nop
 80117be:	3714      	adds	r7, #20
 80117c0:	46bd      	mov	sp, r7
 80117c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c6:	4770      	bx	lr

080117c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80117c8:	b480      	push	{r7}
 80117ca:	b087      	sub	sp, #28
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	60f8      	str	r0, [r7, #12]
 80117d0:	60b9      	str	r1, [r7, #8]
 80117d2:	607a      	str	r2, [r7, #4]
 80117d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	689b      	ldr	r3, [r3, #8]
 80117da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80117dc:	697b      	ldr	r3, [r7, #20]
 80117de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80117e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80117e4:	683b      	ldr	r3, [r7, #0]
 80117e6:	021a      	lsls	r2, r3, #8
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	431a      	orrs	r2, r3
 80117ec:	68bb      	ldr	r3, [r7, #8]
 80117ee:	4313      	orrs	r3, r2
 80117f0:	697a      	ldr	r2, [r7, #20]
 80117f2:	4313      	orrs	r3, r2
 80117f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	697a      	ldr	r2, [r7, #20]
 80117fa:	609a      	str	r2, [r3, #8]
}
 80117fc:	bf00      	nop
 80117fe:	371c      	adds	r7, #28
 8011800:	46bd      	mov	sp, r7
 8011802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011806:	4770      	bx	lr

08011808 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011808:	b480      	push	{r7}
 801180a:	b087      	sub	sp, #28
 801180c:	af00      	add	r7, sp, #0
 801180e:	60f8      	str	r0, [r7, #12]
 8011810:	60b9      	str	r1, [r7, #8]
 8011812:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011814:	68bb      	ldr	r3, [r7, #8]
 8011816:	f003 031f 	and.w	r3, r3, #31
 801181a:	2201      	movs	r2, #1
 801181c:	fa02 f303 	lsl.w	r3, r2, r3
 8011820:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	6a1a      	ldr	r2, [r3, #32]
 8011826:	697b      	ldr	r3, [r7, #20]
 8011828:	43db      	mvns	r3, r3
 801182a:	401a      	ands	r2, r3
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	6a1a      	ldr	r2, [r3, #32]
 8011834:	68bb      	ldr	r3, [r7, #8]
 8011836:	f003 031f 	and.w	r3, r3, #31
 801183a:	6879      	ldr	r1, [r7, #4]
 801183c:	fa01 f303 	lsl.w	r3, r1, r3
 8011840:	431a      	orrs	r2, r3
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	621a      	str	r2, [r3, #32]
}
 8011846:	bf00      	nop
 8011848:	371c      	adds	r7, #28
 801184a:	46bd      	mov	sp, r7
 801184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011850:	4770      	bx	lr
	...

08011854 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011854:	b480      	push	{r7}
 8011856:	b085      	sub	sp, #20
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
 801185c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011864:	2b01      	cmp	r3, #1
 8011866:	d101      	bne.n	801186c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011868:	2302      	movs	r3, #2
 801186a:	e097      	b.n	801199c <HAL_TIMEx_MasterConfigSynchronization+0x148>
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	2201      	movs	r2, #1
 8011870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	2202      	movs	r2, #2
 8011878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	685b      	ldr	r3, [r3, #4]
 8011882:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	689b      	ldr	r3, [r3, #8]
 801188a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	4a45      	ldr	r2, [pc, #276]	; (80119a8 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8011892:	4293      	cmp	r3, r2
 8011894:	d00e      	beq.n	80118b4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	4a44      	ldr	r2, [pc, #272]	; (80119ac <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 801189c:	4293      	cmp	r3, r2
 801189e:	d009      	beq.n	80118b4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	4a42      	ldr	r2, [pc, #264]	; (80119b0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 80118a6:	4293      	cmp	r3, r2
 80118a8:	d004      	beq.n	80118b4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	4a41      	ldr	r2, [pc, #260]	; (80119b4 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 80118b0:	4293      	cmp	r3, r2
 80118b2:	d108      	bne.n	80118c6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80118ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80118bc:	683b      	ldr	r3, [r7, #0]
 80118be:	685b      	ldr	r3, [r3, #4]
 80118c0:	68fa      	ldr	r2, [r7, #12]
 80118c2:	4313      	orrs	r3, r2
 80118c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80118cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80118d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80118d2:	683b      	ldr	r3, [r7, #0]
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	68fa      	ldr	r2, [r7, #12]
 80118d8:	4313      	orrs	r3, r2
 80118da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	68fa      	ldr	r2, [r7, #12]
 80118e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	4a2f      	ldr	r2, [pc, #188]	; (80119a8 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80118ea:	4293      	cmp	r3, r2
 80118ec:	d040      	beq.n	8011970 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	4a2e      	ldr	r2, [pc, #184]	; (80119ac <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 80118f4:	4293      	cmp	r3, r2
 80118f6:	d03b      	beq.n	8011970 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011900:	d036      	beq.n	8011970 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801190a:	d031      	beq.n	8011970 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	4a29      	ldr	r2, [pc, #164]	; (80119b8 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8011912:	4293      	cmp	r3, r2
 8011914:	d02c      	beq.n	8011970 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	4a28      	ldr	r2, [pc, #160]	; (80119bc <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 801191c:	4293      	cmp	r3, r2
 801191e:	d027      	beq.n	8011970 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	4a26      	ldr	r2, [pc, #152]	; (80119c0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8011926:	4293      	cmp	r3, r2
 8011928:	d022      	beq.n	8011970 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	4a25      	ldr	r2, [pc, #148]	; (80119c4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8011930:	4293      	cmp	r3, r2
 8011932:	d01d      	beq.n	8011970 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	4a23      	ldr	r2, [pc, #140]	; (80119c8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 801193a:	4293      	cmp	r3, r2
 801193c:	d018      	beq.n	8011970 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	4a22      	ldr	r2, [pc, #136]	; (80119cc <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8011944:	4293      	cmp	r3, r2
 8011946:	d013      	beq.n	8011970 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	4a18      	ldr	r2, [pc, #96]	; (80119b0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 801194e:	4293      	cmp	r3, r2
 8011950:	d00e      	beq.n	8011970 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	4a17      	ldr	r2, [pc, #92]	; (80119b4 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8011958:	4293      	cmp	r3, r2
 801195a:	d009      	beq.n	8011970 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	4a1b      	ldr	r2, [pc, #108]	; (80119d0 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8011962:	4293      	cmp	r3, r2
 8011964:	d004      	beq.n	8011970 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	4a1a      	ldr	r2, [pc, #104]	; (80119d4 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 801196c:	4293      	cmp	r3, r2
 801196e:	d10c      	bne.n	801198a <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011970:	68bb      	ldr	r3, [r7, #8]
 8011972:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011976:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011978:	683b      	ldr	r3, [r7, #0]
 801197a:	689b      	ldr	r3, [r3, #8]
 801197c:	68ba      	ldr	r2, [r7, #8]
 801197e:	4313      	orrs	r3, r2
 8011980:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	68ba      	ldr	r2, [r7, #8]
 8011988:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	2201      	movs	r2, #1
 801198e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	2200      	movs	r2, #0
 8011996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801199a:	2300      	movs	r3, #0
}
 801199c:	4618      	mov	r0, r3
 801199e:	3714      	adds	r7, #20
 80119a0:	46bd      	mov	sp, r7
 80119a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a6:	4770      	bx	lr
 80119a8:	40012c00 	.word	0x40012c00
 80119ac:	50012c00 	.word	0x50012c00
 80119b0:	40013400 	.word	0x40013400
 80119b4:	50013400 	.word	0x50013400
 80119b8:	40000400 	.word	0x40000400
 80119bc:	50000400 	.word	0x50000400
 80119c0:	40000800 	.word	0x40000800
 80119c4:	50000800 	.word	0x50000800
 80119c8:	40000c00 	.word	0x40000c00
 80119cc:	50000c00 	.word	0x50000c00
 80119d0:	40014000 	.word	0x40014000
 80119d4:	50014000 	.word	0x50014000

080119d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80119d8:	b480      	push	{r7}
 80119da:	b085      	sub	sp, #20
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
 80119e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80119e2:	2300      	movs	r3, #0
 80119e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80119ec:	2b01      	cmp	r3, #1
 80119ee:	d101      	bne.n	80119f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80119f0:	2302      	movs	r3, #2
 80119f2:	e0a5      	b.n	8011b40 <HAL_TIMEx_ConfigBreakDeadTime+0x168>
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	2201      	movs	r2, #1
 80119f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011a02:	683b      	ldr	r3, [r7, #0]
 8011a04:	68db      	ldr	r3, [r3, #12]
 8011a06:	4313      	orrs	r3, r2
 8011a08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011a10:	683b      	ldr	r3, [r7, #0]
 8011a12:	689b      	ldr	r3, [r3, #8]
 8011a14:	4313      	orrs	r3, r2
 8011a16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8011a1e:	683b      	ldr	r3, [r7, #0]
 8011a20:	685b      	ldr	r3, [r3, #4]
 8011a22:	4313      	orrs	r3, r2
 8011a24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8011a2c:	683b      	ldr	r3, [r7, #0]
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	4313      	orrs	r3, r2
 8011a32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011a3a:	683b      	ldr	r3, [r7, #0]
 8011a3c:	691b      	ldr	r3, [r3, #16]
 8011a3e:	4313      	orrs	r3, r2
 8011a40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8011a48:	683b      	ldr	r3, [r7, #0]
 8011a4a:	695b      	ldr	r3, [r3, #20]
 8011a4c:	4313      	orrs	r3, r2
 8011a4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8011a56:	683b      	ldr	r3, [r7, #0]
 8011a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a5a:	4313      	orrs	r3, r2
 8011a5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8011a64:	683b      	ldr	r3, [r7, #0]
 8011a66:	699b      	ldr	r3, [r3, #24]
 8011a68:	041b      	lsls	r3, r3, #16
 8011a6a:	4313      	orrs	r3, r2
 8011a6c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	4a36      	ldr	r2, [pc, #216]	; (8011b4c <HAL_TIMEx_ConfigBreakDeadTime+0x174>)
 8011a74:	4293      	cmp	r3, r2
 8011a76:	d00e      	beq.n	8011a96 <HAL_TIMEx_ConfigBreakDeadTime+0xbe>
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	4a34      	ldr	r2, [pc, #208]	; (8011b50 <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 8011a7e:	4293      	cmp	r3, r2
 8011a80:	d009      	beq.n	8011a96 <HAL_TIMEx_ConfigBreakDeadTime+0xbe>
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	4a33      	ldr	r2, [pc, #204]	; (8011b54 <HAL_TIMEx_ConfigBreakDeadTime+0x17c>)
 8011a88:	4293      	cmp	r3, r2
 8011a8a:	d004      	beq.n	8011a96 <HAL_TIMEx_ConfigBreakDeadTime+0xbe>
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	4a31      	ldr	r2, [pc, #196]	; (8011b58 <HAL_TIMEx_ConfigBreakDeadTime+0x180>)
 8011a92:	4293      	cmp	r3, r2
 8011a94:	d106      	bne.n	8011aa4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8011a9c:	683b      	ldr	r3, [r7, #0]
 8011a9e:	69db      	ldr	r3, [r3, #28]
 8011aa0:	4313      	orrs	r3, r2
 8011aa2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	4a28      	ldr	r2, [pc, #160]	; (8011b4c <HAL_TIMEx_ConfigBreakDeadTime+0x174>)
 8011aaa:	4293      	cmp	r3, r2
 8011aac:	d00e      	beq.n	8011acc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	4a27      	ldr	r2, [pc, #156]	; (8011b50 <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 8011ab4:	4293      	cmp	r3, r2
 8011ab6:	d009      	beq.n	8011acc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	4a25      	ldr	r2, [pc, #148]	; (8011b54 <HAL_TIMEx_ConfigBreakDeadTime+0x17c>)
 8011abe:	4293      	cmp	r3, r2
 8011ac0:	d004      	beq.n	8011acc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	4a24      	ldr	r2, [pc, #144]	; (8011b58 <HAL_TIMEx_ConfigBreakDeadTime+0x180>)
 8011ac8:	4293      	cmp	r3, r2
 8011aca:	d130      	bne.n	8011b2e <HAL_TIMEx_ConfigBreakDeadTime+0x156>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8011ad2:	683b      	ldr	r3, [r7, #0]
 8011ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ad6:	051b      	lsls	r3, r3, #20
 8011ad8:	4313      	orrs	r3, r2
 8011ada:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8011ae2:	683b      	ldr	r3, [r7, #0]
 8011ae4:	6a1b      	ldr	r3, [r3, #32]
 8011ae6:	4313      	orrs	r3, r2
 8011ae8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8011af0:	683b      	ldr	r3, [r7, #0]
 8011af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011af4:	4313      	orrs	r3, r2
 8011af6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	4a13      	ldr	r2, [pc, #76]	; (8011b4c <HAL_TIMEx_ConfigBreakDeadTime+0x174>)
 8011afe:	4293      	cmp	r3, r2
 8011b00:	d00e      	beq.n	8011b20 <HAL_TIMEx_ConfigBreakDeadTime+0x148>
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	4a12      	ldr	r2, [pc, #72]	; (8011b50 <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 8011b08:	4293      	cmp	r3, r2
 8011b0a:	d009      	beq.n	8011b20 <HAL_TIMEx_ConfigBreakDeadTime+0x148>
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	4a10      	ldr	r2, [pc, #64]	; (8011b54 <HAL_TIMEx_ConfigBreakDeadTime+0x17c>)
 8011b12:	4293      	cmp	r3, r2
 8011b14:	d004      	beq.n	8011b20 <HAL_TIMEx_ConfigBreakDeadTime+0x148>
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	4a0f      	ldr	r2, [pc, #60]	; (8011b58 <HAL_TIMEx_ConfigBreakDeadTime+0x180>)
 8011b1c:	4293      	cmp	r3, r2
 8011b1e:	d106      	bne.n	8011b2e <HAL_TIMEx_ConfigBreakDeadTime+0x156>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8011b26:	683b      	ldr	r3, [r7, #0]
 8011b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b2a:	4313      	orrs	r3, r2
 8011b2c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	68fa      	ldr	r2, [r7, #12]
 8011b34:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	2200      	movs	r2, #0
 8011b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011b3e:	2300      	movs	r3, #0
}
 8011b40:	4618      	mov	r0, r3
 8011b42:	3714      	adds	r7, #20
 8011b44:	46bd      	mov	sp, r7
 8011b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b4a:	4770      	bx	lr
 8011b4c:	40012c00 	.word	0x40012c00
 8011b50:	50012c00 	.word	0x50012c00
 8011b54:	40013400 	.word	0x40013400
 8011b58:	50013400 	.word	0x50013400

08011b5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011b5c:	b480      	push	{r7}
 8011b5e:	b083      	sub	sp, #12
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011b64:	bf00      	nop
 8011b66:	370c      	adds	r7, #12
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6e:	4770      	bx	lr

08011b70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011b70:	b480      	push	{r7}
 8011b72:	b083      	sub	sp, #12
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011b78:	bf00      	nop
 8011b7a:	370c      	adds	r7, #12
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b82:	4770      	bx	lr

08011b84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011b84:	b480      	push	{r7}
 8011b86:	b083      	sub	sp, #12
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011b8c:	bf00      	nop
 8011b8e:	370c      	adds	r7, #12
 8011b90:	46bd      	mov	sp, r7
 8011b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b96:	4770      	bx	lr

08011b98 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8011b98:	b480      	push	{r7}
 8011b9a:	b083      	sub	sp, #12
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8011ba0:	bf00      	nop
 8011ba2:	370c      	adds	r7, #12
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011baa:	4770      	bx	lr

08011bac <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8011bac:	b480      	push	{r7}
 8011bae:	b083      	sub	sp, #12
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8011bb4:	bf00      	nop
 8011bb6:	370c      	adds	r7, #12
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bbe:	4770      	bx	lr

08011bc0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8011bc0:	b480      	push	{r7}
 8011bc2:	b083      	sub	sp, #12
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8011bc8:	bf00      	nop
 8011bca:	370c      	adds	r7, #12
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd2:	4770      	bx	lr

08011bd4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8011bd4:	b480      	push	{r7}
 8011bd6:	b083      	sub	sp, #12
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8011bdc:	bf00      	nop
 8011bde:	370c      	adds	r7, #12
 8011be0:	46bd      	mov	sp, r7
 8011be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be6:	4770      	bx	lr

08011be8 <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8011be8:	b480      	push	{r7}
 8011bea:	b083      	sub	sp, #12
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	f043 0201 	orr.w	r2, r3, #1
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	601a      	str	r2, [r3, #0]
}
 8011bfc:	bf00      	nop
 8011bfe:	370c      	adds	r7, #12
 8011c00:	46bd      	mov	sp, r7
 8011c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c06:	4770      	bx	lr

08011c08 <LL_DLYB_Disable>:
  * @param  DLYBx DLYB Instance.
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Disable(DLYB_TypeDef *DLYBx)
{
 8011c08:	b480      	push	{r7}
 8011c0a:	b083      	sub	sp, #12
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(DLYBx->CR, DLYB_CR_DEN);
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	f023 0201 	bic.w	r2, r3, #1
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	601a      	str	r2, [r3, #0]
}
 8011c1c:	bf00      	nop
 8011c1e:	370c      	adds	r7, #12
 8011c20:	46bd      	mov	sp, r7
 8011c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c26:	4770      	bx	lr

08011c28 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b086      	sub	sp, #24
 8011c2c:	af02      	add	r7, sp, #8
 8011c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011c30:	2300      	movs	r3, #0
 8011c32:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8011c34:	f7f5 fb84 	bl	8007340 <HAL_GetTick>
 8011c38:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d102      	bne.n	8011c46 <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8011c40:	2301      	movs	r3, #1
 8011c42:	73fb      	strb	r3, [r7, #15]
 8011c44:	e137      	b.n	8011eb6 <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	4a76      	ldr	r2, [pc, #472]	; (8011e24 <HAL_XSPI_Init+0x1fc>)
 8011c4c:	4293      	cmp	r3, r2
 8011c4e:	d008      	beq.n	8011c62 <HAL_XSPI_Init+0x3a>
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	4a74      	ldr	r2, [pc, #464]	; (8011e28 <HAL_XSPI_Init+0x200>)
 8011c56:	4293      	cmp	r3, r2
 8011c58:	d003      	beq.n	8011c62 <HAL_XSPI_Init+0x3a>
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	4a73      	ldr	r2, [pc, #460]	; (8011e2c <HAL_XSPI_Init+0x204>)
 8011c60:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	4a72      	ldr	r2, [pc, #456]	; (8011e30 <HAL_XSPI_Init+0x208>)
 8011c68:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	4a6d      	ldr	r2, [pc, #436]	; (8011e24 <HAL_XSPI_Init+0x1fc>)
 8011c70:	4293      	cmp	r3, r2
 8011c72:	d008      	beq.n	8011c86 <HAL_XSPI_Init+0x5e>
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	4a6b      	ldr	r2, [pc, #428]	; (8011e28 <HAL_XSPI_Init+0x200>)
 8011c7a:	4293      	cmp	r3, r2
 8011c7c:	d003      	beq.n	8011c86 <HAL_XSPI_Init+0x5e>
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	4a6a      	ldr	r2, [pc, #424]	; (8011e2c <HAL_XSPI_Init+0x204>)
 8011c84:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	4a66      	ldr	r2, [pc, #408]	; (8011e24 <HAL_XSPI_Init+0x1fc>)
 8011c8c:	4293      	cmp	r3, r2
 8011c8e:	d008      	beq.n	8011ca2 <HAL_XSPI_Init+0x7a>
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	4a64      	ldr	r2, [pc, #400]	; (8011e28 <HAL_XSPI_Init+0x200>)
 8011c96:	4293      	cmp	r3, r2
 8011c98:	d003      	beq.n	8011ca2 <HAL_XSPI_Init+0x7a>
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	4a63      	ldr	r2, [pc, #396]	; (8011e2c <HAL_XSPI_Init+0x204>)
 8011ca0:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	f040 8102 	bne.w	8011eb6 <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 8011cb2:	6878      	ldr	r0, [r7, #4]
 8011cb4:	f7ef fd20 	bl	80016f8 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8011cb8:	f241 3188 	movw	r1, #5000	; 0x1388
 8011cbc:	6878      	ldr	r0, [r7, #4]
 8011cbe:	f000 fc82 	bl	80125c6 <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	689a      	ldr	r2, [r3, #8]
 8011cc8:	4b5a      	ldr	r3, [pc, #360]	; (8011e34 <HAL_XSPI_Init+0x20c>)
 8011cca:	4013      	ands	r3, r2
 8011ccc:	687a      	ldr	r2, [r7, #4]
 8011cce:	68d1      	ldr	r1, [r2, #12]
 8011cd0:	687a      	ldr	r2, [r7, #4]
 8011cd2:	6912      	ldr	r2, [r2, #16]
 8011cd4:	0412      	lsls	r2, r2, #16
 8011cd6:	4311      	orrs	r1, r2
 8011cd8:	687a      	ldr	r2, [r7, #4]
 8011cda:	6952      	ldr	r2, [r2, #20]
 8011cdc:	3a01      	subs	r2, #1
 8011cde:	0212      	lsls	r2, r2, #8
 8011ce0:	4311      	orrs	r1, r2
 8011ce2:	687a      	ldr	r2, [r7, #4]
 8011ce4:	69d2      	ldr	r2, [r2, #28]
 8011ce6:	4311      	orrs	r1, r2
 8011ce8:	687a      	ldr	r2, [r7, #4]
 8011cea:	6812      	ldr	r2, [r2, #0]
 8011cec:	430b      	orrs	r3, r1
 8011cee:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	4a4b      	ldr	r2, [pc, #300]	; (8011e24 <HAL_XSPI_Init+0x1fc>)
 8011cf6:	4293      	cmp	r3, r2
 8011cf8:	d00e      	beq.n	8011d18 <HAL_XSPI_Init+0xf0>
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	4a4a      	ldr	r2, [pc, #296]	; (8011e28 <HAL_XSPI_Init+0x200>)
 8011d00:	4293      	cmp	r3, r2
 8011d02:	d009      	beq.n	8011d18 <HAL_XSPI_Init+0xf0>
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	4a48      	ldr	r2, [pc, #288]	; (8011e2c <HAL_XSPI_Init+0x204>)
 8011d0a:	4293      	cmp	r3, r2
 8011d0c:	d004      	beq.n	8011d18 <HAL_XSPI_Init+0xf0>
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	4a49      	ldr	r2, [pc, #292]	; (8011e38 <HAL_XSPI_Init+0x210>)
 8011d14:	4293      	cmp	r3, r2
 8011d16:	d10a      	bne.n	8011d2e <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	689b      	ldr	r3, [r3, #8]
 8011d1e:	f023 0108 	bic.w	r1, r3, #8
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	430a      	orrs	r2, r1
 8011d2c:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	68db      	ldr	r3, [r3, #12]
 8011d34:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	6a1a      	ldr	r2, [r3, #32]
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	430a      	orrs	r2, r1
 8011d42:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	691b      	ldr	r3, [r3, #16]
 8011d4a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d52:	041a      	lsls	r2, r3, #16
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	430a      	orrs	r2, r1
 8011d5a:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	4a30      	ldr	r2, [pc, #192]	; (8011e24 <HAL_XSPI_Init+0x1fc>)
 8011d62:	4293      	cmp	r3, r2
 8011d64:	d00e      	beq.n	8011d84 <HAL_XSPI_Init+0x15c>
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	4a2f      	ldr	r2, [pc, #188]	; (8011e28 <HAL_XSPI_Init+0x200>)
 8011d6c:	4293      	cmp	r3, r2
 8011d6e:	d009      	beq.n	8011d84 <HAL_XSPI_Init+0x15c>
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	4a2d      	ldr	r2, [pc, #180]	; (8011e2c <HAL_XSPI_Init+0x204>)
 8011d76:	4293      	cmp	r3, r2
 8011d78:	d004      	beq.n	8011d84 <HAL_XSPI_Init+0x15c>
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	4a2e      	ldr	r2, [pc, #184]	; (8011e38 <HAL_XSPI_Init+0x210>)
 8011d80:	4293      	cmp	r3, r2
 8011d82:	d10a      	bne.n	8011d9a <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	691b      	ldr	r3, [r3, #16]
 8011d8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	430a      	orrs	r2, r1
 8011d98:	611a      	str	r2, [r3, #16]
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	687a      	ldr	r2, [r7, #4]
 8011da0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8011da2:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	685b      	ldr	r3, [r3, #4]
 8011db2:	3b01      	subs	r3, #1
 8011db4:	021a      	lsls	r2, r3, #8
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	430a      	orrs	r2, r1
 8011dbc:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011dc2:	9300      	str	r3, [sp, #0]
 8011dc4:	68bb      	ldr	r3, [r7, #8]
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	2120      	movs	r1, #32
 8011dca:	6878      	ldr	r0, [r7, #4]
 8011dcc:	f000 fd60 	bl	8012890 <XSPI_WaitFlagStateUntilTimeout>
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8011dd4:	7bfb      	ldrb	r3, [r7, #15]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d16d      	bne.n	8011eb6 <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	68db      	ldr	r3, [r3, #12]
 8011de0:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	430a      	orrs	r2, r1
 8011dee:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	4a0e      	ldr	r2, [pc, #56]	; (8011e30 <HAL_XSPI_Init+0x208>)
 8011df6:	4293      	cmp	r3, r2
 8011df8:	d004      	beq.n	8011e04 <HAL_XSPI_Init+0x1dc>
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	4a0f      	ldr	r2, [pc, #60]	; (8011e3c <HAL_XSPI_Init+0x214>)
 8011e00:	4293      	cmp	r3, r2
 8011e02:	d11d      	bne.n	8011e40 <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e08:	9300      	str	r3, [sp, #0]
 8011e0a:	68bb      	ldr	r3, [r7, #8]
 8011e0c:	2200      	movs	r2, #0
 8011e0e:	2120      	movs	r1, #32
 8011e10:	6878      	ldr	r0, [r7, #4]
 8011e12:	f000 fd3d 	bl	8012890 <XSPI_WaitFlagStateUntilTimeout>
 8011e16:	4603      	mov	r3, r0
 8011e18:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 8011e1a:	7bfb      	ldrb	r3, [r7, #15]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d00f      	beq.n	8011e40 <HAL_XSPI_Init+0x218>
          {
            return status;
 8011e20:	7bfb      	ldrb	r3, [r7, #15]
 8011e22:	e049      	b.n	8011eb8 <HAL_XSPI_Init+0x290>
 8011e24:	420d1400 	.word	0x420d1400
 8011e28:	520d1400 	.word	0x520d1400
 8011e2c:	420d2400 	.word	0x420d2400
 8011e30:	420d3400 	.word	0x420d3400
 8011e34:	f8e0c0fc 	.word	0xf8e0c0fc
 8011e38:	520d2400 	.word	0x520d2400
 8011e3c:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	689a      	ldr	r2, [r3, #8]
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	430a      	orrs	r2, r1
 8011e54:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8011e5e:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e6a:	431a      	orrs	r2, r3
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	430a      	orrs	r2, r1
 8011e72:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	681a      	ldr	r2, [r3, #0]
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	f042 0201 	orr.w	r2, r2, #1
 8011e84:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	699b      	ldr	r3, [r3, #24]
 8011e8a:	2b02      	cmp	r3, #2
 8011e8c:	d107      	bne.n	8011e9e <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	689a      	ldr	r2, [r3, #8]
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	f042 0202 	orr.w	r2, r2, #2
 8011e9c:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	68db      	ldr	r3, [r3, #12]
 8011ea2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011ea6:	d103      	bne.n	8011eb0 <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2201      	movs	r2, #1
 8011eac:	655a      	str	r2, [r3, #84]	; 0x54
 8011eae:	e002      	b.n	8011eb6 <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	2202      	movs	r2, #2
 8011eb4:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
  }
  return status;
 8011eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011eb8:	4618      	mov	r0, r3
 8011eba:	3710      	adds	r7, #16
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	bd80      	pop	{r7, pc}

08011ec0 <HAL_XSPI_DeInit>:
  * @brief  De-Initialize the XSPI peripheral.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_DeInit(XSPI_HandleTypeDef *hxspi)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b084      	sub	sp, #16
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011ec8:	2300      	movs	r3, #0
 8011eca:	73fb      	strb	r3, [r7, #15]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d102      	bne.n	8011ed8 <HAL_XSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 8011ed2:	2301      	movs	r3, #1
 8011ed4:	73fb      	strb	r3, [r7, #15]
 8011ed6:	e015      	b.n	8011f04 <HAL_XSPI_DeInit+0x44>
    /* No error code can be set as the handler is null */
  }
  else
  {
    /* Disable XSPI */
    HAL_XSPI_DISABLE(hxspi);
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	681a      	ldr	r2, [r3, #0]
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	f022 0201 	bic.w	r2, r2, #1
 8011ee6:	601a      	str	r2, [r3, #0]

    /* Disable free running clock if needed : must be done after XSPI disable */
    CLEAR_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	689a      	ldr	r2, [r3, #8]
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	f022 0202 	bic.w	r2, r2, #2
 8011ef6:	609a      	str	r2, [r3, #8]

    /* De-initialize the low level hardware */
    hxspi->MspDeInitCallback(hxspi);
#else
    /* De-initialize the low-level hardware */
    HAL_XSPI_MspDeInit(hxspi);
 8011ef8:	6878      	ldr	r0, [r7, #4]
 8011efa:	f7ef fc15 	bl	8001728 <HAL_XSPI_MspDeInit>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

    /* Reset the driver state */
    hxspi->State = HAL_XSPI_STATE_RESET;
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	2200      	movs	r2, #0
 8011f02:	655a      	str	r2, [r3, #84]	; 0x54
  }

  return status;
 8011f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f06:	4618      	mov	r0, r3
 8011f08:	3710      	adds	r7, #16
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	bd80      	pop	{r7, pc}
	...

08011f10 <HAL_XSPI_Command>:
  * @param  pCmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Command(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *const pCmd, uint32_t Timeout)
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b08a      	sub	sp, #40	; 0x28
 8011f14:	af02      	add	r7, sp, #8
 8011f16:	60f8      	str	r0, [r7, #12]
 8011f18:	60b9      	str	r1, [r7, #8]
 8011f1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8011f1c:	f7f5 fa10 	bl	8007340 <HAL_GetTick>
 8011f20:	61b8      	str	r0, [r7, #24]

  /* Check the parameters of the command structure */
  assert_param(IS_XSPI_OPERATION_TYPE(pCmd->OperationType));
  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	689b      	ldr	r3, [r3, #8]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d125      	bne.n	8011f76 <HAL_XSPI_Command+0x66>
  {
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	4a68      	ldr	r2, [pc, #416]	; (80120d0 <HAL_XSPI_Command+0x1c0>)
 8011f30:	4293      	cmp	r3, r2
 8011f32:	d020      	beq.n	8011f76 <HAL_XSPI_Command+0x66>
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	4a66      	ldr	r2, [pc, #408]	; (80120d4 <HAL_XSPI_Command+0x1c4>)
 8011f3a:	4293      	cmp	r3, r2
 8011f3c:	d01b      	beq.n	8011f76 <HAL_XSPI_Command+0x66>
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	4a65      	ldr	r2, [pc, #404]	; (80120d8 <HAL_XSPI_Command+0x1c8>)
 8011f44:	4293      	cmp	r3, r2
 8011f46:	d016      	beq.n	8011f76 <HAL_XSPI_Command+0x66>
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	4a63      	ldr	r2, [pc, #396]	; (80120dc <HAL_XSPI_Command+0x1cc>)
 8011f4e:	4293      	cmp	r3, r2
 8011f50:	d011      	beq.n	8011f76 <HAL_XSPI_Command+0x66>
    {
      assert_param(IS_OCTOSPI_IO_SELECT(pCmd->IOSelect));
    }
#if defined(HSPI1)
    else if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	4a62      	ldr	r2, [pc, #392]	; (80120e0 <HAL_XSPI_Command+0x1d0>)
 8011f58:	4293      	cmp	r3, r2
 8011f5a:	d00c      	beq.n	8011f76 <HAL_XSPI_Command+0x66>
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	4a60      	ldr	r2, [pc, #384]	; (80120e4 <HAL_XSPI_Command+0x1d4>)
 8011f62:	4293      	cmp	r3, r2
 8011f64:	d007      	beq.n	8011f76 <HAL_XSPI_Command+0x66>
      assert_param(IS_HSPI_IO_SELECT(pCmd->IOSelect));
    }
#endif /* HSPI1 */
    else
    {
      hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011f6a:	f043 0208 	orr.w	r2, r3, #8
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8011f72:	2301      	movs	r3, #1
 8011f74:	e0a8      	b.n	80120c8 <HAL_XSPI_Command+0x1b8>
  {
    assert_param(IS_XSPI_ALT_BYTES_WIDTH(pCmd->AlternateBytesWidth));
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
  }

  if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	4a55      	ldr	r2, [pc, #340]	; (80120d0 <HAL_XSPI_Command+0x1c0>)
 8011f7c:	4293      	cmp	r3, r2
 8011f7e:	d020      	beq.n	8011fc2 <HAL_XSPI_Command+0xb2>
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	4a53      	ldr	r2, [pc, #332]	; (80120d4 <HAL_XSPI_Command+0x1c4>)
 8011f86:	4293      	cmp	r3, r2
 8011f88:	d01b      	beq.n	8011fc2 <HAL_XSPI_Command+0xb2>
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	4a52      	ldr	r2, [pc, #328]	; (80120d8 <HAL_XSPI_Command+0x1c8>)
 8011f90:	4293      	cmp	r3, r2
 8011f92:	d016      	beq.n	8011fc2 <HAL_XSPI_Command+0xb2>
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	4a50      	ldr	r2, [pc, #320]	; (80120dc <HAL_XSPI_Command+0x1cc>)
 8011f9a:	4293      	cmp	r3, r2
 8011f9c:	d011      	beq.n	8011fc2 <HAL_XSPI_Command+0xb2>
  {
    assert_param(IS_OCTOSPI_DATA_MODE(pCmd->DataMode));
  }
#if defined(HSPI1)
  else if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	4a4f      	ldr	r2, [pc, #316]	; (80120e0 <HAL_XSPI_Command+0x1d0>)
 8011fa4:	4293      	cmp	r3, r2
 8011fa6:	d00c      	beq.n	8011fc2 <HAL_XSPI_Command+0xb2>
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	4a4d      	ldr	r2, [pc, #308]	; (80120e4 <HAL_XSPI_Command+0x1d4>)
 8011fae:	4293      	cmp	r3, r2
 8011fb0:	d007      	beq.n	8011fc2 <HAL_XSPI_Command+0xb2>
    assert_param(IS_HSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));
  }
#endif /* HSPI1 */
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011fb6:	f043 0208 	orr.w	r2, r3, #8
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	659a      	str	r2, [r3, #88]	; 0x58
    return HAL_ERROR;
 8011fbe:	2301      	movs	r3, #1
 8011fc0:	e082      	b.n	80120c8 <HAL_XSPI_Command+0x1b8>
  }

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8011fc2:	68bb      	ldr	r3, [r7, #8]
 8011fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fc6:	2b00      	cmp	r3, #0

  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));
  assert_param(IS_XSPI_SIOO_MODE(pCmd->SIOOMode));

  /* Check the state of the driver */
  state = hxspi->State;
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011fcc:	617b      	str	r3, [r7, #20]
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
 8011fce:	697b      	ldr	r3, [r7, #20]
 8011fd0:	2b02      	cmp	r3, #2
 8011fd2:	d104      	bne.n	8011fde <HAL_XSPI_Command+0xce>
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	68db      	ldr	r3, [r3, #12]
 8011fd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011fdc:	d115      	bne.n	801200a <HAL_XSPI_Command+0xfa>
 8011fde:	697b      	ldr	r3, [r7, #20]
 8011fe0:	2b14      	cmp	r3, #20
 8011fe2:	d107      	bne.n	8011ff4 <HAL_XSPI_Command+0xe4>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 8011fe4:	68bb      	ldr	r3, [r7, #8]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	2b02      	cmp	r3, #2
 8011fea:	d00e      	beq.n	801200a <HAL_XSPI_Command+0xfa>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 8011fec:	68bb      	ldr	r3, [r7, #8]
 8011fee:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 8011ff0:	2b03      	cmp	r3, #3
 8011ff2:	d00a      	beq.n	801200a <HAL_XSPI_Command+0xfa>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 8011ff4:	697b      	ldr	r3, [r7, #20]
 8011ff6:	2b24      	cmp	r3, #36	; 0x24
 8011ff8:	d15e      	bne.n	80120b8 <HAL_XSPI_Command+0x1a8>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 8011ffa:	68bb      	ldr	r3, [r7, #8]
 8011ffc:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
 8011ffe:	2b01      	cmp	r3, #1
 8012000:	d003      	beq.n	801200a <HAL_XSPI_Command+0xfa>
        (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))))
 8012002:	68bb      	ldr	r3, [r7, #8]
 8012004:	681b      	ldr	r3, [r3, #0]
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 8012006:	2b03      	cmp	r3, #3
 8012008:	d156      	bne.n	80120b8 <HAL_XSPI_Command+0x1a8>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	9300      	str	r3, [sp, #0]
 801200e:	69bb      	ldr	r3, [r7, #24]
 8012010:	2200      	movs	r2, #0
 8012012:	2120      	movs	r1, #32
 8012014:	68f8      	ldr	r0, [r7, #12]
 8012016:	f000 fc3b 	bl	8012890 <XSPI_WaitFlagStateUntilTimeout>
 801201a:	4603      	mov	r3, r0
 801201c:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 801201e:	7ffb      	ldrb	r3, [r7, #31]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d146      	bne.n	80120b2 <HAL_XSPI_Command+0x1a2>
    {
      /* Initialize error code */
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	2200      	movs	r2, #0
 8012028:	659a      	str	r2, [r3, #88]	; 0x58

      /* Configure the registers */
      status = XSPI_ConfigCmd(hxspi, pCmd);
 801202a:	68b9      	ldr	r1, [r7, #8]
 801202c:	68f8      	ldr	r0, [r7, #12]
 801202e:	f000 fc67 	bl	8012900 <XSPI_ConfigCmd>
 8012032:	4603      	mov	r3, r0
 8012034:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8012036:	7ffb      	ldrb	r3, [r7, #31]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d143      	bne.n	80120c4 <HAL_XSPI_Command+0x1b4>
      {
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
 801203c:	68bb      	ldr	r3, [r7, #8]
 801203e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012040:	2b00      	cmp	r3, #0
 8012042:	d10e      	bne.n	8012062 <HAL_XSPI_Command+0x152>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	9300      	str	r3, [sp, #0]
 8012048:	69bb      	ldr	r3, [r7, #24]
 801204a:	2201      	movs	r2, #1
 801204c:	2102      	movs	r1, #2
 801204e:	68f8      	ldr	r0, [r7, #12]
 8012050:	f000 fc1e 	bl	8012890 <XSPI_WaitFlagStateUntilTimeout>
 8012054:	4603      	mov	r3, r0
 8012056:	77fb      	strb	r3, [r7, #31]

          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	2202      	movs	r2, #2
 801205e:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8012060:	e030      	b.n	80120c4 <HAL_XSPI_Command+0x1b4>
        }
        else
        {
          /* Update the state */
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 8012062:	68bb      	ldr	r3, [r7, #8]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	2b00      	cmp	r3, #0
 8012068:	d103      	bne.n	8012072 <HAL_XSPI_Command+0x162>
          {
            hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	2204      	movs	r2, #4
 801206e:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 8012070:	e028      	b.n	80120c4 <HAL_XSPI_Command+0x1b4>
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
 8012072:	68bb      	ldr	r3, [r7, #8]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	2b01      	cmp	r3, #1
 8012078:	d10b      	bne.n	8012092 <HAL_XSPI_Command+0x182>
          {
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801207e:	2b24      	cmp	r3, #36	; 0x24
 8012080:	d103      	bne.n	801208a <HAL_XSPI_Command+0x17a>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	2204      	movs	r2, #4
 8012086:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 8012088:	e01c      	b.n	80120c4 <HAL_XSPI_Command+0x1b4>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	2214      	movs	r2, #20
 801208e:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 8012090:	e018      	b.n	80120c4 <HAL_XSPI_Command+0x1b4>
            }
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 8012092:	68bb      	ldr	r3, [r7, #8]
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	2b02      	cmp	r3, #2
 8012098:	d114      	bne.n	80120c4 <HAL_XSPI_Command+0x1b4>
          {
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801209e:	2b14      	cmp	r3, #20
 80120a0:	d103      	bne.n	80120aa <HAL_XSPI_Command+0x19a>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	2204      	movs	r2, #4
 80120a6:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 80120a8:	e00c      	b.n	80120c4 <HAL_XSPI_Command+0x1b4>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	2224      	movs	r2, #36	; 0x24
 80120ae:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 80120b0:	e008      	b.n	80120c4 <HAL_XSPI_Command+0x1b4>
        }
      }
    }
    else
    {
      status = HAL_BUSY;
 80120b2:	2302      	movs	r3, #2
 80120b4:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
 80120b6:	e005      	b.n	80120c4 <HAL_XSPI_Command+0x1b4>
    }
  }
  else
  {
    status = HAL_ERROR;
 80120b8:	2301      	movs	r3, #1
 80120ba:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	2210      	movs	r2, #16
 80120c0:	659a      	str	r2, [r3, #88]	; 0x58
 80120c2:	e000      	b.n	80120c6 <HAL_XSPI_Command+0x1b6>
    if (status == HAL_OK)
 80120c4:	bf00      	nop
  }

  return status;
 80120c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80120c8:	4618      	mov	r0, r3
 80120ca:	3720      	adds	r7, #32
 80120cc:	46bd      	mov	sp, r7
 80120ce:	bd80      	pop	{r7, pc}
 80120d0:	420d1400 	.word	0x420d1400
 80120d4:	520d1400 	.word	0x520d1400
 80120d8:	420d2400 	.word	0x420d2400
 80120dc:	520d2400 	.word	0x520d2400
 80120e0:	420d3400 	.word	0x420d3400
 80120e4:	520d3400 	.word	0x520d3400

080120e8 <HAL_XSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Transmit(XSPI_HandleTypeDef *hxspi, uint8_t *const pData, uint32_t Timeout)
{
 80120e8:	b580      	push	{r7, lr}
 80120ea:	b08a      	sub	sp, #40	; 0x28
 80120ec:	af02      	add	r7, sp, #8
 80120ee:	60f8      	str	r0, [r7, #12]
 80120f0:	60b9      	str	r1, [r7, #8]
 80120f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80120f4:	f7f5 f924 	bl	8007340 <HAL_GetTick>
 80120f8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	3350      	adds	r3, #80	; 0x50
 8012100:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8012102:	68bb      	ldr	r3, [r7, #8]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d105      	bne.n	8012114 <HAL_XSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8012108:	2301      	movs	r3, #1
 801210a:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	2208      	movs	r2, #8
 8012110:	659a      	str	r2, [r3, #88]	; 0x58
 8012112:	e057      	b.n	80121c4 <HAL_XSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012118:	2b04      	cmp	r3, #4
 801211a:	d14e      	bne.n	80121ba <HAL_XSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012122:	1c5a      	adds	r2, r3, #1
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	649a      	str	r2, [r3, #72]	; 0x48
      hxspi->XferSize  = hxspi->XferCount;
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	645a      	str	r2, [r3, #68]	; 0x44
      hxspi->pBuffPtr  = pData;
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	68ba      	ldr	r2, [r7, #8]
 8012134:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	681a      	ldr	r2, [r3, #0]
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8012144:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	9300      	str	r3, [sp, #0]
 801214a:	69bb      	ldr	r3, [r7, #24]
 801214c:	2201      	movs	r2, #1
 801214e:	2104      	movs	r1, #4
 8012150:	68f8      	ldr	r0, [r7, #12]
 8012152:	f000 fb9d 	bl	8012890 <XSPI_WaitFlagStateUntilTimeout>
 8012156:	4603      	mov	r3, r0
 8012158:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 801215a:	7ffb      	ldrb	r3, [r7, #31]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d113      	bne.n	8012188 <HAL_XSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012164:	781a      	ldrb	r2, [r3, #0]
 8012166:	697b      	ldr	r3, [r7, #20]
 8012168:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801216e:	1c5a      	adds	r2, r3, #1
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	641a      	str	r2, [r3, #64]	; 0x40
        hxspi->XferCount--;
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012178:	1e5a      	subs	r2, r3, #1
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	649a      	str	r2, [r3, #72]	; 0x48
      } while (hxspi->XferCount > 0U);
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012182:	2b00      	cmp	r3, #0
 8012184:	d1df      	bne.n	8012146 <HAL_XSPI_Transmit+0x5e>
 8012186:	e000      	b.n	801218a <HAL_XSPI_Transmit+0xa2>
          break;
 8012188:	bf00      	nop

      if (status == HAL_OK)
 801218a:	7ffb      	ldrb	r3, [r7, #31]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d119      	bne.n	80121c4 <HAL_XSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	9300      	str	r3, [sp, #0]
 8012194:	69bb      	ldr	r3, [r7, #24]
 8012196:	2201      	movs	r2, #1
 8012198:	2102      	movs	r1, #2
 801219a:	68f8      	ldr	r0, [r7, #12]
 801219c:	f000 fb78 	bl	8012890 <XSPI_WaitFlagStateUntilTimeout>
 80121a0:	4603      	mov	r3, r0
 80121a2:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80121a4:	7ffb      	ldrb	r3, [r7, #31]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d10c      	bne.n	80121c4 <HAL_XSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	2202      	movs	r2, #2
 80121b0:	625a      	str	r2, [r3, #36]	; 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	2202      	movs	r2, #2
 80121b6:	655a      	str	r2, [r3, #84]	; 0x54
 80121b8:	e004      	b.n	80121c4 <HAL_XSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 80121ba:	2301      	movs	r3, #1
 80121bc:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	2210      	movs	r2, #16
 80121c2:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  return status;
 80121c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80121c6:	4618      	mov	r0, r3
 80121c8:	3720      	adds	r7, #32
 80121ca:	46bd      	mov	sp, r7
 80121cc:	bd80      	pop	{r7, pc}

080121ce <HAL_XSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Receive(XSPI_HandleTypeDef *hxspi, uint8_t *const pData, uint32_t Timeout)
{
 80121ce:	b580      	push	{r7, lr}
 80121d0:	b08c      	sub	sp, #48	; 0x30
 80121d2:	af02      	add	r7, sp, #8
 80121d4:	60f8      	str	r0, [r7, #12]
 80121d6:	60b9      	str	r1, [r7, #8]
 80121d8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80121da:	f7f5 f8b1 	bl	8007340 <HAL_GetTick>
 80121de:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	3350      	adds	r3, #80	; 0x50
 80121e6:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hxspi->Instance->AR;
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80121ee:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hxspi->Instance->IR;
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80121f8:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 80121fa:	68bb      	ldr	r3, [r7, #8]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d106      	bne.n	801220e <HAL_XSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8012200:	2301      	movs	r3, #1
 8012202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	2208      	movs	r2, #8
 801220a:	659a      	str	r2, [r3, #88]	; 0x58
 801220c:	e07c      	b.n	8012308 <HAL_XSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012212:	2b04      	cmp	r3, #4
 8012214:	d172      	bne.n	80122fc <HAL_XSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801221c:	1c5a      	adds	r2, r3, #1
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	649a      	str	r2, [r3, #72]	; 0x48
      hxspi->XferSize  = hxspi->XferCount;
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	645a      	str	r2, [r3, #68]	; 0x44
      hxspi->pBuffPtr  = pData;
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	68ba      	ldr	r2, [r7, #8]
 801222e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8012242:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	68db      	ldr	r3, [r3, #12]
 8012248:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801224c:	d104      	bne.n	8012258 <HAL_XSPI_Receive+0x8a>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	69ba      	ldr	r2, [r7, #24]
 8012254:	649a      	str	r2, [r3, #72]	; 0x48
 8012256:	e011      	b.n	801227c <HAL_XSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8012260:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012264:	2b00      	cmp	r3, #0
 8012266:	d004      	beq.n	8012272 <HAL_XSPI_Receive+0xa4>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	69ba      	ldr	r2, [r7, #24]
 801226e:	649a      	str	r2, [r3, #72]	; 0x48
 8012270:	e004      	b.n	801227c <HAL_XSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	697a      	ldr	r2, [r7, #20]
 8012278:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	9300      	str	r3, [sp, #0]
 8012280:	6a3b      	ldr	r3, [r7, #32]
 8012282:	2201      	movs	r2, #1
 8012284:	2106      	movs	r1, #6
 8012286:	68f8      	ldr	r0, [r7, #12]
 8012288:	f000 fb02 	bl	8012890 <XSPI_WaitFlagStateUntilTimeout>
 801228c:	4603      	mov	r3, r0
 801228e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 8012292:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012296:	2b00      	cmp	r3, #0
 8012298:	d114      	bne.n	80122c4 <HAL_XSPI_Receive+0xf6>
        {
          break;
        }

        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801229e:	69fa      	ldr	r2, [r7, #28]
 80122a0:	7812      	ldrb	r2, [r2, #0]
 80122a2:	b2d2      	uxtb	r2, r2
 80122a4:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122aa:	1c5a      	adds	r2, r3, #1
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	641a      	str	r2, [r3, #64]	; 0x40
        hxspi->XferCount--;
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80122b4:	1e5a      	subs	r2, r3, #1
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	649a      	str	r2, [r3, #72]	; 0x48
      } while (hxspi->XferCount > 0U);
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d1dc      	bne.n	801227c <HAL_XSPI_Receive+0xae>
 80122c2:	e000      	b.n	80122c6 <HAL_XSPI_Receive+0xf8>
          break;
 80122c4:	bf00      	nop

      if (status == HAL_OK)
 80122c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d11c      	bne.n	8012308 <HAL_XSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	9300      	str	r3, [sp, #0]
 80122d2:	6a3b      	ldr	r3, [r7, #32]
 80122d4:	2201      	movs	r2, #1
 80122d6:	2102      	movs	r1, #2
 80122d8:	68f8      	ldr	r0, [r7, #12]
 80122da:	f000 fad9 	bl	8012890 <XSPI_WaitFlagStateUntilTimeout>
 80122de:	4603      	mov	r3, r0
 80122e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 80122e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d10d      	bne.n	8012308 <HAL_XSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	2202      	movs	r2, #2
 80122f2:	625a      	str	r2, [r3, #36]	; 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	2202      	movs	r2, #2
 80122f8:	655a      	str	r2, [r3, #84]	; 0x54
 80122fa:	e005      	b.n	8012308 <HAL_XSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 80122fc:	2301      	movs	r3, #1
 80122fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	2210      	movs	r2, #16
 8012306:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  return status;
 8012308:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801230c:	4618      	mov	r0, r3
 801230e:	3728      	adds	r7, #40	; 0x28
 8012310:	46bd      	mov	sp, r7
 8012312:	bd80      	pop	{r7, pc}

08012314 <HAL_XSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_AutoPolling(XSPI_HandleTypeDef *hxspi, XSPI_AutoPollingTypeDef *const pCfg,
                                       uint32_t Timeout)
{
 8012314:	b580      	push	{r7, lr}
 8012316:	b08a      	sub	sp, #40	; 0x28
 8012318:	af02      	add	r7, sp, #8
 801231a:	60f8      	str	r0, [r7, #12]
 801231c:	60b9      	str	r1, [r7, #8]
 801231e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8012320:	f7f5 f80e 	bl	8007340 <HAL_GetTick>
 8012324:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hxspi->Instance->AR;
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801232c:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hxspi->Instance->IR;
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8012336:	613b      	str	r3, [r7, #16]
  assert_param(IS_XSPI_AUTOMATIC_STOP(pCfg->AutomaticStop));
  assert_param(IS_XSPI_INTERVAL(pCfg->IntervalTime));
  assert_param(IS_XSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hxspi->State == HAL_XSPI_STATE_CMD_CFG) && (pCfg->AutomaticStop == HAL_XSPI_AUTOMATIC_STOP_ENABLE))
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801233c:	2b04      	cmp	r3, #4
 801233e:	d167      	bne.n	8012410 <HAL_XSPI_AutoPolling+0xfc>
 8012340:	68bb      	ldr	r3, [r7, #8]
 8012342:	68db      	ldr	r3, [r3, #12]
 8012344:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012348:	d162      	bne.n	8012410 <HAL_XSPI_AutoPolling+0xfc>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	9300      	str	r3, [sp, #0]
 801234e:	69bb      	ldr	r3, [r7, #24]
 8012350:	2200      	movs	r2, #0
 8012352:	2120      	movs	r1, #32
 8012354:	68f8      	ldr	r0, [r7, #12]
 8012356:	f000 fa9b 	bl	8012890 <XSPI_WaitFlagStateUntilTimeout>
 801235a:	4603      	mov	r3, r0
 801235c:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 801235e:	7ffb      	ldrb	r3, [r7, #31]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d152      	bne.n	801240a <HAL_XSPI_AutoPolling+0xf6>
    {
      /* Configure registers */
      WRITE_REG(hxspi->Instance->PSMAR, pCfg->MatchValue);
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	68ba      	ldr	r2, [r7, #8]
 801236a:	6812      	ldr	r2, [r2, #0]
 801236c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG(hxspi->Instance->PSMKR, pCfg->MatchMask);
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	68ba      	ldr	r2, [r7, #8]
 8012376:	6852      	ldr	r2, [r2, #4]
 8012378:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG(hxspi->Instance->PIR,   pCfg->IntervalTime);
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	68ba      	ldr	r2, [r7, #8]
 8012382:	6912      	ldr	r2, [r2, #16]
 8012384:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 8012392:	68bb      	ldr	r3, [r7, #8]
 8012394:	6899      	ldr	r1, [r3, #8]
 8012396:	68bb      	ldr	r3, [r7, #8]
 8012398:	68db      	ldr	r3, [r3, #12]
 801239a:	430b      	orrs	r3, r1
 801239c:	431a      	orrs	r2, r3
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80123a6:	601a      	str	r2, [r3, #0]
                 (pCfg->MatchMode | pCfg->AutomaticStop | XSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	68db      	ldr	r3, [r3, #12]
 80123ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80123b0:	d104      	bne.n	80123bc <HAL_XSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	697a      	ldr	r2, [r7, #20]
 80123b8:	649a      	str	r2, [r3, #72]	; 0x48
 80123ba:	e011      	b.n	80123e0 <HAL_XSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80123c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d004      	beq.n	80123d6 <HAL_XSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	697a      	ldr	r2, [r7, #20]
 80123d2:	649a      	str	r2, [r3, #72]	; 0x48
 80123d4:	e004      	b.n	80123e0 <HAL_XSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	693a      	ldr	r2, [r7, #16]
 80123dc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_SM, SET, tickstart, Timeout);
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	9300      	str	r3, [sp, #0]
 80123e4:	69bb      	ldr	r3, [r7, #24]
 80123e6:	2201      	movs	r2, #1
 80123e8:	2108      	movs	r1, #8
 80123ea:	68f8      	ldr	r0, [r7, #12]
 80123ec:	f000 fa50 	bl	8012890 <XSPI_WaitFlagStateUntilTimeout>
 80123f0:	4603      	mov	r3, r0
 80123f2:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 80123f4:	7ffb      	ldrb	r3, [r7, #31]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d110      	bne.n	801241c <HAL_XSPI_AutoPolling+0x108>
      {
        /* Clear status match flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_SM);
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	2208      	movs	r2, #8
 8012400:	625a      	str	r2, [r3, #36]	; 0x24

        hxspi->State = HAL_XSPI_STATE_READY;
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	2202      	movs	r2, #2
 8012406:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 8012408:	e008      	b.n	801241c <HAL_XSPI_AutoPolling+0x108>
      }
    }
    else
    {
      status = HAL_BUSY;
 801240a:	2302      	movs	r3, #2
 801240c:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
 801240e:	e005      	b.n	801241c <HAL_XSPI_AutoPolling+0x108>
    }
  }
  else
  {
    status = HAL_ERROR;
 8012410:	2301      	movs	r3, #1
 8012412:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	2210      	movs	r2, #16
 8012418:	659a      	str	r2, [r3, #88]	; 0x58
 801241a:	e000      	b.n	801241e <HAL_XSPI_AutoPolling+0x10a>
    if (status == HAL_OK)
 801241c:	bf00      	nop
  }

  return status;
 801241e:	7ffb      	ldrb	r3, [r7, #31]
}
 8012420:	4618      	mov	r0, r3
 8012422:	3720      	adds	r7, #32
 8012424:	46bd      	mov	sp, r7
 8012426:	bd80      	pop	{r7, pc}

08012428 <HAL_XSPI_MemoryMapped>:
  * @param  pCfg   : Pointer to structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_MemoryMapped(XSPI_HandleTypeDef *hxspi, XSPI_MemoryMappedTypeDef *const pCfg)
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b086      	sub	sp, #24
 801242c:	af02      	add	r7, sp, #8
 801242e:	6078      	str	r0, [r7, #4]
 8012430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8012432:	f7f4 ff85 	bl	8007340 <HAL_GetTick>
 8012436:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));

  /* Check the state */
  if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801243c:	2b04      	cmp	r3, #4
 801243e:	d136      	bne.n	80124ae <HAL_XSPI_MemoryMapped+0x86>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012444:	9300      	str	r3, [sp, #0]
 8012446:	68bb      	ldr	r3, [r7, #8]
 8012448:	2200      	movs	r2, #0
 801244a:	2120      	movs	r1, #32
 801244c:	6878      	ldr	r0, [r7, #4]
 801244e:	f000 fa1f 	bl	8012890 <XSPI_WaitFlagStateUntilTimeout>
 8012452:	4603      	mov	r3, r0
 8012454:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8012456:	7bfb      	ldrb	r3, [r7, #15]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d12d      	bne.n	80124b8 <HAL_XSPI_MemoryMapped+0x90>
    {
      hxspi->State = HAL_XSPI_STATE_BUSY_MEM_MAPPED;
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	2288      	movs	r2, #136	; 0x88
 8012460:	655a      	str	r2, [r3, #84]	; 0x54

      if (pCfg->TimeOutActivation == HAL_XSPI_TIMEOUT_COUNTER_ENABLE)
 8012462:	683b      	ldr	r3, [r7, #0]
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	2b08      	cmp	r3, #8
 8012468:	d111      	bne.n	801248e <HAL_XSPI_MemoryMapped+0x66>
      {
        assert_param(IS_XSPI_TIMEOUT_PERIOD(pCfg->TimeoutPeriodClock));

        /* Configure register */
        WRITE_REG(hxspi->Instance->LPTR, pCfg->TimeoutPeriodClock);
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	683a      	ldr	r2, [r7, #0]
 8012470:	6852      	ldr	r2, [r2, #4]
 8012472:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TO);
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	2210      	movs	r2, #16
 801247c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TO);
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	681a      	ldr	r2, [r3, #0]
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801248c:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_TCEN | XSPI_CR_FMODE),
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8012498:	f023 0308 	bic.w	r3, r3, #8
 801249c:	683a      	ldr	r2, [r7, #0]
 801249e:	6812      	ldr	r2, [r2, #0]
 80124a0:	431a      	orrs	r2, r3
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80124aa:	601a      	str	r2, [r3, #0]
 80124ac:	e004      	b.n	80124b8 <HAL_XSPI_MemoryMapped+0x90>
                 (pCfg->TimeOutActivation | XSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 80124ae:	2301      	movs	r3, #1
 80124b0:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	2210      	movs	r2, #16
 80124b6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return status;
 80124b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80124ba:	4618      	mov	r0, r3
 80124bc:	3710      	adds	r7, #16
 80124be:	46bd      	mov	sp, r7
 80124c0:	bd80      	pop	{r7, pc}

080124c2 <HAL_XSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Abort(XSPI_HandleTypeDef *hxspi)
{
 80124c2:	b580      	push	{r7, lr}
 80124c4:	b088      	sub	sp, #32
 80124c6:	af02      	add	r7, sp, #8
 80124c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80124ca:	2300      	movs	r3, #0
 80124cc:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 80124ce:	f7f4 ff37 	bl	8007340 <HAL_GetTick>
 80124d2:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hxspi->State;
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80124d8:	60fb      	str	r3, [r7, #12]
  if (((state & XSPI_BUSY_STATE_MASK) != 0U) || ((state & XSPI_CFG_STATE_MASK) != 0U))
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	f003 0308 	and.w	r3, r3, #8
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d104      	bne.n	80124ee <HAL_XSPI_Abort+0x2c>
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	f003 0304 	and.w	r3, r3, #4
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d05f      	beq.n	80125ae <HAL_XSPI_Abort+0xec>
  {
    /* Check if the DMA is enabled */
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	f003 0304 	and.w	r3, r3, #4
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d021      	beq.n	8012540 <HAL_XSPI_Abort+0x7e>
    {
      /* Disable the DMA transfer on the XSPI side */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_DMAEN);
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	681a      	ldr	r2, [r3, #0]
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	f022 0204 	bic.w	r2, r2, #4
 801250a:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transmit on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmatx);
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012510:	4618      	mov	r0, r3
 8012512:	f7f5 fb4d 	bl	8007bb0 <HAL_DMA_Abort>
 8012516:	4603      	mov	r3, r0
 8012518:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 801251a:	7dfb      	ldrb	r3, [r7, #23]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d002      	beq.n	8012526 <HAL_XSPI_Abort+0x64>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	2204      	movs	r2, #4
 8012524:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Disable the DMA receive on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmarx);
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801252a:	4618      	mov	r0, r3
 801252c:	f7f5 fb40 	bl	8007bb0 <HAL_DMA_Abort>
 8012530:	4603      	mov	r3, r0
 8012532:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8012534:	7dfb      	ldrb	r3, [r7, #23]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d002      	beq.n	8012540 <HAL_XSPI_Abort+0x7e>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	2204      	movs	r2, #4
 801253e:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }

    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	6a1b      	ldr	r3, [r3, #32]
 8012546:	f003 0320 	and.w	r3, r3, #32
 801254a:	2b00      	cmp	r3, #0
 801254c:	d02b      	beq.n	80125a6 <HAL_XSPI_Abort+0xe4>
    {
      /* Perform an abort of the XSPI */
      SET_BIT(hxspi->Instance->CR, XSPI_CR_ABORT);
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	681a      	ldr	r2, [r3, #0]
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	f042 0202 	orr.w	r2, r2, #2
 801255c:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, hxspi->Timeout);
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012562:	9300      	str	r3, [sp, #0]
 8012564:	693b      	ldr	r3, [r7, #16]
 8012566:	2201      	movs	r2, #1
 8012568:	2102      	movs	r1, #2
 801256a:	6878      	ldr	r0, [r7, #4]
 801256c:	f000 f990 	bl	8012890 <XSPI_WaitFlagStateUntilTimeout>
 8012570:	4603      	mov	r3, r0
 8012572:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8012574:	7dfb      	ldrb	r3, [r7, #23]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d11f      	bne.n	80125ba <HAL_XSPI_Abort+0xf8>
      {
        /* Clear transfer complete flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	2202      	movs	r2, #2
 8012580:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012586:	9300      	str	r3, [sp, #0]
 8012588:	693b      	ldr	r3, [r7, #16]
 801258a:	2200      	movs	r2, #0
 801258c:	2120      	movs	r1, #32
 801258e:	6878      	ldr	r0, [r7, #4]
 8012590:	f000 f97e 	bl	8012890 <XSPI_WaitFlagStateUntilTimeout>
 8012594:	4603      	mov	r3, r0
 8012596:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8012598:	7dfb      	ldrb	r3, [r7, #23]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d10d      	bne.n	80125ba <HAL_XSPI_Abort+0xf8>
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	2202      	movs	r2, #2
 80125a2:	655a      	str	r2, [r3, #84]	; 0x54
    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
 80125a4:	e009      	b.n	80125ba <HAL_XSPI_Abort+0xf8>
        }
      }
    }
    else
    {
      hxspi->State = HAL_XSPI_STATE_READY;
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	2202      	movs	r2, #2
 80125aa:	655a      	str	r2, [r3, #84]	; 0x54
    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
 80125ac:	e005      	b.n	80125ba <HAL_XSPI_Abort+0xf8>
    }
  }
  else
  {
    status = HAL_ERROR;
 80125ae:	2301      	movs	r3, #1
 80125b0:	75fb      	strb	r3, [r7, #23]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	2210      	movs	r2, #16
 80125b6:	659a      	str	r2, [r3, #88]	; 0x58
 80125b8:	e000      	b.n	80125bc <HAL_XSPI_Abort+0xfa>
    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
 80125ba:	bf00      	nop
  }

  return status;
 80125bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80125be:	4618      	mov	r0, r3
 80125c0:	3718      	adds	r7, #24
 80125c2:	46bd      	mov	sp, r7
 80125c4:	bd80      	pop	{r7, pc}

080125c6 <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 80125c6:	b480      	push	{r7}
 80125c8:	b083      	sub	sp, #12
 80125ca:	af00      	add	r7, sp, #0
 80125cc:	6078      	str	r0, [r7, #4]
 80125ce:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	683a      	ldr	r2, [r7, #0]
 80125d4:	65da      	str	r2, [r3, #92]	; 0x5c
  return HAL_OK;
 80125d6:	2300      	movs	r3, #0
}
 80125d8:	4618      	mov	r0, r3
 80125da:	370c      	adds	r7, #12
 80125dc:	46bd      	mov	sp, r7
 80125de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e2:	4770      	bx	lr

080125e4 <HAL_XSPI_DLYB_SetConfig>:
  * @param  hxspi   : XSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_XSPI_DLYB_SetConfig(XSPI_HandleTypeDef *hxspi, HAL_XSPI_DLYB_CfgTypeDef  *const pdlyb_cfg)
{
 80125e4:	b580      	push	{r7, lr}
 80125e6:	b084      	sub	sp, #16
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	6078      	str	r0, [r7, #4]
 80125ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80125ee:	2301      	movs	r3, #1
 80125f0:	73fb      	strb	r3, [r7, #15]

  /* Enable XSPI Free Running Clock (mandatory) */
  SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	689a      	ldr	r2, [r3, #8]
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	f042 0202 	orr.w	r2, r2, #2
 8012600:	609a      	str	r2, [r3, #8]

  /* Update XSPI state */
  hxspi->State = HAL_XSPI_STATE_BUSY_CMD;
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	2208      	movs	r2, #8
 8012606:	655a      	str	r2, [r3, #84]	; 0x54

  if (hxspi->Instance == OCTOSPI1)
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	4a18      	ldr	r2, [pc, #96]	; (8012670 <HAL_XSPI_DLYB_SetConfig+0x8c>)
 801260e:	4293      	cmp	r3, r2
 8012610:	d109      	bne.n	8012626 <HAL_XSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 8012612:	4818      	ldr	r0, [pc, #96]	; (8012674 <HAL_XSPI_DLYB_SetConfig+0x90>)
 8012614:	f7ff fae8 	bl	8011be8 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8012618:	6839      	ldr	r1, [r7, #0]
 801261a:	4816      	ldr	r0, [pc, #88]	; (8012674 <HAL_XSPI_DLYB_SetConfig+0x90>)
 801261c:	f000 fb2e 	bl	8012c7c <LL_DLYB_SetDelay>
    status = HAL_OK;
 8012620:	2300      	movs	r3, #0
 8012622:	73fb      	strb	r3, [r7, #15]
 8012624:	e014      	b.n	8012650 <HAL_XSPI_DLYB_SetConfig+0x6c>
  }
#if defined(OCTOSPI2)
  else if (hxspi->Instance == OCTOSPI2)
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	4a13      	ldr	r2, [pc, #76]	; (8012678 <HAL_XSPI_DLYB_SetConfig+0x94>)
 801262c:	4293      	cmp	r3, r2
 801262e:	d109      	bne.n	8012644 <HAL_XSPI_DLYB_SetConfig+0x60>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8012630:	4812      	ldr	r0, [pc, #72]	; (801267c <HAL_XSPI_DLYB_SetConfig+0x98>)
 8012632:	f7ff fad9 	bl	8011be8 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8012636:	6839      	ldr	r1, [r7, #0]
 8012638:	4810      	ldr	r0, [pc, #64]	; (801267c <HAL_XSPI_DLYB_SetConfig+0x98>)
 801263a:	f000 fb1f 	bl	8012c7c <LL_DLYB_SetDelay>
    status = HAL_OK;
 801263e:	2300      	movs	r3, #0
 8012640:	73fb      	strb	r3, [r7, #15]
 8012642:	e005      	b.n	8012650 <HAL_XSPI_DLYB_SetConfig+0x6c>
  }
#endif /* OCTOSPI2 */
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012648:	f043 0208 	orr.w	r2, r3, #8
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Abort the current XSPI operation if exist */
  (void)HAL_XSPI_Abort(hxspi);
 8012650:	6878      	ldr	r0, [r7, #4]
 8012652:	f7ff ff36 	bl	80124c2 <HAL_XSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	689a      	ldr	r2, [r3, #8]
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	f022 0202 	bic.w	r2, r2, #2
 8012664:	609a      	str	r2, [r3, #8]

  return status;
 8012666:	7bfb      	ldrb	r3, [r7, #15]
}
 8012668:	4618      	mov	r0, r3
 801266a:	3710      	adds	r7, #16
 801266c:	46bd      	mov	sp, r7
 801266e:	bd80      	pop	{r7, pc}
 8012670:	420d1400 	.word	0x420d1400
 8012674:	420cf000 	.word	0x420cf000
 8012678:	420d2400 	.word	0x420d2400
 801267c:	420cf400 	.word	0x420cf400

08012680 <HAL_XSPI_DLYB_GetConfig>:
  * @param  hxspi   : XSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_XSPI_DLYB_GetConfig(XSPI_HandleTypeDef *hxspi, HAL_XSPI_DLYB_CfgTypeDef  *const pdlyb_cfg)
{
 8012680:	b580      	push	{r7, lr}
 8012682:	b084      	sub	sp, #16
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
 8012688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 801268a:	2301      	movs	r3, #1
 801268c:	73fb      	strb	r3, [r7, #15]

  if (hxspi->Instance == OCTOSPI1)
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	4a10      	ldr	r2, [pc, #64]	; (80126d4 <HAL_XSPI_DLYB_GetConfig+0x54>)
 8012694:	4293      	cmp	r3, r2
 8012696:	d106      	bne.n	80126a6 <HAL_XSPI_DLYB_GetConfig+0x26>
  {
    LL_DLYB_GetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8012698:	6839      	ldr	r1, [r7, #0]
 801269a:	480f      	ldr	r0, [pc, #60]	; (80126d8 <HAL_XSPI_DLYB_GetConfig+0x58>)
 801269c:	f000 fb0d 	bl	8012cba <LL_DLYB_GetDelay>
    status = HAL_OK;
 80126a0:	2300      	movs	r3, #0
 80126a2:	73fb      	strb	r3, [r7, #15]
 80126a4:	e011      	b.n	80126ca <HAL_XSPI_DLYB_GetConfig+0x4a>
  }
#if defined(OCTOSPI2)
  else if (hxspi->Instance == OCTOSPI2)
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	4a0c      	ldr	r2, [pc, #48]	; (80126dc <HAL_XSPI_DLYB_GetConfig+0x5c>)
 80126ac:	4293      	cmp	r3, r2
 80126ae:	d106      	bne.n	80126be <HAL_XSPI_DLYB_GetConfig+0x3e>
  {
    LL_DLYB_GetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 80126b0:	6839      	ldr	r1, [r7, #0]
 80126b2:	480b      	ldr	r0, [pc, #44]	; (80126e0 <HAL_XSPI_DLYB_GetConfig+0x60>)
 80126b4:	f000 fb01 	bl	8012cba <LL_DLYB_GetDelay>
    status = HAL_OK;
 80126b8:	2300      	movs	r3, #0
 80126ba:	73fb      	strb	r3, [r7, #15]
 80126bc:	e005      	b.n	80126ca <HAL_XSPI_DLYB_GetConfig+0x4a>
  }
#endif /* OCTOSPI2 */
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80126c2:	f043 0208 	orr.w	r2, r3, #8
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return status;
 80126ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80126cc:	4618      	mov	r0, r3
 80126ce:	3710      	adds	r7, #16
 80126d0:	46bd      	mov	sp, r7
 80126d2:	bd80      	pop	{r7, pc}
 80126d4:	420d1400 	.word	0x420d1400
 80126d8:	420cf000 	.word	0x420cf000
 80126dc:	420d2400 	.word	0x420d2400
 80126e0:	420cf400 	.word	0x420cf400

080126e4 <HAL_XSPI_DLYB_GetClockPeriod>:
  * @param  hxspi   : XSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_XSPI_DLYB_GetClockPeriod(XSPI_HandleTypeDef *hxspi, HAL_XSPI_DLYB_CfgTypeDef  *const pdlyb_cfg)
{
 80126e4:	b580      	push	{r7, lr}
 80126e6:	b084      	sub	sp, #16
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	6078      	str	r0, [r7, #4]
 80126ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80126ee:	2301      	movs	r3, #1
 80126f0:	73fb      	strb	r3, [r7, #15]

  /* Enable XSPI Free Running Clock (mandatory) */
  SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	689a      	ldr	r2, [r3, #8]
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	f042 0202 	orr.w	r2, r2, #2
 8012700:	609a      	str	r2, [r3, #8]

  /* Update XSPI state */
  hxspi->State = HAL_XSPI_STATE_BUSY_CMD;
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	2208      	movs	r2, #8
 8012706:	655a      	str	r2, [r3, #84]	; 0x54

  if (hxspi->Instance == OCTOSPI1)
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	4a1e      	ldr	r2, [pc, #120]	; (8012788 <HAL_XSPI_DLYB_GetClockPeriod+0xa4>)
 801270e:	4293      	cmp	r3, r2
 8012710:	d10f      	bne.n	8012732 <HAL_XSPI_DLYB_GetClockPeriod+0x4e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 8012712:	481e      	ldr	r0, [pc, #120]	; (801278c <HAL_XSPI_DLYB_GetClockPeriod+0xa8>)
 8012714:	f7ff fa68 	bl	8011be8 <LL_DLYB_Enable>

    /* try to detect Period */
    if (LL_DLYB_GetClockPeriod(DLYB_OCTOSPI1, pdlyb_cfg) == (uint32_t)SUCCESS)
 8012718:	6839      	ldr	r1, [r7, #0]
 801271a:	481c      	ldr	r0, [pc, #112]	; (801278c <HAL_XSPI_DLYB_GetClockPeriod+0xa8>)
 801271c:	f000 fae6 	bl	8012cec <LL_DLYB_GetClockPeriod>
 8012720:	4603      	mov	r3, r0
 8012722:	2b00      	cmp	r3, #0
 8012724:	d101      	bne.n	801272a <HAL_XSPI_DLYB_GetClockPeriod+0x46>
    {
      status = HAL_OK;
 8012726:	2300      	movs	r3, #0
 8012728:	73fb      	strb	r3, [r7, #15]
    }

    /* Disable the DelayBlock */
    LL_DLYB_Disable(DLYB_OCTOSPI1);
 801272a:	4818      	ldr	r0, [pc, #96]	; (801278c <HAL_XSPI_DLYB_GetClockPeriod+0xa8>)
 801272c:	f7ff fa6c 	bl	8011c08 <LL_DLYB_Disable>
 8012730:	e01a      	b.n	8012768 <HAL_XSPI_DLYB_GetClockPeriod+0x84>
  }
#if defined(OCTOSPI2)
  else if (hxspi->Instance == OCTOSPI2)
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	4a16      	ldr	r2, [pc, #88]	; (8012790 <HAL_XSPI_DLYB_GetClockPeriod+0xac>)
 8012738:	4293      	cmp	r3, r2
 801273a:	d10f      	bne.n	801275c <HAL_XSPI_DLYB_GetClockPeriod+0x78>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 801273c:	4815      	ldr	r0, [pc, #84]	; (8012794 <HAL_XSPI_DLYB_GetClockPeriod+0xb0>)
 801273e:	f7ff fa53 	bl	8011be8 <LL_DLYB_Enable>

    /* try to detect Period */
    if (LL_DLYB_GetClockPeriod(DLYB_OCTOSPI2, pdlyb_cfg) == (uint32_t)SUCCESS)
 8012742:	6839      	ldr	r1, [r7, #0]
 8012744:	4813      	ldr	r0, [pc, #76]	; (8012794 <HAL_XSPI_DLYB_GetClockPeriod+0xb0>)
 8012746:	f000 fad1 	bl	8012cec <LL_DLYB_GetClockPeriod>
 801274a:	4603      	mov	r3, r0
 801274c:	2b00      	cmp	r3, #0
 801274e:	d101      	bne.n	8012754 <HAL_XSPI_DLYB_GetClockPeriod+0x70>
    {
      status = HAL_OK;
 8012750:	2300      	movs	r3, #0
 8012752:	73fb      	strb	r3, [r7, #15]
    }

    /* Disable the DelayBlock */
    LL_DLYB_Disable(DLYB_OCTOSPI2);
 8012754:	480f      	ldr	r0, [pc, #60]	; (8012794 <HAL_XSPI_DLYB_GetClockPeriod+0xb0>)
 8012756:	f7ff fa57 	bl	8011c08 <LL_DLYB_Disable>
 801275a:	e005      	b.n	8012768 <HAL_XSPI_DLYB_GetClockPeriod+0x84>
  }
#endif /* OCTOSPI2 */
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012760:	f043 0208 	orr.w	r2, r3, #8
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Abort the current XSPI operation if exist */
  (void)HAL_XSPI_Abort(hxspi);
 8012768:	6878      	ldr	r0, [r7, #4]
 801276a:	f7ff feaa 	bl	80124c2 <HAL_XSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	689a      	ldr	r2, [r3, #8]
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	f022 0202 	bic.w	r2, r2, #2
 801277c:	609a      	str	r2, [r3, #8]

  return status;
 801277e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012780:	4618      	mov	r0, r3
 8012782:	3710      	adds	r7, #16
 8012784:	46bd      	mov	sp, r7
 8012786:	bd80      	pop	{r7, pc}
 8012788:	420d1400 	.word	0x420d1400
 801278c:	420cf000 	.word	0x420cf000
 8012790:	420d2400 	.word	0x420d2400
 8012794:	420cf400 	.word	0x420cf400

08012798 <HAL_XSPI_SetDelayValue>:
  * @param  hxspi : XSPI handle
  * @param  pCfg   : Configuration of delay value specified in DelayValueType field.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_SetDelayValue(XSPI_HandleTypeDef *hxspi, XSPI_HSCalTypeDef *const pCfg)
{
 8012798:	b480      	push	{r7}
 801279a:	b085      	sub	sp, #20
 801279c:	af00      	add	r7, sp, #0
 801279e:	6078      	str	r0, [r7, #4]
 80127a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80127a2:	2300      	movs	r3, #0
 80127a4:	73fb      	strb	r3, [r7, #15]

  if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	4a37      	ldr	r2, [pc, #220]	; (8012888 <HAL_XSPI_SetDelayValue+0xf0>)
 80127ac:	4293      	cmp	r3, r2
 80127ae:	d004      	beq.n	80127ba <HAL_XSPI_SetDelayValue+0x22>
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	4a35      	ldr	r2, [pc, #212]	; (801288c <HAL_XSPI_SetDelayValue+0xf4>)
 80127b6:	4293      	cmp	r3, r2
 80127b8:	d159      	bne.n	801286e <HAL_XSPI_SetDelayValue+0xd6>
    assert_param(IS_XSPI_DELAY_TYPE(pCfg->DelayValueType));
    assert_param(IS_XSPI_FINECAL_VALUE(pCfg->FineCalibrationUnit));
    assert_param(IS_XSPI_COARSECAL_VALUE(pCfg->CoarseCalibrationUnit));

    /* Check if the state isn't in one of the busy states */
    if ((hxspi->State & XSPI_BUSY_STATE_MASK) == 0U)
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80127be:	f003 0308 	and.w	r3, r3, #8
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d14c      	bne.n	8012860 <HAL_XSPI_SetDelayValue+0xc8>
    {
      switch (pCfg->DelayValueType)
 80127c6:	683b      	ldr	r3, [r7, #0]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	2b03      	cmp	r3, #3
 80127cc:	d02e      	beq.n	801282c <HAL_XSPI_SetDelayValue+0x94>
 80127ce:	2b03      	cmp	r3, #3
 80127d0:	d840      	bhi.n	8012854 <HAL_XSPI_SetDelayValue+0xbc>
 80127d2:	2b01      	cmp	r3, #1
 80127d4:	d002      	beq.n	80127dc <HAL_XSPI_SetDelayValue+0x44>
 80127d6:	2b02      	cmp	r3, #2
 80127d8:	d014      	beq.n	8012804 <HAL_XSPI_SetDelayValue+0x6c>
 80127da:	e03b      	b.n	8012854 <HAL_XSPI_SetDelayValue+0xbc>
      {
        case HAL_XSPI_CAL_FEEDBACK_CLK_DELAY:
          MODIFY_REG(hxspi->Instance->CALMR, (HSPI_CALMR_COARSE |  HSPI_CALMR_FINE),
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80127e4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80127e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80127ec:	683a      	ldr	r2, [r7, #0]
 80127ee:	6851      	ldr	r1, [r2, #4]
 80127f0:	683a      	ldr	r2, [r7, #0]
 80127f2:	6892      	ldr	r2, [r2, #8]
 80127f4:	0412      	lsls	r2, r2, #16
 80127f6:	4311      	orrs	r1, r2
 80127f8:	687a      	ldr	r2, [r7, #4]
 80127fa:	6812      	ldr	r2, [r2, #0]
 80127fc:	430b      	orrs	r3, r1
 80127fe:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218
                     (pCfg->FineCalibrationUnit | (pCfg->CoarseCalibrationUnit << HSPI_CALMR_COARSE_Pos)));
          break;
 8012802:	e033      	b.n	801286c <HAL_XSPI_SetDelayValue+0xd4>
        case HAL_XSPI_CAL_DATA_OUTPUT_DELAY:
          MODIFY_REG(hxspi->Instance->CALSOR, (HSPI_CALSOR_COARSE | HSPI_CALSOR_FINE),
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 801280c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8012810:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012814:	683a      	ldr	r2, [r7, #0]
 8012816:	6851      	ldr	r1, [r2, #4]
 8012818:	683a      	ldr	r2, [r7, #0]
 801281a:	6892      	ldr	r2, [r2, #8]
 801281c:	0412      	lsls	r2, r2, #16
 801281e:	4311      	orrs	r1, r2
 8012820:	687a      	ldr	r2, [r7, #4]
 8012822:	6812      	ldr	r2, [r2, #0]
 8012824:	430b      	orrs	r3, r1
 8012826:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
                     (pCfg->FineCalibrationUnit | (pCfg->CoarseCalibrationUnit << HSPI_CALSOR_COARSE_Pos)));
          break;
 801282a:	e01f      	b.n	801286c <HAL_XSPI_SetDelayValue+0xd4>
        case HAL_XSPI_CAL_DQS_INPUT_DELAY:
          MODIFY_REG(hxspi->Instance->CALSIR, (HSPI_CALSIR_COARSE | HSPI_CALSIR_FINE),
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8012834:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8012838:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801283c:	683a      	ldr	r2, [r7, #0]
 801283e:	6851      	ldr	r1, [r2, #4]
 8012840:	683a      	ldr	r2, [r7, #0]
 8012842:	6892      	ldr	r2, [r2, #8]
 8012844:	0412      	lsls	r2, r2, #16
 8012846:	4311      	orrs	r1, r2
 8012848:	687a      	ldr	r2, [r7, #4]
 801284a:	6812      	ldr	r2, [r2, #0]
 801284c:	430b      	orrs	r3, r1
 801284e:	f8c2 3228 	str.w	r3, [r2, #552]	; 0x228
                     (pCfg->FineCalibrationUnit | (pCfg->CoarseCalibrationUnit << HSPI_CALSIR_COARSE_Pos)));
          break;
 8012852:	e00b      	b.n	801286c <HAL_XSPI_SetDelayValue+0xd4>
        default:
          status = HAL_ERROR;
 8012854:	2301      	movs	r3, #1
 8012856:	73fb      	strb	r3, [r7, #15]
          hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	2208      	movs	r2, #8
 801285c:	659a      	str	r2, [r3, #88]	; 0x58
          break;
 801285e:	e005      	b.n	801286c <HAL_XSPI_SetDelayValue+0xd4>
      }
    }
    else
    {
      status = HAL_ERROR;
 8012860:	2301      	movs	r3, #1
 8012862:	73fb      	strb	r3, [r7, #15]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	2210      	movs	r2, #16
 8012868:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hxspi->State & XSPI_BUSY_STATE_MASK) == 0U)
 801286a:	e005      	b.n	8012878 <HAL_XSPI_SetDelayValue+0xe0>
 801286c:	e004      	b.n	8012878 <HAL_XSPI_SetDelayValue+0xe0>
    }
  }
  else
  {
    status = HAL_ERROR;
 801286e:	2301      	movs	r3, #1
 8012870:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	2208      	movs	r2, #8
 8012876:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return status;
 8012878:	7bfb      	ldrb	r3, [r7, #15]
}
 801287a:	4618      	mov	r0, r3
 801287c:	3714      	adds	r7, #20
 801287e:	46bd      	mov	sp, r7
 8012880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012884:	4770      	bx	lr
 8012886:	bf00      	nop
 8012888:	420d3400 	.word	0x420d3400
 801288c:	520d3400 	.word	0x520d3400

08012890 <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8012890:	b580      	push	{r7, lr}
 8012892:	b084      	sub	sp, #16
 8012894:	af00      	add	r7, sp, #0
 8012896:	60f8      	str	r0, [r7, #12]
 8012898:	60b9      	str	r1, [r7, #8]
 801289a:	603b      	str	r3, [r7, #0]
 801289c:	4613      	mov	r3, r2
 801289e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 80128a0:	e01a      	b.n	80128d8 <XSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80128a2:	69bb      	ldr	r3, [r7, #24]
 80128a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128a8:	d016      	beq.n	80128d8 <XSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80128aa:	f7f4 fd49 	bl	8007340 <HAL_GetTick>
 80128ae:	4602      	mov	r2, r0
 80128b0:	683b      	ldr	r3, [r7, #0]
 80128b2:	1ad3      	subs	r3, r2, r3
 80128b4:	69ba      	ldr	r2, [r7, #24]
 80128b6:	429a      	cmp	r2, r3
 80128b8:	d302      	bcc.n	80128c0 <XSPI_WaitFlagStateUntilTimeout+0x30>
 80128ba:	69bb      	ldr	r3, [r7, #24]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d10b      	bne.n	80128d8 <XSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hxspi->State     = HAL_XSPI_STATE_ERROR;
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80128c6:	655a      	str	r2, [r3, #84]	; 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80128cc:	f043 0201 	orr.w	r2, r3, #1
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 80128d4:	2303      	movs	r3, #3
 80128d6:	e00e      	b.n	80128f6 <XSPI_WaitFlagStateUntilTimeout+0x66>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	6a1a      	ldr	r2, [r3, #32]
 80128de:	68bb      	ldr	r3, [r7, #8]
 80128e0:	4013      	ands	r3, r2
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	bf14      	ite	ne
 80128e6:	2301      	movne	r3, #1
 80128e8:	2300      	moveq	r3, #0
 80128ea:	b2db      	uxtb	r3, r3
 80128ec:	461a      	mov	r2, r3
 80128ee:	79fb      	ldrb	r3, [r7, #7]
 80128f0:	429a      	cmp	r2, r3
 80128f2:	d1d6      	bne.n	80128a2 <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80128f4:	2300      	movs	r3, #0
}
 80128f6:	4618      	mov	r0, r3
 80128f8:	3710      	adds	r7, #16
 80128fa:	46bd      	mov	sp, r7
 80128fc:	bd80      	pop	{r7, pc}
	...

08012900 <XSPI_ConfigCmd>:
  * @param  hxspi : XSPI handle
  * @param  pCmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_ConfigCmd(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *pCmd)
{
 8012900:	b480      	push	{r7}
 8012902:	b089      	sub	sp, #36	; 0x24
 8012904:	af00      	add	r7, sp, #0
 8012906:	6078      	str	r0, [r7, #4]
 8012908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801290a:	2300      	movs	r3, #0
 801290c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	681a      	ldr	r2, [r3, #0]
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801291c:	601a      	str	r2, [r3, #0]

  if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	4a8f      	ldr	r2, [pc, #572]	; (8012b60 <XSPI_ConfigCmd+0x260>)
 8012924:	4293      	cmp	r3, r2
 8012926:	d00e      	beq.n	8012946 <XSPI_ConfigCmd+0x46>
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	4a8d      	ldr	r2, [pc, #564]	; (8012b64 <XSPI_ConfigCmd+0x264>)
 801292e:	4293      	cmp	r3, r2
 8012930:	d009      	beq.n	8012946 <XSPI_ConfigCmd+0x46>
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	4a8c      	ldr	r2, [pc, #560]	; (8012b68 <XSPI_ConfigCmd+0x268>)
 8012938:	4293      	cmp	r3, r2
 801293a:	d004      	beq.n	8012946 <XSPI_ConfigCmd+0x46>
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	4a8a      	ldr	r2, [pc, #552]	; (8012b6c <XSPI_ConfigCmd+0x26c>)
 8012942:	4293      	cmp	r3, r2
 8012944:	d10f      	bne.n	8012966 <XSPI_ConfigCmd+0x66>
  {
    if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	689b      	ldr	r3, [r3, #8]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d12d      	bne.n	80129aa <XSPI_ConfigCmd+0xaa>
    {
      assert_param(IS_OCTOSPI_IO_SELECT(pCmd->IOSelect));
      MODIFY_REG(hxspi->Instance->CR, OCTOSPI_CR_MSEL, pCmd->IOSelect);
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8012958:	683b      	ldr	r3, [r7, #0]
 801295a:	685a      	ldr	r2, [r3, #4]
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	430a      	orrs	r2, r1
 8012962:	601a      	str	r2, [r3, #0]
    if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 8012964:	e021      	b.n	80129aa <XSPI_ConfigCmd+0xaa>
    }
  }
#if defined(HSPI1)
  else if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	4a81      	ldr	r2, [pc, #516]	; (8012b70 <XSPI_ConfigCmd+0x270>)
 801296c:	4293      	cmp	r3, r2
 801296e:	d004      	beq.n	801297a <XSPI_ConfigCmd+0x7a>
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	4a7f      	ldr	r2, [pc, #508]	; (8012b74 <XSPI_ConfigCmd+0x274>)
 8012976:	4293      	cmp	r3, r2
 8012978:	d10f      	bne.n	801299a <XSPI_ConfigCmd+0x9a>
  {
    if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	689b      	ldr	r3, [r3, #8]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d113      	bne.n	80129aa <XSPI_ConfigCmd+0xaa>
    {
      assert_param(IS_HSPI_IO_SELECT(pCmd->IOSelect));
      MODIFY_REG(hxspi->Instance->CR, HSPI_CR_MSEL, pCmd->IOSelect);
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 801298c:	683b      	ldr	r3, [r7, #0]
 801298e:	685a      	ldr	r2, [r3, #4]
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	430a      	orrs	r2, r1
 8012996:	601a      	str	r2, [r3, #0]
    if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 8012998:	e007      	b.n	80129aa <XSPI_ConfigCmd+0xaa>
    }
  }
#endif /* HSPI1 */
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801299e:	f043 0208 	orr.w	r2, r3, #8
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	659a      	str	r2, [r3, #88]	; 0x58
    return HAL_ERROR;
 80129a6:	2301      	movs	r3, #1
 80129a8:	e162      	b.n	8012c70 <XSPI_ConfigCmd+0x370>
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 80129aa:	683b      	ldr	r3, [r7, #0]
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	2b02      	cmp	r3, #2
 80129b0:	d114      	bne.n	80129dc <XSPI_ConfigCmd+0xdc>
  {
    ccr_reg = &(hxspi->Instance->WCCR);
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80129ba:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WTCR);
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80129c4:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WIR);
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80129ce:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WABR);
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80129d8:	60fb      	str	r3, [r7, #12]
 80129da:	e02c      	b.n	8012a36 <XSPI_ConfigCmd+0x136>
  }
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
 80129dc:	683b      	ldr	r3, [r7, #0]
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	2b03      	cmp	r3, #3
 80129e2:	d114      	bne.n	8012a0e <XSPI_ConfigCmd+0x10e>
  {
    ccr_reg = &(hxspi->Instance->WPCCR);
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80129ec:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WPTCR);
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80129f6:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WPIR);
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012a00:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WPABR);
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8012a0a:	60fb      	str	r3, [r7, #12]
 8012a0c:	e013      	b.n	8012a36 <XSPI_ConfigCmd+0x136>
  }
  else
  {
    ccr_reg = &(hxspi->Instance->CCR);
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012a16:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->TCR);
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8012a20:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->IR);
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8012a2a:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->ABR);
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8012a34:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (pCmd->DQSMode | pCmd->SIOOMode);
 8012a36:	683b      	ldr	r3, [r7, #0]
 8012a38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012a3a:	683b      	ldr	r3, [r7, #0]
 8012a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012a3e:	431a      	orrs	r2, r3
 8012a40:	69bb      	ldr	r3, [r7, #24]
 8012a42:	601a      	str	r2, [r3, #0]

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
 8012a44:	683b      	ldr	r3, [r7, #0]
 8012a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d012      	beq.n	8012a72 <XSPI_ConfigCmd+0x172>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
 8012a4c:	683b      	ldr	r3, [r7, #0]
 8012a4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
 8012a54:	69bb      	ldr	r3, [r7, #24]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8012a5c:	683b      	ldr	r3, [r7, #0]
 8012a5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8012a60:	683b      	ldr	r3, [r7, #0]
 8012a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a64:	4319      	orrs	r1, r3
 8012a66:	683b      	ldr	r3, [r7, #0]
 8012a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a6a:	430b      	orrs	r3, r1
 8012a6c:	431a      	orrs	r2, r3
 8012a6e:	69bb      	ldr	r3, [r7, #24]
 8012a70:	601a      	str	r2, [r3, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
 8012a72:	697b      	ldr	r3, [r7, #20]
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	f023 021f 	bic.w	r2, r3, #31
 8012a7a:	683b      	ldr	r3, [r7, #0]
 8012a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a7e:	431a      	orrs	r2, r3
 8012a80:	697b      	ldr	r3, [r7, #20]
 8012a82:	601a      	str	r2, [r3, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8012a84:	683b      	ldr	r3, [r7, #0]
 8012a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d009      	beq.n	8012aa0 <XSPI_ConfigCmd+0x1a0>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 8012a8c:	683b      	ldr	r3, [r7, #0]
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d105      	bne.n	8012aa0 <XSPI_ConfigCmd+0x1a0>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
 8012a94:	683b      	ldr	r3, [r7, #0]
 8012a96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	3a01      	subs	r2, #1
 8012a9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
 8012aa0:	683b      	ldr	r3, [r7, #0]
 8012aa2:	68db      	ldr	r3, [r3, #12]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	f000 80a8 	beq.w	8012bfa <XSPI_ConfigCmd+0x2fa>
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 8012aaa:	683b      	ldr	r3, [r7, #0]
 8012aac:	69db      	ldr	r3, [r3, #28]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d064      	beq.n	8012b7c <XSPI_ConfigCmd+0x27c>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8012ab2:	683b      	ldr	r3, [r7, #0]
 8012ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d01e      	beq.n	8012af8 <XSPI_ConfigCmd+0x1f8>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 8012aba:	69bb      	ldr	r3, [r7, #24]
 8012abc:	681a      	ldr	r2, [r3, #0]
 8012abe:	4b2e      	ldr	r3, [pc, #184]	; (8012b78 <XSPI_ConfigCmd+0x278>)
 8012ac0:	4013      	ands	r3, r2
 8012ac2:	683a      	ldr	r2, [r7, #0]
 8012ac4:	68d1      	ldr	r1, [r2, #12]
 8012ac6:	683a      	ldr	r2, [r7, #0]
 8012ac8:	6952      	ldr	r2, [r2, #20]
 8012aca:	4311      	orrs	r1, r2
 8012acc:	683a      	ldr	r2, [r7, #0]
 8012ace:	6912      	ldr	r2, [r2, #16]
 8012ad0:	4311      	orrs	r1, r2
 8012ad2:	683a      	ldr	r2, [r7, #0]
 8012ad4:	69d2      	ldr	r2, [r2, #28]
 8012ad6:	4311      	orrs	r1, r2
 8012ad8:	683a      	ldr	r2, [r7, #0]
 8012ada:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012adc:	4311      	orrs	r1, r2
 8012ade:	683a      	ldr	r2, [r7, #0]
 8012ae0:	6a12      	ldr	r2, [r2, #32]
 8012ae2:	4311      	orrs	r1, r2
 8012ae4:	683a      	ldr	r2, [r7, #0]
 8012ae6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8012ae8:	4311      	orrs	r1, r2
 8012aea:	683a      	ldr	r2, [r7, #0]
 8012aec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8012aee:	430a      	orrs	r2, r1
 8012af0:	431a      	orrs	r2, r3
 8012af2:	69bb      	ldr	r3, [r7, #24]
 8012af4:	601a      	str	r2, [r3, #0]
 8012af6:	e028      	b.n	8012b4a <XSPI_ConfigCmd+0x24a>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 8012af8:	69bb      	ldr	r3, [r7, #24]
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012b00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8012b04:	683a      	ldr	r2, [r7, #0]
 8012b06:	68d1      	ldr	r1, [r2, #12]
 8012b08:	683a      	ldr	r2, [r7, #0]
 8012b0a:	6952      	ldr	r2, [r2, #20]
 8012b0c:	4311      	orrs	r1, r2
 8012b0e:	683a      	ldr	r2, [r7, #0]
 8012b10:	6912      	ldr	r2, [r2, #16]
 8012b12:	4311      	orrs	r1, r2
 8012b14:	683a      	ldr	r2, [r7, #0]
 8012b16:	69d2      	ldr	r2, [r2, #28]
 8012b18:	4311      	orrs	r1, r2
 8012b1a:	683a      	ldr	r2, [r7, #0]
 8012b1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012b1e:	4311      	orrs	r1, r2
 8012b20:	683a      	ldr	r2, [r7, #0]
 8012b22:	6a12      	ldr	r2, [r2, #32]
 8012b24:	430a      	orrs	r2, r1
 8012b26:	431a      	orrs	r2, r3
 8012b28:	69bb      	ldr	r3, [r7, #24]
 8012b2a:	601a      	str	r2, [r3, #0]
                                XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth |
                    pCmd->AddressMode     | pCmd->AddressDTRMode     | pCmd->AddressWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012b34:	d109      	bne.n	8012b4a <XSPI_ConfigCmd+0x24a>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 8012b36:	683b      	ldr	r3, [r7, #0]
 8012b38:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8012b3a:	2b08      	cmp	r3, #8
 8012b3c:	d105      	bne.n	8012b4a <XSPI_ConfigCmd+0x24a>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 8012b3e:	69bb      	ldr	r3, [r7, #24]
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8012b46:	69bb      	ldr	r3, [r7, #24]
 8012b48:	601a      	str	r2, [r3, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 8012b4a:	683b      	ldr	r3, [r7, #0]
 8012b4c:	689a      	ldr	r2, [r3, #8]
 8012b4e:	693b      	ldr	r3, [r7, #16]
 8012b50:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hxspi->Instance->AR = pCmd->Address;
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	683a      	ldr	r2, [r7, #0]
 8012b58:	6992      	ldr	r2, [r2, #24]
 8012b5a:	649a      	str	r2, [r3, #72]	; 0x48
 8012b5c:	e087      	b.n	8012c6e <XSPI_ConfigCmd+0x36e>
 8012b5e:	bf00      	nop
 8012b60:	420d1400 	.word	0x420d1400
 8012b64:	520d1400 	.word	0x520d1400
 8012b68:	420d2400 	.word	0x420d2400
 8012b6c:	520d2400 	.word	0x520d2400
 8012b70:	420d3400 	.word	0x420d3400
 8012b74:	520d3400 	.word	0x520d3400
 8012b78:	f0ffc0c0 	.word	0xf0ffc0c0
    }
    else
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8012b7c:	683b      	ldr	r3, [r7, #0]
 8012b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d017      	beq.n	8012bb4 <XSPI_ConfigCmd+0x2b4>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
 8012b84:	69bb      	ldr	r3, [r7, #24]
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8012b8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8012b90:	683a      	ldr	r2, [r7, #0]
 8012b92:	68d1      	ldr	r1, [r2, #12]
 8012b94:	683a      	ldr	r2, [r7, #0]
 8012b96:	6952      	ldr	r2, [r2, #20]
 8012b98:	4311      	orrs	r1, r2
 8012b9a:	683a      	ldr	r2, [r7, #0]
 8012b9c:	6912      	ldr	r2, [r2, #16]
 8012b9e:	4311      	orrs	r1, r2
 8012ba0:	683a      	ldr	r2, [r7, #0]
 8012ba2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8012ba4:	4311      	orrs	r1, r2
 8012ba6:	683a      	ldr	r2, [r7, #0]
 8012ba8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8012baa:	430a      	orrs	r2, r1
 8012bac:	431a      	orrs	r2, r3
 8012bae:	69bb      	ldr	r3, [r7, #24]
 8012bb0:	601a      	str	r2, [r3, #0]
 8012bb2:	e01d      	b.n	8012bf0 <XSPI_ConfigCmd+0x2f0>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
 8012bb4:	69bb      	ldr	r3, [r7, #24]
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8012bbc:	683b      	ldr	r3, [r7, #0]
 8012bbe:	68d9      	ldr	r1, [r3, #12]
 8012bc0:	683b      	ldr	r3, [r7, #0]
 8012bc2:	695b      	ldr	r3, [r3, #20]
 8012bc4:	4319      	orrs	r1, r3
 8012bc6:	683b      	ldr	r3, [r7, #0]
 8012bc8:	691b      	ldr	r3, [r3, #16]
 8012bca:	430b      	orrs	r3, r1
 8012bcc:	431a      	orrs	r2, r3
 8012bce:	69bb      	ldr	r3, [r7, #24]
 8012bd0:	601a      	str	r2, [r3, #0]
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012bda:	d109      	bne.n	8012bf0 <XSPI_ConfigCmd+0x2f0>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 8012bdc:	683b      	ldr	r3, [r7, #0]
 8012bde:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8012be0:	2b08      	cmp	r3, #8
 8012be2:	d105      	bne.n	8012bf0 <XSPI_ConfigCmd+0x2f0>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 8012be4:	69bb      	ldr	r3, [r7, #24]
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8012bec:	69bb      	ldr	r3, [r7, #24]
 8012bee:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 8012bf0:	683b      	ldr	r3, [r7, #0]
 8012bf2:	689a      	ldr	r2, [r3, #8]
 8012bf4:	693b      	ldr	r3, [r7, #16]
 8012bf6:	601a      	str	r2, [r3, #0]
 8012bf8:	e039      	b.n	8012c6e <XSPI_ConfigCmd+0x36e>

    }
  }
  else
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 8012bfa:	683b      	ldr	r3, [r7, #0]
 8012bfc:	69db      	ldr	r3, [r3, #28]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d030      	beq.n	8012c64 <XSPI_ConfigCmd+0x364>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8012c02:	683b      	ldr	r3, [r7, #0]
 8012c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d017      	beq.n	8012c3a <XSPI_ConfigCmd+0x33a>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
 8012c0a:	69bb      	ldr	r3, [r7, #24]
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8012c12:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012c16:	683a      	ldr	r2, [r7, #0]
 8012c18:	69d1      	ldr	r1, [r2, #28]
 8012c1a:	683a      	ldr	r2, [r7, #0]
 8012c1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012c1e:	4311      	orrs	r1, r2
 8012c20:	683a      	ldr	r2, [r7, #0]
 8012c22:	6a12      	ldr	r2, [r2, #32]
 8012c24:	4311      	orrs	r1, r2
 8012c26:	683a      	ldr	r2, [r7, #0]
 8012c28:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8012c2a:	4311      	orrs	r1, r2
 8012c2c:	683a      	ldr	r2, [r7, #0]
 8012c2e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8012c30:	430a      	orrs	r2, r1
 8012c32:	431a      	orrs	r2, r3
 8012c34:	69bb      	ldr	r3, [r7, #24]
 8012c36:	601a      	str	r2, [r3, #0]
 8012c38:	e00e      	b.n	8012c58 <XSPI_ConfigCmd+0x358>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
 8012c3a:	69bb      	ldr	r3, [r7, #24]
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8012c42:	683b      	ldr	r3, [r7, #0]
 8012c44:	69d9      	ldr	r1, [r3, #28]
 8012c46:	683b      	ldr	r3, [r7, #0]
 8012c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c4a:	4319      	orrs	r1, r3
 8012c4c:	683b      	ldr	r3, [r7, #0]
 8012c4e:	6a1b      	ldr	r3, [r3, #32]
 8012c50:	430b      	orrs	r3, r1
 8012c52:	431a      	orrs	r2, r3
 8012c54:	69bb      	ldr	r3, [r7, #24]
 8012c56:	601a      	str	r2, [r3, #0]
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	683a      	ldr	r2, [r7, #0]
 8012c5e:	6992      	ldr	r2, [r2, #24]
 8012c60:	649a      	str	r2, [r3, #72]	; 0x48
 8012c62:	e004      	b.n	8012c6e <XSPI_ConfigCmd+0x36e>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8012c64:	2301      	movs	r3, #1
 8012c66:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	2208      	movs	r2, #8
 8012c6c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  return status;
 8012c6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8012c70:	4618      	mov	r0, r3
 8012c72:	3724      	adds	r7, #36	; 0x24
 8012c74:	46bd      	mov	sp, r7
 8012c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7a:	4770      	bx	lr

08012c7c <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8012c7c:	b480      	push	{r7}
 8012c7e:	b083      	sub	sp, #12
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	6078      	str	r0, [r7, #4]
 8012c84:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	f043 0202 	orr.w	r2, r3, #2
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 8012c92:	683b      	ldr	r3, [r7, #0]
 8012c94:	685a      	ldr	r2, [r3, #4]
 8012c96:	683b      	ldr	r3, [r7, #0]
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	021b      	lsls	r3, r3, #8
 8012c9c:	431a      	orrs	r2, r3
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	f023 0202 	bic.w	r2, r3, #2
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	601a      	str	r2, [r3, #0]
}
 8012cae:	bf00      	nop
 8012cb0:	370c      	adds	r7, #12
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb8:	4770      	bx	lr

08012cba <LL_DLYB_GetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is received.
  *          - ERROR: the Delay value is not received.
  */
void LL_DLYB_GetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef *pdlyb_cfg)
{
 8012cba:	b480      	push	{r7}
 8012cbc:	b083      	sub	sp, #12
 8012cbe:	af00      	add	r7, sp, #0
 8012cc0:	6078      	str	r0, [r7, #4]
 8012cc2:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Fill the DelayBlock configuration structure with SEL and UNIT value */
  pdlyb_cfg->Units = ((DLYBx->CFGR & DLYB_CFGR_UNIT) >> DLYB_CFGR_UNIT_Pos);
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	685b      	ldr	r3, [r3, #4]
 8012cc8:	0a1b      	lsrs	r3, r3, #8
 8012cca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012cce:	683b      	ldr	r3, [r7, #0]
 8012cd0:	601a      	str	r2, [r3, #0]
  pdlyb_cfg->PhaseSel = (DLYBx->CFGR & DLYB_CFGR_SEL);
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	685b      	ldr	r3, [r3, #4]
 8012cd6:	f003 020f 	and.w	r2, r3, #15
 8012cda:	683b      	ldr	r3, [r7, #0]
 8012cdc:	605a      	str	r2, [r3, #4]
}
 8012cde:	bf00      	nop
 8012ce0:	370c      	adds	r7, #12
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce8:	4770      	bx	lr
	...

08012cec <LL_DLYB_GetClockPeriod>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: there is a valid period detected and stored in pdlyb_cfg.
  *          - ERROR: there is no valid period detected.
  */
uint32_t LL_DLYB_GetClockPeriod(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef *pdlyb_cfg)
{
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b086      	sub	sp, #24
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
 8012cf4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	617b      	str	r3, [r7, #20]

  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	f043 0202 	orr.w	r2, r3, #2
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	601a      	str	r2, [r3, #0]

  /* Delay line length detection */
  while (i < DLYB_MAX_UNIT)
 8012d06:	e02a      	b.n	8012d5e <LL_DLYB_GetClockPeriod+0x72>
  {
    /* Set the Delay of the UNIT(s)*/
    DLYBx->CFGR = DLYB_MAX_SELECT | (i << DLYB_CFGR_UNIT_Pos);
 8012d08:	697b      	ldr	r3, [r7, #20]
 8012d0a:	021b      	lsls	r3, r3, #8
 8012d0c:	f043 020c 	orr.w	r2, r3, #12
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	605a      	str	r2, [r3, #4]

    /* Waiting for a LNG valid value */
    tickstart =  HAL_GetTick();
 8012d14:	f7f4 fb14 	bl	8007340 <HAL_GetTick>
 8012d18:	60f8      	str	r0, [r7, #12]
    while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8012d1a:	e00c      	b.n	8012d36 <LL_DLYB_GetClockPeriod+0x4a>
    {
      if ((HAL_GetTick() - tickstart) >=  DLYB_TIMEOUT)
 8012d1c:	f7f4 fb10 	bl	8007340 <HAL_GetTick>
 8012d20:	4602      	mov	r2, r0
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	1ad3      	subs	r3, r2, r3
 8012d26:	2bfe      	cmp	r3, #254	; 0xfe
 8012d28:	d905      	bls.n	8012d36 <LL_DLYB_GetClockPeriod+0x4a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	685b      	ldr	r3, [r3, #4]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	db01      	blt.n	8012d36 <LL_DLYB_GetClockPeriod+0x4a>
        {
          return (uint32_t) HAL_TIMEOUT;
 8012d32:	2303      	movs	r3, #3
 8012d34:	e042      	b.n	8012dbc <LL_DLYB_GetClockPeriod+0xd0>
    while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	685b      	ldr	r3, [r3, #4]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	daee      	bge.n	8012d1c <LL_DLYB_GetClockPeriod+0x30>
        }
      }
    }

    if ((DLYBx->CFGR & DLYB_LNG_10_0_MASK) != 0U)
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	685a      	ldr	r2, [r3, #4]
 8012d42:	4b20      	ldr	r3, [pc, #128]	; (8012dc4 <LL_DLYB_GetClockPeriod+0xd8>)
 8012d44:	4013      	ands	r3, r2
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d006      	beq.n	8012d58 <LL_DLYB_GetClockPeriod+0x6c>
    {
      if ((DLYBx->CFGR & (DLYB_CFGR_LNG_11 | DLYB_CFGR_LNG_10)) != DLYB_LNG_11_10_MASK)
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	685b      	ldr	r3, [r3, #4]
 8012d4e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8012d52:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8012d56:	d106      	bne.n	8012d66 <LL_DLYB_GetClockPeriod+0x7a>
      {
        /* Delay line length is configured to one input clock period*/
        break;
      }
    }
    i++;
 8012d58:	697b      	ldr	r3, [r7, #20]
 8012d5a:	3301      	adds	r3, #1
 8012d5c:	617b      	str	r3, [r7, #20]
  while (i < DLYB_MAX_UNIT)
 8012d5e:	697b      	ldr	r3, [r7, #20]
 8012d60:	2b7f      	cmp	r3, #127	; 0x7f
 8012d62:	d9d1      	bls.n	8012d08 <LL_DLYB_GetClockPeriod+0x1c>
 8012d64:	e000      	b.n	8012d68 <LL_DLYB_GetClockPeriod+0x7c>
        break;
 8012d66:	bf00      	nop
  }

  if (DLYB_MAX_UNIT != i)
 8012d68:	697b      	ldr	r3, [r7, #20]
 8012d6a:	2b80      	cmp	r3, #128	; 0x80
 8012d6c:	d022      	beq.n	8012db4 <LL_DLYB_GetClockPeriod+0xc8>
  {
    /* Determine how many unit delays (nb) span one input clock period */
    lng = (DLYBx->CFGR & DLYB_CFGR_LNG) >> 16U;
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	685b      	ldr	r3, [r3, #4]
 8012d72:	0c1b      	lsrs	r3, r3, #16
 8012d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012d78:	60bb      	str	r3, [r7, #8]
    nb = 10U;
 8012d7a:	230a      	movs	r3, #10
 8012d7c:	613b      	str	r3, [r7, #16]
    while ((nb > 0U) && ((lng >> nb) == 0U))
 8012d7e:	e002      	b.n	8012d86 <LL_DLYB_GetClockPeriod+0x9a>
    {
      nb--;
 8012d80:	693b      	ldr	r3, [r7, #16]
 8012d82:	3b01      	subs	r3, #1
 8012d84:	613b      	str	r3, [r7, #16]
    while ((nb > 0U) && ((lng >> nb) == 0U))
 8012d86:	693b      	ldr	r3, [r7, #16]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d005      	beq.n	8012d98 <LL_DLYB_GetClockPeriod+0xac>
 8012d8c:	68ba      	ldr	r2, [r7, #8]
 8012d8e:	693b      	ldr	r3, [r7, #16]
 8012d90:	fa22 f303 	lsr.w	r3, r2, r3
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d0f3      	beq.n	8012d80 <LL_DLYB_GetClockPeriod+0x94>
    }
    if (nb != 0U)
 8012d98:	693b      	ldr	r3, [r7, #16]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d00a      	beq.n	8012db4 <LL_DLYB_GetClockPeriod+0xc8>
    {
      pdlyb_cfg->PhaseSel = nb ;
 8012d9e:	683b      	ldr	r3, [r7, #0]
 8012da0:	693a      	ldr	r2, [r7, #16]
 8012da2:	605a      	str	r2, [r3, #4]
      pdlyb_cfg->Units = i ;
 8012da4:	683b      	ldr	r3, [r7, #0]
 8012da6:	697a      	ldr	r2, [r7, #20]
 8012da8:	601a      	str	r2, [r3, #0]

      /* Disable the length sampling */
      DLYBx->CR = DLYB_CR_SEN;
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	2202      	movs	r2, #2
 8012dae:	601a      	str	r2, [r3, #0]

      return (uint32_t)SUCCESS;
 8012db0:	2300      	movs	r3, #0
 8012db2:	e003      	b.n	8012dbc <LL_DLYB_GetClockPeriod+0xd0>
    }
  }

  /* Disable the length sampling */
  DLYBx->CR = DLYB_CR_SEN;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	2202      	movs	r2, #2
 8012db8:	601a      	str	r2, [r3, #0]

  return (uint32_t)ERROR;
 8012dba:	2301      	movs	r3, #1

}
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	3718      	adds	r7, #24
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	bd80      	pop	{r7, pc}
 8012dc4:	07ff0000 	.word	0x07ff0000

08012dc8 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b096      	sub	sp, #88	; 0x58
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	60f8      	str	r0, [r7, #12]
 8012dd0:	60b9      	str	r1, [r7, #8]
 8012dd2:	607a      	str	r2, [r7, #4]
 8012dd4:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	3303      	adds	r3, #3
 8012dda:	f023 0303 	bic.w	r3, r3, #3
 8012dde:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012de0:	f3ef 8310 	mrs	r3, PRIMASK
 8012de4:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8012de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8012de8:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8012dea:	b672      	cpsid	i
#endif
    return(int_posture);
 8012dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 8012dee:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8012df0:	4b55      	ldr	r3, [pc, #340]	; (8012f48 <_tx_byte_allocate+0x180>)
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8012df6:	2300      	movs	r3, #0
 8012df8:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012dfe:	621a      	str	r2, [r3, #32]
 8012e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e02:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e06:	f383 8810 	msr	PRIMASK, r3
}
 8012e0a:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8012e0c:	6879      	ldr	r1, [r7, #4]
 8012e0e:	68f8      	ldr	r0, [r7, #12]
 8012e10:	f000 f9b2 	bl	8013178 <_tx_byte_pool_search>
 8012e14:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012e16:	f3ef 8310 	mrs	r3, PRIMASK
 8012e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8012e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8012e1e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8012e20:	b672      	cpsid	i
    return(int_posture);
 8012e22:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8012e24:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 8012e26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d002      	beq.n	8012e32 <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8012e2c:	2301      	movs	r3, #1
 8012e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012e30:	e006      	b.n	8012e40 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	6a1b      	ldr	r3, [r3, #32]
 8012e36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012e38:	429a      	cmp	r2, r3
 8012e3a:	d101      	bne.n	8012e40 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8012e3c:	2301      	movs	r3, #1
 8012e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8012e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d0d9      	beq.n	8012dfa <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 8012e46:	68bb      	ldr	r3, [r7, #8]
 8012e48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012e4a:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 8012e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d008      	beq.n	8012e64 <_tx_byte_allocate+0x9c>
 8012e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e54:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012e56:	6a3b      	ldr	r3, [r7, #32]
 8012e58:	f383 8810 	msr	PRIMASK, r3
}
 8012e5c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 8012e5e:	2300      	movs	r3, #0
 8012e60:	653b      	str	r3, [r7, #80]	; 0x50
 8012e62:	e06c      	b.n	8012f3e <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8012e64:	683b      	ldr	r3, [r7, #0]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d061      	beq.n	8012f2e <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8012e6a:	4b38      	ldr	r3, [pc, #224]	; (8012f4c <_tx_byte_allocate+0x184>)
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d007      	beq.n	8012e82 <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8012e72:	2310      	movs	r3, #16
 8012e74:	653b      	str	r3, [r7, #80]	; 0x50
 8012e76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e78:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012e7a:	69fb      	ldr	r3, [r7, #28]
 8012e7c:	f383 8810 	msr	PRIMASK, r3
}
 8012e80:	e05d      	b.n	8012f3e <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8012e82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e84:	4a32      	ldr	r2, [pc, #200]	; (8012f50 <_tx_byte_allocate+0x188>)
 8012e86:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8012e88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e8a:	68fa      	ldr	r2, [r7, #12]
 8012e8c:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8012e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e90:	68ba      	ldr	r2, [r7, #8]
 8012e92:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8012e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e96:	687a      	ldr	r2, [r7, #4]
 8012e98:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8012e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e9c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012ea0:	1c5a      	adds	r2, r3, #1
 8012ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ea4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012eac:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012eb2:	1c5a      	adds	r2, r3, #1
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8012eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d109      	bne.n	8012ed2 <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012ec2:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8012ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ec6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012ec8:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8012eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ecc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012ece:	675a      	str	r2, [r3, #116]	; 0x74
 8012ed0:	e011      	b.n	8012ef6 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8012ed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012eda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012edc:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8012ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012ee2:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8012ee4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ee6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012ee8:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8012eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012eee:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8012ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ef2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012ef4:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8012ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ef8:	2209      	movs	r2, #9
 8012efa:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8012efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012efe:	2201      	movs	r2, #1
 8012f00:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8012f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f04:	683a      	ldr	r2, [r7, #0]
 8012f06:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8012f08:	4b10      	ldr	r3, [pc, #64]	; (8012f4c <_tx_byte_allocate+0x184>)
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	3301      	adds	r3, #1
 8012f0e:	4a0f      	ldr	r2, [pc, #60]	; (8012f4c <_tx_byte_allocate+0x184>)
 8012f10:	6013      	str	r3, [r2, #0]
 8012f12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012f14:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012f16:	69bb      	ldr	r3, [r7, #24]
 8012f18:	f383 8810 	msr	PRIMASK, r3
}
 8012f1c:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8012f1e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8012f20:	f001 fb02 	bl	8014528 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8012f24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012f2a:	653b      	str	r3, [r7, #80]	; 0x50
 8012f2c:	e007      	b.n	8012f3e <_tx_byte_allocate+0x176>
 8012f2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012f30:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012f32:	697b      	ldr	r3, [r7, #20]
 8012f34:	f383 8810 	msr	PRIMASK, r3
}
 8012f38:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8012f3a:	2310      	movs	r3, #16
 8012f3c:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 8012f3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8012f40:	4618      	mov	r0, r3
 8012f42:	3758      	adds	r7, #88	; 0x58
 8012f44:	46bd      	mov	sp, r7
 8012f46:	bd80      	pop	{r7, pc}
 8012f48:	20197344 	.word	0x20197344
 8012f4c:	201973dc 	.word	0x201973dc
 8012f50:	08012f55 	.word	0x08012f55

08012f54 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8012f54:	b580      	push	{r7, lr}
 8012f56:	b08e      	sub	sp, #56	; 0x38
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	6078      	str	r0, [r7, #4]
 8012f5c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012f5e:	f3ef 8310 	mrs	r3, PRIMASK
 8012f62:	623b      	str	r3, [r7, #32]
    return(posture);
 8012f64:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8012f66:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012f68:	b672      	cpsid	i
    return(int_posture);
 8012f6a:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8012f6c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012f72:	4a33      	ldr	r2, [pc, #204]	; (8013040 <_tx_byte_pool_cleanup+0xec>)
 8012f74:	4293      	cmp	r3, r2
 8012f76:	d158      	bne.n	801302a <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012f7e:	683a      	ldr	r2, [r7, #0]
 8012f80:	429a      	cmp	r2, r3
 8012f82:	d152      	bne.n	801302a <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f88:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8012f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d04c      	beq.n	801302a <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8012f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	4a2b      	ldr	r2, [pc, #172]	; (8013044 <_tx_byte_pool_cleanup+0xf0>)
 8012f96:	4293      	cmp	r3, r2
 8012f98:	d147      	bne.n	801302a <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8012f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d043      	beq.n	801302a <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8012fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fac:	1e5a      	subs	r2, r3, #1
 8012fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fb0:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8012fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fb6:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8012fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d103      	bne.n	8012fc6 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8012fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fc0:	2200      	movs	r2, #0
 8012fc2:	625a      	str	r2, [r3, #36]	; 0x24
 8012fc4:	e013      	b.n	8012fee <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012fca:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012fd0:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8012fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012fd6:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8012fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012fdc:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 8012fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fe2:	687a      	ldr	r2, [r7, #4]
 8012fe4:	429a      	cmp	r2, r3
 8012fe6:	d102      	bne.n	8012fee <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8012fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012fec:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ff2:	2b09      	cmp	r3, #9
 8012ff4:	d119      	bne.n	801302a <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	2210      	movs	r2, #16
 8012ffa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8012ffe:	4b12      	ldr	r3, [pc, #72]	; (8013048 <_tx_byte_pool_cleanup+0xf4>)
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	3301      	adds	r3, #1
 8013004:	4a10      	ldr	r2, [pc, #64]	; (8013048 <_tx_byte_pool_cleanup+0xf4>)
 8013006:	6013      	str	r3, [r2, #0]
 8013008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801300a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801300c:	693b      	ldr	r3, [r7, #16]
 801300e:	f383 8810 	msr	PRIMASK, r3
}
 8013012:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8013014:	6878      	ldr	r0, [r7, #4]
 8013016:	f001 f987 	bl	8014328 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801301a:	f3ef 8310 	mrs	r3, PRIMASK
 801301e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013020:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013022:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013024:	b672      	cpsid	i
    return(int_posture);
 8013026:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8013028:	637b      	str	r3, [r7, #52]	; 0x34
 801302a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801302c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	f383 8810 	msr	PRIMASK, r3
}
 8013034:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8013036:	bf00      	nop
 8013038:	3738      	adds	r7, #56	; 0x38
 801303a:	46bd      	mov	sp, r7
 801303c:	bd80      	pop	{r7, pc}
 801303e:	bf00      	nop
 8013040:	08012f55 	.word	0x08012f55
 8013044:	42595445 	.word	0x42595445
 8013048:	201973dc 	.word	0x201973dc

0801304c <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b08e      	sub	sp, #56	; 0x38
 8013050:	af00      	add	r7, sp, #0
 8013052:	60f8      	str	r0, [r7, #12]
 8013054:	60b9      	str	r1, [r7, #8]
 8013056:	607a      	str	r2, [r7, #4]
 8013058:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 801305a:	2234      	movs	r2, #52	; 0x34
 801305c:	2100      	movs	r1, #0
 801305e:	68f8      	ldr	r0, [r7, #12]
 8013060:	f015 f884 	bl	802816c <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8013064:	683b      	ldr	r3, [r7, #0]
 8013066:	f023 0303 	bic.w	r3, r3, #3
 801306a:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	68ba      	ldr	r2, [r7, #8]
 8013070:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	687a      	ldr	r2, [r7, #4]
 8013076:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	683a      	ldr	r2, [r7, #0]
 801307c:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	687a      	ldr	r2, [r7, #4]
 8013082:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	687a      	ldr	r2, [r7, #4]
 8013088:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 801308a:	683b      	ldr	r3, [r7, #0]
 801308c:	f1a3 0208 	sub.w	r2, r3, #8
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	2202      	movs	r2, #2
 8013098:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 801309e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80130a0:	683b      	ldr	r3, [r7, #0]
 80130a2:	4413      	add	r3, r2
 80130a4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 80130a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130a8:	3b04      	subs	r3, #4
 80130aa:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80130b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 80130b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80130b8:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 80130ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130bc:	3b04      	subs	r3, #4
 80130be:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80130c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80130c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130c6:	687a      	ldr	r2, [r7, #4]
 80130c8:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 80130ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 80130d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80130d6:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 80130dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130de:	3304      	adds	r3, #4
 80130e0:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 80130e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130e4:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 80130e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130e8:	4a1f      	ldr	r2, [pc, #124]	; (8013168 <_tx_byte_pool_create+0x11c>)
 80130ea:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	2200      	movs	r2, #0
 80130f0:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80130f2:	f3ef 8310 	mrs	r3, PRIMASK
 80130f6:	61bb      	str	r3, [r7, #24]
    return(posture);
 80130f8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80130fa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80130fc:	b672      	cpsid	i
    return(int_posture);
 80130fe:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8013100:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	4a19      	ldr	r2, [pc, #100]	; (801316c <_tx_byte_pool_create+0x120>)
 8013106:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8013108:	4b19      	ldr	r3, [pc, #100]	; (8013170 <_tx_byte_pool_create+0x124>)
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	2b00      	cmp	r3, #0
 801310e:	d109      	bne.n	8013124 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8013110:	4a18      	ldr	r2, [pc, #96]	; (8013174 <_tx_byte_pool_create+0x128>)
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	68fa      	ldr	r2, [r7, #12]
 801311a:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	68fa      	ldr	r2, [r7, #12]
 8013120:	631a      	str	r2, [r3, #48]	; 0x30
 8013122:	e011      	b.n	8013148 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8013124:	4b13      	ldr	r3, [pc, #76]	; (8013174 <_tx_byte_pool_create+0x128>)
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 801312a:	6a3b      	ldr	r3, [r7, #32]
 801312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801312e:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8013130:	6a3b      	ldr	r3, [r7, #32]
 8013132:	68fa      	ldr	r2, [r7, #12]
 8013134:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8013136:	69fb      	ldr	r3, [r7, #28]
 8013138:	68fa      	ldr	r2, [r7, #12]
 801313a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	69fa      	ldr	r2, [r7, #28]
 8013140:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	6a3a      	ldr	r2, [r7, #32]
 8013146:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8013148:	4b09      	ldr	r3, [pc, #36]	; (8013170 <_tx_byte_pool_create+0x124>)
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	3301      	adds	r3, #1
 801314e:	4a08      	ldr	r2, [pc, #32]	; (8013170 <_tx_byte_pool_create+0x124>)
 8013150:	6013      	str	r3, [r2, #0]
 8013152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013154:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013156:	693b      	ldr	r3, [r7, #16]
 8013158:	f383 8810 	msr	PRIMASK, r3
}
 801315c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801315e:	2300      	movs	r3, #0
}
 8013160:	4618      	mov	r0, r3
 8013162:	3738      	adds	r7, #56	; 0x38
 8013164:	46bd      	mov	sp, r7
 8013166:	bd80      	pop	{r7, pc}
 8013168:	ffffeeee 	.word	0xffffeeee
 801316c:	42595445 	.word	0x42595445
 8013170:	20197338 	.word	0x20197338
 8013174:	20197334 	.word	0x20197334

08013178 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8013178:	b480      	push	{r7}
 801317a:	b097      	sub	sp, #92	; 0x5c
 801317c:	af00      	add	r7, sp, #0
 801317e:	6078      	str	r0, [r7, #4]
 8013180:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 8013182:	2300      	movs	r3, #0
 8013184:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013186:	f3ef 8310 	mrs	r3, PRIMASK
 801318a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 801318e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013190:	b672      	cpsid	i
    return(int_posture);
 8013192:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8013194:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	689a      	ldr	r2, [r3, #8]
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	68db      	ldr	r3, [r3, #12]
 801319e:	3b02      	subs	r3, #2
 80131a0:	00db      	lsls	r3, r3, #3
 80131a2:	4413      	add	r3, r2
 80131a4:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 80131a6:	683a      	ldr	r2, [r7, #0]
 80131a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131aa:	429a      	cmp	r2, r3
 80131ac:	d308      	bcc.n	80131c0 <_tx_byte_pool_search+0x48>
 80131ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80131b0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80131b2:	69fb      	ldr	r3, [r7, #28]
 80131b4:	f383 8810 	msr	PRIMASK, r3
}
 80131b8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 80131ba:	2300      	movs	r3, #0
 80131bc:	653b      	str	r3, [r7, #80]	; 0x50
 80131be:	e0dd      	b.n	801337c <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80131c0:	4b72      	ldr	r3, [pc, #456]	; (801338c <_tx_byte_pool_search+0x214>)
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80131ca:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	695b      	ldr	r3, [r3, #20]
 80131d0:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	68db      	ldr	r3, [r3, #12]
 80131d6:	3301      	adds	r3, #1
 80131d8:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 80131da:	2300      	movs	r3, #0
 80131dc:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 80131de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131e0:	3304      	adds	r3, #4
 80131e2:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80131e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131e6:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 80131e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	4a68      	ldr	r2, [pc, #416]	; (8013390 <_tx_byte_pool_search+0x218>)
 80131ee:	4293      	cmp	r3, r2
 80131f0:	d143      	bne.n	801327a <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 80131f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d104      	bne.n	8013202 <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80131fc:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 80131fe:	2301      	movs	r3, #1
 8013200:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8013202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013204:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 8013206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 801320c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801320e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013210:	1ad3      	subs	r3, r2, r3
 8013212:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8013214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013216:	3b08      	subs	r3, #8
 8013218:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 801321a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801321c:	683b      	ldr	r3, [r7, #0]
 801321e:	429a      	cmp	r2, r3
 8013220:	d257      	bcs.n	80132d2 <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 8013222:	2300      	movs	r3, #0
 8013224:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8013226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013228:	3304      	adds	r3, #4
 801322a:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 801322c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801322e:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8013230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	4a56      	ldr	r2, [pc, #344]	; (8013390 <_tx_byte_pool_search+0x218>)
 8013236:	4293      	cmp	r3, r2
 8013238:	d113      	bne.n	8013262 <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 801323a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801323c:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 801323e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013240:	681a      	ldr	r2, [r3, #0]
 8013242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013244:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	68db      	ldr	r3, [r3, #12]
 801324a:	1e5a      	subs	r2, r3, #1
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	695b      	ldr	r3, [r3, #20]
 8013254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013256:	429a      	cmp	r2, r3
 8013258:	d114      	bne.n	8013284 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801325e:	615a      	str	r2, [r3, #20]
 8013260:	e010      	b.n	8013284 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8013262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013264:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 8013266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 801326c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801326e:	2b00      	cmp	r3, #0
 8013270:	d008      	beq.n	8013284 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 8013272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013274:	3b01      	subs	r3, #1
 8013276:	64bb      	str	r3, [r7, #72]	; 0x48
 8013278:	e004      	b.n	8013284 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801327a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801327c:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 801327e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8013284:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013286:	2b00      	cmp	r3, #0
 8013288:	d002      	beq.n	8013290 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 801328a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801328c:	3b01      	subs	r3, #1
 801328e:	64bb      	str	r3, [r7, #72]	; 0x48
 8013290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013292:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013294:	693b      	ldr	r3, [r7, #16]
 8013296:	f383 8810 	msr	PRIMASK, r3
}
 801329a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801329c:	f3ef 8310 	mrs	r3, PRIMASK
 80132a0:	61bb      	str	r3, [r7, #24]
    return(posture);
 80132a2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80132a4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80132a6:	b672      	cpsid	i
    return(int_posture);
 80132a8:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 80132aa:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	6a1b      	ldr	r3, [r3, #32]
 80132b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80132b2:	429a      	cmp	r2, r3
 80132b4:	d009      	beq.n	80132ca <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	695b      	ldr	r3, [r3, #20]
 80132ba:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	68db      	ldr	r3, [r3, #12]
 80132c0:	3301      	adds	r3, #1
 80132c2:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80132c8:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 80132ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d186      	bne.n	80131de <_tx_byte_pool_search+0x66>
 80132d0:	e000      	b.n	80132d4 <_tx_byte_pool_search+0x15c>
                    break;
 80132d2:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 80132d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d048      	beq.n	801336c <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 80132da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80132dc:	683b      	ldr	r3, [r7, #0]
 80132de:	1ad3      	subs	r3, r2, r3
 80132e0:	2b13      	cmp	r3, #19
 80132e2:	d91e      	bls.n	8013322 <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 80132e4:	683b      	ldr	r3, [r7, #0]
 80132e6:	3308      	adds	r3, #8
 80132e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80132ea:	4413      	add	r3, r2
 80132ec:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80132ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132f0:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80132f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132f4:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 80132f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132f8:	681a      	ldr	r2, [r3, #0]
 80132fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132fc:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 80132fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013300:	3304      	adds	r3, #4
 8013302:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8013304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013306:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8013308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801330a:	4a21      	ldr	r2, [pc, #132]	; (8013390 <_tx_byte_pool_search+0x218>)
 801330c:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	68db      	ldr	r3, [r3, #12]
 8013312:	1c5a      	adds	r2, r3, #1
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8013318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801331a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801331c:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 801331e:	683b      	ldr	r3, [r7, #0]
 8013320:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8013322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013324:	3304      	adds	r3, #4
 8013326:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8013328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801332a:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 801332c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801332e:	687a      	ldr	r2, [r7, #4]
 8013330:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	689a      	ldr	r2, [r3, #8]
 8013336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013338:	1ad3      	subs	r3, r2, r3
 801333a:	f1a3 0208 	sub.w	r2, r3, #8
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	695b      	ldr	r3, [r3, #20]
 8013346:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013348:	429a      	cmp	r2, r3
 801334a:	d105      	bne.n	8013358 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801334c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801334e:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8013350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013352:	681a      	ldr	r2, [r3, #0]
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	615a      	str	r2, [r3, #20]
 8013358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801335a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	f383 8810 	msr	PRIMASK, r3
}
 8013362:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8013364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013366:	3308      	adds	r3, #8
 8013368:	653b      	str	r3, [r7, #80]	; 0x50
 801336a:	e007      	b.n	801337c <_tx_byte_pool_search+0x204>
 801336c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801336e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013370:	68bb      	ldr	r3, [r7, #8]
 8013372:	f383 8810 	msr	PRIMASK, r3
}
 8013376:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8013378:	2300      	movs	r3, #0
 801337a:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 801337c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 801337e:	4618      	mov	r0, r3
 8013380:	375c      	adds	r7, #92	; 0x5c
 8013382:	46bd      	mov	sp, r7
 8013384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013388:	4770      	bx	lr
 801338a:	bf00      	nop
 801338c:	20197344 	.word	0x20197344
 8013390:	ffffeeee 	.word	0xffffeeee

08013394 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8013394:	b580      	push	{r7, lr}
 8013396:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8013398:	f000 ff04 	bl	80141a4 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 801339c:	f001 fa8c 	bl	80148b8 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 80133a0:	4b12      	ldr	r3, [pc, #72]	; (80133ec <_tx_initialize_high_level+0x58>)
 80133a2:	2200      	movs	r2, #0
 80133a4:	601a      	str	r2, [r3, #0]
 80133a6:	4b12      	ldr	r3, [pc, #72]	; (80133f0 <_tx_initialize_high_level+0x5c>)
 80133a8:	2200      	movs	r2, #0
 80133aa:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 80133ac:	4b11      	ldr	r3, [pc, #68]	; (80133f4 <_tx_initialize_high_level+0x60>)
 80133ae:	2200      	movs	r2, #0
 80133b0:	601a      	str	r2, [r3, #0]
 80133b2:	4b11      	ldr	r3, [pc, #68]	; (80133f8 <_tx_initialize_high_level+0x64>)
 80133b4:	2200      	movs	r2, #0
 80133b6:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 80133b8:	4b10      	ldr	r3, [pc, #64]	; (80133fc <_tx_initialize_high_level+0x68>)
 80133ba:	2200      	movs	r2, #0
 80133bc:	601a      	str	r2, [r3, #0]
 80133be:	4b10      	ldr	r3, [pc, #64]	; (8013400 <_tx_initialize_high_level+0x6c>)
 80133c0:	2200      	movs	r2, #0
 80133c2:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 80133c4:	4b0f      	ldr	r3, [pc, #60]	; (8013404 <_tx_initialize_high_level+0x70>)
 80133c6:	2200      	movs	r2, #0
 80133c8:	601a      	str	r2, [r3, #0]
 80133ca:	4b0f      	ldr	r3, [pc, #60]	; (8013408 <_tx_initialize_high_level+0x74>)
 80133cc:	2200      	movs	r2, #0
 80133ce:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 80133d0:	4b0e      	ldr	r3, [pc, #56]	; (801340c <_tx_initialize_high_level+0x78>)
 80133d2:	2200      	movs	r2, #0
 80133d4:	601a      	str	r2, [r3, #0]
 80133d6:	4b0e      	ldr	r3, [pc, #56]	; (8013410 <_tx_initialize_high_level+0x7c>)
 80133d8:	2200      	movs	r2, #0
 80133da:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 80133dc:	4b0d      	ldr	r3, [pc, #52]	; (8013414 <_tx_initialize_high_level+0x80>)
 80133de:	2200      	movs	r2, #0
 80133e0:	601a      	str	r2, [r3, #0]
 80133e2:	4b0d      	ldr	r3, [pc, #52]	; (8013418 <_tx_initialize_high_level+0x84>)
 80133e4:	2200      	movs	r2, #0
 80133e6:	601a      	str	r2, [r3, #0]
#endif
}
 80133e8:	bf00      	nop
 80133ea:	bd80      	pop	{r7, pc}
 80133ec:	2019730c 	.word	0x2019730c
 80133f0:	20197310 	.word	0x20197310
 80133f4:	20197314 	.word	0x20197314
 80133f8:	20197318 	.word	0x20197318
 80133fc:	2019731c 	.word	0x2019731c
 8013400:	20197320 	.word	0x20197320
 8013404:	2019732c 	.word	0x2019732c
 8013408:	20197330 	.word	0x20197330
 801340c:	20197334 	.word	0x20197334
 8013410:	20197338 	.word	0x20197338
 8013414:	20197324 	.word	0x20197324
 8013418:	20197328 	.word	0x20197328

0801341c <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 801341c:	b580      	push	{r7, lr}
 801341e:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8013420:	4b10      	ldr	r3, [pc, #64]	; (8013464 <_tx_initialize_kernel_enter+0x48>)
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8013428:	d00c      	beq.n	8013444 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 801342a:	4b0e      	ldr	r3, [pc, #56]	; (8013464 <_tx_initialize_kernel_enter+0x48>)
 801342c:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8013430:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8013432:	f7ec ff3b 	bl	80002ac <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8013436:	f7ff ffad 	bl	8013394 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 801343a:	4b0b      	ldr	r3, [pc, #44]	; (8013468 <_tx_initialize_kernel_enter+0x4c>)
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	3301      	adds	r3, #1
 8013440:	4a09      	ldr	r2, [pc, #36]	; (8013468 <_tx_initialize_kernel_enter+0x4c>)
 8013442:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8013444:	4b07      	ldr	r3, [pc, #28]	; (8013464 <_tx_initialize_kernel_enter+0x48>)
 8013446:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 801344a:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 801344c:	4b07      	ldr	r3, [pc, #28]	; (801346c <_tx_initialize_kernel_enter+0x50>)
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	4618      	mov	r0, r3
 8013452:	f7ed f851 	bl	80004f8 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8013456:	4b03      	ldr	r3, [pc, #12]	; (8013464 <_tx_initialize_kernel_enter+0x48>)
 8013458:	2200      	movs	r2, #0
 801345a:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 801345c:	f7ec ff62 	bl	8000324 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8013460:	bf00      	nop
 8013462:	bd80      	pop	{r7, pc}
 8013464:	20000054 	.word	0x20000054
 8013468:	201973dc 	.word	0x201973dc
 801346c:	2019733c 	.word	0x2019733c

08013470 <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8013470:	b580      	push	{r7, lr}
 8013472:	b08e      	sub	sp, #56	; 0x38
 8013474:	af00      	add	r7, sp, #0
 8013476:	6078      	str	r0, [r7, #4]
 8013478:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801347a:	f3ef 8310 	mrs	r3, PRIMASK
 801347e:	623b      	str	r3, [r7, #32]
    return(posture);
 8013480:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8013482:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013484:	b672      	cpsid	i
    return(int_posture);
 8013486:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 8013488:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801348e:	4a37      	ldr	r2, [pc, #220]	; (801356c <_tx_queue_cleanup+0xfc>)
 8013490:	4293      	cmp	r3, r2
 8013492:	d161      	bne.n	8013558 <_tx_queue_cleanup+0xe8>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801349a:	683a      	ldr	r2, [r7, #0]
 801349c:	429a      	cmp	r2, r3
 801349e:	d15b      	bne.n	8013558 <_tx_queue_cleanup+0xe8>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134a4:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 80134a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d055      	beq.n	8013558 <_tx_queue_cleanup+0xe8>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 80134ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	4a2f      	ldr	r2, [pc, #188]	; (8013570 <_tx_queue_cleanup+0x100>)
 80134b2:	4293      	cmp	r3, r2
 80134b4:	d150      	bne.n	8013558 <_tx_queue_cleanup+0xe8>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 80134b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d04c      	beq.n	8013558 <_tx_queue_cleanup+0xe8>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	2200      	movs	r2, #0
 80134c2:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 80134c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134c8:	1e5a      	subs	r2, r3, #1
 80134ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134cc:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 80134ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134d2:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80134d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d103      	bne.n	80134e2 <_tx_queue_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 80134da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134dc:	2200      	movs	r2, #0
 80134de:	629a      	str	r2, [r3, #40]	; 0x28
 80134e0:	e013      	b.n	801350a <_tx_queue_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134e6:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80134ec:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80134ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80134f2:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 80134f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80134f8:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 80134fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80134fe:	687a      	ldr	r2, [r7, #4]
 8013500:	429a      	cmp	r2, r3
 8013502:	d102      	bne.n	801350a <_tx_queue_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 8013504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013506:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013508:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801350e:	2b05      	cmp	r3, #5
 8013510:	d122      	bne.n	8013558 <_tx_queue_cleanup+0xe8>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8013512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013514:	691b      	ldr	r3, [r3, #16]
 8013516:	2b00      	cmp	r3, #0
 8013518:	d004      	beq.n	8013524 <_tx_queue_cleanup+0xb4>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	220b      	movs	r2, #11
 801351e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8013522:	e003      	b.n	801352c <_tx_queue_cleanup+0xbc>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	220a      	movs	r2, #10
 8013528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801352c:	4b11      	ldr	r3, [pc, #68]	; (8013574 <_tx_queue_cleanup+0x104>)
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	3301      	adds	r3, #1
 8013532:	4a10      	ldr	r2, [pc, #64]	; (8013574 <_tx_queue_cleanup+0x104>)
 8013534:	6013      	str	r3, [r2, #0]
 8013536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013538:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801353a:	693b      	ldr	r3, [r7, #16]
 801353c:	f383 8810 	msr	PRIMASK, r3
}
 8013540:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8013542:	6878      	ldr	r0, [r7, #4]
 8013544:	f000 fef0 	bl	8014328 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013548:	f3ef 8310 	mrs	r3, PRIMASK
 801354c:	61bb      	str	r3, [r7, #24]
    return(posture);
 801354e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013550:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013552:	b672      	cpsid	i
    return(int_posture);
 8013554:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8013556:	637b      	str	r3, [r7, #52]	; 0x34
 8013558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801355a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	f383 8810 	msr	PRIMASK, r3
}
 8013562:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8013564:	bf00      	nop
 8013566:	3738      	adds	r7, #56	; 0x38
 8013568:	46bd      	mov	sp, r7
 801356a:	bd80      	pop	{r7, pc}
 801356c:	08013471 	.word	0x08013471
 8013570:	51554555 	.word	0x51554555
 8013574:	201973dc 	.word	0x201973dc

08013578 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 8013578:	b580      	push	{r7, lr}
 801357a:	b08c      	sub	sp, #48	; 0x30
 801357c:	af00      	add	r7, sp, #0
 801357e:	60f8      	str	r0, [r7, #12]
 8013580:	60b9      	str	r1, [r7, #8]
 8013582:	607a      	str	r2, [r7, #4]
 8013584:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 8013586:	2238      	movs	r2, #56	; 0x38
 8013588:	2100      	movs	r1, #0
 801358a:	68f8      	ldr	r0, [r7, #12]
 801358c:	f014 fdee 	bl	802816c <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	68ba      	ldr	r2, [r7, #8]
 8013594:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	687a      	ldr	r2, [r7, #4]
 801359a:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	009b      	lsls	r3, r3, #2
 80135a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80135a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80135a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    used_words =  capacity * message_size;
 80135a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135aa:	687a      	ldr	r2, [r7, #4]
 80135ac:	fb02 f303 	mul.w	r3, r2, r3
 80135b0:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	683a      	ldr	r2, [r7, #0]
 80135b6:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	699a      	ldr	r2, [r3, #24]
 80135bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135be:	009b      	lsls	r3, r3, #2
 80135c0:	441a      	add	r2, r3
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	683a      	ldr	r2, [r7, #0]
 80135ca:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	683a      	ldr	r2, [r7, #0]
 80135d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135d6:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135dc:	60da      	str	r2, [r3, #12]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80135de:	f3ef 8310 	mrs	r3, PRIMASK
 80135e2:	61bb      	str	r3, [r7, #24]
    return(posture);
 80135e4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80135e6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80135e8:	b672      	cpsid	i
    return(int_posture);
 80135ea:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 80135ec:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	4a18      	ldr	r2, [pc, #96]	; (8013654 <_tx_queue_create+0xdc>)
 80135f2:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 80135f4:	4b18      	ldr	r3, [pc, #96]	; (8013658 <_tx_queue_create+0xe0>)
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d109      	bne.n	8013610 <_tx_queue_create+0x98>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 80135fc:	4a17      	ldr	r2, [pc, #92]	; (801365c <_tx_queue_create+0xe4>)
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	68fa      	ldr	r2, [r7, #12]
 8013606:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	68fa      	ldr	r2, [r7, #12]
 801360c:	635a      	str	r2, [r3, #52]	; 0x34
 801360e:	e011      	b.n	8013634 <_tx_queue_create+0xbc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 8013610:	4b12      	ldr	r3, [pc, #72]	; (801365c <_tx_queue_create+0xe4>)
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	623b      	str	r3, [r7, #32]
        previous_queue =  next_queue -> tx_queue_created_previous;
 8013616:	6a3b      	ldr	r3, [r7, #32]
 8013618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801361a:	61fb      	str	r3, [r7, #28]

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 801361c:	6a3b      	ldr	r3, [r7, #32]
 801361e:	68fa      	ldr	r2, [r7, #12]
 8013620:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 8013622:	69fb      	ldr	r3, [r7, #28]
 8013624:	68fa      	ldr	r2, [r7, #12]
 8013626:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	69fa      	ldr	r2, [r7, #28]
 801362c:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	6a3a      	ldr	r2, [r7, #32]
 8013632:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 8013634:	4b08      	ldr	r3, [pc, #32]	; (8013658 <_tx_queue_create+0xe0>)
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	3301      	adds	r3, #1
 801363a:	4a07      	ldr	r2, [pc, #28]	; (8013658 <_tx_queue_create+0xe0>)
 801363c:	6013      	str	r3, [r2, #0]
 801363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013640:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013642:	693b      	ldr	r3, [r7, #16]
 8013644:	f383 8810 	msr	PRIMASK, r3
}
 8013648:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801364a:	2300      	movs	r3, #0
}
 801364c:	4618      	mov	r0, r3
 801364e:	3730      	adds	r7, #48	; 0x30
 8013650:	46bd      	mov	sp, r7
 8013652:	bd80      	pop	{r7, pc}
 8013654:	51554555 	.word	0x51554555
 8013658:	20197318 	.word	0x20197318
 801365c:	20197314 	.word	0x20197314

08013660 <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8013660:	b580      	push	{r7, lr}
 8013662:	b096      	sub	sp, #88	; 0x58
 8013664:	af00      	add	r7, sp, #0
 8013666:	60f8      	str	r0, [r7, #12]
 8013668:	60b9      	str	r1, [r7, #8]
 801366a:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 801366c:	2300      	movs	r3, #0
 801366e:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013670:	f3ef 8310 	mrs	r3, PRIMASK
 8013674:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8013676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 8013678:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 801367a:	b672      	cpsid	i
    return(int_posture);
 801367c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 801367e:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013684:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	691b      	ldr	r3, [r3, #16]
 801368a:	2b00      	cmp	r3, #0
 801368c:	f000 8136 	beq.w	80138fc <_tx_queue_receive+0x29c>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8013690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013692:	2b00      	cmp	r3, #0
 8013694:	d13c      	bne.n	8013710 <_tx_queue_receive+0xb0>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	6a1b      	ldr	r3, [r3, #32]
 801369a:	657b      	str	r3, [r7, #84]	; 0x54
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 801369c:	68bb      	ldr	r3, [r7, #8]
 801369e:	653b      	str	r3, [r7, #80]	; 0x50
            size =         queue_ptr -> tx_queue_message_size;
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	689b      	ldr	r3, [r3, #8]
 80136a4:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80136a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80136a8:	1d13      	adds	r3, r2, #4
 80136aa:	657b      	str	r3, [r7, #84]	; 0x54
 80136ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136ae:	1d19      	adds	r1, r3, #4
 80136b0:	6539      	str	r1, [r7, #80]	; 0x50
 80136b2:	6812      	ldr	r2, [r2, #0]
 80136b4:	601a      	str	r2, [r3, #0]
 80136b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136b8:	2b01      	cmp	r3, #1
 80136ba:	d90e      	bls.n	80136da <_tx_queue_receive+0x7a>
 80136bc:	e007      	b.n	80136ce <_tx_queue_receive+0x6e>
 80136be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80136c0:	1d13      	adds	r3, r2, #4
 80136c2:	657b      	str	r3, [r7, #84]	; 0x54
 80136c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136c6:	1d19      	adds	r1, r3, #4
 80136c8:	6539      	str	r1, [r7, #80]	; 0x50
 80136ca:	6812      	ldr	r2, [r2, #0]
 80136cc:	601a      	str	r2, [r3, #0]
 80136ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136d0:	3b01      	subs	r3, #1
 80136d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80136d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d1f1      	bne.n	80136be <_tx_queue_receive+0x5e>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	69db      	ldr	r3, [r3, #28]
 80136de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80136e0:	429a      	cmp	r2, r3
 80136e2:	d102      	bne.n	80136ea <_tx_queue_receive+0x8a>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	699b      	ldr	r3, [r3, #24]
 80136e8:	657b      	str	r3, [r7, #84]	; 0x54
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80136ee:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	695b      	ldr	r3, [r3, #20]
 80136f4:	1c5a      	adds	r2, r3, #1
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	691b      	ldr	r3, [r3, #16]
 80136fe:	1e5a      	subs	r2, r3, #1
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	611a      	str	r2, [r3, #16]
 8013704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013706:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801370a:	f383 8810 	msr	PRIMASK, r3
}
 801370e:	e163      	b.n	80139d8 <_tx_queue_receive+0x378>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013714:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 8013716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013718:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801371c:	2b01      	cmp	r3, #1
 801371e:	d153      	bne.n	80137c8 <_tx_queue_receive+0x168>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8013720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013722:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013724:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8013726:	68bb      	ldr	r3, [r7, #8]
 8013728:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	689b      	ldr	r3, [r3, #8]
 801372e:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8013730:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013732:	1d13      	adds	r3, r2, #4
 8013734:	657b      	str	r3, [r7, #84]	; 0x54
 8013736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013738:	1d19      	adds	r1, r3, #4
 801373a:	6539      	str	r1, [r7, #80]	; 0x50
 801373c:	6812      	ldr	r2, [r2, #0]
 801373e:	601a      	str	r2, [r3, #0]
 8013740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013742:	2b01      	cmp	r3, #1
 8013744:	d90e      	bls.n	8013764 <_tx_queue_receive+0x104>
 8013746:	e007      	b.n	8013758 <_tx_queue_receive+0xf8>
 8013748:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801374a:	1d13      	adds	r3, r2, #4
 801374c:	657b      	str	r3, [r7, #84]	; 0x54
 801374e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013750:	1d19      	adds	r1, r3, #4
 8013752:	6539      	str	r1, [r7, #80]	; 0x50
 8013754:	6812      	ldr	r2, [r2, #0]
 8013756:	601a      	str	r2, [r3, #0]
 8013758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801375a:	3b01      	subs	r3, #1
 801375c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801375e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013760:	2b00      	cmp	r3, #0
 8013762:	d1f1      	bne.n	8013748 <_tx_queue_receive+0xe8>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 8013764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013766:	3b01      	subs	r3, #1
 8013768:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 801376a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801376c:	2b00      	cmp	r3, #0
 801376e:	d103      	bne.n	8013778 <_tx_queue_receive+0x118>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	2200      	movs	r2, #0
 8013774:	629a      	str	r2, [r3, #40]	; 0x28
 8013776:	e00e      	b.n	8013796 <_tx_queue_receive+0x136>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8013778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801377a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801377c:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013782:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8013784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013788:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 801378a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801378c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801378e:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 8013790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013792:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013794:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801379a:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801379c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801379e:	2200      	movs	r2, #0
 80137a0:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80137a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137a4:	2200      	movs	r2, #0
 80137a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80137aa:	4b8e      	ldr	r3, [pc, #568]	; (80139e4 <_tx_queue_receive+0x384>)
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	3301      	adds	r3, #1
 80137b0:	4a8c      	ldr	r2, [pc, #560]	; (80139e4 <_tx_queue_receive+0x384>)
 80137b2:	6013      	str	r3, [r2, #0]
 80137b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137b6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80137b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ba:	f383 8810 	msr	PRIMASK, r3
}
 80137be:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 80137c0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80137c2:	f000 fdb1 	bl	8014328 <_tx_thread_system_resume>
 80137c6:	e107      	b.n	80139d8 <_tx_queue_receive+0x378>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	6a1b      	ldr	r3, [r3, #32]
 80137cc:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 80137ce:	68bb      	ldr	r3, [r7, #8]
 80137d0:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	689b      	ldr	r3, [r3, #8]
 80137d6:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80137d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80137da:	1d13      	adds	r3, r2, #4
 80137dc:	657b      	str	r3, [r7, #84]	; 0x54
 80137de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137e0:	1d19      	adds	r1, r3, #4
 80137e2:	6539      	str	r1, [r7, #80]	; 0x50
 80137e4:	6812      	ldr	r2, [r2, #0]
 80137e6:	601a      	str	r2, [r3, #0]
 80137e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80137ea:	2b01      	cmp	r3, #1
 80137ec:	d90e      	bls.n	801380c <_tx_queue_receive+0x1ac>
 80137ee:	e007      	b.n	8013800 <_tx_queue_receive+0x1a0>
 80137f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80137f2:	1d13      	adds	r3, r2, #4
 80137f4:	657b      	str	r3, [r7, #84]	; 0x54
 80137f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137f8:	1d19      	adds	r1, r3, #4
 80137fa:	6539      	str	r1, [r7, #80]	; 0x50
 80137fc:	6812      	ldr	r2, [r2, #0]
 80137fe:	601a      	str	r2, [r3, #0]
 8013800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013802:	3b01      	subs	r3, #1
 8013804:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013808:	2b00      	cmp	r3, #0
 801380a:	d1f1      	bne.n	80137f0 <_tx_queue_receive+0x190>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	69db      	ldr	r3, [r3, #28]
 8013810:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013812:	429a      	cmp	r2, r3
 8013814:	d102      	bne.n	801381c <_tx_queue_receive+0x1bc>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	699b      	ldr	r3, [r3, #24]
 801381a:	657b      	str	r3, [r7, #84]	; 0x54
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013820:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 8013822:	4b70      	ldr	r3, [pc, #448]	; (80139e4 <_tx_queue_receive+0x384>)
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	3301      	adds	r3, #1
 8013828:	4a6e      	ldr	r2, [pc, #440]	; (80139e4 <_tx_queue_receive+0x384>)
 801382a:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 801382c:	4b6d      	ldr	r3, [pc, #436]	; (80139e4 <_tx_queue_receive+0x384>)
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	3b01      	subs	r3, #1
 8013832:	4a6c      	ldr	r2, [pc, #432]	; (80139e4 <_tx_queue_receive+0x384>)
 8013834:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8013836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013838:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801383a:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  queue_ptr -> tx_queue_write;
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013840:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	689b      	ldr	r3, [r3, #8]
 8013846:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8013848:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801384a:	1d13      	adds	r3, r2, #4
 801384c:	657b      	str	r3, [r7, #84]	; 0x54
 801384e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013850:	1d19      	adds	r1, r3, #4
 8013852:	6539      	str	r1, [r7, #80]	; 0x50
 8013854:	6812      	ldr	r2, [r2, #0]
 8013856:	601a      	str	r2, [r3, #0]
 8013858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801385a:	2b01      	cmp	r3, #1
 801385c:	d90e      	bls.n	801387c <_tx_queue_receive+0x21c>
 801385e:	e007      	b.n	8013870 <_tx_queue_receive+0x210>
 8013860:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013862:	1d13      	adds	r3, r2, #4
 8013864:	657b      	str	r3, [r7, #84]	; 0x54
 8013866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013868:	1d19      	adds	r1, r3, #4
 801386a:	6539      	str	r1, [r7, #80]	; 0x50
 801386c:	6812      	ldr	r2, [r2, #0]
 801386e:	601a      	str	r2, [r3, #0]
 8013870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013872:	3b01      	subs	r3, #1
 8013874:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013878:	2b00      	cmp	r3, #0
 801387a:	d1f1      	bne.n	8013860 <_tx_queue_receive+0x200>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	69db      	ldr	r3, [r3, #28]
 8013880:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013882:	429a      	cmp	r2, r3
 8013884:	d102      	bne.n	801388c <_tx_queue_receive+0x22c>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	699b      	ldr	r3, [r3, #24]
 801388a:	653b      	str	r3, [r7, #80]	; 0x50
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013890:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013896:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 8013898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801389a:	3b01      	subs	r3, #1
 801389c:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 801389e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d103      	bne.n	80138ac <_tx_queue_receive+0x24c>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	2200      	movs	r2, #0
 80138a8:	629a      	str	r2, [r3, #40]	; 0x28
 80138aa:	e00e      	b.n	80138ca <_tx_queue_receive+0x26a>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 80138ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80138ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80138b0:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80138b6:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80138b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80138ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80138bc:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 80138be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80138c2:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 80138c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80138c8:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80138ce:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80138d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80138d2:	2200      	movs	r2, #0
 80138d4:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80138d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80138d8:	2200      	movs	r2, #0
 80138da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80138de:	4b41      	ldr	r3, [pc, #260]	; (80139e4 <_tx_queue_receive+0x384>)
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	3301      	adds	r3, #1
 80138e4:	4a3f      	ldr	r2, [pc, #252]	; (80139e4 <_tx_queue_receive+0x384>)
 80138e6:	6013      	str	r3, [r2, #0]
 80138e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138ea:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80138ec:	6a3b      	ldr	r3, [r7, #32]
 80138ee:	f383 8810 	msr	PRIMASK, r3
}
 80138f2:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 80138f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80138f6:	f000 fd17 	bl	8014328 <_tx_thread_system_resume>
 80138fa:	e06d      	b.n	80139d8 <_tx_queue_receive+0x378>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d062      	beq.n	80139c8 <_tx_queue_receive+0x368>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8013902:	4b38      	ldr	r3, [pc, #224]	; (80139e4 <_tx_queue_receive+0x384>)
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d008      	beq.n	801391c <_tx_queue_receive+0x2bc>
 801390a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801390c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801390e:	69fb      	ldr	r3, [r7, #28]
 8013910:	f383 8810 	msr	PRIMASK, r3
}
 8013914:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 8013916:	230a      	movs	r3, #10
 8013918:	64bb      	str	r3, [r7, #72]	; 0x48
 801391a:	e05d      	b.n	80139d8 <_tx_queue_receive+0x378>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801391c:	4b32      	ldr	r3, [pc, #200]	; (80139e8 <_tx_queue_receive+0x388>)
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8013922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013924:	4a31      	ldr	r2, [pc, #196]	; (80139ec <_tx_queue_receive+0x38c>)
 8013926:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8013928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801392a:	68fa      	ldr	r2, [r7, #12]
 801392c:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 801392e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013930:	68ba      	ldr	r2, [r7, #8]
 8013932:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8013934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013936:	2200      	movs	r2, #0
 8013938:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 801393c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801393e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013942:	1c5a      	adds	r2, r3, #1
 8013944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013946:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 801394a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801394c:	2b00      	cmp	r3, #0
 801394e:	d109      	bne.n	8013964 <_tx_queue_receive+0x304>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013954:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8013956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013958:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801395a:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 801395c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801395e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013960:	675a      	str	r2, [r3, #116]	; 0x74
 8013962:	e011      	b.n	8013988 <_tx_queue_receive+0x328>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013968:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 801396a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801396c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801396e:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8013970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013974:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8013976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013978:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801397a:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 801397c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801397e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013980:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8013982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013984:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013986:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 8013988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801398a:	1c5a      	adds	r2, r3, #1
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8013990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013992:	2205      	movs	r2, #5
 8013994:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8013996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013998:	2201      	movs	r2, #1
 801399a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 801399c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801399e:	687a      	ldr	r2, [r7, #4]
 80139a0:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80139a2:	4b10      	ldr	r3, [pc, #64]	; (80139e4 <_tx_queue_receive+0x384>)
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	3301      	adds	r3, #1
 80139a8:	4a0e      	ldr	r2, [pc, #56]	; (80139e4 <_tx_queue_receive+0x384>)
 80139aa:	6013      	str	r3, [r2, #0]
 80139ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80139ae:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80139b0:	69bb      	ldr	r3, [r7, #24]
 80139b2:	f383 8810 	msr	PRIMASK, r3
}
 80139b6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80139b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80139ba:	f000 fdb5 	bl	8014528 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80139be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80139c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80139c6:	e007      	b.n	80139d8 <_tx_queue_receive+0x378>
 80139c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80139ca:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80139cc:	697b      	ldr	r3, [r7, #20]
 80139ce:	f383 8810 	msr	PRIMASK, r3
}
 80139d2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 80139d4:	230a      	movs	r3, #10
 80139d6:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Return completion status.  */
    return(status);
 80139d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80139da:	4618      	mov	r0, r3
 80139dc:	3758      	adds	r7, #88	; 0x58
 80139de:	46bd      	mov	sp, r7
 80139e0:	bd80      	pop	{r7, pc}
 80139e2:	bf00      	nop
 80139e4:	201973dc 	.word	0x201973dc
 80139e8:	20197344 	.word	0x20197344
 80139ec:	08013471 	.word	0x08013471

080139f0 <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 80139f0:	b580      	push	{r7, lr}
 80139f2:	b094      	sub	sp, #80	; 0x50
 80139f4:	af00      	add	r7, sp, #0
 80139f6:	60f8      	str	r0, [r7, #12]
 80139f8:	60b9      	str	r1, [r7, #8]
 80139fa:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 80139fc:	2300      	movs	r3, #0
 80139fe:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013a00:	f3ef 8310 	mrs	r3, PRIMASK
 8013a04:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8013a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8013a08:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8013a0a:	b672      	cpsid	i
    return(int_posture);
 8013a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 8013a0e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a14:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	695b      	ldr	r3, [r3, #20]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	f000 809b 	beq.w	8013b56 <_tx_queue_send+0x166>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8013a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d13c      	bne.n	8013aa0 <_tx_queue_send+0xb0>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	695b      	ldr	r3, [r3, #20]
 8013a2a:	1e5a      	subs	r2, r3, #1
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	691b      	ldr	r3, [r3, #16]
 8013a34:	1c5a      	adds	r2, r3, #1
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8013a3a:	68bb      	ldr	r3, [r7, #8]
 8013a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  queue_ptr -> tx_queue_write;
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a42:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	689b      	ldr	r3, [r3, #8]
 8013a48:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8013a4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013a4c:	1d13      	adds	r3, r2, #4
 8013a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a52:	1d19      	adds	r1, r3, #4
 8013a54:	64b9      	str	r1, [r7, #72]	; 0x48
 8013a56:	6812      	ldr	r2, [r2, #0]
 8013a58:	601a      	str	r2, [r3, #0]
 8013a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a5c:	2b01      	cmp	r3, #1
 8013a5e:	d90e      	bls.n	8013a7e <_tx_queue_send+0x8e>
 8013a60:	e007      	b.n	8013a72 <_tx_queue_send+0x82>
 8013a62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013a64:	1d13      	adds	r3, r2, #4
 8013a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013a68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a6a:	1d19      	adds	r1, r3, #4
 8013a6c:	64b9      	str	r1, [r7, #72]	; 0x48
 8013a6e:	6812      	ldr	r2, [r2, #0]
 8013a70:	601a      	str	r2, [r3, #0]
 8013a72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a74:	3b01      	subs	r3, #1
 8013a76:	647b      	str	r3, [r7, #68]	; 0x44
 8013a78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d1f1      	bne.n	8013a62 <_tx_queue_send+0x72>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	69db      	ldr	r3, [r3, #28]
 8013a82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013a84:	429a      	cmp	r2, r3
 8013a86:	d102      	bne.n	8013a8e <_tx_queue_send+0x9e>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	699b      	ldr	r3, [r3, #24]
 8013a8c:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013a92:	625a      	str	r2, [r3, #36]	; 0x24
 8013a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a96:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013a98:	6a3b      	ldr	r3, [r7, #32]
 8013a9a:	f383 8810 	msr	PRIMASK, r3
}
 8013a9e:	e0c8      	b.n	8013c32 <_tx_queue_send+0x242>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013aa4:	637b      	str	r3, [r7, #52]	; 0x34

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 8013aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aa8:	3b01      	subs	r3, #1
 8013aaa:	63bb      	str	r3, [r7, #56]	; 0x38
            if (suspended_count == TX_NO_SUSPENSIONS)
 8013aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d103      	bne.n	8013aba <_tx_queue_send+0xca>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	2200      	movs	r2, #0
 8013ab6:	629a      	str	r2, [r3, #40]	; 0x28
 8013ab8:	e012      	b.n	8013ae0 <_tx_queue_send+0xf0>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8013aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013abc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8013ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ac6:	633b      	str	r3, [r7, #48]	; 0x30
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013acc:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8013ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 8013ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013ad8:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 8013ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ade:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013ae4:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8013ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ae8:	2200      	movs	r2, #0
 8013aea:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8013aec:	68bb      	ldr	r3, [r7, #8]
 8013aee:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8013af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013af2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013af4:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	689b      	ldr	r3, [r3, #8]
 8013afa:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8013afc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013afe:	1d13      	adds	r3, r2, #4
 8013b00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013b02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013b04:	1d19      	adds	r1, r3, #4
 8013b06:	64b9      	str	r1, [r7, #72]	; 0x48
 8013b08:	6812      	ldr	r2, [r2, #0]
 8013b0a:	601a      	str	r2, [r3, #0]
 8013b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b0e:	2b01      	cmp	r3, #1
 8013b10:	d90e      	bls.n	8013b30 <_tx_queue_send+0x140>
 8013b12:	e007      	b.n	8013b24 <_tx_queue_send+0x134>
 8013b14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013b16:	1d13      	adds	r3, r2, #4
 8013b18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013b1c:	1d19      	adds	r1, r3, #4
 8013b1e:	64b9      	str	r1, [r7, #72]	; 0x48
 8013b20:	6812      	ldr	r2, [r2, #0]
 8013b22:	601a      	str	r2, [r3, #0]
 8013b24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b26:	3b01      	subs	r3, #1
 8013b28:	647b      	str	r3, [r7, #68]	; 0x44
 8013b2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d1f1      	bne.n	8013b14 <_tx_queue_send+0x124>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8013b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b32:	2200      	movs	r2, #0
 8013b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8013b38:	4b40      	ldr	r3, [pc, #256]	; (8013c3c <_tx_queue_send+0x24c>)
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	3301      	adds	r3, #1
 8013b3e:	4a3f      	ldr	r2, [pc, #252]	; (8013c3c <_tx_queue_send+0x24c>)
 8013b40:	6013      	str	r3, [r2, #0]
 8013b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b44:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013b46:	69fb      	ldr	r3, [r7, #28]
 8013b48:	f383 8810 	msr	PRIMASK, r3
}
 8013b4c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 8013b4e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013b50:	f000 fbea 	bl	8014328 <_tx_thread_system_resume>
 8013b54:	e06d      	b.n	8013c32 <_tx_queue_send+0x242>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d062      	beq.n	8013c22 <_tx_queue_send+0x232>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8013b5c:	4b37      	ldr	r3, [pc, #220]	; (8013c3c <_tx_queue_send+0x24c>)
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d008      	beq.n	8013b76 <_tx_queue_send+0x186>
 8013b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b66:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013b68:	69bb      	ldr	r3, [r7, #24]
 8013b6a:	f383 8810 	msr	PRIMASK, r3
}
 8013b6e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 8013b70:	230b      	movs	r3, #11
 8013b72:	643b      	str	r3, [r7, #64]	; 0x40
 8013b74:	e05d      	b.n	8013c32 <_tx_queue_send+0x242>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8013b76:	4b32      	ldr	r3, [pc, #200]	; (8013c40 <_tx_queue_send+0x250>)
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8013b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b7e:	4a31      	ldr	r2, [pc, #196]	; (8013c44 <_tx_queue_send+0x254>)
 8013b80:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8013b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b84:	68fa      	ldr	r2, [r7, #12]
 8013b86:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 8013b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b8a:	68ba      	ldr	r2, [r7, #8]
 8013b8c:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8013b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b90:	2200      	movs	r2, #0
 8013b92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8013b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b98:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013b9c:	1c5a      	adds	r2, r3, #1
 8013b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ba0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 8013ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d109      	bne.n	8013bbe <_tx_queue_send+0x1ce>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013bae:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8013bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013bb4:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8013bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013bba:	675a      	str	r2, [r3, #116]	; 0x74
 8013bbc:	e011      	b.n	8013be2 <_tx_queue_send+0x1f2>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013bc2:	633b      	str	r3, [r7, #48]	; 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8013bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013bc8:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8013bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013bce:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8013bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013bd4:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8013bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013bda:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8013bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013be0:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 8013be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013be4:	1c5a      	adds	r2, r3, #1
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8013bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bec:	2205      	movs	r2, #5
 8013bee:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8013bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bf2:	2201      	movs	r2, #1
 8013bf4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8013bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bf8:	687a      	ldr	r2, [r7, #4]
 8013bfa:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8013bfc:	4b0f      	ldr	r3, [pc, #60]	; (8013c3c <_tx_queue_send+0x24c>)
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	3301      	adds	r3, #1
 8013c02:	4a0e      	ldr	r2, [pc, #56]	; (8013c3c <_tx_queue_send+0x24c>)
 8013c04:	6013      	str	r3, [r2, #0]
 8013c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c08:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013c0a:	697b      	ldr	r3, [r7, #20]
 8013c0c:	f383 8810 	msr	PRIMASK, r3
}
 8013c10:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8013c12:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013c14:	f000 fc88 	bl	8014528 <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8013c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013c1e:	643b      	str	r3, [r7, #64]	; 0x40
 8013c20:	e007      	b.n	8013c32 <_tx_queue_send+0x242>
 8013c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c24:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013c26:	693b      	ldr	r3, [r7, #16]
 8013c28:	f383 8810 	msr	PRIMASK, r3
}
 8013c2c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 8013c2e:	230b      	movs	r3, #11
 8013c30:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Return completion status.  */
    return(status);
 8013c32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8013c34:	4618      	mov	r0, r3
 8013c36:	3750      	adds	r7, #80	; 0x50
 8013c38:	46bd      	mov	sp, r7
 8013c3a:	bd80      	pop	{r7, pc}
 8013c3c:	201973dc 	.word	0x201973dc
 8013c40:	20197344 	.word	0x20197344
 8013c44:	08013471 	.word	0x08013471

08013c48 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8013c48:	b580      	push	{r7, lr}
 8013c4a:	b08e      	sub	sp, #56	; 0x38
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6078      	str	r0, [r7, #4]
 8013c50:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013c52:	f3ef 8310 	mrs	r3, PRIMASK
 8013c56:	623b      	str	r3, [r7, #32]
    return(posture);
 8013c58:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8013c5a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013c5c:	b672      	cpsid	i
    return(int_posture);
 8013c5e:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 8013c60:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013c66:	4a33      	ldr	r2, [pc, #204]	; (8013d34 <_tx_semaphore_cleanup+0xec>)
 8013c68:	4293      	cmp	r3, r2
 8013c6a:	d158      	bne.n	8013d1e <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013c72:	683a      	ldr	r2, [r7, #0]
 8013c74:	429a      	cmp	r2, r3
 8013c76:	d152      	bne.n	8013d1e <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c7c:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 8013c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d04c      	beq.n	8013d1e <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 8013c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	4a2b      	ldr	r2, [pc, #172]	; (8013d38 <_tx_semaphore_cleanup+0xf0>)
 8013c8a:	4293      	cmp	r3, r2
 8013c8c:	d147      	bne.n	8013d1e <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 8013c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c90:	691b      	ldr	r3, [r3, #16]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d043      	beq.n	8013d1e <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	2200      	movs	r2, #0
 8013c9a:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 8013c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c9e:	691b      	ldr	r3, [r3, #16]
 8013ca0:	1e5a      	subs	r2, r3, #1
 8013ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ca4:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8013ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ca8:	691b      	ldr	r3, [r3, #16]
 8013caa:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8013cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d103      	bne.n	8013cba <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8013cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cb4:	2200      	movs	r2, #0
 8013cb6:	60da      	str	r2, [r3, #12]
 8013cb8:	e013      	b.n	8013ce2 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013cbe:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013cc4:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8013cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013cca:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8013ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013cd0:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 8013cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cd4:	68db      	ldr	r3, [r3, #12]
 8013cd6:	687a      	ldr	r2, [r7, #4]
 8013cd8:	429a      	cmp	r2, r3
 8013cda:	d102      	bne.n	8013ce2 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8013cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ce0:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ce6:	2b06      	cmp	r3, #6
 8013ce8:	d119      	bne.n	8013d1e <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	220d      	movs	r2, #13
 8013cee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8013cf2:	4b12      	ldr	r3, [pc, #72]	; (8013d3c <_tx_semaphore_cleanup+0xf4>)
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	3301      	adds	r3, #1
 8013cf8:	4a10      	ldr	r2, [pc, #64]	; (8013d3c <_tx_semaphore_cleanup+0xf4>)
 8013cfa:	6013      	str	r3, [r2, #0]
 8013cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013cfe:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013d00:	693b      	ldr	r3, [r7, #16]
 8013d02:	f383 8810 	msr	PRIMASK, r3
}
 8013d06:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8013d08:	6878      	ldr	r0, [r7, #4]
 8013d0a:	f000 fb0d 	bl	8014328 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8013d12:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013d14:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013d16:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013d18:	b672      	cpsid	i
    return(int_posture);
 8013d1a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8013d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8013d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d20:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	f383 8810 	msr	PRIMASK, r3
}
 8013d28:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8013d2a:	bf00      	nop
 8013d2c:	3738      	adds	r7, #56	; 0x38
 8013d2e:	46bd      	mov	sp, r7
 8013d30:	bd80      	pop	{r7, pc}
 8013d32:	bf00      	nop
 8013d34:	08013c49 	.word	0x08013c49
 8013d38:	53454d41 	.word	0x53454d41
 8013d3c:	201973dc 	.word	0x201973dc

08013d40 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b08a      	sub	sp, #40	; 0x28
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	60f8      	str	r0, [r7, #12]
 8013d48:	60b9      	str	r1, [r7, #8]
 8013d4a:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 8013d4c:	221c      	movs	r2, #28
 8013d4e:	2100      	movs	r1, #0
 8013d50:	68f8      	ldr	r0, [r7, #12]
 8013d52:	f014 fa0b 	bl	802816c <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	68ba      	ldr	r2, [r7, #8]
 8013d5a:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	687a      	ldr	r2, [r7, #4]
 8013d60:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013d62:	f3ef 8310 	mrs	r3, PRIMASK
 8013d66:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013d68:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013d6a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013d6c:	b672      	cpsid	i
    return(int_posture);
 8013d6e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 8013d70:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	4a18      	ldr	r2, [pc, #96]	; (8013dd8 <_tx_semaphore_create+0x98>)
 8013d76:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8013d78:	4b18      	ldr	r3, [pc, #96]	; (8013ddc <_tx_semaphore_create+0x9c>)
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d109      	bne.n	8013d94 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8013d80:	4a17      	ldr	r2, [pc, #92]	; (8013de0 <_tx_semaphore_create+0xa0>)
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	68fa      	ldr	r2, [r7, #12]
 8013d8a:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	68fa      	ldr	r2, [r7, #12]
 8013d90:	619a      	str	r2, [r3, #24]
 8013d92:	e011      	b.n	8013db8 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 8013d94:	4b12      	ldr	r3, [pc, #72]	; (8013de0 <_tx_semaphore_create+0xa0>)
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8013d9a:	6a3b      	ldr	r3, [r7, #32]
 8013d9c:	699b      	ldr	r3, [r3, #24]
 8013d9e:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 8013da0:	6a3b      	ldr	r3, [r7, #32]
 8013da2:	68fa      	ldr	r2, [r7, #12]
 8013da4:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 8013da6:	69fb      	ldr	r3, [r7, #28]
 8013da8:	68fa      	ldr	r2, [r7, #12]
 8013daa:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	69fa      	ldr	r2, [r7, #28]
 8013db0:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	6a3a      	ldr	r2, [r7, #32]
 8013db6:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8013db8:	4b08      	ldr	r3, [pc, #32]	; (8013ddc <_tx_semaphore_create+0x9c>)
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	3301      	adds	r3, #1
 8013dbe:	4a07      	ldr	r2, [pc, #28]	; (8013ddc <_tx_semaphore_create+0x9c>)
 8013dc0:	6013      	str	r3, [r2, #0]
 8013dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dc4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013dc6:	693b      	ldr	r3, [r7, #16]
 8013dc8:	f383 8810 	msr	PRIMASK, r3
}
 8013dcc:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8013dce:	2300      	movs	r3, #0
}
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	3728      	adds	r7, #40	; 0x28
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	bd80      	pop	{r7, pc}
 8013dd8:	53454d41 	.word	0x53454d41
 8013ddc:	20197310 	.word	0x20197310
 8013de0:	2019730c 	.word	0x2019730c

08013de4 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8013de4:	b580      	push	{r7, lr}
 8013de6:	b08e      	sub	sp, #56	; 0x38
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]
 8013dec:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8013dee:	2300      	movs	r3, #0
 8013df0:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013df2:	f3ef 8310 	mrs	r3, PRIMASK
 8013df6:	623b      	str	r3, [r7, #32]
    return(posture);
 8013df8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8013dfa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013dfc:	b672      	cpsid	i
    return(int_posture);
 8013dfe:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 8013e00:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	689b      	ldr	r3, [r3, #8]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d00a      	beq.n	8013e20 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	689b      	ldr	r3, [r3, #8]
 8013e0e:	1e5a      	subs	r2, r3, #1
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	609a      	str	r2, [r3, #8]
 8013e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e16:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013e18:	69bb      	ldr	r3, [r7, #24]
 8013e1a:	f383 8810 	msr	PRIMASK, r3
}
 8013e1e:	e068      	b.n	8013ef2 <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8013e20:	683b      	ldr	r3, [r7, #0]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d05d      	beq.n	8013ee2 <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8013e26:	4b35      	ldr	r3, [pc, #212]	; (8013efc <_tx_semaphore_get+0x118>)
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d008      	beq.n	8013e40 <_tx_semaphore_get+0x5c>
 8013e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e30:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013e32:	697b      	ldr	r3, [r7, #20]
 8013e34:	f383 8810 	msr	PRIMASK, r3
}
 8013e38:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 8013e3a:	230d      	movs	r3, #13
 8013e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8013e3e:	e058      	b.n	8013ef2 <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8013e40:	4b2f      	ldr	r3, [pc, #188]	; (8013f00 <_tx_semaphore_get+0x11c>)
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8013e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e48:	4a2e      	ldr	r2, [pc, #184]	; (8013f04 <_tx_semaphore_get+0x120>)
 8013e4a:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 8013e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e4e:	687a      	ldr	r2, [r7, #4]
 8013e50:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8013e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013e58:	1c5a      	adds	r2, r3, #1
 8013e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e5c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	691b      	ldr	r3, [r3, #16]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d109      	bne.n	8013e7c <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e6c:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 8013e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e72:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8013e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e78:	675a      	str	r2, [r3, #116]	; 0x74
 8013e7a:	e011      	b.n	8013ea0 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	68db      	ldr	r3, [r3, #12]
 8013e80:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8013e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013e86:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8013e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013e8c:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8013e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e92:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8013e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e98:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8013e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e9e:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	691b      	ldr	r3, [r3, #16]
 8013ea4:	1c5a      	adds	r2, r3, #1
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 8013eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eac:	2206      	movs	r2, #6
 8013eae:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8013eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eb2:	2201      	movs	r2, #1
 8013eb4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8013eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eb8:	683a      	ldr	r2, [r7, #0]
 8013eba:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8013ebc:	4b0f      	ldr	r3, [pc, #60]	; (8013efc <_tx_semaphore_get+0x118>)
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	3301      	adds	r3, #1
 8013ec2:	4a0e      	ldr	r2, [pc, #56]	; (8013efc <_tx_semaphore_get+0x118>)
 8013ec4:	6013      	str	r3, [r2, #0]
 8013ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ec8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013eca:	693b      	ldr	r3, [r7, #16]
 8013ecc:	f383 8810 	msr	PRIMASK, r3
}
 8013ed0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8013ed2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013ed4:	f000 fb28 	bl	8014528 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8013ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013ede:	637b      	str	r3, [r7, #52]	; 0x34
 8013ee0:	e007      	b.n	8013ef2 <_tx_semaphore_get+0x10e>
 8013ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ee4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	f383 8810 	msr	PRIMASK, r3
}
 8013eec:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 8013eee:	230d      	movs	r3, #13
 8013ef0:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 8013ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	3738      	adds	r7, #56	; 0x38
 8013ef8:	46bd      	mov	sp, r7
 8013efa:	bd80      	pop	{r7, pc}
 8013efc:	201973dc 	.word	0x201973dc
 8013f00:	20197344 	.word	0x20197344
 8013f04:	08013c49 	.word	0x08013c49

08013f08 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b08c      	sub	sp, #48	; 0x30
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013f10:	f3ef 8310 	mrs	r3, PRIMASK
 8013f14:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013f16:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013f18:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013f1a:	b672      	cpsid	i
    return(int_posture);
 8013f1c:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 8013f1e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	691b      	ldr	r3, [r3, #16]
 8013f24:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8013f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d10a      	bne.n	8013f42 <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	689b      	ldr	r3, [r3, #8]
 8013f30:	1c5a      	adds	r2, r3, #1
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	609a      	str	r2, [r3, #8]
 8013f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f38:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013f3a:	693b      	ldr	r3, [r7, #16]
 8013f3c:	f383 8810 	msr	PRIMASK, r3
}
 8013f40:	e033      	b.n	8013faa <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	68db      	ldr	r3, [r3, #12]
 8013f46:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8013f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f4a:	3b01      	subs	r3, #1
 8013f4c:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 8013f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d103      	bne.n	8013f5c <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	2200      	movs	r2, #0
 8013f58:	60da      	str	r2, [r3, #12]
 8013f5a:	e00e      	b.n	8013f7a <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 8013f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f60:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	6a3a      	ldr	r2, [r7, #32]
 8013f66:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8013f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013f6c:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8013f6e:	6a3b      	ldr	r3, [r7, #32]
 8013f70:	69fa      	ldr	r2, [r7, #28]
 8013f72:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8013f74:	69fb      	ldr	r3, [r7, #28]
 8013f76:	6a3a      	ldr	r2, [r7, #32]
 8013f78:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013f7e:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8013f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f82:	2200      	movs	r2, #0
 8013f84:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8013f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f88:	2200      	movs	r2, #0
 8013f8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8013f8e:	4b09      	ldr	r3, [pc, #36]	; (8013fb4 <_tx_semaphore_put+0xac>)
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	3301      	adds	r3, #1
 8013f94:	4a07      	ldr	r2, [pc, #28]	; (8013fb4 <_tx_semaphore_put+0xac>)
 8013f96:	6013      	str	r3, [r2, #0]
 8013f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f9a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	f383 8810 	msr	PRIMASK, r3
}
 8013fa2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8013fa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013fa6:	f000 f9bf 	bl	8014328 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8013faa:	2300      	movs	r3, #0
}
 8013fac:	4618      	mov	r0, r3
 8013fae:	3730      	adds	r7, #48	; 0x30
 8013fb0:	46bd      	mov	sp, r7
 8013fb2:	bd80      	pop	{r7, pc}
 8013fb4:	201973dc 	.word	0x201973dc

08013fb8 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	b092      	sub	sp, #72	; 0x48
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	60f8      	str	r0, [r7, #12]
 8013fc0:	60b9      	str	r1, [r7, #8]
 8013fc2:	607a      	str	r2, [r7, #4]
 8013fc4:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8013fc6:	2300      	movs	r3, #0
 8013fc8:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8013fca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013fcc:	21ef      	movs	r1, #239	; 0xef
 8013fce:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8013fd0:	f014 f8cc 	bl	802816c <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8013fd4:	22b0      	movs	r2, #176	; 0xb0
 8013fd6:	2100      	movs	r1, #0
 8013fd8:	68f8      	ldr	r0, [r7, #12]
 8013fda:	f014 f8c7 	bl	802816c <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	68ba      	ldr	r2, [r7, #8]
 8013fe2:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	687a      	ldr	r2, [r7, #4]
 8013fe8:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	683a      	ldr	r2, [r7, #0]
 8013fee:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013ff4:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013ffa:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014000:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014006:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801400e:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014014:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	2220      	movs	r2, #32
 801401a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 801401e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014020:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8014022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014024:	3b01      	subs	r3, #1
 8014026:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014028:	4413      	add	r3, r2
 801402a:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014030:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8014032:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014034:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014036:	429a      	cmp	r2, r3
 8014038:	d007      	beq.n	801404a <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	2200      	movs	r2, #0
 801403e:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	2200      	movs	r2, #0
 8014044:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8014048:	e006      	b.n	8014058 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801404e:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014054:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	2203      	movs	r2, #3
 801405c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	4a48      	ldr	r2, [pc, #288]	; (8014184 <_tx_thread_create+0x1cc>)
 8014062:	655a      	str	r2, [r3, #84]	; 0x54
 8014064:	68fa      	ldr	r2, [r7, #12]
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 801406a:	4947      	ldr	r1, [pc, #284]	; (8014188 <_tx_thread_create+0x1d0>)
 801406c:	68f8      	ldr	r0, [r7, #12]
 801406e:	f7ec f9c7 	bl	8000400 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014072:	f3ef 8310 	mrs	r3, PRIMASK
 8014076:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8014078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801407a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 801407c:	b672      	cpsid	i
    return(int_posture);
 801407e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8014080:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	4a41      	ldr	r2, [pc, #260]	; (801418c <_tx_thread_create+0x1d4>)
 8014086:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8014088:	4b41      	ldr	r3, [pc, #260]	; (8014190 <_tx_thread_create+0x1d8>)
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	2b00      	cmp	r3, #0
 801408e:	d10b      	bne.n	80140a8 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8014090:	4a40      	ldr	r2, [pc, #256]	; (8014194 <_tx_thread_create+0x1dc>)
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	68fa      	ldr	r2, [r7, #12]
 801409a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	68fa      	ldr	r2, [r7, #12]
 80140a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80140a6:	e016      	b.n	80140d6 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 80140a8:	4b3a      	ldr	r3, [pc, #232]	; (8014194 <_tx_thread_create+0x1dc>)
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 80140ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80140b4:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 80140b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140b8:	68fa      	ldr	r2, [r7, #12]
 80140ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 80140be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140c0:	68fa      	ldr	r2, [r7, #12]
 80140c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80140ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80140d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 80140d6:	4b2e      	ldr	r3, [pc, #184]	; (8014190 <_tx_thread_create+0x1d8>)
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	3301      	adds	r3, #1
 80140dc:	4a2c      	ldr	r2, [pc, #176]	; (8014190 <_tx_thread_create+0x1d8>)
 80140de:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80140e0:	4b2d      	ldr	r3, [pc, #180]	; (8014198 <_tx_thread_create+0x1e0>)
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	3301      	adds	r3, #1
 80140e6:	4a2c      	ldr	r2, [pc, #176]	; (8014198 <_tx_thread_create+0x1e0>)
 80140e8:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 80140ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80140ec:	2b01      	cmp	r3, #1
 80140ee:	d129      	bne.n	8014144 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80140f0:	f3ef 8305 	mrs	r3, IPSR
 80140f4:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 80140f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80140f8:	4b28      	ldr	r3, [pc, #160]	; (801419c <_tx_thread_create+0x1e4>)
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	4313      	orrs	r3, r2
 80140fe:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8014102:	d30d      	bcc.n	8014120 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8014104:	4b26      	ldr	r3, [pc, #152]	; (80141a0 <_tx_thread_create+0x1e8>)
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 801410a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801410c:	2b00      	cmp	r3, #0
 801410e:	d009      	beq.n	8014124 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8014110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014114:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8014116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801411a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801411c:	63da      	str	r2, [r3, #60]	; 0x3c
 801411e:	e001      	b.n	8014124 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8014120:	2300      	movs	r3, #0
 8014122:	647b      	str	r3, [r7, #68]	; 0x44
 8014124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014126:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014128:	6a3b      	ldr	r3, [r7, #32]
 801412a:	f383 8810 	msr	PRIMASK, r3
}
 801412e:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8014130:	68f8      	ldr	r0, [r7, #12]
 8014132:	f000 f8f9 	bl	8014328 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8014136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014138:	2b00      	cmp	r3, #0
 801413a:	d01e      	beq.n	801417a <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 801413c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801413e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014140:	63da      	str	r2, [r3, #60]	; 0x3c
 8014142:	e01a      	b.n	801417a <_tx_thread_create+0x1c2>
 8014144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014146:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014148:	693b      	ldr	r3, [r7, #16]
 801414a:	f383 8810 	msr	PRIMASK, r3
}
 801414e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014150:	f3ef 8310 	mrs	r3, PRIMASK
 8014154:	61bb      	str	r3, [r7, #24]
    return(posture);
 8014156:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8014158:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801415a:	b672      	cpsid	i
    return(int_posture);
 801415c:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 801415e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8014160:	4b0d      	ldr	r3, [pc, #52]	; (8014198 <_tx_thread_create+0x1e0>)
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	3b01      	subs	r3, #1
 8014166:	4a0c      	ldr	r2, [pc, #48]	; (8014198 <_tx_thread_create+0x1e0>)
 8014168:	6013      	str	r3, [r2, #0]
 801416a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801416c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801416e:	69fb      	ldr	r3, [r7, #28]
 8014170:	f383 8810 	msr	PRIMASK, r3
}
 8014174:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8014176:	f000 f89d 	bl	80142b4 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 801417a:	2300      	movs	r3, #0
}
 801417c:	4618      	mov	r0, r3
 801417e:	3748      	adds	r7, #72	; 0x48
 8014180:	46bd      	mov	sp, r7
 8014182:	bd80      	pop	{r7, pc}
 8014184:	080147fd 	.word	0x080147fd
 8014188:	0801421d 	.word	0x0801421d
 801418c:	54485244 	.word	0x54485244
 8014190:	20197350 	.word	0x20197350
 8014194:	2019734c 	.word	0x2019734c
 8014198:	201973dc 	.word	0x201973dc
 801419c:	20000054 	.word	0x20000054
 80141a0:	20197348 	.word	0x20197348

080141a4 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 80141a4:	b580      	push	{r7, lr}
 80141a6:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 80141a8:	4b12      	ldr	r3, [pc, #72]	; (80141f4 <_tx_thread_initialize+0x50>)
 80141aa:	2200      	movs	r2, #0
 80141ac:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 80141ae:	4b12      	ldr	r3, [pc, #72]	; (80141f8 <_tx_thread_initialize+0x54>)
 80141b0:	2200      	movs	r2, #0
 80141b2:	601a      	str	r2, [r3, #0]
 80141b4:	4b11      	ldr	r3, [pc, #68]	; (80141fc <_tx_thread_initialize+0x58>)
 80141b6:	2200      	movs	r2, #0
 80141b8:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80141ba:	4b11      	ldr	r3, [pc, #68]	; (8014200 <_tx_thread_initialize+0x5c>)
 80141bc:	2220      	movs	r2, #32
 80141be:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 80141c0:	2280      	movs	r2, #128	; 0x80
 80141c2:	2100      	movs	r1, #0
 80141c4:	480f      	ldr	r0, [pc, #60]	; (8014204 <_tx_thread_initialize+0x60>)
 80141c6:	f013 ffd1 	bl	802816c <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 80141ca:	4b0f      	ldr	r3, [pc, #60]	; (8014208 <_tx_thread_initialize+0x64>)
 80141cc:	2200      	movs	r2, #0
 80141ce:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 80141d0:	4b0e      	ldr	r3, [pc, #56]	; (801420c <_tx_thread_initialize+0x68>)
 80141d2:	2200      	movs	r2, #0
 80141d4:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 80141d6:	4b0e      	ldr	r3, [pc, #56]	; (8014210 <_tx_thread_initialize+0x6c>)
 80141d8:	2200      	movs	r2, #0
 80141da:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 80141dc:	4b0d      	ldr	r3, [pc, #52]	; (8014214 <_tx_thread_initialize+0x70>)
 80141de:	2200      	movs	r2, #0
 80141e0:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 80141e2:	4b0d      	ldr	r3, [pc, #52]	; (8014218 <_tx_thread_initialize+0x74>)
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 80141ea:	4a0b      	ldr	r2, [pc, #44]	; (8014218 <_tx_thread_initialize+0x74>)
 80141ec:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 80141ee:	bf00      	nop
 80141f0:	bd80      	pop	{r7, pc}
 80141f2:	bf00      	nop
 80141f4:	20197344 	.word	0x20197344
 80141f8:	20197348 	.word	0x20197348
 80141fc:	20197354 	.word	0x20197354
 8014200:	20197358 	.word	0x20197358
 8014204:	2019735c 	.word	0x2019735c
 8014208:	2019734c 	.word	0x2019734c
 801420c:	20197350 	.word	0x20197350
 8014210:	201973dc 	.word	0x201973dc
 8014214:	201973e0 	.word	0x201973e0
 8014218:	201973e4 	.word	0x201973e4

0801421c <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 801421c:	b580      	push	{r7, lr}
 801421e:	b088      	sub	sp, #32
 8014220:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8014222:	4b21      	ldr	r3, [pc, #132]	; (80142a8 <_tx_thread_shell_entry+0x8c>)
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8014228:	69fb      	ldr	r3, [r7, #28]
 801422a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801422c:	69fa      	ldr	r2, [r7, #28]
 801422e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8014230:	4610      	mov	r0, r2
 8014232:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8014234:	4b1d      	ldr	r3, [pc, #116]	; (80142ac <_tx_thread_shell_entry+0x90>)
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	2b00      	cmp	r3, #0
 801423a:	d003      	beq.n	8014244 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 801423c:	4b1b      	ldr	r3, [pc, #108]	; (80142ac <_tx_thread_shell_entry+0x90>)
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	69f8      	ldr	r0, [r7, #28]
 8014242:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014244:	f3ef 8310 	mrs	r3, PRIMASK
 8014248:	607b      	str	r3, [r7, #4]
    return(posture);
 801424a:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 801424c:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 801424e:	b672      	cpsid	i
    return(int_posture);
 8014250:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8014252:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8014254:	69fb      	ldr	r3, [r7, #28]
 8014256:	2201      	movs	r2, #1
 8014258:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801425a:	69fb      	ldr	r3, [r7, #28]
 801425c:	2201      	movs	r2, #1
 801425e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8014260:	69fb      	ldr	r3, [r7, #28]
 8014262:	2200      	movs	r2, #0
 8014264:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8014266:	4b12      	ldr	r3, [pc, #72]	; (80142b0 <_tx_thread_shell_entry+0x94>)
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	3301      	adds	r3, #1
 801426c:	4a10      	ldr	r2, [pc, #64]	; (80142b0 <_tx_thread_shell_entry+0x94>)
 801426e:	6013      	str	r3, [r2, #0]
 8014270:	69bb      	ldr	r3, [r7, #24]
 8014272:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014274:	68bb      	ldr	r3, [r7, #8]
 8014276:	f383 8810 	msr	PRIMASK, r3
}
 801427a:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 801427c:	f3ef 8314 	mrs	r3, CONTROL
 8014280:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8014282:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8014284:	617b      	str	r3, [r7, #20]
 8014286:	697b      	ldr	r3, [r7, #20]
 8014288:	f023 0304 	bic.w	r3, r3, #4
 801428c:	617b      	str	r3, [r7, #20]
 801428e:	697b      	ldr	r3, [r7, #20]
 8014290:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8014292:	693b      	ldr	r3, [r7, #16]
 8014294:	f383 8814 	msr	CONTROL, r3
}
 8014298:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 801429a:	69f8      	ldr	r0, [r7, #28]
 801429c:	f000 f944 	bl	8014528 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80142a0:	bf00      	nop
 80142a2:	3720      	adds	r7, #32
 80142a4:	46bd      	mov	sp, r7
 80142a6:	bd80      	pop	{r7, pc}
 80142a8:	20197344 	.word	0x20197344
 80142ac:	201973e0 	.word	0x201973e0
 80142b0:	201973dc 	.word	0x201973dc

080142b4 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 80142b4:	b480      	push	{r7}
 80142b6:	b089      	sub	sp, #36	; 0x24
 80142b8:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80142ba:	4b17      	ldr	r3, [pc, #92]	; (8014318 <_tx_thread_system_preempt_check+0x64>)
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 80142c0:	69fb      	ldr	r3, [r7, #28]
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d121      	bne.n	801430a <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80142c6:	4b15      	ldr	r3, [pc, #84]	; (801431c <_tx_thread_system_preempt_check+0x68>)
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 80142cc:	4b14      	ldr	r3, [pc, #80]	; (8014320 <_tx_thread_system_preempt_check+0x6c>)
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 80142d2:	69ba      	ldr	r2, [r7, #24]
 80142d4:	697b      	ldr	r3, [r7, #20]
 80142d6:	429a      	cmp	r2, r3
 80142d8:	d017      	beq.n	801430a <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80142da:	4b12      	ldr	r3, [pc, #72]	; (8014324 <_tx_thread_system_preempt_check+0x70>)
 80142dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142e0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80142e2:	f3ef 8305 	mrs	r3, IPSR
 80142e6:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80142e8:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d10c      	bne.n	8014308 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80142ee:	f3ef 8310 	mrs	r3, PRIMASK
 80142f2:	60fb      	str	r3, [r7, #12]
    return(posture);
 80142f4:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 80142f6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80142f8:	b662      	cpsie	i
}
 80142fa:	bf00      	nop
 80142fc:	68bb      	ldr	r3, [r7, #8]
 80142fe:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	f383 8810 	msr	PRIMASK, r3
}
 8014306:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8014308:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 801430a:	bf00      	nop
 801430c:	3724      	adds	r7, #36	; 0x24
 801430e:	46bd      	mov	sp, r7
 8014310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014314:	4770      	bx	lr
 8014316:	bf00      	nop
 8014318:	201973dc 	.word	0x201973dc
 801431c:	20197344 	.word	0x20197344
 8014320:	20197348 	.word	0x20197348
 8014324:	e000ed04 	.word	0xe000ed04

08014328 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8014328:	b580      	push	{r7, lr}
 801432a:	b096      	sub	sp, #88	; 0x58
 801432c:	af00      	add	r7, sp, #0
 801432e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014330:	f3ef 8310 	mrs	r3, PRIMASK
 8014334:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8014336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8014338:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 801433a:	b672      	cpsid	i
    return(int_posture);
 801433c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 801433e:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014344:	2b00      	cmp	r3, #0
 8014346:	d005      	beq.n	8014354 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	334c      	adds	r3, #76	; 0x4c
 801434c:	4618      	mov	r0, r3
 801434e:	f000 fb91 	bl	8014a74 <_tx_timer_system_deactivate>
 8014352:	e002      	b.n	801435a <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	2200      	movs	r2, #0
 8014358:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 801435a:	4b6c      	ldr	r3, [pc, #432]	; (801450c <_tx_thread_system_resume+0x1e4>)
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	3b01      	subs	r3, #1
 8014360:	4a6a      	ldr	r2, [pc, #424]	; (801450c <_tx_thread_system_resume+0x1e4>)
 8014362:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014368:	2b00      	cmp	r3, #0
 801436a:	f040 8083 	bne.w	8014474 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014372:	2b00      	cmp	r3, #0
 8014374:	f000 8097 	beq.w	80144a6 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801437c:	2b00      	cmp	r3, #0
 801437e:	d172      	bne.n	8014466 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	2200      	movs	r2, #0
 8014384:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801438a:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 801438c:	4a60      	ldr	r2, [pc, #384]	; (8014510 <_tx_thread_system_resume+0x1e8>)
 801438e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014394:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 8014396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014398:	2b00      	cmp	r3, #0
 801439a:	d154      	bne.n	8014446 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 801439c:	495c      	ldr	r1, [pc, #368]	; (8014510 <_tx_thread_system_resume+0x1e8>)
 801439e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80143a0:	687a      	ldr	r2, [r7, #4]
 80143a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	687a      	ldr	r2, [r7, #4]
 80143aa:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	687a      	ldr	r2, [r7, #4]
 80143b0:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80143b2:	2201      	movs	r2, #1
 80143b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80143b6:	fa02 f303 	lsl.w	r3, r2, r3
 80143ba:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80143bc:	4b55      	ldr	r3, [pc, #340]	; (8014514 <_tx_thread_system_resume+0x1ec>)
 80143be:	681a      	ldr	r2, [r3, #0]
 80143c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80143c2:	4313      	orrs	r3, r2
 80143c4:	4a53      	ldr	r2, [pc, #332]	; (8014514 <_tx_thread_system_resume+0x1ec>)
 80143c6:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 80143c8:	4b53      	ldr	r3, [pc, #332]	; (8014518 <_tx_thread_system_resume+0x1f0>)
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80143ce:	429a      	cmp	r2, r3
 80143d0:	d269      	bcs.n	80144a6 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 80143d2:	4a51      	ldr	r2, [pc, #324]	; (8014518 <_tx_thread_system_resume+0x1f0>)
 80143d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80143d6:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 80143d8:	4b50      	ldr	r3, [pc, #320]	; (801451c <_tx_thread_system_resume+0x1f4>)
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 80143de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d103      	bne.n	80143ec <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 80143e4:	4a4d      	ldr	r2, [pc, #308]	; (801451c <_tx_thread_system_resume+0x1f4>)
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	6013      	str	r3, [r2, #0]
 80143ea:	e05c      	b.n	80144a6 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 80143ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80143ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80143f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80143f2:	429a      	cmp	r2, r3
 80143f4:	d257      	bcs.n	80144a6 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 80143f6:	4a49      	ldr	r2, [pc, #292]	; (801451c <_tx_thread_system_resume+0x1f4>)
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	6013      	str	r3, [r2, #0]
 80143fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80143fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014402:	f383 8810 	msr	PRIMASK, r3
}
 8014406:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8014408:	4b40      	ldr	r3, [pc, #256]	; (801450c <_tx_thread_system_resume+0x1e4>)
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 801440e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014410:	2b00      	cmp	r3, #0
 8014412:	d174      	bne.n	80144fe <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8014414:	4b42      	ldr	r3, [pc, #264]	; (8014520 <_tx_thread_system_resume+0x1f8>)
 8014416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801441a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801441c:	f3ef 8305 	mrs	r3, IPSR
 8014420:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8014422:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (_tx_ipsr_get() == 0)
 8014424:	2b00      	cmp	r3, #0
 8014426:	d10c      	bne.n	8014442 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014428:	f3ef 8310 	mrs	r3, PRIMASK
 801442c:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8014430:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8014432:	b662      	cpsie	i
}
 8014434:	bf00      	nop
 8014436:	6a3b      	ldr	r3, [r7, #32]
 8014438:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801443a:	69fb      	ldr	r3, [r7, #28]
 801443c:	f383 8810 	msr	PRIMASK, r3
}
 8014440:	bf00      	nop
}
 8014442:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8014444:	e05b      	b.n	80144fe <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8014446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801444a:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 801444c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801444e:	687a      	ldr	r2, [r7, #4]
 8014450:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8014452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014454:	687a      	ldr	r2, [r7, #4]
 8014456:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801445c:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014462:	621a      	str	r2, [r3, #32]
 8014464:	e01f      	b.n	80144a6 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	2200      	movs	r2, #0
 801446a:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	2203      	movs	r2, #3
 8014470:	631a      	str	r2, [r3, #48]	; 0x30
 8014472:	e018      	b.n	80144a6 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014478:	2b01      	cmp	r3, #1
 801447a:	d014      	beq.n	80144a6 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014480:	2b02      	cmp	r3, #2
 8014482:	d010      	beq.n	80144a6 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014488:	2b00      	cmp	r3, #0
 801448a:	d106      	bne.n	801449a <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	2200      	movs	r2, #0
 8014490:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	2200      	movs	r2, #0
 8014496:	631a      	str	r2, [r3, #48]	; 0x30
 8014498:	e005      	b.n	80144a6 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	2200      	movs	r2, #0
 801449e:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	2203      	movs	r2, #3
 80144a4:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80144a6:	4b1f      	ldr	r3, [pc, #124]	; (8014524 <_tx_thread_system_resume+0x1fc>)
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80144ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80144ae:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80144b0:	69bb      	ldr	r3, [r7, #24]
 80144b2:	f383 8810 	msr	PRIMASK, r3
}
 80144b6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80144b8:	4b18      	ldr	r3, [pc, #96]	; (801451c <_tx_thread_system_resume+0x1f4>)
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80144be:	429a      	cmp	r2, r3
 80144c0:	d020      	beq.n	8014504 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80144c2:	4b12      	ldr	r3, [pc, #72]	; (801450c <_tx_thread_system_resume+0x1e4>)
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 80144c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d11a      	bne.n	8014504 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80144ce:	4b14      	ldr	r3, [pc, #80]	; (8014520 <_tx_thread_system_resume+0x1f8>)
 80144d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144d4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80144d6:	f3ef 8305 	mrs	r3, IPSR
 80144da:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80144dc:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d10f      	bne.n	8014502 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80144e2:	f3ef 8310 	mrs	r3, PRIMASK
 80144e6:	613b      	str	r3, [r7, #16]
    return(posture);
 80144e8:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 80144ea:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80144ec:	b662      	cpsie	i
}
 80144ee:	bf00      	nop
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80144f4:	68bb      	ldr	r3, [r7, #8]
 80144f6:	f383 8810 	msr	PRIMASK, r3
}
 80144fa:	bf00      	nop
}
 80144fc:	e001      	b.n	8014502 <_tx_thread_system_resume+0x1da>
                                return;
 80144fe:	bf00      	nop
 8014500:	e000      	b.n	8014504 <_tx_thread_system_resume+0x1dc>
 8014502:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8014504:	3758      	adds	r7, #88	; 0x58
 8014506:	46bd      	mov	sp, r7
 8014508:	bd80      	pop	{r7, pc}
 801450a:	bf00      	nop
 801450c:	201973dc 	.word	0x201973dc
 8014510:	2019735c 	.word	0x2019735c
 8014514:	20197354 	.word	0x20197354
 8014518:	20197358 	.word	0x20197358
 801451c:	20197348 	.word	0x20197348
 8014520:	e000ed04 	.word	0xe000ed04
 8014524:	20197344 	.word	0x20197344

08014528 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8014528:	b580      	push	{r7, lr}
 801452a:	b09e      	sub	sp, #120	; 0x78
 801452c:	af00      	add	r7, sp, #0
 801452e:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8014530:	4b81      	ldr	r3, [pc, #516]	; (8014738 <_tx_thread_system_suspend+0x210>)
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014536:	f3ef 8310 	mrs	r3, PRIMASK
 801453a:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 801453c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 801453e:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8014540:	b672      	cpsid	i
    return(int_posture);
 8014542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8014544:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8014546:	687a      	ldr	r2, [r7, #4]
 8014548:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801454a:	429a      	cmp	r2, r3
 801454c:	d112      	bne.n	8014574 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014552:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8014554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014556:	2b00      	cmp	r3, #0
 8014558:	d008      	beq.n	801456c <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 801455a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801455c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014560:	d004      	beq.n	801456c <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	334c      	adds	r3, #76	; 0x4c
 8014566:	4618      	mov	r0, r3
 8014568:	f000 fa22 	bl	80149b0 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	69db      	ldr	r3, [r3, #28]
 8014570:	4a72      	ldr	r2, [pc, #456]	; (801473c <_tx_thread_system_suspend+0x214>)
 8014572:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8014574:	4b72      	ldr	r3, [pc, #456]	; (8014740 <_tx_thread_system_suspend+0x218>)
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	3b01      	subs	r3, #1
 801457a:	4a71      	ldr	r2, [pc, #452]	; (8014740 <_tx_thread_system_suspend+0x218>)
 801457c:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014582:	2b01      	cmp	r3, #1
 8014584:	f040 80a6 	bne.w	80146d4 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	2200      	movs	r2, #0
 801458c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014592:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	6a1b      	ldr	r3, [r3, #32]
 8014598:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 801459a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	429a      	cmp	r2, r3
 80145a0:	d015      	beq.n	80145ce <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145a6:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 80145a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80145aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80145ac:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 80145ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80145b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80145b2:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 80145b4:	4a63      	ldr	r2, [pc, #396]	; (8014744 <_tx_thread_system_suspend+0x21c>)
 80145b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80145b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80145bc:	687a      	ldr	r2, [r7, #4]
 80145be:	429a      	cmp	r2, r3
 80145c0:	d157      	bne.n	8014672 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 80145c2:	4960      	ldr	r1, [pc, #384]	; (8014744 <_tx_thread_system_suspend+0x21c>)
 80145c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80145c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80145c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80145cc:	e051      	b.n	8014672 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 80145ce:	4a5d      	ldr	r2, [pc, #372]	; (8014744 <_tx_thread_system_suspend+0x21c>)
 80145d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80145d2:	2100      	movs	r1, #0
 80145d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 80145d8:	2201      	movs	r2, #1
 80145da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80145dc:	fa02 f303 	lsl.w	r3, r2, r3
 80145e0:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 80145e2:	4b59      	ldr	r3, [pc, #356]	; (8014748 <_tx_thread_system_suspend+0x220>)
 80145e4:	681a      	ldr	r2, [r3, #0]
 80145e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80145e8:	43db      	mvns	r3, r3
 80145ea:	4013      	ands	r3, r2
 80145ec:	4a56      	ldr	r2, [pc, #344]	; (8014748 <_tx_thread_system_suspend+0x220>)
 80145ee:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 80145f0:	2300      	movs	r3, #0
 80145f2:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 80145f4:	4b54      	ldr	r3, [pc, #336]	; (8014748 <_tx_thread_system_suspend+0x220>)
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 80145fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d12b      	bne.n	8014658 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8014600:	4b52      	ldr	r3, [pc, #328]	; (801474c <_tx_thread_system_suspend+0x224>)
 8014602:	2220      	movs	r2, #32
 8014604:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8014606:	4b52      	ldr	r3, [pc, #328]	; (8014750 <_tx_thread_system_suspend+0x228>)
 8014608:	2200      	movs	r2, #0
 801460a:	601a      	str	r2, [r3, #0]
 801460c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801460e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014612:	f383 8810 	msr	PRIMASK, r3
}
 8014616:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8014618:	4b49      	ldr	r3, [pc, #292]	; (8014740 <_tx_thread_system_suspend+0x218>)
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 801461e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014620:	2b00      	cmp	r3, #0
 8014622:	f040 8081 	bne.w	8014728 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8014626:	4b4b      	ldr	r3, [pc, #300]	; (8014754 <_tx_thread_system_suspend+0x22c>)
 8014628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801462c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801462e:	f3ef 8305 	mrs	r3, IPSR
 8014632:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8014634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 8014636:	2b00      	cmp	r3, #0
 8014638:	d10c      	bne.n	8014654 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801463a:	f3ef 8310 	mrs	r3, PRIMASK
 801463e:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8014640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8014642:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8014644:	b662      	cpsie	i
}
 8014646:	bf00      	nop
 8014648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801464a:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801464c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801464e:	f383 8810 	msr	PRIMASK, r3
}
 8014652:	bf00      	nop
}
 8014654:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8014656:	e067      	b.n	8014728 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8014658:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801465a:	fa93 f3a3 	rbit	r3, r3
 801465e:	65bb      	str	r3, [r7, #88]	; 0x58
 8014660:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014662:	fab3 f383 	clz	r3, r3
 8014666:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8014668:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801466a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801466c:	4413      	add	r3, r2
 801466e:	4a37      	ldr	r2, [pc, #220]	; (801474c <_tx_thread_system_suspend+0x224>)
 8014670:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8014672:	4b37      	ldr	r3, [pc, #220]	; (8014750 <_tx_thread_system_suspend+0x228>)
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	687a      	ldr	r2, [r7, #4]
 8014678:	429a      	cmp	r2, r3
 801467a:	d12b      	bne.n	80146d4 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 801467c:	4b33      	ldr	r3, [pc, #204]	; (801474c <_tx_thread_system_suspend+0x224>)
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	4a30      	ldr	r2, [pc, #192]	; (8014744 <_tx_thread_system_suspend+0x21c>)
 8014682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014686:	4a32      	ldr	r2, [pc, #200]	; (8014750 <_tx_thread_system_suspend+0x228>)
 8014688:	6013      	str	r3, [r2, #0]
 801468a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801468c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801468e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014690:	f383 8810 	msr	PRIMASK, r3
}
 8014694:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8014696:	4b2a      	ldr	r3, [pc, #168]	; (8014740 <_tx_thread_system_suspend+0x218>)
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 801469c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d144      	bne.n	801472c <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80146a2:	4b2c      	ldr	r3, [pc, #176]	; (8014754 <_tx_thread_system_suspend+0x22c>)
 80146a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80146a8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80146aa:	f3ef 8305 	mrs	r3, IPSR
 80146ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 80146b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d10c      	bne.n	80146d0 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80146b6:	f3ef 8310 	mrs	r3, PRIMASK
 80146ba:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80146bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 80146be:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 80146c0:	b662      	cpsie	i
}
 80146c2:	bf00      	nop
 80146c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146c6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80146c8:	6a3b      	ldr	r3, [r7, #32]
 80146ca:	f383 8810 	msr	PRIMASK, r3
}
 80146ce:	bf00      	nop
}
 80146d0:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 80146d2:	e02b      	b.n	801472c <_tx_thread_system_suspend+0x204>
 80146d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80146d6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80146d8:	69fb      	ldr	r3, [r7, #28]
 80146da:	f383 8810 	msr	PRIMASK, r3
}
 80146de:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80146e0:	4b1b      	ldr	r3, [pc, #108]	; (8014750 <_tx_thread_system_suspend+0x228>)
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80146e6:	429a      	cmp	r2, r3
 80146e8:	d022      	beq.n	8014730 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80146ea:	4b15      	ldr	r3, [pc, #84]	; (8014740 <_tx_thread_system_suspend+0x218>)
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 80146f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d11c      	bne.n	8014730 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80146f6:	4b17      	ldr	r3, [pc, #92]	; (8014754 <_tx_thread_system_suspend+0x22c>)
 80146f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80146fc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80146fe:	f3ef 8305 	mrs	r3, IPSR
 8014702:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8014704:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 8014706:	2b00      	cmp	r3, #0
 8014708:	d10c      	bne.n	8014724 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801470a:	f3ef 8310 	mrs	r3, PRIMASK
 801470e:	617b      	str	r3, [r7, #20]
    return(posture);
 8014710:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8014712:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8014714:	b662      	cpsie	i
}
 8014716:	bf00      	nop
 8014718:	693b      	ldr	r3, [r7, #16]
 801471a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801471c:	68fb      	ldr	r3, [r7, #12]
 801471e:	f383 8810 	msr	PRIMASK, r3
}
 8014722:	bf00      	nop
}
 8014724:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8014726:	e003      	b.n	8014730 <_tx_thread_system_suspend+0x208>
                return;
 8014728:	bf00      	nop
 801472a:	e002      	b.n	8014732 <_tx_thread_system_suspend+0x20a>
            return;
 801472c:	bf00      	nop
 801472e:	e000      	b.n	8014732 <_tx_thread_system_suspend+0x20a>
    return;
 8014730:	bf00      	nop
}
 8014732:	3778      	adds	r7, #120	; 0x78
 8014734:	46bd      	mov	sp, r7
 8014736:	bd80      	pop	{r7, pc}
 8014738:	20197344 	.word	0x20197344
 801473c:	20197948 	.word	0x20197948
 8014740:	201973dc 	.word	0x201973dc
 8014744:	2019735c 	.word	0x2019735c
 8014748:	20197354 	.word	0x20197354
 801474c:	20197358 	.word	0x20197358
 8014750:	20197348 	.word	0x20197348
 8014754:	e000ed04 	.word	0xe000ed04

08014758 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8014758:	b480      	push	{r7}
 801475a:	b087      	sub	sp, #28
 801475c:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801475e:	4b21      	ldr	r3, [pc, #132]	; (80147e4 <_tx_thread_time_slice+0x8c>)
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014764:	f3ef 8310 	mrs	r3, PRIMASK
 8014768:	60fb      	str	r3, [r7, #12]
    return(posture);
 801476a:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 801476c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 801476e:	b672      	cpsid	i
    return(int_posture);
 8014770:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8014772:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8014774:	4b1c      	ldr	r3, [pc, #112]	; (80147e8 <_tx_thread_time_slice+0x90>)
 8014776:	2200      	movs	r2, #0
 8014778:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 801477a:	697b      	ldr	r3, [r7, #20]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d024      	beq.n	80147ca <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8014780:	697b      	ldr	r3, [r7, #20]
 8014782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014784:	2b00      	cmp	r3, #0
 8014786:	d120      	bne.n	80147ca <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8014788:	697b      	ldr	r3, [r7, #20]
 801478a:	69da      	ldr	r2, [r3, #28]
 801478c:	697b      	ldr	r3, [r7, #20]
 801478e:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8014790:	697b      	ldr	r3, [r7, #20]
 8014792:	699b      	ldr	r3, [r3, #24]
 8014794:	4a15      	ldr	r2, [pc, #84]	; (80147ec <_tx_thread_time_slice+0x94>)
 8014796:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8014798:	697b      	ldr	r3, [r7, #20]
 801479a:	6a1b      	ldr	r3, [r3, #32]
 801479c:	697a      	ldr	r2, [r7, #20]
 801479e:	429a      	cmp	r2, r3
 80147a0:	d013      	beq.n	80147ca <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 80147a2:	697b      	ldr	r3, [r7, #20]
 80147a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147a6:	697b      	ldr	r3, [r7, #20]
 80147a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80147aa:	429a      	cmp	r2, r3
 80147ac:	d10d      	bne.n	80147ca <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 80147ae:	697b      	ldr	r3, [r7, #20]
 80147b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147b2:	697a      	ldr	r2, [r7, #20]
 80147b4:	6a12      	ldr	r2, [r2, #32]
 80147b6:	490e      	ldr	r1, [pc, #56]	; (80147f0 <_tx_thread_time_slice+0x98>)
 80147b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80147bc:	4b0d      	ldr	r3, [pc, #52]	; (80147f4 <_tx_thread_time_slice+0x9c>)
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	4a0b      	ldr	r2, [pc, #44]	; (80147f0 <_tx_thread_time_slice+0x98>)
 80147c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80147c6:	4a0c      	ldr	r2, [pc, #48]	; (80147f8 <_tx_thread_time_slice+0xa0>)
 80147c8:	6013      	str	r3, [r2, #0]
 80147ca:	693b      	ldr	r3, [r7, #16]
 80147cc:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	f383 8810 	msr	PRIMASK, r3
}
 80147d4:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 80147d6:	bf00      	nop
 80147d8:	371c      	adds	r7, #28
 80147da:	46bd      	mov	sp, r7
 80147dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147e0:	4770      	bx	lr
 80147e2:	bf00      	nop
 80147e4:	20197344 	.word	0x20197344
 80147e8:	201973ec 	.word	0x201973ec
 80147ec:	20197948 	.word	0x20197948
 80147f0:	2019735c 	.word	0x2019735c
 80147f4:	20197358 	.word	0x20197358
 80147f8:	20197348 	.word	0x20197348

080147fc <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 80147fc:	b580      	push	{r7, lr}
 80147fe:	b08a      	sub	sp, #40	; 0x28
 8014800:	af00      	add	r7, sp, #0
 8014802:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014808:	f3ef 8310 	mrs	r3, PRIMASK
 801480c:	617b      	str	r3, [r7, #20]
    return(posture);
 801480e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8014810:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014812:	b672      	cpsid	i
    return(int_posture);
 8014814:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8014816:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8014818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801481a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801481c:	2b04      	cmp	r3, #4
 801481e:	d10e      	bne.n	801483e <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8014820:	4b13      	ldr	r3, [pc, #76]	; (8014870 <_tx_thread_timeout+0x74>)
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	3301      	adds	r3, #1
 8014826:	4a12      	ldr	r2, [pc, #72]	; (8014870 <_tx_thread_timeout+0x74>)
 8014828:	6013      	str	r3, [r2, #0]
 801482a:	6a3b      	ldr	r3, [r7, #32]
 801482c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	f383 8810 	msr	PRIMASK, r3
}
 8014834:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8014836:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014838:	f7ff fd76 	bl	8014328 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 801483c:	e013      	b.n	8014866 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 801483e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014840:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014842:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8014844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014846:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801484a:	61bb      	str	r3, [r7, #24]
 801484c:	6a3b      	ldr	r3, [r7, #32]
 801484e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014850:	68bb      	ldr	r3, [r7, #8]
 8014852:	f383 8810 	msr	PRIMASK, r3
}
 8014856:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8014858:	69fb      	ldr	r3, [r7, #28]
 801485a:	2b00      	cmp	r3, #0
 801485c:	d003      	beq.n	8014866 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 801485e:	69fb      	ldr	r3, [r7, #28]
 8014860:	69b9      	ldr	r1, [r7, #24]
 8014862:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014864:	4798      	blx	r3
}
 8014866:	bf00      	nop
 8014868:	3728      	adds	r7, #40	; 0x28
 801486a:	46bd      	mov	sp, r7
 801486c:	bd80      	pop	{r7, pc}
 801486e:	bf00      	nop
 8014870:	201973dc 	.word	0x201973dc

08014874 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8014874:	b580      	push	{r7, lr}
 8014876:	b084      	sub	sp, #16
 8014878:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801487a:	f3ef 8310 	mrs	r3, PRIMASK
 801487e:	607b      	str	r3, [r7, #4]
    return(posture);
 8014880:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8014882:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014884:	b672      	cpsid	i
    return(int_posture);
 8014886:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8014888:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 801488a:	4b09      	ldr	r3, [pc, #36]	; (80148b0 <_tx_timer_expiration_process+0x3c>)
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	3301      	adds	r3, #1
 8014890:	4a07      	ldr	r2, [pc, #28]	; (80148b0 <_tx_timer_expiration_process+0x3c>)
 8014892:	6013      	str	r3, [r2, #0]
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014898:	68bb      	ldr	r3, [r7, #8]
 801489a:	f383 8810 	msr	PRIMASK, r3
}
 801489e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 80148a0:	4804      	ldr	r0, [pc, #16]	; (80148b4 <_tx_timer_expiration_process+0x40>)
 80148a2:	f7ff fd41 	bl	8014328 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80148a6:	bf00      	nop
 80148a8:	3710      	adds	r7, #16
 80148aa:	46bd      	mov	sp, r7
 80148ac:	bd80      	pop	{r7, pc}
 80148ae:	bf00      	nop
 80148b0:	201973dc 	.word	0x201973dc
 80148b4:	2019748c 	.word	0x2019748c

080148b8 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 80148b8:	b590      	push	{r4, r7, lr}
 80148ba:	b089      	sub	sp, #36	; 0x24
 80148bc:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 80148be:	4b28      	ldr	r3, [pc, #160]	; (8014960 <_tx_timer_initialize+0xa8>)
 80148c0:	2200      	movs	r2, #0
 80148c2:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 80148c4:	4b27      	ldr	r3, [pc, #156]	; (8014964 <_tx_timer_initialize+0xac>)
 80148c6:	2200      	movs	r2, #0
 80148c8:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 80148ca:	4b27      	ldr	r3, [pc, #156]	; (8014968 <_tx_timer_initialize+0xb0>)
 80148cc:	2200      	movs	r2, #0
 80148ce:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 80148d0:	4b26      	ldr	r3, [pc, #152]	; (801496c <_tx_timer_initialize+0xb4>)
 80148d2:	2200      	movs	r2, #0
 80148d4:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 80148d6:	4b26      	ldr	r3, [pc, #152]	; (8014970 <_tx_timer_initialize+0xb8>)
 80148d8:	2200      	movs	r2, #0
 80148da:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 80148dc:	2280      	movs	r2, #128	; 0x80
 80148de:	2100      	movs	r1, #0
 80148e0:	4824      	ldr	r0, [pc, #144]	; (8014974 <_tx_timer_initialize+0xbc>)
 80148e2:	f013 fc43 	bl	802816c <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 80148e6:	4b24      	ldr	r3, [pc, #144]	; (8014978 <_tx_timer_initialize+0xc0>)
 80148e8:	4a22      	ldr	r2, [pc, #136]	; (8014974 <_tx_timer_initialize+0xbc>)
 80148ea:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 80148ec:	4b23      	ldr	r3, [pc, #140]	; (801497c <_tx_timer_initialize+0xc4>)
 80148ee:	4a21      	ldr	r2, [pc, #132]	; (8014974 <_tx_timer_initialize+0xbc>)
 80148f0:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 80148f2:	4b23      	ldr	r3, [pc, #140]	; (8014980 <_tx_timer_initialize+0xc8>)
 80148f4:	4a23      	ldr	r2, [pc, #140]	; (8014984 <_tx_timer_initialize+0xcc>)
 80148f6:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 80148f8:	4b21      	ldr	r3, [pc, #132]	; (8014980 <_tx_timer_initialize+0xc8>)
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	3304      	adds	r3, #4
 80148fe:	4a20      	ldr	r2, [pc, #128]	; (8014980 <_tx_timer_initialize+0xc8>)
 8014900:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8014902:	4b21      	ldr	r3, [pc, #132]	; (8014988 <_tx_timer_initialize+0xd0>)
 8014904:	4a21      	ldr	r2, [pc, #132]	; (801498c <_tx_timer_initialize+0xd4>)
 8014906:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8014908:	4b21      	ldr	r3, [pc, #132]	; (8014990 <_tx_timer_initialize+0xd8>)
 801490a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801490e:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8014910:	4b20      	ldr	r3, [pc, #128]	; (8014994 <_tx_timer_initialize+0xdc>)
 8014912:	2200      	movs	r2, #0
 8014914:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8014916:	4b1c      	ldr	r3, [pc, #112]	; (8014988 <_tx_timer_initialize+0xd0>)
 8014918:	681b      	ldr	r3, [r3, #0]
 801491a:	4a1d      	ldr	r2, [pc, #116]	; (8014990 <_tx_timer_initialize+0xd8>)
 801491c:	6812      	ldr	r2, [r2, #0]
 801491e:	491d      	ldr	r1, [pc, #116]	; (8014994 <_tx_timer_initialize+0xdc>)
 8014920:	6809      	ldr	r1, [r1, #0]
 8014922:	481c      	ldr	r0, [pc, #112]	; (8014994 <_tx_timer_initialize+0xdc>)
 8014924:	6800      	ldr	r0, [r0, #0]
 8014926:	2400      	movs	r4, #0
 8014928:	9405      	str	r4, [sp, #20]
 801492a:	2400      	movs	r4, #0
 801492c:	9404      	str	r4, [sp, #16]
 801492e:	9003      	str	r0, [sp, #12]
 8014930:	9102      	str	r1, [sp, #8]
 8014932:	9201      	str	r2, [sp, #4]
 8014934:	9300      	str	r3, [sp, #0]
 8014936:	4b18      	ldr	r3, [pc, #96]	; (8014998 <_tx_timer_initialize+0xe0>)
 8014938:	4a18      	ldr	r2, [pc, #96]	; (801499c <_tx_timer_initialize+0xe4>)
 801493a:	4919      	ldr	r1, [pc, #100]	; (80149a0 <_tx_timer_initialize+0xe8>)
 801493c:	4819      	ldr	r0, [pc, #100]	; (80149a4 <_tx_timer_initialize+0xec>)
 801493e:	f7ff fb3b 	bl	8013fb8 <_tx_thread_create>
 8014942:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	2b00      	cmp	r3, #0
 8014948:	d1e5      	bne.n	8014916 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 801494a:	4b17      	ldr	r3, [pc, #92]	; (80149a8 <_tx_timer_initialize+0xf0>)
 801494c:	2200      	movs	r2, #0
 801494e:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8014950:	4b16      	ldr	r3, [pc, #88]	; (80149ac <_tx_timer_initialize+0xf4>)
 8014952:	2200      	movs	r2, #0
 8014954:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8014956:	bf00      	nop
 8014958:	370c      	adds	r7, #12
 801495a:	46bd      	mov	sp, r7
 801495c:	bd90      	pop	{r4, r7, pc}
 801495e:	bf00      	nop
 8014960:	201973e8 	.word	0x201973e8
 8014964:	20197948 	.word	0x20197948
 8014968:	201973ec 	.word	0x201973ec
 801496c:	2019747c 	.word	0x2019747c
 8014970:	20197488 	.word	0x20197488
 8014974:	201973f0 	.word	0x201973f0
 8014978:	20197470 	.word	0x20197470
 801497c:	20197478 	.word	0x20197478
 8014980:	20197474 	.word	0x20197474
 8014984:	2019746c 	.word	0x2019746c
 8014988:	2019753c 	.word	0x2019753c
 801498c:	20197548 	.word	0x20197548
 8014990:	20197540 	.word	0x20197540
 8014994:	20197544 	.word	0x20197544
 8014998:	4154494d 	.word	0x4154494d
 801499c:	08014ae5 	.word	0x08014ae5
 80149a0:	080296c4 	.word	0x080296c4
 80149a4:	2019748c 	.word	0x2019748c
 80149a8:	20197480 	.word	0x20197480
 80149ac:	20197484 	.word	0x20197484

080149b0 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 80149b0:	b480      	push	{r7}
 80149b2:	b089      	sub	sp, #36	; 0x24
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 80149be:	697b      	ldr	r3, [r7, #20]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d04a      	beq.n	8014a5a <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 80149c4:	697b      	ldr	r3, [r7, #20]
 80149c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149ca:	d046      	beq.n	8014a5a <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	699b      	ldr	r3, [r3, #24]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d142      	bne.n	8014a5a <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 80149d4:	697b      	ldr	r3, [r7, #20]
 80149d6:	2b20      	cmp	r3, #32
 80149d8:	d902      	bls.n	80149e0 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 80149da:	231f      	movs	r3, #31
 80149dc:	61bb      	str	r3, [r7, #24]
 80149de:	e002      	b.n	80149e6 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 80149e0:	697b      	ldr	r3, [r7, #20]
 80149e2:	3b01      	subs	r3, #1
 80149e4:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 80149e6:	4b20      	ldr	r3, [pc, #128]	; (8014a68 <_tx_timer_system_activate+0xb8>)
 80149e8:	681a      	ldr	r2, [r3, #0]
 80149ea:	69bb      	ldr	r3, [r7, #24]
 80149ec:	009b      	lsls	r3, r3, #2
 80149ee:	4413      	add	r3, r2
 80149f0:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 80149f2:	4b1e      	ldr	r3, [pc, #120]	; (8014a6c <_tx_timer_system_activate+0xbc>)
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	69fa      	ldr	r2, [r7, #28]
 80149f8:	429a      	cmp	r2, r3
 80149fa:	d30b      	bcc.n	8014a14 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 80149fc:	4b1b      	ldr	r3, [pc, #108]	; (8014a6c <_tx_timer_system_activate+0xbc>)
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	69fa      	ldr	r2, [r7, #28]
 8014a02:	1ad3      	subs	r3, r2, r3
 8014a04:	109b      	asrs	r3, r3, #2
 8014a06:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8014a08:	4b19      	ldr	r3, [pc, #100]	; (8014a70 <_tx_timer_system_activate+0xc0>)
 8014a0a:	681a      	ldr	r2, [r3, #0]
 8014a0c:	693b      	ldr	r3, [r7, #16]
 8014a0e:	009b      	lsls	r3, r3, #2
 8014a10:	4413      	add	r3, r2
 8014a12:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8014a14:	69fb      	ldr	r3, [r7, #28]
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d109      	bne.n	8014a30 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	687a      	ldr	r2, [r7, #4]
 8014a20:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	687a      	ldr	r2, [r7, #4]
 8014a26:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8014a28:	69fb      	ldr	r3, [r7, #28]
 8014a2a:	687a      	ldr	r2, [r7, #4]
 8014a2c:	601a      	str	r2, [r3, #0]
 8014a2e:	e011      	b.n	8014a54 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8014a30:	69fb      	ldr	r3, [r7, #28]
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	695b      	ldr	r3, [r3, #20]
 8014a3a:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8014a3c:	68bb      	ldr	r3, [r7, #8]
 8014a3e:	687a      	ldr	r2, [r7, #4]
 8014a40:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	687a      	ldr	r2, [r7, #4]
 8014a46:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	68fa      	ldr	r2, [r7, #12]
 8014a4c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	68ba      	ldr	r2, [r7, #8]
 8014a52:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	69fa      	ldr	r2, [r7, #28]
 8014a58:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8014a5a:	bf00      	nop
 8014a5c:	3724      	adds	r7, #36	; 0x24
 8014a5e:	46bd      	mov	sp, r7
 8014a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a64:	4770      	bx	lr
 8014a66:	bf00      	nop
 8014a68:	20197478 	.word	0x20197478
 8014a6c:	20197474 	.word	0x20197474
 8014a70:	20197470 	.word	0x20197470

08014a74 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8014a74:	b480      	push	{r7}
 8014a76:	b087      	sub	sp, #28
 8014a78:	af00      	add	r7, sp, #0
 8014a7a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	699b      	ldr	r3, [r3, #24]
 8014a80:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8014a82:	697b      	ldr	r3, [r7, #20]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d026      	beq.n	8014ad6 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	691b      	ldr	r3, [r3, #16]
 8014a8c:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8014a8e:	687a      	ldr	r2, [r7, #4]
 8014a90:	693b      	ldr	r3, [r7, #16]
 8014a92:	429a      	cmp	r2, r3
 8014a94:	d108      	bne.n	8014aa8 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8014a96:	697b      	ldr	r3, [r7, #20]
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	687a      	ldr	r2, [r7, #4]
 8014a9c:	429a      	cmp	r2, r3
 8014a9e:	d117      	bne.n	8014ad0 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8014aa0:	697b      	ldr	r3, [r7, #20]
 8014aa2:	2200      	movs	r2, #0
 8014aa4:	601a      	str	r2, [r3, #0]
 8014aa6:	e013      	b.n	8014ad0 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	695b      	ldr	r3, [r3, #20]
 8014aac:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8014aae:	693b      	ldr	r3, [r7, #16]
 8014ab0:	68fa      	ldr	r2, [r7, #12]
 8014ab2:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	693a      	ldr	r2, [r7, #16]
 8014ab8:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8014aba:	697b      	ldr	r3, [r7, #20]
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	687a      	ldr	r2, [r7, #4]
 8014ac0:	429a      	cmp	r2, r3
 8014ac2:	d105      	bne.n	8014ad0 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8014ac4:	693b      	ldr	r3, [r7, #16]
 8014ac6:	697a      	ldr	r2, [r7, #20]
 8014ac8:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8014aca:	697b      	ldr	r3, [r7, #20]
 8014acc:	693a      	ldr	r2, [r7, #16]
 8014ace:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	619a      	str	r2, [r3, #24]
    }
}
 8014ad6:	bf00      	nop
 8014ad8:	371c      	adds	r7, #28
 8014ada:	46bd      	mov	sp, r7
 8014adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ae0:	4770      	bx	lr
	...

08014ae4 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8014ae4:	b580      	push	{r7, lr}
 8014ae6:	b098      	sub	sp, #96	; 0x60
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8014aec:	2300      	movs	r3, #0
 8014aee:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	4a73      	ldr	r2, [pc, #460]	; (8014cc0 <_tx_timer_thread_entry+0x1dc>)
 8014af4:	4293      	cmp	r3, r2
 8014af6:	f040 80de 	bne.w	8014cb6 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014afa:	f3ef 8310 	mrs	r3, PRIMASK
 8014afe:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8014b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8014b02:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8014b04:	b672      	cpsid	i
    return(int_posture);
 8014b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8014b08:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8014b0a:	4b6e      	ldr	r3, [pc, #440]	; (8014cc4 <_tx_timer_thread_entry+0x1e0>)
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d003      	beq.n	8014b20 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	f107 020c 	add.w	r2, r7, #12
 8014b1e:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8014b20:	4b68      	ldr	r3, [pc, #416]	; (8014cc4 <_tx_timer_thread_entry+0x1e0>)
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	2200      	movs	r2, #0
 8014b26:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8014b28:	4b66      	ldr	r3, [pc, #408]	; (8014cc4 <_tx_timer_thread_entry+0x1e0>)
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	3304      	adds	r3, #4
 8014b2e:	4a65      	ldr	r2, [pc, #404]	; (8014cc4 <_tx_timer_thread_entry+0x1e0>)
 8014b30:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8014b32:	4b64      	ldr	r3, [pc, #400]	; (8014cc4 <_tx_timer_thread_entry+0x1e0>)
 8014b34:	681a      	ldr	r2, [r3, #0]
 8014b36:	4b64      	ldr	r3, [pc, #400]	; (8014cc8 <_tx_timer_thread_entry+0x1e4>)
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	429a      	cmp	r2, r3
 8014b3c:	d103      	bne.n	8014b46 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8014b3e:	4b63      	ldr	r3, [pc, #396]	; (8014ccc <_tx_timer_thread_entry+0x1e8>)
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	4a60      	ldr	r2, [pc, #384]	; (8014cc4 <_tx_timer_thread_entry+0x1e0>)
 8014b44:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8014b46:	4b62      	ldr	r3, [pc, #392]	; (8014cd0 <_tx_timer_thread_entry+0x1ec>)
 8014b48:	2200      	movs	r2, #0
 8014b4a:	601a      	str	r2, [r3, #0]
 8014b4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014b4e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b52:	f383 8810 	msr	PRIMASK, r3
}
 8014b56:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014b58:	f3ef 8310 	mrs	r3, PRIMASK
 8014b5c:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8014b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8014b60:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8014b62:	b672      	cpsid	i
    return(int_posture);
 8014b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8014b66:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8014b68:	e07f      	b.n	8014c6a <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	691b      	ldr	r3, [r3, #16]
 8014b72:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8014b74:	2300      	movs	r3, #0
 8014b76:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8014b78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014b7c:	429a      	cmp	r2, r3
 8014b7e:	d102      	bne.n	8014b86 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8014b80:	2300      	movs	r3, #0
 8014b82:	60fb      	str	r3, [r7, #12]
 8014b84:	e00e      	b.n	8014ba4 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8014b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014b88:	695b      	ldr	r3, [r3, #20]
 8014b8a:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8014b8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014b8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014b90:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8014b92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014b96:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8014b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014b9a:	f107 020c 	add.w	r2, r7, #12
 8014b9e:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8014ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014ba2:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8014ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	2b20      	cmp	r3, #32
 8014baa:	d911      	bls.n	8014bd0 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8014bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8014bb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bb6:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8014bb8:	2300      	movs	r3, #0
 8014bba:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8014bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bbe:	f107 0208 	add.w	r2, r7, #8
 8014bc2:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8014bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014bc8:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8014bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bcc:	60bb      	str	r3, [r7, #8]
 8014bce:	e01a      	b.n	8014c06 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8014bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bd2:	689b      	ldr	r3, [r3, #8]
 8014bd4:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8014bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bd8:	68db      	ldr	r3, [r3, #12]
 8014bda:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8014bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bde:	685a      	ldr	r2, [r3, #4]
 8014be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014be2:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8014be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d009      	beq.n	8014c00 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8014bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bee:	f107 0208 	add.w	r2, r7, #8
 8014bf2:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8014bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014bf8:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8014bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bfc:	60bb      	str	r3, [r7, #8]
 8014bfe:	e002      	b.n	8014c06 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8014c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c02:	2200      	movs	r2, #0
 8014c04:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8014c06:	4a33      	ldr	r2, [pc, #204]	; (8014cd4 <_tx_timer_thread_entry+0x1f0>)
 8014c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c0a:	6013      	str	r3, [r2, #0]
 8014c0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c12:	f383 8810 	msr	PRIMASK, r3
}
 8014c16:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8014c18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d002      	beq.n	8014c24 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8014c1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014c20:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8014c22:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014c24:	f3ef 8310 	mrs	r3, PRIMASK
 8014c28:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8014c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8014c2c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8014c2e:	b672      	cpsid	i
    return(int_posture);
 8014c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8014c32:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8014c34:	4b27      	ldr	r3, [pc, #156]	; (8014cd4 <_tx_timer_thread_entry+0x1f0>)
 8014c36:	2200      	movs	r2, #0
 8014c38:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8014c3a:	68bb      	ldr	r3, [r7, #8]
 8014c3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014c3e:	429a      	cmp	r2, r3
 8014c40:	d105      	bne.n	8014c4e <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8014c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c44:	2200      	movs	r2, #0
 8014c46:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8014c48:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8014c4a:	f7ff feb1 	bl	80149b0 <_tx_timer_system_activate>
 8014c4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014c50:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014c52:	69bb      	ldr	r3, [r7, #24]
 8014c54:	f383 8810 	msr	PRIMASK, r3
}
 8014c58:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014c5a:	f3ef 8310 	mrs	r3, PRIMASK
 8014c5e:	623b      	str	r3, [r7, #32]
    return(posture);
 8014c60:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8014c62:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014c64:	b672      	cpsid	i
    return(int_posture);
 8014c66:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8014c68:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	f47f af7c 	bne.w	8014b6a <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8014c72:	4b17      	ldr	r3, [pc, #92]	; (8014cd0 <_tx_timer_thread_entry+0x1ec>)
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d116      	bne.n	8014ca8 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8014c7a:	4b17      	ldr	r3, [pc, #92]	; (8014cd8 <_tx_timer_thread_entry+0x1f4>)
 8014c7c:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8014c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c80:	2203      	movs	r2, #3
 8014c82:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8014c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c86:	2201      	movs	r2, #1
 8014c88:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8014c8a:	4b14      	ldr	r3, [pc, #80]	; (8014cdc <_tx_timer_thread_entry+0x1f8>)
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	3301      	adds	r3, #1
 8014c90:	4a12      	ldr	r2, [pc, #72]	; (8014cdc <_tx_timer_thread_entry+0x1f8>)
 8014c92:	6013      	str	r3, [r2, #0]
 8014c94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014c96:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014c98:	697b      	ldr	r3, [r7, #20]
 8014c9a:	f383 8810 	msr	PRIMASK, r3
}
 8014c9e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8014ca0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8014ca2:	f7ff fc41 	bl	8014528 <_tx_thread_system_suspend>
 8014ca6:	e728      	b.n	8014afa <_tx_timer_thread_entry+0x16>
 8014ca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014caa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014cac:	693b      	ldr	r3, [r7, #16]
 8014cae:	f383 8810 	msr	PRIMASK, r3
}
 8014cb2:	bf00      	nop
            TX_DISABLE
 8014cb4:	e721      	b.n	8014afa <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8014cb6:	bf00      	nop
 8014cb8:	3760      	adds	r7, #96	; 0x60
 8014cba:	46bd      	mov	sp, r7
 8014cbc:	bd80      	pop	{r7, pc}
 8014cbe:	bf00      	nop
 8014cc0:	4154494d 	.word	0x4154494d
 8014cc4:	20197478 	.word	0x20197478
 8014cc8:	20197474 	.word	0x20197474
 8014ccc:	20197470 	.word	0x20197470
 8014cd0:	2019747c 	.word	0x2019747c
 8014cd4:	20197488 	.word	0x20197488
 8014cd8:	2019748c 	.word	0x2019748c
 8014cdc:	201973dc 	.word	0x201973dc

08014ce0 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 8014ce0:	b580      	push	{r7, lr}
 8014ce2:	b08a      	sub	sp, #40	; 0x28
 8014ce4:	af00      	add	r7, sp, #0
 8014ce6:	60f8      	str	r0, [r7, #12]
 8014ce8:	60b9      	str	r1, [r7, #8]
 8014cea:	607a      	str	r2, [r7, #4]
 8014cec:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014cee:	2300      	movs	r3, #0
 8014cf0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d102      	bne.n	8014cfe <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8014cf8:	2302      	movs	r3, #2
 8014cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8014cfc:	e029      	b.n	8014d52 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	4a2d      	ldr	r2, [pc, #180]	; (8014db8 <_txe_byte_allocate+0xd8>)
 8014d04:	4293      	cmp	r3, r2
 8014d06:	d002      	beq.n	8014d0e <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8014d08:	2302      	movs	r3, #2
 8014d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8014d0c:	e021      	b.n	8014d52 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8014d0e:	68bb      	ldr	r3, [r7, #8]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d102      	bne.n	8014d1a <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8014d14:	2303      	movs	r3, #3
 8014d16:	627b      	str	r3, [r7, #36]	; 0x24
 8014d18:	e01b      	b.n	8014d52 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d102      	bne.n	8014d26 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8014d20:	2305      	movs	r3, #5
 8014d22:	627b      	str	r3, [r7, #36]	; 0x24
 8014d24:	e015      	b.n	8014d52 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	69db      	ldr	r3, [r3, #28]
 8014d2a:	687a      	ldr	r2, [r7, #4]
 8014d2c:	429a      	cmp	r2, r3
 8014d2e:	d902      	bls.n	8014d36 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8014d30:	2305      	movs	r3, #5
 8014d32:	627b      	str	r3, [r7, #36]	; 0x24
 8014d34:	e00d      	b.n	8014d52 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8014d36:	683b      	ldr	r3, [r7, #0]
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d00a      	beq.n	8014d52 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014d3c:	f3ef 8305 	mrs	r3, IPSR
 8014d40:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8014d42:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014d44:	4b1d      	ldr	r3, [pc, #116]	; (8014dbc <_txe_byte_allocate+0xdc>)
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	4313      	orrs	r3, r2
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d001      	beq.n	8014d52 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8014d4e:	2304      	movs	r3, #4
 8014d50:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 8014d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d108      	bne.n	8014d6a <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8014d58:	4b19      	ldr	r3, [pc, #100]	; (8014dc0 <_txe_byte_allocate+0xe0>)
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8014d5e:	6a3b      	ldr	r3, [r7, #32]
 8014d60:	4a18      	ldr	r2, [pc, #96]	; (8014dc4 <_txe_byte_allocate+0xe4>)
 8014d62:	4293      	cmp	r3, r2
 8014d64:	d101      	bne.n	8014d6a <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8014d66:	2313      	movs	r3, #19
 8014d68:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8014d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d114      	bne.n	8014d9a <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014d70:	f3ef 8305 	mrs	r3, IPSR
 8014d74:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8014d76:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014d78:	4b10      	ldr	r3, [pc, #64]	; (8014dbc <_txe_byte_allocate+0xdc>)
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	4313      	orrs	r3, r2
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d00b      	beq.n	8014d9a <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014d82:	f3ef 8305 	mrs	r3, IPSR
 8014d86:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8014d88:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8014d8a:	4b0c      	ldr	r3, [pc, #48]	; (8014dbc <_txe_byte_allocate+0xdc>)
 8014d8c:	681b      	ldr	r3, [r3, #0]
 8014d8e:	4313      	orrs	r3, r2
 8014d90:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8014d94:	d201      	bcs.n	8014d9a <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014d96:	2313      	movs	r3, #19
 8014d98:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d106      	bne.n	8014dae <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8014da0:	683b      	ldr	r3, [r7, #0]
 8014da2:	687a      	ldr	r2, [r7, #4]
 8014da4:	68b9      	ldr	r1, [r7, #8]
 8014da6:	68f8      	ldr	r0, [r7, #12]
 8014da8:	f7fe f80e 	bl	8012dc8 <_tx_byte_allocate>
 8014dac:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 8014dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014db0:	4618      	mov	r0, r3
 8014db2:	3728      	adds	r7, #40	; 0x28
 8014db4:	46bd      	mov	sp, r7
 8014db6:	bd80      	pop	{r7, pc}
 8014db8:	42595445 	.word	0x42595445
 8014dbc:	20000054 	.word	0x20000054
 8014dc0:	20197344 	.word	0x20197344
 8014dc4:	2019748c 	.word	0x2019748c

08014dc8 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8014dc8:	b580      	push	{r7, lr}
 8014dca:	b092      	sub	sp, #72	; 0x48
 8014dcc:	af00      	add	r7, sp, #0
 8014dce:	60f8      	str	r0, [r7, #12]
 8014dd0:	60b9      	str	r1, [r7, #8]
 8014dd2:	607a      	str	r2, [r7, #4]
 8014dd4:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014dd6:	2300      	movs	r3, #0
 8014dd8:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d102      	bne.n	8014de6 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8014de0:	2302      	movs	r3, #2
 8014de2:	647b      	str	r3, [r7, #68]	; 0x44
 8014de4:	e075      	b.n	8014ed2 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8014de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014de8:	2b34      	cmp	r3, #52	; 0x34
 8014dea:	d002      	beq.n	8014df2 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8014dec:	2302      	movs	r3, #2
 8014dee:	647b      	str	r3, [r7, #68]	; 0x44
 8014df0:	e06f      	b.n	8014ed2 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014df2:	f3ef 8310 	mrs	r3, PRIMASK
 8014df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8014df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8014dfa:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8014dfc:	b672      	cpsid	i
    return(int_posture);
 8014dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8014e00:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8014e02:	4b3b      	ldr	r3, [pc, #236]	; (8014ef0 <_txe_byte_pool_create+0x128>)
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	3301      	adds	r3, #1
 8014e08:	4a39      	ldr	r2, [pc, #228]	; (8014ef0 <_txe_byte_pool_create+0x128>)
 8014e0a:	6013      	str	r3, [r2, #0]
 8014e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e0e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e12:	f383 8810 	msr	PRIMASK, r3
}
 8014e16:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8014e18:	4b36      	ldr	r3, [pc, #216]	; (8014ef4 <_txe_byte_pool_create+0x12c>)
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8014e1e:	2300      	movs	r3, #0
 8014e20:	643b      	str	r3, [r7, #64]	; 0x40
 8014e22:	e009      	b.n	8014e38 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8014e24:	68fa      	ldr	r2, [r7, #12]
 8014e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e28:	429a      	cmp	r2, r3
 8014e2a:	d00b      	beq.n	8014e44 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8014e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e30:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8014e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014e34:	3301      	adds	r3, #1
 8014e36:	643b      	str	r3, [r7, #64]	; 0x40
 8014e38:	4b2f      	ldr	r3, [pc, #188]	; (8014ef8 <_txe_byte_pool_create+0x130>)
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014e3e:	429a      	cmp	r2, r3
 8014e40:	d3f0      	bcc.n	8014e24 <_txe_byte_pool_create+0x5c>
 8014e42:	e000      	b.n	8014e46 <_txe_byte_pool_create+0x7e>
                break;
 8014e44:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014e46:	f3ef 8310 	mrs	r3, PRIMASK
 8014e4a:	623b      	str	r3, [r7, #32]
    return(posture);
 8014e4c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8014e4e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014e50:	b672      	cpsid	i
    return(int_posture);
 8014e52:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8014e54:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8014e56:	4b26      	ldr	r3, [pc, #152]	; (8014ef0 <_txe_byte_pool_create+0x128>)
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	3b01      	subs	r3, #1
 8014e5c:	4a24      	ldr	r2, [pc, #144]	; (8014ef0 <_txe_byte_pool_create+0x128>)
 8014e5e:	6013      	str	r3, [r2, #0]
 8014e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e62:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e66:	f383 8810 	msr	PRIMASK, r3
}
 8014e6a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8014e6c:	f7ff fa22 	bl	80142b4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8014e70:	68fa      	ldr	r2, [r7, #12]
 8014e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e74:	429a      	cmp	r2, r3
 8014e76:	d102      	bne.n	8014e7e <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8014e78:	2302      	movs	r3, #2
 8014e7a:	647b      	str	r3, [r7, #68]	; 0x44
 8014e7c:	e029      	b.n	8014ed2 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d102      	bne.n	8014e8a <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8014e84:	2303      	movs	r3, #3
 8014e86:	647b      	str	r3, [r7, #68]	; 0x44
 8014e88:	e023      	b.n	8014ed2 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8014e8a:	683b      	ldr	r3, [r7, #0]
 8014e8c:	2b63      	cmp	r3, #99	; 0x63
 8014e8e:	d802      	bhi.n	8014e96 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8014e90:	2305      	movs	r3, #5
 8014e92:	647b      	str	r3, [r7, #68]	; 0x44
 8014e94:	e01d      	b.n	8014ed2 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8014e96:	4b19      	ldr	r3, [pc, #100]	; (8014efc <_txe_byte_pool_create+0x134>)
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8014e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e9e:	4a18      	ldr	r2, [pc, #96]	; (8014f00 <_txe_byte_pool_create+0x138>)
 8014ea0:	4293      	cmp	r3, r2
 8014ea2:	d101      	bne.n	8014ea8 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014ea4:	2313      	movs	r3, #19
 8014ea6:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014ea8:	f3ef 8305 	mrs	r3, IPSR
 8014eac:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8014eae:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014eb0:	4b14      	ldr	r3, [pc, #80]	; (8014f04 <_txe_byte_pool_create+0x13c>)
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	4313      	orrs	r3, r2
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d00b      	beq.n	8014ed2 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014eba:	f3ef 8305 	mrs	r3, IPSR
 8014ebe:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8014ec0:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8014ec2:	4b10      	ldr	r3, [pc, #64]	; (8014f04 <_txe_byte_pool_create+0x13c>)
 8014ec4:	681b      	ldr	r3, [r3, #0]
 8014ec6:	4313      	orrs	r3, r2
 8014ec8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8014ecc:	d201      	bcs.n	8014ed2 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8014ece:	2313      	movs	r3, #19
 8014ed0:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014ed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d106      	bne.n	8014ee6 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8014ed8:	683b      	ldr	r3, [r7, #0]
 8014eda:	687a      	ldr	r2, [r7, #4]
 8014edc:	68b9      	ldr	r1, [r7, #8]
 8014ede:	68f8      	ldr	r0, [r7, #12]
 8014ee0:	f7fe f8b4 	bl	801304c <_tx_byte_pool_create>
 8014ee4:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8014ee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8014ee8:	4618      	mov	r0, r3
 8014eea:	3748      	adds	r7, #72	; 0x48
 8014eec:	46bd      	mov	sp, r7
 8014eee:	bd80      	pop	{r7, pc}
 8014ef0:	201973dc 	.word	0x201973dc
 8014ef4:	20197334 	.word	0x20197334
 8014ef8:	20197338 	.word	0x20197338
 8014efc:	20197344 	.word	0x20197344
 8014f00:	2019748c 	.word	0x2019748c
 8014f04:	20000054 	.word	0x20000054

08014f08 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b094      	sub	sp, #80	; 0x50
 8014f0c:	af02      	add	r7, sp, #8
 8014f0e:	60f8      	str	r0, [r7, #12]
 8014f10:	60b9      	str	r1, [r7, #8]
 8014f12:	607a      	str	r2, [r7, #4]
 8014f14:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8014f16:	2300      	movs	r3, #0
 8014f18:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d102      	bne.n	8014f26 <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8014f20:	2309      	movs	r3, #9
 8014f22:	647b      	str	r3, [r7, #68]	; 0x44
 8014f24:	e083      	b.n	801502e <_txe_queue_create+0x126>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 8014f26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014f28:	2b38      	cmp	r3, #56	; 0x38
 8014f2a:	d002      	beq.n	8014f32 <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8014f2c:	2309      	movs	r3, #9
 8014f2e:	647b      	str	r3, [r7, #68]	; 0x44
 8014f30:	e07d      	b.n	801502e <_txe_queue_create+0x126>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014f32:	f3ef 8310 	mrs	r3, PRIMASK
 8014f36:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8014f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8014f3a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8014f3c:	b672      	cpsid	i
    return(int_posture);
 8014f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8014f40:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8014f42:	4b43      	ldr	r3, [pc, #268]	; (8015050 <_txe_queue_create+0x148>)
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	3301      	adds	r3, #1
 8014f48:	4a41      	ldr	r2, [pc, #260]	; (8015050 <_txe_queue_create+0x148>)
 8014f4a:	6013      	str	r3, [r2, #0]
 8014f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f4e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f52:	f383 8810 	msr	PRIMASK, r3
}
 8014f56:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 8014f58:	4b3e      	ldr	r3, [pc, #248]	; (8015054 <_txe_queue_create+0x14c>)
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 8014f5e:	2300      	movs	r3, #0
 8014f60:	643b      	str	r3, [r7, #64]	; 0x40
 8014f62:	e009      	b.n	8014f78 <_txe_queue_create+0x70>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 8014f64:	68fa      	ldr	r2, [r7, #12]
 8014f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f68:	429a      	cmp	r2, r3
 8014f6a:	d00b      	beq.n	8014f84 <_txe_queue_create+0x7c>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 8014f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f70:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 8014f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f74:	3301      	adds	r3, #1
 8014f76:	643b      	str	r3, [r7, #64]	; 0x40
 8014f78:	4b37      	ldr	r3, [pc, #220]	; (8015058 <_txe_queue_create+0x150>)
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014f7e:	429a      	cmp	r2, r3
 8014f80:	d3f0      	bcc.n	8014f64 <_txe_queue_create+0x5c>
 8014f82:	e000      	b.n	8014f86 <_txe_queue_create+0x7e>
                break;
 8014f84:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014f86:	f3ef 8310 	mrs	r3, PRIMASK
 8014f8a:	623b      	str	r3, [r7, #32]
    return(posture);
 8014f8c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8014f8e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014f90:	b672      	cpsid	i
    return(int_posture);
 8014f92:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8014f94:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8014f96:	4b2e      	ldr	r3, [pc, #184]	; (8015050 <_txe_queue_create+0x148>)
 8014f98:	681b      	ldr	r3, [r3, #0]
 8014f9a:	3b01      	subs	r3, #1
 8014f9c:	4a2c      	ldr	r2, [pc, #176]	; (8015050 <_txe_queue_create+0x148>)
 8014f9e:	6013      	str	r3, [r2, #0]
 8014fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fa2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fa6:	f383 8810 	msr	PRIMASK, r3
}
 8014faa:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8014fac:	f7ff f982 	bl	80142b4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 8014fb0:	68fa      	ldr	r2, [r7, #12]
 8014fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014fb4:	429a      	cmp	r2, r3
 8014fb6:	d102      	bne.n	8014fbe <_txe_queue_create+0xb6>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 8014fb8:	2309      	movs	r3, #9
 8014fba:	647b      	str	r3, [r7, #68]	; 0x44
 8014fbc:	e037      	b.n	801502e <_txe_queue_create+0x126>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 8014fbe:	683b      	ldr	r3, [r7, #0]
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d102      	bne.n	8014fca <_txe_queue_create+0xc2>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 8014fc4:	2303      	movs	r3, #3
 8014fc6:	647b      	str	r3, [r7, #68]	; 0x44
 8014fc8:	e031      	b.n	801502e <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d102      	bne.n	8014fd6 <_txe_queue_create+0xce>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 8014fd0:	2305      	movs	r3, #5
 8014fd2:	647b      	str	r3, [r7, #68]	; 0x44
 8014fd4:	e02b      	b.n	801502e <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	2b10      	cmp	r3, #16
 8014fda:	d902      	bls.n	8014fe2 <_txe_queue_create+0xda>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 8014fdc:	2305      	movs	r3, #5
 8014fde:	647b      	str	r3, [r7, #68]	; 0x44
 8014fe0:	e025      	b.n	801502e <_txe_queue_create+0x126>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 8014fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014fe4:	089b      	lsrs	r3, r3, #2
 8014fe6:	687a      	ldr	r2, [r7, #4]
 8014fe8:	429a      	cmp	r2, r3
 8014fea:	d902      	bls.n	8014ff2 <_txe_queue_create+0xea>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 8014fec:	2305      	movs	r3, #5
 8014fee:	647b      	str	r3, [r7, #68]	; 0x44
 8014ff0:	e01d      	b.n	801502e <_txe_queue_create+0x126>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8014ff2:	4b1a      	ldr	r3, [pc, #104]	; (801505c <_txe_queue_create+0x154>)
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8014ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ffa:	4a19      	ldr	r2, [pc, #100]	; (8015060 <_txe_queue_create+0x158>)
 8014ffc:	4293      	cmp	r3, r2
 8014ffe:	d101      	bne.n	8015004 <_txe_queue_create+0xfc>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8015000:	2313      	movs	r3, #19
 8015002:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015004:	f3ef 8305 	mrs	r3, IPSR
 8015008:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801500a:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801500c:	4b15      	ldr	r3, [pc, #84]	; (8015064 <_txe_queue_create+0x15c>)
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	4313      	orrs	r3, r2
 8015012:	2b00      	cmp	r3, #0
 8015014:	d00b      	beq.n	801502e <_txe_queue_create+0x126>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015016:	f3ef 8305 	mrs	r3, IPSR
 801501a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801501c:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801501e:	4b11      	ldr	r3, [pc, #68]	; (8015064 <_txe_queue_create+0x15c>)
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	4313      	orrs	r3, r2
 8015024:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8015028:	d201      	bcs.n	801502e <_txe_queue_create+0x126>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 801502a:	2313      	movs	r3, #19
 801502c:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801502e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015030:	2b00      	cmp	r3, #0
 8015032:	d108      	bne.n	8015046 <_txe_queue_create+0x13e>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 8015034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015036:	9300      	str	r3, [sp, #0]
 8015038:	683b      	ldr	r3, [r7, #0]
 801503a:	687a      	ldr	r2, [r7, #4]
 801503c:	68b9      	ldr	r1, [r7, #8]
 801503e:	68f8      	ldr	r0, [r7, #12]
 8015040:	f7fe fa9a 	bl	8013578 <_tx_queue_create>
 8015044:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8015046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8015048:	4618      	mov	r0, r3
 801504a:	3748      	adds	r7, #72	; 0x48
 801504c:	46bd      	mov	sp, r7
 801504e:	bd80      	pop	{r7, pc}
 8015050:	201973dc 	.word	0x201973dc
 8015054:	20197314 	.word	0x20197314
 8015058:	20197318 	.word	0x20197318
 801505c:	20197344 	.word	0x20197344
 8015060:	2019748c 	.word	0x2019748c
 8015064:	20000054 	.word	0x20000054

08015068 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8015068:	b580      	push	{r7, lr}
 801506a:	b088      	sub	sp, #32
 801506c:	af00      	add	r7, sp, #0
 801506e:	60f8      	str	r0, [r7, #12]
 8015070:	60b9      	str	r1, [r7, #8]
 8015072:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8015074:	2300      	movs	r3, #0
 8015076:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	2b00      	cmp	r3, #0
 801507c:	d102      	bne.n	8015084 <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 801507e:	2309      	movs	r3, #9
 8015080:	61fb      	str	r3, [r7, #28]
 8015082:	e025      	b.n	80150d0 <_txe_queue_receive+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	4a18      	ldr	r2, [pc, #96]	; (80150ec <_txe_queue_receive+0x84>)
 801508a:	4293      	cmp	r3, r2
 801508c:	d002      	beq.n	8015094 <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 801508e:	2309      	movs	r3, #9
 8015090:	61fb      	str	r3, [r7, #28]
 8015092:	e01d      	b.n	80150d0 <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 8015094:	68bb      	ldr	r3, [r7, #8]
 8015096:	2b00      	cmp	r3, #0
 8015098:	d102      	bne.n	80150a0 <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 801509a:	2303      	movs	r3, #3
 801509c:	61fb      	str	r3, [r7, #28]
 801509e:	e017      	b.n	80150d0 <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d014      	beq.n	80150d0 <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80150a6:	f3ef 8305 	mrs	r3, IPSR
 80150aa:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80150ac:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80150ae:	4b10      	ldr	r3, [pc, #64]	; (80150f0 <_txe_queue_receive+0x88>)
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	4313      	orrs	r3, r2
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d002      	beq.n	80150be <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80150b8:	2304      	movs	r3, #4
 80150ba:	61fb      	str	r3, [r7, #28]
 80150bc:	e008      	b.n	80150d0 <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 80150be:	4b0d      	ldr	r3, [pc, #52]	; (80150f4 <_txe_queue_receive+0x8c>)
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 80150c4:	69bb      	ldr	r3, [r7, #24]
 80150c6:	4a0c      	ldr	r2, [pc, #48]	; (80150f8 <_txe_queue_receive+0x90>)
 80150c8:	4293      	cmp	r3, r2
 80150ca:	d101      	bne.n	80150d0 <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 80150cc:	2304      	movs	r3, #4
 80150ce:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80150d0:	69fb      	ldr	r3, [r7, #28]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d105      	bne.n	80150e2 <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 80150d6:	687a      	ldr	r2, [r7, #4]
 80150d8:	68b9      	ldr	r1, [r7, #8]
 80150da:	68f8      	ldr	r0, [r7, #12]
 80150dc:	f7fe fac0 	bl	8013660 <_tx_queue_receive>
 80150e0:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 80150e2:	69fb      	ldr	r3, [r7, #28]
}
 80150e4:	4618      	mov	r0, r3
 80150e6:	3720      	adds	r7, #32
 80150e8:	46bd      	mov	sp, r7
 80150ea:	bd80      	pop	{r7, pc}
 80150ec:	51554555 	.word	0x51554555
 80150f0:	20000054 	.word	0x20000054
 80150f4:	20197344 	.word	0x20197344
 80150f8:	2019748c 	.word	0x2019748c

080150fc <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 80150fc:	b580      	push	{r7, lr}
 80150fe:	b088      	sub	sp, #32
 8015100:	af00      	add	r7, sp, #0
 8015102:	60f8      	str	r0, [r7, #12]
 8015104:	60b9      	str	r1, [r7, #8]
 8015106:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8015108:	2300      	movs	r3, #0
 801510a:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	2b00      	cmp	r3, #0
 8015110:	d102      	bne.n	8015118 <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8015112:	2309      	movs	r3, #9
 8015114:	61fb      	str	r3, [r7, #28]
 8015116:	e025      	b.n	8015164 <_txe_queue_send+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	4a18      	ldr	r2, [pc, #96]	; (8015180 <_txe_queue_send+0x84>)
 801511e:	4293      	cmp	r3, r2
 8015120:	d002      	beq.n	8015128 <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8015122:	2309      	movs	r3, #9
 8015124:	61fb      	str	r3, [r7, #28]
 8015126:	e01d      	b.n	8015164 <_txe_queue_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 8015128:	68bb      	ldr	r3, [r7, #8]
 801512a:	2b00      	cmp	r3, #0
 801512c:	d102      	bne.n	8015134 <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 801512e:	2303      	movs	r3, #3
 8015130:	61fb      	str	r3, [r7, #28]
 8015132:	e017      	b.n	8015164 <_txe_queue_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	2b00      	cmp	r3, #0
 8015138:	d014      	beq.n	8015164 <_txe_queue_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801513a:	f3ef 8305 	mrs	r3, IPSR
 801513e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8015140:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015142:	4b10      	ldr	r3, [pc, #64]	; (8015184 <_txe_queue_send+0x88>)
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	4313      	orrs	r3, r2
 8015148:	2b00      	cmp	r3, #0
 801514a:	d002      	beq.n	8015152 <_txe_queue_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 801514c:	2304      	movs	r3, #4
 801514e:	61fb      	str	r3, [r7, #28]
 8015150:	e008      	b.n	8015164 <_txe_queue_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8015152:	4b0d      	ldr	r3, [pc, #52]	; (8015188 <_txe_queue_send+0x8c>)
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8015158:	69bb      	ldr	r3, [r7, #24]
 801515a:	4a0c      	ldr	r2, [pc, #48]	; (801518c <_txe_queue_send+0x90>)
 801515c:	4293      	cmp	r3, r2
 801515e:	d101      	bne.n	8015164 <_txe_queue_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8015160:	2304      	movs	r3, #4
 8015162:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8015164:	69fb      	ldr	r3, [r7, #28]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d105      	bne.n	8015176 <_txe_queue_send+0x7a>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 801516a:	687a      	ldr	r2, [r7, #4]
 801516c:	68b9      	ldr	r1, [r7, #8]
 801516e:	68f8      	ldr	r0, [r7, #12]
 8015170:	f7fe fc3e 	bl	80139f0 <_tx_queue_send>
 8015174:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8015176:	69fb      	ldr	r3, [r7, #28]
}
 8015178:	4618      	mov	r0, r3
 801517a:	3720      	adds	r7, #32
 801517c:	46bd      	mov	sp, r7
 801517e:	bd80      	pop	{r7, pc}
 8015180:	51554555 	.word	0x51554555
 8015184:	20000054 	.word	0x20000054
 8015188:	20197344 	.word	0x20197344
 801518c:	2019748c 	.word	0x2019748c

08015190 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 8015190:	b580      	push	{r7, lr}
 8015192:	b092      	sub	sp, #72	; 0x48
 8015194:	af00      	add	r7, sp, #0
 8015196:	60f8      	str	r0, [r7, #12]
 8015198:	60b9      	str	r1, [r7, #8]
 801519a:	607a      	str	r2, [r7, #4]
 801519c:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801519e:	2300      	movs	r3, #0
 80151a0:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d102      	bne.n	80151ae <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80151a8:	230c      	movs	r3, #12
 80151aa:	647b      	str	r3, [r7, #68]	; 0x44
 80151ac:	e054      	b.n	8015258 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 80151ae:	683b      	ldr	r3, [r7, #0]
 80151b0:	2b1c      	cmp	r3, #28
 80151b2:	d002      	beq.n	80151ba <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80151b4:	230c      	movs	r3, #12
 80151b6:	647b      	str	r3, [r7, #68]	; 0x44
 80151b8:	e04e      	b.n	8015258 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80151ba:	f3ef 8310 	mrs	r3, PRIMASK
 80151be:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80151c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80151c2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80151c4:	b672      	cpsid	i
    return(int_posture);
 80151c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80151c8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80151ca:	4b36      	ldr	r3, [pc, #216]	; (80152a4 <_txe_semaphore_create+0x114>)
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	3301      	adds	r3, #1
 80151d0:	4a34      	ldr	r2, [pc, #208]	; (80152a4 <_txe_semaphore_create+0x114>)
 80151d2:	6013      	str	r3, [r2, #0]
 80151d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151d6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80151d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151da:	f383 8810 	msr	PRIMASK, r3
}
 80151de:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 80151e0:	4b31      	ldr	r3, [pc, #196]	; (80152a8 <_txe_semaphore_create+0x118>)
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80151e6:	2300      	movs	r3, #0
 80151e8:	643b      	str	r3, [r7, #64]	; 0x40
 80151ea:	e009      	b.n	8015200 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 80151ec:	68fa      	ldr	r2, [r7, #12]
 80151ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80151f0:	429a      	cmp	r2, r3
 80151f2:	d00b      	beq.n	801520c <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 80151f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80151f6:	695b      	ldr	r3, [r3, #20]
 80151f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80151fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80151fc:	3301      	adds	r3, #1
 80151fe:	643b      	str	r3, [r7, #64]	; 0x40
 8015200:	4b2a      	ldr	r3, [pc, #168]	; (80152ac <_txe_semaphore_create+0x11c>)
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015206:	429a      	cmp	r2, r3
 8015208:	d3f0      	bcc.n	80151ec <_txe_semaphore_create+0x5c>
 801520a:	e000      	b.n	801520e <_txe_semaphore_create+0x7e>
                break;
 801520c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801520e:	f3ef 8310 	mrs	r3, PRIMASK
 8015212:	623b      	str	r3, [r7, #32]
    return(posture);
 8015214:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8015216:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015218:	b672      	cpsid	i
    return(int_posture);
 801521a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 801521c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801521e:	4b21      	ldr	r3, [pc, #132]	; (80152a4 <_txe_semaphore_create+0x114>)
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	3b01      	subs	r3, #1
 8015224:	4a1f      	ldr	r2, [pc, #124]	; (80152a4 <_txe_semaphore_create+0x114>)
 8015226:	6013      	str	r3, [r2, #0]
 8015228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801522a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801522e:	f383 8810 	msr	PRIMASK, r3
}
 8015232:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8015234:	f7ff f83e 	bl	80142b4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 8015238:	68fa      	ldr	r2, [r7, #12]
 801523a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801523c:	429a      	cmp	r2, r3
 801523e:	d102      	bne.n	8015246 <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 8015240:	230c      	movs	r3, #12
 8015242:	647b      	str	r3, [r7, #68]	; 0x44
 8015244:	e008      	b.n	8015258 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8015246:	4b1a      	ldr	r3, [pc, #104]	; (80152b0 <_txe_semaphore_create+0x120>)
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 801524c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801524e:	4a19      	ldr	r2, [pc, #100]	; (80152b4 <_txe_semaphore_create+0x124>)
 8015250:	4293      	cmp	r3, r2
 8015252:	d101      	bne.n	8015258 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8015254:	2313      	movs	r3, #19
 8015256:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8015258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801525a:	2b00      	cmp	r3, #0
 801525c:	d114      	bne.n	8015288 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801525e:	f3ef 8305 	mrs	r3, IPSR
 8015262:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8015264:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015266:	4b14      	ldr	r3, [pc, #80]	; (80152b8 <_txe_semaphore_create+0x128>)
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	4313      	orrs	r3, r2
 801526c:	2b00      	cmp	r3, #0
 801526e:	d00b      	beq.n	8015288 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015270:	f3ef 8305 	mrs	r3, IPSR
 8015274:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8015276:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8015278:	4b0f      	ldr	r3, [pc, #60]	; (80152b8 <_txe_semaphore_create+0x128>)
 801527a:	681b      	ldr	r3, [r3, #0]
 801527c:	4313      	orrs	r3, r2
 801527e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8015282:	d201      	bcs.n	8015288 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8015284:	2313      	movs	r3, #19
 8015286:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8015288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801528a:	2b00      	cmp	r3, #0
 801528c:	d105      	bne.n	801529a <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 801528e:	687a      	ldr	r2, [r7, #4]
 8015290:	68b9      	ldr	r1, [r7, #8]
 8015292:	68f8      	ldr	r0, [r7, #12]
 8015294:	f7fe fd54 	bl	8013d40 <_tx_semaphore_create>
 8015298:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 801529a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 801529c:	4618      	mov	r0, r3
 801529e:	3748      	adds	r7, #72	; 0x48
 80152a0:	46bd      	mov	sp, r7
 80152a2:	bd80      	pop	{r7, pc}
 80152a4:	201973dc 	.word	0x201973dc
 80152a8:	2019730c 	.word	0x2019730c
 80152ac:	20197310 	.word	0x20197310
 80152b0:	20197344 	.word	0x20197344
 80152b4:	2019748c 	.word	0x2019748c
 80152b8:	20000054 	.word	0x20000054

080152bc <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 80152bc:	b580      	push	{r7, lr}
 80152be:	b086      	sub	sp, #24
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	6078      	str	r0, [r7, #4]
 80152c4:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80152c6:	2300      	movs	r3, #0
 80152c8:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d102      	bne.n	80152d6 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80152d0:	230c      	movs	r3, #12
 80152d2:	617b      	str	r3, [r7, #20]
 80152d4:	e01f      	b.n	8015316 <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	4a15      	ldr	r2, [pc, #84]	; (8015330 <_txe_semaphore_get+0x74>)
 80152dc:	4293      	cmp	r3, r2
 80152de:	d002      	beq.n	80152e6 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80152e0:	230c      	movs	r3, #12
 80152e2:	617b      	str	r3, [r7, #20]
 80152e4:	e017      	b.n	8015316 <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80152e6:	683b      	ldr	r3, [r7, #0]
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d014      	beq.n	8015316 <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80152ec:	f3ef 8305 	mrs	r3, IPSR
 80152f0:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80152f2:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80152f4:	4b0f      	ldr	r3, [pc, #60]	; (8015334 <_txe_semaphore_get+0x78>)
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	4313      	orrs	r3, r2
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d002      	beq.n	8015304 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80152fe:	2304      	movs	r3, #4
 8015300:	617b      	str	r3, [r7, #20]
 8015302:	e008      	b.n	8015316 <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8015304:	4b0c      	ldr	r3, [pc, #48]	; (8015338 <_txe_semaphore_get+0x7c>)
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 801530a:	693b      	ldr	r3, [r7, #16]
 801530c:	4a0b      	ldr	r2, [pc, #44]	; (801533c <_txe_semaphore_get+0x80>)
 801530e:	4293      	cmp	r3, r2
 8015310:	d101      	bne.n	8015316 <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8015312:	2304      	movs	r3, #4
 8015314:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8015316:	697b      	ldr	r3, [r7, #20]
 8015318:	2b00      	cmp	r3, #0
 801531a:	d104      	bne.n	8015326 <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 801531c:	6839      	ldr	r1, [r7, #0]
 801531e:	6878      	ldr	r0, [r7, #4]
 8015320:	f7fe fd60 	bl	8013de4 <_tx_semaphore_get>
 8015324:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8015326:	697b      	ldr	r3, [r7, #20]
}
 8015328:	4618      	mov	r0, r3
 801532a:	3718      	adds	r7, #24
 801532c:	46bd      	mov	sp, r7
 801532e:	bd80      	pop	{r7, pc}
 8015330:	53454d41 	.word	0x53454d41
 8015334:	20000054 	.word	0x20000054
 8015338:	20197344 	.word	0x20197344
 801533c:	2019748c 	.word	0x2019748c

08015340 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8015340:	b580      	push	{r7, lr}
 8015342:	b084      	sub	sp, #16
 8015344:	af00      	add	r7, sp, #0
 8015346:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d102      	bne.n	8015354 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801534e:	230c      	movs	r3, #12
 8015350:	60fb      	str	r3, [r7, #12]
 8015352:	e00b      	b.n	801536c <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	4a07      	ldr	r2, [pc, #28]	; (8015378 <_txe_semaphore_put+0x38>)
 801535a:	4293      	cmp	r3, r2
 801535c:	d002      	beq.n	8015364 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801535e:	230c      	movs	r3, #12
 8015360:	60fb      	str	r3, [r7, #12]
 8015362:	e003      	b.n	801536c <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 8015364:	6878      	ldr	r0, [r7, #4]
 8015366:	f7fe fdcf 	bl	8013f08 <_tx_semaphore_put>
 801536a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 801536c:	68fb      	ldr	r3, [r7, #12]
}
 801536e:	4618      	mov	r0, r3
 8015370:	3710      	adds	r7, #16
 8015372:	46bd      	mov	sp, r7
 8015374:	bd80      	pop	{r7, pc}
 8015376:	bf00      	nop
 8015378:	53454d41 	.word	0x53454d41

0801537c <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b09a      	sub	sp, #104	; 0x68
 8015380:	af06      	add	r7, sp, #24
 8015382:	60f8      	str	r0, [r7, #12]
 8015384:	60b9      	str	r1, [r7, #8]
 8015386:	607a      	str	r2, [r7, #4]
 8015388:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801538a:	2300      	movs	r3, #0
 801538c:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	2b00      	cmp	r3, #0
 8015392:	d102      	bne.n	801539a <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8015394:	230e      	movs	r3, #14
 8015396:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015398:	e0bb      	b.n	8015512 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 801539a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801539c:	2bb0      	cmp	r3, #176	; 0xb0
 801539e:	d002      	beq.n	80153a6 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80153a0:	230e      	movs	r3, #14
 80153a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80153a4:	e0b5      	b.n	8015512 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80153a6:	f3ef 8310 	mrs	r3, PRIMASK
 80153aa:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80153ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80153ae:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80153b0:	b672      	cpsid	i
    return(int_posture);
 80153b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80153b4:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80153b6:	4b64      	ldr	r3, [pc, #400]	; (8015548 <_txe_thread_create+0x1cc>)
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	3301      	adds	r3, #1
 80153bc:	4a62      	ldr	r2, [pc, #392]	; (8015548 <_txe_thread_create+0x1cc>)
 80153be:	6013      	str	r3, [r2, #0]
 80153c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80153c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80153c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153c6:	f383 8810 	msr	PRIMASK, r3
}
 80153ca:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 80153cc:	2300      	movs	r3, #0
 80153ce:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 80153d0:	4b5e      	ldr	r3, [pc, #376]	; (801554c <_txe_thread_create+0x1d0>)
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80153d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80153d8:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 80153da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80153dc:	3b01      	subs	r3, #1
 80153de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80153e0:	4413      	add	r3, r2
 80153e2:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 80153e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80153e6:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80153e8:	2300      	movs	r3, #0
 80153ea:	647b      	str	r3, [r7, #68]	; 0x44
 80153ec:	e02b      	b.n	8015446 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 80153ee:	68fa      	ldr	r2, [r7, #12]
 80153f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80153f2:	429a      	cmp	r2, r3
 80153f4:	d101      	bne.n	80153fa <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 80153f6:	2301      	movs	r3, #1
 80153f8:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 80153fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80153fc:	2b01      	cmp	r3, #1
 80153fe:	d028      	beq.n	8015452 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8015400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015402:	68db      	ldr	r3, [r3, #12]
 8015404:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015406:	429a      	cmp	r2, r3
 8015408:	d308      	bcc.n	801541c <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 801540a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801540c:	691b      	ldr	r3, [r3, #16]
 801540e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015410:	429a      	cmp	r2, r3
 8015412:	d203      	bcs.n	801541c <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8015414:	2300      	movs	r3, #0
 8015416:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8015418:	2301      	movs	r3, #1
 801541a:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 801541c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801541e:	68db      	ldr	r3, [r3, #12]
 8015420:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015422:	429a      	cmp	r2, r3
 8015424:	d308      	bcc.n	8015438 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8015426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015428:	691b      	ldr	r3, [r3, #16]
 801542a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801542c:	429a      	cmp	r2, r3
 801542e:	d203      	bcs.n	8015438 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8015430:	2300      	movs	r3, #0
 8015432:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8015434:	2301      	movs	r3, #1
 8015436:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8015438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801543a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801543e:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8015440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015442:	3301      	adds	r3, #1
 8015444:	647b      	str	r3, [r7, #68]	; 0x44
 8015446:	4b42      	ldr	r3, [pc, #264]	; (8015550 <_txe_thread_create+0x1d4>)
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801544c:	429a      	cmp	r2, r3
 801544e:	d3ce      	bcc.n	80153ee <_txe_thread_create+0x72>
 8015450:	e000      	b.n	8015454 <_txe_thread_create+0xd8>
                break;
 8015452:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015454:	f3ef 8310 	mrs	r3, PRIMASK
 8015458:	61fb      	str	r3, [r7, #28]
    return(posture);
 801545a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 801545c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 801545e:	b672      	cpsid	i
    return(int_posture);
 8015460:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8015462:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8015464:	4b38      	ldr	r3, [pc, #224]	; (8015548 <_txe_thread_create+0x1cc>)
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	3b01      	subs	r3, #1
 801546a:	4a37      	ldr	r2, [pc, #220]	; (8015548 <_txe_thread_create+0x1cc>)
 801546c:	6013      	str	r3, [r2, #0]
 801546e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015470:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015472:	6a3b      	ldr	r3, [r7, #32]
 8015474:	f383 8810 	msr	PRIMASK, r3
}
 8015478:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801547a:	f7fe ff1b 	bl	80142b4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 801547e:	68fa      	ldr	r2, [r7, #12]
 8015480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015482:	429a      	cmp	r2, r3
 8015484:	d102      	bne.n	801548c <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8015486:	230e      	movs	r3, #14
 8015488:	64fb      	str	r3, [r7, #76]	; 0x4c
 801548a:	e042      	b.n	8015512 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 801548c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801548e:	2b00      	cmp	r3, #0
 8015490:	d102      	bne.n	8015498 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8015492:	2303      	movs	r3, #3
 8015494:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015496:	e03c      	b.n	8015512 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	2b00      	cmp	r3, #0
 801549c:	d102      	bne.n	80154a4 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 801549e:	2303      	movs	r3, #3
 80154a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80154a2:	e036      	b.n	8015512 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 80154a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80154a6:	2bc7      	cmp	r3, #199	; 0xc7
 80154a8:	d802      	bhi.n	80154b0 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 80154aa:	2305      	movs	r3, #5
 80154ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80154ae:	e030      	b.n	8015512 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 80154b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80154b2:	2b1f      	cmp	r3, #31
 80154b4:	d902      	bls.n	80154bc <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 80154b6:	230f      	movs	r3, #15
 80154b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80154ba:	e02a      	b.n	8015512 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 80154bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80154be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80154c0:	429a      	cmp	r2, r3
 80154c2:	d902      	bls.n	80154ca <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 80154c4:	2318      	movs	r3, #24
 80154c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80154c8:	e023      	b.n	8015512 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 80154ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80154cc:	2b01      	cmp	r3, #1
 80154ce:	d902      	bls.n	80154d6 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 80154d0:	2310      	movs	r3, #16
 80154d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80154d4:	e01d      	b.n	8015512 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 80154d6:	4b1f      	ldr	r3, [pc, #124]	; (8015554 <_txe_thread_create+0x1d8>)
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 80154dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154de:	4a1e      	ldr	r2, [pc, #120]	; (8015558 <_txe_thread_create+0x1dc>)
 80154e0:	4293      	cmp	r3, r2
 80154e2:	d101      	bne.n	80154e8 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80154e4:	2313      	movs	r3, #19
 80154e6:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80154e8:	f3ef 8305 	mrs	r3, IPSR
 80154ec:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80154ee:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80154f0:	4b1a      	ldr	r3, [pc, #104]	; (801555c <_txe_thread_create+0x1e0>)
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	4313      	orrs	r3, r2
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d00b      	beq.n	8015512 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80154fa:	f3ef 8305 	mrs	r3, IPSR
 80154fe:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8015500:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8015502:	4b16      	ldr	r3, [pc, #88]	; (801555c <_txe_thread_create+0x1e0>)
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	4313      	orrs	r3, r2
 8015508:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801550c:	d201      	bcs.n	8015512 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 801550e:	2313      	movs	r3, #19
 8015510:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8015512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015514:	2b00      	cmp	r3, #0
 8015516:	d112      	bne.n	801553e <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8015518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801551a:	9305      	str	r3, [sp, #20]
 801551c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801551e:	9304      	str	r3, [sp, #16]
 8015520:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015522:	9303      	str	r3, [sp, #12]
 8015524:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015526:	9302      	str	r3, [sp, #8]
 8015528:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801552a:	9301      	str	r3, [sp, #4]
 801552c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801552e:	9300      	str	r3, [sp, #0]
 8015530:	683b      	ldr	r3, [r7, #0]
 8015532:	687a      	ldr	r2, [r7, #4]
 8015534:	68b9      	ldr	r1, [r7, #8]
 8015536:	68f8      	ldr	r0, [r7, #12]
 8015538:	f7fe fd3e 	bl	8013fb8 <_tx_thread_create>
 801553c:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 801553e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8015540:	4618      	mov	r0, r3
 8015542:	3750      	adds	r7, #80	; 0x50
 8015544:	46bd      	mov	sp, r7
 8015546:	bd80      	pop	{r7, pc}
 8015548:	201973dc 	.word	0x201973dc
 801554c:	2019734c 	.word	0x2019734c
 8015550:	20197350 	.word	0x20197350
 8015554:	20197344 	.word	0x20197344
 8015558:	2019748c 	.word	0x2019748c
 801555c:	20000054 	.word	0x20000054

08015560 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8015560:	8880      	ldrh	r0, [r0, #4]
 8015562:	4770      	bx	lr

08015564 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8015564:	b570      	push	{r4, r5, r6, lr}
 8015566:	6803      	ldr	r3, [r0, #0]
 8015568:	4605      	mov	r5, r0
 801556a:	460c      	mov	r4, r1
 801556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801556e:	2100      	movs	r1, #0
 8015570:	4798      	blx	r3
 8015572:	682b      	ldr	r3, [r5, #0]
 8015574:	4606      	mov	r6, r0
 8015576:	6a1b      	ldr	r3, [r3, #32]
 8015578:	4628      	mov	r0, r5
 801557a:	4798      	blx	r3
 801557c:	1ba4      	subs	r4, r4, r6
 801557e:	b2a4      	uxth	r4, r4
 8015580:	fbb4 f0f0 	udiv	r0, r4, r0
 8015584:	bd70      	pop	{r4, r5, r6, pc}

08015586 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8015586:	2300      	movs	r3, #0
 8015588:	8083      	strh	r3, [r0, #4]
 801558a:	4770      	bx	lr

0801558c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801558c:	b510      	push	{r4, lr}
 801558e:	4604      	mov	r4, r0
 8015590:	6803      	ldr	r3, [r0, #0]
 8015592:	8881      	ldrh	r1, [r0, #4]
 8015594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015596:	4798      	blx	r3
 8015598:	88a3      	ldrh	r3, [r4, #4]
 801559a:	3301      	adds	r3, #1
 801559c:	80a3      	strh	r3, [r4, #4]
 801559e:	bd10      	pop	{r4, pc}

080155a0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80155a0:	6803      	ldr	r3, [r0, #0]
 80155a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155a4:	4718      	bx	r3

080155a6 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80155a6:	4770      	bx	lr

080155a8 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80155a8:	4a02      	ldr	r2, [pc, #8]	; (80155b4 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80155aa:	6002      	str	r2, [r0, #0]
 80155ac:	2200      	movs	r2, #0
 80155ae:	8082      	strh	r2, [r0, #4]
 80155b0:	4770      	bx	lr
 80155b2:	bf00      	nop
 80155b4:	0802a87c 	.word	0x0802a87c

080155b8 <_ZN8touchgfx9Container13getFirstChildEv>:
 80155b8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80155ba:	4770      	bx	lr

080155bc <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80155bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80155be:	2000      	movs	r0, #0
 80155c0:	b12b      	cbz	r3, 80155ce <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80155c2:	b920      	cbnz	r0, 80155ce <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80155c4:	1a5a      	subs	r2, r3, r1
 80155c6:	4250      	negs	r0, r2
 80155c8:	4150      	adcs	r0, r2
 80155ca:	699b      	ldr	r3, [r3, #24]
 80155cc:	e7f8      	b.n	80155c0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80155ce:	4770      	bx	lr

080155d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80155d0:	2300      	movs	r3, #0
 80155d2:	6148      	str	r0, [r1, #20]
 80155d4:	618b      	str	r3, [r1, #24]
 80155d6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80155d8:	b913      	cbnz	r3, 80155e0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 80155da:	6281      	str	r1, [r0, #40]	; 0x28
 80155dc:	4770      	bx	lr
 80155de:	4613      	mov	r3, r2
 80155e0:	699a      	ldr	r2, [r3, #24]
 80155e2:	2a00      	cmp	r2, #0
 80155e4:	d1fb      	bne.n	80155de <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 80155e6:	6199      	str	r1, [r3, #24]
 80155e8:	4770      	bx	lr

080155ea <_ZN8touchgfx9Container9removeAllEv>:
 80155ea:	2200      	movs	r2, #0
 80155ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80155ee:	b123      	cbz	r3, 80155fa <_ZN8touchgfx9Container9removeAllEv+0x10>
 80155f0:	6999      	ldr	r1, [r3, #24]
 80155f2:	6281      	str	r1, [r0, #40]	; 0x28
 80155f4:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80155f8:	e7f8      	b.n	80155ec <_ZN8touchgfx9Container9removeAllEv+0x2>
 80155fa:	4770      	bx	lr

080155fc <_ZN8touchgfx9Container6unlinkEv>:
 80155fc:	2300      	movs	r3, #0
 80155fe:	6283      	str	r3, [r0, #40]	; 0x28
 8015600:	4770      	bx	lr

08015602 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8015602:	2200      	movs	r2, #0
 8015604:	8002      	strh	r2, [r0, #0]
 8015606:	8042      	strh	r2, [r0, #2]
 8015608:	8082      	strh	r2, [r0, #4]
 801560a:	80c2      	strh	r2, [r0, #6]
 801560c:	4770      	bx	lr

0801560e <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 801560e:	b570      	push	{r4, r5, r6, lr}
 8015610:	460d      	mov	r5, r1
 8015612:	4616      	mov	r6, r2
 8015614:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015616:	b13c      	cbz	r4, 8015628 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8015618:	6823      	ldr	r3, [r4, #0]
 801561a:	4620      	mov	r0, r4
 801561c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801561e:	4632      	mov	r2, r6
 8015620:	4629      	mov	r1, r5
 8015622:	4798      	blx	r3
 8015624:	69a4      	ldr	r4, [r4, #24]
 8015626:	e7f6      	b.n	8015616 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8015628:	bd70      	pop	{r4, r5, r6, pc}

0801562a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801562a:	b538      	push	{r3, r4, r5, lr}
 801562c:	460d      	mov	r5, r1
 801562e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015630:	b134      	cbz	r4, 8015640 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8015632:	682b      	ldr	r3, [r5, #0]
 8015634:	4621      	mov	r1, r4
 8015636:	689b      	ldr	r3, [r3, #8]
 8015638:	4628      	mov	r0, r5
 801563a:	4798      	blx	r3
 801563c:	69a4      	ldr	r4, [r4, #24]
 801563e:	e7f7      	b.n	8015630 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8015640:	bd38      	pop	{r3, r4, r5, pc}

08015642 <_ZN8touchgfx9ContainerD1Ev>:
 8015642:	4770      	bx	lr

08015644 <_ZN8touchgfx9ContainerD0Ev>:
 8015644:	b510      	push	{r4, lr}
 8015646:	4604      	mov	r4, r0
 8015648:	212c      	movs	r1, #44	; 0x2c
 801564a:	f012 fce4 	bl	8028016 <_ZdlPvj>
 801564e:	4620      	mov	r0, r4
 8015650:	bd10      	pop	{r4, pc}

08015652 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8015652:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015654:	b19b      	cbz	r3, 801567e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015656:	428b      	cmp	r3, r1
 8015658:	d109      	bne.n	801566e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801565a:	2100      	movs	r1, #0
 801565c:	699a      	ldr	r2, [r3, #24]
 801565e:	6159      	str	r1, [r3, #20]
 8015660:	6282      	str	r2, [r0, #40]	; 0x28
 8015662:	b902      	cbnz	r2, 8015666 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8015664:	4770      	bx	lr
 8015666:	6199      	str	r1, [r3, #24]
 8015668:	4770      	bx	lr
 801566a:	4613      	mov	r3, r2
 801566c:	b13a      	cbz	r2, 801567e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801566e:	699a      	ldr	r2, [r3, #24]
 8015670:	428a      	cmp	r2, r1
 8015672:	d1fa      	bne.n	801566a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8015674:	698a      	ldr	r2, [r1, #24]
 8015676:	619a      	str	r2, [r3, #24]
 8015678:	2300      	movs	r3, #0
 801567a:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801567e:	4770      	bx	lr

08015680 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8015680:	b410      	push	{r4}
 8015682:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015684:	4604      	mov	r4, r0
 8015686:	b92b      	cbnz	r3, 8015694 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8015688:	6803      	ldr	r3, [r0, #0]
 801568a:	4611      	mov	r1, r2
 801568c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801568e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015692:	4718      	bx	r3
 8015694:	b941      	cbnz	r1, 80156a8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8015696:	6193      	str	r3, [r2, #24]
 8015698:	6282      	str	r2, [r0, #40]	; 0x28
 801569a:	6154      	str	r4, [r2, #20]
 801569c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80156a0:	4770      	bx	lr
 80156a2:	4603      	mov	r3, r0
 80156a4:	2800      	cmp	r0, #0
 80156a6:	d0f9      	beq.n	801569c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80156a8:	4299      	cmp	r1, r3
 80156aa:	6998      	ldr	r0, [r3, #24]
 80156ac:	d1f9      	bne.n	80156a2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80156ae:	6190      	str	r0, [r2, #24]
 80156b0:	618a      	str	r2, [r1, #24]
 80156b2:	e7f2      	b.n	801569a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

080156b4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80156b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156b8:	461f      	mov	r7, r3
 80156ba:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80156be:	460d      	mov	r5, r1
 80156c0:	4616      	mov	r6, r2
 80156c2:	b103      	cbz	r3, 80156c6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80156c4:	6038      	str	r0, [r7, #0]
 80156c6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80156c8:	b314      	cbz	r4, 8015710 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80156ca:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80156ce:	b1eb      	cbz	r3, 801570c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80156d0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80156d4:	428d      	cmp	r5, r1
 80156d6:	db19      	blt.n	801570c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80156d8:	8923      	ldrh	r3, [r4, #8]
 80156da:	b289      	uxth	r1, r1
 80156dc:	440b      	add	r3, r1
 80156de:	b21b      	sxth	r3, r3
 80156e0:	429d      	cmp	r5, r3
 80156e2:	da13      	bge.n	801570c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80156e4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80156e8:	4296      	cmp	r6, r2
 80156ea:	db0f      	blt.n	801570c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80156ec:	8963      	ldrh	r3, [r4, #10]
 80156ee:	b292      	uxth	r2, r2
 80156f0:	4413      	add	r3, r2
 80156f2:	b21b      	sxth	r3, r3
 80156f4:	429e      	cmp	r6, r3
 80156f6:	da09      	bge.n	801570c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80156f8:	6823      	ldr	r3, [r4, #0]
 80156fa:	1ab2      	subs	r2, r6, r2
 80156fc:	1a69      	subs	r1, r5, r1
 80156fe:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8015702:	b212      	sxth	r2, r2
 8015704:	463b      	mov	r3, r7
 8015706:	b209      	sxth	r1, r1
 8015708:	4620      	mov	r0, r4
 801570a:	47c0      	blx	r8
 801570c:	69a4      	ldr	r4, [r4, #24]
 801570e:	e7db      	b.n	80156c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8015710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015714 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8015714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015718:	4c6c      	ldr	r4, [pc, #432]	; (80158cc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>)
 801571a:	b0a1      	sub	sp, #132	; 0x84
 801571c:	6824      	ldr	r4, [r4, #0]
 801571e:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8015720:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8015724:	2400      	movs	r4, #0
 8015726:	802c      	strh	r4, [r5, #0]
 8015728:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 801572a:	4606      	mov	r6, r0
 801572c:	802c      	strh	r4, [r5, #0]
 801572e:	601c      	str	r4, [r3, #0]
 8015730:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8015734:	9303      	str	r3, [sp, #12]
 8015736:	f7ff ffbd 	bl	80156b4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801573a:	f1b9 0f03 	cmp.w	r9, #3
 801573e:	f340 80bf 	ble.w	80158c0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1ac>
 8015742:	4631      	mov	r1, r6
 8015744:	a80c      	add	r0, sp, #48	; 0x30
 8015746:	f003 fa2b 	bl	8018ba0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801574a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801574e:	9306      	str	r3, [sp, #24]
 8015750:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8015754:	9307      	str	r3, [sp, #28]
 8015756:	9b03      	ldr	r3, [sp, #12]
 8015758:	f8d3 a000 	ldr.w	sl, [r3]
 801575c:	f1ba 0f00 	cmp.w	sl, #0
 8015760:	f000 80b1 	beq.w	80158c6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 8015764:	4651      	mov	r1, sl
 8015766:	a810      	add	r0, sp, #64	; 0x40
 8015768:	f003 fa1a 	bl	8018ba0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801576c:	2002      	movs	r0, #2
 801576e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8015772:	9b01      	ldr	r3, [sp, #4]
 8015774:	fb91 f1f0 	sdiv	r1, r1, r0
 8015778:	9a06      	ldr	r2, [sp, #24]
 801577a:	189d      	adds	r5, r3, r2
 801577c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8015780:	9a07      	ldr	r2, [sp, #28]
 8015782:	4419      	add	r1, r3
 8015784:	9b02      	ldr	r3, [sp, #8]
 8015786:	1a6d      	subs	r5, r5, r1
 8015788:	4413      	add	r3, r2
 801578a:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 801578e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8015792:	fb92 f2f0 	sdiv	r2, r2, r0
 8015796:	440a      	add	r2, r1
 8015798:	1a9b      	subs	r3, r3, r2
 801579a:	435b      	muls	r3, r3
 801579c:	fb05 3505 	mla	r5, r5, r5, r3
 80157a0:	4f4b      	ldr	r7, [pc, #300]	; (80158d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 80157a2:	ac10      	add	r4, sp, #64	; 0x40
 80157a4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80157a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80157a8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80157aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80157ac:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80157ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80157b0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80157b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80157b8:	2303      	movs	r3, #3
 80157ba:	f1b9 0f0c 	cmp.w	r9, #12
 80157be:	bfda      	itte	le
 80157c0:	f109 32ff 	addle.w	r2, r9, #4294967295
 80157c4:	fb92 f8f3 	sdivle	r8, r2, r3
 80157c8:	4698      	movgt	r8, r3
 80157ca:	2400      	movs	r4, #0
 80157cc:	f8cd 9000 	str.w	r9, [sp]
 80157d0:	1c63      	adds	r3, r4, #1
 80157d2:	9308      	str	r3, [sp, #32]
 80157d4:	9b00      	ldr	r3, [sp, #0]
 80157d6:	f04f 0b00 	mov.w	fp, #0
 80157da:	fb93 f3f8 	sdiv	r3, r3, r8
 80157de:	f004 0401 	and.w	r4, r4, #1
 80157e2:	aa10      	add	r2, sp, #64	; 0x40
 80157e4:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80157e8:	b29b      	uxth	r3, r3
 80157ea:	3404      	adds	r4, #4
 80157ec:	9304      	str	r3, [sp, #16]
 80157ee:	9a04      	ldr	r2, [sp, #16]
 80157f0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80157f4:	fb13 f302 	smulbb	r3, r3, r2
 80157f8:	9a01      	ldr	r2, [sp, #4]
 80157fa:	b29b      	uxth	r3, r3
 80157fc:	1899      	adds	r1, r3, r2
 80157fe:	9305      	str	r3, [sp, #20]
 8015800:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8015804:	b209      	sxth	r1, r1
 8015806:	4299      	cmp	r1, r3
 8015808:	db4d      	blt.n	80158a6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 801580a:	8932      	ldrh	r2, [r6, #8]
 801580c:	4413      	add	r3, r2
 801580e:	b21b      	sxth	r3, r3
 8015810:	4299      	cmp	r1, r3
 8015812:	da48      	bge.n	80158a6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8015814:	9b04      	ldr	r3, [sp, #16]
 8015816:	6827      	ldr	r7, [r4, #0]
 8015818:	fb17 f703 	smulbb	r7, r7, r3
 801581c:	9b02      	ldr	r3, [sp, #8]
 801581e:	b2bf      	uxth	r7, r7
 8015820:	18fa      	adds	r2, r7, r3
 8015822:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8015826:	b212      	sxth	r2, r2
 8015828:	429a      	cmp	r2, r3
 801582a:	db3c      	blt.n	80158a6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 801582c:	8970      	ldrh	r0, [r6, #10]
 801582e:	4403      	add	r3, r0
 8015830:	b21b      	sxth	r3, r3
 8015832:	429a      	cmp	r2, r3
 8015834:	da37      	bge.n	80158a6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8015836:	2300      	movs	r3, #0
 8015838:	4630      	mov	r0, r6
 801583a:	930b      	str	r3, [sp, #44]	; 0x2c
 801583c:	ab0b      	add	r3, sp, #44	; 0x2c
 801583e:	f7ff ff39 	bl	80156b4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8015842:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015844:	b37a      	cbz	r2, 80158a6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8015846:	4552      	cmp	r2, sl
 8015848:	d02d      	beq.n	80158a6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 801584a:	4611      	mov	r1, r2
 801584c:	a80e      	add	r0, sp, #56	; 0x38
 801584e:	9209      	str	r2, [sp, #36]	; 0x24
 8015850:	f003 f9a6 	bl	8018ba0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015854:	f04f 0e02 	mov.w	lr, #2
 8015858:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 801585c:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8015860:	fb91 f1fe 	sdiv	r1, r1, lr
 8015864:	fb9c fcfe 	sdiv	ip, ip, lr
 8015868:	9a06      	ldr	r2, [sp, #24]
 801586a:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 801586e:	9b01      	ldr	r3, [sp, #4]
 8015870:	4401      	add	r1, r0
 8015872:	4413      	add	r3, r2
 8015874:	1a58      	subs	r0, r3, r1
 8015876:	9a07      	ldr	r2, [sp, #28]
 8015878:	9b02      	ldr	r3, [sp, #8]
 801587a:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801587e:	4413      	add	r3, r2
 8015880:	448c      	add	ip, r1
 8015882:	eba3 030c 	sub.w	r3, r3, ip
 8015886:	435b      	muls	r3, r3
 8015888:	fb00 3300 	mla	r3, r0, r0, r3
 801588c:	42ab      	cmp	r3, r5
 801588e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015890:	d208      	bcs.n	80158a4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x190>
 8015892:	461d      	mov	r5, r3
 8015894:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015896:	9803      	ldr	r0, [sp, #12]
 8015898:	6001      	str	r1, [r0, #0]
 801589a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801589c:	9805      	ldr	r0, [sp, #20]
 801589e:	8008      	strh	r0, [r1, #0]
 80158a0:	992b      	ldr	r1, [sp, #172]	; 0xac
 80158a2:	800f      	strh	r7, [r1, #0]
 80158a4:	4692      	mov	sl, r2
 80158a6:	f10b 0b01 	add.w	fp, fp, #1
 80158aa:	f1bb 0f04 	cmp.w	fp, #4
 80158ae:	f104 0408 	add.w	r4, r4, #8
 80158b2:	d19c      	bne.n	80157ee <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xda>
 80158b4:	9b00      	ldr	r3, [sp, #0]
 80158b6:	9c08      	ldr	r4, [sp, #32]
 80158b8:	444b      	add	r3, r9
 80158ba:	4544      	cmp	r4, r8
 80158bc:	9300      	str	r3, [sp, #0]
 80158be:	d187      	bne.n	80157d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xbc>
 80158c0:	b021      	add	sp, #132	; 0x84
 80158c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158c6:	f04f 35ff 	mov.w	r5, #4294967295
 80158ca:	e769      	b.n	80157a0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 80158cc:	20197958 	.word	0x20197958
 80158d0:	080296d8 	.word	0x080296d8

080158d4 <_ZN8touchgfx4RectaNERKS0_>:
 80158d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80158d8:	f9b1 7000 	ldrsh.w	r7, [r1]
 80158dc:	888c      	ldrh	r4, [r1, #4]
 80158de:	f9b0 9000 	ldrsh.w	r9, [r0]
 80158e2:	443c      	add	r4, r7
 80158e4:	b2a4      	uxth	r4, r4
 80158e6:	fa0f f884 	sxth.w	r8, r4
 80158ea:	45c1      	cmp	r9, r8
 80158ec:	da2f      	bge.n	801594e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80158ee:	8882      	ldrh	r2, [r0, #4]
 80158f0:	444a      	add	r2, r9
 80158f2:	b292      	uxth	r2, r2
 80158f4:	fa0f fe82 	sxth.w	lr, r2
 80158f8:	4577      	cmp	r7, lr
 80158fa:	da28      	bge.n	801594e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80158fc:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8015900:	88cb      	ldrh	r3, [r1, #6]
 8015902:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8015906:	442b      	add	r3, r5
 8015908:	b21b      	sxth	r3, r3
 801590a:	429e      	cmp	r6, r3
 801590c:	da1f      	bge.n	801594e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801590e:	88c3      	ldrh	r3, [r0, #6]
 8015910:	4433      	add	r3, r6
 8015912:	b29b      	uxth	r3, r3
 8015914:	fa0f fc83 	sxth.w	ip, r3
 8015918:	4565      	cmp	r5, ip
 801591a:	da18      	bge.n	801594e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801591c:	454f      	cmp	r7, r9
 801591e:	bfb8      	it	lt
 8015920:	464f      	movlt	r7, r9
 8015922:	42b5      	cmp	r5, r6
 8015924:	bfb8      	it	lt
 8015926:	4635      	movlt	r5, r6
 8015928:	45f0      	cmp	r8, lr
 801592a:	bfd8      	it	le
 801592c:	4622      	movle	r2, r4
 801592e:	1bd2      	subs	r2, r2, r7
 8015930:	8082      	strh	r2, [r0, #4]
 8015932:	884a      	ldrh	r2, [r1, #2]
 8015934:	88c9      	ldrh	r1, [r1, #6]
 8015936:	8007      	strh	r7, [r0, #0]
 8015938:	440a      	add	r2, r1
 801593a:	b292      	uxth	r2, r2
 801593c:	b211      	sxth	r1, r2
 801593e:	458c      	cmp	ip, r1
 8015940:	bfa8      	it	ge
 8015942:	4613      	movge	r3, r2
 8015944:	1b5b      	subs	r3, r3, r5
 8015946:	80c3      	strh	r3, [r0, #6]
 8015948:	8045      	strh	r5, [r0, #2]
 801594a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801594e:	2300      	movs	r3, #0
 8015950:	8003      	strh	r3, [r0, #0]
 8015952:	8043      	strh	r3, [r0, #2]
 8015954:	8083      	strh	r3, [r0, #4]
 8015956:	80c3      	strh	r3, [r0, #6]
 8015958:	e7f7      	b.n	801594a <_ZN8touchgfx4RectaNERKS0_+0x76>

0801595a <_ZNK8touchgfx4Rect7isEmptyEv>:
 801595a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801595e:	2b00      	cmp	r3, #0
 8015960:	dd06      	ble.n	8015970 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8015962:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8015966:	2800      	cmp	r0, #0
 8015968:	bfcc      	ite	gt
 801596a:	2000      	movgt	r0, #0
 801596c:	2001      	movle	r0, #1
 801596e:	4770      	bx	lr
 8015970:	2001      	movs	r0, #1
 8015972:	4770      	bx	lr

08015974 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8015974:	2300      	movs	r3, #0
 8015976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801597a:	4604      	mov	r4, r0
 801597c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801597e:	8003      	strh	r3, [r0, #0]
 8015980:	8043      	strh	r3, [r0, #2]
 8015982:	8083      	strh	r3, [r0, #4]
 8015984:	80c3      	strh	r3, [r0, #6]
 8015986:	2d00      	cmp	r5, #0
 8015988:	d040      	beq.n	8015a0c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801598a:	1d28      	adds	r0, r5, #4
 801598c:	f7ff ffe5 	bl	801595a <_ZNK8touchgfx4Rect7isEmptyEv>
 8015990:	b988      	cbnz	r0, 80159b6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015992:	4620      	mov	r0, r4
 8015994:	f7ff ffe1 	bl	801595a <_ZNK8touchgfx4Rect7isEmptyEv>
 8015998:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801599c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80159a0:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80159a4:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80159a8:	b138      	cbz	r0, 80159ba <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80159aa:	8022      	strh	r2, [r4, #0]
 80159ac:	8063      	strh	r3, [r4, #2]
 80159ae:	f8a4 e004 	strh.w	lr, [r4, #4]
 80159b2:	f8a4 c006 	strh.w	ip, [r4, #6]
 80159b6:	69ad      	ldr	r5, [r5, #24]
 80159b8:	e7e5      	b.n	8015986 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80159ba:	f9b4 0000 	ldrsh.w	r0, [r4]
 80159be:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80159c2:	4290      	cmp	r0, r2
 80159c4:	4607      	mov	r7, r0
 80159c6:	bfa8      	it	ge
 80159c8:	4617      	movge	r7, r2
 80159ca:	4299      	cmp	r1, r3
 80159cc:	460e      	mov	r6, r1
 80159ce:	bfa8      	it	ge
 80159d0:	461e      	movge	r6, r3
 80159d2:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80159d6:	4472      	add	r2, lr
 80159d8:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80159dc:	4440      	add	r0, r8
 80159de:	4471      	add	r1, lr
 80159e0:	4463      	add	r3, ip
 80159e2:	b200      	sxth	r0, r0
 80159e4:	b212      	sxth	r2, r2
 80159e6:	b209      	sxth	r1, r1
 80159e8:	b21b      	sxth	r3, r3
 80159ea:	4290      	cmp	r0, r2
 80159ec:	bfac      	ite	ge
 80159ee:	ebc7 0200 	rsbge	r2, r7, r0
 80159f2:	ebc7 0202 	rsblt	r2, r7, r2
 80159f6:	4299      	cmp	r1, r3
 80159f8:	bfac      	ite	ge
 80159fa:	ebc6 0301 	rsbge	r3, r6, r1
 80159fe:	ebc6 0303 	rsblt	r3, r6, r3
 8015a02:	8027      	strh	r7, [r4, #0]
 8015a04:	8066      	strh	r6, [r4, #2]
 8015a06:	80a2      	strh	r2, [r4, #4]
 8015a08:	80e3      	strh	r3, [r4, #6]
 8015a0a:	e7d4      	b.n	80159b6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015a0c:	4620      	mov	r0, r4
 8015a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015a12 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8015a12:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015a16:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015a1a:	b383      	cbz	r3, 8015a7e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015a1c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015a1e:	b374      	cbz	r4, 8015a7e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8015a20:	f9b1 5000 	ldrsh.w	r5, [r1]
 8015a24:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8015a28:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8015a2c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8015a30:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015a34:	b303      	cbz	r3, 8015a78 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015a36:	4668      	mov	r0, sp
 8015a38:	1d21      	adds	r1, r4, #4
 8015a3a:	f8ad 5000 	strh.w	r5, [sp]
 8015a3e:	f8ad 6002 	strh.w	r6, [sp, #2]
 8015a42:	f8ad 7004 	strh.w	r7, [sp, #4]
 8015a46:	f8ad 8006 	strh.w	r8, [sp, #6]
 8015a4a:	f7ff ff43 	bl	80158d4 <_ZN8touchgfx4RectaNERKS0_>
 8015a4e:	4668      	mov	r0, sp
 8015a50:	f7ff ff83 	bl	801595a <_ZNK8touchgfx4Rect7isEmptyEv>
 8015a54:	b980      	cbnz	r0, 8015a78 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015a56:	f8bd 3000 	ldrh.w	r3, [sp]
 8015a5a:	88a2      	ldrh	r2, [r4, #4]
 8015a5c:	4669      	mov	r1, sp
 8015a5e:	1a9b      	subs	r3, r3, r2
 8015a60:	f8ad 3000 	strh.w	r3, [sp]
 8015a64:	88e2      	ldrh	r2, [r4, #6]
 8015a66:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015a6a:	4620      	mov	r0, r4
 8015a6c:	1a9b      	subs	r3, r3, r2
 8015a6e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015a72:	6823      	ldr	r3, [r4, #0]
 8015a74:	689b      	ldr	r3, [r3, #8]
 8015a76:	4798      	blx	r3
 8015a78:	69a4      	ldr	r4, [r4, #24]
 8015a7a:	2c00      	cmp	r4, #0
 8015a7c:	d1d8      	bne.n	8015a30 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8015a7e:	b002      	add	sp, #8
 8015a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015a84 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8015a84:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015a86:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8015a8a:	460d      	mov	r5, r1
 8015a8c:	4616      	mov	r6, r2
 8015a8e:	b323      	cbz	r3, 8015ada <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015a90:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015a92:	b314      	cbz	r4, 8015ada <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015a94:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015a98:	b1eb      	cbz	r3, 8015ad6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015a9a:	466b      	mov	r3, sp
 8015a9c:	6828      	ldr	r0, [r5, #0]
 8015a9e:	6869      	ldr	r1, [r5, #4]
 8015aa0:	c303      	stmia	r3!, {r0, r1}
 8015aa2:	4668      	mov	r0, sp
 8015aa4:	1d21      	adds	r1, r4, #4
 8015aa6:	f7ff ff15 	bl	80158d4 <_ZN8touchgfx4RectaNERKS0_>
 8015aaa:	4668      	mov	r0, sp
 8015aac:	f7ff ff55 	bl	801595a <_ZNK8touchgfx4Rect7isEmptyEv>
 8015ab0:	b988      	cbnz	r0, 8015ad6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015ab2:	f8bd 3000 	ldrh.w	r3, [sp]
 8015ab6:	88a2      	ldrh	r2, [r4, #4]
 8015ab8:	4669      	mov	r1, sp
 8015aba:	1a9b      	subs	r3, r3, r2
 8015abc:	f8ad 3000 	strh.w	r3, [sp]
 8015ac0:	88e2      	ldrh	r2, [r4, #6]
 8015ac2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015ac6:	4620      	mov	r0, r4
 8015ac8:	1a9b      	subs	r3, r3, r2
 8015aca:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015ace:	6823      	ldr	r3, [r4, #0]
 8015ad0:	4632      	mov	r2, r6
 8015ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015ad4:	4798      	blx	r3
 8015ad6:	69a4      	ldr	r4, [r4, #24]
 8015ad8:	e7db      	b.n	8015a92 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8015ada:	b002      	add	sp, #8
 8015adc:	bd70      	pop	{r4, r5, r6, pc}

08015ade <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8015ade:	b513      	push	{r0, r1, r4, lr}
 8015ae0:	6803      	ldr	r3, [r0, #0]
 8015ae2:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8015ae6:	2300      	movs	r3, #0
 8015ae8:	e9cd 3300 	strd	r3, r3, [sp]
 8015aec:	466b      	mov	r3, sp
 8015aee:	47a0      	blx	r4
 8015af0:	b002      	add	sp, #8
 8015af2:	bd10      	pop	{r4, pc}

08015af4 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8015af4:	2301      	movs	r3, #1
 8015af6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015afa:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015afe:	4770      	bx	lr

08015b00 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8015b00:	2301      	movs	r3, #1
 8015b02:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015b06:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015b0a:	4770      	bx	lr

08015b0c <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8015b0c:	2201      	movs	r2, #1
 8015b0e:	6843      	ldr	r3, [r0, #4]
 8015b10:	725a      	strb	r2, [r3, #9]
 8015b12:	6840      	ldr	r0, [r0, #4]
 8015b14:	6803      	ldr	r3, [r0, #0]
 8015b16:	691b      	ldr	r3, [r3, #16]
 8015b18:	4718      	bx	r3

08015b1a <_ZN8touchgfx3HAL8flushDMAEv>:
 8015b1a:	6840      	ldr	r0, [r0, #4]
 8015b1c:	6803      	ldr	r3, [r0, #0]
 8015b1e:	689b      	ldr	r3, [r3, #8]
 8015b20:	4718      	bx	r3

08015b22 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8015b22:	b530      	push	{r4, r5, lr}
 8015b24:	b08b      	sub	sp, #44	; 0x2c
 8015b26:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8015b2a:	6804      	ldr	r4, [r0, #0]
 8015b2c:	9509      	str	r5, [sp, #36]	; 0x24
 8015b2e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8015b32:	9508      	str	r5, [sp, #32]
 8015b34:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8015b38:	9507      	str	r5, [sp, #28]
 8015b3a:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8015b3e:	9506      	str	r5, [sp, #24]
 8015b40:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8015b44:	9505      	str	r5, [sp, #20]
 8015b46:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8015b4a:	9504      	str	r5, [sp, #16]
 8015b4c:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8015b50:	9503      	str	r5, [sp, #12]
 8015b52:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8015b56:	9502      	str	r5, [sp, #8]
 8015b58:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8015b5c:	e9cd 3500 	strd	r3, r5, [sp]
 8015b60:	4613      	mov	r3, r2
 8015b62:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8015b64:	2200      	movs	r2, #0
 8015b66:	47a0      	blx	r4
 8015b68:	b00b      	add	sp, #44	; 0x2c
 8015b6a:	bd30      	pop	{r4, r5, pc}

08015b6c <_ZN8touchgfx3HAL10beginFrameEv>:
 8015b6c:	4b04      	ldr	r3, [pc, #16]	; (8015b80 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8015b6e:	781b      	ldrb	r3, [r3, #0]
 8015b70:	b123      	cbz	r3, 8015b7c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8015b72:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8015b76:	f080 0001 	eor.w	r0, r0, #1
 8015b7a:	4770      	bx	lr
 8015b7c:	2001      	movs	r0, #1
 8015b7e:	4770      	bx	lr
 8015b80:	20197956 	.word	0x20197956

08015b84 <_ZN8touchgfx3HAL8endFrameEv>:
 8015b84:	b510      	push	{r4, lr}
 8015b86:	4604      	mov	r4, r0
 8015b88:	6840      	ldr	r0, [r0, #4]
 8015b8a:	6803      	ldr	r3, [r0, #0]
 8015b8c:	689b      	ldr	r3, [r3, #8]
 8015b8e:	4798      	blx	r3
 8015b90:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8015b94:	b113      	cbz	r3, 8015b9c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8015b96:	2301      	movs	r3, #1
 8015b98:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8015b9c:	bd10      	pop	{r4, pc}

08015b9e <_ZN8touchgfx3HAL10initializeEv>:
 8015b9e:	b510      	push	{r4, lr}
 8015ba0:	4604      	mov	r4, r0
 8015ba2:	f7ec faf9 	bl	8002198 <_ZN8touchgfx10OSWrappers10initializeEv>
 8015ba6:	f7ec f92b 	bl	8001e00 <_ZN8touchgfx4GPIO4initEv>
 8015baa:	6860      	ldr	r0, [r4, #4]
 8015bac:	6803      	ldr	r3, [r0, #0]
 8015bae:	68db      	ldr	r3, [r3, #12]
 8015bb0:	4798      	blx	r3
 8015bb2:	68e0      	ldr	r0, [r4, #12]
 8015bb4:	6803      	ldr	r3, [r0, #0]
 8015bb6:	689b      	ldr	r3, [r3, #8]
 8015bb8:	4798      	blx	r3
 8015bba:	6823      	ldr	r3, [r4, #0]
 8015bbc:	4620      	mov	r0, r4
 8015bbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015bc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015bc4:	4718      	bx	r3

08015bc6 <_ZN8touchgfx3HAL9taskEntryEv>:
 8015bc6:	4604      	mov	r4, r0
 8015bc8:	b508      	push	{r3, lr}
 8015bca:	6803      	ldr	r3, [r0, #0]
 8015bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015bd0:	4798      	blx	r3
 8015bd2:	6823      	ldr	r3, [r4, #0]
 8015bd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015bd6:	4620      	mov	r0, r4
 8015bd8:	4798      	blx	r3
 8015bda:	f7ec fba3 	bl	8002324 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8015bde:	6823      	ldr	r3, [r4, #0]
 8015be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015be2:	e7f8      	b.n	8015bd6 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08015be4 <_ZN8touchgfx3HAL4tickEv>:
 8015be4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015be6:	6803      	ldr	r3, [r0, #0]
 8015be8:	4604      	mov	r4, r0
 8015bea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015bee:	4798      	blx	r3
 8015bf0:	4d59      	ldr	r5, [pc, #356]	; (8015d58 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8015bf2:	2800      	cmp	r0, #0
 8015bf4:	f000 8095 	beq.w	8015d22 <_ZN8touchgfx3HAL4tickEv+0x13e>
 8015bf8:	2600      	movs	r6, #0
 8015bfa:	2001      	movs	r0, #1
 8015bfc:	f7ec f902 	bl	8001e04 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8015c00:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8015c04:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8015c08:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015c0c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8015c10:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8015c14:	b133      	cbz	r3, 8015c24 <_ZN8touchgfx3HAL4tickEv+0x40>
 8015c16:	6823      	ldr	r3, [r4, #0]
 8015c18:	4620      	mov	r0, r4
 8015c1a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8015c1e:	4798      	blx	r3
 8015c20:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8015c24:	2601      	movs	r6, #1
 8015c26:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8015c2a:	6862      	ldr	r2, [r4, #4]
 8015c2c:	f083 0301 	eor.w	r3, r3, #1
 8015c30:	7253      	strb	r3, [r2, #9]
 8015c32:	702e      	strb	r6, [r5, #0]
 8015c34:	f001 fed4 	bl	80179e0 <_ZN8touchgfx11Application11getInstanceEv>
 8015c38:	6803      	ldr	r3, [r0, #0]
 8015c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c3c:	4798      	blx	r3
 8015c3e:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015c42:	b90b      	cbnz	r3, 8015c48 <_ZN8touchgfx3HAL4tickEv+0x64>
 8015c44:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8015c48:	f001 feca 	bl	80179e0 <_ZN8touchgfx11Application11getInstanceEv>
 8015c4c:	6803      	ldr	r3, [r0, #0]
 8015c4e:	695b      	ldr	r3, [r3, #20]
 8015c50:	4798      	blx	r3
 8015c52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015c54:	6803      	ldr	r3, [r0, #0]
 8015c56:	691b      	ldr	r3, [r3, #16]
 8015c58:	4798      	blx	r3
 8015c5a:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015c5e:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8015c62:	3b01      	subs	r3, #1
 8015c64:	b2db      	uxtb	r3, r3
 8015c66:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015c6a:	b10a      	cbz	r2, 8015c70 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d1eb      	bne.n	8015c48 <_ZN8touchgfx3HAL4tickEv+0x64>
 8015c70:	4a3a      	ldr	r2, [pc, #232]	; (8015d5c <_ZN8touchgfx3HAL4tickEv+0x178>)
 8015c72:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8015c76:	7813      	ldrb	r3, [r2, #0]
 8015c78:	3301      	adds	r3, #1
 8015c7a:	b25b      	sxtb	r3, r3
 8015c7c:	4299      	cmp	r1, r3
 8015c7e:	7013      	strb	r3, [r2, #0]
 8015c80:	dc10      	bgt.n	8015ca4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8015c82:	2300      	movs	r3, #0
 8015c84:	68e0      	ldr	r0, [r4, #12]
 8015c86:	7013      	strb	r3, [r2, #0]
 8015c88:	6803      	ldr	r3, [r0, #0]
 8015c8a:	aa03      	add	r2, sp, #12
 8015c8c:	68db      	ldr	r3, [r3, #12]
 8015c8e:	a902      	add	r1, sp, #8
 8015c90:	4798      	blx	r3
 8015c92:	6823      	ldr	r3, [r4, #0]
 8015c94:	2800      	cmp	r0, #0
 8015c96:	d050      	beq.n	8015d3a <_ZN8touchgfx3HAL4tickEv+0x156>
 8015c98:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8015c9c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8015ca0:	4620      	mov	r0, r4
 8015ca2:	4798      	blx	r3
 8015ca4:	2300      	movs	r3, #0
 8015ca6:	6960      	ldr	r0, [r4, #20]
 8015ca8:	f88d 3007 	strb.w	r3, [sp, #7]
 8015cac:	b158      	cbz	r0, 8015cc6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8015cae:	6803      	ldr	r3, [r0, #0]
 8015cb0:	f10d 0107 	add.w	r1, sp, #7
 8015cb4:	68db      	ldr	r3, [r3, #12]
 8015cb6:	4798      	blx	r3
 8015cb8:	b128      	cbz	r0, 8015cc6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8015cba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015cbc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8015cc0:	6803      	ldr	r3, [r0, #0]
 8015cc2:	68db      	ldr	r3, [r3, #12]
 8015cc4:	4798      	blx	r3
 8015cc6:	f104 001c 	add.w	r0, r4, #28
 8015cca:	f004 fc49 	bl	801a560 <_ZN8touchgfx8Gestures4tickEv>
 8015cce:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8015cd2:	b30b      	cbz	r3, 8015d18 <_ZN8touchgfx3HAL4tickEv+0x134>
 8015cd4:	6920      	ldr	r0, [r4, #16]
 8015cd6:	6803      	ldr	r3, [r0, #0]
 8015cd8:	691b      	ldr	r3, [r3, #16]
 8015cda:	4798      	blx	r3
 8015cdc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015cde:	4606      	mov	r6, r0
 8015ce0:	b903      	cbnz	r3, 8015ce4 <_ZN8touchgfx3HAL4tickEv+0x100>
 8015ce2:	6720      	str	r0, [r4, #112]	; 0x70
 8015ce4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015ce6:	4a1e      	ldr	r2, [pc, #120]	; (8015d60 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8015ce8:	1af3      	subs	r3, r6, r3
 8015cea:	4293      	cmp	r3, r2
 8015cec:	d914      	bls.n	8015d18 <_ZN8touchgfx3HAL4tickEv+0x134>
 8015cee:	6920      	ldr	r0, [r4, #16]
 8015cf0:	6803      	ldr	r3, [r0, #0]
 8015cf2:	699b      	ldr	r3, [r3, #24]
 8015cf4:	4798      	blx	r3
 8015cf6:	2264      	movs	r2, #100	; 0x64
 8015cf8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015cfa:	1af3      	subs	r3, r6, r3
 8015cfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8015d00:	fbb0 f0f3 	udiv	r0, r0, r3
 8015d04:	2800      	cmp	r0, #0
 8015d06:	dc1d      	bgt.n	8015d44 <_ZN8touchgfx3HAL4tickEv+0x160>
 8015d08:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8015d0c:	6920      	ldr	r0, [r4, #16]
 8015d0e:	2100      	movs	r1, #0
 8015d10:	6803      	ldr	r3, [r0, #0]
 8015d12:	69db      	ldr	r3, [r3, #28]
 8015d14:	4798      	blx	r3
 8015d16:	6726      	str	r6, [r4, #112]	; 0x70
 8015d18:	f001 fe62 	bl	80179e0 <_ZN8touchgfx11Application11getInstanceEv>
 8015d1c:	6803      	ldr	r3, [r0, #0]
 8015d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d20:	4798      	blx	r3
 8015d22:	6823      	ldr	r3, [r4, #0]
 8015d24:	4620      	mov	r0, r4
 8015d26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015d2a:	4798      	blx	r3
 8015d2c:	2001      	movs	r0, #1
 8015d2e:	f7ec f885 	bl	8001e3c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8015d32:	2300      	movs	r3, #0
 8015d34:	702b      	strb	r3, [r5, #0]
 8015d36:	b004      	add	sp, #16
 8015d38:	bd70      	pop	{r4, r5, r6, pc}
 8015d3a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8015d3e:	4620      	mov	r0, r4
 8015d40:	4798      	blx	r3
 8015d42:	e7af      	b.n	8015ca4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8015d44:	2863      	cmp	r0, #99	; 0x63
 8015d46:	bfcb      	itete	gt
 8015d48:	2300      	movgt	r3, #0
 8015d4a:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8015d4e:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8015d52:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8015d56:	e7d9      	b.n	8015d0c <_ZN8touchgfx3HAL4tickEv+0x128>
 8015d58:	2019795c 	.word	0x2019795c
 8015d5c:	2019795d 	.word	0x2019795d
 8015d60:	05f5e100 	.word	0x05f5e100

08015d64 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8015d64:	f7ec ba80 	b.w	8002268 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015d68 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8015d68:	6581      	str	r1, [r0, #88]	; 0x58
 8015d6a:	301c      	adds	r0, #28
 8015d6c:	f004 bbf6 	b.w	801a55c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08015d70 <_ZN8touchgfx3HAL5touchEll>:
 8015d70:	b530      	push	{r4, r5, lr}
 8015d72:	4604      	mov	r4, r0
 8015d74:	b087      	sub	sp, #28
 8015d76:	a804      	add	r0, sp, #16
 8015d78:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8015d7c:	f001 fc30 	bl	80175e0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8015d80:	9b04      	ldr	r3, [sp, #16]
 8015d82:	a906      	add	r1, sp, #24
 8015d84:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015d88:	9b05      	ldr	r3, [sp, #20]
 8015d8a:	a803      	add	r0, sp, #12
 8015d8c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8015d90:	f001 fc78 	bl	8017684 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8015d94:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8015d98:	f104 001c 	add.w	r0, r4, #28
 8015d9c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8015da0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8015da4:	b189      	cbz	r1, 8015dca <_ZN8touchgfx3HAL5touchEll+0x5a>
 8015da6:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8015daa:	9300      	str	r3, [sp, #0]
 8015dac:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8015db0:	4613      	mov	r3, r2
 8015db2:	462a      	mov	r2, r5
 8015db4:	f004 fbe2 	bl	801a57c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8015db8:	b128      	cbz	r0, 8015dc6 <_ZN8touchgfx3HAL5touchEll+0x56>
 8015dba:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8015dbe:	65e3      	str	r3, [r4, #92]	; 0x5c
 8015dc0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015dc4:	6623      	str	r3, [r4, #96]	; 0x60
 8015dc6:	b007      	add	sp, #28
 8015dc8:	bd30      	pop	{r4, r5, pc}
 8015dca:	f004 fc17 	bl	801a5fc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015dce:	2301      	movs	r3, #1
 8015dd0:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015dd4:	e7f1      	b.n	8015dba <_ZN8touchgfx3HAL5touchEll+0x4a>

08015dd6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8015dd6:	b510      	push	{r4, lr}
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d046      	beq.n	8015e6a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8015ddc:	ea81 0002 	eor.w	r0, r1, r2
 8015de0:	07c4      	lsls	r4, r0, #31
 8015de2:	d508      	bpl.n	8015df6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8015de4:	440b      	add	r3, r1
 8015de6:	3a01      	subs	r2, #1
 8015de8:	428b      	cmp	r3, r1
 8015dea:	d93e      	bls.n	8015e6a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8015dec:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015df0:	f801 0b01 	strb.w	r0, [r1], #1
 8015df4:	e7f8      	b.n	8015de8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8015df6:	07d0      	lsls	r0, r2, #31
 8015df8:	bf42      	ittt	mi
 8015dfa:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8015dfe:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8015e02:	f801 0b01 	strbmi.w	r0, [r1], #1
 8015e06:	2b01      	cmp	r3, #1
 8015e08:	d911      	bls.n	8015e2e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8015e0a:	ea81 0402 	eor.w	r4, r1, r2
 8015e0e:	07a4      	lsls	r4, r4, #30
 8015e10:	4610      	mov	r0, r2
 8015e12:	d022      	beq.n	8015e5a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8015e14:	f023 0401 	bic.w	r4, r3, #1
 8015e18:	440c      	add	r4, r1
 8015e1a:	428c      	cmp	r4, r1
 8015e1c:	4602      	mov	r2, r0
 8015e1e:	d904      	bls.n	8015e2a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8015e20:	8812      	ldrh	r2, [r2, #0]
 8015e22:	3002      	adds	r0, #2
 8015e24:	f821 2b02 	strh.w	r2, [r1], #2
 8015e28:	e7f7      	b.n	8015e1a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8015e2a:	f003 0301 	and.w	r3, r3, #1
 8015e2e:	f023 0003 	bic.w	r0, r3, #3
 8015e32:	4408      	add	r0, r1
 8015e34:	4288      	cmp	r0, r1
 8015e36:	4614      	mov	r4, r2
 8015e38:	d904      	bls.n	8015e44 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8015e3a:	6824      	ldr	r4, [r4, #0]
 8015e3c:	3204      	adds	r2, #4
 8015e3e:	f841 4b04 	str.w	r4, [r1], #4
 8015e42:	e7f7      	b.n	8015e34 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8015e44:	f003 0303 	and.w	r3, r3, #3
 8015e48:	440b      	add	r3, r1
 8015e4a:	3a01      	subs	r2, #1
 8015e4c:	428b      	cmp	r3, r1
 8015e4e:	d90c      	bls.n	8015e6a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8015e50:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015e54:	f801 0b01 	strb.w	r0, [r1], #1
 8015e58:	e7f8      	b.n	8015e4c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8015e5a:	0790      	lsls	r0, r2, #30
 8015e5c:	d0e7      	beq.n	8015e2e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8015e5e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8015e62:	3b02      	subs	r3, #2
 8015e64:	f821 0b02 	strh.w	r0, [r1], #2
 8015e68:	e7e1      	b.n	8015e2e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8015e6a:	2001      	movs	r0, #1
 8015e6c:	bd10      	pop	{r4, pc}

08015e6e <_ZN8touchgfx3HAL7noTouchEv>:
 8015e6e:	b510      	push	{r4, lr}
 8015e70:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8015e74:	4604      	mov	r4, r0
 8015e76:	b153      	cbz	r3, 8015e8e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8015e78:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8015e7c:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8015e80:	2101      	movs	r1, #1
 8015e82:	301c      	adds	r0, #28
 8015e84:	f004 fbba 	bl	801a5fc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015e88:	2300      	movs	r3, #0
 8015e8a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015e8e:	bd10      	pop	{r4, pc}

08015e90 <_ZN8touchgfx8Drawable5setXYEss>:
 8015e90:	b570      	push	{r4, r5, r6, lr}
 8015e92:	4604      	mov	r4, r0
 8015e94:	4615      	mov	r5, r2
 8015e96:	6803      	ldr	r3, [r0, #0]
 8015e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e9a:	4798      	blx	r3
 8015e9c:	6823      	ldr	r3, [r4, #0]
 8015e9e:	4629      	mov	r1, r5
 8015ea0:	4620      	mov	r0, r4
 8015ea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015ea8:	4718      	bx	r3
	...

08015eac <_ZN8touchgfx3HAL3lcdEv>:
 8015eac:	4b04      	ldr	r3, [pc, #16]	; (8015ec0 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8015eb4:	b10a      	cbz	r2, 8015eba <_ZN8touchgfx3HAL3lcdEv+0xe>
 8015eb6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015eb8:	b900      	cbnz	r0, 8015ebc <_ZN8touchgfx3HAL3lcdEv+0x10>
 8015eba:	6898      	ldr	r0, [r3, #8]
 8015ebc:	4770      	bx	lr
 8015ebe:	bf00      	nop
 8015ec0:	20197958 	.word	0x20197958

08015ec4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8015ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015ec8:	4604      	mov	r4, r0
 8015eca:	2000      	movs	r0, #0
 8015ecc:	b085      	sub	sp, #20
 8015ece:	ad04      	add	r5, sp, #16
 8015ed0:	f845 0d04 	str.w	r0, [r5, #-4]!
 8015ed4:	69a0      	ldr	r0, [r4, #24]
 8015ed6:	4699      	mov	r9, r3
 8015ed8:	6806      	ldr	r6, [r0, #0]
 8015eda:	9501      	str	r5, [sp, #4]
 8015edc:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8015ee0:	460f      	mov	r7, r1
 8015ee2:	9500      	str	r5, [sp, #0]
 8015ee4:	6835      	ldr	r5, [r6, #0]
 8015ee6:	4690      	mov	r8, r2
 8015ee8:	47a8      	blx	r5
 8015eea:	4d10      	ldr	r5, [pc, #64]	; (8015f2c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8015eec:	4606      	mov	r6, r0
 8015eee:	f8a5 9000 	strh.w	r9, [r5]
 8015ef2:	f7ff ffdb 	bl	8015eac <_ZN8touchgfx3HAL3lcdEv>
 8015ef6:	6803      	ldr	r3, [r0, #0]
 8015ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015efa:	4798      	blx	r3
 8015efc:	b128      	cbz	r0, 8015f0a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8015efe:	2801      	cmp	r0, #1
 8015f00:	d00b      	beq.n	8015f1a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8015f02:	4630      	mov	r0, r6
 8015f04:	b005      	add	sp, #20
 8015f06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f0a:	882b      	ldrh	r3, [r5, #0]
 8015f0c:	fb08 7203 	mla	r2, r8, r3, r7
 8015f10:	9b03      	ldr	r3, [sp, #12]
 8015f12:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8015f16:	63e3      	str	r3, [r4, #60]	; 0x3c
 8015f18:	e7f3      	b.n	8015f02 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8015f1a:	882a      	ldrh	r2, [r5, #0]
 8015f1c:	9b03      	ldr	r3, [sp, #12]
 8015f1e:	fb08 7202 	mla	r2, r8, r2, r7
 8015f22:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015f26:	1a9a      	subs	r2, r3, r2
 8015f28:	63e2      	str	r2, [r4, #60]	; 0x3c
 8015f2a:	e7ea      	b.n	8015f02 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8015f2c:	20197952 	.word	0x20197952

08015f30 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8015f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f32:	b08b      	sub	sp, #44	; 0x2c
 8015f34:	4617      	mov	r7, r2
 8015f36:	4604      	mov	r4, r0
 8015f38:	460e      	mov	r6, r1
 8015f3a:	461d      	mov	r5, r3
 8015f3c:	f7ff ffb6 	bl	8015eac <_ZN8touchgfx3HAL3lcdEv>
 8015f40:	6803      	ldr	r3, [r0, #0]
 8015f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f44:	4798      	blx	r3
 8015f46:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8015f4a:	9007      	str	r0, [sp, #28]
 8015f4c:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8015f50:	4b0d      	ldr	r3, [pc, #52]	; (8015f88 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8015f52:	6822      	ldr	r2, [r4, #0]
 8015f54:	881b      	ldrh	r3, [r3, #0]
 8015f56:	4631      	mov	r1, r6
 8015f58:	9306      	str	r3, [sp, #24]
 8015f5a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8015f5e:	4620      	mov	r0, r4
 8015f60:	9305      	str	r3, [sp, #20]
 8015f62:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8015f66:	9304      	str	r3, [sp, #16]
 8015f68:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015f6c:	9303      	str	r3, [sp, #12]
 8015f6e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015f72:	9302      	str	r3, [sp, #8]
 8015f74:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015f78:	e9cd 5300 	strd	r5, r3, [sp]
 8015f7c:	463b      	mov	r3, r7
 8015f7e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8015f80:	2200      	movs	r2, #0
 8015f82:	47a8      	blx	r5
 8015f84:	b00b      	add	sp, #44	; 0x2c
 8015f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f88:	20197952 	.word	0x20197952

08015f8c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8015f8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f90:	4698      	mov	r8, r3
 8015f92:	6803      	ldr	r3, [r0, #0]
 8015f94:	b08b      	sub	sp, #44	; 0x2c
 8015f96:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8015f98:	4b14      	ldr	r3, [pc, #80]	; (8015fec <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8015f9a:	4617      	mov	r7, r2
 8015f9c:	f8b3 9000 	ldrh.w	r9, [r3]
 8015fa0:	460e      	mov	r6, r1
 8015fa2:	4604      	mov	r4, r0
 8015fa4:	f7ff ff82 	bl	8015eac <_ZN8touchgfx3HAL3lcdEv>
 8015fa8:	6803      	ldr	r3, [r0, #0]
 8015faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015fac:	4798      	blx	r3
 8015fae:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8015fb2:	2200      	movs	r2, #0
 8015fb4:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8015fb8:	2302      	movs	r3, #2
 8015fba:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8015fbe:	2301      	movs	r3, #1
 8015fc0:	9305      	str	r3, [sp, #20]
 8015fc2:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8015fc6:	4631      	mov	r1, r6
 8015fc8:	9304      	str	r3, [sp, #16]
 8015fca:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8015fce:	4620      	mov	r0, r4
 8015fd0:	9303      	str	r3, [sp, #12]
 8015fd2:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8015fd6:	9302      	str	r3, [sp, #8]
 8015fd8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015fdc:	e9cd 8300 	strd	r8, r3, [sp]
 8015fe0:	463b      	mov	r3, r7
 8015fe2:	47a8      	blx	r5
 8015fe4:	b00b      	add	sp, #44	; 0x2c
 8015fe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015fea:	bf00      	nop
 8015fec:	20197952 	.word	0x20197952

08015ff0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8015ff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015ff4:	4698      	mov	r8, r3
 8015ff6:	6803      	ldr	r3, [r0, #0]
 8015ff8:	b087      	sub	sp, #28
 8015ffa:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8015ffc:	4b10      	ldr	r3, [pc, #64]	; (8016040 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8015ffe:	460e      	mov	r6, r1
 8016000:	f8b3 9000 	ldrh.w	r9, [r3]
 8016004:	4617      	mov	r7, r2
 8016006:	4604      	mov	r4, r0
 8016008:	f7ff ff50 	bl	8015eac <_ZN8touchgfx3HAL3lcdEv>
 801600c:	6803      	ldr	r3, [r0, #0]
 801600e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016010:	4798      	blx	r3
 8016012:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8016016:	f8cd 900c 	str.w	r9, [sp, #12]
 801601a:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801601e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8016022:	463a      	mov	r2, r7
 8016024:	9302      	str	r3, [sp, #8]
 8016026:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801602a:	4631      	mov	r1, r6
 801602c:	9301      	str	r3, [sp, #4]
 801602e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8016032:	4620      	mov	r0, r4
 8016034:	9300      	str	r3, [sp, #0]
 8016036:	4643      	mov	r3, r8
 8016038:	47a8      	blx	r5
 801603a:	b007      	add	sp, #28
 801603c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016040:	20197952 	.word	0x20197952

08016044 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8016044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016048:	4604      	mov	r4, r0
 801604a:	b08f      	sub	sp, #60	; 0x3c
 801604c:	4610      	mov	r0, r2
 801604e:	460d      	mov	r5, r1
 8016050:	4691      	mov	r9, r2
 8016052:	461e      	mov	r6, r3
 8016054:	f004 f878 	bl	801a148 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8016058:	2800      	cmp	r0, #0
 801605a:	f000 809d 	beq.w	8016198 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 801605e:	6823      	ldr	r3, [r4, #0]
 8016060:	4620      	mov	r0, r4
 8016062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016064:	4798      	blx	r3
 8016066:	6823      	ldr	r3, [r4, #0]
 8016068:	f8df b190 	ldr.w	fp, [pc, #400]	; 80161fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 801606c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801606e:	4620      	mov	r0, r4
 8016070:	4798      	blx	r3
 8016072:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8016200 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8016076:	f8bb 3000 	ldrh.w	r3, [fp]
 801607a:	4f5d      	ldr	r7, [pc, #372]	; (80161f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801607c:	9301      	str	r3, [sp, #4]
 801607e:	f8ba 3000 	ldrh.w	r3, [sl]
 8016082:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8016086:	9302      	str	r3, [sp, #8]
 8016088:	883b      	ldrh	r3, [r7, #0]
 801608a:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801608e:	9303      	str	r3, [sp, #12]
 8016090:	4b58      	ldr	r3, [pc, #352]	; (80161f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8016092:	4640      	mov	r0, r8
 8016094:	881a      	ldrh	r2, [r3, #0]
 8016096:	9305      	str	r3, [sp, #20]
 8016098:	9204      	str	r2, [sp, #16]
 801609a:	f004 f8e9 	bl	801a270 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801609e:	8038      	strh	r0, [r7, #0]
 80160a0:	4640      	mov	r0, r8
 80160a2:	f004 f919 	bl	801a2d8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80160a6:	9b05      	ldr	r3, [sp, #20]
 80160a8:	b280      	uxth	r0, r0
 80160aa:	8018      	strh	r0, [r3, #0]
 80160ac:	4b52      	ldr	r3, [pc, #328]	; (80161f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80160ae:	781b      	ldrb	r3, [r3, #0]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d174      	bne.n	801619e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80160b4:	883b      	ldrh	r3, [r7, #0]
 80160b6:	f8aa 0000 	strh.w	r0, [sl]
 80160ba:	f8ab 3000 	strh.w	r3, [fp]
 80160be:	4648      	mov	r0, r9
 80160c0:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 80160c4:	f004 f840 	bl	801a148 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80160c8:	2200      	movs	r2, #0
 80160ca:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 80160ce:	4611      	mov	r1, r2
 80160d0:	4628      	mov	r0, r5
 80160d2:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80160d6:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80160da:	f7ff fed9 	bl	8015e90 <_ZN8touchgfx8Drawable5setXYEss>
 80160de:	2301      	movs	r3, #1
 80160e0:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 80160e4:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80160e8:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	dd5c      	ble.n	80161aa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80160f0:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	dd58      	ble.n	80161aa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80160f8:	462a      	mov	r2, r5
 80160fa:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80160fe:	ab0a      	add	r3, sp, #40	; 0x28
 8016100:	6851      	ldr	r1, [r2, #4]
 8016102:	c303      	stmia	r3!, {r0, r1}
 8016104:	4631      	mov	r1, r6
 8016106:	a80a      	add	r0, sp, #40	; 0x28
 8016108:	f7ff fbe4 	bl	80158d4 <_ZN8touchgfx4RectaNERKS0_>
 801610c:	2100      	movs	r1, #0
 801610e:	4b38      	ldr	r3, [pc, #224]	; (80161f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8016110:	910c      	str	r1, [sp, #48]	; 0x30
 8016112:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016116:	4b37      	ldr	r3, [pc, #220]	; (80161f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8016118:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801611c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016120:	aa0a      	add	r2, sp, #40	; 0x28
 8016122:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8016126:	ab08      	add	r3, sp, #32
 8016128:	e892 0003 	ldmia.w	r2, {r0, r1}
 801612c:	e883 0003 	stmia.w	r3, {r0, r1}
 8016130:	4618      	mov	r0, r3
 8016132:	a90c      	add	r1, sp, #48	; 0x30
 8016134:	f7ff fbce 	bl	80158d4 <_ZN8touchgfx4RectaNERKS0_>
 8016138:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801613a:	2b00      	cmp	r3, #0
 801613c:	d13c      	bne.n	80161b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 801613e:	2000      	movs	r0, #0
 8016140:	2600      	movs	r6, #0
 8016142:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8016146:	696b      	ldr	r3, [r5, #20]
 8016148:	682a      	ldr	r2, [r5, #0]
 801614a:	616e      	str	r6, [r5, #20]
 801614c:	9305      	str	r3, [sp, #20]
 801614e:	6892      	ldr	r2, [r2, #8]
 8016150:	a908      	add	r1, sp, #32
 8016152:	4628      	mov	r0, r5
 8016154:	4790      	blx	r2
 8016156:	9b05      	ldr	r3, [sp, #20]
 8016158:	4652      	mov	r2, sl
 801615a:	616b      	str	r3, [r5, #20]
 801615c:	4649      	mov	r1, r9
 801615e:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8016162:	4628      	mov	r0, r5
 8016164:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8016168:	f7ff fe92 	bl	8015e90 <_ZN8touchgfx8Drawable5setXYEss>
 801616c:	9a01      	ldr	r2, [sp, #4]
 801616e:	4b23      	ldr	r3, [pc, #140]	; (80161fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8016170:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8016174:	801a      	strh	r2, [r3, #0]
 8016176:	9a02      	ldr	r2, [sp, #8]
 8016178:	4b21      	ldr	r3, [pc, #132]	; (8016200 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 801617a:	4620      	mov	r0, r4
 801617c:	801a      	strh	r2, [r3, #0]
 801617e:	9a03      	ldr	r2, [sp, #12]
 8016180:	4b1b      	ldr	r3, [pc, #108]	; (80161f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8016182:	801a      	strh	r2, [r3, #0]
 8016184:	4b1b      	ldr	r3, [pc, #108]	; (80161f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8016186:	9a04      	ldr	r2, [sp, #16]
 8016188:	801a      	strh	r2, [r3, #0]
 801618a:	6823      	ldr	r3, [r4, #0]
 801618c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801618e:	4798      	blx	r3
 8016190:	6823      	ldr	r3, [r4, #0]
 8016192:	4620      	mov	r0, r4
 8016194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016196:	4798      	blx	r3
 8016198:	b00f      	add	sp, #60	; 0x3c
 801619a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801619e:	883b      	ldrh	r3, [r7, #0]
 80161a0:	f8ab 0000 	strh.w	r0, [fp]
 80161a4:	f8aa 3000 	strh.w	r3, [sl]
 80161a8:	e789      	b.n	80160be <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80161aa:	462a      	mov	r2, r5
 80161ac:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80161b0:	ab0a      	add	r3, sp, #40	; 0x28
 80161b2:	6851      	ldr	r1, [r2, #4]
 80161b4:	c303      	stmia	r3!, {r0, r1}
 80161b6:	e7a9      	b.n	801610c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 80161b8:	a807      	add	r0, sp, #28
 80161ba:	f004 f945 	bl	801a448 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80161be:	4606      	mov	r6, r0
 80161c0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80161c2:	6803      	ldr	r3, [r0, #0]
 80161c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161c6:	4798      	blx	r3
 80161c8:	4286      	cmp	r6, r0
 80161ca:	d1b8      	bne.n	801613e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80161cc:	f7ff fe6e 	bl	8015eac <_ZN8touchgfx3HAL3lcdEv>
 80161d0:	6803      	ldr	r3, [r0, #0]
 80161d2:	4606      	mov	r6, r0
 80161d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80161d6:	a807      	add	r0, sp, #28
 80161d8:	9305      	str	r3, [sp, #20]
 80161da:	f004 f935 	bl	801a448 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80161de:	9b05      	ldr	r3, [sp, #20]
 80161e0:	4601      	mov	r1, r0
 80161e2:	4630      	mov	r0, r6
 80161e4:	4798      	blx	r3
 80161e6:	f080 0001 	eor.w	r0, r0, #1
 80161ea:	b2c0      	uxtb	r0, r0
 80161ec:	e7a8      	b.n	8016140 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 80161ee:	bf00      	nop
 80161f0:	2019794c 	.word	0x2019794c
 80161f4:	2019794e 	.word	0x2019794e
 80161f8:	20197950 	.word	0x20197950
 80161fc:	20197952 	.word	0x20197952
 8016200:	20197954 	.word	0x20197954

08016204 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8016204:	b510      	push	{r4, lr}
 8016206:	4b07      	ldr	r3, [pc, #28]	; (8016224 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8016208:	4604      	mov	r4, r0
 801620a:	781b      	ldrb	r3, [r3, #0]
 801620c:	b13b      	cbz	r3, 801621e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801620e:	6803      	ldr	r3, [r0, #0]
 8016210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016212:	4798      	blx	r3
 8016214:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016216:	4283      	cmp	r3, r0
 8016218:	d101      	bne.n	801621e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801621a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801621c:	bd10      	pop	{r4, pc}
 801621e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8016220:	e7fc      	b.n	801621c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8016222:	bf00      	nop
 8016224:	20197956 	.word	0x20197956

08016228 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8016228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801622c:	461d      	mov	r5, r3
 801622e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016232:	2400      	movs	r4, #0
 8016234:	b08a      	sub	sp, #40	; 0x28
 8016236:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801623a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801623e:	4690      	mov	r8, r2
 8016240:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016244:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016248:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 801624c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016250:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016254:	4607      	mov	r7, r0
 8016256:	f8ad 301c 	strh.w	r3, [sp, #28]
 801625a:	9404      	str	r4, [sp, #16]
 801625c:	f88d 4020 	strb.w	r4, [sp, #32]
 8016260:	f7ff ffd0 	bl	8016204 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016264:	fb06 8505 	mla	r5, r6, r5, r8
 8016268:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801626c:	6878      	ldr	r0, [r7, #4]
 801626e:	9505      	str	r5, [sp, #20]
 8016270:	f8ad 601e 	strh.w	r6, [sp, #30]
 8016274:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8016278:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 801627c:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8016280:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8016284:	6803      	ldr	r3, [r0, #0]
 8016286:	a901      	add	r1, sp, #4
 8016288:	685b      	ldr	r3, [r3, #4]
 801628a:	4798      	blx	r3
 801628c:	b00a      	add	sp, #40	; 0x28
 801628e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016292 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8016292:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016296:	2400      	movs	r4, #0
 8016298:	461d      	mov	r5, r3
 801629a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801629e:	4691      	mov	r9, r2
 80162a0:	b08b      	sub	sp, #44	; 0x2c
 80162a2:	4688      	mov	r8, r1
 80162a4:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 80162a8:	4607      	mov	r7, r0
 80162aa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80162ae:	9404      	str	r4, [sp, #16]
 80162b0:	f7ff ffa8 	bl	8016204 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80162b4:	fb06 9505 	mla	r5, r6, r5, r9
 80162b8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80162bc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80162c0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80162c4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80162c8:	6878      	ldr	r0, [r7, #4]
 80162ca:	9505      	str	r5, [sp, #20]
 80162cc:	f8ad 301a 	strh.w	r3, [sp, #26]
 80162d0:	f8ad 401c 	strh.w	r4, [sp, #28]
 80162d4:	f8ad 601e 	strh.w	r6, [sp, #30]
 80162d8:	f8cd 8010 	str.w	r8, [sp, #16]
 80162dc:	f8ad 4020 	strh.w	r4, [sp, #32]
 80162e0:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80162e4:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 80162e8:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 80162ec:	6803      	ldr	r3, [r0, #0]
 80162ee:	a901      	add	r1, sp, #4
 80162f0:	685b      	ldr	r3, [r3, #4]
 80162f2:	4798      	blx	r3
 80162f4:	b00b      	add	sp, #44	; 0x2c
 80162f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080162fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80162fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016300:	4698      	mov	r8, r3
 8016302:	2300      	movs	r3, #0
 8016304:	b08a      	sub	sp, #40	; 0x28
 8016306:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801630a:	4606      	mov	r6, r0
 801630c:	2d0b      	cmp	r5, #11
 801630e:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8016312:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8016316:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 801631a:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 801631e:	9304      	str	r3, [sp, #16]
 8016320:	d137      	bne.n	8016392 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8016322:	2380      	movs	r3, #128	; 0x80
 8016324:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8016328:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801632c:	f88d 0020 	strb.w	r0, [sp, #32]
 8016330:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016334:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016338:	4630      	mov	r0, r6
 801633a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801633e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8016342:	9203      	str	r2, [sp, #12]
 8016344:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016348:	f7ff ff5c 	bl	8016204 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801634c:	2c0b      	cmp	r4, #11
 801634e:	bf8c      	ite	hi
 8016350:	2100      	movhi	r1, #0
 8016352:	4b1b      	ldrls	r3, [pc, #108]	; (80163c0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8016354:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8016358:	bf98      	it	ls
 801635a:	5d19      	ldrbls	r1, [r3, r4]
 801635c:	fb02 8307 	mla	r3, r2, r7, r8
 8016360:	10c9      	asrs	r1, r1, #3
 8016362:	fb01 0003 	mla	r0, r1, r3, r0
 8016366:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 801636a:	9005      	str	r0, [sp, #20]
 801636c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8016370:	2300      	movs	r3, #0
 8016372:	6870      	ldr	r0, [r6, #4]
 8016374:	f8ad 701e 	strh.w	r7, [sp, #30]
 8016378:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 801637c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8016380:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016384:	6803      	ldr	r3, [r0, #0]
 8016386:	a901      	add	r1, sp, #4
 8016388:	685b      	ldr	r3, [r3, #4]
 801638a:	4798      	blx	r3
 801638c:	b00a      	add	sp, #40	; 0x28
 801638e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016392:	2d02      	cmp	r5, #2
 8016394:	d109      	bne.n	80163aa <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8016396:	28ff      	cmp	r0, #255	; 0xff
 8016398:	d105      	bne.n	80163a6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 801639a:	f1bc 0f00 	cmp.w	ip, #0
 801639e:	bf14      	ite	ne
 80163a0:	2340      	movne	r3, #64	; 0x40
 80163a2:	2320      	moveq	r3, #32
 80163a4:	e7be      	b.n	8016324 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80163a6:	2340      	movs	r3, #64	; 0x40
 80163a8:	e7bc      	b.n	8016324 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80163aa:	28ff      	cmp	r0, #255	; 0xff
 80163ac:	d105      	bne.n	80163ba <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 80163ae:	f1bc 0f00 	cmp.w	ip, #0
 80163b2:	bf14      	ite	ne
 80163b4:	2304      	movne	r3, #4
 80163b6:	2301      	moveq	r3, #1
 80163b8:	e7b4      	b.n	8016324 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80163ba:	2304      	movs	r3, #4
 80163bc:	e7b2      	b.n	8016324 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80163be:	bf00      	nop
 80163c0:	0802a938 	.word	0x0802a938

080163c4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 80163c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163c8:	b08b      	sub	sp, #44	; 0x2c
 80163ca:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 80163ce:	461d      	mov	r5, r3
 80163d0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80163d4:	bf14      	ite	ne
 80163d6:	2308      	movne	r3, #8
 80163d8:	2302      	moveq	r3, #2
 80163da:	2400      	movs	r4, #0
 80163dc:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 80163e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80163e4:	4688      	mov	r8, r1
 80163e6:	4693      	mov	fp, r2
 80163e8:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 80163ec:	9404      	str	r4, [sp, #16]
 80163ee:	4607      	mov	r7, r0
 80163f0:	f7ff ff08 	bl	8016204 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80163f4:	2e0b      	cmp	r6, #11
 80163f6:	bf98      	it	ls
 80163f8:	4b15      	ldrls	r3, [pc, #84]	; (8016450 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 80163fa:	fb05 b50a 	mla	r5, r5, sl, fp
 80163fe:	bf98      	it	ls
 8016400:	5d9c      	ldrbls	r4, [r3, r6]
 8016402:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8016406:	10e4      	asrs	r4, r4, #3
 8016408:	f8ad 3018 	strh.w	r3, [sp, #24]
 801640c:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8016410:	fb04 0405 	mla	r4, r4, r5, r0
 8016414:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016418:	2300      	movs	r3, #0
 801641a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801641e:	6878      	ldr	r0, [r7, #4]
 8016420:	9405      	str	r4, [sp, #20]
 8016422:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016426:	f8ad a01e 	strh.w	sl, [sp, #30]
 801642a:	f8cd 8010 	str.w	r8, [sp, #16]
 801642e:	f88d 9020 	strb.w	r9, [sp, #32]
 8016432:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8016436:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801643a:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 801643e:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8016442:	6803      	ldr	r3, [r0, #0]
 8016444:	a901      	add	r1, sp, #4
 8016446:	685b      	ldr	r3, [r3, #4]
 8016448:	4798      	blx	r3
 801644a:	b00b      	add	sp, #44	; 0x2c
 801644c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016450:	0802a938 	.word	0x0802a938

08016454 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8016454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016458:	461e      	mov	r6, r3
 801645a:	4b0a      	ldr	r3, [pc, #40]	; (8016484 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 801645c:	460f      	mov	r7, r1
 801645e:	881d      	ldrh	r5, [r3, #0]
 8016460:	4690      	mov	r8, r2
 8016462:	f7ff fd23 	bl	8015eac <_ZN8touchgfx3HAL3lcdEv>
 8016466:	6803      	ldr	r3, [r0, #0]
 8016468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801646a:	4798      	blx	r3
 801646c:	280b      	cmp	r0, #11
 801646e:	bf8e      	itee	hi
 8016470:	2400      	movhi	r4, #0
 8016472:	4b05      	ldrls	r3, [pc, #20]	; (8016488 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8016474:	5c1c      	ldrbls	r4, [r3, r0]
 8016476:	fb08 7005 	mla	r0, r8, r5, r7
 801647a:	10e4      	asrs	r4, r4, #3
 801647c:	fb04 6000 	mla	r0, r4, r0, r6
 8016480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016484:	20197952 	.word	0x20197952
 8016488:	0802a938 	.word	0x0802a938

0801648c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 801648c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801648e:	2500      	movs	r5, #0
 8016490:	b08b      	sub	sp, #44	; 0x2c
 8016492:	461f      	mov	r7, r3
 8016494:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8016498:	4604      	mov	r4, r0
 801649a:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801649e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80164a2:	4616      	mov	r6, r2
 80164a4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80164a8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80164ac:	9504      	str	r5, [sp, #16]
 80164ae:	f8ad 301a 	strh.w	r3, [sp, #26]
 80164b2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80164b6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80164ba:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80164be:	f88d 3020 	strb.w	r3, [sp, #32]
 80164c2:	f7ff fe9f 	bl	8016204 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80164c6:	463a      	mov	r2, r7
 80164c8:	4631      	mov	r1, r6
 80164ca:	4603      	mov	r3, r0
 80164cc:	4620      	mov	r0, r4
 80164ce:	f7ff ffc1 	bl	8016454 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80164d2:	4b0e      	ldr	r3, [pc, #56]	; (801650c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 80164d4:	9005      	str	r0, [sp, #20]
 80164d6:	881b      	ldrh	r3, [r3, #0]
 80164d8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80164dc:	f7ff fce6 	bl	8015eac <_ZN8touchgfx3HAL3lcdEv>
 80164e0:	6803      	ldr	r3, [r0, #0]
 80164e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164e4:	4798      	blx	r3
 80164e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80164e8:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 80164ec:	9304      	str	r3, [sp, #16]
 80164ee:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80164f2:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 80164f6:	6860      	ldr	r0, [r4, #4]
 80164f8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80164fc:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8016500:	6803      	ldr	r3, [r0, #0]
 8016502:	a901      	add	r1, sp, #4
 8016504:	685b      	ldr	r3, [r3, #4]
 8016506:	4798      	blx	r3
 8016508:	b00b      	add	sp, #44	; 0x2c
 801650a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801650c:	20197952 	.word	0x20197952

08016510 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8016510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016512:	b08d      	sub	sp, #52	; 0x34
 8016514:	466b      	mov	r3, sp
 8016516:	e883 0006 	stmia.w	r3, {r1, r2}
 801651a:	2300      	movs	r3, #0
 801651c:	2501      	movs	r5, #1
 801651e:	9306      	str	r3, [sp, #24]
 8016520:	6803      	ldr	r3, [r0, #0]
 8016522:	9503      	str	r5, [sp, #12]
 8016524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016526:	4604      	mov	r4, r0
 8016528:	f8bd 6000 	ldrh.w	r6, [sp]
 801652c:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8016530:	4798      	blx	r3
 8016532:	463a      	mov	r2, r7
 8016534:	4631      	mov	r1, r6
 8016536:	4603      	mov	r3, r0
 8016538:	4620      	mov	r0, r4
 801653a:	f7ff ff8b 	bl	8016454 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801653e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016540:	9004      	str	r0, [sp, #16]
 8016542:	9307      	str	r3, [sp, #28]
 8016544:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016548:	f8ad 3020 	strh.w	r3, [sp, #32]
 801654c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016550:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8016554:	4b0e      	ldr	r3, [pc, #56]	; (8016590 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8016556:	881b      	ldrh	r3, [r3, #0]
 8016558:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801655c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8016560:	f7ff fca4 	bl	8015eac <_ZN8touchgfx3HAL3lcdEv>
 8016564:	6803      	ldr	r3, [r0, #0]
 8016566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016568:	4798      	blx	r3
 801656a:	23ff      	movs	r3, #255	; 0xff
 801656c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8016570:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8016574:	6860      	ldr	r0, [r4, #4]
 8016576:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801657a:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801657e:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8016582:	6803      	ldr	r3, [r0, #0]
 8016584:	a903      	add	r1, sp, #12
 8016586:	685b      	ldr	r3, [r3, #4]
 8016588:	4798      	blx	r3
 801658a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801658c:	b00d      	add	sp, #52	; 0x34
 801658e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016590:	20197952 	.word	0x20197952

08016594 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8016594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016598:	b08c      	sub	sp, #48	; 0x30
 801659a:	466d      	mov	r5, sp
 801659c:	461e      	mov	r6, r3
 801659e:	2300      	movs	r3, #0
 80165a0:	e885 0006 	stmia.w	r5, {r1, r2}
 80165a4:	2501      	movs	r5, #1
 80165a6:	9306      	str	r3, [sp, #24]
 80165a8:	6803      	ldr	r3, [r0, #0]
 80165aa:	9503      	str	r5, [sp, #12]
 80165ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165ae:	4604      	mov	r4, r0
 80165b0:	f8bd 7000 	ldrh.w	r7, [sp]
 80165b4:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 80165b8:	4798      	blx	r3
 80165ba:	4642      	mov	r2, r8
 80165bc:	4639      	mov	r1, r7
 80165be:	4603      	mov	r3, r0
 80165c0:	4620      	mov	r0, r4
 80165c2:	f7ff ff47 	bl	8016454 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80165c6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80165ca:	9004      	str	r0, [sp, #16]
 80165cc:	f8ad 3020 	strh.w	r3, [sp, #32]
 80165d0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80165d4:	9607      	str	r6, [sp, #28]
 80165d6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80165da:	4b10      	ldr	r3, [pc, #64]	; (801661c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 80165dc:	881b      	ldrh	r3, [r3, #0]
 80165de:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80165e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80165e4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80165e8:	f7ff fc60 	bl	8015eac <_ZN8touchgfx3HAL3lcdEv>
 80165ec:	6803      	ldr	r3, [r0, #0]
 80165ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165f0:	4798      	blx	r3
 80165f2:	23ff      	movs	r3, #255	; 0xff
 80165f4:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 80165f8:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80165fc:	6860      	ldr	r0, [r4, #4]
 80165fe:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8016602:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8016606:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 801660a:	6803      	ldr	r3, [r0, #0]
 801660c:	a903      	add	r1, sp, #12
 801660e:	685b      	ldr	r3, [r3, #4]
 8016610:	4798      	blx	r3
 8016612:	4630      	mov	r0, r6
 8016614:	b00c      	add	sp, #48	; 0x30
 8016616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801661a:	bf00      	nop
 801661c:	20197952 	.word	0x20197952

08016620 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8016620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016622:	b085      	sub	sp, #20
 8016624:	ac02      	add	r4, sp, #8
 8016626:	e884 0006 	stmia.w	r4, {r1, r2}
 801662a:	4605      	mov	r5, r0
 801662c:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8016630:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8016634:	f7ff fde6 	bl	8016204 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016638:	463a      	mov	r2, r7
 801663a:	4603      	mov	r3, r0
 801663c:	4631      	mov	r1, r6
 801663e:	4628      	mov	r0, r5
 8016640:	f7ff ff08 	bl	8016454 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016644:	4a05      	ldr	r2, [pc, #20]	; (801665c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8016646:	682b      	ldr	r3, [r5, #0]
 8016648:	8812      	ldrh	r2, [r2, #0]
 801664a:	9200      	str	r2, [sp, #0]
 801664c:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801664e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8016652:	4603      	mov	r3, r0
 8016654:	4628      	mov	r0, r5
 8016656:	47b0      	blx	r6
 8016658:	b005      	add	sp, #20
 801665a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801665c:	20197952 	.word	0x20197952

08016660 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8016660:	b570      	push	{r4, r5, r6, lr}
 8016662:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8016666:	4604      	mov	r4, r0
 8016668:	b19b      	cbz	r3, 8016692 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801666a:	2002      	movs	r0, #2
 801666c:	f7eb fc02 	bl	8001e74 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8016670:	2300      	movs	r3, #0
 8016672:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8016676:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 801667a:	6823      	ldr	r3, [r4, #0]
 801667c:	4620      	mov	r0, r4
 801667e:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8016682:	f7ff fdbf 	bl	8016204 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016686:	462b      	mov	r3, r5
 8016688:	4601      	mov	r1, r0
 801668a:	4620      	mov	r0, r4
 801668c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016690:	4718      	bx	r3
 8016692:	bd70      	pop	{r4, r5, r6, pc}

08016694 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8016694:	b570      	push	{r4, r5, r6, lr}
 8016696:	4605      	mov	r5, r0
 8016698:	460c      	mov	r4, r1
 801669a:	2003      	movs	r0, #3
 801669c:	b149      	cbz	r1, 80166b2 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 801669e:	f7eb fbb1 	bl	8001e04 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80166a2:	6928      	ldr	r0, [r5, #16]
 80166a4:	b168      	cbz	r0, 80166c2 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 80166a6:	2101      	movs	r1, #1
 80166a8:	6803      	ldr	r3, [r0, #0]
 80166aa:	695b      	ldr	r3, [r3, #20]
 80166ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80166b0:	4718      	bx	r3
 80166b2:	f7eb fbc3 	bl	8001e3c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80166b6:	6928      	ldr	r0, [r5, #16]
 80166b8:	b118      	cbz	r0, 80166c2 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 80166ba:	6803      	ldr	r3, [r0, #0]
 80166bc:	4621      	mov	r1, r4
 80166be:	695b      	ldr	r3, [r3, #20]
 80166c0:	e7f4      	b.n	80166ac <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 80166c2:	bd70      	pop	{r4, r5, r6, pc}

080166c4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 80166c4:	b538      	push	{r3, r4, r5, lr}
 80166c6:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 80166ca:	4604      	mov	r4, r0
 80166cc:	428b      	cmp	r3, r1
 80166ce:	460d      	mov	r5, r1
 80166d0:	d006      	beq.n	80166e0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 80166d2:	6803      	ldr	r3, [r0, #0]
 80166d4:	b929      	cbnz	r1, 80166e2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 80166d6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80166da:	4798      	blx	r3
 80166dc:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 80166e0:	bd38      	pop	{r3, r4, r5, pc}
 80166e2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80166e6:	e7f8      	b.n	80166da <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

080166e8 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80166e8:	b510      	push	{r4, lr}
 80166ea:	4b0d      	ldr	r3, [pc, #52]	; (8016720 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 80166ec:	4604      	mov	r4, r0
 80166ee:	781b      	ldrb	r3, [r3, #0]
 80166f0:	b95b      	cbnz	r3, 801670a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80166f2:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80166f6:	2b02      	cmp	r3, #2
 80166f8:	d007      	beq.n	801670a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80166fa:	6840      	ldr	r0, [r0, #4]
 80166fc:	f000 f914 	bl	8016928 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8016700:	b118      	cbz	r0, 801670a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016702:	6862      	ldr	r2, [r4, #4]
 8016704:	7a53      	ldrb	r3, [r2, #9]
 8016706:	2b00      	cmp	r3, #0
 8016708:	d0fc      	beq.n	8016704 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801670a:	f7eb fd97 	bl	800223c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801670e:	4620      	mov	r0, r4
 8016710:	2100      	movs	r1, #0
 8016712:	f7ff ffd7 	bl	80166c4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8016716:	4620      	mov	r0, r4
 8016718:	f7ff fd74 	bl	8016204 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801671c:	bd10      	pop	{r4, pc}
 801671e:	bf00      	nop
 8016720:	20197956 	.word	0x20197956

08016724 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8016724:	2000      	movs	r0, #0
 8016726:	4770      	bx	lr

08016728 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8016728:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801672c:	1a13      	subs	r3, r2, r0
 801672e:	4258      	negs	r0, r3
 8016730:	4158      	adcs	r0, r3
 8016732:	4770      	bx	lr

08016734 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8016734:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8016738:	1a9b      	subs	r3, r3, r2
 801673a:	2b00      	cmp	r3, #0
 801673c:	bfdc      	itt	le
 801673e:	6882      	ldrle	r2, [r0, #8]
 8016740:	189b      	addle	r3, r3, r2
 8016742:	2b01      	cmp	r3, #1
 8016744:	bfcc      	ite	gt
 8016746:	2000      	movgt	r0, #0
 8016748:	2001      	movle	r0, #1
 801674a:	4770      	bx	lr

0801674c <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801674c:	6902      	ldr	r2, [r0, #16]
 801674e:	6843      	ldr	r3, [r0, #4]
 8016750:	2024      	movs	r0, #36	; 0x24
 8016752:	fb00 3002 	mla	r0, r0, r2, r3
 8016756:	4770      	bx	lr

08016758 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8016758:	6803      	ldr	r3, [r0, #0]
 801675a:	691b      	ldr	r3, [r3, #16]
 801675c:	4718      	bx	r3

0801675e <_ZN8touchgfx13DMA_Interface7executeEv>:
 801675e:	2301      	movs	r3, #1
 8016760:	b570      	push	{r4, r5, r6, lr}
 8016762:	7203      	strb	r3, [r0, #8]
 8016764:	4604      	mov	r4, r0
 8016766:	6840      	ldr	r0, [r0, #4]
 8016768:	6803      	ldr	r3, [r0, #0]
 801676a:	699b      	ldr	r3, [r3, #24]
 801676c:	4798      	blx	r3
 801676e:	6803      	ldr	r3, [r0, #0]
 8016770:	4605      	mov	r5, r0
 8016772:	2b40      	cmp	r3, #64	; 0x40
 8016774:	d00c      	beq.n	8016790 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016776:	d810      	bhi.n	801679a <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8016778:	2b04      	cmp	r3, #4
 801677a:	d01d      	beq.n	80167b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 801677c:	d804      	bhi.n	8016788 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 801677e:	2b01      	cmp	r3, #1
 8016780:	d006      	beq.n	8016790 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016782:	2b02      	cmp	r3, #2
 8016784:	d02c      	beq.n	80167e0 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8016786:	bd70      	pop	{r4, r5, r6, pc}
 8016788:	2b08      	cmp	r3, #8
 801678a:	d01d      	beq.n	80167c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 801678c:	2b20      	cmp	r3, #32
 801678e:	d1fa      	bne.n	8016786 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8016790:	6823      	ldr	r3, [r4, #0]
 8016792:	4620      	mov	r0, r4
 8016794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016796:	4798      	blx	r3
 8016798:	e013      	b.n	80167c2 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801679a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801679e:	d0f7      	beq.n	8016790 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80167a0:	d804      	bhi.n	80167ac <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 80167a2:	2b80      	cmp	r3, #128	; 0x80
 80167a4:	d0f4      	beq.n	8016790 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80167a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80167aa:	e7f0      	b.n	801678e <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 80167ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80167b0:	d0ee      	beq.n	8016790 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80167b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80167b6:	e7e5      	b.n	8016784 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80167b8:	6823      	ldr	r3, [r4, #0]
 80167ba:	7f01      	ldrb	r1, [r0, #28]
 80167bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80167be:	4620      	mov	r0, r4
 80167c0:	4798      	blx	r3
 80167c2:	6823      	ldr	r3, [r4, #0]
 80167c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167c6:	e006      	b.n	80167d6 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80167c8:	6823      	ldr	r3, [r4, #0]
 80167ca:	7f01      	ldrb	r1, [r0, #28]
 80167cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80167ce:	4620      	mov	r0, r4
 80167d0:	4798      	blx	r3
 80167d2:	6823      	ldr	r3, [r4, #0]
 80167d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80167d6:	4629      	mov	r1, r5
 80167d8:	4620      	mov	r0, r4
 80167da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80167de:	4718      	bx	r3
 80167e0:	6823      	ldr	r3, [r4, #0]
 80167e2:	4620      	mov	r0, r4
 80167e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80167e6:	4798      	blx	r3
 80167e8:	e7f3      	b.n	80167d2 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

080167ea <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80167ea:	4770      	bx	lr

080167ec <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80167ec:	4770      	bx	lr

080167ee <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 80167ee:	4770      	bx	lr

080167f0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80167f0:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 80167f4:	1ad2      	subs	r2, r2, r3
 80167f6:	2a00      	cmp	r2, #0
 80167f8:	b510      	push	{r4, lr}
 80167fa:	bfdc      	itt	le
 80167fc:	6884      	ldrle	r4, [r0, #8]
 80167fe:	1912      	addle	r2, r2, r4
 8016800:	2a01      	cmp	r2, #1
 8016802:	dd16      	ble.n	8016832 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8016804:	2424      	movs	r4, #36	; 0x24
 8016806:	6842      	ldr	r2, [r0, #4]
 8016808:	fb04 2303 	mla	r3, r4, r3, r2
 801680c:	f101 0220 	add.w	r2, r1, #32
 8016810:	f851 4b04 	ldr.w	r4, [r1], #4
 8016814:	4291      	cmp	r1, r2
 8016816:	f843 4b04 	str.w	r4, [r3], #4
 801681a:	d1f9      	bne.n	8016810 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 801681c:	780a      	ldrb	r2, [r1, #0]
 801681e:	701a      	strb	r2, [r3, #0]
 8016820:	68c3      	ldr	r3, [r0, #12]
 8016822:	6882      	ldr	r2, [r0, #8]
 8016824:	3301      	adds	r3, #1
 8016826:	429a      	cmp	r2, r3
 8016828:	bfd8      	it	le
 801682a:	1a9b      	suble	r3, r3, r2
 801682c:	f3bf 8f5b 	dmb	ish
 8016830:	60c3      	str	r3, [r0, #12]
 8016832:	bd10      	pop	{r4, pc}

08016834 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8016834:	6903      	ldr	r3, [r0, #16]
 8016836:	6882      	ldr	r2, [r0, #8]
 8016838:	3301      	adds	r3, #1
 801683a:	429a      	cmp	r2, r3
 801683c:	bfd8      	it	le
 801683e:	1a9b      	suble	r3, r3, r2
 8016840:	f3bf 8f5b 	dmb	ish
 8016844:	6103      	str	r3, [r0, #16]
 8016846:	4770      	bx	lr

08016848 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8016848:	b570      	push	{r4, r5, r6, lr}
 801684a:	4604      	mov	r4, r0
 801684c:	460e      	mov	r6, r1
 801684e:	6860      	ldr	r0, [r4, #4]
 8016850:	6803      	ldr	r3, [r0, #0]
 8016852:	685b      	ldr	r3, [r3, #4]
 8016854:	4798      	blx	r3
 8016856:	2800      	cmp	r0, #0
 8016858:	d1f9      	bne.n	801684e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801685a:	4d0d      	ldr	r5, [pc, #52]	; (8016890 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 801685c:	6828      	ldr	r0, [r5, #0]
 801685e:	6803      	ldr	r3, [r0, #0]
 8016860:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016862:	4798      	blx	r3
 8016864:	f7eb fd16 	bl	8002294 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8016868:	6828      	ldr	r0, [r5, #0]
 801686a:	2101      	movs	r1, #1
 801686c:	f7ff ff2a 	bl	80166c4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8016870:	6860      	ldr	r0, [r4, #4]
 8016872:	4631      	mov	r1, r6
 8016874:	6803      	ldr	r3, [r0, #0]
 8016876:	689b      	ldr	r3, [r3, #8]
 8016878:	4798      	blx	r3
 801687a:	6823      	ldr	r3, [r4, #0]
 801687c:	4620      	mov	r0, r4
 801687e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016880:	4798      	blx	r3
 8016882:	6828      	ldr	r0, [r5, #0]
 8016884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016888:	6803      	ldr	r3, [r0, #0]
 801688a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801688c:	4718      	bx	r3
 801688e:	bf00      	nop
 8016890:	20197958 	.word	0x20197958

08016894 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8016894:	b508      	push	{r3, lr}
 8016896:	f7eb fcd1 	bl	800223c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801689a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801689e:	f7eb bce3 	b.w	8002268 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080168a2 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80168a2:	b510      	push	{r4, lr}
 80168a4:	4604      	mov	r4, r0
 80168a6:	2114      	movs	r1, #20
 80168a8:	f011 fbb5 	bl	8028016 <_ZdlPvj>
 80168ac:	4620      	mov	r0, r4
 80168ae:	bd10      	pop	{r4, pc}

080168b0 <_ZN8touchgfx13DMA_Interface5startEv>:
 80168b0:	b510      	push	{r4, lr}
 80168b2:	4604      	mov	r4, r0
 80168b4:	6840      	ldr	r0, [r0, #4]
 80168b6:	6803      	ldr	r3, [r0, #0]
 80168b8:	681b      	ldr	r3, [r3, #0]
 80168ba:	4798      	blx	r3
 80168bc:	b948      	cbnz	r0, 80168d2 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80168be:	7a63      	ldrb	r3, [r4, #9]
 80168c0:	b13b      	cbz	r3, 80168d2 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80168c2:	7a23      	ldrb	r3, [r4, #8]
 80168c4:	b92b      	cbnz	r3, 80168d2 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80168c6:	6823      	ldr	r3, [r4, #0]
 80168c8:	4620      	mov	r0, r4
 80168ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80168ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168d0:	4718      	bx	r3
 80168d2:	bd10      	pop	{r4, pc}

080168d4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80168d4:	b570      	push	{r4, r5, r6, lr}
 80168d6:	4604      	mov	r4, r0
 80168d8:	6840      	ldr	r0, [r0, #4]
 80168da:	6803      	ldr	r3, [r0, #0]
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	4798      	blx	r3
 80168e0:	4605      	mov	r5, r0
 80168e2:	b930      	cbnz	r0, 80168f2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80168e4:	7a23      	ldrb	r3, [r4, #8]
 80168e6:	b123      	cbz	r3, 80168f2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80168e8:	6860      	ldr	r0, [r4, #4]
 80168ea:	6803      	ldr	r3, [r0, #0]
 80168ec:	695b      	ldr	r3, [r3, #20]
 80168ee:	4798      	blx	r3
 80168f0:	7225      	strb	r5, [r4, #8]
 80168f2:	6860      	ldr	r0, [r4, #4]
 80168f4:	6803      	ldr	r3, [r0, #0]
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	4798      	blx	r3
 80168fa:	b928      	cbnz	r0, 8016908 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80168fc:	6823      	ldr	r3, [r4, #0]
 80168fe:	4620      	mov	r0, r4
 8016900:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016906:	4718      	bx	r3
 8016908:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801690c:	f7eb bcc8 	b.w	80022a0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08016910 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8016910:	6082      	str	r2, [r0, #8]
 8016912:	2200      	movs	r2, #0
 8016914:	b510      	push	{r4, lr}
 8016916:	4c03      	ldr	r4, [pc, #12]	; (8016924 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8016918:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801691c:	e9c0 4100 	strd	r4, r1, [r0]
 8016920:	bd10      	pop	{r4, pc}
 8016922:	bf00      	nop
 8016924:	0802a94c 	.word	0x0802a94c

08016928 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8016928:	6840      	ldr	r0, [r0, #4]
 801692a:	6803      	ldr	r3, [r0, #0]
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	4718      	bx	r3

08016930 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8016930:	2300      	movs	r3, #0
 8016932:	8083      	strh	r3, [r0, #4]
 8016934:	80c3      	strh	r3, [r0, #6]
 8016936:	8003      	strh	r3, [r0, #0]
 8016938:	8043      	strh	r3, [r0, #2]
 801693a:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801693e:	2bff      	cmp	r3, #255	; 0xff
 8016940:	bf01      	itttt	eq
 8016942:	890b      	ldrheq	r3, [r1, #8]
 8016944:	8083      	strheq	r3, [r0, #4]
 8016946:	894b      	ldrheq	r3, [r1, #10]
 8016948:	80c3      	strheq	r3, [r0, #6]
 801694a:	4770      	bx	lr

0801694c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801694c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801694e:	4604      	mov	r4, r0
 8016950:	466b      	mov	r3, sp
 8016952:	6808      	ldr	r0, [r1, #0]
 8016954:	6849      	ldr	r1, [r1, #4]
 8016956:	c303      	stmia	r3!, {r0, r1}
 8016958:	6823      	ldr	r3, [r4, #0]
 801695a:	4669      	mov	r1, sp
 801695c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801695e:	4620      	mov	r0, r4
 8016960:	4798      	blx	r3
 8016962:	4b08      	ldr	r3, [pc, #32]	; (8016984 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801696a:	b10a      	cbz	r2, 8016970 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801696c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801696e:	b900      	cbnz	r0, 8016972 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8016970:	6898      	ldr	r0, [r3, #8]
 8016972:	6803      	ldr	r3, [r0, #0]
 8016974:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8016976:	6a1d      	ldr	r5, [r3, #32]
 8016978:	4669      	mov	r1, sp
 801697a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801697e:	47a8      	blx	r5
 8016980:	b003      	add	sp, #12
 8016982:	bd30      	pop	{r4, r5, pc}
 8016984:	20197958 	.word	0x20197958

08016988 <_ZN8touchgfx3BoxD1Ev>:
 8016988:	4770      	bx	lr

0801698a <_ZN8touchgfx3BoxD0Ev>:
 801698a:	b510      	push	{r4, lr}
 801698c:	4604      	mov	r4, r0
 801698e:	212c      	movs	r1, #44	; 0x2c
 8016990:	f011 fb41 	bl	8028016 <_ZdlPvj>
 8016994:	4620      	mov	r0, r4
 8016996:	bd10      	pop	{r4, pc}

08016998 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8016998:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 801699c:	b12a      	cbz	r2, 80169aa <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801699e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80169a2:	b112      	cbz	r2, 80169aa <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80169a4:	6803      	ldr	r3, [r0, #0]
 80169a6:	695b      	ldr	r3, [r3, #20]
 80169a8:	4718      	bx	r3
 80169aa:	4770      	bx	lr

080169ac <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 80169ac:	b510      	push	{r4, lr}
 80169ae:	6803      	ldr	r3, [r0, #0]
 80169b0:	460c      	mov	r4, r1
 80169b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169b4:	4798      	blx	r3
 80169b6:	1b03      	subs	r3, r0, r4
 80169b8:	4258      	negs	r0, r3
 80169ba:	4158      	adcs	r0, r3
 80169bc:	bd10      	pop	{r4, pc}
	...

080169c0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 80169c0:	4b01      	ldr	r3, [pc, #4]	; (80169c8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 80169c2:	6019      	str	r1, [r3, #0]
 80169c4:	4770      	bx	lr
 80169c6:	bf00      	nop
 80169c8:	20197960 	.word	0x20197960

080169cc <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80169cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169d0:	4696      	mov	lr, r2
 80169d2:	4614      	mov	r4, r2
 80169d4:	4605      	mov	r5, r0
 80169d6:	460e      	mov	r6, r1
 80169d8:	461f      	mov	r7, r3
 80169da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80169de:	b097      	sub	sp, #92	; 0x5c
 80169e0:	f10d 0c1c 	add.w	ip, sp, #28
 80169e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80169e8:	f8de 3000 	ldr.w	r3, [lr]
 80169ec:	f104 0e14 	add.w	lr, r4, #20
 80169f0:	f8cc 3000 	str.w	r3, [ip]
 80169f4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80169f8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80169fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016a00:	f8de 3000 	ldr.w	r3, [lr]
 8016a04:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8016a08:	f8cc 3000 	str.w	r3, [ip]
 8016a0c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8016a10:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016a14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016a18:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8016a1c:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8016a20:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8016a24:	f8de 3000 	ldr.w	r3, [lr]
 8016a28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016a2a:	f8cc 3000 	str.w	r3, [ip]
 8016a2e:	9201      	str	r2, [sp, #4]
 8016a30:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8016a34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016a36:	682b      	ldr	r3, [r5, #0]
 8016a38:	9200      	str	r2, [sp, #0]
 8016a3a:	f8cd 8008 	str.w	r8, [sp, #8]
 8016a3e:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8016a42:	aa07      	add	r2, sp, #28
 8016a44:	463b      	mov	r3, r7
 8016a46:	4631      	mov	r1, r6
 8016a48:	4628      	mov	r0, r5
 8016a4a:	47d8      	blx	fp
 8016a4c:	46a6      	mov	lr, r4
 8016a4e:	f10d 0c1c 	add.w	ip, sp, #28
 8016a52:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016a56:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016a5a:	f8de 3000 	ldr.w	r3, [lr]
 8016a5e:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8016a62:	f8cc 3000 	str.w	r3, [ip]
 8016a66:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8016a6a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016a6e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016a72:	f8de 3000 	ldr.w	r3, [lr]
 8016a76:	343c      	adds	r4, #60	; 0x3c
 8016a78:	f8cc 3000 	str.w	r3, [ip]
 8016a7c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8016a80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016a82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016a86:	6823      	ldr	r3, [r4, #0]
 8016a88:	4631      	mov	r1, r6
 8016a8a:	f8cc 3000 	str.w	r3, [ip]
 8016a8e:	682b      	ldr	r3, [r5, #0]
 8016a90:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8016a94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016a96:	f8cd 8008 	str.w	r8, [sp, #8]
 8016a9a:	9201      	str	r2, [sp, #4]
 8016a9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016a9e:	4628      	mov	r0, r5
 8016aa0:	9200      	str	r2, [sp, #0]
 8016aa2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8016aa4:	aa07      	add	r2, sp, #28
 8016aa6:	463b      	mov	r3, r7
 8016aa8:	47a0      	blx	r4
 8016aaa:	b017      	add	sp, #92	; 0x5c
 8016aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016ab0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8016ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ab4:	b08d      	sub	sp, #52	; 0x34
 8016ab6:	4688      	mov	r8, r1
 8016ab8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016aba:	f8d3 c000 	ldr.w	ip, [r3]
 8016abe:	680f      	ldr	r7, [r1, #0]
 8016ac0:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8016ac4:	eba7 070c 	sub.w	r7, r7, ip
 8016ac8:	42bc      	cmp	r4, r7
 8016aca:	bfa8      	it	ge
 8016acc:	463c      	movge	r4, r7
 8016ace:	ee07 4a90 	vmov	s15, r4
 8016ad2:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8016ad6:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8016ada:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8016ade:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8016ae2:	edd3 6a07 	vldr	s13, [r3, #28]
 8016ae6:	ee25 4a04 	vmul.f32	s8, s10, s8
 8016aea:	ee65 4a24 	vmul.f32	s9, s10, s9
 8016aee:	ee25 5a27 	vmul.f32	s10, s10, s15
 8016af2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016af6:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8016afa:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8016afe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8016b02:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016b04:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8016b08:	f9b1 9000 	ldrsh.w	r9, [r1]
 8016b0c:	f9ba 1000 	ldrsh.w	r1, [sl]
 8016b10:	eb09 0e0c 	add.w	lr, r9, ip
 8016b14:	4571      	cmp	r1, lr
 8016b16:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8016b1a:	ee32 1a05 	vadd.f32	s2, s4, s10
 8016b1e:	ee36 0a84 	vadd.f32	s0, s13, s8
 8016b22:	ee61 1a87 	vmul.f32	s3, s3, s14
 8016b26:	ee22 2a07 	vmul.f32	s4, s4, s14
 8016b2a:	f340 808c 	ble.w	8016c46 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8016b2e:	eba1 060e 	sub.w	r6, r1, lr
 8016b32:	fb96 f5f4 	sdiv	r5, r6, r4
 8016b36:	ee07 5a10 	vmov	s14, r5
 8016b3a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016b3e:	2d00      	cmp	r5, #0
 8016b40:	fb04 6615 	mls	r6, r4, r5, r6
 8016b44:	eea7 0a04 	vfma.f32	s0, s14, s8
 8016b48:	eee7 0a24 	vfma.f32	s1, s14, s9
 8016b4c:	eea7 1a05 	vfma.f32	s2, s14, s10
 8016b50:	dd12      	ble.n	8016b78 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8016b52:	ee70 6a44 	vsub.f32	s13, s0, s8
 8016b56:	eef5 6a40 	vcmp.f32	s13, #0.0
 8016b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b5e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8016b62:	bf14      	ite	ne
 8016b64:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8016b68:	eeb0 7a67 	vmoveq.f32	s14, s15
 8016b6c:	ee31 2a45 	vsub.f32	s4, s2, s10
 8016b70:	ee61 1a87 	vmul.f32	s3, s3, s14
 8016b74:	ee22 2a07 	vmul.f32	s4, s4, s14
 8016b78:	fb05 f204 	mul.w	r2, r5, r4
 8016b7c:	1abf      	subs	r7, r7, r2
 8016b7e:	4494      	add	ip, r2
 8016b80:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8016b84:	4411      	add	r1, r2
 8016b86:	eb09 020c 	add.w	r2, r9, ip
 8016b8a:	443a      	add	r2, r7
 8016b8c:	b209      	sxth	r1, r1
 8016b8e:	428a      	cmp	r2, r1
 8016b90:	bfc4      	itt	gt
 8016b92:	eba1 0209 	subgt.w	r2, r1, r9
 8016b96:	eba2 070c 	subgt.w	r7, r2, ip
 8016b9a:	2f00      	cmp	r7, #0
 8016b9c:	dd50      	ble.n	8016c40 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8016b9e:	fb97 f1f4 	sdiv	r1, r7, r4
 8016ba2:	fb04 7211 	mls	r2, r4, r1, r7
 8016ba6:	b90a      	cbnz	r2, 8016bac <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8016ba8:	4622      	mov	r2, r4
 8016baa:	3901      	subs	r1, #1
 8016bac:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8016bb0:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8016bb4:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8016bb8:	ee21 3a23 	vmul.f32	s6, s2, s7
 8016bbc:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016bc0:	ee17 7a90 	vmov	r7, s15
 8016bc4:	ee73 7a42 	vsub.f32	s15, s6, s4
 8016bc8:	eef0 6a42 	vmov.f32	s13, s4
 8016bcc:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016bd0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016bd4:	ee17 ca90 	vmov	ip, s15
 8016bd8:	eeb0 7a61 	vmov.f32	s14, s3
 8016bdc:	6840      	ldr	r0, [r0, #4]
 8016bde:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8016be2:	f8d0 a000 	ldr.w	sl, [r0]
 8016be6:	900b      	str	r0, [sp, #44]	; 0x2c
 8016be8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8016bea:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8016bee:	9008      	str	r0, [sp, #32]
 8016bf0:	9818      	ldr	r0, [sp, #96]	; 0x60
 8016bf2:	695b      	ldr	r3, [r3, #20]
 8016bf4:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8016bf8:	fb9c fcf4 	sdiv	ip, ip, r4
 8016bfc:	445b      	add	r3, fp
 8016bfe:	9307      	str	r3, [sp, #28]
 8016c00:	ee16 3a90 	vmov	r3, s13
 8016c04:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8016c08:	fb0c 3306 	mla	r3, ip, r6, r3
 8016c0c:	fb97 f7f4 	sdiv	r7, r7, r4
 8016c10:	9302      	str	r3, [sp, #8]
 8016c12:	ee17 3a10 	vmov	r3, s14
 8016c16:	2900      	cmp	r1, #0
 8016c18:	bfcc      	ite	gt
 8016c1a:	46a1      	movgt	r9, r4
 8016c1c:	4691      	movle	r9, r2
 8016c1e:	44b6      	add	lr, r6
 8016c20:	fb04 e505 	mla	r5, r4, r5, lr
 8016c24:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8016c28:	fb07 3706 	mla	r7, r7, r6, r3
 8016c2c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8016c30:	e9cd 4700 	strd	r4, r7, [sp]
 8016c34:	eba9 0306 	sub.w	r3, r9, r6
 8016c38:	f8da 4008 	ldr.w	r4, [sl, #8]
 8016c3c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016c3e:	47a0      	blx	r4
 8016c40:	b00d      	add	sp, #52	; 0x34
 8016c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c46:	2500      	movs	r5, #0
 8016c48:	462e      	mov	r6, r5
 8016c4a:	e799      	b.n	8016b80 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08016c4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8016c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c50:	461d      	mov	r5, r3
 8016c52:	b0db      	sub	sp, #364	; 0x16c
 8016c54:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8016c58:	910f      	str	r1, [sp, #60]	; 0x3c
 8016c5a:	930a      	str	r3, [sp, #40]	; 0x28
 8016c5c:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8016c60:	9009      	str	r0, [sp, #36]	; 0x24
 8016c62:	930b      	str	r3, [sp, #44]	; 0x2c
 8016c64:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8016c68:	4614      	mov	r4, r2
 8016c6a:	9310      	str	r3, [sp, #64]	; 0x40
 8016c6c:	6803      	ldr	r3, [r0, #0]
 8016c6e:	4629      	mov	r1, r5
 8016c70:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8016c72:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016c76:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8016c7a:	47b8      	blx	r7
 8016c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c7e:	6058      	str	r0, [r3, #4]
 8016c80:	2800      	cmp	r0, #0
 8016c82:	f000 83a1 	beq.w	80173c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016c86:	ed94 7a02 	vldr	s14, [r4, #8]
 8016c8a:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8016c8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016c92:	682b      	ldr	r3, [r5, #0]
 8016c94:	9314      	str	r3, [sp, #80]	; 0x50
 8016c96:	686b      	ldr	r3, [r5, #4]
 8016c98:	9315      	str	r3, [sp, #84]	; 0x54
 8016c9a:	4bc1      	ldr	r3, [pc, #772]	; (8016fa0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8016c9c:	7819      	ldrb	r1, [r3, #0]
 8016c9e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8016ca2:	2900      	cmp	r1, #0
 8016ca4:	bf16      	itet	ne
 8016ca6:	4619      	movne	r1, r3
 8016ca8:	4611      	moveq	r1, r2
 8016caa:	4613      	movne	r3, r2
 8016cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cb0:	9116      	str	r1, [sp, #88]	; 0x58
 8016cb2:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8016cb6:	f240 8387 	bls.w	80173c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016cba:	ed94 7a07 	vldr	s14, [r4, #28]
 8016cbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cc6:	f240 837f 	bls.w	80173c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016cca:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8016cce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cd6:	f240 8377 	bls.w	80173c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016cda:	6822      	ldr	r2, [r4, #0]
 8016cdc:	4bb1      	ldr	r3, [pc, #708]	; (8016fa4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8016cde:	429a      	cmp	r2, r3
 8016ce0:	f2c0 8372 	blt.w	80173c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016ce4:	49b0      	ldr	r1, [pc, #704]	; (8016fa8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8016ce6:	6963      	ldr	r3, [r4, #20]
 8016ce8:	428a      	cmp	r2, r1
 8016cea:	f300 836d 	bgt.w	80173c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016cee:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8016cf2:	48ae      	ldr	r0, [pc, #696]	; (8016fac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8016cf4:	33ff      	adds	r3, #255	; 0xff
 8016cf6:	4283      	cmp	r3, r0
 8016cf8:	f200 8366 	bhi.w	80173c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016cfc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016cfe:	4dac      	ldr	r5, [pc, #688]	; (8016fb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8016d00:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8016d04:	33ff      	adds	r3, #255	; 0xff
 8016d06:	42ab      	cmp	r3, r5
 8016d08:	f200 835e 	bhi.w	80173c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016d0c:	6862      	ldr	r2, [r4, #4]
 8016d0e:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8016d12:	33ff      	adds	r3, #255	; 0xff
 8016d14:	4283      	cmp	r3, r0
 8016d16:	f200 8357 	bhi.w	80173c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016d1a:	69a1      	ldr	r1, [r4, #24]
 8016d1c:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8016d20:	33ff      	adds	r3, #255	; 0xff
 8016d22:	4283      	cmp	r3, r0
 8016d24:	f200 8350 	bhi.w	80173c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016d28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8016d2a:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8016d2e:	30ff      	adds	r0, #255	; 0xff
 8016d30:	42a8      	cmp	r0, r5
 8016d32:	f200 8349 	bhi.w	80173c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016d36:	428a      	cmp	r2, r1
 8016d38:	f280 8110 	bge.w	8016f5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8016d3c:	429a      	cmp	r2, r3
 8016d3e:	f300 8119 	bgt.w	8016f74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8016d42:	4299      	cmp	r1, r3
 8016d44:	f280 811d 	bge.w	8016f82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8016d48:	2502      	movs	r5, #2
 8016d4a:	2701      	movs	r7, #1
 8016d4c:	46a9      	mov	r9, r5
 8016d4e:	46b8      	mov	r8, r7
 8016d50:	f04f 0a00 	mov.w	sl, #0
 8016d54:	4621      	mov	r1, r4
 8016d56:	a849      	add	r0, sp, #292	; 0x124
 8016d58:	f002 ffc0 	bl	8019cdc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8016d5c:	4622      	mov	r2, r4
 8016d5e:	4653      	mov	r3, sl
 8016d60:	a949      	add	r1, sp, #292	; 0x124
 8016d62:	f8cd 9000 	str.w	r9, [sp]
 8016d66:	a819      	add	r0, sp, #100	; 0x64
 8016d68:	f003 f8ea 	bl	8019f40 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016d6c:	4622      	mov	r2, r4
 8016d6e:	4653      	mov	r3, sl
 8016d70:	a949      	add	r1, sp, #292	; 0x124
 8016d72:	f8cd 8000 	str.w	r8, [sp]
 8016d76:	a829      	add	r0, sp, #164	; 0xa4
 8016d78:	f003 f8e2 	bl	8019f40 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016d7c:	4643      	mov	r3, r8
 8016d7e:	4622      	mov	r2, r4
 8016d80:	a949      	add	r1, sp, #292	; 0x124
 8016d82:	f8cd 9000 	str.w	r9, [sp]
 8016d86:	a839      	add	r0, sp, #228	; 0xe4
 8016d88:	f003 f8da 	bl	8019f40 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016d8c:	42af      	cmp	r7, r5
 8016d8e:	bfb5      	itete	lt
 8016d90:	2300      	movlt	r3, #0
 8016d92:	2301      	movge	r3, #1
 8016d94:	930e      	strlt	r3, [sp, #56]	; 0x38
 8016d96:	930e      	strge	r3, [sp, #56]	; 0x38
 8016d98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016d9a:	af12      	add	r7, sp, #72	; 0x48
 8016d9c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016da0:	bfb9      	ittee	lt
 8016da2:	ad29      	addlt	r5, sp, #164	; 0xa4
 8016da4:	ac19      	addlt	r4, sp, #100	; 0x64
 8016da6:	ad19      	addge	r5, sp, #100	; 0x64
 8016da8:	ac29      	addge	r4, sp, #164	; 0xa4
 8016daa:	e887 0003 	stmia.w	r7, {r0, r1}
 8016dae:	b928      	cbnz	r0, 8016dbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8016db0:	4b80      	ldr	r3, [pc, #512]	; (8016fb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8016db2:	6818      	ldr	r0, [r3, #0]
 8016db4:	6803      	ldr	r3, [r0, #0]
 8016db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016db8:	4798      	blx	r3
 8016dba:	6038      	str	r0, [r7, #0]
 8016dbc:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016dbe:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8016dc2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016dc6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8016dc8:	930c      	str	r3, [sp, #48]	; 0x30
 8016dca:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016dcc:	6963      	ldr	r3, [r4, #20]
 8016dce:	440b      	add	r3, r1
 8016dd0:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8016dd4:	4408      	add	r0, r1
 8016dd6:	b200      	sxth	r0, r0
 8016dd8:	4283      	cmp	r3, r0
 8016dda:	900d      	str	r0, [sp, #52]	; 0x34
 8016ddc:	f280 80dd 	bge.w	8016f9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8016de0:	428b      	cmp	r3, r1
 8016de2:	da08      	bge.n	8016df6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016de4:	2a00      	cmp	r2, #0
 8016de6:	dd06      	ble.n	8016df6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016de8:	1acb      	subs	r3, r1, r3
 8016dea:	429a      	cmp	r2, r3
 8016dec:	f2c0 80e4 	blt.w	8016fb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	f300 80e2 	bgt.w	8016fba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8016df6:	6967      	ldr	r7, [r4, #20]
 8016df8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016dfa:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8016dfe:	443b      	add	r3, r7
 8016e00:	461f      	mov	r7, r3
 8016e02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016e04:	1bdf      	subs	r7, r3, r7
 8016e06:	4297      	cmp	r7, r2
 8016e08:	bfa8      	it	ge
 8016e0a:	4617      	movge	r7, r2
 8016e0c:	2f00      	cmp	r7, #0
 8016e0e:	f340 8166 	ble.w	80170de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8016e12:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016e14:	6829      	ldr	r1, [r5, #0]
 8016e16:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016e1a:	f9bb 3000 	ldrsh.w	r3, [fp]
 8016e1e:	4411      	add	r1, r2
 8016e20:	4299      	cmp	r1, r3
 8016e22:	6820      	ldr	r0, [r4, #0]
 8016e24:	dd1a      	ble.n	8016e5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8016e26:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8016e2a:	4402      	add	r2, r0
 8016e2c:	440b      	add	r3, r1
 8016e2e:	b21b      	sxth	r3, r3
 8016e30:	429a      	cmp	r2, r3
 8016e32:	dc13      	bgt.n	8016e5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8016e34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e38:	a912      	add	r1, sp, #72	; 0x48
 8016e3a:	681b      	ldr	r3, [r3, #0]
 8016e3c:	9206      	str	r2, [sp, #24]
 8016e3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016e40:	9500      	str	r5, [sp, #0]
 8016e42:	9205      	str	r2, [sp, #20]
 8016e44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016e46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016e48:	e9cd b203 	strd	fp, r2, [sp, #12]
 8016e4c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016e4e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8016e52:	aa49      	add	r2, sp, #292	; 0x124
 8016e54:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8016e58:	4623      	mov	r3, r4
 8016e5a:	47c8      	blx	r9
 8016e5c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016e60:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8016e64:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8016e68:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8016e6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016e70:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8016e74:	ed94 6a08 	vldr	s12, [r4, #32]
 8016e78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016e7c:	edd4 6a07 	vldr	s13, [r4, #28]
 8016e80:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016e84:	441a      	add	r2, r3
 8016e86:	6963      	ldr	r3, [r4, #20]
 8016e88:	68a1      	ldr	r1, [r4, #8]
 8016e8a:	3301      	adds	r3, #1
 8016e8c:	6163      	str	r3, [r4, #20]
 8016e8e:	69a3      	ldr	r3, [r4, #24]
 8016e90:	6022      	str	r2, [r4, #0]
 8016e92:	3b01      	subs	r3, #1
 8016e94:	61a3      	str	r3, [r4, #24]
 8016e96:	6923      	ldr	r3, [r4, #16]
 8016e98:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016e9c:	440b      	add	r3, r1
 8016e9e:	68e1      	ldr	r1, [r4, #12]
 8016ea0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016ea4:	428b      	cmp	r3, r1
 8016ea6:	edc4 6a07 	vstr	s13, [r4, #28]
 8016eaa:	6123      	str	r3, [r4, #16]
 8016eac:	db15      	blt.n	8016eda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8016eae:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8016eb2:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016eb6:	edc4 6a07 	vstr	s13, [r4, #28]
 8016eba:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8016ebe:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016ec2:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016ec6:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8016eca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016ece:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016ed2:	3201      	adds	r2, #1
 8016ed4:	1a5b      	subs	r3, r3, r1
 8016ed6:	6022      	str	r2, [r4, #0]
 8016ed8:	6123      	str	r3, [r4, #16]
 8016eda:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8016ede:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016ee2:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8016ee6:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8016eea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016eee:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8016ef2:	ed95 6a08 	vldr	s12, [r5, #32]
 8016ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016efa:	edd5 6a07 	vldr	s13, [r5, #28]
 8016efe:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016f02:	441a      	add	r2, r3
 8016f04:	696b      	ldr	r3, [r5, #20]
 8016f06:	68a9      	ldr	r1, [r5, #8]
 8016f08:	3301      	adds	r3, #1
 8016f0a:	616b      	str	r3, [r5, #20]
 8016f0c:	69ab      	ldr	r3, [r5, #24]
 8016f0e:	602a      	str	r2, [r5, #0]
 8016f10:	3b01      	subs	r3, #1
 8016f12:	61ab      	str	r3, [r5, #24]
 8016f14:	692b      	ldr	r3, [r5, #16]
 8016f16:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016f1a:	440b      	add	r3, r1
 8016f1c:	68e9      	ldr	r1, [r5, #12]
 8016f1e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016f22:	428b      	cmp	r3, r1
 8016f24:	edc5 6a07 	vstr	s13, [r5, #28]
 8016f28:	612b      	str	r3, [r5, #16]
 8016f2a:	db15      	blt.n	8016f58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8016f2c:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8016f30:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016f34:	edc5 6a07 	vstr	s13, [r5, #28]
 8016f38:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8016f3c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016f40:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016f44:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8016f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016f4c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016f50:	3201      	adds	r2, #1
 8016f52:	1a5b      	subs	r3, r3, r1
 8016f54:	602a      	str	r2, [r5, #0]
 8016f56:	612b      	str	r3, [r5, #16]
 8016f58:	3f01      	subs	r7, #1
 8016f5a:	e757      	b.n	8016e0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8016f5c:	4299      	cmp	r1, r3
 8016f5e:	dc13      	bgt.n	8016f88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8016f60:	429a      	cmp	r2, r3
 8016f62:	da14      	bge.n	8016f8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8016f64:	2502      	movs	r5, #2
 8016f66:	2703      	movs	r7, #3
 8016f68:	46a9      	mov	r9, r5
 8016f6a:	f04f 0800 	mov.w	r8, #0
 8016f6e:	f04f 0a01 	mov.w	sl, #1
 8016f72:	e6ef      	b.n	8016d54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8016f74:	2501      	movs	r5, #1
 8016f76:	2700      	movs	r7, #0
 8016f78:	46a9      	mov	r9, r5
 8016f7a:	46b8      	mov	r8, r7
 8016f7c:	f04f 0a02 	mov.w	sl, #2
 8016f80:	e6e8      	b.n	8016d54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8016f82:	2501      	movs	r5, #1
 8016f84:	2702      	movs	r7, #2
 8016f86:	e6e1      	b.n	8016d4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8016f88:	2500      	movs	r5, #0
 8016f8a:	2701      	movs	r7, #1
 8016f8c:	e7f4      	b.n	8016f78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8016f8e:	2702      	movs	r7, #2
 8016f90:	2503      	movs	r5, #3
 8016f92:	f04f 0900 	mov.w	r9, #0
 8016f96:	46b8      	mov	r8, r7
 8016f98:	e7e9      	b.n	8016f6e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8016f9a:	4613      	mov	r3, r2
 8016f9c:	e728      	b.n	8016df0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8016f9e:	bf00      	nop
 8016fa0:	20197950 	.word	0x20197950
 8016fa4:	fffd8f01 	.word	0xfffd8f01
 8016fa8:	00027100 	.word	0x00027100
 8016fac:	0004e1ff 	.word	0x0004e1ff
 8016fb0:	0004e1fe 	.word	0x0004e1fe
 8016fb4:	20197958 	.word	0x20197958
 8016fb8:	4613      	mov	r3, r2
 8016fba:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8016fbe:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8016fc2:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8016fc6:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8016fca:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8016fce:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8016fd2:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8016fd6:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8016fda:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8016fde:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8016fe2:	469e      	mov	lr, r3
 8016fe4:	469c      	mov	ip, r3
 8016fe6:	f04f 0900 	mov.w	r9, #0
 8016fea:	992b      	ldr	r1, [sp, #172]	; 0xac
 8016fec:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8016fee:	9111      	str	r1, [sp, #68]	; 0x44
 8016ff0:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8016ff4:	f1bc 0f00 	cmp.w	ip, #0
 8016ff8:	d147      	bne.n	801708a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8016ffa:	eb03 0c07 	add.w	ip, r3, r7
 8016ffe:	1ad7      	subs	r7, r2, r3
 8017000:	f1b9 0f00 	cmp.w	r9, #0
 8017004:	d009      	beq.n	801701a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8017006:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801700a:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801700e:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8017012:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8017016:	9029      	str	r0, [sp, #164]	; 0xa4
 8017018:	912d      	str	r1, [sp, #180]	; 0xb4
 801701a:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801701e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8017022:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8017026:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801702a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801702e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8017032:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8017036:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801703a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801703e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8017042:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8017046:	f04f 0800 	mov.w	r8, #0
 801704a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801704c:	9111      	str	r1, [sp, #68]	; 0x44
 801704e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8017052:	f1be 0f00 	cmp.w	lr, #0
 8017056:	d031      	beq.n	80170bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8017058:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801705a:	4450      	add	r0, sl
 801705c:	4431      	add	r1, r6
 801705e:	4549      	cmp	r1, r9
 8017060:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8017064:	ee37 7a04 	vadd.f32	s14, s14, s8
 8017068:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801706c:	db08      	blt.n	8017080 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801706e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8017072:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8017076:	ee37 7a06 	vadd.f32	s14, s14, s12
 801707a:	3001      	adds	r0, #1
 801707c:	eba1 0109 	sub.w	r1, r1, r9
 8017080:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017084:	f04f 0801 	mov.w	r8, #1
 8017088:	e7e3      	b.n	8017052 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801708a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801708c:	4450      	add	r0, sl
 801708e:	4431      	add	r1, r6
 8017090:	4541      	cmp	r1, r8
 8017092:	ee37 7a24 	vadd.f32	s14, s14, s9
 8017096:	ee77 7a84 	vadd.f32	s15, s15, s8
 801709a:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801709e:	db08      	blt.n	80170b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80170a0:	ee76 6a85 	vadd.f32	s13, s13, s10
 80170a4:	ee37 7a25 	vadd.f32	s14, s14, s11
 80170a8:	ee77 7a86 	vadd.f32	s15, s15, s12
 80170ac:	3001      	adds	r0, #1
 80170ae:	eba1 0108 	sub.w	r1, r1, r8
 80170b2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80170b6:	f04f 0901 	mov.w	r9, #1
 80170ba:	e79b      	b.n	8016ff4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 80170bc:	449c      	add	ip, r3
 80170be:	1aff      	subs	r7, r7, r3
 80170c0:	f1b8 0f00 	cmp.w	r8, #0
 80170c4:	d009      	beq.n	80170da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 80170c6:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80170ca:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80170ce:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80170d2:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80170d6:	9019      	str	r0, [sp, #100]	; 0x64
 80170d8:	911d      	str	r1, [sp, #116]	; 0x74
 80170da:	1ad2      	subs	r2, r2, r3
 80170dc:	e68b      	b.n	8016df6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80170de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80170e0:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	f000 80d1 	beq.w	801728a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 80170e8:	ad19      	add	r5, sp, #100	; 0x64
 80170ea:	ac39      	add	r4, sp, #228	; 0xe4
 80170ec:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80170ee:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80170f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80170f6:	930c      	str	r3, [sp, #48]	; 0x30
 80170f8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80170fa:	6963      	ldr	r3, [r4, #20]
 80170fc:	440b      	add	r3, r1
 80170fe:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8017102:	4408      	add	r0, r1
 8017104:	b200      	sxth	r0, r0
 8017106:	4283      	cmp	r3, r0
 8017108:	900d      	str	r0, [sp, #52]	; 0x34
 801710a:	f280 80c1 	bge.w	8017290 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801710e:	428b      	cmp	r3, r1
 8017110:	da08      	bge.n	8017124 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017112:	2a00      	cmp	r2, #0
 8017114:	dd06      	ble.n	8017124 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017116:	1acb      	subs	r3, r1, r3
 8017118:	429a      	cmp	r2, r3
 801711a:	f2c0 80bb 	blt.w	8017294 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801711e:	2b00      	cmp	r3, #0
 8017120:	f300 80b9 	bgt.w	8017296 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8017124:	6967      	ldr	r7, [r4, #20]
 8017126:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017128:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801712c:	443b      	add	r3, r7
 801712e:	461f      	mov	r7, r3
 8017130:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017132:	1bdf      	subs	r7, r3, r7
 8017134:	4297      	cmp	r7, r2
 8017136:	bfa8      	it	ge
 8017138:	4617      	movge	r7, r2
 801713a:	2f00      	cmp	r7, #0
 801713c:	f340 813c 	ble.w	80173b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8017140:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8017142:	6829      	ldr	r1, [r5, #0]
 8017144:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017148:	f9bb 3000 	ldrsh.w	r3, [fp]
 801714c:	4411      	add	r1, r2
 801714e:	4299      	cmp	r1, r3
 8017150:	6820      	ldr	r0, [r4, #0]
 8017152:	dd1a      	ble.n	801718a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8017154:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8017158:	4402      	add	r2, r0
 801715a:	440b      	add	r3, r1
 801715c:	b21b      	sxth	r3, r3
 801715e:	429a      	cmp	r2, r3
 8017160:	dc13      	bgt.n	801718a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8017162:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017166:	a912      	add	r1, sp, #72	; 0x48
 8017168:	681b      	ldr	r3, [r3, #0]
 801716a:	9206      	str	r2, [sp, #24]
 801716c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801716e:	9500      	str	r5, [sp, #0]
 8017170:	9205      	str	r2, [sp, #20]
 8017172:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017174:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017176:	e9cd b203 	strd	fp, r2, [sp, #12]
 801717a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801717c:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8017180:	aa49      	add	r2, sp, #292	; 0x124
 8017182:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8017186:	4623      	mov	r3, r4
 8017188:	47c8      	blx	r9
 801718a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801718e:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8017192:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8017196:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801719a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801719e:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80171a2:	ed94 6a08 	vldr	s12, [r4, #32]
 80171a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80171aa:	edd4 6a07 	vldr	s13, [r4, #28]
 80171ae:	ee76 6a86 	vadd.f32	s13, s13, s12
 80171b2:	441a      	add	r2, r3
 80171b4:	6963      	ldr	r3, [r4, #20]
 80171b6:	68a1      	ldr	r1, [r4, #8]
 80171b8:	3301      	adds	r3, #1
 80171ba:	6163      	str	r3, [r4, #20]
 80171bc:	69a3      	ldr	r3, [r4, #24]
 80171be:	6022      	str	r2, [r4, #0]
 80171c0:	3b01      	subs	r3, #1
 80171c2:	61a3      	str	r3, [r4, #24]
 80171c4:	6923      	ldr	r3, [r4, #16]
 80171c6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80171ca:	440b      	add	r3, r1
 80171cc:	68e1      	ldr	r1, [r4, #12]
 80171ce:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80171d2:	428b      	cmp	r3, r1
 80171d4:	edc4 6a07 	vstr	s13, [r4, #28]
 80171d8:	6123      	str	r3, [r4, #16]
 80171da:	db15      	blt.n	8017208 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 80171dc:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80171e0:	ee76 6a26 	vadd.f32	s13, s12, s13
 80171e4:	edc4 6a07 	vstr	s13, [r4, #28]
 80171e8:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80171ec:	ee36 7a87 	vadd.f32	s14, s13, s14
 80171f0:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80171f4:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80171f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80171fc:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017200:	3201      	adds	r2, #1
 8017202:	1a5b      	subs	r3, r3, r1
 8017204:	6022      	str	r2, [r4, #0]
 8017206:	6123      	str	r3, [r4, #16]
 8017208:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801720c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017210:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8017214:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8017218:	ee37 7a27 	vadd.f32	s14, s14, s15
 801721c:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8017220:	ed95 6a08 	vldr	s12, [r5, #32]
 8017224:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017228:	edd5 6a07 	vldr	s13, [r5, #28]
 801722c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017230:	441a      	add	r2, r3
 8017232:	696b      	ldr	r3, [r5, #20]
 8017234:	68a9      	ldr	r1, [r5, #8]
 8017236:	3301      	adds	r3, #1
 8017238:	616b      	str	r3, [r5, #20]
 801723a:	69ab      	ldr	r3, [r5, #24]
 801723c:	602a      	str	r2, [r5, #0]
 801723e:	3b01      	subs	r3, #1
 8017240:	61ab      	str	r3, [r5, #24]
 8017242:	692b      	ldr	r3, [r5, #16]
 8017244:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017248:	440b      	add	r3, r1
 801724a:	68e9      	ldr	r1, [r5, #12]
 801724c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017250:	428b      	cmp	r3, r1
 8017252:	edc5 6a07 	vstr	s13, [r5, #28]
 8017256:	612b      	str	r3, [r5, #16]
 8017258:	db15      	blt.n	8017286 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801725a:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801725e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017262:	edc5 6a07 	vstr	s13, [r5, #28]
 8017266:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801726a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801726e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017272:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8017276:	ee77 7a27 	vadd.f32	s15, s14, s15
 801727a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801727e:	3201      	adds	r2, #1
 8017280:	1a5b      	subs	r3, r3, r1
 8017282:	602a      	str	r2, [r5, #0]
 8017284:	612b      	str	r3, [r5, #16]
 8017286:	3f01      	subs	r7, #1
 8017288:	e757      	b.n	801713a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801728a:	ad39      	add	r5, sp, #228	; 0xe4
 801728c:	ac19      	add	r4, sp, #100	; 0x64
 801728e:	e72d      	b.n	80170ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8017290:	4613      	mov	r3, r2
 8017292:	e744      	b.n	801711e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8017294:	4613      	mov	r3, r2
 8017296:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801729a:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801729e:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 80172a2:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 80172a6:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 80172aa:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 80172ae:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 80172b2:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 80172b6:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 80172ba:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 80172be:	469e      	mov	lr, r3
 80172c0:	461f      	mov	r7, r3
 80172c2:	f04f 0900 	mov.w	r9, #0
 80172c6:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 80172c8:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 80172cc:	993d      	ldr	r1, [sp, #244]	; 0xf4
 80172ce:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 80172d2:	960e      	str	r6, [sp, #56]	; 0x38
 80172d4:	2f00      	cmp	r7, #0
 80172d6:	d146      	bne.n	8017366 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 80172d8:	449c      	add	ip, r3
 80172da:	1ad7      	subs	r7, r2, r3
 80172dc:	f1b9 0f00 	cmp.w	r9, #0
 80172e0:	d009      	beq.n	80172f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80172e2:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 80172e6:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 80172ea:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 80172ee:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 80172f2:	9039      	str	r0, [sp, #228]	; 0xe4
 80172f4:	913d      	str	r1, [sp, #244]	; 0xf4
 80172f6:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80172fa:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80172fe:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8017302:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8017306:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801730a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801730e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8017312:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8017316:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801731a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801731e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8017322:	f04f 0800 	mov.w	r8, #0
 8017326:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8017328:	910e      	str	r1, [sp, #56]	; 0x38
 801732a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801732e:	f1be 0f00 	cmp.w	lr, #0
 8017332:	d030      	beq.n	8017396 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8017334:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8017336:	4450      	add	r0, sl
 8017338:	4431      	add	r1, r6
 801733a:	4549      	cmp	r1, r9
 801733c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8017340:	ee37 7a04 	vadd.f32	s14, s14, s8
 8017344:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8017348:	db08      	blt.n	801735c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801734a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801734e:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8017352:	ee37 7a06 	vadd.f32	s14, s14, s12
 8017356:	3001      	adds	r0, #1
 8017358:	eba1 0109 	sub.w	r1, r1, r9
 801735c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017360:	f04f 0801 	mov.w	r8, #1
 8017364:	e7e3      	b.n	801732e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8017366:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8017368:	4450      	add	r0, sl
 801736a:	4431      	add	r1, r6
 801736c:	4541      	cmp	r1, r8
 801736e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8017372:	ee77 7a84 	vadd.f32	s15, s15, s8
 8017376:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801737a:	db08      	blt.n	801738e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801737c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8017380:	ee37 7a25 	vadd.f32	s14, s14, s11
 8017384:	ee77 7a86 	vadd.f32	s15, s15, s12
 8017388:	3001      	adds	r0, #1
 801738a:	eba1 0108 	sub.w	r1, r1, r8
 801738e:	3f01      	subs	r7, #1
 8017390:	f04f 0901 	mov.w	r9, #1
 8017394:	e79e      	b.n	80172d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8017396:	449c      	add	ip, r3
 8017398:	1aff      	subs	r7, r7, r3
 801739a:	f1b8 0f00 	cmp.w	r8, #0
 801739e:	d009      	beq.n	80173b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80173a0:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80173a4:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80173a8:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80173ac:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80173b0:	9019      	str	r0, [sp, #100]	; 0x64
 80173b2:	911d      	str	r1, [sp, #116]	; 0x74
 80173b4:	1ad2      	subs	r2, r2, r3
 80173b6:	e6b5      	b.n	8017124 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80173b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80173ba:	681b      	ldr	r3, [r3, #0]
 80173bc:	b923      	cbnz	r3, 80173c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80173be:	4b04      	ldr	r3, [pc, #16]	; (80173d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80173c0:	6818      	ldr	r0, [r3, #0]
 80173c2:	6803      	ldr	r3, [r0, #0]
 80173c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173c6:	4798      	blx	r3
 80173c8:	b05b      	add	sp, #364	; 0x16c
 80173ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173ce:	bf00      	nop
 80173d0:	20197958 	.word	0x20197958

080173d4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80173d4:	2b03      	cmp	r3, #3
 80173d6:	d818      	bhi.n	801740a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 80173d8:	e8df f003 	tbb	[pc, r3]
 80173dc:	130d0602 	.word	0x130d0602
 80173e0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80173e4:	1850      	adds	r0, r2, r1
 80173e6:	4770      	bx	lr
 80173e8:	8803      	ldrh	r3, [r0, #0]
 80173ea:	8880      	ldrh	r0, [r0, #4]
 80173ec:	4418      	add	r0, r3
 80173ee:	b200      	sxth	r0, r0
 80173f0:	1a80      	subs	r0, r0, r2
 80173f2:	3801      	subs	r0, #1
 80173f4:	4770      	bx	lr
 80173f6:	8803      	ldrh	r3, [r0, #0]
 80173f8:	8880      	ldrh	r0, [r0, #4]
 80173fa:	4418      	add	r0, r3
 80173fc:	b200      	sxth	r0, r0
 80173fe:	1a40      	subs	r0, r0, r1
 8017400:	e7f7      	b.n	80173f2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8017402:	f9b0 0000 	ldrsh.w	r0, [r0]
 8017406:	4410      	add	r0, r2
 8017408:	4770      	bx	lr
 801740a:	2000      	movs	r0, #0
 801740c:	4770      	bx	lr

0801740e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801740e:	2b03      	cmp	r3, #3
 8017410:	d817      	bhi.n	8017442 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8017412:	e8df f003 	tbb	[pc, r3]
 8017416:	0602      	.short	0x0602
 8017418:	1009      	.short	0x1009
 801741a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801741e:	1850      	adds	r0, r2, r1
 8017420:	4770      	bx	lr
 8017422:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8017426:	e7fa      	b.n	801741e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8017428:	8843      	ldrh	r3, [r0, #2]
 801742a:	88c0      	ldrh	r0, [r0, #6]
 801742c:	4418      	add	r0, r3
 801742e:	b200      	sxth	r0, r0
 8017430:	1a80      	subs	r0, r0, r2
 8017432:	3801      	subs	r0, #1
 8017434:	4770      	bx	lr
 8017436:	8843      	ldrh	r3, [r0, #2]
 8017438:	88c0      	ldrh	r0, [r0, #6]
 801743a:	4418      	add	r0, r3
 801743c:	b200      	sxth	r0, r0
 801743e:	1a40      	subs	r0, r0, r1
 8017440:	e7f7      	b.n	8017432 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8017442:	2000      	movs	r0, #0
 8017444:	4770      	bx	lr
	...

08017448 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8017448:	2200      	movs	r2, #0
 801744a:	4b01      	ldr	r3, [pc, #4]	; (8017450 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801744c:	601a      	str	r2, [r3, #0]
 801744e:	4770      	bx	lr
 8017450:	20197960 	.word	0x20197960

08017454 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8017454:	4603      	mov	r3, r0
 8017456:	b1c8      	cbz	r0, 801748c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8017458:	0c02      	lsrs	r2, r0, #16
 801745a:	0412      	lsls	r2, r2, #16
 801745c:	b9a2      	cbnz	r2, 8017488 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801745e:	0403      	lsls	r3, r0, #16
 8017460:	2010      	movs	r0, #16
 8017462:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8017466:	bf04      	itt	eq
 8017468:	021b      	lsleq	r3, r3, #8
 801746a:	3008      	addeq	r0, #8
 801746c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8017470:	bf04      	itt	eq
 8017472:	011b      	lsleq	r3, r3, #4
 8017474:	3004      	addeq	r0, #4
 8017476:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801747a:	bf04      	itt	eq
 801747c:	009b      	lsleq	r3, r3, #2
 801747e:	3002      	addeq	r0, #2
 8017480:	2b00      	cmp	r3, #0
 8017482:	db04      	blt.n	801748e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8017484:	3001      	adds	r0, #1
 8017486:	4770      	bx	lr
 8017488:	2000      	movs	r0, #0
 801748a:	e7ea      	b.n	8017462 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801748c:	2020      	movs	r0, #32
 801748e:	4770      	bx	lr

08017490 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8017490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017494:	b087      	sub	sp, #28
 8017496:	4681      	mov	r9, r0
 8017498:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801749c:	4610      	mov	r0, r2
 801749e:	4698      	mov	r8, r3
 80174a0:	460d      	mov	r5, r1
 80174a2:	b981      	cbnz	r1, 80174c6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 80174a4:	b14b      	cbz	r3, 80174ba <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 80174a6:	460b      	mov	r3, r1
 80174a8:	e9cd 4700 	strd	r4, r7, [sp]
 80174ac:	464a      	mov	r2, r9
 80174ae:	4641      	mov	r1, r8
 80174b0:	f7ff ffee 	bl	8017490 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80174b4:	b007      	add	sp, #28
 80174b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174ba:	f04f 33ff 	mov.w	r3, #4294967295
 80174be:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80174c2:	603b      	str	r3, [r7, #0]
 80174c4:	e7f6      	b.n	80174b4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 80174c6:	fa32 fa01 	lsrs.w	sl, r2, r1
 80174ca:	d107      	bne.n	80174dc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 80174cc:	fb09 f602 	mul.w	r6, r9, r2
 80174d0:	fbb6 f0f4 	udiv	r0, r6, r4
 80174d4:	fb04 6610 	mls	r6, r4, r0, r6
 80174d8:	603e      	str	r6, [r7, #0]
 80174da:	e7eb      	b.n	80174b4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 80174dc:	fa09 fb01 	lsl.w	fp, r9, r1
 80174e0:	fbbb f3f4 	udiv	r3, fp, r4
 80174e4:	2601      	movs	r6, #1
 80174e6:	9302      	str	r3, [sp, #8]
 80174e8:	408e      	lsls	r6, r1
 80174ea:	fb0a f303 	mul.w	r3, sl, r3
 80174ee:	3e01      	subs	r6, #1
 80174f0:	4016      	ands	r6, r2
 80174f2:	4630      	mov	r0, r6
 80174f4:	9303      	str	r3, [sp, #12]
 80174f6:	f7ff ffad 	bl	8017454 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80174fa:	464a      	mov	r2, r9
 80174fc:	460b      	mov	r3, r1
 80174fe:	e9cd 4700 	strd	r4, r7, [sp]
 8017502:	4601      	mov	r1, r0
 8017504:	4630      	mov	r0, r6
 8017506:	f7ff ffc3 	bl	8017490 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801750a:	9b02      	ldr	r3, [sp, #8]
 801750c:	4606      	mov	r6, r0
 801750e:	fb04 bb13 	mls	fp, r4, r3, fp
 8017512:	4658      	mov	r0, fp
 8017514:	eb05 0108 	add.w	r1, r5, r8
 8017518:	f7ff ff9c 	bl	8017454 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801751c:	ab05      	add	r3, sp, #20
 801751e:	e9cd 4300 	strd	r4, r3, [sp]
 8017522:	465a      	mov	r2, fp
 8017524:	4603      	mov	r3, r0
 8017526:	4650      	mov	r0, sl
 8017528:	f7ff ffb2 	bl	8017490 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801752c:	6839      	ldr	r1, [r7, #0]
 801752e:	9a05      	ldr	r2, [sp, #20]
 8017530:	9b03      	ldr	r3, [sp, #12]
 8017532:	4411      	add	r1, r2
 8017534:	fbb1 f2f4 	udiv	r2, r1, r4
 8017538:	fb04 1412 	mls	r4, r4, r2, r1
 801753c:	18d3      	adds	r3, r2, r3
 801753e:	441e      	add	r6, r3
 8017540:	4430      	add	r0, r6
 8017542:	603c      	str	r4, [r7, #0]
 8017544:	e7b6      	b.n	80174b4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08017546 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8017546:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801754a:	b085      	sub	sp, #20
 801754c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801754e:	f1b0 0900 	subs.w	r9, r0, #0
 8017552:	461d      	mov	r5, r3
 8017554:	bfbf      	itttt	lt
 8017556:	6823      	ldrlt	r3, [r4, #0]
 8017558:	f1c9 0900 	rsblt	r9, r9, #0
 801755c:	425b      	neglt	r3, r3
 801755e:	6023      	strlt	r3, [r4, #0]
 8017560:	bfb4      	ite	lt
 8017562:	f04f 36ff 	movlt.w	r6, #4294967295
 8017566:	2601      	movge	r6, #1
 8017568:	2a00      	cmp	r2, #0
 801756a:	4617      	mov	r7, r2
 801756c:	da04      	bge.n	8017578 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801756e:	6823      	ldr	r3, [r4, #0]
 8017570:	4257      	negs	r7, r2
 8017572:	425b      	negs	r3, r3
 8017574:	4276      	negs	r6, r6
 8017576:	6023      	str	r3, [r4, #0]
 8017578:	2d00      	cmp	r5, #0
 801757a:	4638      	mov	r0, r7
 801757c:	bfba      	itte	lt
 801757e:	426d      	neglt	r5, r5
 8017580:	f04f 38ff 	movlt.w	r8, #4294967295
 8017584:	f04f 0801 	movge.w	r8, #1
 8017588:	f7ff ff64 	bl	8017454 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801758c:	ab03      	add	r3, sp, #12
 801758e:	e9cd 5300 	strd	r5, r3, [sp]
 8017592:	463a      	mov	r2, r7
 8017594:	4603      	mov	r3, r0
 8017596:	4648      	mov	r0, r9
 8017598:	f7ff ff7a 	bl	8017490 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801759c:	6823      	ldr	r3, [r4, #0]
 801759e:	9a03      	ldr	r2, [sp, #12]
 80175a0:	4546      	cmp	r6, r8
 80175a2:	441a      	add	r2, r3
 80175a4:	fb92 f3f5 	sdiv	r3, r2, r5
 80175a8:	4418      	add	r0, r3
 80175aa:	fb05 2313 	mls	r3, r5, r3, r2
 80175ae:	bf18      	it	ne
 80175b0:	4240      	negne	r0, r0
 80175b2:	1c72      	adds	r2, r6, #1
 80175b4:	6023      	str	r3, [r4, #0]
 80175b6:	d105      	bne.n	80175c4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	f1c3 0200 	rsb	r2, r3, #0
 80175be:	db0b      	blt.n	80175d8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 80175c0:	6022      	str	r2, [r4, #0]
 80175c2:	e006      	b.n	80175d2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80175c4:	2e01      	cmp	r6, #1
 80175c6:	d104      	bne.n	80175d2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	da02      	bge.n	80175d2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80175cc:	442b      	add	r3, r5
 80175ce:	3801      	subs	r0, #1
 80175d0:	6023      	str	r3, [r4, #0]
 80175d2:	b005      	add	sp, #20
 80175d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80175d8:	3801      	subs	r0, #1
 80175da:	1b52      	subs	r2, r2, r5
 80175dc:	e7f0      	b.n	80175c0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

080175e0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80175e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80175e4:	4c1c      	ldr	r4, [pc, #112]	; (8017658 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80175e6:	4605      	mov	r5, r0
 80175e8:	69a3      	ldr	r3, [r4, #24]
 80175ea:	6807      	ldr	r7, [r0, #0]
 80175ec:	b92b      	cbnz	r3, 80175fa <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80175ee:	6840      	ldr	r0, [r0, #4]
 80175f0:	e9c5 7000 	strd	r7, r0, [r5]
 80175f4:	b004      	add	sp, #16
 80175f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175fa:	f04f 0802 	mov.w	r8, #2
 80175fe:	fb93 f1f8 	sdiv	r1, r3, r8
 8017602:	68a2      	ldr	r2, [r4, #8]
 8017604:	ae04      	add	r6, sp, #16
 8017606:	440a      	add	r2, r1
 8017608:	f846 2d04 	str.w	r2, [r6, #-4]!
 801760c:	69e1      	ldr	r1, [r4, #28]
 801760e:	463a      	mov	r2, r7
 8017610:	9600      	str	r6, [sp, #0]
 8017612:	6820      	ldr	r0, [r4, #0]
 8017614:	f7ff ff97 	bl	8017546 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017618:	69a3      	ldr	r3, [r4, #24]
 801761a:	4607      	mov	r7, r0
 801761c:	686a      	ldr	r2, [r5, #4]
 801761e:	6a21      	ldr	r1, [r4, #32]
 8017620:	9600      	str	r6, [sp, #0]
 8017622:	6860      	ldr	r0, [r4, #4]
 8017624:	f7ff ff8f 	bl	8017546 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017628:	69a3      	ldr	r3, [r4, #24]
 801762a:	6962      	ldr	r2, [r4, #20]
 801762c:	fb93 f8f8 	sdiv	r8, r3, r8
 8017630:	4442      	add	r2, r8
 8017632:	9203      	str	r2, [sp, #12]
 8017634:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8017636:	682a      	ldr	r2, [r5, #0]
 8017638:	4407      	add	r7, r0
 801763a:	9600      	str	r6, [sp, #0]
 801763c:	68e0      	ldr	r0, [r4, #12]
 801763e:	f7ff ff82 	bl	8017546 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017642:	9600      	str	r6, [sp, #0]
 8017644:	4680      	mov	r8, r0
 8017646:	69a3      	ldr	r3, [r4, #24]
 8017648:	686a      	ldr	r2, [r5, #4]
 801764a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801764c:	6920      	ldr	r0, [r4, #16]
 801764e:	f7ff ff7a 	bl	8017546 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017652:	4440      	add	r0, r8
 8017654:	e7cc      	b.n	80175f0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8017656:	bf00      	nop
 8017658:	20197964 	.word	0x20197964

0801765c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801765c:	4b07      	ldr	r3, [pc, #28]	; (801767c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801765e:	781b      	ldrb	r3, [r3, #0]
 8017660:	2b01      	cmp	r3, #1
 8017662:	d109      	bne.n	8017678 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8017664:	f9b1 3000 	ldrsh.w	r3, [r1]
 8017668:	f9b0 2000 	ldrsh.w	r2, [r0]
 801766c:	8003      	strh	r3, [r0, #0]
 801766e:	4b04      	ldr	r3, [pc, #16]	; (8017680 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8017670:	881b      	ldrh	r3, [r3, #0]
 8017672:	3b01      	subs	r3, #1
 8017674:	1a9b      	subs	r3, r3, r2
 8017676:	800b      	strh	r3, [r1, #0]
 8017678:	4770      	bx	lr
 801767a:	bf00      	nop
 801767c:	20197950 	.word	0x20197950
 8017680:	2019794c 	.word	0x2019794c

08017684 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8017684:	b510      	push	{r4, lr}
 8017686:	4b07      	ldr	r3, [pc, #28]	; (80176a4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8017688:	781b      	ldrb	r3, [r3, #0]
 801768a:	2b01      	cmp	r3, #1
 801768c:	d108      	bne.n	80176a0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801768e:	4b06      	ldr	r3, [pc, #24]	; (80176a8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8017690:	880c      	ldrh	r4, [r1, #0]
 8017692:	881b      	ldrh	r3, [r3, #0]
 8017694:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017698:	3b01      	subs	r3, #1
 801769a:	1b1b      	subs	r3, r3, r4
 801769c:	8003      	strh	r3, [r0, #0]
 801769e:	800a      	strh	r2, [r1, #0]
 80176a0:	bd10      	pop	{r4, pc}
 80176a2:	bf00      	nop
 80176a4:	20197950 	.word	0x20197950
 80176a8:	2019794c 	.word	0x2019794c

080176ac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80176ac:	b510      	push	{r4, lr}
 80176ae:	4b0a      	ldr	r3, [pc, #40]	; (80176d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80176b0:	781b      	ldrb	r3, [r3, #0]
 80176b2:	2b01      	cmp	r3, #1
 80176b4:	d10e      	bne.n	80176d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80176b6:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80176ba:	8843      	ldrh	r3, [r0, #2]
 80176bc:	f9b0 4000 	ldrsh.w	r4, [r0]
 80176c0:	18ca      	adds	r2, r1, r3
 80176c2:	4b06      	ldr	r3, [pc, #24]	; (80176dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 80176c4:	8044      	strh	r4, [r0, #2]
 80176c6:	881b      	ldrh	r3, [r3, #0]
 80176c8:	1a9b      	subs	r3, r3, r2
 80176ca:	8003      	strh	r3, [r0, #0]
 80176cc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80176d0:	8081      	strh	r1, [r0, #4]
 80176d2:	80c3      	strh	r3, [r0, #6]
 80176d4:	bd10      	pop	{r4, pc}
 80176d6:	bf00      	nop
 80176d8:	20197950 	.word	0x20197950
 80176dc:	2019794c 	.word	0x2019794c

080176e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80176e0:	4b08      	ldr	r3, [pc, #32]	; (8017704 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 80176e2:	781b      	ldrb	r3, [r3, #0]
 80176e4:	2b01      	cmp	r3, #1
 80176e6:	d10c      	bne.n	8017702 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 80176e8:	8803      	ldrh	r3, [r0, #0]
 80176ea:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80176ee:	8842      	ldrh	r2, [r0, #2]
 80176f0:	8002      	strh	r2, [r0, #0]
 80176f2:	185a      	adds	r2, r3, r1
 80176f4:	4b04      	ldr	r3, [pc, #16]	; (8017708 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80176f6:	881b      	ldrh	r3, [r3, #0]
 80176f8:	1a9b      	subs	r3, r3, r2
 80176fa:	8043      	strh	r3, [r0, #2]
 80176fc:	88c3      	ldrh	r3, [r0, #6]
 80176fe:	80c1      	strh	r1, [r0, #6]
 8017700:	8083      	strh	r3, [r0, #4]
 8017702:	4770      	bx	lr
 8017704:	20197950 	.word	0x20197950
 8017708:	2019794c 	.word	0x2019794c

0801770c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801770c:	b510      	push	{r4, lr}
 801770e:	4b07      	ldr	r3, [pc, #28]	; (801772c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8017710:	781b      	ldrb	r3, [r3, #0]
 8017712:	2b01      	cmp	r3, #1
 8017714:	d108      	bne.n	8017728 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8017716:	f9b1 3000 	ldrsh.w	r3, [r1]
 801771a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801771e:	8003      	strh	r3, [r0, #0]
 8017720:	8893      	ldrh	r3, [r2, #4]
 8017722:	3b01      	subs	r3, #1
 8017724:	1b1b      	subs	r3, r3, r4
 8017726:	800b      	strh	r3, [r1, #0]
 8017728:	bd10      	pop	{r4, pc}
 801772a:	bf00      	nop
 801772c:	20197950 	.word	0x20197950

08017730 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8017730:	b510      	push	{r4, lr}
 8017732:	4b0a      	ldr	r3, [pc, #40]	; (801775c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8017734:	460a      	mov	r2, r1
 8017736:	781b      	ldrb	r3, [r3, #0]
 8017738:	2b01      	cmp	r3, #1
 801773a:	d10d      	bne.n	8017758 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801773c:	8881      	ldrh	r1, [r0, #4]
 801773e:	8803      	ldrh	r3, [r0, #0]
 8017740:	440b      	add	r3, r1
 8017742:	4601      	mov	r1, r0
 8017744:	3b01      	subs	r3, #1
 8017746:	f821 3b02 	strh.w	r3, [r1], #2
 801774a:	f7ff ffdf 	bl	801770c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801774e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017752:	88c2      	ldrh	r2, [r0, #6]
 8017754:	80c3      	strh	r3, [r0, #6]
 8017756:	8082      	strh	r2, [r0, #4]
 8017758:	bd10      	pop	{r4, pc}
 801775a:	bf00      	nop
 801775c:	20197950 	.word	0x20197950

08017760 <_ZN8touchgfx11Application13requestRedrawEv>:
 8017760:	2100      	movs	r1, #0
 8017762:	4b06      	ldr	r3, [pc, #24]	; (801777c <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8017764:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 8017768:	f9b3 2000 	ldrsh.w	r2, [r3]
 801776c:	4b04      	ldr	r3, [pc, #16]	; (8017780 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801776e:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 8017772:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017776:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 801777a:	4770      	bx	lr
 801777c:	2019794c 	.word	0x2019794c
 8017780:	2019794e 	.word	0x2019794e

08017784 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8017784:	4b03      	ldr	r3, [pc, #12]	; (8017794 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8017786:	6818      	ldr	r0, [r3, #0]
 8017788:	b110      	cbz	r0, 8017790 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801778a:	6803      	ldr	r3, [r0, #0]
 801778c:	699b      	ldr	r3, [r3, #24]
 801778e:	4718      	bx	r3
 8017790:	4770      	bx	lr
 8017792:	bf00      	nop
 8017794:	20197994 	.word	0x20197994

08017798 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8017798:	4770      	bx	lr
	...

0801779c <_ZN8touchgfx11Application4drawEv>:
 801779c:	b507      	push	{r0, r1, r2, lr}
 801779e:	2100      	movs	r1, #0
 80177a0:	4b08      	ldr	r3, [pc, #32]	; (80177c4 <_ZN8touchgfx11Application4drawEv+0x28>)
 80177a2:	9100      	str	r1, [sp, #0]
 80177a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80177a8:	4b07      	ldr	r3, [pc, #28]	; (80177c8 <_ZN8touchgfx11Application4drawEv+0x2c>)
 80177aa:	f8ad 2004 	strh.w	r2, [sp, #4]
 80177ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80177b2:	4669      	mov	r1, sp
 80177b4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80177b8:	6803      	ldr	r3, [r0, #0]
 80177ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177bc:	4798      	blx	r3
 80177be:	b003      	add	sp, #12
 80177c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80177c4:	2019794c 	.word	0x2019794c
 80177c8:	2019794e 	.word	0x2019794e

080177cc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 80177cc:	4b03      	ldr	r3, [pc, #12]	; (80177dc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 80177ce:	6818      	ldr	r0, [r3, #0]
 80177d0:	b110      	cbz	r0, 80177d8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 80177d2:	6803      	ldr	r3, [r0, #0]
 80177d4:	69db      	ldr	r3, [r3, #28]
 80177d6:	4718      	bx	r3
 80177d8:	4770      	bx	lr
 80177da:	bf00      	nop
 80177dc:	20197994 	.word	0x20197994

080177e0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 80177e0:	4b03      	ldr	r3, [pc, #12]	; (80177f0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 80177e2:	6818      	ldr	r0, [r3, #0]
 80177e4:	b110      	cbz	r0, 80177ec <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 80177e6:	6803      	ldr	r3, [r0, #0]
 80177e8:	6a1b      	ldr	r3, [r3, #32]
 80177ea:	4718      	bx	r3
 80177ec:	4770      	bx	lr
 80177ee:	bf00      	nop
 80177f0:	20197994 	.word	0x20197994

080177f4 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 80177f4:	2300      	movs	r3, #0
 80177f6:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 80177fa:	4770      	bx	lr

080177fc <_ZN8touchgfx11Application14handleKeyEventEh>:
 80177fc:	4b03      	ldr	r3, [pc, #12]	; (801780c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80177fe:	6818      	ldr	r0, [r3, #0]
 8017800:	b110      	cbz	r0, 8017808 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8017802:	6803      	ldr	r3, [r0, #0]
 8017804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017806:	4718      	bx	r3
 8017808:	4770      	bx	lr
 801780a:	bf00      	nop
 801780c:	20197994 	.word	0x20197994

08017810 <_ZN8touchgfx11ApplicationD1Ev>:
 8017810:	4770      	bx	lr

08017812 <_ZN8touchgfx11ApplicationD0Ev>:
 8017812:	b510      	push	{r4, lr}
 8017814:	4604      	mov	r4, r0
 8017816:	f44f 719e 	mov.w	r1, #316	; 0x13c
 801781a:	f010 fbfc 	bl	8028016 <_ZdlPvj>
 801781e:	4620      	mov	r0, r4
 8017820:	bd10      	pop	{r4, pc}

08017822 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8017822:	b510      	push	{r4, lr}
 8017824:	f9b1 4000 	ldrsh.w	r4, [r1]
 8017828:	888a      	ldrh	r2, [r1, #4]
 801782a:	f9b0 3000 	ldrsh.w	r3, [r0]
 801782e:	4422      	add	r2, r4
 8017830:	b212      	sxth	r2, r2
 8017832:	4293      	cmp	r3, r2
 8017834:	da15      	bge.n	8017862 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8017836:	8882      	ldrh	r2, [r0, #4]
 8017838:	4413      	add	r3, r2
 801783a:	b21b      	sxth	r3, r3
 801783c:	429c      	cmp	r4, r3
 801783e:	da10      	bge.n	8017862 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8017840:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8017844:	88c9      	ldrh	r1, [r1, #6]
 8017846:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801784a:	4419      	add	r1, r3
 801784c:	b209      	sxth	r1, r1
 801784e:	428a      	cmp	r2, r1
 8017850:	da07      	bge.n	8017862 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8017852:	88c0      	ldrh	r0, [r0, #6]
 8017854:	4410      	add	r0, r2
 8017856:	b200      	sxth	r0, r0
 8017858:	4283      	cmp	r3, r0
 801785a:	bfac      	ite	ge
 801785c:	2000      	movge	r0, #0
 801785e:	2001      	movlt	r0, #1
 8017860:	bd10      	pop	{r4, pc}
 8017862:	2000      	movs	r0, #0
 8017864:	e7fc      	b.n	8017860 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08017866 <_ZN8touchgfx4Rect10restrictToEss>:
 8017866:	f9b0 3000 	ldrsh.w	r3, [r0]
 801786a:	b510      	push	{r4, lr}
 801786c:	2b00      	cmp	r3, #0
 801786e:	da04      	bge.n	801787a <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8017870:	8884      	ldrh	r4, [r0, #4]
 8017872:	4423      	add	r3, r4
 8017874:	8083      	strh	r3, [r0, #4]
 8017876:	2300      	movs	r3, #0
 8017878:	8003      	strh	r3, [r0, #0]
 801787a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801787e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017882:	1b09      	subs	r1, r1, r4
 8017884:	428b      	cmp	r3, r1
 8017886:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801788a:	bfc8      	it	gt
 801788c:	8081      	strhgt	r1, [r0, #4]
 801788e:	2b00      	cmp	r3, #0
 8017890:	da04      	bge.n	801789c <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8017892:	88c1      	ldrh	r1, [r0, #6]
 8017894:	440b      	add	r3, r1
 8017896:	80c3      	strh	r3, [r0, #6]
 8017898:	2300      	movs	r3, #0
 801789a:	8043      	strh	r3, [r0, #2]
 801789c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80178a0:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80178a4:	1a52      	subs	r2, r2, r1
 80178a6:	4293      	cmp	r3, r2
 80178a8:	bfc8      	it	gt
 80178aa:	80c2      	strhgt	r2, [r0, #6]
 80178ac:	bd10      	pop	{r4, pc}
	...

080178b0 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80178b0:	b510      	push	{r4, lr}
 80178b2:	460c      	mov	r4, r1
 80178b4:	4b0f      	ldr	r3, [pc, #60]	; (80178f4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 80178b6:	4620      	mov	r0, r4
 80178b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80178bc:	4b0e      	ldr	r3, [pc, #56]	; (80178f8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 80178be:	f9b3 1000 	ldrsh.w	r1, [r3]
 80178c2:	f7ff ffd0 	bl	8017866 <_ZN8touchgfx4Rect10restrictToEss>
 80178c6:	4b0d      	ldr	r3, [pc, #52]	; (80178fc <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 80178c8:	6818      	ldr	r0, [r3, #0]
 80178ca:	b190      	cbz	r0, 80178f2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 80178cc:	6803      	ldr	r3, [r0, #0]
 80178ce:	4621      	mov	r1, r4
 80178d0:	689b      	ldr	r3, [r3, #8]
 80178d2:	4798      	blx	r3
 80178d4:	4b0a      	ldr	r3, [pc, #40]	; (8017900 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 80178d6:	6818      	ldr	r0, [r3, #0]
 80178d8:	b118      	cbz	r0, 80178e2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 80178da:	6803      	ldr	r3, [r0, #0]
 80178dc:	4621      	mov	r1, r4
 80178de:	689b      	ldr	r3, [r3, #8]
 80178e0:	4798      	blx	r3
 80178e2:	4b08      	ldr	r3, [pc, #32]	; (8017904 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 80178e4:	4621      	mov	r1, r4
 80178e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80178ea:	6818      	ldr	r0, [r3, #0]
 80178ec:	6803      	ldr	r3, [r0, #0]
 80178ee:	69db      	ldr	r3, [r3, #28]
 80178f0:	4718      	bx	r3
 80178f2:	bd10      	pop	{r4, pc}
 80178f4:	2019794e 	.word	0x2019794e
 80178f8:	2019794c 	.word	0x2019794c
 80178fc:	20197994 	.word	0x20197994
 8017900:	20197990 	.word	0x20197990
 8017904:	20197958 	.word	0x20197958

08017908 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8017908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801790a:	4606      	mov	r6, r0
 801790c:	4608      	mov	r0, r1
 801790e:	460f      	mov	r7, r1
 8017910:	f7fe f823 	bl	801595a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017914:	b9e8      	cbnz	r0, 8017952 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017916:	f9b7 5000 	ldrsh.w	r5, [r7]
 801791a:	f9b6 4000 	ldrsh.w	r4, [r6]
 801791e:	42a5      	cmp	r5, r4
 8017920:	db17      	blt.n	8017952 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017922:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8017926:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801792a:	429a      	cmp	r2, r3
 801792c:	db11      	blt.n	8017952 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801792e:	88b9      	ldrh	r1, [r7, #4]
 8017930:	440d      	add	r5, r1
 8017932:	88b1      	ldrh	r1, [r6, #4]
 8017934:	b22d      	sxth	r5, r5
 8017936:	440c      	add	r4, r1
 8017938:	b224      	sxth	r4, r4
 801793a:	42a5      	cmp	r5, r4
 801793c:	dc09      	bgt.n	8017952 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801793e:	88f8      	ldrh	r0, [r7, #6]
 8017940:	4410      	add	r0, r2
 8017942:	88f2      	ldrh	r2, [r6, #6]
 8017944:	b200      	sxth	r0, r0
 8017946:	4413      	add	r3, r2
 8017948:	b21b      	sxth	r3, r3
 801794a:	4298      	cmp	r0, r3
 801794c:	bfcc      	ite	gt
 801794e:	2000      	movgt	r0, #0
 8017950:	2001      	movle	r0, #1
 8017952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017954 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8017954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017956:	4604      	mov	r4, r0
 8017958:	4608      	mov	r0, r1
 801795a:	460d      	mov	r5, r1
 801795c:	f7fd fffd 	bl	801595a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017960:	b978      	cbnz	r0, 8017982 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8017962:	4620      	mov	r0, r4
 8017964:	f7fd fff9 	bl	801595a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017968:	f9b5 6000 	ldrsh.w	r6, [r5]
 801796c:	b150      	cbz	r0, 8017984 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801796e:	8026      	strh	r6, [r4, #0]
 8017970:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8017974:	8063      	strh	r3, [r4, #2]
 8017976:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801797a:	80a3      	strh	r3, [r4, #4]
 801797c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8017980:	80e3      	strh	r3, [r4, #6]
 8017982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017984:	f9b4 1000 	ldrsh.w	r1, [r4]
 8017988:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801798c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8017990:	42b1      	cmp	r1, r6
 8017992:	460f      	mov	r7, r1
 8017994:	bfa8      	it	ge
 8017996:	4637      	movge	r7, r6
 8017998:	4293      	cmp	r3, r2
 801799a:	4618      	mov	r0, r3
 801799c:	bfa8      	it	ge
 801799e:	4610      	movge	r0, r2
 80179a0:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80179a4:	88ed      	ldrh	r5, [r5, #6]
 80179a6:	4466      	add	r6, ip
 80179a8:	442a      	add	r2, r5
 80179aa:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80179ae:	88e5      	ldrh	r5, [r4, #6]
 80179b0:	4461      	add	r1, ip
 80179b2:	442b      	add	r3, r5
 80179b4:	b236      	sxth	r6, r6
 80179b6:	b209      	sxth	r1, r1
 80179b8:	b212      	sxth	r2, r2
 80179ba:	b21b      	sxth	r3, r3
 80179bc:	428e      	cmp	r6, r1
 80179be:	bfac      	ite	ge
 80179c0:	ebc7 0106 	rsbge	r1, r7, r6
 80179c4:	ebc7 0101 	rsblt	r1, r7, r1
 80179c8:	429a      	cmp	r2, r3
 80179ca:	bfac      	ite	ge
 80179cc:	ebc0 0202 	rsbge	r2, r0, r2
 80179d0:	ebc0 0203 	rsblt	r2, r0, r3
 80179d4:	8027      	strh	r7, [r4, #0]
 80179d6:	8060      	strh	r0, [r4, #2]
 80179d8:	80a1      	strh	r1, [r4, #4]
 80179da:	80e2      	strh	r2, [r4, #6]
 80179dc:	e7d1      	b.n	8017982 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

080179e0 <_ZN8touchgfx11Application11getInstanceEv>:
 80179e0:	4b01      	ldr	r3, [pc, #4]	; (80179e8 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80179e2:	6818      	ldr	r0, [r3, #0]
 80179e4:	4770      	bx	lr
 80179e6:	bf00      	nop
 80179e8:	201979a4 	.word	0x201979a4

080179ec <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 80179ec:	2300      	movs	r3, #0
 80179ee:	b510      	push	{r4, lr}
 80179f0:	4604      	mov	r4, r0
 80179f2:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 80179f6:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 80179fa:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 80179fe:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8017a02:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 8017a06:	429a      	cmp	r2, r3
 8017a08:	d90e      	bls.n	8017a28 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8017a0a:	18e2      	adds	r2, r4, r3
 8017a0c:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 8017a10:	b122      	cbz	r2, 8017a1c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8017a12:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8017a16:	6803      	ldr	r3, [r0, #0]
 8017a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017a1a:	4798      	blx	r3
 8017a1c:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8017a20:	3301      	adds	r3, #1
 8017a22:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8017a26:	e7ea      	b.n	80179fe <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8017a28:	bd10      	pop	{r4, pc}

08017a2a <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8017a2a:	2300      	movs	r3, #0
 8017a2c:	f100 0284 	add.w	r2, r0, #132	; 0x84
 8017a30:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8017a34:	30a4      	adds	r0, #164	; 0xa4
 8017a36:	f802 3b01 	strb.w	r3, [r2], #1
 8017a3a:	4282      	cmp	r2, r0
 8017a3c:	d1fb      	bne.n	8017a36 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8017a3e:	4770      	bx	lr

08017a40 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8017a40:	b570      	push	{r4, r5, r6, lr}
 8017a42:	4c0b      	ldr	r4, [pc, #44]	; (8017a70 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8017a44:	4605      	mov	r5, r0
 8017a46:	6820      	ldr	r0, [r4, #0]
 8017a48:	460e      	mov	r6, r1
 8017a4a:	b110      	cbz	r0, 8017a52 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8017a4c:	6803      	ldr	r3, [r0, #0]
 8017a4e:	695b      	ldr	r3, [r3, #20]
 8017a50:	4798      	blx	r3
 8017a52:	1d28      	adds	r0, r5, #4
 8017a54:	f7ff ffe9 	bl	8017a2a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8017a58:	6026      	str	r6, [r4, #0]
 8017a5a:	6833      	ldr	r3, [r6, #0]
 8017a5c:	4630      	mov	r0, r6
 8017a5e:	68db      	ldr	r3, [r3, #12]
 8017a60:	4798      	blx	r3
 8017a62:	682b      	ldr	r3, [r5, #0]
 8017a64:	4628      	mov	r0, r5
 8017a66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017a6c:	4718      	bx	r3
 8017a6e:	bf00      	nop
 8017a70:	20197994 	.word	0x20197994

08017a74 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8017a74:	2300      	movs	r3, #0
 8017a76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a78:	461a      	mov	r2, r3
 8017a7a:	461c      	mov	r4, r3
 8017a7c:	461d      	mov	r5, r3
 8017a7e:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 8017a82:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 8017a86:	459c      	cmp	ip, r3
 8017a88:	dd1a      	ble.n	8017ac0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8017a8a:	18c6      	adds	r6, r0, r3
 8017a8c:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 8017a90:	b16e      	cbz	r6, 8017aae <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8017a92:	429a      	cmp	r2, r3
 8017a94:	d008      	beq.n	8017aa8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8017a96:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8017a9a:	fa1f fe82 	uxth.w	lr, r2
 8017a9e:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8017aa2:	1887      	adds	r7, r0, r2
 8017aa4:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 8017aa8:	3201      	adds	r2, #1
 8017aaa:	3301      	adds	r3, #1
 8017aac:	e7eb      	b.n	8017a86 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8017aae:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 8017ab2:	4299      	cmp	r1, r3
 8017ab4:	bfa8      	it	ge
 8017ab6:	3501      	addge	r5, #1
 8017ab8:	429e      	cmp	r6, r3
 8017aba:	bfc8      	it	gt
 8017abc:	3401      	addgt	r4, #1
 8017abe:	e7f4      	b.n	8017aaa <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8017ac0:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 8017ac4:	1b49      	subs	r1, r1, r5
 8017ac6:	1b1b      	subs	r3, r3, r4
 8017ac8:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 8017acc:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8017ad0:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8017ad4:	4293      	cmp	r3, r2
 8017ad6:	dd03      	ble.n	8017ae0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8017ad8:	3b01      	subs	r3, #1
 8017ada:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8017ade:	e7f7      	b.n	8017ad0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8017ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08017ae4 <_ZN8touchgfx11Application15handleTickEventEv>:
 8017ae4:	b570      	push	{r4, r5, r6, lr}
 8017ae6:	4d16      	ldr	r5, [pc, #88]	; (8017b40 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8017ae8:	4604      	mov	r4, r0
 8017aea:	6828      	ldr	r0, [r5, #0]
 8017aec:	b140      	cbz	r0, 8017b00 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8017aee:	7a03      	ldrb	r3, [r0, #8]
 8017af0:	b933      	cbnz	r3, 8017b00 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8017af2:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8017af6:	6803      	ldr	r3, [r0, #0]
 8017af8:	689b      	ldr	r3, [r3, #8]
 8017afa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017afe:	4718      	bx	r3
 8017b00:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 8017b04:	4e0f      	ldr	r6, [pc, #60]	; (8017b44 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8017b06:	b973      	cbnz	r3, 8017b26 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017b08:	b168      	cbz	r0, 8017b26 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017b0a:	7a03      	ldrb	r3, [r0, #8]
 8017b0c:	b15b      	cbz	r3, 8017b26 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017b0e:	6830      	ldr	r0, [r6, #0]
 8017b10:	b110      	cbz	r0, 8017b18 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8017b12:	6803      	ldr	r3, [r0, #0]
 8017b14:	691b      	ldr	r3, [r3, #16]
 8017b16:	4798      	blx	r3
 8017b18:	6828      	ldr	r0, [r5, #0]
 8017b1a:	6803      	ldr	r3, [r0, #0]
 8017b1c:	68db      	ldr	r3, [r3, #12]
 8017b1e:	4798      	blx	r3
 8017b20:	2301      	movs	r3, #1
 8017b22:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8017b26:	3404      	adds	r4, #4
 8017b28:	4620      	mov	r0, r4
 8017b2a:	f7ff ff5f 	bl	80179ec <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8017b2e:	4620      	mov	r0, r4
 8017b30:	f7ff ffa0 	bl	8017a74 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8017b34:	6830      	ldr	r0, [r6, #0]
 8017b36:	b110      	cbz	r0, 8017b3e <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8017b38:	6803      	ldr	r3, [r0, #0]
 8017b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b3c:	e7dd      	b.n	8017afa <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8017b3e:	bd70      	pop	{r4, r5, r6, pc}
 8017b40:	20197998 	.word	0x20197998
 8017b44:	20197994 	.word	0x20197994

08017b48 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8017b48:	4603      	mov	r3, r0
 8017b4a:	2200      	movs	r2, #0
 8017b4c:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8017b50:	801a      	strh	r2, [r3, #0]
 8017b52:	805a      	strh	r2, [r3, #2]
 8017b54:	809a      	strh	r2, [r3, #4]
 8017b56:	80da      	strh	r2, [r3, #6]
 8017b58:	3308      	adds	r3, #8
 8017b5a:	428b      	cmp	r3, r1
 8017b5c:	d1f8      	bne.n	8017b50 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8017b5e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8017b62:	4770      	bx	lr

08017b64 <_ZN8touchgfx11ApplicationC1Ev>:
 8017b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b66:	4606      	mov	r6, r0
 8017b68:	4604      	mov	r4, r0
 8017b6a:	2500      	movs	r5, #0
 8017b6c:	4b1b      	ldr	r3, [pc, #108]	; (8017bdc <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8017b6e:	22a8      	movs	r2, #168	; 0xa8
 8017b70:	f846 3b04 	str.w	r3, [r6], #4
 8017b74:	2100      	movs	r1, #0
 8017b76:	4630      	mov	r0, r6
 8017b78:	f010 faf8 	bl	802816c <memset>
 8017b7c:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 8017b80:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8017b84:	f7ff ffe0 	bl	8017b48 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017b88:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8017b8c:	f7ff ffdc 	bl	8017b48 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017b90:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8017b94:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8017b98:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 8017b9c:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 8017ba0:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 8017ba4:	490e      	ldr	r1, [pc, #56]	; (8017be0 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8017ba6:	480f      	ldr	r0, [pc, #60]	; (8017be4 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8017ba8:	f002 fc86 	bl	801a4b8 <CRC_Lock>
 8017bac:	4f0e      	ldr	r7, [pc, #56]	; (8017be8 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8017bae:	4b0f      	ldr	r3, [pc, #60]	; (8017bec <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8017bb0:	b158      	cbz	r0, 8017bca <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8017bb2:	801d      	strh	r5, [r3, #0]
 8017bb4:	2300      	movs	r3, #0
 8017bb6:	4a0e      	ldr	r2, [pc, #56]	; (8017bf0 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8017bb8:	4630      	mov	r0, r6
 8017bba:	6013      	str	r3, [r2, #0]
 8017bbc:	4a0d      	ldr	r2, [pc, #52]	; (8017bf4 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8017bbe:	603b      	str	r3, [r7, #0]
 8017bc0:	6013      	str	r3, [r2, #0]
 8017bc2:	f7ff ff32 	bl	8017a2a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8017bc6:	4620      	mov	r0, r4
 8017bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017bca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017bce:	2002      	movs	r0, #2
 8017bd0:	801a      	strh	r2, [r3, #0]
 8017bd2:	6038      	str	r0, [r7, #0]
 8017bd4:	f001 fa28 	bl	8019028 <_ZN8touchgfx6Screen4drawEv>
 8017bd8:	e7ec      	b.n	8017bb4 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8017bda:	bf00      	nop
 8017bdc:	0802a9d8 	.word	0x0802a9d8
 8017be0:	b5e8b5cd 	.word	0xb5e8b5cd
 8017be4:	f407a5c2 	.word	0xf407a5c2
 8017be8:	20197994 	.word	0x20197994
 8017bec:	20000058 	.word	0x20000058
 8017bf0:	201979a4 	.word	0x201979a4
 8017bf4:	20197998 	.word	0x20197998

08017bf8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8017bf8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8017bfc:	b510      	push	{r4, lr}
 8017bfe:	3b01      	subs	r3, #1
 8017c00:	b29b      	uxth	r3, r3
 8017c02:	428b      	cmp	r3, r1
 8017c04:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8017c08:	d908      	bls.n	8017c1c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8017c0a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8017c0e:	681a      	ldr	r2, [r3, #0]
 8017c10:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8017c14:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8017c18:	685a      	ldr	r2, [r3, #4]
 8017c1a:	6062      	str	r2, [r4, #4]
 8017c1c:	bd10      	pop	{r4, pc}
	...

08017c20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8017c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c24:	4b8f      	ldr	r3, [pc, #572]	; (8017e64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8017c26:	b08f      	sub	sp, #60	; 0x3c
 8017c28:	ac0a      	add	r4, sp, #40	; 0x28
 8017c2a:	e884 0006 	stmia.w	r4, {r1, r2}
 8017c2e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017c32:	4b8d      	ldr	r3, [pc, #564]	; (8017e68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8017c34:	4683      	mov	fp, r0
 8017c36:	f9b3 1000 	ldrsh.w	r1, [r3]
 8017c3a:	4620      	mov	r0, r4
 8017c3c:	f7ff fe13 	bl	8017866 <_ZN8touchgfx4Rect10restrictToEss>
 8017c40:	4620      	mov	r0, r4
 8017c42:	f7fd fe8a 	bl	801595a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017c46:	2800      	cmp	r0, #0
 8017c48:	d16a      	bne.n	8017d20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8017c4a:	9403      	str	r4, [sp, #12]
 8017c4c:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 8017c50:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8017c54:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8017c58:	35a4      	adds	r5, #164	; 0xa4
 8017c5a:	9301      	str	r3, [sp, #4]
 8017c5c:	b15c      	cbz	r4, 8017c76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8017c5e:	4629      	mov	r1, r5
 8017c60:	9803      	ldr	r0, [sp, #12]
 8017c62:	f7ff fe51 	bl	8017908 <_ZNK8touchgfx4Rect8includesERKS0_>
 8017c66:	3c01      	subs	r4, #1
 8017c68:	b118      	cbz	r0, 8017c72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8017c6a:	b2a1      	uxth	r1, r4
 8017c6c:	9801      	ldr	r0, [sp, #4]
 8017c6e:	f7ff ffc3 	bl	8017bf8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017c72:	3d08      	subs	r5, #8
 8017c74:	e7f2      	b.n	8017c5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8017c76:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
 8017c7a:	f108 33ff 	add.w	r3, r8, #4294967295
 8017c7e:	9302      	str	r3, [sp, #8]
 8017c80:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8017c84:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8017c88:	f8cd 8010 	str.w	r8, [sp, #16]
 8017c8c:	9306      	str	r3, [sp, #24]
 8017c8e:	445c      	add	r4, fp
 8017c90:	2500      	movs	r5, #0
 8017c92:	4626      	mov	r6, r4
 8017c94:	462f      	mov	r7, r5
 8017c96:	f8cd 8014 	str.w	r8, [sp, #20]
 8017c9a:	9b05      	ldr	r3, [sp, #20]
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d073      	beq.n	8017d88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8017ca0:	9903      	ldr	r1, [sp, #12]
 8017ca2:	4630      	mov	r0, r6
 8017ca4:	f7ff fdbd 	bl	8017822 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017ca8:	b350      	cbz	r0, 8017d00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8017caa:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8017cae:	f9b6 c000 	ldrsh.w	ip, [r6]
 8017cb2:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 8017cb6:	45e6      	cmp	lr, ip
 8017cb8:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8017cbc:	db33      	blt.n	8017d26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8017cbe:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8017cc2:	88b3      	ldrh	r3, [r6, #4]
 8017cc4:	4472      	add	r2, lr
 8017cc6:	4463      	add	r3, ip
 8017cc8:	b212      	sxth	r2, r2
 8017cca:	b21b      	sxth	r3, r3
 8017ccc:	429a      	cmp	r2, r3
 8017cce:	dc2a      	bgt.n	8017d26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8017cd0:	88f3      	ldrh	r3, [r6, #6]
 8017cd2:	fa1f f289 	uxth.w	r2, r9
 8017cd6:	4413      	add	r3, r2
 8017cd8:	b29b      	uxth	r3, r3
 8017cda:	45ca      	cmp	sl, r9
 8017cdc:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8017ce0:	fa0f fe83 	sxth.w	lr, r3
 8017ce4:	fa1f fc8a 	uxth.w	ip, sl
 8017ce8:	db0f      	blt.n	8017d0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8017cea:	eba3 030c 	sub.w	r3, r3, ip
 8017cee:	1ac9      	subs	r1, r1, r3
 8017cf0:	b209      	sxth	r1, r1
 8017cf2:	2900      	cmp	r1, #0
 8017cf4:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8017cf8:	dd12      	ble.n	8017d20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8017cfa:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8017cfe:	4605      	mov	r5, r0
 8017d00:	9b05      	ldr	r3, [sp, #20]
 8017d02:	3e08      	subs	r6, #8
 8017d04:	3b01      	subs	r3, #1
 8017d06:	9305      	str	r3, [sp, #20]
 8017d08:	e7c7      	b.n	8017c9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8017d0a:	4461      	add	r1, ip
 8017d0c:	b209      	sxth	r1, r1
 8017d0e:	4571      	cmp	r1, lr
 8017d10:	dc38      	bgt.n	8017d84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8017d12:	eba2 020c 	sub.w	r2, r2, ip
 8017d16:	b212      	sxth	r2, r2
 8017d18:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8017d1c:	2a00      	cmp	r2, #0
 8017d1e:	dcee      	bgt.n	8017cfe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8017d20:	b00f      	add	sp, #60	; 0x3c
 8017d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d26:	45ca      	cmp	sl, r9
 8017d28:	db2c      	blt.n	8017d84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8017d2a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8017d2e:	449a      	add	sl, r3
 8017d30:	88f3      	ldrh	r3, [r6, #6]
 8017d32:	fa0f fa8a 	sxth.w	sl, sl
 8017d36:	4499      	add	r9, r3
 8017d38:	fa0f f989 	sxth.w	r9, r9
 8017d3c:	45ca      	cmp	sl, r9
 8017d3e:	dc21      	bgt.n	8017d84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8017d40:	88b3      	ldrh	r3, [r6, #4]
 8017d42:	fa1f f28c 	uxth.w	r2, ip
 8017d46:	4413      	add	r3, r2
 8017d48:	b29b      	uxth	r3, r3
 8017d4a:	45e6      	cmp	lr, ip
 8017d4c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8017d50:	fa1f f98e 	uxth.w	r9, lr
 8017d54:	fa0f fa83 	sxth.w	sl, r3
 8017d58:	db0a      	blt.n	8017d70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8017d5a:	eba3 0309 	sub.w	r3, r3, r9
 8017d5e:	1ac9      	subs	r1, r1, r3
 8017d60:	b209      	sxth	r1, r1
 8017d62:	2900      	cmp	r1, #0
 8017d64:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8017d68:	ddda      	ble.n	8017d20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8017d6a:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8017d6e:	e7c6      	b.n	8017cfe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8017d70:	4449      	add	r1, r9
 8017d72:	b209      	sxth	r1, r1
 8017d74:	4551      	cmp	r1, sl
 8017d76:	dc05      	bgt.n	8017d84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8017d78:	eba2 0209 	sub.w	r2, r2, r9
 8017d7c:	b212      	sxth	r2, r2
 8017d7e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8017d82:	e7cb      	b.n	8017d1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8017d84:	4607      	mov	r7, r0
 8017d86:	e7bb      	b.n	8017d00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8017d88:	2d00      	cmp	r5, #0
 8017d8a:	d181      	bne.n	8017c90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8017d8c:	2f00      	cmp	r7, #0
 8017d8e:	f000 81de 	beq.w	801814e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 8017d92:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8017d96:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8017d9a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8017d9e:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 8017da2:	b2b9      	uxth	r1, r7
 8017da4:	b2b3      	uxth	r3, r6
 8017da6:	441a      	add	r2, r3
 8017da8:	448a      	add	sl, r1
 8017daa:	b292      	uxth	r2, r2
 8017dac:	fa1f fa8a 	uxth.w	sl, sl
 8017db0:	fa0f f882 	sxth.w	r8, r2
 8017db4:	9105      	str	r1, [sp, #20]
 8017db6:	fa0f f98a 	sxth.w	r9, sl
 8017dba:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8017dbe:	9b04      	ldr	r3, [sp, #16]
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d053      	beq.n	8017e6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8017dc4:	9903      	ldr	r1, [sp, #12]
 8017dc6:	4620      	mov	r0, r4
 8017dc8:	f7ff fd2b 	bl	8017822 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017dcc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8017dd0:	b1c0      	cbz	r0, 8017e04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8017dd2:	f9b4 e000 	ldrsh.w	lr, [r4]
 8017dd6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017dda:	4576      	cmp	r6, lr
 8017ddc:	dc23      	bgt.n	8017e26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8017dde:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8017de2:	44f4      	add	ip, lr
 8017de4:	fa0f fc8c 	sxth.w	ip, ip
 8017de8:	45e0      	cmp	r8, ip
 8017dea:	db1c      	blt.n	8017e26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8017dec:	428f      	cmp	r7, r1
 8017dee:	fa1f fc81 	uxth.w	ip, r1
 8017df2:	88e1      	ldrh	r1, [r4, #6]
 8017df4:	dc0d      	bgt.n	8017e12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8017df6:	ebaa 0c0c 	sub.w	ip, sl, ip
 8017dfa:	eba1 010c 	sub.w	r1, r1, ip
 8017dfe:	f8a4 9002 	strh.w	r9, [r4, #2]
 8017e02:	80e1      	strh	r1, [r4, #6]
 8017e04:	4628      	mov	r0, r5
 8017e06:	9904      	ldr	r1, [sp, #16]
 8017e08:	3c08      	subs	r4, #8
 8017e0a:	3901      	subs	r1, #1
 8017e0c:	9104      	str	r1, [sp, #16]
 8017e0e:	4605      	mov	r5, r0
 8017e10:	e7d3      	b.n	8017dba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 8017e12:	4461      	add	r1, ip
 8017e14:	b209      	sxth	r1, r1
 8017e16:	4549      	cmp	r1, r9
 8017e18:	dcf5      	bgt.n	8017e06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8017e1a:	9905      	ldr	r1, [sp, #20]
 8017e1c:	eba1 0c0c 	sub.w	ip, r1, ip
 8017e20:	f8a4 c006 	strh.w	ip, [r4, #6]
 8017e24:	e7ee      	b.n	8017e04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8017e26:	428f      	cmp	r7, r1
 8017e28:	dced      	bgt.n	8017e06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8017e2a:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8017e2e:	4461      	add	r1, ip
 8017e30:	b209      	sxth	r1, r1
 8017e32:	4589      	cmp	r9, r1
 8017e34:	dbe7      	blt.n	8017e06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8017e36:	4576      	cmp	r6, lr
 8017e38:	fa1f fc8e 	uxth.w	ip, lr
 8017e3c:	88a1      	ldrh	r1, [r4, #4]
 8017e3e:	dc07      	bgt.n	8017e50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8017e40:	eba2 0c0c 	sub.w	ip, r2, ip
 8017e44:	eba1 010c 	sub.w	r1, r1, ip
 8017e48:	f8a4 8000 	strh.w	r8, [r4]
 8017e4c:	80a1      	strh	r1, [r4, #4]
 8017e4e:	e7d9      	b.n	8017e04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8017e50:	4461      	add	r1, ip
 8017e52:	b209      	sxth	r1, r1
 8017e54:	4588      	cmp	r8, r1
 8017e56:	dbd6      	blt.n	8017e06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8017e58:	eba3 0c0c 	sub.w	ip, r3, ip
 8017e5c:	f8a4 c004 	strh.w	ip, [r4, #4]
 8017e60:	e7d0      	b.n	8017e04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8017e62:	bf00      	nop
 8017e64:	2019794e 	.word	0x2019794e
 8017e68:	2019794c 	.word	0x2019794c
 8017e6c:	2d00      	cmp	r5, #0
 8017e6e:	f000 816e 	beq.w	801814e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 8017e72:	9b06      	ldr	r3, [sp, #24]
 8017e74:	445b      	add	r3, fp
 8017e76:	461c      	mov	r4, r3
 8017e78:	9b02      	ldr	r3, [sp, #8]
 8017e7a:	3301      	adds	r3, #1
 8017e7c:	f000 8167 	beq.w	801814e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 8017e80:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 8017e84:	4629      	mov	r1, r5
 8017e86:	9803      	ldr	r0, [sp, #12]
 8017e88:	f7ff fd3e 	bl	8017908 <_ZNK8touchgfx4Rect8includesERKS0_>
 8017e8c:	b120      	cbz	r0, 8017e98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8017e8e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8017e92:	9801      	ldr	r0, [sp, #4]
 8017e94:	f7ff feb0 	bl	8017bf8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017e98:	9903      	ldr	r1, [sp, #12]
 8017e9a:	4628      	mov	r0, r5
 8017e9c:	f7ff fcc1 	bl	8017822 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017ea0:	2800      	cmp	r0, #0
 8017ea2:	f000 809c 	beq.w	8017fde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8017ea6:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 8017eaa:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8017eae:	fa1f f189 	uxth.w	r1, r9
 8017eb2:	eb01 0c03 	add.w	ip, r1, r3
 8017eb6:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8017eba:	fa1f fa8c 	uxth.w	sl, ip
 8017ebe:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8017ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8017ec4:	b283      	uxth	r3, r0
 8017ec6:	eb03 050c 	add.w	r5, r3, ip
 8017eca:	b2ad      	uxth	r5, r5
 8017ecc:	9505      	str	r5, [sp, #20]
 8017ece:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8017ed2:	4548      	cmp	r0, r9
 8017ed4:	9504      	str	r5, [sp, #16]
 8017ed6:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8017eda:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 8017ede:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 8017ee2:	f340 8099 	ble.w	8018018 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8017ee6:	1a5b      	subs	r3, r3, r1
 8017ee8:	b29b      	uxth	r3, r3
 8017eea:	4596      	cmp	lr, r2
 8017eec:	fa0f f08a 	sxth.w	r0, sl
 8017ef0:	b21e      	sxth	r6, r3
 8017ef2:	dd2e      	ble.n	8017f52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8017ef4:	9f02      	ldr	r7, [sp, #8]
 8017ef6:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8017efa:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8017efe:	9f04      	ldr	r7, [sp, #16]
 8017f00:	fa1f fe8e 	uxth.w	lr, lr
 8017f04:	1a3f      	subs	r7, r7, r0
 8017f06:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 8017f0a:	b292      	uxth	r2, r2
 8017f0c:	ebae 0102 	sub.w	r1, lr, r2
 8017f10:	44a6      	add	lr, r4
 8017f12:	4402      	add	r2, r0
 8017f14:	b289      	uxth	r1, r1
 8017f16:	fa0f fe8e 	sxth.w	lr, lr
 8017f1a:	b212      	sxth	r2, r2
 8017f1c:	b20d      	sxth	r5, r1
 8017f1e:	ebae 0202 	sub.w	r2, lr, r2
 8017f22:	436f      	muls	r7, r5
 8017f24:	4372      	muls	r2, r6
 8017f26:	4297      	cmp	r7, r2
 8017f28:	db09      	blt.n	8017f3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8017f2a:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 8017f2e:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 8017f32:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8017f36:	449c      	add	ip, r3
 8017f38:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8017f3c:	e686      	b.n	8017c4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017f3e:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 8017f42:	4421      	add	r1, r4
 8017f44:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 8017f48:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8017f4c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8017f50:	e67c      	b.n	8017c4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017f52:	9f04      	ldr	r7, [sp, #16]
 8017f54:	42b8      	cmp	r0, r7
 8017f56:	da27      	bge.n	8017fa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8017f58:	9902      	ldr	r1, [sp, #8]
 8017f5a:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 8017f5e:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8017f62:	eb05 010e 	add.w	r1, r5, lr
 8017f66:	fa1f f881 	uxth.w	r8, r1
 8017f6a:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 8017f6e:	fa0f f988 	sxth.w	r9, r8
 8017f72:	4411      	add	r1, r2
 8017f74:	eba1 0108 	sub.w	r1, r1, r8
 8017f78:	b289      	uxth	r1, r1
 8017f7a:	fa0f f881 	sxth.w	r8, r1
 8017f7e:	eba2 020e 	sub.w	r2, r2, lr
 8017f82:	1a3f      	subs	r7, r7, r0
 8017f84:	4372      	muls	r2, r6
 8017f86:	fb08 f707 	mul.w	r7, r8, r7
 8017f8a:	42ba      	cmp	r2, r7
 8017f8c:	dc06      	bgt.n	8017f9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8017f8e:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 8017f92:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 8017f96:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 8017f9a:	e7ca      	b.n	8017f32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8017f9c:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 8017fa0:	4429      	add	r1, r5
 8017fa2:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8017fa6:	e651      	b.n	8017c4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017fa8:	9805      	ldr	r0, [sp, #20]
 8017faa:	2d06      	cmp	r5, #6
 8017fac:	ebaa 0000 	sub.w	r0, sl, r0
 8017fb0:	b280      	uxth	r0, r0
 8017fb2:	fa0f fe80 	sxth.w	lr, r0
 8017fb6:	d817      	bhi.n	8017fe8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8017fb8:	9b04      	ldr	r3, [sp, #16]
 8017fba:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 8017fbe:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8017fc2:	1c6b      	adds	r3, r5, #1
 8017fc4:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 8017fc8:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8017fcc:	9b01      	ldr	r3, [sp, #4]
 8017fce:	9801      	ldr	r0, [sp, #4]
 8017fd0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8017fd4:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8017fd8:	805a      	strh	r2, [r3, #2]
 8017fda:	809e      	strh	r6, [r3, #4]
 8017fdc:	80d9      	strh	r1, [r3, #6]
 8017fde:	9b02      	ldr	r3, [sp, #8]
 8017fe0:	3c08      	subs	r4, #8
 8017fe2:	3b01      	subs	r3, #1
 8017fe4:	9302      	str	r3, [sp, #8]
 8017fe6:	e747      	b.n	8017e78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8017fe8:	9a02      	ldr	r2, [sp, #8]
 8017fea:	45b6      	cmp	lr, r6
 8017fec:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8017ff0:	db0d      	blt.n	801800e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8017ff2:	449c      	add	ip, r3
 8017ff4:	fa1f fc8c 	uxth.w	ip, ip
 8017ff8:	445a      	add	r2, fp
 8017ffa:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8017ffe:	448c      	add	ip, r1
 8018000:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8018004:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 8018008:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 801800c:	e61e      	b.n	8017c4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801800e:	445a      	add	r2, fp
 8018010:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 8018014:	4484      	add	ip, r0
 8018016:	e78f      	b.n	8017f38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8018018:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801801c:	fa1f f18e 	uxth.w	r1, lr
 8018020:	eb01 0806 	add.w	r8, r1, r6
 8018024:	b293      	uxth	r3, r2
 8018026:	fa1f f888 	uxth.w	r8, r8
 801802a:	9306      	str	r3, [sp, #24]
 801802c:	fa0f f388 	sxth.w	r3, r8
 8018030:	9307      	str	r3, [sp, #28]
 8018032:	9f06      	ldr	r7, [sp, #24]
 8018034:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 8018038:	4596      	cmp	lr, r2
 801803a:	443b      	add	r3, r7
 801803c:	b29b      	uxth	r3, r3
 801803e:	9308      	str	r3, [sp, #32]
 8018040:	da24      	bge.n	801808c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8018042:	9905      	ldr	r1, [sp, #20]
 8018044:	eba3 0308 	sub.w	r3, r3, r8
 8018048:	ebaa 0401 	sub.w	r4, sl, r1
 801804c:	b2a4      	uxth	r4, r4
 801804e:	b29b      	uxth	r3, r3
 8018050:	b225      	sxth	r5, r4
 8018052:	b219      	sxth	r1, r3
 8018054:	eba2 020e 	sub.w	r2, r2, lr
 8018058:	eba9 0000 	sub.w	r0, r9, r0
 801805c:	436a      	muls	r2, r5
 801805e:	4348      	muls	r0, r1
 8018060:	4282      	cmp	r2, r0
 8018062:	9a02      	ldr	r2, [sp, #8]
 8018064:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8018068:	445a      	add	r2, fp
 801806a:	dc06      	bgt.n	801807a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 801806c:	9b07      	ldr	r3, [sp, #28]
 801806e:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 8018072:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 8018076:	44a4      	add	ip, r4
 8018078:	e75e      	b.n	8017f38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801807a:	9904      	ldr	r1, [sp, #16]
 801807c:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 8018080:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 8018084:	4433      	add	r3, r6
 8018086:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801808a:	e5df      	b.n	8017c4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801808c:	9f06      	ldr	r7, [sp, #24]
 801808e:	9b04      	ldr	r3, [sp, #16]
 8018090:	1bc9      	subs	r1, r1, r7
 8018092:	fa0f f78a 	sxth.w	r7, sl
 8018096:	b289      	uxth	r1, r1
 8018098:	429f      	cmp	r7, r3
 801809a:	fa0f fe81 	sxth.w	lr, r1
 801809e:	dd24      	ble.n	80180ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4ca>
 80180a0:	9a05      	ldr	r2, [sp, #20]
 80180a2:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80180a6:	ebaa 0202 	sub.w	r2, sl, r2
 80180aa:	9d07      	ldr	r5, [sp, #28]
 80180ac:	b292      	uxth	r2, r2
 80180ae:	eba5 0a03 	sub.w	sl, r5, r3
 80180b2:	b214      	sxth	r4, r2
 80180b4:	eba9 0000 	sub.w	r0, r9, r0
 80180b8:	fb0e f000 	mul.w	r0, lr, r0
 80180bc:	fb04 fa0a 	mul.w	sl, r4, sl
 80180c0:	9b02      	ldr	r3, [sp, #8]
 80180c2:	4550      	cmp	r0, sl
 80180c4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80180c8:	445b      	add	r3, fp
 80180ca:	db03      	blt.n	80180d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b4>
 80180cc:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 80180d0:	4494      	add	ip, r2
 80180d2:	e731      	b.n	8017f38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80180d4:	9a04      	ldr	r2, [sp, #16]
 80180d6:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 80180da:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 80180de:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 80180e2:	4431      	add	r1, r6
 80180e4:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80180e8:	e75b      	b.n	8017fa2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 80180ea:	9b08      	ldr	r3, [sp, #32]
 80180ec:	2d06      	cmp	r5, #6
 80180ee:	eba3 0308 	sub.w	r3, r3, r8
 80180f2:	b29b      	uxth	r3, r3
 80180f4:	b218      	sxth	r0, r3
 80180f6:	d813      	bhi.n	8018120 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x500>
 80180f8:	9b07      	ldr	r3, [sp, #28]
 80180fa:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 80180fe:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 8018102:	1c6b      	adds	r3, r5, #1
 8018104:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8018108:	9b01      	ldr	r3, [sp, #4]
 801810a:	9901      	ldr	r1, [sp, #4]
 801810c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8018110:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8018114:	805a      	strh	r2, [r3, #2]
 8018116:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018118:	f8a3 e006 	strh.w	lr, [r3, #6]
 801811c:	809a      	strh	r2, [r3, #4]
 801811e:	e75e      	b.n	8017fde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8018120:	9c02      	ldr	r4, [sp, #8]
 8018122:	4570      	cmp	r0, lr
 8018124:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8018128:	db0d      	blt.n	8018146 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x526>
 801812a:	4431      	add	r1, r6
 801812c:	9b06      	ldr	r3, [sp, #24]
 801812e:	b289      	uxth	r1, r1
 8018130:	445c      	add	r4, fp
 8018132:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8018136:	4419      	add	r1, r3
 8018138:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801813c:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 8018140:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 8018144:	e582      	b.n	8017c4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018146:	445c      	add	r4, fp
 8018148:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 801814c:	e79a      	b.n	8018084 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801814e:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 8018152:	2e07      	cmp	r6, #7
 8018154:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8018158:	d812      	bhi.n	8018180 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x560>
 801815a:	1c75      	adds	r5, r6, #1
 801815c:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 8018160:	9d01      	ldr	r5, [sp, #4]
 8018162:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8018166:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801816a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801816e:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8018172:	442c      	add	r4, r5
 8018174:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8018178:	8061      	strh	r1, [r4, #2]
 801817a:	80a2      	strh	r2, [r4, #4]
 801817c:	80e3      	strh	r3, [r4, #6]
 801817e:	e5cf      	b.n	8017d20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8018180:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8018184:	f04f 37ff 	mov.w	r7, #4294967295
 8018188:	2500      	movs	r5, #0
 801818a:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801818e:	3e01      	subs	r6, #1
 8018190:	445c      	add	r4, fp
 8018192:	9305      	str	r3, [sp, #20]
 8018194:	1e72      	subs	r2, r6, #1
 8018196:	4691      	mov	r9, r2
 8018198:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801819c:	9302      	str	r3, [sp, #8]
 801819e:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 80181a2:	9304      	str	r3, [sp, #16]
 80181a4:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 80181a8:	f1b9 3fff 	cmp.w	r9, #4294967295
 80181ac:	bf16      	itet	ne
 80181ae:	9905      	ldrne	r1, [sp, #20]
 80181b0:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 80181b4:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 80181b8:	f8be 1006 	ldrh.w	r1, [lr, #6]
 80181bc:	f8be 8004 	ldrh.w	r8, [lr, #4]
 80181c0:	6818      	ldr	r0, [r3, #0]
 80181c2:	fb18 f801 	smulbb	r8, r8, r1
 80181c6:	6859      	ldr	r1, [r3, #4]
 80181c8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80181cc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80181d0:	4671      	mov	r1, lr
 80181d2:	a80c      	add	r0, sp, #48	; 0x30
 80181d4:	9207      	str	r2, [sp, #28]
 80181d6:	9306      	str	r3, [sp, #24]
 80181d8:	f7ff fbbc 	bl	8017954 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80181dc:	f04f 0c08 	mov.w	ip, #8
 80181e0:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 80181e4:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 80181e8:	9b04      	ldr	r3, [sp, #16]
 80181ea:	9a02      	ldr	r2, [sp, #8]
 80181ec:	fb10 f001 	smulbb	r0, r0, r1
 80181f0:	fb02 8803 	mla	r8, r2, r3, r8
 80181f4:	eba0 0108 	sub.w	r1, r0, r8
 80181f8:	fb90 f0fc 	sdiv	r0, r0, ip
 80181fc:	4288      	cmp	r0, r1
 80181fe:	dc20      	bgt.n	8018242 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x622>
 8018200:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8018204:	4551      	cmp	r1, sl
 8018206:	da03      	bge.n	8018210 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
 8018208:	b1d9      	cbz	r1, 8018242 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x622>
 801820a:	468a      	mov	sl, r1
 801820c:	464f      	mov	r7, r9
 801820e:	4635      	mov	r5, r6
 8018210:	f109 39ff 	add.w	r9, r9, #4294967295
 8018214:	f119 0f02 	cmn.w	r9, #2
 8018218:	d1c6      	bne.n	80181a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x588>
 801821a:	4616      	mov	r6, r2
 801821c:	3201      	adds	r2, #1
 801821e:	f1a4 0408 	sub.w	r4, r4, #8
 8018222:	d1b7      	bne.n	8018194 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 8018224:	9b01      	ldr	r3, [sp, #4]
 8018226:	b2ac      	uxth	r4, r5
 8018228:	00ed      	lsls	r5, r5, #3
 801822a:	1958      	adds	r0, r3, r5
 801822c:	1c7b      	adds	r3, r7, #1
 801822e:	d10b      	bne.n	8018248 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x628>
 8018230:	4601      	mov	r1, r0
 8018232:	9803      	ldr	r0, [sp, #12]
 8018234:	f7ff fb8e 	bl	8017954 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018238:	4621      	mov	r1, r4
 801823a:	9801      	ldr	r0, [sp, #4]
 801823c:	f7ff fcdc 	bl	8017bf8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018240:	e504      	b.n	8017c4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018242:	464f      	mov	r7, r9
 8018244:	4635      	mov	r5, r6
 8018246:	e7ed      	b.n	8018224 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x604>
 8018248:	9b01      	ldr	r3, [sp, #4]
 801824a:	00ff      	lsls	r7, r7, #3
 801824c:	19d9      	adds	r1, r3, r7
 801824e:	f7ff fb81 	bl	8017954 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018252:	9b03      	ldr	r3, [sp, #12]
 8018254:	445f      	add	r7, fp
 8018256:	cb03      	ldmia	r3!, {r0, r1}
 8018258:	445d      	add	r5, fp
 801825a:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 801825e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8018262:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8018266:	9b03      	ldr	r3, [sp, #12]
 8018268:	6869      	ldr	r1, [r5, #4]
 801826a:	c303      	stmia	r3!, {r0, r1}
 801826c:	e7e4      	b.n	8018238 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x618>
 801826e:	bf00      	nop

08018270 <_ZN8touchgfx11Application10invalidateEv>:
 8018270:	2100      	movs	r1, #0
 8018272:	4b09      	ldr	r3, [pc, #36]	; (8018298 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8018274:	b082      	sub	sp, #8
 8018276:	f9b3 2000 	ldrsh.w	r2, [r3]
 801827a:	4b08      	ldr	r3, [pc, #32]	; (801829c <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801827c:	9100      	str	r1, [sp, #0]
 801827e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018282:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018286:	f8ad 3006 	strh.w	r3, [sp, #6]
 801828a:	ab02      	add	r3, sp, #8
 801828c:	e913 0006 	ldmdb	r3, {r1, r2}
 8018290:	b002      	add	sp, #8
 8018292:	f7ff bcc5 	b.w	8017c20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018296:	bf00      	nop
 8018298:	2019794c 	.word	0x2019794c
 801829c:	2019794e 	.word	0x2019794e

080182a0 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 80182a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182a4:	f500 7698 	add.w	r6, r0, #304	; 0x130
 80182a8:	b09b      	sub	sp, #108	; 0x6c
 80182aa:	4604      	mov	r4, r0
 80182ac:	4630      	mov	r0, r6
 80182ae:	f7fd fb54 	bl	801595a <_ZNK8touchgfx4Rect7isEmptyEv>
 80182b2:	4605      	mov	r5, r0
 80182b4:	b940      	cbnz	r0, 80182c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 80182b6:	e896 0006 	ldmia.w	r6, {r1, r2}
 80182ba:	4620      	mov	r0, r4
 80182bc:	f7ff fcb0 	bl	8017c20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80182c0:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 80182c4:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 80182c8:	4bc9      	ldr	r3, [pc, #804]	; (80185f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 80182ca:	681b      	ldr	r3, [r3, #0]
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d03e      	beq.n	801834e <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 80182d0:	4dc8      	ldr	r5, [pc, #800]	; (80185f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 80182d2:	4628      	mov	r0, r5
 80182d4:	f7fd fb41 	bl	801595a <_ZNK8touchgfx4Rect7isEmptyEv>
 80182d8:	4606      	mov	r6, r0
 80182da:	2800      	cmp	r0, #0
 80182dc:	d137      	bne.n	801834e <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 80182de:	4628      	mov	r0, r5
 80182e0:	f7ff f9e4 	bl	80176ac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80182e4:	6829      	ldr	r1, [r5, #0]
 80182e6:	686a      	ldr	r2, [r5, #4]
 80182e8:	4620      	mov	r0, r4
 80182ea:	f7ff fc99 	bl	8017c20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80182ee:	802e      	strh	r6, [r5, #0]
 80182f0:	806e      	strh	r6, [r5, #2]
 80182f2:	80ae      	strh	r6, [r5, #4]
 80182f4:	80ee      	strh	r6, [r5, #6]
 80182f6:	ae09      	add	r6, sp, #36	; 0x24
 80182f8:	4630      	mov	r0, r6
 80182fa:	f7ff fc25 	bl	8017b48 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80182fe:	4abe      	ldr	r2, [pc, #760]	; (80185f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8018300:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8018304:	8815      	ldrh	r5, [r2, #0]
 8018306:	9202      	str	r2, [sp, #8]
 8018308:	462b      	mov	r3, r5
 801830a:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801830e:	429f      	cmp	r7, r3
 8018310:	d924      	bls.n	801835c <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 8018312:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8018316:	2907      	cmp	r1, #7
 8018318:	d816      	bhi.n	8018348 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 801831a:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801831e:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 8018322:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8018326:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801832a:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801832e:	1c4a      	adds	r2, r1, #1
 8018330:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8018334:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 8018338:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 801833c:	f8a2 9002 	strh.w	r9, [r2, #2]
 8018340:	f8a2 e004 	strh.w	lr, [r2, #4]
 8018344:	f8a2 c006 	strh.w	ip, [r2, #6]
 8018348:	3301      	adds	r3, #1
 801834a:	b29b      	uxth	r3, r3
 801834c:	e7df      	b.n	801830e <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 801834e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8018352:	2b00      	cmp	r3, #0
 8018354:	d1cf      	bne.n	80182f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 8018356:	b01b      	add	sp, #108	; 0x6c
 8018358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801835c:	462f      	mov	r7, r5
 801835e:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 8018362:	42bb      	cmp	r3, r7
 8018364:	d90b      	bls.n	801837e <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 8018366:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 801836a:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 801836e:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 8018372:	4620      	mov	r0, r4
 8018374:	3701      	adds	r7, #1
 8018376:	f7ff fc53 	bl	8017c20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801837a:	b2bf      	uxth	r7, r7
 801837c:	e7ef      	b.n	801835e <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 801837e:	4a9f      	ldr	r2, [pc, #636]	; (80185fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8018380:	6813      	ldr	r3, [r2, #0]
 8018382:	4690      	mov	r8, r2
 8018384:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8018388:	2b01      	cmp	r3, #1
 801838a:	f040 80e6 	bne.w	801855a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ba>
 801838e:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8018392:	4629      	mov	r1, r5
 8018394:	2500      	movs	r5, #0
 8018396:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801839a:	33ae      	adds	r3, #174	; 0xae
 801839c:	428f      	cmp	r7, r1
 801839e:	f103 0308 	add.w	r3, r3, #8
 80183a2:	dd0a      	ble.n	80183ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 80183a4:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80183a8:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 80183ac:	3101      	adds	r1, #1
 80183ae:	4402      	add	r2, r0
 80183b0:	b212      	sxth	r2, r2
 80183b2:	4295      	cmp	r5, r2
 80183b4:	bfb8      	it	lt
 80183b6:	4615      	movlt	r5, r2
 80183b8:	e7f0      	b.n	801839c <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 80183ba:	4b91      	ldr	r3, [pc, #580]	; (8018600 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 80183bc:	f8df b23c 	ldr.w	fp, [pc, #572]	; 80185fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>
 80183c0:	881b      	ldrh	r3, [r3, #0]
 80183c2:	46d8      	mov	r8, fp
 80183c4:	2b0f      	cmp	r3, #15
 80183c6:	bf88      	it	hi
 80183c8:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 80183cc:	f04f 0300 	mov.w	r3, #0
 80183d0:	bf98      	it	ls
 80183d2:	f04f 0a01 	movls.w	sl, #1
 80183d6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80183da:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 80183de:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80183e2:	4438      	add	r0, r7
 80183e4:	b207      	sxth	r7, r0
 80183e6:	f8db 0000 	ldr.w	r0, [fp]
 80183ea:	42bd      	cmp	r5, r7
 80183ec:	6803      	ldr	r3, [r0, #0]
 80183ee:	f340 8084 	ble.w	80184fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80183f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80183f6:	4798      	blx	r3
 80183f8:	eb07 030a 	add.w	r3, r7, sl
 80183fc:	4298      	cmp	r0, r3
 80183fe:	da07      	bge.n	8018410 <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 8018400:	4285      	cmp	r5, r0
 8018402:	dd05      	ble.n	8018410 <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 8018404:	4287      	cmp	r7, r0
 8018406:	dd6d      	ble.n	80184e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 8018408:	2f00      	cmp	r7, #0
 801840a:	dd6b      	ble.n	80184e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 801840c:	4628      	mov	r0, r5
 801840e:	e004      	b.n	801841a <_ZN8touchgfx11Application15drawCachedAreasEv+0x17a>
 8018410:	4287      	cmp	r7, r0
 8018412:	dcfb      	bgt.n	801840c <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8018414:	42a8      	cmp	r0, r5
 8018416:	bfa8      	it	ge
 8018418:	4628      	movge	r0, r5
 801841a:	2200      	movs	r2, #0
 801841c:	4b79      	ldr	r3, [pc, #484]	; (8018604 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 801841e:	1bc0      	subs	r0, r0, r7
 8018420:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018424:	f8ad 7016 	strh.w	r7, [sp, #22]
 8018428:	f8ad 3018 	strh.w	r3, [sp, #24]
 801842c:	9b02      	ldr	r3, [sp, #8]
 801842e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018432:	881f      	ldrh	r7, [r3, #0]
 8018434:	f8ad 001a 	strh.w	r0, [sp, #26]
 8018438:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801843c:	42bb      	cmp	r3, r7
 801843e:	d9cc      	bls.n	80183da <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 8018440:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8018444:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8018448:	ab07      	add	r3, sp, #28
 801844a:	6851      	ldr	r1, [r2, #4]
 801844c:	c303      	stmia	r3!, {r0, r1}
 801844e:	a905      	add	r1, sp, #20
 8018450:	a807      	add	r0, sp, #28
 8018452:	f7ff f9e6 	bl	8017822 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018456:	2800      	cmp	r0, #0
 8018458:	d04c      	beq.n	80184f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 801845a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801845e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8018462:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 8018466:	4686      	mov	lr, r0
 8018468:	4290      	cmp	r0, r2
 801846a:	4448      	add	r0, r9
 801846c:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 8018470:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8018474:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8018478:	bfb8      	it	lt
 801847a:	4696      	movlt	lr, r2
 801847c:	444a      	add	r2, r9
 801847e:	4299      	cmp	r1, r3
 8018480:	b280      	uxth	r0, r0
 8018482:	b292      	uxth	r2, r2
 8018484:	468c      	mov	ip, r1
 8018486:	9303      	str	r3, [sp, #12]
 8018488:	bfb8      	it	lt
 801848a:	469c      	movlt	ip, r3
 801848c:	fa0f f982 	sxth.w	r9, r2
 8018490:	b203      	sxth	r3, r0
 8018492:	454b      	cmp	r3, r9
 8018494:	bfb8      	it	lt
 8018496:	4602      	movlt	r2, r0
 8018498:	eba2 020e 	sub.w	r2, r2, lr
 801849c:	f8ad 2020 	strh.w	r2, [sp, #32]
 80184a0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80184a4:	9b03      	ldr	r3, [sp, #12]
 80184a6:	4411      	add	r1, r2
 80184a8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80184ac:	b289      	uxth	r1, r1
 80184ae:	4413      	add	r3, r2
 80184b0:	b29b      	uxth	r3, r3
 80184b2:	b208      	sxth	r0, r1
 80184b4:	b21a      	sxth	r2, r3
 80184b6:	4290      	cmp	r0, r2
 80184b8:	bfb8      	it	lt
 80184ba:	460b      	movlt	r3, r1
 80184bc:	eba3 030c 	sub.w	r3, r3, ip
 80184c0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80184c4:	f8ad e01c 	strh.w	lr, [sp, #28]
 80184c8:	f8ad c01e 	strh.w	ip, [sp, #30]
 80184cc:	a807      	add	r0, sp, #28
 80184ce:	f7fd fa44 	bl	801595a <_ZNK8touchgfx4Rect7isEmptyEv>
 80184d2:	b920      	cbnz	r0, 80184de <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 80184d4:	6823      	ldr	r3, [r4, #0]
 80184d6:	a907      	add	r1, sp, #28
 80184d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80184da:	4620      	mov	r0, r4
 80184dc:	4798      	blx	r3
 80184de:	3701      	adds	r7, #1
 80184e0:	b2bf      	uxth	r7, r7
 80184e2:	e7a9      	b.n	8018438 <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 80184e4:	f8d8 0000 	ldr.w	r0, [r8]
 80184e8:	2101      	movs	r1, #1
 80184ea:	6803      	ldr	r3, [r0, #0]
 80184ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80184f0:	4798      	blx	r3
 80184f2:	e772      	b.n	80183da <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 80184f4:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80184f8:	e7e8      	b.n	80184cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 80184fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80184fc:	4798      	blx	r3
 80184fe:	4b42      	ldr	r3, [pc, #264]	; (8018608 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 8018500:	781b      	ldrb	r3, [r3, #0]
 8018502:	2b00      	cmp	r3, #0
 8018504:	f43f af27 	beq.w	8018356 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8018508:	2300      	movs	r3, #0
 801850a:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 801850e:	9b02      	ldr	r3, [sp, #8]
 8018510:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8018514:	881b      	ldrh	r3, [r3, #0]
 8018516:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801851a:	429d      	cmp	r5, r3
 801851c:	f67f af1b 	bls.w	8018356 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8018520:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 8018524:	2907      	cmp	r1, #7
 8018526:	d815      	bhi.n	8018554 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b4>
 8018528:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 801852c:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8018530:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8018534:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8018538:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 801853c:	1c4a      	adds	r2, r1, #1
 801853e:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 8018542:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8018546:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 801854a:	f8a2 e002 	strh.w	lr, [r2, #2]
 801854e:	f8a2 c004 	strh.w	ip, [r2, #4]
 8018552:	80d7      	strh	r7, [r2, #6]
 8018554:	3301      	adds	r3, #1
 8018556:	b29b      	uxth	r3, r3
 8018558:	e7df      	b.n	801851a <_ZN8touchgfx11Application15drawCachedAreasEv+0x27a>
 801855a:	2b02      	cmp	r3, #2
 801855c:	f040 8136 	bne.w	80187cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 8018560:	4b2a      	ldr	r3, [pc, #168]	; (801860c <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>)
 8018562:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 8018566:	781b      	ldrb	r3, [r3, #0]
 8018568:	2b01      	cmp	r3, #1
 801856a:	f000 809c 	beq.w	80186a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 801856e:	9b02      	ldr	r3, [sp, #8]
 8018570:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
 8018574:	f8b3 b000 	ldrh.w	fp, [r3]
 8018578:	f10b 0b01 	add.w	fp, fp, #1
 801857c:	fa1f fb8b 	uxth.w	fp, fp
 8018580:	2a00      	cmp	r2, #0
 8018582:	d0bc      	beq.n	80184fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 8018584:	4659      	mov	r1, fp
 8018586:	f04f 0800 	mov.w	r8, #0
 801858a:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
 801858e:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8018592:	441d      	add	r5, r3
 8018594:	b22d      	sxth	r5, r5
 8018596:	b28b      	uxth	r3, r1
 8018598:	429a      	cmp	r2, r3
 801859a:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801859e:	f240 80c1 	bls.w	8018724 <_ZN8touchgfx11Application15drawCachedAreasEv+0x484>
 80185a2:	4427      	add	r7, r4
 80185a4:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 80185a8:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 80185ac:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
 80185b0:	4608      	mov	r0, r1
 80185b2:	4563      	cmp	r3, ip
 80185b4:	f340 80a3 	ble.w	80186fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 80185b8:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
 80185bc:	4465      	add	r5, ip
 80185be:	b22d      	sxth	r5, r5
 80185c0:	429d      	cmp	r5, r3
 80185c2:	bfa8      	it	ge
 80185c4:	461d      	movge	r5, r3
 80185c6:	3101      	adds	r1, #1
 80185c8:	4680      	mov	r8, r0
 80185ca:	e7e4      	b.n	8018596 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 80185cc:	d10b      	bne.n	80185e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x346>
 80185ce:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
 80185d2:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
 80185d6:	458c      	cmp	ip, r1
 80185d8:	bfb4      	ite	lt
 80185da:	469c      	movlt	ip, r3
 80185dc:	46bc      	movge	ip, r7
 80185de:	4572      	cmp	r2, lr
 80185e0:	bfb8      	it	lt
 80185e2:	4672      	movlt	r2, lr
 80185e4:	e088      	b.n	80186f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 80185e6:	428a      	cmp	r2, r1
 80185e8:	bfb8      	it	lt
 80185ea:	460a      	movlt	r2, r1
 80185ec:	46bc      	mov	ip, r7
 80185ee:	e083      	b.n	80186f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 80185f0:	20197990 	.word	0x20197990
 80185f4:	2019799c 	.word	0x2019799c
 80185f8:	20000058 	.word	0x20000058
 80185fc:	20197958 	.word	0x20197958
 8018600:	2019794e 	.word	0x2019794e
 8018604:	2019794c 	.word	0x2019794c
 8018608:	20197956 	.word	0x20197956
 801860c:	20197950 	.word	0x20197950
 8018610:	1961      	adds	r1, r4, r5
 8018612:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8018616:	ab07      	add	r3, sp, #28
 8018618:	6849      	ldr	r1, [r1, #4]
 801861a:	c303      	stmia	r3!, {r0, r1}
 801861c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8018620:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8018624:	2b13      	cmp	r3, #19
 8018626:	bfd8      	it	le
 8018628:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801862c:	440b      	add	r3, r1
 801862e:	1a9b      	subs	r3, r3, r2
 8018630:	a807      	add	r0, sp, #28
 8018632:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018636:	f8ad 201c 	strh.w	r2, [sp, #28]
 801863a:	f7ff f851 	bl	80176e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801863e:	a807      	add	r0, sp, #28
 8018640:	f7fd f98b 	bl	801595a <_ZNK8touchgfx4Rect7isEmptyEv>
 8018644:	bb78      	cbnz	r0, 80186a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 8018646:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801864a:	f8d8 0000 	ldr.w	r0, [r8]
 801864e:	f1bc 0f14 	cmp.w	ip, #20
 8018652:	bfa8      	it	ge
 8018654:	f04f 0c14 	movge.w	ip, #20
 8018658:	f8d0 e000 	ldr.w	lr, [r0]
 801865c:	fa1f fc8c 	uxth.w	ip, ip
 8018660:	f8cd c000 	str.w	ip, [sp]
 8018664:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 8018668:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801866c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8018670:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8018674:	47d0      	blx	sl
 8018676:	4682      	mov	sl, r0
 8018678:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801867c:	a807      	add	r0, sp, #28
 801867e:	f7ff f815 	bl	80176ac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8018682:	6823      	ldr	r3, [r4, #0]
 8018684:	4620      	mov	r0, r4
 8018686:	4425      	add	r5, r4
 8018688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801868a:	a907      	add	r1, sp, #28
 801868c:	4798      	blx	r3
 801868e:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
 8018692:	eba0 000a 	sub.w	r0, r0, sl
 8018696:	b200      	sxth	r0, r0
 8018698:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 801869c:	b918      	cbnz	r0, 80186a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 801869e:	b2b9      	uxth	r1, r7
 80186a0:	4648      	mov	r0, r9
 80186a2:	f7ff faa9 	bl	8017bf8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80186a6:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 80186aa:	f1bb 0f00 	cmp.w	fp, #0
 80186ae:	f43f af26 	beq.w	80184fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 80186b2:	2700      	movs	r7, #0
 80186b4:	9b02      	ldr	r3, [sp, #8]
 80186b6:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 80186ba:	881b      	ldrh	r3, [r3, #0]
 80186bc:	3301      	adds	r3, #1
 80186be:	b29b      	uxth	r3, r3
 80186c0:	b299      	uxth	r1, r3
 80186c2:	458b      	cmp	fp, r1
 80186c4:	ea4f 05c7 	mov.w	r5, r7, lsl #3
 80186c8:	d9a2      	bls.n	8018610 <_ZN8touchgfx11Application15drawCachedAreasEv+0x370>
 80186ca:	4425      	add	r5, r4
 80186cc:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
 80186d0:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 80186d4:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 80186d8:	4408      	add	r0, r1
 80186da:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
 80186de:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
 80186e2:	b200      	sxth	r0, r0
 80186e4:	4471      	add	r1, lr
 80186e6:	b209      	sxth	r1, r1
 80186e8:	4288      	cmp	r0, r1
 80186ea:	469c      	mov	ip, r3
 80186ec:	f6bf af6e 	bge.w	80185cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x32c>
 80186f0:	4586      	cmp	lr, r0
 80186f2:	4672      	mov	r2, lr
 80186f4:	bfb8      	it	lt
 80186f6:	4602      	movlt	r2, r0
 80186f8:	3301      	adds	r3, #1
 80186fa:	4667      	mov	r7, ip
 80186fc:	e7e0      	b.n	80186c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x420>
 80186fe:	d10c      	bne.n	801871a <_ZN8touchgfx11Application15drawCachedAreasEv+0x47a>
 8018700:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 8018704:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 8018708:	4287      	cmp	r7, r0
 801870a:	bfb4      	ite	lt
 801870c:	4608      	movlt	r0, r1
 801870e:	4640      	movge	r0, r8
 8018710:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
 8018714:	443b      	add	r3, r7
 8018716:	b21b      	sxth	r3, r3
 8018718:	e752      	b.n	80185c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 801871a:	4565      	cmp	r5, ip
 801871c:	bfa8      	it	ge
 801871e:	4665      	movge	r5, ip
 8018720:	4640      	mov	r0, r8
 8018722:	e750      	b.n	80185c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x326>
 8018724:	eb09 0007 	add.w	r0, r9, r7
 8018728:	4427      	add	r7, r4
 801872a:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
 801872e:	9203      	str	r2, [sp, #12]
 8018730:	f1ba 0f13 	cmp.w	sl, #19
 8018734:	bfde      	ittt	le
 8018736:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
 801873a:	4455      	addle	r5, sl
 801873c:	b22d      	sxthle	r5, r5
 801873e:	f7fd f90c 	bl	801595a <_ZNK8touchgfx4Rect7isEmptyEv>
 8018742:	9a03      	ldr	r2, [sp, #12]
 8018744:	2800      	cmp	r0, #0
 8018746:	f47f af1b 	bne.w	8018580 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e0>
 801874a:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 801874e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8018752:	1aad      	subs	r5, r5, r2
 8018754:	2d14      	cmp	r5, #20
 8018756:	bfa8      	it	ge
 8018758:	2514      	movge	r5, #20
 801875a:	4828      	ldr	r0, [pc, #160]	; (80187fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x55c>)
 801875c:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 8018760:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8018764:	6800      	ldr	r0, [r0, #0]
 8018766:	f8ad 101c 	strh.w	r1, [sp, #28]
 801876a:	f8ad 201e 	strh.w	r2, [sp, #30]
 801876e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018772:	f8d0 c000 	ldr.w	ip, [r0]
 8018776:	b2ad      	uxth	r5, r5
 8018778:	fa1f fa8a 	uxth.w	sl, sl
 801877c:	4555      	cmp	r5, sl
 801877e:	bf94      	ite	ls
 8018780:	9500      	strls	r5, [sp, #0]
 8018782:	f8cd a000 	strhi.w	sl, [sp]
 8018786:	b292      	uxth	r2, r2
 8018788:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 801878c:	b29b      	uxth	r3, r3
 801878e:	b289      	uxth	r1, r1
 8018790:	47a8      	blx	r5
 8018792:	6823      	ldr	r3, [r4, #0]
 8018794:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8018798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801879a:	a907      	add	r1, sp, #28
 801879c:	4620      	mov	r0, r4
 801879e:	4798      	blx	r3
 80187a0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80187a4:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80187a8:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 80187ac:	1a5b      	subs	r3, r3, r1
 80187ae:	440a      	add	r2, r1
 80187b0:	b21b      	sxth	r3, r3
 80187b2:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 80187b6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	f47f aed7 	bne.w	801856e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 80187c0:	fa1f f188 	uxth.w	r1, r8
 80187c4:	4648      	mov	r0, r9
 80187c6:	f7ff fa17 	bl	8017bf8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80187ca:	e6d0      	b.n	801856e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 80187cc:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 80187d0:	42ab      	cmp	r3, r5
 80187d2:	f67f ae94 	bls.w	80184fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 80187d6:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80187da:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80187de:	ab07      	add	r3, sp, #28
 80187e0:	6851      	ldr	r1, [r2, #4]
 80187e2:	c303      	stmia	r3!, {r0, r1}
 80187e4:	a807      	add	r0, sp, #28
 80187e6:	f7fd f8b8 	bl	801595a <_ZNK8touchgfx4Rect7isEmptyEv>
 80187ea:	b920      	cbnz	r0, 80187f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x556>
 80187ec:	6823      	ldr	r3, [r4, #0]
 80187ee:	a907      	add	r1, sp, #28
 80187f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80187f2:	4620      	mov	r0, r4
 80187f4:	4798      	blx	r3
 80187f6:	3501      	adds	r5, #1
 80187f8:	b2ad      	uxth	r5, r5
 80187fa:	e7e7      	b.n	80187cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 80187fc:	20197958 	.word	0x20197958

08018800 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8018800:	2200      	movs	r2, #0
 8018802:	4b03      	ldr	r3, [pc, #12]	; (8018810 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8018804:	801a      	strh	r2, [r3, #0]
 8018806:	805a      	strh	r2, [r3, #2]
 8018808:	809a      	strh	r2, [r3, #4]
 801880a:	80da      	strh	r2, [r3, #6]
 801880c:	4770      	bx	lr
 801880e:	bf00      	nop
 8018810:	2019799c 	.word	0x2019799c

08018814 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8018814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018818:	4606      	mov	r6, r0
 801881a:	b09d      	sub	sp, #116	; 0x74
 801881c:	a803      	add	r0, sp, #12
 801881e:	4614      	mov	r4, r2
 8018820:	468a      	mov	sl, r1
 8018822:	461d      	mov	r5, r3
 8018824:	f000 fd7a 	bl	801931c <_ZN8touchgfx12TextProviderC1Ev>
 8018828:	6833      	ldr	r3, [r6, #0]
 801882a:	4630      	mov	r0, r6
 801882c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801882e:	4798      	blx	r3
 8018830:	6833      	ldr	r3, [r6, #0]
 8018832:	4607      	mov	r7, r0
 8018834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018836:	4630      	mov	r0, r6
 8018838:	4798      	blx	r3
 801883a:	462a      	mov	r2, r5
 801883c:	2500      	movs	r5, #0
 801883e:	9000      	str	r0, [sp, #0]
 8018840:	4621      	mov	r1, r4
 8018842:	463b      	mov	r3, r7
 8018844:	a803      	add	r0, sp, #12
 8018846:	f000 fdbc 	bl	80193c2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801884a:	462c      	mov	r4, r5
 801884c:	46a9      	mov	r9, r5
 801884e:	46a8      	mov	r8, r5
 8018850:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8018854:	2300      	movs	r3, #0
 8018856:	9302      	str	r3, [sp, #8]
 8018858:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801885c:	429c      	cmp	r4, r3
 801885e:	d002      	beq.n	8018866 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8018860:	455c      	cmp	r4, fp
 8018862:	bf18      	it	ne
 8018864:	4625      	movne	r5, r4
 8018866:	ab02      	add	r3, sp, #8
 8018868:	4632      	mov	r2, r6
 801886a:	4651      	mov	r1, sl
 801886c:	a803      	add	r0, sp, #12
 801886e:	f001 f897 	bl	80199a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018872:	4604      	mov	r4, r0
 8018874:	b108      	cbz	r0, 801887a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8018876:	280a      	cmp	r0, #10
 8018878:	d10a      	bne.n	8018890 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801887a:	45c1      	cmp	r9, r8
 801887c:	bf38      	it	cc
 801887e:	46c1      	movcc	r9, r8
 8018880:	f04f 0800 	mov.w	r8, #0
 8018884:	2c00      	cmp	r4, #0
 8018886:	d1e5      	bne.n	8018854 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8018888:	4648      	mov	r0, r9
 801888a:	b01d      	add	sp, #116	; 0x74
 801888c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018890:	9a02      	ldr	r2, [sp, #8]
 8018892:	2a00      	cmp	r2, #0
 8018894:	d0de      	beq.n	8018854 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8018896:	7b57      	ldrb	r7, [r2, #13]
 8018898:	6833      	ldr	r3, [r6, #0]
 801889a:	007f      	lsls	r7, r7, #1
 801889c:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80188a0:	7a97      	ldrb	r7, [r2, #10]
 80188a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80188a4:	4307      	orrs	r7, r0
 80188a6:	4629      	mov	r1, r5
 80188a8:	4630      	mov	r0, r6
 80188aa:	8894      	ldrh	r4, [r2, #4]
 80188ac:	4798      	blx	r3
 80188ae:	4438      	add	r0, r7
 80188b0:	4480      	add	r8, r0
 80188b2:	fa1f f888 	uxth.w	r8, r8
 80188b6:	e7e5      	b.n	8018884 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080188b8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80188b8:	b508      	push	{r3, lr}
 80188ba:	6803      	ldr	r3, [r0, #0]
 80188bc:	68db      	ldr	r3, [r3, #12]
 80188be:	4798      	blx	r3
 80188c0:	b128      	cbz	r0, 80188ce <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80188c2:	7b43      	ldrb	r3, [r0, #13]
 80188c4:	7a80      	ldrb	r0, [r0, #10]
 80188c6:	005b      	lsls	r3, r3, #1
 80188c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80188cc:	4318      	orrs	r0, r3
 80188ce:	bd08      	pop	{r3, pc}

080188d0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80188d0:	b40e      	push	{r1, r2, r3}
 80188d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80188d4:	4605      	mov	r5, r0
 80188d6:	b09e      	sub	sp, #120	; 0x78
 80188d8:	ab23      	add	r3, sp, #140	; 0x8c
 80188da:	f853 4b04 	ldr.w	r4, [r3], #4
 80188de:	a805      	add	r0, sp, #20
 80188e0:	9303      	str	r3, [sp, #12]
 80188e2:	f000 fd1b 	bl	801931c <_ZN8touchgfx12TextProviderC1Ev>
 80188e6:	682b      	ldr	r3, [r5, #0]
 80188e8:	4628      	mov	r0, r5
 80188ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80188ec:	4798      	blx	r3
 80188ee:	682b      	ldr	r3, [r5, #0]
 80188f0:	4606      	mov	r6, r0
 80188f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80188f4:	4628      	mov	r0, r5
 80188f6:	4798      	blx	r3
 80188f8:	4621      	mov	r1, r4
 80188fa:	2400      	movs	r4, #0
 80188fc:	4633      	mov	r3, r6
 80188fe:	9000      	str	r0, [sp, #0]
 8018900:	9a03      	ldr	r2, [sp, #12]
 8018902:	ae1e      	add	r6, sp, #120	; 0x78
 8018904:	a805      	add	r0, sp, #20
 8018906:	f000 fd5c 	bl	80193c2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801890a:	f846 4d68 	str.w	r4, [r6, #-104]!
 801890e:	4633      	mov	r3, r6
 8018910:	462a      	mov	r2, r5
 8018912:	4621      	mov	r1, r4
 8018914:	a805      	add	r0, sp, #20
 8018916:	f001 f843 	bl	80199a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801891a:	b1f0      	cbz	r0, 801895a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 801891c:	280a      	cmp	r0, #10
 801891e:	d018      	beq.n	8018952 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8018920:	9f04      	ldr	r7, [sp, #16]
 8018922:	b1b7      	cbz	r7, 8018952 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8018924:	7b78      	ldrb	r0, [r7, #13]
 8018926:	7a3b      	ldrb	r3, [r7, #8]
 8018928:	00c1      	lsls	r1, r0, #3
 801892a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801892e:	4319      	orrs	r1, r3
 8018930:	0643      	lsls	r3, r0, #25
 8018932:	bf44      	itt	mi
 8018934:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8018938:	b219      	sxthmi	r1, r3
 801893a:	0100      	lsls	r0, r0, #4
 801893c:	79fb      	ldrb	r3, [r7, #7]
 801893e:	88ea      	ldrh	r2, [r5, #6]
 8018940:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8018944:	4303      	orrs	r3, r0
 8018946:	4413      	add	r3, r2
 8018948:	1a5b      	subs	r3, r3, r1
 801894a:	b21b      	sxth	r3, r3
 801894c:	429c      	cmp	r4, r3
 801894e:	bfb8      	it	lt
 8018950:	461c      	movlt	r4, r3
 8018952:	4633      	mov	r3, r6
 8018954:	462a      	mov	r2, r5
 8018956:	2100      	movs	r1, #0
 8018958:	e7dc      	b.n	8018914 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801895a:	b2a0      	uxth	r0, r4
 801895c:	b01e      	add	sp, #120	; 0x78
 801895e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018962:	b003      	add	sp, #12
 8018964:	4770      	bx	lr

08018966 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8018966:	7a43      	ldrb	r3, [r0, #9]
 8018968:	8880      	ldrh	r0, [r0, #4]
 801896a:	4418      	add	r0, r3
 801896c:	b280      	uxth	r0, r0
 801896e:	4770      	bx	lr

08018970 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8018970:	6803      	ldr	r3, [r0, #0]
 8018972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018974:	4718      	bx	r3

08018976 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8018976:	b40e      	push	{r1, r2, r3}
 8018978:	b570      	push	{r4, r5, r6, lr}
 801897a:	4604      	mov	r4, r0
 801897c:	b09d      	sub	sp, #116	; 0x74
 801897e:	ab21      	add	r3, sp, #132	; 0x84
 8018980:	f853 5b04 	ldr.w	r5, [r3], #4
 8018984:	a803      	add	r0, sp, #12
 8018986:	9302      	str	r3, [sp, #8]
 8018988:	f000 fcc8 	bl	801931c <_ZN8touchgfx12TextProviderC1Ev>
 801898c:	6823      	ldr	r3, [r4, #0]
 801898e:	4620      	mov	r0, r4
 8018990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018992:	4798      	blx	r3
 8018994:	6823      	ldr	r3, [r4, #0]
 8018996:	4606      	mov	r6, r0
 8018998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801899a:	4620      	mov	r0, r4
 801899c:	4798      	blx	r3
 801899e:	4633      	mov	r3, r6
 80189a0:	9000      	str	r0, [sp, #0]
 80189a2:	9a02      	ldr	r2, [sp, #8]
 80189a4:	4629      	mov	r1, r5
 80189a6:	a803      	add	r0, sp, #12
 80189a8:	f000 fd0b 	bl	80193c2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80189ac:	a803      	add	r0, sp, #12
 80189ae:	f001 f879 	bl	8019aa4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80189b2:	2401      	movs	r4, #1
 80189b4:	b2a3      	uxth	r3, r4
 80189b6:	b140      	cbz	r0, 80189ca <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 80189b8:	280a      	cmp	r0, #10
 80189ba:	bf08      	it	eq
 80189bc:	3301      	addeq	r3, #1
 80189be:	a803      	add	r0, sp, #12
 80189c0:	bf08      	it	eq
 80189c2:	b21c      	sxtheq	r4, r3
 80189c4:	f001 f86e 	bl	8019aa4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80189c8:	e7f4      	b.n	80189b4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 80189ca:	4618      	mov	r0, r3
 80189cc:	b01d      	add	sp, #116	; 0x74
 80189ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80189d2:	b003      	add	sp, #12
 80189d4:	4770      	bx	lr

080189d6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80189d6:	b40e      	push	{r1, r2, r3}
 80189d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80189da:	4604      	mov	r4, r0
 80189dc:	b09e      	sub	sp, #120	; 0x78
 80189de:	ab23      	add	r3, sp, #140	; 0x8c
 80189e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80189e4:	a805      	add	r0, sp, #20
 80189e6:	9303      	str	r3, [sp, #12]
 80189e8:	f000 fc98 	bl	801931c <_ZN8touchgfx12TextProviderC1Ev>
 80189ec:	6823      	ldr	r3, [r4, #0]
 80189ee:	4620      	mov	r0, r4
 80189f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80189f2:	4798      	blx	r3
 80189f4:	6823      	ldr	r3, [r4, #0]
 80189f6:	4606      	mov	r6, r0
 80189f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80189fa:	4620      	mov	r0, r4
 80189fc:	4798      	blx	r3
 80189fe:	4633      	mov	r3, r6
 8018a00:	4629      	mov	r1, r5
 8018a02:	9000      	str	r0, [sp, #0]
 8018a04:	9a03      	ldr	r2, [sp, #12]
 8018a06:	a805      	add	r0, sp, #20
 8018a08:	f000 fcdb 	bl	80193c2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018a0c:	2100      	movs	r1, #0
 8018a0e:	ad1e      	add	r5, sp, #120	; 0x78
 8018a10:	f845 1d68 	str.w	r1, [r5, #-104]!
 8018a14:	462b      	mov	r3, r5
 8018a16:	4622      	mov	r2, r4
 8018a18:	a805      	add	r0, sp, #20
 8018a1a:	f000 ffc1 	bl	80199a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018a1e:	f647 76ff 	movw	r6, #32767	; 0x7fff
 8018a22:	b1d8      	cbz	r0, 8018a5c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8018a24:	280a      	cmp	r0, #10
 8018a26:	d012      	beq.n	8018a4e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8018a28:	9804      	ldr	r0, [sp, #16]
 8018a2a:	b180      	cbz	r0, 8018a4e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8018a2c:	7b47      	ldrb	r7, [r0, #13]
 8018a2e:	88e2      	ldrh	r2, [r4, #6]
 8018a30:	00fb      	lsls	r3, r7, #3
 8018a32:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8018a36:	7a03      	ldrb	r3, [r0, #8]
 8018a38:	430b      	orrs	r3, r1
 8018a3a:	0679      	lsls	r1, r7, #25
 8018a3c:	bf44      	itt	mi
 8018a3e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018a42:	b21b      	sxthmi	r3, r3
 8018a44:	1ad3      	subs	r3, r2, r3
 8018a46:	b21b      	sxth	r3, r3
 8018a48:	429e      	cmp	r6, r3
 8018a4a:	bfa8      	it	ge
 8018a4c:	461e      	movge	r6, r3
 8018a4e:	462b      	mov	r3, r5
 8018a50:	4622      	mov	r2, r4
 8018a52:	2100      	movs	r1, #0
 8018a54:	a805      	add	r0, sp, #20
 8018a56:	f000 ffa3 	bl	80199a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018a5a:	e7e2      	b.n	8018a22 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8018a5c:	4630      	mov	r0, r6
 8018a5e:	b01e      	add	sp, #120	; 0x78
 8018a60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018a64:	b003      	add	sp, #12
 8018a66:	4770      	bx	lr

08018a68 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8018a68:	b513      	push	{r0, r1, r4, lr}
 8018a6a:	2400      	movs	r4, #0
 8018a6c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8018a70:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018a74:	6803      	ldr	r3, [r0, #0]
 8018a76:	f8ad 1004 	strh.w	r1, [sp, #4]
 8018a7a:	9400      	str	r4, [sp, #0]
 8018a7c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018a80:	691b      	ldr	r3, [r3, #16]
 8018a82:	4669      	mov	r1, sp
 8018a84:	4798      	blx	r3
 8018a86:	b002      	add	sp, #8
 8018a88:	bd10      	pop	{r4, pc}

08018a8a <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8018a8a:	b538      	push	{r3, r4, r5, lr}
 8018a8c:	460c      	mov	r4, r1
 8018a8e:	4605      	mov	r5, r0
 8018a90:	680b      	ldr	r3, [r1, #0]
 8018a92:	68db      	ldr	r3, [r3, #12]
 8018a94:	4798      	blx	r3
 8018a96:	6823      	ldr	r3, [r4, #0]
 8018a98:	4620      	mov	r0, r4
 8018a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a9c:	4629      	mov	r1, r5
 8018a9e:	4798      	blx	r3
 8018aa0:	4628      	mov	r0, r5
 8018aa2:	bd38      	pop	{r3, r4, r5, pc}

08018aa4 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8018aa4:	b410      	push	{r4}
 8018aa6:	880a      	ldrh	r2, [r1, #0]
 8018aa8:	8884      	ldrh	r4, [r0, #4]
 8018aaa:	4422      	add	r2, r4
 8018aac:	800a      	strh	r2, [r1, #0]
 8018aae:	88c4      	ldrh	r4, [r0, #6]
 8018ab0:	884a      	ldrh	r2, [r1, #2]
 8018ab2:	4422      	add	r2, r4
 8018ab4:	804a      	strh	r2, [r1, #2]
 8018ab6:	6940      	ldr	r0, [r0, #20]
 8018ab8:	b120      	cbz	r0, 8018ac4 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8018aba:	6803      	ldr	r3, [r0, #0]
 8018abc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ac2:	4718      	bx	r3
 8018ac4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018ac8:	4770      	bx	lr

08018aca <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8018aca:	b570      	push	{r4, r5, r6, lr}
 8018acc:	460c      	mov	r4, r1
 8018ace:	8882      	ldrh	r2, [r0, #4]
 8018ad0:	880b      	ldrh	r3, [r1, #0]
 8018ad2:	4605      	mov	r5, r0
 8018ad4:	4413      	add	r3, r2
 8018ad6:	800b      	strh	r3, [r1, #0]
 8018ad8:	88c2      	ldrh	r2, [r0, #6]
 8018ada:	884b      	ldrh	r3, [r1, #2]
 8018adc:	4413      	add	r3, r2
 8018ade:	804b      	strh	r3, [r1, #2]
 8018ae0:	1d01      	adds	r1, r0, #4
 8018ae2:	4620      	mov	r0, r4
 8018ae4:	f7fc fef6 	bl	80158d4 <_ZN8touchgfx4RectaNERKS0_>
 8018ae8:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8018aec:	2b00      	cmp	r3, #0
 8018aee:	dd0b      	ble.n	8018b08 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018af0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8018af4:	2b00      	cmp	r3, #0
 8018af6:	dd07      	ble.n	8018b08 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018af8:	6968      	ldr	r0, [r5, #20]
 8018afa:	b128      	cbz	r0, 8018b08 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018afc:	6803      	ldr	r3, [r0, #0]
 8018afe:	4621      	mov	r1, r4
 8018b00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b06:	4718      	bx	r3
 8018b08:	bd70      	pop	{r4, r5, r6, pc}
	...

08018b0c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8018b0c:	b570      	push	{r4, r5, r6, lr}
 8018b0e:	460c      	mov	r4, r1
 8018b10:	8882      	ldrh	r2, [r0, #4]
 8018b12:	880b      	ldrh	r3, [r1, #0]
 8018b14:	4605      	mov	r5, r0
 8018b16:	4413      	add	r3, r2
 8018b18:	800b      	strh	r3, [r1, #0]
 8018b1a:	88c2      	ldrh	r2, [r0, #6]
 8018b1c:	884b      	ldrh	r3, [r1, #2]
 8018b1e:	4413      	add	r3, r2
 8018b20:	804b      	strh	r3, [r1, #2]
 8018b22:	1d01      	adds	r1, r0, #4
 8018b24:	4620      	mov	r0, r4
 8018b26:	f7fc fed5 	bl	80158d4 <_ZN8touchgfx4RectaNERKS0_>
 8018b2a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	dd18      	ble.n	8018b64 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8018b32:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	dd14      	ble.n	8018b64 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8018b3a:	6968      	ldr	r0, [r5, #20]
 8018b3c:	b128      	cbz	r0, 8018b4a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8018b3e:	6803      	ldr	r3, [r0, #0]
 8018b40:	4621      	mov	r1, r4
 8018b42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b46:	691b      	ldr	r3, [r3, #16]
 8018b48:	4718      	bx	r3
 8018b4a:	4b07      	ldr	r3, [pc, #28]	; (8018b68 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8018b4c:	681b      	ldr	r3, [r3, #0]
 8018b4e:	3304      	adds	r3, #4
 8018b50:	429d      	cmp	r5, r3
 8018b52:	d107      	bne.n	8018b64 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8018b54:	f7fe ff44 	bl	80179e0 <_ZN8touchgfx11Application11getInstanceEv>
 8018b58:	6821      	ldr	r1, [r4, #0]
 8018b5a:	6862      	ldr	r2, [r4, #4]
 8018b5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b60:	f7ff b85e 	b.w	8017c20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018b64:	bd70      	pop	{r4, r5, r6, pc}
 8018b66:	bf00      	nop
 8018b68:	20197994 	.word	0x20197994

08018b6c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8018b6c:	b570      	push	{r4, r5, r6, lr}
 8018b6e:	4604      	mov	r4, r0
 8018b70:	4616      	mov	r6, r2
 8018b72:	460d      	mov	r5, r1
 8018b74:	b901      	cbnz	r1, 8018b78 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8018b76:	b192      	cbz	r2, 8018b9e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8018b78:	6823      	ldr	r3, [r4, #0]
 8018b7a:	4620      	mov	r0, r4
 8018b7c:	699b      	ldr	r3, [r3, #24]
 8018b7e:	4798      	blx	r3
 8018b80:	88e2      	ldrh	r2, [r4, #6]
 8018b82:	88a1      	ldrh	r1, [r4, #4]
 8018b84:	4432      	add	r2, r6
 8018b86:	4429      	add	r1, r5
 8018b88:	4620      	mov	r0, r4
 8018b8a:	b212      	sxth	r2, r2
 8018b8c:	b209      	sxth	r1, r1
 8018b8e:	f7fd f97f 	bl	8015e90 <_ZN8touchgfx8Drawable5setXYEss>
 8018b92:	6823      	ldr	r3, [r4, #0]
 8018b94:	4620      	mov	r0, r4
 8018b96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b9a:	699b      	ldr	r3, [r3, #24]
 8018b9c:	4718      	bx	r3
 8018b9e:	bd70      	pop	{r4, r5, r6, pc}

08018ba0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8018ba0:	b510      	push	{r4, lr}
 8018ba2:	2300      	movs	r3, #0
 8018ba4:	4604      	mov	r4, r0
 8018ba6:	4608      	mov	r0, r1
 8018ba8:	8023      	strh	r3, [r4, #0]
 8018baa:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018bae:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8018bb2:	8063      	strh	r3, [r4, #2]
 8018bb4:	6803      	ldr	r3, [r0, #0]
 8018bb6:	80a1      	strh	r1, [r4, #4]
 8018bb8:	80e2      	strh	r2, [r4, #6]
 8018bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bbc:	4621      	mov	r1, r4
 8018bbe:	4798      	blx	r3
 8018bc0:	4620      	mov	r0, r4
 8018bc2:	bd10      	pop	{r4, pc}

08018bc4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8018bc4:	b530      	push	{r4, r5, lr}
 8018bc6:	8083      	strh	r3, [r0, #4]
 8018bc8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8018bcc:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8018bd0:	80c3      	strh	r3, [r0, #6]
 8018bd2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8018bd6:	6141      	str	r1, [r0, #20]
 8018bd8:	7203      	strb	r3, [r0, #8]
 8018bda:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8018bde:	8302      	strh	r2, [r0, #24]
 8018be0:	7243      	strb	r3, [r0, #9]
 8018be2:	7a83      	ldrb	r3, [r0, #10]
 8018be4:	f365 0306 	bfi	r3, r5, #0, #7
 8018be8:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8018bec:	f365 13c7 	bfi	r3, r5, #7, #1
 8018bf0:	7283      	strb	r3, [r0, #10]
 8018bf2:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8018bf6:	72c3      	strb	r3, [r0, #11]
 8018bf8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8018bfc:	7303      	strb	r3, [r0, #12]
 8018bfe:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8018c02:	81c3      	strh	r3, [r0, #14]
 8018c04:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8018c08:	8203      	strh	r3, [r0, #16]
 8018c0a:	4b01      	ldr	r3, [pc, #4]	; (8018c10 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8018c0c:	6003      	str	r3, [r0, #0]
 8018c0e:	bd30      	pop	{r4, r5, pc}
 8018c10:	0802aa24 	.word	0x0802aa24

08018c14 <_ZNK8touchgfx9ConstFont4findEt>:
 8018c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c16:	6944      	ldr	r4, [r0, #20]
 8018c18:	b3bc      	cbz	r4, 8018c8a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018c1a:	88a3      	ldrh	r3, [r4, #4]
 8018c1c:	8b02      	ldrh	r2, [r0, #24]
 8018c1e:	1acb      	subs	r3, r1, r3
 8018c20:	f102 32ff 	add.w	r2, r2, #4294967295
 8018c24:	d431      	bmi.n	8018c8a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018c26:	4293      	cmp	r3, r2
 8018c28:	dd0c      	ble.n	8018c44 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8018c2a:	230e      	movs	r3, #14
 8018c2c:	fb03 4302 	mla	r3, r3, r2, r4
 8018c30:	889b      	ldrh	r3, [r3, #4]
 8018c32:	1a5b      	subs	r3, r3, r1
 8018c34:	1ad3      	subs	r3, r2, r3
 8018c36:	429a      	cmp	r2, r3
 8018c38:	db27      	blt.n	8018c8a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	bfbc      	itt	lt
 8018c3e:	2302      	movlt	r3, #2
 8018c40:	fb92 f3f3 	sdivlt	r3, r2, r3
 8018c44:	2500      	movs	r5, #0
 8018c46:	260e      	movs	r6, #14
 8018c48:	4295      	cmp	r5, r2
 8018c4a:	dc1e      	bgt.n	8018c8a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018c4c:	fb06 4003 	mla	r0, r6, r3, r4
 8018c50:	8887      	ldrh	r7, [r0, #4]
 8018c52:	42b9      	cmp	r1, r7
 8018c54:	d01a      	beq.n	8018c8c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8018c56:	d20d      	bcs.n	8018c74 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8018c58:	1e5a      	subs	r2, r3, #1
 8018c5a:	4295      	cmp	r5, r2
 8018c5c:	dc15      	bgt.n	8018c8a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018c5e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8018c62:	1a5b      	subs	r3, r3, r1
 8018c64:	1ad3      	subs	r3, r2, r3
 8018c66:	429a      	cmp	r2, r3
 8018c68:	db0f      	blt.n	8018c8a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018c6a:	429d      	cmp	r5, r3
 8018c6c:	ddec      	ble.n	8018c48 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018c6e:	1953      	adds	r3, r2, r5
 8018c70:	105b      	asrs	r3, r3, #1
 8018c72:	e7e9      	b.n	8018c48 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018c74:	1c5d      	adds	r5, r3, #1
 8018c76:	42aa      	cmp	r2, r5
 8018c78:	db07      	blt.n	8018c8a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018c7a:	8a43      	ldrh	r3, [r0, #18]
 8018c7c:	1acb      	subs	r3, r1, r3
 8018c7e:	442b      	add	r3, r5
 8018c80:	429d      	cmp	r5, r3
 8018c82:	dc02      	bgt.n	8018c8a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018c84:	429a      	cmp	r2, r3
 8018c86:	dadf      	bge.n	8018c48 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018c88:	e7f1      	b.n	8018c6e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8018c8a:	2000      	movs	r0, #0
 8018c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018c8e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8018c8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c90:	4604      	mov	r4, r0
 8018c92:	4617      	mov	r7, r2
 8018c94:	461e      	mov	r6, r3
 8018c96:	b911      	cbnz	r1, 8018c9e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8018c98:	2500      	movs	r5, #0
 8018c9a:	4628      	mov	r0, r5
 8018c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c9e:	290a      	cmp	r1, #10
 8018ca0:	d0fa      	beq.n	8018c98 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018ca2:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8018ca6:	4291      	cmp	r1, r2
 8018ca8:	d0f6      	beq.n	8018c98 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018caa:	f242 020b 	movw	r2, #8203	; 0x200b
 8018cae:	4291      	cmp	r1, r2
 8018cb0:	d0f2      	beq.n	8018c98 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018cb2:	f7ff ffaf 	bl	8018c14 <_ZNK8touchgfx9ConstFont4findEt>
 8018cb6:	4605      	mov	r5, r0
 8018cb8:	b950      	cbnz	r0, 8018cd0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8018cba:	6823      	ldr	r3, [r4, #0]
 8018cbc:	4620      	mov	r0, r4
 8018cbe:	691b      	ldr	r3, [r3, #16]
 8018cc0:	4798      	blx	r3
 8018cc2:	4601      	mov	r1, r0
 8018cc4:	4620      	mov	r0, r4
 8018cc6:	f7ff ffa5 	bl	8018c14 <_ZNK8touchgfx9ConstFont4findEt>
 8018cca:	4605      	mov	r5, r0
 8018ccc:	2800      	cmp	r0, #0
 8018cce:	d0e3      	beq.n	8018c98 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018cd0:	6823      	ldr	r3, [r4, #0]
 8018cd2:	4629      	mov	r1, r5
 8018cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018cd6:	4620      	mov	r0, r4
 8018cd8:	4798      	blx	r3
 8018cda:	6038      	str	r0, [r7, #0]
 8018cdc:	6823      	ldr	r3, [r4, #0]
 8018cde:	4620      	mov	r0, r4
 8018ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018ce2:	4798      	blx	r3
 8018ce4:	7030      	strb	r0, [r6, #0]
 8018ce6:	e7d8      	b.n	8018c9a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08018ce8 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8018ce8:	2000      	movs	r0, #0
 8018cea:	4770      	bx	lr

08018cec <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8018cec:	2001      	movs	r0, #1
 8018cee:	4770      	bx	lr

08018cf0 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8018cf0:	2002      	movs	r0, #2
 8018cf2:	4770      	bx	lr

08018cf4 <_ZN8touchgfx6ScreenD1Ev>:
 8018cf4:	4770      	bx	lr

08018cf6 <_ZN8touchgfx12GestureEventD1Ev>:
 8018cf6:	4770      	bx	lr

08018cf8 <_ZN8touchgfx9DragEventD1Ev>:
 8018cf8:	4770      	bx	lr

08018cfa <_ZN8touchgfx10ClickEventD1Ev>:
 8018cfa:	4770      	bx	lr

08018cfc <_ZN8touchgfx10ClickEventD0Ev>:
 8018cfc:	b510      	push	{r4, lr}
 8018cfe:	4604      	mov	r4, r0
 8018d00:	210c      	movs	r1, #12
 8018d02:	f00f f988 	bl	8028016 <_ZdlPvj>
 8018d06:	4620      	mov	r0, r4
 8018d08:	bd10      	pop	{r4, pc}

08018d0a <_ZN8touchgfx9DragEventD0Ev>:
 8018d0a:	b510      	push	{r4, lr}
 8018d0c:	4604      	mov	r4, r0
 8018d0e:	2110      	movs	r1, #16
 8018d10:	f00f f981 	bl	8028016 <_ZdlPvj>
 8018d14:	4620      	mov	r0, r4
 8018d16:	bd10      	pop	{r4, pc}

08018d18 <_ZN8touchgfx12GestureEventD0Ev>:
 8018d18:	b510      	push	{r4, lr}
 8018d1a:	4604      	mov	r4, r0
 8018d1c:	210c      	movs	r1, #12
 8018d1e:	f00f f97a 	bl	8028016 <_ZdlPvj>
 8018d22:	4620      	mov	r0, r4
 8018d24:	bd10      	pop	{r4, pc}

08018d26 <_ZN8touchgfx6ScreenD0Ev>:
 8018d26:	b510      	push	{r4, lr}
 8018d28:	4604      	mov	r4, r0
 8018d2a:	213c      	movs	r1, #60	; 0x3c
 8018d2c:	f00f f973 	bl	8028016 <_ZdlPvj>
 8018d30:	4620      	mov	r0, r4
 8018d32:	bd10      	pop	{r4, pc}

08018d34 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8018d34:	b530      	push	{r4, r5, lr}
 8018d36:	460d      	mov	r5, r1
 8018d38:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8018d3a:	b087      	sub	sp, #28
 8018d3c:	4604      	mov	r4, r0
 8018d3e:	b301      	cbz	r1, 8018d82 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8018d40:	a801      	add	r0, sp, #4
 8018d42:	f7ff ff2d 	bl	8018ba0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018d46:	892a      	ldrh	r2, [r5, #8]
 8018d48:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018d4c:	7928      	ldrb	r0, [r5, #4]
 8018d4e:	1ad2      	subs	r2, r2, r3
 8018d50:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8018d52:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8018d56:	441a      	add	r2, r3
 8018d58:	896b      	ldrh	r3, [r5, #10]
 8018d5a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8018d5e:	f88d 0010 	strb.w	r0, [sp, #16]
 8018d62:	1b5b      	subs	r3, r3, r5
 8018d64:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8018d66:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8018d68:	442b      	add	r3, r5
 8018d6a:	4d07      	ldr	r5, [pc, #28]	; (8018d88 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8018d6c:	f8ad 1012 	strh.w	r1, [sp, #18]
 8018d70:	9503      	str	r5, [sp, #12]
 8018d72:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018d76:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018d7a:	6803      	ldr	r3, [r0, #0]
 8018d7c:	a903      	add	r1, sp, #12
 8018d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018d80:	4798      	blx	r3
 8018d82:	b007      	add	sp, #28
 8018d84:	bd30      	pop	{r4, r5, pc}
 8018d86:	bf00      	nop
 8018d88:	0802aaac 	.word	0x0802aaac

08018d8c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8018d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d90:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8018d92:	b08a      	sub	sp, #40	; 0x28
 8018d94:	4604      	mov	r4, r0
 8018d96:	460d      	mov	r5, r1
 8018d98:	b113      	cbz	r3, 8018da0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8018d9a:	790b      	ldrb	r3, [r1, #4]
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d044      	beq.n	8018e2a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018da0:	f104 0804 	add.w	r8, r4, #4
 8018da4:	4641      	mov	r1, r8
 8018da6:	a803      	add	r0, sp, #12
 8018da8:	f7ff fefa 	bl	8018ba0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018dac:	792b      	ldrb	r3, [r5, #4]
 8018dae:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8018db2:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8018db6:	b983      	cbnz	r3, 8018dda <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8018db8:	892a      	ldrh	r2, [r5, #8]
 8018dba:	88e9      	ldrh	r1, [r5, #6]
 8018dbc:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8018dc0:	1b92      	subs	r2, r2, r6
 8018dc2:	1bc9      	subs	r1, r1, r7
 8018dc4:	9301      	str	r3, [sp, #4]
 8018dc6:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8018dca:	9300      	str	r3, [sp, #0]
 8018dcc:	b212      	sxth	r2, r2
 8018dce:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8018dd2:	b209      	sxth	r1, r1
 8018dd4:	4640      	mov	r0, r8
 8018dd6:	f7fc fc9d 	bl	8015714 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8018dda:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018ddc:	b329      	cbz	r1, 8018e2a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018dde:	a805      	add	r0, sp, #20
 8018de0:	f7ff fede 	bl	8018ba0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018de4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8018de8:	792b      	ldrb	r3, [r5, #4]
 8018dea:	1abf      	subs	r7, r7, r2
 8018dec:	88ea      	ldrh	r2, [r5, #6]
 8018dee:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8018df0:	4417      	add	r7, r2
 8018df2:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8018df4:	f88d 3020 	strb.w	r3, [sp, #32]
 8018df8:	4417      	add	r7, r2
 8018dfa:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8018dfe:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8018e02:	1ab6      	subs	r6, r6, r2
 8018e04:	892a      	ldrh	r2, [r5, #8]
 8018e06:	a907      	add	r1, sp, #28
 8018e08:	4416      	add	r6, r2
 8018e0a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8018e0c:	4416      	add	r6, r2
 8018e0e:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8018e12:	2600      	movs	r6, #0
 8018e14:	4a06      	ldr	r2, [pc, #24]	; (8018e30 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8018e16:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8018e1a:	9207      	str	r2, [sp, #28]
 8018e1c:	6803      	ldr	r3, [r0, #0]
 8018e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018e20:	4798      	blx	r3
 8018e22:	792b      	ldrb	r3, [r5, #4]
 8018e24:	b10b      	cbz	r3, 8018e2a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018e26:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8018e2a:	b00a      	add	sp, #40	; 0x28
 8018e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e30:	0802aa84 	.word	0x0802aa84

08018e34 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8018e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e38:	460c      	mov	r4, r1
 8018e3a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8018e3c:	b088      	sub	sp, #32
 8018e3e:	4605      	mov	r5, r0
 8018e40:	2900      	cmp	r1, #0
 8018e42:	d06d      	beq.n	8018f20 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8018e44:	4668      	mov	r0, sp
 8018e46:	f7ff feab 	bl	8018ba0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018e4a:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8018e4c:	88e3      	ldrh	r3, [r4, #6]
 8018e4e:	f9bd 8000 	ldrsh.w	r8, [sp]
 8018e52:	440b      	add	r3, r1
 8018e54:	b21b      	sxth	r3, r3
 8018e56:	4543      	cmp	r3, r8
 8018e58:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8018e5c:	db31      	blt.n	8018ec2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018e5e:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8018e62:	44c4      	add	ip, r8
 8018e64:	fa0f fc8c 	sxth.w	ip, ip
 8018e68:	4563      	cmp	r3, ip
 8018e6a:	da2a      	bge.n	8018ec2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018e6c:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8018e6e:	8926      	ldrh	r6, [r4, #8]
 8018e70:	4416      	add	r6, r2
 8018e72:	b236      	sxth	r6, r6
 8018e74:	42be      	cmp	r6, r7
 8018e76:	db24      	blt.n	8018ec2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018e78:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8018e7c:	4438      	add	r0, r7
 8018e7e:	b200      	sxth	r0, r0
 8018e80:	4286      	cmp	r6, r0
 8018e82:	da1e      	bge.n	8018ec2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018e84:	8963      	ldrh	r3, [r4, #10]
 8018e86:	4419      	add	r1, r3
 8018e88:	b209      	sxth	r1, r1
 8018e8a:	4541      	cmp	r1, r8
 8018e8c:	db08      	blt.n	8018ea0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018e8e:	4561      	cmp	r1, ip
 8018e90:	da06      	bge.n	8018ea0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018e92:	89a3      	ldrh	r3, [r4, #12]
 8018e94:	441a      	add	r2, r3
 8018e96:	b212      	sxth	r2, r2
 8018e98:	42ba      	cmp	r2, r7
 8018e9a:	db01      	blt.n	8018ea0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018e9c:	4282      	cmp	r2, r0
 8018e9e:	db10      	blt.n	8018ec2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018ea0:	4b21      	ldr	r3, [pc, #132]	; (8018f28 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8018ea2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8018ea4:	9304      	str	r3, [sp, #16]
 8018ea6:	2302      	movs	r3, #2
 8018ea8:	f88d 3014 	strb.w	r3, [sp, #20]
 8018eac:	2300      	movs	r3, #0
 8018eae:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018eb2:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018eb6:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018eba:	6803      	ldr	r3, [r0, #0]
 8018ebc:	a904      	add	r1, sp, #16
 8018ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018ec0:	4798      	blx	r3
 8018ec2:	1d29      	adds	r1, r5, #4
 8018ec4:	a802      	add	r0, sp, #8
 8018ec6:	f7ff fe6b 	bl	8018ba0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018eca:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018ece:	88e0      	ldrh	r0, [r4, #6]
 8018ed0:	eba3 0808 	sub.w	r8, r3, r8
 8018ed4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8018ed8:	7921      	ldrb	r1, [r4, #4]
 8018eda:	1bdf      	subs	r7, r3, r7
 8018edc:	b2bb      	uxth	r3, r7
 8018ede:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8018ee2:	fa1f f888 	uxth.w	r8, r8
 8018ee6:	8922      	ldrh	r2, [r4, #8]
 8018ee8:	8967      	ldrh	r7, [r4, #10]
 8018eea:	89a4      	ldrh	r4, [r4, #12]
 8018eec:	4440      	add	r0, r8
 8018eee:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8018ef0:	4460      	add	r0, ip
 8018ef2:	441a      	add	r2, r3
 8018ef4:	44b8      	add	r8, r7
 8018ef6:	4423      	add	r3, r4
 8018ef8:	4c0c      	ldr	r4, [pc, #48]	; (8018f2c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8018efa:	f8ad 0016 	strh.w	r0, [sp, #22]
 8018efe:	4433      	add	r3, r6
 8018f00:	4432      	add	r2, r6
 8018f02:	44e0      	add	r8, ip
 8018f04:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8018f06:	f88d 1014 	strb.w	r1, [sp, #20]
 8018f0a:	9404      	str	r4, [sp, #16]
 8018f0c:	f8ad 2018 	strh.w	r2, [sp, #24]
 8018f10:	f8ad 801a 	strh.w	r8, [sp, #26]
 8018f14:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018f18:	6803      	ldr	r3, [r0, #0]
 8018f1a:	a904      	add	r1, sp, #16
 8018f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018f1e:	4798      	blx	r3
 8018f20:	b008      	add	sp, #32
 8018f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f26:	bf00      	nop
 8018f28:	0802aa84 	.word	0x0802aa84
 8018f2c:	0802aa98 	.word	0x0802aa98

08018f30 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8018f30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018f32:	4604      	mov	r4, r0
 8018f34:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8018f38:	3201      	adds	r2, #1
 8018f3a:	d112      	bne.n	8018f62 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8018f3c:	2500      	movs	r5, #0
 8018f3e:	9500      	str	r5, [sp, #0]
 8018f40:	466d      	mov	r5, sp
 8018f42:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8018f46:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018f4a:	6803      	ldr	r3, [r0, #0]
 8018f4c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8018f50:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018f54:	4629      	mov	r1, r5
 8018f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018f58:	4798      	blx	r3
 8018f5a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018f5e:	e884 0003 	stmia.w	r4, {r0, r1}
 8018f62:	4620      	mov	r0, r4
 8018f64:	b003      	add	sp, #12
 8018f66:	bd30      	pop	{r4, r5, pc}

08018f68 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8018f68:	b513      	push	{r0, r1, r4, lr}
 8018f6a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8018f6e:	4604      	mov	r4, r0
 8018f70:	3301      	adds	r3, #1
 8018f72:	d109      	bne.n	8018f88 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8018f74:	4601      	mov	r1, r0
 8018f76:	4668      	mov	r0, sp
 8018f78:	f7ff fe12 	bl	8018ba0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018f7c:	f8bd 3000 	ldrh.w	r3, [sp]
 8018f80:	8423      	strh	r3, [r4, #32]
 8018f82:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018f86:	8463      	strh	r3, [r4, #34]	; 0x22
 8018f88:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8018f8c:	b002      	add	sp, #8
 8018f8e:	bd10      	pop	{r4, pc}

08018f90 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8018f90:	b513      	push	{r0, r1, r4, lr}
 8018f92:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8018f96:	4604      	mov	r4, r0
 8018f98:	3301      	adds	r3, #1
 8018f9a:	d109      	bne.n	8018fb0 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8018f9c:	4601      	mov	r1, r0
 8018f9e:	4668      	mov	r0, sp
 8018fa0:	f7ff fdfe 	bl	8018ba0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018fa4:	f8bd 3000 	ldrh.w	r3, [sp]
 8018fa8:	8423      	strh	r3, [r4, #32]
 8018faa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018fae:	8463      	strh	r3, [r4, #34]	; 0x22
 8018fb0:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8018fb4:	b002      	add	sp, #8
 8018fb6:	bd10      	pop	{r4, pc}

08018fb8 <_ZN8touchgfx6ScreenC1Ev>:
 8018fb8:	b570      	push	{r4, r5, r6, lr}
 8018fba:	4605      	mov	r5, r0
 8018fbc:	4b16      	ldr	r3, [pc, #88]	; (8019018 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8018fbe:	2101      	movs	r1, #1
 8018fc0:	f845 3b04 	str.w	r3, [r5], #4
 8018fc4:	2300      	movs	r3, #0
 8018fc6:	4604      	mov	r4, r0
 8018fc8:	8103      	strh	r3, [r0, #8]
 8018fca:	8143      	strh	r3, [r0, #10]
 8018fcc:	8183      	strh	r3, [r0, #12]
 8018fce:	81c3      	strh	r3, [r0, #14]
 8018fd0:	8203      	strh	r3, [r0, #16]
 8018fd2:	8243      	strh	r3, [r0, #18]
 8018fd4:	8283      	strh	r3, [r0, #20]
 8018fd6:	82c3      	strh	r3, [r0, #22]
 8018fd8:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8018fdc:	6203      	str	r3, [r0, #32]
 8018fde:	8483      	strh	r3, [r0, #36]	; 0x24
 8018fe0:	84c3      	strh	r3, [r0, #38]	; 0x26
 8018fe2:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8018fe6:	4a0d      	ldr	r2, [pc, #52]	; (801901c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8018fe8:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8018fec:	6343      	str	r3, [r0, #52]	; 0x34
 8018fee:	4b0c      	ldr	r3, [pc, #48]	; (8019020 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8018ff0:	6042      	str	r2, [r0, #4]
 8018ff2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018ff6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8018ff8:	4a0a      	ldr	r2, [pc, #40]	; (8019024 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8018ffa:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8018ffe:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8019002:	f9b2 1000 	ldrsh.w	r1, [r2]
 8019006:	4628      	mov	r0, r5
 8019008:	4798      	blx	r3
 801900a:	6863      	ldr	r3, [r4, #4]
 801900c:	4628      	mov	r0, r5
 801900e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019010:	4631      	mov	r1, r6
 8019012:	4798      	blx	r3
 8019014:	4620      	mov	r0, r4
 8019016:	bd70      	pop	{r4, r5, r6, pc}
 8019018:	0802aac0 	.word	0x0802aac0
 801901c:	0802a8b0 	.word	0x0802a8b0
 8019020:	2019794e 	.word	0x2019794e
 8019024:	2019794c 	.word	0x2019794c

08019028 <_ZN8touchgfx6Screen4drawEv>:
 8019028:	b507      	push	{r0, r1, r2, lr}
 801902a:	2100      	movs	r1, #0
 801902c:	4b08      	ldr	r3, [pc, #32]	; (8019050 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801902e:	9100      	str	r1, [sp, #0]
 8019030:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019034:	4b07      	ldr	r3, [pc, #28]	; (8019054 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8019036:	f8ad 2004 	strh.w	r2, [sp, #4]
 801903a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801903e:	4669      	mov	r1, sp
 8019040:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019044:	6803      	ldr	r3, [r0, #0]
 8019046:	689b      	ldr	r3, [r3, #8]
 8019048:	4798      	blx	r3
 801904a:	b003      	add	sp, #12
 801904c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019050:	2019794c 	.word	0x2019794c
 8019054:	2019794e 	.word	0x2019794e

08019058 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8019058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801905c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8019060:	b089      	sub	sp, #36	; 0x24
 8019062:	2b00      	cmp	r3, #0
 8019064:	4680      	mov	r8, r0
 8019066:	460c      	mov	r4, r1
 8019068:	4615      	mov	r5, r2
 801906a:	dd0e      	ble.n	801908a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801906c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8019070:	2b00      	cmp	r3, #0
 8019072:	dd0a      	ble.n	801908a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019074:	4628      	mov	r0, r5
 8019076:	f7ff ff5b 	bl	8018f30 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801907a:	4621      	mov	r1, r4
 801907c:	f7fe fbd1 	bl	8017822 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019080:	69eb      	ldr	r3, [r5, #28]
 8019082:	b928      	cbnz	r0, 8019090 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8019084:	461d      	mov	r5, r3
 8019086:	2b00      	cmp	r3, #0
 8019088:	d1f4      	bne.n	8019074 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801908a:	b009      	add	sp, #36	; 0x24
 801908c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019090:	ae04      	add	r6, sp, #16
 8019092:	2b00      	cmp	r3, #0
 8019094:	f000 80b5 	beq.w	8019202 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8019098:	682b      	ldr	r3, [r5, #0]
 801909a:	4629      	mov	r1, r5
 801909c:	68db      	ldr	r3, [r3, #12]
 801909e:	a802      	add	r0, sp, #8
 80190a0:	4798      	blx	r3
 80190a2:	4628      	mov	r0, r5
 80190a4:	f7ff ff60 	bl	8018f68 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80190a8:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 80190ac:	4407      	add	r7, r0
 80190ae:	4628      	mov	r0, r5
 80190b0:	f7ff ff6e 	bl	8018f90 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80190b4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80190b8:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80190bc:	4418      	add	r0, r3
 80190be:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80190c2:	4621      	mov	r1, r4
 80190c4:	f8ad 0012 	strh.w	r0, [sp, #18]
 80190c8:	b23f      	sxth	r7, r7
 80190ca:	4630      	mov	r0, r6
 80190cc:	f8ad 2014 	strh.w	r2, [sp, #20]
 80190d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80190d4:	f8ad 7010 	strh.w	r7, [sp, #16]
 80190d8:	f7fc fbfc 	bl	80158d4 <_ZN8touchgfx4RectaNERKS0_>
 80190dc:	4628      	mov	r0, r5
 80190de:	f7ff ff27 	bl	8018f30 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80190e2:	4602      	mov	r2, r0
 80190e4:	e896 0003 	ldmia.w	r6, {r0, r1}
 80190e8:	ab06      	add	r3, sp, #24
 80190ea:	e883 0003 	stmia.w	r3, {r0, r1}
 80190ee:	4611      	mov	r1, r2
 80190f0:	4618      	mov	r0, r3
 80190f2:	f7fc fbef 	bl	80158d4 <_ZN8touchgfx4RectaNERKS0_>
 80190f6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80190fa:	f9b4 1000 	ldrsh.w	r1, [r4]
 80190fe:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8019102:	4299      	cmp	r1, r3
 8019104:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8019108:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801910c:	d10b      	bne.n	8019126 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801910e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8019112:	4552      	cmp	r2, sl
 8019114:	d107      	bne.n	8019126 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8019116:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801911a:	455a      	cmp	r2, fp
 801911c:	d103      	bne.n	8019126 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801911e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8019122:	454a      	cmp	r2, r9
 8019124:	d06d      	beq.n	8019202 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8019126:	f1bb 0f00 	cmp.w	fp, #0
 801912a:	dd65      	ble.n	80191f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801912c:	f1b9 0f00 	cmp.w	r9, #0
 8019130:	dd62      	ble.n	80191f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8019132:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8019136:	fa1f f08a 	uxth.w	r0, sl
 801913a:	4552      	cmp	r2, sl
 801913c:	9000      	str	r0, [sp, #0]
 801913e:	da12      	bge.n	8019166 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8019140:	9301      	str	r3, [sp, #4]
 8019142:	9b00      	ldr	r3, [sp, #0]
 8019144:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8019148:	f8ad 2012 	strh.w	r2, [sp, #18]
 801914c:	1a9a      	subs	r2, r3, r2
 801914e:	f8ad 1010 	strh.w	r1, [sp, #16]
 8019152:	f8ad 0014 	strh.w	r0, [sp, #20]
 8019156:	f8ad 2016 	strh.w	r2, [sp, #22]
 801915a:	69ea      	ldr	r2, [r5, #28]
 801915c:	4631      	mov	r1, r6
 801915e:	4640      	mov	r0, r8
 8019160:	f7ff ff7a 	bl	8019058 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019164:	9b01      	ldr	r3, [sp, #4]
 8019166:	f9b4 2000 	ldrsh.w	r2, [r4]
 801916a:	b29f      	uxth	r7, r3
 801916c:	429a      	cmp	r2, r3
 801916e:	da0d      	bge.n	801918c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8019170:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019174:	1aba      	subs	r2, r7, r2
 8019176:	f8ad a012 	strh.w	sl, [sp, #18]
 801917a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801917e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8019182:	69ea      	ldr	r2, [r5, #28]
 8019184:	4631      	mov	r1, r6
 8019186:	4640      	mov	r0, r8
 8019188:	f7ff ff66 	bl	8019058 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801918c:	8822      	ldrh	r2, [r4, #0]
 801918e:	88a3      	ldrh	r3, [r4, #4]
 8019190:	445f      	add	r7, fp
 8019192:	4413      	add	r3, r2
 8019194:	b29b      	uxth	r3, r3
 8019196:	b2bf      	uxth	r7, r7
 8019198:	b23a      	sxth	r2, r7
 801919a:	b219      	sxth	r1, r3
 801919c:	4291      	cmp	r1, r2
 801919e:	dd0d      	ble.n	80191bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 80191a0:	1bdb      	subs	r3, r3, r7
 80191a2:	f8ad 2010 	strh.w	r2, [sp, #16]
 80191a6:	f8ad a012 	strh.w	sl, [sp, #18]
 80191aa:	f8ad 3014 	strh.w	r3, [sp, #20]
 80191ae:	f8ad 9016 	strh.w	r9, [sp, #22]
 80191b2:	69ea      	ldr	r2, [r5, #28]
 80191b4:	4631      	mov	r1, r6
 80191b6:	4640      	mov	r0, r8
 80191b8:	f7ff ff4e 	bl	8019058 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80191bc:	88e2      	ldrh	r2, [r4, #6]
 80191be:	8863      	ldrh	r3, [r4, #2]
 80191c0:	4413      	add	r3, r2
 80191c2:	9a00      	ldr	r2, [sp, #0]
 80191c4:	b29b      	uxth	r3, r3
 80191c6:	444a      	add	r2, r9
 80191c8:	fa1f f982 	uxth.w	r9, r2
 80191cc:	fa0f f289 	sxth.w	r2, r9
 80191d0:	b219      	sxth	r1, r3
 80191d2:	428a      	cmp	r2, r1
 80191d4:	da15      	bge.n	8019202 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80191d6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80191da:	f9b4 0000 	ldrsh.w	r0, [r4]
 80191de:	eba3 0309 	sub.w	r3, r3, r9
 80191e2:	f8ad 1014 	strh.w	r1, [sp, #20]
 80191e6:	f8ad 0010 	strh.w	r0, [sp, #16]
 80191ea:	f8ad 2012 	strh.w	r2, [sp, #18]
 80191ee:	f8ad 3016 	strh.w	r3, [sp, #22]
 80191f2:	69ea      	ldr	r2, [r5, #28]
 80191f4:	4631      	mov	r1, r6
 80191f6:	e001      	b.n	80191fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 80191f8:	4621      	mov	r1, r4
 80191fa:	69ea      	ldr	r2, [r5, #28]
 80191fc:	4640      	mov	r0, r8
 80191fe:	f7ff ff2b 	bl	8019058 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019202:	4628      	mov	r0, r5
 8019204:	f7ff fe94 	bl	8018f30 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019208:	4633      	mov	r3, r6
 801920a:	4602      	mov	r2, r0
 801920c:	6861      	ldr	r1, [r4, #4]
 801920e:	6820      	ldr	r0, [r4, #0]
 8019210:	c303      	stmia	r3!, {r0, r1}
 8019212:	4611      	mov	r1, r2
 8019214:	4630      	mov	r0, r6
 8019216:	f7fc fb5d 	bl	80158d4 <_ZN8touchgfx4RectaNERKS0_>
 801921a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801921e:	2b00      	cmp	r3, #0
 8019220:	f77f af33 	ble.w	801908a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019224:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8019228:	2b00      	cmp	r3, #0
 801922a:	f77f af2e 	ble.w	801908a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801922e:	4628      	mov	r0, r5
 8019230:	f7ff fe9a 	bl	8018f68 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8019234:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8019238:	1a18      	subs	r0, r3, r0
 801923a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801923e:	4628      	mov	r0, r5
 8019240:	f7ff fea6 	bl	8018f90 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8019244:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8019248:	4631      	mov	r1, r6
 801924a:	1a18      	subs	r0, r3, r0
 801924c:	f8ad 0012 	strh.w	r0, [sp, #18]
 8019250:	682b      	ldr	r3, [r5, #0]
 8019252:	4628      	mov	r0, r5
 8019254:	689b      	ldr	r3, [r3, #8]
 8019256:	4798      	blx	r3
 8019258:	e717      	b.n	801908a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801925a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801925a:	b570      	push	{r4, r5, r6, lr}
 801925c:	2300      	movs	r3, #0
 801925e:	460c      	mov	r4, r1
 8019260:	b086      	sub	sp, #24
 8019262:	1d06      	adds	r6, r0, #4
 8019264:	4631      	mov	r1, r6
 8019266:	4605      	mov	r5, r0
 8019268:	a802      	add	r0, sp, #8
 801926a:	9301      	str	r3, [sp, #4]
 801926c:	f7ff fc98 	bl	8018ba0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019270:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019274:	8822      	ldrh	r2, [r4, #0]
 8019276:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801927a:	1ad2      	subs	r2, r2, r3
 801927c:	8863      	ldrh	r3, [r4, #2]
 801927e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8019282:	1a5b      	subs	r3, r3, r1
 8019284:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8019288:	f8ad 2010 	strh.w	r2, [sp, #16]
 801928c:	f8ad 0014 	strh.w	r0, [sp, #20]
 8019290:	f8ad 1016 	strh.w	r1, [sp, #22]
 8019294:	aa01      	add	r2, sp, #4
 8019296:	a904      	add	r1, sp, #16
 8019298:	4630      	mov	r0, r6
 801929a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801929e:	f7fc fbf1 	bl	8015a84 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80192a2:	9a01      	ldr	r2, [sp, #4]
 80192a4:	b11a      	cbz	r2, 80192ae <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 80192a6:	4621      	mov	r1, r4
 80192a8:	4628      	mov	r0, r5
 80192aa:	f7ff fed5 	bl	8019058 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80192ae:	b006      	add	sp, #24
 80192b0:	bd70      	pop	{r4, r5, r6, pc}

080192b2 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80192b2:	b530      	push	{r4, r5, lr}
 80192b4:	4602      	mov	r2, r0
 80192b6:	b085      	sub	sp, #20
 80192b8:	460d      	mov	r5, r1
 80192ba:	466b      	mov	r3, sp
 80192bc:	4604      	mov	r4, r0
 80192be:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80192c2:	6851      	ldr	r1, [r2, #4]
 80192c4:	c303      	stmia	r3!, {r0, r1}
 80192c6:	4629      	mov	r1, r5
 80192c8:	4668      	mov	r0, sp
 80192ca:	f7fc fb03 	bl	80158d4 <_ZN8touchgfx4RectaNERKS0_>
 80192ce:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80192d2:	b12b      	cbz	r3, 80192e0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 80192d4:	4669      	mov	r1, sp
 80192d6:	4620      	mov	r0, r4
 80192d8:	f7ff ffbf 	bl	801925a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 80192dc:	b005      	add	sp, #20
 80192de:	bd30      	pop	{r4, r5, pc}
 80192e0:	3404      	adds	r4, #4
 80192e2:	4621      	mov	r1, r4
 80192e4:	a802      	add	r0, sp, #8
 80192e6:	f7ff fc5b 	bl	8018ba0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80192ea:	f8bd 3000 	ldrh.w	r3, [sp]
 80192ee:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80192f2:	4669      	mov	r1, sp
 80192f4:	1a9b      	subs	r3, r3, r2
 80192f6:	f8ad 3000 	strh.w	r3, [sp]
 80192fa:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80192fe:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019302:	4620      	mov	r0, r4
 8019304:	1a9b      	subs	r3, r3, r2
 8019306:	f8ad 3002 	strh.w	r3, [sp, #2]
 801930a:	f7fc fb82 	bl	8015a12 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801930e:	e7e5      	b.n	80192dc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08019310 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8019310:	460b      	mov	r3, r1
 8019312:	680a      	ldr	r2, [r1, #0]
 8019314:	1d01      	adds	r1, r0, #4
 8019316:	6992      	ldr	r2, [r2, #24]
 8019318:	4618      	mov	r0, r3
 801931a:	4710      	bx	r2

0801931c <_ZN8touchgfx12TextProviderC1Ev>:
 801931c:	b538      	push	{r3, r4, r5, lr}
 801931e:	2500      	movs	r5, #0
 8019320:	2302      	movs	r3, #2
 8019322:	4604      	mov	r4, r0
 8019324:	e9c0 5500 	strd	r5, r5, [r0]
 8019328:	7403      	strb	r3, [r0, #16]
 801932a:	6145      	str	r5, [r0, #20]
 801932c:	7605      	strb	r5, [r0, #24]
 801932e:	83c5      	strh	r5, [r0, #30]
 8019330:	8405      	strh	r5, [r0, #32]
 8019332:	86c5      	strh	r5, [r0, #54]	; 0x36
 8019334:	8705      	strh	r5, [r0, #56]	; 0x38
 8019336:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8019338:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801933c:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8019340:	220e      	movs	r2, #14
 8019342:	4629      	mov	r1, r5
 8019344:	304c      	adds	r0, #76	; 0x4c
 8019346:	f00e ff11 	bl	802816c <memset>
 801934a:	2301      	movs	r3, #1
 801934c:	4620      	mov	r0, r4
 801934e:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8019352:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8019356:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801935a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801935e:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8019362:	f7ea f895 	bl	8003490 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8019366:	4620      	mov	r0, r4
 8019368:	bd38      	pop	{r3, r4, r5, pc}

0801936a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801936a:	b530      	push	{r4, r5, lr}
 801936c:	2500      	movs	r5, #0
 801936e:	2401      	movs	r4, #1
 8019370:	6843      	ldr	r3, [r0, #4]
 8019372:	b913      	cbnz	r3, 801937a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8019374:	6803      	ldr	r3, [r0, #0]
 8019376:	b313      	cbz	r3, 80193be <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8019378:	6043      	str	r3, [r0, #4]
 801937a:	7e03      	ldrb	r3, [r0, #24]
 801937c:	b143      	cbz	r3, 8019390 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801937e:	6943      	ldr	r3, [r0, #20]
 8019380:	b12b      	cbz	r3, 801938e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8019382:	881a      	ldrh	r2, [r3, #0]
 8019384:	b11a      	cbz	r2, 801938e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8019386:	1c9a      	adds	r2, r3, #2
 8019388:	6142      	str	r2, [r0, #20]
 801938a:	8818      	ldrh	r0, [r3, #0]
 801938c:	bd30      	pop	{r4, r5, pc}
 801938e:	7605      	strb	r5, [r0, #24]
 8019390:	6843      	ldr	r3, [r0, #4]
 8019392:	8819      	ldrh	r1, [r3, #0]
 8019394:	b199      	cbz	r1, 80193be <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8019396:	1c9a      	adds	r2, r3, #2
 8019398:	2902      	cmp	r1, #2
 801939a:	6042      	str	r2, [r0, #4]
 801939c:	d1f5      	bne.n	801938a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801939e:	7c03      	ldrb	r3, [r0, #16]
 80193a0:	2b01      	cmp	r3, #1
 80193a2:	d8e5      	bhi.n	8019370 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80193a4:	1c5a      	adds	r2, r3, #1
 80193a6:	7402      	strb	r2, [r0, #16]
 80193a8:	3302      	adds	r3, #2
 80193aa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80193ae:	6143      	str	r3, [r0, #20]
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	d0dd      	beq.n	8019370 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80193b4:	881b      	ldrh	r3, [r3, #0]
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	d0da      	beq.n	8019370 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80193ba:	7604      	strb	r4, [r0, #24]
 80193bc:	e7d8      	b.n	8019370 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80193be:	2000      	movs	r0, #0
 80193c0:	e7e4      	b.n	801938c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080193c2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 80193c2:	6001      	str	r1, [r0, #0]
 80193c4:	2100      	movs	r1, #0
 80193c6:	b430      	push	{r4, r5}
 80193c8:	6041      	str	r1, [r0, #4]
 80193ca:	6815      	ldr	r5, [r2, #0]
 80193cc:	6085      	str	r5, [r0, #8]
 80193ce:	6852      	ldr	r2, [r2, #4]
 80193d0:	6443      	str	r3, [r0, #68]	; 0x44
 80193d2:	9b02      	ldr	r3, [sp, #8]
 80193d4:	60c2      	str	r2, [r0, #12]
 80193d6:	7401      	strb	r1, [r0, #16]
 80193d8:	6141      	str	r1, [r0, #20]
 80193da:	7601      	strb	r1, [r0, #24]
 80193dc:	8701      	strh	r1, [r0, #56]	; 0x38
 80193de:	8401      	strh	r1, [r0, #32]
 80193e0:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80193e4:	6483      	str	r3, [r0, #72]	; 0x48
 80193e6:	bc30      	pop	{r4, r5}
 80193e8:	f7ea b852 	b.w	8003490 <_ZN8touchgfx12TextProvider18initializeInternalEv>

080193ec <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80193ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80193ee:	4605      	mov	r5, r0
 80193f0:	4608      	mov	r0, r1
 80193f2:	b1e9      	cbz	r1, 8019430 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 80193f4:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 80193f8:	460b      	mov	r3, r1
 80193fa:	4622      	mov	r2, r4
 80193fc:	f101 0708 	add.w	r7, r1, #8
 8019400:	4626      	mov	r6, r4
 8019402:	6818      	ldr	r0, [r3, #0]
 8019404:	6859      	ldr	r1, [r3, #4]
 8019406:	3308      	adds	r3, #8
 8019408:	c603      	stmia	r6!, {r0, r1}
 801940a:	42bb      	cmp	r3, r7
 801940c:	4634      	mov	r4, r6
 801940e:	d1f7      	bne.n	8019400 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8019410:	6818      	ldr	r0, [r3, #0]
 8019412:	6030      	str	r0, [r6, #0]
 8019414:	4610      	mov	r0, r2
 8019416:	889b      	ldrh	r3, [r3, #4]
 8019418:	80b3      	strh	r3, [r6, #4]
 801941a:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801941e:	015b      	lsls	r3, r3, #5
 8019420:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019424:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8019428:	430b      	orrs	r3, r1
 801942a:	425b      	negs	r3, r3
 801942c:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8019430:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019432 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8019432:	b538      	push	{r3, r4, r5, lr}
 8019434:	460c      	mov	r4, r1
 8019436:	6811      	ldr	r1, [r2, #0]
 8019438:	4610      	mov	r0, r2
 801943a:	68cd      	ldr	r5, [r1, #12]
 801943c:	4619      	mov	r1, r3
 801943e:	47a8      	blx	r5
 8019440:	2800      	cmp	r0, #0
 8019442:	bf08      	it	eq
 8019444:	4620      	moveq	r0, r4
 8019446:	bd38      	pop	{r3, r4, r5, pc}

08019448 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8019448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801944a:	4604      	mov	r4, r0
 801944c:	4615      	mov	r5, r2
 801944e:	4608      	mov	r0, r1
 8019450:	b93a      	cbnz	r2, 8019462 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8019452:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8019456:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801945a:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801945e:	4628      	mov	r0, r5
 8019460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019462:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 8019466:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801946a:	8893      	ldrh	r3, [r2, #4]
 801946c:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8019470:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8019474:	79ee      	ldrb	r6, [r5, #7]
 8019476:	4316      	orrs	r6, r2
 8019478:	19da      	adds	r2, r3, r7
 801947a:	b291      	uxth	r1, r2
 801947c:	291d      	cmp	r1, #29
 801947e:	b2b7      	uxth	r7, r6
 8019480:	d879      	bhi.n	8019576 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 8019482:	2201      	movs	r2, #1
 8019484:	408a      	lsls	r2, r1
 8019486:	4974      	ldr	r1, [pc, #464]	; (8019658 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x210>)
 8019488:	10f6      	asrs	r6, r6, #3
 801948a:	420a      	tst	r2, r1
 801948c:	d12d      	bne.n	80194ea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa2>
 801948e:	f412 7f60 	tst.w	r2, #896	; 0x380
 8019492:	d070      	beq.n	8019576 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 8019494:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8019498:	462b      	mov	r3, r5
 801949a:	f105 0e08 	add.w	lr, r5, #8
 801949e:	4615      	mov	r5, r2
 80194a0:	4694      	mov	ip, r2
 80194a2:	6818      	ldr	r0, [r3, #0]
 80194a4:	6859      	ldr	r1, [r3, #4]
 80194a6:	3308      	adds	r3, #8
 80194a8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80194ac:	4573      	cmp	r3, lr
 80194ae:	4662      	mov	r2, ip
 80194b0:	d1f6      	bne.n	80194a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 80194b2:	6818      	ldr	r0, [r3, #0]
 80194b4:	f8cc 0000 	str.w	r0, [ip]
 80194b8:	889b      	ldrh	r3, [r3, #4]
 80194ba:	f8ac 3004 	strh.w	r3, [ip, #4]
 80194be:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80194c2:	b2b3      	uxth	r3, r6
 80194c4:	1aca      	subs	r2, r1, r3
 80194c6:	b292      	uxth	r2, r2
 80194c8:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 80194cc:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 80194d0:	10d2      	asrs	r2, r2, #3
 80194d2:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 80194d6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80194da:	4302      	orrs	r2, r0
 80194dc:	1bcf      	subs	r7, r1, r7
 80194de:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 80194e2:	1afb      	subs	r3, r7, r3
 80194e4:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80194e8:	e7b9      	b.n	801945e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80194ea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80194ec:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80194f0:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 80194f2:	f640 6333 	movw	r3, #3635	; 0xe33
 80194f6:	4299      	cmp	r1, r3
 80194f8:	d110      	bne.n	801951c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd4>
 80194fa:	6803      	ldr	r3, [r0, #0]
 80194fc:	68db      	ldr	r3, [r3, #12]
 80194fe:	4798      	blx	r3
 8019500:	7b41      	ldrb	r1, [r0, #13]
 8019502:	00cb      	lsls	r3, r1, #3
 8019504:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019508:	7a03      	ldrb	r3, [r0, #8]
 801950a:	0648      	lsls	r0, r1, #25
 801950c:	ea43 0302 	orr.w	r3, r3, r2
 8019510:	bf44      	itt	mi
 8019512:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019516:	b21b      	sxthmi	r3, r3
 8019518:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801951c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8019520:	462a      	mov	r2, r5
 8019522:	443b      	add	r3, r7
 8019524:	4433      	add	r3, r6
 8019526:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801952a:	f105 0c08 	add.w	ip, r5, #8
 801952e:	4635      	mov	r5, r6
 8019530:	b29b      	uxth	r3, r3
 8019532:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019536:	4637      	mov	r7, r6
 8019538:	6810      	ldr	r0, [r2, #0]
 801953a:	6851      	ldr	r1, [r2, #4]
 801953c:	3208      	adds	r2, #8
 801953e:	c703      	stmia	r7!, {r0, r1}
 8019540:	4562      	cmp	r2, ip
 8019542:	463e      	mov	r6, r7
 8019544:	d1f7      	bne.n	8019536 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xee>
 8019546:	6810      	ldr	r0, [r2, #0]
 8019548:	6038      	str	r0, [r7, #0]
 801954a:	8892      	ldrh	r2, [r2, #4]
 801954c:	80ba      	strh	r2, [r7, #4]
 801954e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8019552:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8019556:	10db      	asrs	r3, r3, #3
 8019558:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801955c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019560:	4313      	orrs	r3, r2
 8019562:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8019566:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801956a:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801956e:	1a9b      	subs	r3, r3, r2
 8019570:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8019574:	e773      	b.n	801945e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8019576:	f640 611b 	movw	r1, #3611	; 0xe1b
 801957a:	f023 0204 	bic.w	r2, r3, #4
 801957e:	428a      	cmp	r2, r1
 8019580:	d003      	beq.n	801958a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 8019582:	f640 621d 	movw	r2, #3613	; 0xe1d
 8019586:	4293      	cmp	r3, r2
 8019588:	d120      	bne.n	80195cc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x184>
 801958a:	3b01      	subs	r3, #1
 801958c:	4602      	mov	r2, r0
 801958e:	b29b      	uxth	r3, r3
 8019590:	4629      	mov	r1, r5
 8019592:	4620      	mov	r0, r4
 8019594:	f7ff ff4d 	bl	8019432 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019598:	7b41      	ldrb	r1, [r0, #13]
 801959a:	00cb      	lsls	r3, r1, #3
 801959c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80195a0:	7a03      	ldrb	r3, [r0, #8]
 80195a2:	0649      	lsls	r1, r1, #25
 80195a4:	ea43 0302 	orr.w	r3, r3, r2
 80195a8:	bf44      	itt	mi
 80195aa:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80195ae:	b21b      	sxthmi	r3, r3
 80195b0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80195b4:	7b6b      	ldrb	r3, [r5, #13]
 80195b6:	7aaa      	ldrb	r2, [r5, #10]
 80195b8:	005b      	lsls	r3, r3, #1
 80195ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80195be:	4313      	orrs	r3, r2
 80195c0:	115a      	asrs	r2, r3, #5
 80195c2:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80195c6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80195ca:	e036      	b.n	801963a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f2>
 80195cc:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 80195d0:	f402 7180 	and.w	r1, r2, #256	; 0x100
 80195d4:	7a2a      	ldrb	r2, [r5, #8]
 80195d6:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80195da:	ea42 0201 	orr.w	r2, r2, r1
 80195de:	f640 6109 	movw	r1, #3593	; 0xe09
 80195e2:	bf1c      	itt	ne
 80195e4:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 80195e8:	b212      	sxthne	r2, r2
 80195ea:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80195ee:	f023 0210 	bic.w	r2, r3, #16
 80195f2:	428a      	cmp	r2, r1
 80195f4:	d003      	beq.n	80195fe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b6>
 80195f6:	f640 6213 	movw	r2, #3603	; 0xe13
 80195fa:	4293      	cmp	r3, r2
 80195fc:	d12a      	bne.n	8019654 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20c>
 80195fe:	7b6e      	ldrb	r6, [r5, #13]
 8019600:	4629      	mov	r1, r5
 8019602:	0076      	lsls	r6, r6, #1
 8019604:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8019608:	7aae      	ldrb	r6, [r5, #10]
 801960a:	4316      	orrs	r6, r2
 801960c:	f640 6213 	movw	r2, #3603	; 0xe13
 8019610:	4293      	cmp	r3, r2
 8019612:	bf18      	it	ne
 8019614:	f103 33ff 	addne.w	r3, r3, #4294967295
 8019618:	4602      	mov	r2, r0
 801961a:	bf14      	ite	ne
 801961c:	b29b      	uxthne	r3, r3
 801961e:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8019622:	4620      	mov	r0, r4
 8019624:	f7ff ff05 	bl	8019432 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019628:	7b43      	ldrb	r3, [r0, #13]
 801962a:	7a82      	ldrb	r2, [r0, #10]
 801962c:	005b      	lsls	r3, r3, #1
 801962e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019632:	4313      	orrs	r3, r2
 8019634:	1af6      	subs	r6, r6, r3
 8019636:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801963a:	7b69      	ldrb	r1, [r5, #13]
 801963c:	00cb      	lsls	r3, r1, #3
 801963e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019642:	7a2b      	ldrb	r3, [r5, #8]
 8019644:	4313      	orrs	r3, r2
 8019646:	064a      	lsls	r2, r1, #25
 8019648:	bf44      	itt	mi
 801964a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801964e:	b21b      	sxthmi	r3, r3
 8019650:	1bdb      	subs	r3, r3, r7
 8019652:	e747      	b.n	80194e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9c>
 8019654:	2300      	movs	r3, #0
 8019656:	e7b6      	b.n	80195c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x17e>
 8019658:	3fc00079 	.word	0x3fc00079

0801965c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801965c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019660:	4604      	mov	r4, r0
 8019662:	b942      	cbnz	r2, 8019676 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8019664:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019668:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801966c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8019670:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8019674:	e047      	b.n	8019706 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8019676:	7b51      	ldrb	r1, [r2, #13]
 8019678:	8893      	ldrh	r3, [r2, #4]
 801967a:	010d      	lsls	r5, r1, #4
 801967c:	f405 7080 	and.w	r0, r5, #256	; 0x100
 8019680:	79d5      	ldrb	r5, [r2, #7]
 8019682:	4305      	orrs	r5, r0
 8019684:	2d04      	cmp	r5, #4
 8019686:	bfcc      	ite	gt
 8019688:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801968c:	f04f 0e01 	movle.w	lr, #1
 8019690:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8019694:	f200 80ab 	bhi.w	80197ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8019698:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801969c:	4283      	cmp	r3, r0
 801969e:	d216      	bcs.n	80196ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80196a0:	f240 605b 	movw	r0, #1627	; 0x65b
 80196a4:	4283      	cmp	r3, r0
 80196a6:	d859      	bhi.n	801975c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 80196a8:	f240 6057 	movw	r0, #1623	; 0x657
 80196ac:	4283      	cmp	r3, r0
 80196ae:	d20e      	bcs.n	80196ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80196b0:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80196b4:	d24a      	bcs.n	801974c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 80196b6:	f240 604e 	movw	r0, #1614	; 0x64e
 80196ba:	4283      	cmp	r3, r0
 80196bc:	d207      	bcs.n	80196ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80196be:	f240 601a 	movw	r0, #1562	; 0x61a
 80196c2:	4283      	cmp	r3, r0
 80196c4:	d02a      	beq.n	801971c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80196c6:	d821      	bhi.n	801970c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 80196c8:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 80196cc:	d35b      	bcc.n	8019786 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80196ce:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 80196d2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80196d6:	f040 80d0 	bne.w	801987a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80196da:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 80196de:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80196e2:	f040 80ca 	bne.w	801987a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80196e6:	00cb      	lsls	r3, r1, #3
 80196e8:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80196ec:	7a13      	ldrb	r3, [r2, #8]
 80196ee:	0649      	lsls	r1, r1, #25
 80196f0:	ea43 0300 	orr.w	r3, r3, r0
 80196f4:	bf44      	itt	mi
 80196f6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80196fa:	b21b      	sxthmi	r3, r3
 80196fc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019700:	1b5d      	subs	r5, r3, r5
 8019702:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8019706:	4610      	mov	r0, r2
 8019708:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801970c:	f240 604b 	movw	r0, #1611	; 0x64b
 8019710:	4283      	cmp	r3, r0
 8019712:	d338      	bcc.n	8019786 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019714:	f240 604c 	movw	r0, #1612	; 0x64c
 8019718:	4283      	cmp	r3, r0
 801971a:	d9d8      	bls.n	80196ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801971c:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8019720:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8019724:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019728:	f040 80f2 	bne.w	8019910 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801972c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8019730:	f040 80ee 	bne.w	8019910 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8019734:	00cb      	lsls	r3, r1, #3
 8019736:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801973a:	7a13      	ldrb	r3, [r2, #8]
 801973c:	064e      	lsls	r6, r1, #25
 801973e:	ea43 0300 	orr.w	r3, r3, r0
 8019742:	bf44      	itt	mi
 8019744:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019748:	b21b      	sxthmi	r3, r3
 801974a:	e7d9      	b.n	8019700 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801974c:	f240 6054 	movw	r0, #1620	; 0x654
 8019750:	4283      	cmp	r3, r0
 8019752:	d8e3      	bhi.n	801971c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019754:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8019758:	d9e0      	bls.n	801971c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801975a:	e7b8      	b.n	80196ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801975c:	f240 6074 	movw	r0, #1652	; 0x674
 8019760:	4283      	cmp	r3, r0
 8019762:	d0b4      	beq.n	80196ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019764:	d82d      	bhi.n	80197c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8019766:	f240 605e 	movw	r0, #1630	; 0x65e
 801976a:	4283      	cmp	r3, r0
 801976c:	d804      	bhi.n	8019778 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801976e:	f240 605d 	movw	r0, #1629	; 0x65d
 8019772:	4283      	cmp	r3, r0
 8019774:	d3d2      	bcc.n	801971c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019776:	e7aa      	b.n	80196ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019778:	f240 605f 	movw	r0, #1631	; 0x65f
 801977c:	4283      	cmp	r3, r0
 801977e:	d0cd      	beq.n	801971c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019780:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8019784:	d0a3      	beq.n	80196ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019786:	00cb      	lsls	r3, r1, #3
 8019788:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801978c:	7a13      	ldrb	r3, [r2, #8]
 801978e:	0649      	lsls	r1, r1, #25
 8019790:	ea43 0300 	orr.w	r3, r3, r0
 8019794:	bf44      	itt	mi
 8019796:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801979a:	b21b      	sxthmi	r3, r3
 801979c:	1b5d      	subs	r5, r3, r5
 801979e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80197a2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80197a6:	7b53      	ldrb	r3, [r2, #13]
 80197a8:	015b      	lsls	r3, r3, #5
 80197aa:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80197ae:	7993      	ldrb	r3, [r2, #6]
 80197b0:	430b      	orrs	r3, r1
 80197b2:	2105      	movs	r1, #5
 80197b4:	005b      	lsls	r3, r3, #1
 80197b6:	fb93 f3f1 	sdiv	r3, r3, r1
 80197ba:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80197be:	440b      	add	r3, r1
 80197c0:	e756      	b.n	8019670 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80197c2:	f240 60e2 	movw	r0, #1762	; 0x6e2
 80197c6:	4283      	cmp	r3, r0
 80197c8:	d809      	bhi.n	80197de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 80197ca:	f240 60df 	movw	r0, #1759	; 0x6df
 80197ce:	4283      	cmp	r3, r0
 80197d0:	f4bf af7d 	bcs.w	80196ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80197d4:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 80197d8:	2b05      	cmp	r3, #5
 80197da:	d8d4      	bhi.n	8019786 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80197dc:	e777      	b.n	80196ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80197de:	f240 60e3 	movw	r0, #1763	; 0x6e3
 80197e2:	4283      	cmp	r3, r0
 80197e4:	d09a      	beq.n	801971c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80197e6:	f240 60e4 	movw	r0, #1764	; 0x6e4
 80197ea:	4283      	cmp	r3, r0
 80197ec:	e7ca      	b.n	8019784 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80197ee:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 80197f2:	d22b      	bcs.n	801984c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 80197f4:	f640 00ed 	movw	r0, #2285	; 0x8ed
 80197f8:	4283      	cmp	r3, r0
 80197fa:	d28f      	bcs.n	801971c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80197fc:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8019800:	4283      	cmp	r3, r0
 8019802:	d816      	bhi.n	8019832 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8019804:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8019808:	4283      	cmp	r3, r0
 801980a:	f4bf af60 	bcs.w	80196ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801980e:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8019812:	4283      	cmp	r3, r0
 8019814:	d80a      	bhi.n	801982c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8019816:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801981a:	4283      	cmp	r3, r0
 801981c:	f4bf af57 	bcs.w	80196ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019820:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8019824:	4283      	cmp	r3, r0
 8019826:	f43f af79 	beq.w	801971c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801982a:	e7ac      	b.n	8019786 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801982c:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8019830:	e7f8      	b.n	8019824 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8019832:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8019836:	4283      	cmp	r3, r0
 8019838:	d802      	bhi.n	8019840 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801983a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801983e:	e798      	b.n	8019772 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8019840:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8019844:	4283      	cmp	r3, r0
 8019846:	f47f af42 	bne.w	80196ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801984a:	e767      	b.n	801971c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801984c:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8019850:	4283      	cmp	r3, r0
 8019852:	f43f af63 	beq.w	801971c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019856:	d802      	bhi.n	801985e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8019858:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801985c:	e7f2      	b.n	8019844 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801985e:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8019862:	4283      	cmp	r3, r0
 8019864:	d805      	bhi.n	8019872 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8019866:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801986a:	4283      	cmp	r3, r0
 801986c:	f4ff af2f 	bcc.w	80196ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019870:	e754      	b.n	801971c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019872:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8019876:	4283      	cmp	r3, r0
 8019878:	e7af      	b.n	80197da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801987a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801987e:	4617      	mov	r7, r2
 8019880:	4666      	mov	r6, ip
 8019882:	f102 0808 	add.w	r8, r2, #8
 8019886:	46e6      	mov	lr, ip
 8019888:	6838      	ldr	r0, [r7, #0]
 801988a:	6879      	ldr	r1, [r7, #4]
 801988c:	3708      	adds	r7, #8
 801988e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8019892:	4547      	cmp	r7, r8
 8019894:	46f4      	mov	ip, lr
 8019896:	d1f6      	bne.n	8019886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8019898:	6838      	ldr	r0, [r7, #0]
 801989a:	f8ce 0000 	str.w	r0, [lr]
 801989e:	88b9      	ldrh	r1, [r7, #4]
 80198a0:	f8ae 1004 	strh.w	r1, [lr, #4]
 80198a4:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80198a8:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80198ac:	d009      	beq.n	80198c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 80198ae:	7b51      	ldrb	r1, [r2, #13]
 80198b0:	7992      	ldrb	r2, [r2, #6]
 80198b2:	0149      	lsls	r1, r1, #5
 80198b4:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80198b8:	4311      	orrs	r1, r2
 80198ba:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80198be:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80198c2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80198c6:	b2ad      	uxth	r5, r5
 80198c8:	d00d      	beq.n	80198e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 80198ca:	442b      	add	r3, r5
 80198cc:	b29b      	uxth	r3, r3
 80198ce:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80198d2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80198d6:	10db      	asrs	r3, r3, #3
 80198d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80198dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80198e0:	4313      	orrs	r3, r2
 80198e2:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80198e6:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80198ea:	00cb      	lsls	r3, r1, #3
 80198ec:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80198f0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80198f4:	064f      	lsls	r7, r1, #25
 80198f6:	ea43 0302 	orr.w	r3, r3, r2
 80198fa:	bf44      	itt	mi
 80198fc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019900:	b21b      	sxthmi	r3, r3
 8019902:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019906:	1b5b      	subs	r3, r3, r5
 8019908:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801990c:	4632      	mov	r2, r6
 801990e:	e6fa      	b.n	8019706 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8019910:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8019914:	4617      	mov	r7, r2
 8019916:	4666      	mov	r6, ip
 8019918:	f102 0908 	add.w	r9, r2, #8
 801991c:	46e0      	mov	r8, ip
 801991e:	6838      	ldr	r0, [r7, #0]
 8019920:	6879      	ldr	r1, [r7, #4]
 8019922:	3708      	adds	r7, #8
 8019924:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8019928:	454f      	cmp	r7, r9
 801992a:	46c4      	mov	ip, r8
 801992c:	d1f6      	bne.n	801991c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 801992e:	6838      	ldr	r0, [r7, #0]
 8019930:	f8c8 0000 	str.w	r0, [r8]
 8019934:	88b9      	ldrh	r1, [r7, #4]
 8019936:	f8a8 1004 	strh.w	r1, [r8, #4]
 801993a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801993e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019942:	d009      	beq.n	8019958 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 8019944:	7b51      	ldrb	r1, [r2, #13]
 8019946:	7992      	ldrb	r2, [r2, #6]
 8019948:	0149      	lsls	r1, r1, #5
 801994a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801994e:	4311      	orrs	r1, r2
 8019950:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8019954:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8019958:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801995c:	d00e      	beq.n	801997c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 801995e:	eba3 030e 	sub.w	r3, r3, lr
 8019962:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8019966:	b29b      	uxth	r3, r3
 8019968:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801996c:	10db      	asrs	r3, r3, #3
 801996e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019972:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8019976:	4313      	orrs	r3, r2
 8019978:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801997c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8019980:	00cb      	lsls	r3, r1, #3
 8019982:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019986:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801998a:	0648      	lsls	r0, r1, #25
 801998c:	ea43 0302 	orr.w	r3, r3, r2
 8019990:	bf44      	itt	mi
 8019992:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019996:	b21b      	sxthmi	r3, r3
 8019998:	1b5d      	subs	r5, r3, r5
 801999a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801999e:	e7b5      	b.n	801990c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

080199a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80199a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199a4:	461e      	mov	r6, r3
 80199a6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80199a8:	4604      	mov	r4, r0
 80199aa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80199ae:	4617      	mov	r7, r2
 80199b0:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80199b4:	f7e9 fd2a 	bl	800340c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80199b8:	4605      	mov	r5, r0
 80199ba:	b918      	cbnz	r0, 80199c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 80199bc:	6030      	str	r0, [r6, #0]
 80199be:	4628      	mov	r0, r5
 80199c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80199c4:	683b      	ldr	r3, [r7, #0]
 80199c6:	4601      	mov	r1, r0
 80199c8:	68db      	ldr	r3, [r3, #12]
 80199ca:	4638      	mov	r0, r7
 80199cc:	4798      	blx	r3
 80199ce:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 80199d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80199d6:	4602      	mov	r2, r0
 80199d8:	6030      	str	r0, [r6, #0]
 80199da:	d213      	bcs.n	8019a04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 80199dc:	4643      	mov	r3, r8
 80199de:	4639      	mov	r1, r7
 80199e0:	4620      	mov	r0, r4
 80199e2:	f7ff fe3b 	bl	801965c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80199e6:	6030      	str	r0, [r6, #0]
 80199e8:	6833      	ldr	r3, [r6, #0]
 80199ea:	b143      	cbz	r3, 80199fe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 80199ec:	7b5a      	ldrb	r2, [r3, #13]
 80199ee:	7a9b      	ldrb	r3, [r3, #10]
 80199f0:	0052      	lsls	r2, r2, #1
 80199f2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80199f6:	4313      	orrs	r3, r2
 80199f8:	bf0c      	ite	eq
 80199fa:	2301      	moveq	r3, #1
 80199fc:	2300      	movne	r3, #0
 80199fe:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8019a02:	e7dc      	b.n	80199be <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8019a04:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8019a08:	b29b      	uxth	r3, r3
 8019a0a:	2b7f      	cmp	r3, #127	; 0x7f
 8019a0c:	d804      	bhi.n	8019a18 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8019a0e:	4639      	mov	r1, r7
 8019a10:	4620      	mov	r0, r4
 8019a12:	f7ff fd19 	bl	8019448 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8019a16:	e7e6      	b.n	80199e6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8019a18:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8019a1c:	2b00      	cmp	r3, #0
 8019a1e:	d0e3      	beq.n	80199e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8019a20:	f640 1302 	movw	r3, #2306	; 0x902
 8019a24:	429d      	cmp	r5, r3
 8019a26:	d1df      	bne.n	80199e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8019a28:	4601      	mov	r1, r0
 8019a2a:	4620      	mov	r0, r4
 8019a2c:	f7ff fcde 	bl	80193ec <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8019a30:	e7d9      	b.n	80199e6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08019a32 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8019a32:	b510      	push	{r4, lr}
 8019a34:	4604      	mov	r4, r0
 8019a36:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8019a3a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8019a3c:	b1f1      	cbz	r1, 8019a7c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8019a3e:	2b0a      	cmp	r3, #10
 8019a40:	d02f      	beq.n	8019aa2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8019a42:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8019a44:	3901      	subs	r1, #1
 8019a46:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8019a4a:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8019a4c:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8019a50:	1c51      	adds	r1, r2, #1
 8019a52:	b289      	uxth	r1, r1
 8019a54:	2901      	cmp	r1, #1
 8019a56:	bf84      	itt	hi
 8019a58:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8019a5c:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8019a5e:	f103 0201 	add.w	r2, r3, #1
 8019a62:	8722      	strh	r2, [r4, #56]	; 0x38
 8019a64:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8019a66:	bf98      	it	ls
 8019a68:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8019a6a:	4413      	add	r3, r2
 8019a6c:	b29b      	uxth	r3, r3
 8019a6e:	2b09      	cmp	r3, #9
 8019a70:	bf88      	it	hi
 8019a72:	3b0a      	subhi	r3, #10
 8019a74:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019a78:	8458      	strh	r0, [r3, #34]	; 0x22
 8019a7a:	e7dc      	b.n	8019a36 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8019a7c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8019a7e:	2b0a      	cmp	r3, #10
 8019a80:	d00f      	beq.n	8019aa2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8019a82:	4620      	mov	r0, r4
 8019a84:	f7ff fc71 	bl	801936a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8019a88:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8019a8a:	1c5a      	adds	r2, r3, #1
 8019a8c:	8722      	strh	r2, [r4, #56]	; 0x38
 8019a8e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8019a90:	4413      	add	r3, r2
 8019a92:	b29b      	uxth	r3, r3
 8019a94:	2b09      	cmp	r3, #9
 8019a96:	bf88      	it	hi
 8019a98:	3b0a      	subhi	r3, #10
 8019a9a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019a9e:	8458      	strh	r0, [r3, #34]	; 0x22
 8019aa0:	e7ec      	b.n	8019a7c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8019aa2:	bd10      	pop	{r4, pc}

08019aa4 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8019aa4:	b538      	push	{r3, r4, r5, lr}
 8019aa6:	4604      	mov	r4, r0
 8019aa8:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8019aaa:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8019aae:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8019ab0:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8019ab2:	3a01      	subs	r2, #1
 8019ab4:	8702      	strh	r2, [r0, #56]	; 0x38
 8019ab6:	1c5a      	adds	r2, r3, #1
 8019ab8:	b292      	uxth	r2, r2
 8019aba:	2a09      	cmp	r2, #9
 8019abc:	bf86      	itte	hi
 8019abe:	3b09      	subhi	r3, #9
 8019ac0:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8019ac2:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8019ac4:	f7ff ffb5 	bl	8019a32 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8019ac8:	8c23      	ldrh	r3, [r4, #32]
 8019aca:	2b01      	cmp	r3, #1
 8019acc:	bf9c      	itt	ls
 8019ace:	3301      	addls	r3, #1
 8019ad0:	8423      	strhls	r3, [r4, #32]
 8019ad2:	8be3      	ldrh	r3, [r4, #30]
 8019ad4:	b90b      	cbnz	r3, 8019ada <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8019ad6:	2302      	movs	r3, #2
 8019ad8:	83e3      	strh	r3, [r4, #30]
 8019ada:	8be3      	ldrh	r3, [r4, #30]
 8019adc:	4628      	mov	r0, r5
 8019ade:	3b01      	subs	r3, #1
 8019ae0:	b29b      	uxth	r3, r3
 8019ae2:	83e3      	strh	r3, [r4, #30]
 8019ae4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019ae8:	8365      	strh	r5, [r4, #26]
 8019aea:	bd38      	pop	{r3, r4, r5, pc}

08019aec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8019aec:	428a      	cmp	r2, r1
 8019aee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019af2:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8019af4:	d931      	bls.n	8019b5a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 8019af6:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 8019af8:	1a54      	subs	r4, r2, r1
 8019afa:	19ee      	adds	r6, r5, r7
 8019afc:	3e01      	subs	r6, #1
 8019afe:	fa1f fe84 	uxth.w	lr, r4
 8019b02:	b2b4      	uxth	r4, r6
 8019b04:	eba4 090e 	sub.w	r9, r4, lr
 8019b08:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8019b0c:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8019b10:	fa1f f989 	uxth.w	r9, r9
 8019b14:	2c09      	cmp	r4, #9
 8019b16:	4626      	mov	r6, r4
 8019b18:	bf88      	it	hi
 8019b1a:	f1a4 060a 	subhi.w	r6, r4, #10
 8019b1e:	f1bc 0f00 	cmp.w	ip, #0
 8019b22:	bf08      	it	eq
 8019b24:	f04f 0c02 	moveq.w	ip, #2
 8019b28:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8019b2c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019b30:	3c01      	subs	r4, #1
 8019b32:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 8019b36:	fa1f fc8c 	uxth.w	ip, ip
 8019b3a:	b2a4      	uxth	r4, r4
 8019b3c:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8019b40:	454c      	cmp	r4, r9
 8019b42:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8019b46:	d1e5      	bne.n	8019b14 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8019b48:	eba5 050e 	sub.w	r5, r5, lr
 8019b4c:	eb0e 0408 	add.w	r4, lr, r8
 8019b50:	8705      	strh	r5, [r0, #56]	; 0x38
 8019b52:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8019b56:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 8019b5a:	250a      	movs	r5, #10
 8019b5c:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8019b5e:	1a64      	subs	r4, r4, r1
 8019b60:	4439      	add	r1, r7
 8019b62:	b289      	uxth	r1, r1
 8019b64:	2909      	cmp	r1, #9
 8019b66:	bf88      	it	hi
 8019b68:	390a      	subhi	r1, #10
 8019b6a:	8704      	strh	r4, [r0, #56]	; 0x38
 8019b6c:	86c1      	strh	r1, [r0, #54]	; 0x36
 8019b6e:	b18a      	cbz	r2, 8019b94 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 8019b70:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8019b72:	3a01      	subs	r2, #1
 8019b74:	3101      	adds	r1, #1
 8019b76:	b292      	uxth	r2, r2
 8019b78:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8019b7c:	8701      	strh	r1, [r0, #56]	; 0x38
 8019b7e:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8019b80:	b901      	cbnz	r1, 8019b84 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 8019b82:	86c5      	strh	r5, [r0, #54]	; 0x36
 8019b84:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8019b86:	3901      	subs	r1, #1
 8019b88:	b289      	uxth	r1, r1
 8019b8a:	86c1      	strh	r1, [r0, #54]	; 0x36
 8019b8c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8019b90:	844c      	strh	r4, [r1, #34]	; 0x22
 8019b92:	e7ec      	b.n	8019b6e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 8019b94:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b98:	f7ff bf4b 	b.w	8019a32 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08019b9c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8019b9c:	b570      	push	{r4, r5, r6, lr}
 8019b9e:	2500      	movs	r5, #0
 8019ba0:	4295      	cmp	r5, r2
 8019ba2:	d011      	beq.n	8019bc8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8019ba4:	8bc4      	ldrh	r4, [r0, #30]
 8019ba6:	f831 6b02 	ldrh.w	r6, [r1], #2
 8019baa:	4414      	add	r4, r2
 8019bac:	3c01      	subs	r4, #1
 8019bae:	1b64      	subs	r4, r4, r5
 8019bb0:	b2a4      	uxth	r4, r4
 8019bb2:	2c01      	cmp	r4, #1
 8019bb4:	bf88      	it	hi
 8019bb6:	3c02      	subhi	r4, #2
 8019bb8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8019bbc:	8b64      	ldrh	r4, [r4, #26]
 8019bbe:	42b4      	cmp	r4, r6
 8019bc0:	d117      	bne.n	8019bf2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8019bc2:	3501      	adds	r5, #1
 8019bc4:	b2ad      	uxth	r5, r5
 8019bc6:	e7eb      	b.n	8019ba0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8019bc8:	2400      	movs	r4, #0
 8019bca:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8019bce:	4413      	add	r3, r2
 8019bd0:	b2a2      	uxth	r2, r4
 8019bd2:	429a      	cmp	r2, r3
 8019bd4:	da0f      	bge.n	8019bf6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8019bd6:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8019bd8:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8019bdc:	4432      	add	r2, r6
 8019bde:	b292      	uxth	r2, r2
 8019be0:	2a09      	cmp	r2, #9
 8019be2:	bf88      	it	hi
 8019be4:	3a0a      	subhi	r2, #10
 8019be6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8019bea:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8019bec:	3401      	adds	r4, #1
 8019bee:	42aa      	cmp	r2, r5
 8019bf0:	d0ee      	beq.n	8019bd0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8019bf2:	2000      	movs	r0, #0
 8019bf4:	bd70      	pop	{r4, r5, r6, pc}
 8019bf6:	2001      	movs	r0, #1
 8019bf8:	e7fc      	b.n	8019bf4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08019bfa <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8019bfa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bfe:	4605      	mov	r5, r0
 8019c00:	4616      	mov	r6, r2
 8019c02:	1c8c      	adds	r4, r1, #2
 8019c04:	8809      	ldrh	r1, [r1, #0]
 8019c06:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8019c0a:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8019c0e:	42b3      	cmp	r3, r6
 8019c10:	d124      	bne.n	8019c5c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8019c12:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8019c16:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8019c1a:	f001 070f 	and.w	r7, r1, #15
 8019c1e:	f8cd 8000 	str.w	r8, [sp]
 8019c22:	464b      	mov	r3, r9
 8019c24:	4652      	mov	r2, sl
 8019c26:	4621      	mov	r1, r4
 8019c28:	4628      	mov	r0, r5
 8019c2a:	f7ff ffb7 	bl	8019b9c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8019c2e:	4683      	mov	fp, r0
 8019c30:	b168      	cbz	r0, 8019c4e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8019c32:	eb0a 0109 	add.w	r1, sl, r9
 8019c36:	4441      	add	r1, r8
 8019c38:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8019c3c:	463a      	mov	r2, r7
 8019c3e:	4649      	mov	r1, r9
 8019c40:	4628      	mov	r0, r5
 8019c42:	f7ff ff53 	bl	8019aec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8019c46:	4658      	mov	r0, fp
 8019c48:	b003      	add	sp, #12
 8019c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c4e:	eb07 010a 	add.w	r1, r7, sl
 8019c52:	4449      	add	r1, r9
 8019c54:	4441      	add	r1, r8
 8019c56:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8019c5a:	e7d2      	b.n	8019c02 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8019c5c:	f04f 0b00 	mov.w	fp, #0
 8019c60:	e7f1      	b.n	8019c46 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08019c62 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8019c62:	b570      	push	{r4, r5, r6, lr}
 8019c64:	8810      	ldrh	r0, [r2, #0]
 8019c66:	4298      	cmp	r0, r3
 8019c68:	d817      	bhi.n	8019c9a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019c6a:	1e48      	subs	r0, r1, #1
 8019c6c:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8019c70:	4298      	cmp	r0, r3
 8019c72:	d312      	bcc.n	8019c9a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019c74:	2400      	movs	r4, #0
 8019c76:	428c      	cmp	r4, r1
 8019c78:	d20f      	bcs.n	8019c9a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019c7a:	1860      	adds	r0, r4, r1
 8019c7c:	1040      	asrs	r0, r0, #1
 8019c7e:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8019c82:	0085      	lsls	r5, r0, #2
 8019c84:	42b3      	cmp	r3, r6
 8019c86:	d902      	bls.n	8019c8e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8019c88:	3001      	adds	r0, #1
 8019c8a:	b284      	uxth	r4, r0
 8019c8c:	e7f3      	b.n	8019c76 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8019c8e:	d201      	bcs.n	8019c94 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8019c90:	b281      	uxth	r1, r0
 8019c92:	e7f0      	b.n	8019c76 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8019c94:	442a      	add	r2, r5
 8019c96:	8850      	ldrh	r0, [r2, #2]
 8019c98:	bd70      	pop	{r4, r5, r6, pc}
 8019c9a:	2000      	movs	r0, #0
 8019c9c:	e7fc      	b.n	8019c98 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08019c9e <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8019c9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ca2:	4604      	mov	r4, r0
 8019ca4:	260b      	movs	r6, #11
 8019ca6:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8019ca8:	886f      	ldrh	r7, [r5, #2]
 8019caa:	087f      	lsrs	r7, r7, #1
 8019cac:	3e01      	subs	r6, #1
 8019cae:	d013      	beq.n	8019cd8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8019cb0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8019cb2:	462a      	mov	r2, r5
 8019cb4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019cb8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8019cbc:	4639      	mov	r1, r7
 8019cbe:	4643      	mov	r3, r8
 8019cc0:	4620      	mov	r0, r4
 8019cc2:	f7ff ffce 	bl	8019c62 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8019cc6:	b138      	cbz	r0, 8019cd8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8019cc8:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8019ccc:	4642      	mov	r2, r8
 8019cce:	4620      	mov	r0, r4
 8019cd0:	f7ff ff93 	bl	8019bfa <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8019cd4:	2800      	cmp	r0, #0
 8019cd6:	d1e9      	bne.n	8019cac <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8019cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019cdc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8019cdc:	b570      	push	{r4, r5, r6, lr}
 8019cde:	694a      	ldr	r2, [r1, #20]
 8019ce0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8019ce2:	684b      	ldr	r3, [r1, #4]
 8019ce4:	1b54      	subs	r4, r2, r5
 8019ce6:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8019ce8:	f000 8107 	beq.w	8019efa <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21e>
 8019cec:	1b9b      	subs	r3, r3, r6
 8019cee:	d003      	beq.n	8019cf8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8019cf0:	2210      	movs	r2, #16
 8019cf2:	4363      	muls	r3, r4
 8019cf4:	fb93 f3f2 	sdiv	r3, r3, r2
 8019cf8:	680c      	ldr	r4, [r1, #0]
 8019cfa:	698a      	ldr	r2, [r1, #24]
 8019cfc:	1b65      	subs	r5, r4, r5
 8019cfe:	f000 80fe 	beq.w	8019efe <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x222>
 8019d02:	1b92      	subs	r2, r2, r6
 8019d04:	d003      	beq.n	8019d0e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8019d06:	2410      	movs	r4, #16
 8019d08:	436a      	muls	r2, r5
 8019d0a:	fb92 f2f4 	sdiv	r2, r2, r4
 8019d0e:	1a9b      	subs	r3, r3, r2
 8019d10:	ee07 3a90 	vmov	s15, r3
 8019d14:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8019f3c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x260>
 8019d18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019d1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019d20:	ee67 7a84 	vmul.f32	s15, s15, s8
 8019d24:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8019d28:	460a      	mov	r2, r1
 8019d2a:	eeb1 6a43 	vneg.f32	s12, s6
 8019d2e:	4603      	mov	r3, r0
 8019d30:	f100 040c 	add.w	r4, r0, #12
 8019d34:	edd2 7a02 	vldr	s15, [r2, #8]
 8019d38:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8019d3c:	ece3 6a01 	vstmia	r3!, {s13}
 8019d40:	edd2 7a03 	vldr	s15, [r2, #12]
 8019d44:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019d48:	edc3 7a02 	vstr	s15, [r3, #8]
 8019d4c:	edd2 7a04 	vldr	s15, [r2, #16]
 8019d50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019d54:	429c      	cmp	r4, r3
 8019d56:	edc3 7a05 	vstr	s15, [r3, #20]
 8019d5a:	f102 0214 	add.w	r2, r2, #20
 8019d5e:	d1e9      	bne.n	8019d34 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8019d60:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8019d62:	698b      	ldr	r3, [r1, #24]
 8019d64:	edd0 4a02 	vldr	s9, [r0, #8]
 8019d68:	1a9b      	subs	r3, r3, r2
 8019d6a:	ee07 3a90 	vmov	s15, r3
 8019d6e:	684b      	ldr	r3, [r1, #4]
 8019d70:	edd0 3a00 	vldr	s7, [r0]
 8019d74:	1a9b      	subs	r3, r3, r2
 8019d76:	edd0 6a01 	vldr	s13, [r0, #4]
 8019d7a:	ee07 3a10 	vmov	s14, r3
 8019d7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019d82:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8019d86:	ee67 7a84 	vmul.f32	s15, s15, s8
 8019d8a:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8019d8e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019d92:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8019d96:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019d9a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019d9e:	ee67 7a83 	vmul.f32	s15, s15, s6
 8019da2:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8019da6:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8019da8:	694a      	ldr	r2, [r1, #20]
 8019daa:	ed90 5a05 	vldr	s10, [r0, #20]
 8019dae:	1b13      	subs	r3, r2, r4
 8019db0:	ee07 3a10 	vmov	s14, r3
 8019db4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019db8:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019dbc:	680b      	ldr	r3, [r1, #0]
 8019dbe:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8019dc2:	1b1b      	subs	r3, r3, r4
 8019dc4:	ee07 3a10 	vmov	s14, r3
 8019dc8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019dcc:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019dd0:	eee6 4a87 	vfma.f32	s9, s13, s14
 8019dd4:	ee64 4a86 	vmul.f32	s9, s9, s12
 8019dd8:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8019ddc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8019dde:	698b      	ldr	r3, [r1, #24]
 8019de0:	ed90 2a03 	vldr	s4, [r0, #12]
 8019de4:	1a9b      	subs	r3, r3, r2
 8019de6:	ee06 3a90 	vmov	s13, r3
 8019dea:	684b      	ldr	r3, [r1, #4]
 8019dec:	edd0 5a04 	vldr	s11, [r0, #16]
 8019df0:	1a9b      	subs	r3, r3, r2
 8019df2:	ee07 3a10 	vmov	s14, r3
 8019df6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019dfa:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8019dfe:	ee66 6a84 	vmul.f32	s13, s13, s8
 8019e02:	ee32 5a45 	vsub.f32	s10, s4, s10
 8019e06:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019e0a:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8019e0e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019e12:	eee5 6a87 	vfma.f32	s13, s11, s14
 8019e16:	ee66 6a83 	vmul.f32	s13, s13, s6
 8019e1a:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8019e1e:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8019e20:	694a      	ldr	r2, [r1, #20]
 8019e22:	ed90 1a07 	vldr	s2, [r0, #28]
 8019e26:	1b13      	subs	r3, r2, r4
 8019e28:	ee07 3a10 	vmov	s14, r3
 8019e2c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019e30:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019e34:	680b      	ldr	r3, [r1, #0]
 8019e36:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8019e3a:	1b1b      	subs	r3, r3, r4
 8019e3c:	ee07 3a10 	vmov	s14, r3
 8019e40:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019e44:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019e48:	eea5 5a87 	vfma.f32	s10, s11, s14
 8019e4c:	ee25 5a06 	vmul.f32	s10, s10, s12
 8019e50:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8019e54:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8019e56:	698b      	ldr	r3, [r1, #24]
 8019e58:	edd0 5a08 	vldr	s11, [r0, #32]
 8019e5c:	1a9b      	subs	r3, r3, r2
 8019e5e:	ee07 3a10 	vmov	s14, r3
 8019e62:	684b      	ldr	r3, [r1, #4]
 8019e64:	edd0 2a06 	vldr	s5, [r0, #24]
 8019e68:	1a9b      	subs	r3, r3, r2
 8019e6a:	ee01 3a90 	vmov	s3, r3
 8019e6e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019e72:	ee31 1a65 	vsub.f32	s2, s2, s11
 8019e76:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019e7a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8019e7e:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8019e82:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8019e86:	ee61 1a84 	vmul.f32	s3, s3, s8
 8019e8a:	eea1 7a21 	vfma.f32	s14, s2, s3
 8019e8e:	ee27 7a03 	vmul.f32	s14, s14, s6
 8019e92:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8019e96:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8019e98:	694a      	ldr	r2, [r1, #20]
 8019e9a:	1b13      	subs	r3, r2, r4
 8019e9c:	ee03 3a10 	vmov	s6, r3
 8019ea0:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8019ea4:	ee23 3a04 	vmul.f32	s6, s6, s8
 8019ea8:	680b      	ldr	r3, [r1, #0]
 8019eaa:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8019eae:	1b1b      	subs	r3, r3, r4
 8019eb0:	ee03 3a10 	vmov	s6, r3
 8019eb4:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8019eb8:	ee23 4a04 	vmul.f32	s8, s6, s8
 8019ebc:	eee1 5a04 	vfma.f32	s11, s2, s8
 8019ec0:	ee25 6a86 	vmul.f32	s12, s11, s12
 8019ec4:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8019ec8:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8019ecc:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8019ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ed4:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8019ed8:	dd13      	ble.n	8019f02 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8019eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019ede:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8019ee2:	eee3 7a87 	vfma.f32	s15, s7, s14
 8019ee6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019eee:	63c3      	str	r3, [r0, #60]	; 0x3c
 8019ef0:	dd15      	ble.n	8019f1e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8019ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019ef6:	6403      	str	r3, [r0, #64]	; 0x40
 8019ef8:	bd70      	pop	{r4, r5, r6, pc}
 8019efa:	4623      	mov	r3, r4
 8019efc:	e6fc      	b.n	8019cf8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8019efe:	462a      	mov	r2, r5
 8019f00:	e705      	b.n	8019d0e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8019f02:	d502      	bpl.n	8019f0a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22e>
 8019f04:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8019f08:	e7e9      	b.n	8019ede <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x202>
 8019f0a:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8019f0e:	eea3 2a85 	vfma.f32	s4, s7, s10
 8019f12:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8019f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f1a:	dade      	bge.n	8019eda <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fe>
 8019f1c:	e7f2      	b.n	8019f04 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x228>
 8019f1e:	d502      	bpl.n	8019f26 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x24a>
 8019f20:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8019f24:	e7e7      	b.n	8019ef6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21a>
 8019f26:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8019f2a:	eee3 4a86 	vfma.f32	s9, s7, s12
 8019f2e:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8019f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f36:	dadc      	bge.n	8019ef2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x216>
 8019f38:	e7f2      	b.n	8019f20 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x244>
 8019f3a:	bf00      	nop
 8019f3c:	3d800000 	.word	0x3d800000

08019f40 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8019f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f44:	2714      	movs	r7, #20
 8019f46:	435f      	muls	r7, r3
 8019f48:	eb02 0c07 	add.w	ip, r2, r7
 8019f4c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8019f50:	f115 0e0f 	adds.w	lr, r5, #15
 8019f54:	f100 80a2 	bmi.w	801a09c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8019f58:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8019f5c:	2614      	movs	r6, #20
 8019f5e:	9c08      	ldr	r4, [sp, #32]
 8019f60:	f8c0 e014 	str.w	lr, [r0, #20]
 8019f64:	4366      	muls	r6, r4
 8019f66:	eb02 0806 	add.w	r8, r2, r6
 8019f6a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8019f6e:	f115 040f 	adds.w	r4, r5, #15
 8019f72:	f100 809f 	bmi.w	801a0b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8019f76:	1124      	asrs	r4, r4, #4
 8019f78:	eba4 040e 	sub.w	r4, r4, lr
 8019f7c:	6184      	str	r4, [r0, #24]
 8019f7e:	2c00      	cmp	r4, #0
 8019f80:	f000 808a 	beq.w	801a098 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8019f84:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8019f88:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8019f8c:	5995      	ldr	r5, [r2, r6]
 8019f8e:	eba4 0809 	sub.w	r8, r4, r9
 8019f92:	59d4      	ldr	r4, [r2, r7]
 8019f94:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8019f98:	eba5 0a04 	sub.w	sl, r5, r4
 8019f9c:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8019fa0:	fb0e fe05 	mul.w	lr, lr, r5
 8019fa4:	fb0a ee19 	mls	lr, sl, r9, lr
 8019fa8:	fb08 e404 	mla	r4, r8, r4, lr
 8019fac:	3c01      	subs	r4, #1
 8019fae:	19a4      	adds	r4, r4, r6
 8019fb0:	f100 808c 	bmi.w	801a0cc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8019fb4:	fb94 fef6 	sdiv	lr, r4, r6
 8019fb8:	fb06 441e 	mls	r4, r6, lr, r4
 8019fbc:	f8c0 e000 	str.w	lr, [r0]
 8019fc0:	6104      	str	r4, [r0, #16]
 8019fc2:	2d00      	cmp	r5, #0
 8019fc4:	f2c0 8095 	blt.w	801a0f2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8019fc8:	fb95 f4f6 	sdiv	r4, r5, r6
 8019fcc:	fb06 5514 	mls	r5, r6, r4, r5
 8019fd0:	6044      	str	r4, [r0, #4]
 8019fd2:	6085      	str	r5, [r0, #8]
 8019fd4:	60c6      	str	r6, [r0, #12]
 8019fd6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8019fda:	6945      	ldr	r5, [r0, #20]
 8019fdc:	59d2      	ldr	r2, [r2, r7]
 8019fde:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8019fe2:	ee07 4a10 	vmov	s14, r4
 8019fe6:	6804      	ldr	r4, [r0, #0]
 8019fe8:	eddf 6a4a 	vldr	s13, [pc, #296]	; 801a114 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8019fec:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8019ff0:	ee07 2a90 	vmov	s15, r2
 8019ff4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019ff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019ffc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801a000:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801a004:	ee27 7a26 	vmul.f32	s14, s14, s13
 801a008:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a00c:	edd3 6a00 	vldr	s13, [r3]
 801a010:	eee6 6a07 	vfma.f32	s13, s12, s14
 801a014:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801a018:	eee6 6a27 	vfma.f32	s13, s12, s15
 801a01c:	edc0 6a07 	vstr	s13, [r0, #28]
 801a020:	edd0 6a01 	vldr	s13, [r0, #4]
 801a024:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801a028:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801a02c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a030:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801a034:	ed80 6a08 	vstr	s12, [r0, #32]
 801a038:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801a03a:	6242      	str	r2, [r0, #36]	; 0x24
 801a03c:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801a040:	ed93 6a03 	vldr	s12, [r3, #12]
 801a044:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a048:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801a04c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801a050:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801a054:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801a058:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801a05c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801a060:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801a064:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a066:	6302      	str	r2, [r0, #48]	; 0x30
 801a068:	ed93 6a06 	vldr	s12, [r3, #24]
 801a06c:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801a070:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a074:	eeb0 7a46 	vmov.f32	s14, s12
 801a078:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801a07c:	eea6 7a27 	vfma.f32	s14, s12, s15
 801a080:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801a084:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801a088:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801a08c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a090:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801a094:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801a096:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a09c:	2410      	movs	r4, #16
 801a09e:	f1c5 0501 	rsb	r5, r5, #1
 801a0a2:	f015 050f 	ands.w	r5, r5, #15
 801a0a6:	fb9e fef4 	sdiv	lr, lr, r4
 801a0aa:	bf18      	it	ne
 801a0ac:	2501      	movne	r5, #1
 801a0ae:	ebae 0e05 	sub.w	lr, lr, r5
 801a0b2:	e753      	b.n	8019f5c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801a0b4:	f04f 0910 	mov.w	r9, #16
 801a0b8:	f1c5 0501 	rsb	r5, r5, #1
 801a0bc:	f015 050f 	ands.w	r5, r5, #15
 801a0c0:	fb94 f4f9 	sdiv	r4, r4, r9
 801a0c4:	bf18      	it	ne
 801a0c6:	2501      	movne	r5, #1
 801a0c8:	1b64      	subs	r4, r4, r5
 801a0ca:	e755      	b.n	8019f78 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801a0cc:	4264      	negs	r4, r4
 801a0ce:	fb94 fef6 	sdiv	lr, r4, r6
 801a0d2:	fb06 441e 	mls	r4, r6, lr, r4
 801a0d6:	f1ce 0800 	rsb	r8, lr, #0
 801a0da:	f8c0 8000 	str.w	r8, [r0]
 801a0de:	6104      	str	r4, [r0, #16]
 801a0e0:	2c00      	cmp	r4, #0
 801a0e2:	f43f af6e 	beq.w	8019fc2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801a0e6:	ea6f 0e0e 	mvn.w	lr, lr
 801a0ea:	1b34      	subs	r4, r6, r4
 801a0ec:	f8c0 e000 	str.w	lr, [r0]
 801a0f0:	e766      	b.n	8019fc0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801a0f2:	426d      	negs	r5, r5
 801a0f4:	fb95 f4f6 	sdiv	r4, r5, r6
 801a0f8:	fb06 5514 	mls	r5, r6, r4, r5
 801a0fc:	f1c4 0e00 	rsb	lr, r4, #0
 801a100:	f8c0 e004 	str.w	lr, [r0, #4]
 801a104:	6085      	str	r5, [r0, #8]
 801a106:	2d00      	cmp	r5, #0
 801a108:	f43f af64 	beq.w	8019fd4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801a10c:	43e4      	mvns	r4, r4
 801a10e:	1b75      	subs	r5, r6, r5
 801a110:	6044      	str	r4, [r0, #4]
 801a112:	e75e      	b.n	8019fd2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801a114:	3d800000 	.word	0x3d800000

0801a118 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801a118:	4b01      	ldr	r3, [pc, #4]	; (801a120 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801a11a:	6018      	str	r0, [r3, #0]
 801a11c:	4770      	bx	lr
 801a11e:	bf00      	nop
 801a120:	201979b8 	.word	0x201979b8

0801a124 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801a124:	4b06      	ldr	r3, [pc, #24]	; (801a140 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801a126:	881a      	ldrh	r2, [r3, #0]
 801a128:	4282      	cmp	r2, r0
 801a12a:	d807      	bhi.n	801a13c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801a12c:	4b05      	ldr	r3, [pc, #20]	; (801a144 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801a12e:	881b      	ldrh	r3, [r3, #0]
 801a130:	4413      	add	r3, r2
 801a132:	4298      	cmp	r0, r3
 801a134:	bfac      	ite	ge
 801a136:	2000      	movge	r0, #0
 801a138:	2001      	movlt	r0, #1
 801a13a:	4770      	bx	lr
 801a13c:	2000      	movs	r0, #0
 801a13e:	4770      	bx	lr
 801a140:	201979d8 	.word	0x201979d8
 801a144:	201979dc 	.word	0x201979dc

0801a148 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801a148:	b508      	push	{r3, lr}
 801a14a:	4601      	mov	r1, r0
 801a14c:	f7ff ffea 	bl	801a124 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801a150:	b118      	cbz	r0, 801a15a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801a152:	4b02      	ldr	r3, [pc, #8]	; (801a15c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801a154:	681b      	ldr	r3, [r3, #0]
 801a156:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801a15a:	bd08      	pop	{r3, pc}
 801a15c:	201979bc 	.word	0x201979bc

0801a160 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801a160:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a162:	4c24      	ldr	r4, [pc, #144]	; (801a1f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801a164:	6823      	ldr	r3, [r4, #0]
 801a166:	2b00      	cmp	r3, #0
 801a168:	d042      	beq.n	801a1f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801a16a:	4a23      	ldr	r2, [pc, #140]	; (801a1f8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801a16c:	4d23      	ldr	r5, [pc, #140]	; (801a1fc <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801a16e:	8811      	ldrh	r1, [r2, #0]
 801a170:	f8b5 c000 	ldrh.w	ip, [r5]
 801a174:	4822      	ldr	r0, [pc, #136]	; (801a200 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801a176:	4461      	add	r1, ip
 801a178:	1c4a      	adds	r2, r1, #1
 801a17a:	f022 0201 	bic.w	r2, r2, #1
 801a17e:	008f      	lsls	r7, r1, #2
 801a180:	0412      	lsls	r2, r2, #16
 801a182:	19de      	adds	r6, r3, r7
 801a184:	0c12      	lsrs	r2, r2, #16
 801a186:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801a18a:	6006      	str	r6, [r0, #0]
 801a18c:	4e1d      	ldr	r6, [pc, #116]	; (801a204 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801a18e:	19da      	adds	r2, r3, r7
 801a190:	6032      	str	r2, [r6, #0]
 801a192:	220e      	movs	r2, #14
 801a194:	fb02 f20c 	mul.w	r2, r2, ip
 801a198:	3203      	adds	r2, #3
 801a19a:	f022 0203 	bic.w	r2, r2, #3
 801a19e:	443a      	add	r2, r7
 801a1a0:	4f19      	ldr	r7, [pc, #100]	; (801a208 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801a1a2:	4413      	add	r3, r2
 801a1a4:	603b      	str	r3, [r7, #0]
 801a1a6:	2300      	movs	r3, #0
 801a1a8:	4f18      	ldr	r7, [pc, #96]	; (801a20c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801a1aa:	469c      	mov	ip, r3
 801a1ac:	803b      	strh	r3, [r7, #0]
 801a1ae:	4f18      	ldr	r7, [pc, #96]	; (801a210 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801a1b0:	683f      	ldr	r7, [r7, #0]
 801a1b2:	1aba      	subs	r2, r7, r2
 801a1b4:	4f17      	ldr	r7, [pc, #92]	; (801a214 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801a1b6:	603a      	str	r2, [r7, #0]
 801a1b8:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801a1bc:	4a16      	ldr	r2, [pc, #88]	; (801a218 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801a1be:	8013      	strh	r3, [r2, #0]
 801a1c0:	428b      	cmp	r3, r1
 801a1c2:	d10d      	bne.n	801a1e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801a1c4:	2300      	movs	r3, #0
 801a1c6:	240e      	movs	r4, #14
 801a1c8:	882d      	ldrh	r5, [r5, #0]
 801a1ca:	6830      	ldr	r0, [r6, #0]
 801a1cc:	429d      	cmp	r5, r3
 801a1ce:	d90f      	bls.n	801a1f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801a1d0:	fb04 0203 	mla	r2, r4, r3, r0
 801a1d4:	7b11      	ldrb	r1, [r2, #12]
 801a1d6:	3301      	adds	r3, #1
 801a1d8:	f36f 1145 	bfc	r1, #5, #1
 801a1dc:	7311      	strb	r1, [r2, #12]
 801a1de:	e7f5      	b.n	801a1cc <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801a1e0:	6822      	ldr	r2, [r4, #0]
 801a1e2:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801a1e6:	6802      	ldr	r2, [r0, #0]
 801a1e8:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801a1ec:	3301      	adds	r3, #1
 801a1ee:	e7e7      	b.n	801a1c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801a1f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a1f2:	bf00      	nop
 801a1f4:	201979bc 	.word	0x201979bc
 801a1f8:	201979d8 	.word	0x201979d8
 801a1fc:	201979dc 	.word	0x201979dc
 801a200:	201979d0 	.word	0x201979d0
 801a204:	201979c0 	.word	0x201979c0
 801a208:	201979c8 	.word	0x201979c8
 801a20c:	201979da 	.word	0x201979da
 801a210:	201979c4 	.word	0x201979c4
 801a214:	201979d4 	.word	0x201979d4
 801a218:	201979cc 	.word	0x201979cc

0801a21c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801a21c:	4b06      	ldr	r3, [pc, #24]	; (801a238 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801a21e:	681b      	ldr	r3, [r3, #0]
 801a220:	b943      	cbnz	r3, 801a234 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801a222:	b139      	cbz	r1, 801a234 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801a224:	4b05      	ldr	r3, [pc, #20]	; (801a23c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801a226:	801a      	strh	r2, [r3, #0]
 801a228:	4b05      	ldr	r3, [pc, #20]	; (801a240 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801a22a:	6019      	str	r1, [r3, #0]
 801a22c:	4b05      	ldr	r3, [pc, #20]	; (801a244 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801a22e:	6018      	str	r0, [r3, #0]
 801a230:	f7ff bf96 	b.w	801a160 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801a234:	4770      	bx	lr
 801a236:	bf00      	nop
 801a238:	201979c8 	.word	0x201979c8
 801a23c:	201979dc 	.word	0x201979dc
 801a240:	201979c4 	.word	0x201979c4
 801a244:	201979bc 	.word	0x201979bc

0801a248 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801a248:	b470      	push	{r4, r5, r6}
 801a24a:	4c07      	ldr	r4, [pc, #28]	; (801a268 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801a24c:	4605      	mov	r5, r0
 801a24e:	6826      	ldr	r6, [r4, #0]
 801a250:	4610      	mov	r0, r2
 801a252:	9a03      	ldr	r2, [sp, #12]
 801a254:	b936      	cbnz	r6, 801a264 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801a256:	6025      	str	r5, [r4, #0]
 801a258:	4c04      	ldr	r4, [pc, #16]	; (801a26c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801a25a:	8021      	strh	r1, [r4, #0]
 801a25c:	bc70      	pop	{r4, r5, r6}
 801a25e:	4619      	mov	r1, r3
 801a260:	f7ff bfdc 	b.w	801a21c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801a264:	bc70      	pop	{r4, r5, r6}
 801a266:	4770      	bx	lr
 801a268:	201979e0 	.word	0x201979e0
 801a26c:	201979d8 	.word	0x201979d8

0801a270 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801a270:	4a12      	ldr	r2, [pc, #72]	; (801a2bc <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801a272:	8803      	ldrh	r3, [r0, #0]
 801a274:	8812      	ldrh	r2, [r2, #0]
 801a276:	4293      	cmp	r3, r2
 801a278:	d207      	bcs.n	801a28a <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801a27a:	2114      	movs	r1, #20
 801a27c:	4a10      	ldr	r2, [pc, #64]	; (801a2c0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801a27e:	6812      	ldr	r2, [r2, #0]
 801a280:	fb01 2303 	mla	r3, r1, r3, r2
 801a284:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801a288:	4770      	bx	lr
 801a28a:	490e      	ldr	r1, [pc, #56]	; (801a2c4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801a28c:	8809      	ldrh	r1, [r1, #0]
 801a28e:	4411      	add	r1, r2
 801a290:	428b      	cmp	r3, r1
 801a292:	da04      	bge.n	801a29e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801a294:	1a9b      	subs	r3, r3, r2
 801a296:	4a0c      	ldr	r2, [pc, #48]	; (801a2c8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801a298:	210e      	movs	r1, #14
 801a29a:	6812      	ldr	r2, [r2, #0]
 801a29c:	e7f0      	b.n	801a280 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801a29e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a2a2:	4293      	cmp	r3, r2
 801a2a4:	d108      	bne.n	801a2b8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801a2a6:	4b09      	ldr	r3, [pc, #36]	; (801a2cc <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801a2a8:	781b      	ldrb	r3, [r3, #0]
 801a2aa:	b91b      	cbnz	r3, 801a2b4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801a2ac:	4b08      	ldr	r3, [pc, #32]	; (801a2d0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801a2ae:	f9b3 0000 	ldrsh.w	r0, [r3]
 801a2b2:	4770      	bx	lr
 801a2b4:	4b07      	ldr	r3, [pc, #28]	; (801a2d4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801a2b6:	e7fa      	b.n	801a2ae <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801a2b8:	2000      	movs	r0, #0
 801a2ba:	4770      	bx	lr
 801a2bc:	201979d8 	.word	0x201979d8
 801a2c0:	201979e0 	.word	0x201979e0
 801a2c4:	201979dc 	.word	0x201979dc
 801a2c8:	201979c0 	.word	0x201979c0
 801a2cc:	20197950 	.word	0x20197950
 801a2d0:	20197952 	.word	0x20197952
 801a2d4:	20197954 	.word	0x20197954

0801a2d8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801a2d8:	4a12      	ldr	r2, [pc, #72]	; (801a324 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801a2da:	8803      	ldrh	r3, [r0, #0]
 801a2dc:	8812      	ldrh	r2, [r2, #0]
 801a2de:	4293      	cmp	r3, r2
 801a2e0:	d207      	bcs.n	801a2f2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801a2e2:	2114      	movs	r1, #20
 801a2e4:	4a10      	ldr	r2, [pc, #64]	; (801a328 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801a2e6:	6812      	ldr	r2, [r2, #0]
 801a2e8:	fb01 2303 	mla	r3, r1, r3, r2
 801a2ec:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801a2f0:	4770      	bx	lr
 801a2f2:	490e      	ldr	r1, [pc, #56]	; (801a32c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801a2f4:	8809      	ldrh	r1, [r1, #0]
 801a2f6:	4411      	add	r1, r2
 801a2f8:	428b      	cmp	r3, r1
 801a2fa:	da04      	bge.n	801a306 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801a2fc:	1a9b      	subs	r3, r3, r2
 801a2fe:	4a0c      	ldr	r2, [pc, #48]	; (801a330 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801a300:	210e      	movs	r1, #14
 801a302:	6812      	ldr	r2, [r2, #0]
 801a304:	e7f0      	b.n	801a2e8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801a306:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a30a:	4293      	cmp	r3, r2
 801a30c:	d108      	bne.n	801a320 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801a30e:	4b09      	ldr	r3, [pc, #36]	; (801a334 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801a310:	781b      	ldrb	r3, [r3, #0]
 801a312:	b91b      	cbnz	r3, 801a31c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801a314:	4b08      	ldr	r3, [pc, #32]	; (801a338 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801a316:	f9b3 0000 	ldrsh.w	r0, [r3]
 801a31a:	4770      	bx	lr
 801a31c:	4b07      	ldr	r3, [pc, #28]	; (801a33c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801a31e:	e7fa      	b.n	801a316 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801a320:	2000      	movs	r0, #0
 801a322:	4770      	bx	lr
 801a324:	201979d8 	.word	0x201979d8
 801a328:	201979e0 	.word	0x201979e0
 801a32c:	201979dc 	.word	0x201979dc
 801a330:	201979c0 	.word	0x201979c0
 801a334:	20197950 	.word	0x20197950
 801a338:	20197954 	.word	0x20197954
 801a33c:	20197952 	.word	0x20197952

0801a340 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801a340:	4a12      	ldr	r2, [pc, #72]	; (801a38c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801a342:	8803      	ldrh	r3, [r0, #0]
 801a344:	8811      	ldrh	r1, [r2, #0]
 801a346:	428b      	cmp	r3, r1
 801a348:	d20b      	bcs.n	801a362 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801a34a:	4a11      	ldr	r2, [pc, #68]	; (801a390 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801a34c:	6812      	ldr	r2, [r2, #0]
 801a34e:	b112      	cbz	r2, 801a356 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801a350:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a354:	b9c0      	cbnz	r0, 801a388 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801a356:	4a0f      	ldr	r2, [pc, #60]	; (801a394 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801a358:	6811      	ldr	r1, [r2, #0]
 801a35a:	2214      	movs	r2, #20
 801a35c:	4353      	muls	r3, r2
 801a35e:	58c8      	ldr	r0, [r1, r3]
 801a360:	4770      	bx	lr
 801a362:	4a0d      	ldr	r2, [pc, #52]	; (801a398 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801a364:	8812      	ldrh	r2, [r2, #0]
 801a366:	440a      	add	r2, r1
 801a368:	4293      	cmp	r3, r2
 801a36a:	da04      	bge.n	801a376 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801a36c:	4a08      	ldr	r2, [pc, #32]	; (801a390 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801a36e:	6812      	ldr	r2, [r2, #0]
 801a370:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a374:	4770      	bx	lr
 801a376:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a37a:	4293      	cmp	r3, r2
 801a37c:	d103      	bne.n	801a386 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801a37e:	4b07      	ldr	r3, [pc, #28]	; (801a39c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801a380:	681b      	ldr	r3, [r3, #0]
 801a382:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801a384:	4770      	bx	lr
 801a386:	2000      	movs	r0, #0
 801a388:	4770      	bx	lr
 801a38a:	bf00      	nop
 801a38c:	201979d8 	.word	0x201979d8
 801a390:	201979bc 	.word	0x201979bc
 801a394:	201979e0 	.word	0x201979e0
 801a398:	201979dc 	.word	0x201979dc
 801a39c:	20197958 	.word	0x20197958

0801a3a0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801a3a0:	4b24      	ldr	r3, [pc, #144]	; (801a434 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801a3a2:	8802      	ldrh	r2, [r0, #0]
 801a3a4:	8818      	ldrh	r0, [r3, #0]
 801a3a6:	4282      	cmp	r2, r0
 801a3a8:	d221      	bcs.n	801a3ee <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801a3aa:	4b23      	ldr	r3, [pc, #140]	; (801a438 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801a3ac:	6819      	ldr	r1, [r3, #0]
 801a3ae:	2314      	movs	r3, #20
 801a3b0:	fb03 1302 	mla	r3, r3, r2, r1
 801a3b4:	6858      	ldr	r0, [r3, #4]
 801a3b6:	2800      	cmp	r0, #0
 801a3b8:	d03a      	beq.n	801a430 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801a3ba:	4920      	ldr	r1, [pc, #128]	; (801a43c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801a3bc:	6809      	ldr	r1, [r1, #0]
 801a3be:	2900      	cmp	r1, #0
 801a3c0:	d036      	beq.n	801a430 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801a3c2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801a3c6:	2900      	cmp	r1, #0
 801a3c8:	d032      	beq.n	801a430 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801a3ca:	891a      	ldrh	r2, [r3, #8]
 801a3cc:	8958      	ldrh	r0, [r3, #10]
 801a3ce:	4350      	muls	r0, r2
 801a3d0:	7c5a      	ldrb	r2, [r3, #17]
 801a3d2:	7cdb      	ldrb	r3, [r3, #19]
 801a3d4:	0952      	lsrs	r2, r2, #5
 801a3d6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801a3da:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801a3de:	2b0b      	cmp	r3, #11
 801a3e0:	bf18      	it	ne
 801a3e2:	0040      	lslne	r0, r0, #1
 801a3e4:	3003      	adds	r0, #3
 801a3e6:	f020 0003 	bic.w	r0, r0, #3
 801a3ea:	4408      	add	r0, r1
 801a3ec:	4770      	bx	lr
 801a3ee:	4b14      	ldr	r3, [pc, #80]	; (801a440 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801a3f0:	881b      	ldrh	r3, [r3, #0]
 801a3f2:	4403      	add	r3, r0
 801a3f4:	429a      	cmp	r2, r3
 801a3f6:	da1a      	bge.n	801a42e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801a3f8:	210e      	movs	r1, #14
 801a3fa:	4b12      	ldr	r3, [pc, #72]	; (801a444 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801a3fc:	1a10      	subs	r0, r2, r0
 801a3fe:	681b      	ldr	r3, [r3, #0]
 801a400:	fb01 3000 	mla	r0, r1, r0, r3
 801a404:	7b03      	ldrb	r3, [r0, #12]
 801a406:	f003 031f 	and.w	r3, r3, #31
 801a40a:	2b0b      	cmp	r3, #11
 801a40c:	d10b      	bne.n	801a426 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801a40e:	8903      	ldrh	r3, [r0, #8]
 801a410:	8940      	ldrh	r0, [r0, #10]
 801a412:	4358      	muls	r0, r3
 801a414:	4b09      	ldr	r3, [pc, #36]	; (801a43c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801a416:	3003      	adds	r0, #3
 801a418:	6819      	ldr	r1, [r3, #0]
 801a41a:	f020 0303 	bic.w	r3, r0, #3
 801a41e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801a422:	4418      	add	r0, r3
 801a424:	4770      	bx	lr
 801a426:	2b0d      	cmp	r3, #13
 801a428:	d101      	bne.n	801a42e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801a42a:	300d      	adds	r0, #13
 801a42c:	4770      	bx	lr
 801a42e:	2000      	movs	r0, #0
 801a430:	4770      	bx	lr
 801a432:	bf00      	nop
 801a434:	201979d8 	.word	0x201979d8
 801a438:	201979e0 	.word	0x201979e0
 801a43c:	201979bc 	.word	0x201979bc
 801a440:	201979dc 	.word	0x201979dc
 801a444:	201979c0 	.word	0x201979c0

0801a448 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801a448:	b510      	push	{r4, lr}
 801a44a:	4a17      	ldr	r2, [pc, #92]	; (801a4a8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801a44c:	8803      	ldrh	r3, [r0, #0]
 801a44e:	8812      	ldrh	r2, [r2, #0]
 801a450:	4293      	cmp	r3, r2
 801a452:	d20c      	bcs.n	801a46e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801a454:	2114      	movs	r1, #20
 801a456:	4a15      	ldr	r2, [pc, #84]	; (801a4ac <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801a458:	6812      	ldr	r2, [r2, #0]
 801a45a:	fb01 2303 	mla	r3, r1, r3, r2
 801a45e:	7c58      	ldrb	r0, [r3, #17]
 801a460:	0942      	lsrs	r2, r0, #5
 801a462:	7cd8      	ldrb	r0, [r3, #19]
 801a464:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801a468:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801a46c:	bd10      	pop	{r4, pc}
 801a46e:	4910      	ldr	r1, [pc, #64]	; (801a4b0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801a470:	8809      	ldrh	r1, [r1, #0]
 801a472:	4411      	add	r1, r2
 801a474:	428b      	cmp	r3, r1
 801a476:	da09      	bge.n	801a48c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801a478:	210e      	movs	r1, #14
 801a47a:	1a9b      	subs	r3, r3, r2
 801a47c:	4a0d      	ldr	r2, [pc, #52]	; (801a4b4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801a47e:	6812      	ldr	r2, [r2, #0]
 801a480:	fb01 2303 	mla	r3, r1, r3, r2
 801a484:	7b18      	ldrb	r0, [r3, #12]
 801a486:	f000 001f 	and.w	r0, r0, #31
 801a48a:	e7ef      	b.n	801a46c <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801a48c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a490:	4293      	cmp	r3, r2
 801a492:	d106      	bne.n	801a4a2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801a494:	f7fb fd0a 	bl	8015eac <_ZN8touchgfx3HAL3lcdEv>
 801a498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a49c:	6803      	ldr	r3, [r0, #0]
 801a49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a4a0:	4718      	bx	r3
 801a4a2:	2000      	movs	r0, #0
 801a4a4:	e7e2      	b.n	801a46c <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801a4a6:	bf00      	nop
 801a4a8:	201979d8 	.word	0x201979d8
 801a4ac:	201979e0 	.word	0x201979e0
 801a4b0:	201979dc 	.word	0x201979dc
 801a4b4:	201979c0 	.word	0x201979c0

0801a4b8 <CRC_Lock>:
 801a4b8:	b530      	push	{r4, r5, lr}
 801a4ba:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801a4be:	f24c 2540 	movw	r5, #49728	; 0xc240
 801a4c2:	4a1e      	ldr	r2, [pc, #120]	; (801a53c <CRC_Lock+0x84>)
 801a4c4:	6813      	ldr	r3, [r2, #0]
 801a4c6:	f023 0301 	bic.w	r3, r3, #1
 801a4ca:	6013      	str	r3, [r2, #0]
 801a4cc:	4b1c      	ldr	r3, [pc, #112]	; (801a540 <CRC_Lock+0x88>)
 801a4ce:	681a      	ldr	r2, [r3, #0]
 801a4d0:	4022      	ands	r2, r4
 801a4d2:	42aa      	cmp	r2, r5
 801a4d4:	d005      	beq.n	801a4e2 <CRC_Lock+0x2a>
 801a4d6:	f24c 2270 	movw	r2, #49776	; 0xc270
 801a4da:	681b      	ldr	r3, [r3, #0]
 801a4dc:	4023      	ands	r3, r4
 801a4de:	4293      	cmp	r3, r2
 801a4e0:	d124      	bne.n	801a52c <CRC_Lock+0x74>
 801a4e2:	4b18      	ldr	r3, [pc, #96]	; (801a544 <CRC_Lock+0x8c>)
 801a4e4:	681b      	ldr	r3, [r3, #0]
 801a4e6:	bb0b      	cbnz	r3, 801a52c <CRC_Lock+0x74>
 801a4e8:	4b17      	ldr	r3, [pc, #92]	; (801a548 <CRC_Lock+0x90>)
 801a4ea:	681a      	ldr	r2, [r3, #0]
 801a4ec:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801a4f0:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801a4f4:	d00d      	beq.n	801a512 <CRC_Lock+0x5a>
 801a4f6:	f240 4483 	movw	r4, #1155	; 0x483
 801a4fa:	681a      	ldr	r2, [r3, #0]
 801a4fc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801a500:	42a2      	cmp	r2, r4
 801a502:	d006      	beq.n	801a512 <CRC_Lock+0x5a>
 801a504:	f240 4285 	movw	r2, #1157	; 0x485
 801a508:	681b      	ldr	r3, [r3, #0]
 801a50a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801a50e:	4293      	cmp	r3, r2
 801a510:	d10c      	bne.n	801a52c <CRC_Lock+0x74>
 801a512:	2201      	movs	r2, #1
 801a514:	4b0d      	ldr	r3, [pc, #52]	; (801a54c <CRC_Lock+0x94>)
 801a516:	601a      	str	r2, [r3, #0]
 801a518:	681a      	ldr	r2, [r3, #0]
 801a51a:	2a00      	cmp	r2, #0
 801a51c:	d1fc      	bne.n	801a518 <CRC_Lock+0x60>
 801a51e:	4b0c      	ldr	r3, [pc, #48]	; (801a550 <CRC_Lock+0x98>)
 801a520:	6018      	str	r0, [r3, #0]
 801a522:	6818      	ldr	r0, [r3, #0]
 801a524:	1a43      	subs	r3, r0, r1
 801a526:	4258      	negs	r0, r3
 801a528:	4158      	adcs	r0, r3
 801a52a:	bd30      	pop	{r4, r5, pc}
 801a52c:	2201      	movs	r2, #1
 801a52e:	4b09      	ldr	r3, [pc, #36]	; (801a554 <CRC_Lock+0x9c>)
 801a530:	601a      	str	r2, [r3, #0]
 801a532:	681a      	ldr	r2, [r3, #0]
 801a534:	2a00      	cmp	r2, #0
 801a536:	d1fc      	bne.n	801a532 <CRC_Lock+0x7a>
 801a538:	4b07      	ldr	r3, [pc, #28]	; (801a558 <CRC_Lock+0xa0>)
 801a53a:	e7f1      	b.n	801a520 <CRC_Lock+0x68>
 801a53c:	e0002000 	.word	0xe0002000
 801a540:	e000ed00 	.word	0xe000ed00
 801a544:	e0042000 	.word	0xe0042000
 801a548:	5c001000 	.word	0x5c001000
 801a54c:	58024c08 	.word	0x58024c08
 801a550:	58024c00 	.word	0x58024c00
 801a554:	40023008 	.word	0x40023008
 801a558:	40023000 	.word	0x40023000

0801a55c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801a55c:	6101      	str	r1, [r0, #16]
 801a55e:	4770      	bx	lr

0801a560 <_ZN8touchgfx8Gestures4tickEv>:
 801a560:	7b83      	ldrb	r3, [r0, #14]
 801a562:	b14b      	cbz	r3, 801a578 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801a564:	8903      	ldrh	r3, [r0, #8]
 801a566:	3301      	adds	r3, #1
 801a568:	b29b      	uxth	r3, r3
 801a56a:	2b07      	cmp	r3, #7
 801a56c:	8103      	strh	r3, [r0, #8]
 801a56e:	bf81      	itttt	hi
 801a570:	2300      	movhi	r3, #0
 801a572:	8143      	strhhi	r3, [r0, #10]
 801a574:	8183      	strhhi	r3, [r0, #12]
 801a576:	7383      	strbhi	r3, [r0, #14]
 801a578:	4770      	bx	lr
	...

0801a57c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801a57c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801a580:	4698      	mov	r8, r3
 801a582:	4604      	mov	r4, r0
 801a584:	8883      	ldrh	r3, [r0, #4]
 801a586:	460e      	mov	r6, r1
 801a588:	88c1      	ldrh	r1, [r0, #6]
 801a58a:	2000      	movs	r0, #0
 801a58c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a590:	eba8 0303 	sub.w	r3, r8, r3
 801a594:	b21b      	sxth	r3, r3
 801a596:	4617      	mov	r7, r2
 801a598:	4a17      	ldr	r2, [pc, #92]	; (801a5f8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 801a59a:	2b00      	cmp	r3, #0
 801a59c:	bfb8      	it	lt
 801a59e:	425b      	neglt	r3, r3
 801a5a0:	9200      	str	r2, [sp, #0]
 801a5a2:	8aa2      	ldrh	r2, [r4, #20]
 801a5a4:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801a5a8:	b21b      	sxth	r3, r3
 801a5aa:	4293      	cmp	r3, r2
 801a5ac:	f88d 0004 	strb.w	r0, [sp, #4]
 801a5b0:	f8ad 1008 	strh.w	r1, [sp, #8]
 801a5b4:	f8ad 800a 	strh.w	r8, [sp, #10]
 801a5b8:	f8ad 500c 	strh.w	r5, [sp, #12]
 801a5bc:	dc07      	bgt.n	801a5ce <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 801a5be:	1a69      	subs	r1, r5, r1
 801a5c0:	b209      	sxth	r1, r1
 801a5c2:	2900      	cmp	r1, #0
 801a5c4:	bfb8      	it	lt
 801a5c6:	4249      	neglt	r1, r1
 801a5c8:	b209      	sxth	r1, r1
 801a5ca:	428a      	cmp	r2, r1
 801a5cc:	da10      	bge.n	801a5f0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 801a5ce:	6920      	ldr	r0, [r4, #16]
 801a5d0:	4669      	mov	r1, sp
 801a5d2:	6803      	ldr	r3, [r0, #0]
 801a5d4:	eba8 0606 	sub.w	r6, r8, r6
 801a5d8:	685b      	ldr	r3, [r3, #4]
 801a5da:	4798      	blx	r3
 801a5dc:	2300      	movs	r3, #0
 801a5de:	2001      	movs	r0, #1
 801a5e0:	1bef      	subs	r7, r5, r7
 801a5e2:	8123      	strh	r3, [r4, #8]
 801a5e4:	8166      	strh	r6, [r4, #10]
 801a5e6:	81a7      	strh	r7, [r4, #12]
 801a5e8:	f8a4 8004 	strh.w	r8, [r4, #4]
 801a5ec:	80e5      	strh	r5, [r4, #6]
 801a5ee:	73a0      	strb	r0, [r4, #14]
 801a5f0:	b004      	add	sp, #16
 801a5f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a5f6:	bf00      	nop
 801a5f8:	0802aa98 	.word	0x0802aa98

0801a5fc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801a5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a5fe:	461e      	mov	r6, r3
 801a600:	1e4b      	subs	r3, r1, #1
 801a602:	2b01      	cmp	r3, #1
 801a604:	b085      	sub	sp, #20
 801a606:	4604      	mov	r4, r0
 801a608:	460d      	mov	r5, r1
 801a60a:	4617      	mov	r7, r2
 801a60c:	d84b      	bhi.n	801a6a6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801a60e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a612:	1cd3      	adds	r3, r2, #3
 801a614:	b29b      	uxth	r3, r3
 801a616:	2b06      	cmp	r3, #6
 801a618:	d916      	bls.n	801a648 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801a61a:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801a6bc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801a61e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a622:	f8cd c004 	str.w	ip, [sp, #4]
 801a626:	f04f 0c00 	mov.w	ip, #0
 801a62a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801a62e:	6900      	ldr	r0, [r0, #16]
 801a630:	f8ad 100c 	strh.w	r1, [sp, #12]
 801a634:	f88d c008 	strb.w	ip, [sp, #8]
 801a638:	f8ad 200a 	strh.w	r2, [sp, #10]
 801a63c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a640:	6803      	ldr	r3, [r0, #0]
 801a642:	a901      	add	r1, sp, #4
 801a644:	689b      	ldr	r3, [r3, #8]
 801a646:	4798      	blx	r3
 801a648:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a64c:	1cd3      	adds	r3, r2, #3
 801a64e:	b29b      	uxth	r3, r3
 801a650:	2b06      	cmp	r3, #6
 801a652:	d916      	bls.n	801a682 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801a654:	f8df c064 	ldr.w	ip, [pc, #100]	; 801a6bc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801a658:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a65c:	f8cd c004 	str.w	ip, [sp, #4]
 801a660:	f04f 0c01 	mov.w	ip, #1
 801a664:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801a668:	6920      	ldr	r0, [r4, #16]
 801a66a:	f8ad 100c 	strh.w	r1, [sp, #12]
 801a66e:	f88d c008 	strb.w	ip, [sp, #8]
 801a672:	f8ad 200a 	strh.w	r2, [sp, #10]
 801a676:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a67a:	6803      	ldr	r3, [r0, #0]
 801a67c:	a901      	add	r1, sp, #4
 801a67e:	689b      	ldr	r3, [r3, #8]
 801a680:	4798      	blx	r3
 801a682:	4b0d      	ldr	r3, [pc, #52]	; (801a6b8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801a684:	6920      	ldr	r0, [r4, #16]
 801a686:	9301      	str	r3, [sp, #4]
 801a688:	2300      	movs	r3, #0
 801a68a:	f88d 5008 	strb.w	r5, [sp, #8]
 801a68e:	f8ad 700a 	strh.w	r7, [sp, #10]
 801a692:	f8ad 600c 	strh.w	r6, [sp, #12]
 801a696:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a69a:	6803      	ldr	r3, [r0, #0]
 801a69c:	a901      	add	r1, sp, #4
 801a69e:	681b      	ldr	r3, [r3, #0]
 801a6a0:	4798      	blx	r3
 801a6a2:	b005      	add	sp, #20
 801a6a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a6a6:	2900      	cmp	r1, #0
 801a6a8:	d1eb      	bne.n	801a682 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801a6aa:	80a2      	strh	r2, [r4, #4]
 801a6ac:	80c6      	strh	r6, [r0, #6]
 801a6ae:	60a1      	str	r1, [r4, #8]
 801a6b0:	81a1      	strh	r1, [r4, #12]
 801a6b2:	73a1      	strb	r1, [r4, #14]
 801a6b4:	e7e5      	b.n	801a682 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801a6b6:	bf00      	nop
 801a6b8:	0802aa84 	.word	0x0802aa84
 801a6bc:	0802aaac 	.word	0x0802aaac

0801a6c0 <nema_rb_init>:
 801a6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6c4:	6805      	ldr	r5, [r0, #0]
 801a6c6:	4f23      	ldr	r7, [pc, #140]	; (801a754 <nema_rb_init+0x94>)
 801a6c8:	2d00      	cmp	r5, #0
 801a6ca:	603d      	str	r5, [r7, #0]
 801a6cc:	dd3c      	ble.n	801a748 <nema_rb_init+0x88>
 801a6ce:	f8df c090 	ldr.w	ip, [pc, #144]	; 801a760 <nema_rb_init+0xa0>
 801a6d2:	10ab      	asrs	r3, r5, #2
 801a6d4:	3b04      	subs	r3, #4
 801a6d6:	f8df e08c 	ldr.w	lr, [pc, #140]	; 801a764 <nema_rb_init+0xa4>
 801a6da:	6886      	ldr	r6, [r0, #8]
 801a6dc:	4c1e      	ldr	r4, [pc, #120]	; (801a758 <nema_rb_init+0x98>)
 801a6de:	f8cc 3000 	str.w	r3, [ip]
 801a6e2:	f8df 8084 	ldr.w	r8, [pc, #132]	; 801a768 <nema_rb_init+0xa8>
 801a6e6:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801a6ea:	f8ce 0000 	str.w	r0, [lr]
 801a6ee:	6026      	str	r6, [r4, #0]
 801a6f0:	f8c8 c000 	str.w	ip, [r8]
 801a6f4:	b329      	cbz	r1, 801a742 <nema_rb_init+0x82>
 801a6f6:	2400      	movs	r4, #0
 801a6f8:	f8df e070 	ldr.w	lr, [pc, #112]	; 801a76c <nema_rb_init+0xac>
 801a6fc:	4917      	ldr	r1, [pc, #92]	; (801a75c <nema_rb_init+0x9c>)
 801a6fe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801a702:	f846 e023 	str.w	lr, [r6, r3, lsl #2]
 801a706:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801a70a:	e9c3 1502 	strd	r1, r5, [r3, #8]
 801a70e:	f8c3 c004 	str.w	ip, [r3, #4]
 801a712:	f7e8 fb20 	bl	8002d56 <nema_buffer_flush>
 801a716:	4621      	mov	r1, r4
 801a718:	f44f 70a4 	mov.w	r0, #328	; 0x148
 801a71c:	f7e8 fa66 	bl	8002bec <nema_reg_write>
 801a720:	f8d8 1000 	ldr.w	r1, [r8]
 801a724:	20ec      	movs	r0, #236	; 0xec
 801a726:	f041 0106 	orr.w	r1, r1, #6
 801a72a:	f7e8 fa5f 	bl	8002bec <nema_reg_write>
 801a72e:	f8d8 1000 	ldr.w	r1, [r8]
 801a732:	20f0      	movs	r0, #240	; 0xf0
 801a734:	f7e8 fa5a 	bl	8002bec <nema_reg_write>
 801a738:	6839      	ldr	r1, [r7, #0]
 801a73a:	20f4      	movs	r0, #244	; 0xf4
 801a73c:	f7e8 fa56 	bl	8002bec <nema_reg_write>
 801a740:	4621      	mov	r1, r4
 801a742:	4608      	mov	r0, r1
 801a744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a748:	2004      	movs	r0, #4
 801a74a:	f000 fa25 	bl	801ab98 <nema_set_error>
 801a74e:	f04f 31ff 	mov.w	r1, #4294967295
 801a752:	e7f6      	b.n	801a742 <nema_rb_init+0x82>
 801a754:	201979f4 	.word	0x201979f4
 801a758:	201979ec 	.word	0x201979ec
 801a75c:	ff0000f4 	.word	0xff0000f4
 801a760:	201979f0 	.word	0x201979f0
 801a764:	201979e4 	.word	0x201979e4
 801a768:	201979e8 	.word	0x201979e8
 801a76c:	ff0000f0 	.word	0xff0000f0

0801a770 <nema_rb_submit_cmdlist2>:
 801a770:	2900      	cmp	r1, #0
 801a772:	d074      	beq.n	801a85e <nema_rb_submit_cmdlist2+0xee>
 801a774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a778:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 801a874 <nema_rb_submit_cmdlist2+0x104>
 801a77c:	4b39      	ldr	r3, [pc, #228]	; (801a864 <nema_rb_submit_cmdlist2+0xf4>)
 801a77e:	f8d8 2000 	ldr.w	r2, [r8]
 801a782:	681d      	ldr	r5, [r3, #0]
 801a784:	6913      	ldr	r3, [r2, #16]
 801a786:	468c      	mov	ip, r1
 801a788:	4c37      	ldr	r4, [pc, #220]	; (801a868 <nema_rb_submit_cmdlist2+0xf8>)
 801a78a:	1d19      	adds	r1, r3, #4
 801a78c:	42a9      	cmp	r1, r5
 801a78e:	6824      	ldr	r4, [r4, #0]
 801a790:	db0a      	blt.n	801a7a8 <nema_rb_submit_cmdlist2+0x38>
 801a792:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 801a796:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 801a79a:	6913      	ldr	r3, [r2, #16]
 801a79c:	3301      	adds	r3, #1
 801a79e:	429d      	cmp	r5, r3
 801a7a0:	6113      	str	r3, [r2, #16]
 801a7a2:	dc59      	bgt.n	801a858 <nema_rb_submit_cmdlist2+0xe8>
 801a7a4:	2300      	movs	r3, #0
 801a7a6:	6113      	str	r3, [r2, #16]
 801a7a8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 801a7ac:	f04f 0e00 	mov.w	lr, #0
 801a7b0:	e009      	b.n	801a7c6 <nema_rb_submit_cmdlist2+0x56>
 801a7b2:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 801a7b6:	6913      	ldr	r3, [r2, #16]
 801a7b8:	3301      	adds	r3, #1
 801a7ba:	429d      	cmp	r5, r3
 801a7bc:	6113      	str	r3, [r2, #16]
 801a7be:	bfdc      	itt	le
 801a7c0:	2300      	movle	r3, #0
 801a7c2:	f8c2 e010 	strle.w	lr, [r2, #16]
 801a7c6:	f013 0703 	ands.w	r7, r3, #3
 801a7ca:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801a7ce:	d1f0      	bne.n	801a7b2 <nema_rb_submit_cmdlist2+0x42>
 801a7d0:	23f0      	movs	r3, #240	; 0xf0
 801a7d2:	6033      	str	r3, [r6, #0]
 801a7d4:	6913      	ldr	r3, [r2, #16]
 801a7d6:	3301      	adds	r3, #1
 801a7d8:	429d      	cmp	r5, r3
 801a7da:	bfd3      	iteet	le
 801a7dc:	4623      	movle	r3, r4
 801a7de:	6113      	strgt	r3, [r2, #16]
 801a7e0:	eb04 0383 	addgt.w	r3, r4, r3, lsl #2
 801a7e4:	6117      	strle	r7, [r2, #16]
 801a7e6:	6018      	str	r0, [r3, #0]
 801a7e8:	6913      	ldr	r3, [r2, #16]
 801a7ea:	3301      	adds	r3, #1
 801a7ec:	429d      	cmp	r5, r3
 801a7ee:	dd2f      	ble.n	801a850 <nema_rb_submit_cmdlist2+0xe0>
 801a7f0:	6113      	str	r3, [r2, #16]
 801a7f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801a7f6:	491d      	ldr	r1, [pc, #116]	; (801a86c <nema_rb_submit_cmdlist2+0xfc>)
 801a7f8:	4610      	mov	r0, r2
 801a7fa:	6019      	str	r1, [r3, #0]
 801a7fc:	6913      	ldr	r3, [r2, #16]
 801a7fe:	3301      	adds	r3, #1
 801a800:	429d      	cmp	r5, r3
 801a802:	bfd3      	iteet	le
 801a804:	2300      	movle	r3, #0
 801a806:	eb04 0483 	addgt.w	r4, r4, r3, lsl #2
 801a80a:	6113      	strgt	r3, [r2, #16]
 801a80c:	6113      	strle	r3, [r2, #16]
 801a80e:	f8c4 c000 	str.w	ip, [r4]
 801a812:	6913      	ldr	r3, [r2, #16]
 801a814:	3301      	adds	r3, #1
 801a816:	429d      	cmp	r5, r3
 801a818:	bfd8      	it	le
 801a81a:	2300      	movle	r3, #0
 801a81c:	6113      	str	r3, [r2, #16]
 801a81e:	f7e8 fa9a 	bl	8002d56 <nema_buffer_flush>
 801a822:	4a13      	ldr	r2, [pc, #76]	; (801a870 <nema_rb_submit_cmdlist2+0x100>)
 801a824:	f8d8 3000 	ldr.w	r3, [r8]
 801a828:	6811      	ldr	r1, [r2, #0]
 801a82a:	691b      	ldr	r3, [r3, #16]
 801a82c:	20ec      	movs	r0, #236	; 0xec
 801a82e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801a832:	f041 0104 	orr.w	r1, r1, #4
 801a836:	f7e8 f9d9 	bl	8002bec <nema_reg_write>
 801a83a:	f8d8 3000 	ldr.w	r3, [r8]
 801a83e:	6958      	ldr	r0, [r3, #20]
 801a840:	3001      	adds	r0, #1
 801a842:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 801a846:	bfa8      	it	ge
 801a848:	2000      	movge	r0, #0
 801a84a:	6158      	str	r0, [r3, #20]
 801a84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a850:	2100      	movs	r1, #0
 801a852:	4623      	mov	r3, r4
 801a854:	6111      	str	r1, [r2, #16]
 801a856:	e7ce      	b.n	801a7f6 <nema_rb_submit_cmdlist2+0x86>
 801a858:	2b00      	cmp	r3, #0
 801a85a:	d19c      	bne.n	801a796 <nema_rb_submit_cmdlist2+0x26>
 801a85c:	e7a4      	b.n	801a7a8 <nema_rb_submit_cmdlist2+0x38>
 801a85e:	f04f 30ff 	mov.w	r0, #4294967295
 801a862:	4770      	bx	lr
 801a864:	201979f0 	.word	0x201979f0
 801a868:	201979ec 	.word	0x201979ec
 801a86c:	000200f4 	.word	0x000200f4
 801a870:	201979e8 	.word	0x201979e8
 801a874:	201979e4 	.word	0x201979e4

0801a878 <nema_rb_submit_cmdlist>:
 801a878:	68c0      	ldr	r0, [r0, #12]
 801a87a:	f7ff bf79 	b.w	801a770 <nema_rb_submit_cmdlist2>
 801a87e:	bf00      	nop

0801a880 <nema_rb_inline_cmd>:
 801a880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a882:	4e21      	ldr	r6, [pc, #132]	; (801a908 <nema_rb_inline_cmd+0x88>)
 801a884:	4b21      	ldr	r3, [pc, #132]	; (801a90c <nema_rb_inline_cmd+0x8c>)
 801a886:	6832      	ldr	r2, [r6, #0]
 801a888:	681d      	ldr	r5, [r3, #0]
 801a88a:	6913      	ldr	r3, [r2, #16]
 801a88c:	4c20      	ldr	r4, [pc, #128]	; (801a910 <nema_rb_inline_cmd+0x90>)
 801a88e:	1c5f      	adds	r7, r3, #1
 801a890:	42af      	cmp	r7, r5
 801a892:	6824      	ldr	r4, [r4, #0]
 801a894:	db24      	blt.n	801a8e0 <nema_rb_inline_cmd+0x60>
 801a896:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 801a89a:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
 801a89e:	6913      	ldr	r3, [r2, #16]
 801a8a0:	3301      	adds	r3, #1
 801a8a2:	429d      	cmp	r5, r3
 801a8a4:	6113      	str	r3, [r2, #16]
 801a8a6:	dc17      	bgt.n	801a8d8 <nema_rb_inline_cmd+0x58>
 801a8a8:	2700      	movs	r7, #0
 801a8aa:	4623      	mov	r3, r4
 801a8ac:	6117      	str	r7, [r2, #16]
 801a8ae:	6018      	str	r0, [r3, #0]
 801a8b0:	6913      	ldr	r3, [r2, #16]
 801a8b2:	3301      	adds	r3, #1
 801a8b4:	429d      	cmp	r5, r3
 801a8b6:	bfd3      	iteet	le
 801a8b8:	2300      	movle	r3, #0
 801a8ba:	eb04 0483 	addgt.w	r4, r4, r3, lsl #2
 801a8be:	6113      	strgt	r3, [r2, #16]
 801a8c0:	6113      	strle	r3, [r2, #16]
 801a8c2:	6021      	str	r1, [r4, #0]
 801a8c4:	6913      	ldr	r3, [r2, #16]
 801a8c6:	3301      	adds	r3, #1
 801a8c8:	429d      	cmp	r5, r3
 801a8ca:	bfd8      	it	le
 801a8cc:	2300      	movle	r3, #0
 801a8ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801a8d2:	6113      	str	r3, [r2, #16]
 801a8d4:	d107      	bne.n	801a8e6 <nema_rb_inline_cmd+0x66>
 801a8d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a8d8:	2b00      	cmp	r3, #0
 801a8da:	d1de      	bne.n	801a89a <nema_rb_inline_cmd+0x1a>
 801a8dc:	4623      	mov	r3, r4
 801a8de:	e7e6      	b.n	801a8ae <nema_rb_inline_cmd+0x2e>
 801a8e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801a8e4:	e7e3      	b.n	801a8ae <nema_rb_inline_cmd+0x2e>
 801a8e6:	4610      	mov	r0, r2
 801a8e8:	f7e8 fa35 	bl	8002d56 <nema_buffer_flush>
 801a8ec:	6833      	ldr	r3, [r6, #0]
 801a8ee:	4a09      	ldr	r2, [pc, #36]	; (801a914 <nema_rb_inline_cmd+0x94>)
 801a8f0:	691b      	ldr	r3, [r3, #16]
 801a8f2:	6811      	ldr	r1, [r2, #0]
 801a8f4:	20ec      	movs	r0, #236	; 0xec
 801a8f6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801a8fa:	f041 0104 	orr.w	r1, r1, #4
 801a8fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a902:	f7e8 b973 	b.w	8002bec <nema_reg_write>
 801a906:	bf00      	nop
 801a908:	201979e4 	.word	0x201979e4
 801a90c:	201979f0 	.word	0x201979f0
 801a910:	201979ec 	.word	0x201979ec
 801a914:	201979e8 	.word	0x201979e8

0801a918 <nema_rb_force_flush>:
 801a918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a91a:	4e36      	ldr	r6, [pc, #216]	; (801a9f4 <nema_rb_force_flush+0xdc>)
 801a91c:	4b36      	ldr	r3, [pc, #216]	; (801a9f8 <nema_rb_force_flush+0xe0>)
 801a91e:	6830      	ldr	r0, [r6, #0]
 801a920:	6819      	ldr	r1, [r3, #0]
 801a922:	6903      	ldr	r3, [r0, #16]
 801a924:	4a35      	ldr	r2, [pc, #212]	; (801a9fc <nema_rb_force_flush+0xe4>)
 801a926:	1d1c      	adds	r4, r3, #4
 801a928:	428c      	cmp	r4, r1
 801a92a:	6812      	ldr	r2, [r2, #0]
 801a92c:	db0a      	blt.n	801a944 <nema_rb_force_flush+0x2c>
 801a92e:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 801a932:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 801a936:	6903      	ldr	r3, [r0, #16]
 801a938:	3301      	adds	r3, #1
 801a93a:	4299      	cmp	r1, r3
 801a93c:	6103      	str	r3, [r0, #16]
 801a93e:	dc51      	bgt.n	801a9e4 <nema_rb_force_flush+0xcc>
 801a940:	2300      	movs	r3, #0
 801a942:	6103      	str	r3, [r0, #16]
 801a944:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 801a948:	2700      	movs	r7, #0
 801a94a:	e008      	b.n	801a95e <nema_rb_force_flush+0x46>
 801a94c:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 801a950:	6903      	ldr	r3, [r0, #16]
 801a952:	3301      	adds	r3, #1
 801a954:	4299      	cmp	r1, r3
 801a956:	6103      	str	r3, [r0, #16]
 801a958:	bfdc      	itt	le
 801a95a:	2300      	movle	r3, #0
 801a95c:	6107      	strle	r7, [r0, #16]
 801a95e:	f013 0c03 	ands.w	ip, r3, #3
 801a962:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 801a966:	d1f1      	bne.n	801a94c <nema_rb_force_flush+0x34>
 801a968:	4d25      	ldr	r5, [pc, #148]	; (801aa00 <nema_rb_force_flush+0xe8>)
 801a96a:	4f26      	ldr	r7, [pc, #152]	; (801aa04 <nema_rb_force_flush+0xec>)
 801a96c:	6025      	str	r5, [r4, #0]
 801a96e:	6904      	ldr	r4, [r0, #16]
 801a970:	683d      	ldr	r5, [r7, #0]
 801a972:	3401      	adds	r4, #1
 801a974:	42a1      	cmp	r1, r4
 801a976:	bfd8      	it	le
 801a978:	4614      	movle	r4, r2
 801a97a:	f103 0304 	add.w	r3, r3, #4
 801a97e:	bfc8      	it	gt
 801a980:	6104      	strgt	r4, [r0, #16]
 801a982:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801a986:	bfcc      	ite	gt
 801a988:	eb02 0484 	addgt.w	r4, r2, r4, lsl #2
 801a98c:	f8c0 c010 	strle.w	ip, [r0, #16]
 801a990:	6023      	str	r3, [r4, #0]
 801a992:	6903      	ldr	r3, [r0, #16]
 801a994:	3301      	adds	r3, #1
 801a996:	4299      	cmp	r1, r3
 801a998:	dd27      	ble.n	801a9ea <nema_rb_force_flush+0xd2>
 801a99a:	6103      	str	r3, [r0, #16]
 801a99c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a9a0:	4c19      	ldr	r4, [pc, #100]	; (801aa08 <nema_rb_force_flush+0xf0>)
 801a9a2:	601c      	str	r4, [r3, #0]
 801a9a4:	6903      	ldr	r3, [r0, #16]
 801a9a6:	3301      	adds	r3, #1
 801a9a8:	4299      	cmp	r1, r3
 801a9aa:	bfd5      	itete	le
 801a9ac:	2300      	movle	r3, #0
 801a9ae:	6103      	strgt	r3, [r0, #16]
 801a9b0:	6103      	strle	r3, [r0, #16]
 801a9b2:	eb02 0283 	addgt.w	r2, r2, r3, lsl #2
 801a9b6:	4b15      	ldr	r3, [pc, #84]	; (801aa0c <nema_rb_force_flush+0xf4>)
 801a9b8:	681b      	ldr	r3, [r3, #0]
 801a9ba:	6013      	str	r3, [r2, #0]
 801a9bc:	6903      	ldr	r3, [r0, #16]
 801a9be:	3301      	adds	r3, #1
 801a9c0:	4299      	cmp	r1, r3
 801a9c2:	bfd8      	it	le
 801a9c4:	2300      	movle	r3, #0
 801a9c6:	6103      	str	r3, [r0, #16]
 801a9c8:	f7e8 f9c5 	bl	8002d56 <nema_buffer_flush>
 801a9cc:	6833      	ldr	r3, [r6, #0]
 801a9ce:	6839      	ldr	r1, [r7, #0]
 801a9d0:	691b      	ldr	r3, [r3, #16]
 801a9d2:	20ec      	movs	r0, #236	; 0xec
 801a9d4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801a9d8:	f041 0104 	orr.w	r1, r1, #4
 801a9dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a9e0:	f7e8 b904 	b.w	8002bec <nema_reg_write>
 801a9e4:	2b00      	cmp	r3, #0
 801a9e6:	d1a4      	bne.n	801a932 <nema_rb_force_flush+0x1a>
 801a9e8:	e7ac      	b.n	801a944 <nema_rb_force_flush+0x2c>
 801a9ea:	2400      	movs	r4, #0
 801a9ec:	4613      	mov	r3, r2
 801a9ee:	6104      	str	r4, [r0, #16]
 801a9f0:	e7d6      	b.n	801a9a0 <nema_rb_force_flush+0x88>
 801a9f2:	bf00      	nop
 801a9f4:	201979e4 	.word	0x201979e4
 801a9f8:	201979f0 	.word	0x201979f0
 801a9fc:	201979ec 	.word	0x201979ec
 801aa00:	ff0000f0 	.word	0xff0000f0
 801aa04:	201979e8 	.word	0x201979e8
 801aa08:	ff0000f4 	.word	0xff0000f4
 801aa0c:	201979f4 	.word	0x201979f4

0801aa10 <nema_rb_submit_cl_id>:
 801aa10:	b510      	push	{r4, lr}
 801aa12:	1e04      	subs	r4, r0, #0
 801aa14:	dd40      	ble.n	801aa98 <nema_rb_submit_cl_id+0x88>
 801aa16:	2000      	movs	r0, #0
 801aa18:	f7e8 f9a7 	bl	8002d6a <nema_mutex_lock>
 801aa1c:	4621      	mov	r1, r4
 801aa1e:	f44f 70a4 	mov.w	r0, #328	; 0x148
 801aa22:	f7ff ff2d 	bl	801a880 <nema_rb_inline_cmd>
 801aa26:	4a1d      	ldr	r2, [pc, #116]	; (801aa9c <nema_rb_submit_cl_id+0x8c>)
 801aa28:	4b1d      	ldr	r3, [pc, #116]	; (801aaa0 <nema_rb_submit_cl_id+0x90>)
 801aa2a:	6812      	ldr	r2, [r2, #0]
 801aa2c:	6818      	ldr	r0, [r3, #0]
 801aa2e:	6913      	ldr	r3, [r2, #16]
 801aa30:	1c59      	adds	r1, r3, #1
 801aa32:	4281      	cmp	r1, r0
 801aa34:	db0e      	blt.n	801aa54 <nema_rb_submit_cl_id+0x44>
 801aa36:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 801aa3a:	491a      	ldr	r1, [pc, #104]	; (801aaa4 <nema_rb_submit_cl_id+0x94>)
 801aa3c:	6809      	ldr	r1, [r1, #0]
 801aa3e:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
 801aa42:	6913      	ldr	r3, [r2, #16]
 801aa44:	3301      	adds	r3, #1
 801aa46:	4298      	cmp	r0, r3
 801aa48:	6113      	str	r3, [r2, #16]
 801aa4a:	dc21      	bgt.n	801aa90 <nema_rb_submit_cl_id+0x80>
 801aa4c:	2400      	movs	r4, #0
 801aa4e:	460b      	mov	r3, r1
 801aa50:	6114      	str	r4, [r2, #16]
 801aa52:	e003      	b.n	801aa5c <nema_rb_submit_cl_id+0x4c>
 801aa54:	4913      	ldr	r1, [pc, #76]	; (801aaa4 <nema_rb_submit_cl_id+0x94>)
 801aa56:	6809      	ldr	r1, [r1, #0]
 801aa58:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801aa5c:	24f8      	movs	r4, #248	; 0xf8
 801aa5e:	601c      	str	r4, [r3, #0]
 801aa60:	6913      	ldr	r3, [r2, #16]
 801aa62:	3301      	adds	r3, #1
 801aa64:	4298      	cmp	r0, r3
 801aa66:	bfd5      	itete	le
 801aa68:	2300      	movle	r3, #0
 801aa6a:	6113      	strgt	r3, [r2, #16]
 801aa6c:	6113      	strle	r3, [r2, #16]
 801aa6e:	eb01 0183 	addgt.w	r1, r1, r3, lsl #2
 801aa72:	2301      	movs	r3, #1
 801aa74:	600b      	str	r3, [r1, #0]
 801aa76:	6913      	ldr	r3, [r2, #16]
 801aa78:	3301      	adds	r3, #1
 801aa7a:	4298      	cmp	r0, r3
 801aa7c:	bfd8      	it	le
 801aa7e:	2300      	movle	r3, #0
 801aa80:	6113      	str	r3, [r2, #16]
 801aa82:	f7ff ff49 	bl	801a918 <nema_rb_force_flush>
 801aa86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aa8a:	2000      	movs	r0, #0
 801aa8c:	f7e8 b97a 	b.w	8002d84 <nema_mutex_unlock>
 801aa90:	2b00      	cmp	r3, #0
 801aa92:	d1d4      	bne.n	801aa3e <nema_rb_submit_cl_id+0x2e>
 801aa94:	460b      	mov	r3, r1
 801aa96:	e7e1      	b.n	801aa5c <nema_rb_submit_cl_id+0x4c>
 801aa98:	bd10      	pop	{r4, pc}
 801aa9a:	bf00      	nop
 801aa9c:	201979e4 	.word	0x201979e4
 801aaa0:	201979f0 	.word	0x201979f0
 801aaa4:	201979ec 	.word	0x201979ec

0801aaa8 <init_nema_regs>:
 801aaa8:	b538      	push	{r3, r4, r5, lr}
 801aaaa:	2100      	movs	r1, #0
 801aaac:	20e8      	movs	r0, #232	; 0xe8
 801aaae:	f7e8 f89d 	bl	8002bec <nema_reg_write>
 801aab2:	2100      	movs	r1, #0
 801aab4:	20fc      	movs	r0, #252	; 0xfc
 801aab6:	f7e8 f899 	bl	8002bec <nema_reg_write>
 801aaba:	2101      	movs	r1, #1
 801aabc:	f44f 7062 	mov.w	r0, #904	; 0x388
 801aac0:	f7e8 f894 	bl	8002bec <nema_reg_write>
 801aac4:	2000      	movs	r0, #0
 801aac6:	f001 f8f7 	bl	801bcb8 <nema_set_interrupt_ctrl>
 801aaca:	f001 fe93 	bl	801c7f4 <nema_blender_init>
 801aace:	2100      	movs	r1, #0
 801aad0:	f44f 7000 	mov.w	r0, #512	; 0x200
 801aad4:	f001 fda0 	bl	801c618 <nema_cl_add_cmd>
 801aad8:	f04f 31ff 	mov.w	r1, #4294967295
 801aadc:	f44f 7001 	mov.w	r0, #516	; 0x204
 801aae0:	f001 fd9a 	bl	801c618 <nema_cl_add_cmd>
 801aae4:	f000 fec6 	bl	801b874 <nema_readHwConfig>
 801aae8:	f410 2080 	ands.w	r0, r0, #262144	; 0x40000
 801aaec:	d015      	beq.n	801ab1a <init_nema_regs+0x72>
 801aaee:	2007      	movs	r0, #7
 801aaf0:	f001 f82e 	bl	801bb50 <nema_set_depth_ctrl>
 801aaf4:	2300      	movs	r3, #0
 801aaf6:	4c10      	ldr	r4, [pc, #64]	; (801ab38 <init_nema_regs+0x90>)
 801aaf8:	7820      	ldrb	r0, [r4, #0]
 801aafa:	7063      	strb	r3, [r4, #1]
 801aafc:	f000 fecc 	bl	801b898 <nema_enable_tiling>
 801ab00:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 801ab04:	2500      	movs	r5, #0
 801ab06:	6962      	ldr	r2, [r4, #20]
 801ab08:	430b      	orrs	r3, r1
 801ab0a:	4313      	orrs	r3, r2
 801ab0c:	e9c4 5303 	strd	r5, r3, [r4, #12]
 801ab10:	f000 febe 	bl	801b890 <nema_readHwConfigH>
 801ab14:	0583      	lsls	r3, r0, #22
 801ab16:	d403      	bmi.n	801ab20 <init_nema_regs+0x78>
 801ab18:	bd38      	pop	{r3, r4, r5, pc}
 801ab1a:	4c07      	ldr	r4, [pc, #28]	; (801ab38 <init_nema_regs+0x90>)
 801ab1c:	70a0      	strb	r0, [r4, #2]
 801ab1e:	e7ef      	b.n	801ab00 <init_nema_regs+0x58>
 801ab20:	4629      	mov	r1, r5
 801ab22:	f44f 705d 	mov.w	r0, #884	; 0x374
 801ab26:	f7e8 f861 	bl	8002bec <nema_reg_write>
 801ab2a:	4629      	mov	r1, r5
 801ab2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ab30:	f44f 705a 	mov.w	r0, #872	; 0x368
 801ab34:	f7e8 b85a 	b.w	8002bec <nema_reg_write>
 801ab38:	20197d94 	.word	0x20197d94

0801ab3c <nema_init>:
 801ab3c:	b510      	push	{r4, lr}
 801ab3e:	f7e7 ffdf 	bl	8002b00 <nema_sys_init>
 801ab42:	1e04      	subs	r4, r0, #0
 801ab44:	db11      	blt.n	801ab6a <nema_init+0x2e>
 801ab46:	f44f 70f6 	mov.w	r0, #492	; 0x1ec
 801ab4a:	f7e8 f83f 	bl	8002bcc <nema_reg_read>
 801ab4e:	4b10      	ldr	r3, [pc, #64]	; (801ab90 <nema_init+0x54>)
 801ab50:	4298      	cmp	r0, r3
 801ab52:	d114      	bne.n	801ab7e <nema_init+0x42>
 801ab54:	f001 fc7e 	bl	801c454 <nema_cl_unbind>
 801ab58:	22d0      	movs	r2, #208	; 0xd0
 801ab5a:	2100      	movs	r1, #0
 801ab5c:	480d      	ldr	r0, [pc, #52]	; (801ab94 <nema_init+0x58>)
 801ab5e:	f00d fb05 	bl	802816c <memset>
 801ab62:	b14c      	cbz	r4, 801ab78 <nema_init+0x3c>
 801ab64:	2400      	movs	r4, #0
 801ab66:	4620      	mov	r0, r4
 801ab68:	bd10      	pop	{r4, pc}
 801ab6a:	4a0a      	ldr	r2, [pc, #40]	; (801ab94 <nema_init+0x58>)
 801ab6c:	4620      	mov	r0, r4
 801ab6e:	6993      	ldr	r3, [r2, #24]
 801ab70:	f043 0301 	orr.w	r3, r3, #1
 801ab74:	6193      	str	r3, [r2, #24]
 801ab76:	bd10      	pop	{r4, pc}
 801ab78:	f7ff ff96 	bl	801aaa8 <init_nema_regs>
 801ab7c:	e7f3      	b.n	801ab66 <nema_init+0x2a>
 801ab7e:	4a05      	ldr	r2, [pc, #20]	; (801ab94 <nema_init+0x58>)
 801ab80:	f04f 34ff 	mov.w	r4, #4294967295
 801ab84:	6993      	ldr	r3, [r2, #24]
 801ab86:	f043 0302 	orr.w	r3, r3, #2
 801ab8a:	6193      	str	r3, [r2, #24]
 801ab8c:	e7eb      	b.n	801ab66 <nema_init+0x2a>
 801ab8e:	bf00      	nop
 801ab90:	86362000 	.word	0x86362000
 801ab94:	20197d94 	.word	0x20197d94

0801ab98 <nema_set_error>:
 801ab98:	4a02      	ldr	r2, [pc, #8]	; (801aba4 <nema_set_error+0xc>)
 801ab9a:	6993      	ldr	r3, [r2, #24]
 801ab9c:	4318      	orrs	r0, r3
 801ab9e:	6190      	str	r0, [r2, #24]
 801aba0:	4770      	bx	lr
 801aba2:	bf00      	nop
 801aba4:	20197d94 	.word	0x20197d94

0801aba8 <nema_set_tex_color>:
 801aba8:	4601      	mov	r1, r0
 801abaa:	201c      	movs	r0, #28
 801abac:	f001 bd34 	b.w	801c618 <nema_cl_add_cmd>

0801abb0 <nema_set_const_reg>:
 801abb0:	3080      	adds	r0, #128	; 0x80
 801abb2:	0080      	lsls	r0, r0, #2
 801abb4:	f5b0 7f03 	cmp.w	r0, #524	; 0x20c
 801abb8:	d900      	bls.n	801abbc <nema_set_const_reg+0xc>
 801abba:	4770      	bx	lr
 801abbc:	f001 bd2c 	b.w	801c618 <nema_cl_add_cmd>

0801abc0 <nema_set_clip>:
 801abc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801abc2:	460c      	mov	r4, r1
 801abc4:	4607      	mov	r7, r0
 801abc6:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
 801abca:	4d0c      	ldr	r5, [pc, #48]	; (801abfc <nema_set_clip+0x3c>)
 801abcc:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 801abd0:	b289      	uxth	r1, r1
 801abd2:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801abd6:	19d6      	adds	r6, r2, r7
 801abd8:	f44f 7088 	mov.w	r0, #272	; 0x110
 801abdc:	e9c5 7407 	strd	r7, r4, [r5, #28]
 801abe0:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
 801abe4:	441c      	add	r4, r3
 801abe6:	f001 fd17 	bl	801c618 <nema_cl_add_cmd>
 801abea:	b2b1      	uxth	r1, r6
 801abec:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801abf0:	f44f 708a 	mov.w	r0, #276	; 0x114
 801abf4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801abf8:	f001 bd0e 	b.w	801c618 <nema_cl_add_cmd>
 801abfc:	20197d94 	.word	0x20197d94

0801ac00 <nema_enable_gradient>:
 801ac00:	2800      	cmp	r0, #0
 801ac02:	bf14      	ite	ne
 801ac04:	f04f 6100 	movne.w	r1, #134217728	; 0x8000000
 801ac08:	2100      	moveq	r1, #0
 801ac0a:	b410      	push	{r4}
 801ac0c:	4a05      	ldr	r2, [pc, #20]	; (801ac24 <nema_enable_gradient+0x24>)
 801ac0e:	6950      	ldr	r0, [r2, #20]
 801ac10:	e9d2 3401 	ldrd	r3, r4, [r2, #4]
 801ac14:	4323      	orrs	r3, r4
 801ac16:	4303      	orrs	r3, r0
 801ac18:	430b      	orrs	r3, r1
 801ac1a:	e9c2 1303 	strd	r1, r3, [r2, #12]
 801ac1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ac22:	4770      	bx	lr
 801ac24:	20197d94 	.word	0x20197d94

0801ac28 <nema_rgba>:
 801ac28:	061b      	lsls	r3, r3, #24
 801ac2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ac2e:	4318      	orrs	r0, r3
 801ac30:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801ac34:	4770      	bx	lr
 801ac36:	bf00      	nop

0801ac38 <nema_bind_src_tex>:
 801ac38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac3c:	9c06      	ldr	r4, [sp, #24]
 801ac3e:	460e      	mov	r6, r1
 801ac40:	1c61      	adds	r1, r4, #1
 801ac42:	4605      	mov	r5, r0
 801ac44:	4617      	mov	r7, r2
 801ac46:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801ac4a:	d022      	beq.n	801ac92 <nema_bind_src_tex+0x5a>
 801ac4c:	2201      	movs	r2, #1
 801ac4e:	0400      	lsls	r0, r0, #16
 801ac50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801ad24 <nema_bind_src_tex+0xec>
 801ac54:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
 801ac58:	b2a4      	uxth	r4, r4
 801ac5a:	4323      	orrs	r3, r4
 801ac5c:	2003      	movs	r0, #3
 801ac5e:	f8c8 3050 	str.w	r3, [r8, #80]	; 0x50
 801ac62:	e9c8 5611 	strd	r5, r6, [r8, #68]	; 0x44
 801ac66:	f8c8 704c 	str.w	r7, [r8, #76]	; 0x4c
 801ac6a:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 801ac6e:	f001 fc75 	bl	801c55c <nema_cl_get_space>
 801ac72:	b160      	cbz	r0, 801ac8e <nema_bind_src_tex+0x56>
 801ac74:	2110      	movs	r1, #16
 801ac76:	2214      	movs	r2, #20
 801ac78:	2318      	movs	r3, #24
 801ac7a:	e9c0 1500 	strd	r1, r5, [r0]
 801ac7e:	6082      	str	r2, [r0, #8]
 801ac80:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 801ac84:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 801ac88:	e9c0 2303 	strd	r2, r3, [r0, #12]
 801ac8c:	6146      	str	r6, [r0, #20]
 801ac8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ac92:	06c2      	lsls	r2, r0, #27
 801ac94:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 801ac98:	d41c      	bmi.n	801acd4 <nema_bind_src_tex+0x9c>
 801ac9a:	4634      	mov	r4, r6
 801ac9c:	f1a1 020b 	sub.w	r2, r1, #11
 801aca0:	2a2a      	cmp	r2, #42	; 0x2a
 801aca2:	d833      	bhi.n	801ad0c <nema_bind_src_tex+0xd4>
 801aca4:	e8df f002 	tbb	[pc, r2]
 801aca8:	32322a2a 	.word	0x32322a2a
 801acac:	30323232 	.word	0x30323232
 801acb0:	1c323232 	.word	0x1c323232
 801acb4:	3232321c 	.word	0x3232321c
 801acb8:	32323232 	.word	0x32323232
 801acbc:	32323232 	.word	0x32323232
 801acc0:	32323232 	.word	0x32323232
 801acc4:	2a241f2a 	.word	0x2a241f2a
 801acc8:	3232241f 	.word	0x3232241f
 801accc:	321f1f32 	.word	0x321f1f32
 801acd0:	2432      	.short	0x2432
 801acd2:	24          	.byte	0x24
 801acd3:	00          	.byte	0x00
 801acd4:	1cf4      	adds	r4, r6, #3
 801acd6:	bf48      	it	mi
 801acd8:	1db4      	addmi	r4, r6, #6
 801acda:	f024 0403 	bic.w	r4, r4, #3
 801acde:	e7dd      	b.n	801ac9c <nema_bind_src_tex+0x64>
 801ace0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ace4:	e7b2      	b.n	801ac4c <nema_bind_src_tex+0x14>
 801ace6:	0062      	lsls	r2, r4, #1
 801ace8:	1dd4      	adds	r4, r2, #7
 801acea:	d404      	bmi.n	801acf6 <nema_bind_src_tex+0xbe>
 801acec:	10e4      	asrs	r4, r4, #3
 801acee:	e7ad      	b.n	801ac4c <nema_bind_src_tex+0x14>
 801acf0:	00a2      	lsls	r2, r4, #2
 801acf2:	1dd4      	adds	r4, r2, #7
 801acf4:	d5fa      	bpl.n	801acec <nema_bind_src_tex+0xb4>
 801acf6:	f102 040e 	add.w	r4, r2, #14
 801acfa:	e7f7      	b.n	801acec <nema_bind_src_tex+0xb4>
 801acfc:	1de2      	adds	r2, r4, #7
 801acfe:	bf48      	it	mi
 801ad00:	f104 020e 	addmi.w	r2, r4, #14
 801ad04:	10d4      	asrs	r4, r2, #3
 801ad06:	e7a1      	b.n	801ac4c <nema_bind_src_tex+0x14>
 801ad08:	0064      	lsls	r4, r4, #1
 801ad0a:	e79f      	b.n	801ac4c <nema_bind_src_tex+0x14>
 801ad0c:	3904      	subs	r1, #4
 801ad0e:	2947      	cmp	r1, #71	; 0x47
 801ad10:	bf8e      	itee	hi
 801ad12:	2204      	movhi	r2, #4
 801ad14:	4a02      	ldrls	r2, [pc, #8]	; (801ad20 <nema_bind_src_tex+0xe8>)
 801ad16:	5652      	ldrsbls	r2, [r2, r1]
 801ad18:	fb02 f404 	mul.w	r4, r2, r4
 801ad1c:	e796      	b.n	801ac4c <nema_bind_src_tex+0x14>
 801ad1e:	bf00      	nop
 801ad20:	0802aaec 	.word	0x0802aaec
 801ad24:	20197d94 	.word	0x20197d94

0801ad28 <nema_bind_dst_tex>:
 801ad28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad2c:	9c08      	ldr	r4, [sp, #32]
 801ad2e:	4699      	mov	r9, r3
 801ad30:	4617      	mov	r7, r2
 801ad32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801ad36:	1c63      	adds	r3, r4, #1
 801ad38:	4680      	mov	r8, r0
 801ad3a:	460e      	mov	r6, r1
 801ad3c:	d02c      	beq.n	801ad98 <nema_bind_dst_tex+0x70>
 801ad3e:	2a12      	cmp	r2, #18
 801ad40:	d009      	beq.n	801ad56 <nema_bind_dst_tex+0x2e>
 801ad42:	3a16      	subs	r2, #22
 801ad44:	2a01      	cmp	r2, #1
 801ad46:	d906      	bls.n	801ad56 <nema_bind_dst_tex+0x2e>
 801ad48:	4d50      	ldr	r5, [pc, #320]	; (801ae8c <nema_bind_dst_tex+0x164>)
 801ad4a:	7868      	ldrb	r0, [r5, #1]
 801ad4c:	f000 fda4 	bl	801b898 <nema_enable_tiling>
 801ad50:	e007      	b.n	801ad62 <nema_bind_dst_tex+0x3a>
 801ad52:	eb06 0446 	add.w	r4, r6, r6, lsl #1
 801ad56:	2301      	movs	r3, #1
 801ad58:	4d4c      	ldr	r5, [pc, #304]	; (801ae8c <nema_bind_dst_tex+0x164>)
 801ad5a:	4618      	mov	r0, r3
 801ad5c:	702b      	strb	r3, [r5, #0]
 801ad5e:	f000 fd9b 	bl	801b898 <nema_enable_tiling>
 801ad62:	2201      	movs	r2, #1
 801ad64:	b2a4      	uxth	r4, r4
 801ad66:	ea44 6409 	orr.w	r4, r4, r9, lsl #24
 801ad6a:	2003      	movs	r0, #3
 801ad6c:	63ec      	str	r4, [r5, #60]	; 0x3c
 801ad6e:	e9c5 860c 	strd	r8, r6, [r5, #48]	; 0x30
 801ad72:	63af      	str	r7, [r5, #56]	; 0x38
 801ad74:	642a      	str	r2, [r5, #64]	; 0x40
 801ad76:	f001 fbf1 	bl	801c55c <nema_cl_get_space>
 801ad7a:	b158      	cbz	r0, 801ad94 <nema_bind_dst_tex+0x6c>
 801ad7c:	2100      	movs	r1, #0
 801ad7e:	2204      	movs	r2, #4
 801ad80:	2308      	movs	r3, #8
 801ad82:	e9c0 1800 	strd	r1, r8, [r0]
 801ad86:	6082      	str	r2, [r0, #8]
 801ad88:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 801ad8a:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 801ad8e:	e9c0 2303 	strd	r2, r3, [r0, #12]
 801ad92:	6146      	str	r6, [r0, #20]
 801ad94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ad98:	f1a2 030b 	sub.w	r3, r2, #11
 801ad9c:	2b2a      	cmp	r3, #42	; 0x2a
 801ad9e:	d86b      	bhi.n	801ae78 <nema_bind_dst_tex+0x150>
 801ada0:	a101      	add	r1, pc, #4	; (adr r1, 801ada8 <nema_bind_dst_tex+0x80>)
 801ada2:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ada6:	bf00      	nop
 801ada8:	0801ae6b 	.word	0x0801ae6b
 801adac:	0801ae6b 	.word	0x0801ae6b
 801adb0:	0801ae79 	.word	0x0801ae79
 801adb4:	0801ae79 	.word	0x0801ae79
 801adb8:	0801ae79 	.word	0x0801ae79
 801adbc:	0801ae79 	.word	0x0801ae79
 801adc0:	0801ae79 	.word	0x0801ae79
 801adc4:	0801ae75 	.word	0x0801ae75
 801adc8:	0801ae79 	.word	0x0801ae79
 801adcc:	0801ae79 	.word	0x0801ae79
 801add0:	0801ae79 	.word	0x0801ae79
 801add4:	0801ad53 	.word	0x0801ad53
 801add8:	0801ad53 	.word	0x0801ad53
 801addc:	0801ae79 	.word	0x0801ae79
 801ade0:	0801ae79 	.word	0x0801ae79
 801ade4:	0801ae79 	.word	0x0801ae79
 801ade8:	0801ae79 	.word	0x0801ae79
 801adec:	0801ae79 	.word	0x0801ae79
 801adf0:	0801ae79 	.word	0x0801ae79
 801adf4:	0801ae79 	.word	0x0801ae79
 801adf8:	0801ae79 	.word	0x0801ae79
 801adfc:	0801ae79 	.word	0x0801ae79
 801ae00:	0801ae79 	.word	0x0801ae79
 801ae04:	0801ae79 	.word	0x0801ae79
 801ae08:	0801ae79 	.word	0x0801ae79
 801ae0c:	0801ae79 	.word	0x0801ae79
 801ae10:	0801ae79 	.word	0x0801ae79
 801ae14:	0801ae79 	.word	0x0801ae79
 801ae18:	0801ae6b 	.word	0x0801ae6b
 801ae1c:	0801ae5f 	.word	0x0801ae5f
 801ae20:	0801ae55 	.word	0x0801ae55
 801ae24:	0801ae6b 	.word	0x0801ae6b
 801ae28:	0801ae5f 	.word	0x0801ae5f
 801ae2c:	0801ae55 	.word	0x0801ae55
 801ae30:	0801ae79 	.word	0x0801ae79
 801ae34:	0801ae79 	.word	0x0801ae79
 801ae38:	0801ae79 	.word	0x0801ae79
 801ae3c:	0801ae5f 	.word	0x0801ae5f
 801ae40:	0801ae5f 	.word	0x0801ae5f
 801ae44:	0801ae79 	.word	0x0801ae79
 801ae48:	0801ae79 	.word	0x0801ae79
 801ae4c:	0801ae55 	.word	0x0801ae55
 801ae50:	0801ae55 	.word	0x0801ae55
 801ae54:	00b3      	lsls	r3, r6, #2
 801ae56:	1ddc      	adds	r4, r3, #7
 801ae58:	d404      	bmi.n	801ae64 <nema_bind_dst_tex+0x13c>
 801ae5a:	10e4      	asrs	r4, r4, #3
 801ae5c:	e76f      	b.n	801ad3e <nema_bind_dst_tex+0x16>
 801ae5e:	0073      	lsls	r3, r6, #1
 801ae60:	1ddc      	adds	r4, r3, #7
 801ae62:	d5fa      	bpl.n	801ae5a <nema_bind_dst_tex+0x132>
 801ae64:	f103 040e 	add.w	r4, r3, #14
 801ae68:	e7f7      	b.n	801ae5a <nema_bind_dst_tex+0x132>
 801ae6a:	1df4      	adds	r4, r6, #7
 801ae6c:	d5f5      	bpl.n	801ae5a <nema_bind_dst_tex+0x132>
 801ae6e:	f106 040e 	add.w	r4, r6, #14
 801ae72:	e7f2      	b.n	801ae5a <nema_bind_dst_tex+0x132>
 801ae74:	0074      	lsls	r4, r6, #1
 801ae76:	e76e      	b.n	801ad56 <nema_bind_dst_tex+0x2e>
 801ae78:	1f13      	subs	r3, r2, #4
 801ae7a:	2b47      	cmp	r3, #71	; 0x47
 801ae7c:	bf8e      	itee	hi
 801ae7e:	2404      	movhi	r4, #4
 801ae80:	4903      	ldrls	r1, [pc, #12]	; (801ae90 <nema_bind_dst_tex+0x168>)
 801ae82:	56cc      	ldrsbls	r4, [r1, r3]
 801ae84:	fb06 f404 	mul.w	r4, r6, r4
 801ae88:	e759      	b.n	801ad3e <nema_bind_dst_tex+0x16>
 801ae8a:	bf00      	nop
 801ae8c:	20197d94 	.word	0x20197d94
 801ae90:	0802aaec 	.word	0x0802aaec

0801ae94 <nema_fill_rect>:
 801ae94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae98:	4604      	mov	r4, r0
 801ae9a:	460d      	mov	r5, r1
 801ae9c:	4616      	mov	r6, r2
 801ae9e:	461f      	mov	r7, r3
 801aea0:	9806      	ldr	r0, [sp, #24]
 801aea2:	f000 fe5b 	bl	801bb5c <nema_set_raster_color>
 801aea6:	463b      	mov	r3, r7
 801aea8:	4632      	mov	r2, r6
 801aeaa:	4629      	mov	r1, r5
 801aeac:	4620      	mov	r0, r4
 801aeae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aeb2:	f000 be95 	b.w	801bbe0 <nema_raster_rect>
 801aeb6:	bf00      	nop

0801aeb8 <nema_blit>:
 801aeb8:	ee07 0a90 	vmov	s15, r0
 801aebc:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801aec0:	ee07 1a90 	vmov	s15, r1
 801aec4:	b500      	push	{lr}
 801aec6:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801aeca:	b083      	sub	sp, #12
 801aecc:	e9cd 0100 	strd	r0, r1, [sp]
 801aed0:	f000 fdde 	bl	801ba90 <nema_set_matrix_translate>
 801aed4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801aed8:	4a03      	ldr	r2, [pc, #12]	; (801aee8 <nema_blit+0x30>)
 801aeda:	e9d2 2312 	ldrd	r2, r3, [r2, #72]	; 0x48
 801aede:	b003      	add	sp, #12
 801aee0:	f85d eb04 	ldr.w	lr, [sp], #4
 801aee4:	f000 be7c 	b.w	801bbe0 <nema_raster_rect>
 801aee8:	20197d94 	.word	0x20197d94

0801aeec <nema_blit_rotate>:
 801aeec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aeee:	2600      	movs	r6, #0
 801aef0:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 801aef4:	4b68      	ldr	r3, [pc, #416]	; (801b098 <nema_blit_rotate+0x1ac>)
 801aef6:	b08b      	sub	sp, #44	; 0x2c
 801aef8:	3a01      	subs	r2, #1
 801aefa:	9607      	str	r6, [sp, #28]
 801aefc:	9608      	str	r6, [sp, #32]
 801aefe:	9709      	str	r7, [sp, #36]	; 0x24
 801af00:	4604      	mov	r4, r0
 801af02:	e9d3 6712 	ldrd	r6, r7, [r3, #72]	; 0x48
 801af06:	460d      	mov	r5, r1
 801af08:	2a0e      	cmp	r2, #14
 801af0a:	f200 80b0 	bhi.w	801b06e <nema_blit_rotate+0x182>
 801af0e:	e8df f002 	tbb	[pc, r2]
 801af12:	4730      	.short	0x4730
 801af14:	9a836f58 	.word	0x9a836f58
 801af18:	6f089a08 	.word	0x6f089a08
 801af1c:	ae584783 	.word	0xae584783
 801af20:	30          	.byte	0x30
 801af21:	00          	.byte	0x00
 801af22:	1970      	adds	r0, r6, r5
 801af24:	ee07 0a10 	vmov	s14, r0
 801af28:	1938      	adds	r0, r7, r4
 801af2a:	4631      	mov	r1, r6
 801af2c:	ee07 0a90 	vmov	s15, r0
 801af30:	2200      	movs	r2, #0
 801af32:	463e      	mov	r6, r7
 801af34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801af38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801af3c:	460f      	mov	r7, r1
 801af3e:	4b57      	ldr	r3, [pc, #348]	; (801b09c <nema_blit_rotate+0x1b0>)
 801af40:	9201      	str	r2, [sp, #4]
 801af42:	9205      	str	r2, [sp, #20]
 801af44:	9302      	str	r3, [sp, #8]
 801af46:	9304      	str	r3, [sp, #16]
 801af48:	eddf 6a55 	vldr	s13, [pc, #340]	; 801b0a0 <nema_blit_rotate+0x1b4>
 801af4c:	ee37 7a26 	vadd.f32	s14, s14, s13
 801af50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801af54:	a801      	add	r0, sp, #4
 801af56:	ed8d 7a03 	vstr	s14, [sp, #12]
 801af5a:	edcd 7a06 	vstr	s15, [sp, #24]
 801af5e:	f000 fcdd 	bl	801b91c <nema_set_matrix>
 801af62:	463b      	mov	r3, r7
 801af64:	4632      	mov	r2, r6
 801af66:	4629      	mov	r1, r5
 801af68:	4620      	mov	r0, r4
 801af6a:	f000 fe39 	bl	801bbe0 <nema_raster_rect>
 801af6e:	b00b      	add	sp, #44	; 0x2c
 801af70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801af72:	ee07 4a90 	vmov	s15, r4
 801af76:	4630      	mov	r0, r6
 801af78:	442e      	add	r6, r5
 801af7a:	2300      	movs	r3, #0
 801af7c:	ee07 6a10 	vmov	s14, r6
 801af80:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801af84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801af88:	4944      	ldr	r1, [pc, #272]	; (801b09c <nema_blit_rotate+0x1b0>)
 801af8a:	463e      	mov	r6, r7
 801af8c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801af90:	9301      	str	r3, [sp, #4]
 801af92:	4607      	mov	r7, r0
 801af94:	9305      	str	r3, [sp, #20]
 801af96:	9102      	str	r1, [sp, #8]
 801af98:	9204      	str	r2, [sp, #16]
 801af9a:	eef1 7a67 	vneg.f32	s15, s15
 801af9e:	e7d3      	b.n	801af48 <nema_blit_rotate+0x5c>
 801afa0:	4b3e      	ldr	r3, [pc, #248]	; (801b09c <nema_blit_rotate+0x1b0>)
 801afa2:	2200      	movs	r2, #0
 801afa4:	9301      	str	r3, [sp, #4]
 801afa6:	9305      	str	r3, [sp, #20]
 801afa8:	1833      	adds	r3, r6, r0
 801afaa:	ee07 3a90 	vmov	s15, r3
 801afae:	1878      	adds	r0, r7, r1
 801afb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801afb4:	ee07 0a90 	vmov	s15, r0
 801afb8:	9202      	str	r2, [sp, #8]
 801afba:	9204      	str	r2, [sp, #16]
 801afbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801afc0:	e7c2      	b.n	801af48 <nema_blit_rotate+0x5c>
 801afc2:	ee07 5a10 	vmov	s14, r5
 801afc6:	4630      	mov	r0, r6
 801afc8:	193e      	adds	r6, r7, r4
 801afca:	2300      	movs	r3, #0
 801afcc:	ee07 6a90 	vmov	s15, r6
 801afd0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801afd4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801afd8:	4a30      	ldr	r2, [pc, #192]	; (801b09c <nema_blit_rotate+0x1b0>)
 801afda:	463e      	mov	r6, r7
 801afdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801afe0:	4607      	mov	r7, r0
 801afe2:	9301      	str	r3, [sp, #4]
 801afe4:	9305      	str	r3, [sp, #20]
 801afe6:	9102      	str	r1, [sp, #8]
 801afe8:	eeb1 7a47 	vneg.f32	s14, s14
 801afec:	9204      	str	r2, [sp, #16]
 801afee:	e7ab      	b.n	801af48 <nema_blit_rotate+0x5c>
 801aff0:	ee07 4a90 	vmov	s15, r4
 801aff4:	1978      	adds	r0, r7, r5
 801aff6:	2300      	movs	r3, #0
 801aff8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801affc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801b000:	ee07 0a90 	vmov	s15, r0
 801b004:	4a25      	ldr	r2, [pc, #148]	; (801b09c <nema_blit_rotate+0x1b0>)
 801b006:	9101      	str	r1, [sp, #4]
 801b008:	9302      	str	r3, [sp, #8]
 801b00a:	9304      	str	r3, [sp, #16]
 801b00c:	eeb1 7a47 	vneg.f32	s14, s14
 801b010:	9205      	str	r2, [sp, #20]
 801b012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b016:	e797      	b.n	801af48 <nema_blit_rotate+0x5c>
 801b018:	ee07 5a90 	vmov	s15, r5
 801b01c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b020:	ee07 0a90 	vmov	s15, r0
 801b024:	4631      	mov	r1, r6
 801b026:	2200      	movs	r2, #0
 801b028:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801b02c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b030:	463e      	mov	r6, r7
 801b032:	eeb1 7a47 	vneg.f32	s14, s14
 801b036:	460f      	mov	r7, r1
 801b038:	eef1 7a67 	vneg.f32	s15, s15
 801b03c:	9201      	str	r2, [sp, #4]
 801b03e:	9205      	str	r2, [sp, #20]
 801b040:	9302      	str	r3, [sp, #8]
 801b042:	9304      	str	r3, [sp, #16]
 801b044:	e780      	b.n	801af48 <nema_blit_rotate+0x5c>
 801b046:	ee07 5a90 	vmov	s15, r5
 801b04a:	1830      	adds	r0, r6, r0
 801b04c:	2300      	movs	r3, #0
 801b04e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801b052:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b056:	ee07 0a10 	vmov	s14, r0
 801b05a:	4910      	ldr	r1, [pc, #64]	; (801b09c <nema_blit_rotate+0x1b0>)
 801b05c:	9302      	str	r3, [sp, #8]
 801b05e:	9101      	str	r1, [sp, #4]
 801b060:	9304      	str	r3, [sp, #16]
 801b062:	9205      	str	r2, [sp, #20]
 801b064:	eef1 7a67 	vneg.f32	s15, s15
 801b068:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b06c:	e76c      	b.n	801af48 <nema_blit_rotate+0x5c>
 801b06e:	ee07 0a90 	vmov	s15, r0
 801b072:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b076:	ee07 1a90 	vmov	s15, r1
 801b07a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801b07e:	2300      	movs	r3, #0
 801b080:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b084:	9201      	str	r2, [sp, #4]
 801b086:	9205      	str	r2, [sp, #20]
 801b088:	9302      	str	r3, [sp, #8]
 801b08a:	9304      	str	r3, [sp, #16]
 801b08c:	eeb1 7a47 	vneg.f32	s14, s14
 801b090:	eef1 7a67 	vneg.f32	s15, s15
 801b094:	e758      	b.n	801af48 <nema_blit_rotate+0x5c>
 801b096:	bf00      	nop
 801b098:	20197d94 	.word	0x20197d94
 801b09c:	bf800000 	.word	0xbf800000
 801b0a0:	00000000 	.word	0x00000000

0801b0a4 <nema_blit_tri_fit>:
 801b0a4:	2803      	cmp	r0, #3
 801b0a6:	d801      	bhi.n	801b0ac <nema_blit_tri_fit+0x8>
 801b0a8:	2903      	cmp	r1, #3
 801b0aa:	d900      	bls.n	801b0ae <nema_blit_tri_fit+0xa>
 801b0ac:	4770      	bx	lr
 801b0ae:	2a03      	cmp	r2, #3
 801b0b0:	d8fc      	bhi.n	801b0ac <nema_blit_tri_fit+0x8>
 801b0b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b0b6:	460c      	mov	r4, r1
 801b0b8:	493b      	ldr	r1, [pc, #236]	; (801b1a8 <nema_blit_tri_fit+0x104>)
 801b0ba:	4603      	mov	r3, r0
 801b0bc:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
 801b0c0:	ee07 0a90 	vmov	s15, r0
 801b0c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b0c8:	ee07 1a90 	vmov	s15, r1
 801b0cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b0d0:	b08a      	sub	sp, #40	; 0x28
 801b0d2:	f04f 0c00 	mov.w	ip, #0
 801b0d6:	edcd 7a08 	vstr	s15, [sp, #32]
 801b0da:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 801b0de:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801b0e2:	ed8d 7a03 	vstr	s14, [sp, #12]
 801b0e6:	ed8d 7a04 	vstr	s14, [sp, #16]
 801b0ea:	ee12 8a10 	vmov	r8, s4
 801b0ee:	ee11 9a90 	vmov	r9, s3
 801b0f2:	ee11 aa10 	vmov	sl, s2
 801b0f6:	ee10 6a10 	vmov	r6, s0
 801b0fa:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 801b0fe:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 801b102:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
 801b106:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 801b10a:	f8cd c008 	str.w	ip, [sp, #8]
 801b10e:	f8cd c014 	str.w	ip, [sp, #20]
 801b112:	f8cd c018 	str.w	ip, [sp, #24]
 801b116:	f8cd c01c 	str.w	ip, [sp, #28]
 801b11a:	ed52 6a08 	vldr	s13, [r2, #-32]	; 0xffffffe0
 801b11e:	ed14 4a08 	vldr	s8, [r4, #-32]	; 0xffffffe0
 801b122:	ed53 1a08 	vldr	s3, [r3, #-32]	; 0xffffffe0
 801b126:	ed12 7a04 	vldr	s14, [r2, #-16]
 801b12a:	ed54 4a04 	vldr	s9, [r4, #-16]
 801b12e:	ed13 2a04 	vldr	s4, [r3, #-16]
 801b132:	eef0 5a62 	vmov.f32	s11, s5
 801b136:	ee05 8a10 	vmov	s10, r8
 801b13a:	ee03 9a10 	vmov	s6, r9
 801b13e:	eef0 3a46 	vmov.f32	s7, s12
 801b142:	eeb0 1a46 	vmov.f32	s2, s12
 801b146:	ee12 7a90 	vmov	r7, s5
 801b14a:	ee02 aa90 	vmov	s5, sl
 801b14e:	ee10 5a90 	vmov	r5, s1
 801b152:	f000 f889 	bl	801b268 <nema_interpolate_tx_ty>
 801b156:	ee00 6a10 	vmov	s0, r6
 801b15a:	f000 f90f 	bl	801b37c <nema_f2fx>
 801b15e:	ee00 5a10 	vmov	s0, r5
 801b162:	4604      	mov	r4, r0
 801b164:	f000 f90a 	bl	801b37c <nema_f2fx>
 801b168:	ee00 aa10 	vmov	s0, sl
 801b16c:	4605      	mov	r5, r0
 801b16e:	f000 f905 	bl	801b37c <nema_f2fx>
 801b172:	ee00 9a10 	vmov	s0, r9
 801b176:	4606      	mov	r6, r0
 801b178:	f000 f900 	bl	801b37c <nema_f2fx>
 801b17c:	ee00 8a10 	vmov	s0, r8
 801b180:	4681      	mov	r9, r0
 801b182:	f000 f8fb 	bl	801b37c <nema_f2fx>
 801b186:	ee00 7a10 	vmov	s0, r7
 801b18a:	4680      	mov	r8, r0
 801b18c:	f000 f8f6 	bl	801b37c <nema_f2fx>
 801b190:	464b      	mov	r3, r9
 801b192:	e9cd 8000 	strd	r8, r0, [sp]
 801b196:	4632      	mov	r2, r6
 801b198:	4629      	mov	r1, r5
 801b19a:	4620      	mov	r0, r4
 801b19c:	f000 fce4 	bl	801bb68 <nema_raster_triangle_fx>
 801b1a0:	b00a      	add	sp, #40	; 0x28
 801b1a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b1a6:	bf00      	nop
 801b1a8:	20197d94 	.word	0x20197d94

0801b1ac <nema_blit_quad_fit>:
 801b1ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b1b0:	ed2d 8b08 	vpush	{d8-d11}
 801b1b4:	4b2b      	ldr	r3, [pc, #172]	; (801b264 <nema_blit_quad_fit+0xb8>)
 801b1b6:	b08e      	sub	sp, #56	; 0x38
 801b1b8:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 801b1bc:	aa05      	add	r2, sp, #20
 801b1be:	eef0 ba40 	vmov.f32	s23, s0
 801b1c2:	eeb0 ba60 	vmov.f32	s22, s1
 801b1c6:	eef0 aa41 	vmov.f32	s21, s2
 801b1ca:	eeb0 aa61 	vmov.f32	s20, s3
 801b1ce:	eef0 9a42 	vmov.f32	s19, s4
 801b1d2:	eeb0 9a62 	vmov.f32	s18, s5
 801b1d6:	eef0 8a43 	vmov.f32	s17, s6
 801b1da:	eeb0 8a63 	vmov.f32	s16, s7
 801b1de:	f000 f9e1 	bl	801b5a4 <nema_mat3x3_quad_to_rect>
 801b1e2:	b120      	cbz	r0, 801b1ee <nema_blit_quad_fit+0x42>
 801b1e4:	b00e      	add	sp, #56	; 0x38
 801b1e6:	ecbd 8b08 	vpop	{d8-d11}
 801b1ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b1ee:	a805      	add	r0, sp, #20
 801b1f0:	f000 fb94 	bl	801b91c <nema_set_matrix>
 801b1f4:	eeb0 0a6b 	vmov.f32	s0, s23
 801b1f8:	f000 f8c0 	bl	801b37c <nema_f2fx>
 801b1fc:	eeb0 0a4b 	vmov.f32	s0, s22
 801b200:	4604      	mov	r4, r0
 801b202:	f000 f8bb 	bl	801b37c <nema_f2fx>
 801b206:	eeb0 0a6a 	vmov.f32	s0, s21
 801b20a:	4605      	mov	r5, r0
 801b20c:	f000 f8b6 	bl	801b37c <nema_f2fx>
 801b210:	eeb0 0a4a 	vmov.f32	s0, s20
 801b214:	4606      	mov	r6, r0
 801b216:	f000 f8b1 	bl	801b37c <nema_f2fx>
 801b21a:	eeb0 0a69 	vmov.f32	s0, s19
 801b21e:	4607      	mov	r7, r0
 801b220:	f000 f8ac 	bl	801b37c <nema_f2fx>
 801b224:	eeb0 0a49 	vmov.f32	s0, s18
 801b228:	4682      	mov	sl, r0
 801b22a:	f000 f8a7 	bl	801b37c <nema_f2fx>
 801b22e:	eeb0 0a68 	vmov.f32	s0, s17
 801b232:	4680      	mov	r8, r0
 801b234:	f000 f8a2 	bl	801b37c <nema_f2fx>
 801b238:	eeb0 0a48 	vmov.f32	s0, s16
 801b23c:	4681      	mov	r9, r0
 801b23e:	f000 f89d 	bl	801b37c <nema_f2fx>
 801b242:	f8cd a000 	str.w	sl, [sp]
 801b246:	e9cd 9002 	strd	r9, r0, [sp, #8]
 801b24a:	f8cd 8004 	str.w	r8, [sp, #4]
 801b24e:	463b      	mov	r3, r7
 801b250:	4632      	mov	r2, r6
 801b252:	4629      	mov	r1, r5
 801b254:	4620      	mov	r0, r4
 801b256:	f000 fced 	bl	801bc34 <nema_raster_quad_fx>
 801b25a:	b00e      	add	sp, #56	; 0x38
 801b25c:	ecbd 8b08 	vpop	{d8-d11}
 801b260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b264:	20197d94 	.word	0x20197d94

0801b268 <nema_interpolate_tx_ty>:
 801b268:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 801b26c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b270:	d407      	bmi.n	801b282 <nema_interpolate_tx_ty+0x1a>
 801b272:	eddf 7a40 	vldr	s15, [pc, #256]	; 801b374 <nema_interpolate_tx_ty+0x10c>
 801b276:	eeb4 1ae7 	vcmpe.f32	s2, s15
 801b27a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b27e:	d807      	bhi.n	801b290 <nema_interpolate_tx_ty+0x28>
 801b280:	4770      	bx	lr
 801b282:	eddf 7a3d 	vldr	s15, [pc, #244]	; 801b378 <nema_interpolate_tx_ty+0x110>
 801b286:	eeb4 1ae7 	vcmpe.f32	s2, s15
 801b28a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b28e:	daf7      	bge.n	801b280 <nema_interpolate_tx_ty+0x18>
 801b290:	eef5 3ac0 	vcmpe.f32	s7, #0.0
 801b294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b298:	d45b      	bmi.n	801b352 <nema_interpolate_tx_ty+0xea>
 801b29a:	eddf 7a36 	vldr	s15, [pc, #216]	; 801b374 <nema_interpolate_tx_ty+0x10c>
 801b29e:	eef4 3ae7 	vcmpe.f32	s7, s15
 801b2a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2a6:	d9eb      	bls.n	801b280 <nema_interpolate_tx_ty+0x18>
 801b2a8:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801b2ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2b0:	d457      	bmi.n	801b362 <nema_interpolate_tx_ty+0xfa>
 801b2b2:	eddf 7a30 	vldr	s15, [pc, #192]	; 801b374 <nema_interpolate_tx_ty+0x10c>
 801b2b6:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801b2ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2be:	d9df      	bls.n	801b280 <nema_interpolate_tx_ty+0x18>
 801b2c0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b2c4:	b570      	push	{r4, r5, r6, lr}
 801b2c6:	ee15 3a90 	vmov	r3, s11
 801b2ca:	ee13 2a10 	vmov	r2, s6
 801b2ce:	eec7 5a86 	vdiv.f32	s11, s15, s12
 801b2d2:	ee87 3a81 	vdiv.f32	s6, s15, s2
 801b2d6:	ee15 4a10 	vmov	r4, s10
 801b2da:	ee87 5aa3 	vdiv.f32	s10, s15, s7
 801b2de:	ee63 1a21 	vmul.f32	s3, s6, s3
 801b2e2:	ee23 2a02 	vmul.f32	s4, s6, s4
 801b2e6:	ee25 4a04 	vmul.f32	s8, s10, s8
 801b2ea:	ee65 4a24 	vmul.f32	s9, s10, s9
 801b2ee:	ee65 6aa6 	vmul.f32	s13, s11, s13
 801b2f2:	ee25 7a87 	vmul.f32	s14, s11, s14
 801b2f6:	b092      	sub	sp, #72	; 0x48
 801b2f8:	a809      	add	r0, sp, #36	; 0x24
 801b2fa:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
 801b2fe:	edcd 2a0a 	vstr	s5, [sp, #40]	; 0x28
 801b302:	edcd 0a0c 	vstr	s1, [sp, #48]	; 0x30
 801b306:	920d      	str	r2, [sp, #52]	; 0x34
 801b308:	930e      	str	r3, [sp, #56]	; 0x38
 801b30a:	edcd 1a00 	vstr	s3, [sp]
 801b30e:	ed8d 2a03 	vstr	s4, [sp, #12]
 801b312:	ed8d 4a01 	vstr	s8, [sp, #4]
 801b316:	edcd 4a04 	vstr	s9, [sp, #16]
 801b31a:	edcd 6a02 	vstr	s13, [sp, #8]
 801b31e:	ed8d 7a05 	vstr	s14, [sp, #20]
 801b322:	ed8d 3a06 	vstr	s6, [sp, #24]
 801b326:	ed8d 5a07 	vstr	s10, [sp, #28]
 801b32a:	edcd 5a08 	vstr	s11, [sp, #32]
 801b32e:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 801b332:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 801b336:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
 801b33a:	940b      	str	r4, [sp, #44]	; 0x2c
 801b33c:	f000 f8d2 	bl	801b4e4 <nema_mat3x3_adj>
 801b340:	a909      	add	r1, sp, #36	; 0x24
 801b342:	4668      	mov	r0, sp
 801b344:	f000 f838 	bl	801b3b8 <nema_mat3x3_mul>
 801b348:	4668      	mov	r0, sp
 801b34a:	f000 fae7 	bl	801b91c <nema_set_matrix>
 801b34e:	b012      	add	sp, #72	; 0x48
 801b350:	bd70      	pop	{r4, r5, r6, pc}
 801b352:	eddf 7a09 	vldr	s15, [pc, #36]	; 801b378 <nema_interpolate_tx_ty+0x110>
 801b356:	eef4 3ae7 	vcmpe.f32	s7, s15
 801b35a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b35e:	da8f      	bge.n	801b280 <nema_interpolate_tx_ty+0x18>
 801b360:	e7a2      	b.n	801b2a8 <nema_interpolate_tx_ty+0x40>
 801b362:	eddf 7a05 	vldr	s15, [pc, #20]	; 801b378 <nema_interpolate_tx_ty+0x110>
 801b366:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801b36a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b36e:	da87      	bge.n	801b280 <nema_interpolate_tx_ty+0x18>
 801b370:	e7a6      	b.n	801b2c0 <nema_interpolate_tx_ty+0x58>
 801b372:	bf00      	nop
 801b374:	3727c5ac 	.word	0x3727c5ac
 801b378:	b727c5ac 	.word	0xb727c5ac

0801b37c <nema_f2fx>:
 801b37c:	eddf 7a06 	vldr	s15, [pc, #24]	; 801b398 <nema_f2fx+0x1c>
 801b380:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801b384:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b388:	ee30 0a07 	vadd.f32	s0, s0, s14
 801b38c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801b390:	ee17 0a90 	vmov	r0, s15
 801b394:	4770      	bx	lr
 801b396:	bf00      	nop
 801b398:	47800000 	.word	0x47800000

0801b39c <nema_mat3x3_load_identity>:
 801b39c:	2300      	movs	r3, #0
 801b39e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801b3a2:	61c3      	str	r3, [r0, #28]
 801b3a4:	6202      	str	r2, [r0, #32]
 801b3a6:	6102      	str	r2, [r0, #16]
 801b3a8:	6002      	str	r2, [r0, #0]
 801b3aa:	6183      	str	r3, [r0, #24]
 801b3ac:	6143      	str	r3, [r0, #20]
 801b3ae:	60c3      	str	r3, [r0, #12]
 801b3b0:	6083      	str	r3, [r0, #8]
 801b3b2:	6043      	str	r3, [r0, #4]
 801b3b4:	4770      	bx	lr
 801b3b6:	bf00      	nop

0801b3b8 <nema_mat3x3_mul>:
 801b3b8:	edd1 4a01 	vldr	s9, [r1, #4]
 801b3bc:	ed91 0a04 	vldr	s0, [r1, #16]
 801b3c0:	edd1 0a05 	vldr	s1, [r1, #20]
 801b3c4:	ed2d 8b0c 	vpush	{d8-d13}
 801b3c8:	ed91 6a00 	vldr	s12, [r1]
 801b3cc:	ed91 4a03 	vldr	s8, [r1, #12]
 801b3d0:	ed91 aa02 	vldr	s20, [r1, #8]
 801b3d4:	edd0 3a03 	vldr	s7, [r0, #12]
 801b3d8:	ed90 8a04 	vldr	s16, [r0, #16]
 801b3dc:	ed90 9a00 	vldr	s18, [r0]
 801b3e0:	edd0 8a01 	vldr	s17, [r0, #4]
 801b3e4:	edd0 9a06 	vldr	s19, [r0, #24]
 801b3e8:	ed90 1a07 	vldr	s2, [r0, #28]
 801b3ec:	edd1 aa06 	vldr	s21, [r1, #24]
 801b3f0:	edd1 6a07 	vldr	s13, [r1, #28]
 801b3f4:	ed91 7a08 	vldr	s14, [r1, #32]
 801b3f8:	ed90 5a02 	vldr	s10, [r0, #8]
 801b3fc:	edd0 5a05 	vldr	s11, [r0, #20]
 801b400:	ee69 da06 	vmul.f32	s27, s18, s12
 801b404:	ee29 da24 	vmul.f32	s26, s18, s9
 801b408:	ee66 ca23 	vmul.f32	s25, s12, s7
 801b40c:	ee24 caa3 	vmul.f32	s24, s9, s7
 801b410:	ee68 1a84 	vmul.f32	s3, s17, s8
 801b414:	ee29 9a0a 	vmul.f32	s18, s18, s20
 801b418:	ee28 2a80 	vmul.f32	s4, s17, s0
 801b41c:	ee26 6a29 	vmul.f32	s12, s12, s19
 801b420:	ee64 2a08 	vmul.f32	s5, s8, s16
 801b424:	ee6a ba23 	vmul.f32	s23, s20, s7
 801b428:	ee24 baa9 	vmul.f32	s22, s9, s19
 801b42c:	ee20 3a08 	vmul.f32	s6, s0, s16
 801b430:	ee60 3a88 	vmul.f32	s7, s1, s16
 801b434:	ee60 4a01 	vmul.f32	s9, s0, s2
 801b438:	ee68 8aa0 	vmul.f32	s17, s17, s1
 801b43c:	ee24 4a01 	vmul.f32	s8, s8, s2
 801b440:	ee6a 7a29 	vmul.f32	s15, s20, s19
 801b444:	ee20 1a81 	vmul.f32	s2, s1, s2
 801b448:	edd0 0a08 	vldr	s1, [r0, #32]
 801b44c:	ee25 0a2a 	vmul.f32	s0, s10, s21
 801b450:	ee79 8a28 	vadd.f32	s17, s18, s17
 801b454:	ee2a 8aa5 	vmul.f32	s16, s21, s11
 801b458:	ee25 9a26 	vmul.f32	s18, s10, s13
 801b45c:	ee7d 1aa1 	vadd.f32	s3, s27, s3
 801b460:	ee3d 2a02 	vadd.f32	s4, s26, s4
 801b464:	ee7c 2aa2 	vadd.f32	s5, s25, s5
 801b468:	ee3c 3a03 	vadd.f32	s6, s24, s6
 801b46c:	ee7b 3aa3 	vadd.f32	s7, s23, s7
 801b470:	ee36 4a04 	vadd.f32	s8, s12, s8
 801b474:	ee7b 4a24 	vadd.f32	s9, s22, s9
 801b478:	ee77 7a81 	vadd.f32	s15, s15, s2
 801b47c:	ee25 5a07 	vmul.f32	s10, s10, s14
 801b480:	ee26 1aa5 	vmul.f32	s2, s13, s11
 801b484:	ee2a 6aa0 	vmul.f32	s12, s21, s1
 801b488:	ee67 5a25 	vmul.f32	s11, s14, s11
 801b48c:	ee66 6aa0 	vmul.f32	s13, s13, s1
 801b490:	ee27 7a20 	vmul.f32	s14, s14, s1
 801b494:	ee32 2a09 	vadd.f32	s4, s4, s18
 801b498:	ee38 5a85 	vadd.f32	s10, s17, s10
 801b49c:	ee72 2a88 	vadd.f32	s5, s5, s16
 801b4a0:	ee71 1a80 	vadd.f32	s3, s3, s0
 801b4a4:	ee33 3a01 	vadd.f32	s6, s6, s2
 801b4a8:	ee73 5aa5 	vadd.f32	s11, s7, s11
 801b4ac:	ee34 6a06 	vadd.f32	s12, s8, s12
 801b4b0:	ee74 6aa6 	vadd.f32	s13, s9, s13
 801b4b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b4b8:	edc0 1a00 	vstr	s3, [r0]
 801b4bc:	ed80 2a01 	vstr	s4, [r0, #4]
 801b4c0:	ed80 5a02 	vstr	s10, [r0, #8]
 801b4c4:	edc0 2a03 	vstr	s5, [r0, #12]
 801b4c8:	ed80 3a04 	vstr	s6, [r0, #16]
 801b4cc:	edc0 5a05 	vstr	s11, [r0, #20]
 801b4d0:	ed80 6a06 	vstr	s12, [r0, #24]
 801b4d4:	edc0 6a07 	vstr	s13, [r0, #28]
 801b4d8:	edc0 7a08 	vstr	s15, [r0, #32]
 801b4dc:	ecbd 8b0c 	vpop	{d8-d13}
 801b4e0:	4770      	bx	lr
 801b4e2:	bf00      	nop

0801b4e4 <nema_mat3x3_adj>:
 801b4e4:	edd0 3a03 	vldr	s7, [r0, #12]
 801b4e8:	edd0 4a04 	vldr	s9, [r0, #16]
 801b4ec:	ed90 6a08 	vldr	s12, [r0, #32]
 801b4f0:	ed90 5a07 	vldr	s10, [r0, #28]
 801b4f4:	ed90 4a05 	vldr	s8, [r0, #20]
 801b4f8:	edd0 7a00 	vldr	s15, [r0]
 801b4fc:	edd0 6a02 	vldr	s13, [r0, #8]
 801b500:	edd0 5a01 	vldr	s11, [r0, #4]
 801b504:	ed90 7a06 	vldr	s14, [r0, #24]
 801b508:	ed2d 8b04 	vpush	{d8-d9}
 801b50c:	ee24 1a86 	vmul.f32	s2, s9, s12
 801b510:	ee25 9a04 	vmul.f32	s18, s10, s8
 801b514:	ee66 8a25 	vmul.f32	s17, s12, s11
 801b518:	ee24 8aa6 	vmul.f32	s16, s9, s13
 801b51c:	ee65 1a26 	vmul.f32	s3, s10, s13
 801b520:	ee24 2a25 	vmul.f32	s4, s8, s11
 801b524:	ee64 2a07 	vmul.f32	s5, s8, s14
 801b528:	ee66 0a87 	vmul.f32	s1, s13, s14
 801b52c:	ee25 3a23 	vmul.f32	s6, s10, s7
 801b530:	ee24 4a27 	vmul.f32	s8, s8, s15
 801b534:	ee26 0a23 	vmul.f32	s0, s12, s7
 801b538:	ee66 6aa3 	vmul.f32	s13, s13, s7
 801b53c:	ee26 6a27 	vmul.f32	s12, s12, s15
 801b540:	ee25 5a27 	vmul.f32	s10, s10, s15
 801b544:	ee64 7aa7 	vmul.f32	s15, s9, s15
 801b548:	ee64 4a87 	vmul.f32	s9, s9, s14
 801b54c:	ee25 7a87 	vmul.f32	s14, s11, s14
 801b550:	ee65 5aa3 	vmul.f32	s11, s11, s7
 801b554:	ee31 1a49 	vsub.f32	s2, s2, s18
 801b558:	ee71 1ae8 	vsub.f32	s3, s3, s17
 801b55c:	ee32 2a48 	vsub.f32	s4, s4, s16
 801b560:	ecbd 8b04 	vpop	{d8-d9}
 801b564:	ee72 3ac0 	vsub.f32	s7, s5, s0
 801b568:	ee36 6a60 	vsub.f32	s12, s12, s1
 801b56c:	ee76 6ac4 	vsub.f32	s13, s13, s8
 801b570:	ee73 4a64 	vsub.f32	s9, s6, s9
 801b574:	ee37 7a45 	vsub.f32	s14, s14, s10
 801b578:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801b57c:	ed80 1a00 	vstr	s2, [r0]
 801b580:	edc0 1a01 	vstr	s3, [r0, #4]
 801b584:	ed80 2a02 	vstr	s4, [r0, #8]
 801b588:	edc0 3a03 	vstr	s7, [r0, #12]
 801b58c:	ed80 6a04 	vstr	s12, [r0, #16]
 801b590:	edc0 6a05 	vstr	s13, [r0, #20]
 801b594:	edc0 4a06 	vstr	s9, [r0, #24]
 801b598:	ed80 7a07 	vstr	s14, [r0, #28]
 801b59c:	edc0 7a08 	vstr	s15, [r0, #32]
 801b5a0:	4770      	bx	lr
 801b5a2:	bf00      	nop

0801b5a4 <nema_mat3x3_quad_to_rect>:
 801b5a4:	ee70 6a41 	vsub.f32	s13, s0, s2
 801b5a8:	ee76 6a82 	vadd.f32	s13, s13, s4
 801b5ac:	ee76 6ac3 	vsub.f32	s13, s13, s6
 801b5b0:	ee30 6ae1 	vsub.f32	s12, s1, s3
 801b5b4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801b5b8:	ee36 6a22 	vadd.f32	s12, s12, s5
 801b5bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5c0:	ed2d 8b06 	vpush	{d8-d10}
 801b5c4:	ee36 6a63 	vsub.f32	s12, s12, s7
 801b5c8:	ee09 0a10 	vmov	s18, r0
 801b5cc:	ee08 1a90 	vmov	s17, r1
 801b5d0:	f100 812e 	bmi.w	801b830 <nema_mat3x3_quad_to_rect+0x28c>
 801b5d4:	eddf 7aa4 	vldr	s15, [pc, #656]	; 801b868 <nema_mat3x3_quad_to_rect+0x2c4>
 801b5d8:	eef4 6ae7 	vcmpe.f32	s13, s15
 801b5dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5e0:	d80d      	bhi.n	801b5fe <nema_mat3x3_quad_to_rect+0x5a>
 801b5e2:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801b5e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5ea:	f100 80f7 	bmi.w	801b7dc <nema_mat3x3_quad_to_rect+0x238>
 801b5ee:	eddf 7a9e 	vldr	s15, [pc, #632]	; 801b868 <nema_mat3x3_quad_to_rect+0x2c4>
 801b5f2:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801b5f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5fa:	f240 80f7 	bls.w	801b7ec <nema_mat3x3_quad_to_rect+0x248>
 801b5fe:	ee31 7a42 	vsub.f32	s14, s2, s4
 801b602:	ee73 7ae2 	vsub.f32	s15, s7, s5
 801b606:	ee33 2a42 	vsub.f32	s4, s6, s4
 801b60a:	ee71 2ae2 	vsub.f32	s5, s3, s5
 801b60e:	ee67 5a27 	vmul.f32	s11, s14, s15
 801b612:	ee22 5a22 	vmul.f32	s10, s4, s5
 801b616:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801b61a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801b61e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b622:	ee26 7a07 	vmul.f32	s14, s12, s14
 801b626:	ee66 6aa2 	vmul.f32	s13, s13, s5
 801b62a:	ee26 6a02 	vmul.f32	s12, s12, s4
 801b62e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b632:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801b636:	ee77 6a66 	vsub.f32	s13, s14, s13
 801b63a:	f100 80c5 	bmi.w	801b7c8 <nema_mat3x3_quad_to_rect+0x224>
 801b63e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 801b868 <nema_mat3x3_quad_to_rect+0x2c4>
 801b642:	eef4 5ac7 	vcmpe.f32	s11, s14
 801b646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b64a:	bf94      	ite	ls
 801b64c:	2301      	movls	r3, #1
 801b64e:	2300      	movhi	r3, #0
 801b650:	2b00      	cmp	r3, #0
 801b652:	f040 8106 	bne.w	801b862 <nema_mat3x3_quad_to_rect+0x2be>
 801b656:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b65a:	ee87 6a25 	vdiv.f32	s12, s14, s11
 801b65e:	ee67 7a86 	vmul.f32	s15, s15, s12
 801b662:	ee66 6a86 	vmul.f32	s13, s13, s12
 801b666:	ee21 5a27 	vmul.f32	s10, s2, s15
 801b66a:	ee61 5aa7 	vmul.f32	s11, s3, s15
 801b66e:	ee63 2aa6 	vmul.f32	s5, s7, s13
 801b672:	ee31 1a40 	vsub.f32	s2, s2, s0
 801b676:	ee23 6a26 	vmul.f32	s12, s6, s13
 801b67a:	ee33 2a40 	vsub.f32	s4, s6, s0
 801b67e:	ee71 1ae0 	vsub.f32	s3, s3, s1
 801b682:	ee73 3ae0 	vsub.f32	s7, s7, s1
 801b686:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b68a:	ee32 2a06 	vadd.f32	s4, s4, s12
 801b68e:	ee71 1aa5 	vadd.f32	s3, s3, s11
 801b692:	ee73 2aa2 	vadd.f32	s5, s7, s5
 801b696:	ed82 0a02 	vstr	s0, [r2, #8]
 801b69a:	edc2 0a05 	vstr	s1, [r2, #20]
 801b69e:	edc2 7a06 	vstr	s15, [r2, #24]
 801b6a2:	edc2 6a07 	vstr	s13, [r2, #28]
 801b6a6:	ed82 7a08 	vstr	s14, [r2, #32]
 801b6aa:	ed82 1a00 	vstr	s2, [r2]
 801b6ae:	ed82 2a01 	vstr	s4, [r2, #4]
 801b6b2:	edc2 1a03 	vstr	s3, [r2, #12]
 801b6b6:	edc2 2a04 	vstr	s5, [r2, #16]
 801b6ba:	ee20 4aa6 	vmul.f32	s8, s1, s13
 801b6be:	ee60 5aa7 	vmul.f32	s11, s1, s15
 801b6c2:	ee32 3ac4 	vsub.f32	s6, s5, s8
 801b6c6:	ee31 7ae5 	vsub.f32	s14, s3, s11
 801b6ca:	ee21 8aa6 	vmul.f32	s16, s3, s13
 801b6ce:	ee22 6aa7 	vmul.f32	s12, s5, s15
 801b6d2:	ee27 7a02 	vmul.f32	s14, s14, s4
 801b6d6:	ee23 4a01 	vmul.f32	s8, s6, s2
 801b6da:	ee38 8a46 	vsub.f32	s16, s16, s12
 801b6de:	ee34 4a47 	vsub.f32	s8, s8, s14
 801b6e2:	ee20 7a08 	vmul.f32	s14, s0, s16
 801b6e6:	ee34 4a07 	vadd.f32	s8, s8, s14
 801b6ea:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
 801b6ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6f2:	f100 80ac 	bmi.w	801b84e <nema_mat3x3_quad_to_rect+0x2aa>
 801b6f6:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 801b868 <nema_mat3x3_quad_to_rect+0x2c4>
 801b6fa:	eeb4 4ac7 	vcmpe.f32	s8, s14
 801b6fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b702:	bf94      	ite	ls
 801b704:	2001      	movls	r0, #1
 801b706:	2000      	movhi	r0, #0
 801b708:	2800      	cmp	r0, #0
 801b70a:	f040 80aa 	bne.w	801b862 <nema_mat3x3_quad_to_rect+0x2be>
 801b70e:	ee20 5a82 	vmul.f32	s10, s1, s4
 801b712:	ee60 4a26 	vmul.f32	s9, s0, s13
 801b716:	ee20 6a27 	vmul.f32	s12, s0, s15
 801b71a:	ee60 9a22 	vmul.f32	s19, s0, s5
 801b71e:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
 801b722:	ee60 0a81 	vmul.f32	s1, s1, s2
 801b726:	ee20 7a21 	vmul.f32	s14, s0, s3
 801b72a:	eeca 3a04 	vdiv.f32	s7, s20, s8
 801b72e:	ee74 4ac2 	vsub.f32	s9, s9, s4
 801b732:	ee61 6a26 	vmul.f32	s13, s2, s13
 801b736:	ee67 7a82 	vmul.f32	s15, s15, s4
 801b73a:	ee35 5a69 	vsub.f32	s10, s10, s19
 801b73e:	ee75 5ae1 	vsub.f32	s11, s11, s3
 801b742:	ee31 6a46 	vsub.f32	s12, s2, s12
 801b746:	ee62 2a81 	vmul.f32	s5, s5, s2
 801b74a:	ee37 7a60 	vsub.f32	s14, s14, s1
 801b74e:	ee21 2a82 	vmul.f32	s4, s3, s4
 801b752:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 801b756:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 801b75a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801b75e:	ee23 4a23 	vmul.f32	s8, s6, s7
 801b762:	ee65 6a23 	vmul.f32	s13, s10, s7
 801b766:	ee65 5aa3 	vmul.f32	s11, s11, s7
 801b76a:	ee64 4aa3 	vmul.f32	s9, s9, s7
 801b76e:	ee26 6a23 	vmul.f32	s12, s12, s7
 801b772:	ee27 7a23 	vmul.f32	s14, s14, s7
 801b776:	ee72 2ac2 	vsub.f32	s5, s5, s4
 801b77a:	ee24 4a09 	vmul.f32	s8, s8, s18
 801b77e:	ee65 5aa8 	vmul.f32	s11, s11, s17
 801b782:	ee28 8a23 	vmul.f32	s16, s16, s7
 801b786:	ee24 5a89 	vmul.f32	s10, s9, s18
 801b78a:	ee26 6a28 	vmul.f32	s12, s12, s17
 801b78e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801b792:	ee66 6a89 	vmul.f32	s13, s13, s18
 801b796:	ee27 7a28 	vmul.f32	s14, s14, s17
 801b79a:	ee62 2aa3 	vmul.f32	s5, s5, s7
 801b79e:	ed82 4a00 	vstr	s8, [r2]
 801b7a2:	edc2 5a03 	vstr	s11, [r2, #12]
 801b7a6:	ed82 8a06 	vstr	s16, [r2, #24]
 801b7aa:	ed82 5a01 	vstr	s10, [r2, #4]
 801b7ae:	ed82 6a04 	vstr	s12, [r2, #16]
 801b7b2:	edc2 7a07 	vstr	s15, [r2, #28]
 801b7b6:	edc2 6a02 	vstr	s13, [r2, #8]
 801b7ba:	ed82 7a05 	vstr	s14, [r2, #20]
 801b7be:	edc2 2a08 	vstr	s5, [r2, #32]
 801b7c2:	ecbd 8b06 	vpop	{d8-d10}
 801b7c6:	4770      	bx	lr
 801b7c8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 801b86c <nema_mat3x3_quad_to_rect+0x2c8>
 801b7cc:	eef4 5ac7 	vcmpe.f32	s11, s14
 801b7d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7d4:	bfac      	ite	ge
 801b7d6:	2301      	movge	r3, #1
 801b7d8:	2300      	movlt	r3, #0
 801b7da:	e739      	b.n	801b650 <nema_mat3x3_quad_to_rect+0xac>
 801b7dc:	eddf 7a23 	vldr	s15, [pc, #140]	; 801b86c <nema_mat3x3_quad_to_rect+0x2c8>
 801b7e0:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801b7e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7e8:	f6ff af09 	blt.w	801b5fe <nema_mat3x3_quad_to_rect+0x5a>
 801b7ec:	ed9f 7a20 	vldr	s14, [pc, #128]	; 801b870 <nema_mat3x3_quad_to_rect+0x2cc>
 801b7f0:	ee32 2a41 	vsub.f32	s4, s4, s2
 801b7f4:	ee72 2ae1 	vsub.f32	s5, s5, s3
 801b7f8:	ee31 1a40 	vsub.f32	s2, s2, s0
 801b7fc:	ee71 1ae0 	vsub.f32	s3, s3, s1
 801b800:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801b804:	eef0 7a47 	vmov.f32	s15, s14
 801b808:	ed82 2a01 	vstr	s4, [r2, #4]
 801b80c:	ed82 1a00 	vstr	s2, [r2]
 801b810:	edc2 2a04 	vstr	s5, [r2, #16]
 801b814:	edc2 1a03 	vstr	s3, [r2, #12]
 801b818:	ed82 0a02 	vstr	s0, [r2, #8]
 801b81c:	edc2 0a05 	vstr	s1, [r2, #20]
 801b820:	ed82 7a06 	vstr	s14, [r2, #24]
 801b824:	ed82 7a07 	vstr	s14, [r2, #28]
 801b828:	eef0 6a47 	vmov.f32	s13, s14
 801b82c:	6213      	str	r3, [r2, #32]
 801b82e:	e744      	b.n	801b6ba <nema_mat3x3_quad_to_rect+0x116>
 801b830:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801b86c <nema_mat3x3_quad_to_rect+0x2c8>
 801b834:	eef4 6ae7 	vcmpe.f32	s13, s15
 801b838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b83c:	f6ff aedf 	blt.w	801b5fe <nema_mat3x3_quad_to_rect+0x5a>
 801b840:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801b844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b848:	f57f aed1 	bpl.w	801b5ee <nema_mat3x3_quad_to_rect+0x4a>
 801b84c:	e7c6      	b.n	801b7dc <nema_mat3x3_quad_to_rect+0x238>
 801b84e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 801b86c <nema_mat3x3_quad_to_rect+0x2c8>
 801b852:	eeb4 4ac7 	vcmpe.f32	s8, s14
 801b856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b85a:	bfac      	ite	ge
 801b85c:	2001      	movge	r0, #1
 801b85e:	2000      	movlt	r0, #0
 801b860:	e752      	b.n	801b708 <nema_mat3x3_quad_to_rect+0x164>
 801b862:	f04f 30ff 	mov.w	r0, #4294967295
 801b866:	e7ac      	b.n	801b7c2 <nema_mat3x3_quad_to_rect+0x21e>
 801b868:	3727c5ac 	.word	0x3727c5ac
 801b86c:	b727c5ac 	.word	0xb727c5ac
 801b870:	00000000 	.word	0x00000000

0801b874 <nema_readHwConfig>:
 801b874:	b510      	push	{r4, lr}
 801b876:	4c05      	ldr	r4, [pc, #20]	; (801b88c <nema_readHwConfig+0x18>)
 801b878:	6820      	ldr	r0, [r4, #0]
 801b87a:	b100      	cbz	r0, 801b87e <nema_readHwConfig+0xa>
 801b87c:	bd10      	pop	{r4, pc}
 801b87e:	f44f 70f8 	mov.w	r0, #496	; 0x1f0
 801b882:	f7e7 f9a3 	bl	8002bcc <nema_reg_read>
 801b886:	6020      	str	r0, [r4, #0]
 801b888:	bd10      	pop	{r4, pc}
 801b88a:	bf00      	nop
 801b88c:	201979f8 	.word	0x201979f8

0801b890 <nema_readHwConfigH>:
 801b890:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801b894:	f7e7 b99a 	b.w	8002bcc <nema_reg_read>

0801b898 <nema_enable_tiling>:
 801b898:	2800      	cmp	r0, #0
 801b89a:	bf14      	ite	ne
 801b89c:	f04f 4080 	movne.w	r0, #1073741824	; 0x40000000
 801b8a0:	2000      	moveq	r0, #0
 801b8a2:	b410      	push	{r4}
 801b8a4:	4a05      	ldr	r2, [pc, #20]	; (801b8bc <nema_enable_tiling+0x24>)
 801b8a6:	6951      	ldr	r1, [r2, #20]
 801b8a8:	e9d2 4302 	ldrd	r4, r3, [r2, #8]
 801b8ac:	4323      	orrs	r3, r4
 801b8ae:	430b      	orrs	r3, r1
 801b8b0:	4303      	orrs	r3, r0
 801b8b2:	6050      	str	r0, [r2, #4]
 801b8b4:	6113      	str	r3, [r2, #16]
 801b8b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b8ba:	4770      	bx	lr
 801b8bc:	20197d94 	.word	0x20197d94

0801b8c0 <nema_enable_aa>:
 801b8c0:	2800      	cmp	r0, #0
 801b8c2:	b410      	push	{r4}
 801b8c4:	bf19      	ittee	ne
 801b8c6:	f04f 6080 	movne.w	r0, #67108864	; 0x4000000
 801b8ca:	f04f 64c0 	movne.w	r4, #100663296	; 0x6000000
 801b8ce:	f04f 7400 	moveq.w	r4, #33554432	; 0x2000000
 801b8d2:	2000      	moveq	r0, #0
 801b8d4:	2900      	cmp	r1, #0
 801b8d6:	bf08      	it	eq
 801b8d8:	4604      	moveq	r4, r0
 801b8da:	b10a      	cbz	r2, 801b8e0 <nema_enable_aa+0x20>
 801b8dc:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 801b8e0:	b10b      	cbz	r3, 801b8e6 <nema_enable_aa+0x26>
 801b8e2:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 801b8e6:	4a06      	ldr	r2, [pc, #24]	; (801b900 <nema_enable_aa+0x40>)
 801b8e8:	6853      	ldr	r3, [r2, #4]
 801b8ea:	e9d2 1002 	ldrd	r1, r0, [r2, #8]
 801b8ee:	4303      	orrs	r3, r0
 801b8f0:	430b      	orrs	r3, r1
 801b8f2:	4323      	orrs	r3, r4
 801b8f4:	6950      	ldr	r0, [r2, #20]
 801b8f6:	e9c2 3404 	strd	r3, r4, [r2, #16]
 801b8fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b8fe:	4770      	bx	lr
 801b900:	20197d94 	.word	0x20197d94

0801b904 <nema_matmul_bypass>:
 801b904:	b920      	cbnz	r0, 801b910 <nema_matmul_bypass+0xc>
 801b906:	4601      	mov	r1, r0
 801b908:	f44f 708c 	mov.w	r0, #280	; 0x118
 801b90c:	f000 be84 	b.w	801c618 <nema_cl_add_cmd>
 801b910:	f04f 4110 	mov.w	r1, #2415919104	; 0x90000000
 801b914:	f44f 708c 	mov.w	r0, #280	; 0x118
 801b918:	f000 be7e 	b.w	801c618 <nema_cl_add_cmd>

0801b91c <nema_set_matrix>:
 801b91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b920:	ed9f 7a59 	vldr	s14, [pc, #356]	; 801ba88 <nema_set_matrix+0x16c>
 801b924:	edd0 7a06 	vldr	s15, [r0, #24]
 801b928:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b92c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b930:	4604      	mov	r4, r0
 801b932:	d506      	bpl.n	801b942 <nema_set_matrix+0x26>
 801b934:	eddf 6a55 	vldr	s13, [pc, #340]	; 801ba8c <nema_set_matrix+0x170>
 801b938:	eef4 7ae6 	vcmpe.f32	s15, s13
 801b93c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b940:	dc47      	bgt.n	801b9d2 <nema_set_matrix+0xb6>
 801b942:	2009      	movs	r0, #9
 801b944:	f000 fe0a 	bl	801c55c <nema_cl_get_space>
 801b948:	2800      	cmp	r0, #0
 801b94a:	d040      	beq.n	801b9ce <nema_set_matrix+0xb2>
 801b94c:	f44f 73ba 	mov.w	r3, #372	; 0x174
 801b950:	6003      	str	r3, [r0, #0]
 801b952:	f44f 73b4 	mov.w	r3, #360	; 0x168
 801b956:	6962      	ldr	r2, [r4, #20]
 801b958:	6083      	str	r3, [r0, #8]
 801b95a:	f44f 73bc 	mov.w	r3, #376	; 0x178
 801b95e:	6042      	str	r2, [r0, #4]
 801b960:	68a2      	ldr	r2, [r4, #8]
 801b962:	6103      	str	r3, [r0, #16]
 801b964:	f44f 73be 	mov.w	r3, #380	; 0x17c
 801b968:	60c2      	str	r2, [r0, #12]
 801b96a:	69a2      	ldr	r2, [r4, #24]
 801b96c:	6183      	str	r3, [r0, #24]
 801b96e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 801b972:	6142      	str	r2, [r0, #20]
 801b974:	69e2      	ldr	r2, [r4, #28]
 801b976:	6203      	str	r3, [r0, #32]
 801b978:	61c2      	str	r2, [r0, #28]
 801b97a:	6a23      	ldr	r3, [r4, #32]
 801b97c:	2544      	movs	r5, #68	; 0x44
 801b97e:	6243      	str	r3, [r0, #36]	; 0x24
 801b980:	2640      	movs	r6, #64	; 0x40
 801b982:	233c      	movs	r3, #60	; 0x3c
 801b984:	2738      	movs	r7, #56	; 0x38
 801b986:	2234      	movs	r2, #52	; 0x34
 801b988:	f04f 0c30 	mov.w	ip, #48	; 0x30
 801b98c:	212c      	movs	r1, #44	; 0x2c
 801b98e:	f04f 0e28 	mov.w	lr, #40	; 0x28
 801b992:	f44f 78b0 	mov.w	r8, #352	; 0x160
 801b996:	f840 800e 	str.w	r8, [r0, lr]
 801b99a:	f44f 7eb2 	mov.w	lr, #356	; 0x164
 801b99e:	f8d4 8000 	ldr.w	r8, [r4]
 801b9a2:	4401      	add	r1, r0
 801b9a4:	f8c1 8000 	str.w	r8, [r1]
 801b9a8:	f840 e00c 	str.w	lr, [r0, ip]
 801b9ac:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 801b9b0:	f8d4 c004 	ldr.w	ip, [r4, #4]
 801b9b4:	4402      	add	r2, r0
 801b9b6:	f8c2 c000 	str.w	ip, [r2]
 801b9ba:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801b9be:	51c1      	str	r1, [r0, r7]
 801b9c0:	68e1      	ldr	r1, [r4, #12]
 801b9c2:	4403      	add	r3, r0
 801b9c4:	6019      	str	r1, [r3, #0]
 801b9c6:	5182      	str	r2, [r0, r6]
 801b9c8:	6923      	ldr	r3, [r4, #16]
 801b9ca:	4428      	add	r0, r5
 801b9cc:	6003      	str	r3, [r0, #0]
 801b9ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b9d2:	ed90 6a07 	vldr	s12, [r0, #28]
 801b9d6:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801b9da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9de:	d5b0      	bpl.n	801b942 <nema_set_matrix+0x26>
 801b9e0:	eeb4 6ae6 	vcmpe.f32	s12, s13
 801b9e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9e8:	ddab      	ble.n	801b942 <nema_set_matrix+0x26>
 801b9ea:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801b9ee:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801b9f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b9f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9fa:	d43f      	bmi.n	801ba7c <nema_set_matrix+0x160>
 801b9fc:	edd4 7a08 	vldr	s15, [r4, #32]
 801ba00:	ed94 5a00 	vldr	s10, [r4]
 801ba04:	edd4 5a01 	vldr	s11, [r4, #4]
 801ba08:	ed94 6a02 	vldr	s12, [r4, #8]
 801ba0c:	edd4 6a03 	vldr	s13, [r4, #12]
 801ba10:	ed94 7a04 	vldr	s14, [r4, #16]
 801ba14:	ed94 4a05 	vldr	s8, [r4, #20]
 801ba18:	eec5 4a27 	vdiv.f32	s9, s10, s15
 801ba1c:	ee85 5aa7 	vdiv.f32	s10, s11, s15
 801ba20:	eec6 5a27 	vdiv.f32	s11, s12, s15
 801ba24:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 801ba28:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801ba2c:	ee84 7a27 	vdiv.f32	s14, s8, s15
 801ba30:	edc4 4a00 	vstr	s9, [r4]
 801ba34:	ed84 5a01 	vstr	s10, [r4, #4]
 801ba38:	edc4 5a02 	vstr	s11, [r4, #8]
 801ba3c:	ed84 6a03 	vstr	s12, [r4, #12]
 801ba40:	edc4 6a04 	vstr	s13, [r4, #16]
 801ba44:	ed84 7a05 	vstr	s14, [r4, #20]
 801ba48:	2006      	movs	r0, #6
 801ba4a:	f000 fd87 	bl	801c55c <nema_cl_get_space>
 801ba4e:	2800      	cmp	r0, #0
 801ba50:	d0bd      	beq.n	801b9ce <nema_set_matrix+0xb2>
 801ba52:	f44f 73ba 	mov.w	r3, #372	; 0x174
 801ba56:	6003      	str	r3, [r0, #0]
 801ba58:	f44f 73b4 	mov.w	r3, #360	; 0x168
 801ba5c:	6962      	ldr	r2, [r4, #20]
 801ba5e:	6083      	str	r3, [r0, #8]
 801ba60:	6042      	str	r2, [r0, #4]
 801ba62:	68a3      	ldr	r3, [r4, #8]
 801ba64:	252c      	movs	r5, #44	; 0x2c
 801ba66:	60c3      	str	r3, [r0, #12]
 801ba68:	2628      	movs	r6, #40	; 0x28
 801ba6a:	2324      	movs	r3, #36	; 0x24
 801ba6c:	2720      	movs	r7, #32
 801ba6e:	221c      	movs	r2, #28
 801ba70:	f04f 0c18 	mov.w	ip, #24
 801ba74:	2114      	movs	r1, #20
 801ba76:	f04f 0e10 	mov.w	lr, #16
 801ba7a:	e78a      	b.n	801b992 <nema_set_matrix+0x76>
 801ba7c:	eef4 7ae6 	vcmpe.f32	s15, s13
 801ba80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba84:	dce0      	bgt.n	801ba48 <nema_set_matrix+0x12c>
 801ba86:	e7b9      	b.n	801b9fc <nema_set_matrix+0xe0>
 801ba88:	33d6bf95 	.word	0x33d6bf95
 801ba8c:	b3d6bf95 	.word	0xb3d6bf95

0801ba90 <nema_set_matrix_translate>:
 801ba90:	b508      	push	{r3, lr}
 801ba92:	2002      	movs	r0, #2
 801ba94:	ed2d 8b02 	vpush	{d8}
 801ba98:	eeb0 8a40 	vmov.f32	s16, s0
 801ba9c:	eef0 8a60 	vmov.f32	s17, s1
 801baa0:	f000 fd5c 	bl	801c55c <nema_cl_get_space>
 801baa4:	b1c8      	cbz	r0, 801bada <nema_set_matrix_translate+0x4a>
 801baa6:	eddf 7a13 	vldr	s15, [pc, #76]	; 801baf4 <nema_set_matrix_translate+0x64>
 801baaa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801baae:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801bab2:	eef1 6a68 	vneg.f32	s13, s17
 801bab6:	f44f 73b4 	mov.w	r3, #360	; 0x168
 801baba:	eeb1 7a48 	vneg.f32	s14, s16
 801babe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bac2:	6002      	str	r2, [r0, #0]
 801bac4:	edc0 6a01 	vstr	s13, [r0, #4]
 801bac8:	6083      	str	r3, [r0, #8]
 801baca:	ed80 7a03 	vstr	s14, [r0, #12]
 801bace:	dc07      	bgt.n	801bae0 <nema_set_matrix_translate+0x50>
 801bad0:	eef4 8ae7 	vcmpe.f32	s17, s15
 801bad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bad8:	dc02      	bgt.n	801bae0 <nema_set_matrix_translate+0x50>
 801bada:	ecbd 8b02 	vpop	{d8}
 801bade:	bd08      	pop	{r3, pc}
 801bae0:	ecbd 8b02 	vpop	{d8}
 801bae4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801bae8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801baec:	f44f 708c 	mov.w	r0, #280	; 0x118
 801baf0:	f000 bd92 	b.w	801c618 <nema_cl_add_cmd>
 801baf4:	45000000 	.word	0x45000000

0801baf8 <nema_load_frag_shader>:
 801baf8:	b570      	push	{r4, r5, r6, lr}
 801bafa:	460e      	mov	r6, r1
 801bafc:	4604      	mov	r4, r0
 801bafe:	4611      	mov	r1, r2
 801bb00:	20c4      	movs	r0, #196	; 0xc4
 801bb02:	f000 fd89 	bl	801c618 <nema_cl_add_cmd>
 801bb06:	b186      	cbz	r6, 801bb2a <nema_load_frag_shader+0x32>
 801bb08:	2500      	movs	r5, #0
 801bb0a:	3408      	adds	r4, #8
 801bb0c:	f854 1c08 	ldr.w	r1, [r4, #-8]
 801bb10:	20c8      	movs	r0, #200	; 0xc8
 801bb12:	f000 fd81 	bl	801c618 <nema_cl_add_cmd>
 801bb16:	3501      	adds	r5, #1
 801bb18:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801bb1c:	20cc      	movs	r0, #204	; 0xcc
 801bb1e:	f000 fd7b 	bl	801c618 <nema_cl_add_cmd>
 801bb22:	42ae      	cmp	r6, r5
 801bb24:	f104 0408 	add.w	r4, r4, #8
 801bb28:	d1f0      	bne.n	801bb0c <nema_load_frag_shader+0x14>
 801bb2a:	bd70      	pop	{r4, r5, r6, pc}

0801bb2c <nema_set_frag_ptr>:
 801bb2c:	4601      	mov	r1, r0
 801bb2e:	f44f 708e 	mov.w	r0, #284	; 0x11c
 801bb32:	f000 bd71 	b.w	801c618 <nema_cl_add_cmd>
 801bb36:	bf00      	nop

0801bb38 <nema_set_rop_blend_mode>:
 801bb38:	4601      	mov	r1, r0
 801bb3a:	f44f 70e8 	mov.w	r0, #464	; 0x1d0
 801bb3e:	f000 bd6b 	b.w	801c618 <nema_cl_add_cmd>
 801bb42:	bf00      	nop

0801bb44 <nema_set_rop_const_color>:
 801bb44:	4601      	mov	r1, r0
 801bb46:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 801bb4a:	f000 bd65 	b.w	801c618 <nema_cl_add_cmd>
 801bb4e:	bf00      	nop

0801bb50 <nema_set_depth_ctrl>:
 801bb50:	4601      	mov	r1, r0
 801bb52:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 801bb56:	f000 bd5f 	b.w	801c618 <nema_cl_add_cmd>
 801bb5a:	bf00      	nop

0801bb5c <nema_set_raster_color>:
 801bb5c:	4601      	mov	r1, r0
 801bb5e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 801bb62:	f000 bd59 	b.w	801c618 <nema_cl_add_cmd>
 801bb66:	bf00      	nop

0801bb68 <nema_raster_triangle_fx>:
 801bb68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb6c:	4607      	mov	r7, r0
 801bb6e:	2007      	movs	r0, #7
 801bb70:	460e      	mov	r6, r1
 801bb72:	4615      	mov	r5, r2
 801bb74:	461c      	mov	r4, r3
 801bb76:	f000 fcf1 	bl	801c55c <nema_cl_get_space>
 801bb7a:	b350      	cbz	r0, 801bbd2 <nema_raster_triangle_fx+0x6a>
 801bb7c:	f44f 7398 	mov.w	r3, #304	; 0x130
 801bb80:	f44f 7292 	mov.w	r2, #292	; 0x124
 801bb84:	f44f 7890 	mov.w	r8, #288	; 0x120
 801bb88:	f44f 7e9a 	mov.w	lr, #308	; 0x134
 801bb8c:	f44f 7ca0 	mov.w	ip, #320	; 0x140
 801bb90:	f44f 71a2 	mov.w	r1, #324	; 0x144
 801bb94:	6103      	str	r3, [r0, #16]
 801bb96:	4b10      	ldr	r3, [pc, #64]	; (801bbd8 <nema_raster_triangle_fx+0x70>)
 801bb98:	6047      	str	r7, [r0, #4]
 801bb9a:	60c6      	str	r6, [r0, #12]
 801bb9c:	f8c0 8000 	str.w	r8, [r0]
 801bba0:	6082      	str	r2, [r0, #8]
 801bba2:	691a      	ldr	r2, [r3, #16]
 801bba4:	4b0d      	ldr	r3, [pc, #52]	; (801bbdc <nema_raster_triangle_fx+0x74>)
 801bba6:	61c4      	str	r4, [r0, #28]
 801bba8:	9c06      	ldr	r4, [sp, #24]
 801bbaa:	6303      	str	r3, [r0, #48]	; 0x30
 801bbac:	01d3      	lsls	r3, r2, #7
 801bbae:	6244      	str	r4, [r0, #36]	; 0x24
 801bbb0:	bf48      	it	mi
 801bbb2:	f442 0200 	orrmi.w	r2, r2, #8388608	; 0x800000
 801bbb6:	9c07      	ldr	r4, [sp, #28]
 801bbb8:	bf58      	it	pl
 801bbba:	f422 0200 	bicpl.w	r2, r2, #8388608	; 0x800000
 801bbbe:	f042 0204 	orr.w	r2, r2, #4
 801bbc2:	6145      	str	r5, [r0, #20]
 801bbc4:	62c4      	str	r4, [r0, #44]	; 0x2c
 801bbc6:	f8c0 e018 	str.w	lr, [r0, #24]
 801bbca:	f8c0 c020 	str.w	ip, [r0, #32]
 801bbce:	6281      	str	r1, [r0, #40]	; 0x28
 801bbd0:	6342      	str	r2, [r0, #52]	; 0x34
 801bbd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bbd6:	bf00      	nop
 801bbd8:	20197d94 	.word	0x20197d94
 801bbdc:	ff000100 	.word	0xff000100

0801bbe0 <nema_raster_rect>:
 801bbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bbe2:	1e17      	subs	r7, r2, #0
 801bbe4:	dd20      	ble.n	801bc28 <nema_raster_rect+0x48>
 801bbe6:	2b00      	cmp	r3, #0
 801bbe8:	dd1e      	ble.n	801bc28 <nema_raster_rect+0x48>
 801bbea:	4604      	mov	r4, r0
 801bbec:	2003      	movs	r0, #3
 801bbee:	461d      	mov	r5, r3
 801bbf0:	460e      	mov	r6, r1
 801bbf2:	f000 fcb3 	bl	801c55c <nema_cl_get_space>
 801bbf6:	b1b8      	cbz	r0, 801bc28 <nema_raster_rect+0x48>
 801bbf8:	f44f 7c82 	mov.w	ip, #260	; 0x104
 801bbfc:	f44f 7184 	mov.w	r1, #264	; 0x108
 801bc00:	193a      	adds	r2, r7, r4
 801bc02:	b292      	uxth	r2, r2
 801bc04:	19ab      	adds	r3, r5, r6
 801bc06:	b2a4      	uxth	r4, r4
 801bc08:	4d08      	ldr	r5, [pc, #32]	; (801bc2c <nema_raster_rect+0x4c>)
 801bc0a:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 801bc0e:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 801bc12:	4a07      	ldr	r2, [pc, #28]	; (801bc30 <nema_raster_rect+0x50>)
 801bc14:	6044      	str	r4, [r0, #4]
 801bc16:	60c3      	str	r3, [r0, #12]
 801bc18:	f8c0 c000 	str.w	ip, [r0]
 801bc1c:	6081      	str	r1, [r0, #8]
 801bc1e:	6105      	str	r5, [r0, #16]
 801bc20:	6913      	ldr	r3, [r2, #16]
 801bc22:	f043 0302 	orr.w	r3, r3, #2
 801bc26:	6143      	str	r3, [r0, #20]
 801bc28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc2a:	bf00      	nop
 801bc2c:	ff000100 	.word	0xff000100
 801bc30:	20197d94 	.word	0x20197d94

0801bc34 <nema_raster_quad_fx>:
 801bc34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bc38:	4607      	mov	r7, r0
 801bc3a:	2009      	movs	r0, #9
 801bc3c:	460e      	mov	r6, r1
 801bc3e:	4615      	mov	r5, r2
 801bc40:	461c      	mov	r4, r3
 801bc42:	f000 fc8b 	bl	801c55c <nema_cl_get_space>
 801bc46:	2800      	cmp	r0, #0
 801bc48:	d02f      	beq.n	801bcaa <nema_raster_quad_fx+0x76>
 801bc4a:	f44f 7398 	mov.w	r3, #304	; 0x130
 801bc4e:	f44f 7292 	mov.w	r2, #292	; 0x124
 801bc52:	f44f 7a90 	mov.w	sl, #288	; 0x120
 801bc56:	f44f 799a 	mov.w	r9, #308	; 0x134
 801bc5a:	f44f 78a0 	mov.w	r8, #320	; 0x140
 801bc5e:	f44f 7ea2 	mov.w	lr, #324	; 0x144
 801bc62:	f44f 7ca8 	mov.w	ip, #336	; 0x150
 801bc66:	f44f 71aa 	mov.w	r1, #340	; 0x154
 801bc6a:	6103      	str	r3, [r0, #16]
 801bc6c:	4b10      	ldr	r3, [pc, #64]	; (801bcb0 <nema_raster_quad_fx+0x7c>)
 801bc6e:	6047      	str	r7, [r0, #4]
 801bc70:	60c6      	str	r6, [r0, #12]
 801bc72:	f8c0 a000 	str.w	sl, [r0]
 801bc76:	6082      	str	r2, [r0, #8]
 801bc78:	691a      	ldr	r2, [r3, #16]
 801bc7a:	9b08      	ldr	r3, [sp, #32]
 801bc7c:	f042 0205 	orr.w	r2, r2, #5
 801bc80:	6243      	str	r3, [r0, #36]	; 0x24
 801bc82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc84:	6145      	str	r5, [r0, #20]
 801bc86:	62c3      	str	r3, [r0, #44]	; 0x2c
 801bc88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bc8a:	61c4      	str	r4, [r0, #28]
 801bc8c:	6343      	str	r3, [r0, #52]	; 0x34
 801bc8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bc90:	6442      	str	r2, [r0, #68]	; 0x44
 801bc92:	63c3      	str	r3, [r0, #60]	; 0x3c
 801bc94:	4b07      	ldr	r3, [pc, #28]	; (801bcb4 <nema_raster_quad_fx+0x80>)
 801bc96:	f8c0 9018 	str.w	r9, [r0, #24]
 801bc9a:	f8c0 8020 	str.w	r8, [r0, #32]
 801bc9e:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
 801bca2:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
 801bca6:	6381      	str	r1, [r0, #56]	; 0x38
 801bca8:	6403      	str	r3, [r0, #64]	; 0x40
 801bcaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bcae:	bf00      	nop
 801bcb0:	20197d94 	.word	0x20197d94
 801bcb4:	ff000100 	.word	0xff000100

0801bcb8 <nema_set_interrupt_ctrl>:
 801bcb8:	4601      	mov	r1, r0
 801bcba:	20f8      	movs	r0, #248	; 0xf8
 801bcbc:	f000 bcac 	b.w	801c618 <nema_cl_add_cmd>

0801bcc0 <nema_vg_init>:
 801bcc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bcc2:	4606      	mov	r6, r0
 801bcc4:	460f      	mov	r7, r1
 801bcc6:	b08f      	sub	sp, #60	; 0x3c
 801bcc8:	ac02      	add	r4, sp, #8
 801bcca:	460a      	mov	r2, r1
 801bccc:	2300      	movs	r3, #0
 801bcce:	4601      	mov	r1, r0
 801bcd0:	4620      	mov	r0, r4
 801bcd2:	f000 f889 	bl	801bde8 <stencil_buffer_create>
 801bcd6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801bcda:	ad0a      	add	r5, sp, #40	; 0x28
 801bcdc:	ac06      	add	r4, sp, #24
 801bcde:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801bce2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801bce6:	f000 f827 	bl	801bd38 <context_reset>
 801bcea:	ab0e      	add	r3, sp, #56	; 0x38
 801bcec:	e913 0003 	ldmdb	r3, {r0, r1}
 801bcf0:	e895 000c 	ldmia.w	r5, {r2, r3}
 801bcf4:	e88d 0003 	stmia.w	sp, {r0, r1}
 801bcf8:	4639      	mov	r1, r7
 801bcfa:	4630      	mov	r0, r6
 801bcfc:	f000 f888 	bl	801be10 <stencil_buffer_set>
 801bd00:	f000 f8c2 	bl	801be88 <lut_buffer_create>
 801bd04:	f000 f94e 	bl	801bfa4 <tsvg_init>
 801bd08:	4639      	mov	r1, r7
 801bd0a:	4630      	mov	r0, r6
 801bd0c:	f000 f940 	bl	801bf90 <set_tsvg_text_max_size>
 801bd10:	f000 f866 	bl	801bde0 <nema_vg_get_context>
 801bd14:	4c06      	ldr	r4, [pc, #24]	; (801bd30 <nema_vg_init+0x70>)
 801bd16:	6020      	str	r0, [r4, #0]
 801bd18:	f000 f8b0 	bl	801be7c <nema_vg_get_stencil>
 801bd1c:	6822      	ldr	r2, [r4, #0]
 801bd1e:	4905      	ldr	r1, [pc, #20]	; (801bd34 <nema_vg_init+0x74>)
 801bd20:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801bd22:	6008      	str	r0, [r1, #0]
 801bd24:	f043 0320 	orr.w	r3, r3, #32
 801bd28:	6313      	str	r3, [r2, #48]	; 0x30
 801bd2a:	b00f      	add	sp, #60	; 0x3c
 801bd2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bd2e:	bf00      	nop
 801bd30:	201979fc 	.word	0x201979fc
 801bd34:	20197a00 	.word	0x20197a00

0801bd38 <context_reset>:
 801bd38:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
 801bd3c:	4c26      	ldr	r4, [pc, #152]	; (801bdd8 <context_reset+0xa0>)
 801bd3e:	6820      	ldr	r0, [r4, #0]
 801bd40:	b110      	cbz	r0, 801bd48 <context_reset+0x10>
 801bd42:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801bd44:	069b      	lsls	r3, r3, #26
 801bd46:	d440      	bmi.n	801bdca <context_reset+0x92>
 801bd48:	2300      	movs	r3, #0
 801bd4a:	6962      	ldr	r2, [r4, #20]
 801bd4c:	e9c4 3300 	strd	r3, r3, [r4]
 801bd50:	60a3      	str	r3, [r4, #8]
 801bd52:	b112      	cbz	r2, 801bd5a <context_reset+0x22>
 801bd54:	4821      	ldr	r0, [pc, #132]	; (801bddc <context_reset+0xa4>)
 801bd56:	f7e6 ffde 	bl	8002d16 <nema_buffer_destroy>
 801bd5a:	2300      	movs	r3, #0
 801bd5c:	f04f 0800 	mov.w	r8, #0
 801bd60:	f240 5901 	movw	r9, #1281	; 0x501
 801bd64:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 801bd68:	f04f 67f0 	mov.w	r7, #125829120	; 0x7800000
 801bd6c:	2000      	movs	r0, #0
 801bd6e:	2100      	movs	r1, #0
 801bd70:	6423      	str	r3, [r4, #64]	; 0x40
 801bd72:	6463      	str	r3, [r4, #68]	; 0x44
 801bd74:	64e3      	str	r3, [r4, #76]	; 0x4c
 801bd76:	6723      	str	r3, [r4, #112]	; 0x70
 801bd78:	6523      	str	r3, [r4, #80]	; 0x50
 801bd7a:	6763      	str	r3, [r4, #116]	; 0x74
 801bd7c:	6563      	str	r3, [r4, #84]	; 0x54
 801bd7e:	67a3      	str	r3, [r4, #120]	; 0x78
 801bd80:	65a3      	str	r3, [r4, #88]	; 0x58
 801bd82:	67e3      	str	r3, [r4, #124]	; 0x7c
 801bd84:	65e3      	str	r3, [r4, #92]	; 0x5c
 801bd86:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 801bd8a:	6623      	str	r3, [r4, #96]	; 0x60
 801bd8c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 801bd90:	6663      	str	r3, [r4, #100]	; 0x64
 801bd92:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801bd96:	66a3      	str	r3, [r4, #104]	; 0x68
 801bd98:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 801bd9c:	66e3      	str	r3, [r4, #108]	; 0x6c
 801bd9e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 801bda2:	2202      	movs	r2, #2
 801bda4:	2300      	movs	r3, #0
 801bda6:	e9c4 8908 	strd	r8, r9, [r4, #32]
 801bdaa:	e9c4 670a 	strd	r6, r7, [r4, #40]	; 0x28
 801bdae:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
 801bdb2:	e9c4 3303 	strd	r3, r3, [r4, #12]
 801bdb6:	e9c4 3305 	strd	r3, r3, [r4, #20]
 801bdba:	77a3      	strb	r3, [r4, #30]
 801bdbc:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 801bdc0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801bdc4:	83a2      	strh	r2, [r4, #28]
 801bdc6:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 801bdca:	6883      	ldr	r3, [r0, #8]
 801bdcc:	2b00      	cmp	r3, #0
 801bdce:	d0bb      	beq.n	801bd48 <context_reset+0x10>
 801bdd0:	f7e6 ffa1 	bl	8002d16 <nema_buffer_destroy>
 801bdd4:	e7b8      	b.n	801bd48 <context_reset+0x10>
 801bdd6:	bf00      	nop
 801bdd8:	20197a08 	.word	0x20197a08
 801bddc:	20197a14 	.word	0x20197a14

0801bde0 <nema_vg_get_context>:
 801bde0:	4800      	ldr	r0, [pc, #0]	; (801bde4 <nema_vg_get_context+0x4>)
 801bde2:	4770      	bx	lr
 801bde4:	20197a08 	.word	0x20197a08

0801bde8 <stencil_buffer_create>:
 801bde8:	b538      	push	{r3, r4, r5, lr}
 801bdea:	4605      	mov	r5, r0
 801bdec:	1cc8      	adds	r0, r1, #3
 801bdee:	bf48      	it	mi
 801bdf0:	1d88      	addmi	r0, r1, #6
 801bdf2:	1cd4      	adds	r4, r2, #3
 801bdf4:	bf48      	it	mi
 801bdf6:	1d94      	addmi	r4, r2, #6
 801bdf8:	1080      	asrs	r0, r0, #2
 801bdfa:	0080      	lsls	r0, r0, #2
 801bdfc:	f024 0203 	bic.w	r2, r4, #3
 801be00:	fb02 f200 	mul.w	r2, r2, r0
 801be04:	4619      	mov	r1, r3
 801be06:	4628      	mov	r0, r5
 801be08:	f7e6 ff6a 	bl	8002ce0 <nema_buffer_create_pool>
 801be0c:	4628      	mov	r0, r5
 801be0e:	bd38      	pop	{r3, r4, r5, pc}

0801be10 <stencil_buffer_set>:
 801be10:	b082      	sub	sp, #8
 801be12:	b470      	push	{r4, r5, r6}
 801be14:	4606      	mov	r6, r0
 801be16:	460d      	mov	r5, r1
 801be18:	a803      	add	r0, sp, #12
 801be1a:	e880 000c 	stmia.w	r0, {r2, r3}
 801be1e:	4c15      	ldr	r4, [pc, #84]	; (801be74 <stencil_buffer_set+0x64>)
 801be20:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 801be22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801be26:	1cf3      	adds	r3, r6, #3
 801be28:	bf48      	it	mi
 801be2a:	1db3      	addmi	r3, r6, #6
 801be2c:	1cea      	adds	r2, r5, #3
 801be2e:	bf48      	it	mi
 801be30:	1daa      	addmi	r2, r5, #6
 801be32:	f022 0203 	bic.w	r2, r2, #3
 801be36:	ee07 2a90 	vmov	s15, r2
 801be3a:	f023 0303 	bic.w	r3, r3, #3
 801be3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801be42:	ee07 3a90 	vmov	s15, r3
 801be46:	2100      	movs	r1, #0
 801be48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801be4c:	61a1      	str	r1, [r4, #24]
 801be4e:	61e1      	str	r1, [r4, #28]
 801be50:	6261      	str	r1, [r4, #36]	; 0x24
 801be52:	6321      	str	r1, [r4, #48]	; 0x30
 801be54:	4908      	ldr	r1, [pc, #32]	; (801be78 <stencil_buffer_set+0x68>)
 801be56:	ed84 7a0b 	vstr	s14, [r4, #44]	; 0x2c
 801be5a:	600c      	str	r4, [r1, #0]
 801be5c:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801be60:	edc4 7a08 	vstr	s15, [r4, #32]
 801be64:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 801be68:	e9c4 3204 	strd	r3, r2, [r4, #16]
 801be6c:	bc70      	pop	{r4, r5, r6}
 801be6e:	b002      	add	sp, #8
 801be70:	4770      	bx	lr
 801be72:	bf00      	nop
 801be74:	20197a9c 	.word	0x20197a9c
 801be78:	20197a08 	.word	0x20197a08

0801be7c <nema_vg_get_stencil>:
 801be7c:	4b01      	ldr	r3, [pc, #4]	; (801be84 <nema_vg_get_stencil+0x8>)
 801be7e:	6818      	ldr	r0, [r3, #0]
 801be80:	4770      	bx	lr
 801be82:	bf00      	nop
 801be84:	20197a08 	.word	0x20197a08

0801be88 <lut_buffer_create>:
 801be88:	b5f0      	push	{r4, r5, r6, r7, lr}
 801be8a:	4d1a      	ldr	r5, [pc, #104]	; (801bef4 <lut_buffer_create+0x6c>)
 801be8c:	b085      	sub	sp, #20
 801be8e:	69ac      	ldr	r4, [r5, #24]
 801be90:	b10c      	cbz	r4, 801be96 <lut_buffer_create+0xe>
 801be92:	b005      	add	sp, #20
 801be94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801be96:	466e      	mov	r6, sp
 801be98:	f44f 7280 	mov.w	r2, #256	; 0x100
 801be9c:	4630      	mov	r0, r6
 801be9e:	4621      	mov	r1, r4
 801bea0:	f7e6 ff1e 	bl	8002ce0 <nema_buffer_create_pool>
 801bea4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801bea8:	f105 060c 	add.w	r6, r5, #12
 801beac:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 801beb0:	4627      	mov	r7, r4
 801beb2:	4623      	mov	r3, r4
 801beb4:	696d      	ldr	r5, [r5, #20]
 801beb6:	26ff      	movs	r6, #255	; 0xff
 801beb8:	e008      	b.n	801becc <lut_buffer_create+0x44>
 801beba:	2880      	cmp	r0, #128	; 0x80
 801bebc:	f1c4 0100 	rsb	r1, r4, #0
 801bec0:	d016      	beq.n	801bef0 <lut_buffer_create+0x68>
 801bec2:	bfcc      	ite	gt
 801bec4:	b2e1      	uxtbgt	r1, r4
 801bec6:	b2c9      	uxtble	r1, r1
 801bec8:	54a9      	strb	r1, [r5, r2]
 801beca:	3410      	adds	r4, #16
 801becc:	ea44 1213 	orr.w	r2, r4, r3, lsr #4
 801bed0:	3301      	adds	r3, #1
 801bed2:	f1a3 0172 	sub.w	r1, r3, #114	; 0x72
 801bed6:	291e      	cmp	r1, #30
 801bed8:	f103 30ff 	add.w	r0, r3, #4294967295
 801bedc:	b2d2      	uxtb	r2, r2
 801bede:	d9ec      	bls.n	801beba <lut_buffer_create+0x32>
 801bee0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bee4:	54ae      	strb	r6, [r5, r2]
 801bee6:	d1f0      	bne.n	801beca <lut_buffer_create+0x42>
 801bee8:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
 801beec:	b005      	add	sp, #20
 801beee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bef0:	54af      	strb	r7, [r5, r2]
 801bef2:	e7ea      	b.n	801beca <lut_buffer_create+0x42>
 801bef4:	20197a08 	.word	0x20197a08

0801bef8 <nema_vg_set_error>:
 801bef8:	4b01      	ldr	r3, [pc, #4]	; (801bf00 <nema_vg_set_error+0x8>)
 801befa:	6218      	str	r0, [r3, #32]
 801befc:	4770      	bx	lr
 801befe:	bf00      	nop
 801bf00:	20197a08 	.word	0x20197a08

0801bf04 <nema_vg_paint_create>:
 801bf04:	b538      	push	{r3, r4, r5, lr}
 801bf06:	20e0      	movs	r0, #224	; 0xe0
 801bf08:	f7e6 feab 	bl	8002c62 <nema_host_malloc>
 801bf0c:	4604      	mov	r4, r0
 801bf0e:	b1e8      	cbz	r0, 801bf4c <nema_vg_paint_create+0x48>
 801bf10:	2500      	movs	r5, #0
 801bf12:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801bf16:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 801bf1a:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
 801bf1e:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
 801bf22:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
 801bf26:	f880 50dd 	strb.w	r5, [r0, #221]	; 0xdd
 801bf2a:	f880 50d0 	strb.w	r5, [r0, #208]	; 0xd0
 801bf2e:	e9c0 250c 	strd	r2, r5, [r0, #48]	; 0x30
 801bf32:	e9c0 5500 	strd	r5, r5, [r0]
 801bf36:	3038      	adds	r0, #56	; 0x38
 801bf38:	f7ff fa30 	bl	801b39c <nema_mat3x3_load_identity>
 801bf3c:	f104 0008 	add.w	r0, r4, #8
 801bf40:	f7ff fa2c 	bl	801b39c <nema_mat3x3_load_identity>
 801bf44:	f884 50dc 	strb.w	r5, [r4, #220]	; 0xdc
 801bf48:	4620      	mov	r0, r4
 801bf4a:	bd38      	pop	{r3, r4, r5, pc}
 801bf4c:	2001      	movs	r0, #1
 801bf4e:	f7ff ffd3 	bl	801bef8 <nema_vg_set_error>
 801bf52:	4620      	mov	r0, r4
 801bf54:	bd38      	pop	{r3, r4, r5, pc}
 801bf56:	bf00      	nop

0801bf58 <nema_vg_grad_create>:
 801bf58:	b530      	push	{r4, r5, lr}
 801bf5a:	2010      	movs	r0, #16
 801bf5c:	b085      	sub	sp, #20
 801bf5e:	f7e6 fe80 	bl	8002c62 <nema_host_malloc>
 801bf62:	466d      	mov	r5, sp
 801bf64:	4604      	mov	r4, r0
 801bf66:	f44f 7280 	mov.w	r2, #256	; 0x100
 801bf6a:	4628      	mov	r0, r5
 801bf6c:	2100      	movs	r1, #0
 801bf6e:	f7e6 feb7 	bl	8002ce0 <nema_buffer_create_pool>
 801bf72:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801bf76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801bf7a:	4620      	mov	r0, r4
 801bf7c:	b005      	add	sp, #20
 801bf7e:	bd30      	pop	{r4, r5, pc}

0801bf80 <nema_vg_path_create>:
 801bf80:	b508      	push	{r3, lr}
 801bf82:	2088      	movs	r0, #136	; 0x88
 801bf84:	f7e6 fe6d 	bl	8002c62 <nema_host_malloc>
 801bf88:	2200      	movs	r2, #0
 801bf8a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 801bf8e:	bd08      	pop	{r3, pc}

0801bf90 <set_tsvg_text_max_size>:
 801bf90:	4a02      	ldr	r2, [pc, #8]	; (801bf9c <set_tsvg_text_max_size+0xc>)
 801bf92:	4b03      	ldr	r3, [pc, #12]	; (801bfa0 <set_tsvg_text_max_size+0x10>)
 801bf94:	6010      	str	r0, [r2, #0]
 801bf96:	6019      	str	r1, [r3, #0]
 801bf98:	4770      	bx	lr
 801bf9a:	bf00      	nop
 801bf9c:	2000005c 	.word	0x2000005c
 801bfa0:	20000060 	.word	0x20000060

0801bfa4 <tsvg_init>:
 801bfa4:	b508      	push	{r3, lr}
 801bfa6:	f7ff ffad 	bl	801bf04 <nema_vg_paint_create>
 801bfaa:	4b05      	ldr	r3, [pc, #20]	; (801bfc0 <tsvg_init+0x1c>)
 801bfac:	6018      	str	r0, [r3, #0]
 801bfae:	f7ff ffe7 	bl	801bf80 <nema_vg_path_create>
 801bfb2:	4b04      	ldr	r3, [pc, #16]	; (801bfc4 <tsvg_init+0x20>)
 801bfb4:	6018      	str	r0, [r3, #0]
 801bfb6:	f7ff ffcf 	bl	801bf58 <nema_vg_grad_create>
 801bfba:	4b03      	ldr	r3, [pc, #12]	; (801bfc8 <tsvg_init+0x24>)
 801bfbc:	6018      	str	r0, [r3, #0]
 801bfbe:	bd08      	pop	{r3, pc}
 801bfc0:	20197ad8 	.word	0x20197ad8
 801bfc4:	20197adc 	.word	0x20197adc
 801bfc8:	20197ad4 	.word	0x20197ad4

0801bfcc <tsi_malloc_init_pool>:
 801bfcc:	b4f0      	push	{r4, r5, r6, r7}
 801bfce:	2807      	cmp	r0, #7
 801bfd0:	9e04      	ldr	r6, [sp, #16]
 801bfd2:	d81c      	bhi.n	801c00e <tsi_malloc_init_pool+0x42>
 801bfd4:	4f0f      	ldr	r7, [pc, #60]	; (801c014 <tsi_malloc_init_pool+0x48>)
 801bfd6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801bfda:	0084      	lsls	r4, r0, #2
 801bfdc:	193d      	adds	r5, r7, r4
 801bfde:	513a      	str	r2, [r7, r4]
 801bfe0:	185a      	adds	r2, r3, r1
 801bfe2:	60e9      	str	r1, [r5, #12]
 801bfe4:	6069      	str	r1, [r5, #4]
 801bfe6:	612b      	str	r3, [r5, #16]
 801bfe8:	60aa      	str	r2, [r5, #8]
 801bfea:	b16e      	cbz	r6, 801c008 <tsi_malloc_init_pool+0x3c>
 801bfec:	2200      	movs	r2, #0
 801bfee:	2010      	movs	r0, #16
 801bff0:	4d09      	ldr	r5, [pc, #36]	; (801c018 <tsi_malloc_init_pool+0x4c>)
 801bff2:	180c      	adds	r4, r1, r0
 801bff4:	e9c1 5001 	strd	r5, r0, [r1, #4]
 801bff8:	4610      	mov	r0, r2
 801bffa:	3b20      	subs	r3, #32
 801bffc:	610b      	str	r3, [r1, #16]
 801bffe:	600a      	str	r2, [r1, #0]
 801c000:	e9c4 5201 	strd	r5, r2, [r4, #4]
 801c004:	bcf0      	pop	{r4, r5, r6, r7}
 801c006:	4770      	bx	lr
 801c008:	4630      	mov	r0, r6
 801c00a:	bcf0      	pop	{r4, r5, r6, r7}
 801c00c:	4770      	bx	lr
 801c00e:	f04f 30ff 	mov.w	r0, #4294967295
 801c012:	e7f7      	b.n	801c004 <tsi_malloc_init_pool+0x38>
 801c014:	20197ae0 	.word	0x20197ae0
 801c018:	000f1fa1 	.word	0x000f1fa1

0801c01c <tsi_malloc_pool>:
 801c01c:	2807      	cmp	r0, #7
 801c01e:	d832      	bhi.n	801c086 <tsi_malloc_pool+0x6a>
 801c020:	4b1b      	ldr	r3, [pc, #108]	; (801c090 <tsi_malloc_pool+0x74>)
 801c022:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801c026:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801c02a:	68c2      	ldr	r2, [r0, #12]
 801c02c:	b35a      	cbz	r2, 801c086 <tsi_malloc_pool+0x6a>
 801c02e:	2910      	cmp	r1, #16
 801c030:	bfb8      	it	lt
 801c032:	2110      	movlt	r1, #16
 801c034:	b470      	push	{r4, r5, r6}
 801c036:	310f      	adds	r1, #15
 801c038:	6814      	ldr	r4, [r2, #0]
 801c03a:	f021 010f 	bic.w	r1, r1, #15
 801c03e:	42a1      	cmp	r1, r4
 801c040:	dd23      	ble.n	801c08a <tsi_malloc_pool+0x6e>
 801c042:	6890      	ldr	r0, [r2, #8]
 801c044:	b1d0      	cbz	r0, 801c07c <tsi_malloc_pool+0x60>
 801c046:	4615      	mov	r5, r2
 801c048:	e002      	b.n	801c050 <tsi_malloc_pool+0x34>
 801c04a:	6898      	ldr	r0, [r3, #8]
 801c04c:	461d      	mov	r5, r3
 801c04e:	b1a8      	cbz	r0, 801c07c <tsi_malloc_pool+0x60>
 801c050:	5814      	ldr	r4, [r2, r0]
 801c052:	1813      	adds	r3, r2, r0
 801c054:	428c      	cmp	r4, r1
 801c056:	dbf8      	blt.n	801c04a <tsi_malloc_pool+0x2e>
 801c058:	f101 0010 	add.w	r0, r1, #16
 801c05c:	42a0      	cmp	r0, r4
 801c05e:	da0f      	bge.n	801c080 <tsi_malloc_pool+0x64>
 801c060:	4e0c      	ldr	r6, [pc, #48]	; (801c094 <tsi_malloc_pool+0x78>)
 801c062:	1a24      	subs	r4, r4, r0
 801c064:	50c4      	str	r4, [r0, r3]
 801c066:	18c4      	adds	r4, r0, r3
 801c068:	6066      	str	r6, [r4, #4]
 801c06a:	689e      	ldr	r6, [r3, #8]
 801c06c:	1aa2      	subs	r2, r4, r2
 801c06e:	60a6      	str	r6, [r4, #8]
 801c070:	60aa      	str	r2, [r5, #8]
 801c072:	6019      	str	r1, [r3, #0]
 801c074:	4a08      	ldr	r2, [pc, #32]	; (801c098 <tsi_malloc_pool+0x7c>)
 801c076:	f103 0010 	add.w	r0, r3, #16
 801c07a:	605a      	str	r2, [r3, #4]
 801c07c:	bc70      	pop	{r4, r5, r6}
 801c07e:	4770      	bx	lr
 801c080:	689a      	ldr	r2, [r3, #8]
 801c082:	60aa      	str	r2, [r5, #8]
 801c084:	e7f6      	b.n	801c074 <tsi_malloc_pool+0x58>
 801c086:	2000      	movs	r0, #0
 801c088:	4770      	bx	lr
 801c08a:	4615      	mov	r5, r2
 801c08c:	4613      	mov	r3, r2
 801c08e:	e7e3      	b.n	801c058 <tsi_malloc_pool+0x3c>
 801c090:	20197ae0 	.word	0x20197ae0
 801c094:	000f1fa1 	.word	0x000f1fa1
 801c098:	000f1fa2 	.word	0x000f1fa2

0801c09c <tsi_free>:
 801c09c:	2800      	cmp	r0, #0
 801c09e:	d045      	beq.n	801c12c <tsi_free+0x90>
 801c0a0:	4a45      	ldr	r2, [pc, #276]	; (801c1b8 <tsi_free+0x11c>)
 801c0a2:	68d3      	ldr	r3, [r2, #12]
 801c0a4:	b12b      	cbz	r3, 801c0b2 <tsi_free+0x16>
 801c0a6:	6851      	ldr	r1, [r2, #4]
 801c0a8:	4281      	cmp	r1, r0
 801c0aa:	d802      	bhi.n	801c0b2 <tsi_free+0x16>
 801c0ac:	6891      	ldr	r1, [r2, #8]
 801c0ae:	4288      	cmp	r0, r1
 801c0b0:	d33d      	bcc.n	801c12e <tsi_free+0x92>
 801c0b2:	6a13      	ldr	r3, [r2, #32]
 801c0b4:	b12b      	cbz	r3, 801c0c2 <tsi_free+0x26>
 801c0b6:	6991      	ldr	r1, [r2, #24]
 801c0b8:	4288      	cmp	r0, r1
 801c0ba:	d302      	bcc.n	801c0c2 <tsi_free+0x26>
 801c0bc:	69d1      	ldr	r1, [r2, #28]
 801c0be:	4288      	cmp	r0, r1
 801c0c0:	d335      	bcc.n	801c12e <tsi_free+0x92>
 801c0c2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801c0c4:	b12b      	cbz	r3, 801c0d2 <tsi_free+0x36>
 801c0c6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 801c0c8:	4281      	cmp	r1, r0
 801c0ca:	d802      	bhi.n	801c0d2 <tsi_free+0x36>
 801c0cc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 801c0ce:	4281      	cmp	r1, r0
 801c0d0:	d82d      	bhi.n	801c12e <tsi_free+0x92>
 801c0d2:	6c93      	ldr	r3, [r2, #72]	; 0x48
 801c0d4:	b12b      	cbz	r3, 801c0e2 <tsi_free+0x46>
 801c0d6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 801c0d8:	4288      	cmp	r0, r1
 801c0da:	d302      	bcc.n	801c0e2 <tsi_free+0x46>
 801c0dc:	6c51      	ldr	r1, [r2, #68]	; 0x44
 801c0de:	4288      	cmp	r0, r1
 801c0e0:	d325      	bcc.n	801c12e <tsi_free+0x92>
 801c0e2:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 801c0e4:	b12b      	cbz	r3, 801c0f2 <tsi_free+0x56>
 801c0e6:	6d51      	ldr	r1, [r2, #84]	; 0x54
 801c0e8:	4288      	cmp	r0, r1
 801c0ea:	d302      	bcc.n	801c0f2 <tsi_free+0x56>
 801c0ec:	6d91      	ldr	r1, [r2, #88]	; 0x58
 801c0ee:	4288      	cmp	r0, r1
 801c0f0:	d31d      	bcc.n	801c12e <tsi_free+0x92>
 801c0f2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 801c0f4:	b12b      	cbz	r3, 801c102 <tsi_free+0x66>
 801c0f6:	6e91      	ldr	r1, [r2, #104]	; 0x68
 801c0f8:	4288      	cmp	r0, r1
 801c0fa:	d302      	bcc.n	801c102 <tsi_free+0x66>
 801c0fc:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
 801c0fe:	4288      	cmp	r0, r1
 801c100:	d315      	bcc.n	801c12e <tsi_free+0x92>
 801c102:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 801c106:	b133      	cbz	r3, 801c116 <tsi_free+0x7a>
 801c108:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
 801c10a:	4288      	cmp	r0, r1
 801c10c:	d303      	bcc.n	801c116 <tsi_free+0x7a>
 801c10e:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
 801c112:	4288      	cmp	r0, r1
 801c114:	d30b      	bcc.n	801c12e <tsi_free+0x92>
 801c116:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 801c11a:	b13b      	cbz	r3, 801c12c <tsi_free+0x90>
 801c11c:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 801c120:	4281      	cmp	r1, r0
 801c122:	d803      	bhi.n	801c12c <tsi_free+0x90>
 801c124:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 801c128:	4282      	cmp	r2, r0
 801c12a:	d800      	bhi.n	801c12e <tsi_free+0x92>
 801c12c:	4770      	bx	lr
 801c12e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c130:	f1a0 0410 	sub.w	r4, r0, #16
 801c134:	6861      	ldr	r1, [r4, #4]
 801c136:	4a21      	ldr	r2, [pc, #132]	; (801c1bc <tsi_free+0x120>)
 801c138:	4291      	cmp	r1, r2
 801c13a:	d000      	beq.n	801c13e <tsi_free+0xa2>
 801c13c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c13e:	4a20      	ldr	r2, [pc, #128]	; (801c1c0 <tsi_free+0x124>)
 801c140:	6062      	str	r2, [r4, #4]
 801c142:	6899      	ldr	r1, [r3, #8]
 801c144:	18ca      	adds	r2, r1, r3
 801c146:	4294      	cmp	r4, r2
 801c148:	d929      	bls.n	801c19e <tsi_free+0x102>
 801c14a:	b909      	cbnz	r1, 801c150 <tsi_free+0xb4>
 801c14c:	e027      	b.n	801c19e <tsi_free+0x102>
 801c14e:	b129      	cbz	r1, 801c15c <tsi_free+0xc0>
 801c150:	6891      	ldr	r1, [r2, #8]
 801c152:	4615      	mov	r5, r2
 801c154:	4616      	mov	r6, r2
 801c156:	185a      	adds	r2, r3, r1
 801c158:	4294      	cmp	r4, r2
 801c15a:	d8f8      	bhi.n	801c14e <tsi_free+0xb2>
 801c15c:	f850 7c10 	ldr.w	r7, [r0, #-16]
 801c160:	42ab      	cmp	r3, r5
 801c162:	eba4 0e03 	sub.w	lr, r4, r3
 801c166:	4407      	add	r7, r0
 801c168:	d01e      	beq.n	801c1a8 <tsi_free+0x10c>
 801c16a:	682b      	ldr	r3, [r5, #0]
 801c16c:	f105 0c10 	add.w	ip, r5, #16
 801c170:	4463      	add	r3, ip
 801c172:	429c      	cmp	r4, r3
 801c174:	f8c5 e008 	str.w	lr, [r5, #8]
 801c178:	60a1      	str	r1, [r4, #8]
 801c17a:	d11a      	bne.n	801c1b2 <tsi_free+0x116>
 801c17c:	f850 0c10 	ldr.w	r0, [r0, #-16]
 801c180:	682b      	ldr	r3, [r5, #0]
 801c182:	3010      	adds	r0, #16
 801c184:	4403      	add	r3, r0
 801c186:	60a9      	str	r1, [r5, #8]
 801c188:	602b      	str	r3, [r5, #0]
 801c18a:	4297      	cmp	r7, r2
 801c18c:	d1d6      	bne.n	801c13c <tsi_free+0xa0>
 801c18e:	683a      	ldr	r2, [r7, #0]
 801c190:	6833      	ldr	r3, [r6, #0]
 801c192:	3210      	adds	r2, #16
 801c194:	4413      	add	r3, r2
 801c196:	6033      	str	r3, [r6, #0]
 801c198:	68bb      	ldr	r3, [r7, #8]
 801c19a:	60b3      	str	r3, [r6, #8]
 801c19c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c19e:	f850 7c10 	ldr.w	r7, [r0, #-16]
 801c1a2:	eba4 0e03 	sub.w	lr, r4, r3
 801c1a6:	4407      	add	r7, r0
 801c1a8:	f8c3 e008 	str.w	lr, [r3, #8]
 801c1ac:	4626      	mov	r6, r4
 801c1ae:	60a1      	str	r1, [r4, #8]
 801c1b0:	e7eb      	b.n	801c18a <tsi_free+0xee>
 801c1b2:	4626      	mov	r6, r4
 801c1b4:	e7e9      	b.n	801c18a <tsi_free+0xee>
 801c1b6:	bf00      	nop
 801c1b8:	20197ae0 	.word	0x20197ae0
 801c1bc:	000f1fa2 	.word	0x000f1fa2
 801c1c0:	000f1fa1 	.word	0x000f1fa1

0801c1c4 <nema_cl_create_sized>:
 801c1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c1c6:	b093      	sub	sp, #76	; 0x4c
 801c1c8:	466d      	mov	r5, sp
 801c1ca:	4606      	mov	r6, r0
 801c1cc:	460a      	mov	r2, r1
 801c1ce:	4628      	mov	r0, r5
 801c1d0:	2100      	movs	r1, #0
 801c1d2:	f7e6 fd85 	bl	8002ce0 <nema_buffer_create_pool>
 801c1d6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801c1da:	2500      	movs	r5, #0
 801c1dc:	ac04      	add	r4, sp, #16
 801c1de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801c1e2:	4620      	mov	r0, r4
 801c1e4:	f7e6 fd8b 	bl	8002cfe <nema_buffer_map>
 801c1e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801c1ec:	ac08      	add	r4, sp, #32
 801c1ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801c1f2:	2110      	movs	r1, #16
 801c1f4:	f04f 32ff 	mov.w	r2, #4294967295
 801c1f8:	9b04      	ldr	r3, [sp, #16]
 801c1fa:	950d      	str	r5, [sp, #52]	; 0x34
 801c1fc:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
 801c200:	42ab      	cmp	r3, r5
 801c202:	4635      	mov	r5, r6
 801c204:	bfb8      	it	lt
 801c206:	3307      	addlt	r3, #7
 801c208:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 801c20c:	10db      	asrs	r3, r3, #3
 801c20e:	005b      	lsls	r3, r3, #1
 801c210:	930c      	str	r3, [sp, #48]	; 0x30
 801c212:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c214:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801c216:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c218:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801c21a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801c21e:	2700      	movs	r7, #0
 801c220:	e885 0003 	stmia.w	r5, {r0, r1}
 801c224:	4630      	mov	r0, r6
 801c226:	61b7      	str	r7, [r6, #24]
 801c228:	b013      	add	sp, #76	; 0x4c
 801c22a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c22c <nema_extend_bound_cl>:
 801c22c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c22e:	4d6e      	ldr	r5, [pc, #440]	; (801c3e8 <nema_extend_bound_cl+0x1bc>)
 801c230:	b09f      	sub	sp, #124	; 0x7c
 801c232:	682b      	ldr	r3, [r5, #0]
 801c234:	2b00      	cmp	r3, #0
 801c236:	f000 80c1 	beq.w	801c3bc <nema_extend_bound_cl+0x190>
 801c23a:	4606      	mov	r6, r0
 801c23c:	6998      	ldr	r0, [r3, #24]
 801c23e:	0784      	lsls	r4, r0, #30
 801c240:	f140 80b6 	bpl.w	801c3b0 <nema_extend_bound_cl+0x184>
 801c244:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 801c248:	0680      	lsls	r0, r0, #26
 801c24a:	d44e      	bmi.n	801c2ea <nema_extend_bound_cl+0xbe>
 801c24c:	1a89      	subs	r1, r1, r2
 801c24e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 801c252:	1049      	asrs	r1, r1, #1
 801c254:	2902      	cmp	r1, #2
 801c256:	dd13      	ble.n	801c280 <nema_extend_bound_cl+0x54>
 801c258:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 801c25c:	2700      	movs	r7, #0
 801c25e:	1e94      	subs	r4, r2, #2
 801c260:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801c264:	1c91      	adds	r1, r2, #2
 801c266:	0092      	lsls	r2, r2, #2
 801c268:	6898      	ldr	r0, [r3, #8]
 801c26a:	f840 c002 	str.w	ip, [r0, r2]
 801c26e:	6898      	ldr	r0, [r3, #8]
 801c270:	4410      	add	r0, r2
 801c272:	6047      	str	r7, [r0, #4]
 801c274:	6159      	str	r1, [r3, #20]
 801c276:	3102      	adds	r1, #2
 801c278:	428c      	cmp	r4, r1
 801c27a:	f102 0208 	add.w	r2, r2, #8
 801c27e:	d1f3      	bne.n	801c268 <nema_extend_bound_cl+0x3c>
 801c280:	6a1c      	ldr	r4, [r3, #32]
 801c282:	2c00      	cmp	r4, #0
 801c284:	d050      	beq.n	801c328 <nema_extend_bound_cl+0xfc>
 801c286:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
 801c28a:	26f0      	movs	r6, #240	; 0xf0
 801c28c:	27f4      	movs	r7, #244	; 0xf4
 801c28e:	6898      	ldr	r0, [r3, #8]
 801c290:	f041 0104 	orr.w	r1, r1, #4
 801c294:	6199      	str	r1, [r3, #24]
 801c296:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
 801c29a:	6899      	ldr	r1, [r3, #8]
 801c29c:	68e6      	ldr	r6, [r4, #12]
 801c29e:	0090      	lsls	r0, r2, #2
 801c2a0:	4401      	add	r1, r0
 801c2a2:	604e      	str	r6, [r1, #4]
 801c2a4:	6899      	ldr	r1, [r3, #8]
 801c2a6:	1c96      	adds	r6, r2, #2
 801c2a8:	4401      	add	r1, r0
 801c2aa:	615e      	str	r6, [r3, #20]
 801c2ac:	608f      	str	r7, [r1, #8]
 801c2ae:	6899      	ldr	r1, [r3, #8]
 801c2b0:	6926      	ldr	r6, [r4, #16]
 801c2b2:	4401      	add	r1, r0
 801c2b4:	1d17      	adds	r7, r2, #4
 801c2b6:	60ce      	str	r6, [r1, #12]
 801c2b8:	621c      	str	r4, [r3, #32]
 801c2ba:	615f      	str	r7, [r3, #20]
 801c2bc:	68e1      	ldr	r1, [r4, #12]
 801c2be:	f011 0107 	ands.w	r1, r1, #7
 801c2c2:	d120      	bne.n	801c306 <nema_extend_bound_cl+0xda>
 801c2c4:	691e      	ldr	r6, [r3, #16]
 801c2c6:	3205      	adds	r2, #5
 801c2c8:	42b2      	cmp	r2, r6
 801c2ca:	db23      	blt.n	801c314 <nema_extend_bound_cl+0xe8>
 801c2cc:	699a      	ldr	r2, [r3, #24]
 801c2ce:	f022 0220 	bic.w	r2, r2, #32
 801c2d2:	619a      	str	r2, [r3, #24]
 801c2d4:	69a3      	ldr	r3, [r4, #24]
 801c2d6:	075a      	lsls	r2, r3, #29
 801c2d8:	d503      	bpl.n	801c2e2 <nema_extend_bound_cl+0xb6>
 801c2da:	6a24      	ldr	r4, [r4, #32]
 801c2dc:	69a3      	ldr	r3, [r4, #24]
 801c2de:	075b      	lsls	r3, r3, #29
 801c2e0:	d4fb      	bmi.n	801c2da <nema_extend_bound_cl+0xae>
 801c2e2:	2000      	movs	r0, #0
 801c2e4:	602c      	str	r4, [r5, #0]
 801c2e6:	b01f      	add	sp, #124	; 0x7c
 801c2e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c2ea:	2900      	cmp	r1, #0
 801c2ec:	bfb8      	it	lt
 801c2ee:	3103      	addlt	r1, #3
 801c2f0:	1089      	asrs	r1, r1, #2
 801c2f2:	0049      	lsls	r1, r1, #1
 801c2f4:	4291      	cmp	r1, r2
 801c2f6:	bfcc      	ite	gt
 801c2f8:	4610      	movgt	r0, r2
 801c2fa:	1a50      	suble	r0, r2, r1
 801c2fc:	1a09      	subs	r1, r1, r0
 801c2fe:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 801c302:	1049      	asrs	r1, r1, #1
 801c304:	e7a6      	b.n	801c254 <nema_extend_bound_cl+0x28>
 801c306:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801c30a:	f7fe fc45 	bl	801ab98 <nema_set_error>
 801c30e:	2000      	movs	r0, #0
 801c310:	b01f      	add	sp, #124	; 0x7c
 801c312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c314:	f44f 26a0 	mov.w	r6, #327680	; 0x50000
 801c318:	689a      	ldr	r2, [r3, #8]
 801c31a:	4410      	add	r0, r2
 801c31c:	e9c0 6104 	strd	r6, r1, [r0, #16]
 801c320:	699a      	ldr	r2, [r3, #24]
 801c322:	f022 0208 	bic.w	r2, r2, #8
 801c326:	e7d2      	b.n	801c2ce <nema_extend_bound_cl+0xa2>
 801c328:	2028      	movs	r0, #40	; 0x28
 801c32a:	f7e6 fc9a 	bl	8002c62 <nema_host_malloc>
 801c32e:	4604      	mov	r4, r0
 801c330:	2800      	cmp	r0, #0
 801c332:	d052      	beq.n	801c3da <nema_extend_bound_cl+0x1ae>
 801c334:	1cb1      	adds	r1, r6, #2
 801c336:	00c9      	lsls	r1, r1, #3
 801c338:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801c33c:	dd1a      	ble.n	801c374 <nema_extend_bound_cl+0x148>
 801c33e:	466e      	mov	r6, sp
 801c340:	4627      	mov	r7, r4
 801c342:	4668      	mov	r0, sp
 801c344:	f7ff ff3e 	bl	801c1c4 <nema_cl_create_sized>
 801c348:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801c34a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801c34c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801c34e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801c350:	e896 0003 	ldmia.w	r6, {r0, r1}
 801c354:	e887 0003 	stmia.w	r7, {r0, r1}
 801c358:	68a3      	ldr	r3, [r4, #8]
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	d034      	beq.n	801c3c8 <nema_extend_bound_cl+0x19c>
 801c35e:	682b      	ldr	r3, [r5, #0]
 801c360:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c362:	2a00      	cmp	r2, #0
 801c364:	bf08      	it	eq
 801c366:	461a      	moveq	r2, r3
 801c368:	6262      	str	r2, [r4, #36]	; 0x24
 801c36a:	699a      	ldr	r2, [r3, #24]
 801c36c:	f022 020c 	bic.w	r2, r2, #12
 801c370:	61a2      	str	r2, [r4, #24]
 801c372:	e788      	b.n	801c286 <nema_extend_bound_cl+0x5a>
 801c374:	a80a      	add	r0, sp, #40	; 0x28
 801c376:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801c37a:	f7ff ff23 	bl	801c1c4 <nema_cl_create_sized>
 801c37e:	2302      	movs	r3, #2
 801c380:	46a4      	mov	ip, r4
 801c382:	9310      	str	r3, [sp, #64]	; 0x40
 801c384:	ae0a      	add	r6, sp, #40	; 0x28
 801c386:	af14      	add	r7, sp, #80	; 0x50
 801c388:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801c38a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801c38c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801c38e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801c390:	e896 0003 	ldmia.w	r6, {r0, r1}
 801c394:	ae14      	add	r6, sp, #80	; 0x50
 801c396:	e887 0003 	stmia.w	r7, {r0, r1}
 801c39a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801c39c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c3a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801c3a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c3a6:	e897 0003 	ldmia.w	r7, {r0, r1}
 801c3aa:	e88c 0003 	stmia.w	ip, {r0, r1}
 801c3ae:	e7d3      	b.n	801c358 <nema_extend_bound_cl+0x12c>
 801c3b0:	2008      	movs	r0, #8
 801c3b2:	f7fe fbf1 	bl	801ab98 <nema_set_error>
 801c3b6:	f04f 30ff 	mov.w	r0, #4294967295
 801c3ba:	e7a9      	b.n	801c310 <nema_extend_bound_cl+0xe4>
 801c3bc:	2080      	movs	r0, #128	; 0x80
 801c3be:	f7fe fbeb 	bl	801ab98 <nema_set_error>
 801c3c2:	f04f 30ff 	mov.w	r0, #4294967295
 801c3c6:	e7a3      	b.n	801c310 <nema_extend_bound_cl+0xe4>
 801c3c8:	2010      	movs	r0, #16
 801c3ca:	f7fe fbe5 	bl	801ab98 <nema_set_error>
 801c3ce:	4620      	mov	r0, r4
 801c3d0:	f7e6 fc3c 	bl	8002c4c <nema_host_free>
 801c3d4:	f04f 30ff 	mov.w	r0, #4294967295
 801c3d8:	e79a      	b.n	801c310 <nema_extend_bound_cl+0xe4>
 801c3da:	2010      	movs	r0, #16
 801c3dc:	f7fe fbdc 	bl	801ab98 <nema_set_error>
 801c3e0:	f04f 30ff 	mov.w	r0, #4294967295
 801c3e4:	e794      	b.n	801c310 <nema_extend_bound_cl+0xe4>
 801c3e6:	bf00      	nop
 801c3e8:	20197b80 	.word	0x20197b80

0801c3ec <nema_cl_bind_circular>:
 801c3ec:	b358      	cbz	r0, 801c446 <nema_cl_bind_circular+0x5a>
 801c3ee:	68c3      	ldr	r3, [r0, #12]
 801c3f0:	f013 0207 	ands.w	r2, r3, #7
 801c3f4:	d117      	bne.n	801c426 <nema_cl_bind_circular+0x3a>
 801c3f6:	b4f0      	push	{r4, r5, r6, r7}
 801c3f8:	4c15      	ldr	r4, [pc, #84]	; (801c450 <nema_cl_bind_circular+0x64>)
 801c3fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801c3fc:	6821      	ldr	r1, [r4, #0]
 801c3fe:	2b00      	cmp	r3, #0
 801c400:	bf08      	it	eq
 801c402:	4603      	moveq	r3, r0
 801c404:	b141      	cbz	r1, 801c418 <nema_cl_bind_circular+0x2c>
 801c406:	e9d1 5004 	ldrd	r5, r0, [r1, #16]
 801c40a:	1c46      	adds	r6, r0, #1
 801c40c:	42ae      	cmp	r6, r5
 801c40e:	db0e      	blt.n	801c42e <nema_cl_bind_circular+0x42>
 801c410:	698a      	ldr	r2, [r1, #24]
 801c412:	f022 0220 	bic.w	r2, r2, #32
 801c416:	618a      	str	r2, [r1, #24]
 801c418:	699a      	ldr	r2, [r3, #24]
 801c41a:	6023      	str	r3, [r4, #0]
 801c41c:	f042 0220 	orr.w	r2, r2, #32
 801c420:	619a      	str	r2, [r3, #24]
 801c422:	bcf0      	pop	{r4, r5, r6, r7}
 801c424:	4770      	bx	lr
 801c426:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801c42a:	f7fe bbb5 	b.w	801ab98 <nema_set_error>
 801c42e:	f44f 27a0 	mov.w	r7, #327680	; 0x50000
 801c432:	688d      	ldr	r5, [r1, #8]
 801c434:	eb05 0680 	add.w	r6, r5, r0, lsl #2
 801c438:	f845 7020 	str.w	r7, [r5, r0, lsl #2]
 801c43c:	6072      	str	r2, [r6, #4]
 801c43e:	698a      	ldr	r2, [r1, #24]
 801c440:	f022 0208 	bic.w	r2, r2, #8
 801c444:	e7e5      	b.n	801c412 <nema_cl_bind_circular+0x26>
 801c446:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801c44a:	f7fe bba5 	b.w	801ab98 <nema_set_error>
 801c44e:	bf00      	nop
 801c450:	20197b80 	.word	0x20197b80

0801c454 <nema_cl_unbind>:
 801c454:	4910      	ldr	r1, [pc, #64]	; (801c498 <nema_cl_unbind+0x44>)
 801c456:	680b      	ldr	r3, [r1, #0]
 801c458:	b1d3      	cbz	r3, 801c490 <nema_cl_unbind+0x3c>
 801c45a:	b430      	push	{r4, r5}
 801c45c:	e9d3 0204 	ldrd	r0, r2, [r3, #16]
 801c460:	1c54      	adds	r4, r2, #1
 801c462:	4284      	cmp	r4, r0
 801c464:	db07      	blt.n	801c476 <nema_cl_unbind+0x22>
 801c466:	699a      	ldr	r2, [r3, #24]
 801c468:	f022 0220 	bic.w	r2, r2, #32
 801c46c:	619a      	str	r2, [r3, #24]
 801c46e:	2300      	movs	r3, #0
 801c470:	600b      	str	r3, [r1, #0]
 801c472:	bc30      	pop	{r4, r5}
 801c474:	4770      	bx	lr
 801c476:	f44f 25a0 	mov.w	r5, #327680	; 0x50000
 801c47a:	2400      	movs	r4, #0
 801c47c:	6898      	ldr	r0, [r3, #8]
 801c47e:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
 801c482:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801c486:	6054      	str	r4, [r2, #4]
 801c488:	699a      	ldr	r2, [r3, #24]
 801c48a:	f022 0208 	bic.w	r2, r2, #8
 801c48e:	e7eb      	b.n	801c468 <nema_cl_unbind+0x14>
 801c490:	2300      	movs	r3, #0
 801c492:	600b      	str	r3, [r1, #0]
 801c494:	4770      	bx	lr
 801c496:	bf00      	nop
 801c498:	20197b80 	.word	0x20197b80

0801c49c <nema_cl_submit_no_irq>:
 801c49c:	2800      	cmp	r0, #0
 801c49e:	d059      	beq.n	801c554 <nema_cl_submit_no_irq+0xb8>
 801c4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c4a2:	6983      	ldr	r3, [r0, #24]
 801c4a4:	4605      	mov	r5, r0
 801c4a6:	069c      	lsls	r4, r3, #26
 801c4a8:	d429      	bmi.n	801c4fe <nema_cl_submit_no_irq+0x62>
 801c4aa:	4604      	mov	r4, r0
 801c4ac:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 801c4b0:	e012      	b.n	801c4d8 <nema_cl_submit_no_irq+0x3c>
 801c4b2:	6923      	ldr	r3, [r4, #16]
 801c4b4:	6949      	ldr	r1, [r1, #20]
 801c4b6:	4433      	add	r3, r6
 801c4b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801c4bc:	69a3      	ldr	r3, [r4, #24]
 801c4be:	4620      	mov	r0, r4
 801c4c0:	f023 0308 	bic.w	r3, r3, #8
 801c4c4:	61a3      	str	r3, [r4, #24]
 801c4c6:	f7e6 fc46 	bl	8002d56 <nema_buffer_flush>
 801c4ca:	69a3      	ldr	r3, [r4, #24]
 801c4cc:	f043 0308 	orr.w	r3, r3, #8
 801c4d0:	61a3      	str	r3, [r4, #24]
 801c4d2:	6a24      	ldr	r4, [r4, #32]
 801c4d4:	b134      	cbz	r4, 801c4e4 <nema_cl_submit_no_irq+0x48>
 801c4d6:	69a3      	ldr	r3, [r4, #24]
 801c4d8:	0758      	lsls	r0, r3, #29
 801c4da:	68a2      	ldr	r2, [r4, #8]
 801c4dc:	6a21      	ldr	r1, [r4, #32]
 801c4de:	d4e8      	bmi.n	801c4b2 <nema_cl_submit_no_irq+0x16>
 801c4e0:	071b      	lsls	r3, r3, #28
 801c4e2:	d52a      	bpl.n	801c53a <nema_cl_submit_no_irq+0x9e>
 801c4e4:	2000      	movs	r0, #0
 801c4e6:	f7e6 fc40 	bl	8002d6a <nema_mutex_lock>
 801c4ea:	6969      	ldr	r1, [r5, #20]
 801c4ec:	4628      	mov	r0, r5
 801c4ee:	f7fe f9c3 	bl	801a878 <nema_rb_submit_cmdlist>
 801c4f2:	61e8      	str	r0, [r5, #28]
 801c4f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801c4f8:	2000      	movs	r0, #0
 801c4fa:	f7e6 bc43 	b.w	8002d84 <nema_mutex_unlock>
 801c4fe:	6903      	ldr	r3, [r0, #16]
 801c500:	6946      	ldr	r6, [r0, #20]
 801c502:	2b00      	cmp	r3, #0
 801c504:	bfb8      	it	lt
 801c506:	3303      	addlt	r3, #3
 801c508:	109b      	asrs	r3, r3, #2
 801c50a:	005c      	lsls	r4, r3, #1
 801c50c:	68c7      	ldr	r7, [r0, #12]
 801c50e:	69c0      	ldr	r0, [r0, #28]
 801c510:	42a6      	cmp	r6, r4
 801c512:	bfa4      	itt	ge
 801c514:	1b36      	subge	r6, r6, r4
 801c516:	eb07 07c3 	addge.w	r7, r7, r3, lsl #3
 801c51a:	2800      	cmp	r0, #0
 801c51c:	da15      	bge.n	801c54a <nema_cl_submit_no_irq+0xae>
 801c51e:	f04f 33ff 	mov.w	r3, #4294967295
 801c522:	61eb      	str	r3, [r5, #28]
 801c524:	4631      	mov	r1, r6
 801c526:	4638      	mov	r0, r7
 801c528:	f7fe f922 	bl	801a770 <nema_rb_submit_cmdlist2>
 801c52c:	696b      	ldr	r3, [r5, #20]
 801c52e:	61e8      	str	r0, [r5, #28]
 801c530:	42a3      	cmp	r3, r4
 801c532:	bfa8      	it	ge
 801c534:	2400      	movge	r4, #0
 801c536:	616c      	str	r4, [r5, #20]
 801c538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c53a:	4620      	mov	r0, r4
 801c53c:	f7e6 fc0b 	bl	8002d56 <nema_buffer_flush>
 801c540:	69a3      	ldr	r3, [r4, #24]
 801c542:	f043 0308 	orr.w	r3, r3, #8
 801c546:	61a3      	str	r3, [r4, #24]
 801c548:	e7cc      	b.n	801c4e4 <nema_cl_submit_no_irq+0x48>
 801c54a:	f7e6 fb6b 	bl	8002c24 <nema_wait_irq_cl>
 801c54e:	2800      	cmp	r0, #0
 801c550:	dae5      	bge.n	801c51e <nema_cl_submit_no_irq+0x82>
 801c552:	e7e7      	b.n	801c524 <nema_cl_submit_no_irq+0x88>
 801c554:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801c558:	f7fe bb1e 	b.w	801ab98 <nema_set_error>

0801c55c <nema_cl_get_space>:
 801c55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c55e:	4e2d      	ldr	r6, [pc, #180]	; (801c614 <nema_cl_get_space+0xb8>)
 801c560:	6834      	ldr	r4, [r6, #0]
 801c562:	2c00      	cmp	r4, #0
 801c564:	d039      	beq.n	801c5da <nema_cl_get_space+0x7e>
 801c566:	69a7      	ldr	r7, [r4, #24]
 801c568:	4605      	mov	r5, r0
 801c56a:	f027 0208 	bic.w	r2, r7, #8
 801c56e:	f017 0720 	ands.w	r7, r7, #32
 801c572:	61a2      	str	r2, [r4, #24]
 801c574:	6923      	ldr	r3, [r4, #16]
 801c576:	6962      	ldr	r2, [r4, #20]
 801c578:	d016      	beq.n	801c5a8 <nema_cl_get_space+0x4c>
 801c57a:	2b00      	cmp	r3, #0
 801c57c:	bfb8      	it	lt
 801c57e:	3303      	addlt	r3, #3
 801c580:	109b      	asrs	r3, r3, #2
 801c582:	005b      	lsls	r3, r3, #1
 801c584:	4293      	cmp	r3, r2
 801c586:	bfcc      	ite	gt
 801c588:	4611      	movgt	r1, r2
 801c58a:	1ad1      	suble	r1, r2, r3
 801c58c:	1a5b      	subs	r3, r3, r1
 801c58e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801c592:	1c41      	adds	r1, r0, #1
 801c594:	ebb1 0f63 	cmp.w	r1, r3, asr #1
 801c598:	da1a      	bge.n	801c5d0 <nema_cl_get_space+0x74>
 801c59a:	68a0      	ldr	r0, [r4, #8]
 801c59c:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801c5a0:	6165      	str	r5, [r4, #20]
 801c5a2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801c5a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c5a8:	1a9b      	subs	r3, r3, r2
 801c5aa:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801c5ae:	105b      	asrs	r3, r3, #1
 801c5b0:	3b01      	subs	r3, #1
 801c5b2:	4283      	cmp	r3, r0
 801c5b4:	dcf1      	bgt.n	801c59a <nema_cl_get_space+0x3e>
 801c5b6:	f7ff fe39 	bl	801c22c <nema_extend_bound_cl>
 801c5ba:	2800      	cmp	r0, #0
 801c5bc:	db27      	blt.n	801c60e <nema_cl_get_space+0xb2>
 801c5be:	6834      	ldr	r4, [r6, #0]
 801c5c0:	6962      	ldr	r2, [r4, #20]
 801c5c2:	68a0      	ldr	r0, [r4, #8]
 801c5c4:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801c5c8:	6165      	str	r5, [r4, #20]
 801c5ca:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801c5ce:	e7ea      	b.n	801c5a6 <nema_cl_get_space+0x4a>
 801c5d0:	b942      	cbnz	r2, 801c5e4 <nema_cl_get_space+0x88>
 801c5d2:	f04f 33ff 	mov.w	r3, #4294967295
 801c5d6:	61e3      	str	r3, [r4, #28]
 801c5d8:	e7df      	b.n	801c59a <nema_cl_get_space+0x3e>
 801c5da:	2080      	movs	r0, #128	; 0x80
 801c5dc:	f7fe fadc 	bl	801ab98 <nema_set_error>
 801c5e0:	4620      	mov	r0, r4
 801c5e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c5e4:	4620      	mov	r0, r4
 801c5e6:	f7ff ff59 	bl	801c49c <nema_cl_submit_no_irq>
 801c5ea:	69e0      	ldr	r0, [r4, #28]
 801c5ec:	f7fe fa10 	bl	801aa10 <nema_rb_submit_cl_id>
 801c5f0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801c5f4:	69e0      	ldr	r0, [r4, #28]
 801c5f6:	4298      	cmp	r0, r3
 801c5f8:	d1e1      	bne.n	801c5be <nema_cl_get_space+0x62>
 801c5fa:	f7e6 fb13 	bl	8002c24 <nema_wait_irq_cl>
 801c5fe:	2800      	cmp	r0, #0
 801c600:	dbdd      	blt.n	801c5be <nema_cl_get_space+0x62>
 801c602:	f04f 33ff 	mov.w	r3, #4294967295
 801c606:	61e3      	str	r3, [r4, #28]
 801c608:	6834      	ldr	r4, [r6, #0]
 801c60a:	6962      	ldr	r2, [r4, #20]
 801c60c:	e7c5      	b.n	801c59a <nema_cl_get_space+0x3e>
 801c60e:	4638      	mov	r0, r7
 801c610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c612:	bf00      	nop
 801c614:	20197b80 	.word	0x20197b80

0801c618 <nema_cl_add_cmd>:
 801c618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c61c:	4e30      	ldr	r6, [pc, #192]	; (801c6e0 <nema_cl_add_cmd+0xc8>)
 801c61e:	4607      	mov	r7, r0
 801c620:	6834      	ldr	r4, [r6, #0]
 801c622:	4688      	mov	r8, r1
 801c624:	b35c      	cbz	r4, 801c67e <nema_cl_add_cmd+0x66>
 801c626:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
 801c62a:	f025 0308 	bic.w	r3, r5, #8
 801c62e:	f015 0020 	ands.w	r0, r5, #32
 801c632:	61a3      	str	r3, [r4, #24]
 801c634:	6923      	ldr	r3, [r4, #16]
 801c636:	d016      	beq.n	801c666 <nema_cl_add_cmd+0x4e>
 801c638:	2b00      	cmp	r3, #0
 801c63a:	bfb8      	it	lt
 801c63c:	3303      	addlt	r3, #3
 801c63e:	109b      	asrs	r3, r3, #2
 801c640:	005b      	lsls	r3, r3, #1
 801c642:	4293      	cmp	r3, r2
 801c644:	bfcc      	ite	gt
 801c646:	4611      	movgt	r1, r2
 801c648:	1ad1      	suble	r1, r2, r3
 801c64a:	1a5b      	subs	r3, r3, r1
 801c64c:	2b03      	cmp	r3, #3
 801c64e:	dd2a      	ble.n	801c6a6 <nema_cl_add_cmd+0x8e>
 801c650:	1c51      	adds	r1, r2, #1
 801c652:	68a0      	ldr	r0, [r4, #8]
 801c654:	1c93      	adds	r3, r2, #2
 801c656:	f840 7022 	str.w	r7, [r0, r2, lsl #2]
 801c65a:	68a2      	ldr	r2, [r4, #8]
 801c65c:	f842 8021 	str.w	r8, [r2, r1, lsl #2]
 801c660:	6163      	str	r3, [r4, #20]
 801c662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c666:	07a9      	lsls	r1, r5, #30
 801c668:	d515      	bpl.n	801c696 <nema_cl_add_cmd+0x7e>
 801c66a:	1d11      	adds	r1, r2, #4
 801c66c:	4299      	cmp	r1, r3
 801c66e:	dbef      	blt.n	801c650 <nema_cl_add_cmd+0x38>
 801c670:	f7ff fddc 	bl	801c22c <nema_extend_bound_cl>
 801c674:	2800      	cmp	r0, #0
 801c676:	dbf4      	blt.n	801c662 <nema_cl_add_cmd+0x4a>
 801c678:	6834      	ldr	r4, [r6, #0]
 801c67a:	6962      	ldr	r2, [r4, #20]
 801c67c:	e7e8      	b.n	801c650 <nema_cl_add_cmd+0x38>
 801c67e:	4620      	mov	r0, r4
 801c680:	f7e6 fb73 	bl	8002d6a <nema_mutex_lock>
 801c684:	4638      	mov	r0, r7
 801c686:	4641      	mov	r1, r8
 801c688:	f7fe f8fa 	bl	801a880 <nema_rb_inline_cmd>
 801c68c:	4620      	mov	r0, r4
 801c68e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c692:	f7e6 bb77 	b.w	8002d84 <nema_mutex_unlock>
 801c696:	1c51      	adds	r1, r2, #1
 801c698:	4299      	cmp	r1, r3
 801c69a:	dbda      	blt.n	801c652 <nema_cl_add_cmd+0x3a>
 801c69c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c6a0:	2008      	movs	r0, #8
 801c6a2:	f7fe ba79 	b.w	801ab98 <nema_set_error>
 801c6a6:	b922      	cbnz	r2, 801c6b2 <nema_cl_add_cmd+0x9a>
 801c6a8:	f04f 33ff 	mov.w	r3, #4294967295
 801c6ac:	2101      	movs	r1, #1
 801c6ae:	61e3      	str	r3, [r4, #28]
 801c6b0:	e7cf      	b.n	801c652 <nema_cl_add_cmd+0x3a>
 801c6b2:	4620      	mov	r0, r4
 801c6b4:	f7ff fef2 	bl	801c49c <nema_cl_submit_no_irq>
 801c6b8:	69e0      	ldr	r0, [r4, #28]
 801c6ba:	f7fe f9a9 	bl	801aa10 <nema_rb_submit_cl_id>
 801c6be:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801c6c2:	69e0      	ldr	r0, [r4, #28]
 801c6c4:	4298      	cmp	r0, r3
 801c6c6:	d1d7      	bne.n	801c678 <nema_cl_add_cmd+0x60>
 801c6c8:	f7e6 faac 	bl	8002c24 <nema_wait_irq_cl>
 801c6cc:	2800      	cmp	r0, #0
 801c6ce:	dbd3      	blt.n	801c678 <nema_cl_add_cmd+0x60>
 801c6d0:	f04f 33ff 	mov.w	r3, #4294967295
 801c6d4:	61e3      	str	r3, [r4, #28]
 801c6d6:	6834      	ldr	r4, [r6, #0]
 801c6d8:	6962      	ldr	r2, [r4, #20]
 801c6da:	1c51      	adds	r1, r2, #1
 801c6dc:	e7b9      	b.n	801c652 <nema_cl_add_cmd+0x3a>
 801c6de:	bf00      	nop
 801c6e0:	20197b80 	.word	0x20197b80

0801c6e4 <nema_cl_submit>:
 801c6e4:	2800      	cmp	r0, #0
 801c6e6:	d05c      	beq.n	801c7a2 <nema_cl_submit+0xbe>
 801c6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c6ea:	6944      	ldr	r4, [r0, #20]
 801c6ec:	4605      	mov	r5, r0
 801c6ee:	b91c      	cbnz	r4, 801c6f8 <nema_cl_submit+0x14>
 801c6f0:	f04f 33ff 	mov.w	r3, #4294967295
 801c6f4:	61eb      	str	r3, [r5, #28]
 801c6f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c6f8:	6983      	ldr	r3, [r0, #24]
 801c6fa:	069e      	lsls	r6, r3, #26
 801c6fc:	d527      	bpl.n	801c74e <nema_cl_submit+0x6a>
 801c6fe:	6903      	ldr	r3, [r0, #16]
 801c700:	68c7      	ldr	r7, [r0, #12]
 801c702:	2b00      	cmp	r3, #0
 801c704:	bfb8      	it	lt
 801c706:	3303      	addlt	r3, #3
 801c708:	109b      	asrs	r3, r3, #2
 801c70a:	005e      	lsls	r6, r3, #1
 801c70c:	69c0      	ldr	r0, [r0, #28]
 801c70e:	42b4      	cmp	r4, r6
 801c710:	bfa4      	itt	ge
 801c712:	1ba4      	subge	r4, r4, r6
 801c714:	eb07 07c3 	addge.w	r7, r7, r3, lsl #3
 801c718:	2800      	cmp	r0, #0
 801c71a:	da46      	bge.n	801c7aa <nema_cl_submit+0xc6>
 801c71c:	f04f 33ff 	mov.w	r3, #4294967295
 801c720:	61eb      	str	r3, [r5, #28]
 801c722:	4621      	mov	r1, r4
 801c724:	4638      	mov	r0, r7
 801c726:	f7fe f823 	bl	801a770 <nema_rb_submit_cmdlist2>
 801c72a:	696b      	ldr	r3, [r5, #20]
 801c72c:	61e8      	str	r0, [r5, #28]
 801c72e:	429e      	cmp	r6, r3
 801c730:	bfd8      	it	le
 801c732:	2600      	movle	r6, #0
 801c734:	616e      	str	r6, [r5, #20]
 801c736:	f7fe f96b 	bl	801aa10 <nema_rb_submit_cl_id>
 801c73a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801c73e:	69e8      	ldr	r0, [r5, #28]
 801c740:	4298      	cmp	r0, r3
 801c742:	d1d8      	bne.n	801c6f6 <nema_cl_submit+0x12>
 801c744:	f7e6 fa6e 	bl	8002c24 <nema_wait_irq_cl>
 801c748:	2800      	cmp	r0, #0
 801c74a:	dad1      	bge.n	801c6f0 <nema_cl_submit+0xc>
 801c74c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c74e:	4604      	mov	r4, r0
 801c750:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 801c754:	e012      	b.n	801c77c <nema_cl_submit+0x98>
 801c756:	6923      	ldr	r3, [r4, #16]
 801c758:	6949      	ldr	r1, [r1, #20]
 801c75a:	4433      	add	r3, r6
 801c75c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801c760:	69a3      	ldr	r3, [r4, #24]
 801c762:	4620      	mov	r0, r4
 801c764:	f023 0308 	bic.w	r3, r3, #8
 801c768:	61a3      	str	r3, [r4, #24]
 801c76a:	f7e6 faf4 	bl	8002d56 <nema_buffer_flush>
 801c76e:	69a3      	ldr	r3, [r4, #24]
 801c770:	f043 0308 	orr.w	r3, r3, #8
 801c774:	61a3      	str	r3, [r4, #24]
 801c776:	6a24      	ldr	r4, [r4, #32]
 801c778:	b134      	cbz	r4, 801c788 <nema_cl_submit+0xa4>
 801c77a:	69a3      	ldr	r3, [r4, #24]
 801c77c:	0758      	lsls	r0, r3, #29
 801c77e:	68a2      	ldr	r2, [r4, #8]
 801c780:	6a21      	ldr	r1, [r4, #32]
 801c782:	d4e8      	bmi.n	801c756 <nema_cl_submit+0x72>
 801c784:	071b      	lsls	r3, r3, #28
 801c786:	d515      	bpl.n	801c7b4 <nema_cl_submit+0xd0>
 801c788:	2000      	movs	r0, #0
 801c78a:	f7e6 faee 	bl	8002d6a <nema_mutex_lock>
 801c78e:	6969      	ldr	r1, [r5, #20]
 801c790:	4628      	mov	r0, r5
 801c792:	f7fe f871 	bl	801a878 <nema_rb_submit_cmdlist>
 801c796:	61e8      	str	r0, [r5, #28]
 801c798:	2000      	movs	r0, #0
 801c79a:	f7e6 faf3 	bl	8002d84 <nema_mutex_unlock>
 801c79e:	69e8      	ldr	r0, [r5, #28]
 801c7a0:	e7c9      	b.n	801c736 <nema_cl_submit+0x52>
 801c7a2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801c7a6:	f7fe b9f7 	b.w	801ab98 <nema_set_error>
 801c7aa:	f7e6 fa3b 	bl	8002c24 <nema_wait_irq_cl>
 801c7ae:	2800      	cmp	r0, #0
 801c7b0:	dab4      	bge.n	801c71c <nema_cl_submit+0x38>
 801c7b2:	e7b6      	b.n	801c722 <nema_cl_submit+0x3e>
 801c7b4:	4620      	mov	r0, r4
 801c7b6:	f7e6 face 	bl	8002d56 <nema_buffer_flush>
 801c7ba:	69a3      	ldr	r3, [r4, #24]
 801c7bc:	f043 0308 	orr.w	r3, r3, #8
 801c7c0:	61a3      	str	r3, [r4, #24]
 801c7c2:	e7e1      	b.n	801c788 <nema_cl_submit+0xa4>

0801c7c4 <nema_cl_wait>:
 801c7c4:	b510      	push	{r4, lr}
 801c7c6:	b170      	cbz	r0, 801c7e6 <nema_cl_wait+0x22>
 801c7c8:	4604      	mov	r4, r0
 801c7ca:	69c0      	ldr	r0, [r0, #28]
 801c7cc:	2800      	cmp	r0, #0
 801c7ce:	da04      	bge.n	801c7da <nema_cl_wait+0x16>
 801c7d0:	f04f 33ff 	mov.w	r3, #4294967295
 801c7d4:	61e3      	str	r3, [r4, #28]
 801c7d6:	2000      	movs	r0, #0
 801c7d8:	bd10      	pop	{r4, pc}
 801c7da:	f7e6 fa23 	bl	8002c24 <nema_wait_irq_cl>
 801c7de:	2800      	cmp	r0, #0
 801c7e0:	daf6      	bge.n	801c7d0 <nema_cl_wait+0xc>
 801c7e2:	2000      	movs	r0, #0
 801c7e4:	bd10      	pop	{r4, pc}
 801c7e6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801c7ea:	f7fe f9d5 	bl	801ab98 <nema_set_error>
 801c7ee:	f04f 30ff 	mov.w	r0, #4294967295
 801c7f2:	bd10      	pop	{r4, pc}

0801c7f4 <nema_blender_init>:
 801c7f4:	b530      	push	{r4, r5, lr}
 801c7f6:	b085      	sub	sp, #20
 801c7f8:	466d      	mov	r5, sp
 801c7fa:	2418      	movs	r4, #24
 801c7fc:	4b11      	ldr	r3, [pc, #68]	; (801c844 <nema_blender_init+0x50>)
 801c7fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c800:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801c804:	2101      	movs	r1, #1
 801c806:	4622      	mov	r2, r4
 801c808:	4628      	mov	r0, r5
 801c80a:	440c      	add	r4, r1
 801c80c:	f7ff f974 	bl	801baf8 <nema_load_frag_shader>
 801c810:	2c1f      	cmp	r4, #31
 801c812:	d1f7      	bne.n	801c804 <nema_blender_init+0x10>
 801c814:	4622      	mov	r2, r4
 801c816:	2101      	movs	r1, #1
 801c818:	a802      	add	r0, sp, #8
 801c81a:	f7ff f96d 	bl	801baf8 <nema_load_frag_shader>
 801c81e:	f7ff f829 	bl	801b874 <nema_readHwConfig>
 801c822:	f000 5080 	and.w	r0, r0, #268435456	; 0x10000000
 801c826:	2800      	cmp	r0, #0
 801c828:	bf14      	ite	ne
 801c82a:	2201      	movne	r2, #1
 801c82c:	2200      	moveq	r2, #0
 801c82e:	4b06      	ldr	r3, [pc, #24]	; (801c848 <nema_blender_init+0x54>)
 801c830:	701a      	strb	r2, [r3, #0]
 801c832:	d005      	beq.n	801c840 <nema_blender_init+0x4c>
 801c834:	2200      	movs	r2, #0
 801c836:	4b05      	ldr	r3, [pc, #20]	; (801c84c <nema_blender_init+0x58>)
 801c838:	2001      	movs	r0, #1
 801c83a:	601a      	str	r2, [r3, #0]
 801c83c:	f7ff f97c 	bl	801bb38 <nema_set_rop_blend_mode>
 801c840:	b005      	add	sp, #20
 801c842:	bd30      	pop	{r4, r5, pc}
 801c844:	08029718 	.word	0x08029718
 801c848:	20197b85 	.word	0x20197b85
 801c84c:	20000064 	.word	0x20000064

0801c850 <nema_set_blend>:
 801c850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c854:	4ca5      	ldr	r4, [pc, #660]	; (801caec <nema_set_blend+0x29c>)
 801c856:	4683      	mov	fp, r0
 801c858:	7820      	ldrb	r0, [r4, #0]
 801c85a:	b0a7      	sub	sp, #156	; 0x9c
 801c85c:	9102      	str	r1, [sp, #8]
 801c85e:	9200      	str	r2, [sp, #0]
 801c860:	2800      	cmp	r0, #0
 801c862:	f040 8233 	bne.w	801cccc <nema_set_blend+0x47c>
 801c866:	469a      	mov	sl, r3
 801c868:	465c      	mov	r4, fp
 801c86a:	ea4f 535b 	mov.w	r3, fp, lsr #21
 801c86e:	055b      	lsls	r3, r3, #21
 801c870:	930e      	str	r3, [sp, #56]	; 0x38
 801c872:	f40b 0300 	and.w	r3, fp, #8388608	; 0x800000
 801c876:	930c      	str	r3, [sp, #48]	; 0x30
 801c878:	f40b 0380 	and.w	r3, fp, #4194304	; 0x400000
 801c87c:	f00b 010f 	and.w	r1, fp, #15
 801c880:	930d      	str	r3, [sp, #52]	; 0x34
 801c882:	f40b 1300 	and.w	r3, fp, #2097152	; 0x200000
 801c886:	930b      	str	r3, [sp, #44]	; 0x2c
 801c888:	9101      	str	r1, [sp, #4]
 801c88a:	b2d2      	uxtb	r2, r2
 801c88c:	fa5f f38a 	uxtb.w	r3, sl
 801c890:	f3cb 2903 	ubfx	r9, fp, #8, #4
 801c894:	f00b 7100 	and.w	r1, fp, #33554432	; 0x2000000
 801c898:	f3cb 6840 	ubfx	r8, fp, #25, #1
 801c89c:	9d02      	ldr	r5, [sp, #8]
 801c89e:	b2e8      	uxtb	r0, r5
 801c8a0:	2804      	cmp	r0, #4
 801c8a2:	4628      	mov	r0, r5
 801c8a4:	bf28      	it	cs
 801c8a6:	2000      	movcs	r0, #0
 801c8a8:	2a04      	cmp	r2, #4
 801c8aa:	9a00      	ldr	r2, [sp, #0]
 801c8ac:	bf28      	it	cs
 801c8ae:	f04f 32ff 	movcs.w	r2, #4294967295
 801c8b2:	2b04      	cmp	r3, #4
 801c8b4:	9002      	str	r0, [sp, #8]
 801c8b6:	9200      	str	r2, [sp, #0]
 801c8b8:	bf28      	it	cs
 801c8ba:	4682      	movcs	sl, r0
 801c8bc:	4602      	mov	r2, r0
 801c8be:	bf34      	ite	cc
 801c8c0:	4650      	movcc	r0, sl
 801c8c2:	2002      	movcs	r0, #2
 801c8c4:	4b8a      	ldr	r3, [pc, #552]	; (801caf0 <nema_set_blend+0x2a0>)
 801c8c6:	9010      	str	r0, [sp, #64]	; 0x40
 801c8c8:	781b      	ldrb	r3, [r3, #0]
 801c8ca:	b14b      	cbz	r3, 801c8e0 <nema_set_blend+0x90>
 801c8cc:	f01b 7380 	ands.w	r3, fp, #16777216	; 0x1000000
 801c8d0:	9303      	str	r3, [sp, #12]
 801c8d2:	d102      	bne.n	801c8da <nema_set_blend+0x8a>
 801c8d4:	4552      	cmp	r2, sl
 801c8d6:	f000 830c 	beq.w	801cef2 <nema_set_blend+0x6a2>
 801c8da:	2001      	movs	r0, #1
 801c8dc:	f7ff f92c 	bl	801bb38 <nema_set_rop_blend_mode>
 801c8e0:	2c00      	cmp	r4, #0
 801c8e2:	bfac      	ite	ge
 801c8e4:	4642      	movge	r2, r8
 801c8e6:	2201      	movlt	r2, #1
 801c8e8:	4b82      	ldr	r3, [pc, #520]	; (801caf4 <nema_set_blend+0x2a4>)
 801c8ea:	f1bb 0f01 	cmp.w	fp, #1
 801c8ee:	789b      	ldrb	r3, [r3, #2]
 801c8f0:	9207      	str	r2, [sp, #28]
 801c8f2:	9305      	str	r3, [sp, #20]
 801c8f4:	f000 80e0 	beq.w	801cab8 <nema_set_blend+0x268>
 801c8f8:	f00b 4380 	and.w	r3, fp, #1073741824	; 0x40000000
 801c8fc:	9315      	str	r3, [sp, #84]	; 0x54
 801c8fe:	f3cb 7380 	ubfx	r3, fp, #30, #1
 801c902:	9306      	str	r3, [sp, #24]
 801c904:	f00b 5300 	and.w	r3, fp, #536870912	; 0x20000000
 801c908:	9309      	str	r3, [sp, #36]	; 0x24
 801c90a:	9b01      	ldr	r3, [sp, #4]
 801c90c:	f00b 5280 	and.w	r2, fp, #268435456	; 0x10000000
 801c910:	2b05      	cmp	r3, #5
 801c912:	f240 80df 	bls.w	801cad4 <nema_set_blend+0x284>
 801c916:	2301      	movs	r3, #1
 801c918:	930a      	str	r3, [sp, #40]	; 0x28
 801c91a:	9304      	str	r3, [sp, #16]
 801c91c:	2303      	movs	r3, #3
 801c91e:	4976      	ldr	r1, [pc, #472]	; (801caf8 <nema_set_blend+0x2a8>)
 801c920:	9303      	str	r3, [sp, #12]
 801c922:	9108      	str	r1, [sp, #32]
 801c924:	4d75      	ldr	r5, [pc, #468]	; (801cafc <nema_set_blend+0x2ac>)
 801c926:	2a00      	cmp	r2, #0
 801c928:	4b75      	ldr	r3, [pc, #468]	; (801cb00 <nema_set_blend+0x2b0>)
 801c92a:	bf18      	it	ne
 801c92c:	462b      	movne	r3, r5
 801c92e:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 801c932:	f105 0502 	add.w	r5, r5, #2
 801c936:	9312      	str	r3, [sp, #72]	; 0x48
 801c938:	4b72      	ldr	r3, [pc, #456]	; (801cb04 <nema_set_blend+0x2b4>)
 801c93a:	bf08      	it	eq
 801c93c:	462b      	moveq	r3, r5
 801c93e:	f8df e20c 	ldr.w	lr, [pc, #524]	; 801cb4c <nema_set_blend+0x2fc>
 801c942:	f8df c20c 	ldr.w	ip, [pc, #524]	; 801cb50 <nema_set_blend+0x300>
 801c946:	9311      	str	r3, [sp, #68]	; 0x44
 801c948:	bf14      	ite	ne
 801c94a:	4673      	movne	r3, lr
 801c94c:	4663      	moveq	r3, ip
 801c94e:	4f6e      	ldr	r7, [pc, #440]	; (801cb08 <nema_set_blend+0x2b8>)
 801c950:	9314      	str	r3, [sp, #80]	; 0x50
 801c952:	4b6e      	ldr	r3, [pc, #440]	; (801cb0c <nema_set_blend+0x2bc>)
 801c954:	bf18      	it	ne
 801c956:	463b      	movne	r3, r7
 801c958:	f5a5 25c8 	sub.w	r5, r5, #409600	; 0x64000
 801c95c:	9313      	str	r3, [sp, #76]	; 0x4c
 801c95e:	4b6c      	ldr	r3, [pc, #432]	; (801cb10 <nema_set_blend+0x2c0>)
 801c960:	f1a5 0542 	sub.w	r5, r5, #66	; 0x42
 801c964:	496b      	ldr	r1, [pc, #428]	; (801cb14 <nema_set_blend+0x2c4>)
 801c966:	bf18      	it	ne
 801c968:	4619      	movne	r1, r3
 801c96a:	f1a3 033e 	sub.w	r3, r3, #62	; 0x3e
 801c96e:	bf18      	it	ne
 801c970:	462b      	movne	r3, r5
 801c972:	4e69      	ldr	r6, [pc, #420]	; (801cb18 <nema_set_blend+0x2c8>)
 801c974:	4f69      	ldr	r7, [pc, #420]	; (801cb1c <nema_set_blend+0x2cc>)
 801c976:	461d      	mov	r5, r3
 801c978:	4b69      	ldr	r3, [pc, #420]	; (801cb20 <nema_set_blend+0x2d0>)
 801c97a:	486a      	ldr	r0, [pc, #424]	; (801cb24 <nema_set_blend+0x2d4>)
 801c97c:	bf18      	it	ne
 801c97e:	4630      	movne	r0, r6
 801c980:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 801c984:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 801cb54 <nema_set_blend+0x304>
 801c988:	f506 3650 	add.w	r6, r6, #212992	; 0x34000
 801c98c:	bf04      	itt	eq
 801c98e:	46bc      	moveq	ip, r7
 801c990:	461e      	moveq	r6, r3
 801c992:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 801c996:	f1a3 0340 	sub.w	r3, r3, #64	; 0x40
 801c99a:	f1a7 0742 	sub.w	r7, r7, #66	; 0x42
 801c99e:	bf08      	it	eq
 801c9a0:	461f      	moveq	r7, r3
 801c9a2:	4c61      	ldr	r4, [pc, #388]	; (801cb28 <nema_set_blend+0x2d8>)
 801c9a4:	f8df e1b0 	ldr.w	lr, [pc, #432]	; 801cb58 <nema_set_blend+0x308>
 801c9a8:	4a60      	ldr	r2, [pc, #384]	; (801cb2c <nema_set_blend+0x2dc>)
 801c9aa:	bf18      	it	ne
 801c9ac:	4622      	movne	r2, r4
 801c9ae:	f504 3450 	add.w	r4, r4, #212992	; 0x34000
 801c9b2:	bf08      	it	eq
 801c9b4:	4674      	moveq	r4, lr
 801c9b6:	f8dd e018 	ldr.w	lr, [sp, #24]
 801c9ba:	f1b8 0f00 	cmp.w	r8, #0
 801c9be:	f040 8109 	bne.w	801cbd4 <nema_set_blend+0x384>
 801c9c2:	9b07      	ldr	r3, [sp, #28]
 801c9c4:	2b00      	cmp	r3, #0
 801c9c6:	bf0c      	ite	eq
 801c9c8:	2300      	moveq	r3, #0
 801c9ca:	f44f 1300 	movne.w	r3, #2097152	; 0x200000
 801c9ce:	930f      	str	r3, [sp, #60]	; 0x3c
 801c9d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c9d2:	2b00      	cmp	r3, #0
 801c9d4:	f040 8105 	bne.w	801cbe2 <nema_set_blend+0x392>
 801c9d8:	f01b 6f80 	tst.w	fp, #67108864	; 0x4000000
 801c9dc:	f000 81b4 	beq.w	801cd48 <nema_set_blend+0x4f8>
 801c9e0:	4684      	mov	ip, r0
 801c9e2:	460e      	mov	r6, r1
 801c9e4:	4614      	mov	r4, r2
 801c9e6:	462f      	mov	r7, r5
 801c9e8:	f04f 0804 	mov.w	r8, #4
 801c9ec:	2200      	movs	r2, #0
 801c9ee:	4850      	ldr	r0, [pc, #320]	; (801cb30 <nema_set_blend+0x2e0>)
 801c9f0:	f00b 53c0 	and.w	r3, fp, #402653184	; 0x18000000
 801c9f4:	4293      	cmp	r3, r2
 801c9f6:	f850 302a 	ldr.w	r3, [r0, sl, lsl #2]
 801c9fa:	bf18      	it	ne
 801c9fc:	463e      	movne	r6, r7
 801c9fe:	9309      	str	r3, [sp, #36]	; 0x24
 801ca00:	9b05      	ldr	r3, [sp, #20]
 801ca02:	bf16      	itet	ne
 801ca04:	46a4      	movne	ip, r4
 801ca06:	270e      	moveq	r7, #14
 801ca08:	270c      	movne	r7, #12
 801ca0a:	9216      	str	r2, [sp, #88]	; 0x58
 801ca0c:	2b00      	cmp	r3, #0
 801ca0e:	f000 80eb 	beq.w	801cbe8 <nema_set_blend+0x398>
 801ca12:	4b48      	ldr	r3, [pc, #288]	; (801cb34 <nema_set_blend+0x2e4>)
 801ca14:	4948      	ldr	r1, [pc, #288]	; (801cb38 <nema_set_blend+0x2e8>)
 801ca16:	9800      	ldr	r0, [sp, #0]
 801ca18:	e9cd 1316 	strd	r1, r3, [sp, #88]	; 0x58
 801ca1c:	1c43      	adds	r3, r0, #1
 801ca1e:	f000 8257 	beq.w	801ced0 <nema_set_blend+0x680>
 801ca22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801ca26:	4b45      	ldr	r3, [pc, #276]	; (801cb3c <nema_set_blend+0x2ec>)
 801ca28:	9204      	str	r2, [sp, #16]
 801ca2a:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
 801ca2e:	e9cd 3118 	strd	r3, r1, [sp, #96]	; 0x60
 801ca32:	2203      	movs	r2, #3
 801ca34:	2102      	movs	r1, #2
 801ca36:	4c42      	ldr	r4, [pc, #264]	; (801cb40 <nema_set_blend+0x2f0>)
 801ca38:	f1b9 0f01 	cmp.w	r9, #1
 801ca3c:	f240 8110 	bls.w	801cc60 <nema_set_blend+0x410>
 801ca40:	9b01      	ldr	r3, [sp, #4]
 801ca42:	2b05      	cmp	r3, #5
 801ca44:	d803      	bhi.n	801ca4e <nema_set_blend+0x1fe>
 801ca46:	f01b 5f70 	tst.w	fp, #1006632960	; 0x3c000000
 801ca4a:	f000 8087 	beq.w	801cb5c <nema_set_blend+0x30c>
 801ca4e:	9b03      	ldr	r3, [sp, #12]
 801ca50:	b933      	cbnz	r3, 801ca60 <nema_set_blend+0x210>
 801ca52:	f1b9 0f00 	cmp.w	r9, #0
 801ca56:	d103      	bne.n	801ca60 <nema_set_blend+0x210>
 801ca58:	9b07      	ldr	r3, [sp, #28]
 801ca5a:	2b00      	cmp	r3, #0
 801ca5c:	f000 81ca 	beq.w	801cdf4 <nema_set_blend+0x5a4>
 801ca60:	f1b8 0f1d 	cmp.w	r8, #29
 801ca64:	f000 8150 	beq.w	801cd08 <nema_set_blend+0x4b8>
 801ca68:	4b36      	ldr	r3, [pc, #216]	; (801cb44 <nema_set_blend+0x2f4>)
 801ca6a:	a826      	add	r0, sp, #152	; 0x98
 801ca6c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801ca70:	ea43 13ca 	orr.w	r3, r3, sl, lsl #7
 801ca74:	9803      	ldr	r0, [sp, #12]
 801ca76:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
 801ca7a:	4303      	orrs	r3, r0
 801ca7c:	e941 3c10 	strd	r3, ip, [r1, #-64]	; 0x40
 801ca80:	1c55      	adds	r5, r2, #1
 801ca82:	f1b9 0f00 	cmp.w	r9, #0
 801ca86:	f040 8150 	bne.w	801cd2a <nema_set_blend+0x4da>
 801ca8a:	46ce      	mov	lr, r9
 801ca8c:	4b2d      	ldr	r3, [pc, #180]	; (801cb44 <nema_set_blend+0x2f4>)
 801ca8e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801ca92:	f8cd 9018 	str.w	r9, [sp, #24]
 801ca96:	9308      	str	r3, [sp, #32]
 801ca98:	9b07      	ldr	r3, [sp, #28]
 801ca9a:	2b00      	cmp	r3, #0
 801ca9c:	d163      	bne.n	801cb66 <nema_set_blend+0x316>
 801ca9e:	4b2a      	ldr	r3, [pc, #168]	; (801cb48 <nema_set_blend+0x2f8>)
 801caa0:	f8dd a008 	ldr.w	sl, [sp, #8]
 801caa4:	9308      	str	r3, [sp, #32]
 801caa6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801caaa:	9f01      	ldr	r7, [sp, #4]
 801caac:	e061      	b.n	801cb72 <nema_set_blend+0x322>
 801caae:	f04f 0900 	mov.w	r9, #0
 801cab2:	46c8      	mov	r8, r9
 801cab4:	f8cd 901c 	str.w	r9, [sp, #28]
 801cab8:	2b00      	cmp	r3, #0
 801caba:	f000 8153 	beq.w	801cd64 <nema_set_blend+0x514>
 801cabe:	9b01      	ldr	r3, [sp, #4]
 801cac0:	2b05      	cmp	r3, #5
 801cac2:	f200 8169 	bhi.w	801cd98 <nema_set_blend+0x548>
 801cac6:	2300      	movs	r3, #0
 801cac8:	f04f 0b01 	mov.w	fp, #1
 801cacc:	461a      	mov	r2, r3
 801cace:	9306      	str	r3, [sp, #24]
 801cad0:	9309      	str	r3, [sp, #36]	; 0x24
 801cad2:	9315      	str	r3, [sp, #84]	; 0x54
 801cad4:	9b07      	ldr	r3, [sp, #28]
 801cad6:	2b00      	cmp	r3, #0
 801cad8:	f000 8200 	beq.w	801cedc <nema_set_blend+0x68c>
 801cadc:	930a      	str	r3, [sp, #40]	; 0x28
 801cade:	4b06      	ldr	r3, [pc, #24]	; (801caf8 <nema_set_blend+0x2a8>)
 801cae0:	2001      	movs	r0, #1
 801cae2:	9308      	str	r3, [sp, #32]
 801cae4:	2303      	movs	r3, #3
 801cae6:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801caea:	e71b      	b.n	801c924 <nema_set_blend+0xd4>
 801caec:	20197b84 	.word	0x20197b84
 801caf0:	20197b85 	.word	0x20197b85
 801caf4:	20197d94 	.word	0x20197d94
 801caf8:	080c0003 	.word	0x080c0003
 801cafc:	000761c5 	.word	0x000761c5
 801cb00:	000761c7 	.word	0x000761c7
 801cb04:	800761c5 	.word	0x800761c5
 801cb08:	80076185 	.word	0x80076185
 801cb0c:	80076187 	.word	0x80076187
 801cb10:	800121c5 	.word	0x800121c5
 801cb14:	800121c7 	.word	0x800121c7
 801cb18:	000121c5 	.word	0x000121c5
 801cb1c:	000461c7 	.word	0x000461c7
 801cb20:	800461c7 	.word	0x800461c7
 801cb24:	000121c7 	.word	0x000121c7
 801cb28:	00012185 	.word	0x00012185
 801cb2c:	00012187 	.word	0x00012187
 801cb30:	0802ab34 	.word	0x0802ab34
 801cb34:	02009408 	.word	0x02009408
 801cb38:	00f40182 	.word	0x00f40182
 801cb3c:	000c100b 	.word	0x000c100b
 801cb40:	1000fc00 	.word	0x1000fc00
 801cb44:	080c0000 	.word	0x080c0000
 801cb48:	080c0002 	.word	0x080c0002
 801cb4c:	00076185 	.word	0x00076185
 801cb50:	00076187 	.word	0x00076187
 801cb54:	000461c5 	.word	0x000461c5
 801cb58:	00046187 	.word	0x00046187
 801cb5c:	4615      	mov	r5, r2
 801cb5e:	460a      	mov	r2, r1
 801cb60:	f1b9 0f00 	cmp.w	r9, #0
 801cb64:	d098      	beq.n	801ca98 <nema_set_blend+0x248>
 801cb66:	9b06      	ldr	r3, [sp, #24]
 801cb68:	2b00      	cmp	r3, #0
 801cb6a:	f000 8202 	beq.w	801cf72 <nema_set_blend+0x722>
 801cb6e:	2600      	movs	r6, #0
 801cb70:	9f01      	ldr	r7, [sp, #4]
 801cb72:	48c1      	ldr	r0, [pc, #772]	; (801ce78 <nema_set_blend+0x628>)
 801cb74:	49c1      	ldr	r1, [pc, #772]	; (801ce7c <nema_set_blend+0x62c>)
 801cb76:	f850 3027 	ldr.w	r3, [r0, r7, lsl #2]
 801cb7a:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 801cb7e:	015b      	lsls	r3, r3, #5
 801cb80:	ea43 3387 	orr.w	r3, r3, r7, lsl #14
 801cb84:	9f08      	ldr	r7, [sp, #32]
 801cb86:	ea47 5e0e 	orr.w	lr, r7, lr, lsl #20
 801cb8a:	4fbd      	ldr	r7, [pc, #756]	; (801ce80 <nema_set_blend+0x630>)
 801cb8c:	ea4e 1eca 	orr.w	lr, lr, sl, lsl #7
 801cb90:	431f      	orrs	r7, r3
 801cb92:	ab26      	add	r3, sp, #152	; 0x98
 801cb94:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801cb98:	4337      	orrs	r7, r6
 801cb9a:	e942 e710 	strd	lr, r7, [r2, #-64]	; 0x40
 801cb9e:	2e00      	cmp	r6, #0
 801cba0:	f000 813f 	beq.w	801ce22 <nema_set_blend+0x5d2>
 801cba4:	9804      	ldr	r0, [sp, #16]
 801cba6:	f7fe fead 	bl	801b904 <nema_matmul_bypass>
 801cbaa:	4629      	mov	r1, r5
 801cbac:	2200      	movs	r2, #0
 801cbae:	a816      	add	r0, sp, #88	; 0x58
 801cbb0:	f7fe ffa2 	bl	801baf8 <nema_load_frag_shader>
 801cbb4:	4bb3      	ldr	r3, [pc, #716]	; (801ce84 <nema_set_blend+0x634>)
 801cbb6:	f1c5 0520 	rsb	r5, r5, #32
 801cbba:	6818      	ldr	r0, [r3, #0]
 801cbbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cbbe:	ea43 0800 	orr.w	r8, r3, r0
 801cbc2:	ea48 0005 	orr.w	r0, r8, r5
 801cbc6:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
 801cbca:	f7fe ffaf 	bl	801bb2c <nema_set_frag_ptr>
 801cbce:	b027      	add	sp, #156	; 0x9c
 801cbd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbd4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801cbd8:	930f      	str	r3, [sp, #60]	; 0x3c
 801cbda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cbdc:	2b00      	cmp	r3, #0
 801cbde:	f43f aefb 	beq.w	801c9d8 <nema_set_blend+0x188>
 801cbe2:	f04f 0811 	mov.w	r8, #17
 801cbe6:	e701      	b.n	801c9ec <nema_set_blend+0x19c>
 801cbe8:	9b00      	ldr	r3, [sp, #0]
 801cbea:	1c5a      	adds	r2, r3, #1
 801cbec:	f000 8136 	beq.w	801ce5c <nema_set_blend+0x60c>
 801cbf0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801cbf4:	9a05      	ldr	r2, [sp, #20]
 801cbf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801cbfa:	9204      	str	r2, [sp, #16]
 801cbfc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cbfe:	2a00      	cmp	r2, #0
 801cc00:	f000 80a9 	beq.w	801cd56 <nema_set_blend+0x506>
 801cc04:	f44f 2440 	mov.w	r4, #786432	; 0xc0000
 801cc08:	499f      	ldr	r1, [pc, #636]	; (801ce88 <nema_set_blend+0x638>)
 801cc0a:	4aa0      	ldr	r2, [pc, #640]	; (801ce8c <nema_set_blend+0x63c>)
 801cc0c:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 801cc10:	9219      	str	r2, [sp, #100]	; 0x64
 801cc12:	2204      	movs	r2, #4
 801cc14:	9116      	str	r1, [sp, #88]	; 0x58
 801cc16:	9205      	str	r2, [sp, #20]
 801cc18:	2102      	movs	r1, #2
 801cc1a:	2203      	movs	r2, #3
 801cc1c:	e9cd 5417 	strd	r5, r4, [sp, #92]	; 0x5c
 801cc20:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801cc22:	2c00      	cmp	r4, #0
 801cc24:	d04f      	beq.n	801ccc6 <nema_set_blend+0x476>
 801cc26:	9c00      	ldr	r4, [sp, #0]
 801cc28:	f1b4 3fff 	cmp.w	r4, #4294967295
 801cc2c:	d04b      	beq.n	801ccc6 <nema_set_blend+0x476>
 801cc2e:	f241 050b 	movw	r5, #4107	; 0x100b
 801cc32:	2300      	movs	r3, #0
 801cc34:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 801cc38:	a826      	add	r0, sp, #152	; 0x98
 801cc3a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801cc3e:	9910      	ldr	r1, [sp, #64]	; 0x40
 801cc40:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 801cc44:	ea45 11c1 	orr.w	r1, r5, r1, lsl #7
 801cc48:	f1b9 0f01 	cmp.w	r9, #1
 801cc4c:	f840 1c40 	str.w	r1, [r0, #-64]
 801cc50:	f444 4420 	orr.w	r4, r4, #40960	; 0xa000
 801cc54:	4611      	mov	r1, r2
 801cc56:	f840 3c3c 	str.w	r3, [r0, #-60]
 801cc5a:	9a05      	ldr	r2, [sp, #20]
 801cc5c:	f63f aef0 	bhi.w	801ca40 <nema_set_blend+0x1f0>
 801cc60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cc62:	2b00      	cmp	r3, #0
 801cc64:	f47f aeec 	bne.w	801ca40 <nema_set_blend+0x1f0>
 801cc68:	9b00      	ldr	r3, [sp, #0]
 801cc6a:	3301      	adds	r3, #1
 801cc6c:	f47f aee8 	bne.w	801ca40 <nema_set_blend+0x1f0>
 801cc70:	9b02      	ldr	r3, [sp, #8]
 801cc72:	4553      	cmp	r3, sl
 801cc74:	f47f aee4 	bne.w	801ca40 <nema_set_blend+0x1f0>
 801cc78:	f1b9 0f00 	cmp.w	r9, #0
 801cc7c:	bf15      	itete	ne
 801cc7e:	f44f 6600 	movne.w	r6, #2048	; 0x800
 801cc82:	f44f 5600 	moveq.w	r6, #8192	; 0x2000
 801cc86:	f44f 1500 	movne.w	r5, #2097152	; 0x200000
 801cc8a:	f44f 0500 	moveq.w	r5, #8388608	; 0x800000
 801cc8e:	9f01      	ldr	r7, [sp, #4]
 801cc90:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 801ce78 <nema_set_blend+0x628>
 801cc94:	4879      	ldr	r0, [pc, #484]	; (801ce7c <nema_set_blend+0x62c>)
 801cc96:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 801cc9a:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
 801cc9e:	015b      	lsls	r3, r3, #5
 801cca0:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 801cca4:	f043 430a 	orr.w	r3, r3, #2315255808	; 0x8a000000
 801cca8:	f043 0306 	orr.w	r3, r3, #6
 801ccac:	4333      	orrs	r3, r6
 801ccae:	432b      	orrs	r3, r5
 801ccb0:	4877      	ldr	r0, [pc, #476]	; (801ce90 <nema_set_blend+0x640>)
 801ccb2:	9d02      	ldr	r5, [sp, #8]
 801ccb4:	ae26      	add	r6, sp, #152	; 0x98
 801ccb6:	ea40 10c5 	orr.w	r0, r0, r5, lsl #7
 801ccba:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 801ccbe:	4615      	mov	r5, r2
 801ccc0:	e941 0310 	strd	r0, r3, [r1, #-64]	; 0x40
 801ccc4:	e76e      	b.n	801cba4 <nema_set_blend+0x354>
 801ccc6:	f043 5480 	orr.w	r4, r3, #268435456	; 0x10000000
 801ccca:	e6b5      	b.n	801ca38 <nema_set_blend+0x1e8>
 801cccc:	f04f 3020 	mov.w	r0, #538976288	; 0x20202020
 801ccd0:	f7fe ff44 	bl	801bb5c <nema_set_raster_color>
 801ccd4:	2000      	movs	r0, #0
 801ccd6:	f7fd ff93 	bl	801ac00 <nema_enable_gradient>
 801ccda:	f04f 0800 	mov.w	r8, #0
 801ccde:	f04f 0901 	mov.w	r9, #1
 801cce2:	23ff      	movs	r3, #255	; 0xff
 801cce4:	f240 1401 	movw	r4, #257	; 0x101
 801cce8:	f04f 3aff 	mov.w	sl, #4294967295
 801ccec:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801ccf0:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801ccf4:	e9cd 880c 	strd	r8, r8, [sp, #48]	; 0x30
 801ccf8:	4641      	mov	r1, r8
 801ccfa:	f8cd 9004 	str.w	r9, [sp, #4]
 801ccfe:	461a      	mov	r2, r3
 801cd00:	46a3      	mov	fp, r4
 801cd02:	f8cd a000 	str.w	sl, [sp]
 801cd06:	e5c9      	b.n	801c89c <nema_set_blend+0x4c>
 801cd08:	2f0e      	cmp	r7, #14
 801cd0a:	f47f aead 	bne.w	801ca68 <nema_set_blend+0x218>
 801cd0e:	9b03      	ldr	r3, [sp, #12]
 801cd10:	2b00      	cmp	r3, #0
 801cd12:	f47f aea9 	bne.w	801ca68 <nema_set_blend+0x218>
 801cd16:	9b06      	ldr	r3, [sp, #24]
 801cd18:	2b00      	cmp	r3, #0
 801cd1a:	f47f aea5 	bne.w	801ca68 <nema_set_blend+0x218>
 801cd1e:	4615      	mov	r5, r2
 801cd20:	460a      	mov	r2, r1
 801cd22:	f1b9 0f00 	cmp.w	r9, #0
 801cd26:	f43f aeb0 	beq.w	801ca8a <nema_set_blend+0x23a>
 801cd2a:	f04f 0e00 	mov.w	lr, #0
 801cd2e:	4b59      	ldr	r3, [pc, #356]	; (801ce94 <nema_set_blend+0x644>)
 801cd30:	9308      	str	r3, [sp, #32]
 801cd32:	9b01      	ldr	r3, [sp, #4]
 801cd34:	2b00      	cmp	r3, #0
 801cd36:	f000 8123 	beq.w	801cf80 <nema_set_blend+0x730>
 801cd3a:	2b01      	cmp	r3, #1
 801cd3c:	f04f 0600 	mov.w	r6, #0
 801cd40:	f000 8137 	beq.w	801cfb2 <nema_set_blend+0x762>
 801cd44:	461f      	mov	r7, r3
 801cd46:	e714      	b.n	801cb72 <nema_set_blend+0x322>
 801cd48:	e9dd 6c11 	ldrd	r6, ip, [sp, #68]	; 0x44
 801cd4c:	e9dd 7413 	ldrd	r7, r4, [sp, #76]	; 0x4c
 801cd50:	f04f 081d 	mov.w	r8, #29
 801cd54:	e64a      	b.n	801c9ec <nema_set_blend+0x19c>
 801cd56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cd58:	2a00      	cmp	r2, #0
 801cd5a:	d046      	beq.n	801cdea <nema_set_blend+0x59a>
 801cd5c:	f44f 2440 	mov.w	r4, #786432	; 0xc0000
 801cd60:	494d      	ldr	r1, [pc, #308]	; (801ce98 <nema_set_blend+0x648>)
 801cd62:	e752      	b.n	801cc0a <nema_set_blend+0x3ba>
 801cd64:	9b02      	ldr	r3, [sp, #8]
 801cd66:	2b00      	cmp	r3, #0
 801cd68:	f47f aea9 	bne.w	801cabe <nema_set_blend+0x26e>
 801cd6c:	9b00      	ldr	r3, [sp, #0]
 801cd6e:	3301      	adds	r3, #1
 801cd70:	f000 8114 	beq.w	801cf9c <nema_set_blend+0x74c>
 801cd74:	9802      	ldr	r0, [sp, #8]
 801cd76:	f7fe fdc5 	bl	801b904 <nema_matmul_bypass>
 801cd7a:	4b42      	ldr	r3, [pc, #264]	; (801ce84 <nema_set_blend+0x634>)
 801cd7c:	4947      	ldr	r1, [pc, #284]	; (801ce9c <nema_set_blend+0x64c>)
 801cd7e:	9800      	ldr	r0, [sp, #0]
 801cd80:	681a      	ldr	r2, [r3, #0]
 801cd82:	4b47      	ldr	r3, [pc, #284]	; (801cea0 <nema_set_blend+0x650>)
 801cd84:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 801cd88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cd8c:	4318      	orrs	r0, r3
 801cd8e:	f7fe fecd 	bl	801bb2c <nema_set_frag_ptr>
 801cd92:	b027      	add	sp, #156	; 0x9c
 801cd94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd98:	2301      	movs	r3, #1
 801cd9a:	930a      	str	r3, [sp, #40]	; 0x28
 801cd9c:	9304      	str	r3, [sp, #16]
 801cd9e:	469b      	mov	fp, r3
 801cda0:	2303      	movs	r3, #3
 801cda2:	f04f 0e00 	mov.w	lr, #0
 801cda6:	9303      	str	r3, [sp, #12]
 801cda8:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 801cdac:	f503 2340 	add.w	r3, r3, #786432	; 0xc0000
 801cdb0:	9308      	str	r3, [sp, #32]
 801cdb2:	4b3c      	ldr	r3, [pc, #240]	; (801cea4 <nema_set_blend+0x654>)
 801cdb4:	f8cd e018 	str.w	lr, [sp, #24]
 801cdb8:	9312      	str	r3, [sp, #72]	; 0x48
 801cdba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801cdbe:	9311      	str	r3, [sp, #68]	; 0x44
 801cdc0:	4b39      	ldr	r3, [pc, #228]	; (801cea8 <nema_set_blend+0x658>)
 801cdc2:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 801cdc6:	9314      	str	r3, [sp, #80]	; 0x50
 801cdc8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801cdcc:	9313      	str	r3, [sp, #76]	; 0x4c
 801cdce:	f5a3 23c8 	sub.w	r3, r3, #409600	; 0x64000
 801cdd2:	f8cd e054 	str.w	lr, [sp, #84]	; 0x54
 801cdd6:	4835      	ldr	r0, [pc, #212]	; (801ceac <nema_set_blend+0x65c>)
 801cdd8:	4935      	ldr	r1, [pc, #212]	; (801ceb0 <nema_set_blend+0x660>)
 801cdda:	4a36      	ldr	r2, [pc, #216]	; (801ceb4 <nema_set_blend+0x664>)
 801cddc:	461d      	mov	r5, r3
 801cdde:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 801cecc <nema_set_blend+0x67c>
 801cde2:	4e35      	ldr	r6, [pc, #212]	; (801ceb8 <nema_set_blend+0x668>)
 801cde4:	4c35      	ldr	r4, [pc, #212]	; (801cebc <nema_set_blend+0x66c>)
 801cde6:	4f36      	ldr	r7, [pc, #216]	; (801cec0 <nema_set_blend+0x670>)
 801cde8:	e5e7      	b.n	801c9ba <nema_set_blend+0x16a>
 801cdea:	4611      	mov	r1, r2
 801cdec:	2202      	movs	r2, #2
 801cdee:	9205      	str	r2, [sp, #20]
 801cdf0:	2201      	movs	r2, #1
 801cdf2:	e715      	b.n	801cc20 <nema_set_blend+0x3d0>
 801cdf4:	9b01      	ldr	r3, [sp, #4]
 801cdf6:	2b01      	cmp	r3, #1
 801cdf8:	f47f ae32 	bne.w	801ca60 <nema_set_blend+0x210>
 801cdfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cdfe:	2b00      	cmp	r3, #0
 801ce00:	f47f ae2e 	bne.w	801ca60 <nema_set_blend+0x210>
 801ce04:	a826      	add	r0, sp, #152	; 0x98
 801ce06:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801ce0a:	4b21      	ldr	r3, [pc, #132]	; (801ce90 <nema_set_blend+0x640>)
 801ce0c:	9802      	ldr	r0, [sp, #8]
 801ce0e:	f841 6c3c 	str.w	r6, [r1, #-60]
 801ce12:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
 801ce16:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
 801ce1a:	4615      	mov	r5, r2
 801ce1c:	f841 3c40 	str.w	r3, [r1, #-64]
 801ce20:	e6c0      	b.n	801cba4 <nema_set_blend+0x354>
 801ce22:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
 801ce26:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 801ce2a:	462a      	mov	r2, r5
 801ce2c:	3501      	adds	r5, #1
 801ce2e:	f850 0029 	ldr.w	r0, [r0, r9, lsl #2]
 801ce32:	f851 1029 	ldr.w	r1, [r1, r9, lsl #2]
 801ce36:	0140      	lsls	r0, r0, #5
 801ce38:	4b22      	ldr	r3, [pc, #136]	; (801cec4 <nema_set_blend+0x674>)
 801ce3a:	ea40 3081 	orr.w	r0, r0, r1, lsl #14
 801ce3e:	4303      	orrs	r3, r0
 801ce40:	4921      	ldr	r1, [pc, #132]	; (801cec8 <nema_set_blend+0x678>)
 801ce42:	9802      	ldr	r0, [sp, #8]
 801ce44:	433b      	orrs	r3, r7
 801ce46:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
 801ce4a:	a826      	add	r0, sp, #152	; 0x98
 801ce4c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 801ce50:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801ce52:	4333      	orrs	r3, r6
 801ce54:	4301      	orrs	r1, r0
 801ce56:	e942 1310 	strd	r1, r3, [r2, #-64]	; 0x40
 801ce5a:	e6a3      	b.n	801cba4 <nema_set_blend+0x354>
 801ce5c:	9b04      	ldr	r3, [sp, #16]
 801ce5e:	2b00      	cmp	r3, #0
 801ce60:	f000 8082 	beq.w	801cf68 <nema_set_blend+0x718>
 801ce64:	9a05      	ldr	r2, [sp, #20]
 801ce66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce68:	9203      	str	r2, [sp, #12]
 801ce6a:	920a      	str	r2, [sp, #40]	; 0x28
 801ce6c:	4a09      	ldr	r2, [pc, #36]	; (801ce94 <nema_set_blend+0x644>)
 801ce6e:	f443 4330 	orr.w	r3, r3, #45056	; 0xb000
 801ce72:	9208      	str	r2, [sp, #32]
 801ce74:	e6c2      	b.n	801cbfc <nema_set_blend+0x3ac>
 801ce76:	bf00      	nop
 801ce78:	0802ab44 	.word	0x0802ab44
 801ce7c:	0802ab74 	.word	0x0802ab74
 801ce80:	0a002007 	.word	0x0a002007
 801ce84:	20000064 	.word	0x20000064
 801ce88:	100c118b 	.word	0x100c118b
 801ce8c:	0081a042 	.word	0x0081a042
 801ce90:	080c0002 	.word	0x080c0002
 801ce94:	080c0000 	.word	0x080c0000
 801ce98:	100c1183 	.word	0x100c1183
 801ce9c:	0802ab34 	.word	0x0802ab34
 801cea0:	141f801f 	.word	0x141f801f
 801cea4:	000761c7 	.word	0x000761c7
 801cea8:	00076187 	.word	0x00076187
 801ceac:	000121c7 	.word	0x000121c7
 801ceb0:	800121c7 	.word	0x800121c7
 801ceb4:	00012187 	.word	0x00012187
 801ceb8:	800461c7 	.word	0x800461c7
 801cebc:	00046187 	.word	0x00046187
 801cec0:	80046187 	.word	0x80046187
 801cec4:	80080206 	.word	0x80080206
 801cec8:	004e0002 	.word	0x004e0002
 801cecc:	000461c7 	.word	0x000461c7
 801ced0:	2301      	movs	r3, #1
 801ced2:	2202      	movs	r2, #2
 801ced4:	9304      	str	r3, [sp, #16]
 801ced6:	4619      	mov	r1, r3
 801ced8:	4c38      	ldr	r4, [pc, #224]	; (801cfbc <nema_set_blend+0x76c>)
 801ceda:	e5ad      	b.n	801ca38 <nema_set_blend+0x1e8>
 801cedc:	f1b9 0f00 	cmp.w	r9, #0
 801cee0:	d055      	beq.n	801cf8e <nema_set_blend+0x73e>
 801cee2:	2301      	movs	r3, #1
 801cee4:	2103      	movs	r1, #3
 801cee6:	930a      	str	r3, [sp, #40]	; 0x28
 801cee8:	e9cd 1303 	strd	r1, r3, [sp, #12]
 801ceec:	4b34      	ldr	r3, [pc, #208]	; (801cfc0 <nema_set_blend+0x770>)
 801ceee:	9308      	str	r3, [sp, #32]
 801cef0:	e518      	b.n	801c924 <nema_set_blend+0xd4>
 801cef2:	2c00      	cmp	r4, #0
 801cef4:	bfbd      	ittte	lt
 801cef6:	f02b 4b00 	biclt.w	fp, fp, #2147483648	; 0x80000000
 801cefa:	f04f 4202 	movlt.w	r2, #2181038080	; 0x82000000
 801cefe:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 801cf02:	f04f 7200 	movge.w	r2, #33554432	; 0x2000000
 801cf06:	b111      	cbz	r1, 801cf0e <nema_set_blend+0x6be>
 801cf08:	4613      	mov	r3, r2
 801cf0a:	f02b 7b00 	bic.w	fp, fp, #33554432	; 0x2000000
 801cf0e:	9a01      	ldr	r2, [sp, #4]
 801cf10:	ea42 2009 	orr.w	r0, r2, r9, lsl #8
 801cf14:	4318      	orrs	r0, r3
 801cf16:	f7fe fe0f 	bl	801bb38 <nema_set_rop_blend_mode>
 801cf1a:	ea4f 505b 	mov.w	r0, fp, lsr #21
 801cf1e:	4b29      	ldr	r3, [pc, #164]	; (801cfc4 <nema_set_blend+0x774>)
 801cf20:	0540      	lsls	r0, r0, #21
 801cf22:	f040 0201 	orr.w	r2, r0, #1
 801cf26:	789b      	ldrb	r3, [r3, #2]
 801cf28:	2a01      	cmp	r2, #1
 801cf2a:	9201      	str	r2, [sp, #4]
 801cf2c:	9305      	str	r3, [sp, #20]
 801cf2e:	f43f adbe 	beq.w	801caae <nema_set_blend+0x25e>
 801cf32:	f00b 4380 	and.w	r3, fp, #1073741824	; 0x40000000
 801cf36:	9315      	str	r3, [sp, #84]	; 0x54
 801cf38:	f3cb 7380 	ubfx	r3, fp, #30, #1
 801cf3c:	9306      	str	r3, [sp, #24]
 801cf3e:	f00b 5300 	and.w	r3, fp, #536870912	; 0x20000000
 801cf42:	9309      	str	r3, [sp, #36]	; 0x24
 801cf44:	2301      	movs	r3, #1
 801cf46:	f04f 0900 	mov.w	r9, #0
 801cf4a:	f00b 5280 	and.w	r2, fp, #268435456	; 0x10000000
 801cf4e:	f8dd b004 	ldr.w	fp, [sp, #4]
 801cf52:	9301      	str	r3, [sp, #4]
 801cf54:	4b1c      	ldr	r3, [pc, #112]	; (801cfc8 <nema_set_blend+0x778>)
 801cf56:	46c8      	mov	r8, r9
 801cf58:	f8cd 901c 	str.w	r9, [sp, #28]
 801cf5c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801cf60:	f8cd 9010 	str.w	r9, [sp, #16]
 801cf64:	9308      	str	r3, [sp, #32]
 801cf66:	e4dd      	b.n	801c924 <nema_set_blend+0xd4>
 801cf68:	2201      	movs	r2, #1
 801cf6a:	9b05      	ldr	r3, [sp, #20]
 801cf6c:	9204      	str	r2, [sp, #16]
 801cf6e:	930a      	str	r3, [sp, #40]	; 0x28
 801cf70:	e644      	b.n	801cbfc <nema_set_blend+0x3ac>
 801cf72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cf74:	2b00      	cmp	r3, #0
 801cf76:	f43f aedc 	beq.w	801cd32 <nema_set_blend+0x4e2>
 801cf7a:	9e06      	ldr	r6, [sp, #24]
 801cf7c:	9f01      	ldr	r7, [sp, #4]
 801cf7e:	e5f8      	b.n	801cb72 <nema_set_blend+0x322>
 801cf80:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
 801cf84:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 801cf88:	4910      	ldr	r1, [pc, #64]	; (801cfcc <nema_set_blend+0x77c>)
 801cf8a:	4811      	ldr	r0, [pc, #68]	; (801cfd0 <nema_set_blend+0x780>)
 801cf8c:	e74f      	b.n	801ce2e <nema_set_blend+0x5de>
 801cf8e:	4b0e      	ldr	r3, [pc, #56]	; (801cfc8 <nema_set_blend+0x778>)
 801cf90:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801cf94:	9308      	str	r3, [sp, #32]
 801cf96:	e9cd 9903 	strd	r9, r9, [sp, #12]
 801cf9a:	e4c3      	b.n	801c924 <nema_set_blend+0xd4>
 801cf9c:	2001      	movs	r0, #1
 801cf9e:	f7fe fcb1 	bl	801b904 <nema_matmul_bypass>
 801cfa2:	4a0c      	ldr	r2, [pc, #48]	; (801cfd4 <nema_set_blend+0x784>)
 801cfa4:	4b0c      	ldr	r3, [pc, #48]	; (801cfd8 <nema_set_blend+0x788>)
 801cfa6:	6810      	ldr	r0, [r2, #0]
 801cfa8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 801cfac:	f7fe fdbe 	bl	801bb2c <nema_set_frag_ptr>
 801cfb0:	e6ef      	b.n	801cd92 <nema_set_blend+0x542>
 801cfb2:	4637      	mov	r7, r6
 801cfb4:	4905      	ldr	r1, [pc, #20]	; (801cfcc <nema_set_blend+0x77c>)
 801cfb6:	4806      	ldr	r0, [pc, #24]	; (801cfd0 <nema_set_blend+0x780>)
 801cfb8:	e739      	b.n	801ce2e <nema_set_blend+0x5de>
 801cfba:	bf00      	nop
 801cfbc:	1000fc00 	.word	0x1000fc00
 801cfc0:	080c0003 	.word	0x080c0003
 801cfc4:	20197d94 	.word	0x20197d94
 801cfc8:	080c0000 	.word	0x080c0000
 801cfcc:	0802ab74 	.word	0x0802ab74
 801cfd0:	0802ab44 	.word	0x0802ab44
 801cfd4:	20000064 	.word	0x20000064
 801cfd8:	141f001f 	.word	0x141f001f

0801cfdc <nema_set_const_color>:
 801cfdc:	b510      	push	{r4, lr}
 801cfde:	4604      	mov	r4, r0
 801cfe0:	2001      	movs	r0, #1
 801cfe2:	4621      	mov	r1, r4
 801cfe4:	f7fd fde4 	bl	801abb0 <nema_set_const_reg>
 801cfe8:	4b04      	ldr	r3, [pc, #16]	; (801cffc <nema_set_const_color+0x20>)
 801cfea:	781b      	ldrb	r3, [r3, #0]
 801cfec:	b903      	cbnz	r3, 801cff0 <nema_set_const_color+0x14>
 801cfee:	bd10      	pop	{r4, pc}
 801cff0:	4620      	mov	r0, r4
 801cff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cff6:	f7fe bda5 	b.w	801bb44 <nema_set_rop_const_color>
 801cffa:	bf00      	nop
 801cffc:	20197b85 	.word	0x20197b85

0801d000 <_ZN8touchgfx8HALGPU2D17unlockFrameBufferEv>:
 801d000:	f7f8 beb0 	b.w	8015d64 <_ZN8touchgfx3HAL17unlockFrameBufferEv>

0801d004 <_ZN8touchgfx8HALGPU2D10beginFrameEv>:
 801d004:	2200      	movs	r2, #0
 801d006:	f880 20a5 	strb.w	r2, [r0, #165]	; 0xa5
 801d00a:	f7f8 bdaf 	b.w	8015b6c <_ZN8touchgfx3HAL10beginFrameEv>
 801d00e:	bf00      	nop

0801d010 <_ZN8touchgfx8HALGPU2D15lockFrameBufferEv>:
 801d010:	b510      	push	{r4, lr}
 801d012:	4604      	mov	r4, r0
 801d014:	307c      	adds	r0, #124	; 0x7c
 801d016:	f7ff fbd5 	bl	801c7c4 <nema_cl_wait>
 801d01a:	4620      	mov	r0, r4
 801d01c:	f7f9 fb64 	bl	80166e8 <_ZN8touchgfx3HAL15lockFrameBufferEv>
 801d020:	2300      	movs	r3, #0
 801d022:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 801d026:	bd10      	pop	{r4, pc}

0801d028 <_ZN8touchgfx8HALGPU2D8endFrameEv>:
 801d028:	b510      	push	{r4, lr}
 801d02a:	4604      	mov	r4, r0
 801d02c:	f7f8 fdaa 	bl	8015b84 <_ZN8touchgfx3HAL8endFrameEv>
 801d030:	2200      	movs	r2, #0
 801d032:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 801d036:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
 801d03a:	347c      	adds	r4, #124	; 0x7c
 801d03c:	b113      	cbz	r3, 801d044 <_ZN8touchgfx8HALGPU2D8endFrameEv+0x1c>
 801d03e:	4620      	mov	r0, r4
 801d040:	f7ff fb50 	bl	801c6e4 <nema_cl_submit>
 801d044:	4620      	mov	r0, r4
 801d046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d04a:	f7ff bbbb 	b.w	801c7c4 <nema_cl_wait>
 801d04e:	bf00      	nop

0801d050 <_ZN8touchgfx8HALGPU2D10initializeEi.part.2>:
 801d050:	b508      	push	{r3, lr}
 801d052:	4a03      	ldr	r2, [pc, #12]	; (801d060 <_ZN8touchgfx8HALGPU2D10initializeEi.part.2+0x10>)
 801d054:	4b03      	ldr	r3, [pc, #12]	; (801d064 <_ZN8touchgfx8HALGPU2D10initializeEi.part.2+0x14>)
 801d056:	2118      	movs	r1, #24
 801d058:	4803      	ldr	r0, [pc, #12]	; (801d068 <_ZN8touchgfx8HALGPU2D10initializeEi.part.2+0x18>)
 801d05a:	f00b f809 	bl	8028070 <__assert_func>
 801d05e:	bf00      	nop
 801d060:	0802acf8 	.word	0x0802acf8
 801d064:	0802aba4 	.word	0x0802aba4
 801d068:	0802abfc 	.word	0x0802abfc

0801d06c <_ZN8touchgfx8HALGPU2D10initializeEv>:
 801d06c:	b570      	push	{r4, r5, r6, lr}
 801d06e:	4606      	mov	r6, r0
 801d070:	b08a      	sub	sp, #40	; 0x28
 801d072:	466c      	mov	r4, sp
 801d074:	f7f8 fd93 	bl	8015b9e <_ZN8touchgfx3HAL10initializeEv>
 801d078:	f106 057c 	add.w	r5, r6, #124	; 0x7c
 801d07c:	4668      	mov	r0, sp
 801d07e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801d082:	f7ff f89f 	bl	801c1c4 <nema_cl_create_sized>
 801d086:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d088:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d08a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d08c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d08e:	e894 0003 	ldmia.w	r4, {r0, r1}
 801d092:	e885 0003 	stmia.w	r5, {r0, r1}
 801d096:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 801d09a:	b10b      	cbz	r3, 801d0a0 <_ZN8touchgfx8HALGPU2D10initializeEv+0x34>
 801d09c:	b00a      	add	sp, #40	; 0x28
 801d09e:	bd70      	pop	{r4, r5, r6, pc}
 801d0a0:	f7ff ffd6 	bl	801d050 <_ZN8touchgfx8HALGPU2D10initializeEi.part.2>

0801d0a4 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
 801d0a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d0a6:	f04f 0c01 	mov.w	ip, #1
 801d0aa:	2500      	movs	r5, #0
 801d0ac:	f8bd 7014 	ldrh.w	r7, [sp, #20]
 801d0b0:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 801d0b4:	60c3      	str	r3, [r0, #12]
 801d0b6:	42b7      	cmp	r7, r6
 801d0b8:	bf2c      	ite	cs
 801d0ba:	f04f 0e00 	movcs.w	lr, #0
 801d0be:	f04f 0e01 	movcc.w	lr, #1
 801d0c2:	4b23      	ldr	r3, [pc, #140]	; (801d150 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xac>)
 801d0c4:	e9c0 1201 	strd	r1, r2, [r0, #4]
 801d0c8:	6643      	str	r3, [r0, #100]	; 0x64
 801d0ca:	4b22      	ldr	r3, [pc, #136]	; (801d154 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xb0>)
 801d0cc:	6105      	str	r5, [r0, #16]
 801d0ce:	e9c0 5505 	strd	r5, r5, [r0, #20]
 801d0d2:	61c5      	str	r5, [r0, #28]
 801d0d4:	6205      	str	r5, [r0, #32]
 801d0d6:	8485      	strh	r5, [r0, #36]	; 0x24
 801d0d8:	f8c0 5026 	str.w	r5, [r0, #38]	; 0x26
 801d0dc:	f880 502a 	strb.w	r5, [r0, #42]	; 0x2a
 801d0e0:	62c5      	str	r5, [r0, #44]	; 0x2c
 801d0e2:	8605      	strh	r5, [r0, #48]	; 0x30
 801d0e4:	e9c0 550e 	strd	r5, r5, [r0, #56]	; 0x38
 801d0e8:	e9c0 5510 	strd	r5, r5, [r0, #64]	; 0x40
 801d0ec:	f880 5048 	strb.w	r5, [r0, #72]	; 0x48
 801d0f0:	f880 504a 	strb.w	r5, [r0, #74]	; 0x4a
 801d0f4:	f880 504b 	strb.w	r5, [r0, #75]	; 0x4b
 801d0f8:	e9c0 5513 	strd	r5, r5, [r0, #76]	; 0x4c
 801d0fc:	e9c0 5515 	strd	r5, r5, [r0, #84]	; 0x54
 801d100:	e9c0 5517 	strd	r5, r5, [r0, #92]	; 0x5c
 801d104:	6685      	str	r5, [r0, #104]	; 0x68
 801d106:	f880 506c 	strb.w	r5, [r0, #108]	; 0x6c
 801d10a:	4a13      	ldr	r2, [pc, #76]	; (801d158 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xb4>)
 801d10c:	f880 c049 	strb.w	ip, [r0, #73]	; 0x49
 801d110:	6018      	str	r0, [r3, #0]
 801d112:	4b12      	ldr	r3, [pc, #72]	; (801d15c <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xb8>)
 801d114:	8017      	strh	r7, [r2, #0]
 801d116:	801f      	strh	r7, [r3, #0]
 801d118:	4a11      	ldr	r2, [pc, #68]	; (801d160 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xbc>)
 801d11a:	4b12      	ldr	r3, [pc, #72]	; (801d164 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xc0>)
 801d11c:	8016      	strh	r6, [r2, #0]
 801d11e:	801e      	strh	r6, [r3, #0]
 801d120:	4911      	ldr	r1, [pc, #68]	; (801d168 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xc4>)
 801d122:	4a12      	ldr	r2, [pc, #72]	; (801d16c <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xc8>)
 801d124:	4b12      	ldr	r3, [pc, #72]	; (801d170 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xcc>)
 801d126:	700d      	strb	r5, [r1, #0]
 801d128:	6002      	str	r2, [r0, #0]
 801d12a:	6018      	str	r0, [r3, #0]
 801d12c:	6705      	str	r5, [r0, #112]	; 0x70
 801d12e:	f880 5074 	strb.w	r5, [r0, #116]	; 0x74
 801d132:	f880 5075 	strb.w	r5, [r0, #117]	; 0x75
 801d136:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
 801d13a:	f880 c077 	strb.w	ip, [r0, #119]	; 0x77
 801d13e:	f880 c078 	strb.w	ip, [r0, #120]	; 0x78
 801d142:	f880 50a4 	strb.w	r5, [r0, #164]	; 0xa4
 801d146:	f880 50a5 	strb.w	r5, [r0, #165]	; 0xa5
 801d14a:	f880 e034 	strb.w	lr, [r0, #52]	; 0x34
 801d14e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d150:	01000001 	.word	0x01000001
 801d154:	20197958 	.word	0x20197958
 801d158:	2019794c 	.word	0x2019794c
 801d15c:	20197952 	.word	0x20197952
 801d160:	2019794e 	.word	0x2019794e
 801d164:	20197954 	.word	0x20197954
 801d168:	20197950 	.word	0x20197950
 801d16c:	0802ac28 	.word	0x0802ac28
 801d170:	20197b88 	.word	0x20197b88

0801d174 <_ZN8touchgfx8HALGPU2D10initializeEi>:
 801d174:	b570      	push	{r4, r5, r6, lr}
 801d176:	460c      	mov	r4, r1
 801d178:	b08a      	sub	sp, #40	; 0x28
 801d17a:	4606      	mov	r6, r0
 801d17c:	f7f8 fd0f 	bl	8015b9e <_ZN8touchgfx3HAL10initializeEv>
 801d180:	4621      	mov	r1, r4
 801d182:	466c      	mov	r4, sp
 801d184:	4668      	mov	r0, sp
 801d186:	f106 057c 	add.w	r5, r6, #124	; 0x7c
 801d18a:	f7ff f81b 	bl	801c1c4 <nema_cl_create_sized>
 801d18e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d190:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d192:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d194:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d196:	e894 0003 	ldmia.w	r4, {r0, r1}
 801d19a:	e885 0003 	stmia.w	r5, {r0, r1}
 801d19e:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 801d1a2:	b10b      	cbz	r3, 801d1a8 <_ZN8touchgfx8HALGPU2D10initializeEi+0x34>
 801d1a4:	b00a      	add	sp, #40	; 0x28
 801d1a6:	bd70      	pop	{r4, r5, r6, pc}
 801d1a8:	f7ff ff52 	bl	801d050 <_ZN8touchgfx8HALGPU2D10initializeEi.part.2>

0801d1ac <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>:
 801d1ac:	b510      	push	{r4, lr}
 801d1ae:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 801d1b2:	4604      	mov	r4, r0
 801d1b4:	b94b      	cbnz	r3, 801d1ca <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0x1e>
 801d1b6:	4620      	mov	r0, r4
 801d1b8:	2101      	movs	r1, #1
 801d1ba:	f7f9 fa83 	bl	80166c4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801d1be:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 801d1c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d1c6:	f7ff b911 	b.w	801c3ec <nema_cl_bind_circular>
 801d1ca:	6840      	ldr	r0, [r0, #4]
 801d1cc:	4906      	ldr	r1, [pc, #24]	; (801d1e8 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0x3c>)
 801d1ce:	6803      	ldr	r3, [r0, #0]
 801d1d0:	689a      	ldr	r2, [r3, #8]
 801d1d2:	428a      	cmp	r2, r1
 801d1d4:	d105      	bne.n	801d1e2 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0x36>
 801d1d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d1d8:	4798      	blx	r3
 801d1da:	2300      	movs	r3, #0
 801d1dc:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 801d1e0:	e7e9      	b.n	801d1b6 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0xa>
 801d1e2:	4790      	blx	r2
 801d1e4:	e7f9      	b.n	801d1da <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0x2e>
 801d1e6:	bf00      	nop
 801d1e8:	08002369 	.word	0x08002369

0801d1ec <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>:
 801d1ec:	4603      	mov	r3, r0
 801d1ee:	2200      	movs	r2, #0
 801d1f0:	307c      	adds	r0, #124	; 0x7c
 801d1f2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 801d1f6:	f7ff ba75 	b.w	801c6e4 <nema_cl_submit>
 801d1fa:	bf00      	nop

0801d1fc <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 801d1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d200:	b091      	sub	sp, #68	; 0x44
 801d202:	4604      	mov	r4, r0
 801d204:	461d      	mov	r5, r3
 801d206:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 801d20a:	e9cd 210e 	strd	r2, r1, [sp, #56]	; 0x38
 801d20e:	930d      	str	r3, [sp, #52]	; 0x34
 801d210:	f89d 2088 	ldrb.w	r2, [sp, #136]	; 0x88
 801d214:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 801d218:	307c      	adds	r0, #124	; 0x7c
 801d21a:	f8bd 6068 	ldrh.w	r6, [sp, #104]	; 0x68
 801d21e:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801d222:	f8bd 8070 	ldrh.w	r8, [sp, #112]	; 0x70
 801d226:	f8bd 9074 	ldrh.w	r9, [sp, #116]	; 0x74
 801d22a:	f89d a078 	ldrb.w	sl, [sp, #120]	; 0x78
 801d22e:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 801d232:	930b      	str	r3, [sp, #44]	; 0x2c
 801d234:	920c      	str	r2, [sp, #48]	; 0x30
 801d236:	f7ff fac5 	bl	801c7c4 <nema_cl_wait>
 801d23a:	f04f 0e01 	mov.w	lr, #1
 801d23e:	2000      	movs	r0, #0
 801d240:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d244:	9208      	str	r2, [sp, #32]
 801d246:	f8d4 c000 	ldr.w	ip, [r4]
 801d24a:	9307      	str	r3, [sp, #28]
 801d24c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d24e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801d252:	e9dd 210e 	ldrd	r2, r1, [sp, #56]	; 0x38
 801d256:	e9cd b305 	strd	fp, r3, [sp, #20]
 801d25a:	e9cd 7801 	strd	r7, r8, [sp, #4]
 801d25e:	9600      	str	r6, [sp, #0]
 801d260:	f884 e0a4 	strb.w	lr, [r4, #164]	; 0xa4
 801d264:	9009      	str	r0, [sp, #36]	; 0x24
 801d266:	462b      	mov	r3, r5
 801d268:	4620      	mov	r0, r4
 801d26a:	f8dc 403c 	ldr.w	r4, [ip, #60]	; 0x3c
 801d26e:	47a0      	blx	r4
 801d270:	b011      	add	sp, #68	; 0x44
 801d272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d276:	bf00      	nop

0801d278 <_ZN8touchgfx8LCDGPU2DD1Ev>:
 801d278:	4770      	bx	lr
 801d27a:	bf00      	nop

0801d27c <_ZNK8touchgfx8LCDGPU2D8bitDepthEv>:
 801d27c:	7a03      	ldrb	r3, [r0, #8]
 801d27e:	2b02      	cmp	r3, #2
 801d280:	d004      	beq.n	801d28c <_ZNK8touchgfx8LCDGPU2D8bitDepthEv+0x10>
 801d282:	2b01      	cmp	r3, #1
 801d284:	bf0c      	ite	eq
 801d286:	2018      	moveq	r0, #24
 801d288:	2010      	movne	r0, #16
 801d28a:	4770      	bx	lr
 801d28c:	2020      	movs	r0, #32
 801d28e:	4770      	bx	lr

0801d290 <_ZNK8touchgfx8LCDGPU2D17framebufferFormatEv>:
 801d290:	7a00      	ldrb	r0, [r0, #8]
 801d292:	4770      	bx	lr

0801d294 <_ZN8touchgfx8LCDGPU2D4initEv>:
 801d294:	4770      	bx	lr
 801d296:	bf00      	nop

0801d298 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d29c:	b087      	sub	sp, #28
 801d29e:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 801d2a2:	9102      	str	r1, [sp, #8]
 801d2a4:	ea6f 0c05 	mvn.w	ip, r5
 801d2a8:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	; 0x4c
 801d2ac:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801d2ae:	9203      	str	r2, [sp, #12]
 801d2b0:	e9dd 4215 	ldrd	r4, r2, [sp, #84]	; 0x54
 801d2b4:	6860      	ldr	r0, [r4, #4]
 801d2b6:	fa5f fc8c 	uxtb.w	ip, ip
 801d2ba:	fb00 2e01 	mla	lr, r0, r1, r2
 801d2be:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801d2c0:	6820      	ldr	r0, [r4, #0]
 801d2c2:	e9d2 2400 	ldrd	r2, r4, [r2]
 801d2c6:	3404      	adds	r4, #4
 801d2c8:	eb00 004e 	add.w	r0, r0, lr, lsl #1
 801d2cc:	fa1f fb85 	uxth.w	fp, r5
 801d2d0:	9405      	str	r4, [sp, #20]
 801d2d2:	9200      	str	r2, [sp, #0]
 801d2d4:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801d2d8:	9c02      	ldr	r4, [sp, #8]
 801d2da:	2c00      	cmp	r4, #0
 801d2dc:	dc03      	bgt.n	801d2e6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801d2de:	9c03      	ldr	r4, [sp, #12]
 801d2e0:	2c00      	cmp	r4, #0
 801d2e2:	f340 80c2 	ble.w	801d46a <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801d2e6:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801d2e8:	2b00      	cmp	r3, #0
 801d2ea:	e9d4 ea02 	ldrd	lr, sl, [r4, #8]
 801d2ee:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d2f2:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801d2f6:	fa0f f48e 	sxth.w	r4, lr
 801d2fa:	fa0f f88a 	sxth.w	r8, sl
 801d2fe:	f340 80b7 	ble.w	801d470 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801d302:	1415      	asrs	r5, r2, #16
 801d304:	d406      	bmi.n	801d314 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d306:	42a5      	cmp	r5, r4
 801d308:	da04      	bge.n	801d314 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d30a:	ea5f 4921 	movs.w	r9, r1, asr #16
 801d30e:	d401      	bmi.n	801d314 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d310:	45c1      	cmp	r9, r8
 801d312:	db3e      	blt.n	801d392 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801d314:	3b01      	subs	r3, #1
 801d316:	4432      	add	r2, r6
 801d318:	4439      	add	r1, r7
 801d31a:	f100 0002 	add.w	r0, r0, #2
 801d31e:	d1f0      	bne.n	801d302 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d320:	9b02      	ldr	r3, [sp, #8]
 801d322:	2b00      	cmp	r3, #0
 801d324:	f340 80a1 	ble.w	801d46a <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801d328:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d32c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d330:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d334:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d338:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d33c:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801d340:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d344:	ee76 6a62 	vsub.f32	s13, s12, s5
 801d348:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801d34c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d350:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d354:	ee16 2a90 	vmov	r2, s13
 801d358:	3b01      	subs	r3, #1
 801d35a:	9302      	str	r3, [sp, #8]
 801d35c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d35e:	9c03      	ldr	r4, [sp, #12]
 801d360:	fb92 f6f3 	sdiv	r6, r2, r3
 801d364:	ee17 2a10 	vmov	r2, s14
 801d368:	eeb0 7a43 	vmov.f32	s14, s6
 801d36c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d370:	ee17 1a10 	vmov	r1, s14
 801d374:	eeb0 7a62 	vmov.f32	s14, s5
 801d378:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d37c:	fb92 f7f3 	sdiv	r7, r2, r3
 801d380:	eeb0 3a67 	vmov.f32	s6, s15
 801d384:	ee17 2a10 	vmov	r2, s14
 801d388:	eef0 2a46 	vmov.f32	s5, s12
 801d38c:	bf08      	it	eq
 801d38e:	4623      	moveq	r3, r4
 801d390:	e7a2      	b.n	801d2d8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801d392:	9501      	str	r5, [sp, #4]
 801d394:	1e5d      	subs	r5, r3, #1
 801d396:	fb05 2906 	mla	r9, r5, r6, r2
 801d39a:	ea5f 4929 	movs.w	r9, r9, asr #16
 801d39e:	9504      	str	r5, [sp, #16]
 801d3a0:	d570      	bpl.n	801d484 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801d3a2:	4680      	mov	r8, r0
 801d3a4:	9d01      	ldr	r5, [sp, #4]
 801d3a6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d3aa:	4654      	mov	r4, sl
 801d3ac:	4673      	mov	r3, lr
 801d3ae:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801d3b2:	e002      	b.n	801d3ba <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801d3b4:	1415      	asrs	r5, r2, #16
 801d3b6:	e9d9 3402 	ldrd	r3, r4, [r9, #8]
 801d3ba:	2d00      	cmp	r5, #0
 801d3bc:	4432      	add	r2, r6
 801d3be:	db4b      	blt.n	801d458 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801d3c0:	429d      	cmp	r5, r3
 801d3c2:	da49      	bge.n	801d458 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801d3c4:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801d3c8:	d446      	bmi.n	801d458 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801d3ca:	45a6      	cmp	lr, r4
 801d3cc:	da44      	bge.n	801d458 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801d3ce:	9c00      	ldr	r4, [sp, #0]
 801d3d0:	b21b      	sxth	r3, r3
 801d3d2:	fb0e 4303 	mla	r3, lr, r3, r4
 801d3d6:	5d5b      	ldrb	r3, [r3, r5]
 801d3d8:	9d05      	ldr	r5, [sp, #20]
 801d3da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d3de:	441d      	add	r5, r3
 801d3e0:	f895 a002 	ldrb.w	sl, [r5, #2]
 801d3e4:	786d      	ldrb	r5, [r5, #1]
 801d3e6:	f8b8 4000 	ldrh.w	r4, [r8]
 801d3ea:	fb15 f50b 	smulbb	r5, r5, fp
 801d3ee:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
 801d3f2:	fa5f fe8e 	uxtb.w	lr, lr
 801d3f6:	9501      	str	r5, [sp, #4]
 801d3f8:	fb1e fe0c 	smulbb	lr, lr, ip
 801d3fc:	9d05      	ldr	r5, [sp, #20]
 801d3fe:	fb1a fa0b 	smulbb	sl, sl, fp
 801d402:	5ced      	ldrb	r5, [r5, r3]
 801d404:	1223      	asrs	r3, r4, #8
 801d406:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801d40a:	fb05 ee0b 	mla	lr, r5, fp, lr
 801d40e:	fb03 aa0c 	mla	sl, r3, ip, sl
 801d412:	9d01      	ldr	r5, [sp, #4]
 801d414:	10e4      	asrs	r4, r4, #3
 801d416:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801d41a:	fb04 540c 	mla	r4, r4, ip, r5
 801d41e:	fa1f fe8e 	uxth.w	lr, lr
 801d422:	fa1f fa8a 	uxth.w	sl, sl
 801d426:	f10e 0301 	add.w	r3, lr, #1
 801d42a:	f10a 0501 	add.w	r5, sl, #1
 801d42e:	9301      	str	r3, [sp, #4]
 801d430:	b2a4      	uxth	r4, r4
 801d432:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 801d436:	9d01      	ldr	r5, [sp, #4]
 801d438:	1c63      	adds	r3, r4, #1
 801d43a:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801d43e:	eb05 251e 	add.w	r5, r5, lr, lsr #8
 801d442:	f40a 4378 	and.w	r3, sl, #63488	; 0xf800
 801d446:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801d44a:	0964      	lsrs	r4, r4, #5
 801d44c:	432b      	orrs	r3, r5
 801d44e:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801d452:	4323      	orrs	r3, r4
 801d454:	f8a8 3000 	strh.w	r3, [r8]
 801d458:	f108 0802 	add.w	r8, r8, #2
 801d45c:	4580      	cmp	r8, r0
 801d45e:	4439      	add	r1, r7
 801d460:	d1a8      	bne.n	801d3b4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d462:	9b02      	ldr	r3, [sp, #8]
 801d464:	2b00      	cmp	r3, #0
 801d466:	f73f af5f 	bgt.w	801d328 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d46a:	b007      	add	sp, #28
 801d46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d470:	f43f af56 	beq.w	801d320 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801d474:	1e5d      	subs	r5, r3, #1
 801d476:	fb05 2906 	mla	r9, r5, r6, r2
 801d47a:	ea5f 4929 	movs.w	r9, r9, asr #16
 801d47e:	9504      	str	r5, [sp, #16]
 801d480:	f53f af4e 	bmi.w	801d320 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801d484:	454c      	cmp	r4, r9
 801d486:	dd5b      	ble.n	801d540 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801d488:	9d04      	ldr	r5, [sp, #16]
 801d48a:	fb05 1507 	mla	r5, r5, r7, r1
 801d48e:	142d      	asrs	r5, r5, #16
 801d490:	d456      	bmi.n	801d540 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801d492:	4545      	cmp	r5, r8
 801d494:	da54      	bge.n	801d540 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801d496:	2b00      	cmp	r3, #0
 801d498:	f77f af42 	ble.w	801d320 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801d49c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d4a0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801d4a4:	9301      	str	r3, [sp, #4]
 801d4a6:	e002      	b.n	801d4ae <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801d4a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d4aa:	f9b3 4008 	ldrsh.w	r4, [r3, #8]
 801d4ae:	9d00      	ldr	r5, [sp, #0]
 801d4b0:	140b      	asrs	r3, r1, #16
 801d4b2:	fb04 5303 	mla	r3, r4, r3, r5
 801d4b6:	1414      	asrs	r4, r2, #16
 801d4b8:	5d1b      	ldrb	r3, [r3, r4]
 801d4ba:	8804      	ldrh	r4, [r0, #0]
 801d4bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d4c0:	eb08 0503 	add.w	r5, r8, r3
 801d4c4:	f895 a002 	ldrb.w	sl, [r5, #2]
 801d4c8:	f895 9001 	ldrb.w	r9, [r5, #1]
 801d4cc:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
 801d4d0:	fa5f fe8e 	uxtb.w	lr, lr
 801d4d4:	fb1e fe0c 	smulbb	lr, lr, ip
 801d4d8:	fb19 f90b 	smulbb	r9, r9, fp
 801d4dc:	fb1a fa0b 	smulbb	sl, sl, fp
 801d4e0:	f818 5003 	ldrb.w	r5, [r8, r3]
 801d4e4:	1223      	asrs	r3, r4, #8
 801d4e6:	10e4      	asrs	r4, r4, #3
 801d4e8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801d4ec:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801d4f0:	fb05 e50b 	mla	r5, r5, fp, lr
 801d4f4:	fb03 aa0c 	mla	sl, r3, ip, sl
 801d4f8:	fb04 940c 	mla	r4, r4, ip, r9
 801d4fc:	b2ad      	uxth	r5, r5
 801d4fe:	fa1f fa8a 	uxth.w	sl, sl
 801d502:	b2a4      	uxth	r4, r4
 801d504:	f10a 0301 	add.w	r3, sl, #1
 801d508:	f105 0e01 	add.w	lr, r5, #1
 801d50c:	f104 0901 	add.w	r9, r4, #1
 801d510:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801d514:	eb0e 2e15 	add.w	lr, lr, r5, lsr #8
 801d518:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801d51c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801d520:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801d524:	0964      	lsrs	r4, r4, #5
 801d526:	ea43 030e 	orr.w	r3, r3, lr
 801d52a:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801d52e:	4323      	orrs	r3, r4
 801d530:	f820 3b02 	strh.w	r3, [r0], #2
 801d534:	9b01      	ldr	r3, [sp, #4]
 801d536:	4439      	add	r1, r7
 801d538:	4298      	cmp	r0, r3
 801d53a:	4432      	add	r2, r6
 801d53c:	d1b4      	bne.n	801d4a8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801d53e:	e6ef      	b.n	801d320 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801d540:	2b00      	cmp	r3, #0
 801d542:	f77f aeed 	ble.w	801d320 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801d546:	1414      	asrs	r4, r2, #16
 801d548:	4680      	mov	r8, r0
 801d54a:	9401      	str	r4, [sp, #4]
 801d54c:	4625      	mov	r5, r4
 801d54e:	e72a      	b.n	801d3a6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>

0801d550 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d554:	4689      	mov	r9, r1
 801d556:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801d55a:	46ca      	mov	sl, r9
 801d55c:	b087      	sub	sp, #28
 801d55e:	9203      	str	r2, [sp, #12]
 801d560:	e9dd 2115 	ldrd	r2, r1, [sp, #84]	; 0x54
 801d564:	6854      	ldr	r4, [r2, #4]
 801d566:	e9dd 0c17 	ldrd	r0, ip, [sp, #92]	; 0x5c
 801d56a:	fb04 1000 	mla	r0, r4, r0, r1
 801d56e:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	; 0x4c
 801d572:	6815      	ldr	r5, [r2, #0]
 801d574:	e9dc 2400 	ldrd	r2, r4, [ip]
 801d578:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 801d57c:	f104 0b04 	add.w	fp, r4, #4
 801d580:	9205      	str	r2, [sp, #20]
 801d582:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801d586:	f1ba 0f00 	cmp.w	sl, #0
 801d58a:	dc03      	bgt.n	801d594 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801d58c:	9c03      	ldr	r4, [sp, #12]
 801d58e:	2c00      	cmp	r4, #0
 801d590:	f340 8095 	ble.w	801d6be <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801d594:	e9dc e802 	ldrd	lr, r8, [ip, #8]
 801d598:	2b00      	cmp	r3, #0
 801d59a:	fa0f f588 	sxth.w	r5, r8
 801d59e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d5a2:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801d5a6:	fa0f f48e 	sxth.w	r4, lr
 801d5aa:	9502      	str	r5, [sp, #8]
 801d5ac:	f340 808a 	ble.w	801d6c4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801d5b0:	46f1      	mov	r9, lr
 801d5b2:	9401      	str	r4, [sp, #4]
 801d5b4:	1415      	asrs	r5, r2, #16
 801d5b6:	d408      	bmi.n	801d5ca <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d5b8:	9c01      	ldr	r4, [sp, #4]
 801d5ba:	42a5      	cmp	r5, r4
 801d5bc:	da05      	bge.n	801d5ca <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d5be:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801d5c2:	d402      	bmi.n	801d5ca <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d5c4:	9c02      	ldr	r4, [sp, #8]
 801d5c6:	45a6      	cmp	lr, r4
 801d5c8:	db3b      	blt.n	801d642 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf2>
 801d5ca:	3b01      	subs	r3, #1
 801d5cc:	4432      	add	r2, r6
 801d5ce:	4439      	add	r1, r7
 801d5d0:	f100 0002 	add.w	r0, r0, #2
 801d5d4:	d1ee      	bne.n	801d5b4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d5d6:	f1ba 0f00 	cmp.w	sl, #0
 801d5da:	dd70      	ble.n	801d6be <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801d5dc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d5e0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d5e4:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801d5e8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d5ec:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801d5f0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d5f4:	ee76 6a62 	vsub.f32	s13, s12, s5
 801d5f8:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801d5fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d600:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d604:	ee16 2a90 	vmov	r2, s13
 801d608:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d60a:	9c03      	ldr	r4, [sp, #12]
 801d60c:	fb92 f6f3 	sdiv	r6, r2, r3
 801d610:	ee17 2a10 	vmov	r2, s14
 801d614:	eeb0 7a43 	vmov.f32	s14, s6
 801d618:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d61c:	ee17 1a10 	vmov	r1, s14
 801d620:	eeb0 7a62 	vmov.f32	s14, s5
 801d624:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d628:	f1ba 0a01 	subs.w	sl, sl, #1
 801d62c:	fb92 f7f3 	sdiv	r7, r2, r3
 801d630:	eeb0 3a67 	vmov.f32	s6, s15
 801d634:	ee17 2a10 	vmov	r2, s14
 801d638:	eef0 2a46 	vmov.f32	s5, s12
 801d63c:	bf08      	it	eq
 801d63e:	4623      	moveq	r3, r4
 801d640:	e7a1      	b.n	801d586 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801d642:	9c01      	ldr	r4, [sp, #4]
 801d644:	9501      	str	r5, [sp, #4]
 801d646:	1e5d      	subs	r5, r3, #1
 801d648:	46ce      	mov	lr, r9
 801d64a:	fb05 2906 	mla	r9, r5, r6, r2
 801d64e:	ea5f 4929 	movs.w	r9, r9, asr #16
 801d652:	9504      	str	r5, [sp, #16]
 801d654:	d53e      	bpl.n	801d6d4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 801d656:	4604      	mov	r4, r0
 801d658:	9d01      	ldr	r5, [sp, #4]
 801d65a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d65e:	4673      	mov	r3, lr
 801d660:	46b6      	mov	lr, r6
 801d662:	4646      	mov	r6, r8
 801d664:	e002      	b.n	801d66c <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d666:	1415      	asrs	r5, r2, #16
 801d668:	e9dc 3602 	ldrd	r3, r6, [ip, #8]
 801d66c:	2d00      	cmp	r5, #0
 801d66e:	4472      	add	r2, lr
 801d670:	db1e      	blt.n	801d6b0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801d672:	429d      	cmp	r5, r3
 801d674:	da1c      	bge.n	801d6b0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801d676:	ea5f 4821 	movs.w	r8, r1, asr #16
 801d67a:	d419      	bmi.n	801d6b0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801d67c:	45b0      	cmp	r8, r6
 801d67e:	da17      	bge.n	801d6b0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801d680:	9e05      	ldr	r6, [sp, #20]
 801d682:	b21b      	sxth	r3, r3
 801d684:	fb08 6303 	mla	r3, r8, r3, r6
 801d688:	5d5e      	ldrb	r6, [r3, r5]
 801d68a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d68e:	eb0b 0306 	add.w	r3, fp, r6
 801d692:	785d      	ldrb	r5, [r3, #1]
 801d694:	789b      	ldrb	r3, [r3, #2]
 801d696:	00ed      	lsls	r5, r5, #3
 801d698:	f405 68fc 	and.w	r8, r5, #2016	; 0x7e0
 801d69c:	4d2d      	ldr	r5, [pc, #180]	; (801d754 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>)
 801d69e:	f81b 6006 	ldrb.w	r6, [fp, r6]
 801d6a2:	ea05 2303 	and.w	r3, r5, r3, lsl #8
 801d6a6:	ea43 0308 	orr.w	r3, r3, r8
 801d6aa:	ea43 03d6 	orr.w	r3, r3, r6, lsr #3
 801d6ae:	8023      	strh	r3, [r4, #0]
 801d6b0:	3402      	adds	r4, #2
 801d6b2:	4284      	cmp	r4, r0
 801d6b4:	4439      	add	r1, r7
 801d6b6:	d1d6      	bne.n	801d666 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801d6b8:	f1ba 0f00 	cmp.w	sl, #0
 801d6bc:	dc8e      	bgt.n	801d5dc <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d6be:	b007      	add	sp, #28
 801d6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d6c4:	d087      	beq.n	801d5d6 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d6c6:	1e5d      	subs	r5, r3, #1
 801d6c8:	fb05 2906 	mla	r9, r5, r6, r2
 801d6cc:	ea5f 4929 	movs.w	r9, r9, asr #16
 801d6d0:	9504      	str	r5, [sp, #16]
 801d6d2:	d480      	bmi.n	801d5d6 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d6d4:	454c      	cmp	r4, r9
 801d6d6:	dd35      	ble.n	801d744 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801d6d8:	9d04      	ldr	r5, [sp, #16]
 801d6da:	fb05 1507 	mla	r5, r5, r7, r1
 801d6de:	ea5f 4925 	movs.w	r9, r5, asr #16
 801d6e2:	d42f      	bmi.n	801d744 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801d6e4:	9d02      	ldr	r5, [sp, #8]
 801d6e6:	45a9      	cmp	r9, r5
 801d6e8:	da2c      	bge.n	801d744 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801d6ea:	2b00      	cmp	r3, #0
 801d6ec:	f77f af73 	ble.w	801d5d6 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d6f0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d6f4:	9d05      	ldr	r5, [sp, #20]
 801d6f6:	4699      	mov	r9, r3
 801d6f8:	46a6      	mov	lr, r4
 801d6fa:	e001      	b.n	801d700 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 801d6fc:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801d700:	140c      	asrs	r4, r1, #16
 801d702:	fb0e 5404 	mla	r4, lr, r4, r5
 801d706:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801d70a:	f814 e00e 	ldrb.w	lr, [r4, lr]
 801d70e:	4b11      	ldr	r3, [pc, #68]	; (801d754 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>)
 801d710:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d714:	eb0b 040e 	add.w	r4, fp, lr
 801d718:	f894 8001 	ldrb.w	r8, [r4, #1]
 801d71c:	78a4      	ldrb	r4, [r4, #2]
 801d71e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801d722:	f81b e00e 	ldrb.w	lr, [fp, lr]
 801d726:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801d72a:	ea03 2404 	and.w	r4, r3, r4, lsl #8
 801d72e:	ea44 0408 	orr.w	r4, r4, r8
 801d732:	ea44 04de 	orr.w	r4, r4, lr, lsr #3
 801d736:	f820 4b02 	strh.w	r4, [r0], #2
 801d73a:	4548      	cmp	r0, r9
 801d73c:	4439      	add	r1, r7
 801d73e:	4432      	add	r2, r6
 801d740:	d1dc      	bne.n	801d6fc <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801d742:	e748      	b.n	801d5d6 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d744:	2b00      	cmp	r3, #0
 801d746:	f77f af46 	ble.w	801d5d6 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d74a:	1415      	asrs	r5, r2, #16
 801d74c:	4604      	mov	r4, r0
 801d74e:	9501      	str	r5, [sp, #4]
 801d750:	e783      	b.n	801d65a <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801d752:	bf00      	nop
 801d754:	fffff800 	.word	0xfffff800

0801d758 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d758:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801d75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d760:	b087      	sub	sp, #28
 801d762:	e9cd 1203 	strd	r1, r2, [sp, #12]
 801d766:	e9dd 2115 	ldrd	r2, r1, [sp, #84]	; 0x54
 801d76a:	e9dd 0b17 	ldrd	r0, fp, [sp, #92]	; 0x5c
 801d76e:	6854      	ldr	r4, [r2, #4]
 801d770:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 801d774:	fb04 1100 	mla	r1, r4, r0, r1
 801d778:	e9dd 9a13 	ldrd	r9, sl, [sp, #76]	; 0x4c
 801d77c:	6810      	ldr	r0, [r2, #0]
 801d77e:	e9db 2400 	ldrd	r2, r4, [fp]
 801d782:	eb00 0e41 	add.w	lr, r0, r1, lsl #1
 801d786:	1d21      	adds	r1, r4, #4
 801d788:	9505      	str	r5, [sp, #20]
 801d78a:	9102      	str	r1, [sp, #8]
 801d78c:	9201      	str	r2, [sp, #4]
 801d78e:	e9dd 7211 	ldrd	r7, r2, [sp, #68]	; 0x44
 801d792:	9903      	ldr	r1, [sp, #12]
 801d794:	2900      	cmp	r1, #0
 801d796:	dc03      	bgt.n	801d7a0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801d798:	9904      	ldr	r1, [sp, #16]
 801d79a:	2900      	cmp	r1, #0
 801d79c:	f340 80b6 	ble.w	801d90c <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801d7a0:	e9db 4602 	ldrd	r4, r6, [fp, #8]
 801d7a4:	2b00      	cmp	r3, #0
 801d7a6:	f507 4700 	add.w	r7, r7, #32768	; 0x8000
 801d7aa:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d7ae:	b221      	sxth	r1, r4
 801d7b0:	b235      	sxth	r5, r6
 801d7b2:	f340 80ae 	ble.w	801d912 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d7b6:	1438      	asrs	r0, r7, #16
 801d7b8:	d406      	bmi.n	801d7c8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d7ba:	4288      	cmp	r0, r1
 801d7bc:	da04      	bge.n	801d7c8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d7be:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801d7c2:	d401      	bmi.n	801d7c8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d7c4:	45ac      	cmp	ip, r5
 801d7c6:	db3c      	blt.n	801d842 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 801d7c8:	3b01      	subs	r3, #1
 801d7ca:	444f      	add	r7, r9
 801d7cc:	4452      	add	r2, sl
 801d7ce:	f10e 0e02 	add.w	lr, lr, #2
 801d7d2:	d1f0      	bne.n	801d7b6 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801d7d4:	9b03      	ldr	r3, [sp, #12]
 801d7d6:	2b00      	cmp	r3, #0
 801d7d8:	f340 8098 	ble.w	801d90c <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801d7dc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d7e0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d7e4:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801d7e8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d7ec:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801d7f0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d7f4:	ee76 6a62 	vsub.f32	s13, s12, s5
 801d7f8:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801d7fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d800:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d804:	ee16 2a90 	vmov	r2, s13
 801d808:	3b01      	subs	r3, #1
 801d80a:	9303      	str	r3, [sp, #12]
 801d80c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d80e:	9904      	ldr	r1, [sp, #16]
 801d810:	fb92 f9f3 	sdiv	r9, r2, r3
 801d814:	ee17 2a10 	vmov	r2, s14
 801d818:	eeb0 7a43 	vmov.f32	s14, s6
 801d81c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d820:	fb92 faf3 	sdiv	sl, r2, r3
 801d824:	ee17 2a10 	vmov	r2, s14
 801d828:	eeb0 7a62 	vmov.f32	s14, s5
 801d82c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d830:	eeb0 3a67 	vmov.f32	s6, s15
 801d834:	ee17 7a10 	vmov	r7, s14
 801d838:	eef0 2a46 	vmov.f32	s5, s12
 801d83c:	bf08      	it	eq
 801d83e:	460b      	moveq	r3, r1
 801d840:	e7a7      	b.n	801d792 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801d842:	f103 38ff 	add.w	r8, r3, #4294967295
 801d846:	fb08 7c09 	mla	ip, r8, r9, r7
 801d84a:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801d84e:	d56a      	bpl.n	801d926 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 801d850:	4675      	mov	r5, lr
 801d852:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
 801d856:	e002      	b.n	801d85e <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801d858:	1438      	asrs	r0, r7, #16
 801d85a:	e9db 4602 	ldrd	r4, r6, [fp, #8]
 801d85e:	2800      	cmp	r0, #0
 801d860:	444f      	add	r7, r9
 801d862:	db4b      	blt.n	801d8fc <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801d864:	42a0      	cmp	r0, r4
 801d866:	da49      	bge.n	801d8fc <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801d868:	1413      	asrs	r3, r2, #16
 801d86a:	d447      	bmi.n	801d8fc <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801d86c:	42b3      	cmp	r3, r6
 801d86e:	b224      	sxth	r4, r4
 801d870:	da44      	bge.n	801d8fc <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801d872:	9901      	ldr	r1, [sp, #4]
 801d874:	fb03 1404 	mla	r4, r3, r4, r1
 801d878:	9902      	ldr	r1, [sp, #8]
 801d87a:	5c23      	ldrb	r3, [r4, r0]
 801d87c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801d880:	0e0b      	lsrs	r3, r1, #24
 801d882:	d03b      	beq.n	801d8fc <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801d884:	9805      	ldr	r0, [sp, #20]
 801d886:	f3c1 4807 	ubfx	r8, r1, #16, #8
 801d88a:	fb00 f003 	mul.w	r0, r0, r3
 801d88e:	1c43      	adds	r3, r0, #1
 801d890:	eb03 2320 	add.w	r3, r3, r0, asr #8
 801d894:	121b      	asrs	r3, r3, #8
 801d896:	43d8      	mvns	r0, r3
 801d898:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 801d89c:	b29b      	uxth	r3, r3
 801d89e:	b2c9      	uxtb	r1, r1
 801d8a0:	882e      	ldrh	r6, [r5, #0]
 801d8a2:	fb1c fc03 	smulbb	ip, ip, r3
 801d8a6:	fb18 f803 	smulbb	r8, r8, r3
 801d8aa:	fb11 f303 	smulbb	r3, r1, r3
 801d8ae:	10f4      	asrs	r4, r6, #3
 801d8b0:	1231      	asrs	r1, r6, #8
 801d8b2:	00f6      	lsls	r6, r6, #3
 801d8b4:	b2c0      	uxtb	r0, r0
 801d8b6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801d8ba:	b2f6      	uxtb	r6, r6
 801d8bc:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801d8c0:	fb01 8800 	mla	r8, r1, r0, r8
 801d8c4:	fb04 c400 	mla	r4, r4, r0, ip
 801d8c8:	fb06 3100 	mla	r1, r6, r0, r3
 801d8cc:	fa1f fc88 	uxth.w	ip, r8
 801d8d0:	b289      	uxth	r1, r1
 801d8d2:	b2a4      	uxth	r4, r4
 801d8d4:	1c4e      	adds	r6, r1, #1
 801d8d6:	1c60      	adds	r0, r4, #1
 801d8d8:	f10c 0301 	add.w	r3, ip, #1
 801d8dc:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 801d8e0:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801d8e4:	eb00 2114 	add.w	r1, r0, r4, lsr #8
 801d8e8:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801d8ec:	f3c6 20c4 	ubfx	r0, r6, #11, #5
 801d8f0:	0949      	lsrs	r1, r1, #5
 801d8f2:	4303      	orrs	r3, r0
 801d8f4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801d8f8:	430b      	orrs	r3, r1
 801d8fa:	802b      	strh	r3, [r5, #0]
 801d8fc:	3502      	adds	r5, #2
 801d8fe:	4575      	cmp	r5, lr
 801d900:	4452      	add	r2, sl
 801d902:	d1a9      	bne.n	801d858 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801d904:	9b03      	ldr	r3, [sp, #12]
 801d906:	2b00      	cmp	r3, #0
 801d908:	f73f af68 	bgt.w	801d7dc <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d90c:	b007      	add	sp, #28
 801d90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d912:	f43f af5f 	beq.w	801d7d4 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d916:	f103 38ff 	add.w	r8, r3, #4294967295
 801d91a:	fb08 7c09 	mla	ip, r8, r9, r7
 801d91e:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801d922:	f53f af57 	bmi.w	801d7d4 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d926:	4561      	cmp	r1, ip
 801d928:	dd5c      	ble.n	801d9e4 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d92a:	fb08 280a 	mla	r8, r8, sl, r2
 801d92e:	ea5f 4828 	movs.w	r8, r8, asr #16
 801d932:	d457      	bmi.n	801d9e4 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d934:	45a8      	cmp	r8, r5
 801d936:	da55      	bge.n	801d9e4 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d938:	2b00      	cmp	r3, #0
 801d93a:	f77f af4b 	ble.w	801d7d4 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d93e:	eb0e 0843 	add.w	r8, lr, r3, lsl #1
 801d942:	e001      	b.n	801d948 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801d944:	f9bb 1008 	ldrsh.w	r1, [fp, #8]
 801d948:	9801      	ldr	r0, [sp, #4]
 801d94a:	1413      	asrs	r3, r2, #16
 801d94c:	fb01 0303 	mla	r3, r1, r3, r0
 801d950:	1439      	asrs	r1, r7, #16
 801d952:	5c5b      	ldrb	r3, [r3, r1]
 801d954:	9902      	ldr	r1, [sp, #8]
 801d956:	444f      	add	r7, r9
 801d958:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801d95c:	4452      	add	r2, sl
 801d95e:	0e18      	lsrs	r0, r3, #24
 801d960:	d03b      	beq.n	801d9da <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801d962:	9905      	ldr	r1, [sp, #20]
 801d964:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 801d968:	fb01 f100 	mul.w	r1, r1, r0
 801d96c:	1c48      	adds	r0, r1, #1
 801d96e:	eb00 2021 	add.w	r0, r0, r1, asr #8
 801d972:	1200      	asrs	r0, r0, #8
 801d974:	43c1      	mvns	r1, r0
 801d976:	f3c3 2607 	ubfx	r6, r3, #8, #8
 801d97a:	b280      	uxth	r0, r0
 801d97c:	b2db      	uxtb	r3, r3
 801d97e:	f8be 5000 	ldrh.w	r5, [lr]
 801d982:	fb16 f600 	smulbb	r6, r6, r0
 801d986:	fb1c fc00 	smulbb	ip, ip, r0
 801d98a:	fb13 f300 	smulbb	r3, r3, r0
 801d98e:	122c      	asrs	r4, r5, #8
 801d990:	10e8      	asrs	r0, r5, #3
 801d992:	00ed      	lsls	r5, r5, #3
 801d994:	b2c9      	uxtb	r1, r1
 801d996:	b2ed      	uxtb	r5, r5
 801d998:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801d99c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801d9a0:	fb00 6001 	mla	r0, r0, r1, r6
 801d9a4:	fb05 3301 	mla	r3, r5, r1, r3
 801d9a8:	fb04 c401 	mla	r4, r4, r1, ip
 801d9ac:	b280      	uxth	r0, r0
 801d9ae:	b2a4      	uxth	r4, r4
 801d9b0:	b29b      	uxth	r3, r3
 801d9b2:	1c65      	adds	r5, r4, #1
 801d9b4:	1c5e      	adds	r6, r3, #1
 801d9b6:	1c41      	adds	r1, r0, #1
 801d9b8:	eb05 2414 	add.w	r4, r5, r4, lsr #8
 801d9bc:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801d9c0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801d9c4:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801d9c8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801d9cc:	0949      	lsrs	r1, r1, #5
 801d9ce:	431c      	orrs	r4, r3
 801d9d0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801d9d4:	430c      	orrs	r4, r1
 801d9d6:	f8ae 4000 	strh.w	r4, [lr]
 801d9da:	f10e 0e02 	add.w	lr, lr, #2
 801d9de:	45c6      	cmp	lr, r8
 801d9e0:	d1b0      	bne.n	801d944 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801d9e2:	e6f7      	b.n	801d7d4 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d9e4:	2b00      	cmp	r3, #0
 801d9e6:	f77f aef5 	ble.w	801d7d4 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d9ea:	4675      	mov	r5, lr
 801d9ec:	1438      	asrs	r0, r7, #16
 801d9ee:	e730      	b.n	801d852 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>

0801d9f0 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d9f0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801d9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9f8:	b085      	sub	sp, #20
 801d9fa:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801d9fe:	e9dd 2113 	ldrd	r2, r1, [sp, #76]	; 0x4c
 801da02:	e9dd 0b15 	ldrd	r0, fp, [sp, #84]	; 0x54
 801da06:	6854      	ldr	r4, [r2, #4]
 801da08:	e9dd 9a11 	ldrd	r9, sl, [sp, #68]	; 0x44
 801da0c:	fb04 1000 	mla	r0, r4, r0, r1
 801da10:	6814      	ldr	r4, [r2, #0]
 801da12:	e9db 2500 	ldrd	r2, r5, [fp]
 801da16:	eb04 0e40 	add.w	lr, r4, r0, lsl #1
 801da1a:	1d28      	adds	r0, r5, #4
 801da1c:	9001      	str	r0, [sp, #4]
 801da1e:	9200      	str	r2, [sp, #0]
 801da20:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
 801da24:	9802      	ldr	r0, [sp, #8]
 801da26:	2800      	cmp	r0, #0
 801da28:	dc03      	bgt.n	801da32 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801da2a:	9803      	ldr	r0, [sp, #12]
 801da2c:	2800      	cmp	r0, #0
 801da2e:	f340 80b8 	ble.w	801dba2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 801da32:	e9db 5602 	ldrd	r5, r6, [fp, #8]
 801da36:	2b00      	cmp	r3, #0
 801da38:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801da3c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801da40:	b228      	sxth	r0, r5
 801da42:	b237      	sxth	r7, r6
 801da44:	f340 80b0 	ble.w	801dba8 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801da48:	140c      	asrs	r4, r1, #16
 801da4a:	d406      	bmi.n	801da5a <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801da4c:	4284      	cmp	r4, r0
 801da4e:	da04      	bge.n	801da5a <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801da50:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801da54:	d401      	bmi.n	801da5a <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801da56:	45bc      	cmp	ip, r7
 801da58:	db3c      	blt.n	801dad4 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801da5a:	3b01      	subs	r3, #1
 801da5c:	4449      	add	r1, r9
 801da5e:	4452      	add	r2, sl
 801da60:	f10e 0e02 	add.w	lr, lr, #2
 801da64:	d1f0      	bne.n	801da48 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801da66:	9b02      	ldr	r3, [sp, #8]
 801da68:	2b00      	cmp	r3, #0
 801da6a:	f340 809a 	ble.w	801dba2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 801da6e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801da72:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801da76:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801da7a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801da7e:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801da82:	ee61 7a27 	vmul.f32	s15, s2, s15
 801da86:	ee76 6a62 	vsub.f32	s13, s12, s5
 801da8a:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801da8e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801da92:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801da96:	ee16 2a90 	vmov	r2, s13
 801da9a:	3b01      	subs	r3, #1
 801da9c:	9302      	str	r3, [sp, #8]
 801da9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801daa0:	9803      	ldr	r0, [sp, #12]
 801daa2:	fb92 f9f3 	sdiv	r9, r2, r3
 801daa6:	ee17 2a10 	vmov	r2, s14
 801daaa:	eeb0 7a43 	vmov.f32	s14, s6
 801daae:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801dab2:	fb92 faf3 	sdiv	sl, r2, r3
 801dab6:	ee17 2a10 	vmov	r2, s14
 801daba:	eeb0 7a62 	vmov.f32	s14, s5
 801dabe:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801dac2:	eeb0 3a67 	vmov.f32	s6, s15
 801dac6:	ee17 1a10 	vmov	r1, s14
 801daca:	eef0 2a46 	vmov.f32	s5, s12
 801dace:	bf08      	it	eq
 801dad0:	4603      	moveq	r3, r0
 801dad2:	e7a7      	b.n	801da24 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801dad4:	f103 38ff 	add.w	r8, r3, #4294967295
 801dad8:	fb08 1c09 	mla	ip, r8, r9, r1
 801dadc:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801dae0:	d56c      	bpl.n	801dbbc <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1cc>
 801dae2:	4677      	mov	r7, lr
 801dae4:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
 801dae8:	e002      	b.n	801daf0 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801daea:	140c      	asrs	r4, r1, #16
 801daec:	e9db 5602 	ldrd	r5, r6, [fp, #8]
 801daf0:	2c00      	cmp	r4, #0
 801daf2:	db4d      	blt.n	801db90 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801daf4:	42ac      	cmp	r4, r5
 801daf6:	da4b      	bge.n	801db90 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801daf8:	1413      	asrs	r3, r2, #16
 801dafa:	d449      	bmi.n	801db90 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801dafc:	42b3      	cmp	r3, r6
 801dafe:	b22d      	sxth	r5, r5
 801db00:	da46      	bge.n	801db90 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801db02:	9800      	ldr	r0, [sp, #0]
 801db04:	fb03 0505 	mla	r5, r3, r5, r0
 801db08:	9801      	ldr	r0, [sp, #4]
 801db0a:	5d2b      	ldrb	r3, [r5, r4]
 801db0c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801db10:	0e18      	lsrs	r0, r3, #24
 801db12:	28ff      	cmp	r0, #255	; 0xff
 801db14:	f000 80c0 	beq.w	801dc98 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801db18:	b2c4      	uxtb	r4, r0
 801db1a:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 801db1e:	f3c3 2607 	ubfx	r6, r3, #8, #8
 801db22:	b2a5      	uxth	r5, r4
 801db24:	b2db      	uxtb	r3, r3
 801db26:	b398      	cbz	r0, 801db90 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801db28:	43e4      	mvns	r4, r4
 801db2a:	f8b7 8000 	ldrh.w	r8, [r7]
 801db2e:	fb16 f605 	smulbb	r6, r6, r5
 801db32:	fb1c fc05 	smulbb	ip, ip, r5
 801db36:	fb13 f505 	smulbb	r5, r3, r5
 801db3a:	ea4f 2028 	mov.w	r0, r8, asr #8
 801db3e:	b2e3      	uxtb	r3, r4
 801db40:	ea4f 04e8 	mov.w	r4, r8, asr #3
 801db44:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801db48:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801db4c:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801db50:	fa5f f888 	uxtb.w	r8, r8
 801db54:	fb04 6403 	mla	r4, r4, r3, r6
 801db58:	fb00 cc03 	mla	ip, r0, r3, ip
 801db5c:	fb08 5303 	mla	r3, r8, r3, r5
 801db60:	fa1f fc8c 	uxth.w	ip, ip
 801db64:	b298      	uxth	r0, r3
 801db66:	b2a5      	uxth	r5, r4
 801db68:	f10c 0301 	add.w	r3, ip, #1
 801db6c:	1c44      	adds	r4, r0, #1
 801db6e:	1c6e      	adds	r6, r5, #1
 801db70:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 801db74:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801db78:	eb06 2015 	add.w	r0, r6, r5, lsr #8
 801db7c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801db80:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801db84:	0940      	lsrs	r0, r0, #5
 801db86:	4323      	orrs	r3, r4
 801db88:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801db8c:	4303      	orrs	r3, r0
 801db8e:	803b      	strh	r3, [r7, #0]
 801db90:	3702      	adds	r7, #2
 801db92:	4577      	cmp	r7, lr
 801db94:	4449      	add	r1, r9
 801db96:	4452      	add	r2, sl
 801db98:	d1a7      	bne.n	801daea <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801db9a:	9b02      	ldr	r3, [sp, #8]
 801db9c:	2b00      	cmp	r3, #0
 801db9e:	f73f af66 	bgt.w	801da6e <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801dba2:	b005      	add	sp, #20
 801dba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dba8:	f43f af5d 	beq.w	801da66 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801dbac:	f103 38ff 	add.w	r8, r3, #4294967295
 801dbb0:	fb08 1c09 	mla	ip, r8, r9, r1
 801dbb4:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801dbb8:	f53f af55 	bmi.w	801da66 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801dbbc:	4560      	cmp	r0, ip
 801dbbe:	dd65      	ble.n	801dc8c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801dbc0:	fb08 280a 	mla	r8, r8, sl, r2
 801dbc4:	ea5f 4828 	movs.w	r8, r8, asr #16
 801dbc8:	d460      	bmi.n	801dc8c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801dbca:	45b8      	cmp	r8, r7
 801dbcc:	da5e      	bge.n	801dc8c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801dbce:	2b00      	cmp	r3, #0
 801dbd0:	f77f af49 	ble.w	801da66 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801dbd4:	eb0e 0843 	add.w	r8, lr, r3, lsl #1
 801dbd8:	e03f      	b.n	801dc5a <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801dbda:	b2f0      	uxtb	r0, r6
 801dbdc:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 801dbe0:	f3c3 2707 	ubfx	r7, r3, #8, #8
 801dbe4:	b284      	uxth	r4, r0
 801dbe6:	b2db      	uxtb	r3, r3
 801dbe8:	b376      	cbz	r6, 801dc48 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801dbea:	43c0      	mvns	r0, r0
 801dbec:	f8be 6000 	ldrh.w	r6, [lr]
 801dbf0:	fb17 f704 	smulbb	r7, r7, r4
 801dbf4:	fb1c fc04 	smulbb	ip, ip, r4
 801dbf8:	fb13 f304 	smulbb	r3, r3, r4
 801dbfc:	1235      	asrs	r5, r6, #8
 801dbfe:	10f4      	asrs	r4, r6, #3
 801dc00:	00f6      	lsls	r6, r6, #3
 801dc02:	b2c0      	uxtb	r0, r0
 801dc04:	b2f6      	uxtb	r6, r6
 801dc06:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801dc0a:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801dc0e:	fb04 7400 	mla	r4, r4, r0, r7
 801dc12:	fb06 3300 	mla	r3, r6, r0, r3
 801dc16:	fb05 c500 	mla	r5, r5, r0, ip
 801dc1a:	b2a4      	uxth	r4, r4
 801dc1c:	b2ad      	uxth	r5, r5
 801dc1e:	b29b      	uxth	r3, r3
 801dc20:	1c6e      	adds	r6, r5, #1
 801dc22:	1c5f      	adds	r7, r3, #1
 801dc24:	1c60      	adds	r0, r4, #1
 801dc26:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801dc2a:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801dc2e:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801dc32:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801dc36:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801dc3a:	0940      	lsrs	r0, r0, #5
 801dc3c:	432b      	orrs	r3, r5
 801dc3e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801dc42:	4303      	orrs	r3, r0
 801dc44:	f8ae 3000 	strh.w	r3, [lr]
 801dc48:	f10e 0e02 	add.w	lr, lr, #2
 801dc4c:	45c6      	cmp	lr, r8
 801dc4e:	4449      	add	r1, r9
 801dc50:	4452      	add	r2, sl
 801dc52:	f43f af08 	beq.w	801da66 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801dc56:	f9bb 0008 	ldrsh.w	r0, [fp, #8]
 801dc5a:	9c00      	ldr	r4, [sp, #0]
 801dc5c:	1413      	asrs	r3, r2, #16
 801dc5e:	fb00 4303 	mla	r3, r0, r3, r4
 801dc62:	1408      	asrs	r0, r1, #16
 801dc64:	5c1b      	ldrb	r3, [r3, r0]
 801dc66:	9801      	ldr	r0, [sp, #4]
 801dc68:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801dc6c:	0e1e      	lsrs	r6, r3, #24
 801dc6e:	2eff      	cmp	r6, #255	; 0xff
 801dc70:	d1b3      	bne.n	801dbda <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801dc72:	0958      	lsrs	r0, r3, #5
 801dc74:	f400 64fc 	and.w	r4, r0, #2016	; 0x7e0
 801dc78:	480d      	ldr	r0, [pc, #52]	; (801dcb0 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801dc7a:	ea00 2013 	and.w	r0, r0, r3, lsr #8
 801dc7e:	4320      	orrs	r0, r4
 801dc80:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801dc84:	4303      	orrs	r3, r0
 801dc86:	f8ae 3000 	strh.w	r3, [lr]
 801dc8a:	e7dd      	b.n	801dc48 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801dc8c:	2b00      	cmp	r3, #0
 801dc8e:	f77f aeea 	ble.w	801da66 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801dc92:	4677      	mov	r7, lr
 801dc94:	140c      	asrs	r4, r1, #16
 801dc96:	e725      	b.n	801dae4 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801dc98:	0958      	lsrs	r0, r3, #5
 801dc9a:	f400 64fc 	and.w	r4, r0, #2016	; 0x7e0
 801dc9e:	4804      	ldr	r0, [pc, #16]	; (801dcb0 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801dca0:	ea00 2013 	and.w	r0, r0, r3, lsr #8
 801dca4:	4320      	orrs	r0, r4
 801dca6:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801dcaa:	4303      	orrs	r3, r0
 801dcac:	803b      	strh	r3, [r7, #0]
 801dcae:	e76f      	b.n	801db90 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801dcb0:	fffff800 	.word	0xfffff800

0801dcb4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dcb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dcb8:	b089      	sub	sp, #36	; 0x24
 801dcba:	f89d 506c 	ldrb.w	r5, [sp, #108]	; 0x6c
 801dcbe:	9104      	str	r1, [sp, #16]
 801dcc0:	ea6f 0c05 	mvn.w	ip, r5
 801dcc4:	e9dd 4117 	ldrd	r4, r1, [sp, #92]	; 0x5c
 801dcc8:	e9dd 6715 	ldrd	r6, r7, [sp, #84]	; 0x54
 801dccc:	6860      	ldr	r0, [r4, #4]
 801dcce:	9205      	str	r2, [sp, #20]
 801dcd0:	e9dd 2b19 	ldrd	r2, fp, [sp, #100]	; 0x64
 801dcd4:	fb00 1102 	mla	r1, r0, r2, r1
 801dcd8:	6824      	ldr	r4, [r4, #0]
 801dcda:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801dcde:	4421      	add	r1, r4
 801dce0:	f8db 4004 	ldr.w	r4, [fp, #4]
 801dce4:	f8db 2000 	ldr.w	r2, [fp]
 801dce8:	3404      	adds	r4, #4
 801dcea:	fa5f fc8c 	uxtb.w	ip, ip
 801dcee:	fa1f f985 	uxth.w	r9, r5
 801dcf2:	9407      	str	r4, [sp, #28]
 801dcf4:	9202      	str	r2, [sp, #8]
 801dcf6:	e9dd 2013 	ldrd	r2, r0, [sp, #76]	; 0x4c
 801dcfa:	9c04      	ldr	r4, [sp, #16]
 801dcfc:	2c00      	cmp	r4, #0
 801dcfe:	dc03      	bgt.n	801dd08 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801dd00:	9c05      	ldr	r4, [sp, #20]
 801dd02:	2c00      	cmp	r4, #0
 801dd04:	f340 80b1 	ble.w	801de6a <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801dd08:	e9db e802 	ldrd	lr, r8, [fp, #8]
 801dd0c:	2b00      	cmp	r3, #0
 801dd0e:	fa0f f588 	sxth.w	r5, r8
 801dd12:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801dd16:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 801dd1a:	fa0f f48e 	sxth.w	r4, lr
 801dd1e:	9503      	str	r5, [sp, #12]
 801dd20:	f340 80a6 	ble.w	801de70 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801dd24:	46f2      	mov	sl, lr
 801dd26:	9401      	str	r4, [sp, #4]
 801dd28:	1415      	asrs	r5, r2, #16
 801dd2a:	d408      	bmi.n	801dd3e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801dd2c:	9c01      	ldr	r4, [sp, #4]
 801dd2e:	42a5      	cmp	r5, r4
 801dd30:	da05      	bge.n	801dd3e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801dd32:	ea5f 4e20 	movs.w	lr, r0, asr #16
 801dd36:	d402      	bmi.n	801dd3e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801dd38:	9c03      	ldr	r4, [sp, #12]
 801dd3a:	45a6      	cmp	lr, r4
 801dd3c:	db3e      	blt.n	801ddbc <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801dd3e:	3b01      	subs	r3, #1
 801dd40:	4432      	add	r2, r6
 801dd42:	4438      	add	r0, r7
 801dd44:	f101 0103 	add.w	r1, r1, #3
 801dd48:	d1ee      	bne.n	801dd28 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801dd4a:	9b04      	ldr	r3, [sp, #16]
 801dd4c:	2b00      	cmp	r3, #0
 801dd4e:	f340 808c 	ble.w	801de6a <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801dd52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dd56:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dd5a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dd5e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801dd62:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dd66:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801dd6a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dd6e:	ee76 6a62 	vsub.f32	s13, s12, s5
 801dd72:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801dd76:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dd7a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801dd7e:	ee16 2a90 	vmov	r2, s13
 801dd82:	3b01      	subs	r3, #1
 801dd84:	9304      	str	r3, [sp, #16]
 801dd86:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801dd88:	9c05      	ldr	r4, [sp, #20]
 801dd8a:	fb92 f6f3 	sdiv	r6, r2, r3
 801dd8e:	ee17 2a10 	vmov	r2, s14
 801dd92:	eeb0 7a43 	vmov.f32	s14, s6
 801dd96:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801dd9a:	ee17 0a10 	vmov	r0, s14
 801dd9e:	eeb0 7a62 	vmov.f32	s14, s5
 801dda2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801dda6:	fb92 f7f3 	sdiv	r7, r2, r3
 801ddaa:	eeb0 3a67 	vmov.f32	s6, s15
 801ddae:	ee17 2a10 	vmov	r2, s14
 801ddb2:	eef0 2a46 	vmov.f32	s5, s12
 801ddb6:	bf08      	it	eq
 801ddb8:	4623      	moveq	r3, r4
 801ddba:	e79e      	b.n	801dcfa <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801ddbc:	9506      	str	r5, [sp, #24]
 801ddbe:	1e5d      	subs	r5, r3, #1
 801ddc0:	46d6      	mov	lr, sl
 801ddc2:	fb05 2a06 	mla	sl, r5, r6, r2
 801ddc6:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801ddca:	9c01      	ldr	r4, [sp, #4]
 801ddcc:	9501      	str	r5, [sp, #4]
 801ddce:	d559      	bpl.n	801de84 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801ddd0:	460c      	mov	r4, r1
 801ddd2:	9d06      	ldr	r5, [sp, #24]
 801ddd4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ddd8:	4419      	add	r1, r3
 801ddda:	4673      	mov	r3, lr
 801dddc:	46b6      	mov	lr, r6
 801ddde:	4646      	mov	r6, r8
 801dde0:	e002      	b.n	801dde8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801dde2:	1415      	asrs	r5, r2, #16
 801dde4:	e9db 3602 	ldrd	r3, r6, [fp, #8]
 801dde8:	2d00      	cmp	r5, #0
 801ddea:	4472      	add	r2, lr
 801ddec:	db35      	blt.n	801de5a <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801ddee:	429d      	cmp	r5, r3
 801ddf0:	da33      	bge.n	801de5a <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801ddf2:	ea5f 4820 	movs.w	r8, r0, asr #16
 801ddf6:	d430      	bmi.n	801de5a <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801ddf8:	45b0      	cmp	r8, r6
 801ddfa:	b21b      	sxth	r3, r3
 801ddfc:	da2d      	bge.n	801de5a <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801ddfe:	9e02      	ldr	r6, [sp, #8]
 801de00:	fb08 6303 	mla	r3, r8, r3, r6
 801de04:	7826      	ldrb	r6, [r4, #0]
 801de06:	5d5b      	ldrb	r3, [r3, r5]
 801de08:	fb16 f80c 	smulbb	r8, r6, ip
 801de0c:	9d07      	ldr	r5, [sp, #28]
 801de0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801de12:	5cee      	ldrb	r6, [r5, r3]
 801de14:	442b      	add	r3, r5
 801de16:	fb06 8609 	mla	r6, r6, r9, r8
 801de1a:	b2b6      	uxth	r6, r6
 801de1c:	7865      	ldrb	r5, [r4, #1]
 801de1e:	f106 0801 	add.w	r8, r6, #1
 801de22:	eb08 2616 	add.w	r6, r8, r6, lsr #8
 801de26:	1236      	asrs	r6, r6, #8
 801de28:	fb15 f80c 	smulbb	r8, r5, ip
 801de2c:	7026      	strb	r6, [r4, #0]
 801de2e:	785d      	ldrb	r5, [r3, #1]
 801de30:	78a6      	ldrb	r6, [r4, #2]
 801de32:	fb05 8509 	mla	r5, r5, r9, r8
 801de36:	b2ad      	uxth	r5, r5
 801de38:	f105 0801 	add.w	r8, r5, #1
 801de3c:	eb08 2515 	add.w	r5, r8, r5, lsr #8
 801de40:	122d      	asrs	r5, r5, #8
 801de42:	fb16 f60c 	smulbb	r6, r6, ip
 801de46:	7065      	strb	r5, [r4, #1]
 801de48:	789b      	ldrb	r3, [r3, #2]
 801de4a:	fb03 6309 	mla	r3, r3, r9, r6
 801de4e:	b29b      	uxth	r3, r3
 801de50:	1c5d      	adds	r5, r3, #1
 801de52:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801de56:	121b      	asrs	r3, r3, #8
 801de58:	70a3      	strb	r3, [r4, #2]
 801de5a:	3403      	adds	r4, #3
 801de5c:	428c      	cmp	r4, r1
 801de5e:	4438      	add	r0, r7
 801de60:	d1bf      	bne.n	801dde2 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
 801de62:	9b04      	ldr	r3, [sp, #16]
 801de64:	2b00      	cmp	r3, #0
 801de66:	f73f af74 	bgt.w	801dd52 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801de6a:	b009      	add	sp, #36	; 0x24
 801de6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de70:	f43f af6b 	beq.w	801dd4a <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801de74:	1e5d      	subs	r5, r3, #1
 801de76:	fb05 2a06 	mla	sl, r5, r6, r2
 801de7a:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801de7e:	9501      	str	r5, [sp, #4]
 801de80:	f53f af63 	bmi.w	801dd4a <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801de84:	4554      	cmp	r4, sl
 801de86:	dd54      	ble.n	801df32 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801de88:	9d01      	ldr	r5, [sp, #4]
 801de8a:	fb05 0507 	mla	r5, r5, r7, r0
 801de8e:	ea5f 4a25 	movs.w	sl, r5, asr #16
 801de92:	d44e      	bmi.n	801df32 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801de94:	9d03      	ldr	r5, [sp, #12]
 801de96:	45aa      	cmp	sl, r5
 801de98:	da4b      	bge.n	801df32 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801de9a:	2b00      	cmp	r3, #0
 801de9c:	f77f af55 	ble.w	801dd4a <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801dea0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dea4:	eb01 0e03 	add.w	lr, r1, r3
 801dea8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801deac:	3103      	adds	r1, #3
 801deae:	e002      	b.n	801deb6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801deb0:	f9bb 4008 	ldrsh.w	r4, [fp, #8]
 801deb4:	3103      	adds	r1, #3
 801deb6:	9d02      	ldr	r5, [sp, #8]
 801deb8:	1403      	asrs	r3, r0, #16
 801deba:	fb04 5303 	mla	r3, r4, r3, r5
 801debe:	1415      	asrs	r5, r2, #16
 801dec0:	f811 4c03 	ldrb.w	r4, [r1, #-3]
 801dec4:	5d5b      	ldrb	r3, [r3, r5]
 801dec6:	fb14 f40c 	smulbb	r4, r4, ip
 801deca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dece:	f818 5003 	ldrb.w	r5, [r8, r3]
 801ded2:	4443      	add	r3, r8
 801ded4:	fb05 4509 	mla	r5, r5, r9, r4
 801ded8:	b2ad      	uxth	r5, r5
 801deda:	f105 0a01 	add.w	sl, r5, #1
 801dede:	f811 4c02 	ldrb.w	r4, [r1, #-2]
 801dee2:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801dee6:	122d      	asrs	r5, r5, #8
 801dee8:	fb14 f40c 	smulbb	r4, r4, ip
 801deec:	f801 5c03 	strb.w	r5, [r1, #-3]
 801def0:	785d      	ldrb	r5, [r3, #1]
 801def2:	f811 ac01 	ldrb.w	sl, [r1, #-1]
 801def6:	fb05 4409 	mla	r4, r5, r9, r4
 801defa:	b2a4      	uxth	r4, r4
 801defc:	1c65      	adds	r5, r4, #1
 801defe:	eb05 2414 	add.w	r4, r5, r4, lsr #8
 801df02:	1224      	asrs	r4, r4, #8
 801df04:	fb1a fa0c 	smulbb	sl, sl, ip
 801df08:	f801 4c02 	strb.w	r4, [r1, #-2]
 801df0c:	789b      	ldrb	r3, [r3, #2]
 801df0e:	458e      	cmp	lr, r1
 801df10:	fb03 aa09 	mla	sl, r3, r9, sl
 801df14:	fa1f fa8a 	uxth.w	sl, sl
 801df18:	f10a 0301 	add.w	r3, sl, #1
 801df1c:	eb03 2a1a 	add.w	sl, r3, sl, lsr #8
 801df20:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801df24:	4438      	add	r0, r7
 801df26:	4432      	add	r2, r6
 801df28:	f801 ac01 	strb.w	sl, [r1, #-1]
 801df2c:	d1c0      	bne.n	801deb0 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801df2e:	4671      	mov	r1, lr
 801df30:	e70b      	b.n	801dd4a <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801df32:	2b00      	cmp	r3, #0
 801df34:	f77f af09 	ble.w	801dd4a <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801df38:	1415      	asrs	r5, r2, #16
 801df3a:	460c      	mov	r4, r1
 801df3c:	9506      	str	r5, [sp, #24]
 801df3e:	e749      	b.n	801ddd4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>

0801df40 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801df40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df44:	4689      	mov	r9, r1
 801df46:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801df4a:	46c8      	mov	r8, r9
 801df4c:	b087      	sub	sp, #28
 801df4e:	e9dd 1015 	ldrd	r1, r0, [sp, #84]	; 0x54
 801df52:	684c      	ldr	r4, [r1, #4]
 801df54:	9203      	str	r2, [sp, #12]
 801df56:	e9dd 2c17 	ldrd	r2, ip, [sp, #92]	; 0x5c
 801df5a:	fb04 0202 	mla	r2, r4, r2, r0
 801df5e:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	; 0x4c
 801df62:	680d      	ldr	r5, [r1, #0]
 801df64:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801df68:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 801df6c:	f8dc 2000 	ldr.w	r2, [ip]
 801df70:	4428      	add	r0, r5
 801df72:	f104 0b04 	add.w	fp, r4, #4
 801df76:	9205      	str	r2, [sp, #20]
 801df78:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801df7c:	f1b8 0f00 	cmp.w	r8, #0
 801df80:	dc03      	bgt.n	801df8a <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801df82:	9c03      	ldr	r4, [sp, #12]
 801df84:	2c00      	cmp	r4, #0
 801df86:	f340 808d 	ble.w	801e0a4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801df8a:	e9dc ea02 	ldrd	lr, sl, [ip, #8]
 801df8e:	2b00      	cmp	r3, #0
 801df90:	fa0f f58a 	sxth.w	r5, sl
 801df94:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801df98:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801df9c:	fa0f f48e 	sxth.w	r4, lr
 801dfa0:	9502      	str	r5, [sp, #8]
 801dfa2:	f340 8082 	ble.w	801e0aa <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801dfa6:	46f1      	mov	r9, lr
 801dfa8:	9401      	str	r4, [sp, #4]
 801dfaa:	1415      	asrs	r5, r2, #16
 801dfac:	d408      	bmi.n	801dfc0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801dfae:	9c01      	ldr	r4, [sp, #4]
 801dfb0:	42a5      	cmp	r5, r4
 801dfb2:	da05      	bge.n	801dfc0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801dfb4:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801dfb8:	d402      	bmi.n	801dfc0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801dfba:	9c02      	ldr	r4, [sp, #8]
 801dfbc:	45a6      	cmp	lr, r4
 801dfbe:	db3b      	blt.n	801e038 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801dfc0:	3b01      	subs	r3, #1
 801dfc2:	4432      	add	r2, r6
 801dfc4:	4439      	add	r1, r7
 801dfc6:	f100 0003 	add.w	r0, r0, #3
 801dfca:	d1ee      	bne.n	801dfaa <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801dfcc:	f1b8 0f00 	cmp.w	r8, #0
 801dfd0:	dd68      	ble.n	801e0a4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801dfd2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dfd6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dfda:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801dfde:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dfe2:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801dfe6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dfea:	ee76 6a62 	vsub.f32	s13, s12, s5
 801dfee:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801dff2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dff6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801dffa:	ee16 2a90 	vmov	r2, s13
 801dffe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e000:	9c03      	ldr	r4, [sp, #12]
 801e002:	fb92 f6f3 	sdiv	r6, r2, r3
 801e006:	ee17 2a10 	vmov	r2, s14
 801e00a:	eeb0 7a43 	vmov.f32	s14, s6
 801e00e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e012:	ee17 1a10 	vmov	r1, s14
 801e016:	eeb0 7a62 	vmov.f32	s14, s5
 801e01a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e01e:	f1b8 0801 	subs.w	r8, r8, #1
 801e022:	fb92 f7f3 	sdiv	r7, r2, r3
 801e026:	eeb0 3a67 	vmov.f32	s6, s15
 801e02a:	ee17 2a10 	vmov	r2, s14
 801e02e:	eef0 2a46 	vmov.f32	s5, s12
 801e032:	bf08      	it	eq
 801e034:	4623      	moveq	r3, r4
 801e036:	e7a1      	b.n	801df7c <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e038:	9c01      	ldr	r4, [sp, #4]
 801e03a:	9501      	str	r5, [sp, #4]
 801e03c:	1e5d      	subs	r5, r3, #1
 801e03e:	46ce      	mov	lr, r9
 801e040:	fb06 2905 	mla	r9, r6, r5, r2
 801e044:	ea5f 4929 	movs.w	r9, r9, asr #16
 801e048:	9504      	str	r5, [sp, #16]
 801e04a:	d536      	bpl.n	801e0ba <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801e04c:	4604      	mov	r4, r0
 801e04e:	9d01      	ldr	r5, [sp, #4]
 801e050:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e054:	4418      	add	r0, r3
 801e056:	4673      	mov	r3, lr
 801e058:	46b6      	mov	lr, r6
 801e05a:	4656      	mov	r6, sl
 801e05c:	e002      	b.n	801e064 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801e05e:	1415      	asrs	r5, r2, #16
 801e060:	e9dc 3602 	ldrd	r3, r6, [ip, #8]
 801e064:	2d00      	cmp	r5, #0
 801e066:	4472      	add	r2, lr
 801e068:	db15      	blt.n	801e096 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e06a:	429d      	cmp	r5, r3
 801e06c:	da13      	bge.n	801e096 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e06e:	ea5f 4921 	movs.w	r9, r1, asr #16
 801e072:	d410      	bmi.n	801e096 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e074:	45b1      	cmp	r9, r6
 801e076:	da0e      	bge.n	801e096 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e078:	9e05      	ldr	r6, [sp, #20]
 801e07a:	b21b      	sxth	r3, r3
 801e07c:	fb09 6303 	mla	r3, r9, r3, r6
 801e080:	5d5b      	ldrb	r3, [r3, r5]
 801e082:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e086:	f81b 5003 	ldrb.w	r5, [fp, r3]
 801e08a:	445b      	add	r3, fp
 801e08c:	7025      	strb	r5, [r4, #0]
 801e08e:	785d      	ldrb	r5, [r3, #1]
 801e090:	7065      	strb	r5, [r4, #1]
 801e092:	789b      	ldrb	r3, [r3, #2]
 801e094:	70a3      	strb	r3, [r4, #2]
 801e096:	3403      	adds	r4, #3
 801e098:	4284      	cmp	r4, r0
 801e09a:	4439      	add	r1, r7
 801e09c:	d1df      	bne.n	801e05e <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801e09e:	f1b8 0f00 	cmp.w	r8, #0
 801e0a2:	dc96      	bgt.n	801dfd2 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e0a4:	b007      	add	sp, #28
 801e0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e0aa:	d08f      	beq.n	801dfcc <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e0ac:	1e5d      	subs	r5, r3, #1
 801e0ae:	fb06 2905 	mla	r9, r6, r5, r2
 801e0b2:	ea5f 4929 	movs.w	r9, r9, asr #16
 801e0b6:	9504      	str	r5, [sp, #16]
 801e0b8:	d488      	bmi.n	801dfcc <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e0ba:	45a1      	cmp	r9, r4
 801e0bc:	da2d      	bge.n	801e11a <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801e0be:	9d04      	ldr	r5, [sp, #16]
 801e0c0:	fb07 1505 	mla	r5, r7, r5, r1
 801e0c4:	ea5f 4925 	movs.w	r9, r5, asr #16
 801e0c8:	d427      	bmi.n	801e11a <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801e0ca:	9d02      	ldr	r5, [sp, #8]
 801e0cc:	454d      	cmp	r5, r9
 801e0ce:	dd24      	ble.n	801e11a <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801e0d0:	2b00      	cmp	r3, #0
 801e0d2:	f77f af7b 	ble.w	801dfcc <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e0d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e0da:	18c5      	adds	r5, r0, r3
 801e0dc:	f8dd e014 	ldr.w	lr, [sp, #20]
 801e0e0:	3003      	adds	r0, #3
 801e0e2:	e002      	b.n	801e0ea <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801e0e4:	f9bc 4008 	ldrsh.w	r4, [ip, #8]
 801e0e8:	3003      	adds	r0, #3
 801e0ea:	140b      	asrs	r3, r1, #16
 801e0ec:	fb04 e303 	mla	r3, r4, r3, lr
 801e0f0:	1414      	asrs	r4, r2, #16
 801e0f2:	5d1b      	ldrb	r3, [r3, r4]
 801e0f4:	4285      	cmp	r5, r0
 801e0f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e0fa:	f81b 4003 	ldrb.w	r4, [fp, r3]
 801e0fe:	445b      	add	r3, fp
 801e100:	f800 4c03 	strb.w	r4, [r0, #-3]
 801e104:	785c      	ldrb	r4, [r3, #1]
 801e106:	4439      	add	r1, r7
 801e108:	f800 4c02 	strb.w	r4, [r0, #-2]
 801e10c:	789b      	ldrb	r3, [r3, #2]
 801e10e:	4432      	add	r2, r6
 801e110:	f800 3c01 	strb.w	r3, [r0, #-1]
 801e114:	d1e6      	bne.n	801e0e4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e116:	4628      	mov	r0, r5
 801e118:	e758      	b.n	801dfcc <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e11a:	2b00      	cmp	r3, #0
 801e11c:	f77f af56 	ble.w	801dfcc <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e120:	1415      	asrs	r5, r2, #16
 801e122:	4604      	mov	r4, r0
 801e124:	9501      	str	r5, [sp, #4]
 801e126:	e793      	b.n	801e050 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>

0801e128 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e12c:	b087      	sub	sp, #28
 801e12e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801e132:	e9dd 1015 	ldrd	r1, r0, [sp, #84]	; 0x54
 801e136:	e9dd 2c17 	ldrd	r2, ip, [sp, #92]	; 0x5c
 801e13a:	684c      	ldr	r4, [r1, #4]
 801e13c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801e140:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	; 0x4c
 801e144:	fb04 0202 	mla	r2, r4, r2, r0
 801e148:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 801e14c:	f8dc 2000 	ldr.w	r2, [ip]
 801e150:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801e154:	9201      	str	r2, [sp, #4]
 801e156:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e15a:	6808      	ldr	r0, [r1, #0]
 801e15c:	9204      	str	r2, [sp, #16]
 801e15e:	1d22      	adds	r2, r4, #4
 801e160:	e9dd e111 	ldrd	lr, r1, [sp, #68]	; 0x44
 801e164:	9205      	str	r2, [sp, #20]
 801e166:	4672      	mov	r2, lr
 801e168:	4428      	add	r0, r5
 801e16a:	9c02      	ldr	r4, [sp, #8]
 801e16c:	2c00      	cmp	r4, #0
 801e16e:	dc03      	bgt.n	801e178 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801e170:	9c03      	ldr	r4, [sp, #12]
 801e172:	2c00      	cmp	r4, #0
 801e174:	f340 80ba 	ble.w	801e2ec <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801e178:	e9dc e802 	ldrd	lr, r8, [ip, #8]
 801e17c:	2b00      	cmp	r3, #0
 801e17e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e182:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801e186:	fa0f f48e 	sxth.w	r4, lr
 801e18a:	fa0f f988 	sxth.w	r9, r8
 801e18e:	f340 80b0 	ble.w	801e2f2 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801e192:	1415      	asrs	r5, r2, #16
 801e194:	d406      	bmi.n	801e1a4 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e196:	42a5      	cmp	r5, r4
 801e198:	da04      	bge.n	801e1a4 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e19a:	ea5f 4a21 	movs.w	sl, r1, asr #16
 801e19e:	d401      	bmi.n	801e1a4 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e1a0:	45ca      	cmp	sl, r9
 801e1a2:	db3c      	blt.n	801e21e <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf6>
 801e1a4:	3b01      	subs	r3, #1
 801e1a6:	4432      	add	r2, r6
 801e1a8:	4439      	add	r1, r7
 801e1aa:	f100 0003 	add.w	r0, r0, #3
 801e1ae:	d1f0      	bne.n	801e192 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e1b0:	9b02      	ldr	r3, [sp, #8]
 801e1b2:	2b00      	cmp	r3, #0
 801e1b4:	f340 809a 	ble.w	801e2ec <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801e1b8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e1bc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e1c0:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801e1c4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e1c8:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801e1cc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e1d0:	ee76 6a62 	vsub.f32	s13, s12, s5
 801e1d4:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801e1d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e1dc:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e1e0:	ee16 2a90 	vmov	r2, s13
 801e1e4:	3b01      	subs	r3, #1
 801e1e6:	9302      	str	r3, [sp, #8]
 801e1e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e1ea:	9c03      	ldr	r4, [sp, #12]
 801e1ec:	fb92 f6f3 	sdiv	r6, r2, r3
 801e1f0:	ee17 2a10 	vmov	r2, s14
 801e1f4:	eeb0 7a43 	vmov.f32	s14, s6
 801e1f8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e1fc:	ee17 1a10 	vmov	r1, s14
 801e200:	eeb0 7a62 	vmov.f32	s14, s5
 801e204:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e208:	fb92 f7f3 	sdiv	r7, r2, r3
 801e20c:	eeb0 3a67 	vmov.f32	s6, s15
 801e210:	ee17 2a10 	vmov	r2, s14
 801e214:	eef0 2a46 	vmov.f32	s5, s12
 801e218:	bf08      	it	eq
 801e21a:	4623      	moveq	r3, r4
 801e21c:	e7a5      	b.n	801e16a <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801e21e:	f103 3bff 	add.w	fp, r3, #4294967295
 801e222:	fb0b 2a06 	mla	sl, fp, r6, r2
 801e226:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801e22a:	d56c      	bpl.n	801e306 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801e22c:	4604      	mov	r4, r0
 801e22e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e232:	4418      	add	r0, r3
 801e234:	4673      	mov	r3, lr
 801e236:	46b6      	mov	lr, r6
 801e238:	4646      	mov	r6, r8
 801e23a:	e002      	b.n	801e242 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 801e23c:	1415      	asrs	r5, r2, #16
 801e23e:	e9dc 3602 	ldrd	r3, r6, [ip, #8]
 801e242:	2d00      	cmp	r5, #0
 801e244:	4472      	add	r2, lr
 801e246:	db49      	blt.n	801e2dc <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801e248:	429d      	cmp	r5, r3
 801e24a:	da47      	bge.n	801e2dc <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801e24c:	ea5f 4821 	movs.w	r8, r1, asr #16
 801e250:	d444      	bmi.n	801e2dc <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801e252:	45b0      	cmp	r8, r6
 801e254:	b21b      	sxth	r3, r3
 801e256:	da41      	bge.n	801e2dc <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801e258:	9e01      	ldr	r6, [sp, #4]
 801e25a:	fb08 6303 	mla	r3, r8, r3, r6
 801e25e:	5d5b      	ldrb	r3, [r3, r5]
 801e260:	9d05      	ldr	r5, [sp, #20]
 801e262:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801e266:	0e1d      	lsrs	r5, r3, #24
 801e268:	d038      	beq.n	801e2dc <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801e26a:	9e04      	ldr	r6, [sp, #16]
 801e26c:	fa5f f983 	uxtb.w	r9, r3
 801e270:	fb06 f605 	mul.w	r6, r6, r5
 801e274:	1c75      	adds	r5, r6, #1
 801e276:	eb05 2526 	add.w	r5, r5, r6, asr #8
 801e27a:	122d      	asrs	r5, r5, #8
 801e27c:	43ee      	mvns	r6, r5
 801e27e:	b2ad      	uxth	r5, r5
 801e280:	fb19 f905 	smulbb	r9, r9, r5
 801e284:	f3c3 2807 	ubfx	r8, r3, #8, #8
 801e288:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801e28c:	f894 a000 	ldrb.w	sl, [r4]
 801e290:	fb18 f805 	smulbb	r8, r8, r5
 801e294:	fb13 f305 	smulbb	r3, r3, r5
 801e298:	b2f5      	uxtb	r5, r6
 801e29a:	fb0a 9605 	mla	r6, sl, r5, r9
 801e29e:	f894 b001 	ldrb.w	fp, [r4, #1]
 801e2a2:	f894 9002 	ldrb.w	r9, [r4, #2]
 801e2a6:	fb0b 8805 	mla	r8, fp, r5, r8
 801e2aa:	fb09 3305 	mla	r3, r9, r5, r3
 801e2ae:	fa1f fa86 	uxth.w	sl, r6
 801e2b2:	fa1f f888 	uxth.w	r8, r8
 801e2b6:	b29b      	uxth	r3, r3
 801e2b8:	f10a 0601 	add.w	r6, sl, #1
 801e2bc:	f108 0501 	add.w	r5, r8, #1
 801e2c0:	f103 0901 	add.w	r9, r3, #1
 801e2c4:	eb06 261a 	add.w	r6, r6, sl, lsr #8
 801e2c8:	eb05 2518 	add.w	r5, r5, r8, lsr #8
 801e2cc:	eb09 2313 	add.w	r3, r9, r3, lsr #8
 801e2d0:	1236      	asrs	r6, r6, #8
 801e2d2:	122d      	asrs	r5, r5, #8
 801e2d4:	121b      	asrs	r3, r3, #8
 801e2d6:	7026      	strb	r6, [r4, #0]
 801e2d8:	7065      	strb	r5, [r4, #1]
 801e2da:	70a3      	strb	r3, [r4, #2]
 801e2dc:	3403      	adds	r4, #3
 801e2de:	4284      	cmp	r4, r0
 801e2e0:	4439      	add	r1, r7
 801e2e2:	d1ab      	bne.n	801e23c <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801e2e4:	9b02      	ldr	r3, [sp, #8]
 801e2e6:	2b00      	cmp	r3, #0
 801e2e8:	f73f af66 	bgt.w	801e1b8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e2ec:	b007      	add	sp, #28
 801e2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e2f2:	f43f af5d 	beq.w	801e1b0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801e2f6:	f103 3bff 	add.w	fp, r3, #4294967295
 801e2fa:	fb0b 2a06 	mla	sl, fp, r6, r2
 801e2fe:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801e302:	f53f af55 	bmi.w	801e1b0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801e306:	4554      	cmp	r4, sl
 801e308:	dd64      	ble.n	801e3d4 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801e30a:	fb0b 1b07 	mla	fp, fp, r7, r1
 801e30e:	ea5f 4b2b 	movs.w	fp, fp, asr #16
 801e312:	d45f      	bmi.n	801e3d4 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801e314:	45cb      	cmp	fp, r9
 801e316:	da5d      	bge.n	801e3d4 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801e318:	2b00      	cmp	r3, #0
 801e31a:	f77f af49 	ble.w	801e1b0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801e31e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e322:	eb00 0e03 	add.w	lr, r0, r3
 801e326:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801e32a:	3003      	adds	r0, #3
 801e32c:	e002      	b.n	801e334 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801e32e:	f9bc 4008 	ldrsh.w	r4, [ip, #8]
 801e332:	3003      	adds	r0, #3
 801e334:	9d01      	ldr	r5, [sp, #4]
 801e336:	140b      	asrs	r3, r1, #16
 801e338:	fb04 5303 	mla	r3, r4, r3, r5
 801e33c:	1414      	asrs	r4, r2, #16
 801e33e:	5d1b      	ldrb	r3, [r3, r4]
 801e340:	4432      	add	r2, r6
 801e342:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801e346:	4439      	add	r1, r7
 801e348:	ea5f 6a13 	movs.w	sl, r3, lsr #24
 801e34c:	d03e      	beq.n	801e3cc <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801e34e:	9c04      	ldr	r4, [sp, #16]
 801e350:	fa5f f983 	uxtb.w	r9, r3
 801e354:	fb04 f40a 	mul.w	r4, r4, sl
 801e358:	f104 0a01 	add.w	sl, r4, #1
 801e35c:	eb0a 2a24 	add.w	sl, sl, r4, asr #8
 801e360:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e364:	ea6f 040a 	mvn.w	r4, sl
 801e368:	fa1f fa8a 	uxth.w	sl, sl
 801e36c:	fb19 f90a 	smulbb	r9, r9, sl
 801e370:	f3c3 2507 	ubfx	r5, r3, #8, #8
 801e374:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801e378:	fb15 fb0a 	smulbb	fp, r5, sl
 801e37c:	fb13 f30a 	smulbb	r3, r3, sl
 801e380:	f810 ac03 	ldrb.w	sl, [r0, #-3]
 801e384:	b2e4      	uxtb	r4, r4
 801e386:	fb0a 9904 	mla	r9, sl, r4, r9
 801e38a:	f810 5c02 	ldrb.w	r5, [r0, #-2]
 801e38e:	f810 ac01 	ldrb.w	sl, [r0, #-1]
 801e392:	fb05 b504 	mla	r5, r5, r4, fp
 801e396:	fb0a 3304 	mla	r3, sl, r4, r3
 801e39a:	fa1f f989 	uxth.w	r9, r9
 801e39e:	b2ad      	uxth	r5, r5
 801e3a0:	b29b      	uxth	r3, r3
 801e3a2:	f109 0b01 	add.w	fp, r9, #1
 801e3a6:	f105 0a01 	add.w	sl, r5, #1
 801e3aa:	1c5c      	adds	r4, r3, #1
 801e3ac:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e3b0:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801e3b4:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801e3b8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e3bc:	122d      	asrs	r5, r5, #8
 801e3be:	121b      	asrs	r3, r3, #8
 801e3c0:	f800 9c03 	strb.w	r9, [r0, #-3]
 801e3c4:	f800 5c02 	strb.w	r5, [r0, #-2]
 801e3c8:	f800 3c01 	strb.w	r3, [r0, #-1]
 801e3cc:	4586      	cmp	lr, r0
 801e3ce:	d1ae      	bne.n	801e32e <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801e3d0:	4670      	mov	r0, lr
 801e3d2:	e6ed      	b.n	801e1b0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801e3d4:	2b00      	cmp	r3, #0
 801e3d6:	f77f aeeb 	ble.w	801e1b0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801e3da:	4604      	mov	r4, r0
 801e3dc:	1415      	asrs	r5, r2, #16
 801e3de:	e726      	b.n	801e22e <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>

0801e3e0 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e3e0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801e3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3e8:	b087      	sub	sp, #28
 801e3ea:	e9cd 1203 	strd	r1, r2, [sp, #12]
 801e3ee:	e9dd 1015 	ldrd	r1, r0, [sp, #84]	; 0x54
 801e3f2:	e9dd 2b17 	ldrd	r2, fp, [sp, #92]	; 0x5c
 801e3f6:	684c      	ldr	r4, [r1, #4]
 801e3f8:	680d      	ldr	r5, [r1, #0]
 801e3fa:	fb04 0202 	mla	r2, r4, r2, r0
 801e3fe:	e9dd 8913 	ldrd	r8, r9, [sp, #76]	; 0x4c
 801e402:	f8db 4004 	ldr.w	r4, [fp, #4]
 801e406:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 801e40a:	3404      	adds	r4, #4
 801e40c:	f8db 2000 	ldr.w	r2, [fp]
 801e410:	4428      	add	r0, r5
 801e412:	9402      	str	r4, [sp, #8]
 801e414:	9201      	str	r2, [sp, #4]
 801e416:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801e41a:	9c03      	ldr	r4, [sp, #12]
 801e41c:	2c00      	cmp	r4, #0
 801e41e:	dc03      	bgt.n	801e428 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e420:	9c04      	ldr	r4, [sp, #16]
 801e422:	2c00      	cmp	r4, #0
 801e424:	f340 80b7 	ble.w	801e596 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801e428:	e9db 6702 	ldrd	r6, r7, [fp, #8]
 801e42c:	2b00      	cmp	r3, #0
 801e42e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e432:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801e436:	b234      	sxth	r4, r6
 801e438:	fa0f fc87 	sxth.w	ip, r7
 801e43c:	f340 80ae 	ble.w	801e59c <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801e440:	1415      	asrs	r5, r2, #16
 801e442:	d406      	bmi.n	801e452 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e444:	42a5      	cmp	r5, r4
 801e446:	da04      	bge.n	801e452 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e448:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801e44c:	d401      	bmi.n	801e452 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e44e:	45e6      	cmp	lr, ip
 801e450:	db3c      	blt.n	801e4cc <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xec>
 801e452:	3b01      	subs	r3, #1
 801e454:	4442      	add	r2, r8
 801e456:	4449      	add	r1, r9
 801e458:	f100 0003 	add.w	r0, r0, #3
 801e45c:	d1f0      	bne.n	801e440 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801e45e:	9b03      	ldr	r3, [sp, #12]
 801e460:	2b00      	cmp	r3, #0
 801e462:	f340 8098 	ble.w	801e596 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801e466:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e46a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e46e:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801e472:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e476:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801e47a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e47e:	ee76 6a62 	vsub.f32	s13, s12, s5
 801e482:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801e486:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e48a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e48e:	ee16 2a90 	vmov	r2, s13
 801e492:	3b01      	subs	r3, #1
 801e494:	9303      	str	r3, [sp, #12]
 801e496:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e498:	9c04      	ldr	r4, [sp, #16]
 801e49a:	fb92 f8f3 	sdiv	r8, r2, r3
 801e49e:	ee17 2a10 	vmov	r2, s14
 801e4a2:	eeb0 7a43 	vmov.f32	s14, s6
 801e4a6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e4aa:	ee17 1a10 	vmov	r1, s14
 801e4ae:	eeb0 7a62 	vmov.f32	s14, s5
 801e4b2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e4b6:	fb92 f9f3 	sdiv	r9, r2, r3
 801e4ba:	eeb0 3a67 	vmov.f32	s6, s15
 801e4be:	ee17 2a10 	vmov	r2, s14
 801e4c2:	eef0 2a46 	vmov.f32	s5, s12
 801e4c6:	bf08      	it	eq
 801e4c8:	4623      	moveq	r3, r4
 801e4ca:	e7a6      	b.n	801e41a <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e4cc:	f103 3aff 	add.w	sl, r3, #4294967295
 801e4d0:	fb0a 2e08 	mla	lr, sl, r8, r2
 801e4d4:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801e4d8:	d56a      	bpl.n	801e5b0 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801e4da:	4604      	mov	r4, r0
 801e4dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e4e0:	4418      	add	r0, r3
 801e4e2:	e002      	b.n	801e4ea <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801e4e4:	1415      	asrs	r5, r2, #16
 801e4e6:	e9db 6702 	ldrd	r6, r7, [fp, #8]
 801e4ea:	2d00      	cmp	r5, #0
 801e4ec:	db4a      	blt.n	801e584 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e4ee:	42b5      	cmp	r5, r6
 801e4f0:	da48      	bge.n	801e584 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e4f2:	140b      	asrs	r3, r1, #16
 801e4f4:	d446      	bmi.n	801e584 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e4f6:	42bb      	cmp	r3, r7
 801e4f8:	b236      	sxth	r6, r6
 801e4fa:	da43      	bge.n	801e584 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e4fc:	9f01      	ldr	r7, [sp, #4]
 801e4fe:	fb03 7606 	mla	r6, r3, r6, r7
 801e502:	5d73      	ldrb	r3, [r6, r5]
 801e504:	9d02      	ldr	r5, [sp, #8]
 801e506:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801e50a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801e50e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801e512:	f000 80be 	beq.w	801e692 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 801e516:	b2df      	uxtb	r7, r3
 801e518:	f3c3 2607 	ubfx	r6, r3, #8, #8
 801e51c:	f3c3 4a07 	ubfx	sl, r3, #16, #8
 801e520:	fa5f f38c 	uxtb.w	r3, ip
 801e524:	b29d      	uxth	r5, r3
 801e526:	f1bc 0f00 	cmp.w	ip, #0
 801e52a:	d02b      	beq.n	801e584 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e52c:	43db      	mvns	r3, r3
 801e52e:	b2db      	uxtb	r3, r3
 801e530:	9305      	str	r3, [sp, #20]
 801e532:	f894 e001 	ldrb.w	lr, [r4, #1]
 801e536:	fb17 f305 	smulbb	r3, r7, r5
 801e53a:	9f05      	ldr	r7, [sp, #20]
 801e53c:	f894 c002 	ldrb.w	ip, [r4, #2]
 801e540:	fb1e fe07 	smulbb	lr, lr, r7
 801e544:	fb1c fc07 	smulbb	ip, ip, r7
 801e548:	fb06 ee05 	mla	lr, r6, r5, lr
 801e54c:	7827      	ldrb	r7, [r4, #0]
 801e54e:	9e05      	ldr	r6, [sp, #20]
 801e550:	fb0a c505 	mla	r5, sl, r5, ip
 801e554:	fb07 3706 	mla	r7, r7, r6, r3
 801e558:	b2ab      	uxth	r3, r5
 801e55a:	b2bf      	uxth	r7, r7
 801e55c:	fa1f f68e 	uxth.w	r6, lr
 801e560:	1c7d      	adds	r5, r7, #1
 801e562:	f106 0e01 	add.w	lr, r6, #1
 801e566:	f103 0c01 	add.w	ip, r3, #1
 801e56a:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 801e56e:	eb0c 2613 	add.w	r6, ip, r3, lsr #8
 801e572:	eb05 2317 	add.w	r3, r5, r7, lsr #8
 801e576:	121b      	asrs	r3, r3, #8
 801e578:	ea4f 272e 	mov.w	r7, lr, asr #8
 801e57c:	1235      	asrs	r5, r6, #8
 801e57e:	7067      	strb	r7, [r4, #1]
 801e580:	70a5      	strb	r5, [r4, #2]
 801e582:	7023      	strb	r3, [r4, #0]
 801e584:	3403      	adds	r4, #3
 801e586:	4284      	cmp	r4, r0
 801e588:	4442      	add	r2, r8
 801e58a:	4449      	add	r1, r9
 801e58c:	d1aa      	bne.n	801e4e4 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801e58e:	9b03      	ldr	r3, [sp, #12]
 801e590:	2b00      	cmp	r3, #0
 801e592:	f73f af68 	bgt.w	801e466 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e596:	b007      	add	sp, #28
 801e598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e59c:	f43f af5f 	beq.w	801e45e <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e5a0:	f103 3aff 	add.w	sl, r3, #4294967295
 801e5a4:	fb0a 2e08 	mla	lr, sl, r8, r2
 801e5a8:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801e5ac:	f53f af57 	bmi.w	801e45e <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e5b0:	4574      	cmp	r4, lr
 801e5b2:	dd68      	ble.n	801e686 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801e5b4:	fb0a 1a09 	mla	sl, sl, r9, r1
 801e5b8:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801e5bc:	d463      	bmi.n	801e686 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801e5be:	45e2      	cmp	sl, ip
 801e5c0:	da61      	bge.n	801e686 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801e5c2:	2b00      	cmp	r3, #0
 801e5c4:	f77f af4b 	ble.w	801e45e <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e5c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e5cc:	eb00 0e03 	add.w	lr, r0, r3
 801e5d0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 801e5d4:	3003      	adds	r0, #3
 801e5d6:	e03b      	b.n	801e650 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 801e5d8:	b2fc      	uxtb	r4, r7
 801e5da:	fa5f fc83 	uxtb.w	ip, r3
 801e5de:	f3c3 2607 	ubfx	r6, r3, #8, #8
 801e5e2:	b2a5      	uxth	r5, r4
 801e5e4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801e5e8:	b357      	cbz	r7, 801e640 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801e5ea:	43e4      	mvns	r4, r4
 801e5ec:	f810 ac02 	ldrb.w	sl, [r0, #-2]
 801e5f0:	f810 8c01 	ldrb.w	r8, [r0, #-1]
 801e5f4:	b2e4      	uxtb	r4, r4
 801e5f6:	fb1c fc05 	smulbb	ip, ip, r5
 801e5fa:	fb18 f804 	smulbb	r8, r8, r4
 801e5fe:	fb1a fa04 	smulbb	sl, sl, r4
 801e602:	f810 7c03 	ldrb.w	r7, [r0, #-3]
 801e606:	fb03 8305 	mla	r3, r3, r5, r8
 801e60a:	fb06 a605 	mla	r6, r6, r5, sl
 801e60e:	fb07 c404 	mla	r4, r7, r4, ip
 801e612:	b2b6      	uxth	r6, r6
 801e614:	b2a4      	uxth	r4, r4
 801e616:	b29b      	uxth	r3, r3
 801e618:	f106 0c01 	add.w	ip, r6, #1
 801e61c:	f103 0801 	add.w	r8, r3, #1
 801e620:	1c65      	adds	r5, r4, #1
 801e622:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801e626:	eb08 2313 	add.w	r3, r8, r3, lsr #8
 801e62a:	eb05 2514 	add.w	r5, r5, r4, lsr #8
 801e62e:	1236      	asrs	r6, r6, #8
 801e630:	121b      	asrs	r3, r3, #8
 801e632:	122d      	asrs	r5, r5, #8
 801e634:	f800 6c02 	strb.w	r6, [r0, #-2]
 801e638:	f800 3c01 	strb.w	r3, [r0, #-1]
 801e63c:	f800 5c03 	strb.w	r5, [r0, #-3]
 801e640:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e642:	4586      	cmp	lr, r0
 801e644:	441a      	add	r2, r3
 801e646:	4449      	add	r1, r9
 801e648:	d01b      	beq.n	801e682 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801e64a:	f9bb 4008 	ldrsh.w	r4, [fp, #8]
 801e64e:	3003      	adds	r0, #3
 801e650:	9d01      	ldr	r5, [sp, #4]
 801e652:	140b      	asrs	r3, r1, #16
 801e654:	fb04 5303 	mla	r3, r4, r3, r5
 801e658:	1414      	asrs	r4, r2, #16
 801e65a:	5d1b      	ldrb	r3, [r3, r4]
 801e65c:	9c02      	ldr	r4, [sp, #8]
 801e65e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801e662:	0e1f      	lsrs	r7, r3, #24
 801e664:	2fff      	cmp	r7, #255	; 0xff
 801e666:	d1b7      	bne.n	801e5d8 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801e668:	0a1d      	lsrs	r5, r3, #8
 801e66a:	0c1c      	lsrs	r4, r3, #16
 801e66c:	f800 3c03 	strb.w	r3, [r0, #-3]
 801e670:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e672:	4586      	cmp	lr, r0
 801e674:	f800 5c02 	strb.w	r5, [r0, #-2]
 801e678:	f800 4c01 	strb.w	r4, [r0, #-1]
 801e67c:	441a      	add	r2, r3
 801e67e:	4449      	add	r1, r9
 801e680:	d1e3      	bne.n	801e64a <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801e682:	4670      	mov	r0, lr
 801e684:	e6eb      	b.n	801e45e <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e686:	2b00      	cmp	r3, #0
 801e688:	f77f aee9 	ble.w	801e45e <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e68c:	4604      	mov	r4, r0
 801e68e:	1415      	asrs	r5, r2, #16
 801e690:	e724      	b.n	801e4dc <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 801e692:	0a1e      	lsrs	r6, r3, #8
 801e694:	0c1d      	lsrs	r5, r3, #16
 801e696:	7023      	strb	r3, [r4, #0]
 801e698:	7066      	strb	r6, [r4, #1]
 801e69a:	70a5      	strb	r5, [r4, #2]
 801e69c:	e772      	b.n	801e584 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e69e:	bf00      	nop

0801e6a0 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6a4:	b089      	sub	sp, #36	; 0x24
 801e6a6:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
 801e6aa:	9101      	str	r1, [sp, #4]
 801e6ac:	ea6f 0a00 	mvn.w	sl, r0
 801e6b0:	e9dd e815 	ldrd	lr, r8, [sp, #84]	; 0x54
 801e6b4:	9919      	ldr	r1, [sp, #100]	; 0x64
 801e6b6:	9202      	str	r2, [sp, #8]
 801e6b8:	e9dd 5217 	ldrd	r5, r2, [sp, #92]	; 0x5c
 801e6bc:	686c      	ldr	r4, [r5, #4]
 801e6be:	682f      	ldr	r7, [r5, #0]
 801e6c0:	fb04 2401 	mla	r4, r4, r1, r2
 801e6c4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801e6c6:	b280      	uxth	r0, r0
 801e6c8:	e9d2 2100 	ldrd	r2, r1, [r2]
 801e6cc:	3104      	adds	r1, #4
 801e6ce:	eb07 0784 	add.w	r7, r7, r4, lsl #2
 801e6d2:	fa5f fa8a 	uxtb.w	sl, sl
 801e6d6:	9007      	str	r0, [sp, #28]
 801e6d8:	9105      	str	r1, [sp, #20]
 801e6da:	9200      	str	r2, [sp, #0]
 801e6dc:	e9dd 2513 	ldrd	r2, r5, [sp, #76]	; 0x4c
 801e6e0:	9901      	ldr	r1, [sp, #4]
 801e6e2:	2900      	cmp	r1, #0
 801e6e4:	dc03      	bgt.n	801e6ee <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801e6e6:	9902      	ldr	r1, [sp, #8]
 801e6e8:	2900      	cmp	r1, #0
 801e6ea:	f340 80b6 	ble.w	801e85a <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801e6ee:	991a      	ldr	r1, [sp, #104]	; 0x68
 801e6f0:	2b00      	cmp	r3, #0
 801e6f2:	e9d1 4602 	ldrd	r4, r6, [r1, #8]
 801e6f6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e6fa:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
 801e6fe:	b221      	sxth	r1, r4
 801e700:	fa0f fc86 	sxth.w	ip, r6
 801e704:	f340 80ac 	ble.w	801e860 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801e708:	1410      	asrs	r0, r2, #16
 801e70a:	d406      	bmi.n	801e71a <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e70c:	4288      	cmp	r0, r1
 801e70e:	da04      	bge.n	801e71a <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e710:	ea5f 4925 	movs.w	r9, r5, asr #16
 801e714:	d401      	bmi.n	801e71a <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e716:	45e1      	cmp	r9, ip
 801e718:	db3e      	blt.n	801e798 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801e71a:	3b01      	subs	r3, #1
 801e71c:	4472      	add	r2, lr
 801e71e:	4445      	add	r5, r8
 801e720:	f107 0704 	add.w	r7, r7, #4
 801e724:	d1f0      	bne.n	801e708 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e726:	9b01      	ldr	r3, [sp, #4]
 801e728:	2b00      	cmp	r3, #0
 801e72a:	f340 8096 	ble.w	801e85a <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801e72e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e732:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e736:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e73a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e73e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e742:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801e746:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e74a:	ee76 6a62 	vsub.f32	s13, s12, s5
 801e74e:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801e752:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e756:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e75a:	ee16 2a90 	vmov	r2, s13
 801e75e:	3b01      	subs	r3, #1
 801e760:	9301      	str	r3, [sp, #4]
 801e762:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e764:	9902      	ldr	r1, [sp, #8]
 801e766:	fb92 fef3 	sdiv	lr, r2, r3
 801e76a:	ee17 2a10 	vmov	r2, s14
 801e76e:	eeb0 7a43 	vmov.f32	s14, s6
 801e772:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e776:	ee17 5a10 	vmov	r5, s14
 801e77a:	eeb0 7a62 	vmov.f32	s14, s5
 801e77e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e782:	fb92 f8f3 	sdiv	r8, r2, r3
 801e786:	eeb0 3a67 	vmov.f32	s6, s15
 801e78a:	ee17 2a10 	vmov	r2, s14
 801e78e:	eef0 2a46 	vmov.f32	s5, s12
 801e792:	bf08      	it	eq
 801e794:	460b      	moveq	r3, r1
 801e796:	e7a3      	b.n	801e6e0 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801e798:	f103 39ff 	add.w	r9, r3, #4294967295
 801e79c:	fb09 2b0e 	mla	fp, r9, lr, r2
 801e7a0:	ea5f 4b2b 	movs.w	fp, fp, asr #16
 801e7a4:	d566      	bpl.n	801e874 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801e7a6:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801e7aa:	991a      	ldr	r1, [sp, #104]	; 0x68
 801e7ac:	e002      	b.n	801e7b4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801e7ae:	1410      	asrs	r0, r2, #16
 801e7b0:	e9d1 4602 	ldrd	r4, r6, [r1, #8]
 801e7b4:	2800      	cmp	r0, #0
 801e7b6:	f109 39ff 	add.w	r9, r9, #4294967295
 801e7ba:	4472      	add	r2, lr
 801e7bc:	db3f      	blt.n	801e83e <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801e7be:	42a0      	cmp	r0, r4
 801e7c0:	da3d      	bge.n	801e83e <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801e7c2:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801e7c6:	d43a      	bmi.n	801e83e <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801e7c8:	45b4      	cmp	ip, r6
 801e7ca:	da38      	bge.n	801e83e <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801e7cc:	9e00      	ldr	r6, [sp, #0]
 801e7ce:	b224      	sxth	r4, r4
 801e7d0:	fb0c 6404 	mla	r4, ip, r4, r6
 801e7d4:	f814 b000 	ldrb.w	fp, [r4, r0]
 801e7d8:	7838      	ldrb	r0, [r7, #0]
 801e7da:	9c05      	ldr	r4, [sp, #20]
 801e7dc:	fb10 f30a 	smulbb	r3, r0, sl
 801e7e0:	9306      	str	r3, [sp, #24]
 801e7e2:	9b07      	ldr	r3, [sp, #28]
 801e7e4:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801e7e8:	4618      	mov	r0, r3
 801e7ea:	eb04 060b 	add.w	r6, r4, fp
 801e7ee:	78b4      	ldrb	r4, [r6, #2]
 801e7f0:	7876      	ldrb	r6, [r6, #1]
 801e7f2:	fb14 fc03 	smulbb	ip, r4, r3
 801e7f6:	9c05      	ldr	r4, [sp, #20]
 801e7f8:	fb16 f603 	smulbb	r6, r6, r3
 801e7fc:	f814 400b 	ldrb.w	r4, [r4, fp]
 801e800:	9b06      	ldr	r3, [sp, #24]
 801e802:	f897 b001 	ldrb.w	fp, [r7, #1]
 801e806:	fb04 3000 	mla	r0, r4, r0, r3
 801e80a:	78bc      	ldrb	r4, [r7, #2]
 801e80c:	fb0b 660a 	mla	r6, fp, sl, r6
 801e810:	fb04 c40a 	mla	r4, r4, sl, ip
 801e814:	b2b6      	uxth	r6, r6
 801e816:	b280      	uxth	r0, r0
 801e818:	b2a4      	uxth	r4, r4
 801e81a:	f106 0c01 	add.w	ip, r6, #1
 801e81e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801e822:	f104 0b01 	add.w	fp, r4, #1
 801e826:	f100 0c01 	add.w	ip, r0, #1
 801e82a:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801e82e:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 801e832:	1236      	asrs	r6, r6, #8
 801e834:	1224      	asrs	r4, r4, #8
 801e836:	1200      	asrs	r0, r0, #8
 801e838:	707e      	strb	r6, [r7, #1]
 801e83a:	70bc      	strb	r4, [r7, #2]
 801e83c:	7038      	strb	r0, [r7, #0]
 801e83e:	f1b9 3fff 	cmp.w	r9, #4294967295
 801e842:	f107 0704 	add.w	r7, r7, #4
 801e846:	4445      	add	r5, r8
 801e848:	d1b1      	bne.n	801e7ae <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801e84a:	e9dd b303 	ldrd	fp, r3, [sp, #12]
 801e84e:	eb0b 0783 	add.w	r7, fp, r3, lsl #2
 801e852:	9b01      	ldr	r3, [sp, #4]
 801e854:	2b00      	cmp	r3, #0
 801e856:	f73f af6a 	bgt.w	801e72e <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801e85a:	b009      	add	sp, #36	; 0x24
 801e85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e860:	f43f af61 	beq.w	801e726 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e864:	f103 39ff 	add.w	r9, r3, #4294967295
 801e868:	fb09 2b0e 	mla	fp, r9, lr, r2
 801e86c:	ea5f 4b2b 	movs.w	fp, fp, asr #16
 801e870:	f53f af59 	bmi.w	801e726 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e874:	4559      	cmp	r1, fp
 801e876:	dd57      	ble.n	801e928 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801e878:	fb09 5008 	mla	r0, r9, r8, r5
 801e87c:	1400      	asrs	r0, r0, #16
 801e87e:	d453      	bmi.n	801e928 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801e880:	4560      	cmp	r0, ip
 801e882:	da51      	bge.n	801e928 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801e884:	2b00      	cmp	r3, #0
 801e886:	f77f af4e 	ble.w	801e726 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e88a:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801e88e:	f107 0c04 	add.w	ip, r7, #4
 801e892:	f8dd b014 	ldr.w	fp, [sp, #20]
 801e896:	460b      	mov	r3, r1
 801e898:	9f07      	ldr	r7, [sp, #28]
 801e89a:	e002      	b.n	801e8a2 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801e89c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801e89e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801e8a2:	9800      	ldr	r0, [sp, #0]
 801e8a4:	1429      	asrs	r1, r5, #16
 801e8a6:	fb03 0301 	mla	r3, r3, r1, r0
 801e8aa:	1411      	asrs	r1, r2, #16
 801e8ac:	5c5e      	ldrb	r6, [r3, r1]
 801e8ae:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 801e8b2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e8b6:	eb0b 0006 	add.w	r0, fp, r6
 801e8ba:	7881      	ldrb	r1, [r0, #2]
 801e8bc:	7840      	ldrb	r0, [r0, #1]
 801e8be:	fb13 f30a 	smulbb	r3, r3, sl
 801e8c2:	fb10 f007 	smulbb	r0, r0, r7
 801e8c6:	fb11 f407 	smulbb	r4, r1, r7
 801e8ca:	f81b 1006 	ldrb.w	r1, [fp, r6]
 801e8ce:	f81c 6c03 	ldrb.w	r6, [ip, #-3]
 801e8d2:	fb01 3307 	mla	r3, r1, r7, r3
 801e8d6:	f81c 1c02 	ldrb.w	r1, [ip, #-2]
 801e8da:	fb06 000a 	mla	r0, r6, sl, r0
 801e8de:	fb01 410a 	mla	r1, r1, sl, r4
 801e8e2:	b280      	uxth	r0, r0
 801e8e4:	b29b      	uxth	r3, r3
 801e8e6:	b289      	uxth	r1, r1
 801e8e8:	1c44      	adds	r4, r0, #1
 801e8ea:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801e8ee:	1c4e      	adds	r6, r1, #1
 801e8f0:	1c5c      	adds	r4, r3, #1
 801e8f2:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801e8f6:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801e8fa:	f109 39ff 	add.w	r9, r9, #4294967295
 801e8fe:	1200      	asrs	r0, r0, #8
 801e900:	1209      	asrs	r1, r1, #8
 801e902:	121b      	asrs	r3, r3, #8
 801e904:	f1b9 3fff 	cmp.w	r9, #4294967295
 801e908:	f80c 0c03 	strb.w	r0, [ip, #-3]
 801e90c:	f80c 1c02 	strb.w	r1, [ip, #-2]
 801e910:	f80c 3c04 	strb.w	r3, [ip, #-4]
 801e914:	4445      	add	r5, r8
 801e916:	4472      	add	r2, lr
 801e918:	f10c 0c04 	add.w	ip, ip, #4
 801e91c:	d1be      	bne.n	801e89c <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801e91e:	e9dd 7303 	ldrd	r7, r3, [sp, #12]
 801e922:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 801e926:	e6fe      	b.n	801e726 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e928:	2b00      	cmp	r3, #0
 801e92a:	f77f aefc 	ble.w	801e726 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e92e:	1410      	asrs	r0, r2, #16
 801e930:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801e934:	991a      	ldr	r1, [sp, #104]	; 0x68
 801e936:	e73d      	b.n	801e7b4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>

0801e938 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e93c:	468a      	mov	sl, r1
 801e93e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801e942:	46d1      	mov	r9, sl
 801e944:	b087      	sub	sp, #28
 801e946:	e9dd 1415 	ldrd	r1, r4, [sp, #84]	; 0x54
 801e94a:	684d      	ldr	r5, [r1, #4]
 801e94c:	9203      	str	r2, [sp, #12]
 801e94e:	e9dd 2e17 	ldrd	r2, lr, [sp, #92]	; 0x5c
 801e952:	fb05 4402 	mla	r4, r5, r2, r4
 801e956:	e9de 2000 	ldrd	r2, r0, [lr]
 801e95a:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	; 0x4c
 801e95e:	680d      	ldr	r5, [r1, #0]
 801e960:	f100 0b04 	add.w	fp, r0, #4
 801e964:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 801e968:	9205      	str	r2, [sp, #20]
 801e96a:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801e96e:	f1b9 0f00 	cmp.w	r9, #0
 801e972:	dc03      	bgt.n	801e97c <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801e974:	9803      	ldr	r0, [sp, #12]
 801e976:	2800      	cmp	r0, #0
 801e978:	f340 8091 	ble.w	801ea9e <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801e97c:	e9de 8a02 	ldrd	r8, sl, [lr, #8]
 801e980:	2b00      	cmp	r3, #0
 801e982:	fa0f f088 	sxth.w	r0, r8
 801e986:	fa0f f48a 	sxth.w	r4, sl
 801e98a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e98e:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801e992:	9001      	str	r0, [sp, #4]
 801e994:	9402      	str	r4, [sp, #8]
 801e996:	f340 8085 	ble.w	801eaa4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801e99a:	1414      	asrs	r4, r2, #16
 801e99c:	d408      	bmi.n	801e9b0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e99e:	9801      	ldr	r0, [sp, #4]
 801e9a0:	4284      	cmp	r4, r0
 801e9a2:	da05      	bge.n	801e9b0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e9a4:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801e9a8:	d402      	bmi.n	801e9b0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e9aa:	9802      	ldr	r0, [sp, #8]
 801e9ac:	4584      	cmp	ip, r0
 801e9ae:	db3b      	blt.n	801ea28 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801e9b0:	3b01      	subs	r3, #1
 801e9b2:	4432      	add	r2, r6
 801e9b4:	4439      	add	r1, r7
 801e9b6:	f105 0504 	add.w	r5, r5, #4
 801e9ba:	d1ee      	bne.n	801e99a <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801e9bc:	f1b9 0f00 	cmp.w	r9, #0
 801e9c0:	dd6d      	ble.n	801ea9e <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801e9c2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e9c6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e9ca:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801e9ce:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e9d2:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801e9d6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e9da:	ee76 6a62 	vsub.f32	s13, s12, s5
 801e9de:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801e9e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e9e6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e9ea:	ee16 2a90 	vmov	r2, s13
 801e9ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e9f0:	9803      	ldr	r0, [sp, #12]
 801e9f2:	fb92 f6f3 	sdiv	r6, r2, r3
 801e9f6:	ee17 2a10 	vmov	r2, s14
 801e9fa:	eeb0 7a43 	vmov.f32	s14, s6
 801e9fe:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ea02:	ee17 1a10 	vmov	r1, s14
 801ea06:	eeb0 7a62 	vmov.f32	s14, s5
 801ea0a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ea0e:	f1b9 0901 	subs.w	r9, r9, #1
 801ea12:	fb92 f7f3 	sdiv	r7, r2, r3
 801ea16:	eeb0 3a67 	vmov.f32	s6, s15
 801ea1a:	ee17 2a10 	vmov	r2, s14
 801ea1e:	eef0 2a46 	vmov.f32	s5, s12
 801ea22:	bf08      	it	eq
 801ea24:	4603      	moveq	r3, r0
 801ea26:	e7a2      	b.n	801e96e <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801ea28:	f103 3cff 	add.w	ip, r3, #4294967295
 801ea2c:	9404      	str	r4, [sp, #16]
 801ea2e:	fb06 240c 	mla	r4, r6, ip, r2
 801ea32:	1424      	asrs	r4, r4, #16
 801ea34:	d578      	bpl.n	801eb28 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ea36:	9613      	str	r6, [sp, #76]	; 0x4c
 801ea38:	2000      	movs	r0, #0
 801ea3a:	4646      	mov	r6, r8
 801ea3c:	46d4      	mov	ip, sl
 801ea3e:	9c04      	ldr	r4, [sp, #16]
 801ea40:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 801ea44:	e002      	b.n	801ea4c <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801ea46:	1414      	asrs	r4, r2, #16
 801ea48:	e9de 6c02 	ldrd	r6, ip, [lr, #8]
 801ea4c:	2c00      	cmp	r4, #0
 801ea4e:	4442      	add	r2, r8
 801ea50:	db1c      	blt.n	801ea8c <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ea52:	42b4      	cmp	r4, r6
 801ea54:	da1a      	bge.n	801ea8c <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ea56:	ea5f 4a21 	movs.w	sl, r1, asr #16
 801ea5a:	d417      	bmi.n	801ea8c <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ea5c:	45e2      	cmp	sl, ip
 801ea5e:	da15      	bge.n	801ea8c <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ea60:	fa0f fc86 	sxth.w	ip, r6
 801ea64:	9e05      	ldr	r6, [sp, #20]
 801ea66:	fb0a 6c0c 	mla	ip, sl, ip, r6
 801ea6a:	f81c 4004 	ldrb.w	r4, [ip, r4]
 801ea6e:	eb05 0680 	add.w	r6, r5, r0, lsl #2
 801ea72:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ea76:	f81b c004 	ldrb.w	ip, [fp, r4]
 801ea7a:	445c      	add	r4, fp
 801ea7c:	f805 c020 	strb.w	ip, [r5, r0, lsl #2]
 801ea80:	f894 c001 	ldrb.w	ip, [r4, #1]
 801ea84:	f886 c001 	strb.w	ip, [r6, #1]
 801ea88:	78a4      	ldrb	r4, [r4, #2]
 801ea8a:	70b4      	strb	r4, [r6, #2]
 801ea8c:	3001      	adds	r0, #1
 801ea8e:	4283      	cmp	r3, r0
 801ea90:	4439      	add	r1, r7
 801ea92:	d1d8      	bne.n	801ea46 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801ea94:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801ea98:	f1b9 0f00 	cmp.w	r9, #0
 801ea9c:	dc91      	bgt.n	801e9c2 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801ea9e:	b007      	add	sp, #28
 801eaa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eaa4:	d08a      	beq.n	801e9bc <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801eaa6:	f103 3cff 	add.w	ip, r3, #4294967295
 801eaaa:	fb0c 2406 	mla	r4, ip, r6, r2
 801eaae:	1424      	asrs	r4, r4, #16
 801eab0:	d484      	bmi.n	801e9bc <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801eab2:	42a0      	cmp	r0, r4
 801eab4:	dd32      	ble.n	801eb1c <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 801eab6:	fb07 140c 	mla	r4, r7, ip, r1
 801eaba:	1420      	asrs	r0, r4, #16
 801eabc:	d42e      	bmi.n	801eb1c <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 801eabe:	9c02      	ldr	r4, [sp, #8]
 801eac0:	4284      	cmp	r4, r0
 801eac2:	dd2b      	ble.n	801eb1c <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 801eac4:	2b00      	cmp	r3, #0
 801eac6:	f77f af79 	ble.w	801e9bc <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801eaca:	1d2c      	adds	r4, r5, #4
 801eacc:	f8dd a014 	ldr.w	sl, [sp, #20]
 801ead0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ead4:	e001      	b.n	801eada <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801ead6:	f9be 8008 	ldrsh.w	r8, [lr, #8]
 801eada:	1408      	asrs	r0, r1, #16
 801eadc:	fb08 a000 	mla	r0, r8, r0, sl
 801eae0:	ea4f 4822 	mov.w	r8, r2, asr #16
 801eae4:	f810 0008 	ldrb.w	r0, [r0, r8]
 801eae8:	f10c 3cff 	add.w	ip, ip, #4294967295
 801eaec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801eaf0:	f81b 8000 	ldrb.w	r8, [fp, r0]
 801eaf4:	4458      	add	r0, fp
 801eaf6:	f804 8c04 	strb.w	r8, [r4, #-4]
 801eafa:	f890 8001 	ldrb.w	r8, [r0, #1]
 801eafe:	f1bc 3fff 	cmp.w	ip, #4294967295
 801eb02:	f804 8c03 	strb.w	r8, [r4, #-3]
 801eb06:	7880      	ldrb	r0, [r0, #2]
 801eb08:	4439      	add	r1, r7
 801eb0a:	f804 0c02 	strb.w	r0, [r4, #-2]
 801eb0e:	4432      	add	r2, r6
 801eb10:	f104 0404 	add.w	r4, r4, #4
 801eb14:	d1df      	bne.n	801ead6 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801eb16:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801eb1a:	e7bd      	b.n	801ea98 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801eb1c:	2b00      	cmp	r3, #0
 801eb1e:	f77f af4d 	ble.w	801e9bc <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801eb22:	1410      	asrs	r0, r2, #16
 801eb24:	9004      	str	r0, [sp, #16]
 801eb26:	e786      	b.n	801ea36 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfe>
 801eb28:	9801      	ldr	r0, [sp, #4]
 801eb2a:	e7c2      	b.n	801eab2 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>

0801eb2c <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eb2c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801eb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb34:	b08b      	sub	sp, #44	; 0x2c
 801eb36:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801eb3a:	e9dd 2119 	ldrd	r2, r1, [sp, #100]	; 0x64
 801eb3e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801eb40:	6854      	ldr	r4, [r2, #4]
 801eb42:	6816      	ldr	r6, [r2, #0]
 801eb44:	fb04 1000 	mla	r0, r4, r0, r1
 801eb48:	e9dd 4b17 	ldrd	r4, fp, [sp, #92]	; 0x5c
 801eb4c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801eb4e:	f89d 7074 	ldrb.w	r7, [sp, #116]	; 0x74
 801eb52:	e9d2 2500 	ldrd	r2, r5, [r2]
 801eb56:	3504      	adds	r5, #4
 801eb58:	9703      	str	r7, [sp, #12]
 801eb5a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 801eb5e:	9507      	str	r5, [sp, #28]
 801eb60:	9206      	str	r2, [sp, #24]
 801eb62:	e9dd 2115 	ldrd	r2, r1, [sp, #84]	; 0x54
 801eb66:	9d01      	ldr	r5, [sp, #4]
 801eb68:	2d00      	cmp	r5, #0
 801eb6a:	dc03      	bgt.n	801eb74 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801eb6c:	9d02      	ldr	r5, [sp, #8]
 801eb6e:	2d00      	cmp	r5, #0
 801eb70:	f340 80d5 	ble.w	801ed1e <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 801eb74:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801eb76:	2b00      	cmp	r3, #0
 801eb78:	e9d5 7c02 	ldrd	r7, ip, [r5, #8]
 801eb7c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801eb80:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801eb84:	b23d      	sxth	r5, r7
 801eb86:	fa0f fe8c 	sxth.w	lr, ip
 801eb8a:	f340 80cb 	ble.w	801ed24 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801eb8e:	1416      	asrs	r6, r2, #16
 801eb90:	d406      	bmi.n	801eba0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801eb92:	42ae      	cmp	r6, r5
 801eb94:	da04      	bge.n	801eba0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801eb96:	ea5f 4821 	movs.w	r8, r1, asr #16
 801eb9a:	d401      	bmi.n	801eba0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801eb9c:	45f0      	cmp	r8, lr
 801eb9e:	db3c      	blt.n	801ec1a <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xee>
 801eba0:	3b01      	subs	r3, #1
 801eba2:	4422      	add	r2, r4
 801eba4:	4459      	add	r1, fp
 801eba6:	f100 0004 	add.w	r0, r0, #4
 801ebaa:	d1f0      	bne.n	801eb8e <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801ebac:	9b01      	ldr	r3, [sp, #4]
 801ebae:	2b00      	cmp	r3, #0
 801ebb0:	f340 80b5 	ble.w	801ed1e <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 801ebb4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ebb8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ebbc:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801ebc0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ebc4:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801ebc8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ebcc:	ee76 6a62 	vsub.f32	s13, s12, s5
 801ebd0:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801ebd4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ebd8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ebdc:	ee16 2a90 	vmov	r2, s13
 801ebe0:	3b01      	subs	r3, #1
 801ebe2:	9301      	str	r3, [sp, #4]
 801ebe4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ebe6:	9d02      	ldr	r5, [sp, #8]
 801ebe8:	fb92 f4f3 	sdiv	r4, r2, r3
 801ebec:	ee17 2a10 	vmov	r2, s14
 801ebf0:	eeb0 7a43 	vmov.f32	s14, s6
 801ebf4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ebf8:	ee17 1a10 	vmov	r1, s14
 801ebfc:	eeb0 7a62 	vmov.f32	s14, s5
 801ec00:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ec04:	fb92 fbf3 	sdiv	fp, r2, r3
 801ec08:	eeb0 3a67 	vmov.f32	s6, s15
 801ec0c:	ee17 2a10 	vmov	r2, s14
 801ec10:	eef0 2a46 	vmov.f32	s5, s12
 801ec14:	bf08      	it	eq
 801ec16:	462b      	moveq	r3, r5
 801ec18:	e7a5      	b.n	801eb66 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801ec1a:	f103 38ff 	add.w	r8, r3, #4294967295
 801ec1e:	fb08 2904 	mla	r9, r8, r4, r2
 801ec22:	ea5f 4929 	movs.w	r9, r9, asr #16
 801ec26:	f140 8087 	bpl.w	801ed38 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801ec2a:	f1c3 0900 	rsb	r9, r3, #0
 801ec2e:	4698      	mov	r8, r3
 801ec30:	2500      	movs	r5, #0
 801ec32:	9004      	str	r0, [sp, #16]
 801ec34:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ec36:	e002      	b.n	801ec3e <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801ec38:	1416      	asrs	r6, r2, #16
 801ec3a:	e9d3 7c02 	ldrd	r7, ip, [r3, #8]
 801ec3e:	2e00      	cmp	r6, #0
 801ec40:	4422      	add	r2, r4
 801ec42:	db61      	blt.n	801ed08 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801ec44:	42be      	cmp	r6, r7
 801ec46:	da5f      	bge.n	801ed08 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801ec48:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801ec4c:	d45c      	bmi.n	801ed08 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801ec4e:	45e6      	cmp	lr, ip
 801ec50:	b23f      	sxth	r7, r7
 801ec52:	da59      	bge.n	801ed08 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801ec54:	9806      	ldr	r0, [sp, #24]
 801ec56:	fb0e 0707 	mla	r7, lr, r7, r0
 801ec5a:	9807      	ldr	r0, [sp, #28]
 801ec5c:	5dbe      	ldrb	r6, [r7, r6]
 801ec5e:	ebc5 7785 	rsb	r7, r5, r5, lsl #30
 801ec62:	f850 6026 	ldr.w	r6, [r0, r6, lsl #2]
 801ec66:	9804      	ldr	r0, [sp, #16]
 801ec68:	9705      	str	r7, [sp, #20]
 801ec6a:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 801ec6e:	0e37      	lsrs	r7, r6, #24
 801ec70:	9008      	str	r0, [sp, #32]
 801ec72:	d049      	beq.n	801ed08 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801ec74:	9803      	ldr	r0, [sp, #12]
 801ec76:	fa5f fa86 	uxtb.w	sl, r6
 801ec7a:	fb00 f707 	mul.w	r7, r0, r7
 801ec7e:	9805      	ldr	r0, [sp, #20]
 801ec80:	f107 0c01 	add.w	ip, r7, #1
 801ec84:	eb0c 2c27 	add.w	ip, ip, r7, asr #8
 801ec88:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ec8c:	4686      	mov	lr, r0
 801ec8e:	ea6f 070c 	mvn.w	r7, ip
 801ec92:	fa1f fc8c 	uxth.w	ip, ip
 801ec96:	fb1a fa0c 	smulbb	sl, sl, ip
 801ec9a:	9804      	ldr	r0, [sp, #16]
 801ec9c:	b2ff      	uxtb	r7, r7
 801ec9e:	f810 e02e 	ldrb.w	lr, [r0, lr, lsl #2]
 801eca2:	9805      	ldr	r0, [sp, #20]
 801eca4:	fb0e ae07 	mla	lr, lr, r7, sl
 801eca8:	fa1f fe8e 	uxth.w	lr, lr
 801ecac:	f10e 0a01 	add.w	sl, lr, #1
 801ecb0:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801ecb4:	f3c6 2a07 	ubfx	sl, r6, #8, #8
 801ecb8:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801ecbc:	fb16 f60c 	smulbb	r6, r6, ip
 801ecc0:	9609      	str	r6, [sp, #36]	; 0x24
 801ecc2:	4606      	mov	r6, r0
 801ecc4:	9804      	ldr	r0, [sp, #16]
 801ecc6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ecca:	f800 e026 	strb.w	lr, [r0, r6, lsl #2]
 801ecce:	fb1a fa0c 	smulbb	sl, sl, ip
 801ecd2:	9808      	ldr	r0, [sp, #32]
 801ecd4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801ecd6:	f890 e002 	ldrb.w	lr, [r0, #2]
 801ecda:	f890 c001 	ldrb.w	ip, [r0, #1]
 801ecde:	fb0e 6607 	mla	r6, lr, r7, r6
 801ece2:	fb0c ac07 	mla	ip, ip, r7, sl
 801ece6:	b2b6      	uxth	r6, r6
 801ece8:	fa1f fe8c 	uxth.w	lr, ip
 801ecec:	1c77      	adds	r7, r6, #1
 801ecee:	f10e 0c01 	add.w	ip, lr, #1
 801ecf2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801ecf6:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801ecfa:	ea4f 272c 	mov.w	r7, ip, asr #8
 801ecfe:	ea4f 2c26 	mov.w	ip, r6, asr #8
 801ed02:	7047      	strb	r7, [r0, #1]
 801ed04:	f880 c002 	strb.w	ip, [r0, #2]
 801ed08:	3d01      	subs	r5, #1
 801ed0a:	45a9      	cmp	r9, r5
 801ed0c:	4459      	add	r1, fp
 801ed0e:	d193      	bne.n	801ec38 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801ed10:	9b01      	ldr	r3, [sp, #4]
 801ed12:	9804      	ldr	r0, [sp, #16]
 801ed14:	2b00      	cmp	r3, #0
 801ed16:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 801ed1a:	f73f af4b 	bgt.w	801ebb4 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801ed1e:	b00b      	add	sp, #44	; 0x2c
 801ed20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed24:	f43f af42 	beq.w	801ebac <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ed28:	f103 38ff 	add.w	r8, r3, #4294967295
 801ed2c:	fb08 2904 	mla	r9, r8, r4, r2
 801ed30:	ea5f 4929 	movs.w	r9, r9, asr #16
 801ed34:	f53f af3a 	bmi.w	801ebac <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ed38:	454d      	cmp	r5, r9
 801ed3a:	dd68      	ble.n	801ee0e <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 801ed3c:	fb08 160b 	mla	r6, r8, fp, r1
 801ed40:	1436      	asrs	r6, r6, #16
 801ed42:	d464      	bmi.n	801ee0e <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 801ed44:	4576      	cmp	r6, lr
 801ed46:	da62      	bge.n	801ee0e <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 801ed48:	2b00      	cmp	r3, #0
 801ed4a:	f77f af2f 	ble.w	801ebac <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ed4e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 801ed52:	f100 0e04 	add.w	lr, r0, #4
 801ed56:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801ed5a:	e002      	b.n	801ed62 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801ed5c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ed5e:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 801ed62:	140b      	asrs	r3, r1, #16
 801ed64:	fb05 6303 	mla	r3, r5, r3, r6
 801ed68:	1410      	asrs	r0, r2, #16
 801ed6a:	5c1b      	ldrb	r3, [r3, r0]
 801ed6c:	f108 38ff 	add.w	r8, r8, #4294967295
 801ed70:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801ed74:	4422      	add	r2, r4
 801ed76:	0e18      	lsrs	r0, r3, #24
 801ed78:	4459      	add	r1, fp
 801ed7a:	d03e      	beq.n	801edfa <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ce>
 801ed7c:	9d03      	ldr	r5, [sp, #12]
 801ed7e:	fa5f fc83 	uxtb.w	ip, r3
 801ed82:	fb05 f000 	mul.w	r0, r5, r0
 801ed86:	f100 0901 	add.w	r9, r0, #1
 801ed8a:	eb09 2920 	add.w	r9, r9, r0, asr #8
 801ed8e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ed92:	ea6f 0009 	mvn.w	r0, r9
 801ed96:	fa1f f989 	uxth.w	r9, r9
 801ed9a:	fb1c fc09 	smulbb	ip, ip, r9
 801ed9e:	f3c3 2507 	ubfx	r5, r3, #8, #8
 801eda2:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801eda6:	fb15 fa09 	smulbb	sl, r5, r9
 801edaa:	fb13 f309 	smulbb	r3, r3, r9
 801edae:	f81e 9c04 	ldrb.w	r9, [lr, #-4]
 801edb2:	b2c0      	uxtb	r0, r0
 801edb4:	fb09 cc00 	mla	ip, r9, r0, ip
 801edb8:	f81e 5c03 	ldrb.w	r5, [lr, #-3]
 801edbc:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 801edc0:	fb05 a500 	mla	r5, r5, r0, sl
 801edc4:	fb09 3300 	mla	r3, r9, r0, r3
 801edc8:	fa1f fc8c 	uxth.w	ip, ip
 801edcc:	b2ad      	uxth	r5, r5
 801edce:	b29b      	uxth	r3, r3
 801edd0:	f10c 0a01 	add.w	sl, ip, #1
 801edd4:	f105 0901 	add.w	r9, r5, #1
 801edd8:	1c58      	adds	r0, r3, #1
 801edda:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801edde:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801ede2:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801ede6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801edea:	122d      	asrs	r5, r5, #8
 801edec:	121b      	asrs	r3, r3, #8
 801edee:	f80e cc04 	strb.w	ip, [lr, #-4]
 801edf2:	f80e 5c03 	strb.w	r5, [lr, #-3]
 801edf6:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801edfa:	f1b8 3fff 	cmp.w	r8, #4294967295
 801edfe:	f10e 0e04 	add.w	lr, lr, #4
 801ee02:	d1ab      	bne.n	801ed5c <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801ee04:	e9dd 0304 	ldrd	r0, r3, [sp, #16]
 801ee08:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801ee0c:	e6ce      	b.n	801ebac <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ee0e:	2b00      	cmp	r3, #0
 801ee10:	f77f aecc 	ble.w	801ebac <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ee14:	1416      	asrs	r6, r2, #16
 801ee16:	e708      	b.n	801ec2a <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfe>

0801ee18 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801ee18:	4770      	bx	lr
 801ee1a:	bf00      	nop

0801ee1c <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801ee1c:	4770      	bx	lr
 801ee1e:	bf00      	nop

0801ee20 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801ee20:	4770      	bx	lr
 801ee22:	bf00      	nop

0801ee24 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801ee24:	4770      	bx	lr
 801ee26:	bf00      	nop

0801ee28 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801ee28:	4770      	bx	lr
 801ee2a:	bf00      	nop

0801ee2c <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801ee2c:	4770      	bx	lr
 801ee2e:	bf00      	nop

0801ee30 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801ee30:	4770      	bx	lr
 801ee32:	bf00      	nop

0801ee34 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801ee34:	4770      	bx	lr
 801ee36:	bf00      	nop

0801ee38 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801ee38:	4770      	bx	lr
 801ee3a:	bf00      	nop

0801ee3c <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801ee3c:	4770      	bx	lr
 801ee3e:	bf00      	nop

0801ee40 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801ee40:	4770      	bx	lr
 801ee42:	bf00      	nop

0801ee44 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801ee44:	4770      	bx	lr
 801ee46:	bf00      	nop

0801ee48 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801ee48:	4770      	bx	lr
 801ee4a:	bf00      	nop

0801ee4c <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801ee4c:	4770      	bx	lr
 801ee4e:	bf00      	nop

0801ee50 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801ee50:	4770      	bx	lr
 801ee52:	bf00      	nop

0801ee54 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801ee54:	4770      	bx	lr
 801ee56:	bf00      	nop

0801ee58 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801ee58:	4770      	bx	lr
 801ee5a:	bf00      	nop

0801ee5c <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801ee5c:	4770      	bx	lr
 801ee5e:	bf00      	nop

0801ee60 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801ee60:	4770      	bx	lr
 801ee62:	bf00      	nop

0801ee64 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801ee64:	4770      	bx	lr
 801ee66:	bf00      	nop

0801ee68 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801ee68:	4770      	bx	lr
 801ee6a:	bf00      	nop

0801ee6c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801ee6c:	4770      	bx	lr
 801ee6e:	bf00      	nop

0801ee70 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv>:
 801ee70:	b508      	push	{r3, lr}
 801ee72:	4b0d      	ldr	r3, [pc, #52]	; (801eea8 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x38>)
 801ee74:	881b      	ldrh	r3, [r3, #0]
 801ee76:	b17b      	cbz	r3, 801ee98 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x28>
 801ee78:	7a02      	ldrb	r2, [r0, #8]
 801ee7a:	2a02      	cmp	r2, #2
 801ee7c:	d007      	beq.n	801ee8e <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x1e>
 801ee7e:	2a01      	cmp	r2, #1
 801ee80:	bf0c      	ite	eq
 801ee82:	2003      	moveq	r0, #3
 801ee84:	2002      	movne	r0, #2
 801ee86:	fb13 f000 	smulbb	r0, r3, r0
 801ee8a:	b280      	uxth	r0, r0
 801ee8c:	bd08      	pop	{r3, pc}
 801ee8e:	2004      	movs	r0, #4
 801ee90:	fb13 f000 	smulbb	r0, r3, r0
 801ee94:	b280      	uxth	r0, r0
 801ee96:	bd08      	pop	{r3, pc}
 801ee98:	4b04      	ldr	r3, [pc, #16]	; (801eeac <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x3c>)
 801ee9a:	4a05      	ldr	r2, [pc, #20]	; (801eeb0 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x40>)
 801ee9c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 801eea0:	4804      	ldr	r0, [pc, #16]	; (801eeb4 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x44>)
 801eea2:	f009 f8e5 	bl	8028070 <__assert_func>
 801eea6:	bf00      	nop
 801eea8:	20197952 	.word	0x20197952
 801eeac:	0802b41c 	.word	0x0802b41c
 801eeb0:	0802c1d8 	.word	0x0802c1d8
 801eeb4:	0802b460 	.word	0x0802b460

0801eeb8 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv>:
 801eeb8:	b530      	push	{r4, r5, lr}
 801eeba:	4b26      	ldr	r3, [pc, #152]	; (801ef54 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x9c>)
 801eebc:	b083      	sub	sp, #12
 801eebe:	681c      	ldr	r4, [r3, #0]
 801eec0:	2c00      	cmp	r4, #0
 801eec2:	d040      	beq.n	801ef46 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x8e>
 801eec4:	4b24      	ldr	r3, [pc, #144]	; (801ef58 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa0>)
 801eec6:	4605      	mov	r5, r0
 801eec8:	781b      	ldrb	r3, [r3, #0]
 801eeca:	b9f3      	cbnz	r3, 801ef0a <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x52>
 801eecc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801eece:	7a2a      	ldrb	r2, [r5, #8]
 801eed0:	2a01      	cmp	r2, #1
 801eed2:	d025      	beq.n	801ef20 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x68>
 801eed4:	d30d      	bcc.n	801eef2 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x3a>
 801eed6:	2a02      	cmp	r2, #2
 801eed8:	d12f      	bne.n	801ef3a <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x82>
 801eeda:	4920      	ldr	r1, [pc, #128]	; (801ef5c <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa4>)
 801eedc:	4a20      	ldr	r2, [pc, #128]	; (801ef60 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa8>)
 801eede:	8809      	ldrh	r1, [r1, #0]
 801eee0:	8812      	ldrh	r2, [r2, #0]
 801eee2:	008c      	lsls	r4, r1, #2
 801eee4:	4618      	mov	r0, r3
 801eee6:	9400      	str	r4, [sp, #0]
 801eee8:	2310      	movs	r3, #16
 801eeea:	f7fb ff1d 	bl	801ad28 <nema_bind_dst_tex>
 801eeee:	b003      	add	sp, #12
 801eef0:	bd30      	pop	{r4, r5, pc}
 801eef2:	491a      	ldr	r1, [pc, #104]	; (801ef5c <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa4>)
 801eef4:	4a1a      	ldr	r2, [pc, #104]	; (801ef60 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa8>)
 801eef6:	8809      	ldrh	r1, [r1, #0]
 801eef8:	8812      	ldrh	r2, [r2, #0]
 801eefa:	004c      	lsls	r4, r1, #1
 801eefc:	4618      	mov	r0, r3
 801eefe:	9400      	str	r4, [sp, #0]
 801ef00:	2304      	movs	r3, #4
 801ef02:	f7fb ff11 	bl	801ad28 <nema_bind_dst_tex>
 801ef06:	b003      	add	sp, #12
 801ef08:	bd30      	pop	{r4, r5, pc}
 801ef0a:	6823      	ldr	r3, [r4, #0]
 801ef0c:	4620      	mov	r0, r4
 801ef0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ef10:	4798      	blx	r3
 801ef12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801ef14:	4283      	cmp	r3, r0
 801ef16:	d1da      	bne.n	801eece <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x16>
 801ef18:	7a2a      	ldrb	r2, [r5, #8]
 801ef1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ef1c:	2a01      	cmp	r2, #1
 801ef1e:	d1d9      	bne.n	801eed4 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x1c>
 801ef20:	490e      	ldr	r1, [pc, #56]	; (801ef5c <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa4>)
 801ef22:	4a0f      	ldr	r2, [pc, #60]	; (801ef60 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa8>)
 801ef24:	8809      	ldrh	r1, [r1, #0]
 801ef26:	8812      	ldrh	r2, [r2, #0]
 801ef28:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 801ef2c:	4618      	mov	r0, r3
 801ef2e:	9400      	str	r4, [sp, #0]
 801ef30:	2339      	movs	r3, #57	; 0x39
 801ef32:	f7fb fef9 	bl	801ad28 <nema_bind_dst_tex>
 801ef36:	b003      	add	sp, #12
 801ef38:	bd30      	pop	{r4, r5, pc}
 801ef3a:	4b0a      	ldr	r3, [pc, #40]	; (801ef64 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xac>)
 801ef3c:	4a0a      	ldr	r2, [pc, #40]	; (801ef68 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xb0>)
 801ef3e:	2140      	movs	r1, #64	; 0x40
 801ef40:	480a      	ldr	r0, [pc, #40]	; (801ef6c <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xb4>)
 801ef42:	f009 f895 	bl	8028070 <__assert_func>
 801ef46:	4b0a      	ldr	r3, [pc, #40]	; (801ef70 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xb8>)
 801ef48:	4a0a      	ldr	r2, [pc, #40]	; (801ef74 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xbc>)
 801ef4a:	217c      	movs	r1, #124	; 0x7c
 801ef4c:	480a      	ldr	r0, [pc, #40]	; (801ef78 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xc0>)
 801ef4e:	f009 f88f 	bl	8028070 <__assert_func>
 801ef52:	bf00      	nop
 801ef54:	20197b88 	.word	0x20197b88
 801ef58:	20197956 	.word	0x20197956
 801ef5c:	20197952 	.word	0x20197952
 801ef60:	20197954 	.word	0x20197954
 801ef64:	0802af00 	.word	0x0802af00
 801ef68:	0802ba14 	.word	0x0802ba14
 801ef6c:	0802af48 	.word	0x0802af48
 801ef70:	0802aea4 	.word	0x0802aea4
 801ef74:	0802b6ac 	.word	0x0802b6ac
 801ef78:	0802aecc 	.word	0x0802aecc

0801ef7c <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh>:
 801ef7c:	2b00      	cmp	r3, #0
 801ef7e:	d058      	beq.n	801f032 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xb6>
 801ef80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ef84:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 801ef88:	b085      	sub	sp, #20
 801ef8a:	2c00      	cmp	r4, #0
 801ef8c:	dd4e      	ble.n	801f02c <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xb0>
 801ef8e:	f9b1 4006 	ldrsh.w	r4, [r1, #6]
 801ef92:	2c00      	cmp	r4, #0
 801ef94:	dd4a      	ble.n	801f02c <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xb0>
 801ef96:	4616      	mov	r6, r2
 801ef98:	4605      	mov	r5, r0
 801ef9a:	6808      	ldr	r0, [r1, #0]
 801ef9c:	6849      	ldr	r1, [r1, #4]
 801ef9e:	461c      	mov	r4, r3
 801efa0:	4f27      	ldr	r7, [pc, #156]	; (801f040 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xc4>)
 801efa2:	ab02      	add	r3, sp, #8
 801efa4:	c303      	stmia	r3!, {r0, r1}
 801efa6:	a802      	add	r0, sp, #8
 801efa8:	f7f8 fb9a 	bl	80176e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801efac:	6838      	ldr	r0, [r7, #0]
 801efae:	f3c6 4807 	ubfx	r8, r6, #16, #8
 801efb2:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801efb6:	b2f6      	uxtb	r6, r6
 801efb8:	2800      	cmp	r0, #0
 801efba:	d03b      	beq.n	801f034 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xb8>
 801efbc:	f7fe f8f6 	bl	801d1ac <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 801efc0:	682b      	ldr	r3, [r5, #0]
 801efc2:	4628      	mov	r0, r5
 801efc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801efc6:	4798      	blx	r3
 801efc8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801efcc:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801efd0:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 801efd4:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 801efd8:	f7fb fdf2 	bl	801abc0 <nema_set_clip>
 801efdc:	f04f 33ff 	mov.w	r3, #4294967295
 801efe0:	2100      	movs	r1, #0
 801efe2:	461a      	mov	r2, r3
 801efe4:	4817      	ldr	r0, [pc, #92]	; (801f044 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xc8>)
 801efe6:	f7fd fc33 	bl	801c850 <nema_set_blend>
 801efea:	2200      	movs	r2, #0
 801efec:	4623      	mov	r3, r4
 801efee:	4611      	mov	r1, r2
 801eff0:	4610      	mov	r0, r2
 801eff2:	f7fb fe19 	bl	801ac28 <nema_rgba>
 801eff6:	f7fd fff1 	bl	801cfdc <nema_set_const_color>
 801effa:	4632      	mov	r2, r6
 801effc:	4649      	mov	r1, r9
 801effe:	4640      	mov	r0, r8
 801f000:	23ff      	movs	r3, #255	; 0xff
 801f002:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 801f006:	f9bd 500a 	ldrsh.w	r5, [sp, #10]
 801f00a:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801f00e:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801f012:	f7fb fe09 	bl	801ac28 <nema_rgba>
 801f016:	4643      	mov	r3, r8
 801f018:	9000      	str	r0, [sp, #0]
 801f01a:	4632      	mov	r2, r6
 801f01c:	4620      	mov	r0, r4
 801f01e:	4629      	mov	r1, r5
 801f020:	f7fb ff38 	bl	801ae94 <nema_fill_rect>
 801f024:	6838      	ldr	r0, [r7, #0]
 801f026:	b128      	cbz	r0, 801f034 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xb8>
 801f028:	f7fe f8e0 	bl	801d1ec <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 801f02c:	b005      	add	sp, #20
 801f02e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f032:	4770      	bx	lr
 801f034:	4b04      	ldr	r3, [pc, #16]	; (801f048 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xcc>)
 801f036:	4a05      	ldr	r2, [pc, #20]	; (801f04c <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xd0>)
 801f038:	217c      	movs	r1, #124	; 0x7c
 801f03a:	4805      	ldr	r0, [pc, #20]	; (801f050 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xd4>)
 801f03c:	f009 f818 	bl	8028070 <__assert_func>
 801f040:	20197b88 	.word	0x20197b88
 801f044:	08000504 	.word	0x08000504
 801f048:	0802aea4 	.word	0x0802aea4
 801f04c:	0802b6ac 	.word	0x0802b6ac
 801f050:	0802aecc 	.word	0x0802aecc

0801f054 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801f054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f058:	b085      	sub	sp, #20
 801f05a:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 801f05e:	2c00      	cmp	r4, #0
 801f060:	d063      	beq.n	801f12a <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd6>
 801f062:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801f066:	2d00      	cmp	r5, #0
 801f068:	dd5f      	ble.n	801f12a <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd6>
 801f06a:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 801f06e:	2d00      	cmp	r5, #0
 801f070:	dd5b      	ble.n	801f12a <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd6>
 801f072:	460f      	mov	r7, r1
 801f074:	4606      	mov	r6, r0
 801f076:	6859      	ldr	r1, [r3, #4]
 801f078:	6818      	ldr	r0, [r3, #0]
 801f07a:	f8df 9124 	ldr.w	r9, [pc, #292]	; 801f1a0 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14c>
 801f07e:	ab02      	add	r3, sp, #8
 801f080:	c303      	stmia	r3!, {r0, r1}
 801f082:	a802      	add	r0, sp, #8
 801f084:	4690      	mov	r8, r2
 801f086:	f7f8 fb2b 	bl	80176e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f08a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f08c:	f8d9 0000 	ldr.w	r0, [r9]
 801f090:	f3c3 4a07 	ubfx	sl, r3, #16, #8
 801f094:	f3c3 2b07 	ubfx	fp, r3, #8, #8
 801f098:	b2dd      	uxtb	r5, r3
 801f09a:	2800      	cmp	r0, #0
 801f09c:	d060      	beq.n	801f160 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10c>
 801f09e:	f7fe f885 	bl	801d1ac <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 801f0a2:	7a33      	ldrb	r3, [r6, #8]
 801f0a4:	2b01      	cmp	r3, #1
 801f0a6:	d043      	beq.n	801f130 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xdc>
 801f0a8:	d34e      	bcc.n	801f148 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf4>
 801f0aa:	2b02      	cmp	r3, #2
 801f0ac:	d15e      	bne.n	801f16c <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 801f0ae:	4b33      	ldr	r3, [pc, #204]	; (801f17c <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x128>)
 801f0b0:	4a33      	ldr	r2, [pc, #204]	; (801f180 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12c>)
 801f0b2:	8819      	ldrh	r1, [r3, #0]
 801f0b4:	ea4f 0388 	mov.w	r3, r8, lsl #2
 801f0b8:	8812      	ldrh	r2, [r2, #0]
 801f0ba:	4638      	mov	r0, r7
 801f0bc:	9300      	str	r3, [sp, #0]
 801f0be:	2310      	movs	r3, #16
 801f0c0:	f7fb fe32 	bl	801ad28 <nema_bind_dst_tex>
 801f0c4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801f0c8:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801f0cc:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 801f0d0:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 801f0d4:	f7fb fd74 	bl	801abc0 <nema_set_clip>
 801f0d8:	f04f 33ff 	mov.w	r3, #4294967295
 801f0dc:	2100      	movs	r1, #0
 801f0de:	461a      	mov	r2, r3
 801f0e0:	4828      	ldr	r0, [pc, #160]	; (801f184 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x130>)
 801f0e2:	f7fd fbb5 	bl	801c850 <nema_set_blend>
 801f0e6:	2200      	movs	r2, #0
 801f0e8:	4623      	mov	r3, r4
 801f0ea:	4611      	mov	r1, r2
 801f0ec:	4610      	mov	r0, r2
 801f0ee:	f7fb fd9b 	bl	801ac28 <nema_rgba>
 801f0f2:	f7fd ff73 	bl	801cfdc <nema_set_const_color>
 801f0f6:	462a      	mov	r2, r5
 801f0f8:	4659      	mov	r1, fp
 801f0fa:	23ff      	movs	r3, #255	; 0xff
 801f0fc:	4650      	mov	r0, sl
 801f0fe:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 801f102:	f9bd 500a 	ldrsh.w	r5, [sp, #10]
 801f106:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801f10a:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801f10e:	f7fb fd8b 	bl	801ac28 <nema_rgba>
 801f112:	463b      	mov	r3, r7
 801f114:	9000      	str	r0, [sp, #0]
 801f116:	4632      	mov	r2, r6
 801f118:	4620      	mov	r0, r4
 801f11a:	4629      	mov	r1, r5
 801f11c:	f7fb feba 	bl	801ae94 <nema_fill_rect>
 801f120:	f8d9 0000 	ldr.w	r0, [r9]
 801f124:	b1e0      	cbz	r0, 801f160 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10c>
 801f126:	f7fe f861 	bl	801d1ec <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 801f12a:	b005      	add	sp, #20
 801f12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f130:	4b12      	ldr	r3, [pc, #72]	; (801f17c <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x128>)
 801f132:	4a13      	ldr	r2, [pc, #76]	; (801f180 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12c>)
 801f134:	8819      	ldrh	r1, [r3, #0]
 801f136:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801f13a:	8812      	ldrh	r2, [r2, #0]
 801f13c:	4638      	mov	r0, r7
 801f13e:	9300      	str	r3, [sp, #0]
 801f140:	2339      	movs	r3, #57	; 0x39
 801f142:	f7fb fdf1 	bl	801ad28 <nema_bind_dst_tex>
 801f146:	e7bd      	b.n	801f0c4 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801f148:	4b0c      	ldr	r3, [pc, #48]	; (801f17c <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x128>)
 801f14a:	4a0d      	ldr	r2, [pc, #52]	; (801f180 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12c>)
 801f14c:	8819      	ldrh	r1, [r3, #0]
 801f14e:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801f152:	8812      	ldrh	r2, [r2, #0]
 801f154:	4638      	mov	r0, r7
 801f156:	9300      	str	r3, [sp, #0]
 801f158:	2304      	movs	r3, #4
 801f15a:	f7fb fde5 	bl	801ad28 <nema_bind_dst_tex>
 801f15e:	e7b1      	b.n	801f0c4 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801f160:	4b09      	ldr	r3, [pc, #36]	; (801f188 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x134>)
 801f162:	4a0a      	ldr	r2, [pc, #40]	; (801f18c <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x138>)
 801f164:	217c      	movs	r1, #124	; 0x7c
 801f166:	480a      	ldr	r0, [pc, #40]	; (801f190 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13c>)
 801f168:	f008 ff82 	bl	8028070 <__assert_func>
 801f16c:	4b09      	ldr	r3, [pc, #36]	; (801f194 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x140>)
 801f16e:	4a0a      	ldr	r2, [pc, #40]	; (801f198 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>)
 801f170:	f44f 71cb 	mov.w	r1, #406	; 0x196
 801f174:	4809      	ldr	r0, [pc, #36]	; (801f19c <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>)
 801f176:	f008 ff7b 	bl	8028070 <__assert_func>
 801f17a:	bf00      	nop
 801f17c:	20197952 	.word	0x20197952
 801f180:	20197954 	.word	0x20197954
 801f184:	08000504 	.word	0x08000504
 801f188:	0802aea4 	.word	0x0802aea4
 801f18c:	0802b6ac 	.word	0x0802b6ac
 801f190:	0802aecc 	.word	0x0802aecc
 801f194:	0802af00 	.word	0x0802af00
 801f198:	0802b768 	.word	0x0802b768
 801f19c:	0802af48 	.word	0x0802af48
 801f1a0:	20197b88 	.word	0x20197b88

0801f1a4 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801f1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1a8:	b091      	sub	sp, #68	; 0x44
 801f1aa:	f89d 108c 	ldrb.w	r1, [sp, #140]	; 0x8c
 801f1ae:	ac0a      	add	r4, sp, #40	; 0x28
 801f1b0:	e884 000c 	stmia.w	r4, {r2, r3}
 801f1b4:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801f1b8:	1e4f      	subs	r7, r1, #1
 801f1ba:	fa5f fc87 	uxtb.w	ip, r7
 801f1be:	4682      	mov	sl, r0
 801f1c0:	9303      	str	r3, [sp, #12]
 801f1c2:	f89d 0090 	ldrb.w	r0, [sp, #144]	; 0x90
 801f1c6:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
 801f1ca:	f1bc 0f01 	cmp.w	ip, #1
 801f1ce:	9304      	str	r3, [sp, #16]
 801f1d0:	f9bd 8068 	ldrsh.w	r8, [sp, #104]	; 0x68
 801f1d4:	f9bd b06c 	ldrsh.w	fp, [sp, #108]	; 0x6c
 801f1d8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801f1da:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 801f1de:	9005      	str	r0, [sp, #20]
 801f1e0:	f89d 6094 	ldrb.w	r6, [sp, #148]	; 0x94
 801f1e4:	d905      	bls.n	801f1f2 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x4e>
 801f1e6:	2904      	cmp	r1, #4
 801f1e8:	f000 80d0 	beq.w	801f38c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e8>
 801f1ec:	2908      	cmp	r1, #8
 801f1ee:	f040 816f 	bne.w	801f4d0 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x32c>
 801f1f2:	7b53      	ldrb	r3, [r2, #13]
 801f1f4:	7990      	ldrb	r0, [r2, #6]
 801f1f6:	0159      	lsls	r1, r3, #5
 801f1f8:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801f1fc:	ea50 0901 	orrs.w	r9, r0, r1
 801f200:	f000 80c1 	beq.w	801f386 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801f204:	011b      	lsls	r3, r3, #4
 801f206:	79d0      	ldrb	r0, [r2, #7]
 801f208:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801f20c:	ea50 0301 	orrs.w	r3, r0, r1
 801f210:	9306      	str	r3, [sp, #24]
 801f212:	f000 80b8 	beq.w	801f386 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801f216:	f992 3009 	ldrsb.w	r3, [r2, #9]
 801f21a:	9a03      	ldr	r2, [sp, #12]
 801f21c:	b29b      	uxth	r3, r3
 801f21e:	2a00      	cmp	r2, #0
 801f220:	f040 80be 	bne.w	801f3a0 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fc>
 801f224:	4498      	add	r8, r3
 801f226:	fa0f f888 	sxth.w	r8, r8
 801f22a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f22c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f230:	4543      	cmp	r3, r8
 801f232:	dd06      	ble.n	801f242 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x9e>
 801f234:	9a03      	ldr	r2, [sp, #12]
 801f236:	441a      	add	r2, r3
 801f238:	eba2 0508 	sub.w	r5, r2, r8
 801f23c:	4698      	mov	r8, r3
 801f23e:	b2ab      	uxth	r3, r5
 801f240:	9303      	str	r3, [sp, #12]
 801f242:	f8df c30c 	ldr.w	ip, [pc, #780]	; 801f550 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 801f246:	465a      	mov	r2, fp
 801f248:	f89c 5000 	ldrb.w	r5, [ip]
 801f24c:	4641      	mov	r1, r8
 801f24e:	4633      	mov	r3, r6
 801f250:	4620      	mov	r0, r4
 801f252:	9507      	str	r5, [sp, #28]
 801f254:	f7f8 f8be 	bl	80173d4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801f258:	465a      	mov	r2, fp
 801f25a:	4641      	mov	r1, r8
 801f25c:	4633      	mov	r3, r6
 801f25e:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 801f262:	4620      	mov	r0, r4
 801f264:	f7f8 f8d3 	bl	801740e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801f268:	a910      	add	r1, sp, #64	; 0x40
 801f26a:	f821 0d0a 	strh.w	r0, [r1, #-10]!
 801f26e:	a80d      	add	r0, sp, #52	; 0x34
 801f270:	f7f8 f9f4 	bl	801765c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801f274:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f276:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801f27a:	9308      	str	r3, [sp, #32]
 801f27c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f27e:	f3c3 2b07 	ubfx	fp, r3, #8, #8
 801f282:	fa5f f883 	uxtb.w	r8, r3
 801f286:	2f07      	cmp	r7, #7
 801f288:	f200 811f 	bhi.w	801f4ca <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x326>
 801f28c:	e8df f017 	tbh	[pc, r7, lsl #1]
 801f290:	009b00a1 	.word	0x009b00a1
 801f294:	0095011d 	.word	0x0095011d
 801f298:	011d011d 	.word	0x011d011d
 801f29c:	0008011d 	.word	0x0008011d
 801f2a0:	2708      	movs	r7, #8
 801f2a2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801f2a6:	4ca1      	ldr	r4, [pc, #644]	; (801f52c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801f2a8:	6820      	ldr	r0, [r4, #0]
 801f2aa:	2800      	cmp	r0, #0
 801f2ac:	f000 8137 	beq.w	801f51e <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 801f2b0:	f7fd ff7c 	bl	801d1ac <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 801f2b4:	f8da 3000 	ldr.w	r3, [sl]
 801f2b8:	4650      	mov	r0, sl
 801f2ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801f2bc:	4798      	blx	r3
 801f2be:	2e02      	cmp	r6, #2
 801f2c0:	f000 80e6 	beq.w	801f490 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ec>
 801f2c4:	2e03      	cmp	r6, #3
 801f2c6:	f000 80c7 	beq.w	801f458 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2b4>
 801f2ca:	2e01      	cmp	r6, #1
 801f2cc:	f000 80a8 	beq.w	801f420 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x27c>
 801f2d0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f2d2:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801f2d6:	8819      	ldrh	r1, [r3, #0]
 801f2d8:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801f2dc:	440a      	add	r2, r1
 801f2de:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f2e0:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801f2e4:	8848      	ldrh	r0, [r1, #2]
 801f2e6:	6849      	ldr	r1, [r1, #4]
 801f2e8:	4403      	add	r3, r0
 801f2ea:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801f2ee:	910f      	str	r1, [sp, #60]	; 0x3c
 801f2f0:	a80e      	add	r0, sp, #56	; 0x38
 801f2f2:	f7f8 f9f5 	bl	80176e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f2f6:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801f2fa:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801f2fe:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801f302:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 801f306:	f7fb fc5b 	bl	801abc0 <nema_set_clip>
 801f30a:	2200      	movs	r2, #0
 801f30c:	9d05      	ldr	r5, [sp, #20]
 801f30e:	4611      	mov	r1, r2
 801f310:	462b      	mov	r3, r5
 801f312:	4610      	mov	r0, r2
 801f314:	f7fb fc88 	bl	801ac28 <nema_rgba>
 801f318:	f7fd fe60 	bl	801cfdc <nema_set_const_color>
 801f31c:	462b      	mov	r3, r5
 801f31e:	4642      	mov	r2, r8
 801f320:	4659      	mov	r1, fp
 801f322:	9808      	ldr	r0, [sp, #32]
 801f324:	f7fb fc80 	bl	801ac28 <nema_rgba>
 801f328:	f7fb fc3e 	bl	801aba8 <nema_set_tex_color>
 801f32c:	f04f 33ff 	mov.w	r3, #4294967295
 801f330:	2201      	movs	r2, #1
 801f332:	2100      	movs	r1, #0
 801f334:	487e      	ldr	r0, [pc, #504]	; (801f530 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 801f336:	f7fd fa8b 	bl	801c850 <nema_set_blend>
 801f33a:	2200      	movs	r2, #0
 801f33c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f33e:	9201      	str	r2, [sp, #4]
 801f340:	9300      	str	r3, [sp, #0]
 801f342:	4649      	mov	r1, r9
 801f344:	463b      	mov	r3, r7
 801f346:	9820      	ldr	r0, [sp, #128]	; 0x80
 801f348:	9a06      	ldr	r2, [sp, #24]
 801f34a:	f7fb fc75 	bl	801ac38 <nema_bind_src_tex>
 801f34e:	9b07      	ldr	r3, [sp, #28]
 801f350:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 801f354:	2b01      	cmp	r3, #1
 801f356:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 801f35a:	d040      	beq.n	801f3de <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x23a>
 801f35c:	2e02      	cmp	r6, #2
 801f35e:	d051      	beq.n	801f404 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x260>
 801f360:	2e03      	cmp	r6, #3
 801f362:	f000 80c7 	beq.w	801f4f4 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801f366:	2e01      	cmp	r6, #1
 801f368:	9b04      	ldr	r3, [sp, #16]
 801f36a:	f000 80b8 	beq.w	801f4de <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33a>
 801f36e:	1ac9      	subs	r1, r1, r3
 801f370:	9b03      	ldr	r3, [sp, #12]
 801f372:	1ac0      	subs	r0, r0, r3
 801f374:	f7fb fda0 	bl	801aeb8 <nema_blit>
 801f378:	6823      	ldr	r3, [r4, #0]
 801f37a:	2b00      	cmp	r3, #0
 801f37c:	f000 80cf 	beq.w	801f51e <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 801f380:	2201      	movs	r2, #1
 801f382:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 801f386:	b011      	add	sp, #68	; 0x44
 801f388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f38c:	2b00      	cmp	r3, #0
 801f38e:	f47f af30 	bne.w	801f1f2 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x4e>
 801f392:	4b68      	ldr	r3, [pc, #416]	; (801f534 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801f394:	4a68      	ldr	r2, [pc, #416]	; (801f538 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 801f396:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 801f39a:	4868      	ldr	r0, [pc, #416]	; (801f53c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>)
 801f39c:	f008 fe68 	bl	8028070 <__assert_func>
 801f3a0:	1ad5      	subs	r5, r2, r3
 801f3a2:	b2ab      	uxth	r3, r5
 801f3a4:	041a      	lsls	r2, r3, #16
 801f3a6:	9303      	str	r3, [sp, #12]
 801f3a8:	f57f af3f 	bpl.w	801f22a <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x86>
 801f3ac:	eba8 0803 	sub.w	r8, r8, r3
 801f3b0:	2300      	movs	r3, #0
 801f3b2:	fa0f f888 	sxth.w	r8, r8
 801f3b6:	9303      	str	r3, [sp, #12]
 801f3b8:	e737      	b.n	801f22a <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x86>
 801f3ba:	f109 0301 	add.w	r3, r9, #1
 801f3be:	105b      	asrs	r3, r3, #1
 801f3c0:	9309      	str	r3, [sp, #36]	; 0x24
 801f3c2:	2729      	movs	r7, #41	; 0x29
 801f3c4:	e76f      	b.n	801f2a6 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801f3c6:	f109 0303 	add.w	r3, r9, #3
 801f3ca:	109b      	asrs	r3, r3, #2
 801f3cc:	9309      	str	r3, [sp, #36]	; 0x24
 801f3ce:	2728      	movs	r7, #40	; 0x28
 801f3d0:	e769      	b.n	801f2a6 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801f3d2:	f109 0307 	add.w	r3, r9, #7
 801f3d6:	10db      	asrs	r3, r3, #3
 801f3d8:	9309      	str	r3, [sp, #36]	; 0x24
 801f3da:	2727      	movs	r7, #39	; 0x27
 801f3dc:	e763      	b.n	801f2a6 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801f3de:	2e02      	cmp	r6, #2
 801f3e0:	f000 8093 	beq.w	801f50a <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x366>
 801f3e4:	2e03      	cmp	r6, #3
 801f3e6:	d00d      	beq.n	801f404 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x260>
 801f3e8:	2e01      	cmp	r6, #1
 801f3ea:	f000 8091 	beq.w	801f510 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 801f3ee:	461a      	mov	r2, r3
 801f3f0:	9b03      	ldr	r3, [sp, #12]
 801f3f2:	4419      	add	r1, r3
 801f3f4:	9b04      	ldr	r3, [sp, #16]
 801f3f6:	eba1 0109 	sub.w	r1, r1, r9
 801f3fa:	3101      	adds	r1, #1
 801f3fc:	1ac0      	subs	r0, r0, r3
 801f3fe:	f7fb fd75 	bl	801aeec <nema_blit_rotate>
 801f402:	e7b9      	b.n	801f378 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 801f404:	9b04      	ldr	r3, [sp, #16]
 801f406:	2202      	movs	r2, #2
 801f408:	4419      	add	r1, r3
 801f40a:	9b03      	ldr	r3, [sp, #12]
 801f40c:	4418      	add	r0, r3
 801f40e:	9b06      	ldr	r3, [sp, #24]
 801f410:	eba0 0009 	sub.w	r0, r0, r9
 801f414:	1ac9      	subs	r1, r1, r3
 801f416:	3101      	adds	r1, #1
 801f418:	3001      	adds	r0, #1
 801f41a:	f7fb fd67 	bl	801aeec <nema_blit_rotate>
 801f41e:	e7ab      	b.n	801f378 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 801f420:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801f424:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801f428:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801f42a:	440b      	add	r3, r1
 801f42c:	8852      	ldrh	r2, [r2, #2]
 801f42e:	981e      	ldr	r0, [sp, #120]	; 0x78
 801f430:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f432:	1a9b      	subs	r3, r3, r2
 801f434:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 801f438:	f8b0 c000 	ldrh.w	ip, [r0]
 801f43c:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801f440:	8880      	ldrh	r0, [r0, #4]
 801f442:	1a5b      	subs	r3, r3, r1
 801f444:	4462      	add	r2, ip
 801f446:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801f44a:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c
 801f44e:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 801f452:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
 801f456:	e74b      	b.n	801f2f0 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x14c>
 801f458:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801f45c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801f460:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801f462:	440b      	add	r3, r1
 801f464:	8812      	ldrh	r2, [r2, #0]
 801f466:	981e      	ldr	r0, [sp, #120]	; 0x78
 801f468:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f46a:	1a9b      	subs	r3, r3, r2
 801f46c:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 801f470:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 801f474:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801f478:	88c0      	ldrh	r0, [r0, #6]
 801f47a:	1a5b      	subs	r3, r3, r1
 801f47c:	4462      	add	r2, ip
 801f47e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801f482:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
 801f486:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801f48a:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 801f48e:	e72f      	b.n	801f2f0 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x14c>
 801f490:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801f494:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801f498:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801f49c:	440a      	add	r2, r1
 801f49e:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f4a0:	8808      	ldrh	r0, [r1, #0]
 801f4a2:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801f4a6:	1a12      	subs	r2, r2, r0
 801f4a8:	440b      	add	r3, r1
 801f4aa:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f4ac:	981e      	ldr	r0, [sp, #120]	; 0x78
 801f4ae:	8849      	ldrh	r1, [r1, #2]
 801f4b0:	8880      	ldrh	r0, [r0, #4]
 801f4b2:	1a5b      	subs	r3, r3, r1
 801f4b4:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f4b6:	1a12      	subs	r2, r2, r0
 801f4b8:	88c8      	ldrh	r0, [r1, #6]
 801f4ba:	6849      	ldr	r1, [r1, #4]
 801f4bc:	1a1b      	subs	r3, r3, r0
 801f4be:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801f4c2:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801f4c6:	910f      	str	r1, [sp, #60]	; 0x3c
 801f4c8:	e712      	b.n	801f2f0 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x14c>
 801f4ca:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801f4ce:	e6ea      	b.n	801f2a6 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801f4d0:	4b1b      	ldr	r3, [pc, #108]	; (801f540 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 801f4d2:	4a19      	ldr	r2, [pc, #100]	; (801f538 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 801f4d4:	f240 11ab 	movw	r1, #427	; 0x1ab
 801f4d8:	4818      	ldr	r0, [pc, #96]	; (801f53c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>)
 801f4da:	f008 fdc9 	bl	8028070 <__assert_func>
 801f4de:	4403      	add	r3, r0
 801f4e0:	4618      	mov	r0, r3
 801f4e2:	9b06      	ldr	r3, [sp, #24]
 801f4e4:	2203      	movs	r2, #3
 801f4e6:	1ac0      	subs	r0, r0, r3
 801f4e8:	9b03      	ldr	r3, [sp, #12]
 801f4ea:	3001      	adds	r0, #1
 801f4ec:	1ac9      	subs	r1, r1, r3
 801f4ee:	f7fb fcfd 	bl	801aeec <nema_blit_rotate>
 801f4f2:	e741      	b.n	801f378 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 801f4f4:	9b03      	ldr	r3, [sp, #12]
 801f4f6:	2201      	movs	r2, #1
 801f4f8:	4419      	add	r1, r3
 801f4fa:	9b04      	ldr	r3, [sp, #16]
 801f4fc:	eba1 0109 	sub.w	r1, r1, r9
 801f500:	3101      	adds	r1, #1
 801f502:	1ac0      	subs	r0, r0, r3
 801f504:	f7fb fcf2 	bl	801aeec <nema_blit_rotate>
 801f508:	e736      	b.n	801f378 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 801f50a:	9b04      	ldr	r3, [sp, #16]
 801f50c:	4418      	add	r0, r3
 801f50e:	e7e8      	b.n	801f4e2 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801f510:	9b04      	ldr	r3, [sp, #16]
 801f512:	1ac9      	subs	r1, r1, r3
 801f514:	9b03      	ldr	r3, [sp, #12]
 801f516:	1ac0      	subs	r0, r0, r3
 801f518:	f7fb fcce 	bl	801aeb8 <nema_blit>
 801f51c:	e72c      	b.n	801f378 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 801f51e:	4b09      	ldr	r3, [pc, #36]	; (801f544 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801f520:	4a09      	ldr	r2, [pc, #36]	; (801f548 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801f522:	217c      	movs	r1, #124	; 0x7c
 801f524:	4809      	ldr	r0, [pc, #36]	; (801f54c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801f526:	f008 fda3 	bl	8028070 <__assert_func>
 801f52a:	bf00      	nop
 801f52c:	20197b88 	.word	0x20197b88
 801f530:	08000504 	.word	0x08000504
 801f534:	0802b3b8 	.word	0x0802b3b8
 801f538:	0802c0e0 	.word	0x0802c0e0
 801f53c:	0802af48 	.word	0x0802af48
 801f540:	0802b328 	.word	0x0802b328
 801f544:	0802aea4 	.word	0x0802aea4
 801f548:	0802b6ac 	.word	0x0802b6ac
 801f54c:	0802aecc 	.word	0x0802aecc
 801f550:	20197950 	.word	0x20197950

0801f554 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801f554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f558:	b087      	sub	sp, #28
 801f55a:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801f55e:	e9dd 8410 	ldrd	r8, r4, [sp, #64]	; 0x40
 801f562:	f8bd 7048 	ldrh.w	r7, [sp, #72]	; 0x48
 801f566:	f8bd e050 	ldrh.w	lr, [sp, #80]	; 0x50
 801f56a:	2e00      	cmp	r6, #0
 801f56c:	d065      	beq.n	801f63a <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xe6>
 801f56e:	f9b4 a004 	ldrsh.w	sl, [r4, #4]
 801f572:	f1ba 0f00 	cmp.w	sl, #0
 801f576:	dd60      	ble.n	801f63a <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xe6>
 801f578:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 801f57c:	f1ba 0f00 	cmp.w	sl, #0
 801f580:	dd5b      	ble.n	801f63a <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xe6>
 801f582:	f3c7 0a87 	ubfx	sl, r7, #2, #8
 801f586:	f1ba 0f0b 	cmp.w	sl, #11
 801f58a:	d059      	beq.n	801f640 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xec>
 801f58c:	469c      	mov	ip, r3
 801f58e:	4b7e      	ldr	r3, [pc, #504]	; (801f788 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x234>)
 801f590:	4615      	mov	r5, r2
 801f592:	f893 b000 	ldrb.w	fp, [r3]
 801f596:	f8dc 3008 	ldr.w	r3, [ip, #8]
 801f59a:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801f59e:	9303      	str	r3, [sp, #12]
 801f5a0:	f1bb 0f01 	cmp.w	fp, #1
 801f5a4:	f8dc 300c 	ldr.w	r3, [ip, #12]
 801f5a8:	9205      	str	r2, [sp, #20]
 801f5aa:	bf08      	it	eq
 801f5ac:	9a03      	ldreq	r2, [sp, #12]
 801f5ae:	9302      	str	r3, [sp, #8]
 801f5b0:	bf08      	it	eq
 801f5b2:	e9cd 2302 	strdeq	r2, r3, [sp, #8]
 801f5b6:	f1ba 0f0d 	cmp.w	sl, #13
 801f5ba:	4681      	mov	r9, r0
 801f5bc:	d034      	beq.n	801f628 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd4>
 801f5be:	4b73      	ldr	r3, [pc, #460]	; (801f78c <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x238>)
 801f5c0:	6818      	ldr	r0, [r3, #0]
 801f5c2:	2800      	cmp	r0, #0
 801f5c4:	f000 80d3 	beq.w	801f76e <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x21a>
 801f5c8:	f8dc 3000 	ldr.w	r3, [ip]
 801f5cc:	9304      	str	r3, [sp, #16]
 801f5ce:	f7fd fded 	bl	801d1ac <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 801f5d2:	f8d9 3000 	ldr.w	r3, [r9]
 801f5d6:	4648      	mov	r0, r9
 801f5d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801f5da:	4798      	blx	r3
 801f5dc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801f5e0:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801f5e4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801f5e8:	f9b4 0000 	ldrsh.w	r0, [r4]
 801f5ec:	f7fb fae8 	bl	801abc0 <nema_set_clip>
 801f5f0:	2200      	movs	r2, #0
 801f5f2:	4633      	mov	r3, r6
 801f5f4:	4611      	mov	r1, r2
 801f5f6:	4610      	mov	r0, r2
 801f5f8:	f7fb fb16 	bl	801ac28 <nema_rgba>
 801f5fc:	f7fd fcee 	bl	801cfdc <nema_set_const_color>
 801f600:	f04f 33ff 	mov.w	r3, #4294967295
 801f604:	2201      	movs	r2, #1
 801f606:	2100      	movs	r1, #0
 801f608:	4861      	ldr	r0, [pc, #388]	; (801f790 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x23c>)
 801f60a:	f7fd f921 	bl	801c850 <nema_set_blend>
 801f60e:	f1ba 0f0d 	cmp.w	sl, #13
 801f612:	f200 80b2 	bhi.w	801f77a <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x226>
 801f616:	e8df f00a 	tbb	[pc, sl]
 801f61a:	8d1b      	.short	0x8d1b
 801f61c:	b0b0b08b 	.word	0xb0b0b08b
 801f620:	b0b0b0b0 	.word	0xb0b0b0b0
 801f624:	888fb0b0 	.word	0x888fb0b0
 801f628:	9b05      	ldr	r3, [sp, #20]
 801f62a:	b133      	cbz	r3, 801f63a <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xe6>
 801f62c:	781b      	ldrb	r3, [r3, #0]
 801f62e:	f1a3 0216 	sub.w	r2, r3, #22
 801f632:	2a01      	cmp	r2, #1
 801f634:	d9c3      	bls.n	801f5be <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6a>
 801f636:	2b12      	cmp	r3, #18
 801f638:	d0c1      	beq.n	801f5be <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6a>
 801f63a:	b007      	add	sp, #28
 801f63c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f640:	e9cd 6e13 	strd	r6, lr, [sp, #76]	; 0x4c
 801f644:	9712      	str	r7, [sp, #72]	; 0x48
 801f646:	b007      	add	sp, #28
 801f648:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f64c:	f7f7 b9be 	b.w	80169cc <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>
 801f650:	2304      	movs	r3, #4
 801f652:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801f656:	f04f 34ff 	mov.w	r4, #4294967295
 801f65a:	f007 0701 	and.w	r7, r7, #1
 801f65e:	9804      	ldr	r0, [sp, #16]
 801f660:	9701      	str	r7, [sp, #4]
 801f662:	9400      	str	r4, [sp, #0]
 801f664:	f7fb fae8 	bl	801ac38 <nema_bind_src_tex>
 801f668:	2001      	movs	r0, #1
 801f66a:	f7fc f915 	bl	801b898 <nema_enable_tiling>
 801f66e:	2301      	movs	r3, #1
 801f670:	461a      	mov	r2, r3
 801f672:	4619      	mov	r1, r3
 801f674:	4618      	mov	r0, r3
 801f676:	f7fc f923 	bl	801b8c0 <nema_enable_aa>
 801f67a:	f1bb 0f01 	cmp.w	fp, #1
 801f67e:	d069      	beq.n	801f754 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x200>
 801f680:	edd5 2a00 	vldr	s5, [r5]
 801f684:	ed95 4a01 	vldr	s8, [r5, #4]
 801f688:	edd5 4a05 	vldr	s9, [r5, #20]
 801f68c:	ed95 5a06 	vldr	s10, [r5, #24]
 801f690:	edd5 5a0a 	vldr	s11, [r5, #40]	; 0x28
 801f694:	ed95 6a0b 	vldr	s12, [r5, #44]	; 0x2c
 801f698:	353c      	adds	r5, #60	; 0x3c
 801f69a:	f9b8 3000 	ldrsh.w	r3, [r8]
 801f69e:	eddf 7a3d 	vldr	s15, [pc, #244]	; 801f794 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x240>
 801f6a2:	ee00 3a10 	vmov	s0, r3
 801f6a6:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 801f6aa:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801f6ae:	ee03 3a90 	vmov	s7, r3
 801f6b2:	edd5 6a00 	vldr	s13, [r5]
 801f6b6:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801f6ba:	ed95 7a01 	vldr	s14, [r5, #4]
 801f6be:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 801f6c2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801f6c6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801f6ca:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801f6ce:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801f6d2:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801f6d6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801f6da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f6de:	eeb0 3a40 	vmov.f32	s6, s0
 801f6e2:	eeb0 2a40 	vmov.f32	s4, s0
 801f6e6:	eeb0 1a40 	vmov.f32	s2, s0
 801f6ea:	eef0 1a63 	vmov.f32	s3, s7
 801f6ee:	eea2 0aa7 	vfma.f32	s0, s5, s15
 801f6f2:	eef0 0a63 	vmov.f32	s1, s7
 801f6f6:	eef0 2a63 	vmov.f32	s5, s7
 801f6fa:	eea6 3aa7 	vfma.f32	s6, s13, s15
 801f6fe:	eea5 2aa7 	vfma.f32	s4, s11, s15
 801f702:	eea4 1aa7 	vfma.f32	s2, s9, s15
 801f706:	eee6 2a27 	vfma.f32	s5, s12, s15
 801f70a:	eee5 1a27 	vfma.f32	s3, s10, s15
 801f70e:	eee4 0a27 	vfma.f32	s1, s8, s15
 801f712:	eee7 3a27 	vfma.f32	s7, s14, s15
 801f716:	f7fb fd49 	bl	801b1ac <nema_blit_quad_fit>
 801f71a:	4b1c      	ldr	r3, [pc, #112]	; (801f78c <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x238>)
 801f71c:	6818      	ldr	r0, [r3, #0]
 801f71e:	b330      	cbz	r0, 801f76e <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x21a>
 801f720:	b007      	add	sp, #28
 801f722:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f726:	f7fd bd61 	b.w	801d1ec <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 801f72a:	9b05      	ldr	r3, [sp, #20]
 801f72c:	781b      	ldrb	r3, [r3, #0]
 801f72e:	e790      	b.n	801f652 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xfe>
 801f730:	2310      	movs	r3, #16
 801f732:	e78e      	b.n	801f652 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xfe>
 801f734:	2339      	movs	r3, #57	; 0x39
 801f736:	e78c      	b.n	801f652 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xfe>
 801f738:	4a17      	ldr	r2, [pc, #92]	; (801f798 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x244>)
 801f73a:	23ff      	movs	r3, #255	; 0xff
 801f73c:	6810      	ldr	r0, [r2, #0]
 801f73e:	b2c2      	uxtb	r2, r0
 801f740:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801f744:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801f748:	f7fb fa6e 	bl	801ac28 <nema_rgba>
 801f74c:	f7fb fa2c 	bl	801aba8 <nema_set_tex_color>
 801f750:	2329      	movs	r3, #41	; 0x29
 801f752:	e77e      	b.n	801f652 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xfe>
 801f754:	edd5 2a05 	vldr	s5, [r5, #20]
 801f758:	ed95 4a06 	vldr	s8, [r5, #24]
 801f75c:	edd5 4a0a 	vldr	s9, [r5, #40]	; 0x28
 801f760:	ed95 5a0b 	vldr	s10, [r5, #44]	; 0x2c
 801f764:	edd5 5a0f 	vldr	s11, [r5, #60]	; 0x3c
 801f768:	ed95 6a10 	vldr	s12, [r5, #64]	; 0x40
 801f76c:	e795      	b.n	801f69a <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x146>
 801f76e:	4b0b      	ldr	r3, [pc, #44]	; (801f79c <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x248>)
 801f770:	4a0b      	ldr	r2, [pc, #44]	; (801f7a0 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x24c>)
 801f772:	217c      	movs	r1, #124	; 0x7c
 801f774:	480b      	ldr	r0, [pc, #44]	; (801f7a4 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x250>)
 801f776:	f008 fc7b 	bl	8028070 <__assert_func>
 801f77a:	4b0b      	ldr	r3, [pc, #44]	; (801f7a8 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x254>)
 801f77c:	4a0b      	ldr	r2, [pc, #44]	; (801f7ac <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x258>)
 801f77e:	f240 314f 	movw	r1, #847	; 0x34f
 801f782:	480b      	ldr	r0, [pc, #44]	; (801f7b0 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x25c>)
 801f784:	f008 fc74 	bl	8028070 <__assert_func>
 801f788:	20197950 	.word	0x20197950
 801f78c:	20197b88 	.word	0x20197b88
 801f790:	08000504 	.word	0x08000504
 801f794:	3d800000 	.word	0x3d800000
 801f798:	20197960 	.word	0x20197960
 801f79c:	0802aea4 	.word	0x0802aea4
 801f7a0:	0802b6ac 	.word	0x0802b6ac
 801f7a4:	0802aecc 	.word	0x0802aecc
 801f7a8:	0802ad9c 	.word	0x0802ad9c
 801f7ac:	0802b864 	.word	0x0802b864
 801f7b0:	0802af48 	.word	0x0802af48

0801f7b4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801f7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f7b8:	4680      	mov	r8, r0
 801f7ba:	460f      	mov	r7, r1
 801f7bc:	4614      	mov	r4, r2
 801f7be:	461e      	mov	r6, r3
 801f7c0:	4db2      	ldr	r5, [pc, #712]	; (801fa8c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2d8>)
 801f7c2:	e8d5 3f8f 	ldab	r3, [r5]
 801f7c6:	07da      	lsls	r2, r3, #31
 801f7c8:	f140 823a 	bpl.w	801fc40 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x48c>
 801f7cc:	4db0      	ldr	r5, [pc, #704]	; (801fa90 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2dc>)
 801f7ce:	e8d5 3f8f 	ldab	r3, [r5]
 801f7d2:	07db      	lsls	r3, r3, #31
 801f7d4:	f140 8225 	bpl.w	801fc22 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46e>
 801f7d8:	4dae      	ldr	r5, [pc, #696]	; (801fa94 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2e0>)
 801f7da:	e8d5 3f8f 	ldab	r3, [r5]
 801f7de:	07d8      	lsls	r0, r3, #31
 801f7e0:	f140 8210 	bpl.w	801fc04 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x450>
 801f7e4:	4dac      	ldr	r5, [pc, #688]	; (801fa98 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2e4>)
 801f7e6:	e8d5 3f8f 	ldab	r3, [r5]
 801f7ea:	07d9      	lsls	r1, r3, #31
 801f7ec:	f140 81fb 	bpl.w	801fbe6 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x432>
 801f7f0:	4daa      	ldr	r5, [pc, #680]	; (801fa9c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2e8>)
 801f7f2:	e8d5 3f8f 	ldab	r3, [r5]
 801f7f6:	07da      	lsls	r2, r3, #31
 801f7f8:	f140 81e6 	bpl.w	801fbc8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x414>
 801f7fc:	4da8      	ldr	r5, [pc, #672]	; (801faa0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2ec>)
 801f7fe:	e8d5 3f8f 	ldab	r3, [r5]
 801f802:	07db      	lsls	r3, r3, #31
 801f804:	f140 81d1 	bpl.w	801fbaa <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3f6>
 801f808:	4da6      	ldr	r5, [pc, #664]	; (801faa4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2f0>)
 801f80a:	e8d5 3f8f 	ldab	r3, [r5]
 801f80e:	07d8      	lsls	r0, r3, #31
 801f810:	f140 81bc 	bpl.w	801fb8c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3d8>
 801f814:	4da4      	ldr	r5, [pc, #656]	; (801faa8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2f4>)
 801f816:	e8d5 3f8f 	ldab	r3, [r5]
 801f81a:	07d9      	lsls	r1, r3, #31
 801f81c:	f140 81a7 	bpl.w	801fb6e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3ba>
 801f820:	4da2      	ldr	r5, [pc, #648]	; (801faac <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2f8>)
 801f822:	e8d5 3f8f 	ldab	r3, [r5]
 801f826:	07da      	lsls	r2, r3, #31
 801f828:	f140 8192 	bpl.w	801fb50 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x39c>
 801f82c:	4da0      	ldr	r5, [pc, #640]	; (801fab0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2fc>)
 801f82e:	e8d5 3f8f 	ldab	r3, [r5]
 801f832:	07db      	lsls	r3, r3, #31
 801f834:	f140 811a 	bpl.w	801fa6c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2b8>
 801f838:	4d9e      	ldr	r5, [pc, #632]	; (801fab4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x300>)
 801f83a:	e8d5 3f8f 	ldab	r3, [r5]
 801f83e:	07d8      	lsls	r0, r3, #31
 801f840:	f140 8105 	bpl.w	801fa4e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x29a>
 801f844:	4d9c      	ldr	r5, [pc, #624]	; (801fab8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x304>)
 801f846:	e8d5 3f8f 	ldab	r3, [r5]
 801f84a:	07d9      	lsls	r1, r3, #31
 801f84c:	f140 80f0 	bpl.w	801fa30 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x27c>
 801f850:	4d9a      	ldr	r5, [pc, #616]	; (801fabc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x308>)
 801f852:	e8d5 3f8f 	ldab	r3, [r5]
 801f856:	07da      	lsls	r2, r3, #31
 801f858:	f140 80db 	bpl.w	801fa12 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x25e>
 801f85c:	4d98      	ldr	r5, [pc, #608]	; (801fac0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x30c>)
 801f85e:	e8d5 3f8f 	ldab	r3, [r5]
 801f862:	07db      	lsls	r3, r3, #31
 801f864:	f140 80c6 	bpl.w	801f9f4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x240>
 801f868:	4d96      	ldr	r5, [pc, #600]	; (801fac4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x310>)
 801f86a:	e8d5 3f8f 	ldab	r3, [r5]
 801f86e:	07d8      	lsls	r0, r3, #31
 801f870:	f140 80b1 	bpl.w	801f9d6 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x222>
 801f874:	4d94      	ldr	r5, [pc, #592]	; (801fac8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x314>)
 801f876:	e8d5 3f8f 	ldab	r3, [r5]
 801f87a:	07d9      	lsls	r1, r3, #31
 801f87c:	f140 809c 	bpl.w	801f9b8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x204>
 801f880:	4d92      	ldr	r5, [pc, #584]	; (801facc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x318>)
 801f882:	e8d5 3f8f 	ldab	r3, [r5]
 801f886:	07da      	lsls	r2, r3, #31
 801f888:	f140 8087 	bpl.w	801f99a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e6>
 801f88c:	4d90      	ldr	r5, [pc, #576]	; (801fad0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x31c>)
 801f88e:	e8d5 3f8f 	ldab	r3, [r5]
 801f892:	07db      	lsls	r3, r3, #31
 801f894:	d573      	bpl.n	801f97e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1ca>
 801f896:	4d8f      	ldr	r5, [pc, #572]	; (801fad4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x320>)
 801f898:	e8d5 3f8f 	ldab	r3, [r5]
 801f89c:	07d8      	lsls	r0, r3, #31
 801f89e:	d560      	bpl.n	801f962 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1ae>
 801f8a0:	4d8d      	ldr	r5, [pc, #564]	; (801fad8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x324>)
 801f8a2:	e8d5 3f8f 	ldab	r3, [r5]
 801f8a6:	07d9      	lsls	r1, r3, #31
 801f8a8:	d54d      	bpl.n	801f946 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x192>
 801f8aa:	4d8c      	ldr	r5, [pc, #560]	; (801fadc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x328>)
 801f8ac:	e8d5 3f8f 	ldab	r3, [r5]
 801f8b0:	07da      	lsls	r2, r3, #31
 801f8b2:	d53a      	bpl.n	801f92a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 801f8b4:	4d8a      	ldr	r5, [pc, #552]	; (801fae0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x32c>)
 801f8b6:	e8d5 3f8f 	ldab	r3, [r5]
 801f8ba:	07db      	lsls	r3, r3, #31
 801f8bc:	d517      	bpl.n	801f8ee <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801f8be:	f898 3008 	ldrb.w	r3, [r8, #8]
 801f8c2:	2b01      	cmp	r3, #1
 801f8c4:	d024      	beq.n	801f910 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15c>
 801f8c6:	f0c0 81ca 	bcc.w	801fc5e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4aa>
 801f8ca:	2b02      	cmp	r3, #2
 801f8cc:	d002      	beq.n	801f8d4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801f8ce:	2000      	movs	r0, #0
 801f8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f8d4:	2eff      	cmp	r6, #255	; 0xff
 801f8d6:	f1a4 042c 	sub.w	r4, r4, #44	; 0x2c
 801f8da:	f000 81cb 	beq.w	801fc74 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c0>
 801f8de:	2c03      	cmp	r4, #3
 801f8e0:	d8f5      	bhi.n	801f8ce <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801f8e2:	e8df f014 	tbh	[pc, r4, lsl #1]
 801f8e6:	01ff      	.short	0x01ff
 801f8e8:	01e701ee 	.word	0x01e701ee
 801f8ec:	01e0      	.short	0x01e0
 801f8ee:	4628      	mov	r0, r5
 801f8f0:	f008 fb93 	bl	802801a <__cxa_guard_acquire>
 801f8f4:	2800      	cmp	r0, #0
 801f8f6:	d0e2      	beq.n	801f8be <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10a>
 801f8f8:	4628      	mov	r0, r5
 801f8fa:	f008 fb9a 	bl	8028032 <__cxa_guard_release>
 801f8fe:	4a79      	ldr	r2, [pc, #484]	; (801fae4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801f900:	4979      	ldr	r1, [pc, #484]	; (801fae8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x334>)
 801f902:	487a      	ldr	r0, [pc, #488]	; (801faec <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x338>)
 801f904:	f008 fb82 	bl	802800c <__aeabi_atexit>
 801f908:	f898 3008 	ldrb.w	r3, [r8, #8]
 801f90c:	2b01      	cmp	r3, #1
 801f90e:	d1da      	bne.n	801f8c6 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x112>
 801f910:	2eff      	cmp	r6, #255	; 0xff
 801f912:	f1a4 042c 	sub.w	r4, r4, #44	; 0x2c
 801f916:	f000 81b6 	beq.w	801fc86 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4d2>
 801f91a:	2c03      	cmp	r4, #3
 801f91c:	d8d7      	bhi.n	801f8ce <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801f91e:	e8df f014 	tbh	[pc, r4, lsl #1]
 801f922:	0233      	.short	0x0233
 801f924:	021b0222 	.word	0x021b0222
 801f928:	0214      	.short	0x0214
 801f92a:	4628      	mov	r0, r5
 801f92c:	f008 fb75 	bl	802801a <__cxa_guard_acquire>
 801f930:	2800      	cmp	r0, #0
 801f932:	d0bf      	beq.n	801f8b4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801f934:	4628      	mov	r0, r5
 801f936:	f008 fb7c 	bl	8028032 <__cxa_guard_release>
 801f93a:	4a6a      	ldr	r2, [pc, #424]	; (801fae4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801f93c:	496c      	ldr	r1, [pc, #432]	; (801faf0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x33c>)
 801f93e:	486d      	ldr	r0, [pc, #436]	; (801faf4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x340>)
 801f940:	f008 fb64 	bl	802800c <__aeabi_atexit>
 801f944:	e7b6      	b.n	801f8b4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801f946:	4628      	mov	r0, r5
 801f948:	f008 fb67 	bl	802801a <__cxa_guard_acquire>
 801f94c:	2800      	cmp	r0, #0
 801f94e:	d0ac      	beq.n	801f8aa <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf6>
 801f950:	4628      	mov	r0, r5
 801f952:	f008 fb6e 	bl	8028032 <__cxa_guard_release>
 801f956:	4a63      	ldr	r2, [pc, #396]	; (801fae4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801f958:	4967      	ldr	r1, [pc, #412]	; (801faf8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x344>)
 801f95a:	4868      	ldr	r0, [pc, #416]	; (801fafc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x348>)
 801f95c:	f008 fb56 	bl	802800c <__aeabi_atexit>
 801f960:	e7a3      	b.n	801f8aa <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf6>
 801f962:	4628      	mov	r0, r5
 801f964:	f008 fb59 	bl	802801a <__cxa_guard_acquire>
 801f968:	2800      	cmp	r0, #0
 801f96a:	d099      	beq.n	801f8a0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801f96c:	4628      	mov	r0, r5
 801f96e:	f008 fb60 	bl	8028032 <__cxa_guard_release>
 801f972:	4a5c      	ldr	r2, [pc, #368]	; (801fae4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801f974:	4962      	ldr	r1, [pc, #392]	; (801fb00 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x34c>)
 801f976:	4863      	ldr	r0, [pc, #396]	; (801fb04 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x350>)
 801f978:	f008 fb48 	bl	802800c <__aeabi_atexit>
 801f97c:	e790      	b.n	801f8a0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801f97e:	4628      	mov	r0, r5
 801f980:	f008 fb4b 	bl	802801a <__cxa_guard_acquire>
 801f984:	2800      	cmp	r0, #0
 801f986:	d086      	beq.n	801f896 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801f988:	4628      	mov	r0, r5
 801f98a:	f008 fb52 	bl	8028032 <__cxa_guard_release>
 801f98e:	4a55      	ldr	r2, [pc, #340]	; (801fae4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801f990:	495d      	ldr	r1, [pc, #372]	; (801fb08 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x354>)
 801f992:	485e      	ldr	r0, [pc, #376]	; (801fb0c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x358>)
 801f994:	f008 fb3a 	bl	802800c <__aeabi_atexit>
 801f998:	e77d      	b.n	801f896 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801f99a:	4628      	mov	r0, r5
 801f99c:	f008 fb3d 	bl	802801a <__cxa_guard_acquire>
 801f9a0:	2800      	cmp	r0, #0
 801f9a2:	f43f af73 	beq.w	801f88c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 801f9a6:	4628      	mov	r0, r5
 801f9a8:	f008 fb43 	bl	8028032 <__cxa_guard_release>
 801f9ac:	4a4d      	ldr	r2, [pc, #308]	; (801fae4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801f9ae:	4958      	ldr	r1, [pc, #352]	; (801fb10 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x35c>)
 801f9b0:	4858      	ldr	r0, [pc, #352]	; (801fb14 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x360>)
 801f9b2:	f008 fb2b 	bl	802800c <__aeabi_atexit>
 801f9b6:	e769      	b.n	801f88c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 801f9b8:	4628      	mov	r0, r5
 801f9ba:	f008 fb2e 	bl	802801a <__cxa_guard_acquire>
 801f9be:	2800      	cmp	r0, #0
 801f9c0:	f43f af5e 	beq.w	801f880 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801f9c4:	4628      	mov	r0, r5
 801f9c6:	f008 fb34 	bl	8028032 <__cxa_guard_release>
 801f9ca:	4a46      	ldr	r2, [pc, #280]	; (801fae4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801f9cc:	4952      	ldr	r1, [pc, #328]	; (801fb18 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x364>)
 801f9ce:	4853      	ldr	r0, [pc, #332]	; (801fb1c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x368>)
 801f9d0:	f008 fb1c 	bl	802800c <__aeabi_atexit>
 801f9d4:	e754      	b.n	801f880 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801f9d6:	4628      	mov	r0, r5
 801f9d8:	f008 fb1f 	bl	802801a <__cxa_guard_acquire>
 801f9dc:	2800      	cmp	r0, #0
 801f9de:	f43f af49 	beq.w	801f874 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801f9e2:	4628      	mov	r0, r5
 801f9e4:	f008 fb25 	bl	8028032 <__cxa_guard_release>
 801f9e8:	4a3e      	ldr	r2, [pc, #248]	; (801fae4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801f9ea:	494d      	ldr	r1, [pc, #308]	; (801fb20 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x36c>)
 801f9ec:	484d      	ldr	r0, [pc, #308]	; (801fb24 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x370>)
 801f9ee:	f008 fb0d 	bl	802800c <__aeabi_atexit>
 801f9f2:	e73f      	b.n	801f874 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801f9f4:	4628      	mov	r0, r5
 801f9f6:	f008 fb10 	bl	802801a <__cxa_guard_acquire>
 801f9fa:	2800      	cmp	r0, #0
 801f9fc:	f43f af34 	beq.w	801f868 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb4>
 801fa00:	4628      	mov	r0, r5
 801fa02:	f008 fb16 	bl	8028032 <__cxa_guard_release>
 801fa06:	4a37      	ldr	r2, [pc, #220]	; (801fae4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801fa08:	4947      	ldr	r1, [pc, #284]	; (801fb28 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x374>)
 801fa0a:	4848      	ldr	r0, [pc, #288]	; (801fb2c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x378>)
 801fa0c:	f008 fafe 	bl	802800c <__aeabi_atexit>
 801fa10:	e72a      	b.n	801f868 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb4>
 801fa12:	4628      	mov	r0, r5
 801fa14:	f008 fb01 	bl	802801a <__cxa_guard_acquire>
 801fa18:	2800      	cmp	r0, #0
 801fa1a:	f43f af1f 	beq.w	801f85c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 801fa1e:	4628      	mov	r0, r5
 801fa20:	f008 fb07 	bl	8028032 <__cxa_guard_release>
 801fa24:	4a2f      	ldr	r2, [pc, #188]	; (801fae4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801fa26:	4942      	ldr	r1, [pc, #264]	; (801fb30 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x37c>)
 801fa28:	4842      	ldr	r0, [pc, #264]	; (801fb34 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x380>)
 801fa2a:	f008 faef 	bl	802800c <__aeabi_atexit>
 801fa2e:	e715      	b.n	801f85c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 801fa30:	4628      	mov	r0, r5
 801fa32:	f008 faf2 	bl	802801a <__cxa_guard_acquire>
 801fa36:	2800      	cmp	r0, #0
 801fa38:	f43f af0a 	beq.w	801f850 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9c>
 801fa3c:	4628      	mov	r0, r5
 801fa3e:	f008 faf8 	bl	8028032 <__cxa_guard_release>
 801fa42:	4a28      	ldr	r2, [pc, #160]	; (801fae4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801fa44:	493c      	ldr	r1, [pc, #240]	; (801fb38 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x384>)
 801fa46:	483d      	ldr	r0, [pc, #244]	; (801fb3c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x388>)
 801fa48:	f008 fae0 	bl	802800c <__aeabi_atexit>
 801fa4c:	e700      	b.n	801f850 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9c>
 801fa4e:	4628      	mov	r0, r5
 801fa50:	f008 fae3 	bl	802801a <__cxa_guard_acquire>
 801fa54:	2800      	cmp	r0, #0
 801fa56:	f43f aef5 	beq.w	801f844 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x90>
 801fa5a:	4628      	mov	r0, r5
 801fa5c:	f008 fae9 	bl	8028032 <__cxa_guard_release>
 801fa60:	4a20      	ldr	r2, [pc, #128]	; (801fae4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801fa62:	4937      	ldr	r1, [pc, #220]	; (801fb40 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x38c>)
 801fa64:	4837      	ldr	r0, [pc, #220]	; (801fb44 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x390>)
 801fa66:	f008 fad1 	bl	802800c <__aeabi_atexit>
 801fa6a:	e6eb      	b.n	801f844 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x90>
 801fa6c:	4628      	mov	r0, r5
 801fa6e:	f008 fad4 	bl	802801a <__cxa_guard_acquire>
 801fa72:	2800      	cmp	r0, #0
 801fa74:	f43f aee0 	beq.w	801f838 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801fa78:	4628      	mov	r0, r5
 801fa7a:	f008 fada 	bl	8028032 <__cxa_guard_release>
 801fa7e:	4a19      	ldr	r2, [pc, #100]	; (801fae4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801fa80:	4931      	ldr	r1, [pc, #196]	; (801fb48 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x394>)
 801fa82:	4832      	ldr	r0, [pc, #200]	; (801fb4c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x398>)
 801fa84:	f008 fac2 	bl	802800c <__aeabi_atexit>
 801fa88:	e6d6      	b.n	801f838 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801fa8a:	bf00      	nop
 801fa8c:	20197bb0 	.word	0x20197bb0
 801fa90:	20197bc4 	.word	0x20197bc4
 801fa94:	20197b8c 	.word	0x20197b8c
 801fa98:	20197b98 	.word	0x20197b98
 801fa9c:	20197bd0 	.word	0x20197bd0
 801faa0:	20197bdc 	.word	0x20197bdc
 801faa4:	20197ba4 	.word	0x20197ba4
 801faa8:	20197bbc 	.word	0x20197bbc
 801faac:	20197bb4 	.word	0x20197bb4
 801fab0:	20197bc8 	.word	0x20197bc8
 801fab4:	20197b90 	.word	0x20197b90
 801fab8:	20197b9c 	.word	0x20197b9c
 801fabc:	20197bd4 	.word	0x20197bd4
 801fac0:	20197be0 	.word	0x20197be0
 801fac4:	20197ba8 	.word	0x20197ba8
 801fac8:	20197bc0 	.word	0x20197bc0
 801facc:	20197bb8 	.word	0x20197bb8
 801fad0:	20197bcc 	.word	0x20197bcc
 801fad4:	20197b94 	.word	0x20197b94
 801fad8:	20197ba0 	.word	0x20197ba0
 801fadc:	20197bd8 	.word	0x20197bd8
 801fae0:	20197bac 	.word	0x20197bac
 801fae4:	20000000 	.word	0x20000000
 801fae8:	0801ee1d 	.word	0x0801ee1d
 801faec:	20000088 	.word	0x20000088
 801faf0:	0801ee19 	.word	0x0801ee19
 801faf4:	200000b4 	.word	0x200000b4
 801faf8:	0801ee29 	.word	0x0801ee29
 801fafc:	2000007c 	.word	0x2000007c
 801fb00:	0801ee2d 	.word	0x0801ee2d
 801fb04:	20000070 	.word	0x20000070
 801fb08:	0801ee21 	.word	0x0801ee21
 801fb0c:	200000a8 	.word	0x200000a8
 801fb10:	0801ee25 	.word	0x0801ee25
 801fb14:	20000094 	.word	0x20000094
 801fb18:	0801ee39 	.word	0x0801ee39
 801fb1c:	2000009c 	.word	0x2000009c
 801fb20:	0801ee3d 	.word	0x0801ee3d
 801fb24:	20000084 	.word	0x20000084
 801fb28:	0801ee31 	.word	0x0801ee31
 801fb2c:	200000bc 	.word	0x200000bc
 801fb30:	0801ee35 	.word	0x0801ee35
 801fb34:	200000b0 	.word	0x200000b0
 801fb38:	0801ee49 	.word	0x0801ee49
 801fb3c:	20000078 	.word	0x20000078
 801fb40:	0801ee4d 	.word	0x0801ee4d
 801fb44:	2000006c 	.word	0x2000006c
 801fb48:	0801ee41 	.word	0x0801ee41
 801fb4c:	200000a4 	.word	0x200000a4
 801fb50:	4628      	mov	r0, r5
 801fb52:	f008 fa62 	bl	802801a <__cxa_guard_acquire>
 801fb56:	2800      	cmp	r0, #0
 801fb58:	f43f ae68 	beq.w	801f82c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78>
 801fb5c:	4628      	mov	r0, r5
 801fb5e:	f008 fa68 	bl	8028032 <__cxa_guard_release>
 801fb62:	4aa6      	ldr	r2, [pc, #664]	; (801fdfc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801fb64:	49a6      	ldr	r1, [pc, #664]	; (801fe00 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64c>)
 801fb66:	48a7      	ldr	r0, [pc, #668]	; (801fe04 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x650>)
 801fb68:	f008 fa50 	bl	802800c <__aeabi_atexit>
 801fb6c:	e65e      	b.n	801f82c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78>
 801fb6e:	4628      	mov	r0, r5
 801fb70:	f008 fa53 	bl	802801a <__cxa_guard_acquire>
 801fb74:	2800      	cmp	r0, #0
 801fb76:	f43f ae53 	beq.w	801f820 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801fb7a:	4628      	mov	r0, r5
 801fb7c:	f008 fa59 	bl	8028032 <__cxa_guard_release>
 801fb80:	4a9e      	ldr	r2, [pc, #632]	; (801fdfc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801fb82:	49a1      	ldr	r1, [pc, #644]	; (801fe08 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x654>)
 801fb84:	48a1      	ldr	r0, [pc, #644]	; (801fe0c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x658>)
 801fb86:	f008 fa41 	bl	802800c <__aeabi_atexit>
 801fb8a:	e649      	b.n	801f820 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801fb8c:	4628      	mov	r0, r5
 801fb8e:	f008 fa44 	bl	802801a <__cxa_guard_acquire>
 801fb92:	2800      	cmp	r0, #0
 801fb94:	f43f ae3e 	beq.w	801f814 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 801fb98:	4628      	mov	r0, r5
 801fb9a:	f008 fa4a 	bl	8028032 <__cxa_guard_release>
 801fb9e:	4a97      	ldr	r2, [pc, #604]	; (801fdfc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801fba0:	499b      	ldr	r1, [pc, #620]	; (801fe10 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x65c>)
 801fba2:	489c      	ldr	r0, [pc, #624]	; (801fe14 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x660>)
 801fba4:	f008 fa32 	bl	802800c <__aeabi_atexit>
 801fba8:	e634      	b.n	801f814 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 801fbaa:	4628      	mov	r0, r5
 801fbac:	f008 fa35 	bl	802801a <__cxa_guard_acquire>
 801fbb0:	2800      	cmp	r0, #0
 801fbb2:	f43f ae29 	beq.w	801f808 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 801fbb6:	4628      	mov	r0, r5
 801fbb8:	f008 fa3b 	bl	8028032 <__cxa_guard_release>
 801fbbc:	4a8f      	ldr	r2, [pc, #572]	; (801fdfc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801fbbe:	4996      	ldr	r1, [pc, #600]	; (801fe18 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x664>)
 801fbc0:	4896      	ldr	r0, [pc, #600]	; (801fe1c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x668>)
 801fbc2:	f008 fa23 	bl	802800c <__aeabi_atexit>
 801fbc6:	e61f      	b.n	801f808 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 801fbc8:	4628      	mov	r0, r5
 801fbca:	f008 fa26 	bl	802801a <__cxa_guard_acquire>
 801fbce:	2800      	cmp	r0, #0
 801fbd0:	f43f ae14 	beq.w	801f7fc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x48>
 801fbd4:	4628      	mov	r0, r5
 801fbd6:	f008 fa2c 	bl	8028032 <__cxa_guard_release>
 801fbda:	4a88      	ldr	r2, [pc, #544]	; (801fdfc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801fbdc:	4990      	ldr	r1, [pc, #576]	; (801fe20 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66c>)
 801fbde:	4891      	ldr	r0, [pc, #580]	; (801fe24 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x670>)
 801fbe0:	f008 fa14 	bl	802800c <__aeabi_atexit>
 801fbe4:	e60a      	b.n	801f7fc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x48>
 801fbe6:	4628      	mov	r0, r5
 801fbe8:	f008 fa17 	bl	802801a <__cxa_guard_acquire>
 801fbec:	2800      	cmp	r0, #0
 801fbee:	f43f adff 	beq.w	801f7f0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3c>
 801fbf2:	4628      	mov	r0, r5
 801fbf4:	f008 fa1d 	bl	8028032 <__cxa_guard_release>
 801fbf8:	4a80      	ldr	r2, [pc, #512]	; (801fdfc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801fbfa:	498b      	ldr	r1, [pc, #556]	; (801fe28 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x674>)
 801fbfc:	488b      	ldr	r0, [pc, #556]	; (801fe2c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x678>)
 801fbfe:	f008 fa05 	bl	802800c <__aeabi_atexit>
 801fc02:	e5f5      	b.n	801f7f0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3c>
 801fc04:	4628      	mov	r0, r5
 801fc06:	f008 fa08 	bl	802801a <__cxa_guard_acquire>
 801fc0a:	2800      	cmp	r0, #0
 801fc0c:	f43f adea 	beq.w	801f7e4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x30>
 801fc10:	4628      	mov	r0, r5
 801fc12:	f008 fa0e 	bl	8028032 <__cxa_guard_release>
 801fc16:	4a79      	ldr	r2, [pc, #484]	; (801fdfc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801fc18:	4985      	ldr	r1, [pc, #532]	; (801fe30 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x67c>)
 801fc1a:	4886      	ldr	r0, [pc, #536]	; (801fe34 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x680>)
 801fc1c:	f008 f9f6 	bl	802800c <__aeabi_atexit>
 801fc20:	e5e0      	b.n	801f7e4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x30>
 801fc22:	4628      	mov	r0, r5
 801fc24:	f008 f9f9 	bl	802801a <__cxa_guard_acquire>
 801fc28:	2800      	cmp	r0, #0
 801fc2a:	f43f add5 	beq.w	801f7d8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fc2e:	4628      	mov	r0, r5
 801fc30:	f008 f9ff 	bl	8028032 <__cxa_guard_release>
 801fc34:	4a71      	ldr	r2, [pc, #452]	; (801fdfc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801fc36:	4980      	ldr	r1, [pc, #512]	; (801fe38 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x684>)
 801fc38:	4880      	ldr	r0, [pc, #512]	; (801fe3c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x688>)
 801fc3a:	f008 f9e7 	bl	802800c <__aeabi_atexit>
 801fc3e:	e5cb      	b.n	801f7d8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fc40:	4628      	mov	r0, r5
 801fc42:	f008 f9ea 	bl	802801a <__cxa_guard_acquire>
 801fc46:	2800      	cmp	r0, #0
 801fc48:	f43f adc0 	beq.w	801f7cc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fc4c:	4628      	mov	r0, r5
 801fc4e:	f008 f9f0 	bl	8028032 <__cxa_guard_release>
 801fc52:	4a6a      	ldr	r2, [pc, #424]	; (801fdfc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801fc54:	497a      	ldr	r1, [pc, #488]	; (801fe40 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x68c>)
 801fc56:	487b      	ldr	r0, [pc, #492]	; (801fe44 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x690>)
 801fc58:	f008 f9d8 	bl	802800c <__aeabi_atexit>
 801fc5c:	e5b6      	b.n	801f7cc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801fc5e:	2eff      	cmp	r6, #255	; 0xff
 801fc60:	f1a4 042c 	sub.w	r4, r4, #44	; 0x2c
 801fc64:	d018      	beq.n	801fc98 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e4>
 801fc66:	2c03      	cmp	r4, #3
 801fc68:	f63f ae31 	bhi.w	801f8ce <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801fc6c:	e8df f004 	tbb	[pc, r4]
 801fc70:	4b525963 	.word	0x4b525963
 801fc74:	2c03      	cmp	r4, #3
 801fc76:	f63f ae2a 	bhi.w	801f8ce <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801fc7a:	e8df f014 	tbh	[pc, r4, lsl #1]
 801fc7e:	012d      	.short	0x012d
 801fc80:	001b011e 	.word	0x001b011e
 801fc84:	0014      	.short	0x0014
 801fc86:	2c03      	cmp	r4, #3
 801fc88:	f63f ae21 	bhi.w	801f8ce <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801fc8c:	e8df f014 	tbh	[pc, r4, lsl #1]
 801fc90:	00f000ff 	.word	0x00f000ff
 801fc94:	00af010e 	.word	0x00af010e
 801fc98:	2c03      	cmp	r4, #3
 801fc9a:	f63f ae18 	bhi.w	801f8ce <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801fc9e:	e8df f004 	tbb	[pc, r4]
 801fca2:	929c      	.short	0x929c
 801fca4:	848b      	.short	0x848b
 801fca6:	687b      	ldr	r3, [r7, #4]
 801fca8:	4867      	ldr	r0, [pc, #412]	; (801fe48 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x694>)
 801fcaa:	781b      	ldrb	r3, [r3, #0]
 801fcac:	2b00      	cmp	r3, #0
 801fcae:	bf18      	it	ne
 801fcb0:	2000      	movne	r0, #0
 801fcb2:	e60d      	b.n	801f8d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fcb4:	687b      	ldr	r3, [r7, #4]
 801fcb6:	4865      	ldr	r0, [pc, #404]	; (801fe4c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x698>)
 801fcb8:	781b      	ldrb	r3, [r3, #0]
 801fcba:	2b00      	cmp	r3, #0
 801fcbc:	bf18      	it	ne
 801fcbe:	2000      	movne	r0, #0
 801fcc0:	e606      	b.n	801f8d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fcc2:	687b      	ldr	r3, [r7, #4]
 801fcc4:	781b      	ldrb	r3, [r3, #0]
 801fcc6:	2b01      	cmp	r3, #1
 801fcc8:	f000 811b 	beq.w	801ff02 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x74e>
 801fccc:	f0c0 8113 	bcc.w	801fef6 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x742>
 801fcd0:	2b02      	cmp	r3, #2
 801fcd2:	f47f adfc 	bne.w	801f8ce <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801fcd6:	4b5e      	ldr	r3, [pc, #376]	; (801fe50 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x69c>)
 801fcd8:	4a5e      	ldr	r2, [pc, #376]	; (801fe54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a0>)
 801fcda:	f240 616e 	movw	r1, #1646	; 0x66e
 801fcde:	485e      	ldr	r0, [pc, #376]	; (801fe58 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a4>)
 801fce0:	f008 f9c6 	bl	8028070 <__assert_func>
 801fce4:	687b      	ldr	r3, [r7, #4]
 801fce6:	781b      	ldrb	r3, [r3, #0]
 801fce8:	2b01      	cmp	r3, #1
 801fcea:	f000 8108 	beq.w	801fefe <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x74a>
 801fcee:	f0c0 8104 	bcc.w	801fefa <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x746>
 801fcf2:	2b02      	cmp	r3, #2
 801fcf4:	f47f adeb 	bne.w	801f8ce <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801fcf8:	4b55      	ldr	r3, [pc, #340]	; (801fe50 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x69c>)
 801fcfa:	4a56      	ldr	r2, [pc, #344]	; (801fe54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a0>)
 801fcfc:	f240 617a 	movw	r1, #1658	; 0x67a
 801fd00:	4855      	ldr	r0, [pc, #340]	; (801fe58 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a4>)
 801fd02:	f008 f9b5 	bl	8028070 <__assert_func>
 801fd06:	687b      	ldr	r3, [r7, #4]
 801fd08:	4846      	ldr	r0, [pc, #280]	; (801fe24 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x670>)
 801fd0a:	781b      	ldrb	r3, [r3, #0]
 801fd0c:	2b00      	cmp	r3, #0
 801fd0e:	bf18      	it	ne
 801fd10:	2000      	movne	r0, #0
 801fd12:	e5dd      	b.n	801f8d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fd14:	687b      	ldr	r3, [r7, #4]
 801fd16:	483f      	ldr	r0, [pc, #252]	; (801fe14 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x660>)
 801fd18:	781b      	ldrb	r3, [r3, #0]
 801fd1a:	2b00      	cmp	r3, #0
 801fd1c:	bf18      	it	ne
 801fd1e:	2000      	movne	r0, #0
 801fd20:	e5d6      	b.n	801f8d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fd22:	687b      	ldr	r3, [r7, #4]
 801fd24:	781b      	ldrb	r3, [r3, #0]
 801fd26:	2b00      	cmp	r3, #0
 801fd28:	f000 80ed 	beq.w	801ff06 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x752>
 801fd2c:	2b01      	cmp	r3, #1
 801fd2e:	4845      	ldr	r0, [pc, #276]	; (801fe44 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x690>)
 801fd30:	bf18      	it	ne
 801fd32:	2000      	movne	r0, #0
 801fd34:	e5cc      	b.n	801f8d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fd36:	687b      	ldr	r3, [r7, #4]
 801fd38:	781b      	ldrb	r3, [r3, #0]
 801fd3a:	2b00      	cmp	r3, #0
 801fd3c:	f000 80e5 	beq.w	801ff0a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x756>
 801fd40:	2b01      	cmp	r3, #1
 801fd42:	483c      	ldr	r0, [pc, #240]	; (801fe34 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x680>)
 801fd44:	bf18      	it	ne
 801fd46:	2000      	movne	r0, #0
 801fd48:	e5c2      	b.n	801f8d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fd4a:	687b      	ldr	r3, [r7, #4]
 801fd4c:	4843      	ldr	r0, [pc, #268]	; (801fe5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a8>)
 801fd4e:	781b      	ldrb	r3, [r3, #0]
 801fd50:	2b00      	cmp	r3, #0
 801fd52:	bf18      	it	ne
 801fd54:	2000      	movne	r0, #0
 801fd56:	e5bb      	b.n	801f8d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fd58:	687b      	ldr	r3, [r7, #4]
 801fd5a:	4841      	ldr	r0, [pc, #260]	; (801fe60 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6ac>)
 801fd5c:	781b      	ldrb	r3, [r3, #0]
 801fd5e:	2b00      	cmp	r3, #0
 801fd60:	bf18      	it	ne
 801fd62:	2000      	movne	r0, #0
 801fd64:	e5b4      	b.n	801f8d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fd66:	687b      	ldr	r3, [r7, #4]
 801fd68:	781b      	ldrb	r3, [r3, #0]
 801fd6a:	2b01      	cmp	r3, #1
 801fd6c:	f000 80d5 	beq.w	801ff1a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x766>
 801fd70:	f0c0 80d1 	bcc.w	801ff16 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x762>
 801fd74:	2b02      	cmp	r3, #2
 801fd76:	f47f adaa 	bne.w	801f8ce <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801fd7a:	4b3a      	ldr	r3, [pc, #232]	; (801fe64 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6b0>)
 801fd7c:	4a35      	ldr	r2, [pc, #212]	; (801fe54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a0>)
 801fd7e:	f240 6113 	movw	r1, #1555	; 0x613
 801fd82:	4835      	ldr	r0, [pc, #212]	; (801fe58 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a4>)
 801fd84:	f008 f974 	bl	8028070 <__assert_func>
 801fd88:	687b      	ldr	r3, [r7, #4]
 801fd8a:	781b      	ldrb	r3, [r3, #0]
 801fd8c:	2b01      	cmp	r3, #1
 801fd8e:	f000 80c0 	beq.w	801ff12 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x75e>
 801fd92:	f0c0 80bc 	bcc.w	801ff0e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x75a>
 801fd96:	2b02      	cmp	r3, #2
 801fd98:	f47f ad99 	bne.w	801f8ce <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801fd9c:	4b32      	ldr	r3, [pc, #200]	; (801fe68 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6b4>)
 801fd9e:	4a2d      	ldr	r2, [pc, #180]	; (801fe54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a0>)
 801fda0:	f240 611f 	movw	r1, #1567	; 0x61f
 801fda4:	482c      	ldr	r0, [pc, #176]	; (801fe58 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a4>)
 801fda6:	f008 f963 	bl	8028070 <__assert_func>
 801fdaa:	687b      	ldr	r3, [r7, #4]
 801fdac:	481b      	ldr	r0, [pc, #108]	; (801fe1c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x668>)
 801fdae:	781b      	ldrb	r3, [r3, #0]
 801fdb0:	2b00      	cmp	r3, #0
 801fdb2:	bf18      	it	ne
 801fdb4:	2000      	movne	r0, #0
 801fdb6:	e58b      	b.n	801f8d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fdb8:	687b      	ldr	r3, [r7, #4]
 801fdba:	4814      	ldr	r0, [pc, #80]	; (801fe0c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x658>)
 801fdbc:	781b      	ldrb	r3, [r3, #0]
 801fdbe:	2b00      	cmp	r3, #0
 801fdc0:	bf18      	it	ne
 801fdc2:	2000      	movne	r0, #0
 801fdc4:	e584      	b.n	801f8d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fdc6:	687b      	ldr	r3, [r7, #4]
 801fdc8:	781b      	ldrb	r3, [r3, #0]
 801fdca:	2b00      	cmp	r3, #0
 801fdcc:	f000 80af 	beq.w	801ff2e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x77a>
 801fdd0:	2b01      	cmp	r3, #1
 801fdd2:	481a      	ldr	r0, [pc, #104]	; (801fe3c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x688>)
 801fdd4:	bf18      	it	ne
 801fdd6:	2000      	movne	r0, #0
 801fdd8:	e57a      	b.n	801f8d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fdda:	687b      	ldr	r3, [r7, #4]
 801fddc:	781b      	ldrb	r3, [r3, #0]
 801fdde:	2b00      	cmp	r3, #0
 801fde0:	f000 80a7 	beq.w	801ff32 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x77e>
 801fde4:	2b01      	cmp	r3, #1
 801fde6:	4811      	ldr	r0, [pc, #68]	; (801fe2c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x678>)
 801fde8:	bf18      	it	ne
 801fdea:	2000      	movne	r0, #0
 801fdec:	e570      	b.n	801f8d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fdee:	687b      	ldr	r3, [r7, #4]
 801fdf0:	481e      	ldr	r0, [pc, #120]	; (801fe6c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6b8>)
 801fdf2:	781b      	ldrb	r3, [r3, #0]
 801fdf4:	2b00      	cmp	r3, #0
 801fdf6:	bf18      	it	ne
 801fdf8:	2000      	movne	r0, #0
 801fdfa:	e569      	b.n	801f8d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fdfc:	20000000 	.word	0x20000000
 801fe00:	0801ee45 	.word	0x0801ee45
 801fe04:	20000090 	.word	0x20000090
 801fe08:	0801ee59 	.word	0x0801ee59
 801fe0c:	20000098 	.word	0x20000098
 801fe10:	0801ee5d 	.word	0x0801ee5d
 801fe14:	20000080 	.word	0x20000080
 801fe18:	0801ee51 	.word	0x0801ee51
 801fe1c:	200000b8 	.word	0x200000b8
 801fe20:	0801ee55 	.word	0x0801ee55
 801fe24:	200000ac 	.word	0x200000ac
 801fe28:	0801ee69 	.word	0x0801ee69
 801fe2c:	20000074 	.word	0x20000074
 801fe30:	0801ee6d 	.word	0x0801ee6d
 801fe34:	20000068 	.word	0x20000068
 801fe38:	0801ee61 	.word	0x0801ee61
 801fe3c:	200000a0 	.word	0x200000a0
 801fe40:	0801ee65 	.word	0x0801ee65
 801fe44:	2000008c 	.word	0x2000008c
 801fe48:	200000b4 	.word	0x200000b4
 801fe4c:	20000088 	.word	0x20000088
 801fe50:	0802b0a0 	.word	0x0802b0a0
 801fe54:	0802be80 	.word	0x0802be80
 801fe58:	0802af48 	.word	0x0802af48
 801fe5c:	200000b0 	.word	0x200000b0
 801fe60:	20000084 	.word	0x20000084
 801fe64:	0802b00c 	.word	0x0802b00c
 801fe68:	0802b054 	.word	0x0802b054
 801fe6c:	200000bc 	.word	0x200000bc
 801fe70:	687b      	ldr	r3, [r7, #4]
 801fe72:	781b      	ldrb	r3, [r3, #0]
 801fe74:	2b01      	cmp	r3, #1
 801fe76:	d060      	beq.n	801ff3a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x786>
 801fe78:	d35d      	bcc.n	801ff36 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x782>
 801fe7a:	2b02      	cmp	r3, #2
 801fe7c:	f47f ad27 	bne.w	801f8ce <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801fe80:	4b2f      	ldr	r3, [pc, #188]	; (801ff40 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78c>)
 801fe82:	4a30      	ldr	r2, [pc, #192]	; (801ff44 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x790>)
 801fe84:	f240 613e 	movw	r1, #1598	; 0x63e
 801fe88:	482f      	ldr	r0, [pc, #188]	; (801ff48 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x794>)
 801fe8a:	f008 f8f1 	bl	8028070 <__assert_func>
 801fe8e:	687b      	ldr	r3, [r7, #4]
 801fe90:	781b      	ldrb	r3, [r3, #0]
 801fe92:	2b01      	cmp	r3, #1
 801fe94:	d049      	beq.n	801ff2a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x776>
 801fe96:	d346      	bcc.n	801ff26 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x772>
 801fe98:	2b02      	cmp	r3, #2
 801fe9a:	f47f ad18 	bne.w	801f8ce <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801fe9e:	4b28      	ldr	r3, [pc, #160]	; (801ff40 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78c>)
 801fea0:	4a28      	ldr	r2, [pc, #160]	; (801ff44 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x790>)
 801fea2:	f240 614a 	movw	r1, #1610	; 0x64a
 801fea6:	4828      	ldr	r0, [pc, #160]	; (801ff48 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x794>)
 801fea8:	f008 f8e2 	bl	8028070 <__assert_func>
 801feac:	687b      	ldr	r3, [r7, #4]
 801feae:	4827      	ldr	r0, [pc, #156]	; (801ff4c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x798>)
 801feb0:	781b      	ldrb	r3, [r3, #0]
 801feb2:	2b00      	cmp	r3, #0
 801feb4:	bf18      	it	ne
 801feb6:	2000      	movne	r0, #0
 801feb8:	e50a      	b.n	801f8d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801feba:	687b      	ldr	r3, [r7, #4]
 801febc:	781b      	ldrb	r3, [r3, #0]
 801febe:	2b01      	cmp	r3, #1
 801fec0:	d02d      	beq.n	801ff1e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76a>
 801fec2:	d318      	bcc.n	801fef6 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x742>
 801fec4:	2b02      	cmp	r3, #2
 801fec6:	f47f ad02 	bne.w	801f8ce <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801feca:	4b1d      	ldr	r3, [pc, #116]	; (801ff40 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78c>)
 801fecc:	4a1d      	ldr	r2, [pc, #116]	; (801ff44 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x790>)
 801fece:	f240 619b 	movw	r1, #1691	; 0x69b
 801fed2:	481d      	ldr	r0, [pc, #116]	; (801ff48 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x794>)
 801fed4:	f008 f8cc 	bl	8028070 <__assert_func>
 801fed8:	687b      	ldr	r3, [r7, #4]
 801feda:	781b      	ldrb	r3, [r3, #0]
 801fedc:	2b01      	cmp	r3, #1
 801fede:	d020      	beq.n	801ff22 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76e>
 801fee0:	d30b      	bcc.n	801fefa <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x746>
 801fee2:	2b02      	cmp	r3, #2
 801fee4:	f47f acf3 	bne.w	801f8ce <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801fee8:	4b15      	ldr	r3, [pc, #84]	; (801ff40 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78c>)
 801feea:	4a16      	ldr	r2, [pc, #88]	; (801ff44 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x790>)
 801feec:	f240 61a7 	movw	r1, #1703	; 0x6a7
 801fef0:	4815      	ldr	r0, [pc, #84]	; (801ff48 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x794>)
 801fef2:	f008 f8bd 	bl	8028070 <__assert_func>
 801fef6:	4816      	ldr	r0, [pc, #88]	; (801ff50 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x79c>)
 801fef8:	e4ea      	b.n	801f8d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fefa:	4816      	ldr	r0, [pc, #88]	; (801ff54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a0>)
 801fefc:	e4e8      	b.n	801f8d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801fefe:	4816      	ldr	r0, [pc, #88]	; (801ff58 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a4>)
 801ff00:	e4e6      	b.n	801f8d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff02:	4816      	ldr	r0, [pc, #88]	; (801ff5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a8>)
 801ff04:	e4e4      	b.n	801f8d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff06:	4816      	ldr	r0, [pc, #88]	; (801ff60 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7ac>)
 801ff08:	e4e2      	b.n	801f8d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff0a:	4816      	ldr	r0, [pc, #88]	; (801ff64 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7b0>)
 801ff0c:	e4e0      	b.n	801f8d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff0e:	4816      	ldr	r0, [pc, #88]	; (801ff68 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7b4>)
 801ff10:	e4de      	b.n	801f8d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff12:	4816      	ldr	r0, [pc, #88]	; (801ff6c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7b8>)
 801ff14:	e4dc      	b.n	801f8d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff16:	4816      	ldr	r0, [pc, #88]	; (801ff70 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7bc>)
 801ff18:	e4da      	b.n	801f8d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff1a:	4816      	ldr	r0, [pc, #88]	; (801ff74 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c0>)
 801ff1c:	e4d8      	b.n	801f8d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff1e:	4816      	ldr	r0, [pc, #88]	; (801ff78 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c4>)
 801ff20:	e4d6      	b.n	801f8d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff22:	4816      	ldr	r0, [pc, #88]	; (801ff7c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c8>)
 801ff24:	e4d4      	b.n	801f8d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff26:	4809      	ldr	r0, [pc, #36]	; (801ff4c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x798>)
 801ff28:	e4d2      	b.n	801f8d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff2a:	4815      	ldr	r0, [pc, #84]	; (801ff80 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7cc>)
 801ff2c:	e4d0      	b.n	801f8d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff2e:	4815      	ldr	r0, [pc, #84]	; (801ff84 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7d0>)
 801ff30:	e4ce      	b.n	801f8d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff32:	4815      	ldr	r0, [pc, #84]	; (801ff88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7d4>)
 801ff34:	e4cc      	b.n	801f8d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff36:	4815      	ldr	r0, [pc, #84]	; (801ff8c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7d8>)
 801ff38:	e4ca      	b.n	801f8d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff3a:	4815      	ldr	r0, [pc, #84]	; (801ff90 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7dc>)
 801ff3c:	e4c8      	b.n	801f8d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ff3e:	bf00      	nop
 801ff40:	0802b054 	.word	0x0802b054
 801ff44:	0802be80 	.word	0x0802be80
 801ff48:	0802af48 	.word	0x0802af48
 801ff4c:	2000009c 	.word	0x2000009c
 801ff50:	200000b4 	.word	0x200000b4
 801ff54:	20000088 	.word	0x20000088
 801ff58:	20000070 	.word	0x20000070
 801ff5c:	20000094 	.word	0x20000094
 801ff60:	200000ac 	.word	0x200000ac
 801ff64:	20000080 	.word	0x20000080
 801ff68:	20000084 	.word	0x20000084
 801ff6c:	2000006c 	.word	0x2000006c
 801ff70:	200000b0 	.word	0x200000b0
 801ff74:	20000090 	.word	0x20000090
 801ff78:	200000a8 	.word	0x200000a8
 801ff7c:	2000007c 	.word	0x2000007c
 801ff80:	20000078 	.word	0x20000078
 801ff84:	200000b8 	.word	0x200000b8
 801ff88:	20000098 	.word	0x20000098
 801ff8c:	200000bc 	.word	0x200000bc
 801ff90:	200000a4 	.word	0x200000a4

0801ff94 <_ZN8touchgfx8LCDGPU2DD0Ev>:
 801ff94:	b510      	push	{r4, lr}
 801ff96:	4604      	mov	r4, r0
 801ff98:	210c      	movs	r1, #12
 801ff9a:	f008 f83c 	bl	8028016 <_ZdlPvj>
 801ff9e:	4620      	mov	r0, r4
 801ffa0:	bd10      	pop	{r4, pc}
 801ffa2:	bf00      	nop

0801ffa4 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801ffa4:	b510      	push	{r4, lr}
 801ffa6:	4604      	mov	r4, r0
 801ffa8:	2104      	movs	r1, #4
 801ffaa:	f008 f834 	bl	8028016 <_ZdlPvj>
 801ffae:	4620      	mov	r0, r4
 801ffb0:	bd10      	pop	{r4, pc}
 801ffb2:	bf00      	nop

0801ffb4 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801ffb4:	b510      	push	{r4, lr}
 801ffb6:	4604      	mov	r4, r0
 801ffb8:	2104      	movs	r1, #4
 801ffba:	f008 f82c 	bl	8028016 <_ZdlPvj>
 801ffbe:	4620      	mov	r0, r4
 801ffc0:	bd10      	pop	{r4, pc}
 801ffc2:	bf00      	nop

0801ffc4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801ffc4:	b510      	push	{r4, lr}
 801ffc6:	4604      	mov	r4, r0
 801ffc8:	2104      	movs	r1, #4
 801ffca:	f008 f824 	bl	8028016 <_ZdlPvj>
 801ffce:	4620      	mov	r0, r4
 801ffd0:	bd10      	pop	{r4, pc}
 801ffd2:	bf00      	nop

0801ffd4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801ffd4:	b510      	push	{r4, lr}
 801ffd6:	4604      	mov	r4, r0
 801ffd8:	2104      	movs	r1, #4
 801ffda:	f008 f81c 	bl	8028016 <_ZdlPvj>
 801ffde:	4620      	mov	r0, r4
 801ffe0:	bd10      	pop	{r4, pc}
 801ffe2:	bf00      	nop

0801ffe4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801ffe4:	b510      	push	{r4, lr}
 801ffe6:	4604      	mov	r4, r0
 801ffe8:	2104      	movs	r1, #4
 801ffea:	f008 f814 	bl	8028016 <_ZdlPvj>
 801ffee:	4620      	mov	r0, r4
 801fff0:	bd10      	pop	{r4, pc}
 801fff2:	bf00      	nop

0801fff4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801fff4:	b510      	push	{r4, lr}
 801fff6:	4604      	mov	r4, r0
 801fff8:	2104      	movs	r1, #4
 801fffa:	f008 f80c 	bl	8028016 <_ZdlPvj>
 801fffe:	4620      	mov	r0, r4
 8020000:	bd10      	pop	{r4, pc}
 8020002:	bf00      	nop

08020004 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020004:	b510      	push	{r4, lr}
 8020006:	4604      	mov	r4, r0
 8020008:	2104      	movs	r1, #4
 802000a:	f008 f804 	bl	8028016 <_ZdlPvj>
 802000e:	4620      	mov	r0, r4
 8020010:	bd10      	pop	{r4, pc}
 8020012:	bf00      	nop

08020014 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8020014:	b510      	push	{r4, lr}
 8020016:	4604      	mov	r4, r0
 8020018:	2104      	movs	r1, #4
 802001a:	f007 fffc 	bl	8028016 <_ZdlPvj>
 802001e:	4620      	mov	r0, r4
 8020020:	bd10      	pop	{r4, pc}
 8020022:	bf00      	nop

08020024 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020024:	b510      	push	{r4, lr}
 8020026:	4604      	mov	r4, r0
 8020028:	2104      	movs	r1, #4
 802002a:	f007 fff4 	bl	8028016 <_ZdlPvj>
 802002e:	4620      	mov	r0, r4
 8020030:	bd10      	pop	{r4, pc}
 8020032:	bf00      	nop

08020034 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020034:	b510      	push	{r4, lr}
 8020036:	4604      	mov	r4, r0
 8020038:	2104      	movs	r1, #4
 802003a:	f007 ffec 	bl	8028016 <_ZdlPvj>
 802003e:	4620      	mov	r0, r4
 8020040:	bd10      	pop	{r4, pc}
 8020042:	bf00      	nop

08020044 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020044:	b510      	push	{r4, lr}
 8020046:	4604      	mov	r4, r0
 8020048:	2104      	movs	r1, #4
 802004a:	f007 ffe4 	bl	8028016 <_ZdlPvj>
 802004e:	4620      	mov	r0, r4
 8020050:	bd10      	pop	{r4, pc}
 8020052:	bf00      	nop

08020054 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020054:	b510      	push	{r4, lr}
 8020056:	4604      	mov	r4, r0
 8020058:	2104      	movs	r1, #4
 802005a:	f007 ffdc 	bl	8028016 <_ZdlPvj>
 802005e:	4620      	mov	r0, r4
 8020060:	bd10      	pop	{r4, pc}
 8020062:	bf00      	nop

08020064 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020064:	b510      	push	{r4, lr}
 8020066:	4604      	mov	r4, r0
 8020068:	2104      	movs	r1, #4
 802006a:	f007 ffd4 	bl	8028016 <_ZdlPvj>
 802006e:	4620      	mov	r0, r4
 8020070:	bd10      	pop	{r4, pc}
 8020072:	bf00      	nop

08020074 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8020074:	b510      	push	{r4, lr}
 8020076:	4604      	mov	r4, r0
 8020078:	2104      	movs	r1, #4
 802007a:	f007 ffcc 	bl	8028016 <_ZdlPvj>
 802007e:	4620      	mov	r0, r4
 8020080:	bd10      	pop	{r4, pc}
 8020082:	bf00      	nop

08020084 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020084:	b510      	push	{r4, lr}
 8020086:	4604      	mov	r4, r0
 8020088:	2104      	movs	r1, #4
 802008a:	f007 ffc4 	bl	8028016 <_ZdlPvj>
 802008e:	4620      	mov	r0, r4
 8020090:	bd10      	pop	{r4, pc}
 8020092:	bf00      	nop

08020094 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8020094:	b510      	push	{r4, lr}
 8020096:	4604      	mov	r4, r0
 8020098:	2104      	movs	r1, #4
 802009a:	f007 ffbc 	bl	8028016 <_ZdlPvj>
 802009e:	4620      	mov	r0, r4
 80200a0:	bd10      	pop	{r4, pc}
 80200a2:	bf00      	nop

080200a4 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80200a4:	b510      	push	{r4, lr}
 80200a6:	4604      	mov	r4, r0
 80200a8:	2104      	movs	r1, #4
 80200aa:	f007 ffb4 	bl	8028016 <_ZdlPvj>
 80200ae:	4620      	mov	r0, r4
 80200b0:	bd10      	pop	{r4, pc}
 80200b2:	bf00      	nop

080200b4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80200b4:	b510      	push	{r4, lr}
 80200b6:	4604      	mov	r4, r0
 80200b8:	2104      	movs	r1, #4
 80200ba:	f007 ffac 	bl	8028016 <_ZdlPvj>
 80200be:	4620      	mov	r0, r4
 80200c0:	bd10      	pop	{r4, pc}
 80200c2:	bf00      	nop

080200c4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80200c4:	b510      	push	{r4, lr}
 80200c6:	4604      	mov	r4, r0
 80200c8:	2104      	movs	r1, #4
 80200ca:	f007 ffa4 	bl	8028016 <_ZdlPvj>
 80200ce:	4620      	mov	r0, r4
 80200d0:	bd10      	pop	{r4, pc}
 80200d2:	bf00      	nop

080200d4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80200d4:	b510      	push	{r4, lr}
 80200d6:	4604      	mov	r4, r0
 80200d8:	2104      	movs	r1, #4
 80200da:	f007 ff9c 	bl	8028016 <_ZdlPvj>
 80200de:	4620      	mov	r0, r4
 80200e0:	bd10      	pop	{r4, pc}
 80200e2:	bf00      	nop

080200e4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80200e4:	b510      	push	{r4, lr}
 80200e6:	4604      	mov	r4, r0
 80200e8:	2104      	movs	r1, #4
 80200ea:	f007 ff94 	bl	8028016 <_ZdlPvj>
 80200ee:	4620      	mov	r0, r4
 80200f0:	bd10      	pop	{r4, pc}
 80200f2:	bf00      	nop

080200f4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80200f4:	b510      	push	{r4, lr}
 80200f6:	4604      	mov	r4, r0
 80200f8:	2104      	movs	r1, #4
 80200fa:	f007 ff8c 	bl	8028016 <_ZdlPvj>
 80200fe:	4620      	mov	r0, r4
 8020100:	bd10      	pop	{r4, pc}
 8020102:	bf00      	nop

08020104 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6>:
 8020104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020108:	461c      	mov	r4, r3
 802010a:	4617      	mov	r7, r2
 802010c:	b086      	sub	sp, #24
 802010e:	4606      	mov	r6, r0
 8020110:	4688      	mov	r8, r1
 8020112:	6818      	ldr	r0, [r3, #0]
 8020114:	6859      	ldr	r1, [r3, #4]
 8020116:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020118:	ad02      	add	r5, sp, #8
 802011a:	c503      	stmia	r5!, {r0, r1}
 802011c:	6818      	ldr	r0, [r3, #0]
 802011e:	6859      	ldr	r1, [r3, #4]
 8020120:	ad04      	add	r5, sp, #16
 8020122:	c503      	stmia	r5!, {r0, r1}
 8020124:	a802      	add	r0, sp, #8
 8020126:	f89d a03c 	ldrb.w	sl, [sp, #60]	; 0x3c
 802012a:	f7f7 fad9 	bl	80176e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802012e:	4621      	mov	r1, r4
 8020130:	a804      	add	r0, sp, #16
 8020132:	f7f7 fafd 	bl	8017730 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020136:	2f01      	cmp	r7, #1
 8020138:	d05c      	beq.n	80201f4 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0xf0>
 802013a:	d357      	bcc.n	80201ec <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0xe8>
 802013c:	2f02      	cmp	r7, #2
 802013e:	d163      	bne.n	8020208 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x104>
 8020140:	f04f 0910 	mov.w	r9, #16
 8020144:	2504      	movs	r5, #4
 8020146:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802014a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802014e:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8020152:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8020156:	fb14 2403 	smlabb	r4, r4, r3, r2
 802015a:	4f2e      	ldr	r7, [pc, #184]	; (8020214 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x110>)
 802015c:	440a      	add	r2, r1
 802015e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8020162:	6838      	ldr	r0, [r7, #0]
 8020164:	440b      	add	r3, r1
 8020166:	fb05 8404 	mla	r4, r5, r4, r8
 802016a:	f8ad 2010 	strh.w	r2, [sp, #16]
 802016e:	f8ad 3012 	strh.w	r3, [sp, #18]
 8020172:	2800      	cmp	r0, #0
 8020174:	d042      	beq.n	80201fc <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0xf8>
 8020176:	f7fd f819 	bl	801d1ac <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 802017a:	6833      	ldr	r3, [r6, #0]
 802017c:	4630      	mov	r0, r6
 802017e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020180:	4798      	blx	r3
 8020182:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8020186:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 802018a:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 802018e:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8020192:	f7fa fd15 	bl	801abc0 <nema_set_clip>
 8020196:	2200      	movs	r2, #0
 8020198:	2600      	movs	r6, #0
 802019a:	4611      	mov	r1, r2
 802019c:	4653      	mov	r3, sl
 802019e:	4610      	mov	r0, r2
 80201a0:	f7fa fd42 	bl	801ac28 <nema_rgba>
 80201a4:	f7fc ff1a 	bl	801cfdc <nema_set_const_color>
 80201a8:	f04f 33ff 	mov.w	r3, #4294967295
 80201ac:	2201      	movs	r2, #1
 80201ae:	2100      	movs	r1, #0
 80201b0:	4819      	ldr	r0, [pc, #100]	; (8020218 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x114>)
 80201b2:	f7fc fb4d 	bl	801c850 <nema_set_blend>
 80201b6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80201ba:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 80201be:	fb05 f503 	mul.w	r5, r5, r3
 80201c2:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 80201c6:	464b      	mov	r3, r9
 80201c8:	4620      	mov	r0, r4
 80201ca:	e9cd 5600 	strd	r5, r6, [sp]
 80201ce:	f7fa fd33 	bl	801ac38 <nema_bind_src_tex>
 80201d2:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80201d6:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80201da:	f7fa fe6d 	bl	801aeb8 <nema_blit>
 80201de:	6838      	ldr	r0, [r7, #0]
 80201e0:	b160      	cbz	r0, 80201fc <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0xf8>
 80201e2:	f7fd f803 	bl	801d1ec <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 80201e6:	b006      	add	sp, #24
 80201e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80201ec:	f04f 0904 	mov.w	r9, #4
 80201f0:	2502      	movs	r5, #2
 80201f2:	e7a8      	b.n	8020146 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x42>
 80201f4:	f04f 0939 	mov.w	r9, #57	; 0x39
 80201f8:	2503      	movs	r5, #3
 80201fa:	e7a4      	b.n	8020146 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x42>
 80201fc:	4b07      	ldr	r3, [pc, #28]	; (802021c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x118>)
 80201fe:	4a08      	ldr	r2, [pc, #32]	; (8020220 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x11c>)
 8020200:	217c      	movs	r1, #124	; 0x7c
 8020202:	4808      	ldr	r0, [pc, #32]	; (8020224 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x120>)
 8020204:	f007 ff34 	bl	8028070 <__assert_func>
 8020208:	4b07      	ldr	r3, [pc, #28]	; (8020228 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x124>)
 802020a:	4a08      	ldr	r2, [pc, #32]	; (802022c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x128>)
 802020c:	21c1      	movs	r1, #193	; 0xc1
 802020e:	4808      	ldr	r0, [pc, #32]	; (8020230 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x12c>)
 8020210:	f007 ff2e 	bl	8028070 <__assert_func>
 8020214:	20197b88 	.word	0x20197b88
 8020218:	08000504 	.word	0x08000504
 802021c:	0802aea4 	.word	0x0802aea4
 8020220:	0802b6ac 	.word	0x0802b6ac
 8020224:	0802aecc 	.word	0x0802aecc
 8020228:	0802b2f0 	.word	0x0802b2f0
 802022c:	0802c048 	.word	0x0802c048
 8020230:	0802af48 	.word	0x0802af48

08020234 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb>:
 8020234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020238:	4c1e      	ldr	r4, [pc, #120]	; (80202b4 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x80>)
 802023a:	6806      	ldr	r6, [r0, #0]
 802023c:	6824      	ldr	r4, [r4, #0]
 802023e:	4605      	mov	r5, r0
 8020240:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
 8020244:	b087      	sub	sp, #28
 8020246:	6937      	ldr	r7, [r6, #16]
 8020248:	4690      	mov	r8, r2
 802024a:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 802024e:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 8020252:	b170      	cbz	r0, 8020272 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x3e>
 8020254:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8020256:	b160      	cbz	r0, 8020272 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x3e>
 8020258:	6804      	ldr	r4, [r0, #0]
 802025a:	4a17      	ldr	r2, [pc, #92]	; (80202b8 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x84>)
 802025c:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 802025e:	4294      	cmp	r4, r2
 8020260:	d10d      	bne.n	802027e <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x4a>
 8020262:	4c16      	ldr	r4, [pc, #88]	; (80202bc <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x88>)
 8020264:	7a02      	ldrb	r2, [r0, #8]
 8020266:	42a7      	cmp	r7, r4
 8020268:	d112      	bne.n	8020290 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x5c>
 802026a:	b9d6      	cbnz	r6, 80202a2 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x6e>
 802026c:	b007      	add	sp, #28
 802026e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020272:	68a0      	ldr	r0, [r4, #8]
 8020274:	4a10      	ldr	r2, [pc, #64]	; (80202b8 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x84>)
 8020276:	6804      	ldr	r4, [r0, #0]
 8020278:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 802027a:	4294      	cmp	r4, r2
 802027c:	d0f1      	beq.n	8020262 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x2e>
 802027e:	e9cd 1304 	strd	r1, r3, [sp, #16]
 8020282:	47a0      	blx	r4
 8020284:	e9dd 1304 	ldrd	r1, r3, [sp, #16]
 8020288:	4c0c      	ldr	r4, [pc, #48]	; (80202bc <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x88>)
 802028a:	4602      	mov	r2, r0
 802028c:	42a7      	cmp	r7, r4
 802028e:	d0ec      	beq.n	802026a <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x36>
 8020290:	9300      	str	r3, [sp, #0]
 8020292:	e9cd 6901 	strd	r6, r9, [sp, #4]
 8020296:	4643      	mov	r3, r8
 8020298:	4628      	mov	r0, r5
 802029a:	47b8      	blx	r7
 802029c:	b007      	add	sp, #28
 802029e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80202a2:	e9cd 360e 	strd	r3, r6, [sp, #56]	; 0x38
 80202a6:	4628      	mov	r0, r5
 80202a8:	4643      	mov	r3, r8
 80202aa:	b007      	add	sp, #28
 80202ac:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80202b0:	f7ff bf28 	b.w	8020104 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6>
 80202b4:	20197958 	.word	0x20197958
 80202b8:	0801d291 	.word	0x0801d291
 80202bc:	080202c1 	.word	0x080202c1

080202c0 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80202c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80202c4:	b087      	sub	sp, #28
 80202c6:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80202ca:	b915      	cbnz	r5, 80202d2 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x12>
 80202cc:	b007      	add	sp, #28
 80202ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80202d2:	461c      	mov	r4, r3
 80202d4:	4617      	mov	r7, r2
 80202d6:	4688      	mov	r8, r1
 80202d8:	4606      	mov	r6, r0
 80202da:	6859      	ldr	r1, [r3, #4]
 80202dc:	6818      	ldr	r0, [r3, #0]
 80202de:	ab02      	add	r3, sp, #8
 80202e0:	c303      	stmia	r3!, {r0, r1}
 80202e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80202e4:	6818      	ldr	r0, [r3, #0]
 80202e6:	6859      	ldr	r1, [r3, #4]
 80202e8:	ab04      	add	r3, sp, #16
 80202ea:	c303      	stmia	r3!, {r0, r1}
 80202ec:	a802      	add	r0, sp, #8
 80202ee:	f7f7 f9f7 	bl	80176e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80202f2:	4621      	mov	r1, r4
 80202f4:	a804      	add	r0, sp, #16
 80202f6:	f7f7 fa1b 	bl	8017730 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80202fa:	2f01      	cmp	r7, #1
 80202fc:	d05c      	beq.n	80203b8 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0xf8>
 80202fe:	d357      	bcc.n	80203b0 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0xf0>
 8020300:	2f02      	cmp	r7, #2
 8020302:	d163      	bne.n	80203cc <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x10c>
 8020304:	f04f 0910 	mov.w	r9, #16
 8020308:	2404      	movs	r4, #4
 802030a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802030e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020312:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8020316:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 802031a:	fb11 2103 	smlabb	r1, r1, r3, r2
 802031e:	4f2e      	ldr	r7, [pc, #184]	; (80203d8 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x118>)
 8020320:	fb04 8801 	mla	r8, r4, r1, r8
 8020324:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8020328:	4402      	add	r2, r0
 802032a:	6838      	ldr	r0, [r7, #0]
 802032c:	440b      	add	r3, r1
 802032e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8020332:	f8ad 3012 	strh.w	r3, [sp, #18]
 8020336:	2800      	cmp	r0, #0
 8020338:	d042      	beq.n	80203c0 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x100>
 802033a:	f7fc ff37 	bl	801d1ac <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 802033e:	6833      	ldr	r3, [r6, #0]
 8020340:	4630      	mov	r0, r6
 8020342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020344:	4798      	blx	r3
 8020346:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 802034a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 802034e:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8020352:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8020356:	f7fa fc33 	bl	801abc0 <nema_set_clip>
 802035a:	2200      	movs	r2, #0
 802035c:	462b      	mov	r3, r5
 802035e:	2500      	movs	r5, #0
 8020360:	4611      	mov	r1, r2
 8020362:	4610      	mov	r0, r2
 8020364:	f7fa fc60 	bl	801ac28 <nema_rgba>
 8020368:	f7fc fe38 	bl	801cfdc <nema_set_const_color>
 802036c:	f04f 33ff 	mov.w	r3, #4294967295
 8020370:	2201      	movs	r2, #1
 8020372:	2100      	movs	r1, #0
 8020374:	4819      	ldr	r0, [pc, #100]	; (80203dc <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x11c>)
 8020376:	f7fc fa6b 	bl	801c850 <nema_set_blend>
 802037a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802037e:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 8020382:	fb04 f403 	mul.w	r4, r4, r3
 8020386:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 802038a:	464b      	mov	r3, r9
 802038c:	4640      	mov	r0, r8
 802038e:	e9cd 4500 	strd	r4, r5, [sp]
 8020392:	f7fa fc51 	bl	801ac38 <nema_bind_src_tex>
 8020396:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 802039a:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 802039e:	f7fa fd8b 	bl	801aeb8 <nema_blit>
 80203a2:	6838      	ldr	r0, [r7, #0]
 80203a4:	b160      	cbz	r0, 80203c0 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x100>
 80203a6:	f7fc ff21 	bl	801d1ec <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 80203aa:	b007      	add	sp, #28
 80203ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80203b0:	f04f 0904 	mov.w	r9, #4
 80203b4:	2402      	movs	r4, #2
 80203b6:	e7a8      	b.n	802030a <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x4a>
 80203b8:	f04f 0939 	mov.w	r9, #57	; 0x39
 80203bc:	2403      	movs	r4, #3
 80203be:	e7a4      	b.n	802030a <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x4a>
 80203c0:	4b07      	ldr	r3, [pc, #28]	; (80203e0 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x120>)
 80203c2:	4a08      	ldr	r2, [pc, #32]	; (80203e4 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x124>)
 80203c4:	217c      	movs	r1, #124	; 0x7c
 80203c6:	4808      	ldr	r0, [pc, #32]	; (80203e8 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x128>)
 80203c8:	f007 fe52 	bl	8028070 <__assert_func>
 80203cc:	4b07      	ldr	r3, [pc, #28]	; (80203ec <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x12c>)
 80203ce:	4a08      	ldr	r2, [pc, #32]	; (80203f0 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x130>)
 80203d0:	21c1      	movs	r1, #193	; 0xc1
 80203d2:	4808      	ldr	r0, [pc, #32]	; (80203f4 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x134>)
 80203d4:	f007 fe4c 	bl	8028070 <__assert_func>
 80203d8:	20197b88 	.word	0x20197b88
 80203dc:	08000504 	.word	0x08000504
 80203e0:	0802aea4 	.word	0x0802aea4
 80203e4:	0802b6ac 	.word	0x0802b6ac
 80203e8:	0802aecc 	.word	0x0802aecc
 80203ec:	0802b2f0 	.word	0x0802b2f0
 80203f0:	0802c048 	.word	0x0802c048
 80203f4:	0802af48 	.word	0x0802af48

080203f8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 80203f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80203fc:	4682      	mov	sl, r0
 80203fe:	4851      	ldr	r0, [pc, #324]	; (8020544 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x14c>)
 8020400:	b08f      	sub	sp, #60	; 0x3c
 8020402:	6800      	ldr	r0, [r0, #0]
 8020404:	9104      	str	r1, [sp, #16]
 8020406:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 802040a:	f9bd 0064 	ldrsh.w	r0, [sp, #100]	; 0x64
 802040e:	2902      	cmp	r1, #2
 8020410:	9003      	str	r0, [sp, #12]
 8020412:	f9bd 0068 	ldrsh.w	r0, [sp, #104]	; 0x68
 8020416:	9006      	str	r0, [sp, #24]
 8020418:	f000 81cd 	beq.w	80207b6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3be>
 802041c:	9918      	ldr	r1, [sp, #96]	; 0x60
 802041e:	2900      	cmp	r1, #0
 8020420:	f000 81c3 	beq.w	80207aa <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3b2>
 8020424:	f9b3 5000 	ldrsh.w	r5, [r3]
 8020428:	8899      	ldrh	r1, [r3, #4]
 802042a:	b2ae      	uxth	r6, r5
 802042c:	4431      	add	r1, r6
 802042e:	b289      	uxth	r1, r1
 8020430:	fa0f fc81 	sxth.w	ip, r1
 8020434:	4565      	cmp	r5, ip
 8020436:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 802043a:	da28      	bge.n	802048e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x96>
 802043c:	9803      	ldr	r0, [sp, #12]
 802043e:	1830      	adds	r0, r6, r0
 8020440:	b280      	uxth	r0, r0
 8020442:	9005      	str	r0, [sp, #20]
 8020444:	f9bd e014 	ldrsh.w	lr, [sp, #20]
 8020448:	4575      	cmp	r5, lr
 802044a:	da20      	bge.n	802048e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x96>
 802044c:	f8b3 8006 	ldrh.w	r8, [r3, #6]
 8020450:	b2a7      	uxth	r7, r4
 8020452:	4638      	mov	r0, r7
 8020454:	4447      	add	r7, r8
 8020456:	b2bf      	uxth	r7, r7
 8020458:	fa0f f987 	sxth.w	r9, r7
 802045c:	454c      	cmp	r4, r9
 802045e:	da16      	bge.n	802048e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x96>
 8020460:	4680      	mov	r8, r0
 8020462:	9007      	str	r0, [sp, #28]
 8020464:	9806      	ldr	r0, [sp, #24]
 8020466:	4480      	add	r8, r0
 8020468:	fa1f f888 	uxth.w	r8, r8
 802046c:	fa0f fb88 	sxth.w	fp, r8
 8020470:	455c      	cmp	r4, fp
 8020472:	da0c      	bge.n	802048e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x96>
 8020474:	9805      	ldr	r0, [sp, #20]
 8020476:	45d9      	cmp	r9, fp
 8020478:	bfc8      	it	gt
 802047a:	4647      	movgt	r7, r8
 802047c:	45f4      	cmp	ip, lr
 802047e:	bfc8      	it	gt
 8020480:	4601      	movgt	r1, r0
 8020482:	9807      	ldr	r0, [sp, #28]
 8020484:	1b89      	subs	r1, r1, r6
 8020486:	1a3f      	subs	r7, r7, r0
 8020488:	b209      	sxth	r1, r1
 802048a:	b23f      	sxth	r7, r7
 802048c:	e005      	b.n	802049a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xa2>
 802048e:	2700      	movs	r7, #0
 8020490:	463c      	mov	r4, r7
 8020492:	4639      	mov	r1, r7
 8020494:	463e      	mov	r6, r7
 8020496:	463d      	mov	r5, r7
 8020498:	9707      	str	r7, [sp, #28]
 802049a:	f9b2 b000 	ldrsh.w	fp, [r2]
 802049e:	8890      	ldrh	r0, [r2, #4]
 80204a0:	4458      	add	r0, fp
 80204a2:	b280      	uxth	r0, r0
 80204a4:	fa0f fc80 	sxth.w	ip, r0
 80204a8:	45ac      	cmp	ip, r5
 80204aa:	dd51      	ble.n	8020550 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x158>
 80204ac:	4431      	add	r1, r6
 80204ae:	b289      	uxth	r1, r1
 80204b0:	fa0f fe81 	sxth.w	lr, r1
 80204b4:	45f3      	cmp	fp, lr
 80204b6:	da4b      	bge.n	8020550 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x158>
 80204b8:	f9b2 8002 	ldrsh.w	r8, [r2, #2]
 80204bc:	88d6      	ldrh	r6, [r2, #6]
 80204be:	4446      	add	r6, r8
 80204c0:	b2b6      	uxth	r6, r6
 80204c2:	fa0f f986 	sxth.w	r9, r6
 80204c6:	454c      	cmp	r4, r9
 80204c8:	da42      	bge.n	8020550 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x158>
 80204ca:	9a07      	ldr	r2, [sp, #28]
 80204cc:	443a      	add	r2, r7
 80204ce:	b297      	uxth	r7, r2
 80204d0:	b23a      	sxth	r2, r7
 80204d2:	4590      	cmp	r8, r2
 80204d4:	9205      	str	r2, [sp, #20]
 80204d6:	da3b      	bge.n	8020550 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x158>
 80204d8:	45ab      	cmp	fp, r5
 80204da:	bfb8      	it	lt
 80204dc:	46ab      	movlt	fp, r5
 80204de:	4544      	cmp	r4, r8
 80204e0:	bfb8      	it	lt
 80204e2:	4644      	movlt	r4, r8
 80204e4:	45f4      	cmp	ip, lr
 80204e6:	bfc8      	it	gt
 80204e8:	4608      	movgt	r0, r1
 80204ea:	9905      	ldr	r1, [sp, #20]
 80204ec:	465a      	mov	r2, fp
 80204ee:	4589      	cmp	r9, r1
 80204f0:	bfc8      	it	gt
 80204f2:	463e      	movgt	r6, r7
 80204f4:	f8df c054 	ldr.w	ip, [pc, #84]	; 802054c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x154>
 80204f8:	4f13      	ldr	r7, [pc, #76]	; (8020548 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x150>)
 80204fa:	fa1f f58b 	uxth.w	r5, fp
 80204fe:	1b36      	subs	r6, r6, r4
 8020500:	1b41      	subs	r1, r0, r5
 8020502:	f8bc c000 	ldrh.w	ip, [ip]
 8020506:	883f      	ldrh	r7, [r7, #0]
 8020508:	fa0f fb86 	sxth.w	fp, r6
 802050c:	fa0f f981 	sxth.w	r9, r1
 8020510:	2a00      	cmp	r2, #0
 8020512:	f8ad b026 	strh.w	fp, [sp, #38]	; 0x26
 8020516:	f8ad 2020 	strh.w	r2, [sp, #32]
 802051a:	f8ad 4022 	strh.w	r4, [sp, #34]	; 0x22
 802051e:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
 8020522:	fa0f f68c 	sxth.w	r6, ip
 8020526:	b239      	sxth	r1, r7
 8020528:	f280 812b 	bge.w	8020782 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x38a>
 802052c:	f04f 0e00 	mov.w	lr, #0
 8020530:	fa0f f980 	sxth.w	r9, r0
 8020534:	4675      	mov	r5, lr
 8020536:	4672      	mov	r2, lr
 8020538:	4648      	mov	r0, r9
 802053a:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
 802053e:	f8ad e020 	strh.w	lr, [sp, #32]
 8020542:	e015      	b.n	8020570 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x178>
 8020544:	20197958 	.word	0x20197958
 8020548:	2019794e 	.word	0x2019794e
 802054c:	2019794c 	.word	0x2019794c
 8020550:	2200      	movs	r2, #0
 8020552:	48a3      	ldr	r0, [pc, #652]	; (80207e0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3e8>)
 8020554:	4615      	mov	r5, r2
 8020556:	f8b0 c000 	ldrh.w	ip, [r0]
 802055a:	4693      	mov	fp, r2
 802055c:	4614      	mov	r4, r2
 802055e:	4610      	mov	r0, r2
 8020560:	4691      	mov	r9, r2
 8020562:	49a0      	ldr	r1, [pc, #640]	; (80207e4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3ec>)
 8020564:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8020568:	880f      	ldrh	r7, [r1, #0]
 802056a:	fa0f f68c 	sxth.w	r6, ip
 802056e:	b239      	sxth	r1, r7
 8020570:	1ab2      	subs	r2, r6, r2
 8020572:	4282      	cmp	r2, r0
 8020574:	da05      	bge.n	8020582 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x18a>
 8020576:	ebac 0c05 	sub.w	ip, ip, r5
 802057a:	fa0f f98c 	sxth.w	r9, ip
 802057e:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
 8020582:	2c00      	cmp	r4, #0
 8020584:	f2c0 80e8 	blt.w	8020758 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x360>
 8020588:	4622      	mov	r2, r4
 802058a:	1a89      	subs	r1, r1, r2
 802058c:	458b      	cmp	fp, r1
 802058e:	dd04      	ble.n	802059a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a2>
 8020590:	1b3f      	subs	r7, r7, r4
 8020592:	fa0f fb87 	sxth.w	fp, r7
 8020596:	f8ad b026 	strh.w	fp, [sp, #38]	; 0x26
 802059a:	f1b9 0f00 	cmp.w	r9, #0
 802059e:	f340 80d2 	ble.w	8020746 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x34e>
 80205a2:	f1bb 0f00 	cmp.w	fp, #0
 80205a6:	f340 80ce 	ble.w	8020746 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x34e>
 80205aa:	2200      	movs	r2, #0
 80205ac:	8819      	ldrh	r1, [r3, #0]
 80205ae:	f8b3 8002 	ldrh.w	r8, [r3, #2]
 80205b2:	9b03      	ldr	r3, [sp, #12]
 80205b4:	1a6d      	subs	r5, r5, r1
 80205b6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80205ba:	eba4 0408 	sub.w	r4, r4, r8
 80205be:	9b06      	ldr	r3, [sp, #24]
 80205c0:	a90c      	add	r1, sp, #48	; 0x30
 80205c2:	a80a      	add	r0, sp, #40	; 0x28
 80205c4:	b22d      	sxth	r5, r5
 80205c6:	b224      	sxth	r4, r4
 80205c8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80205cc:	920c      	str	r2, [sp, #48]	; 0x30
 80205ce:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 80205d2:	f8ad b02e 	strh.w	fp, [sp, #46]	; 0x2e
 80205d6:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 80205da:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
 80205de:	f7f7 f8a7 	bl	8017730 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80205e2:	a808      	add	r0, sp, #32
 80205e4:	f7f7 f87c 	bl	80176e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80205e8:	a80c      	add	r0, sp, #48	; 0x30
 80205ea:	f7f7 f879 	bl	80176e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80205ee:	4b7e      	ldr	r3, [pc, #504]	; (80207e8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3f0>)
 80205f0:	681b      	ldr	r3, [r3, #0]
 80205f2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80205f6:	2a00      	cmp	r2, #0
 80205f8:	f040 80ba 	bne.w	8020770 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x378>
 80205fc:	6898      	ldr	r0, [r3, #8]
 80205fe:	6803      	ldr	r3, [r0, #0]
 8020600:	4a7a      	ldr	r2, [pc, #488]	; (80207ec <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3f4>)
 8020602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020604:	4293      	cmp	r3, r2
 8020606:	f040 80c4 	bne.w	8020792 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x39a>
 802060a:	7a00      	ldrb	r0, [r0, #8]
 802060c:	2801      	cmp	r0, #1
 802060e:	f000 80ba 	beq.w	8020786 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x38e>
 8020612:	f0c0 80b2 	bcc.w	802077a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x382>
 8020616:	2802      	cmp	r0, #2
 8020618:	f040 80da 	bne.w	80207d0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3d8>
 802061c:	2310      	movs	r3, #16
 802061e:	2604      	movs	r6, #4
 8020620:	9305      	str	r3, [sp, #20]
 8020622:	9b04      	ldr	r3, [sp, #16]
 8020624:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 8020628:	681b      	ldr	r3, [r3, #0]
 802062a:	fb06 f101 	mul.w	r1, r6, r1
 802062e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020630:	4a6f      	ldr	r2, [pc, #444]	; (80207f0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3f8>)
 8020632:	9103      	str	r1, [sp, #12]
 8020634:	4293      	cmp	r3, r2
 8020636:	f040 80ae 	bne.w	8020796 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x39e>
 802063a:	4b6e      	ldr	r3, [pc, #440]	; (80207f4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3fc>)
 802063c:	881f      	ldrh	r7, [r3, #0]
 802063e:	2f00      	cmp	r7, #0
 8020640:	f000 80bf 	beq.w	80207c2 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3ca>
 8020644:	9b04      	ldr	r3, [sp, #16]
 8020646:	7a1b      	ldrb	r3, [r3, #8]
 8020648:	2b02      	cmp	r3, #2
 802064a:	f000 80a0 	beq.w	802078e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x396>
 802064e:	2b01      	cmp	r3, #1
 8020650:	bf14      	ite	ne
 8020652:	2302      	movne	r3, #2
 8020654:	2303      	moveq	r3, #3
 8020656:	fb17 f703 	smulbb	r7, r7, r3
 802065a:	b2bf      	uxth	r7, r7
 802065c:	4a62      	ldr	r2, [pc, #392]	; (80207e8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3f0>)
 802065e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8020662:	6810      	ldr	r0, [r2, #0]
 8020664:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	; 0x2a
 8020668:	9a03      	ldr	r2, [sp, #12]
 802066a:	fb02 3808 	mla	r8, r2, r8, r3
 802066e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8020670:	6803      	ldr	r3, [r0, #0]
 8020672:	4442      	add	r2, r8
 8020674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020676:	9204      	str	r2, [sp, #16]
 8020678:	4798      	blx	r3
 802067a:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 802067e:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8020682:	fb07 f202 	mul.w	r2, r7, r2
 8020686:	fb06 2303 	mla	r3, r6, r3, r2
 802068a:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8020824 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x42c>
 802068e:	18c3      	adds	r3, r0, r3
 8020690:	f8d8 2000 	ldr.w	r2, [r8]
 8020694:	9306      	str	r3, [sp, #24]
 8020696:	2a00      	cmp	r2, #0
 8020698:	f000 8081 	beq.w	802079e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3a6>
 802069c:	2600      	movs	r6, #0
 802069e:	4610      	mov	r0, r2
 80206a0:	f7fc fd84 	bl	801d1ac <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 80206a4:	9b03      	ldr	r3, [sp, #12]
 80206a6:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 80206aa:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
 80206ae:	9300      	str	r3, [sp, #0]
 80206b0:	e9dd 0304 	ldrd	r0, r3, [sp, #16]
 80206b4:	f7fa fb38 	bl	801ad28 <nema_bind_dst_tex>
 80206b8:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80206bc:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80206c0:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 80206c4:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 80206c8:	f7fa fa7a 	bl	801abc0 <nema_set_clip>
 80206cc:	f04f 33ff 	mov.w	r3, #4294967295
 80206d0:	2201      	movs	r2, #1
 80206d2:	4631      	mov	r1, r6
 80206d4:	f240 5004 	movw	r0, #1284	; 0x504
 80206d8:	f7fc f8ba 	bl	801c850 <nema_set_blend>
 80206dc:	e9dd 3005 	ldrd	r3, r0, [sp, #20]
 80206e0:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 80206e4:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
 80206e8:	9700      	str	r7, [sp, #0]
 80206ea:	9601      	str	r6, [sp, #4]
 80206ec:	f7fa faa4 	bl	801ac38 <nema_bind_src_tex>
 80206f0:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 80206f4:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 80206f8:	f7fa fbde 	bl	801aeb8 <nema_blit>
 80206fc:	f8d8 0000 	ldr.w	r0, [r8]
 8020700:	2800      	cmp	r0, #0
 8020702:	d04c      	beq.n	802079e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3a6>
 8020704:	f7fc fd72 	bl	801d1ec <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 8020708:	f8d8 0000 	ldr.w	r0, [r8]
 802070c:	2800      	cmp	r0, #0
 802070e:	d046      	beq.n	802079e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3a6>
 8020710:	6803      	ldr	r3, [r0, #0]
 8020712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020714:	4798      	blx	r3
 8020716:	f8d8 0000 	ldr.w	r0, [r8]
 802071a:	2800      	cmp	r0, #0
 802071c:	d03f      	beq.n	802079e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3a6>
 802071e:	6803      	ldr	r3, [r0, #0]
 8020720:	4637      	mov	r7, r6
 8020722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020724:	4798      	blx	r3
 8020726:	4650      	mov	r0, sl
 8020728:	f365 060f 	bfi	r6, r5, #0, #16
 802072c:	f369 070f 	bfi	r7, r9, #0, #16
 8020730:	f364 461f 	bfi	r6, r4, #16, #16
 8020734:	f36b 471f 	bfi	r7, fp, #16, #16
 8020738:	f8ca 6000 	str.w	r6, [sl]
 802073c:	f8ca 7004 	str.w	r7, [sl, #4]
 8020740:	b00f      	add	sp, #60	; 0x3c
 8020742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020746:	2300      	movs	r3, #0
 8020748:	4650      	mov	r0, sl
 802074a:	f8ca 3000 	str.w	r3, [sl]
 802074e:	f8ca 3004 	str.w	r3, [sl, #4]
 8020752:	b00f      	add	sp, #60	; 0x3c
 8020754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020758:	2000      	movs	r0, #0
 802075a:	eb0b 0604 	add.w	r6, fp, r4
 802075e:	fa0f fb86 	sxth.w	fp, r6
 8020762:	4604      	mov	r4, r0
 8020764:	4602      	mov	r2, r0
 8020766:	f8ad b026 	strh.w	fp, [sp, #38]	; 0x26
 802076a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 802076e:	e70c      	b.n	802058a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x192>
 8020770:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8020772:	2800      	cmp	r0, #0
 8020774:	f47f af43 	bne.w	80205fe <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x206>
 8020778:	e740      	b.n	80205fc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x204>
 802077a:	2304      	movs	r3, #4
 802077c:	2602      	movs	r6, #2
 802077e:	9305      	str	r3, [sp, #20]
 8020780:	e74f      	b.n	8020622 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22a>
 8020782:	4648      	mov	r0, r9
 8020784:	e6f4      	b.n	8020570 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x178>
 8020786:	2339      	movs	r3, #57	; 0x39
 8020788:	2603      	movs	r6, #3
 802078a:	9305      	str	r3, [sp, #20]
 802078c:	e749      	b.n	8020622 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22a>
 802078e:	2304      	movs	r3, #4
 8020790:	e761      	b.n	8020656 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x25e>
 8020792:	4798      	blx	r3
 8020794:	e73a      	b.n	802060c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>
 8020796:	9804      	ldr	r0, [sp, #16]
 8020798:	4798      	blx	r3
 802079a:	4607      	mov	r7, r0
 802079c:	e75e      	b.n	802065c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x264>
 802079e:	4b16      	ldr	r3, [pc, #88]	; (80207f8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x400>)
 80207a0:	4a16      	ldr	r2, [pc, #88]	; (80207fc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x404>)
 80207a2:	217c      	movs	r1, #124	; 0x7c
 80207a4:	4816      	ldr	r0, [pc, #88]	; (8020800 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x408>)
 80207a6:	f007 fc63 	bl	8028070 <__assert_func>
 80207aa:	4b16      	ldr	r3, [pc, #88]	; (8020804 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x40c>)
 80207ac:	4a16      	ldr	r2, [pc, #88]	; (8020808 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x410>)
 80207ae:	21f1      	movs	r1, #241	; 0xf1
 80207b0:	4816      	ldr	r0, [pc, #88]	; (802080c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x414>)
 80207b2:	f007 fc5d 	bl	8028070 <__assert_func>
 80207b6:	4b16      	ldr	r3, [pc, #88]	; (8020810 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x418>)
 80207b8:	4a13      	ldr	r2, [pc, #76]	; (8020808 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x410>)
 80207ba:	21f0      	movs	r1, #240	; 0xf0
 80207bc:	4813      	ldr	r0, [pc, #76]	; (802080c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x414>)
 80207be:	f007 fc57 	bl	8028070 <__assert_func>
 80207c2:	4b14      	ldr	r3, [pc, #80]	; (8020814 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x41c>)
 80207c4:	4a14      	ldr	r2, [pc, #80]	; (8020818 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x420>)
 80207c6:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80207ca:	4814      	ldr	r0, [pc, #80]	; (802081c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x424>)
 80207cc:	f007 fc50 	bl	8028070 <__assert_func>
 80207d0:	4b13      	ldr	r3, [pc, #76]	; (8020820 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x428>)
 80207d2:	4a0d      	ldr	r2, [pc, #52]	; (8020808 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x410>)
 80207d4:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80207d8:	480c      	ldr	r0, [pc, #48]	; (802080c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x414>)
 80207da:	f007 fc49 	bl	8028070 <__assert_func>
 80207de:	bf00      	nop
 80207e0:	2019794c 	.word	0x2019794c
 80207e4:	2019794e 	.word	0x2019794e
 80207e8:	20197958 	.word	0x20197958
 80207ec:	0801d291 	.word	0x0801d291
 80207f0:	0801ee71 	.word	0x0801ee71
 80207f4:	20197952 	.word	0x20197952
 80207f8:	0802aea4 	.word	0x0802aea4
 80207fc:	0802b6ac 	.word	0x0802b6ac
 8020800:	0802aecc 	.word	0x0802aecc
 8020804:	0802b1a0 	.word	0x0802b1a0
 8020808:	0802bf2c 	.word	0x0802bf2c
 802080c:	0802af48 	.word	0x0802af48
 8020810:	0802b0ec 	.word	0x0802b0ec
 8020814:	0802b41c 	.word	0x0802b41c
 8020818:	0802c1d8 	.word	0x0802c1d8
 802081c:	0802b460 	.word	0x0802b460
 8020820:	0802b1f0 	.word	0x0802b1f0
 8020824:	20197b88 	.word	0x20197b88

08020828 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8020828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802082c:	b085      	sub	sp, #20
 802082e:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8020832:	e9dd 950e 	ldrd	r9, r5, [sp, #56]	; 0x38
 8020836:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 802083a:	f8bd a048 	ldrh.w	sl, [sp, #72]	; 0x48
 802083e:	2e00      	cmp	r6, #0
 8020840:	d05b      	beq.n	80208fa <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd2>
 8020842:	f9b5 e004 	ldrsh.w	lr, [r5, #4]
 8020846:	f1be 0f00 	cmp.w	lr, #0
 802084a:	dd56      	ble.n	80208fa <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd2>
 802084c:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8020850:	f1be 0f00 	cmp.w	lr, #0
 8020854:	dd51      	ble.n	80208fa <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd2>
 8020856:	f3c8 0b87 	ubfx	fp, r8, #2, #8
 802085a:	f1bb 0f0b 	cmp.w	fp, #11
 802085e:	f000 8165 	beq.w	8020b2c <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x304>
 8020862:	f1bb 0f0d 	cmp.w	fp, #13
 8020866:	4684      	mov	ip, r0
 8020868:	4614      	mov	r4, r2
 802086a:	461f      	mov	r7, r3
 802086c:	d03c      	beq.n	80208e8 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xc0>
 802086e:	f8df a368 	ldr.w	sl, [pc, #872]	; 8020bd8 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3b0>
 8020872:	f8da 0000 	ldr.w	r0, [sl]
 8020876:	2800      	cmp	r0, #0
 8020878:	f000 818d 	beq.w	8020b96 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 802087c:	f8cd c00c 	str.w	ip, [sp, #12]
 8020880:	f7fc fc94 	bl	801d1ac <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 8020884:	9b03      	ldr	r3, [sp, #12]
 8020886:	681a      	ldr	r2, [r3, #0]
 8020888:	4618      	mov	r0, r3
 802088a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 802088c:	4798      	blx	r3
 802088e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8020892:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8020896:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 802089a:	f9b5 0000 	ldrsh.w	r0, [r5]
 802089e:	f7fa f98f 	bl	801abc0 <nema_set_clip>
 80208a2:	2200      	movs	r2, #0
 80208a4:	4633      	mov	r3, r6
 80208a6:	4611      	mov	r1, r2
 80208a8:	4610      	mov	r0, r2
 80208aa:	f7fa f9bd 	bl	801ac28 <nema_rgba>
 80208ae:	f7fc fb95 	bl	801cfdc <nema_set_const_color>
 80208b2:	f04f 33ff 	mov.w	r3, #4294967295
 80208b6:	2201      	movs	r2, #1
 80208b8:	2100      	movs	r1, #0
 80208ba:	48bd      	ldr	r0, [pc, #756]	; (8020bb0 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x388>)
 80208bc:	f7fb ffc8 	bl	801c850 <nema_set_blend>
 80208c0:	f1bb 0f0d 	cmp.w	fp, #13
 80208c4:	f200 816d 	bhi.w	8020ba2 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x37a>
 80208c8:	e8df f01b 	tbh	[pc, fp, lsl #1]
 80208cc:	00c700d3 	.word	0x00c700d3
 80208d0:	016b00dc 	.word	0x016b00dc
 80208d4:	016b016b 	.word	0x016b016b
 80208d8:	016b016b 	.word	0x016b016b
 80208dc:	016b016b 	.word	0x016b016b
 80208e0:	016b016b 	.word	0x016b016b
 80208e4:	001a00b2 	.word	0x001a00b2
 80208e8:	685b      	ldr	r3, [r3, #4]
 80208ea:	b133      	cbz	r3, 80208fa <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd2>
 80208ec:	781b      	ldrb	r3, [r3, #0]
 80208ee:	f1a3 0216 	sub.w	r2, r3, #22
 80208f2:	2a01      	cmp	r2, #1
 80208f4:	d9bb      	bls.n	802086e <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x46>
 80208f6:	2b12      	cmp	r3, #18
 80208f8:	d0b9      	beq.n	802086e <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x46>
 80208fa:	b005      	add	sp, #20
 80208fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020900:	f04f 36ff 	mov.w	r6, #4294967295
 8020904:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8020908:	687b      	ldr	r3, [r7, #4]
 802090a:	6838      	ldr	r0, [r7, #0]
 802090c:	781b      	ldrb	r3, [r3, #0]
 802090e:	f008 0501 	and.w	r5, r8, #1
 8020912:	e9cd 6500 	strd	r6, r5, [sp]
 8020916:	f7fa f98f 	bl	801ac38 <nema_bind_src_tex>
 802091a:	2001      	movs	r0, #1
 802091c:	f7fa ffbc 	bl	801b898 <nema_enable_tiling>
 8020920:	2300      	movs	r3, #0
 8020922:	461a      	mov	r2, r3
 8020924:	4619      	mov	r1, r3
 8020926:	4618      	mov	r0, r3
 8020928:	f7fa ffca 	bl	801b8c0 <nema_enable_aa>
 802092c:	f9b9 3000 	ldrsh.w	r3, [r9]
 8020930:	edd4 7a00 	vldr	s15, [r4]
 8020934:	ee02 3a10 	vmov	s4, r3
 8020938:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
 802093c:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8020940:	ee02 3a90 	vmov	s5, r3
 8020944:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8020948:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8020bb4 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x38c>
 802094c:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8020950:	edd4 7a01 	vldr	s15, [r4, #4]
 8020954:	eeb0 0a42 	vmov.f32	s0, s4
 8020958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802095c:	eea7 0a26 	vfma.f32	s0, s14, s13
 8020960:	eef0 0a62 	vmov.f32	s1, s5
 8020964:	ed94 7a03 	vldr	s14, [r4, #12]
 8020968:	4b93      	ldr	r3, [pc, #588]	; (8020bb8 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x390>)
 802096a:	eee7 0aa6 	vfma.f32	s1, s15, s13
 802096e:	781b      	ldrb	r3, [r3, #0]
 8020970:	edd4 7a04 	vldr	s15, [r4, #16]
 8020974:	2b01      	cmp	r3, #1
 8020976:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 802097a:	f000 808c 	beq.w	8020a96 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x26e>
 802097e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020982:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020986:	f240 80ea 	bls.w	8020b5e <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 802098a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802098e:	bf94      	ite	ls
 8020990:	2001      	movls	r0, #1
 8020992:	2002      	movhi	r0, #2
 8020994:	edd4 7a05 	vldr	s15, [r4, #20]
 8020998:	ed94 6a08 	vldr	s12, [r4, #32]
 802099c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80209a0:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 80209a4:	edd4 7a06 	vldr	s15, [r4, #24]
 80209a8:	eddf 6a82 	vldr	s13, [pc, #520]	; 8020bb4 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x38c>
 80209ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80209b0:	eeb0 1a42 	vmov.f32	s2, s4
 80209b4:	eef0 1a62 	vmov.f32	s3, s5
 80209b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80209bc:	eee7 1aa6 	vfma.f32	s3, s15, s13
 80209c0:	eea7 1a26 	vfma.f32	s2, s14, s13
 80209c4:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 80209c8:	f240 80c1 	bls.w	8020b4e <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x326>
 80209cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80209d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80209d4:	bf94      	ite	ls
 80209d6:	2101      	movls	r1, #1
 80209d8:	2102      	movhi	r1, #2
 80209da:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 80209de:	ed94 6a0d 	vldr	s12, [r4, #52]	; 0x34
 80209e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80209e6:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 80209ea:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80209ee:	eddf 6a71 	vldr	s13, [pc, #452]	; 8020bb4 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x38c>
 80209f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80209f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80209fa:	eee7 2aa6 	vfma.f32	s5, s15, s13
 80209fe:	eea7 2a26 	vfma.f32	s4, s14, s13
 8020a02:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8020a06:	f240 809a 	bls.w	8020b3e <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x316>
 8020a0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a12:	bf94      	ite	ls
 8020a14:	2201      	movls	r2, #1
 8020a16:	2202      	movhi	r2, #2
 8020a18:	f7fa fb44 	bl	801b0a4 <nema_blit_tri_fit>
 8020a1c:	f8da 0000 	ldr.w	r0, [sl]
 8020a20:	2800      	cmp	r0, #0
 8020a22:	f000 80b8 	beq.w	8020b96 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8020a26:	b005      	add	sp, #20
 8020a28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a2c:	f7fc bbde 	b.w	801d1ec <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 8020a30:	4a62      	ldr	r2, [pc, #392]	; (8020bbc <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x394>)
 8020a32:	23ff      	movs	r3, #255	; 0xff
 8020a34:	6810      	ldr	r0, [r2, #0]
 8020a36:	f008 0501 	and.w	r5, r8, #1
 8020a3a:	b2c2      	uxtb	r2, r0
 8020a3c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8020a40:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8020a44:	f7fa f8f0 	bl	801ac28 <nema_rgba>
 8020a48:	f7fa f8ae 	bl	801aba8 <nema_set_tex_color>
 8020a4c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8020a50:	6838      	ldr	r0, [r7, #0]
 8020a52:	2329      	movs	r3, #41	; 0x29
 8020a54:	f04f 36ff 	mov.w	r6, #4294967295
 8020a58:	e75b      	b.n	8020912 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xea>
 8020a5a:	2339      	movs	r3, #57	; 0x39
 8020a5c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8020a60:	f04f 0c03 	mov.w	ip, #3
 8020a64:	6838      	ldr	r0, [r7, #0]
 8020a66:	f008 0501 	and.w	r5, r8, #1
 8020a6a:	693e      	ldr	r6, [r7, #16]
 8020a6c:	fb06 f60c 	mul.w	r6, r6, ip
 8020a70:	e74f      	b.n	8020912 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xea>
 8020a72:	f008 0501 	and.w	r5, r8, #1
 8020a76:	6838      	ldr	r0, [r7, #0]
 8020a78:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8020a7c:	2304      	movs	r3, #4
 8020a7e:	f04f 0c02 	mov.w	ip, #2
 8020a82:	e7f2      	b.n	8020a6a <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x242>
 8020a84:	2310      	movs	r3, #16
 8020a86:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8020a8a:	f04f 0c04 	mov.w	ip, #4
 8020a8e:	6838      	ldr	r0, [r7, #0]
 8020a90:	f008 0501 	and.w	r5, r8, #1
 8020a94:	e7e9      	b.n	8020a6a <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x242>
 8020a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020a9e:	d974      	bls.n	8020b8a <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x362>
 8020aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020aa4:	bf94      	ite	ls
 8020aa6:	2002      	movls	r0, #2
 8020aa8:	2003      	movhi	r0, #3
 8020aaa:	edd4 7a05 	vldr	s15, [r4, #20]
 8020aae:	ed94 6a08 	vldr	s12, [r4, #32]
 8020ab2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8020ab6:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8020aba:	edd4 7a06 	vldr	s15, [r4, #24]
 8020abe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8020bb4 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x38c>
 8020ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020ac6:	eeb0 1a42 	vmov.f32	s2, s4
 8020aca:	eef0 1a62 	vmov.f32	s3, s5
 8020ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020ad2:	eee7 1aa6 	vfma.f32	s3, s15, s13
 8020ad6:	eea7 1a26 	vfma.f32	s2, s14, s13
 8020ada:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8020ade:	d94c      	bls.n	8020b7a <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x352>
 8020ae0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020ae8:	bf94      	ite	ls
 8020aea:	2102      	movls	r1, #2
 8020aec:	2103      	movhi	r1, #3
 8020aee:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8020af2:	ed94 6a0d 	vldr	s12, [r4, #52]	; 0x34
 8020af6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8020afa:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8020afe:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8020b02:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8020bb4 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x38c>
 8020b06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b0e:	eee7 2aa6 	vfma.f32	s5, s15, s13
 8020b12:	eea7 2a26 	vfma.f32	s4, s14, s13
 8020b16:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8020b1a:	d926      	bls.n	8020b6a <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8020b1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b24:	bf94      	ite	ls
 8020b26:	2202      	movls	r2, #2
 8020b28:	2203      	movhi	r2, #3
 8020b2a:	e775      	b.n	8020a18 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1f0>
 8020b2c:	e9cd 6a11 	strd	r6, sl, [sp, #68]	; 0x44
 8020b30:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8020b34:	b005      	add	sp, #20
 8020b36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b3a:	f7f6 b887 	b.w	8016c4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>
 8020b3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b46:	bf94      	ite	ls
 8020b48:	2200      	movls	r2, #0
 8020b4a:	2203      	movhi	r2, #3
 8020b4c:	e764      	b.n	8020a18 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1f0>
 8020b4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b56:	bf94      	ite	ls
 8020b58:	2100      	movls	r1, #0
 8020b5a:	2103      	movhi	r1, #3
 8020b5c:	e73d      	b.n	80209da <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1b2>
 8020b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b62:	bf94      	ite	ls
 8020b64:	2000      	movls	r0, #0
 8020b66:	2003      	movhi	r0, #3
 8020b68:	e714      	b.n	8020994 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x16c>
 8020b6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b72:	bf94      	ite	ls
 8020b74:	2201      	movls	r2, #1
 8020b76:	2200      	movhi	r2, #0
 8020b78:	e74e      	b.n	8020a18 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1f0>
 8020b7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b82:	bf94      	ite	ls
 8020b84:	2101      	movls	r1, #1
 8020b86:	2100      	movhi	r1, #0
 8020b88:	e7b1      	b.n	8020aee <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2c6>
 8020b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b8e:	bf94      	ite	ls
 8020b90:	2001      	movls	r0, #1
 8020b92:	2000      	movhi	r0, #0
 8020b94:	e789      	b.n	8020aaa <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x282>
 8020b96:	4b0a      	ldr	r3, [pc, #40]	; (8020bc0 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x398>)
 8020b98:	4a0a      	ldr	r2, [pc, #40]	; (8020bc4 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x39c>)
 8020b9a:	217c      	movs	r1, #124	; 0x7c
 8020b9c:	480a      	ldr	r0, [pc, #40]	; (8020bc8 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a0>)
 8020b9e:	f007 fa67 	bl	8028070 <__assert_func>
 8020ba2:	4b0a      	ldr	r3, [pc, #40]	; (8020bcc <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a4>)
 8020ba4:	4a0a      	ldr	r2, [pc, #40]	; (8020bd0 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>)
 8020ba6:	f240 21d3 	movw	r1, #723	; 0x2d3
 8020baa:	480a      	ldr	r0, [pc, #40]	; (8020bd4 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ac>)
 8020bac:	f007 fa60 	bl	8028070 <__assert_func>
 8020bb0:	08000504 	.word	0x08000504
 8020bb4:	3d800000 	.word	0x3d800000
 8020bb8:	20197950 	.word	0x20197950
 8020bbc:	20197960 	.word	0x20197960
 8020bc0:	0802aea4 	.word	0x0802aea4
 8020bc4:	0802b6ac 	.word	0x0802b6ac
 8020bc8:	0802aecc 	.word	0x0802aecc
 8020bcc:	0802ad9c 	.word	0x0802ad9c
 8020bd0:	0802ba50 	.word	0x0802ba50
 8020bd4:	0802af48 	.word	0x0802af48
 8020bd8:	20197b88 	.word	0x20197b88

08020bdc <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8020bdc:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8020be0:	2700      	movs	r7, #0
 8020be2:	4a2b      	ldr	r2, [pc, #172]	; (8020c90 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xb4>)
 8020be4:	4b2b      	ldr	r3, [pc, #172]	; (8020c94 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xb8>)
 8020be6:	4d2c      	ldr	r5, [pc, #176]	; (8020c98 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xbc>)
 8020be8:	8812      	ldrh	r2, [r2, #0]
 8020bea:	881b      	ldrh	r3, [r3, #0]
 8020bec:	b088      	sub	sp, #32
 8020bee:	4604      	mov	r4, r0
 8020bf0:	6828      	ldr	r0, [r5, #0]
 8020bf2:	f8ad 201c 	strh.w	r2, [sp, #28]
 8020bf6:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020bfa:	9706      	str	r7, [sp, #24]
 8020bfc:	6803      	ldr	r3, [r0, #0]
 8020bfe:	4689      	mov	r9, r1
 8020c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c02:	4798      	blx	r3
 8020c04:	6823      	ldr	r3, [r4, #0]
 8020c06:	4a25      	ldr	r2, [pc, #148]	; (8020c9c <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc0>)
 8020c08:	68de      	ldr	r6, [r3, #12]
 8020c0a:	4601      	mov	r1, r0
 8020c0c:	4296      	cmp	r6, r2
 8020c0e:	d134      	bne.n	8020c7a <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x9e>
 8020c10:	682a      	ldr	r2, [r5, #0]
 8020c12:	691d      	ldr	r5, [r3, #16]
 8020c14:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 8020c18:	b9a3      	cbnz	r3, 8020c44 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x68>
 8020c1a:	6890      	ldr	r0, [r2, #8]
 8020c1c:	4a20      	ldr	r2, [pc, #128]	; (8020ca0 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc4>)
 8020c1e:	6803      	ldr	r3, [r0, #0]
 8020c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020c22:	4293      	cmp	r3, r2
 8020c24:	d116      	bne.n	8020c54 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x78>
 8020c26:	4b1f      	ldr	r3, [pc, #124]	; (8020ca4 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc8>)
 8020c28:	7a02      	ldrb	r2, [r0, #8]
 8020c2a:	429d      	cmp	r5, r3
 8020c2c:	d119      	bne.n	8020c62 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 8020c2e:	23ff      	movs	r3, #255	; 0xff
 8020c30:	f8cd 9000 	str.w	r9, [sp]
 8020c34:	9301      	str	r3, [sp, #4]
 8020c36:	4620      	mov	r0, r4
 8020c38:	ab06      	add	r3, sp, #24
 8020c3a:	f7ff fa63 	bl	8020104 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6>
 8020c3e:	b008      	add	sp, #32
 8020c40:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8020c44:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8020c46:	2800      	cmp	r0, #0
 8020c48:	d0e7      	beq.n	8020c1a <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x3e>
 8020c4a:	6803      	ldr	r3, [r0, #0]
 8020c4c:	4a14      	ldr	r2, [pc, #80]	; (8020ca0 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc4>)
 8020c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020c50:	4293      	cmp	r3, r2
 8020c52:	d0e8      	beq.n	8020c26 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x4a>
 8020c54:	9105      	str	r1, [sp, #20]
 8020c56:	4798      	blx	r3
 8020c58:	4b12      	ldr	r3, [pc, #72]	; (8020ca4 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc8>)
 8020c5a:	4602      	mov	r2, r0
 8020c5c:	429d      	cmp	r5, r3
 8020c5e:	9905      	ldr	r1, [sp, #20]
 8020c60:	d0e5      	beq.n	8020c2e <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x52>
 8020c62:	2600      	movs	r6, #0
 8020c64:	23ff      	movs	r3, #255	; 0xff
 8020c66:	f8cd 9000 	str.w	r9, [sp]
 8020c6a:	e9cd 3601 	strd	r3, r6, [sp, #4]
 8020c6e:	4620      	mov	r0, r4
 8020c70:	ab06      	add	r3, sp, #24
 8020c72:	47a8      	blx	r5
 8020c74:	b008      	add	sp, #32
 8020c76:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8020c7a:	22ff      	movs	r2, #255	; 0xff
 8020c7c:	9701      	str	r7, [sp, #4]
 8020c7e:	9200      	str	r2, [sp, #0]
 8020c80:	464b      	mov	r3, r9
 8020c82:	4620      	mov	r0, r4
 8020c84:	aa06      	add	r2, sp, #24
 8020c86:	47b0      	blx	r6
 8020c88:	b008      	add	sp, #32
 8020c8a:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8020c8e:	bf00      	nop
 8020c90:	20197952 	.word	0x20197952
 8020c94:	20197954 	.word	0x20197954
 8020c98:	20197958 	.word	0x20197958
 8020c9c:	08020235 	.word	0x08020235
 8020ca0:	0801d291 	.word	0x0801d291
 8020ca4:	080202c1 	.word	0x080202c1

08020ca8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8020ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020cac:	4604      	mov	r4, r0
 8020cae:	4865      	ldr	r0, [pc, #404]	; (8020e44 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19c>)
 8020cb0:	460f      	mov	r7, r1
 8020cb2:	6800      	ldr	r0, [r0, #0]
 8020cb4:	b093      	sub	sp, #76	; 0x4c
 8020cb6:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 8020cba:	2902      	cmp	r1, #2
 8020cbc:	f000 81f2 	beq.w	80210a4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3fc>
 8020cc0:	f10d 0948 	add.w	r9, sp, #72	; 0x48
 8020cc4:	f829 3d1c 	strh.w	r3, [r9, #-28]!
 8020cc8:	4648      	mov	r0, r9
 8020cca:	4615      	mov	r5, r2
 8020ccc:	f7f9 fbbc 	bl	801a448 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020cd0:	6823      	ldr	r3, [r4, #0]
 8020cd2:	4a5d      	ldr	r2, [pc, #372]	; (8020e48 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1a0>)
 8020cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020cd6:	4680      	mov	r8, r0
 8020cd8:	4293      	cmp	r3, r2
 8020cda:	f040 81b5 	bne.w	8021048 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3a0>
 8020cde:	7a20      	ldrb	r0, [r4, #8]
 8020ce0:	4580      	cmp	r8, r0
 8020ce2:	f040 81d9 	bne.w	8021098 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3f0>
 8020ce6:	4648      	mov	r0, r9
 8020ce8:	f7f9 fb2a 	bl	801a340 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020cec:	4683      	mov	fp, r0
 8020cee:	2800      	cmp	r0, #0
 8020cf0:	f000 81cc 	beq.w	802108c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3e4>
 8020cf4:	6823      	ldr	r3, [r4, #0]
 8020cf6:	4648      	mov	r0, r9
 8020cf8:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8020cfc:	f7f9 fab8 	bl	801a270 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020d00:	9005      	str	r0, [sp, #20]
 8020d02:	4648      	mov	r0, r9
 8020d04:	f7f9 fae8 	bl	801a2d8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8020d08:	4b50      	ldr	r3, [pc, #320]	; (8020e4c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1a4>)
 8020d0a:	9006      	str	r0, [sp, #24]
 8020d0c:	4598      	cmp	r8, r3
 8020d0e:	f040 818e 	bne.w	802102e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x386>
 8020d12:	4b4c      	ldr	r3, [pc, #304]	; (8020e44 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19c>)
 8020d14:	681b      	ldr	r3, [r3, #0]
 8020d16:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8020d1a:	2b02      	cmp	r3, #2
 8020d1c:	f000 81c8 	beq.w	80210b0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x408>
 8020d20:	f9b5 8000 	ldrsh.w	r8, [r5]
 8020d24:	88ab      	ldrh	r3, [r5, #4]
 8020d26:	fa1f fe88 	uxth.w	lr, r8
 8020d2a:	4473      	add	r3, lr
 8020d2c:	b29b      	uxth	r3, r3
 8020d2e:	b218      	sxth	r0, r3
 8020d30:	4580      	cmp	r8, r0
 8020d32:	f9b5 a002 	ldrsh.w	sl, [r5, #2]
 8020d36:	da2a      	bge.n	8020d8e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xe6>
 8020d38:	9a05      	ldr	r2, [sp, #20]
 8020d3a:	eb0e 0102 	add.w	r1, lr, r2
 8020d3e:	b28a      	uxth	r2, r1
 8020d40:	9207      	str	r2, [sp, #28]
 8020d42:	f9bd c01c 	ldrsh.w	ip, [sp, #28]
 8020d46:	45e0      	cmp	r8, ip
 8020d48:	da21      	bge.n	8020d8e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xe6>
 8020d4a:	88ea      	ldrh	r2, [r5, #6]
 8020d4c:	fa1f f68a 	uxth.w	r6, sl
 8020d50:	4432      	add	r2, r6
 8020d52:	b292      	uxth	r2, r2
 8020d54:	b211      	sxth	r1, r2
 8020d56:	458a      	cmp	sl, r1
 8020d58:	9108      	str	r1, [sp, #32]
 8020d5a:	da18      	bge.n	8020d8e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xe6>
 8020d5c:	9906      	ldr	r1, [sp, #24]
 8020d5e:	eb06 0901 	add.w	r9, r6, r1
 8020d62:	fa1f f989 	uxth.w	r9, r9
 8020d66:	fa0f f189 	sxth.w	r1, r9
 8020d6a:	458a      	cmp	sl, r1
 8020d6c:	9109      	str	r1, [sp, #36]	; 0x24
 8020d6e:	da0e      	bge.n	8020d8e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xe6>
 8020d70:	9907      	ldr	r1, [sp, #28]
 8020d72:	4560      	cmp	r0, ip
 8020d74:	bfc8      	it	gt
 8020d76:	460b      	movgt	r3, r1
 8020d78:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 8020d7c:	4281      	cmp	r1, r0
 8020d7e:	bfc8      	it	gt
 8020d80:	464a      	movgt	r2, r9
 8020d82:	eba3 030e 	sub.w	r3, r3, lr
 8020d86:	1b92      	subs	r2, r2, r6
 8020d88:	b21b      	sxth	r3, r3
 8020d8a:	b212      	sxth	r2, r2
 8020d8c:	e005      	b.n	8020d9a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xf2>
 8020d8e:	2200      	movs	r2, #0
 8020d90:	4616      	mov	r6, r2
 8020d92:	4692      	mov	sl, r2
 8020d94:	4613      	mov	r3, r2
 8020d96:	4696      	mov	lr, r2
 8020d98:	4690      	mov	r8, r2
 8020d9a:	f9b7 0000 	ldrsh.w	r0, [r7]
 8020d9e:	88b9      	ldrh	r1, [r7, #4]
 8020da0:	4401      	add	r1, r0
 8020da2:	b289      	uxth	r1, r1
 8020da4:	fa0f f981 	sxth.w	r9, r1
 8020da8:	45c8      	cmp	r8, r9
 8020daa:	da55      	bge.n	8020e58 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b0>
 8020dac:	449e      	add	lr, r3
 8020dae:	fa1f fe8e 	uxth.w	lr, lr
 8020db2:	fa0f f38e 	sxth.w	r3, lr
 8020db6:	4298      	cmp	r0, r3
 8020db8:	9307      	str	r3, [sp, #28]
 8020dba:	da4d      	bge.n	8020e58 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b0>
 8020dbc:	f9b7 c002 	ldrsh.w	ip, [r7, #2]
 8020dc0:	88fb      	ldrh	r3, [r7, #6]
 8020dc2:	4463      	add	r3, ip
 8020dc4:	b29b      	uxth	r3, r3
 8020dc6:	b21f      	sxth	r7, r3
 8020dc8:	45ba      	cmp	sl, r7
 8020dca:	da45      	bge.n	8020e58 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b0>
 8020dcc:	4416      	add	r6, r2
 8020dce:	b2b2      	uxth	r2, r6
 8020dd0:	b216      	sxth	r6, r2
 8020dd2:	45b4      	cmp	ip, r6
 8020dd4:	9608      	str	r6, [sp, #32]
 8020dd6:	da3f      	bge.n	8020e58 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b0>
 8020dd8:	4540      	cmp	r0, r8
 8020dda:	9e07      	ldr	r6, [sp, #28]
 8020ddc:	bfb8      	it	lt
 8020dde:	4640      	movlt	r0, r8
 8020de0:	45d4      	cmp	ip, sl
 8020de2:	bfb8      	it	lt
 8020de4:	46d4      	movlt	ip, sl
 8020de6:	45b1      	cmp	r9, r6
 8020de8:	bfc8      	it	gt
 8020dea:	4671      	movgt	r1, lr
 8020dec:	9e08      	ldr	r6, [sp, #32]
 8020dee:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8020e50 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1a8>
 8020df2:	42b7      	cmp	r7, r6
 8020df4:	bfc8      	it	gt
 8020df6:	4613      	movgt	r3, r2
 8020df8:	f8df e058 	ldr.w	lr, [pc, #88]	; 8020e54 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ac>
 8020dfc:	b282      	uxth	r2, r0
 8020dfe:	eba3 030c 	sub.w	r3, r3, ip
 8020e02:	1a8f      	subs	r7, r1, r2
 8020e04:	f8b8 a000 	ldrh.w	sl, [r8]
 8020e08:	f8be 9000 	ldrh.w	r9, [lr]
 8020e0c:	b21b      	sxth	r3, r3
 8020e0e:	b23f      	sxth	r7, r7
 8020e10:	2800      	cmp	r0, #0
 8020e12:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8020e16:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 8020e1a:	f8ad c032 	strh.w	ip, [sp, #50]	; 0x32
 8020e1e:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
 8020e22:	fa0f f88a 	sxth.w	r8, sl
 8020e26:	fa0f fe89 	sxth.w	lr, r9
 8020e2a:	f280 8115 	bge.w	8021058 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3b0>
 8020e2e:	2200      	movs	r2, #0
 8020e30:	f04f 0600 	mov.w	r6, #0
 8020e34:	b20f      	sxth	r7, r1
 8020e36:	4610      	mov	r0, r2
 8020e38:	4639      	mov	r1, r7
 8020e3a:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
 8020e3e:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 8020e42:	e01b      	b.n	8020e7c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d4>
 8020e44:	20197958 	.word	0x20197958
 8020e48:	0801d291 	.word	0x0801d291
 8020e4c:	080203f9 	.word	0x080203f9
 8020e50:	2019794c 	.word	0x2019794c
 8020e54:	2019794e 	.word	0x2019794e
 8020e58:	2300      	movs	r3, #0
 8020e5a:	489f      	ldr	r0, [pc, #636]	; (80210d8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x430>)
 8020e5c:	499f      	ldr	r1, [pc, #636]	; (80210dc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x434>)
 8020e5e:	f8b0 a000 	ldrh.w	sl, [r0]
 8020e62:	f8b1 9000 	ldrh.w	r9, [r1]
 8020e66:	461a      	mov	r2, r3
 8020e68:	469c      	mov	ip, r3
 8020e6a:	4618      	mov	r0, r3
 8020e6c:	4619      	mov	r1, r3
 8020e6e:	461f      	mov	r7, r3
 8020e70:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8020e74:	fa0f f88a 	sxth.w	r8, sl
 8020e78:	fa0f fe89 	sxth.w	lr, r9
 8020e7c:	eba8 0000 	sub.w	r0, r8, r0
 8020e80:	4288      	cmp	r0, r1
 8020e82:	da04      	bge.n	8020e8e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1e6>
 8020e84:	ebaa 0702 	sub.w	r7, sl, r2
 8020e88:	b23f      	sxth	r7, r7
 8020e8a:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
 8020e8e:	f1bc 0f00 	cmp.w	ip, #0
 8020e92:	f2c0 80c2 	blt.w	802101a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x372>
 8020e96:	4661      	mov	r1, ip
 8020e98:	ebae 0e01 	sub.w	lr, lr, r1
 8020e9c:	4573      	cmp	r3, lr
 8020e9e:	dd04      	ble.n	8020eaa <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x202>
 8020ea0:	eba9 030c 	sub.w	r3, r9, ip
 8020ea4:	b21b      	sxth	r3, r3
 8020ea6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8020eaa:	2f00      	cmp	r7, #0
 8020eac:	f340 80b1 	ble.w	8021012 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x36a>
 8020eb0:	2b00      	cmp	r3, #0
 8020eb2:	f340 80ae 	ble.w	8021012 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x36a>
 8020eb6:	f04f 0e00 	mov.w	lr, #0
 8020eba:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8020ebe:	9b05      	ldr	r3, [sp, #20]
 8020ec0:	8868      	ldrh	r0, [r5, #2]
 8020ec2:	8829      	ldrh	r1, [r5, #0]
 8020ec4:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8020ec8:	9b06      	ldr	r3, [sp, #24]
 8020eca:	1a52      	subs	r2, r2, r1
 8020ecc:	ebac 0c00 	sub.w	ip, ip, r0
 8020ed0:	a910      	add	r1, sp, #64	; 0x40
 8020ed2:	a80e      	add	r0, sp, #56	; 0x38
 8020ed4:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 8020ed8:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8020edc:	f8ad c03a 	strh.w	ip, [sp, #58]	; 0x3a
 8020ee0:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
 8020ee4:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 8020ee8:	f7f6 fc22 	bl	8017730 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020eec:	a80c      	add	r0, sp, #48	; 0x30
 8020eee:	f7f6 fbf7 	bl	80176e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020ef2:	a810      	add	r0, sp, #64	; 0x40
 8020ef4:	f7f6 fbf4 	bl	80176e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020ef8:	4b79      	ldr	r3, [pc, #484]	; (80210e0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x438>)
 8020efa:	681b      	ldr	r3, [r3, #0]
 8020efc:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8020f00:	2a00      	cmp	r2, #0
 8020f02:	f040 80a4 	bne.w	802104e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3a6>
 8020f06:	6898      	ldr	r0, [r3, #8]
 8020f08:	6803      	ldr	r3, [r0, #0]
 8020f0a:	4a76      	ldr	r2, [pc, #472]	; (80210e4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x43c>)
 8020f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020f0e:	4293      	cmp	r3, r2
 8020f10:	f040 80b0 	bne.w	8021074 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3cc>
 8020f14:	7a00      	ldrb	r0, [r0, #8]
 8020f16:	2801      	cmp	r0, #1
 8020f18:	f000 80a5 	beq.w	8021066 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3be>
 8020f1c:	f0c0 809e 	bcc.w	802105c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3b4>
 8020f20:	2802      	cmp	r0, #2
 8020f22:	f040 80d2 	bne.w	80210ca <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x422>
 8020f26:	f04f 0810 	mov.w	r8, #16
 8020f2a:	f04f 0a04 	mov.w	sl, #4
 8020f2e:	6823      	ldr	r3, [r4, #0]
 8020f30:	4a6d      	ldr	r2, [pc, #436]	; (80210e8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x440>)
 8020f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020f34:	f9bd 7044 	ldrsh.w	r7, [sp, #68]	; 0x44
 8020f38:	4293      	cmp	r3, r2
 8020f3a:	fb0a f707 	mul.w	r7, sl, r7
 8020f3e:	f040 809b 	bne.w	8021078 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d0>
 8020f42:	4b6a      	ldr	r3, [pc, #424]	; (80210ec <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x444>)
 8020f44:	881b      	ldrh	r3, [r3, #0]
 8020f46:	2b00      	cmp	r3, #0
 8020f48:	f000 80b8 	beq.w	80210bc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x414>
 8020f4c:	7a22      	ldrb	r2, [r4, #8]
 8020f4e:	2a02      	cmp	r2, #2
 8020f50:	f000 808e 	beq.w	8021070 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3c8>
 8020f54:	2a01      	cmp	r2, #1
 8020f56:	bf14      	ite	ne
 8020f58:	2402      	movne	r4, #2
 8020f5a:	2403      	moveq	r4, #3
 8020f5c:	fb13 f404 	smulbb	r4, r3, r4
 8020f60:	b2a4      	uxth	r4, r4
 8020f62:	4a5f      	ldr	r2, [pc, #380]	; (80210e0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x438>)
 8020f64:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 8020f68:	f9bd 903a 	ldrsh.w	r9, [sp, #58]	; 0x3a
 8020f6c:	6810      	ldr	r0, [r2, #0]
 8020f6e:	fb07 3909 	mla	r9, r7, r9, r3
 8020f72:	6803      	ldr	r3, [r0, #0]
 8020f74:	4e5e      	ldr	r6, [pc, #376]	; (80210f0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x448>)
 8020f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020f78:	4798      	blx	r3
 8020f7a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8020f7e:	f9bd 5030 	ldrsh.w	r5, [sp, #48]	; 0x30
 8020f82:	fb04 f303 	mul.w	r3, r4, r3
 8020f86:	fb0a 3505 	mla	r5, sl, r5, r3
 8020f8a:	4405      	add	r5, r0
 8020f8c:	6830      	ldr	r0, [r6, #0]
 8020f8e:	44d9      	add	r9, fp
 8020f90:	2800      	cmp	r0, #0
 8020f92:	d075      	beq.n	8021080 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d8>
 8020f94:	f7fc f90a 	bl	801d1ac <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 8020f98:	9700      	str	r7, [sp, #0]
 8020f9a:	2700      	movs	r7, #0
 8020f9c:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
 8020fa0:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8020fa4:	4648      	mov	r0, r9
 8020fa6:	4643      	mov	r3, r8
 8020fa8:	f7f9 febe 	bl	801ad28 <nema_bind_dst_tex>
 8020fac:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8020fb0:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8020fb4:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8020fb8:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8020fbc:	f7f9 fe00 	bl	801abc0 <nema_set_clip>
 8020fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8020fc4:	2201      	movs	r2, #1
 8020fc6:	2100      	movs	r1, #0
 8020fc8:	f240 5004 	movw	r0, #1284	; 0x504
 8020fcc:	f7fb fc40 	bl	801c850 <nema_set_blend>
 8020fd0:	f9bd 2036 	ldrsh.w	r2, [sp, #54]	; 0x36
 8020fd4:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 8020fd8:	4643      	mov	r3, r8
 8020fda:	4628      	mov	r0, r5
 8020fdc:	9400      	str	r4, [sp, #0]
 8020fde:	9701      	str	r7, [sp, #4]
 8020fe0:	f7f9 fe2a 	bl	801ac38 <nema_bind_src_tex>
 8020fe4:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8020fe8:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8020fec:	f7f9 ff64 	bl	801aeb8 <nema_blit>
 8020ff0:	6830      	ldr	r0, [r6, #0]
 8020ff2:	2800      	cmp	r0, #0
 8020ff4:	d044      	beq.n	8021080 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d8>
 8020ff6:	f7fc f8f9 	bl	801d1ec <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 8020ffa:	6830      	ldr	r0, [r6, #0]
 8020ffc:	2800      	cmp	r0, #0
 8020ffe:	d03f      	beq.n	8021080 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d8>
 8021000:	6803      	ldr	r3, [r0, #0]
 8021002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021004:	4798      	blx	r3
 8021006:	6830      	ldr	r0, [r6, #0]
 8021008:	2800      	cmp	r0, #0
 802100a:	d039      	beq.n	8021080 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d8>
 802100c:	6803      	ldr	r3, [r0, #0]
 802100e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021010:	4798      	blx	r3
 8021012:	4658      	mov	r0, fp
 8021014:	b013      	add	sp, #76	; 0x4c
 8021016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802101a:	2000      	movs	r0, #0
 802101c:	4463      	add	r3, ip
 802101e:	b21b      	sxth	r3, r3
 8021020:	4684      	mov	ip, r0
 8021022:	4601      	mov	r1, r0
 8021024:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8021028:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 802102c:	e734      	b.n	8020e98 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f0>
 802102e:	9b05      	ldr	r3, [sp, #20]
 8021030:	9002      	str	r0, [sp, #8]
 8021032:	e9cd b300 	strd	fp, r3, [sp]
 8021036:	a810      	add	r0, sp, #64	; 0x40
 8021038:	462b      	mov	r3, r5
 802103a:	463a      	mov	r2, r7
 802103c:	4621      	mov	r1, r4
 802103e:	47c0      	blx	r8
 8021040:	4658      	mov	r0, fp
 8021042:	b013      	add	sp, #76	; 0x4c
 8021044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021048:	4620      	mov	r0, r4
 802104a:	4798      	blx	r3
 802104c:	e648      	b.n	8020ce0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x38>
 802104e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8021050:	2800      	cmp	r0, #0
 8021052:	f47f af59 	bne.w	8020f08 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x260>
 8021056:	e756      	b.n	8020f06 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 8021058:	4639      	mov	r1, r7
 802105a:	e70f      	b.n	8020e7c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d4>
 802105c:	f04f 0804 	mov.w	r8, #4
 8021060:	f04f 0a02 	mov.w	sl, #2
 8021064:	e763      	b.n	8020f2e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x286>
 8021066:	f04f 0839 	mov.w	r8, #57	; 0x39
 802106a:	f04f 0a03 	mov.w	sl, #3
 802106e:	e75e      	b.n	8020f2e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x286>
 8021070:	2404      	movs	r4, #4
 8021072:	e773      	b.n	8020f5c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2b4>
 8021074:	4798      	blx	r3
 8021076:	e74e      	b.n	8020f16 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26e>
 8021078:	4620      	mov	r0, r4
 802107a:	4798      	blx	r3
 802107c:	4604      	mov	r4, r0
 802107e:	e770      	b.n	8020f62 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ba>
 8021080:	4b1c      	ldr	r3, [pc, #112]	; (80210f4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x44c>)
 8021082:	4a1d      	ldr	r2, [pc, #116]	; (80210f8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x450>)
 8021084:	217c      	movs	r1, #124	; 0x7c
 8021086:	481d      	ldr	r0, [pc, #116]	; (80210fc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x454>)
 8021088:	f006 fff2 	bl	8028070 <__assert_func>
 802108c:	4b1c      	ldr	r3, [pc, #112]	; (8021100 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x458>)
 802108e:	4a1d      	ldr	r2, [pc, #116]	; (8021104 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x45c>)
 8021090:	21e9      	movs	r1, #233	; 0xe9
 8021092:	481d      	ldr	r0, [pc, #116]	; (8021108 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 8021094:	f006 ffec 	bl	8028070 <__assert_func>
 8021098:	4b1c      	ldr	r3, [pc, #112]	; (802110c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x464>)
 802109a:	4a1a      	ldr	r2, [pc, #104]	; (8021104 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x45c>)
 802109c:	21e7      	movs	r1, #231	; 0xe7
 802109e:	481a      	ldr	r0, [pc, #104]	; (8021108 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 80210a0:	f006 ffe6 	bl	8028070 <__assert_func>
 80210a4:	4b1a      	ldr	r3, [pc, #104]	; (8021110 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x468>)
 80210a6:	4a17      	ldr	r2, [pc, #92]	; (8021104 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x45c>)
 80210a8:	21e5      	movs	r1, #229	; 0xe5
 80210aa:	4817      	ldr	r0, [pc, #92]	; (8021108 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 80210ac:	f006 ffe0 	bl	8028070 <__assert_func>
 80210b0:	4b17      	ldr	r3, [pc, #92]	; (8021110 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x468>)
 80210b2:	4a18      	ldr	r2, [pc, #96]	; (8021114 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x46c>)
 80210b4:	21f0      	movs	r1, #240	; 0xf0
 80210b6:	4814      	ldr	r0, [pc, #80]	; (8021108 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 80210b8:	f006 ffda 	bl	8028070 <__assert_func>
 80210bc:	4b16      	ldr	r3, [pc, #88]	; (8021118 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x470>)
 80210be:	4a17      	ldr	r2, [pc, #92]	; (802111c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x474>)
 80210c0:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80210c4:	4816      	ldr	r0, [pc, #88]	; (8021120 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x478>)
 80210c6:	f006 ffd3 	bl	8028070 <__assert_func>
 80210ca:	4b16      	ldr	r3, [pc, #88]	; (8021124 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x47c>)
 80210cc:	4a11      	ldr	r2, [pc, #68]	; (8021114 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x46c>)
 80210ce:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80210d2:	480d      	ldr	r0, [pc, #52]	; (8021108 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 80210d4:	f006 ffcc 	bl	8028070 <__assert_func>
 80210d8:	2019794c 	.word	0x2019794c
 80210dc:	2019794e 	.word	0x2019794e
 80210e0:	20197958 	.word	0x20197958
 80210e4:	0801d291 	.word	0x0801d291
 80210e8:	0801ee71 	.word	0x0801ee71
 80210ec:	20197952 	.word	0x20197952
 80210f0:	20197b88 	.word	0x20197b88
 80210f4:	0802aea4 	.word	0x0802aea4
 80210f8:	0802b6ac 	.word	0x0802b6ac
 80210fc:	0802aecc 	.word	0x0802aecc
 8021100:	0802b29c 	.word	0x0802b29c
 8021104:	0802bfc0 	.word	0x0802bfc0
 8021108:	0802af48 	.word	0x0802af48
 802110c:	0802b244 	.word	0x0802b244
 8021110:	0802b0ec 	.word	0x0802b0ec
 8021114:	0802bf2c 	.word	0x0802bf2c
 8021118:	0802b41c 	.word	0x0802b41c
 802111c:	0802c1d8 	.word	0x0802c1d8
 8021120:	0802b460 	.word	0x0802b460
 8021124:	0802b1f0 	.word	0x0802b1f0

08021128 <_ZN8touchgfx8LCDGPU2DC1Ev>:
 8021128:	b410      	push	{r4}
 802112a:	2400      	movs	r4, #0
 802112c:	220d      	movs	r2, #13
 802112e:	4903      	ldr	r1, [pc, #12]	; (802113c <_ZN8touchgfx8LCDGPU2DC1Ev+0x14>)
 8021130:	7202      	strb	r2, [r0, #8]
 8021132:	e9c0 1400 	strd	r1, r4, [r0]
 8021136:	f85d 4b04 	ldr.w	r4, [sp], #4
 802113a:	4770      	bx	lr
 802113c:	0802b654 	.word	0x0802b654

08021140 <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE>:
 8021140:	2902      	cmp	r1, #2
 8021142:	d906      	bls.n	8021152 <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE+0x12>
 8021144:	b508      	push	{r3, lr}
 8021146:	4a04      	ldr	r2, [pc, #16]	; (8021158 <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE+0x18>)
 8021148:	4b04      	ldr	r3, [pc, #16]	; (802115c <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE+0x1c>)
 802114a:	212a      	movs	r1, #42	; 0x2a
 802114c:	4804      	ldr	r0, [pc, #16]	; (8021160 <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE+0x20>)
 802114e:	f006 ff8f 	bl	8028070 <__assert_func>
 8021152:	7201      	strb	r1, [r0, #8]
 8021154:	4770      	bx	lr
 8021156:	bf00      	nop
 8021158:	0802b9c4 	.word	0x0802b9c4
 802115c:	0802addc 	.word	0x0802addc
 8021160:	0802af48 	.word	0x0802af48

08021164 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h>:
 8021164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021168:	b093      	sub	sp, #76	; 0x4c
 802116a:	4691      	mov	r9, r2
 802116c:	468a      	mov	sl, r1
 802116e:	8812      	ldrh	r2, [r2, #0]
 8021170:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
 8021174:	461c      	mov	r4, r3
 8021176:	910a      	str	r1, [sp, #40]	; 0x28
 8021178:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802117a:	2a00      	cmp	r2, #0
 802117c:	f040 8109 	bne.w	8021392 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x22e>
 8021180:	6820      	ldr	r0, [r4, #0]
 8021182:	6861      	ldr	r1, [r4, #4]
 8021184:	aa0e      	add	r2, sp, #56	; 0x38
 8021186:	c203      	stmia	r2!, {r0, r1}
 8021188:	6818      	ldr	r0, [r3, #0]
 802118a:	6859      	ldr	r1, [r3, #4]
 802118c:	aa10      	add	r2, sp, #64	; 0x40
 802118e:	c203      	stmia	r2!, {r0, r1}
 8021190:	a80e      	add	r0, sp, #56	; 0x38
 8021192:	f7f6 faa5 	bl	80176e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021196:	4621      	mov	r1, r4
 8021198:	a810      	add	r0, sp, #64	; 0x40
 802119a:	f7f6 fac9 	bl	8017730 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802119e:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 80211a2:	f9bd 5042 	ldrsh.w	r5, [sp, #66]	; 0x42
 80211a6:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80211aa:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80211ae:	487c      	ldr	r0, [pc, #496]	; (80213a0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 80211b0:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 80211b4:	4422      	add	r2, r4
 80211b6:	442b      	add	r3, r5
 80211b8:	6800      	ldr	r0, [r0, #0]
 80211ba:	fb11 4105 	smlabb	r1, r1, r5, r4
 80211be:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80211c2:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80211c6:	6802      	ldr	r2, [r0, #0]
 80211c8:	4d76      	ldr	r5, [pc, #472]	; (80213a4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 80211ca:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 80211ce:	448a      	add	sl, r1
 80211d0:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 80211d4:	42ab      	cmp	r3, r5
 80211d6:	910b      	str	r1, [sp, #44]	; 0x2c
 80211d8:	f9bd 4046 	ldrsh.w	r4, [sp, #70]	; 0x46
 80211dc:	f040 80a6 	bne.w	802132c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1c8>
 80211e0:	6841      	ldr	r1, [r0, #4]
 80211e2:	4d71      	ldr	r5, [pc, #452]	; (80213a8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x244>)
 80211e4:	680b      	ldr	r3, [r1, #0]
 80211e6:	699b      	ldr	r3, [r3, #24]
 80211e8:	42ab      	cmp	r3, r5
 80211ea:	f040 80c4 	bne.w	8021376 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x212>
 80211ee:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80211f0:	4798      	blx	r3
 80211f2:	4b6e      	ldr	r3, [pc, #440]	; (80213ac <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 80211f4:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 80211f8:	881b      	ldrh	r3, [r3, #0]
 80211fa:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 80211fe:	fb03 f404 	mul.w	r4, r3, r4
 8021202:	fb03 1202 	mla	r2, r3, r2, r1
 8021206:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 802120a:	eb00 0244 	add.w	r2, r0, r4, lsl #1
 802120e:	4290      	cmp	r0, r2
 8021210:	920c      	str	r2, [sp, #48]	; 0x30
 8021212:	f080 8083 	bcs.w	802131c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1b8>
 8021216:	f04f 0b04 	mov.w	fp, #4
 802121a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802121c:	0052      	lsls	r2, r2, #1
 802121e:	920d      	str	r2, [sp, #52]	; 0x34
 8021220:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021222:	eb00 0802 	add.w	r8, r0, r2
 8021226:	4580      	cmp	r8, r0
 8021228:	d96d      	bls.n	8021306 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1a2>
 802122a:	4684      	mov	ip, r0
 802122c:	f10a 3eff 	add.w	lr, sl, #4294967295
 8021230:	e03e      	b.n	80212b0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x14c>
 8021232:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021234:	f3c5 4707 	ubfx	r7, r5, #16, #8
 8021238:	fb02 f303 	mul.w	r3, r2, r3
 802123c:	1c59      	adds	r1, r3, #1
 802123e:	eb01 2323 	add.w	r3, r1, r3, asr #8
 8021242:	121b      	asrs	r3, r3, #8
 8021244:	43da      	mvns	r2, r3
 8021246:	b299      	uxth	r1, r3
 8021248:	b2f6      	uxtb	r6, r6
 802124a:	b2eb      	uxtb	r3, r5
 802124c:	fb17 f701 	smulbb	r7, r7, r1
 8021250:	f8bc 5000 	ldrh.w	r5, [ip]
 8021254:	fb13 f301 	smulbb	r3, r3, r1
 8021258:	fb16 f601 	smulbb	r6, r6, r1
 802125c:	122c      	asrs	r4, r5, #8
 802125e:	10e9      	asrs	r1, r5, #3
 8021260:	00ed      	lsls	r5, r5, #3
 8021262:	b2d2      	uxtb	r2, r2
 8021264:	b2ed      	uxtb	r5, r5
 8021266:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802126a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802126e:	fb04 7402 	mla	r4, r4, r2, r7
 8021272:	fb01 6102 	mla	r1, r1, r2, r6
 8021276:	fb05 3202 	mla	r2, r5, r2, r3
 802127a:	b2a4      	uxth	r4, r4
 802127c:	b292      	uxth	r2, r2
 802127e:	b289      	uxth	r1, r1
 8021280:	1c55      	adds	r5, r2, #1
 8021282:	1c67      	adds	r7, r4, #1
 8021284:	1c4b      	adds	r3, r1, #1
 8021286:	eb05 2512 	add.w	r5, r5, r2, lsr #8
 802128a:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 802128e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021292:	f404 4278 	and.w	r2, r4, #63488	; 0xf800
 8021296:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 802129a:	095b      	lsrs	r3, r3, #5
 802129c:	432a      	orrs	r2, r5
 802129e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80212a2:	431a      	orrs	r2, r3
 80212a4:	f8ac 2000 	strh.w	r2, [ip]
 80212a8:	f10c 0c02 	add.w	ip, ip, #2
 80212ac:	45e0      	cmp	r8, ip
 80212ae:	d91f      	bls.n	80212f0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x18c>
 80212b0:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 80212b4:	fb1b b303 	smlabb	r3, fp, r3, fp
 80212b8:	f859 5003 	ldr.w	r5, [r9, r3]
 80212bc:	0e2b      	lsrs	r3, r5, #24
 80212be:	d0f3      	beq.n	80212a8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x144>
 80212c0:	2bff      	cmp	r3, #255	; 0xff
 80212c2:	ea4f 2615 	mov.w	r6, r5, lsr #8
 80212c6:	d1b4      	bne.n	8021232 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0xce>
 80212c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80212ca:	2aff      	cmp	r2, #255	; 0xff
 80212cc:	d1b1      	bne.n	8021232 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0xce>
 80212ce:	096b      	lsrs	r3, r5, #5
 80212d0:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 80212d4:	f026 0607 	bic.w	r6, r6, #7
 80212d8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80212dc:	431e      	orrs	r6, r3
 80212de:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80212e2:	4335      	orrs	r5, r6
 80212e4:	f8ac 5000 	strh.w	r5, [ip]
 80212e8:	f10c 0c02 	add.w	ip, ip, #2
 80212ec:	45e0      	cmp	r8, ip
 80212ee:	d8df      	bhi.n	80212b0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x14c>
 80212f0:	43c3      	mvns	r3, r0
 80212f2:	4498      	add	r8, r3
 80212f4:	4b2d      	ldr	r3, [pc, #180]	; (80213ac <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 80212f6:	ea4f 0858 	mov.w	r8, r8, lsr #1
 80212fa:	f108 0801 	add.w	r8, r8, #1
 80212fe:	881b      	ldrh	r3, [r3, #0]
 8021300:	eb00 0048 	add.w	r0, r0, r8, lsl #1
 8021304:	44c2      	add	sl, r8
 8021306:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021308:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 802130c:	1b19      	subs	r1, r3, r4
 802130e:	1b12      	subs	r2, r2, r4
 8021310:	4492      	add	sl, r2
 8021312:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021314:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8021318:	4282      	cmp	r2, r0
 802131a:	d881      	bhi.n	8021220 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0xbc>
 802131c:	4b20      	ldr	r3, [pc, #128]	; (80213a0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 802131e:	6818      	ldr	r0, [r3, #0]
 8021320:	6803      	ldr	r3, [r0, #0]
 8021322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021324:	4798      	blx	r3
 8021326:	b013      	add	sp, #76	; 0x4c
 8021328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802132c:	4798      	blx	r3
 802132e:	4603      	mov	r3, r0
 8021330:	2b01      	cmp	r3, #1
 8021332:	d124      	bne.n	802137e <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x21a>
 8021334:	4a1e      	ldr	r2, [pc, #120]	; (80213b0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 8021336:	6810      	ldr	r0, [r2, #0]
 8021338:	b328      	cbz	r0, 8021386 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x222>
 802133a:	2700      	movs	r7, #0
 802133c:	260b      	movs	r6, #11
 802133e:	4a1b      	ldr	r2, [pc, #108]	; (80213ac <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 8021340:	b2a1      	uxth	r1, r4
 8021342:	8814      	ldrh	r4, [r2, #0]
 8021344:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8021348:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 802134c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8021350:	9406      	str	r4, [sp, #24]
 8021352:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021354:	f8bd 4042 	ldrh.w	r4, [sp, #66]	; 0x42
 8021358:	9305      	str	r3, [sp, #20]
 802135a:	9204      	str	r2, [sp, #16]
 802135c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8021360:	464a      	mov	r2, r9
 8021362:	4651      	mov	r1, sl
 8021364:	e9cd 6707 	strd	r6, r7, [sp, #28]
 8021368:	9503      	str	r5, [sp, #12]
 802136a:	9400      	str	r4, [sp, #0]
 802136c:	f7fb ff46 	bl	801d1fc <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8021370:	b013      	add	sp, #76	; 0x4c
 8021372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021376:	4608      	mov	r0, r1
 8021378:	4798      	blx	r3
 802137a:	4603      	mov	r3, r0
 802137c:	e7d8      	b.n	8021330 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1cc>
 802137e:	4b08      	ldr	r3, [pc, #32]	; (80213a0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 8021380:	6818      	ldr	r0, [r3, #0]
 8021382:	6802      	ldr	r2, [r0, #0]
 8021384:	e733      	b.n	80211ee <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 8021386:	4b0b      	ldr	r3, [pc, #44]	; (80213b4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x250>)
 8021388:	4a0b      	ldr	r2, [pc, #44]	; (80213b8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x254>)
 802138a:	217c      	movs	r1, #124	; 0x7c
 802138c:	480b      	ldr	r0, [pc, #44]	; (80213bc <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 802138e:	f006 fe6f 	bl	8028070 <__assert_func>
 8021392:	4b0b      	ldr	r3, [pc, #44]	; (80213c0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x25c>)
 8021394:	4a0b      	ldr	r2, [pc, #44]	; (80213c4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x260>)
 8021396:	f240 31c2 	movw	r1, #962	; 0x3c2
 802139a:	480b      	ldr	r0, [pc, #44]	; (80213c8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x264>)
 802139c:	f006 fe68 	bl	8028070 <__assert_func>
 80213a0:	20197958 	.word	0x20197958
 80213a4:	08001edd 	.word	0x08001edd
 80213a8:	08016725 	.word	0x08016725
 80213ac:	20197952 	.word	0x20197952
 80213b0:	20197b88 	.word	0x20197b88
 80213b4:	0802aea4 	.word	0x0802aea4
 80213b8:	0802b6ac 	.word	0x0802b6ac
 80213bc:	0802aecc 	.word	0x0802aecc
 80213c0:	0802afbc 	.word	0x0802afbc
 80213c4:	0802bcdc 	.word	0x0802bcdc
 80213c8:	0802af48 	.word	0x0802af48

080213cc <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h>:
 80213cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213d0:	4691      	mov	r9, r2
 80213d2:	8812      	ldrh	r2, [r2, #0]
 80213d4:	b093      	sub	sp, #76	; 0x4c
 80213d6:	2a01      	cmp	r2, #1
 80213d8:	f89d 4074 	ldrb.w	r4, [sp, #116]	; 0x74
 80213dc:	f040 8129 	bne.w	8021632 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x266>
 80213e0:	b914      	cbnz	r4, 80213e8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1c>
 80213e2:	b013      	add	sp, #76	; 0x4c
 80213e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80213e8:	461d      	mov	r5, r3
 80213ea:	468a      	mov	sl, r1
 80213ec:	6818      	ldr	r0, [r3, #0]
 80213ee:	6859      	ldr	r1, [r3, #4]
 80213f0:	ab0e      	add	r3, sp, #56	; 0x38
 80213f2:	c303      	stmia	r3!, {r0, r1}
 80213f4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80213f6:	6818      	ldr	r0, [r3, #0]
 80213f8:	6859      	ldr	r1, [r3, #4]
 80213fa:	ab10      	add	r3, sp, #64	; 0x40
 80213fc:	c303      	stmia	r3!, {r0, r1}
 80213fe:	a80e      	add	r0, sp, #56	; 0x38
 8021400:	f7f6 f96e 	bl	80176e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021404:	4629      	mov	r1, r5
 8021406:	a810      	add	r0, sp, #64	; 0x40
 8021408:	f7f6 f992 	bl	8017730 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802140c:	f9bd 5040 	ldrsh.w	r5, [sp, #64]	; 0x40
 8021410:	f9bd 6042 	ldrsh.w	r6, [sp, #66]	; 0x42
 8021414:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8021418:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 802141c:	488b      	ldr	r0, [pc, #556]	; (802164c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x280>)
 802141e:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8021422:	442a      	add	r2, r5
 8021424:	4433      	add	r3, r6
 8021426:	6800      	ldr	r0, [r0, #0]
 8021428:	fb11 5106 	smlabb	r1, r1, r6, r5
 802142c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8021430:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8021434:	6802      	ldr	r2, [r0, #0]
 8021436:	4e86      	ldr	r6, [pc, #536]	; (8021650 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x284>)
 8021438:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 802143c:	448a      	add	sl, r1
 802143e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8021442:	42b3      	cmp	r3, r6
 8021444:	910b      	str	r1, [sp, #44]	; 0x2c
 8021446:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 802144a:	f040 80c8 	bne.w	80215de <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x212>
 802144e:	6841      	ldr	r1, [r0, #4]
 8021450:	4e80      	ldr	r6, [pc, #512]	; (8021654 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x288>)
 8021452:	680b      	ldr	r3, [r1, #0]
 8021454:	699b      	ldr	r3, [r3, #24]
 8021456:	42b3      	cmp	r3, r6
 8021458:	f040 80e4 	bne.w	8021624 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x258>
 802145c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 802145e:	4798      	blx	r3
 8021460:	4b7d      	ldr	r3, [pc, #500]	; (8021658 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 8021462:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8021466:	881b      	ldrh	r3, [r3, #0]
 8021468:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 802146c:	2cff      	cmp	r4, #255	; 0xff
 802146e:	fb03 1202 	mla	r2, r3, r2, r1
 8021472:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021476:	d06f      	beq.n	8021558 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x18c>
 8021478:	43e2      	mvns	r2, r4
 802147a:	fb05 f503 	mul.w	r5, r5, r3
 802147e:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 8021482:	4288      	cmp	r0, r1
 8021484:	910c      	str	r1, [sp, #48]	; 0x30
 8021486:	b2d2      	uxtb	r2, r2
 8021488:	d25e      	bcs.n	8021548 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x17c>
 802148a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802148c:	fa1f f884 	uxth.w	r8, r4
 8021490:	0049      	lsls	r1, r1, #1
 8021492:	b292      	uxth	r2, r2
 8021494:	910d      	str	r1, [sp, #52]	; 0x34
 8021496:	990d      	ldr	r1, [sp, #52]	; 0x34
 8021498:	eb00 0b01 	add.w	fp, r0, r1
 802149c:	4583      	cmp	fp, r0
 802149e:	d948      	bls.n	8021532 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x166>
 80214a0:	4684      	mov	ip, r0
 80214a2:	f10a 3eff 	add.w	lr, sl, #4294967295
 80214a6:	2103      	movs	r1, #3
 80214a8:	2404      	movs	r4, #4
 80214aa:	f81e 6f01 	ldrb.w	r6, [lr, #1]!
 80214ae:	f8bc 3000 	ldrh.w	r3, [ip]
 80214b2:	fb11 4606 	smlabb	r6, r1, r6, r4
 80214b6:	eb09 0106 	add.w	r1, r9, r6
 80214ba:	788d      	ldrb	r5, [r1, #2]
 80214bc:	784f      	ldrb	r7, [r1, #1]
 80214be:	00dc      	lsls	r4, r3, #3
 80214c0:	b2e4      	uxtb	r4, r4
 80214c2:	fb14 f402 	smulbb	r4, r4, r2
 80214c6:	fb15 f508 	smulbb	r5, r5, r8
 80214ca:	fb17 f708 	smulbb	r7, r7, r8
 80214ce:	f819 6006 	ldrb.w	r6, [r9, r6]
 80214d2:	1219      	asrs	r1, r3, #8
 80214d4:	10db      	asrs	r3, r3, #3
 80214d6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80214da:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80214de:	fb06 4608 	mla	r6, r6, r8, r4
 80214e2:	fb01 5102 	mla	r1, r1, r2, r5
 80214e6:	fb03 7302 	mla	r3, r3, r2, r7
 80214ea:	b2b6      	uxth	r6, r6
 80214ec:	b29b      	uxth	r3, r3
 80214ee:	b28d      	uxth	r5, r1
 80214f0:	1c5c      	adds	r4, r3, #1
 80214f2:	1c69      	adds	r1, r5, #1
 80214f4:	1c77      	adds	r7, r6, #1
 80214f6:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80214fa:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 80214fe:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8021502:	f401 4378 	and.w	r3, r1, #63488	; 0xf800
 8021506:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 802150a:	0961      	lsrs	r1, r4, #5
 802150c:	4333      	orrs	r3, r6
 802150e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021512:	430b      	orrs	r3, r1
 8021514:	f82c 3b02 	strh.w	r3, [ip], #2
 8021518:	45e3      	cmp	fp, ip
 802151a:	d8c4      	bhi.n	80214a6 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0xda>
 802151c:	43c3      	mvns	r3, r0
 802151e:	449b      	add	fp, r3
 8021520:	4b4d      	ldr	r3, [pc, #308]	; (8021658 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 8021522:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 8021526:	f10b 0b01 	add.w	fp, fp, #1
 802152a:	881b      	ldrh	r3, [r3, #0]
 802152c:	eb00 004b 	add.w	r0, r0, fp, lsl #1
 8021530:	44da      	add	sl, fp
 8021532:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021534:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8021538:	1b5c      	subs	r4, r3, r5
 802153a:	1b49      	subs	r1, r1, r5
 802153c:	448a      	add	sl, r1
 802153e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021540:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8021544:	4281      	cmp	r1, r0
 8021546:	d8a6      	bhi.n	8021496 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0xca>
 8021548:	4b40      	ldr	r3, [pc, #256]	; (802164c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x280>)
 802154a:	6818      	ldr	r0, [r3, #0]
 802154c:	6803      	ldr	r3, [r0, #0]
 802154e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021550:	4798      	blx	r3
 8021552:	b013      	add	sp, #76	; 0x4c
 8021554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021558:	fb05 f503 	mul.w	r5, r5, r3
 802155c:	eb00 0e45 	add.w	lr, r0, r5, lsl #1
 8021560:	4570      	cmp	r0, lr
 8021562:	d2f1      	bcs.n	8021548 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x17c>
 8021564:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021566:	f04f 0c03 	mov.w	ip, #3
 802156a:	2704      	movs	r7, #4
 802156c:	4693      	mov	fp, r2
 802156e:	0051      	lsls	r1, r2, #1
 8021570:	4e3a      	ldr	r6, [pc, #232]	; (802165c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x290>)
 8021572:	910b      	str	r1, [sp, #44]	; 0x2c
 8021574:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021576:	eb00 0802 	add.w	r8, r0, r2
 802157a:	4580      	cmp	r8, r0
 802157c:	d923      	bls.n	80215c6 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1fa>
 802157e:	4604      	mov	r4, r0
 8021580:	f10a 35ff 	add.w	r5, sl, #4294967295
 8021584:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8021588:	fb1c 7202 	smlabb	r2, ip, r2, r7
 802158c:	eb09 0302 	add.w	r3, r9, r2
 8021590:	7859      	ldrb	r1, [r3, #1]
 8021592:	789b      	ldrb	r3, [r3, #2]
 8021594:	00c9      	lsls	r1, r1, #3
 8021596:	f819 2002 	ldrb.w	r2, [r9, r2]
 802159a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802159e:	ea06 2303 	and.w	r3, r6, r3, lsl #8
 80215a2:	430b      	orrs	r3, r1
 80215a4:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 80215a8:	f824 3b02 	strh.w	r3, [r4], #2
 80215ac:	45a0      	cmp	r8, r4
 80215ae:	d8e9      	bhi.n	8021584 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1b8>
 80215b0:	43c3      	mvns	r3, r0
 80215b2:	4498      	add	r8, r3
 80215b4:	4b28      	ldr	r3, [pc, #160]	; (8021658 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 80215b6:	ea4f 0858 	mov.w	r8, r8, lsr #1
 80215ba:	f108 0801 	add.w	r8, r8, #1
 80215be:	881b      	ldrh	r3, [r3, #0]
 80215c0:	eb00 0048 	add.w	r0, r0, r8, lsl #1
 80215c4:	44c2      	add	sl, r8
 80215c6:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 80215ca:	eba3 010b 	sub.w	r1, r3, fp
 80215ce:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80215d2:	eba2 020b 	sub.w	r2, r2, fp
 80215d6:	4586      	cmp	lr, r0
 80215d8:	4492      	add	sl, r2
 80215da:	d8cb      	bhi.n	8021574 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1a8>
 80215dc:	e7b4      	b.n	8021548 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x17c>
 80215de:	4798      	blx	r3
 80215e0:	2801      	cmp	r0, #1
 80215e2:	d122      	bne.n	802162a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x25e>
 80215e4:	4b1e      	ldr	r3, [pc, #120]	; (8021660 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x294>)
 80215e6:	6818      	ldr	r0, [r3, #0]
 80215e8:	b350      	cbz	r0, 8021640 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x274>
 80215ea:	2600      	movs	r6, #0
 80215ec:	270b      	movs	r7, #11
 80215ee:	4b1a      	ldr	r3, [pc, #104]	; (8021658 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 80215f0:	b2aa      	uxth	r2, r5
 80215f2:	881d      	ldrh	r5, [r3, #0]
 80215f4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80215f8:	9404      	str	r4, [sp, #16]
 80215fa:	9506      	str	r5, [sp, #24]
 80215fc:	f8bd 4042 	ldrh.w	r4, [sp, #66]	; 0x42
 8021600:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8021604:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8021608:	4651      	mov	r1, sl
 802160a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 802160e:	464a      	mov	r2, r9
 8021610:	9608      	str	r6, [sp, #32]
 8021612:	9605      	str	r6, [sp, #20]
 8021614:	9707      	str	r7, [sp, #28]
 8021616:	9503      	str	r5, [sp, #12]
 8021618:	9400      	str	r4, [sp, #0]
 802161a:	f7fb fdef 	bl	801d1fc <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 802161e:	b013      	add	sp, #76	; 0x4c
 8021620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021624:	4608      	mov	r0, r1
 8021626:	4798      	blx	r3
 8021628:	e7da      	b.n	80215e0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x214>
 802162a:	4b08      	ldr	r3, [pc, #32]	; (802164c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x280>)
 802162c:	6818      	ldr	r0, [r3, #0]
 802162e:	6802      	ldr	r2, [r0, #0]
 8021630:	e714      	b.n	802145c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x90>
 8021632:	4b0c      	ldr	r3, [pc, #48]	; (8021664 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x298>)
 8021634:	4a0c      	ldr	r2, [pc, #48]	; (8021668 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x29c>)
 8021636:	f240 411b 	movw	r1, #1051	; 0x41b
 802163a:	480c      	ldr	r0, [pc, #48]	; (802166c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2a0>)
 802163c:	f006 fd18 	bl	8028070 <__assert_func>
 8021640:	4b0b      	ldr	r3, [pc, #44]	; (8021670 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2a4>)
 8021642:	4a0c      	ldr	r2, [pc, #48]	; (8021674 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2a8>)
 8021644:	217c      	movs	r1, #124	; 0x7c
 8021646:	480c      	ldr	r0, [pc, #48]	; (8021678 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2ac>)
 8021648:	f006 fd12 	bl	8028070 <__assert_func>
 802164c:	20197958 	.word	0x20197958
 8021650:	08001edd 	.word	0x08001edd
 8021654:	08016725 	.word	0x08016725
 8021658:	20197952 	.word	0x20197952
 802165c:	fffff800 	.word	0xfffff800
 8021660:	20197b88 	.word	0x20197b88
 8021664:	0802af6c 	.word	0x0802af6c
 8021668:	0802bb44 	.word	0x0802bb44
 802166c:	0802af48 	.word	0x0802af48
 8021670:	0802aea4 	.word	0x0802aea4
 8021674:	0802b6ac 	.word	0x0802b6ac
 8021678:	0802aecc 	.word	0x0802aecc

0802167c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h>:
 802167c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021680:	4690      	mov	r8, r2
 8021682:	8812      	ldrh	r2, [r2, #0]
 8021684:	b093      	sub	sp, #76	; 0x4c
 8021686:	461c      	mov	r4, r3
 8021688:	f89d a074 	ldrb.w	sl, [sp, #116]	; 0x74
 802168c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802168e:	2a00      	cmp	r2, #0
 8021690:	f040 80fb 	bne.w	802188a <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x20e>
 8021694:	4689      	mov	r9, r1
 8021696:	6820      	ldr	r0, [r4, #0]
 8021698:	6861      	ldr	r1, [r4, #4]
 802169a:	aa0e      	add	r2, sp, #56	; 0x38
 802169c:	c203      	stmia	r2!, {r0, r1}
 802169e:	6818      	ldr	r0, [r3, #0]
 80216a0:	6859      	ldr	r1, [r3, #4]
 80216a2:	aa10      	add	r2, sp, #64	; 0x40
 80216a4:	c203      	stmia	r2!, {r0, r1}
 80216a6:	a80e      	add	r0, sp, #56	; 0x38
 80216a8:	f7f6 f81a 	bl	80176e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80216ac:	4621      	mov	r1, r4
 80216ae:	a810      	add	r0, sp, #64	; 0x40
 80216b0:	f7f6 f83e 	bl	8017730 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80216b4:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 80216b8:	f9bd 5042 	ldrsh.w	r5, [sp, #66]	; 0x42
 80216bc:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 80216c0:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80216c4:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80216c8:	4873      	ldr	r0, [pc, #460]	; (8021898 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x21c>)
 80216ca:	fb11 4105 	smlabb	r1, r1, r5, r4
 80216ce:	4422      	add	r2, r4
 80216d0:	442b      	add	r3, r5
 80216d2:	6800      	ldr	r0, [r0, #0]
 80216d4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80216d8:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80216dc:	6802      	ldr	r2, [r0, #0]
 80216de:	4489      	add	r9, r1
 80216e0:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 80216e4:	4c6d      	ldr	r4, [pc, #436]	; (802189c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x220>)
 80216e6:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 80216ea:	910a      	str	r1, [sp, #40]	; 0x28
 80216ec:	f9bd 1046 	ldrsh.w	r1, [sp, #70]	; 0x46
 80216f0:	42a3      	cmp	r3, r4
 80216f2:	910c      	str	r1, [sp, #48]	; 0x30
 80216f4:	f040 8096 	bne.w	8021824 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1a8>
 80216f8:	6841      	ldr	r1, [r0, #4]
 80216fa:	4c69      	ldr	r4, [pc, #420]	; (80218a0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x224>)
 80216fc:	680b      	ldr	r3, [r1, #0]
 80216fe:	699b      	ldr	r3, [r3, #24]
 8021700:	42a3      	cmp	r3, r4
 8021702:	f040 80b4 	bne.w	802186e <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1f2>
 8021706:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8021708:	4798      	blx	r3
 802170a:	4b66      	ldr	r3, [pc, #408]	; (80218a4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x228>)
 802170c:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8021710:	881b      	ldrh	r3, [r3, #0]
 8021712:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8021716:	fb01 2303 	mla	r3, r1, r3, r2
 802171a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802171e:	4418      	add	r0, r3
 8021720:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021722:	2b00      	cmp	r3, #0
 8021724:	dd76      	ble.n	8021814 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x198>
 8021726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021728:	2b00      	cmp	r3, #0
 802172a:	dd73      	ble.n	8021814 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x198>
 802172c:	2200      	movs	r2, #0
 802172e:	2104      	movs	r1, #4
 8021730:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021734:	920b      	str	r2, [sp, #44]	; 0x2c
 8021736:	930d      	str	r3, [sp, #52]	; 0x34
 8021738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802173a:	464e      	mov	r6, r9
 802173c:	1cc5      	adds	r5, r0, #3
 802173e:	eb09 0c03 	add.w	ip, r9, r3
 8021742:	e039      	b.n	80217b8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x13c>
 8021744:	fb0a f303 	mul.w	r3, sl, r3
 8021748:	1c5a      	adds	r2, r3, #1
 802174a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802174e:	121b      	asrs	r3, r3, #8
 8021750:	43df      	mvns	r7, r3
 8021752:	b29b      	uxth	r3, r3
 8021754:	fb1e f203 	smulbb	r2, lr, r3
 8021758:	f815 ec03 	ldrb.w	lr, [r5, #-3]
 802175c:	b2ff      	uxtb	r7, r7
 802175e:	fb0e 2e07 	mla	lr, lr, r7, r2
 8021762:	fa1f fe8e 	uxth.w	lr, lr
 8021766:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 802176a:	f10e 0b01 	add.w	fp, lr, #1
 802176e:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8021772:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021776:	fb12 fb07 	smulbb	fp, r2, r7
 802177a:	f805 ec03 	strb.w	lr, [r5, #-3]
 802177e:	7862      	ldrb	r2, [r4, #1]
 8021780:	f815 ec01 	ldrb.w	lr, [r5, #-1]
 8021784:	fb02 b203 	mla	r2, r2, r3, fp
 8021788:	b292      	uxth	r2, r2
 802178a:	f102 0b01 	add.w	fp, r2, #1
 802178e:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8021792:	1212      	asrs	r2, r2, #8
 8021794:	fb1e f707 	smulbb	r7, lr, r7
 8021798:	f805 2c02 	strb.w	r2, [r5, #-2]
 802179c:	78a2      	ldrb	r2, [r4, #2]
 802179e:	fb02 7303 	mla	r3, r2, r3, r7
 80217a2:	b29b      	uxth	r3, r3
 80217a4:	1c5a      	adds	r2, r3, #1
 80217a6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80217aa:	121b      	asrs	r3, r3, #8
 80217ac:	f805 3c01 	strb.w	r3, [r5, #-1]
 80217b0:	45b4      	cmp	ip, r6
 80217b2:	f105 0503 	add.w	r5, r5, #3
 80217b6:	d01b      	beq.n	80217f0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x174>
 80217b8:	f816 2b01 	ldrb.w	r2, [r6], #1
 80217bc:	fb11 1202 	smlabb	r2, r1, r2, r1
 80217c0:	eb08 0402 	add.w	r4, r8, r2
 80217c4:	78e3      	ldrb	r3, [r4, #3]
 80217c6:	2b00      	cmp	r3, #0
 80217c8:	d0f2      	beq.n	80217b0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x134>
 80217ca:	2bff      	cmp	r3, #255	; 0xff
 80217cc:	f818 e002 	ldrb.w	lr, [r8, r2]
 80217d0:	d1b8      	bne.n	8021744 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xc8>
 80217d2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80217d6:	d1b5      	bne.n	8021744 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xc8>
 80217d8:	f805 ec03 	strb.w	lr, [r5, #-3]
 80217dc:	7863      	ldrb	r3, [r4, #1]
 80217de:	45b4      	cmp	ip, r6
 80217e0:	f805 3c02 	strb.w	r3, [r5, #-2]
 80217e4:	78a3      	ldrb	r3, [r4, #2]
 80217e6:	f105 0503 	add.w	r5, r5, #3
 80217ea:	f805 3c04 	strb.w	r3, [r5, #-4]
 80217ee:	d1e3      	bne.n	80217b8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x13c>
 80217f0:	4b2c      	ldr	r3, [pc, #176]	; (80218a4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x228>)
 80217f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80217f4:	881b      	ldrh	r3, [r3, #0]
 80217f6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80217f8:	1a9b      	subs	r3, r3, r2
 80217fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80217fe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021800:	442b      	add	r3, r5
 8021802:	4418      	add	r0, r3
 8021804:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021806:	3401      	adds	r4, #1
 8021808:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 802180c:	42a3      	cmp	r3, r4
 802180e:	940b      	str	r4, [sp, #44]	; 0x2c
 8021810:	4491      	add	r9, r2
 8021812:	d191      	bne.n	8021738 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xbc>
 8021814:	4b20      	ldr	r3, [pc, #128]	; (8021898 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x21c>)
 8021816:	6818      	ldr	r0, [r3, #0]
 8021818:	6803      	ldr	r3, [r0, #0]
 802181a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802181c:	4798      	blx	r3
 802181e:	b013      	add	sp, #76	; 0x4c
 8021820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021824:	4798      	blx	r3
 8021826:	4602      	mov	r2, r0
 8021828:	2a01      	cmp	r2, #1
 802182a:	d124      	bne.n	8021876 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1fa>
 802182c:	4b1e      	ldr	r3, [pc, #120]	; (80218a8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x22c>)
 802182e:	6818      	ldr	r0, [r3, #0]
 8021830:	b328      	cbz	r0, 802187e <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x202>
 8021832:	260b      	movs	r6, #11
 8021834:	4b1b      	ldr	r3, [pc, #108]	; (80218a4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x228>)
 8021836:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 802183a:	881f      	ldrh	r7, [r3, #0]
 802183c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8021840:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8021844:	f8bd 4042 	ldrh.w	r4, [sp, #66]	; 0x42
 8021848:	e9cd 3101 	strd	r3, r1, [sp, #4]
 802184c:	9208      	str	r2, [sp, #32]
 802184e:	9205      	str	r2, [sp, #20]
 8021850:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8021854:	f8cd a010 	str.w	sl, [sp, #16]
 8021858:	4642      	mov	r2, r8
 802185a:	4649      	mov	r1, r9
 802185c:	e9cd 7606 	strd	r7, r6, [sp, #24]
 8021860:	9503      	str	r5, [sp, #12]
 8021862:	9400      	str	r4, [sp, #0]
 8021864:	f7fb fcca 	bl	801d1fc <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8021868:	b013      	add	sp, #76	; 0x4c
 802186a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802186e:	4608      	mov	r0, r1
 8021870:	4798      	blx	r3
 8021872:	4602      	mov	r2, r0
 8021874:	e7d8      	b.n	8021828 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1ac>
 8021876:	4b08      	ldr	r3, [pc, #32]	; (8021898 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x21c>)
 8021878:	6818      	ldr	r0, [r3, #0]
 802187a:	6802      	ldr	r2, [r0, #0]
 802187c:	e743      	b.n	8021706 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 802187e:	4b0b      	ldr	r3, [pc, #44]	; (80218ac <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x230>)
 8021880:	4a0b      	ldr	r2, [pc, #44]	; (80218b0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8021882:	217c      	movs	r1, #124	; 0x7c
 8021884:	480b      	ldr	r0, [pc, #44]	; (80218b4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x238>)
 8021886:	f006 fbf3 	bl	8028070 <__assert_func>
 802188a:	4b0b      	ldr	r3, [pc, #44]	; (80218b8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 802188c:	4a0b      	ldr	r2, [pc, #44]	; (80218bc <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 802188e:	f240 417d 	movw	r1, #1149	; 0x47d
 8021892:	480b      	ldr	r0, [pc, #44]	; (80218c0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x244>)
 8021894:	f006 fbec 	bl	8028070 <__assert_func>
 8021898:	20197958 	.word	0x20197958
 802189c:	08001edd 	.word	0x08001edd
 80218a0:	08016725 	.word	0x08016725
 80218a4:	20197952 	.word	0x20197952
 80218a8:	20197b88 	.word	0x20197b88
 80218ac:	0802aea4 	.word	0x0802aea4
 80218b0:	0802b6ac 	.word	0x0802b6ac
 80218b4:	0802aecc 	.word	0x0802aecc
 80218b8:	0802afbc 	.word	0x0802afbc
 80218bc:	0802bd68 	.word	0x0802bd68
 80218c0:	0802af48 	.word	0x0802af48

080218c4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h>:
 80218c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80218c8:	4617      	mov	r7, r2
 80218ca:	b095      	sub	sp, #84	; 0x54
 80218cc:	8812      	ldrh	r2, [r2, #0]
 80218ce:	4688      	mov	r8, r1
 80218d0:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
 80218d4:	2a01      	cmp	r2, #1
 80218d6:	461c      	mov	r4, r3
 80218d8:	910d      	str	r1, [sp, #52]	; 0x34
 80218da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80218dc:	f040 8105 	bne.w	8021aea <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x226>
 80218e0:	6820      	ldr	r0, [r4, #0]
 80218e2:	6861      	ldr	r1, [r4, #4]
 80218e4:	aa10      	add	r2, sp, #64	; 0x40
 80218e6:	c203      	stmia	r2!, {r0, r1}
 80218e8:	6818      	ldr	r0, [r3, #0]
 80218ea:	6859      	ldr	r1, [r3, #4]
 80218ec:	aa12      	add	r2, sp, #72	; 0x48
 80218ee:	c203      	stmia	r2!, {r0, r1}
 80218f0:	a810      	add	r0, sp, #64	; 0x40
 80218f2:	f7f5 fef5 	bl	80176e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80218f6:	4621      	mov	r1, r4
 80218f8:	a812      	add	r0, sp, #72	; 0x48
 80218fa:	f7f5 ff19 	bl	8017730 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80218fe:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
 8021902:	f9bd 504a 	ldrsh.w	r5, [sp, #74]	; 0x4a
 8021906:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 802190a:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 802190e:	487a      	ldr	r0, [pc, #488]	; (8021af8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8021910:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8021914:	4422      	add	r2, r4
 8021916:	442b      	add	r3, r5
 8021918:	6800      	ldr	r0, [r0, #0]
 802191a:	fb11 4105 	smlabb	r1, r1, r5, r4
 802191e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8021922:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 8021926:	6802      	ldr	r2, [r0, #0]
 8021928:	4c74      	ldr	r4, [pc, #464]	; (8021afc <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x238>)
 802192a:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 802192e:	4488      	add	r8, r1
 8021930:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 8021934:	42a3      	cmp	r3, r4
 8021936:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 802193a:	910c      	str	r1, [sp, #48]	; 0x30
 802193c:	f040 809f 	bne.w	8021a7e <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x1ba>
 8021940:	6841      	ldr	r1, [r0, #4]
 8021942:	4c6f      	ldr	r4, [pc, #444]	; (8021b00 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 8021944:	680b      	ldr	r3, [r1, #0]
 8021946:	699b      	ldr	r3, [r3, #24]
 8021948:	42a3      	cmp	r3, r4
 802194a:	f040 80c0 	bne.w	8021ace <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x20a>
 802194e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8021950:	4798      	blx	r3
 8021952:	4a6c      	ldr	r2, [pc, #432]	; (8021b04 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8021954:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 8021958:	8814      	ldrh	r4, [r2, #0]
 802195a:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 802195e:	fb04 2303 	mla	r3, r4, r3, r2
 8021962:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021966:	4418      	add	r0, r3
 8021968:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802196a:	2b00      	cmp	r3, #0
 802196c:	dd67      	ble.n	8021a3e <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x17a>
 802196e:	2300      	movs	r3, #0
 8021970:	f04f 0903 	mov.w	r9, #3
 8021974:	2104      	movs	r1, #4
 8021976:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021978:	930b      	str	r3, [sp, #44]	; 0x2c
 802197a:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
 802197e:	930e      	str	r3, [sp, #56]	; 0x38
 8021980:	f1c5 02ff 	rsb	r2, r5, #255	; 0xff
 8021984:	444b      	add	r3, r9
 8021986:	930f      	str	r3, [sp, #60]	; 0x3c
 8021988:	b292      	uxth	r2, r2
 802198a:	fa1f fc85 	uxth.w	ip, r5
 802198e:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8021992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021994:	2b00      	cmp	r3, #0
 8021996:	dd43      	ble.n	8021a20 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x15c>
 8021998:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802199a:	2bff      	cmp	r3, #255	; 0xff
 802199c:	d057      	beq.n	8021a4e <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x18a>
 802199e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80219a0:	1cc5      	adds	r5, r0, #3
 80219a2:	f108 3eff 	add.w	lr, r8, #4294967295
 80219a6:	eb00 0a03 	add.w	sl, r0, r3
 80219aa:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 80219ae:	f815 6c03 	ldrb.w	r6, [r5, #-3]
 80219b2:	fb19 1303 	smlabb	r3, r9, r3, r1
 80219b6:	fb16 f402 	smulbb	r4, r6, r2
 80219ba:	5cfe      	ldrb	r6, [r7, r3]
 80219bc:	443b      	add	r3, r7
 80219be:	fb06 460c 	mla	r6, r6, ip, r4
 80219c2:	b2b6      	uxth	r6, r6
 80219c4:	f815 4c02 	ldrb.w	r4, [r5, #-2]
 80219c8:	f106 0b01 	add.w	fp, r6, #1
 80219cc:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 80219d0:	1236      	asrs	r6, r6, #8
 80219d2:	fb14 fb02 	smulbb	fp, r4, r2
 80219d6:	f805 6c03 	strb.w	r6, [r5, #-3]
 80219da:	785c      	ldrb	r4, [r3, #1]
 80219dc:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 80219e0:	fb04 b40c 	mla	r4, r4, ip, fp
 80219e4:	b2a4      	uxth	r4, r4
 80219e6:	f104 0b01 	add.w	fp, r4, #1
 80219ea:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 80219ee:	1224      	asrs	r4, r4, #8
 80219f0:	fb16 f602 	smulbb	r6, r6, r2
 80219f4:	f805 4c02 	strb.w	r4, [r5, #-2]
 80219f8:	789b      	ldrb	r3, [r3, #2]
 80219fa:	3503      	adds	r5, #3
 80219fc:	fb03 630c 	mla	r3, r3, ip, r6
 8021a00:	b29b      	uxth	r3, r3
 8021a02:	1c5c      	adds	r4, r3, #1
 8021a04:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8021a08:	121b      	asrs	r3, r3, #8
 8021a0a:	f805 3c04 	strb.w	r3, [r5, #-4]
 8021a0e:	45aa      	cmp	sl, r5
 8021a10:	d1cb      	bne.n	80219aa <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0xe6>
 8021a12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021a14:	4418      	add	r0, r3
 8021a16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021a18:	4498      	add	r8, r3
 8021a1a:	4b3a      	ldr	r3, [pc, #232]	; (8021b04 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8021a1c:	881c      	ldrh	r4, [r3, #0]
 8021a1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021a20:	f9bd 5044 	ldrsh.w	r5, [sp, #68]	; 0x44
 8021a24:	eba4 0e03 	sub.w	lr, r4, r3
 8021a28:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8021a2a:	1aed      	subs	r5, r5, r3
 8021a2c:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
 8021a30:	4418      	add	r0, r3
 8021a32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021a34:	3601      	adds	r6, #1
 8021a36:	42b3      	cmp	r3, r6
 8021a38:	960b      	str	r6, [sp, #44]	; 0x2c
 8021a3a:	44a8      	add	r8, r5
 8021a3c:	d1a9      	bne.n	8021992 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0xce>
 8021a3e:	4b2e      	ldr	r3, [pc, #184]	; (8021af8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8021a40:	6818      	ldr	r0, [r3, #0]
 8021a42:	6803      	ldr	r3, [r0, #0]
 8021a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021a46:	4798      	blx	r3
 8021a48:	b015      	add	sp, #84	; 0x54
 8021a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021a50:	1cc4      	adds	r4, r0, #3
 8021a52:	f108 35ff 	add.w	r5, r8, #4294967295
 8021a56:	eb00 0e03 	add.w	lr, r0, r3
 8021a5a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8021a5e:	3403      	adds	r4, #3
 8021a60:	fb19 1303 	smlabb	r3, r9, r3, r1
 8021a64:	5cfe      	ldrb	r6, [r7, r3]
 8021a66:	443b      	add	r3, r7
 8021a68:	f804 6c06 	strb.w	r6, [r4, #-6]
 8021a6c:	785e      	ldrb	r6, [r3, #1]
 8021a6e:	f804 6c05 	strb.w	r6, [r4, #-5]
 8021a72:	789b      	ldrb	r3, [r3, #2]
 8021a74:	f804 3c04 	strb.w	r3, [r4, #-4]
 8021a78:	45a6      	cmp	lr, r4
 8021a7a:	d1ee      	bne.n	8021a5a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x196>
 8021a7c:	e7c9      	b.n	8021a12 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x14e>
 8021a7e:	4798      	blx	r3
 8021a80:	4603      	mov	r3, r0
 8021a82:	2b01      	cmp	r3, #1
 8021a84:	d127      	bne.n	8021ad6 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x212>
 8021a86:	4a20      	ldr	r2, [pc, #128]	; (8021b08 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x244>)
 8021a88:	6810      	ldr	r0, [r2, #0]
 8021a8a:	b340      	cbz	r0, 8021ade <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x21a>
 8021a8c:	f04f 0c0b 	mov.w	ip, #11
 8021a90:	2600      	movs	r6, #0
 8021a92:	4a1c      	ldr	r2, [pc, #112]	; (8021b04 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8021a94:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8021a98:	8814      	ldrh	r4, [r2, #0]
 8021a9a:	fa1f f28a 	uxth.w	r2, sl
 8021a9e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8021aa2:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 8021aa6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021aa8:	9406      	str	r4, [sp, #24]
 8021aaa:	f8bd 404a 	ldrh.w	r4, [sp, #74]	; 0x4a
 8021aae:	9308      	str	r3, [sp, #32]
 8021ab0:	9204      	str	r2, [sp, #16]
 8021ab2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8021ab6:	463a      	mov	r2, r7
 8021ab8:	4641      	mov	r1, r8
 8021aba:	f8cd c01c 	str.w	ip, [sp, #28]
 8021abe:	9605      	str	r6, [sp, #20]
 8021ac0:	9503      	str	r5, [sp, #12]
 8021ac2:	9400      	str	r4, [sp, #0]
 8021ac4:	f7fb fb9a 	bl	801d1fc <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8021ac8:	b015      	add	sp, #84	; 0x54
 8021aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ace:	4608      	mov	r0, r1
 8021ad0:	4798      	blx	r3
 8021ad2:	4603      	mov	r3, r0
 8021ad4:	e7d5      	b.n	8021a82 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x1be>
 8021ad6:	4b08      	ldr	r3, [pc, #32]	; (8021af8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8021ad8:	6818      	ldr	r0, [r3, #0]
 8021ada:	6802      	ldr	r2, [r0, #0]
 8021adc:	e737      	b.n	802194e <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 8021ade:	4b0b      	ldr	r3, [pc, #44]	; (8021b0c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 8021ae0:	4a0b      	ldr	r2, [pc, #44]	; (8021b10 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 8021ae2:	217c      	movs	r1, #124	; 0x7c
 8021ae4:	480b      	ldr	r0, [pc, #44]	; (8021b14 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x250>)
 8021ae6:	f006 fac3 	bl	8028070 <__assert_func>
 8021aea:	4b0b      	ldr	r3, [pc, #44]	; (8021b18 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x254>)
 8021aec:	4a0b      	ldr	r2, [pc, #44]	; (8021b1c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8021aee:	f240 41c7 	movw	r1, #1223	; 0x4c7
 8021af2:	480b      	ldr	r0, [pc, #44]	; (8021b20 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x25c>)
 8021af4:	f006 fabc 	bl	8028070 <__assert_func>
 8021af8:	20197958 	.word	0x20197958
 8021afc:	08001edd 	.word	0x08001edd
 8021b00:	08016725 	.word	0x08016725
 8021b04:	20197952 	.word	0x20197952
 8021b08:	20197b88 	.word	0x20197b88
 8021b0c:	0802aea4 	.word	0x0802aea4
 8021b10:	0802b6ac 	.word	0x0802b6ac
 8021b14:	0802aecc 	.word	0x0802aecc
 8021b18:	0802af6c 	.word	0x0802af6c
 8021b1c:	0802bbcc 	.word	0x0802bbcc
 8021b20:	0802af48 	.word	0x0802af48

08021b24 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h>:
 8021b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b28:	4690      	mov	r8, r2
 8021b2a:	8812      	ldrh	r2, [r2, #0]
 8021b2c:	b095      	sub	sp, #84	; 0x54
 8021b2e:	2a01      	cmp	r2, #1
 8021b30:	461c      	mov	r4, r3
 8021b32:	f89d 907c 	ldrb.w	r9, [sp, #124]	; 0x7c
 8021b36:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021b38:	f040 8107 	bne.w	8021d4a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x226>
 8021b3c:	468a      	mov	sl, r1
 8021b3e:	6820      	ldr	r0, [r4, #0]
 8021b40:	6861      	ldr	r1, [r4, #4]
 8021b42:	aa10      	add	r2, sp, #64	; 0x40
 8021b44:	c203      	stmia	r2!, {r0, r1}
 8021b46:	6818      	ldr	r0, [r3, #0]
 8021b48:	6859      	ldr	r1, [r3, #4]
 8021b4a:	aa12      	add	r2, sp, #72	; 0x48
 8021b4c:	c203      	stmia	r2!, {r0, r1}
 8021b4e:	a810      	add	r0, sp, #64	; 0x40
 8021b50:	f7f5 fdc6 	bl	80176e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021b54:	4621      	mov	r1, r4
 8021b56:	a812      	add	r0, sp, #72	; 0x48
 8021b58:	f7f5 fdea 	bl	8017730 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021b5c:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
 8021b60:	f9bd 504a 	ldrsh.w	r5, [sp, #74]	; 0x4a
 8021b64:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8021b68:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8021b6c:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8021b70:	4879      	ldr	r0, [pc, #484]	; (8021d58 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8021b72:	fb11 4105 	smlabb	r1, r1, r5, r4
 8021b76:	4422      	add	r2, r4
 8021b78:	442b      	add	r3, r5
 8021b7a:	6800      	ldr	r0, [r0, #0]
 8021b7c:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8021b80:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 8021b84:	6802      	ldr	r2, [r0, #0]
 8021b86:	448a      	add	sl, r1
 8021b88:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 8021b8c:	4c73      	ldr	r4, [pc, #460]	; (8021d5c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x238>)
 8021b8e:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 8021b92:	910c      	str	r1, [sp, #48]	; 0x30
 8021b94:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 8021b98:	42a3      	cmp	r3, r4
 8021b9a:	910e      	str	r1, [sp, #56]	; 0x38
 8021b9c:	f040 80a2 	bne.w	8021ce4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1c0>
 8021ba0:	6841      	ldr	r1, [r0, #4]
 8021ba2:	4c6f      	ldr	r4, [pc, #444]	; (8021d60 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 8021ba4:	680b      	ldr	r3, [r1, #0]
 8021ba6:	699b      	ldr	r3, [r3, #24]
 8021ba8:	42a3      	cmp	r3, r4
 8021baa:	f040 80c1 	bne.w	8021d30 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x20c>
 8021bae:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8021bb0:	4798      	blx	r3
 8021bb2:	4b6c      	ldr	r3, [pc, #432]	; (8021d64 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8021bb4:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	; 0x4a
 8021bb8:	881b      	ldrh	r3, [r3, #0]
 8021bba:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 8021bbe:	fb01 2303 	mla	r3, r1, r3, r2
 8021bc2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8021bc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8021bc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021bca:	2b00      	cmp	r3, #0
 8021bcc:	f340 8082 	ble.w	8021cd4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1b0>
 8021bd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021bd2:	2b00      	cmp	r3, #0
 8021bd4:	dd7e      	ble.n	8021cd4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1b0>
 8021bd6:	2200      	movs	r2, #0
 8021bd8:	f04f 0e03 	mov.w	lr, #3
 8021bdc:	f04f 0c04 	mov.w	ip, #4
 8021be0:	f1c9 07ff 	rsb	r7, r9, #255	; 0xff
 8021be4:	009b      	lsls	r3, r3, #2
 8021be6:	920d      	str	r2, [sp, #52]	; 0x34
 8021be8:	b2bf      	uxth	r7, r7
 8021bea:	930f      	str	r3, [sp, #60]	; 0x3c
 8021bec:	fa1f f289 	uxth.w	r2, r9
 8021bf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021bf2:	4655      	mov	r5, sl
 8021bf4:	1d18      	adds	r0, r3, #4
 8021bf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021bf8:	eb0a 0603 	add.w	r6, sl, r3
 8021bfc:	e03e      	b.n	8021c7c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x158>
 8021bfe:	f810 3c04 	ldrb.w	r3, [r0, #-4]
 8021c02:	f810 4c03 	ldrb.w	r4, [r0, #-3]
 8021c06:	fb13 f307 	smulbb	r3, r3, r7
 8021c0a:	fb0b 3302 	mla	r3, fp, r2, r3
 8021c0e:	b29b      	uxth	r3, r3
 8021c10:	f103 0b01 	add.w	fp, r3, #1
 8021c14:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 8021c18:	121b      	asrs	r3, r3, #8
 8021c1a:	fb14 f407 	smulbb	r4, r4, r7
 8021c1e:	f800 3c04 	strb.w	r3, [r0, #-4]
 8021c22:	784b      	ldrb	r3, [r1, #1]
 8021c24:	f810 bc02 	ldrb.w	fp, [r0, #-2]
 8021c28:	fb03 4302 	mla	r3, r3, r2, r4
 8021c2c:	b29b      	uxth	r3, r3
 8021c2e:	1c5c      	adds	r4, r3, #1
 8021c30:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8021c34:	121b      	asrs	r3, r3, #8
 8021c36:	fb1b fb07 	smulbb	fp, fp, r7
 8021c3a:	f800 3c03 	strb.w	r3, [r0, #-3]
 8021c3e:	788c      	ldrb	r4, [r1, #2]
 8021c40:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8021c44:	fb04 b402 	mla	r4, r4, r2, fp
 8021c48:	b2a4      	uxth	r4, r4
 8021c4a:	f104 0b01 	add.w	fp, r4, #1
 8021c4e:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8021c52:	1224      	asrs	r4, r4, #8
 8021c54:	fb13 fb07 	smulbb	fp, r3, r7
 8021c58:	f800 4c02 	strb.w	r4, [r0, #-2]
 8021c5c:	78cb      	ldrb	r3, [r1, #3]
 8021c5e:	42ae      	cmp	r6, r5
 8021c60:	fb03 b302 	mla	r3, r3, r2, fp
 8021c64:	b29b      	uxth	r3, r3
 8021c66:	f103 0101 	add.w	r1, r3, #1
 8021c6a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8021c6e:	ea4f 2323 	mov.w	r3, r3, asr #8
 8021c72:	f800 3c01 	strb.w	r3, [r0, #-1]
 8021c76:	f100 0004 	add.w	r0, r0, #4
 8021c7a:	d018      	beq.n	8021cae <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x18a>
 8021c7c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8021c80:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021c84:	fb1e c303 	smlabb	r3, lr, r3, ip
 8021c88:	eb08 0103 	add.w	r1, r8, r3
 8021c8c:	f818 b003 	ldrb.w	fp, [r8, r3]
 8021c90:	d1b5      	bne.n	8021bfe <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0xda>
 8021c92:	f800 bc04 	strb.w	fp, [r0, #-4]
 8021c96:	784b      	ldrb	r3, [r1, #1]
 8021c98:	42ae      	cmp	r6, r5
 8021c9a:	f800 3c03 	strb.w	r3, [r0, #-3]
 8021c9e:	788b      	ldrb	r3, [r1, #2]
 8021ca0:	f100 0004 	add.w	r0, r0, #4
 8021ca4:	f800 9c05 	strb.w	r9, [r0, #-5]
 8021ca8:	f800 3c06 	strb.w	r3, [r0, #-6]
 8021cac:	d1e6      	bne.n	8021c7c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x158>
 8021cae:	4b2d      	ldr	r3, [pc, #180]	; (8021d64 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8021cb0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8021cb2:	881b      	ldrh	r3, [r3, #0]
 8021cb4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021cb6:	1a1b      	subs	r3, r3, r0
 8021cb8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8021cbc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021cbe:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021cc0:	441c      	add	r4, r3
 8021cc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021cc4:	3001      	adds	r0, #1
 8021cc6:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8021cca:	4283      	cmp	r3, r0
 8021ccc:	900d      	str	r0, [sp, #52]	; 0x34
 8021cce:	940b      	str	r4, [sp, #44]	; 0x2c
 8021cd0:	448a      	add	sl, r1
 8021cd2:	d18d      	bne.n	8021bf0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0xcc>
 8021cd4:	4b20      	ldr	r3, [pc, #128]	; (8021d58 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8021cd6:	6818      	ldr	r0, [r3, #0]
 8021cd8:	6803      	ldr	r3, [r0, #0]
 8021cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021cdc:	4798      	blx	r3
 8021cde:	b015      	add	sp, #84	; 0x54
 8021ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ce4:	4798      	blx	r3
 8021ce6:	2801      	cmp	r0, #1
 8021ce8:	d125      	bne.n	8021d36 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x212>
 8021cea:	4b1f      	ldr	r3, [pc, #124]	; (8021d68 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x244>)
 8021cec:	6818      	ldr	r0, [r3, #0]
 8021cee:	b330      	cbz	r0, 8021d3e <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x21a>
 8021cf0:	2502      	movs	r5, #2
 8021cf2:	240b      	movs	r4, #11
 8021cf4:	2600      	movs	r6, #0
 8021cf6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8021cfa:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8021cfe:	9302      	str	r3, [sp, #8]
 8021d00:	4b18      	ldr	r3, [pc, #96]	; (8021d64 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8021d02:	9201      	str	r2, [sp, #4]
 8021d04:	881b      	ldrh	r3, [r3, #0]
 8021d06:	9508      	str	r5, [sp, #32]
 8021d08:	9407      	str	r4, [sp, #28]
 8021d0a:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 8021d0e:	f8bd 404a 	ldrh.w	r4, [sp, #74]	; 0x4a
 8021d12:	9306      	str	r3, [sp, #24]
 8021d14:	f8cd 9010 	str.w	r9, [sp, #16]
 8021d18:	4642      	mov	r2, r8
 8021d1a:	4651      	mov	r1, sl
 8021d1c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8021d20:	9605      	str	r6, [sp, #20]
 8021d22:	9503      	str	r5, [sp, #12]
 8021d24:	9400      	str	r4, [sp, #0]
 8021d26:	f7fb fa69 	bl	801d1fc <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8021d2a:	b015      	add	sp, #84	; 0x54
 8021d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d30:	4608      	mov	r0, r1
 8021d32:	4798      	blx	r3
 8021d34:	e7d7      	b.n	8021ce6 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1c2>
 8021d36:	4b08      	ldr	r3, [pc, #32]	; (8021d58 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8021d38:	6818      	ldr	r0, [r3, #0]
 8021d3a:	6802      	ldr	r2, [r0, #0]
 8021d3c:	e737      	b.n	8021bae <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 8021d3e:	4b0b      	ldr	r3, [pc, #44]	; (8021d6c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 8021d40:	4a0b      	ldr	r2, [pc, #44]	; (8021d70 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 8021d42:	217c      	movs	r1, #124	; 0x7c
 8021d44:	480b      	ldr	r0, [pc, #44]	; (8021d74 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x250>)
 8021d46:	f006 f993 	bl	8028070 <__assert_func>
 8021d4a:	4b0b      	ldr	r3, [pc, #44]	; (8021d78 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x254>)
 8021d4c:	4a0b      	ldr	r2, [pc, #44]	; (8021d7c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8021d4e:	f240 5109 	movw	r1, #1289	; 0x509
 8021d52:	480b      	ldr	r0, [pc, #44]	; (8021d80 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x25c>)
 8021d54:	f006 f98c 	bl	8028070 <__assert_func>
 8021d58:	20197958 	.word	0x20197958
 8021d5c:	08001edd 	.word	0x08001edd
 8021d60:	08016725 	.word	0x08016725
 8021d64:	20197952 	.word	0x20197952
 8021d68:	20197b88 	.word	0x20197b88
 8021d6c:	0802aea4 	.word	0x0802aea4
 8021d70:	0802b6ac 	.word	0x0802b6ac
 8021d74:	0802aecc 	.word	0x0802aecc
 8021d78:	0802af6c 	.word	0x0802af6c
 8021d7c:	0802bc54 	.word	0x0802bc54
 8021d80:	0802af48 	.word	0x0802af48

08021d84 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h>:
 8021d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d88:	4617      	mov	r7, r2
 8021d8a:	8812      	ldrh	r2, [r2, #0]
 8021d8c:	b095      	sub	sp, #84	; 0x54
 8021d8e:	461c      	mov	r4, r3
 8021d90:	f89d 907c 	ldrb.w	r9, [sp, #124]	; 0x7c
 8021d94:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021d96:	2a00      	cmp	r2, #0
 8021d98:	f040 8112 	bne.w	8021fc0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x23c>
 8021d9c:	4688      	mov	r8, r1
 8021d9e:	6820      	ldr	r0, [r4, #0]
 8021da0:	6861      	ldr	r1, [r4, #4]
 8021da2:	aa10      	add	r2, sp, #64	; 0x40
 8021da4:	c203      	stmia	r2!, {r0, r1}
 8021da6:	6818      	ldr	r0, [r3, #0]
 8021da8:	6859      	ldr	r1, [r3, #4]
 8021daa:	aa12      	add	r2, sp, #72	; 0x48
 8021dac:	c203      	stmia	r2!, {r0, r1}
 8021dae:	a810      	add	r0, sp, #64	; 0x40
 8021db0:	f7f5 fc96 	bl	80176e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021db4:	4621      	mov	r1, r4
 8021db6:	a812      	add	r0, sp, #72	; 0x48
 8021db8:	f7f5 fcba 	bl	8017730 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021dbc:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
 8021dc0:	f9bd 504a 	ldrsh.w	r5, [sp, #74]	; 0x4a
 8021dc4:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8021dc8:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8021dcc:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8021dd0:	487f      	ldr	r0, [pc, #508]	; (8021fd0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 8021dd2:	fb11 4105 	smlabb	r1, r1, r5, r4
 8021dd6:	4422      	add	r2, r4
 8021dd8:	442b      	add	r3, r5
 8021dda:	6800      	ldr	r0, [r0, #0]
 8021ddc:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8021de0:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 8021de4:	6802      	ldr	r2, [r0, #0]
 8021de6:	4488      	add	r8, r1
 8021de8:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 8021dec:	4c79      	ldr	r4, [pc, #484]	; (8021fd4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x250>)
 8021dee:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 8021df2:	910c      	str	r1, [sp, #48]	; 0x30
 8021df4:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 8021df8:	42a3      	cmp	r3, r4
 8021dfa:	910e      	str	r1, [sp, #56]	; 0x38
 8021dfc:	f040 80ab 	bne.w	8021f56 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1d2>
 8021e00:	6841      	ldr	r1, [r0, #4]
 8021e02:	4c75      	ldr	r4, [pc, #468]	; (8021fd8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x254>)
 8021e04:	680b      	ldr	r3, [r1, #0]
 8021e06:	699b      	ldr	r3, [r3, #24]
 8021e08:	42a3      	cmp	r3, r4
 8021e0a:	f040 80cb 	bne.w	8021fa4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x220>
 8021e0e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8021e10:	4798      	blx	r3
 8021e12:	4b72      	ldr	r3, [pc, #456]	; (8021fdc <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8021e14:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	; 0x4a
 8021e18:	881b      	ldrh	r3, [r3, #0]
 8021e1a:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 8021e1e:	fb01 2303 	mla	r3, r1, r3, r2
 8021e22:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8021e26:	930b      	str	r3, [sp, #44]	; 0x2c
 8021e28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021e2a:	2b00      	cmp	r3, #0
 8021e2c:	f340 808b 	ble.w	8021f46 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1c2>
 8021e30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021e32:	2b00      	cmp	r3, #0
 8021e34:	f340 8087 	ble.w	8021f46 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1c2>
 8021e38:	2200      	movs	r2, #0
 8021e3a:	f04f 0c04 	mov.w	ip, #4
 8021e3e:	009b      	lsls	r3, r3, #2
 8021e40:	920d      	str	r2, [sp, #52]	; 0x34
 8021e42:	930f      	str	r3, [sp, #60]	; 0x3c
 8021e44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021e46:	4645      	mov	r5, r8
 8021e48:	1d1c      	adds	r4, r3, #4
 8021e4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021e4c:	eb08 0e03 	add.w	lr, r8, r3
 8021e50:	e048      	b.n	8021ee4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x160>
 8021e52:	fb09 f303 	mul.w	r3, r9, r3
 8021e56:	1c5a      	adds	r2, r3, #1
 8021e58:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021e5c:	121b      	asrs	r3, r3, #8
 8021e5e:	b2d8      	uxtb	r0, r3
 8021e60:	43c1      	mvns	r1, r0
 8021e62:	b29b      	uxth	r3, r3
 8021e64:	fb1a f203 	smulbb	r2, sl, r3
 8021e68:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8021e6c:	b2c9      	uxtb	r1, r1
 8021e6e:	fb0a 2a01 	mla	sl, sl, r1, r2
 8021e72:	fa1f fa8a 	uxth.w	sl, sl
 8021e76:	f814 2c03 	ldrb.w	r2, [r4, #-3]
 8021e7a:	f10a 0b01 	add.w	fp, sl, #1
 8021e7e:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8021e82:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021e86:	fb12 fb01 	smulbb	fp, r2, r1
 8021e8a:	f804 ac04 	strb.w	sl, [r4, #-4]
 8021e8e:	7872      	ldrb	r2, [r6, #1]
 8021e90:	f814 ac02 	ldrb.w	sl, [r4, #-2]
 8021e94:	fb02 b203 	mla	r2, r2, r3, fp
 8021e98:	b292      	uxth	r2, r2
 8021e9a:	f102 0b01 	add.w	fp, r2, #1
 8021e9e:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8021ea2:	fb1a fa01 	smulbb	sl, sl, r1
 8021ea6:	1212      	asrs	r2, r2, #8
 8021ea8:	f804 2c03 	strb.w	r2, [r4, #-3]
 8021eac:	78b1      	ldrb	r1, [r6, #2]
 8021eae:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8021eb2:	fb01 a103 	mla	r1, r1, r3, sl
 8021eb6:	fb12 f303 	smulbb	r3, r2, r3
 8021eba:	b289      	uxth	r1, r1
 8021ebc:	b29b      	uxth	r3, r3
 8021ebe:	f101 0a01 	add.w	sl, r1, #1
 8021ec2:	1c5e      	adds	r6, r3, #1
 8021ec4:	eb0a 2111 	add.w	r1, sl, r1, lsr #8
 8021ec8:	4402      	add	r2, r0
 8021eca:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8021ece:	1209      	asrs	r1, r1, #8
 8021ed0:	eba2 2313 	sub.w	r3, r2, r3, lsr #8
 8021ed4:	f804 1c02 	strb.w	r1, [r4, #-2]
 8021ed8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8021edc:	45ae      	cmp	lr, r5
 8021ede:	f104 0404 	add.w	r4, r4, #4
 8021ee2:	d01c      	beq.n	8021f1e <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x19a>
 8021ee4:	f815 2b01 	ldrb.w	r2, [r5], #1
 8021ee8:	fb1c c202 	smlabb	r2, ip, r2, ip
 8021eec:	18be      	adds	r6, r7, r2
 8021eee:	78f3      	ldrb	r3, [r6, #3]
 8021ef0:	2b00      	cmp	r3, #0
 8021ef2:	d0f3      	beq.n	8021edc <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x158>
 8021ef4:	2bff      	cmp	r3, #255	; 0xff
 8021ef6:	f817 a002 	ldrb.w	sl, [r7, r2]
 8021efa:	d1aa      	bne.n	8021e52 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0xce>
 8021efc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021f00:	d1a7      	bne.n	8021e52 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0xce>
 8021f02:	f804 ac04 	strb.w	sl, [r4, #-4]
 8021f06:	7873      	ldrb	r3, [r6, #1]
 8021f08:	45ae      	cmp	lr, r5
 8021f0a:	f804 3c03 	strb.w	r3, [r4, #-3]
 8021f0e:	78b3      	ldrb	r3, [r6, #2]
 8021f10:	f104 0404 	add.w	r4, r4, #4
 8021f14:	f804 9c05 	strb.w	r9, [r4, #-5]
 8021f18:	f804 3c06 	strb.w	r3, [r4, #-6]
 8021f1c:	d1e2      	bne.n	8021ee4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x160>
 8021f1e:	4b2f      	ldr	r3, [pc, #188]	; (8021fdc <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8021f20:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021f22:	881b      	ldrh	r3, [r3, #0]
 8021f24:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8021f26:	1a5b      	subs	r3, r3, r1
 8021f28:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8021f2c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8021f2e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8021f30:	4418      	add	r0, r3
 8021f32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021f34:	3101      	adds	r1, #1
 8021f36:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	; 0x44
 8021f3a:	428b      	cmp	r3, r1
 8021f3c:	910d      	str	r1, [sp, #52]	; 0x34
 8021f3e:	900b      	str	r0, [sp, #44]	; 0x2c
 8021f40:	4490      	add	r8, r2
 8021f42:	f47f af7f 	bne.w	8021e44 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0xc0>
 8021f46:	4b22      	ldr	r3, [pc, #136]	; (8021fd0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 8021f48:	6818      	ldr	r0, [r3, #0]
 8021f4a:	6803      	ldr	r3, [r0, #0]
 8021f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021f4e:	4798      	blx	r3
 8021f50:	b015      	add	sp, #84	; 0x54
 8021f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021f56:	4798      	blx	r3
 8021f58:	4603      	mov	r3, r0
 8021f5a:	2b01      	cmp	r3, #1
 8021f5c:	d126      	bne.n	8021fac <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x228>
 8021f5e:	4a20      	ldr	r2, [pc, #128]	; (8021fe0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x25c>)
 8021f60:	6810      	ldr	r0, [r2, #0]
 8021f62:	b338      	cbz	r0, 8021fb4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x230>
 8021f64:	f04f 0c02 	mov.w	ip, #2
 8021f68:	260b      	movs	r6, #11
 8021f6a:	4a1c      	ldr	r2, [pc, #112]	; (8021fdc <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8021f6c:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8021f70:	8814      	ldrh	r4, [r2, #0]
 8021f72:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 8021f76:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8021f7a:	9406      	str	r4, [sp, #24]
 8021f7c:	f8bd 404a 	ldrh.w	r4, [sp, #74]	; 0x4a
 8021f80:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8021f84:	9305      	str	r3, [sp, #20]
 8021f86:	f8cd 9010 	str.w	r9, [sp, #16]
 8021f8a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8021f8e:	463a      	mov	r2, r7
 8021f90:	4641      	mov	r1, r8
 8021f92:	e9cd 6c07 	strd	r6, ip, [sp, #28]
 8021f96:	9503      	str	r5, [sp, #12]
 8021f98:	9400      	str	r4, [sp, #0]
 8021f9a:	f7fb f92f 	bl	801d1fc <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8021f9e:	b015      	add	sp, #84	; 0x54
 8021fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021fa4:	4608      	mov	r0, r1
 8021fa6:	4798      	blx	r3
 8021fa8:	4603      	mov	r3, r0
 8021faa:	e7d6      	b.n	8021f5a <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1d6>
 8021fac:	4b08      	ldr	r3, [pc, #32]	; (8021fd0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 8021fae:	6818      	ldr	r0, [r3, #0]
 8021fb0:	6802      	ldr	r2, [r0, #0]
 8021fb2:	e72c      	b.n	8021e0e <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 8021fb4:	4b0b      	ldr	r3, [pc, #44]	; (8021fe4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x260>)
 8021fb6:	4a0c      	ldr	r2, [pc, #48]	; (8021fe8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x264>)
 8021fb8:	217c      	movs	r1, #124	; 0x7c
 8021fba:	480c      	ldr	r0, [pc, #48]	; (8021fec <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x268>)
 8021fbc:	f006 f858 	bl	8028070 <__assert_func>
 8021fc0:	4b0b      	ldr	r3, [pc, #44]	; (8021ff0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x26c>)
 8021fc2:	4a0c      	ldr	r2, [pc, #48]	; (8021ff4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x270>)
 8021fc4:	f240 514d 	movw	r1, #1357	; 0x54d
 8021fc8:	480b      	ldr	r0, [pc, #44]	; (8021ff8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x274>)
 8021fca:	f006 f851 	bl	8028070 <__assert_func>
 8021fce:	bf00      	nop
 8021fd0:	20197958 	.word	0x20197958
 8021fd4:	08001edd 	.word	0x08001edd
 8021fd8:	08016725 	.word	0x08016725
 8021fdc:	20197952 	.word	0x20197952
 8021fe0:	20197b88 	.word	0x20197b88
 8021fe4:	0802aea4 	.word	0x0802aea4
 8021fe8:	0802b6ac 	.word	0x0802b6ac
 8021fec:	0802aecc 	.word	0x0802aecc
 8021ff0:	0802afbc 	.word	0x0802afbc
 8021ff4:	0802bdf4 	.word	0x0802bdf4
 8021ff8:	0802af48 	.word	0x0802af48

08021ffc <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8021ffc:	b570      	push	{r4, r5, r6, lr}
 8021ffe:	7814      	ldrb	r4, [r2, #0]
 8022000:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8022004:	2c01      	cmp	r4, #1
 8022006:	d00e      	beq.n	8022026 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8022008:	d302      	bcc.n	8022010 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x14>
 802200a:	2c02      	cmp	r4, #2
 802200c:	d02a      	beq.n	8022064 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x68>
 802200e:	bd70      	pop	{r4, r5, r6, pc}
 8022010:	7a04      	ldrb	r4, [r0, #8]
 8022012:	2c01      	cmp	r4, #1
 8022014:	d021      	beq.n	802205a <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x5e>
 8022016:	d311      	bcc.n	802203c <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8022018:	2c02      	cmp	r4, #2
 802201a:	d12a      	bne.n	8022072 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x76>
 802201c:	9505      	str	r5, [sp, #20]
 802201e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022022:	f7ff beaf 	b.w	8021d84 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h>
 8022026:	7a04      	ldrb	r4, [r0, #8]
 8022028:	2c01      	cmp	r4, #1
 802202a:	d011      	beq.n	8022050 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 802202c:	d30b      	bcc.n	8022046 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x4a>
 802202e:	2c02      	cmp	r4, #2
 8022030:	d126      	bne.n	8022080 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x84>
 8022032:	9505      	str	r5, [sp, #20]
 8022034:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022038:	f7ff bd74 	b.w	8021b24 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h>
 802203c:	9505      	str	r5, [sp, #20]
 802203e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022042:	f7ff b88f 	b.w	8021164 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h>
 8022046:	9505      	str	r5, [sp, #20]
 8022048:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802204c:	f7ff b9be 	b.w	80213cc <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h>
 8022050:	9505      	str	r5, [sp, #20]
 8022052:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022056:	f7ff bc35 	b.w	80218c4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h>
 802205a:	9505      	str	r5, [sp, #20]
 802205c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022060:	f7ff bb0c 	b.w	802167c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h>
 8022064:	4b0a      	ldr	r3, [pc, #40]	; (8022090 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x94>)
 8022066:	4a0b      	ldr	r2, [pc, #44]	; (8022094 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x98>)
 8022068:	f240 3199 	movw	r1, #921	; 0x399
 802206c:	480a      	ldr	r0, [pc, #40]	; (8022098 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>)
 802206e:	f005 ffff 	bl	8028070 <__assert_func>
 8022072:	4b0a      	ldr	r3, [pc, #40]	; (802209c <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>)
 8022074:	4a07      	ldr	r2, [pc, #28]	; (8022094 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x98>)
 8022076:	f44f 716a 	mov.w	r1, #936	; 0x3a8
 802207a:	4807      	ldr	r0, [pc, #28]	; (8022098 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>)
 802207c:	f005 fff8 	bl	8028070 <__assert_func>
 8022080:	4b06      	ldr	r3, [pc, #24]	; (802209c <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>)
 8022082:	4a04      	ldr	r2, [pc, #16]	; (8022094 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x98>)
 8022084:	f240 31b9 	movw	r1, #953	; 0x3b9
 8022088:	4803      	ldr	r0, [pc, #12]	; (8022098 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>)
 802208a:	f005 fff1 	bl	8028070 <__assert_func>
 802208e:	bf00      	nop
 8022090:	0802ad24 	.word	0x0802ad24
 8022094:	0802b6ec 	.word	0x0802b6ec
 8022098:	0802af48 	.word	0x0802af48
 802209c:	0802ad60 	.word	0x0802ad60

080220a0 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80220a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80220a4:	b089      	sub	sp, #36	; 0x24
 80220a6:	f89d 4044 	ldrb.w	r4, [sp, #68]	; 0x44
 80220aa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80220ac:	b13c      	cbz	r4, 80220be <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1e>
 80220ae:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 80220b2:	2e00      	cmp	r6, #0
 80220b4:	dd03      	ble.n	80220be <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1e>
 80220b6:	f9b5 6006 	ldrsh.w	r6, [r5, #6]
 80220ba:	2e00      	cmp	r6, #0
 80220bc:	dc02      	bgt.n	80220c4 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x24>
 80220be:	b009      	add	sp, #36	; 0x24
 80220c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80220c4:	f04f 0800 	mov.w	r8, #0
 80220c8:	4606      	mov	r6, r0
 80220ca:	f362 080f 	bfi	r8, r2, #0, #16
 80220ce:	4608      	mov	r0, r1
 80220d0:	460f      	mov	r7, r1
 80220d2:	f363 481f 	bfi	r8, r3, #16, #16
 80220d6:	f7f8 f8cb 	bl	801a270 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80220da:	4681      	mov	r9, r0
 80220dc:	4638      	mov	r0, r7
 80220de:	f7f8 f8fb 	bl	801a2d8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80220e2:	2300      	movs	r3, #0
 80220e4:	f369 030f 	bfi	r3, r9, #0, #16
 80220e8:	f360 431f 	bfi	r3, r0, #16, #16
 80220ec:	4638      	mov	r0, r7
 80220ee:	e9cd 8302 	strd	r8, r3, [sp, #8]
 80220f2:	f7f8 f9a9 	bl	801a448 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80220f6:	280b      	cmp	r0, #11
 80220f8:	d023      	beq.n	8022142 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 80220fa:	aa04      	add	r2, sp, #16
 80220fc:	f10d 0808 	add.w	r8, sp, #8
 8022100:	e898 0003 	ldmia.w	r8, {r0, r1}
 8022104:	e882 0003 	stmia.w	r2, {r0, r1}
 8022108:	6828      	ldr	r0, [r5, #0]
 802210a:	6869      	ldr	r1, [r5, #4]
 802210c:	ab06      	add	r3, sp, #24
 802210e:	c303      	stmia	r3!, {r0, r1}
 8022110:	4610      	mov	r0, r2
 8022112:	f7f5 fae5 	bl	80176e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022116:	4641      	mov	r1, r8
 8022118:	a806      	add	r0, sp, #24
 802211a:	f7f5 fb09 	bl	8017730 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802211e:	4638      	mov	r0, r7
 8022120:	f7f8 f90e 	bl	801a340 <_ZNK8touchgfx6Bitmap7getDataEv>
 8022124:	4680      	mov	r8, r0
 8022126:	4638      	mov	r0, r7
 8022128:	f7f8 f98e 	bl	801a448 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802212c:	280d      	cmp	r0, #13
 802212e:	d871      	bhi.n	8022214 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 8022130:	e8df f000 	tbb	[pc, r0]
 8022134:	70176163 	.word	0x70176163
 8022138:	70707070 	.word	0x70707070
 802213c:	70707070 	.word	0x70707070
 8022140:	6570      	.short	0x6570
 8022142:	4638      	mov	r0, r7
 8022144:	f7f8 f8fc 	bl	801a340 <_ZNK8touchgfx6Bitmap7getDataEv>
 8022148:	4680      	mov	r8, r0
 802214a:	4638      	mov	r0, r7
 802214c:	f7f8 f928 	bl	801a3a0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8022150:	4641      	mov	r1, r8
 8022152:	4602      	mov	r2, r0
 8022154:	e9cd 5400 	strd	r5, r4, [sp]
 8022158:	4630      	mov	r0, r6
 802215a:	ab02      	add	r3, sp, #8
 802215c:	f7ff ff4e 	bl	8021ffc <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8022160:	e7ad      	b.n	80220be <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1e>
 8022162:	2710      	movs	r7, #16
 8022164:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8022168:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 802216c:	4d2c      	ldr	r5, [pc, #176]	; (8022220 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x180>)
 802216e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8022172:	440a      	add	r2, r1
 8022174:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8022178:	6828      	ldr	r0, [r5, #0]
 802217a:	440b      	add	r3, r1
 802217c:	f8ad 2018 	strh.w	r2, [sp, #24]
 8022180:	f8ad 301a 	strh.w	r3, [sp, #26]
 8022184:	2800      	cmp	r0, #0
 8022186:	d03f      	beq.n	8022208 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x168>
 8022188:	f7fb f810 	bl	801d1ac <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 802218c:	6833      	ldr	r3, [r6, #0]
 802218e:	4630      	mov	r0, r6
 8022190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8022192:	4798      	blx	r3
 8022194:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8022198:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 802219c:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 80221a0:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 80221a4:	f7f8 fd0c 	bl	801abc0 <nema_set_clip>
 80221a8:	2200      	movs	r2, #0
 80221aa:	4623      	mov	r3, r4
 80221ac:	2600      	movs	r6, #0
 80221ae:	f04f 34ff 	mov.w	r4, #4294967295
 80221b2:	4611      	mov	r1, r2
 80221b4:	4610      	mov	r0, r2
 80221b6:	f7f8 fd37 	bl	801ac28 <nema_rgba>
 80221ba:	f7fa ff0f 	bl	801cfdc <nema_set_const_color>
 80221be:	f04f 33ff 	mov.w	r3, #4294967295
 80221c2:	2201      	movs	r2, #1
 80221c4:	2100      	movs	r1, #0
 80221c6:	4817      	ldr	r0, [pc, #92]	; (8022224 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x184>)
 80221c8:	f7fa fb42 	bl	801c850 <nema_set_blend>
 80221cc:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 80221d0:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 80221d4:	463b      	mov	r3, r7
 80221d6:	4640      	mov	r0, r8
 80221d8:	e9cd 4600 	strd	r4, r6, [sp]
 80221dc:	f7f8 fd2c 	bl	801ac38 <nema_bind_src_tex>
 80221e0:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80221e4:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80221e8:	f7f8 fe66 	bl	801aeb8 <nema_blit>
 80221ec:	6828      	ldr	r0, [r5, #0]
 80221ee:	b158      	cbz	r0, 8022208 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x168>
 80221f0:	f7fa fffc 	bl	801d1ec <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 80221f4:	e763      	b.n	80220be <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1e>
 80221f6:	2739      	movs	r7, #57	; 0x39
 80221f8:	e7b4      	b.n	8022164 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 80221fa:	2704      	movs	r7, #4
 80221fc:	e7b2      	b.n	8022164 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 80221fe:	4638      	mov	r0, r7
 8022200:	f7f8 f8ce 	bl	801a3a0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8022204:	7807      	ldrb	r7, [r0, #0]
 8022206:	e7ad      	b.n	8022164 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 8022208:	4b07      	ldr	r3, [pc, #28]	; (8022228 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x188>)
 802220a:	4a08      	ldr	r2, [pc, #32]	; (802222c <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x18c>)
 802220c:	217c      	movs	r1, #124	; 0x7c
 802220e:	4808      	ldr	r0, [pc, #32]	; (8022230 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x190>)
 8022210:	f005 ff2e 	bl	8028070 <__assert_func>
 8022214:	4b07      	ldr	r3, [pc, #28]	; (8022234 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x194>)
 8022216:	4a08      	ldr	r2, [pc, #32]	; (8022238 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x198>)
 8022218:	2174      	movs	r1, #116	; 0x74
 802221a:	4808      	ldr	r0, [pc, #32]	; (802223c <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x19c>)
 802221c:	f005 ff28 	bl	8028070 <__assert_func>
 8022220:	20197b88 	.word	0x20197b88
 8022224:	08000504 	.word	0x08000504
 8022228:	0802aea4 	.word	0x0802aea4
 802222c:	0802b6ac 	.word	0x0802b6ac
 8022230:	0802aecc 	.word	0x0802aecc
 8022234:	0802ad9c 	.word	0x0802ad9c
 8022238:	0802b7e0 	.word	0x0802b7e0
 802223c:	0802af48 	.word	0x0802af48

08022240 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8022240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022244:	b089      	sub	sp, #36	; 0x24
 8022246:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8022248:	9e14      	ldr	r6, [sp, #80]	; 0x50
 802224a:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
 802224e:	9104      	str	r1, [sp, #16]
 8022250:	8809      	ldrh	r1, [r1, #0]
 8022252:	fb07 6c04 	mla	ip, r7, r4, r6
 8022256:	10c8      	asrs	r0, r1, #3
 8022258:	120d      	asrs	r5, r1, #8
 802225a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802225e:	f005 0af8 	and.w	sl, r5, #248	; 0xf8
 8022262:	9002      	str	r0, [sp, #8]
 8022264:	00c9      	lsls	r1, r1, #3
 8022266:	0200      	lsls	r0, r0, #8
 8022268:	b2c9      	uxtb	r1, r1
 802226a:	4690      	mov	r8, r2
 802226c:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 8022270:	469e      	mov	lr, r3
 8022272:	eb02 030c 	add.w	r3, r2, ip
 8022276:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 802227a:	4308      	orrs	r0, r1
 802227c:	2f00      	cmp	r7, #0
 802227e:	9103      	str	r1, [sp, #12]
 8022280:	9305      	str	r3, [sp, #20]
 8022282:	9007      	str	r0, [sp, #28]
 8022284:	f107 0501 	add.w	r5, r7, #1
 8022288:	f9bd 604c 	ldrsh.w	r6, [sp, #76]	; 0x4c
 802228c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8022290:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
 8022294:	9200      	str	r2, [sp, #0]
 8022296:	db02      	blt.n	802229e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x5e>
 8022298:	42be      	cmp	r6, r7
 802229a:	f300 80a3 	bgt.w	80223e4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1a4>
 802229e:	fa5f fb80 	uxtb.w	fp, r0
 80222a2:	af07      	add	r7, sp, #28
 80222a4:	465a      	mov	r2, fp
 80222a6:	46b8      	mov	r8, r7
 80222a8:	2d00      	cmp	r5, #0
 80222aa:	db01      	blt.n	80222b0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x70>
 80222ac:	42ae      	cmp	r6, r5
 80222ae:	dc79      	bgt.n	80223a4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x164>
 80222b0:	f10d 0e1c 	add.w	lr, sp, #28
 80222b4:	46f1      	mov	r9, lr
 80222b6:	b2c0      	uxtb	r0, r0
 80222b8:	9001      	str	r0, [sp, #4]
 80222ba:	2b0f      	cmp	r3, #15
 80222bc:	f200 80ce 	bhi.w	802245c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x21c>
 80222c0:	290f      	cmp	r1, #15
 80222c2:	f200 80cb 	bhi.w	802245c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x21c>
 80222c6:	9c00      	ldr	r4, [sp, #0]
 80222c8:	b29b      	uxth	r3, r3
 80222ca:	43e4      	mvns	r4, r4
 80222cc:	b289      	uxth	r1, r1
 80222ce:	fb03 f501 	mul.w	r5, r3, r1
 80222d2:	011b      	lsls	r3, r3, #4
 80222d4:	1b5e      	subs	r6, r3, r5
 80222d6:	b2b6      	uxth	r6, r6
 80222d8:	f897 c002 	ldrb.w	ip, [r7, #2]
 80222dc:	ebc5 1101 	rsb	r1, r5, r1, lsl #4
 80222e0:	787f      	ldrb	r7, [r7, #1]
 80222e2:	fb06 f202 	mul.w	r2, r6, r2
 80222e6:	b289      	uxth	r1, r1
 80222e8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80222ec:	fb06 fc0c 	mul.w	ip, r6, ip
 80222f0:	1a5b      	subs	r3, r3, r1
 80222f2:	fb06 f607 	mul.w	r6, r6, r7
 80222f6:	b29b      	uxth	r3, r3
 80222f8:	f898 7001 	ldrb.w	r7, [r8, #1]
 80222fc:	fb03 220b 	mla	r2, r3, fp, r2
 8022300:	f898 b002 	ldrb.w	fp, [r8, #2]
 8022304:	fb03 6607 	mla	r6, r3, r7, r6
 8022308:	fb03 cc0b 	mla	ip, r3, fp, ip
 802230c:	f899 8002 	ldrb.w	r8, [r9, #2]
 8022310:	f899 7001 	ldrb.w	r7, [r9, #1]
 8022314:	9b01      	ldr	r3, [sp, #4]
 8022316:	fb01 cc08 	mla	ip, r1, r8, ip
 802231a:	fb01 2203 	mla	r2, r1, r3, r2
 802231e:	fb01 6607 	mla	r6, r1, r7, r6
 8022322:	f89e 8002 	ldrb.w	r8, [lr, #2]
 8022326:	f89e 7001 	ldrb.w	r7, [lr, #1]
 802232a:	9b03      	ldr	r3, [sp, #12]
 802232c:	9902      	ldr	r1, [sp, #8]
 802232e:	fb05 2200 	mla	r2, r5, r0, r2
 8022332:	b2e4      	uxtb	r4, r4
 8022334:	fb05 cc08 	mla	ip, r5, r8, ip
 8022338:	fb05 6607 	mla	r6, r5, r7, r6
 802233c:	fb13 f004 	smulbb	r0, r3, r4
 8022340:	fb1a f304 	smulbb	r3, sl, r4
 8022344:	fb11 f404 	smulbb	r4, r1, r4
 8022348:	f8bd e000 	ldrh.w	lr, [sp]
 802234c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8022350:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8022354:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022358:	fb02 020e 	mla	r2, r2, lr, r0
 802235c:	fb0c 330e 	mla	r3, ip, lr, r3
 8022360:	fb06 4e0e 	mla	lr, r6, lr, r4
 8022364:	fa1f fc83 	uxth.w	ip, r3
 8022368:	b292      	uxth	r2, r2
 802236a:	fa1f fe8e 	uxth.w	lr, lr
 802236e:	f10c 0301 	add.w	r3, ip, #1
 8022372:	1c50      	adds	r0, r2, #1
 8022374:	f10e 0101 	add.w	r1, lr, #1
 8022378:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 802237c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8022380:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8022384:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022388:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802238c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8022390:	4313      	orrs	r3, r2
 8022392:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8022396:	9a04      	ldr	r2, [sp, #16]
 8022398:	ea43 030e 	orr.w	r3, r3, lr
 802239c:	8013      	strh	r3, [r2, #0]
 802239e:	b009      	add	sp, #36	; 0x24
 80223a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80223a4:	2900      	cmp	r1, #0
 80223a6:	d036      	beq.n	8022416 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d6>
 80223a8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80223aa:	2d00      	cmp	r5, #0
 80223ac:	db45      	blt.n	802243a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1fa>
 80223ae:	42ac      	cmp	r4, r5
 80223b0:	dd43      	ble.n	802243a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1fa>
 80223b2:	9d05      	ldr	r5, [sp, #20]
 80223b4:	f815 9004 	ldrb.w	r9, [r5, r4]
 80223b8:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80223bc:	44f1      	add	r9, lr
 80223be:	f899 5000 	ldrb.w	r5, [r9]
 80223c2:	9501      	str	r5, [sp, #4]
 80223c4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80223c6:	3501      	adds	r5, #1
 80223c8:	d433      	bmi.n	8022432 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1f2>
 80223ca:	42ac      	cmp	r4, r5
 80223cc:	dd31      	ble.n	8022432 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1f2>
 80223ce:	2b00      	cmp	r3, #0
 80223d0:	d040      	beq.n	8022454 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x214>
 80223d2:	9805      	ldr	r0, [sp, #20]
 80223d4:	4420      	add	r0, r4
 80223d6:	7840      	ldrb	r0, [r0, #1]
 80223d8:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 80223dc:	f81e 0004 	ldrb.w	r0, [lr, r4]
 80223e0:	44a6      	add	lr, r4
 80223e2:	e76a      	b.n	80222ba <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x7a>
 80223e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80223e6:	2a00      	cmp	r2, #0
 80223e8:	db01      	blt.n	80223ee <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ae>
 80223ea:	4294      	cmp	r4, r2
 80223ec:	dc1b      	bgt.n	8022426 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1e6>
 80223ee:	f10d 081c 	add.w	r8, sp, #28
 80223f2:	3201      	adds	r2, #1
 80223f4:	f898 b000 	ldrb.w	fp, [r8]
 80223f8:	d40a      	bmi.n	8022410 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>
 80223fa:	4294      	cmp	r4, r2
 80223fc:	dd08      	ble.n	8022410 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>
 80223fe:	b1fb      	cbz	r3, 8022440 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x200>
 8022400:	9a05      	ldr	r2, [sp, #20]
 8022402:	7857      	ldrb	r7, [r2, #1]
 8022404:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022408:	f81e 2007 	ldrb.w	r2, [lr, r7]
 802240c:	4477      	add	r7, lr
 802240e:	e74b      	b.n	80222a8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x68>
 8022410:	b2c2      	uxtb	r2, r0
 8022412:	af07      	add	r7, sp, #28
 8022414:	e748      	b.n	80222a8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x68>
 8022416:	b2c0      	uxtb	r0, r0
 8022418:	2b0f      	cmp	r3, #15
 802241a:	9001      	str	r0, [sp, #4]
 802241c:	d81e      	bhi.n	802245c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x21c>
 802241e:	f10d 0e1c 	add.w	lr, sp, #28
 8022422:	46f1      	mov	r9, lr
 8022424:	e74f      	b.n	80222c6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x86>
 8022426:	f818 800c 	ldrb.w	r8, [r8, ip]
 802242a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802242e:	44f0      	add	r8, lr
 8022430:	e7df      	b.n	80223f2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1b2>
 8022432:	b2c0      	uxtb	r0, r0
 8022434:	f10d 0e1c 	add.w	lr, sp, #28
 8022438:	e73f      	b.n	80222ba <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x7a>
 802243a:	f10d 091c 	add.w	r9, sp, #28
 802243e:	e7be      	b.n	80223be <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x17e>
 8022440:	2d00      	cmp	r5, #0
 8022442:	b2c2      	uxtb	r2, r0
 8022444:	af07      	add	r7, sp, #28
 8022446:	f6bf af31 	bge.w	80222ac <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6c>
 802244a:	46be      	mov	lr, r7
 802244c:	46b9      	mov	r9, r7
 802244e:	4610      	mov	r0, r2
 8022450:	9201      	str	r2, [sp, #4]
 8022452:	e735      	b.n	80222c0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 8022454:	b2c0      	uxtb	r0, r0
 8022456:	f10d 0e1c 	add.w	lr, sp, #28
 802245a:	e731      	b.n	80222c0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 802245c:	4b03      	ldr	r3, [pc, #12]	; (802246c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x22c>)
 802245e:	4a04      	ldr	r2, [pc, #16]	; (8022470 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x230>)
 8022460:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8022464:	4803      	ldr	r0, [pc, #12]	; (8022474 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x234>)
 8022466:	f005 fe03 	bl	8028070 <__assert_func>
 802246a:	bf00      	nop
 802246c:	0802b2dc 	.word	0x0802b2dc
 8022470:	0802b954 	.word	0x0802b954
 8022474:	0802b460 	.word	0x0802b460

08022478 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802247c:	ed2d 8b08 	vpush	{d8-d11}
 8022480:	b095      	sub	sp, #84	; 0x54
 8022482:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 8022486:	e9dd 512b 	ldrd	r5, r1, [sp, #172]	; 0xac
 802248a:	e9dd b827 	ldrd	fp, r8, [sp, #156]	; 0x9c
 802248e:	686c      	ldr	r4, [r5, #4]
 8022490:	461a      	mov	r2, r3
 8022492:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8022494:	f89d 60bc 	ldrb.w	r6, [sp, #188]	; 0xbc
 8022498:	fb04 1303 	mla	r3, r4, r3, r1
 802249c:	682c      	ldr	r4, [r5, #0]
 802249e:	e9cd 0612 	strd	r0, r6, [sp, #72]	; 0x48
 80224a2:	43f0      	mvns	r0, r6
 80224a4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80224a8:	eeb0 aa40 	vmov.f32	s20, s0
 80224ac:	eef0 9a60 	vmov.f32	s19, s1
 80224b0:	eeb0 9a41 	vmov.f32	s18, s2
 80224b4:	eef0 8a62 	vmov.f32	s17, s5
 80224b8:	eeb0 8a43 	vmov.f32	s16, s6
 80224bc:	eef0 ba44 	vmov.f32	s23, s8
 80224c0:	eeb0 ba64 	vmov.f32	s22, s9
 80224c4:	eef0 aa45 	vmov.f32	s21, s10
 80224c8:	469a      	mov	sl, r3
 80224ca:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80224cc:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 80224ce:	6849      	ldr	r1, [r1, #4]
 80224d0:	682d      	ldr	r5, [r5, #0]
 80224d2:	3104      	adds	r1, #4
 80224d4:	b2c0      	uxtb	r0, r0
 80224d6:	9108      	str	r1, [sp, #32]
 80224d8:	b2b1      	uxth	r1, r6
 80224da:	950b      	str	r5, [sp, #44]	; 0x2c
 80224dc:	900c      	str	r0, [sp, #48]	; 0x30
 80224de:	910d      	str	r1, [sp, #52]	; 0x34
 80224e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80224e2:	2b00      	cmp	r3, #0
 80224e4:	dc02      	bgt.n	80224ec <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80224e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80224e8:	2b00      	cmp	r3, #0
 80224ea:	dd65      	ble.n	80225b8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80224ec:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80224ee:	2a00      	cmp	r2, #0
 80224f0:	e9d3 4e02 	ldrd	r4, lr, [r3, #8]
 80224f4:	b225      	sxth	r5, r4
 80224f6:	fa0f f78e 	sxth.w	r7, lr
 80224fa:	f340 8233 	ble.w	8022964 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 80224fe:	1e6e      	subs	r6, r5, #1
 8022500:	f107 3cff 	add.w	ip, r7, #4294967295
 8022504:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8022508:	e9dd e929 	ldrd	lr, r9, [sp, #164]	; 0xa4
 802250c:	ea5f 432b 	movs.w	r3, fp, asr #16
 8022510:	ea4f 4128 	mov.w	r1, r8, asr #16
 8022514:	d405      	bmi.n	8022522 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8022516:	42b3      	cmp	r3, r6
 8022518:	da03      	bge.n	8022522 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802251a:	2900      	cmp	r1, #0
 802251c:	db01      	blt.n	8022522 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802251e:	4561      	cmp	r1, ip
 8022520:	db4f      	blt.n	80225c2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8022522:	1c58      	adds	r0, r3, #1
 8022524:	d406      	bmi.n	8022534 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8022526:	42a8      	cmp	r0, r5
 8022528:	dc04      	bgt.n	8022534 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 802252a:	1c48      	adds	r0, r1, #1
 802252c:	d402      	bmi.n	8022534 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 802252e:	42b8      	cmp	r0, r7
 8022530:	f340 817e 	ble.w	8022830 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 8022534:	3a01      	subs	r2, #1
 8022536:	44f3      	add	fp, lr
 8022538:	44c8      	add	r8, r9
 802253a:	f10a 0a02 	add.w	sl, sl, #2
 802253e:	d1e5      	bne.n	802250c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022540:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022542:	2b00      	cmp	r3, #0
 8022544:	dd38      	ble.n	80225b8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8022546:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802254a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802254e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022552:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022556:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802255a:	ee29 6aa7 	vmul.f32	s12, s19, s15
 802255e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022562:	ee76 6a68 	vsub.f32	s13, s12, s17
 8022566:	ee37 7ac8 	vsub.f32	s14, s15, s16
 802256a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802256e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8022572:	ee16 2a90 	vmov	r2, s13
 8022576:	3b01      	subs	r3, #1
 8022578:	930e      	str	r3, [sp, #56]	; 0x38
 802257a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802257c:	fb92 f3f3 	sdiv	r3, r2, r3
 8022580:	ee17 2a10 	vmov	r2, s14
 8022584:	eeb0 7a48 	vmov.f32	s14, s16
 8022588:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802258c:	ee17 8a10 	vmov	r8, s14
 8022590:	eeb0 7a68 	vmov.f32	s14, s17
 8022594:	9329      	str	r3, [sp, #164]	; 0xa4
 8022596:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022598:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802259c:	fb92 f3f3 	sdiv	r3, r2, r3
 80225a0:	932a      	str	r3, [sp, #168]	; 0xa8
 80225a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80225a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80225a6:	ee17 ba10 	vmov	fp, s14
 80225aa:	eeb0 8a67 	vmov.f32	s16, s15
 80225ae:	eef0 8a46 	vmov.f32	s17, s12
 80225b2:	bf18      	it	ne
 80225b4:	461a      	movne	r2, r3
 80225b6:	e793      	b.n	80224e0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80225b8:	b015      	add	sp, #84	; 0x54
 80225ba:	ecbd 8b08 	vpop	{d8-d11}
 80225be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225c2:	46d4      	mov	ip, sl
 80225c4:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80225c8:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80225ca:	1e51      	subs	r1, r2, #1
 80225cc:	fb00 b301 	mla	r3, r0, r1, fp
 80225d0:	141b      	asrs	r3, r3, #16
 80225d2:	910a      	str	r1, [sp, #40]	; 0x28
 80225d4:	f100 80cc 	bmi.w	8022770 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 80225d8:	42b3      	cmp	r3, r6
 80225da:	f280 80c9 	bge.w	8022770 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 80225de:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80225e0:	fb03 8301 	mla	r3, r3, r1, r8
 80225e4:	141b      	asrs	r3, r3, #16
 80225e6:	f100 80c3 	bmi.w	8022770 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 80225ea:	3f01      	subs	r7, #1
 80225ec:	42bb      	cmp	r3, r7
 80225ee:	f280 80bf 	bge.w	8022770 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 80225f2:	2a00      	cmp	r2, #0
 80225f4:	dda4      	ble.n	8022540 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80225f6:	eb0a 0a42 	add.w	sl, sl, r2, lsl #1
 80225fa:	e9cd ca09 	strd	ip, sl, [sp, #36]	; 0x24
 80225fe:	e08e      	b.n	802271e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8022600:	f891 c001 	ldrb.w	ip, [r1, #1]
 8022604:	194c      	adds	r4, r1, r5
 8022606:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802260a:	44bc      	add	ip, r7
 802260c:	2a00      	cmp	r2, #0
 802260e:	f000 80a6 	beq.w	802275e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8022612:	5d48      	ldrb	r0, [r1, r5]
 8022614:	7865      	ldrb	r5, [r4, #1]
 8022616:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802261a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802261e:	4438      	add	r0, r7
 8022620:	443d      	add	r5, r7
 8022622:	b29b      	uxth	r3, r3
 8022624:	b292      	uxth	r2, r2
 8022626:	fb03 f402 	mul.w	r4, r3, r2
 802262a:	011b      	lsls	r3, r3, #4
 802262c:	1b19      	subs	r1, r3, r4
 802262e:	f89c 9000 	ldrb.w	r9, [ip]
 8022632:	f89c e002 	ldrb.w	lr, [ip, #2]
 8022636:	b289      	uxth	r1, r1
 8022638:	f89c c001 	ldrb.w	ip, [ip, #1]
 802263c:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8022640:	fb01 f909 	mul.w	r9, r1, r9
 8022644:	b292      	uxth	r2, r2
 8022646:	fb01 fe0e 	mul.w	lr, r1, lr
 802264a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 802264e:	fb01 f10c 	mul.w	r1, r1, ip
 8022652:	f817 a00a 	ldrb.w	sl, [r7, sl]
 8022656:	1a9b      	subs	r3, r3, r2
 8022658:	f896 c002 	ldrb.w	ip, [r6, #2]
 802265c:	b29b      	uxth	r3, r3
 802265e:	7876      	ldrb	r6, [r6, #1]
 8022660:	fb03 990a 	mla	r9, r3, sl, r9
 8022664:	fb03 ec0c 	mla	ip, r3, ip, lr
 8022668:	fb03 1306 	mla	r3, r3, r6, r1
 802266c:	7801      	ldrb	r1, [r0, #0]
 802266e:	f890 e002 	ldrb.w	lr, [r0, #2]
 8022672:	fb02 9901 	mla	r9, r2, r1, r9
 8022676:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022678:	fb02 ce0e 	mla	lr, r2, lr, ip
 802267c:	7829      	ldrb	r1, [r5, #0]
 802267e:	f8b7 c000 	ldrh.w	ip, [r7]
 8022682:	7840      	ldrb	r0, [r0, #1]
 8022684:	78ae      	ldrb	r6, [r5, #2]
 8022686:	fb02 3200 	mla	r2, r2, r0, r3
 802268a:	fb04 9901 	mla	r9, r4, r1, r9
 802268e:	7868      	ldrb	r0, [r5, #1]
 8022690:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022692:	ea4f 252c 	mov.w	r5, ip, asr #8
 8022696:	fb04 ee06 	mla	lr, r4, r6, lr
 802269a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802269e:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80226a2:	fb15 f501 	smulbb	r5, r5, r1
 80226a6:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80226aa:	b2db      	uxtb	r3, r3
 80226ac:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80226b0:	fb13 f301 	smulbb	r3, r3, r1
 80226b4:	fb1c fc01 	smulbb	ip, ip, r1
 80226b8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80226ba:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80226be:	fb04 2200 	mla	r2, r4, r0, r2
 80226c2:	fb0e 5501 	mla	r5, lr, r1, r5
 80226c6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80226ca:	b2ad      	uxth	r5, r5
 80226cc:	fb02 cc01 	mla	ip, r2, r1, ip
 80226d0:	1c6a      	adds	r2, r5, #1
 80226d2:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 80226d6:	463a      	mov	r2, r7
 80226d8:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80226dc:	fb09 3301 	mla	r3, r9, r1, r3
 80226e0:	fa1f f18c 	uxth.w	r1, ip
 80226e4:	b29b      	uxth	r3, r3
 80226e6:	1c5c      	adds	r4, r3, #1
 80226e8:	1c48      	adds	r0, r1, #1
 80226ea:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 80226ee:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80226f2:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80226f6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80226fa:	0949      	lsrs	r1, r1, #5
 80226fc:	432b      	orrs	r3, r5
 80226fe:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022702:	430b      	orrs	r3, r1
 8022704:	f822 3b02 	strh.w	r3, [r2], #2
 8022708:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802270a:	9209      	str	r2, [sp, #36]	; 0x24
 802270c:	449b      	add	fp, r3
 802270e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022710:	4498      	add	r8, r3
 8022712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022714:	429a      	cmp	r2, r3
 8022716:	d029      	beq.n	802276c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8022718:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802271a:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 802271e:	ea4f 432b 	mov.w	r3, fp, asr #16
 8022722:	ea4f 4128 	mov.w	r1, r8, asr #16
 8022726:	fb05 3101 	mla	r1, r5, r1, r3
 802272a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802272c:	9f08      	ldr	r7, [sp, #32]
 802272e:	f812 a001 	ldrb.w	sl, [r2, r1]
 8022732:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8022736:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 802273a:	4411      	add	r1, r2
 802273c:	eb07 060a 	add.w	r6, r7, sl
 8022740:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8022744:	2b00      	cmp	r3, #0
 8022746:	f47f af5b 	bne.w	8022600 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 802274a:	b15a      	cbz	r2, 8022764 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>
 802274c:	5d48      	ldrb	r0, [r1, r5]
 802274e:	9908      	ldr	r1, [sp, #32]
 8022750:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022754:	4635      	mov	r5, r6
 8022756:	4408      	add	r0, r1
 8022758:	46b4      	mov	ip, r6
 802275a:	460f      	mov	r7, r1
 802275c:	e761      	b.n	8022622 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802275e:	4635      	mov	r5, r6
 8022760:	4630      	mov	r0, r6
 8022762:	e75e      	b.n	8022622 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8022764:	4635      	mov	r5, r6
 8022766:	4630      	mov	r0, r6
 8022768:	46b4      	mov	ip, r6
 802276a:	e75a      	b.n	8022622 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802276c:	469a      	mov	sl, r3
 802276e:	e6e7      	b.n	8022540 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8022770:	2a00      	cmp	r2, #0
 8022772:	f77f aee5 	ble.w	8022540 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8022776:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8022778:	ea4f 432b 	mov.w	r3, fp, asr #16
 802277c:	ea4f 4128 	mov.w	r1, r8, asr #16
 8022780:	4675      	mov	r5, lr
 8022782:	46d1      	mov	r9, sl
 8022784:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8022788:	f8dd a0b8 	ldr.w	sl, [sp, #184]	; 0xb8
 802278c:	9609      	str	r6, [sp, #36]	; 0x24
 802278e:	2b00      	cmp	r3, #0
 8022790:	f3cb 3703 	ubfx	r7, fp, #12, #4
 8022794:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8022798:	db27      	blt.n	80227ea <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 802279a:	1e60      	subs	r0, r4, #1
 802279c:	4283      	cmp	r3, r0
 802279e:	da24      	bge.n	80227ea <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 80227a0:	2900      	cmp	r1, #0
 80227a2:	db22      	blt.n	80227ea <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 80227a4:	1e68      	subs	r0, r5, #1
 80227a6:	4281      	cmp	r1, r0
 80227a8:	da1f      	bge.n	80227ea <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 80227aa:	b220      	sxth	r0, r4
 80227ac:	fb01 3300 	mla	r3, r1, r0, r3
 80227b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80227b2:	5ccd      	ldrb	r5, [r1, r3]
 80227b4:	440b      	add	r3, r1
 80227b6:	9908      	ldr	r1, [sp, #32]
 80227b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80227bc:	460e      	mov	r6, r1
 80227be:	eb01 0c05 	add.w	ip, r1, r5
 80227c2:	2f00      	cmp	r7, #0
 80227c4:	d04b      	beq.n	802285e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 80227c6:	785c      	ldrb	r4, [r3, #1]
 80227c8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80227cc:	440c      	add	r4, r1
 80227ce:	2a00      	cmp	r2, #0
 80227d0:	f000 80c4 	beq.w	802295c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80227d4:	1819      	adds	r1, r3, r0
 80227d6:	7849      	ldrb	r1, [r1, #1]
 80227d8:	5c18      	ldrb	r0, [r3, r0]
 80227da:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80227de:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80227e2:	1873      	adds	r3, r6, r1
 80227e4:	9311      	str	r3, [sp, #68]	; 0x44
 80227e6:	4430      	add	r0, r6
 80227e8:	e03f      	b.n	802286a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80227ea:	1c58      	adds	r0, r3, #1
 80227ec:	d405      	bmi.n	80227fa <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 80227ee:	42a0      	cmp	r0, r4
 80227f0:	dc03      	bgt.n	80227fa <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 80227f2:	1c48      	adds	r0, r1, #1
 80227f4:	d401      	bmi.n	80227fa <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 80227f6:	42a8      	cmp	r0, r5
 80227f8:	dd20      	ble.n	802283c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c4>
 80227fa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80227fc:	f109 0902 	add.w	r9, r9, #2
 8022800:	449b      	add	fp, r3
 8022802:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022804:	4498      	add	r8, r3
 8022806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022808:	2b00      	cmp	r3, #0
 802280a:	dd08      	ble.n	802281e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 802280c:	e9da 4502 	ldrd	r4, r5, [sl, #8]
 8022810:	3b01      	subs	r3, #1
 8022812:	9309      	str	r3, [sp, #36]	; 0x24
 8022814:	ea4f 4128 	mov.w	r1, r8, asr #16
 8022818:	ea4f 432b 	mov.w	r3, fp, asr #16
 802281c:	e7b7      	b.n	802278e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 802281e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022820:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8022824:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022828:	3301      	adds	r3, #1
 802282a:	eb0a 0a43 	add.w	sl, sl, r3, lsl #1
 802282e:	e687      	b.n	8022540 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8022830:	3a01      	subs	r2, #1
 8022832:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8022836:	920a      	str	r2, [sp, #40]	; 0x28
 8022838:	4616      	mov	r6, r2
 802283a:	e7a1      	b.n	8022780 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 802283c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802283e:	b22d      	sxth	r5, r5
 8022840:	b224      	sxth	r4, r4
 8022842:	e9cd 2005 	strd	r2, r0, [sp, #20]
 8022846:	e9cd 1703 	strd	r1, r7, [sp, #12]
 802284a:	9302      	str	r3, [sp, #8]
 802284c:	e9cd 4500 	strd	r4, r5, [sp]
 8022850:	9b08      	ldr	r3, [sp, #32]
 8022852:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022854:	4649      	mov	r1, r9
 8022856:	9812      	ldr	r0, [sp, #72]	; 0x48
 8022858:	f7ff fcf2 	bl	8022240 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 802285c:	e7cd      	b.n	80227fa <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 802285e:	2a00      	cmp	r2, #0
 8022860:	d173      	bne.n	802294a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d2>
 8022862:	4660      	mov	r0, ip
 8022864:	4664      	mov	r4, ip
 8022866:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 802286a:	b2bb      	uxth	r3, r7
 802286c:	b292      	uxth	r2, r2
 802286e:	fb03 f702 	mul.w	r7, r3, r2
 8022872:	011b      	lsls	r3, r3, #4
 8022874:	1bd9      	subs	r1, r3, r7
 8022876:	7826      	ldrb	r6, [r4, #0]
 8022878:	f894 e002 	ldrb.w	lr, [r4, #2]
 802287c:	7864      	ldrb	r4, [r4, #1]
 802287e:	b289      	uxth	r1, r1
 8022880:	fb01 f606 	mul.w	r6, r1, r6
 8022884:	fb01 fe0e 	mul.w	lr, r1, lr
 8022888:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 802288c:	fb01 f104 	mul.w	r1, r1, r4
 8022890:	9c08      	ldr	r4, [sp, #32]
 8022892:	b292      	uxth	r2, r2
 8022894:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8022898:	5d65      	ldrb	r5, [r4, r5]
 802289a:	1a9b      	subs	r3, r3, r2
 802289c:	f89c 4002 	ldrb.w	r4, [ip, #2]
 80228a0:	f89c c001 	ldrb.w	ip, [ip, #1]
 80228a4:	b29b      	uxth	r3, r3
 80228a6:	fb03 e404 	mla	r4, r3, r4, lr
 80228aa:	fb03 6505 	mla	r5, r3, r5, r6
 80228ae:	fb03 130c 	mla	r3, r3, ip, r1
 80228b2:	f890 c001 	ldrb.w	ip, [r0, #1]
 80228b6:	7801      	ldrb	r1, [r0, #0]
 80228b8:	f890 e002 	ldrb.w	lr, [r0, #2]
 80228bc:	fb02 3c0c 	mla	ip, r2, ip, r3
 80228c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80228c2:	fb02 5601 	mla	r6, r2, r1, r5
 80228c6:	fb02 4e0e 	mla	lr, r2, lr, r4
 80228ca:	7899      	ldrb	r1, [r3, #2]
 80228cc:	781a      	ldrb	r2, [r3, #0]
 80228ce:	785b      	ldrb	r3, [r3, #1]
 80228d0:	f8b9 0000 	ldrh.w	r0, [r9]
 80228d4:	fb07 c303 	mla	r3, r7, r3, ip
 80228d8:	fb07 6202 	mla	r2, r7, r2, r6
 80228dc:	00c5      	lsls	r5, r0, #3
 80228de:	1204      	asrs	r4, r0, #8
 80228e0:	fb07 e101 	mla	r1, r7, r1, lr
 80228e4:	10c0      	asrs	r0, r0, #3
 80228e6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80228e8:	b2ed      	uxtb	r5, r5
 80228ea:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80228ee:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80228f2:	fb15 f507 	smulbb	r5, r5, r7
 80228f6:	fb14 f407 	smulbb	r4, r4, r7
 80228fa:	fb10 f007 	smulbb	r0, r0, r7
 80228fe:	f3c3 2707 	ubfx	r7, r3, #8, #8
 8022902:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022904:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8022908:	461e      	mov	r6, r3
 802290a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802290e:	fb02 5203 	mla	r2, r2, r3, r5
 8022912:	fb07 0006 	mla	r0, r7, r6, r0
 8022916:	fb01 4303 	mla	r3, r1, r3, r4
 802291a:	b281      	uxth	r1, r0
 802291c:	b294      	uxth	r4, r2
 802291e:	b29b      	uxth	r3, r3
 8022920:	1c4a      	adds	r2, r1, #1
 8022922:	1c5d      	adds	r5, r3, #1
 8022924:	1c60      	adds	r0, r4, #1
 8022926:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 802292a:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 802292e:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8022932:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8022936:	f3c0 21c4 	ubfx	r1, r0, #11, #5
 802293a:	0952      	lsrs	r2, r2, #5
 802293c:	430b      	orrs	r3, r1
 802293e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022942:	4313      	orrs	r3, r2
 8022944:	f8a9 3000 	strh.w	r3, [r9]
 8022948:	e757      	b.n	80227fa <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 802294a:	5c18      	ldrb	r0, [r3, r0]
 802294c:	9b08      	ldr	r3, [sp, #32]
 802294e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022952:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 8022956:	4418      	add	r0, r3
 8022958:	4664      	mov	r4, ip
 802295a:	e786      	b.n	802286a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 802295c:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 8022960:	4660      	mov	r0, ip
 8022962:	e782      	b.n	802286a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8022964:	f43f adec 	beq.w	8022540 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8022968:	1e6e      	subs	r6, r5, #1
 802296a:	46d4      	mov	ip, sl
 802296c:	e62c      	b.n	80225c8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 802296e:	bf00      	nop

08022970 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8022970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022974:	4692      	mov	sl, r2
 8022976:	b083      	sub	sp, #12
 8022978:	880a      	ldrh	r2, [r1, #0]
 802297a:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 802297e:	e9dd 740e 	ldrd	r7, r4, [sp, #56]	; 0x38
 8022982:	0215      	lsls	r5, r2, #8
 8022984:	0150      	lsls	r0, r2, #5
 8022986:	fb04 7e0c 	mla	lr, r4, ip, r7
 802298a:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 802298e:	f405 0578 	and.w	r5, r5, #16252928	; 0xf80000
 8022992:	00d2      	lsls	r2, r2, #3
 8022994:	4305      	orrs	r5, r0
 8022996:	b2d2      	uxtb	r2, r2
 8022998:	4315      	orrs	r5, r2
 802299a:	2c00      	cmp	r4, #0
 802299c:	9501      	str	r5, [sp, #4]
 802299e:	eb0a 020e 	add.w	r2, sl, lr
 80229a2:	f104 0801 	add.w	r8, r4, #1
 80229a6:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 80229aa:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 80229ae:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80229b2:	db01      	blt.n	80229b8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x48>
 80229b4:	45a1      	cmp	r9, r4
 80229b6:	dc71      	bgt.n	8022a9c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x12c>
 80229b8:	fa5f fa85 	uxtb.w	sl, r5
 80229bc:	f10d 0b04 	add.w	fp, sp, #4
 80229c0:	4654      	mov	r4, sl
 80229c2:	46de      	mov	lr, fp
 80229c4:	f1b8 0f00 	cmp.w	r8, #0
 80229c8:	db01      	blt.n	80229ce <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5e>
 80229ca:	45c1      	cmp	r9, r8
 80229cc:	dc4c      	bgt.n	8022a68 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xf8>
 80229ce:	fa5f f985 	uxtb.w	r9, r5
 80229d2:	ab01      	add	r3, sp, #4
 80229d4:	464d      	mov	r5, r9
 80229d6:	4698      	mov	r8, r3
 80229d8:	2e0f      	cmp	r6, #15
 80229da:	f200 809b 	bhi.w	8022b14 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1a4>
 80229de:	280f      	cmp	r0, #15
 80229e0:	f200 8098 	bhi.w	8022b14 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1a4>
 80229e4:	b2b2      	uxth	r2, r6
 80229e6:	b280      	uxth	r0, r0
 80229e8:	fb02 f700 	mul.w	r7, r2, r0
 80229ec:	0112      	lsls	r2, r2, #4
 80229ee:	f89b c002 	ldrb.w	ip, [fp, #2]
 80229f2:	1bd6      	subs	r6, r2, r7
 80229f4:	f89b b001 	ldrb.w	fp, [fp, #1]
 80229f8:	b2b6      	uxth	r6, r6
 80229fa:	ebc7 1000 	rsb	r0, r7, r0, lsl #4
 80229fe:	fb06 f404 	mul.w	r4, r6, r4
 8022a02:	fb06 fc0c 	mul.w	ip, r6, ip
 8022a06:	fb06 f60b 	mul.w	r6, r6, fp
 8022a0a:	b280      	uxth	r0, r0
 8022a0c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8022a10:	f89e b002 	ldrb.w	fp, [lr, #2]
 8022a14:	1a12      	subs	r2, r2, r0
 8022a16:	f89e e001 	ldrb.w	lr, [lr, #1]
 8022a1a:	b292      	uxth	r2, r2
 8022a1c:	fb02 440a 	mla	r4, r2, sl, r4
 8022a20:	fb02 660e 	mla	r6, r2, lr, r6
 8022a24:	fb02 cc0b 	mla	ip, r2, fp, ip
 8022a28:	f898 a002 	ldrb.w	sl, [r8, #2]
 8022a2c:	f898 8001 	ldrb.w	r8, [r8, #1]
 8022a30:	fb00 4909 	mla	r9, r0, r9, r4
 8022a34:	fb00 cc0a 	mla	ip, r0, sl, ip
 8022a38:	fb00 6008 	mla	r0, r0, r8, r6
 8022a3c:	789e      	ldrb	r6, [r3, #2]
 8022a3e:	785b      	ldrb	r3, [r3, #1]
 8022a40:	fb07 9905 	mla	r9, r7, r5, r9
 8022a44:	fb07 c506 	mla	r5, r7, r6, ip
 8022a48:	fb07 0703 	mla	r7, r7, r3, r0
 8022a4c:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8022a50:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022a54:	097f      	lsrs	r7, r7, #5
 8022a56:	ea45 0509 	orr.w	r5, r5, r9
 8022a5a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022a5e:	433d      	orrs	r5, r7
 8022a60:	800d      	strh	r5, [r1, #0]
 8022a62:	b003      	add	sp, #12
 8022a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a68:	b388      	cbz	r0, 8022ace <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x15e>
 8022a6a:	2f00      	cmp	r7, #0
 8022a6c:	db40      	blt.n	8022af0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x180>
 8022a6e:	45bc      	cmp	ip, r7
 8022a70:	dd3e      	ble.n	8022af0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x180>
 8022a72:	f812 800c 	ldrb.w	r8, [r2, ip]
 8022a76:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022a7a:	4498      	add	r8, r3
 8022a7c:	3701      	adds	r7, #1
 8022a7e:	f898 9000 	ldrb.w	r9, [r8]
 8022a82:	d432      	bmi.n	8022aea <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x17a>
 8022a84:	45bc      	cmp	ip, r7
 8022a86:	dd30      	ble.n	8022aea <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x17a>
 8022a88:	2e00      	cmp	r6, #0
 8022a8a:	d040      	beq.n	8022b0e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x19e>
 8022a8c:	4494      	add	ip, r2
 8022a8e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8022a92:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022a96:	5c9d      	ldrb	r5, [r3, r2]
 8022a98:	4413      	add	r3, r2
 8022a9a:	e79d      	b.n	80229d8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x68>
 8022a9c:	2f00      	cmp	r7, #0
 8022a9e:	db01      	blt.n	8022aa4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x134>
 8022aa0:	45bc      	cmp	ip, r7
 8022aa2:	dc1c      	bgt.n	8022ade <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16e>
 8022aa4:	f10d 0e04 	add.w	lr, sp, #4
 8022aa8:	1c7c      	adds	r4, r7, #1
 8022aaa:	f89e a000 	ldrb.w	sl, [lr]
 8022aae:	d40a      	bmi.n	8022ac6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x156>
 8022ab0:	45a4      	cmp	ip, r4
 8022ab2:	dd08      	ble.n	8022ac6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x156>
 8022ab4:	b1fe      	cbz	r6, 8022af6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x186>
 8022ab6:	f892 b001 	ldrb.w	fp, [r2, #1]
 8022aba:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8022abe:	f813 400b 	ldrb.w	r4, [r3, fp]
 8022ac2:	449b      	add	fp, r3
 8022ac4:	e77e      	b.n	80229c4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x54>
 8022ac6:	b2ec      	uxtb	r4, r5
 8022ac8:	f10d 0b04 	add.w	fp, sp, #4
 8022acc:	e77a      	b.n	80229c4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x54>
 8022ace:	2e0f      	cmp	r6, #15
 8022ad0:	fa5f f985 	uxtb.w	r9, r5
 8022ad4:	d81e      	bhi.n	8022b14 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1a4>
 8022ad6:	ab01      	add	r3, sp, #4
 8022ad8:	4698      	mov	r8, r3
 8022ada:	464d      	mov	r5, r9
 8022adc:	e782      	b.n	80229e4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x74>
 8022ade:	f81a e00e 	ldrb.w	lr, [sl, lr]
 8022ae2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8022ae6:	449e      	add	lr, r3
 8022ae8:	e7de      	b.n	8022aa8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8022aea:	b2ed      	uxtb	r5, r5
 8022aec:	ab01      	add	r3, sp, #4
 8022aee:	e773      	b.n	80229d8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x68>
 8022af0:	f10d 0804 	add.w	r8, sp, #4
 8022af4:	e7c2      	b.n	8022a7c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x10c>
 8022af6:	f1b8 0f00 	cmp.w	r8, #0
 8022afa:	b2ec      	uxtb	r4, r5
 8022afc:	f10d 0b04 	add.w	fp, sp, #4
 8022b00:	f6bf af63 	bge.w	80229ca <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5a>
 8022b04:	465b      	mov	r3, fp
 8022b06:	46d8      	mov	r8, fp
 8022b08:	4625      	mov	r5, r4
 8022b0a:	46a1      	mov	r9, r4
 8022b0c:	e767      	b.n	80229de <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8022b0e:	b2ed      	uxtb	r5, r5
 8022b10:	ab01      	add	r3, sp, #4
 8022b12:	e764      	b.n	80229de <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8022b14:	4b03      	ldr	r3, [pc, #12]	; (8022b24 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1b4>)
 8022b16:	4a04      	ldr	r2, [pc, #16]	; (8022b28 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1b8>)
 8022b18:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8022b1c:	4803      	ldr	r0, [pc, #12]	; (8022b2c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1bc>)
 8022b1e:	f005 faa7 	bl	8028070 <__assert_func>
 8022b22:	bf00      	nop
 8022b24:	0802b2dc 	.word	0x0802b2dc
 8022b28:	0802b954 	.word	0x0802b954
 8022b2c:	0802b460 	.word	0x0802b460

08022b30 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b34:	ed2d 8b0a 	vpush	{d8-d12}
 8022b38:	eeb0 aa40 	vmov.f32	s20, s0
 8022b3c:	eef0 9a60 	vmov.f32	s19, s1
 8022b40:	eeb0 9a41 	vmov.f32	s18, s2
 8022b44:	eef0 8a62 	vmov.f32	s17, s5
 8022b48:	eeb0 8a43 	vmov.f32	s16, s6
 8022b4c:	eeb0 ca44 	vmov.f32	s24, s8
 8022b50:	eef0 ba64 	vmov.f32	s23, s9
 8022b54:	eeb0 ba45 	vmov.f32	s22, s10
 8022b58:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8022b5c:	b093      	sub	sp, #76	; 0x4c
 8022b5e:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8022b62:	e9dd 412b 	ldrd	r4, r1, [sp, #172]	; 0xac
 8022b66:	e9dd 9827 	ldrd	r9, r8, [sp, #156]	; 0x9c
 8022b6a:	9011      	str	r0, [sp, #68]	; 0x44
 8022b6c:	461a      	mov	r2, r3
 8022b6e:	6860      	ldr	r0, [r4, #4]
 8022b70:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8022b72:	f8dd a0a4 	ldr.w	sl, [sp, #164]	; 0xa4
 8022b76:	fb00 1303 	mla	r3, r0, r3, r1
 8022b7a:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8022b7c:	6820      	ldr	r0, [r4, #0]
 8022b7e:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8022b80:	6849      	ldr	r1, [r1, #4]
 8022b82:	6824      	ldr	r4, [r4, #0]
 8022b84:	eb00 0b43 	add.w	fp, r0, r3, lsl #1
 8022b88:	1d0b      	adds	r3, r1, #4
 8022b8a:	9409      	str	r4, [sp, #36]	; 0x24
 8022b8c:	930c      	str	r3, [sp, #48]	; 0x30
 8022b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022b90:	2b00      	cmp	r3, #0
 8022b92:	dc02      	bgt.n	8022b9a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8022b94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022b96:	2b00      	cmp	r3, #0
 8022b98:	dd61      	ble.n	8022c5e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
 8022b9a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022b9c:	2a00      	cmp	r2, #0
 8022b9e:	e9d3 4e02 	ldrd	r4, lr, [r3, #8]
 8022ba2:	b225      	sxth	r5, r4
 8022ba4:	fa0f f78e 	sxth.w	r7, lr
 8022ba8:	f340 81d9 	ble.w	8022f5e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8022bac:	f8cd e01c 	str.w	lr, [sp, #28]
 8022bb0:	f8dd e0a8 	ldr.w	lr, [sp, #168]	; 0xa8
 8022bb4:	1e6e      	subs	r6, r5, #1
 8022bb6:	f107 3cff 	add.w	ip, r7, #4294967295
 8022bba:	ea5f 4329 	movs.w	r3, r9, asr #16
 8022bbe:	ea4f 4128 	mov.w	r1, r8, asr #16
 8022bc2:	d405      	bmi.n	8022bd0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8022bc4:	42b3      	cmp	r3, r6
 8022bc6:	da03      	bge.n	8022bd0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8022bc8:	2900      	cmp	r1, #0
 8022bca:	db01      	blt.n	8022bd0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8022bcc:	4561      	cmp	r1, ip
 8022bce:	db4b      	blt.n	8022c68 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8022bd0:	1c58      	adds	r0, r3, #1
 8022bd2:	d406      	bmi.n	8022be2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8022bd4:	42a8      	cmp	r0, r5
 8022bd6:	dc04      	bgt.n	8022be2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8022bd8:	1c48      	adds	r0, r1, #1
 8022bda:	d402      	bmi.n	8022be2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8022bdc:	42b8      	cmp	r0, r7
 8022bde:	f340 8149 	ble.w	8022e74 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8022be2:	3a01      	subs	r2, #1
 8022be4:	44d1      	add	r9, sl
 8022be6:	44f0      	add	r8, lr
 8022be8:	f10b 0b02 	add.w	fp, fp, #2
 8022bec:	d1e5      	bne.n	8022bba <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8022bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022bf0:	2b00      	cmp	r3, #0
 8022bf2:	dd34      	ble.n	8022c5e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
 8022bf4:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8022bf8:	ee79 9aab 	vadd.f32	s19, s19, s23
 8022bfc:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8022c00:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8022c04:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8022c08:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022c0c:	ee76 6a68 	vsub.f32	s13, s12, s17
 8022c10:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8022c14:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022c18:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8022c1c:	ee16 2a90 	vmov	r2, s13
 8022c20:	3b01      	subs	r3, #1
 8022c22:	930a      	str	r3, [sp, #40]	; 0x28
 8022c24:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022c26:	fb92 faf3 	sdiv	sl, r2, r3
 8022c2a:	ee17 2a10 	vmov	r2, s14
 8022c2e:	eeb0 7a48 	vmov.f32	s14, s16
 8022c32:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8022c36:	ee17 8a10 	vmov	r8, s14
 8022c3a:	eeb0 7a68 	vmov.f32	s14, s17
 8022c3e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022c42:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8022c46:	932a      	str	r3, [sp, #168]	; 0xa8
 8022c48:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022c4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022c4c:	ee17 9a10 	vmov	r9, s14
 8022c50:	eeb0 8a67 	vmov.f32	s16, s15
 8022c54:	eef0 8a46 	vmov.f32	s17, s12
 8022c58:	bf18      	it	ne
 8022c5a:	461a      	movne	r2, r3
 8022c5c:	e797      	b.n	8022b8e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8022c5e:	b013      	add	sp, #76	; 0x4c
 8022c60:	ecbd 8b0a 	vpop	{d8-d12}
 8022c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c68:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8022c6c:	f8cd b01c 	str.w	fp, [sp, #28]
 8022c70:	1e51      	subs	r1, r2, #1
 8022c72:	fb0a 9301 	mla	r3, sl, r1, r9
 8022c76:	141b      	asrs	r3, r3, #16
 8022c78:	9108      	str	r1, [sp, #32]
 8022c7a:	f100 809e 	bmi.w	8022dba <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8022c7e:	42b3      	cmp	r3, r6
 8022c80:	f280 809b 	bge.w	8022dba <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8022c84:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022c86:	fb03 8301 	mla	r3, r3, r1, r8
 8022c8a:	141b      	asrs	r3, r3, #16
 8022c8c:	f100 8095 	bmi.w	8022dba <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8022c90:	3f01      	subs	r7, #1
 8022c92:	42bb      	cmp	r3, r7
 8022c94:	f280 8091 	bge.w	8022dba <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8022c98:	2a00      	cmp	r2, #0
 8022c9a:	dda8      	ble.n	8022bee <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8022c9c:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 8022ca0:	f8cd a0a4 	str.w	sl, [sp, #164]	; 0xa4
 8022ca4:	f8cd b020 	str.w	fp, [sp, #32]
 8022ca8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8022cac:	e060      	b.n	8022d70 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8022cae:	784f      	ldrb	r7, [r1, #1]
 8022cb0:	194c      	adds	r4, r1, r5
 8022cb2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022cb6:	4457      	add	r7, sl
 8022cb8:	2a00      	cmp	r2, #0
 8022cba:	d075      	beq.n	8022da8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8022cbc:	5d48      	ldrb	r0, [r1, r5]
 8022cbe:	7865      	ldrb	r5, [r4, #1]
 8022cc0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022cc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022cc8:	4450      	add	r0, sl
 8022cca:	4455      	add	r5, sl
 8022ccc:	b29b      	uxth	r3, r3
 8022cce:	b292      	uxth	r2, r2
 8022cd0:	fb03 f402 	mul.w	r4, r3, r2
 8022cd4:	011b      	lsls	r3, r3, #4
 8022cd6:	f897 e000 	ldrb.w	lr, [r7]
 8022cda:	f897 c002 	ldrb.w	ip, [r7, #2]
 8022cde:	1b19      	subs	r1, r3, r4
 8022ce0:	787f      	ldrb	r7, [r7, #1]
 8022ce2:	b289      	uxth	r1, r1
 8022ce4:	fb01 fc0c 	mul.w	ip, r1, ip
 8022ce8:	fb01 fe0e 	mul.w	lr, r1, lr
 8022cec:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8022cf0:	fb01 f107 	mul.w	r1, r1, r7
 8022cf4:	b292      	uxth	r2, r2
 8022cf6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8022cfa:	f81a b00b 	ldrb.w	fp, [sl, fp]
 8022cfe:	78b7      	ldrb	r7, [r6, #2]
 8022d00:	1a9b      	subs	r3, r3, r2
 8022d02:	7876      	ldrb	r6, [r6, #1]
 8022d04:	b29b      	uxth	r3, r3
 8022d06:	fb03 ee0b 	mla	lr, r3, fp, lr
 8022d0a:	fb03 c707 	mla	r7, r3, r7, ip
 8022d0e:	fb03 1306 	mla	r3, r3, r6, r1
 8022d12:	f890 b000 	ldrb.w	fp, [r0]
 8022d16:	f890 c002 	ldrb.w	ip, [r0, #2]
 8022d1a:	7841      	ldrb	r1, [r0, #1]
 8022d1c:	fb02 ee0b 	mla	lr, r2, fp, lr
 8022d20:	fb02 3301 	mla	r3, r2, r1, r3
 8022d24:	fb02 770c 	mla	r7, r2, ip, r7
 8022d28:	f895 b000 	ldrb.w	fp, [r5]
 8022d2c:	f895 c002 	ldrb.w	ip, [r5, #2]
 8022d30:	7869      	ldrb	r1, [r5, #1]
 8022d32:	fb04 ee0b 	mla	lr, r4, fp, lr
 8022d36:	fb04 3101 	mla	r1, r4, r1, r3
 8022d3a:	fb04 7c0c 	mla	ip, r4, ip, r7
 8022d3e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022d40:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8022d44:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8022d48:	0949      	lsrs	r1, r1, #5
 8022d4a:	4491      	add	r9, r2
 8022d4c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022d4e:	9b07      	ldr	r3, [sp, #28]
 8022d50:	ea4c 0e0e 	orr.w	lr, ip, lr
 8022d54:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022d58:	ea4e 0e01 	orr.w	lr, lr, r1
 8022d5c:	4490      	add	r8, r2
 8022d5e:	9a08      	ldr	r2, [sp, #32]
 8022d60:	f823 eb02 	strh.w	lr, [r3], #2
 8022d64:	4293      	cmp	r3, r2
 8022d66:	9307      	str	r3, [sp, #28]
 8022d68:	d025      	beq.n	8022db6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 8022d6a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022d6c:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8022d70:	ea4f 4329 	mov.w	r3, r9, asr #16
 8022d74:	ea4f 4128 	mov.w	r1, r8, asr #16
 8022d78:	fb05 3101 	mla	r1, r5, r1, r3
 8022d7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022d7e:	f3c9 3303 	ubfx	r3, r9, #12, #4
 8022d82:	f812 b001 	ldrb.w	fp, [r2, r1]
 8022d86:	4411      	add	r1, r2
 8022d88:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8022d8c:	eb0a 060b 	add.w	r6, sl, fp
 8022d90:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8022d94:	2b00      	cmp	r3, #0
 8022d96:	d18a      	bne.n	8022cae <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8022d98:	b14a      	cbz	r2, 8022dae <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8022d9a:	5d48      	ldrb	r0, [r1, r5]
 8022d9c:	4637      	mov	r7, r6
 8022d9e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022da2:	4635      	mov	r5, r6
 8022da4:	4450      	add	r0, sl
 8022da6:	e791      	b.n	8022ccc <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8022da8:	4635      	mov	r5, r6
 8022daa:	4630      	mov	r0, r6
 8022dac:	e78e      	b.n	8022ccc <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8022dae:	4635      	mov	r5, r6
 8022db0:	4630      	mov	r0, r6
 8022db2:	4637      	mov	r7, r6
 8022db4:	e78a      	b.n	8022ccc <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8022db6:	4693      	mov	fp, r2
 8022db8:	e719      	b.n	8022bee <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8022dba:	2a00      	cmp	r2, #0
 8022dbc:	f77f af17 	ble.w	8022bee <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8022dc0:	9e08      	ldr	r6, [sp, #32]
 8022dc2:	ea4f 4329 	mov.w	r3, r9, asr #16
 8022dc6:	ea4f 4128 	mov.w	r1, r8, asr #16
 8022dca:	465f      	mov	r7, fp
 8022dcc:	f8cd b01c 	str.w	fp, [sp, #28]
 8022dd0:	f8dd b0b8 	ldr.w	fp, [sp, #184]	; 0xb8
 8022dd4:	2b00      	cmp	r3, #0
 8022dd6:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8022dda:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8022dde:	db2a      	blt.n	8022e36 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8022de0:	1e65      	subs	r5, r4, #1
 8022de2:	42ab      	cmp	r3, r5
 8022de4:	da27      	bge.n	8022e36 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8022de6:	2900      	cmp	r1, #0
 8022de8:	db25      	blt.n	8022e36 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8022dea:	f10e 35ff 	add.w	r5, lr, #4294967295
 8022dee:	42a9      	cmp	r1, r5
 8022df0:	da21      	bge.n	8022e36 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8022df2:	b224      	sxth	r4, r4
 8022df4:	fb01 3304 	mla	r3, r1, r4, r3
 8022df8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022dfa:	f811 c003 	ldrb.w	ip, [r1, r3]
 8022dfe:	440b      	add	r3, r1
 8022e00:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022e02:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8022e06:	eb01 0e0c 	add.w	lr, r1, ip
 8022e0a:	2800      	cmp	r0, #0
 8022e0c:	d048      	beq.n	8022ea0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8022e0e:	785d      	ldrb	r5, [r3, #1]
 8022e10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022e14:	440d      	add	r5, r1
 8022e16:	2a00      	cmp	r2, #0
 8022e18:	f000 809e 	beq.w	8022f58 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8022e1c:	1919      	adds	r1, r3, r4
 8022e1e:	7849      	ldrb	r1, [r1, #1]
 8022e20:	5d1c      	ldrb	r4, [r3, r4]
 8022e22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022e24:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022e28:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022e2c:	1859      	adds	r1, r3, r1
 8022e2e:	18e3      	adds	r3, r4, r3
 8022e30:	910f      	str	r1, [sp, #60]	; 0x3c
 8022e32:	9310      	str	r3, [sp, #64]	; 0x40
 8022e34:	e039      	b.n	8022eaa <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8022e36:	1c5d      	adds	r5, r3, #1
 8022e38:	d405      	bmi.n	8022e46 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8022e3a:	42a5      	cmp	r5, r4
 8022e3c:	dc03      	bgt.n	8022e46 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8022e3e:	1c4d      	adds	r5, r1, #1
 8022e40:	d401      	bmi.n	8022e46 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8022e42:	4575      	cmp	r5, lr
 8022e44:	dd1c      	ble.n	8022e80 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8022e46:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022e48:	2e00      	cmp	r6, #0
 8022e4a:	f107 0702 	add.w	r7, r7, #2
 8022e4e:	44d1      	add	r9, sl
 8022e50:	4498      	add	r8, r3
 8022e52:	dd07      	ble.n	8022e64 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 8022e54:	e9db 4e02 	ldrd	r4, lr, [fp, #8]
 8022e58:	3e01      	subs	r6, #1
 8022e5a:	ea4f 4329 	mov.w	r3, r9, asr #16
 8022e5e:	ea4f 4128 	mov.w	r1, r8, asr #16
 8022e62:	e7b7      	b.n	8022dd4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8022e64:	e9dd b307 	ldrd	fp, r3, [sp, #28]
 8022e68:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022e6c:	3301      	adds	r3, #1
 8022e6e:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 8022e72:	e6bc      	b.n	8022bee <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8022e74:	3a01      	subs	r2, #1
 8022e76:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8022e7a:	9208      	str	r2, [sp, #32]
 8022e7c:	4616      	mov	r6, r2
 8022e7e:	e7a4      	b.n	8022dca <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8022e80:	fa0f f58e 	sxth.w	r5, lr
 8022e84:	b224      	sxth	r4, r4
 8022e86:	e9cd 0204 	strd	r0, r2, [sp, #16]
 8022e8a:	e9cd 3102 	strd	r3, r1, [sp, #8]
 8022e8e:	e9cd 4500 	strd	r4, r5, [sp]
 8022e92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022e94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022e96:	4639      	mov	r1, r7
 8022e98:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022e9a:	f7ff fd69 	bl	8022970 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8022e9e:	e7d2      	b.n	8022e46 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8022ea0:	2a00      	cmp	r2, #0
 8022ea2:	d14f      	bne.n	8022f44 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 8022ea4:	4675      	mov	r5, lr
 8022ea6:	e9cd ee0f 	strd	lr, lr, [sp, #60]	; 0x3c
 8022eaa:	b283      	uxth	r3, r0
 8022eac:	b292      	uxth	r2, r2
 8022eae:	fb03 f002 	mul.w	r0, r3, r2
 8022eb2:	782c      	ldrb	r4, [r5, #0]
 8022eb4:	011b      	lsls	r3, r3, #4
 8022eb6:	940e      	str	r4, [sp, #56]	; 0x38
 8022eb8:	78ac      	ldrb	r4, [r5, #2]
 8022eba:	1a19      	subs	r1, r3, r0
 8022ebc:	940d      	str	r4, [sp, #52]	; 0x34
 8022ebe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022ec0:	b289      	uxth	r1, r1
 8022ec2:	fb01 f404 	mul.w	r4, r1, r4
 8022ec6:	940e      	str	r4, [sp, #56]	; 0x38
 8022ec8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022eca:	786d      	ldrb	r5, [r5, #1]
 8022ecc:	fb01 f404 	mul.w	r4, r1, r4
 8022ed0:	ebc0 1202 	rsb	r2, r0, r2, lsl #4
 8022ed4:	fb01 f105 	mul.w	r1, r1, r5
 8022ed8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022eda:	b292      	uxth	r2, r2
 8022edc:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8022ee0:	f815 c00c 	ldrb.w	ip, [r5, ip]
 8022ee4:	940d      	str	r4, [sp, #52]	; 0x34
 8022ee6:	1a9b      	subs	r3, r3, r2
 8022ee8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022eea:	b29b      	uxth	r3, r3
 8022eec:	f89e 5002 	ldrb.w	r5, [lr, #2]
 8022ef0:	fb03 4c0c 	mla	ip, r3, ip, r4
 8022ef4:	f89e e001 	ldrb.w	lr, [lr, #1]
 8022ef8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022efa:	fb03 4505 	mla	r5, r3, r5, r4
 8022efe:	fb03 130e 	mla	r3, r3, lr, r1
 8022f02:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022f04:	78a1      	ldrb	r1, [r4, #2]
 8022f06:	f894 e000 	ldrb.w	lr, [r4]
 8022f0a:	7864      	ldrb	r4, [r4, #1]
 8022f0c:	fb02 5501 	mla	r5, r2, r1, r5
 8022f10:	fb02 cc0e 	mla	ip, r2, lr, ip
 8022f14:	fb02 3104 	mla	r1, r2, r4, r3
 8022f18:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022f1a:	7822      	ldrb	r2, [r4, #0]
 8022f1c:	78a3      	ldrb	r3, [r4, #2]
 8022f1e:	7864      	ldrb	r4, [r4, #1]
 8022f20:	fb00 cc02 	mla	ip, r0, r2, ip
 8022f24:	fb00 5303 	mla	r3, r0, r3, r5
 8022f28:	fb00 1204 	mla	r2, r0, r4, r1
 8022f2c:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8022f30:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8022f34:	0952      	lsrs	r2, r2, #5
 8022f36:	ea43 030c 	orr.w	r3, r3, ip
 8022f3a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022f3e:	4313      	orrs	r3, r2
 8022f40:	803b      	strh	r3, [r7, #0]
 8022f42:	e780      	b.n	8022e46 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8022f44:	5d1c      	ldrb	r4, [r3, r4]
 8022f46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022f48:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022f4c:	18e3      	adds	r3, r4, r3
 8022f4e:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 8022f52:	9310      	str	r3, [sp, #64]	; 0x40
 8022f54:	4675      	mov	r5, lr
 8022f56:	e7a8      	b.n	8022eaa <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8022f58:	e9cd ee0f 	strd	lr, lr, [sp, #60]	; 0x3c
 8022f5c:	e7a5      	b.n	8022eaa <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8022f5e:	f43f ae46 	beq.w	8022bee <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8022f62:	1e6e      	subs	r6, r5, #1
 8022f64:	f8cd b01c 	str.w	fp, [sp, #28]
 8022f68:	e682      	b.n	8022c70 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8022f6a:	bf00      	nop

08022f6c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8022f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f70:	b08b      	sub	sp, #44	; 0x2c
 8022f72:	f9bd 7050 	ldrsh.w	r7, [sp, #80]	; 0x50
 8022f76:	f8b1 c000 	ldrh.w	ip, [r1]
 8022f7a:	e9dd 6416 	ldrd	r6, r4, [sp, #88]	; 0x58
 8022f7e:	fb04 6507 	mla	r5, r4, r7, r6
 8022f82:	9107      	str	r1, [sp, #28]
 8022f84:	ea4f 01ec 	mov.w	r1, ip, asr #3
 8022f88:	ea4f 202c 	mov.w	r0, ip, asr #8
 8022f8c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022f90:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022f94:	469a      	mov	sl, r3
 8022f96:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8022f9a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022f9e:	9105      	str	r1, [sp, #20]
 8022fa0:	2c00      	cmp	r4, #0
 8022fa2:	fa5f f18c 	uxtb.w	r1, ip
 8022fa6:	9004      	str	r0, [sp, #16]
 8022fa8:	9106      	str	r1, [sp, #24]
 8022faa:	eb02 0e05 	add.w	lr, r2, r5
 8022fae:	f104 0801 	add.w	r8, r4, #1
 8022fb2:	f9bd 9054 	ldrsh.w	r9, [sp, #84]	; 0x54
 8022fb6:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
 8022fba:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
 8022fbe:	9308      	str	r3, [sp, #32]
 8022fc0:	db02      	blt.n	8022fc8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8022fc2:	45a1      	cmp	r9, r4
 8022fc4:	f300 8119 	bgt.w	80231fa <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28e>
 8022fc8:	f04f 0c00 	mov.w	ip, #0
 8022fcc:	4665      	mov	r5, ip
 8022fce:	4662      	mov	r2, ip
 8022fd0:	4664      	mov	r4, ip
 8022fd2:	f1b8 0f00 	cmp.w	r8, #0
 8022fd6:	db02      	blt.n	8022fde <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x72>
 8022fd8:	45c1      	cmp	r9, r8
 8022fda:	f300 8127 	bgt.w	802322c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c0>
 8022fde:	f04f 0e00 	mov.w	lr, #0
 8022fe2:	46f0      	mov	r8, lr
 8022fe4:	4676      	mov	r6, lr
 8022fe6:	46f1      	mov	r9, lr
 8022fe8:	290f      	cmp	r1, #15
 8022fea:	f200 815e 	bhi.w	80232aa <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x33e>
 8022fee:	280f      	cmp	r0, #15
 8022ff0:	f200 815b 	bhi.w	80232aa <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x33e>
 8022ff4:	b280      	uxth	r0, r0
 8022ff6:	b289      	uxth	r1, r1
 8022ff8:	fb00 fa01 	mul.w	sl, r0, r1
 8022ffc:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8023000:	b280      	uxth	r0, r0
 8023002:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 8023006:	fb00 fb08 	mul.w	fp, r0, r8
 802300a:	fb0a f70e 	mul.w	r7, sl, lr
 802300e:	9301      	str	r3, [sp, #4]
 8023010:	f009 13ff 	and.w	r3, r9, #16711935	; 0xff00ff
 8023014:	9302      	str	r3, [sp, #8]
 8023016:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 802301a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802301e:	9303      	str	r3, [sp, #12]
 8023020:	0109      	lsls	r1, r1, #4
 8023022:	eba1 090a 	sub.w	r9, r1, sl
 8023026:	fa1f f989 	uxth.w	r9, r9
 802302a:	fb09 f30c 	mul.w	r3, r9, ip
 802302e:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8023032:	1a09      	subs	r1, r1, r0
 8023034:	b289      	uxth	r1, r1
 8023036:	fb01 3305 	mla	r3, r1, r5, r3
 802303a:	445b      	add	r3, fp
 802303c:	443b      	add	r3, r7
 802303e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023042:	2dff      	cmp	r5, #255	; 0xff
 8023044:	9309      	str	r3, [sp, #36]	; 0x24
 8023046:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 802304a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802304e:	d019      	beq.n	8023084 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x118>
 8023050:	fb03 f305 	mul.w	r3, r3, r5
 8023054:	fb04 f405 	mul.w	r4, r4, r5
 8023058:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 802305c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8023060:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8023064:	f504 7780 	add.w	r7, r4, #256	; 0x100
 8023068:	445b      	add	r3, fp
 802306a:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 802306e:	0a1b      	lsrs	r3, r3, #8
 8023070:	0a24      	lsrs	r4, r4, #8
 8023072:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023076:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802307a:	431c      	orrs	r4, r3
 802307c:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8023080:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023084:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023088:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 802308c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023090:	d018      	beq.n	80230c4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x158>
 8023092:	fb05 f50c 	mul.w	r5, r5, ip
 8023096:	fb02 f20c 	mul.w	r2, r2, ip
 802309a:	0a2f      	lsrs	r7, r5, #8
 802309c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80230a0:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 80230a4:	f502 7c80 	add.w	ip, r2, #256	; 0x100
 80230a8:	443d      	add	r5, r7
 80230aa:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80230ae:	0a2d      	lsrs	r5, r5, #8
 80230b0:	0a12      	lsrs	r2, r2, #8
 80230b2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80230b6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80230ba:	432a      	orrs	r2, r5
 80230bc:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 80230c0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80230c4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80230c8:	d01f      	beq.n	802310a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x19e>
 80230ca:	9f02      	ldr	r7, [sp, #8]
 80230cc:	fb07 fb08 	mul.w	fp, r7, r8
 80230d0:	9f03      	ldr	r7, [sp, #12]
 80230d2:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80230d6:	fb07 f808 	mul.w	r8, r7, r8
 80230da:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80230de:	f508 7780 	add.w	r7, r8, #256	; 0x100
 80230e2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80230e6:	eb07 2718 	add.w	r7, r7, r8, lsr #8
 80230ea:	44dc      	add	ip, fp
 80230ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80230f0:	0a3f      	lsrs	r7, r7, #8
 80230f2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80230f6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80230fa:	ea4c 0807 	orr.w	r8, ip, r7
 80230fe:	f008 17ff 	and.w	r7, r8, #16711935	; 0xff00ff
 8023102:	9702      	str	r7, [sp, #8]
 8023104:	f408 477f 	and.w	r7, r8, #65280	; 0xff00
 8023108:	9703      	str	r7, [sp, #12]
 802310a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802310e:	d01d      	beq.n	802314c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1e0>
 8023110:	9f01      	ldr	r7, [sp, #4]
 8023112:	fb06 f60e 	mul.w	r6, r6, lr
 8023116:	fb07 f80e 	mul.w	r8, r7, lr
 802311a:	ea4f 2c18 	mov.w	ip, r8, lsr #8
 802311e:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8023122:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023126:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802312a:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 802312e:	44e0      	add	r8, ip
 8023130:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023134:	0a36      	lsrs	r6, r6, #8
 8023136:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 802313a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802313e:	ea48 0606 	orr.w	r6, r8, r6
 8023142:	f006 17ff 	and.w	r7, r6, #16711935	; 0xff00ff
 8023146:	9701      	str	r7, [sp, #4]
 8023148:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802314c:	f8bd e020 	ldrh.w	lr, [sp, #32]
 8023150:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023152:	fb05 f509 	mul.w	r5, r5, r9
 8023156:	fb07 f70e 	mul.w	r7, r7, lr
 802315a:	f107 0c01 	add.w	ip, r7, #1
 802315e:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8023162:	ea6f 2c1c 	mvn.w	ip, ip, lsr #8
 8023166:	fb02 f209 	mul.w	r2, r2, r9
 802316a:	fb03 5501 	mla	r5, r3, r1, r5
 802316e:	fb04 2201 	mla	r2, r4, r1, r2
 8023172:	9b02      	ldr	r3, [sp, #8]
 8023174:	fa5f fc8c 	uxtb.w	ip, ip
 8023178:	fb03 5500 	mla	r5, r3, r0, r5
 802317c:	9b03      	ldr	r3, [sp, #12]
 802317e:	fb03 2200 	mla	r2, r3, r0, r2
 8023182:	9b01      	ldr	r3, [sp, #4]
 8023184:	fb03 550a 	mla	r5, r3, sl, r5
 8023188:	fb06 2a0a 	mla	sl, r6, sl, r2
 802318c:	9a05      	ldr	r2, [sp, #20]
 802318e:	9b04      	ldr	r3, [sp, #16]
 8023190:	fb12 f10c 	smulbb	r1, r2, ip
 8023194:	9a06      	ldr	r2, [sp, #24]
 8023196:	0a2e      	lsrs	r6, r5, #8
 8023198:	fb13 f30c 	smulbb	r3, r3, ip
 802319c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80231a0:	fb12 fc0c 	smulbb	ip, r2, ip
 80231a4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80231a8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80231ac:	ea46 060a 	orr.w	r6, r6, sl
 80231b0:	0c30      	lsrs	r0, r6, #16
 80231b2:	f3c6 2207 	ubfx	r2, r6, #8, #8
 80231b6:	b2f6      	uxtb	r6, r6
 80231b8:	fb00 330e 	mla	r3, r0, lr, r3
 80231bc:	fb02 120e 	mla	r2, r2, lr, r1
 80231c0:	fb06 c60e 	mla	r6, r6, lr, ip
 80231c4:	b298      	uxth	r0, r3
 80231c6:	b291      	uxth	r1, r2
 80231c8:	b2b6      	uxth	r6, r6
 80231ca:	1c43      	adds	r3, r0, #1
 80231cc:	f106 0e01 	add.w	lr, r6, #1
 80231d0:	1c4a      	adds	r2, r1, #1
 80231d2:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80231d6:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 80231da:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 80231de:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80231e2:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80231e6:	0952      	lsrs	r2, r2, #5
 80231e8:	4333      	orrs	r3, r6
 80231ea:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80231ee:	4313      	orrs	r3, r2
 80231f0:	9a07      	ldr	r2, [sp, #28]
 80231f2:	8013      	strh	r3, [r2, #0]
 80231f4:	b00b      	add	sp, #44	; 0x2c
 80231f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80231fa:	2e00      	cmp	r6, #0
 80231fc:	db01      	blt.n	8023202 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x296>
 80231fe:	42b7      	cmp	r7, r6
 8023200:	dc3c      	bgt.n	802327c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x310>
 8023202:	2500      	movs	r5, #0
 8023204:	462c      	mov	r4, r5
 8023206:	1c72      	adds	r2, r6, #1
 8023208:	d427      	bmi.n	802325a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2ee>
 802320a:	4297      	cmp	r7, r2
 802320c:	dd25      	ble.n	802325a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2ee>
 802320e:	b131      	cbz	r1, 802321e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2b2>
 8023210:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8023214:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8023218:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 802321c:	e6d9      	b.n	8022fd2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x66>
 802321e:	f1b8 0f00 	cmp.w	r8, #0
 8023222:	db3b      	blt.n	802329c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x330>
 8023224:	45c1      	cmp	r9, r8
 8023226:	dd39      	ble.n	802329c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x330>
 8023228:	468c      	mov	ip, r1
 802322a:	460a      	mov	r2, r1
 802322c:	b1c8      	cbz	r0, 8023262 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2f6>
 802322e:	2e00      	cmp	r6, #0
 8023230:	db2d      	blt.n	802328e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x322>
 8023232:	42b7      	cmp	r7, r6
 8023234:	dd2b      	ble.n	802328e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x322>
 8023236:	f81e 8007 	ldrb.w	r8, [lr, r7]
 802323a:	f85a 9028 	ldr.w	r9, [sl, r8, lsl #2]
 802323e:	ea4f 6819 	mov.w	r8, r9, lsr #24
 8023242:	3601      	adds	r6, #1
 8023244:	d41f      	bmi.n	8023286 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x31a>
 8023246:	42b7      	cmp	r7, r6
 8023248:	dd1d      	ble.n	8023286 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x31a>
 802324a:	b321      	cbz	r1, 8023296 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x32a>
 802324c:	4477      	add	r7, lr
 802324e:	787e      	ldrb	r6, [r7, #1]
 8023250:	f85a 6026 	ldr.w	r6, [sl, r6, lsl #2]
 8023254:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8023258:	e6c6      	b.n	8022fe8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x7c>
 802325a:	f04f 0c00 	mov.w	ip, #0
 802325e:	4662      	mov	r2, ip
 8023260:	e6b7      	b.n	8022fd2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x66>
 8023262:	290f      	cmp	r1, #15
 8023264:	d821      	bhi.n	80232aa <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x33e>
 8023266:	b289      	uxth	r1, r1
 8023268:	4682      	mov	sl, r0
 802326a:	4607      	mov	r7, r0
 802326c:	4683      	mov	fp, r0
 802326e:	e9cd 0002 	strd	r0, r0, [sp, #8]
 8023272:	4606      	mov	r6, r0
 8023274:	9001      	str	r0, [sp, #4]
 8023276:	4686      	mov	lr, r0
 8023278:	4680      	mov	r8, r0
 802327a:	e6d1      	b.n	8023020 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb4>
 802327c:	5d52      	ldrb	r2, [r2, r5]
 802327e:	f85a 4022 	ldr.w	r4, [sl, r2, lsl #2]
 8023282:	0e25      	lsrs	r5, r4, #24
 8023284:	e7bf      	b.n	8023206 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x29a>
 8023286:	f04f 0e00 	mov.w	lr, #0
 802328a:	4676      	mov	r6, lr
 802328c:	e6ac      	b.n	8022fe8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x7c>
 802328e:	f04f 0800 	mov.w	r8, #0
 8023292:	46c1      	mov	r9, r8
 8023294:	e7d5      	b.n	8023242 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2d6>
 8023296:	460e      	mov	r6, r1
 8023298:	468e      	mov	lr, r1
 802329a:	e6a8      	b.n	8022fee <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 802329c:	460a      	mov	r2, r1
 802329e:	460e      	mov	r6, r1
 80232a0:	4689      	mov	r9, r1
 80232a2:	468e      	mov	lr, r1
 80232a4:	4688      	mov	r8, r1
 80232a6:	468c      	mov	ip, r1
 80232a8:	e6a1      	b.n	8022fee <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 80232aa:	4b03      	ldr	r3, [pc, #12]	; (80232b8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x34c>)
 80232ac:	4a03      	ldr	r2, [pc, #12]	; (80232bc <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x350>)
 80232ae:	f44f 710f 	mov.w	r1, #572	; 0x23c
 80232b2:	4803      	ldr	r0, [pc, #12]	; (80232c0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x354>)
 80232b4:	f004 fedc 	bl	8028070 <__assert_func>
 80232b8:	0802b2dc 	.word	0x0802b2dc
 80232bc:	0802b954 	.word	0x0802b954
 80232c0:	0802b460 	.word	0x0802b460

080232c4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80232c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232c8:	ed2d 8b08 	vpush	{d8-d11}
 80232cc:	b0a9      	sub	sp, #164	; 0xa4
 80232ce:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 80232d0:	9022      	str	r0, [sp, #136]	; 0x88
 80232d2:	9115      	str	r1, [sp, #84]	; 0x54
 80232d4:	6860      	ldr	r0, [r4, #4]
 80232d6:	9940      	ldr	r1, [sp, #256]	; 0x100
 80232d8:	9219      	str	r2, [sp, #100]	; 0x64
 80232da:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80232dc:	e9dd ba3b 	ldrd	fp, sl, [sp, #236]	; 0xec
 80232e0:	fb00 1202 	mla	r2, r0, r2, r1
 80232e4:	6820      	ldr	r0, [r4, #0]
 80232e6:	46d1      	mov	r9, sl
 80232e8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80232ec:	46da      	mov	sl, fp
 80232ee:	eeb0 aa40 	vmov.f32	s20, s0
 80232f2:	eef0 9a60 	vmov.f32	s19, s1
 80232f6:	eeb0 9a41 	vmov.f32	s18, s2
 80232fa:	eef0 8a62 	vmov.f32	s17, s5
 80232fe:	eeb0 8a43 	vmov.f32	s16, s6
 8023302:	eef0 ba44 	vmov.f32	s23, s8
 8023306:	eeb0 ba64 	vmov.f32	s22, s9
 802330a:	eef0 aa45 	vmov.f32	s21, s10
 802330e:	4693      	mov	fp, r2
 8023310:	9942      	ldr	r1, [sp, #264]	; 0x108
 8023312:	9d42      	ldr	r5, [sp, #264]	; 0x108
 8023314:	6849      	ldr	r1, [r1, #4]
 8023316:	f89d 410c 	ldrb.w	r4, [sp, #268]	; 0x10c
 802331a:	3104      	adds	r1, #4
 802331c:	682d      	ldr	r5, [r5, #0]
 802331e:	910e      	str	r1, [sp, #56]	; 0x38
 8023320:	b2a1      	uxth	r1, r4
 8023322:	9423      	str	r4, [sp, #140]	; 0x8c
 8023324:	9511      	str	r5, [sp, #68]	; 0x44
 8023326:	9112      	str	r1, [sp, #72]	; 0x48
 8023328:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802332a:	2a00      	cmp	r2, #0
 802332c:	dc02      	bgt.n	8023334 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802332e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8023330:	2a00      	cmp	r2, #0
 8023332:	dd65      	ble.n	8023400 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8023334:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8023336:	2b00      	cmp	r3, #0
 8023338:	e9d2 6c02 	ldrd	r6, ip, [r2, #8]
 802333c:	b234      	sxth	r4, r6
 802333e:	fa0f f78c 	sxth.w	r7, ip
 8023342:	f340 8396 	ble.w	8023a72 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ae>
 8023346:	1e65      	subs	r5, r4, #1
 8023348:	f107 3eff 	add.w	lr, r7, #4294967295
 802334c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8023350:	e9dd c83d 	ldrd	ip, r8, [sp, #244]	; 0xf4
 8023354:	ea5f 422a 	movs.w	r2, sl, asr #16
 8023358:	ea4f 4129 	mov.w	r1, r9, asr #16
 802335c:	d405      	bmi.n	802336a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802335e:	42aa      	cmp	r2, r5
 8023360:	da03      	bge.n	802336a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8023362:	2900      	cmp	r1, #0
 8023364:	db01      	blt.n	802336a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8023366:	4571      	cmp	r1, lr
 8023368:	db4f      	blt.n	802340a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 802336a:	1c50      	adds	r0, r2, #1
 802336c:	d406      	bmi.n	802337c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802336e:	42a0      	cmp	r0, r4
 8023370:	dc04      	bgt.n	802337c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8023372:	1c48      	adds	r0, r1, #1
 8023374:	d402      	bmi.n	802337c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8023376:	42b8      	cmp	r0, r7
 8023378:	f340 834f 	ble.w	8023a1a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x756>
 802337c:	3b01      	subs	r3, #1
 802337e:	44e2      	add	sl, ip
 8023380:	44c1      	add	r9, r8
 8023382:	f10b 0b02 	add.w	fp, fp, #2
 8023386:	d1e5      	bne.n	8023354 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023388:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802338a:	2b00      	cmp	r3, #0
 802338c:	dd38      	ble.n	8023400 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 802338e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023392:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023396:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802339a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802339e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80233a2:	ee29 6aa7 	vmul.f32	s12, s19, s15
 80233a6:	ee69 7a27 	vmul.f32	s15, s18, s15
 80233aa:	ee76 6a68 	vsub.f32	s13, s12, s17
 80233ae:	ee37 7ac8 	vsub.f32	s14, s15, s16
 80233b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80233b6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80233ba:	ee16 2a90 	vmov	r2, s13
 80233be:	3b01      	subs	r3, #1
 80233c0:	9315      	str	r3, [sp, #84]	; 0x54
 80233c2:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80233c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80233c8:	ee17 2a10 	vmov	r2, s14
 80233cc:	eeb0 7a48 	vmov.f32	s14, s16
 80233d0:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80233d4:	ee17 9a10 	vmov	r9, s14
 80233d8:	eeb0 7a68 	vmov.f32	s14, s17
 80233dc:	933d      	str	r3, [sp, #244]	; 0xf4
 80233de:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80233e0:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80233e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80233e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80233ea:	933e      	str	r3, [sp, #248]	; 0xf8
 80233ec:	ee17 aa10 	vmov	sl, s14
 80233f0:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80233f2:	eeb0 8a67 	vmov.f32	s16, s15
 80233f6:	eef0 8a46 	vmov.f32	s17, s12
 80233fa:	bf08      	it	eq
 80233fc:	4613      	moveq	r3, r2
 80233fe:	e793      	b.n	8023328 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8023400:	b029      	add	sp, #164	; 0xa4
 8023402:	ecbd 8b08 	vpop	{d8-d11}
 8023406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802340a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 802340e:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8023412:	983d      	ldr	r0, [sp, #244]	; 0xf4
 8023414:	1e59      	subs	r1, r3, #1
 8023416:	fb00 a201 	mla	r2, r0, r1, sl
 802341a:	1412      	asrs	r2, r2, #16
 802341c:	910d      	str	r1, [sp, #52]	; 0x34
 802341e:	f100 8161 	bmi.w	80236e4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8023422:	42aa      	cmp	r2, r5
 8023424:	f280 815e 	bge.w	80236e4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8023428:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 802342a:	fb02 9201 	mla	r2, r2, r1, r9
 802342e:	1412      	asrs	r2, r2, #16
 8023430:	f100 8158 	bmi.w	80236e4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8023434:	3f01      	subs	r7, #1
 8023436:	42ba      	cmp	r2, r7
 8023438:	f280 8154 	bge.w	80236e4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 802343c:	2b00      	cmp	r3, #0
 802343e:	dda3      	ble.n	8023388 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 8023440:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 8023444:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 8023448:	46d0      	mov	r8, sl
 802344a:	4621      	mov	r1, r4
 802344c:	e129      	b.n	80236a2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 802344e:	f893 c001 	ldrb.w	ip, [r3, #1]
 8023452:	f856 502c 	ldr.w	r5, [r6, ip, lsl #2]
 8023456:	9513      	str	r5, [sp, #76]	; 0x4c
 8023458:	0e2d      	lsrs	r5, r5, #24
 802345a:	950a      	str	r5, [sp, #40]	; 0x28
 802345c:	b162      	cbz	r2, 8023478 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 802345e:	185d      	adds	r5, r3, r1
 8023460:	786d      	ldrb	r5, [r5, #1]
 8023462:	5c5b      	ldrb	r3, [r3, r1]
 8023464:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 8023468:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802346c:	9116      	str	r1, [sp, #88]	; 0x58
 802346e:	9314      	str	r3, [sp, #80]	; 0x50
 8023470:	0e09      	lsrs	r1, r1, #24
 8023472:	0e1b      	lsrs	r3, r3, #24
 8023474:	910c      	str	r1, [sp, #48]	; 0x30
 8023476:	930b      	str	r3, [sp, #44]	; 0x2c
 8023478:	b2a4      	uxth	r4, r4
 802347a:	b292      	uxth	r2, r2
 802347c:	fb04 f502 	mul.w	r5, r4, r2
 8023480:	0124      	lsls	r4, r4, #4
 8023482:	1b66      	subs	r6, r4, r5
 8023484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023486:	b2b6      	uxth	r6, r6
 8023488:	fb06 f103 	mul.w	r1, r6, r3
 802348c:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8023490:	b292      	uxth	r2, r2
 8023492:	f5c4 7380 	rsb	r3, r4, #256	; 0x100
 8023496:	1a9b      	subs	r3, r3, r2
 8023498:	b29b      	uxth	r3, r3
 802349a:	fb03 1100 	mla	r1, r3, r0, r1
 802349e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80234a0:	fb02 1104 	mla	r1, r2, r4, r1
 80234a4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80234a6:	fb05 1104 	mla	r1, r5, r4, r1
 80234aa:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80234ae:	2900      	cmp	r1, #0
 80234b0:	f000 80ea 	beq.w	8023688 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c4>
 80234b4:	f007 14ff 	and.w	r4, r7, #16711935	; 0xff00ff
 80234b8:	28ff      	cmp	r0, #255	; 0xff
 80234ba:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80234be:	940f      	str	r4, [sp, #60]	; 0x3c
 80234c0:	970d      	str	r7, [sp, #52]	; 0x34
 80234c2:	d01c      	beq.n	80234fe <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80234c4:	fb04 f400 	mul.w	r4, r4, r0
 80234c8:	4627      	mov	r7, r4
 80234ca:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80234cc:	fb04 fe00 	mul.w	lr, r4, r0
 80234d0:	0a3c      	lsrs	r4, r7, #8
 80234d2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80234d6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80234da:	f50e 7080 	add.w	r0, lr, #256	; 0x100
 80234de:	4427      	add	r7, r4
 80234e0:	eb00 201e 	add.w	r0, r0, lr, lsr #8
 80234e4:	0a3f      	lsrs	r7, r7, #8
 80234e6:	0a00      	lsrs	r0, r0, #8
 80234e8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80234ec:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80234f0:	4307      	orrs	r7, r0
 80234f2:	f007 10ff 	and.w	r0, r7, #16711935	; 0xff00ff
 80234f6:	900f      	str	r0, [sp, #60]	; 0x3c
 80234f8:	f407 407f 	and.w	r0, r7, #65280	; 0xff00
 80234fc:	900d      	str	r0, [sp, #52]	; 0x34
 80234fe:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023500:	f000 1cff 	and.w	ip, r0, #16711935	; 0xff00ff
 8023504:	f400 4e7f 	and.w	lr, r0, #65280	; 0xff00
 8023508:	980a      	ldr	r0, [sp, #40]	; 0x28
 802350a:	28ff      	cmp	r0, #255	; 0xff
 802350c:	d01c      	beq.n	8023548 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 802350e:	fb0c fc00 	mul.w	ip, ip, r0
 8023512:	fb0e fe00 	mul.w	lr, lr, r0
 8023516:	ea4f 241c 	mov.w	r4, ip, lsr #8
 802351a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802351e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023522:	f50e 7080 	add.w	r0, lr, #256	; 0x100
 8023526:	44a4      	add	ip, r4
 8023528:	eb00 2e1e 	add.w	lr, r0, lr, lsr #8
 802352c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023530:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023534:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023538:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802353c:	ea4c 0e0e 	orr.w	lr, ip, lr
 8023540:	f00e 1cff 	and.w	ip, lr, #16711935	; 0xff00ff
 8023544:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023548:	9814      	ldr	r0, [sp, #80]	; 0x50
 802354a:	f000 17ff 	and.w	r7, r0, #16711935	; 0xff00ff
 802354e:	f400 4a7f 	and.w	sl, r0, #65280	; 0xff00
 8023552:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8023554:	28ff      	cmp	r0, #255	; 0xff
 8023556:	d01a      	beq.n	802358e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8023558:	fb07 f700 	mul.w	r7, r7, r0
 802355c:	fb0a fa00 	mul.w	sl, sl, r0
 8023560:	0a3c      	lsrs	r4, r7, #8
 8023562:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023566:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802356a:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 802356e:	4427      	add	r7, r4
 8023570:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8023574:	0a3f      	lsrs	r7, r7, #8
 8023576:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802357a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802357e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023582:	ea47 0a0a 	orr.w	sl, r7, sl
 8023586:	f00a 17ff 	and.w	r7, sl, #16711935	; 0xff00ff
 802358a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802358e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023590:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8023594:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8023598:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802359a:	2cff      	cmp	r4, #255	; 0xff
 802359c:	d01d      	beq.n	80235da <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 802359e:	fb00 f004 	mul.w	r0, r0, r4
 80235a2:	fb0b fb04 	mul.w	fp, fp, r4
 80235a6:	0a04      	lsrs	r4, r0, #8
 80235a8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80235ac:	9418      	str	r4, [sp, #96]	; 0x60
 80235ae:	f50b 7480 	add.w	r4, fp, #256	; 0x100
 80235b2:	9417      	str	r4, [sp, #92]	; 0x5c
 80235b4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80235b6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80235ba:	4420      	add	r0, r4
 80235bc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80235be:	0a00      	lsrs	r0, r0, #8
 80235c0:	eb04 241b 	add.w	r4, r4, fp, lsr #8
 80235c4:	0a24      	lsrs	r4, r4, #8
 80235c6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80235ca:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80235ce:	ea40 0b0b 	orr.w	fp, r0, fp
 80235d2:	f00b 10ff 	and.w	r0, fp, #16711935	; 0xff00ff
 80235d6:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80235da:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80235dc:	fb0c fc06 	mul.w	ip, ip, r6
 80235e0:	fb01 f104 	mul.w	r1, r1, r4
 80235e4:	1c4c      	adds	r4, r1, #1
 80235e6:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 80235ea:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80235ee:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80235f0:	fb0e f606 	mul.w	r6, lr, r6
 80235f4:	fb04 cc03 	mla	ip, r4, r3, ip
 80235f8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80235fa:	fb07 cc02 	mla	ip, r7, r2, ip
 80235fe:	fb04 6603 	mla	r6, r4, r3, r6
 8023602:	fb0a 6602 	mla	r6, sl, r2, r6
 8023606:	fb00 cc05 	mla	ip, r0, r5, ip
 802360a:	fb0b 6605 	mla	r6, fp, r5, r6
 802360e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023612:	0a36      	lsrs	r6, r6, #8
 8023614:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023618:	f406 437f 	and.w	r3, r6, #65280	; 0xff00
 802361c:	ea4c 0303 	orr.w	r3, ip, r3
 8023620:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023622:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023624:	0c1f      	lsrs	r7, r3, #16
 8023626:	f3c3 2607 	ubfx	r6, r3, #8, #8
 802362a:	b2db      	uxtb	r3, r3
 802362c:	8805      	ldrh	r5, [r0, #0]
 802362e:	fb13 f302 	smulbb	r3, r3, r2
 8023632:	fb17 f702 	smulbb	r7, r7, r2
 8023636:	fb16 f602 	smulbb	r6, r6, r2
 802363a:	1228      	asrs	r0, r5, #8
 802363c:	10ea      	asrs	r2, r5, #3
 802363e:	00ed      	lsls	r5, r5, #3
 8023640:	b2c9      	uxtb	r1, r1
 8023642:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023646:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802364a:	b2ed      	uxtb	r5, r5
 802364c:	fb00 7001 	mla	r0, r0, r1, r7
 8023650:	fb02 6201 	mla	r2, r2, r1, r6
 8023654:	fb05 3101 	mla	r1, r5, r1, r3
 8023658:	b280      	uxth	r0, r0
 802365a:	b292      	uxth	r2, r2
 802365c:	b289      	uxth	r1, r1
 802365e:	1c43      	adds	r3, r0, #1
 8023660:	1c4c      	adds	r4, r1, #1
 8023662:	f102 0c01 	add.w	ip, r2, #1
 8023666:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802366a:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 802366e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8023672:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8023676:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802367a:	0952      	lsrs	r2, r2, #5
 802367c:	4308      	orrs	r0, r1
 802367e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023682:	4302      	orrs	r2, r0
 8023684:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023686:	8002      	strh	r2, [r0, #0]
 8023688:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 802368a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802368c:	4490      	add	r8, r2
 802368e:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8023690:	3302      	adds	r3, #2
 8023692:	4491      	add	r9, r2
 8023694:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023696:	9309      	str	r3, [sp, #36]	; 0x24
 8023698:	4293      	cmp	r3, r2
 802369a:	d021      	beq.n	80236e0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 802369c:	9b42      	ldr	r3, [sp, #264]	; 0x108
 802369e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80236a2:	ea4f 4228 	mov.w	r2, r8, asr #16
 80236a6:	ea4f 4329 	mov.w	r3, r9, asr #16
 80236aa:	fb01 2303 	mla	r3, r1, r3, r2
 80236ae:	9811      	ldr	r0, [sp, #68]	; 0x44
 80236b0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80236b2:	5cc2      	ldrb	r2, [r0, r3]
 80236b4:	f3c8 3403 	ubfx	r4, r8, #12, #4
 80236b8:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 80236bc:	4403      	add	r3, r0
 80236be:	f3c9 3203 	ubfx	r2, r9, #12, #4
 80236c2:	0e38      	lsrs	r0, r7, #24
 80236c4:	2c00      	cmp	r4, #0
 80236c6:	f47f aec2 	bne.w	802344e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80236ca:	2a00      	cmp	r2, #0
 80236cc:	f43f aed4 	beq.w	8023478 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80236d0:	5c5b      	ldrb	r3, [r3, r1]
 80236d2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80236d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80236d8:	9314      	str	r3, [sp, #80]	; 0x50
 80236da:	0e1b      	lsrs	r3, r3, #24
 80236dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80236de:	e6cb      	b.n	8023478 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80236e0:	4693      	mov	fp, r2
 80236e2:	e651      	b.n	8023388 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 80236e4:	2b00      	cmp	r3, #0
 80236e6:	f77f ae4f 	ble.w	8023388 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 80236ea:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80236ee:	ea4f 422a 	mov.w	r2, sl, asr #16
 80236f2:	ea4f 4129 	mov.w	r1, r9, asr #16
 80236f6:	2a00      	cmp	r2, #0
 80236f8:	465f      	mov	r7, fp
 80236fa:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80236fe:	9c42      	ldr	r4, [sp, #264]	; 0x108
 8023700:	e9dd 5b3d 	ldrd	r5, fp, [sp, #244]	; 0xf4
 8023704:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8023708:	f3c9 3e03 	ubfx	lr, r9, #12, #4
 802370c:	f2c0 815c 	blt.w	80239c8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8023710:	1e73      	subs	r3, r6, #1
 8023712:	429a      	cmp	r2, r3
 8023714:	f280 8158 	bge.w	80239c8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8023718:	2900      	cmp	r1, #0
 802371a:	f2c0 8155 	blt.w	80239c8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 802371e:	f10c 33ff 	add.w	r3, ip, #4294967295
 8023722:	4299      	cmp	r1, r3
 8023724:	f280 8150 	bge.w	80239c8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8023728:	b233      	sxth	r3, r6
 802372a:	fb01 2203 	mla	r2, r1, r3, r2
 802372e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8023730:	930f      	str	r3, [sp, #60]	; 0x3c
 8023732:	5c8b      	ldrb	r3, [r1, r2]
 8023734:	440a      	add	r2, r1
 8023736:	4616      	mov	r6, r2
 8023738:	9210      	str	r2, [sp, #64]	; 0x40
 802373a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802373c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8023740:	0e0b      	lsrs	r3, r1, #24
 8023742:	2800      	cmp	r0, #0
 8023744:	f000 816f 	beq.w	8023a26 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x762>
 8023748:	f896 c001 	ldrb.w	ip, [r6, #1]
 802374c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8023750:	9224      	str	r2, [sp, #144]	; 0x90
 8023752:	0e12      	lsrs	r2, r2, #24
 8023754:	921a      	str	r2, [sp, #104]	; 0x68
 8023756:	f1be 0f00 	cmp.w	lr, #0
 802375a:	f040 8172 	bne.w	8023a42 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
 802375e:	b280      	uxth	r0, r0
 8023760:	fa1f fc8e 	uxth.w	ip, lr
 8023764:	fb00 f20c 	mul.w	r2, r0, ip
 8023768:	0106      	lsls	r6, r0, #4
 802376a:	1ab0      	subs	r0, r6, r2
 802376c:	b280      	uxth	r0, r0
 802376e:	4686      	mov	lr, r0
 8023770:	900f      	str	r0, [sp, #60]	; 0x3c
 8023772:	981a      	ldr	r0, [sp, #104]	; 0x68
 8023774:	ebc2 1c0c 	rsb	ip, r2, ip, lsl #4
 8023778:	fb0e f000 	mul.w	r0, lr, r0
 802377c:	f5c6 7680 	rsb	r6, r6, #256	; 0x100
 8023780:	fa1f fe8c 	uxth.w	lr, ip
 8023784:	eba6 060e 	sub.w	r6, r6, lr
 8023788:	b2b6      	uxth	r6, r6
 802378a:	fb06 0003 	mla	r0, r6, r3, r0
 802378e:	9610      	str	r6, [sp, #64]	; 0x40
 8023790:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8023792:	fb0e 0006 	mla	r0, lr, r6, r0
 8023796:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8023798:	fb02 0006 	mla	r0, r2, r6, r0
 802379c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80237a0:	9017      	str	r0, [sp, #92]	; 0x5c
 80237a2:	2800      	cmp	r0, #0
 80237a4:	f000 80fa 	beq.w	802399c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 80237a8:	f001 10ff 	and.w	r0, r1, #16711935	; 0xff00ff
 80237ac:	2bff      	cmp	r3, #255	; 0xff
 80237ae:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80237b2:	9018      	str	r0, [sp, #96]	; 0x60
 80237b4:	911d      	str	r1, [sp, #116]	; 0x74
 80237b6:	d01b      	beq.n	80237f0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52c>
 80237b8:	fb01 f103 	mul.w	r1, r1, r3
 80237bc:	fb00 f003 	mul.w	r0, r0, r3
 80237c0:	460b      	mov	r3, r1
 80237c2:	0a01      	lsrs	r1, r0, #8
 80237c4:	f100 1601 	add.w	r6, r0, #65537	; 0x10001
 80237c8:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80237cc:	f503 7080 	add.w	r0, r3, #256	; 0x100
 80237d0:	4431      	add	r1, r6
 80237d2:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80237d6:	0a09      	lsrs	r1, r1, #8
 80237d8:	0a1b      	lsrs	r3, r3, #8
 80237da:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80237de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80237e2:	430b      	orrs	r3, r1
 80237e4:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 80237e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80237ec:	9118      	str	r1, [sp, #96]	; 0x60
 80237ee:	931d      	str	r3, [sp, #116]	; 0x74
 80237f0:	9924      	ldr	r1, [sp, #144]	; 0x90
 80237f2:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80237f4:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 80237f8:	2eff      	cmp	r6, #255	; 0xff
 80237fa:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80237fe:	931e      	str	r3, [sp, #120]	; 0x78
 8023800:	911f      	str	r1, [sp, #124]	; 0x7c
 8023802:	d01b      	beq.n	802383c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x578>
 8023804:	fb01 f106 	mul.w	r1, r1, r6
 8023808:	fb03 f306 	mul.w	r3, r3, r6
 802380c:	460e      	mov	r6, r1
 802380e:	0a19      	lsrs	r1, r3, #8
 8023810:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 8023814:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8023818:	f506 7380 	add.w	r3, r6, #256	; 0x100
 802381c:	4401      	add	r1, r0
 802381e:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8023822:	0a09      	lsrs	r1, r1, #8
 8023824:	0a1b      	lsrs	r3, r3, #8
 8023826:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802382a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802382e:	4319      	orrs	r1, r3
 8023830:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8023834:	931e      	str	r3, [sp, #120]	; 0x78
 8023836:	f401 437f 	and.w	r3, r1, #65280	; 0xff00
 802383a:	931f      	str	r3, [sp, #124]	; 0x7c
 802383c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802383e:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 8023842:	f403 4c7f 	and.w	ip, r3, #65280	; 0xff00
 8023846:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023848:	9120      	str	r1, [sp, #128]	; 0x80
 802384a:	2bff      	cmp	r3, #255	; 0xff
 802384c:	d01c      	beq.n	8023888 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 802384e:	fb01 f103 	mul.w	r1, r1, r3
 8023852:	4608      	mov	r0, r1
 8023854:	fb0c fc03 	mul.w	ip, ip, r3
 8023858:	0a09      	lsrs	r1, r1, #8
 802385a:	f50c 7380 	add.w	r3, ip, #256	; 0x100
 802385e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8023862:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8023866:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802386a:	4408      	add	r0, r1
 802386c:	0a00      	lsrs	r0, r0, #8
 802386e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023872:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8023876:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802387a:	ea40 0c0c 	orr.w	ip, r0, ip
 802387e:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8023882:	9320      	str	r3, [sp, #128]	; 0x80
 8023884:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023888:	9927      	ldr	r1, [sp, #156]	; 0x9c
 802388a:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 802388e:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
 8023892:	991c      	ldr	r1, [sp, #112]	; 0x70
 8023894:	9321      	str	r3, [sp, #132]	; 0x84
 8023896:	29ff      	cmp	r1, #255	; 0xff
 8023898:	d019      	beq.n	80238ce <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60a>
 802389a:	fb03 f301 	mul.w	r3, r3, r1
 802389e:	fb06 f601 	mul.w	r6, r6, r1
 80238a2:	0a19      	lsrs	r1, r3, #8
 80238a4:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80238a8:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80238ac:	f506 7080 	add.w	r0, r6, #256	; 0x100
 80238b0:	4419      	add	r1, r3
 80238b2:	eb00 2616 	add.w	r6, r0, r6, lsr #8
 80238b6:	0a09      	lsrs	r1, r1, #8
 80238b8:	0a36      	lsrs	r6, r6, #8
 80238ba:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80238be:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80238c2:	430e      	orrs	r6, r1
 80238c4:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 80238c8:	9321      	str	r3, [sp, #132]	; 0x84
 80238ca:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80238ce:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80238d0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80238d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80238d4:	fb00 f001 	mul.w	r0, r0, r1
 80238d8:	4601      	mov	r1, r0
 80238da:	3001      	adds	r0, #1
 80238dc:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80238e0:	ea6f 2011 	mvn.w	r0, r1, lsr #8
 80238e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80238e6:	9025      	str	r0, [sp, #148]	; 0x94
 80238e8:	981e      	ldr	r0, [sp, #120]	; 0x78
 80238ea:	fb00 f001 	mul.w	r0, r0, r1
 80238ee:	900f      	str	r0, [sp, #60]	; 0x3c
 80238f0:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80238f2:	fb00 f001 	mul.w	r0, r0, r1
 80238f6:	9017      	str	r0, [sp, #92]	; 0x5c
 80238f8:	9818      	ldr	r0, [sp, #96]	; 0x60
 80238fa:	4601      	mov	r1, r0
 80238fc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80238fe:	fb01 0003 	mla	r0, r1, r3, r0
 8023902:	900f      	str	r0, [sp, #60]	; 0x3c
 8023904:	981d      	ldr	r0, [sp, #116]	; 0x74
 8023906:	4601      	mov	r1, r0
 8023908:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802390a:	fb01 0103 	mla	r1, r1, r3, r0
 802390e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023910:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8023912:	fb0c 110e 	mla	r1, ip, lr, r1
 8023916:	fb03 000e 	mla	r0, r3, lr, r0
 802391a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802391c:	f89d e094 	ldrb.w	lr, [sp, #148]	; 0x94
 8023920:	fb03 0002 	mla	r0, r3, r2, r0
 8023924:	fb06 1302 	mla	r3, r6, r2, r1
 8023928:	0a02      	lsrs	r2, r0, #8
 802392a:	0a1b      	lsrs	r3, r3, #8
 802392c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023930:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023934:	4313      	orrs	r3, r2
 8023936:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023938:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 802393c:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8023940:	b2db      	uxtb	r3, r3
 8023942:	8838      	ldrh	r0, [r7, #0]
 8023944:	fb16 f602 	smulbb	r6, r6, r2
 8023948:	fb1c fc02 	smulbb	ip, ip, r2
 802394c:	fb13 f302 	smulbb	r3, r3, r2
 8023950:	1201      	asrs	r1, r0, #8
 8023952:	10c2      	asrs	r2, r0, #3
 8023954:	00c0      	lsls	r0, r0, #3
 8023956:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802395a:	b2c0      	uxtb	r0, r0
 802395c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023960:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023964:	fb02 620e 	mla	r2, r2, lr, r6
 8023968:	fb00 330e 	mla	r3, r0, lr, r3
 802396c:	b296      	uxth	r6, r2
 802396e:	b29b      	uxth	r3, r3
 8023970:	fa1f fc8c 	uxth.w	ip, ip
 8023974:	1c58      	adds	r0, r3, #1
 8023976:	f10c 0201 	add.w	r2, ip, #1
 802397a:	1c71      	adds	r1, r6, #1
 802397c:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 8023980:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8023984:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8023988:	f402 4378 	and.w	r3, r2, #63488	; 0xf800
 802398c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8023990:	094a      	lsrs	r2, r1, #5
 8023992:	4303      	orrs	r3, r0
 8023994:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023998:	4313      	orrs	r3, r2
 802399a:	803b      	strh	r3, [r7, #0]
 802399c:	f1b8 0f00 	cmp.w	r8, #0
 80239a0:	f107 0702 	add.w	r7, r7, #2
 80239a4:	44aa      	add	sl, r5
 80239a6:	44d9      	add	r9, fp
 80239a8:	dd2e      	ble.n	8023a08 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 80239aa:	e9d4 6c02 	ldrd	r6, ip, [r4, #8]
 80239ae:	ea4f 422a 	mov.w	r2, sl, asr #16
 80239b2:	2a00      	cmp	r2, #0
 80239b4:	f108 38ff 	add.w	r8, r8, #4294967295
 80239b8:	ea4f 4129 	mov.w	r1, r9, asr #16
 80239bc:	f3ca 3003 	ubfx	r0, sl, #12, #4
 80239c0:	f3c9 3e03 	ubfx	lr, r9, #12, #4
 80239c4:	f6bf aea4 	bge.w	8023710 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 80239c8:	1c53      	adds	r3, r2, #1
 80239ca:	d4e7      	bmi.n	802399c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 80239cc:	42b3      	cmp	r3, r6
 80239ce:	dce5      	bgt.n	802399c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 80239d0:	1c4b      	adds	r3, r1, #1
 80239d2:	d4e3      	bmi.n	802399c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 80239d4:	4563      	cmp	r3, ip
 80239d6:	dce1      	bgt.n	802399c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 80239d8:	fa0f f38c 	sxth.w	r3, ip
 80239dc:	b236      	sxth	r6, r6
 80239de:	e9cd 6300 	strd	r6, r3, [sp]
 80239e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80239e4:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80239e8:	e9cd e305 	strd	lr, r3, [sp, #20]
 80239ec:	9202      	str	r2, [sp, #8]
 80239ee:	4639      	mov	r1, r7
 80239f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80239f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80239f4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80239f6:	f7ff fab9 	bl	8022f6c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 80239fa:	f1b8 0f00 	cmp.w	r8, #0
 80239fe:	f107 0702 	add.w	r7, r7, #2
 8023a02:	44aa      	add	sl, r5
 8023a04:	44d9      	add	r9, fp
 8023a06:	dcd0      	bgt.n	80239aa <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e6>
 8023a08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023a0a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8023a0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023a12:	3301      	adds	r3, #1
 8023a14:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 8023a18:	e4b6      	b.n	8023388 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 8023a1a:	3b01      	subs	r3, #1
 8023a1c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8023a20:	930d      	str	r3, [sp, #52]	; 0x34
 8023a22:	4698      	mov	r8, r3
 8023a24:	e667      	b.n	80236f6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 8023a26:	f1be 0f00 	cmp.w	lr, #0
 8023a2a:	f43f ae98 	beq.w	802375e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8023a2e:	4632      	mov	r2, r6
 8023a30:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8023a32:	5d92      	ldrb	r2, [r2, r6]
 8023a34:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8023a36:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8023a3a:	9226      	str	r2, [sp, #152]	; 0x98
 8023a3c:	0e12      	lsrs	r2, r2, #24
 8023a3e:	921b      	str	r2, [sp, #108]	; 0x6c
 8023a40:	e68d      	b.n	802375e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8023a42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023a44:	eb06 0c02 	add.w	ip, r6, r2
 8023a48:	4632      	mov	r2, r6
 8023a4a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8023a4c:	f89c c001 	ldrb.w	ip, [ip, #1]
 8023a50:	5d92      	ldrb	r2, [r2, r6]
 8023a52:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8023a54:	9210      	str	r2, [sp, #64]	; 0x40
 8023a56:	f856 202c 	ldr.w	r2, [r6, ip, lsl #2]
 8023a5a:	920f      	str	r2, [sp, #60]	; 0x3c
 8023a5c:	9227      	str	r2, [sp, #156]	; 0x9c
 8023a5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023a60:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8023a64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023a66:	9626      	str	r6, [sp, #152]	; 0x98
 8023a68:	0e12      	lsrs	r2, r2, #24
 8023a6a:	921c      	str	r2, [sp, #112]	; 0x70
 8023a6c:	0e32      	lsrs	r2, r6, #24
 8023a6e:	921b      	str	r2, [sp, #108]	; 0x6c
 8023a70:	e675      	b.n	802375e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8023a72:	f43f ac89 	beq.w	8023388 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 8023a76:	1e65      	subs	r5, r4, #1
 8023a78:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8023a7c:	e4c9      	b.n	8023412 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8023a7e:	bf00      	nop

08023a80 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8023a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a84:	b089      	sub	sp, #36	; 0x24
 8023a86:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
 8023a8a:	880f      	ldrh	r7, [r1, #0]
 8023a8c:	e9dd 5014 	ldrd	r5, r0, [sp, #80]	; 0x50
 8023a90:	fb00 5408 	mla	r4, r0, r8, r5
 8023a94:	9106      	str	r1, [sp, #24]
 8023a96:	10f9      	asrs	r1, r7, #3
 8023a98:	123e      	asrs	r6, r7, #8
 8023a9a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023a9e:	00ff      	lsls	r7, r7, #3
 8023aa0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8023aa4:	9104      	str	r1, [sp, #16]
 8023aa6:	2800      	cmp	r0, #0
 8023aa8:	b2f9      	uxtb	r1, r7
 8023aaa:	9105      	str	r1, [sp, #20]
 8023aac:	9603      	str	r6, [sp, #12]
 8023aae:	eb02 0704 	add.w	r7, r2, r4
 8023ab2:	f100 0c01 	add.w	ip, r0, #1
 8023ab6:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 8023aba:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 8023abe:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
 8023ac2:	db02      	blt.n	8023aca <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x4a>
 8023ac4:	4582      	cmp	sl, r0
 8023ac6:	f300 8113 	bgt.w	8023cf0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8023aca:	2600      	movs	r6, #0
 8023acc:	46b1      	mov	r9, r6
 8023ace:	4630      	mov	r0, r6
 8023ad0:	4634      	mov	r4, r6
 8023ad2:	f1bc 0f00 	cmp.w	ip, #0
 8023ad6:	db02      	blt.n	8023ade <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5e>
 8023ad8:	45e2      	cmp	sl, ip
 8023ada:	f300 8123 	bgt.w	8023d24 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a4>
 8023ade:	2700      	movs	r7, #0
 8023ae0:	46bc      	mov	ip, r7
 8023ae2:	463d      	mov	r5, r7
 8023ae4:	9702      	str	r7, [sp, #8]
 8023ae6:	f1be 0f0f 	cmp.w	lr, #15
 8023aea:	f200 8160 	bhi.w	8023dae <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x32e>
 8023aee:	290f      	cmp	r1, #15
 8023af0:	f200 815d 	bhi.w	8023dae <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x32e>
 8023af4:	b289      	uxth	r1, r1
 8023af6:	fa1f f38e 	uxth.w	r3, lr
 8023afa:	fb01 f803 	mul.w	r8, r1, r3
 8023afe:	f005 12ff 	and.w	r2, r5, #16711935	; 0xff00ff
 8023b02:	9200      	str	r2, [sp, #0]
 8023b04:	9a02      	ldr	r2, [sp, #8]
 8023b06:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8023b0a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023b0e:	b289      	uxth	r1, r1
 8023b10:	9201      	str	r2, [sp, #4]
 8023b12:	fb01 fa0c 	mul.w	sl, r1, ip
 8023b16:	9a02      	ldr	r2, [sp, #8]
 8023b18:	fb08 fb07 	mul.w	fp, r8, r7
 8023b1c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023b20:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8023b24:	9202      	str	r2, [sp, #8]
 8023b26:	011b      	lsls	r3, r3, #4
 8023b28:	eba3 0e08 	sub.w	lr, r3, r8
 8023b2c:	fa1f fe8e 	uxth.w	lr, lr
 8023b30:	fb0e f206 	mul.w	r2, lr, r6
 8023b34:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8023b38:	1a5b      	subs	r3, r3, r1
 8023b3a:	b29b      	uxth	r3, r3
 8023b3c:	fb03 2209 	mla	r2, r3, r9, r2
 8023b40:	4452      	add	r2, sl
 8023b42:	445a      	add	r2, fp
 8023b44:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023b48:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023b4c:	9207      	str	r2, [sp, #28]
 8023b4e:	f004 12ff 	and.w	r2, r4, #16711935	; 0xff00ff
 8023b52:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023b56:	d019      	beq.n	8023b8c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x10c>
 8023b58:	fb02 f209 	mul.w	r2, r2, r9
 8023b5c:	fb04 f409 	mul.w	r4, r4, r9
 8023b60:	ea4f 2b12 	mov.w	fp, r2, lsr #8
 8023b64:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8023b68:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 8023b6c:	f504 7a80 	add.w	sl, r4, #256	; 0x100
 8023b70:	445a      	add	r2, fp
 8023b72:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8023b76:	0a12      	lsrs	r2, r2, #8
 8023b78:	0a24      	lsrs	r4, r4, #8
 8023b7a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023b7e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023b82:	4314      	orrs	r4, r2
 8023b84:	f004 12ff 	and.w	r2, r4, #16711935	; 0xff00ff
 8023b88:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023b8c:	2eff      	cmp	r6, #255	; 0xff
 8023b8e:	f000 1aff 	and.w	sl, r0, #16711935	; 0xff00ff
 8023b92:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023b96:	d01b      	beq.n	8023bd0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x150>
 8023b98:	fb0a fa06 	mul.w	sl, sl, r6
 8023b9c:	fb00 f006 	mul.w	r0, r0, r6
 8023ba0:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 8023ba4:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8023ba8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023bac:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8023bb0:	44da      	add	sl, fp
 8023bb2:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8023bb6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023bba:	0a00      	lsrs	r0, r0, #8
 8023bbc:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8023bc0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023bc4:	ea4a 0000 	orr.w	r0, sl, r0
 8023bc8:	f000 1aff 	and.w	sl, r0, #16711935	; 0xff00ff
 8023bcc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023bd0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023bd4:	d020      	beq.n	8023c18 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x198>
 8023bd6:	9e01      	ldr	r6, [sp, #4]
 8023bd8:	fb06 fb0c 	mul.w	fp, r6, ip
 8023bdc:	9e02      	ldr	r6, [sp, #8]
 8023bde:	ea4f 291b 	mov.w	r9, fp, lsr #8
 8023be2:	fb06 fc0c 	mul.w	ip, r6, ip
 8023be6:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 8023bea:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8023bee:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023bf2:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8023bf6:	44cb      	add	fp, r9
 8023bf8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023bfc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023c00:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8023c04:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023c08:	ea4b 0c0c 	orr.w	ip, fp, ip
 8023c0c:	f00c 16ff 	and.w	r6, ip, #16711935	; 0xff00ff
 8023c10:	9601      	str	r6, [sp, #4]
 8023c12:	f40c 467f 	and.w	r6, ip, #65280	; 0xff00
 8023c16:	9602      	str	r6, [sp, #8]
 8023c18:	2fff      	cmp	r7, #255	; 0xff
 8023c1a:	d01d      	beq.n	8023c58 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1d8>
 8023c1c:	9e00      	ldr	r6, [sp, #0]
 8023c1e:	fb05 f507 	mul.w	r5, r5, r7
 8023c22:	fb06 fb07 	mul.w	fp, r6, r7
 8023c26:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8023c2a:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8023c2e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023c32:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023c36:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8023c3a:	44e3      	add	fp, ip
 8023c3c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023c40:	0a2d      	lsrs	r5, r5, #8
 8023c42:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8023c46:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8023c4a:	ea4b 0505 	orr.w	r5, fp, r5
 8023c4e:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 8023c52:	9600      	str	r6, [sp, #0]
 8023c54:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8023c58:	9e07      	ldr	r6, [sp, #28]
 8023c5a:	fb0a fa0e 	mul.w	sl, sl, lr
 8023c5e:	43f7      	mvns	r7, r6
 8023c60:	fb00 f00e 	mul.w	r0, r0, lr
 8023c64:	fb02 aa03 	mla	sl, r2, r3, sl
 8023c68:	fb04 0003 	mla	r0, r4, r3, r0
 8023c6c:	9b01      	ldr	r3, [sp, #4]
 8023c6e:	b2ff      	uxtb	r7, r7
 8023c70:	fb03 aa01 	mla	sl, r3, r1, sl
 8023c74:	9b02      	ldr	r3, [sp, #8]
 8023c76:	fb03 0c01 	mla	ip, r3, r1, r0
 8023c7a:	9b00      	ldr	r3, [sp, #0]
 8023c7c:	9803      	ldr	r0, [sp, #12]
 8023c7e:	fb03 aa08 	mla	sl, r3, r8, sl
 8023c82:	9b05      	ldr	r3, [sp, #20]
 8023c84:	9904      	ldr	r1, [sp, #16]
 8023c86:	fb03 f307 	mul.w	r3, r3, r7
 8023c8a:	fb00 f007 	mul.w	r0, r0, r7
 8023c8e:	fb01 f107 	mul.w	r1, r1, r7
 8023c92:	461f      	mov	r7, r3
 8023c94:	fb05 c808 	mla	r8, r5, r8, ip
 8023c98:	ea4f 251a 	mov.w	r5, sl, lsr #8
 8023c9c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023ca0:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8023ca4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023ca8:	ea45 0508 	orr.w	r5, r5, r8
 8023cac:	f100 0c01 	add.w	ip, r0, #1
 8023cb0:	1c4e      	adds	r6, r1, #1
 8023cb2:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8023cb6:	0c2c      	lsrs	r4, r5, #16
 8023cb8:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8023cbc:	1c78      	adds	r0, r7, #1
 8023cbe:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 8023cc2:	4b3e      	ldr	r3, [pc, #248]	; (8023dbc <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x33c>)
 8023cc4:	eb04 241c 	add.w	r4, r4, ip, lsr #8
 8023cc8:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8023ccc:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8023cd0:	b2ed      	uxtb	r5, r5
 8023cd2:	ea03 2304 	and.w	r3, r3, r4, lsl #8
 8023cd6:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 8023cda:	00d2      	lsls	r2, r2, #3
 8023cdc:	ea43 05d5 	orr.w	r5, r3, r5, lsr #3
 8023ce0:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 8023ce4:	431d      	orrs	r5, r3
 8023ce6:	9b06      	ldr	r3, [sp, #24]
 8023ce8:	801d      	strh	r5, [r3, #0]
 8023cea:	b009      	add	sp, #36	; 0x24
 8023cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023cf0:	2d00      	cmp	r5, #0
 8023cf2:	db01      	blt.n	8023cf8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x278>
 8023cf4:	45a8      	cmp	r8, r5
 8023cf6:	dc41      	bgt.n	8023d7c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2fc>
 8023cf8:	f04f 0900 	mov.w	r9, #0
 8023cfc:	464c      	mov	r4, r9
 8023cfe:	1c6a      	adds	r2, r5, #1
 8023d00:	d42a      	bmi.n	8023d58 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2d8>
 8023d02:	4590      	cmp	r8, r2
 8023d04:	dd28      	ble.n	8023d58 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2d8>
 8023d06:	f1be 0f00 	cmp.w	lr, #0
 8023d0a:	d004      	beq.n	8023d16 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x296>
 8023d0c:	787a      	ldrb	r2, [r7, #1]
 8023d0e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8023d12:	0e06      	lsrs	r6, r0, #24
 8023d14:	e6dd      	b.n	8023ad2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x52>
 8023d16:	f1bc 0f00 	cmp.w	ip, #0
 8023d1a:	db40      	blt.n	8023d9e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x31e>
 8023d1c:	45e2      	cmp	sl, ip
 8023d1e:	dd3e      	ble.n	8023d9e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x31e>
 8023d20:	4676      	mov	r6, lr
 8023d22:	4670      	mov	r0, lr
 8023d24:	b1d9      	cbz	r1, 8023d5e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2de>
 8023d26:	2d00      	cmp	r5, #0
 8023d28:	db31      	blt.n	8023d8e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x30e>
 8023d2a:	45a8      	cmp	r8, r5
 8023d2c:	dd2f      	ble.n	8023d8e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x30e>
 8023d2e:	f817 2008 	ldrb.w	r2, [r7, r8]
 8023d32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8023d36:	9202      	str	r2, [sp, #8]
 8023d38:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8023d3c:	3501      	adds	r5, #1
 8023d3e:	d423      	bmi.n	8023d88 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x308>
 8023d40:	45a8      	cmp	r8, r5
 8023d42:	dd21      	ble.n	8023d88 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x308>
 8023d44:	f1be 0f00 	cmp.w	lr, #0
 8023d48:	d026      	beq.n	8023d98 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x318>
 8023d4a:	44b8      	add	r8, r7
 8023d4c:	f898 5001 	ldrb.w	r5, [r8, #1]
 8023d50:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8023d54:	0e2f      	lsrs	r7, r5, #24
 8023d56:	e6c6      	b.n	8023ae6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x66>
 8023d58:	2600      	movs	r6, #0
 8023d5a:	4630      	mov	r0, r6
 8023d5c:	e6b9      	b.n	8023ad2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x52>
 8023d5e:	f1be 0f0f 	cmp.w	lr, #15
 8023d62:	d824      	bhi.n	8023dae <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x32e>
 8023d64:	fa1f f38e 	uxth.w	r3, lr
 8023d68:	4688      	mov	r8, r1
 8023d6a:	468b      	mov	fp, r1
 8023d6c:	468a      	mov	sl, r1
 8023d6e:	e9cd 1101 	strd	r1, r1, [sp, #4]
 8023d72:	460d      	mov	r5, r1
 8023d74:	9100      	str	r1, [sp, #0]
 8023d76:	460f      	mov	r7, r1
 8023d78:	468c      	mov	ip, r1
 8023d7a:	e6d4      	b.n	8023b26 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 8023d7c:	5d12      	ldrb	r2, [r2, r4]
 8023d7e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8023d82:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023d86:	e7ba      	b.n	8023cfe <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27e>
 8023d88:	2700      	movs	r7, #0
 8023d8a:	463d      	mov	r5, r7
 8023d8c:	e6ab      	b.n	8023ae6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x66>
 8023d8e:	f04f 0c00 	mov.w	ip, #0
 8023d92:	f8cd c008 	str.w	ip, [sp, #8]
 8023d96:	e7d1      	b.n	8023d3c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2bc>
 8023d98:	4675      	mov	r5, lr
 8023d9a:	4677      	mov	r7, lr
 8023d9c:	e6a7      	b.n	8023aee <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6e>
 8023d9e:	4670      	mov	r0, lr
 8023da0:	4675      	mov	r5, lr
 8023da2:	f8cd e008 	str.w	lr, [sp, #8]
 8023da6:	4677      	mov	r7, lr
 8023da8:	46f4      	mov	ip, lr
 8023daa:	4676      	mov	r6, lr
 8023dac:	e69f      	b.n	8023aee <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6e>
 8023dae:	4b04      	ldr	r3, [pc, #16]	; (8023dc0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x340>)
 8023db0:	4a04      	ldr	r2, [pc, #16]	; (8023dc4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x344>)
 8023db2:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8023db6:	4804      	ldr	r0, [pc, #16]	; (8023dc8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x348>)
 8023db8:	f004 f95a 	bl	8028070 <__assert_func>
 8023dbc:	fffff800 	.word	0xfffff800
 8023dc0:	0802b2dc 	.word	0x0802b2dc
 8023dc4:	0802b954 	.word	0x0802b954
 8023dc8:	0802b460 	.word	0x0802b460

08023dcc <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023dd0:	ed2d 8b08 	vpush	{d8-d11}
 8023dd4:	b0a3      	sub	sp, #140	; 0x8c
 8023dd6:	901e      	str	r0, [sp, #120]	; 0x78
 8023dd8:	9111      	str	r1, [sp, #68]	; 0x44
 8023dda:	9215      	str	r2, [sp, #84]	; 0x54
 8023ddc:	e9dd 4139 	ldrd	r4, r1, [sp, #228]	; 0xe4
 8023de0:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8023de2:	6860      	ldr	r0, [r4, #4]
 8023de4:	e9dd 8b35 	ldrd	r8, fp, [sp, #212]	; 0xd4
 8023de8:	fb00 1202 	mla	r2, r0, r2, r1
 8023dec:	6820      	ldr	r0, [r4, #0]
 8023dee:	46c1      	mov	r9, r8
 8023df0:	eb00 0a42 	add.w	sl, r0, r2, lsl #1
 8023df4:	46d8      	mov	r8, fp
 8023df6:	eeb0 aa40 	vmov.f32	s20, s0
 8023dfa:	eef0 9a60 	vmov.f32	s19, s1
 8023dfe:	eeb0 9a41 	vmov.f32	s18, s2
 8023e02:	eef0 8a62 	vmov.f32	s17, s5
 8023e06:	eeb0 8a43 	vmov.f32	s16, s6
 8023e0a:	eef0 ba44 	vmov.f32	s23, s8
 8023e0e:	eeb0 ba64 	vmov.f32	s22, s9
 8023e12:	eef0 aa45 	vmov.f32	s21, s10
 8023e16:	46d3      	mov	fp, sl
 8023e18:	993c      	ldr	r1, [sp, #240]	; 0xf0
 8023e1a:	9c3c      	ldr	r4, [sp, #240]	; 0xf0
 8023e1c:	6849      	ldr	r1, [r1, #4]
 8023e1e:	6824      	ldr	r4, [r4, #0]
 8023e20:	1d0a      	adds	r2, r1, #4
 8023e22:	940e      	str	r4, [sp, #56]	; 0x38
 8023e24:	920b      	str	r2, [sp, #44]	; 0x2c
 8023e26:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023e28:	2a00      	cmp	r2, #0
 8023e2a:	dc02      	bgt.n	8023e32 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8023e2c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8023e2e:	2a00      	cmp	r2, #0
 8023e30:	dd65      	ble.n	8023efe <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8023e32:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8023e34:	2b00      	cmp	r3, #0
 8023e36:	e9d2 6c02 	ldrd	r6, ip, [r2, #8]
 8023e3a:	b234      	sxth	r4, r6
 8023e3c:	fa0f f78c 	sxth.w	r7, ip
 8023e40:	f340 836d 	ble.w	802451e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x752>
 8023e44:	1e65      	subs	r5, r4, #1
 8023e46:	f107 3eff 	add.w	lr, r7, #4294967295
 8023e4a:	f8cd c01c 	str.w	ip, [sp, #28]
 8023e4e:	e9dd ca37 	ldrd	ip, sl, [sp, #220]	; 0xdc
 8023e52:	ea5f 4229 	movs.w	r2, r9, asr #16
 8023e56:	ea4f 4128 	mov.w	r1, r8, asr #16
 8023e5a:	d405      	bmi.n	8023e68 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8023e5c:	42aa      	cmp	r2, r5
 8023e5e:	da03      	bge.n	8023e68 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8023e60:	2900      	cmp	r1, #0
 8023e62:	db01      	blt.n	8023e68 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8023e64:	4571      	cmp	r1, lr
 8023e66:	db4f      	blt.n	8023f08 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8023e68:	1c50      	adds	r0, r2, #1
 8023e6a:	d406      	bmi.n	8023e7a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8023e6c:	42a0      	cmp	r0, r4
 8023e6e:	dc04      	bgt.n	8023e7a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8023e70:	1c48      	adds	r0, r1, #1
 8023e72:	d402      	bmi.n	8023e7a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8023e74:	42b8      	cmp	r0, r7
 8023e76:	f340 832f 	ble.w	80244d8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8023e7a:	3b01      	subs	r3, #1
 8023e7c:	44e1      	add	r9, ip
 8023e7e:	44d0      	add	r8, sl
 8023e80:	f10b 0b02 	add.w	fp, fp, #2
 8023e84:	d1e5      	bne.n	8023e52 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8023e86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023e88:	2b00      	cmp	r3, #0
 8023e8a:	dd38      	ble.n	8023efe <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8023e8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023e90:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023e94:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023e98:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023e9c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023ea0:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8023ea4:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023ea8:	ee76 6a68 	vsub.f32	s13, s12, s17
 8023eac:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8023eb0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023eb4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8023eb8:	ee16 2a90 	vmov	r2, s13
 8023ebc:	3b01      	subs	r3, #1
 8023ebe:	9311      	str	r3, [sp, #68]	; 0x44
 8023ec0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023ec2:	fb92 f3f3 	sdiv	r3, r2, r3
 8023ec6:	ee17 2a10 	vmov	r2, s14
 8023eca:	eeb0 7a48 	vmov.f32	s14, s16
 8023ece:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8023ed2:	ee17 8a10 	vmov	r8, s14
 8023ed6:	eeb0 7a68 	vmov.f32	s14, s17
 8023eda:	9337      	str	r3, [sp, #220]	; 0xdc
 8023edc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023ede:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8023ee2:	fb92 f3f3 	sdiv	r3, r2, r3
 8023ee6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8023ee8:	9338      	str	r3, [sp, #224]	; 0xe0
 8023eea:	ee17 9a10 	vmov	r9, s14
 8023eee:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023ef0:	eeb0 8a67 	vmov.f32	s16, s15
 8023ef4:	eef0 8a46 	vmov.f32	s17, s12
 8023ef8:	bf08      	it	eq
 8023efa:	4613      	moveq	r3, r2
 8023efc:	e793      	b.n	8023e26 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8023efe:	b023      	add	sp, #140	; 0x8c
 8023f00:	ecbd 8b08 	vpop	{d8-d11}
 8023f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023f08:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8023f0c:	f8cd b01c 	str.w	fp, [sp, #28]
 8023f10:	9837      	ldr	r0, [sp, #220]	; 0xdc
 8023f12:	1e59      	subs	r1, r3, #1
 8023f14:	fb00 9201 	mla	r2, r0, r1, r9
 8023f18:	1412      	asrs	r2, r2, #16
 8023f1a:	910c      	str	r1, [sp, #48]	; 0x30
 8023f1c:	f100 815e 	bmi.w	80241dc <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8023f20:	42aa      	cmp	r2, r5
 8023f22:	f280 815b 	bge.w	80241dc <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8023f26:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8023f28:	fb02 8201 	mla	r2, r2, r1, r8
 8023f2c:	1412      	asrs	r2, r2, #16
 8023f2e:	f100 8155 	bmi.w	80241dc <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8023f32:	3f01      	subs	r7, #1
 8023f34:	42ba      	cmp	r2, r7
 8023f36:	f280 8151 	bge.w	80241dc <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8023f3a:	2b00      	cmp	r3, #0
 8023f3c:	dda3      	ble.n	8023e86 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8023f3e:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 8023f42:	4621      	mov	r1, r4
 8023f44:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8023f48:	f8cd 90d4 	str.w	r9, [sp, #212]	; 0xd4
 8023f4c:	464a      	mov	r2, r9
 8023f4e:	464c      	mov	r4, r9
 8023f50:	e122      	b.n	8024198 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8023f52:	f893 c001 	ldrb.w	ip, [r3, #1]
 8023f56:	f856 502c 	ldr.w	r5, [r6, ip, lsl #2]
 8023f5a:	950f      	str	r5, [sp, #60]	; 0x3c
 8023f5c:	0e2d      	lsrs	r5, r5, #24
 8023f5e:	9508      	str	r5, [sp, #32]
 8023f60:	b162      	cbz	r2, 8023f7c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8023f62:	185d      	adds	r5, r3, r1
 8023f64:	786d      	ldrb	r5, [r5, #1]
 8023f66:	5c5b      	ldrb	r3, [r3, r1]
 8023f68:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 8023f6c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023f70:	9112      	str	r1, [sp, #72]	; 0x48
 8023f72:	9310      	str	r3, [sp, #64]	; 0x40
 8023f74:	0e09      	lsrs	r1, r1, #24
 8023f76:	0e1b      	lsrs	r3, r3, #24
 8023f78:	910a      	str	r1, [sp, #40]	; 0x28
 8023f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8023f7c:	b2a4      	uxth	r4, r4
 8023f7e:	b292      	uxth	r2, r2
 8023f80:	fb04 f502 	mul.w	r5, r4, r2
 8023f84:	0124      	lsls	r4, r4, #4
 8023f86:	1b66      	subs	r6, r4, r5
 8023f88:	9b08      	ldr	r3, [sp, #32]
 8023f8a:	b2b6      	uxth	r6, r6
 8023f8c:	fb06 f103 	mul.w	r1, r6, r3
 8023f90:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8023f94:	b292      	uxth	r2, r2
 8023f96:	f5c4 7380 	rsb	r3, r4, #256	; 0x100
 8023f9a:	1a9b      	subs	r3, r3, r2
 8023f9c:	b29b      	uxth	r3, r3
 8023f9e:	fb03 1100 	mla	r1, r3, r0, r1
 8023fa2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023fa4:	fb02 1104 	mla	r1, r2, r4, r1
 8023fa8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023faa:	fb05 1104 	mla	r1, r5, r4, r1
 8023fae:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023fb2:	2900      	cmp	r1, #0
 8023fb4:	f000 80df 	beq.w	8024176 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8023fb8:	f007 14ff 	and.w	r4, r7, #16711935	; 0xff00ff
 8023fbc:	28ff      	cmp	r0, #255	; 0xff
 8023fbe:	940c      	str	r4, [sp, #48]	; 0x30
 8023fc0:	f407 497f 	and.w	r9, r7, #65280	; 0xff00
 8023fc4:	d01a      	beq.n	8023ffc <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8023fc6:	fb04 f400 	mul.w	r4, r4, r0
 8023fca:	4627      	mov	r7, r4
 8023fcc:	fb09 fc00 	mul.w	ip, r9, r0
 8023fd0:	0a24      	lsrs	r4, r4, #8
 8023fd2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023fd6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023fda:	f50c 7080 	add.w	r0, ip, #256	; 0x100
 8023fde:	4427      	add	r7, r4
 8023fe0:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 8023fe4:	0a3f      	lsrs	r7, r7, #8
 8023fe6:	0a00      	lsrs	r0, r0, #8
 8023fe8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023fec:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023ff0:	4307      	orrs	r7, r0
 8023ff2:	f007 10ff 	and.w	r0, r7, #16711935	; 0xff00ff
 8023ff6:	900c      	str	r0, [sp, #48]	; 0x30
 8023ff8:	f407 497f 	and.w	r9, r7, #65280	; 0xff00
 8023ffc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8023ffe:	f000 17ff 	and.w	r7, r0, #16711935	; 0xff00ff
 8024002:	f400 4c7f 	and.w	ip, r0, #65280	; 0xff00
 8024006:	9808      	ldr	r0, [sp, #32]
 8024008:	28ff      	cmp	r0, #255	; 0xff
 802400a:	d01a      	beq.n	8024042 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 802400c:	fb07 f700 	mul.w	r7, r7, r0
 8024010:	fb0c fc00 	mul.w	ip, ip, r0
 8024014:	0a3c      	lsrs	r4, r7, #8
 8024016:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802401a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802401e:	f50c 7080 	add.w	r0, ip, #256	; 0x100
 8024022:	4427      	add	r7, r4
 8024024:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 8024028:	0a3f      	lsrs	r7, r7, #8
 802402a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802402e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024032:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024036:	ea47 0c0c 	orr.w	ip, r7, ip
 802403a:	f00c 17ff 	and.w	r7, ip, #16711935	; 0xff00ff
 802403e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024042:	9810      	ldr	r0, [sp, #64]	; 0x40
 8024044:	f000 1eff 	and.w	lr, r0, #16711935	; 0xff00ff
 8024048:	f400 4a7f 	and.w	sl, r0, #65280	; 0xff00
 802404c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802404e:	28ff      	cmp	r0, #255	; 0xff
 8024050:	d01c      	beq.n	802408c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>
 8024052:	fb0e fe00 	mul.w	lr, lr, r0
 8024056:	fb0a fa00 	mul.w	sl, sl, r0
 802405a:	ea4f 241e 	mov.w	r4, lr, lsr #8
 802405e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024062:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8024066:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 802406a:	44a6      	add	lr, r4
 802406c:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8024070:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024074:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024078:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802407c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024080:	ea4e 0a0a 	orr.w	sl, lr, sl
 8024084:	f00a 1eff 	and.w	lr, sl, #16711935	; 0xff00ff
 8024088:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802408c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802408e:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8024092:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8024096:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024098:	2cff      	cmp	r4, #255	; 0xff
 802409a:	d01d      	beq.n	80240d8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802409c:	fb00 f004 	mul.w	r0, r0, r4
 80240a0:	fb0b fb04 	mul.w	fp, fp, r4
 80240a4:	0a04      	lsrs	r4, r0, #8
 80240a6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80240aa:	9414      	str	r4, [sp, #80]	; 0x50
 80240ac:	f50b 7480 	add.w	r4, fp, #256	; 0x100
 80240b0:	9413      	str	r4, [sp, #76]	; 0x4c
 80240b2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80240b4:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80240b8:	4420      	add	r0, r4
 80240ba:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80240bc:	0a00      	lsrs	r0, r0, #8
 80240be:	eb04 241b 	add.w	r4, r4, fp, lsr #8
 80240c2:	0a24      	lsrs	r4, r4, #8
 80240c4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80240c8:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80240cc:	ea40 0b0b 	orr.w	fp, r0, fp
 80240d0:	f00b 10ff 	and.w	r0, fp, #16711935	; 0xff00ff
 80240d4:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80240d8:	43c9      	mvns	r1, r1
 80240da:	fb07 f706 	mul.w	r7, r7, r6
 80240de:	fb0c f606 	mul.w	r6, ip, r6
 80240e2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80240e4:	fb09 6603 	mla	r6, r9, r3, r6
 80240e8:	fb04 7703 	mla	r7, r4, r3, r7
 80240ec:	9b07      	ldr	r3, [sp, #28]
 80240ee:	fb0e 7702 	mla	r7, lr, r2, r7
 80240f2:	fb0a 6602 	mla	r6, sl, r2, r6
 80240f6:	f8b3 e000 	ldrh.w	lr, [r3]
 80240fa:	b2c9      	uxtb	r1, r1
 80240fc:	ea4f 242e 	mov.w	r4, lr, asr #8
 8024100:	fb00 7005 	mla	r0, r0, r5, r7
 8024104:	fb0b 6605 	mla	r6, fp, r5, r6
 8024108:	ea4f 09ee 	mov.w	r9, lr, asr #3
 802410c:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8024110:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8024114:	fb04 f401 	mul.w	r4, r4, r1
 8024118:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 802411c:	fa5f fe8e 	uxtb.w	lr, lr
 8024120:	fb09 f901 	mul.w	r9, r9, r1
 8024124:	fb0e f101 	mul.w	r1, lr, r1
 8024128:	0a00      	lsrs	r0, r0, #8
 802412a:	0a36      	lsrs	r6, r6, #8
 802412c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024130:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024134:	1c62      	adds	r2, r4, #1
 8024136:	ea40 0306 	orr.w	r3, r0, r6
 802413a:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802413e:	f109 0001 	add.w	r0, r9, #1
 8024142:	1c4a      	adds	r2, r1, #1
 8024144:	0c1e      	lsrs	r6, r3, #16
 8024146:	f3c3 2507 	ubfx	r5, r3, #8, #8
 802414a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802414e:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8024152:	4a21      	ldr	r2, [pc, #132]	; (80241d8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40c>)
 8024154:	eb06 2414 	add.w	r4, r6, r4, lsr #8
 8024158:	b2db      	uxtb	r3, r3
 802415a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802415e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8024162:	ea02 2404 	and.w	r4, r2, r4, lsl #8
 8024166:	00c0      	lsls	r0, r0, #3
 8024168:	ea44 04d3 	orr.w	r4, r4, r3, lsr #3
 802416c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024170:	9b07      	ldr	r3, [sp, #28]
 8024172:	4320      	orrs	r0, r4
 8024174:	8018      	strh	r0, [r3, #0]
 8024176:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8024178:	9937      	ldr	r1, [sp, #220]	; 0xdc
 802417a:	9b07      	ldr	r3, [sp, #28]
 802417c:	440a      	add	r2, r1
 802417e:	9235      	str	r2, [sp, #212]	; 0xd4
 8024180:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8024182:	3302      	adds	r3, #2
 8024184:	4490      	add	r8, r2
 8024186:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024188:	9307      	str	r3, [sp, #28]
 802418a:	4293      	cmp	r3, r2
 802418c:	d022      	beq.n	80241d4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x408>
 802418e:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8024190:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8024192:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024196:	9c35      	ldr	r4, [sp, #212]	; 0xd4
 8024198:	1412      	asrs	r2, r2, #16
 802419a:	ea4f 4328 	mov.w	r3, r8, asr #16
 802419e:	fb01 2303 	mla	r3, r1, r3, r2
 80241a2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80241a4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80241a6:	5cc2      	ldrb	r2, [r0, r3]
 80241a8:	f3c4 3403 	ubfx	r4, r4, #12, #4
 80241ac:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 80241b0:	4403      	add	r3, r0
 80241b2:	f3c8 3203 	ubfx	r2, r8, #12, #4
 80241b6:	0e38      	lsrs	r0, r7, #24
 80241b8:	2c00      	cmp	r4, #0
 80241ba:	f47f aeca 	bne.w	8023f52 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80241be:	2a00      	cmp	r2, #0
 80241c0:	f43f aedc 	beq.w	8023f7c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80241c4:	5c5b      	ldrb	r3, [r3, r1]
 80241c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80241c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80241cc:	9310      	str	r3, [sp, #64]	; 0x40
 80241ce:	0e1b      	lsrs	r3, r3, #24
 80241d0:	9309      	str	r3, [sp, #36]	; 0x24
 80241d2:	e6d3      	b.n	8023f7c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80241d4:	4693      	mov	fp, r2
 80241d6:	e656      	b.n	8023e86 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80241d8:	fffff800 	.word	0xfffff800
 80241dc:	2b00      	cmp	r3, #0
 80241de:	f77f ae52 	ble.w	8023e86 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80241e2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80241e6:	ea4f 4229 	mov.w	r2, r9, asr #16
 80241ea:	ea4f 4128 	mov.w	r1, r8, asr #16
 80241ee:	2a00      	cmp	r2, #0
 80241f0:	465f      	mov	r7, fp
 80241f2:	f8cd b01c 	str.w	fp, [sp, #28]
 80241f6:	9c3c      	ldr	r4, [sp, #240]	; 0xf0
 80241f8:	e9dd b337 	ldrd	fp, r3, [sp, #220]	; 0xdc
 80241fc:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8024200:	f3c8 3e03 	ubfx	lr, r8, #12, #4
 8024204:	f2c0 8147 	blt.w	8024496 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8024208:	1e73      	subs	r3, r6, #1
 802420a:	429a      	cmp	r2, r3
 802420c:	f280 8143 	bge.w	8024496 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8024210:	2900      	cmp	r1, #0
 8024212:	f2c0 8140 	blt.w	8024496 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8024216:	f10c 33ff 	add.w	r3, ip, #4294967295
 802421a:	4299      	cmp	r1, r3
 802421c:	f280 813b 	bge.w	8024496 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8024220:	b236      	sxth	r6, r6
 8024222:	fb01 2106 	mla	r1, r1, r6, r2
 8024226:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024228:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802422a:	5c53      	ldrb	r3, [r2, r1]
 802422c:	4411      	add	r1, r2
 802422e:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8024232:	910d      	str	r1, [sp, #52]	; 0x34
 8024234:	0e13      	lsrs	r3, r2, #24
 8024236:	2800      	cmp	r0, #0
 8024238:	f000 8154 	beq.w	80244e4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 802423c:	f891 c001 	ldrb.w	ip, [r1, #1]
 8024240:	9513      	str	r5, [sp, #76]	; 0x4c
 8024242:	f855 102c 	ldr.w	r1, [r5, ip, lsl #2]
 8024246:	911f      	str	r1, [sp, #124]	; 0x7c
 8024248:	0e09      	lsrs	r1, r1, #24
 802424a:	9116      	str	r1, [sp, #88]	; 0x58
 802424c:	f1be 0f00 	cmp.w	lr, #0
 8024250:	f040 8153 	bne.w	80244fa <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8024254:	b286      	uxth	r6, r0
 8024256:	fa1f fc8e 	uxth.w	ip, lr
 802425a:	fb06 f00c 	mul.w	r0, r6, ip
 802425e:	0136      	lsls	r6, r6, #4
 8024260:	1a31      	subs	r1, r6, r0
 8024262:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8024264:	b289      	uxth	r1, r1
 8024266:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802426a:	9113      	str	r1, [sp, #76]	; 0x4c
 802426c:	fb01 f105 	mul.w	r1, r1, r5
 8024270:	f5c6 7680 	rsb	r6, r6, #256	; 0x100
 8024274:	fa1f f58c 	uxth.w	r5, ip
 8024278:	1b76      	subs	r6, r6, r5
 802427a:	b2b6      	uxth	r6, r6
 802427c:	fb06 1c03 	mla	ip, r6, r3, r1
 8024280:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8024282:	9514      	str	r5, [sp, #80]	; 0x50
 8024284:	fb05 cc01 	mla	ip, r5, r1, ip
 8024288:	9918      	ldr	r1, [sp, #96]	; 0x60
 802428a:	9619      	str	r6, [sp, #100]	; 0x64
 802428c:	fb00 cc01 	mla	ip, r0, r1, ip
 8024290:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8024294:	f1bc 0f00 	cmp.w	ip, #0
 8024298:	f000 80e6 	beq.w	8024468 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 802429c:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 80242a0:	2bff      	cmp	r3, #255	; 0xff
 80242a2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80242a6:	911a      	str	r1, [sp, #104]	; 0x68
 80242a8:	921b      	str	r2, [sp, #108]	; 0x6c
 80242aa:	d01b      	beq.n	80242e4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 80242ac:	fb02 f203 	mul.w	r2, r2, r3
 80242b0:	fb01 f103 	mul.w	r1, r1, r3
 80242b4:	4613      	mov	r3, r2
 80242b6:	0a0a      	lsrs	r2, r1, #8
 80242b8:	f101 1601 	add.w	r6, r1, #65537	; 0x10001
 80242bc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80242c0:	f503 7180 	add.w	r1, r3, #256	; 0x100
 80242c4:	4432      	add	r2, r6
 80242c6:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80242ca:	0a12      	lsrs	r2, r2, #8
 80242cc:	0a1b      	lsrs	r3, r3, #8
 80242ce:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80242d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80242d6:	4313      	orrs	r3, r2
 80242d8:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 80242dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80242e0:	921a      	str	r2, [sp, #104]	; 0x68
 80242e2:	931b      	str	r3, [sp, #108]	; 0x6c
 80242e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80242e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80242e8:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 80242ec:	2aff      	cmp	r2, #255	; 0xff
 80242ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80242f2:	931c      	str	r3, [sp, #112]	; 0x70
 80242f4:	d01b      	beq.n	802432e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x562>
 80242f6:	fb03 f302 	mul.w	r3, r3, r2
 80242fa:	461e      	mov	r6, r3
 80242fc:	fb01 f102 	mul.w	r1, r1, r2
 8024300:	0a0a      	lsrs	r2, r1, #8
 8024302:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024306:	f101 1101 	add.w	r1, r1, #65537	; 0x10001
 802430a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 802430e:	440a      	add	r2, r1
 8024310:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8024314:	0a12      	lsrs	r2, r2, #8
 8024316:	0a1b      	lsrs	r3, r3, #8
 8024318:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802431c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024320:	ea42 0603 	orr.w	r6, r2, r3
 8024324:	f406 437f 	and.w	r3, r6, #65280	; 0xff00
 8024328:	f006 11ff 	and.w	r1, r6, #16711935	; 0xff00ff
 802432c:	931c      	str	r3, [sp, #112]	; 0x70
 802432e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024330:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8024332:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8024336:	2aff      	cmp	r2, #255	; 0xff
 8024338:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802433c:	931d      	str	r3, [sp, #116]	; 0x74
 802433e:	d01b      	beq.n	8024378 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ac>
 8024340:	fb03 f302 	mul.w	r3, r3, r2
 8024344:	fb06 f602 	mul.w	r6, r6, r2
 8024348:	461a      	mov	r2, r3
 802434a:	0a33      	lsrs	r3, r6, #8
 802434c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8024350:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8024354:	f502 7380 	add.w	r3, r2, #256	; 0x100
 8024358:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802435c:	4476      	add	r6, lr
 802435e:	0a36      	lsrs	r6, r6, #8
 8024360:	0a1b      	lsrs	r3, r3, #8
 8024362:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024366:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802436a:	ea46 0203 	orr.w	r2, r6, r3
 802436e:	f402 437f 	and.w	r3, r2, #65280	; 0xff00
 8024372:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8024376:	931d      	str	r3, [sp, #116]	; 0x74
 8024378:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802437a:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802437e:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8024382:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8024384:	930d      	str	r3, [sp, #52]	; 0x34
 8024386:	2aff      	cmp	r2, #255	; 0xff
 8024388:	d01b      	beq.n	80243c2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 802438a:	fb03 f302 	mul.w	r3, r3, r2
 802438e:	fb0e fe02 	mul.w	lr, lr, r2
 8024392:	0a1a      	lsrs	r2, r3, #8
 8024394:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024398:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 802439c:	f50e 7580 	add.w	r5, lr, #256	; 0x100
 80243a0:	441a      	add	r2, r3
 80243a2:	eb05 2e1e 	add.w	lr, r5, lr, lsr #8
 80243a6:	0a12      	lsrs	r2, r2, #8
 80243a8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80243ac:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80243b0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80243b4:	ea42 0e0e 	orr.w	lr, r2, lr
 80243b8:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 80243bc:	930d      	str	r3, [sp, #52]	; 0x34
 80243be:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80243c2:	ea6f 0c0c 	mvn.w	ip, ip
 80243c6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80243c8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80243ca:	fb01 f305 	mul.w	r3, r1, r5
 80243ce:	991c      	ldr	r1, [sp, #112]	; 0x70
 80243d0:	fa5f fc8c 	uxtb.w	ip, ip
 80243d4:	fb01 f105 	mul.w	r1, r1, r5
 80243d8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80243da:	fb02 3305 	mla	r3, r2, r5, r3
 80243de:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80243e0:	fb02 1105 	mla	r1, r2, r5, r1
 80243e4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80243e6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80243e8:	fb06 3605 	mla	r6, r6, r5, r3
 80243ec:	fb02 1205 	mla	r2, r2, r5, r1
 80243f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80243f2:	8839      	ldrh	r1, [r7, #0]
 80243f4:	fb03 6300 	mla	r3, r3, r0, r6
 80243f8:	fb0e 2e00 	mla	lr, lr, r0, r2
 80243fc:	10c8      	asrs	r0, r1, #3
 80243fe:	120a      	asrs	r2, r1, #8
 8024400:	f000 06fc 	and.w	r6, r0, #252	; 0xfc
 8024404:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8024408:	00c9      	lsls	r1, r1, #3
 802440a:	fb02 f20c 	mul.w	r2, r2, ip
 802440e:	fb06 f60c 	mul.w	r6, r6, ip
 8024412:	b2c9      	uxtb	r1, r1
 8024414:	fb01 f00c 	mul.w	r0, r1, ip
 8024418:	0a1b      	lsrs	r3, r3, #8
 802441a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802441e:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 8024422:	f40e 437f 	and.w	r3, lr, #65280	; 0xff00
 8024426:	430b      	orrs	r3, r1
 8024428:	f106 0e01 	add.w	lr, r6, #1
 802442c:	1c51      	adds	r1, r2, #1
 802442e:	0c1d      	lsrs	r5, r3, #16
 8024430:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024434:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8024438:	f3c3 2107 	ubfx	r1, r3, #8, #8
 802443c:	fa5f fe83 	uxtb.w	lr, r3
 8024440:	f100 0c01 	add.w	ip, r0, #1
 8024444:	4b39      	ldr	r3, [pc, #228]	; (802452c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>)
 8024446:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 802444a:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 802444e:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8024452:	ea03 2202 	and.w	r2, r3, r2, lsl #8
 8024456:	00c9      	lsls	r1, r1, #3
 8024458:	eb0e 2310 	add.w	r3, lr, r0, lsr #8
 802445c:	ea42 03d3 	orr.w	r3, r2, r3, lsr #3
 8024460:	f401 62fc 	and.w	r2, r1, #2016	; 0x7e0
 8024464:	4313      	orrs	r3, r2
 8024466:	803b      	strh	r3, [r7, #0]
 8024468:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802446a:	f1ba 0f00 	cmp.w	sl, #0
 802446e:	f107 0702 	add.w	r7, r7, #2
 8024472:	44d9      	add	r9, fp
 8024474:	4498      	add	r8, r3
 8024476:	dd26      	ble.n	80244c6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 8024478:	e9d4 6c02 	ldrd	r6, ip, [r4, #8]
 802447c:	ea4f 4229 	mov.w	r2, r9, asr #16
 8024480:	2a00      	cmp	r2, #0
 8024482:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024486:	ea4f 4128 	mov.w	r1, r8, asr #16
 802448a:	f3c9 3003 	ubfx	r0, r9, #12, #4
 802448e:	f3c8 3e03 	ubfx	lr, r8, #12, #4
 8024492:	f6bf aeb9 	bge.w	8024208 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 8024496:	1c53      	adds	r3, r2, #1
 8024498:	d4e6      	bmi.n	8024468 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 802449a:	42b3      	cmp	r3, r6
 802449c:	dce4      	bgt.n	8024468 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 802449e:	1c4b      	adds	r3, r1, #1
 80244a0:	d4e2      	bmi.n	8024468 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 80244a2:	4563      	cmp	r3, ip
 80244a4:	dce0      	bgt.n	8024468 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 80244a6:	fa0f f38c 	sxth.w	r3, ip
 80244aa:	b236      	sxth	r6, r6
 80244ac:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80244b0:	e9cd 6300 	strd	r6, r3, [sp]
 80244b4:	e9cd 0e04 	strd	r0, lr, [sp, #16]
 80244b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80244ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80244bc:	4639      	mov	r1, r7
 80244be:	981e      	ldr	r0, [sp, #120]	; 0x78
 80244c0:	f7ff fade 	bl	8023a80 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 80244c4:	e7d0      	b.n	8024468 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 80244c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80244c8:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80244cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80244d0:	3301      	adds	r3, #1
 80244d2:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 80244d6:	e4d6      	b.n	8023e86 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80244d8:	3b01      	subs	r3, #1
 80244da:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80244de:	930c      	str	r3, [sp, #48]	; 0x30
 80244e0:	469a      	mov	sl, r3
 80244e2:	e684      	b.n	80241ee <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x422>
 80244e4:	f1be 0f00 	cmp.w	lr, #0
 80244e8:	f43f aeb4 	beq.w	8024254 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 80244ec:	5d89      	ldrb	r1, [r1, r6]
 80244ee:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80244f2:	9120      	str	r1, [sp, #128]	; 0x80
 80244f4:	0e09      	lsrs	r1, r1, #24
 80244f6:	9117      	str	r1, [sp, #92]	; 0x5c
 80244f8:	e6ac      	b.n	8024254 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 80244fa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80244fc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80244fe:	eb01 0c06 	add.w	ip, r1, r6
 8024502:	f89c c001 	ldrb.w	ip, [ip, #1]
 8024506:	5d89      	ldrb	r1, [r1, r6]
 8024508:	f855 602c 	ldr.w	r6, [r5, ip, lsl #2]
 802450c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8024510:	0e35      	lsrs	r5, r6, #24
 8024512:	9120      	str	r1, [sp, #128]	; 0x80
 8024514:	0e09      	lsrs	r1, r1, #24
 8024516:	9621      	str	r6, [sp, #132]	; 0x84
 8024518:	9518      	str	r5, [sp, #96]	; 0x60
 802451a:	9117      	str	r1, [sp, #92]	; 0x5c
 802451c:	e69a      	b.n	8024254 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 802451e:	f43f acb2 	beq.w	8023e86 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8024522:	1e65      	subs	r5, r4, #1
 8024524:	f8cd b01c 	str.w	fp, [sp, #28]
 8024528:	e4f2      	b.n	8023f10 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 802452a:	bf00      	nop
 802452c:	fffff800 	.word	0xfffff800

08024530 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8024530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024534:	b08b      	sub	sp, #44	; 0x2c
 8024536:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
 802453a:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
 802453e:	ea6f 0b00 	mvn.w	fp, r0
 8024542:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024544:	f9bd 5050 	ldrsh.w	r5, [sp, #80]	; 0x50
 8024548:	9005      	str	r0, [sp, #20]
 802454a:	fb0c 4805 	mla	r8, ip, r5, r4
 802454e:	7848      	ldrb	r0, [r1, #1]
 8024550:	788e      	ldrb	r6, [r1, #2]
 8024552:	0204      	lsls	r4, r0, #8
 8024554:	780f      	ldrb	r7, [r1, #0]
 8024556:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 802455a:	9306      	str	r3, [sp, #24]
 802455c:	fa5f f38b 	uxtb.w	r3, fp
 8024560:	433c      	orrs	r4, r7
 8024562:	9304      	str	r3, [sp, #16]
 8024564:	f1bc 0f00 	cmp.w	ip, #0
 8024568:	eb02 0308 	add.w	r3, r2, r8
 802456c:	9003      	str	r0, [sp, #12]
 802456e:	9602      	str	r6, [sp, #8]
 8024570:	9307      	str	r3, [sp, #28]
 8024572:	9409      	str	r4, [sp, #36]	; 0x24
 8024574:	f10c 0601 	add.w	r6, ip, #1
 8024578:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 802457c:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8024580:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
 8024584:	db02      	blt.n	802458c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x5c>
 8024586:	45e6      	cmp	lr, ip
 8024588:	f300 80a0 	bgt.w	80246cc <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x19c>
 802458c:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 8024590:	46e0      	mov	r8, ip
 8024592:	fa5f fb84 	uxtb.w	fp, r4
 8024596:	f8cd b004 	str.w	fp, [sp, #4]
 802459a:	2e00      	cmp	r6, #0
 802459c:	db01      	blt.n	80245a2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x72>
 802459e:	45b6      	cmp	lr, r6
 80245a0:	dc73      	bgt.n	802468a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x15a>
 80245a2:	fa5f fa84 	uxtb.w	sl, r4
 80245a6:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 80245aa:	4654      	mov	r4, sl
 80245ac:	46f1      	mov	r9, lr
 80245ae:	2b0f      	cmp	r3, #15
 80245b0:	f200 80cb 	bhi.w	802474a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x21a>
 80245b4:	280f      	cmp	r0, #15
 80245b6:	f200 80c8 	bhi.w	802474a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x21a>
 80245ba:	b29b      	uxth	r3, r3
 80245bc:	b280      	uxth	r0, r0
 80245be:	fb03 f600 	mul.w	r6, r3, r0
 80245c2:	011b      	lsls	r3, r3, #4
 80245c4:	1b9d      	subs	r5, r3, r6
 80245c6:	9a01      	ldr	r2, [sp, #4]
 80245c8:	b2ad      	uxth	r5, r5
 80245ca:	ebc6 1000 	rsb	r0, r6, r0, lsl #4
 80245ce:	fb05 f202 	mul.w	r2, r5, r2
 80245d2:	b280      	uxth	r0, r0
 80245d4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80245d8:	1a1b      	subs	r3, r3, r0
 80245da:	b29b      	uxth	r3, r3
 80245dc:	fb03 220b 	mla	r2, r3, fp, r2
 80245e0:	fb00 2a0a 	mla	sl, r0, sl, r2
 80245e4:	f8bd b010 	ldrh.w	fp, [sp, #16]
 80245e8:	fb06 a404 	mla	r4, r6, r4, sl
 80245ec:	fb17 f70b 	smulbb	r7, r7, fp
 80245f0:	f8bd a014 	ldrh.w	sl, [sp, #20]
 80245f4:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80245f8:	fb04 770a 	mla	r7, r4, sl, r7
 80245fc:	b2bf      	uxth	r7, r7
 80245fe:	1c7a      	adds	r2, r7, #1
 8024600:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8024604:	123f      	asrs	r7, r7, #8
 8024606:	700f      	strb	r7, [r1, #0]
 8024608:	f89c 4001 	ldrb.w	r4, [ip, #1]
 802460c:	f898 7001 	ldrb.w	r7, [r8, #1]
 8024610:	fb05 f204 	mul.w	r2, r5, r4
 8024614:	fb03 2407 	mla	r4, r3, r7, r2
 8024618:	f899 2001 	ldrb.w	r2, [r9, #1]
 802461c:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8024620:	fb00 4202 	mla	r2, r0, r2, r4
 8024624:	9c03      	ldr	r4, [sp, #12]
 8024626:	fb06 2207 	mla	r2, r6, r7, r2
 802462a:	fb14 f40b 	smulbb	r4, r4, fp
 802462e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8024632:	fb02 420a 	mla	r2, r2, sl, r4
 8024636:	b292      	uxth	r2, r2
 8024638:	1c54      	adds	r4, r2, #1
 802463a:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 802463e:	1212      	asrs	r2, r2, #8
 8024640:	704a      	strb	r2, [r1, #1]
 8024642:	f89c 4002 	ldrb.w	r4, [ip, #2]
 8024646:	f898 2002 	ldrb.w	r2, [r8, #2]
 802464a:	fb05 f504 	mul.w	r5, r5, r4
 802464e:	fb03 5502 	mla	r5, r3, r2, r5
 8024652:	f899 4002 	ldrb.w	r4, [r9, #2]
 8024656:	f89e 2002 	ldrb.w	r2, [lr, #2]
 802465a:	fb00 5004 	mla	r0, r0, r4, r5
 802465e:	9b02      	ldr	r3, [sp, #8]
 8024660:	fb06 0602 	mla	r6, r6, r2, r0
 8024664:	fb13 fb0b 	smulbb	fp, r3, fp
 8024668:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802466c:	fb06 ba0a 	mla	sl, r6, sl, fp
 8024670:	fa1f fa8a 	uxth.w	sl, sl
 8024674:	f10a 0b01 	add.w	fp, sl, #1
 8024678:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 802467c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8024680:	f881 a002 	strb.w	sl, [r1, #2]
 8024684:	b00b      	add	sp, #44	; 0x2c
 8024686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802468a:	2800      	cmp	r0, #0
 802468c:	d089      	beq.n	80245a2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x72>
 802468e:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8024690:	2e00      	cmp	r6, #0
 8024692:	db47      	blt.n	8024724 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1f4>
 8024694:	42b5      	cmp	r5, r6
 8024696:	dd45      	ble.n	8024724 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1f4>
 8024698:	9a07      	ldr	r2, [sp, #28]
 802469a:	f812 9005 	ldrb.w	r9, [r2, r5]
 802469e:	9a06      	ldr	r2, [sp, #24]
 80246a0:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80246a4:	4491      	add	r9, r2
 80246a6:	3601      	adds	r6, #1
 80246a8:	f899 a000 	ldrb.w	sl, [r9]
 80246ac:	d436      	bmi.n	802471c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ec>
 80246ae:	42b5      	cmp	r5, r6
 80246b0:	dd34      	ble.n	802471c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ec>
 80246b2:	2b00      	cmp	r3, #0
 80246b4:	d045      	beq.n	8024742 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x212>
 80246b6:	9a07      	ldr	r2, [sp, #28]
 80246b8:	442a      	add	r2, r5
 80246ba:	f892 e001 	ldrb.w	lr, [r2, #1]
 80246be:	9a06      	ldr	r2, [sp, #24]
 80246c0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80246c4:	f812 400e 	ldrb.w	r4, [r2, lr]
 80246c8:	4496      	add	lr, r2
 80246ca:	e770      	b.n	80245ae <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7e>
 80246cc:	4691      	mov	r9, r2
 80246ce:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80246d0:	2a00      	cmp	r2, #0
 80246d2:	db01      	blt.n	80246d8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1a8>
 80246d4:	4295      	cmp	r5, r2
 80246d6:	dc19      	bgt.n	802470c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>
 80246d8:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 80246dc:	3201      	adds	r2, #1
 80246de:	f898 b000 	ldrb.w	fp, [r8]
 80246e2:	d40e      	bmi.n	8024702 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d2>
 80246e4:	4295      	cmp	r5, r2
 80246e6:	dd0c      	ble.n	8024702 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d2>
 80246e8:	b1fb      	cbz	r3, 802472a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1fa>
 80246ea:	9a07      	ldr	r2, [sp, #28]
 80246ec:	f892 c001 	ldrb.w	ip, [r2, #1]
 80246f0:	9a06      	ldr	r2, [sp, #24]
 80246f2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80246f6:	f812 200c 	ldrb.w	r2, [r2, ip]
 80246fa:	9201      	str	r2, [sp, #4]
 80246fc:	9a06      	ldr	r2, [sp, #24]
 80246fe:	4494      	add	ip, r2
 8024700:	e74b      	b.n	802459a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x6a>
 8024702:	b2e2      	uxtb	r2, r4
 8024704:	9201      	str	r2, [sp, #4]
 8024706:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 802470a:	e746      	b.n	802459a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x6a>
 802470c:	f819 8008 	ldrb.w	r8, [r9, r8]
 8024710:	9a06      	ldr	r2, [sp, #24]
 8024712:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8024716:	4490      	add	r8, r2
 8024718:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802471a:	e7df      	b.n	80246dc <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ac>
 802471c:	b2e4      	uxtb	r4, r4
 802471e:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 8024722:	e744      	b.n	80245ae <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7e>
 8024724:	f10d 0924 	add.w	r9, sp, #36	; 0x24
 8024728:	e7bd      	b.n	80246a6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x176>
 802472a:	b2e2      	uxtb	r2, r4
 802472c:	2e00      	cmp	r6, #0
 802472e:	9201      	str	r2, [sp, #4]
 8024730:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 8024734:	f6bf af33 	bge.w	802459e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x6e>
 8024738:	46e6      	mov	lr, ip
 802473a:	46e1      	mov	r9, ip
 802473c:	4692      	mov	sl, r2
 802473e:	4614      	mov	r4, r2
 8024740:	e738      	b.n	80245b4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x84>
 8024742:	b2e4      	uxtb	r4, r4
 8024744:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 8024748:	e734      	b.n	80245b4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x84>
 802474a:	4b03      	ldr	r3, [pc, #12]	; (8024758 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x228>)
 802474c:	4a03      	ldr	r2, [pc, #12]	; (802475c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x22c>)
 802474e:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8024752:	4803      	ldr	r0, [pc, #12]	; (8024760 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x230>)
 8024754:	f003 fc8c 	bl	8028070 <__assert_func>
 8024758:	0802b2dc 	.word	0x0802b2dc
 802475c:	0802b954 	.word	0x0802b954
 8024760:	0802b460 	.word	0x0802b460

08024764 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024768:	ed2d 8b08 	vpush	{d8-d11}
 802476c:	b097      	sub	sp, #92	; 0x5c
 802476e:	f89d 60c4 	ldrb.w	r6, [sp, #196]	; 0xc4
 8024772:	eeb0 aa40 	vmov.f32	s20, s0
 8024776:	e9dd b729 	ldrd	fp, r7, [sp, #164]	; 0xa4
 802477a:	e9cd 0614 	strd	r0, r6, [sp, #80]	; 0x50
 802477e:	43f0      	mvns	r0, r6
 8024780:	eef0 9a60 	vmov.f32	s19, s1
 8024784:	eeb0 9a41 	vmov.f32	s18, s2
 8024788:	eef0 8a62 	vmov.f32	s17, s5
 802478c:	eeb0 8a43 	vmov.f32	s16, s6
 8024790:	eef0 ba44 	vmov.f32	s23, s8
 8024794:	eeb0 ba64 	vmov.f32	s22, s9
 8024798:	eef0 aa45 	vmov.f32	s21, s10
 802479c:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 80247a0:	e9dd 512d 	ldrd	r5, r1, [sp, #180]	; 0xb4
 80247a4:	461a      	mov	r2, r3
 80247a6:	686c      	ldr	r4, [r5, #4]
 80247a8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80247aa:	f8dd 90ac 	ldr.w	r9, [sp, #172]	; 0xac
 80247ae:	fb04 1303 	mla	r3, r4, r3, r1
 80247b2:	9c30      	ldr	r4, [sp, #192]	; 0xc0
 80247b4:	6829      	ldr	r1, [r5, #0]
 80247b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80247ba:	6865      	ldr	r5, [r4, #4]
 80247bc:	eb01 0a03 	add.w	sl, r1, r3
 80247c0:	b2c3      	uxtb	r3, r0
 80247c2:	6824      	ldr	r4, [r4, #0]
 80247c4:	9309      	str	r3, [sp, #36]	; 0x24
 80247c6:	1d2b      	adds	r3, r5, #4
 80247c8:	930a      	str	r3, [sp, #40]	; 0x28
 80247ca:	b2b3      	uxth	r3, r6
 80247cc:	940d      	str	r4, [sp, #52]	; 0x34
 80247ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80247d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80247d2:	2b00      	cmp	r3, #0
 80247d4:	dc02      	bgt.n	80247dc <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80247d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80247d8:	2b00      	cmp	r3, #0
 80247da:	dd63      	ble.n	80248a4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80247dc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80247de:	2a00      	cmp	r2, #0
 80247e0:	e9d3 6e02 	ldrd	r6, lr, [r3, #8]
 80247e4:	b234      	sxth	r4, r6
 80247e6:	fa0f fc8e 	sxth.w	ip, lr
 80247ea:	f340 825b 	ble.w	8024ca4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>
 80247ee:	f8cd e020 	str.w	lr, [sp, #32]
 80247f2:	f8dd e0b0 	ldr.w	lr, [sp, #176]	; 0xb0
 80247f6:	1e65      	subs	r5, r4, #1
 80247f8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80247fc:	ea5f 432b 	movs.w	r3, fp, asr #16
 8024800:	ea4f 4127 	mov.w	r1, r7, asr #16
 8024804:	d405      	bmi.n	8024812 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8024806:	42ab      	cmp	r3, r5
 8024808:	da03      	bge.n	8024812 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802480a:	2900      	cmp	r1, #0
 802480c:	db01      	blt.n	8024812 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802480e:	4541      	cmp	r1, r8
 8024810:	db4d      	blt.n	80248ae <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8024812:	1c58      	adds	r0, r3, #1
 8024814:	d406      	bmi.n	8024824 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8024816:	42a0      	cmp	r0, r4
 8024818:	dc04      	bgt.n	8024824 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 802481a:	1c48      	adds	r0, r1, #1
 802481c:	d402      	bmi.n	8024824 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 802481e:	4560      	cmp	r0, ip
 8024820:	f340 819b 	ble.w	8024b5a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8024824:	3a01      	subs	r2, #1
 8024826:	44cb      	add	fp, r9
 8024828:	4477      	add	r7, lr
 802482a:	f10a 0a03 	add.w	sl, sl, #3
 802482e:	d1e5      	bne.n	80247fc <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8024830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024832:	2b00      	cmp	r3, #0
 8024834:	dd36      	ble.n	80248a4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8024836:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802483a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802483e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024842:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024846:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802484a:	ee29 6aa7 	vmul.f32	s12, s19, s15
 802484e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024852:	ee76 6a68 	vsub.f32	s13, s12, s17
 8024856:	ee37 7ac8 	vsub.f32	s14, s15, s16
 802485a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802485e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8024862:	ee16 2a90 	vmov	r2, s13
 8024866:	3b01      	subs	r3, #1
 8024868:	930e      	str	r3, [sp, #56]	; 0x38
 802486a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802486c:	fb92 f9f3 	sdiv	r9, r2, r3
 8024870:	ee17 2a10 	vmov	r2, s14
 8024874:	eeb0 7a48 	vmov.f32	s14, s16
 8024878:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802487c:	ee17 7a10 	vmov	r7, s14
 8024880:	eeb0 7a68 	vmov.f32	s14, s17
 8024884:	fb92 f3f3 	sdiv	r3, r2, r3
 8024888:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802488c:	932c      	str	r3, [sp, #176]	; 0xb0
 802488e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024890:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024892:	ee17 ba10 	vmov	fp, s14
 8024896:	eeb0 8a67 	vmov.f32	s16, s15
 802489a:	eef0 8a46 	vmov.f32	s17, s12
 802489e:	bf18      	it	ne
 80248a0:	461a      	movne	r2, r3
 80248a2:	e795      	b.n	80247d0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80248a4:	b017      	add	sp, #92	; 0x5c
 80248a6:	ecbd 8b08 	vpop	{d8-d11}
 80248aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80248ae:	f8dd e020 	ldr.w	lr, [sp, #32]
 80248b2:	1e51      	subs	r1, r2, #1
 80248b4:	fb09 b301 	mla	r3, r9, r1, fp
 80248b8:	141b      	asrs	r3, r3, #16
 80248ba:	9108      	str	r1, [sp, #32]
 80248bc:	f100 80e7 	bmi.w	8024a8e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 80248c0:	42ab      	cmp	r3, r5
 80248c2:	f280 80e4 	bge.w	8024a8e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 80248c6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80248c8:	fb03 7301 	mla	r3, r3, r1, r7
 80248cc:	141b      	asrs	r3, r3, #16
 80248ce:	f100 80de 	bmi.w	8024a8e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 80248d2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80248d6:	4563      	cmp	r3, ip
 80248d8:	f280 80d9 	bge.w	8024a8e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 80248dc:	2a00      	cmp	r2, #0
 80248de:	dda7      	ble.n	8024830 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 80248e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80248e4:	eb0a 0302 	add.w	r3, sl, r2
 80248e8:	930c      	str	r3, [sp, #48]	; 0x30
 80248ea:	f10a 0c03 	add.w	ip, sl, #3
 80248ee:	e9cd 792a 	strd	r7, r9, [sp, #168]	; 0xa8
 80248f2:	463b      	mov	r3, r7
 80248f4:	e09a      	b.n	8024a2c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 80248f6:	784d      	ldrb	r5, [r1, #1]
 80248f8:	1908      	adds	r0, r1, r4
 80248fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80248fe:	4435      	add	r5, r6
 8024900:	2a00      	cmp	r2, #0
 8024902:	f000 80b5 	beq.w	8024a70 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8024906:	5d0c      	ldrb	r4, [r1, r4]
 8024908:	f890 e001 	ldrb.w	lr, [r0, #1]
 802490c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024910:	19a1      	adds	r1, r4, r6
 8024912:	9108      	str	r1, [sp, #32]
 8024914:	4631      	mov	r1, r6
 8024916:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802491a:	9f08      	ldr	r7, [sp, #32]
 802491c:	44b6      	add	lr, r6
 802491e:	b29b      	uxth	r3, r3
 8024920:	b292      	uxth	r2, r2
 8024922:	fb03 f602 	mul.w	r6, r3, r2
 8024926:	011b      	lsls	r3, r3, #4
 8024928:	f895 9000 	ldrb.w	r9, [r5]
 802492c:	1b98      	subs	r0, r3, r6
 802492e:	b280      	uxth	r0, r0
 8024930:	fb00 f909 	mul.w	r9, r0, r9
 8024934:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8024938:	b292      	uxth	r2, r2
 802493a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 802493e:	f811 100a 	ldrb.w	r1, [r1, sl]
 8024942:	1a9b      	subs	r3, r3, r2
 8024944:	b29b      	uxth	r3, r3
 8024946:	fb03 9101 	mla	r1, r3, r1, r9
 802494a:	f897 9000 	ldrb.w	r9, [r7]
 802494e:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8024950:	fb02 1109 	mla	r1, r2, r9, r1
 8024954:	f89e a000 	ldrb.w	sl, [lr]
 8024958:	f81c 9c03 	ldrb.w	r9, [ip, #-3]
 802495c:	44a3      	add	fp, r4
 802495e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8024960:	fb06 110a 	mla	r1, r6, sl, r1
 8024964:	fb19 f904 	smulbb	r9, r9, r4
 8024968:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802496a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802496e:	fb01 9904 	mla	r9, r1, r4, r9
 8024972:	fa1f f989 	uxth.w	r9, r9
 8024976:	f109 0101 	add.w	r1, r9, #1
 802497a:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 802497e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8024982:	f80c 9c03 	strb.w	r9, [ip, #-3]
 8024986:	7869      	ldrb	r1, [r5, #1]
 8024988:	f898 9001 	ldrb.w	r9, [r8, #1]
 802498c:	fb00 f101 	mul.w	r1, r0, r1
 8024990:	9c08      	ldr	r4, [sp, #32]
 8024992:	fb03 1109 	mla	r1, r3, r9, r1
 8024996:	f894 9001 	ldrb.w	r9, [r4, #1]
 802499a:	9f2c      	ldr	r7, [sp, #176]	; 0xb0
 802499c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 802499e:	fb02 1109 	mla	r1, r2, r9, r1
 80249a2:	f89e a001 	ldrb.w	sl, [lr, #1]
 80249a6:	443c      	add	r4, r7
 80249a8:	f81c 9c02 	ldrb.w	r9, [ip, #-2]
 80249ac:	942a      	str	r4, [sp, #168]	; 0xa8
 80249ae:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80249b0:	fb06 110a 	mla	r1, r6, sl, r1
 80249b4:	fb19 f904 	smulbb	r9, r9, r4
 80249b8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80249ba:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80249be:	fb01 9907 	mla	r9, r1, r7, r9
 80249c2:	fa1f f989 	uxth.w	r9, r9
 80249c6:	f109 0101 	add.w	r1, r9, #1
 80249ca:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 80249ce:	ea4f 2929 	mov.w	r9, r9, asr #8
 80249d2:	f80c 9c02 	strb.w	r9, [ip, #-2]
 80249d6:	78a9      	ldrb	r1, [r5, #2]
 80249d8:	f898 5002 	ldrb.w	r5, [r8, #2]
 80249dc:	fb00 f001 	mul.w	r0, r0, r1
 80249e0:	fb03 0005 	mla	r0, r3, r5, r0
 80249e4:	9b08      	ldr	r3, [sp, #32]
 80249e6:	f89e 4002 	ldrb.w	r4, [lr, #2]
 80249ea:	789b      	ldrb	r3, [r3, #2]
 80249ec:	f81c ec01 	ldrb.w	lr, [ip, #-1]
 80249f0:	fb02 0003 	mla	r0, r2, r3, r0
 80249f4:	fb06 0004 	mla	r0, r6, r4, r0
 80249f8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80249fa:	fb1e f404 	smulbb	r4, lr, r4
 80249fe:	f3c0 2e07 	ubfx	lr, r0, #8, #8
 8024a02:	fb0e 4e07 	mla	lr, lr, r7, r4
 8024a06:	fa1f fe8e 	uxth.w	lr, lr
 8024a0a:	f10e 0301 	add.w	r3, lr, #1
 8024a0e:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8024a12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024a14:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8024a18:	4563      	cmp	r3, ip
 8024a1a:	f80c ec01 	strb.w	lr, [ip, #-1]
 8024a1e:	d034      	beq.n	8024a8a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8024a20:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024a22:	f10c 0c03 	add.w	ip, ip, #3
 8024a26:	f9b3 4008 	ldrsh.w	r4, [r3, #8]
 8024a2a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024a2c:	1419      	asrs	r1, r3, #16
 8024a2e:	ea4f 432b 	mov.w	r3, fp, asr #16
 8024a32:	fb04 3101 	mla	r1, r4, r1, r3
 8024a36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024a38:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8024a3a:	f812 a001 	ldrb.w	sl, [r2, r1]
 8024a3e:	4411      	add	r1, r2
 8024a40:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8024a42:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8024a46:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8024a4a:	eb06 080a 	add.w	r8, r6, sl
 8024a4e:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8024a52:	2b00      	cmp	r3, #0
 8024a54:	f47f af4f 	bne.w	80248f6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8024a58:	b182      	cbz	r2, 8024a7c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8024a5a:	5d0c      	ldrb	r4, [r1, r4]
 8024a5c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8024a5e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024a62:	1861      	adds	r1, r4, r1
 8024a64:	9108      	str	r1, [sp, #32]
 8024a66:	46c6      	mov	lr, r8
 8024a68:	4645      	mov	r5, r8
 8024a6a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8024a6c:	9f08      	ldr	r7, [sp, #32]
 8024a6e:	e756      	b.n	802491e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024a70:	46c6      	mov	lr, r8
 8024a72:	f8cd 8020 	str.w	r8, [sp, #32]
 8024a76:	4631      	mov	r1, r6
 8024a78:	4647      	mov	r7, r8
 8024a7a:	e750      	b.n	802491e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024a7c:	46c6      	mov	lr, r8
 8024a7e:	f8cd 8020 	str.w	r8, [sp, #32]
 8024a82:	4645      	mov	r5, r8
 8024a84:	4631      	mov	r1, r6
 8024a86:	4647      	mov	r7, r8
 8024a88:	e749      	b.n	802491e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024a8a:	469a      	mov	sl, r3
 8024a8c:	e6d0      	b.n	8024830 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 8024a8e:	2a00      	cmp	r2, #0
 8024a90:	f77f aece 	ble.w	8024830 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 8024a94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8024a98:	ea4f 432b 	mov.w	r3, fp, asr #16
 8024a9c:	1439      	asrs	r1, r7, #16
 8024a9e:	4654      	mov	r4, sl
 8024aa0:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 8024aa2:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 8024aa6:	2b00      	cmp	r3, #0
 8024aa8:	f3cb 3003 	ubfx	r0, fp, #12, #4
 8024aac:	f3c7 3203 	ubfx	r2, r7, #12, #4
 8024ab0:	db2f      	blt.n	8024b12 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024ab2:	f106 3cff 	add.w	ip, r6, #4294967295
 8024ab6:	4563      	cmp	r3, ip
 8024ab8:	da2b      	bge.n	8024b12 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024aba:	2900      	cmp	r1, #0
 8024abc:	db29      	blt.n	8024b12 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024abe:	f10e 3cff 	add.w	ip, lr, #4294967295
 8024ac2:	4561      	cmp	r1, ip
 8024ac4:	da25      	bge.n	8024b12 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024ac6:	fa0f fa86 	sxth.w	sl, r6
 8024aca:	fb01 330a 	mla	r3, r1, sl, r3
 8024ace:	990d      	ldr	r1, [sp, #52]	; 0x34
 8024ad0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8024ad2:	f811 e003 	ldrb.w	lr, [r1, r3]
 8024ad6:	440b      	add	r3, r1
 8024ad8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8024adc:	eb06 0c0e 	add.w	ip, r6, lr
 8024ae0:	2800      	cmp	r0, #0
 8024ae2:	d052      	beq.n	8024b8a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x426>
 8024ae4:	7859      	ldrb	r1, [r3, #1]
 8024ae6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024aea:	1871      	adds	r1, r6, r1
 8024aec:	910c      	str	r1, [sp, #48]	; 0x30
 8024aee:	2a00      	cmp	r2, #0
 8024af0:	f000 80d5 	beq.w	8024c9e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53a>
 8024af4:	eb03 010a 	add.w	r1, r3, sl
 8024af8:	7849      	ldrb	r1, [r1, #1]
 8024afa:	f813 300a 	ldrb.w	r3, [r3, sl]
 8024afe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024b02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024b06:	1871      	adds	r1, r6, r1
 8024b08:	18f3      	adds	r3, r6, r3
 8024b0a:	9110      	str	r1, [sp, #64]	; 0x40
 8024b0c:	9311      	str	r3, [sp, #68]	; 0x44
 8024b0e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024b10:	e042      	b.n	8024b98 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8024b12:	f113 0c01 	adds.w	ip, r3, #1
 8024b16:	d406      	bmi.n	8024b26 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8024b18:	45b4      	cmp	ip, r6
 8024b1a:	dc04      	bgt.n	8024b26 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8024b1c:	f111 0c01 	adds.w	ip, r1, #1
 8024b20:	d401      	bmi.n	8024b26 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8024b22:	45f4      	cmp	ip, lr
 8024b24:	dd1f      	ble.n	8024b66 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 8024b26:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024b28:	f1b8 0f00 	cmp.w	r8, #0
 8024b2c:	f104 0403 	add.w	r4, r4, #3
 8024b30:	44cb      	add	fp, r9
 8024b32:	441f      	add	r7, r3
 8024b34:	dd07      	ble.n	8024b46 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8024b36:	e9d5 6e02 	ldrd	r6, lr, [r5, #8]
 8024b3a:	f108 38ff 	add.w	r8, r8, #4294967295
 8024b3e:	ea4f 432b 	mov.w	r3, fp, asr #16
 8024b42:	1439      	asrs	r1, r7, #16
 8024b44:	e7af      	b.n	8024aa6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8024b46:	9b08      	ldr	r3, [sp, #32]
 8024b48:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8024b4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024b50:	3301      	adds	r3, #1
 8024b52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024b56:	449a      	add	sl, r3
 8024b58:	e66a      	b.n	8024830 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 8024b5a:	3a01      	subs	r2, #1
 8024b5c:	f8dd e020 	ldr.w	lr, [sp, #32]
 8024b60:	4690      	mov	r8, r2
 8024b62:	9208      	str	r2, [sp, #32]
 8024b64:	e79b      	b.n	8024a9e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8024b66:	fa0f fe8e 	sxth.w	lr, lr
 8024b6a:	b236      	sxth	r6, r6
 8024b6c:	e9cd 6e00 	strd	r6, lr, [sp]
 8024b70:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8024b72:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8024b76:	e9cd 2605 	strd	r2, r6, [sp, #20]
 8024b7a:	9302      	str	r3, [sp, #8]
 8024b7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024b7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024b80:	4621      	mov	r1, r4
 8024b82:	9814      	ldr	r0, [sp, #80]	; 0x50
 8024b84:	f7ff fcd4 	bl	8024530 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8024b88:	e7cd      	b.n	8024b26 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8024b8a:	2a00      	cmp	r2, #0
 8024b8c:	d17b      	bne.n	8024c86 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x522>
 8024b8e:	4661      	mov	r1, ip
 8024b90:	e9cd cc10 	strd	ip, ip, [sp, #64]	; 0x40
 8024b94:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8024b98:	b283      	uxth	r3, r0
 8024b9a:	b292      	uxth	r2, r2
 8024b9c:	fb03 f602 	mul.w	r6, r3, r2
 8024ba0:	011b      	lsls	r3, r3, #4
 8024ba2:	7809      	ldrb	r1, [r1, #0]
 8024ba4:	1b98      	subs	r0, r3, r6
 8024ba6:	b280      	uxth	r0, r0
 8024ba8:	9012      	str	r0, [sp, #72]	; 0x48
 8024baa:	fb00 f101 	mul.w	r1, r0, r1
 8024bae:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8024bb2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8024bb4:	b292      	uxth	r2, r2
 8024bb6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8024bba:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8024bbe:	1a9b      	subs	r3, r3, r2
 8024bc0:	b29b      	uxth	r3, r3
 8024bc2:	fb03 110e 	mla	r1, r3, lr, r1
 8024bc6:	9811      	ldr	r0, [sp, #68]	; 0x44
 8024bc8:	f890 a000 	ldrb.w	sl, [r0]
 8024bcc:	9810      	ldr	r0, [sp, #64]	; 0x40
 8024bce:	fb02 110a 	mla	r1, r2, sl, r1
 8024bd2:	f890 e000 	ldrb.w	lr, [r0]
 8024bd6:	f894 a000 	ldrb.w	sl, [r4]
 8024bda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024bdc:	fb06 110e 	mla	r1, r6, lr, r1
 8024be0:	fb1a fa00 	smulbb	sl, sl, r0
 8024be4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8024be6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024bea:	fb01 a100 	mla	r1, r1, r0, sl
 8024bee:	b289      	uxth	r1, r1
 8024bf0:	f101 0e01 	add.w	lr, r1, #1
 8024bf4:	eb0e 2111 	add.w	r1, lr, r1, lsr #8
 8024bf8:	1209      	asrs	r1, r1, #8
 8024bfa:	7021      	strb	r1, [r4, #0]
 8024bfc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024bfe:	9812      	ldr	r0, [sp, #72]	; 0x48
 8024c00:	7849      	ldrb	r1, [r1, #1]
 8024c02:	f89c e001 	ldrb.w	lr, [ip, #1]
 8024c06:	fb00 f101 	mul.w	r1, r0, r1
 8024c0a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8024c0c:	fb03 110e 	mla	r1, r3, lr, r1
 8024c10:	f890 a001 	ldrb.w	sl, [r0, #1]
 8024c14:	9810      	ldr	r0, [sp, #64]	; 0x40
 8024c16:	fb02 110a 	mla	r1, r2, sl, r1
 8024c1a:	f890 e001 	ldrb.w	lr, [r0, #1]
 8024c1e:	f894 a001 	ldrb.w	sl, [r4, #1]
 8024c22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024c24:	fb06 110e 	mla	r1, r6, lr, r1
 8024c28:	fb1a fa00 	smulbb	sl, sl, r0
 8024c2c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8024c2e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024c32:	fb01 a100 	mla	r1, r1, r0, sl
 8024c36:	b289      	uxth	r1, r1
 8024c38:	f101 0e01 	add.w	lr, r1, #1
 8024c3c:	eb0e 2111 	add.w	r1, lr, r1, lsr #8
 8024c40:	1209      	asrs	r1, r1, #8
 8024c42:	7061      	strb	r1, [r4, #1]
 8024c44:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024c46:	9812      	ldr	r0, [sp, #72]	; 0x48
 8024c48:	7889      	ldrb	r1, [r1, #2]
 8024c4a:	f89c c002 	ldrb.w	ip, [ip, #2]
 8024c4e:	fb00 f001 	mul.w	r0, r0, r1
 8024c52:	fb03 010c 	mla	r1, r3, ip, r0
 8024c56:	9811      	ldr	r0, [sp, #68]	; 0x44
 8024c58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024c5a:	7880      	ldrb	r0, [r0, #2]
 8024c5c:	789b      	ldrb	r3, [r3, #2]
 8024c5e:	fb02 1100 	mla	r1, r2, r0, r1
 8024c62:	78a2      	ldrb	r2, [r4, #2]
 8024c64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024c66:	fb06 1303 	mla	r3, r6, r3, r1
 8024c6a:	fb12 f200 	smulbb	r2, r2, r0
 8024c6e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8024c70:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024c74:	fb03 2300 	mla	r3, r3, r0, r2
 8024c78:	b29b      	uxth	r3, r3
 8024c7a:	1c5a      	adds	r2, r3, #1
 8024c7c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024c80:	121b      	asrs	r3, r3, #8
 8024c82:	70a3      	strb	r3, [r4, #2]
 8024c84:	e74f      	b.n	8024b26 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8024c86:	f813 300a 	ldrb.w	r3, [r3, sl]
 8024c8a:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8024c8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024c92:	18f3      	adds	r3, r6, r3
 8024c94:	9311      	str	r3, [sp, #68]	; 0x44
 8024c96:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8024c9a:	4661      	mov	r1, ip
 8024c9c:	e77c      	b.n	8024b98 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8024c9e:	e9cd cc10 	strd	ip, ip, [sp, #64]	; 0x40
 8024ca2:	e779      	b.n	8024b98 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8024ca4:	f43f adc4 	beq.w	8024830 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 8024ca8:	1e65      	subs	r5, r4, #1
 8024caa:	e602      	b.n	80248b2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>

08024cac <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8024cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024cb0:	b083      	sub	sp, #12
 8024cb2:	f9bd 8030 	ldrsh.w	r8, [sp, #48]	; 0x30
 8024cb6:	f891 9001 	ldrb.w	r9, [r1, #1]
 8024cba:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8024cbe:	7888      	ldrb	r0, [r1, #2]
 8024cc0:	fb07 6c08 	mla	ip, r7, r8, r6
 8024cc4:	ea4f 2909 	mov.w	r9, r9, lsl #8
 8024cc8:	780c      	ldrb	r4, [r1, #0]
 8024cca:	ea49 4900 	orr.w	r9, r9, r0, lsl #16
 8024cce:	ea49 0404 	orr.w	r4, r9, r4
 8024cd2:	2f00      	cmp	r7, #0
 8024cd4:	9401      	str	r4, [sp, #4]
 8024cd6:	eb02 090c 	add.w	r9, r2, ip
 8024cda:	f107 0e01 	add.w	lr, r7, #1
 8024cde:	f9bd a034 	ldrsh.w	sl, [sp, #52]	; 0x34
 8024ce2:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8024ce6:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8024cea:	db01      	blt.n	8024cf0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x44>
 8024cec:	45ba      	cmp	sl, r7
 8024cee:	dc6e      	bgt.n	8024dce <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x122>
 8024cf0:	fa5f fb84 	uxtb.w	fp, r4
 8024cf4:	af01      	add	r7, sp, #4
 8024cf6:	465a      	mov	r2, fp
 8024cf8:	46bc      	mov	ip, r7
 8024cfa:	f1be 0f00 	cmp.w	lr, #0
 8024cfe:	db01      	blt.n	8024d04 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x58>
 8024d00:	45f2      	cmp	sl, lr
 8024d02:	dc49      	bgt.n	8024d98 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xec>
 8024d04:	fa5f fa84 	uxtb.w	sl, r4
 8024d08:	ab01      	add	r3, sp, #4
 8024d0a:	46d1      	mov	r9, sl
 8024d0c:	469e      	mov	lr, r3
 8024d0e:	280f      	cmp	r0, #15
 8024d10:	f200 8098 	bhi.w	8024e44 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x198>
 8024d14:	2d0f      	cmp	r5, #15
 8024d16:	f200 8095 	bhi.w	8024e44 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x198>
 8024d1a:	b280      	uxth	r0, r0
 8024d1c:	b2ad      	uxth	r5, r5
 8024d1e:	fb00 f805 	mul.w	r8, r0, r5
 8024d22:	0104      	lsls	r4, r0, #4
 8024d24:	eba4 0608 	sub.w	r6, r4, r8
 8024d28:	b2b6      	uxth	r6, r6
 8024d2a:	fb06 f002 	mul.w	r0, r6, r2
 8024d2e:	ebc8 1505 	rsb	r5, r8, r5, lsl #4
 8024d32:	b2ad      	uxth	r5, r5
 8024d34:	f5c4 7280 	rsb	r2, r4, #256	; 0x100
 8024d38:	1b52      	subs	r2, r2, r5
 8024d3a:	b292      	uxth	r2, r2
 8024d3c:	fb02 000b 	mla	r0, r2, fp, r0
 8024d40:	fb05 000a 	mla	r0, r5, sl, r0
 8024d44:	fb08 0009 	mla	r0, r8, r9, r0
 8024d48:	1200      	asrs	r0, r0, #8
 8024d4a:	7008      	strb	r0, [r1, #0]
 8024d4c:	f897 9001 	ldrb.w	r9, [r7, #1]
 8024d50:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8024d54:	fb06 f909 	mul.w	r9, r6, r9
 8024d58:	fb02 9904 	mla	r9, r2, r4, r9
 8024d5c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8024d60:	7858      	ldrb	r0, [r3, #1]
 8024d62:	fb05 9404 	mla	r4, r5, r4, r9
 8024d66:	fb08 4000 	mla	r0, r8, r0, r4
 8024d6a:	1200      	asrs	r0, r0, #8
 8024d6c:	7048      	strb	r0, [r1, #1]
 8024d6e:	78bc      	ldrb	r4, [r7, #2]
 8024d70:	f89c 0002 	ldrb.w	r0, [ip, #2]
 8024d74:	fb06 f604 	mul.w	r6, r6, r4
 8024d78:	fb02 6600 	mla	r6, r2, r0, r6
 8024d7c:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8024d80:	789b      	ldrb	r3, [r3, #2]
 8024d82:	fb05 6500 	mla	r5, r5, r0, r6
 8024d86:	fb08 5803 	mla	r8, r8, r3, r5
 8024d8a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8024d8e:	f881 8002 	strb.w	r8, [r1, #2]
 8024d92:	b003      	add	sp, #12
 8024d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024d98:	b385      	cbz	r5, 8024dfc <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x150>
 8024d9a:	2e00      	cmp	r6, #0
 8024d9c:	db40      	blt.n	8024e20 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x174>
 8024d9e:	45b0      	cmp	r8, r6
 8024da0:	dd3e      	ble.n	8024e20 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x174>
 8024da2:	f819 e008 	ldrb.w	lr, [r9, r8]
 8024da6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8024daa:	449e      	add	lr, r3
 8024dac:	3601      	adds	r6, #1
 8024dae:	f89e a000 	ldrb.w	sl, [lr]
 8024db2:	d431      	bmi.n	8024e18 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x16c>
 8024db4:	45b0      	cmp	r8, r6
 8024db6:	dd2f      	ble.n	8024e18 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x16c>
 8024db8:	2800      	cmp	r0, #0
 8024dba:	d03f      	beq.n	8024e3c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x190>
 8024dbc:	44c8      	add	r8, r9
 8024dbe:	f898 4001 	ldrb.w	r4, [r8, #1]
 8024dc2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024dc6:	f813 9004 	ldrb.w	r9, [r3, r4]
 8024dca:	4423      	add	r3, r4
 8024dcc:	e79f      	b.n	8024d0e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x62>
 8024dce:	2e00      	cmp	r6, #0
 8024dd0:	db01      	blt.n	8024dd6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8024dd2:	45b0      	cmp	r8, r6
 8024dd4:	dc1a      	bgt.n	8024e0c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>
 8024dd6:	f10d 0c04 	add.w	ip, sp, #4
 8024dda:	1c72      	adds	r2, r6, #1
 8024ddc:	f89c b000 	ldrb.w	fp, [ip]
 8024de0:	d409      	bmi.n	8024df6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x14a>
 8024de2:	4590      	cmp	r8, r2
 8024de4:	dd07      	ble.n	8024df6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x14a>
 8024de6:	b1f0      	cbz	r0, 8024e26 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x17a>
 8024de8:	f899 7001 	ldrb.w	r7, [r9, #1]
 8024dec:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024df0:	5dda      	ldrb	r2, [r3, r7]
 8024df2:	441f      	add	r7, r3
 8024df4:	e781      	b.n	8024cfa <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 8024df6:	b2e2      	uxtb	r2, r4
 8024df8:	af01      	add	r7, sp, #4
 8024dfa:	e77e      	b.n	8024cfa <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 8024dfc:	280f      	cmp	r0, #15
 8024dfe:	fa5f fa84 	uxtb.w	sl, r4
 8024e02:	d81f      	bhi.n	8024e44 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x198>
 8024e04:	ab01      	add	r3, sp, #4
 8024e06:	469e      	mov	lr, r3
 8024e08:	46d1      	mov	r9, sl
 8024e0a:	e786      	b.n	8024d1a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x6e>
 8024e0c:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8024e10:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8024e14:	449c      	add	ip, r3
 8024e16:	e7e0      	b.n	8024dda <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8024e18:	fa5f f984 	uxtb.w	r9, r4
 8024e1c:	ab01      	add	r3, sp, #4
 8024e1e:	e776      	b.n	8024d0e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x62>
 8024e20:	f10d 0e04 	add.w	lr, sp, #4
 8024e24:	e7c2      	b.n	8024dac <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x100>
 8024e26:	f1be 0f00 	cmp.w	lr, #0
 8024e2a:	b2e2      	uxtb	r2, r4
 8024e2c:	af01      	add	r7, sp, #4
 8024e2e:	f6bf af67 	bge.w	8024d00 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x54>
 8024e32:	463b      	mov	r3, r7
 8024e34:	46be      	mov	lr, r7
 8024e36:	4691      	mov	r9, r2
 8024e38:	4692      	mov	sl, r2
 8024e3a:	e76b      	b.n	8024d14 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8024e3c:	fa5f f984 	uxtb.w	r9, r4
 8024e40:	ab01      	add	r3, sp, #4
 8024e42:	e767      	b.n	8024d14 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8024e44:	4b03      	ldr	r3, [pc, #12]	; (8024e54 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x1a8>)
 8024e46:	4a04      	ldr	r2, [pc, #16]	; (8024e58 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x1ac>)
 8024e48:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8024e4c:	4803      	ldr	r0, [pc, #12]	; (8024e5c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x1b0>)
 8024e4e:	f003 f90f 	bl	8028070 <__assert_func>
 8024e52:	bf00      	nop
 8024e54:	0802b2dc 	.word	0x0802b2dc
 8024e58:	0802b954 	.word	0x0802b954
 8024e5c:	0802b460 	.word	0x0802b460

08024e60 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e64:	ed2d 8b0a 	vpush	{d8-d12}
 8024e68:	eeb0 aa40 	vmov.f32	s20, s0
 8024e6c:	eef0 9a60 	vmov.f32	s19, s1
 8024e70:	eeb0 9a41 	vmov.f32	s18, s2
 8024e74:	eef0 8a62 	vmov.f32	s17, s5
 8024e78:	eeb0 8a43 	vmov.f32	s16, s6
 8024e7c:	eeb0 ca44 	vmov.f32	s24, s8
 8024e80:	eef0 ba64 	vmov.f32	s23, s9
 8024e84:	eeb0 ba45 	vmov.f32	s22, s10
 8024e88:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8024e8c:	b093      	sub	sp, #76	; 0x4c
 8024e8e:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8024e92:	e9dd 412b 	ldrd	r4, r1, [sp, #172]	; 0xac
 8024e96:	e9dd 9b27 	ldrd	r9, fp, [sp, #156]	; 0x9c
 8024e9a:	9011      	str	r0, [sp, #68]	; 0x44
 8024e9c:	461a      	mov	r2, r3
 8024e9e:	6860      	ldr	r0, [r4, #4]
 8024ea0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8024ea2:	fb00 1803 	mla	r8, r0, r3, r1
 8024ea6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024ea8:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8024eaa:	6821      	ldr	r1, [r4, #0]
 8024eac:	685b      	ldr	r3, [r3, #4]
 8024eae:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8024eb2:	6800      	ldr	r0, [r0, #0]
 8024eb4:	eb01 0a08 	add.w	sl, r1, r8
 8024eb8:	3304      	adds	r3, #4
 8024eba:	f8dd 80a4 	ldr.w	r8, [sp, #164]	; 0xa4
 8024ebe:	9009      	str	r0, [sp, #36]	; 0x24
 8024ec0:	9307      	str	r3, [sp, #28]
 8024ec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024ec4:	2b00      	cmp	r3, #0
 8024ec6:	dc02      	bgt.n	8024ece <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8024ec8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024eca:	2b00      	cmp	r3, #0
 8024ecc:	dd61      	ble.n	8024f92 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8024ece:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024ed0:	2a00      	cmp	r2, #0
 8024ed2:	e9d3 6e02 	ldrd	r6, lr, [r3, #8]
 8024ed6:	b230      	sxth	r0, r6
 8024ed8:	fa0f f78e 	sxth.w	r7, lr
 8024edc:	f340 81fe 	ble.w	80252dc <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47c>
 8024ee0:	f8cd e018 	str.w	lr, [sp, #24]
 8024ee4:	f8dd e0a8 	ldr.w	lr, [sp, #168]	; 0xa8
 8024ee8:	1e45      	subs	r5, r0, #1
 8024eea:	f107 3cff 	add.w	ip, r7, #4294967295
 8024eee:	ea5f 4329 	movs.w	r3, r9, asr #16
 8024ef2:	ea4f 412b 	mov.w	r1, fp, asr #16
 8024ef6:	d405      	bmi.n	8024f04 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8024ef8:	42ab      	cmp	r3, r5
 8024efa:	da03      	bge.n	8024f04 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8024efc:	2900      	cmp	r1, #0
 8024efe:	db01      	blt.n	8024f04 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8024f00:	4561      	cmp	r1, ip
 8024f02:	db4b      	blt.n	8024f9c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8024f04:	1c5c      	adds	r4, r3, #1
 8024f06:	d406      	bmi.n	8024f16 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024f08:	4284      	cmp	r4, r0
 8024f0a:	dc04      	bgt.n	8024f16 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024f0c:	1c4c      	adds	r4, r1, #1
 8024f0e:	d402      	bmi.n	8024f16 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024f10:	42bc      	cmp	r4, r7
 8024f12:	f340 815e 	ble.w	80251d2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8024f16:	3a01      	subs	r2, #1
 8024f18:	44c1      	add	r9, r8
 8024f1a:	44f3      	add	fp, lr
 8024f1c:	f10a 0a03 	add.w	sl, sl, #3
 8024f20:	d1e5      	bne.n	8024eee <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8024f22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024f24:	2b00      	cmp	r3, #0
 8024f26:	dd34      	ble.n	8024f92 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8024f28:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8024f2c:	ee79 9aab 	vadd.f32	s19, s19, s23
 8024f30:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8024f34:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8024f38:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8024f3c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024f40:	ee76 6a68 	vsub.f32	s13, s12, s17
 8024f44:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8024f48:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024f4c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8024f50:	ee16 2a90 	vmov	r2, s13
 8024f54:	3b01      	subs	r3, #1
 8024f56:	930a      	str	r3, [sp, #40]	; 0x28
 8024f58:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024f5a:	fb92 f8f3 	sdiv	r8, r2, r3
 8024f5e:	ee17 2a10 	vmov	r2, s14
 8024f62:	eeb0 7a48 	vmov.f32	s14, s16
 8024f66:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8024f6a:	ee17 ba10 	vmov	fp, s14
 8024f6e:	eeb0 7a68 	vmov.f32	s14, s17
 8024f72:	fb92 f3f3 	sdiv	r3, r2, r3
 8024f76:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8024f7a:	932a      	str	r3, [sp, #168]	; 0xa8
 8024f7c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024f7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024f80:	ee17 9a10 	vmov	r9, s14
 8024f84:	eeb0 8a67 	vmov.f32	s16, s15
 8024f88:	eef0 8a46 	vmov.f32	s17, s12
 8024f8c:	bf18      	it	ne
 8024f8e:	461a      	movne	r2, r3
 8024f90:	e797      	b.n	8024ec2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8024f92:	b013      	add	sp, #76	; 0x4c
 8024f94:	ecbd 8b0a 	vpop	{d8-d12}
 8024f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024f9c:	f8dd e018 	ldr.w	lr, [sp, #24]
 8024fa0:	1e51      	subs	r1, r2, #1
 8024fa2:	fb08 9301 	mla	r3, r8, r1, r9
 8024fa6:	141b      	asrs	r3, r3, #16
 8024fa8:	9106      	str	r1, [sp, #24]
 8024faa:	f100 80aa 	bmi.w	8025102 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8024fae:	42ab      	cmp	r3, r5
 8024fb0:	f280 80a7 	bge.w	8025102 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8024fb4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024fb6:	fb03 b301 	mla	r3, r3, r1, fp
 8024fba:	141b      	asrs	r3, r3, #16
 8024fbc:	f100 80a1 	bmi.w	8025102 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8024fc0:	3f01      	subs	r7, #1
 8024fc2:	42bb      	cmp	r3, r7
 8024fc4:	f280 809d 	bge.w	8025102 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8024fc8:	2a00      	cmp	r2, #0
 8024fca:	ddaa      	ble.n	8024f22 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8024fcc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024fd0:	eb0a 0302 	add.w	r3, sl, r2
 8024fd4:	9308      	str	r3, [sp, #32]
 8024fd6:	f10a 0a03 	add.w	sl, sl, #3
 8024fda:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
 8024fde:	e062      	b.n	80250a6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8024fe0:	784c      	ldrb	r4, [r1, #1]
 8024fe2:	180d      	adds	r5, r1, r0
 8024fe4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024fe8:	4434      	add	r4, r6
 8024fea:	2a00      	cmp	r2, #0
 8024fec:	d07c      	beq.n	80250e8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8024fee:	5c08      	ldrb	r0, [r1, r0]
 8024ff0:	786f      	ldrb	r7, [r5, #1]
 8024ff2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024ff6:	1981      	adds	r1, r0, r6
 8024ff8:	4608      	mov	r0, r1
 8024ffa:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024ffe:	9106      	str	r1, [sp, #24]
 8025000:	4437      	add	r7, r6
 8025002:	b29b      	uxth	r3, r3
 8025004:	b292      	uxth	r2, r2
 8025006:	fb03 f502 	mul.w	r5, r3, r2
 802500a:	011b      	lsls	r3, r3, #4
 802500c:	f894 e000 	ldrb.w	lr, [r4]
 8025010:	1b59      	subs	r1, r3, r5
 8025012:	b289      	uxth	r1, r1
 8025014:	fb01 fe0e 	mul.w	lr, r1, lr
 8025018:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 802501c:	b292      	uxth	r2, r2
 802501e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8025022:	f816 6008 	ldrb.w	r6, [r6, r8]
 8025026:	1a9b      	subs	r3, r3, r2
 8025028:	b29b      	uxth	r3, r3
 802502a:	fb03 e606 	mla	r6, r3, r6, lr
 802502e:	f890 e000 	ldrb.w	lr, [r0]
 8025032:	f897 8000 	ldrb.w	r8, [r7]
 8025036:	fb02 660e 	mla	r6, r2, lr, r6
 802503a:	fb05 6808 	mla	r8, r5, r8, r6
 802503e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8025042:	f80a 8c03 	strb.w	r8, [sl, #-3]
 8025046:	f894 8001 	ldrb.w	r8, [r4, #1]
 802504a:	9829      	ldr	r0, [sp, #164]	; 0xa4
 802504c:	fb01 f608 	mul.w	r6, r1, r8
 8025050:	f89c e001 	ldrb.w	lr, [ip, #1]
 8025054:	4481      	add	r9, r0
 8025056:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8025058:	fb03 680e 	mla	r8, r3, lr, r6
 802505c:	4483      	add	fp, r0
 802505e:	9806      	ldr	r0, [sp, #24]
 8025060:	787e      	ldrb	r6, [r7, #1]
 8025062:	f890 e001 	ldrb.w	lr, [r0, #1]
 8025066:	fb02 8e0e 	mla	lr, r2, lr, r8
 802506a:	fb05 ee06 	mla	lr, r5, r6, lr
 802506e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8025072:	f80a ec02 	strb.w	lr, [sl, #-2]
 8025076:	78a4      	ldrb	r4, [r4, #2]
 8025078:	f89c 6002 	ldrb.w	r6, [ip, #2]
 802507c:	fb01 f104 	mul.w	r1, r1, r4
 8025080:	fb03 1106 	mla	r1, r3, r6, r1
 8025084:	7883      	ldrb	r3, [r0, #2]
 8025086:	78b8      	ldrb	r0, [r7, #2]
 8025088:	fb02 1103 	mla	r1, r2, r3, r1
 802508c:	fb05 1500 	mla	r5, r5, r0, r1
 8025090:	9b08      	ldr	r3, [sp, #32]
 8025092:	122d      	asrs	r5, r5, #8
 8025094:	4553      	cmp	r3, sl
 8025096:	f80a 5c01 	strb.w	r5, [sl, #-1]
 802509a:	d030      	beq.n	80250fe <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 802509c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802509e:	f10a 0a03 	add.w	sl, sl, #3
 80250a2:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80250a6:	ea4f 4329 	mov.w	r3, r9, asr #16
 80250aa:	ea4f 412b 	mov.w	r1, fp, asr #16
 80250ae:	fb00 3101 	mla	r1, r0, r1, r3
 80250b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80250b4:	9e07      	ldr	r6, [sp, #28]
 80250b6:	f812 8001 	ldrb.w	r8, [r2, r1]
 80250ba:	f3c9 3303 	ubfx	r3, r9, #12, #4
 80250be:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80250c2:	4411      	add	r1, r2
 80250c4:	eb06 0c08 	add.w	ip, r6, r8
 80250c8:	f3cb 3203 	ubfx	r2, fp, #12, #4
 80250cc:	2b00      	cmp	r3, #0
 80250ce:	d187      	bne.n	8024fe0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x180>
 80250d0:	b17a      	cbz	r2, 80250f2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 80250d2:	5c08      	ldrb	r0, [r1, r0]
 80250d4:	9907      	ldr	r1, [sp, #28]
 80250d6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80250da:	1841      	adds	r1, r0, r1
 80250dc:	4667      	mov	r7, ip
 80250de:	9106      	str	r1, [sp, #24]
 80250e0:	4664      	mov	r4, ip
 80250e2:	9e07      	ldr	r6, [sp, #28]
 80250e4:	4608      	mov	r0, r1
 80250e6:	e78c      	b.n	8025002 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80250e8:	4667      	mov	r7, ip
 80250ea:	f8cd c018 	str.w	ip, [sp, #24]
 80250ee:	4660      	mov	r0, ip
 80250f0:	e787      	b.n	8025002 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80250f2:	4667      	mov	r7, ip
 80250f4:	f8cd c018 	str.w	ip, [sp, #24]
 80250f8:	4664      	mov	r4, ip
 80250fa:	4660      	mov	r0, ip
 80250fc:	e781      	b.n	8025002 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80250fe:	469a      	mov	sl, r3
 8025100:	e70f      	b.n	8024f22 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8025102:	2a00      	cmp	r2, #0
 8025104:	f77f af0d 	ble.w	8024f22 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8025108:	9d06      	ldr	r5, [sp, #24]
 802510a:	ea4f 4329 	mov.w	r3, r9, asr #16
 802510e:	ea4f 412b 	mov.w	r1, fp, asr #16
 8025112:	4657      	mov	r7, sl
 8025114:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8025118:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 802511a:	f8dd a0a8 	ldr.w	sl, [sp, #168]	; 0xa8
 802511e:	2b00      	cmp	r3, #0
 8025120:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8025124:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8025128:	db31      	blt.n	802518e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802512a:	f106 3cff 	add.w	ip, r6, #4294967295
 802512e:	4563      	cmp	r3, ip
 8025130:	da2d      	bge.n	802518e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8025132:	2900      	cmp	r1, #0
 8025134:	db2b      	blt.n	802518e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8025136:	f10e 3cff 	add.w	ip, lr, #4294967295
 802513a:	4561      	cmp	r1, ip
 802513c:	da27      	bge.n	802518e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802513e:	fa0f fc86 	sxth.w	ip, r6
 8025142:	fb01 330c 	mla	r3, r1, ip, r3
 8025146:	9e07      	ldr	r6, [sp, #28]
 8025148:	9909      	ldr	r1, [sp, #36]	; 0x24
 802514a:	f811 e003 	ldrb.w	lr, [r1, r3]
 802514e:	440b      	add	r3, r1
 8025150:	4631      	mov	r1, r6
 8025152:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8025156:	4471      	add	r1, lr
 8025158:	910e      	str	r1, [sp, #56]	; 0x38
 802515a:	2800      	cmp	r0, #0
 802515c:	d04f      	beq.n	80251fe <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 802515e:	7859      	ldrb	r1, [r3, #1]
 8025160:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8025164:	1871      	adds	r1, r6, r1
 8025166:	9108      	str	r1, [sp, #32]
 8025168:	2a00      	cmp	r2, #0
 802516a:	f000 80b2 	beq.w	80252d2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 802516e:	eb03 010c 	add.w	r1, r3, ip
 8025172:	f813 600c 	ldrb.w	r6, [r3, ip]
 8025176:	7849      	ldrb	r1, [r1, #1]
 8025178:	9b07      	ldr	r3, [sp, #28]
 802517a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802517e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8025182:	1859      	adds	r1, r3, r1
 8025184:	18f3      	adds	r3, r6, r3
 8025186:	910c      	str	r1, [sp, #48]	; 0x30
 8025188:	930d      	str	r3, [sp, #52]	; 0x34
 802518a:	9e08      	ldr	r6, [sp, #32]
 802518c:	e03d      	b.n	802520a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 802518e:	f113 0c01 	adds.w	ip, r3, #1
 8025192:	d406      	bmi.n	80251a2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8025194:	45b4      	cmp	ip, r6
 8025196:	dc04      	bgt.n	80251a2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8025198:	f111 0c01 	adds.w	ip, r1, #1
 802519c:	d401      	bmi.n	80251a2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802519e:	45f4      	cmp	ip, lr
 80251a0:	dd1d      	ble.n	80251de <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 80251a2:	2d00      	cmp	r5, #0
 80251a4:	f107 0703 	add.w	r7, r7, #3
 80251a8:	44c1      	add	r9, r8
 80251aa:	44d3      	add	fp, sl
 80251ac:	dd07      	ble.n	80251be <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 80251ae:	e9d4 6e02 	ldrd	r6, lr, [r4, #8]
 80251b2:	3d01      	subs	r5, #1
 80251b4:	ea4f 4329 	mov.w	r3, r9, asr #16
 80251b8:	ea4f 412b 	mov.w	r1, fp, asr #16
 80251bc:	e7af      	b.n	802511e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 80251be:	9b06      	ldr	r3, [sp, #24]
 80251c0:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 80251c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80251c8:	3301      	adds	r3, #1
 80251ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80251ce:	449a      	add	sl, r3
 80251d0:	e6a7      	b.n	8024f22 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 80251d2:	3a01      	subs	r2, #1
 80251d4:	f8dd e018 	ldr.w	lr, [sp, #24]
 80251d8:	4615      	mov	r5, r2
 80251da:	9206      	str	r2, [sp, #24]
 80251dc:	e799      	b.n	8025112 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 80251de:	fa0f fe8e 	sxth.w	lr, lr
 80251e2:	b236      	sxth	r6, r6
 80251e4:	e9cd 0204 	strd	r0, r2, [sp, #16]
 80251e8:	e9cd 3102 	strd	r3, r1, [sp, #8]
 80251ec:	e9cd 6e00 	strd	r6, lr, [sp]
 80251f0:	9b07      	ldr	r3, [sp, #28]
 80251f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80251f4:	4639      	mov	r1, r7
 80251f6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80251f8:	f7ff fd58 	bl	8024cac <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 80251fc:	e7d1      	b.n	80251a2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80251fe:	2a00      	cmp	r2, #0
 8025200:	d15b      	bne.n	80252ba <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45a>
 8025202:	460e      	mov	r6, r1
 8025204:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
 8025208:	9108      	str	r1, [sp, #32]
 802520a:	b283      	uxth	r3, r0
 802520c:	b292      	uxth	r2, r2
 802520e:	fb03 f002 	mul.w	r0, r3, r2
 8025212:	011b      	lsls	r3, r3, #4
 8025214:	f896 c000 	ldrb.w	ip, [r6]
 8025218:	1a19      	subs	r1, r3, r0
 802521a:	b289      	uxth	r1, r1
 802521c:	fb01 fc0c 	mul.w	ip, r1, ip
 8025220:	9e07      	ldr	r6, [sp, #28]
 8025222:	ebc0 1202 	rsb	r2, r0, r2, lsl #4
 8025226:	b292      	uxth	r2, r2
 8025228:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 802522c:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8025230:	1a9b      	subs	r3, r3, r2
 8025232:	b29b      	uxth	r3, r3
 8025234:	fb03 cc0e 	mla	ip, r3, lr, ip
 8025238:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802523a:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 802523e:	f896 e000 	ldrb.w	lr, [r6]
 8025242:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8025244:	f896 c000 	ldrb.w	ip, [r6]
 8025248:	9e10      	ldr	r6, [sp, #64]	; 0x40
 802524a:	fb02 6e0e 	mla	lr, r2, lr, r6
 802524e:	fb00 ec0c 	mla	ip, r0, ip, lr
 8025252:	9e08      	ldr	r6, [sp, #32]
 8025254:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8025258:	f887 c000 	strb.w	ip, [r7]
 802525c:	f896 c001 	ldrb.w	ip, [r6, #1]
 8025260:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8025262:	fb01 fc0c 	mul.w	ip, r1, ip
 8025266:	f896 e001 	ldrb.w	lr, [r6, #1]
 802526a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802526c:	fb03 ce0e 	mla	lr, r3, lr, ip
 8025270:	f896 c001 	ldrb.w	ip, [r6, #1]
 8025274:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8025276:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 802527a:	f896 c001 	ldrb.w	ip, [r6, #1]
 802527e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8025280:	fb02 ee06 	mla	lr, r2, r6, lr
 8025284:	fb00 ec0c 	mla	ip, r0, ip, lr
 8025288:	9e08      	ldr	r6, [sp, #32]
 802528a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802528e:	f887 c001 	strb.w	ip, [r7, #1]
 8025292:	f896 c002 	ldrb.w	ip, [r6, #2]
 8025296:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8025298:	fb01 f10c 	mul.w	r1, r1, ip
 802529c:	f896 e002 	ldrb.w	lr, [r6, #2]
 80252a0:	fb03 110e 	mla	r1, r3, lr, r1
 80252a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80252a6:	789e      	ldrb	r6, [r3, #2]
 80252a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80252aa:	fb02 1206 	mla	r2, r2, r6, r1
 80252ae:	789b      	ldrb	r3, [r3, #2]
 80252b0:	fb00 2303 	mla	r3, r0, r3, r2
 80252b4:	121b      	asrs	r3, r3, #8
 80252b6:	70bb      	strb	r3, [r7, #2]
 80252b8:	e773      	b.n	80251a2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80252ba:	4631      	mov	r1, r6
 80252bc:	f813 600c 	ldrb.w	r6, [r3, ip]
 80252c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80252c2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80252c6:	1871      	adds	r1, r6, r1
 80252c8:	930c      	str	r3, [sp, #48]	; 0x30
 80252ca:	910d      	str	r1, [sp, #52]	; 0x34
 80252cc:	9308      	str	r3, [sp, #32]
 80252ce:	461e      	mov	r6, r3
 80252d0:	e79b      	b.n	802520a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80252d2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80252d4:	e9cd 660c 	strd	r6, r6, [sp, #48]	; 0x30
 80252d8:	460e      	mov	r6, r1
 80252da:	e796      	b.n	802520a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80252dc:	f43f ae21 	beq.w	8024f22 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 80252e0:	1e45      	subs	r5, r0, #1
 80252e2:	e65d      	b.n	8024fa0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>

080252e4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 80252e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80252e8:	b087      	sub	sp, #28
 80252ea:	f9bd c040 	ldrsh.w	ip, [sp, #64]	; 0x40
 80252ee:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 80252f2:	fb06 080c 	mla	r8, r6, ip, r0
 80252f6:	2e00      	cmp	r6, #0
 80252f8:	4696      	mov	lr, r2
 80252fa:	eb02 0a08 	add.w	sl, r2, r8
 80252fe:	f106 0b01 	add.w	fp, r6, #1
 8025302:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	; 0x44
 8025306:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
 802530a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 802530e:	f89d 4058 	ldrb.w	r4, [sp, #88]	; 0x58
 8025312:	db02      	blt.n	802531a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x36>
 8025314:	42b2      	cmp	r2, r6
 8025316:	f300 80f1 	bgt.w	80254fc <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x218>
 802531a:	2600      	movs	r6, #0
 802531c:	46b1      	mov	r9, r6
 802531e:	46b0      	mov	r8, r6
 8025320:	46b6      	mov	lr, r6
 8025322:	f1bb 0f00 	cmp.w	fp, #0
 8025326:	db02      	blt.n	802532e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x4a>
 8025328:	455a      	cmp	r2, fp
 802532a:	f300 8101 	bgt.w	8025530 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 802532e:	f04f 0c00 	mov.w	ip, #0
 8025332:	e9cd cc02 	strd	ip, ip, [sp, #8]
 8025336:	f8cd c004 	str.w	ip, [sp, #4]
 802533a:	2f0f      	cmp	r7, #15
 802533c:	f200 813a 	bhi.w	80255b4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2d0>
 8025340:	2d0f      	cmp	r5, #15
 8025342:	f200 8137 	bhi.w	80255b4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2d0>
 8025346:	b2a8      	uxth	r0, r5
 8025348:	b2bb      	uxth	r3, r7
 802534a:	fb00 f503 	mul.w	r5, r0, r3
 802534e:	9a01      	ldr	r2, [sp, #4]
 8025350:	ebc5 1000 	rsb	r0, r5, r0, lsl #4
 8025354:	b280      	uxth	r0, r0
 8025356:	fb00 fa02 	mul.w	sl, r0, r2
 802535a:	fb05 fb0c 	mul.w	fp, r5, ip
 802535e:	011b      	lsls	r3, r3, #4
 8025360:	1b5f      	subs	r7, r3, r5
 8025362:	b2bf      	uxth	r7, r7
 8025364:	fb07 f206 	mul.w	r2, r7, r6
 8025368:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 802536c:	1a1b      	subs	r3, r3, r0
 802536e:	b29b      	uxth	r3, r3
 8025370:	fb03 2209 	mla	r2, r3, r9, r2
 8025374:	4452      	add	r2, sl
 8025376:	445a      	add	r2, fp
 8025378:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802537c:	2a00      	cmp	r2, #0
 802537e:	f000 80ba 	beq.w	80254f6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x212>
 8025382:	b2a4      	uxth	r4, r4
 8025384:	fb02 f204 	mul.w	r2, r2, r4
 8025388:	f102 0a01 	add.w	sl, r2, #1
 802538c:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8025390:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8025394:	9205      	str	r2, [sp, #20]
 8025396:	f008 12ff 	and.w	r2, r8, #16711935	; 0xff00ff
 802539a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802539e:	fb06 f202 	mul.w	r2, r6, r2
 80253a2:	fb06 f608 	mul.w	r6, r6, r8
 80253a6:	f00e 1bff 	and.w	fp, lr, #16711935	; 0xff00ff
 80253aa:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80253ae:	fb09 fb0b 	mul.w	fp, r9, fp
 80253b2:	fb09 fe0e 	mul.w	lr, r9, lr
 80253b6:	f506 7980 	add.w	r9, r6, #256	; 0x100
 80253ba:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 80253be:	0a36      	lsrs	r6, r6, #8
 80253c0:	ea4f 2812 	mov.w	r8, r2, lsr #8
 80253c4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80253c8:	fb07 f606 	mul.w	r6, r7, r6
 80253cc:	9404      	str	r4, [sp, #16]
 80253ce:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 80253d2:	9c03      	ldr	r4, [sp, #12]
 80253d4:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80253d8:	4490      	add	r8, r2
 80253da:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80253de:	f004 12ff 	and.w	r2, r4, #16711935	; 0xff00ff
 80253e2:	fb0c f202 	mul.w	r2, ip, r2
 80253e6:	f404 497f 	and.w	r9, r4, #65280	; 0xff00
 80253ea:	ea4f 2a1b 	mov.w	sl, fp, lsr #8
 80253ee:	9c02      	ldr	r4, [sp, #8]
 80253f0:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80253f4:	fb0c fc09 	mul.w	ip, ip, r9
 80253f8:	fb08 f807 	mul.w	r8, r8, r7
 80253fc:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8025400:	9603      	str	r6, [sp, #12]
 8025402:	f50e 7980 	add.w	r9, lr, #256	; 0x100
 8025406:	9e01      	ldr	r6, [sp, #4]
 8025408:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802540c:	44d3      	add	fp, sl
 802540e:	eb09 2e1e 	add.w	lr, r9, lr, lsr #8
 8025412:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025416:	f404 497f 	and.w	r9, r4, #65280	; 0xff00
 802541a:	fb06 f707 	mul.w	r7, r6, r7
 802541e:	fb06 f909 	mul.w	r9, r6, r9
 8025422:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8025426:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802542a:	9e03      	ldr	r6, [sp, #12]
 802542c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8025430:	ea4f 2a12 	mov.w	sl, r2, lsr #8
 8025434:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025438:	fb0b 8803 	mla	r8, fp, r3, r8
 802543c:	fb03 660e 	mla	r6, r3, lr, r6
 8025440:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 8025444:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8025448:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 802544c:	4492      	add	sl, r2
 802544e:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 8025452:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 8025456:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802545a:	0a3a      	lsrs	r2, r7, #8
 802545c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8025460:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025464:	fb0b 8b05 	mla	fp, fp, r5, r8
 8025468:	fb05 660e 	mla	r6, r5, lr, r6
 802546c:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8025470:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025474:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8025478:	44b8      	add	r8, r7
 802547a:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 802547e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8025482:	0a2d      	lsrs	r5, r5, #8
 8025484:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8025488:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802548c:	fb00 6505 	mla	r5, r0, r5, r6
 8025490:	fb08 b800 	mla	r8, r8, r0, fp
 8025494:	0a2d      	lsrs	r5, r5, #8
 8025496:	ea4f 2018 	mov.w	r0, r8, lsr #8
 802549a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802549e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80254a2:	4328      	orrs	r0, r5
 80254a4:	784b      	ldrb	r3, [r1, #1]
 80254a6:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80254aa:	9c04      	ldr	r4, [sp, #16]
 80254ac:	788d      	ldrb	r5, [r1, #2]
 80254ae:	fa5f fa80 	uxtb.w	sl, r0
 80254b2:	fb13 f602 	smulbb	r6, r3, r2
 80254b6:	fb15 f502 	smulbb	r5, r5, r2
 80254ba:	fb1a fa04 	smulbb	sl, sl, r4
 80254be:	780f      	ldrb	r7, [r1, #0]
 80254c0:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 80254c4:	0c00      	lsrs	r0, r0, #16
 80254c6:	fb0c 6304 	mla	r3, ip, r4, r6
 80254ca:	fb07 a202 	mla	r2, r7, r2, sl
 80254ce:	fb00 5404 	mla	r4, r0, r4, r5
 80254d2:	b29b      	uxth	r3, r3
 80254d4:	b292      	uxth	r2, r2
 80254d6:	b2a4      	uxth	r4, r4
 80254d8:	1c56      	adds	r6, r2, #1
 80254da:	1c5d      	adds	r5, r3, #1
 80254dc:	1c60      	adds	r0, r4, #1
 80254de:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 80254e2:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 80254e6:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 80254ea:	1212      	asrs	r2, r2, #8
 80254ec:	121b      	asrs	r3, r3, #8
 80254ee:	1224      	asrs	r4, r4, #8
 80254f0:	700a      	strb	r2, [r1, #0]
 80254f2:	704b      	strb	r3, [r1, #1]
 80254f4:	708c      	strb	r4, [r1, #2]
 80254f6:	b007      	add	sp, #28
 80254f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80254fc:	2800      	cmp	r0, #0
 80254fe:	db01      	blt.n	8025504 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x220>
 8025500:	4584      	cmp	ip, r0
 8025502:	dc3d      	bgt.n	8025580 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>
 8025504:	f04f 0900 	mov.w	r9, #0
 8025508:	46ce      	mov	lr, r9
 802550a:	1c46      	adds	r6, r0, #1
 802550c:	d42a      	bmi.n	8025564 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x280>
 802550e:	45b4      	cmp	ip, r6
 8025510:	dd28      	ble.n	8025564 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x280>
 8025512:	b137      	cbz	r7, 8025522 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x23e>
 8025514:	f89a 6001 	ldrb.w	r6, [sl, #1]
 8025518:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
 802551c:	ea4f 6618 	mov.w	r6, r8, lsr #24
 8025520:	e6ff      	b.n	8025322 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 8025522:	f1bb 0f00 	cmp.w	fp, #0
 8025526:	db3e      	blt.n	80255a6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2c2>
 8025528:	455a      	cmp	r2, fp
 802552a:	dd3c      	ble.n	80255a6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2c2>
 802552c:	463e      	mov	r6, r7
 802552e:	46b8      	mov	r8, r7
 8025530:	b1dd      	cbz	r5, 802556a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x286>
 8025532:	2800      	cmp	r0, #0
 8025534:	db30      	blt.n	8025598 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2b4>
 8025536:	4584      	cmp	ip, r0
 8025538:	dd2e      	ble.n	8025598 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2b4>
 802553a:	f81a 200c 	ldrb.w	r2, [sl, ip]
 802553e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8025542:	9202      	str	r2, [sp, #8]
 8025544:	0e12      	lsrs	r2, r2, #24
 8025546:	9201      	str	r2, [sp, #4]
 8025548:	3001      	adds	r0, #1
 802554a:	d420      	bmi.n	802558e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2aa>
 802554c:	4584      	cmp	ip, r0
 802554e:	dd1e      	ble.n	802558e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2aa>
 8025550:	b337      	cbz	r7, 80255a0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2bc>
 8025552:	44d4      	add	ip, sl
 8025554:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8025558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802555c:	9303      	str	r3, [sp, #12]
 802555e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025562:	e6ea      	b.n	802533a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x56>
 8025564:	2600      	movs	r6, #0
 8025566:	46b0      	mov	r8, r6
 8025568:	e6db      	b.n	8025322 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 802556a:	2f0f      	cmp	r7, #15
 802556c:	d822      	bhi.n	80255b4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2d0>
 802556e:	b2bb      	uxth	r3, r7
 8025570:	4628      	mov	r0, r5
 8025572:	46ab      	mov	fp, r5
 8025574:	46aa      	mov	sl, r5
 8025576:	e9cd 5502 	strd	r5, r5, [sp, #8]
 802557a:	46ac      	mov	ip, r5
 802557c:	9501      	str	r5, [sp, #4]
 802557e:	e6ee      	b.n	802535e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8025580:	f81e 6008 	ldrb.w	r6, [lr, r8]
 8025584:	f853 e026 	ldr.w	lr, [r3, r6, lsl #2]
 8025588:	ea4f 691e 	mov.w	r9, lr, lsr #24
 802558c:	e7bd      	b.n	802550a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x226>
 802558e:	f04f 0c00 	mov.w	ip, #0
 8025592:	f8cd c00c 	str.w	ip, [sp, #12]
 8025596:	e6d0      	b.n	802533a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x56>
 8025598:	2200      	movs	r2, #0
 802559a:	e9cd 2201 	strd	r2, r2, [sp, #4]
 802559e:	e7d3      	b.n	8025548 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 80255a0:	9703      	str	r7, [sp, #12]
 80255a2:	46bc      	mov	ip, r7
 80255a4:	e6cc      	b.n	8025340 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x5c>
 80255a6:	46b8      	mov	r8, r7
 80255a8:	e9cd 7702 	strd	r7, r7, [sp, #8]
 80255ac:	46bc      	mov	ip, r7
 80255ae:	9701      	str	r7, [sp, #4]
 80255b0:	463e      	mov	r6, r7
 80255b2:	e6c5      	b.n	8025340 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x5c>
 80255b4:	4b03      	ldr	r3, [pc, #12]	; (80255c4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2e0>)
 80255b6:	4a04      	ldr	r2, [pc, #16]	; (80255c8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2e4>)
 80255b8:	f44f 710f 	mov.w	r1, #572	; 0x23c
 80255bc:	4803      	ldr	r0, [pc, #12]	; (80255cc <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2e8>)
 80255be:	f002 fd57 	bl	8028070 <__assert_func>
 80255c2:	bf00      	nop
 80255c4:	0802b2dc 	.word	0x0802b2dc
 80255c8:	0802b954 	.word	0x0802b954
 80255cc:	0802b460 	.word	0x0802b460

080255d0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80255d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80255d4:	ed2d 8b08 	vpush	{d8-d11}
 80255d8:	b0a9      	sub	sp, #164	; 0xa4
 80255da:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 80255dc:	9022      	str	r0, [sp, #136]	; 0x88
 80255de:	9114      	str	r1, [sp, #80]	; 0x50
 80255e0:	6860      	ldr	r0, [r4, #4]
 80255e2:	9940      	ldr	r1, [sp, #256]	; 0x100
 80255e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80255e6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80255e8:	eeb0 aa40 	vmov.f32	s20, s0
 80255ec:	fb00 1b02 	mla	fp, r0, r2, r1
 80255f0:	6821      	ldr	r1, [r4, #0]
 80255f2:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
 80255f6:	eb01 0800 	add.w	r8, r1, r0
 80255fa:	e9dd ab3b 	ldrd	sl, fp, [sp, #236]	; 0xec
 80255fe:	eef0 9a60 	vmov.f32	s19, s1
 8025602:	eeb0 9a41 	vmov.f32	s18, s2
 8025606:	eef0 8a62 	vmov.f32	s17, s5
 802560a:	eeb0 8a43 	vmov.f32	s16, s6
 802560e:	eef0 ba44 	vmov.f32	s23, s8
 8025612:	eeb0 ba64 	vmov.f32	s22, s9
 8025616:	eef0 aa45 	vmov.f32	s21, s10
 802561a:	46c1      	mov	r9, r8
 802561c:	465f      	mov	r7, fp
 802561e:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8025620:	9d42      	ldr	r5, [sp, #264]	; 0x108
 8025622:	6852      	ldr	r2, [r2, #4]
 8025624:	f89d 410c 	ldrb.w	r4, [sp, #268]	; 0x10c
 8025628:	3204      	adds	r2, #4
 802562a:	682d      	ldr	r5, [r5, #0]
 802562c:	920a      	str	r2, [sp, #40]	; 0x28
 802562e:	b2a2      	uxth	r2, r4
 8025630:	9423      	str	r4, [sp, #140]	; 0x8c
 8025632:	9511      	str	r5, [sp, #68]	; 0x44
 8025634:	9216      	str	r2, [sp, #88]	; 0x58
 8025636:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025638:	2a00      	cmp	r2, #0
 802563a:	dc02      	bgt.n	8025642 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802563c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 802563e:	2a00      	cmp	r2, #0
 8025640:	dd65      	ble.n	802570e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8025642:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8025644:	2b00      	cmp	r3, #0
 8025646:	e9d2 6c02 	ldrd	r6, ip, [r2, #8]
 802564a:	b235      	sxth	r5, r6
 802564c:	fa0f f88c 	sxth.w	r8, ip
 8025650:	f340 838b 	ble.w	8025d6a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x79a>
 8025654:	1e6c      	subs	r4, r5, #1
 8025656:	f108 3eff 	add.w	lr, r8, #4294967295
 802565a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 802565e:	e9dd cb3d 	ldrd	ip, fp, [sp, #244]	; 0xf4
 8025662:	ea5f 422a 	movs.w	r2, sl, asr #16
 8025666:	ea4f 4127 	mov.w	r1, r7, asr #16
 802566a:	d405      	bmi.n	8025678 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802566c:	42a2      	cmp	r2, r4
 802566e:	da03      	bge.n	8025678 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8025670:	2900      	cmp	r1, #0
 8025672:	db01      	blt.n	8025678 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8025674:	4571      	cmp	r1, lr
 8025676:	db4f      	blt.n	8025718 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8025678:	1c50      	adds	r0, r2, #1
 802567a:	d406      	bmi.n	802568a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 802567c:	42a8      	cmp	r0, r5
 802567e:	dc04      	bgt.n	802568a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8025680:	1c48      	adds	r0, r1, #1
 8025682:	d402      	bmi.n	802568a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8025684:	4540      	cmp	r0, r8
 8025686:	f340 834c 	ble.w	8025d22 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x752>
 802568a:	3b01      	subs	r3, #1
 802568c:	44e2      	add	sl, ip
 802568e:	445f      	add	r7, fp
 8025690:	f109 0903 	add.w	r9, r9, #3
 8025694:	d1e5      	bne.n	8025662 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025696:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8025698:	2b00      	cmp	r3, #0
 802569a:	dd38      	ble.n	802570e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 802569c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80256a0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80256a4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80256a8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80256ac:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80256b0:	ee29 6aa7 	vmul.f32	s12, s19, s15
 80256b4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80256b8:	ee76 6a68 	vsub.f32	s13, s12, s17
 80256bc:	ee37 7ac8 	vsub.f32	s14, s15, s16
 80256c0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80256c4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80256c8:	ee16 2a90 	vmov	r2, s13
 80256cc:	3b01      	subs	r3, #1
 80256ce:	9314      	str	r3, [sp, #80]	; 0x50
 80256d0:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80256d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80256d6:	ee17 2a10 	vmov	r2, s14
 80256da:	eeb0 7a48 	vmov.f32	s14, s16
 80256de:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80256e2:	ee17 7a10 	vmov	r7, s14
 80256e6:	eeb0 7a68 	vmov.f32	s14, s17
 80256ea:	933d      	str	r3, [sp, #244]	; 0xf4
 80256ec:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80256ee:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80256f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80256f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80256f8:	933e      	str	r3, [sp, #248]	; 0xf8
 80256fa:	ee17 aa10 	vmov	sl, s14
 80256fe:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8025700:	eeb0 8a67 	vmov.f32	s16, s15
 8025704:	eef0 8a46 	vmov.f32	s17, s12
 8025708:	bf08      	it	eq
 802570a:	4613      	moveq	r3, r2
 802570c:	e793      	b.n	8025636 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802570e:	b029      	add	sp, #164	; 0xa4
 8025710:	ecbd 8b08 	vpop	{d8-d11}
 8025714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025718:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 802571c:	983d      	ldr	r0, [sp, #244]	; 0xf4
 802571e:	1e59      	subs	r1, r3, #1
 8025720:	fb00 a201 	mla	r2, r0, r1, sl
 8025724:	1412      	asrs	r2, r2, #16
 8025726:	9109      	str	r1, [sp, #36]	; 0x24
 8025728:	f100 8168 	bmi.w	80259fc <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42c>
 802572c:	42a2      	cmp	r2, r4
 802572e:	f280 8165 	bge.w	80259fc <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42c>
 8025732:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8025734:	fb02 7201 	mla	r2, r2, r1, r7
 8025738:	1412      	asrs	r2, r2, #16
 802573a:	f100 815f 	bmi.w	80259fc <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42c>
 802573e:	f108 31ff 	add.w	r1, r8, #4294967295
 8025742:	428a      	cmp	r2, r1
 8025744:	f280 815a 	bge.w	80259fc <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42c>
 8025748:	2b00      	cmp	r3, #0
 802574a:	dda4      	ble.n	8025696 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 802574c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025750:	444b      	add	r3, r9
 8025752:	9310      	str	r3, [sp, #64]	; 0x40
 8025754:	f109 0303 	add.w	r3, r9, #3
 8025758:	9309      	str	r3, [sp, #36]	; 0x24
 802575a:	46d1      	mov	r9, sl
 802575c:	973c      	str	r7, [sp, #240]	; 0xf0
 802575e:	462e      	mov	r6, r5
 8025760:	463b      	mov	r3, r7
 8025762:	e12b      	b.n	80259bc <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8025764:	785f      	ldrb	r7, [r3, #1]
 8025766:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 802576a:	9712      	str	r7, [sp, #72]	; 0x48
 802576c:	0e3f      	lsrs	r7, r7, #24
 802576e:	970b      	str	r7, [sp, #44]	; 0x2c
 8025770:	b16a      	cbz	r2, 802578e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8025772:	199f      	adds	r7, r3, r6
 8025774:	5d9b      	ldrb	r3, [r3, r6]
 8025776:	4626      	mov	r6, r4
 8025778:	787f      	ldrb	r7, [r7, #1]
 802577a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802577e:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
 8025782:	9313      	str	r3, [sp, #76]	; 0x4c
 8025784:	9415      	str	r4, [sp, #84]	; 0x54
 8025786:	0e1b      	lsrs	r3, r3, #24
 8025788:	0e24      	lsrs	r4, r4, #24
 802578a:	940d      	str	r4, [sp, #52]	; 0x34
 802578c:	930c      	str	r3, [sp, #48]	; 0x30
 802578e:	fa1f fc81 	uxth.w	ip, r1
 8025792:	b292      	uxth	r2, r2
 8025794:	fb0c f602 	mul.w	r6, ip, r2
 8025798:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 802579c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802579e:	ebac 0706 	sub.w	r7, ip, r6
 80257a2:	b2bf      	uxth	r7, r7
 80257a4:	fb07 f103 	mul.w	r1, r7, r3
 80257a8:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 80257ac:	b292      	uxth	r2, r2
 80257ae:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 80257b2:	1a9b      	subs	r3, r3, r2
 80257b4:	b29b      	uxth	r3, r3
 80257b6:	fb03 1100 	mla	r1, r3, r0, r1
 80257ba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80257bc:	fb02 1104 	mla	r1, r2, r4, r1
 80257c0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80257c2:	fb06 1104 	mla	r1, r6, r4, r1
 80257c6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80257ca:	2900      	cmp	r1, #0
 80257cc:	f000 80e5 	beq.w	802599a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 80257d0:	f005 14ff 	and.w	r4, r5, #16711935	; 0xff00ff
 80257d4:	28ff      	cmp	r0, #255	; 0xff
 80257d6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80257da:	940e      	str	r4, [sp, #56]	; 0x38
 80257dc:	950f      	str	r5, [sp, #60]	; 0x3c
 80257de:	d01d      	beq.n	802581c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24c>
 80257e0:	fb04 fe00 	mul.w	lr, r4, r0
 80257e4:	fb05 f800 	mul.w	r8, r5, r0
 80257e8:	ea4f 251e 	mov.w	r5, lr, lsr #8
 80257ec:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80257f0:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80257f4:	f508 7080 	add.w	r0, r8, #256	; 0x100
 80257f8:	44ae      	add	lr, r5
 80257fa:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80257fe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025802:	0a00      	lsrs	r0, r0, #8
 8025804:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025808:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802580c:	ea4e 0e00 	orr.w	lr, lr, r0
 8025810:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8025814:	900e      	str	r0, [sp, #56]	; 0x38
 8025816:	f40e 407f 	and.w	r0, lr, #65280	; 0xff00
 802581a:	900f      	str	r0, [sp, #60]	; 0x3c
 802581c:	9812      	ldr	r0, [sp, #72]	; 0x48
 802581e:	f000 1eff 	and.w	lr, r0, #16711935	; 0xff00ff
 8025822:	f400 487f 	and.w	r8, r0, #65280	; 0xff00
 8025826:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8025828:	28ff      	cmp	r0, #255	; 0xff
 802582a:	d01c      	beq.n	8025866 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 802582c:	fb0e fe00 	mul.w	lr, lr, r0
 8025830:	fb08 f800 	mul.w	r8, r8, r0
 8025834:	ea4f 251e 	mov.w	r5, lr, lsr #8
 8025838:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802583c:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8025840:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8025844:	44ae      	add	lr, r5
 8025846:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 802584a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802584e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8025852:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025856:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802585a:	ea4e 0808 	orr.w	r8, lr, r8
 802585e:	f008 1eff 	and.w	lr, r8, #16711935	; 0xff00ff
 8025862:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8025866:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8025868:	f000 1cff 	and.w	ip, r0, #16711935	; 0xff00ff
 802586c:	f400 4a7f 	and.w	sl, r0, #65280	; 0xff00
 8025870:	980c      	ldr	r0, [sp, #48]	; 0x30
 8025872:	28ff      	cmp	r0, #255	; 0xff
 8025874:	d01c      	beq.n	80258b0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8025876:	fb0c fc00 	mul.w	ip, ip, r0
 802587a:	fb0a fa00 	mul.w	sl, sl, r0
 802587e:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8025882:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8025886:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802588a:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 802588e:	44ac      	add	ip, r5
 8025890:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8025894:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025898:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802589c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80258a0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80258a4:	ea4c 0a0a 	orr.w	sl, ip, sl
 80258a8:	f00a 1cff 	and.w	ip, sl, #16711935	; 0xff00ff
 80258ac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80258b0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80258b2:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80258b6:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80258ba:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80258bc:	2cff      	cmp	r4, #255	; 0xff
 80258be:	d019      	beq.n	80258f4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 80258c0:	fb00 f004 	mul.w	r0, r0, r4
 80258c4:	fb0b fb04 	mul.w	fp, fp, r4
 80258c8:	0a05      	lsrs	r5, r0, #8
 80258ca:	f005 14ff 	and.w	r4, r5, #16711935	; 0xff00ff
 80258ce:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80258d2:	f50b 7580 	add.w	r5, fp, #256	; 0x100
 80258d6:	eb05 251b 	add.w	r5, r5, fp, lsr #8
 80258da:	4420      	add	r0, r4
 80258dc:	0a00      	lsrs	r0, r0, #8
 80258de:	0a2d      	lsrs	r5, r5, #8
 80258e0:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80258e4:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 80258e8:	ea40 0b0b 	orr.w	fp, r0, fp
 80258ec:	f00b 10ff 	and.w	r0, fp, #16711935	; 0xff00ff
 80258f0:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80258f4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80258f6:	fb0e fe07 	mul.w	lr, lr, r7
 80258fa:	fb01 f104 	mul.w	r1, r1, r4
 80258fe:	1c4d      	adds	r5, r1, #1
 8025900:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8025904:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8025908:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802590a:	fb08 f707 	mul.w	r7, r8, r7
 802590e:	fb05 ee03 	mla	lr, r5, r3, lr
 8025912:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8025914:	fb0c ee02 	mla	lr, ip, r2, lr
 8025918:	fb05 7703 	mla	r7, r5, r3, r7
 802591c:	fb0a 7702 	mla	r7, sl, r2, r7
 8025920:	fb00 ee06 	mla	lr, r0, r6, lr
 8025924:	fb0b 7706 	mla	r7, fp, r6, r7
 8025928:	9809      	ldr	r0, [sp, #36]	; 0x24
 802592a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802592e:	0a3f      	lsrs	r7, r7, #8
 8025930:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025934:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025938:	ea4e 0307 	orr.w	r3, lr, r7
 802593c:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 8025940:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8025944:	b2c9      	uxtb	r1, r1
 8025946:	fa5f fc83 	uxtb.w	ip, r3
 802594a:	fb16 f601 	smulbb	r6, r6, r1
 802594e:	fb17 f701 	smulbb	r7, r7, r1
 8025952:	fb1c fc04 	smulbb	ip, ip, r4
 8025956:	f810 0c03 	ldrb.w	r0, [r0, #-3]
 802595a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 802595e:	0c1b      	lsrs	r3, r3, #16
 8025960:	fb00 c101 	mla	r1, r0, r1, ip
 8025964:	fb03 6304 	mla	r3, r3, r4, r6
 8025968:	fb02 7204 	mla	r2, r2, r4, r7
 802596c:	b289      	uxth	r1, r1
 802596e:	b292      	uxth	r2, r2
 8025970:	b29b      	uxth	r3, r3
 8025972:	f101 0e01 	add.w	lr, r1, #1
 8025976:	1c56      	adds	r6, r2, #1
 8025978:	1c5d      	adds	r5, r3, #1
 802597a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802597c:	eb0e 2111 	add.w	r1, lr, r1, lsr #8
 8025980:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8025984:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8025988:	1209      	asrs	r1, r1, #8
 802598a:	1212      	asrs	r2, r2, #8
 802598c:	121b      	asrs	r3, r3, #8
 802598e:	f800 1c03 	strb.w	r1, [r0, #-3]
 8025992:	f800 2c02 	strb.w	r2, [r0, #-2]
 8025996:	f800 3c01 	strb.w	r3, [r0, #-1]
 802599a:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 802599c:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 802599e:	4499      	add	r9, r3
 80259a0:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 80259a2:	4413      	add	r3, r2
 80259a4:	933c      	str	r3, [sp, #240]	; 0xf0
 80259a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80259a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80259aa:	4293      	cmp	r3, r2
 80259ac:	d024      	beq.n	80259f8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 80259ae:	4613      	mov	r3, r2
 80259b0:	3303      	adds	r3, #3
 80259b2:	9309      	str	r3, [sp, #36]	; 0x24
 80259b4:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80259b6:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 80259ba:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 80259bc:	ea4f 4229 	mov.w	r2, r9, asr #16
 80259c0:	141b      	asrs	r3, r3, #16
 80259c2:	fb06 2303 	mla	r3, r6, r3, r2
 80259c6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80259c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80259ca:	5cc2      	ldrb	r2, [r0, r3]
 80259cc:	f3c9 3103 	ubfx	r1, r9, #12, #4
 80259d0:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
 80259d4:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 80259d6:	4403      	add	r3, r0
 80259d8:	f3c2 3203 	ubfx	r2, r2, #12, #4
 80259dc:	0e28      	lsrs	r0, r5, #24
 80259de:	2900      	cmp	r1, #0
 80259e0:	f47f aec0 	bne.w	8025764 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x194>
 80259e4:	2a00      	cmp	r2, #0
 80259e6:	f43f aed2 	beq.w	802578e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80259ea:	5d9b      	ldrb	r3, [r3, r6]
 80259ec:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80259f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80259f2:	0e1b      	lsrs	r3, r3, #24
 80259f4:	930c      	str	r3, [sp, #48]	; 0x30
 80259f6:	e6ca      	b.n	802578e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80259f8:	4699      	mov	r9, r3
 80259fa:	e64c      	b.n	8025696 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 80259fc:	2b00      	cmp	r3, #0
 80259fe:	f77f ae4a 	ble.w	8025696 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 8025a02:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8025a06:	ea4f 422a 	mov.w	r2, sl, asr #16
 8025a0a:	1439      	asrs	r1, r7, #16
 8025a0c:	2a00      	cmp	r2, #0
 8025a0e:	46cb      	mov	fp, r9
 8025a10:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8025a14:	9c42      	ldr	r4, [sp, #264]	; 0x108
 8025a16:	e9dd 953d 	ldrd	r9, r5, [sp, #244]	; 0xf4
 8025a1a:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8025a1e:	f3c7 3e03 	ubfx	lr, r7, #12, #4
 8025a22:	f2c0 8154 	blt.w	8025cce <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 8025a26:	1e73      	subs	r3, r6, #1
 8025a28:	429a      	cmp	r2, r3
 8025a2a:	f280 8150 	bge.w	8025cce <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 8025a2e:	2900      	cmp	r1, #0
 8025a30:	f2c0 814d 	blt.w	8025cce <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 8025a34:	f10c 33ff 	add.w	r3, ip, #4294967295
 8025a38:	4299      	cmp	r1, r3
 8025a3a:	f280 8148 	bge.w	8025cce <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 8025a3e:	b236      	sxth	r6, r6
 8025a40:	fb01 2206 	mla	r2, r1, r6, r2
 8025a44:	9911      	ldr	r1, [sp, #68]	; 0x44
 8025a46:	5c8b      	ldrb	r3, [r1, r2]
 8025a48:	440a      	add	r2, r1
 8025a4a:	9210      	str	r2, [sp, #64]	; 0x40
 8025a4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8025a52:	930e      	str	r3, [sp, #56]	; 0x38
 8025a54:	0e1b      	lsrs	r3, r3, #24
 8025a56:	2800      	cmp	r0, #0
 8025a58:	f000 8169 	beq.w	8025d2e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75e>
 8025a5c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8025a5e:	f891 c001 	ldrb.w	ip, [r1, #1]
 8025a62:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8025a66:	9224      	str	r2, [sp, #144]	; 0x90
 8025a68:	0e12      	lsrs	r2, r2, #24
 8025a6a:	9218      	str	r2, [sp, #96]	; 0x60
 8025a6c:	f1be 0f00 	cmp.w	lr, #0
 8025a70:	f040 816a 	bne.w	8025d48 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>
 8025a74:	b280      	uxth	r0, r0
 8025a76:	fa1f fc8e 	uxth.w	ip, lr
 8025a7a:	fb00 f20c 	mul.w	r2, r0, ip
 8025a7e:	4611      	mov	r1, r2
 8025a80:	0106      	lsls	r6, r0, #4
 8025a82:	1ab0      	subs	r0, r6, r2
 8025a84:	9210      	str	r2, [sp, #64]	; 0x40
 8025a86:	b282      	uxth	r2, r0
 8025a88:	9818      	ldr	r0, [sp, #96]	; 0x60
 8025a8a:	ebc1 1c0c 	rsb	ip, r1, ip, lsl #4
 8025a8e:	fb02 f000 	mul.w	r0, r2, r0
 8025a92:	921b      	str	r2, [sp, #108]	; 0x6c
 8025a94:	f5c6 7680 	rsb	r6, r6, #256	; 0x100
 8025a98:	fa1f f28c 	uxth.w	r2, ip
 8025a9c:	1ab6      	subs	r6, r6, r2
 8025a9e:	b2b6      	uxth	r6, r6
 8025aa0:	fb06 0c03 	mla	ip, r6, r3, r0
 8025aa4:	9819      	ldr	r0, [sp, #100]	; 0x64
 8025aa6:	921c      	str	r2, [sp, #112]	; 0x70
 8025aa8:	fb02 cc00 	mla	ip, r2, r0, ip
 8025aac:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8025aae:	961d      	str	r6, [sp, #116]	; 0x74
 8025ab0:	fb01 cc02 	mla	ip, r1, r2, ip
 8025ab4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8025ab8:	f1bc 0f00 	cmp.w	ip, #0
 8025abc:	f000 80f1 	beq.w	8025ca2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 8025ac0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025ac2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8025ac4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025ac8:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8025acc:	2bff      	cmp	r3, #255	; 0xff
 8025ace:	921e      	str	r2, [sp, #120]	; 0x78
 8025ad0:	910e      	str	r1, [sp, #56]	; 0x38
 8025ad2:	d01b      	beq.n	8025b0c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 8025ad4:	fb01 f103 	mul.w	r1, r1, r3
 8025ad8:	fb02 f203 	mul.w	r2, r2, r3
 8025adc:	460b      	mov	r3, r1
 8025ade:	0a11      	lsrs	r1, r2, #8
 8025ae0:	f102 1601 	add.w	r6, r2, #65537	; 0x10001
 8025ae4:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8025ae8:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8025aec:	4431      	add	r1, r6
 8025aee:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8025af2:	0a09      	lsrs	r1, r1, #8
 8025af4:	0a1b      	lsrs	r3, r3, #8
 8025af6:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8025afa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025afe:	430b      	orrs	r3, r1
 8025b00:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 8025b04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025b08:	921e      	str	r2, [sp, #120]	; 0x78
 8025b0a:	930e      	str	r3, [sp, #56]	; 0x38
 8025b0c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8025b0e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8025b10:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8025b14:	29ff      	cmp	r1, #255	; 0xff
 8025b16:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025b1a:	931f      	str	r3, [sp, #124]	; 0x7c
 8025b1c:	9220      	str	r2, [sp, #128]	; 0x80
 8025b1e:	d01b      	beq.n	8025b58 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8025b20:	fb03 f301 	mul.w	r3, r3, r1
 8025b24:	fb02 f201 	mul.w	r2, r2, r1
 8025b28:	0a19      	lsrs	r1, r3, #8
 8025b2a:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 8025b2e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8025b32:	f502 7380 	add.w	r3, r2, #256	; 0x100
 8025b36:	4401      	add	r1, r0
 8025b38:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025b3c:	0a09      	lsrs	r1, r1, #8
 8025b3e:	0a1b      	lsrs	r3, r3, #8
 8025b40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025b44:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8025b48:	ea41 0003 	orr.w	r0, r1, r3
 8025b4c:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8025b50:	931f      	str	r3, [sp, #124]	; 0x7c
 8025b52:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8025b56:	9320      	str	r3, [sp, #128]	; 0x80
 8025b58:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025b5a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8025b5c:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8025b60:	2aff      	cmp	r2, #255	; 0xff
 8025b62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025b66:	9321      	str	r3, [sp, #132]	; 0x84
 8025b68:	d01a      	beq.n	8025ba0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d0>
 8025b6a:	fb03 f302 	mul.w	r3, r3, r2
 8025b6e:	4618      	mov	r0, r3
 8025b70:	fb06 f602 	mul.w	r6, r6, r2
 8025b74:	0a31      	lsrs	r1, r6, #8
 8025b76:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8025b7a:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8025b7e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8025b82:	440e      	add	r6, r1
 8025b84:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025b88:	0a36      	lsrs	r6, r6, #8
 8025b8a:	0a1b      	lsrs	r3, r3, #8
 8025b8c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025b90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025b94:	4333      	orrs	r3, r6
 8025b96:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8025b9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025b9e:	9321      	str	r3, [sp, #132]	; 0x84
 8025ba0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8025ba2:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8025ba6:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8025baa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8025bac:	2aff      	cmp	r2, #255	; 0xff
 8025bae:	d01a      	beq.n	8025be6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x616>
 8025bb0:	fb03 f302 	mul.w	r3, r3, r2
 8025bb4:	fb0e fe02 	mul.w	lr, lr, r2
 8025bb8:	0a19      	lsrs	r1, r3, #8
 8025bba:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 8025bbe:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8025bc2:	f50e 7380 	add.w	r3, lr, #256	; 0x100
 8025bc6:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8025bca:	4401      	add	r1, r0
 8025bcc:	0a09      	lsrs	r1, r1, #8
 8025bce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025bd2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8025bd6:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025bda:	ea41 0e0e 	orr.w	lr, r1, lr
 8025bde:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 8025be2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025be6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8025be8:	fb0c f102 	mul.w	r1, ip, r2
 8025bec:	1c48      	adds	r0, r1, #1
 8025bee:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8025bf2:	ea6f 2211 	mvn.w	r2, r1, lsr #8
 8025bf6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8025bf8:	9225      	str	r2, [sp, #148]	; 0x94
 8025bfa:	4684      	mov	ip, r0
 8025bfc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8025bfe:	9820      	ldr	r0, [sp, #128]	; 0x80
 8025c00:	fb0c fc02 	mul.w	ip, ip, r2
 8025c04:	fb00 f002 	mul.w	r0, r0, r2
 8025c08:	4601      	mov	r1, r0
 8025c0a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8025c0c:	981e      	ldr	r0, [sp, #120]	; 0x78
 8025c0e:	fb00 cc02 	mla	ip, r0, r2, ip
 8025c12:	980e      	ldr	r0, [sp, #56]	; 0x38
 8025c14:	fb00 1102 	mla	r1, r0, r2, r1
 8025c18:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8025c1a:	9821      	ldr	r0, [sp, #132]	; 0x84
 8025c1c:	fb06 c602 	mla	r6, r6, r2, ip
 8025c20:	fb00 1002 	mla	r0, r0, r2, r1
 8025c24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025c26:	f89d 1094 	ldrb.w	r1, [sp, #148]	; 0x94
 8025c2a:	fb03 6602 	mla	r6, r3, r2, r6
 8025c2e:	fb0e 0302 	mla	r3, lr, r2, r0
 8025c32:	0a32      	lsrs	r2, r6, #8
 8025c34:	0a1b      	lsrs	r3, r3, #8
 8025c36:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8025c3a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025c3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025c42:	4313      	orrs	r3, r2
 8025c44:	fb16 f001 	smulbb	r0, r6, r1
 8025c48:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8025c4a:	fa5f fe83 	uxtb.w	lr, r3
 8025c4e:	fb1e fe02 	smulbb	lr, lr, r2
 8025c52:	f89b c001 	ldrb.w	ip, [fp, #1]
 8025c56:	900e      	str	r0, [sp, #56]	; 0x38
 8025c58:	f89b 0000 	ldrb.w	r0, [fp]
 8025c5c:	fb1c fc01 	smulbb	ip, ip, r1
 8025c60:	fb00 e001 	mla	r0, r0, r1, lr
 8025c64:	4611      	mov	r1, r2
 8025c66:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8025c6a:	fb06 c202 	mla	r2, r6, r2, ip
 8025c6e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8025c70:	0c1b      	lsrs	r3, r3, #16
 8025c72:	fb03 6301 	mla	r3, r3, r1, r6
 8025c76:	b280      	uxth	r0, r0
 8025c78:	b296      	uxth	r6, r2
 8025c7a:	b29b      	uxth	r3, r3
 8025c7c:	1c5a      	adds	r2, r3, #1
 8025c7e:	f100 0c01 	add.w	ip, r0, #1
 8025c82:	1c71      	adds	r1, r6, #1
 8025c84:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025c88:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8025c8c:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8025c90:	1200      	asrs	r0, r0, #8
 8025c92:	120a      	asrs	r2, r1, #8
 8025c94:	121b      	asrs	r3, r3, #8
 8025c96:	f88b 0000 	strb.w	r0, [fp]
 8025c9a:	f88b 2001 	strb.w	r2, [fp, #1]
 8025c9e:	f88b 3002 	strb.w	r3, [fp, #2]
 8025ca2:	f1b8 0f00 	cmp.w	r8, #0
 8025ca6:	f10b 0b03 	add.w	fp, fp, #3
 8025caa:	44ca      	add	sl, r9
 8025cac:	442f      	add	r7, r5
 8025cae:	dd2e      	ble.n	8025d0e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73e>
 8025cb0:	e9d4 6c02 	ldrd	r6, ip, [r4, #8]
 8025cb4:	ea4f 422a 	mov.w	r2, sl, asr #16
 8025cb8:	2a00      	cmp	r2, #0
 8025cba:	f108 38ff 	add.w	r8, r8, #4294967295
 8025cbe:	ea4f 4127 	mov.w	r1, r7, asr #16
 8025cc2:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8025cc6:	f3c7 3e03 	ubfx	lr, r7, #12, #4
 8025cca:	f6bf aeac 	bge.w	8025a26 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8025cce:	1c53      	adds	r3, r2, #1
 8025cd0:	d4e7      	bmi.n	8025ca2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 8025cd2:	42b3      	cmp	r3, r6
 8025cd4:	dce5      	bgt.n	8025ca2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 8025cd6:	1c4b      	adds	r3, r1, #1
 8025cd8:	d4e3      	bmi.n	8025ca2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 8025cda:	4563      	cmp	r3, ip
 8025cdc:	dce1      	bgt.n	8025ca2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 8025cde:	fa0f f38c 	sxth.w	r3, ip
 8025ce2:	b236      	sxth	r6, r6
 8025ce4:	e9cd 6300 	strd	r6, r3, [sp]
 8025ce8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025cea:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8025cee:	e9cd e305 	strd	lr, r3, [sp, #20]
 8025cf2:	9202      	str	r2, [sp, #8]
 8025cf4:	4659      	mov	r1, fp
 8025cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025cf8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8025cfa:	9822      	ldr	r0, [sp, #136]	; 0x88
 8025cfc:	f7ff faf2 	bl	80252e4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8025d00:	f1b8 0f00 	cmp.w	r8, #0
 8025d04:	f10b 0b03 	add.w	fp, fp, #3
 8025d08:	44ca      	add	sl, r9
 8025d0a:	442f      	add	r7, r5
 8025d0c:	dcd0      	bgt.n	8025cb0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8025d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025d10:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8025d14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025d18:	3301      	adds	r3, #1
 8025d1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025d1e:	4499      	add	r9, r3
 8025d20:	e4b9      	b.n	8025696 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 8025d22:	3b01      	subs	r3, #1
 8025d24:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8025d28:	4698      	mov	r8, r3
 8025d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8025d2c:	e66e      	b.n	8025a0c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 8025d2e:	f1be 0f00 	cmp.w	lr, #0
 8025d32:	f43f ae9f 	beq.w	8025a74 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8025d36:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025d38:	5d92      	ldrb	r2, [r2, r6]
 8025d3a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8025d3c:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8025d40:	9226      	str	r2, [sp, #152]	; 0x98
 8025d42:	0e12      	lsrs	r2, r2, #24
 8025d44:	9219      	str	r2, [sp, #100]	; 0x64
 8025d46:	e695      	b.n	8025a74 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8025d48:	eb01 0c06 	add.w	ip, r1, r6
 8025d4c:	f89c c001 	ldrb.w	ip, [ip, #1]
 8025d50:	5d89      	ldrb	r1, [r1, r6]
 8025d52:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8025d54:	f856 202c 	ldr.w	r2, [r6, ip, lsl #2]
 8025d58:	f856 6021 	ldr.w	r6, [r6, r1, lsl #2]
 8025d5c:	9227      	str	r2, [sp, #156]	; 0x9c
 8025d5e:	0e12      	lsrs	r2, r2, #24
 8025d60:	921a      	str	r2, [sp, #104]	; 0x68
 8025d62:	0e32      	lsrs	r2, r6, #24
 8025d64:	9626      	str	r6, [sp, #152]	; 0x98
 8025d66:	9219      	str	r2, [sp, #100]	; 0x64
 8025d68:	e684      	b.n	8025a74 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8025d6a:	f43f ac94 	beq.w	8025696 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 8025d6e:	1e6c      	subs	r4, r5, #1
 8025d70:	e4d4      	b.n	802571c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8025d72:	bf00      	nop

08025d74 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8025d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025d78:	b089      	sub	sp, #36	; 0x24
 8025d7a:	f9bd b048 	ldrsh.w	fp, [sp, #72]	; 0x48
 8025d7e:	e9dd 4014 	ldrd	r4, r0, [sp, #80]	; 0x50
 8025d82:	fb00 450b 	mla	r5, r0, fp, r4
 8025d86:	2800      	cmp	r0, #0
 8025d88:	4694      	mov	ip, r2
 8025d8a:	f100 0601 	add.w	r6, r0, #1
 8025d8e:	442a      	add	r2, r5
 8025d90:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 8025d94:	f89d a058 	ldrb.w	sl, [sp, #88]	; 0x58
 8025d98:	f89d 705c 	ldrb.w	r7, [sp, #92]	; 0x5c
 8025d9c:	db02      	blt.n	8025da4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x30>
 8025d9e:	4580      	cmp	r8, r0
 8025da0:	f300 810a 	bgt.w	8025fb8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x244>
 8025da4:	f04f 0c00 	mov.w	ip, #0
 8025da8:	46e6      	mov	lr, ip
 8025daa:	4665      	mov	r5, ip
 8025dac:	46e1      	mov	r9, ip
 8025dae:	2e00      	cmp	r6, #0
 8025db0:	db02      	blt.n	8025db8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x44>
 8025db2:	45b0      	cmp	r8, r6
 8025db4:	f300 811a 	bgt.w	8025fec <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x278>
 8025db8:	2400      	movs	r4, #0
 8025dba:	46a0      	mov	r8, r4
 8025dbc:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8025dc0:	f1ba 0f0f 	cmp.w	sl, #15
 8025dc4:	f200 8158 	bhi.w	8026078 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x304>
 8025dc8:	2f0f      	cmp	r7, #15
 8025dca:	f200 8155 	bhi.w	8026078 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x304>
 8025dce:	b2ba      	uxth	r2, r7
 8025dd0:	fa1f f38a 	uxth.w	r3, sl
 8025dd4:	fb02 f703 	mul.w	r7, r2, r3
 8025dd8:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 8025ddc:	b292      	uxth	r2, r2
 8025dde:	fb02 fa08 	mul.w	sl, r2, r8
 8025de2:	fb07 fb04 	mul.w	fp, r7, r4
 8025de6:	011b      	lsls	r3, r3, #4
 8025de8:	1bd8      	subs	r0, r3, r7
 8025dea:	b280      	uxth	r0, r0
 8025dec:	9001      	str	r0, [sp, #4]
 8025dee:	fb00 f00c 	mul.w	r0, r0, ip
 8025df2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8025df6:	1a9b      	subs	r3, r3, r2
 8025df8:	b29b      	uxth	r3, r3
 8025dfa:	fb03 000e 	mla	r0, r3, lr, r0
 8025dfe:	4450      	add	r0, sl
 8025e00:	4458      	add	r0, fp
 8025e02:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8025e06:	9002      	str	r0, [sp, #8]
 8025e08:	2800      	cmp	r0, #0
 8025e0a:	f000 80d2 	beq.w	8025fb2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8025e0e:	f009 10ff 	and.w	r0, r9, #16711935	; 0xff00ff
 8025e12:	f409 467f 	and.w	r6, r9, #65280	; 0xff00
 8025e16:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8025e1a:	9005      	str	r0, [sp, #20]
 8025e1c:	9606      	str	r6, [sp, #24]
 8025e1e:	d01e      	beq.n	8025e5e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xea>
 8025e20:	fb00 fb0e 	mul.w	fp, r0, lr
 8025e24:	fb06 fe0e 	mul.w	lr, r6, lr
 8025e28:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8025e2c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025e30:	f50e 7a80 	add.w	sl, lr, #256	; 0x100
 8025e34:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025e38:	4483      	add	fp, r0
 8025e3a:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 8025e3e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8025e42:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
 8025e46:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8025e4a:	f40a 4e7f 	and.w	lr, sl, #65280	; 0xff00
 8025e4e:	ea4b 0e0e 	orr.w	lr, fp, lr
 8025e52:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8025e56:	9005      	str	r0, [sp, #20]
 8025e58:	f40e 407f 	and.w	r0, lr, #65280	; 0xff00
 8025e5c:	9006      	str	r0, [sp, #24]
 8025e5e:	f405 407f 	and.w	r0, r5, #65280	; 0xff00
 8025e62:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8025e66:	f005 1aff 	and.w	sl, r5, #16711935	; 0xff00ff
 8025e6a:	9007      	str	r0, [sp, #28]
 8025e6c:	d01d      	beq.n	8025eaa <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x136>
 8025e6e:	fb0a fa0c 	mul.w	sl, sl, ip
 8025e72:	fb00 f50c 	mul.w	r5, r0, ip
 8025e76:	ea4f 201a 	mov.w	r0, sl, lsr #8
 8025e7a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025e7e:	f505 7b80 	add.w	fp, r5, #256	; 0x100
 8025e82:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025e86:	4482      	add	sl, r0
 8025e88:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8025e8c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025e90:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8025e94:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8025e98:	f40b 457f 	and.w	r5, fp, #65280	; 0xff00
 8025e9c:	ea4a 0505 	orr.w	r5, sl, r5
 8025ea0:	f405 407f 	and.w	r0, r5, #65280	; 0xff00
 8025ea4:	f005 1aff 	and.w	sl, r5, #16711935	; 0xff00ff
 8025ea8:	9007      	str	r0, [sp, #28]
 8025eaa:	9803      	ldr	r0, [sp, #12]
 8025eac:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025eb0:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8025eb4:	f400 467f 	and.w	r6, r0, #65280	; 0xff00
 8025eb8:	d01b      	beq.n	8025ef2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x17e>
 8025eba:	fb09 f908 	mul.w	r9, r9, r8
 8025ebe:	fb06 f608 	mul.w	r6, r6, r8
 8025ec2:	ea4f 2c19 	mov.w	ip, r9, lsr #8
 8025ec6:	f506 7080 	add.w	r0, r6, #256	; 0x100
 8025eca:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025ece:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8025ed2:	eb00 2616 	add.w	r6, r0, r6, lsr #8
 8025ed6:	44e1      	add	r9, ip
 8025ed8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025edc:	0a30      	lsrs	r0, r6, #8
 8025ede:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 8025ee2:	f400 467f 	and.w	r6, r0, #65280	; 0xff00
 8025ee6:	ea49 0606 	orr.w	r6, r9, r6
 8025eea:	f006 19ff 	and.w	r9, r6, #16711935	; 0xff00ff
 8025eee:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025ef2:	9d04      	ldr	r5, [sp, #16]
 8025ef4:	2cff      	cmp	r4, #255	; 0xff
 8025ef6:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 8025efa:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8025efe:	d01a      	beq.n	8025f36 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1c2>
 8025f00:	fb00 f004 	mul.w	r0, r0, r4
 8025f04:	fb0e f404 	mul.w	r4, lr, r4
 8025f08:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8025f0c:	f504 7e80 	add.w	lr, r4, #256	; 0x100
 8025f10:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025f14:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8025f18:	eb0e 2414 	add.w	r4, lr, r4, lsr #8
 8025f1c:	4460      	add	r0, ip
 8025f1e:	0a00      	lsrs	r0, r0, #8
 8025f20:	0a24      	lsrs	r4, r4, #8
 8025f22:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025f26:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8025f2a:	ea40 0e0e 	orr.w	lr, r0, lr
 8025f2e:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8025f32:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025f36:	9c02      	ldr	r4, [sp, #8]
 8025f38:	9d07      	ldr	r5, [sp, #28]
 8025f3a:	ea6f 0c04 	mvn.w	ip, r4
 8025f3e:	9c01      	ldr	r4, [sp, #4]
 8025f40:	fa5f fc8c 	uxtb.w	ip, ip
 8025f44:	fb0a fb04 	mul.w	fp, sl, r4
 8025f48:	fb05 f504 	mul.w	r5, r5, r4
 8025f4c:	9c05      	ldr	r4, [sp, #20]
 8025f4e:	fb04 bb03 	mla	fp, r4, r3, fp
 8025f52:	9c06      	ldr	r4, [sp, #24]
 8025f54:	fb09 b902 	mla	r9, r9, r2, fp
 8025f58:	fb04 5303 	mla	r3, r4, r3, r5
 8025f5c:	fb06 3602 	mla	r6, r6, r2, r3
 8025f60:	780c      	ldrb	r4, [r1, #0]
 8025f62:	fb00 9007 	mla	r0, r0, r7, r9
 8025f66:	784a      	ldrb	r2, [r1, #1]
 8025f68:	fb0e 6707 	mla	r7, lr, r7, r6
 8025f6c:	788b      	ldrb	r3, [r1, #2]
 8025f6e:	fb02 f20c 	mul.w	r2, r2, ip
 8025f72:	fb03 f30c 	mul.w	r3, r3, ip
 8025f76:	fb04 fc0c 	mul.w	ip, r4, ip
 8025f7a:	0a00      	lsrs	r0, r0, #8
 8025f7c:	0a3f      	lsrs	r7, r7, #8
 8025f7e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025f82:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025f86:	4338      	orrs	r0, r7
 8025f88:	1c54      	adds	r4, r2, #1
 8025f8a:	1c5f      	adds	r7, r3, #1
 8025f8c:	f10c 0601 	add.w	r6, ip, #1
 8025f90:	0a05      	lsrs	r5, r0, #8
 8025f92:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8025f96:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8025f9a:	0c04      	lsrs	r4, r0, #16
 8025f9c:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8025fa0:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8025fa4:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8025fa8:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 8025fac:	704a      	strb	r2, [r1, #1]
 8025fae:	708b      	strb	r3, [r1, #2]
 8025fb0:	7008      	strb	r0, [r1, #0]
 8025fb2:	b009      	add	sp, #36	; 0x24
 8025fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025fb8:	2c00      	cmp	r4, #0
 8025fba:	db01      	blt.n	8025fc0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24c>
 8025fbc:	45a3      	cmp	fp, r4
 8025fbe:	dc41      	bgt.n	8026044 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2d0>
 8025fc0:	f04f 0e00 	mov.w	lr, #0
 8025fc4:	46f1      	mov	r9, lr
 8025fc6:	1c60      	adds	r0, r4, #1
 8025fc8:	d42b      	bmi.n	8026022 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2ae>
 8025fca:	4583      	cmp	fp, r0
 8025fcc:	dd29      	ble.n	8026022 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2ae>
 8025fce:	f1ba 0f00 	cmp.w	sl, #0
 8025fd2:	d005      	beq.n	8025fe0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x26c>
 8025fd4:	7850      	ldrb	r0, [r2, #1]
 8025fd6:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8025fda:	ea4f 6c15 	mov.w	ip, r5, lsr #24
 8025fde:	e6e6      	b.n	8025dae <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3a>
 8025fe0:	2e00      	cmp	r6, #0
 8025fe2:	db42      	blt.n	802606a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2f6>
 8025fe4:	45b0      	cmp	r8, r6
 8025fe6:	dd40      	ble.n	802606a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2f6>
 8025fe8:	46d4      	mov	ip, sl
 8025fea:	4655      	mov	r5, sl
 8025fec:	b1ef      	cbz	r7, 802602a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2b6>
 8025fee:	2c00      	cmp	r4, #0
 8025ff0:	db32      	blt.n	8026058 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2e4>
 8025ff2:	45a3      	cmp	fp, r4
 8025ff4:	dd30      	ble.n	8026058 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2e4>
 8025ff6:	f812 000b 	ldrb.w	r0, [r2, fp]
 8025ffa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8025ffe:	9003      	str	r0, [sp, #12]
 8026000:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8026004:	3401      	adds	r4, #1
 8026006:	d424      	bmi.n	8026052 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2de>
 8026008:	45a3      	cmp	fp, r4
 802600a:	dd22      	ble.n	8026052 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2de>
 802600c:	f1ba 0f00 	cmp.w	sl, #0
 8026010:	d027      	beq.n	8026062 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2ee>
 8026012:	4493      	add	fp, r2
 8026014:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8026018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802601c:	9304      	str	r3, [sp, #16]
 802601e:	0e1c      	lsrs	r4, r3, #24
 8026020:	e6ce      	b.n	8025dc0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x4c>
 8026022:	f04f 0c00 	mov.w	ip, #0
 8026026:	4665      	mov	r5, ip
 8026028:	e6c1      	b.n	8025dae <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3a>
 802602a:	f1ba 0f0f 	cmp.w	sl, #15
 802602e:	d823      	bhi.n	8026078 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x304>
 8026030:	fa1f f38a 	uxth.w	r3, sl
 8026034:	463a      	mov	r2, r7
 8026036:	46bb      	mov	fp, r7
 8026038:	46ba      	mov	sl, r7
 802603a:	e9cd 7703 	strd	r7, r7, [sp, #12]
 802603e:	463c      	mov	r4, r7
 8026040:	46b8      	mov	r8, r7
 8026042:	e6d0      	b.n	8025de6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x72>
 8026044:	f81c 0005 	ldrb.w	r0, [ip, r5]
 8026048:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 802604c:	ea4f 6e19 	mov.w	lr, r9, lsr #24
 8026050:	e7b9      	b.n	8025fc6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 8026052:	2400      	movs	r4, #0
 8026054:	9404      	str	r4, [sp, #16]
 8026056:	e6b3      	b.n	8025dc0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x4c>
 8026058:	f04f 0800 	mov.w	r8, #0
 802605c:	f8cd 800c 	str.w	r8, [sp, #12]
 8026060:	e7d0      	b.n	8026004 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>
 8026062:	f8cd a010 	str.w	sl, [sp, #16]
 8026066:	4654      	mov	r4, sl
 8026068:	e6ae      	b.n	8025dc8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x54>
 802606a:	4655      	mov	r5, sl
 802606c:	e9cd aa03 	strd	sl, sl, [sp, #12]
 8026070:	4654      	mov	r4, sl
 8026072:	46d0      	mov	r8, sl
 8026074:	46d4      	mov	ip, sl
 8026076:	e6a7      	b.n	8025dc8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x54>
 8026078:	4b03      	ldr	r3, [pc, #12]	; (8026088 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x314>)
 802607a:	4a04      	ldr	r2, [pc, #16]	; (802608c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x318>)
 802607c:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8026080:	4803      	ldr	r0, [pc, #12]	; (8026090 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x31c>)
 8026082:	f001 fff5 	bl	8028070 <__assert_func>
 8026086:	bf00      	nop
 8026088:	0802b2dc 	.word	0x0802b2dc
 802608c:	0802b954 	.word	0x0802b954
 8026090:	0802b460 	.word	0x0802b460

08026094 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026098:	ed2d 8b0a 	vpush	{d8-d12}
 802609c:	eeb0 aa40 	vmov.f32	s20, s0
 80260a0:	eef0 9a60 	vmov.f32	s19, s1
 80260a4:	eeb0 9a41 	vmov.f32	s18, s2
 80260a8:	eef0 8a62 	vmov.f32	s17, s5
 80260ac:	eeb0 8a43 	vmov.f32	s16, s6
 80260b0:	eeb0 ca44 	vmov.f32	s24, s8
 80260b4:	eef0 ba64 	vmov.f32	s23, s9
 80260b8:	eeb0 ba45 	vmov.f32	s22, s10
 80260bc:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80260c0:	b0a3      	sub	sp, #140	; 0x8c
 80260c2:	901e      	str	r0, [sp, #120]	; 0x78
 80260c4:	9111      	str	r1, [sp, #68]	; 0x44
 80260c6:	9213      	str	r2, [sp, #76]	; 0x4c
 80260c8:	e9dd 413b 	ldrd	r4, r1, [sp, #236]	; 0xec
 80260cc:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 80260ce:	6860      	ldr	r0, [r4, #4]
 80260d0:	fb00 1b02 	mla	fp, r0, r2, r1
 80260d4:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 80260d6:	6821      	ldr	r1, [r4, #0]
 80260d8:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 80260da:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
 80260de:	6852      	ldr	r2, [r2, #4]
 80260e0:	eb01 0800 	add.w	r8, r1, r0
 80260e4:	6824      	ldr	r4, [r4, #0]
 80260e6:	e9dd 7b37 	ldrd	r7, fp, [sp, #220]	; 0xdc
 80260ea:	3204      	adds	r2, #4
 80260ec:	46c3      	mov	fp, r8
 80260ee:	46b8      	mov	r8, r7
 80260f0:	9f38      	ldr	r7, [sp, #224]	; 0xe0
 80260f2:	940e      	str	r4, [sp, #56]	; 0x38
 80260f4:	920a      	str	r2, [sp, #40]	; 0x28
 80260f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80260f8:	2a00      	cmp	r2, #0
 80260fa:	dc02      	bgt.n	8026102 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80260fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80260fe:	2a00      	cmp	r2, #0
 8026100:	dd63      	ble.n	80261ca <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8026102:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8026104:	2b00      	cmp	r3, #0
 8026106:	e9d2 6c02 	ldrd	r6, ip, [r2, #8]
 802610a:	b234      	sxth	r4, r6
 802610c:	fa0f f98c 	sxth.w	r9, ip
 8026110:	f340 835f 	ble.w	80267d2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73e>
 8026114:	1e65      	subs	r5, r4, #1
 8026116:	f109 3eff 	add.w	lr, r9, #4294967295
 802611a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 802611e:	e9dd ca39 	ldrd	ip, sl, [sp, #228]	; 0xe4
 8026122:	ea5f 4228 	movs.w	r2, r8, asr #16
 8026126:	ea4f 4127 	mov.w	r1, r7, asr #16
 802612a:	d405      	bmi.n	8026138 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 802612c:	42aa      	cmp	r2, r5
 802612e:	da03      	bge.n	8026138 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8026130:	2900      	cmp	r1, #0
 8026132:	db01      	blt.n	8026138 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8026134:	4571      	cmp	r1, lr
 8026136:	db4d      	blt.n	80261d4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8026138:	1c50      	adds	r0, r2, #1
 802613a:	d406      	bmi.n	802614a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802613c:	42a0      	cmp	r0, r4
 802613e:	dc04      	bgt.n	802614a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8026140:	1c48      	adds	r0, r1, #1
 8026142:	d402      	bmi.n	802614a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8026144:	4548      	cmp	r0, r9
 8026146:	f340 831e 	ble.w	8026786 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 802614a:	3b01      	subs	r3, #1
 802614c:	44e0      	add	r8, ip
 802614e:	4457      	add	r7, sl
 8026150:	f10b 0b03 	add.w	fp, fp, #3
 8026154:	d1e5      	bne.n	8026122 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8026156:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8026158:	2b00      	cmp	r3, #0
 802615a:	dd36      	ble.n	80261ca <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 802615c:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8026160:	ee79 9aab 	vadd.f32	s19, s19, s23
 8026164:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8026168:	ee39 9a0b 	vadd.f32	s18, s18, s22
 802616c:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8026170:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026174:	ee76 6a68 	vsub.f32	s13, s12, s17
 8026178:	ee37 7ac8 	vsub.f32	s14, s15, s16
 802617c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026180:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8026184:	ee16 2a90 	vmov	r2, s13
 8026188:	3b01      	subs	r3, #1
 802618a:	9311      	str	r3, [sp, #68]	; 0x44
 802618c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 802618e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026192:	ee17 2a10 	vmov	r2, s14
 8026196:	eeb0 7a48 	vmov.f32	s14, s16
 802619a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802619e:	ee17 7a10 	vmov	r7, s14
 80261a2:	eeb0 7a68 	vmov.f32	s14, s17
 80261a6:	9339      	str	r3, [sp, #228]	; 0xe4
 80261a8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80261aa:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80261ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80261b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80261b4:	933a      	str	r3, [sp, #232]	; 0xe8
 80261b6:	ee17 8a10 	vmov	r8, s14
 80261ba:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80261bc:	eeb0 8a67 	vmov.f32	s16, s15
 80261c0:	eef0 8a46 	vmov.f32	s17, s12
 80261c4:	bf08      	it	eq
 80261c6:	4613      	moveq	r3, r2
 80261c8:	e795      	b.n	80260f6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80261ca:	b023      	add	sp, #140	; 0x8c
 80261cc:	ecbd 8b0a 	vpop	{d8-d12}
 80261d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80261d4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80261d8:	9839      	ldr	r0, [sp, #228]	; 0xe4
 80261da:	1e59      	subs	r1, r3, #1
 80261dc:	fb00 8201 	mla	r2, r0, r1, r8
 80261e0:	1412      	asrs	r2, r2, #16
 80261e2:	9109      	str	r1, [sp, #36]	; 0x24
 80261e4:	f100 8151 	bmi.w	802648a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 80261e8:	42aa      	cmp	r2, r5
 80261ea:	f280 814e 	bge.w	802648a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 80261ee:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 80261f0:	fb02 7201 	mla	r2, r2, r1, r7
 80261f4:	1412      	asrs	r2, r2, #16
 80261f6:	f100 8148 	bmi.w	802648a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 80261fa:	f109 31ff 	add.w	r1, r9, #4294967295
 80261fe:	428a      	cmp	r2, r1
 8026200:	f280 8143 	bge.w	802648a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8026204:	2b00      	cmp	r3, #0
 8026206:	dda6      	ble.n	8026156 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8026208:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802620c:	445b      	add	r3, fp
 802620e:	930d      	str	r3, [sp, #52]	; 0x34
 8026210:	f10b 0c03 	add.w	ip, fp, #3
 8026214:	46c1      	mov	r9, r8
 8026216:	9738      	str	r7, [sp, #224]	; 0xe0
 8026218:	4621      	mov	r1, r4
 802621a:	463b      	mov	r3, r7
 802621c:	e114      	b.n	8026448 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 802621e:	f893 e001 	ldrb.w	lr, [r3, #1]
 8026222:	f856 502e 	ldr.w	r5, [r6, lr, lsl #2]
 8026226:	950f      	str	r5, [sp, #60]	; 0x3c
 8026228:	0e2d      	lsrs	r5, r5, #24
 802622a:	9506      	str	r5, [sp, #24]
 802622c:	b162      	cbz	r2, 8026248 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 802622e:	185d      	adds	r5, r3, r1
 8026230:	786d      	ldrb	r5, [r5, #1]
 8026232:	5c5b      	ldrb	r3, [r3, r1]
 8026234:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 8026238:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802623c:	9112      	str	r1, [sp, #72]	; 0x48
 802623e:	9310      	str	r3, [sp, #64]	; 0x40
 8026240:	0e09      	lsrs	r1, r1, #24
 8026242:	0e1b      	lsrs	r3, r3, #24
 8026244:	9108      	str	r1, [sp, #32]
 8026246:	9307      	str	r3, [sp, #28]
 8026248:	b2a4      	uxth	r4, r4
 802624a:	b292      	uxth	r2, r2
 802624c:	fb04 f502 	mul.w	r5, r4, r2
 8026250:	0124      	lsls	r4, r4, #4
 8026252:	1b66      	subs	r6, r4, r5
 8026254:	9b06      	ldr	r3, [sp, #24]
 8026256:	b2b6      	uxth	r6, r6
 8026258:	fb06 f103 	mul.w	r1, r6, r3
 802625c:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8026260:	b292      	uxth	r2, r2
 8026262:	f5c4 7380 	rsb	r3, r4, #256	; 0x100
 8026266:	1a9b      	subs	r3, r3, r2
 8026268:	b29b      	uxth	r3, r3
 802626a:	fb03 1100 	mla	r1, r3, r0, r1
 802626e:	9c07      	ldr	r4, [sp, #28]
 8026270:	fb02 1104 	mla	r1, r2, r4, r1
 8026274:	9c08      	ldr	r4, [sp, #32]
 8026276:	fb05 1104 	mla	r1, r5, r4, r1
 802627a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802627e:	9109      	str	r1, [sp, #36]	; 0x24
 8026280:	2900      	cmp	r1, #0
 8026282:	f000 80d2 	beq.w	802642a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 8026286:	f007 14ff 	and.w	r4, r7, #16711935	; 0xff00ff
 802628a:	f407 417f 	and.w	r1, r7, #65280	; 0xff00
 802628e:	28ff      	cmp	r0, #255	; 0xff
 8026290:	940b      	str	r4, [sp, #44]	; 0x2c
 8026292:	910c      	str	r1, [sp, #48]	; 0x30
 8026294:	d01b      	beq.n	80262ce <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8026296:	fb04 f400 	mul.w	r4, r4, r0
 802629a:	4627      	mov	r7, r4
 802629c:	fb01 fe00 	mul.w	lr, r1, r0
 80262a0:	0a24      	lsrs	r4, r4, #8
 80262a2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80262a6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80262aa:	f50e 7080 	add.w	r0, lr, #256	; 0x100
 80262ae:	4427      	add	r7, r4
 80262b0:	eb00 201e 	add.w	r0, r0, lr, lsr #8
 80262b4:	0a3f      	lsrs	r7, r7, #8
 80262b6:	0a00      	lsrs	r0, r0, #8
 80262b8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80262bc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80262c0:	4307      	orrs	r7, r0
 80262c2:	f007 11ff 	and.w	r1, r7, #16711935	; 0xff00ff
 80262c6:	910b      	str	r1, [sp, #44]	; 0x2c
 80262c8:	f407 417f 	and.w	r1, r7, #65280	; 0xff00
 80262cc:	910c      	str	r1, [sp, #48]	; 0x30
 80262ce:	9806      	ldr	r0, [sp, #24]
 80262d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80262d2:	28ff      	cmp	r0, #255	; 0xff
 80262d4:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 80262d8:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 80262dc:	d01a      	beq.n	8026314 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 80262de:	fb07 f700 	mul.w	r7, r7, r0
 80262e2:	fb0e fe00 	mul.w	lr, lr, r0
 80262e6:	0a3c      	lsrs	r4, r7, #8
 80262e8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80262ec:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80262f0:	f50e 7080 	add.w	r0, lr, #256	; 0x100
 80262f4:	4427      	add	r7, r4
 80262f6:	eb00 2e1e 	add.w	lr, r0, lr, lsr #8
 80262fa:	0a3f      	lsrs	r7, r7, #8
 80262fc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026300:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8026304:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8026308:	ea47 0e0e 	orr.w	lr, r7, lr
 802630c:	f00e 17ff 	and.w	r7, lr, #16711935	; 0xff00ff
 8026310:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8026314:	9c07      	ldr	r4, [sp, #28]
 8026316:	9910      	ldr	r1, [sp, #64]	; 0x40
 8026318:	2cff      	cmp	r4, #255	; 0xff
 802631a:	f001 10ff 	and.w	r0, r1, #16711935	; 0xff00ff
 802631e:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8026322:	d01b      	beq.n	802635c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8026324:	fb00 f004 	mul.w	r0, r0, r4
 8026328:	fb0a fa04 	mul.w	sl, sl, r4
 802632c:	ea4f 2810 	mov.w	r8, r0, lsr #8
 8026330:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8026334:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8026338:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 802633c:	4440      	add	r0, r8
 802633e:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 8026342:	0a00      	lsrs	r0, r0, #8
 8026344:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026348:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802634c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026350:	ea40 0a0a 	orr.w	sl, r0, sl
 8026354:	f00a 10ff 	and.w	r0, sl, #16711935	; 0xff00ff
 8026358:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802635c:	9c08      	ldr	r4, [sp, #32]
 802635e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8026360:	2cff      	cmp	r4, #255	; 0xff
 8026362:	f001 18ff 	and.w	r8, r1, #16711935	; 0xff00ff
 8026366:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 802636a:	d01b      	beq.n	80263a4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 802636c:	fb08 f804 	mul.w	r8, r8, r4
 8026370:	fb0b fb04 	mul.w	fp, fp, r4
 8026374:	ea4f 2418 	mov.w	r4, r8, lsr #8
 8026378:	f004 11ff 	and.w	r1, r4, #16711935	; 0xff00ff
 802637c:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8026380:	f50b 7480 	add.w	r4, fp, #256	; 0x100
 8026384:	eb04 241b 	add.w	r4, r4, fp, lsr #8
 8026388:	4488      	add	r8, r1
 802638a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802638e:	0a24      	lsrs	r4, r4, #8
 8026390:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8026394:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8026398:	ea48 0b0b 	orr.w	fp, r8, fp
 802639c:	f00b 18ff 	and.w	r8, fp, #16711935	; 0xff00ff
 80263a0:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80263a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80263a6:	fb07 f706 	mul.w	r7, r7, r6
 80263aa:	43c9      	mvns	r1, r1
 80263ac:	fb0e f606 	mul.w	r6, lr, r6
 80263b0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80263b2:	f81c ec02 	ldrb.w	lr, [ip, #-2]
 80263b6:	fb04 7703 	mla	r7, r4, r3, r7
 80263ba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80263bc:	fb00 7702 	mla	r7, r0, r2, r7
 80263c0:	fb04 6603 	mla	r6, r4, r3, r6
 80263c4:	fb0a 6602 	mla	r6, sl, r2, r6
 80263c8:	f81c 3c03 	ldrb.w	r3, [ip, #-3]
 80263cc:	fb0b 6b05 	mla	fp, fp, r5, r6
 80263d0:	fb08 7805 	mla	r8, r8, r5, r7
 80263d4:	f81c 4c01 	ldrb.w	r4, [ip, #-1]
 80263d8:	b2c9      	uxtb	r1, r1
 80263da:	fb0e fe01 	mul.w	lr, lr, r1
 80263de:	fb04 f401 	mul.w	r4, r4, r1
 80263e2:	fb03 f101 	mul.w	r1, r3, r1
 80263e6:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80263ea:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80263ee:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80263f2:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80263f6:	ea48 030b 	orr.w	r3, r8, fp
 80263fa:	f10e 0201 	add.w	r2, lr, #1
 80263fe:	1c66      	adds	r6, r4, #1
 8026400:	1c4d      	adds	r5, r1, #1
 8026402:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8026406:	0a18      	lsrs	r0, r3, #8
 8026408:	0c1a      	lsrs	r2, r3, #16
 802640a:	eb06 2414 	add.w	r4, r6, r4, lsr #8
 802640e:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8026412:	eb00 2e1e 	add.w	lr, r0, lr, lsr #8
 8026416:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802641a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802641e:	f80c ec02 	strb.w	lr, [ip, #-2]
 8026422:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8026426:	f80c 1c03 	strb.w	r1, [ip, #-3]
 802642a:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 802642c:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 802642e:	4499      	add	r9, r3
 8026430:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8026432:	4413      	add	r3, r2
 8026434:	9338      	str	r3, [sp, #224]	; 0xe0
 8026436:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026438:	4563      	cmp	r3, ip
 802643a:	d024      	beq.n	8026486 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 802643c:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 802643e:	f10c 0c03 	add.w	ip, ip, #3
 8026442:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026446:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8026448:	ea4f 4229 	mov.w	r2, r9, asr #16
 802644c:	141b      	asrs	r3, r3, #16
 802644e:	fb01 2303 	mla	r3, r1, r3, r2
 8026452:	980e      	ldr	r0, [sp, #56]	; 0x38
 8026454:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8026456:	5cc2      	ldrb	r2, [r0, r3]
 8026458:	f3c9 3403 	ubfx	r4, r9, #12, #4
 802645c:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8026460:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8026462:	4403      	add	r3, r0
 8026464:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8026468:	0e38      	lsrs	r0, r7, #24
 802646a:	2c00      	cmp	r4, #0
 802646c:	f47f aed7 	bne.w	802621e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8026470:	2a00      	cmp	r2, #0
 8026472:	f43f aee9 	beq.w	8026248 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8026476:	5c5b      	ldrb	r3, [r3, r1]
 8026478:	990a      	ldr	r1, [sp, #40]	; 0x28
 802647a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802647e:	9310      	str	r3, [sp, #64]	; 0x40
 8026480:	0e1b      	lsrs	r3, r3, #24
 8026482:	9307      	str	r3, [sp, #28]
 8026484:	e6e0      	b.n	8026248 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8026486:	469b      	mov	fp, r3
 8026488:	e665      	b.n	8026156 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 802648a:	2b00      	cmp	r3, #0
 802648c:	f77f ae63 	ble.w	8026156 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8026490:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8026494:	ea4f 4228 	mov.w	r2, r8, asr #16
 8026498:	1439      	asrs	r1, r7, #16
 802649a:	2a00      	cmp	r2, #0
 802649c:	46d9      	mov	r9, fp
 802649e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80264a2:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 80264a4:	e9dd b539 	ldrd	fp, r5, [sp, #228]	; 0xe4
 80264a8:	f3c8 3003 	ubfx	r0, r8, #12, #4
 80264ac:	f3c7 3e03 	ubfx	lr, r7, #12, #4
 80264b0:	f2c0 8141 	blt.w	8026736 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a2>
 80264b4:	1e73      	subs	r3, r6, #1
 80264b6:	429a      	cmp	r2, r3
 80264b8:	f280 813d 	bge.w	8026736 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a2>
 80264bc:	2900      	cmp	r1, #0
 80264be:	f2c0 813a 	blt.w	8026736 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a2>
 80264c2:	f10c 33ff 	add.w	r3, ip, #4294967295
 80264c6:	4299      	cmp	r1, r3
 80264c8:	f280 8135 	bge.w	8026736 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a2>
 80264cc:	b233      	sxth	r3, r6
 80264ce:	fb01 2203 	mla	r2, r1, r3, r2
 80264d2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80264d4:	930c      	str	r3, [sp, #48]	; 0x30
 80264d6:	5c8b      	ldrb	r3, [r1, r2]
 80264d8:	440a      	add	r2, r1
 80264da:	990a      	ldr	r1, [sp, #40]	; 0x28
 80264dc:	4616      	mov	r6, r2
 80264de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80264e2:	930d      	str	r3, [sp, #52]	; 0x34
 80264e4:	0e1b      	lsrs	r3, r3, #24
 80264e6:	2800      	cmp	r0, #0
 80264e8:	f000 8153 	beq.w	8026792 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 80264ec:	f896 c001 	ldrb.w	ip, [r6, #1]
 80264f0:	f851 202c 	ldr.w	r2, [r1, ip, lsl #2]
 80264f4:	921f      	str	r2, [sp, #124]	; 0x7c
 80264f6:	0e12      	lsrs	r2, r2, #24
 80264f8:	9214      	str	r2, [sp, #80]	; 0x50
 80264fa:	f1be 0f00 	cmp.w	lr, #0
 80264fe:	f040 8155 	bne.w	80267ac <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8026502:	b280      	uxth	r0, r0
 8026504:	fa1f fc8e 	uxth.w	ip, lr
 8026508:	fb00 f20c 	mul.w	r2, r0, ip
 802650c:	0106      	lsls	r6, r0, #4
 802650e:	1ab0      	subs	r0, r6, r2
 8026510:	b281      	uxth	r1, r0
 8026512:	9814      	ldr	r0, [sp, #80]	; 0x50
 8026514:	ebc2 1c0c 	rsb	ip, r2, ip, lsl #4
 8026518:	fb01 f000 	mul.w	r0, r1, r0
 802651c:	9117      	str	r1, [sp, #92]	; 0x5c
 802651e:	f5c6 7680 	rsb	r6, r6, #256	; 0x100
 8026522:	fa1f f18c 	uxth.w	r1, ip
 8026526:	1a76      	subs	r6, r6, r1
 8026528:	b2b6      	uxth	r6, r6
 802652a:	9619      	str	r6, [sp, #100]	; 0x64
 802652c:	fb06 0603 	mla	r6, r6, r3, r0
 8026530:	9815      	ldr	r0, [sp, #84]	; 0x54
 8026532:	9118      	str	r1, [sp, #96]	; 0x60
 8026534:	fb01 6600 	mla	r6, r1, r0, r6
 8026538:	9916      	ldr	r1, [sp, #88]	; 0x58
 802653a:	fb02 6601 	mla	r6, r2, r1, r6
 802653e:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8026542:	911a      	str	r1, [sp, #104]	; 0x68
 8026544:	2900      	cmp	r1, #0
 8026546:	f000 80e0 	beq.w	802670a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 802654a:	980d      	ldr	r0, [sp, #52]	; 0x34
 802654c:	2bff      	cmp	r3, #255	; 0xff
 802654e:	f000 11ff 	and.w	r1, r0, #16711935	; 0xff00ff
 8026552:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026556:	910d      	str	r1, [sp, #52]	; 0x34
 8026558:	901b      	str	r0, [sp, #108]	; 0x6c
 802655a:	d01c      	beq.n	8026596 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x502>
 802655c:	fb01 f103 	mul.w	r1, r1, r3
 8026560:	fb00 f003 	mul.w	r0, r0, r3
 8026564:	460e      	mov	r6, r1
 8026566:	4603      	mov	r3, r0
 8026568:	0a09      	lsrs	r1, r1, #8
 802656a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802656e:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8026572:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8026576:	4431      	add	r1, r6
 8026578:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802657c:	0a09      	lsrs	r1, r1, #8
 802657e:	0a1b      	lsrs	r3, r3, #8
 8026580:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8026584:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026588:	430b      	orrs	r3, r1
 802658a:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 802658e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026592:	910d      	str	r1, [sp, #52]	; 0x34
 8026594:	931b      	str	r3, [sp, #108]	; 0x6c
 8026596:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8026598:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 802659c:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
 80265a0:	9914      	ldr	r1, [sp, #80]	; 0x50
 80265a2:	931c      	str	r3, [sp, #112]	; 0x70
 80265a4:	29ff      	cmp	r1, #255	; 0xff
 80265a6:	d019      	beq.n	80265dc <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 80265a8:	fb03 f301 	mul.w	r3, r3, r1
 80265ac:	fb06 f601 	mul.w	r6, r6, r1
 80265b0:	0a19      	lsrs	r1, r3, #8
 80265b2:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 80265b6:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80265ba:	f506 7380 	add.w	r3, r6, #256	; 0x100
 80265be:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 80265c2:	4401      	add	r1, r0
 80265c4:	0a09      	lsrs	r1, r1, #8
 80265c6:	0a1b      	lsrs	r3, r3, #8
 80265c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80265cc:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80265d0:	4319      	orrs	r1, r3
 80265d2:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 80265d6:	931c      	str	r3, [sp, #112]	; 0x70
 80265d8:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
 80265dc:	9920      	ldr	r1, [sp, #128]	; 0x80
 80265de:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 80265e2:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80265e6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80265e8:	930c      	str	r3, [sp, #48]	; 0x30
 80265ea:	29ff      	cmp	r1, #255	; 0xff
 80265ec:	901d      	str	r0, [sp, #116]	; 0x74
 80265ee:	d01a      	beq.n	8026626 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x592>
 80265f0:	fb03 f301 	mul.w	r3, r3, r1
 80265f4:	fb00 fc01 	mul.w	ip, r0, r1
 80265f8:	0a19      	lsrs	r1, r3, #8
 80265fa:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 80265fe:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8026602:	f50c 7380 	add.w	r3, ip, #256	; 0x100
 8026606:	4401      	add	r1, r0
 8026608:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 802660c:	0a09      	lsrs	r1, r1, #8
 802660e:	0a1b      	lsrs	r3, r3, #8
 8026610:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026614:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8026618:	4319      	orrs	r1, r3
 802661a:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 802661e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8026622:	930c      	str	r3, [sp, #48]	; 0x30
 8026624:	911d      	str	r1, [sp, #116]	; 0x74
 8026626:	9921      	ldr	r1, [sp, #132]	; 0x84
 8026628:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 802662c:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8026630:	9916      	ldr	r1, [sp, #88]	; 0x58
 8026632:	29ff      	cmp	r1, #255	; 0xff
 8026634:	d01c      	beq.n	8026670 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 8026636:	fb0c fc01 	mul.w	ip, ip, r1
 802663a:	fb0e fe01 	mul.w	lr, lr, r1
 802663e:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8026642:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8026646:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802664a:	f50e 7180 	add.w	r1, lr, #256	; 0x100
 802664e:	4484      	add	ip, r0
 8026650:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8026654:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026658:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802665c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026660:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8026664:	ea4c 0e0e 	orr.w	lr, ip, lr
 8026668:	f00e 1cff 	and.w	ip, lr, #16711935	; 0xff00ff
 802666c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8026670:	991a      	ldr	r1, [sp, #104]	; 0x68
 8026672:	981c      	ldr	r0, [sp, #112]	; 0x70
 8026674:	43c9      	mvns	r1, r1
 8026676:	911a      	str	r1, [sp, #104]	; 0x68
 8026678:	9917      	ldr	r1, [sp, #92]	; 0x5c
 802667a:	fb00 f001 	mul.w	r0, r0, r1
 802667e:	fb06 f301 	mul.w	r3, r6, r1
 8026682:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8026684:	990d      	ldr	r1, [sp, #52]	; 0x34
 8026686:	fb01 0006 	mla	r0, r1, r6, r0
 802668a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 802668c:	fb01 3106 	mla	r1, r1, r6, r3
 8026690:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8026692:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026694:	910d      	str	r1, [sp, #52]	; 0x34
 8026696:	fb03 0306 	mla	r3, r3, r6, r0
 802669a:	990d      	ldr	r1, [sp, #52]	; 0x34
 802669c:	981d      	ldr	r0, [sp, #116]	; 0x74
 802669e:	fb0c 3302 	mla	r3, ip, r2, r3
 80266a2:	fb00 1106 	mla	r1, r0, r6, r1
 80266a6:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
 80266aa:	f899 0002 	ldrb.w	r0, [r9, #2]
 80266ae:	fb0e 1e02 	mla	lr, lr, r2, r1
 80266b2:	f899 2001 	ldrb.w	r2, [r9, #1]
 80266b6:	f899 1000 	ldrb.w	r1, [r9]
 80266ba:	fb00 f006 	mul.w	r0, r0, r6
 80266be:	fb02 fc06 	mul.w	ip, r2, r6
 80266c2:	fb01 f106 	mul.w	r1, r1, r6
 80266c6:	0a1b      	lsrs	r3, r3, #8
 80266c8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80266cc:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 80266d0:	1c46      	adds	r6, r0, #1
 80266d2:	f40e 437f 	and.w	r3, lr, #65280	; 0xff00
 80266d6:	4313      	orrs	r3, r2
 80266d8:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 80266dc:	f10c 0201 	add.w	r2, ip, #1
 80266e0:	1c4e      	adds	r6, r1, #1
 80266e2:	ea4f 2e13 	mov.w	lr, r3, lsr #8
 80266e6:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 80266ea:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 80266ee:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80266f2:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80266f6:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 80266fa:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80266fe:	f889 2001 	strb.w	r2, [r9, #1]
 8026702:	f889 0002 	strb.w	r0, [r9, #2]
 8026706:	f889 3000 	strb.w	r3, [r9]
 802670a:	f1ba 0f00 	cmp.w	sl, #0
 802670e:	f109 0903 	add.w	r9, r9, #3
 8026712:	44d8      	add	r8, fp
 8026714:	442f      	add	r7, r5
 8026716:	dd2c      	ble.n	8026772 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6de>
 8026718:	e9d4 6c02 	ldrd	r6, ip, [r4, #8]
 802671c:	ea4f 4228 	mov.w	r2, r8, asr #16
 8026720:	2a00      	cmp	r2, #0
 8026722:	f10a 3aff 	add.w	sl, sl, #4294967295
 8026726:	ea4f 4127 	mov.w	r1, r7, asr #16
 802672a:	f3c8 3003 	ubfx	r0, r8, #12, #4
 802672e:	f3c7 3e03 	ubfx	lr, r7, #12, #4
 8026732:	f6bf aebf 	bge.w	80264b4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8026736:	1c53      	adds	r3, r2, #1
 8026738:	d4e7      	bmi.n	802670a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 802673a:	42b3      	cmp	r3, r6
 802673c:	dce5      	bgt.n	802670a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 802673e:	1c4b      	adds	r3, r1, #1
 8026740:	d4e3      	bmi.n	802670a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 8026742:	4563      	cmp	r3, ip
 8026744:	dce1      	bgt.n	802670a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 8026746:	fa0f f38c 	sxth.w	r3, ip
 802674a:	b236      	sxth	r6, r6
 802674c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8026750:	e9cd 6300 	strd	r6, r3, [sp]
 8026754:	e9cd 0e04 	strd	r0, lr, [sp, #16]
 8026758:	4649      	mov	r1, r9
 802675a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802675c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802675e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8026760:	f7ff fb08 	bl	8025d74 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8026764:	f1ba 0f00 	cmp.w	sl, #0
 8026768:	f109 0903 	add.w	r9, r9, #3
 802676c:	44d8      	add	r8, fp
 802676e:	442f      	add	r7, r5
 8026770:	dcd2      	bgt.n	8026718 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x684>
 8026772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026774:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8026778:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802677c:	3301      	adds	r3, #1
 802677e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026782:	449b      	add	fp, r3
 8026784:	e4e7      	b.n	8026156 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8026786:	3b01      	subs	r3, #1
 8026788:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 802678c:	469a      	mov	sl, r3
 802678e:	9309      	str	r3, [sp, #36]	; 0x24
 8026790:	e683      	b.n	802649a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x406>
 8026792:	f1be 0f00 	cmp.w	lr, #0
 8026796:	f43f aeb4 	beq.w	8026502 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46e>
 802679a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802679c:	5c72      	ldrb	r2, [r6, r1]
 802679e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80267a0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80267a4:	9220      	str	r2, [sp, #128]	; 0x80
 80267a6:	0e12      	lsrs	r2, r2, #24
 80267a8:	9215      	str	r2, [sp, #84]	; 0x54
 80267aa:	e6aa      	b.n	8026502 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46e>
 80267ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80267ae:	eb06 0c02 	add.w	ip, r6, r2
 80267b2:	4632      	mov	r2, r6
 80267b4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80267b6:	f89c c001 	ldrb.w	ip, [ip, #1]
 80267ba:	5d92      	ldrb	r2, [r2, r6]
 80267bc:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80267c0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80267c4:	0e31      	lsrs	r1, r6, #24
 80267c6:	9220      	str	r2, [sp, #128]	; 0x80
 80267c8:	0e12      	lsrs	r2, r2, #24
 80267ca:	9621      	str	r6, [sp, #132]	; 0x84
 80267cc:	9116      	str	r1, [sp, #88]	; 0x58
 80267ce:	9215      	str	r2, [sp, #84]	; 0x54
 80267d0:	e697      	b.n	8026502 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46e>
 80267d2:	f43f acc0 	beq.w	8026156 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 80267d6:	1e65      	subs	r5, r4, #1
 80267d8:	e4fe      	b.n	80261d8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 80267da:	bf00      	nop

080267dc <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh>:
 80267dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80267e0:	b087      	sub	sp, #28
 80267e2:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
 80267e6:	f9bd 6040 	ldrsh.w	r6, [sp, #64]	; 0x40
 80267ea:	ea6f 000b 	mvn.w	r0, fp
 80267ee:	e9dd 4712 	ldrd	r4, r7, [sp, #72]	; 0x48
 80267f2:	fb07 4c06 	mla	ip, r7, r6, r4
 80267f6:	b2c0      	uxtb	r0, r0
 80267f8:	2f00      	cmp	r7, #0
 80267fa:	9002      	str	r0, [sp, #8]
 80267fc:	eb02 0e0c 	add.w	lr, r2, ip
 8026800:	f107 0801 	add.w	r8, r7, #1
 8026804:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8026808:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 802680c:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 8026810:	db02      	blt.n	8026818 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x3c>
 8026812:	45b9      	cmp	r9, r7
 8026814:	f300 80a0 	bgt.w	8026958 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x17c>
 8026818:	468c      	mov	ip, r1
 802681a:	460f      	mov	r7, r1
 802681c:	780a      	ldrb	r2, [r1, #0]
 802681e:	9203      	str	r2, [sp, #12]
 8026820:	9201      	str	r2, [sp, #4]
 8026822:	f1b8 0f00 	cmp.w	r8, #0
 8026826:	db01      	blt.n	802682c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x50>
 8026828:	45c1      	cmp	r9, r8
 802682a:	dc7b      	bgt.n	8026924 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x148>
 802682c:	460b      	mov	r3, r1
 802682e:	4689      	mov	r9, r1
 8026830:	f891 a000 	ldrb.w	sl, [r1]
 8026834:	f8cd a014 	str.w	sl, [sp, #20]
 8026838:	2d0f      	cmp	r5, #15
 802683a:	f200 80cd 	bhi.w	80269d8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1fc>
 802683e:	280f      	cmp	r0, #15
 8026840:	f200 80ca 	bhi.w	80269d8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1fc>
 8026844:	780a      	ldrb	r2, [r1, #0]
 8026846:	9204      	str	r2, [sp, #16]
 8026848:	b2aa      	uxth	r2, r5
 802684a:	b280      	uxth	r0, r0
 802684c:	fb02 f500 	mul.w	r5, r2, r0
 8026850:	0112      	lsls	r2, r2, #4
 8026852:	f89c 8001 	ldrb.w	r8, [ip, #1]
 8026856:	f89c e002 	ldrb.w	lr, [ip, #2]
 802685a:	1b54      	subs	r4, r2, r5
 802685c:	b2a4      	uxth	r4, r4
 802685e:	fb04 f808 	mul.w	r8, r4, r8
 8026862:	fb04 fe0e 	mul.w	lr, r4, lr
 8026866:	ebc5 1000 	rsb	r0, r5, r0, lsl #4
 802686a:	b280      	uxth	r0, r0
 802686c:	9e01      	ldr	r6, [sp, #4]
 802686e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8026872:	f897 c001 	ldrb.w	ip, [r7, #1]
 8026876:	1a12      	subs	r2, r2, r0
 8026878:	78bf      	ldrb	r7, [r7, #2]
 802687a:	b292      	uxth	r2, r2
 802687c:	fb04 f406 	mul.w	r4, r4, r6
 8026880:	fb02 8c0c 	mla	ip, r2, ip, r8
 8026884:	fb02 e707 	mla	r7, r2, r7, lr
 8026888:	9e03      	ldr	r6, [sp, #12]
 802688a:	f899 8001 	ldrb.w	r8, [r9, #1]
 802688e:	f899 e002 	ldrb.w	lr, [r9, #2]
 8026892:	fb02 4206 	mla	r2, r2, r6, r4
 8026896:	fb00 cc08 	mla	ip, r0, r8, ip
 802689a:	fb00 770e 	mla	r7, r0, lr, r7
 802689e:	f893 8001 	ldrb.w	r8, [r3, #1]
 80268a2:	f893 e002 	ldrb.w	lr, [r3, #2]
 80268a6:	fb00 220a 	mla	r2, r0, sl, r2
 80268aa:	fb05 c808 	mla	r8, r5, r8, ip
 80268ae:	fb05 7e0e 	mla	lr, r5, lr, r7
 80268b2:	9805      	ldr	r0, [sp, #20]
 80268b4:	f8bd 9008 	ldrh.w	r9, [sp, #8]
 80268b8:	fb05 2500 	mla	r5, r5, r0, r2
 80268bc:	9a04      	ldr	r2, [sp, #16]
 80268be:	fa1f f38b 	uxth.w	r3, fp
 80268c2:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80268c6:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80268ca:	fb12 f609 	smulbb	r6, r2, r9
 80268ce:	fb1e fe03 	smulbb	lr, lr, r3
 80268d2:	fb18 f803 	smulbb	r8, r8, r3
 80268d6:	784a      	ldrb	r2, [r1, #1]
 80268d8:	7888      	ldrb	r0, [r1, #2]
 80268da:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80268de:	fb05 6503 	mla	r5, r5, r3, r6
 80268e2:	fb02 8809 	mla	r8, r2, r9, r8
 80268e6:	fb00 e909 	mla	r9, r0, r9, lr
 80268ea:	b2ad      	uxth	r5, r5
 80268ec:	fa1f f888 	uxth.w	r8, r8
 80268f0:	fa1f f989 	uxth.w	r9, r9
 80268f4:	f108 0001 	add.w	r0, r8, #1
 80268f8:	f109 0201 	add.w	r2, r9, #1
 80268fc:	1c6b      	adds	r3, r5, #1
 80268fe:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8026902:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8026906:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802690a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802690e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8026912:	122d      	asrs	r5, r5, #8
 8026914:	f881 8001 	strb.w	r8, [r1, #1]
 8026918:	f881 9002 	strb.w	r9, [r1, #2]
 802691c:	700d      	strb	r5, [r1, #0]
 802691e:	b007      	add	sp, #28
 8026920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026924:	b388      	cbz	r0, 802698a <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1ae>
 8026926:	2c00      	cmp	r4, #0
 8026928:	db44      	blt.n	80269b4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1d8>
 802692a:	42a6      	cmp	r6, r4
 802692c:	dd42      	ble.n	80269b4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1d8>
 802692e:	f81e 9006 	ldrb.w	r9, [lr, r6]
 8026932:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8026936:	4499      	add	r9, r3
 8026938:	3401      	adds	r4, #1
 802693a:	f899 a000 	ldrb.w	sl, [r9]
 802693e:	d435      	bmi.n	80269ac <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1d0>
 8026940:	42a6      	cmp	r6, r4
 8026942:	dd33      	ble.n	80269ac <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1d0>
 8026944:	2d00      	cmp	r5, #0
 8026946:	d043      	beq.n	80269d0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1f4>
 8026948:	4476      	add	r6, lr
 802694a:	7872      	ldrb	r2, [r6, #1]
 802694c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026950:	5c9c      	ldrb	r4, [r3, r2]
 8026952:	4413      	add	r3, r2
 8026954:	9405      	str	r4, [sp, #20]
 8026956:	e76f      	b.n	8026838 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x5c>
 8026958:	2c00      	cmp	r4, #0
 802695a:	db01      	blt.n	8026960 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x184>
 802695c:	42a6      	cmp	r6, r4
 802695e:	dc1f      	bgt.n	80269a0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1c4>
 8026960:	460f      	mov	r7, r1
 8026962:	783a      	ldrb	r2, [r7, #0]
 8026964:	9203      	str	r2, [sp, #12]
 8026966:	1c62      	adds	r2, r4, #1
 8026968:	d40b      	bmi.n	8026982 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1a6>
 802696a:	4296      	cmp	r6, r2
 802696c:	dd09      	ble.n	8026982 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1a6>
 802696e:	b31d      	cbz	r5, 80269b8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1dc>
 8026970:	f89e c001 	ldrb.w	ip, [lr, #1]
 8026974:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8026978:	f813 200c 	ldrb.w	r2, [r3, ip]
 802697c:	449c      	add	ip, r3
 802697e:	9201      	str	r2, [sp, #4]
 8026980:	e74f      	b.n	8026822 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x46>
 8026982:	780a      	ldrb	r2, [r1, #0]
 8026984:	468c      	mov	ip, r1
 8026986:	9201      	str	r2, [sp, #4]
 8026988:	e74b      	b.n	8026822 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x46>
 802698a:	2d0f      	cmp	r5, #15
 802698c:	f891 a000 	ldrb.w	sl, [r1]
 8026990:	d822      	bhi.n	80269d8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1fc>
 8026992:	f8cd a010 	str.w	sl, [sp, #16]
 8026996:	460b      	mov	r3, r1
 8026998:	4689      	mov	r9, r1
 802699a:	f8cd a014 	str.w	sl, [sp, #20]
 802699e:	e753      	b.n	8026848 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x6c>
 80269a0:	f812 700c 	ldrb.w	r7, [r2, ip]
 80269a4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80269a8:	441f      	add	r7, r3
 80269aa:	e7da      	b.n	8026962 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x186>
 80269ac:	780b      	ldrb	r3, [r1, #0]
 80269ae:	9305      	str	r3, [sp, #20]
 80269b0:	460b      	mov	r3, r1
 80269b2:	e741      	b.n	8026838 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x5c>
 80269b4:	4689      	mov	r9, r1
 80269b6:	e7bf      	b.n	8026938 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x15c>
 80269b8:	780a      	ldrb	r2, [r1, #0]
 80269ba:	f1b8 0f00 	cmp.w	r8, #0
 80269be:	9201      	str	r2, [sp, #4]
 80269c0:	468c      	mov	ip, r1
 80269c2:	f6bf af31 	bge.w	8026828 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x4c>
 80269c6:	460b      	mov	r3, r1
 80269c8:	4689      	mov	r9, r1
 80269ca:	9205      	str	r2, [sp, #20]
 80269cc:	4692      	mov	sl, r2
 80269ce:	e736      	b.n	802683e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x62>
 80269d0:	780b      	ldrb	r3, [r1, #0]
 80269d2:	9305      	str	r3, [sp, #20]
 80269d4:	460b      	mov	r3, r1
 80269d6:	e732      	b.n	802683e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x62>
 80269d8:	4b03      	ldr	r3, [pc, #12]	; (80269e8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x20c>)
 80269da:	4a04      	ldr	r2, [pc, #16]	; (80269ec <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x210>)
 80269dc:	f44f 710f 	mov.w	r1, #572	; 0x23c
 80269e0:	4803      	ldr	r0, [pc, #12]	; (80269f0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x214>)
 80269e2:	f001 fb45 	bl	8028070 <__assert_func>
 80269e6:	bf00      	nop
 80269e8:	0802b2dc 	.word	0x0802b2dc
 80269ec:	0802b954 	.word	0x0802b954
 80269f0:	0802b460 	.word	0x0802b460

080269f4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80269f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80269f8:	ed2d 8b08 	vpush	{d8-d11}
 80269fc:	b095      	sub	sp, #84	; 0x54
 80269fe:	f89d 40bc 	ldrb.w	r4, [sp, #188]	; 0xbc
 8026a02:	9013      	str	r0, [sp, #76]	; 0x4c
 8026a04:	43e0      	mvns	r0, r4
 8026a06:	e9dd a727 	ldrd	sl, r7, [sp, #156]	; 0x9c
 8026a0a:	eeb0 aa40 	vmov.f32	s20, s0
 8026a0e:	eef0 9a60 	vmov.f32	s19, s1
 8026a12:	eeb0 9a41 	vmov.f32	s18, s2
 8026a16:	eef0 8a62 	vmov.f32	s17, s5
 8026a1a:	eeb0 8a43 	vmov.f32	s16, s6
 8026a1e:	eef0 ba44 	vmov.f32	s23, s8
 8026a22:	eeb0 ba64 	vmov.f32	s22, s9
 8026a26:	eef0 aa45 	vmov.f32	s21, s10
 8026a2a:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 8026a2e:	9411      	str	r4, [sp, #68]	; 0x44
 8026a30:	469b      	mov	fp, r3
 8026a32:	e9dd 422b 	ldrd	r4, r2, [sp, #172]	; 0xac
 8026a36:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8026a38:	6861      	ldr	r1, [r4, #4]
 8026a3a:	fb01 2303 	mla	r3, r1, r3, r2
 8026a3e:	6821      	ldr	r1, [r4, #0]
 8026a40:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8026a42:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8026a44:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8026a48:	6852      	ldr	r2, [r2, #4]
 8026a4a:	6824      	ldr	r4, [r4, #0]
 8026a4c:	930d      	str	r3, [sp, #52]	; 0x34
 8026a4e:	b2c3      	uxtb	r3, r0
 8026a50:	930b      	str	r3, [sp, #44]	; 0x2c
 8026a52:	1d13      	adds	r3, r2, #4
 8026a54:	940a      	str	r4, [sp, #40]	; 0x28
 8026a56:	9308      	str	r3, [sp, #32]
 8026a58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026a5a:	2b00      	cmp	r3, #0
 8026a5c:	dc02      	bgt.n	8026a64 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8026a5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026a60:	2b00      	cmp	r3, #0
 8026a62:	dd6c      	ble.n	8026b3e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8026a64:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8026a66:	f1bb 0f00 	cmp.w	fp, #0
 8026a6a:	e9d3 5e02 	ldrd	r5, lr, [r3, #8]
 8026a6e:	b228      	sxth	r0, r5
 8026a70:	fa0f f68e 	sxth.w	r6, lr
 8026a74:	f340 8245 	ble.w	8026f02 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50e>
 8026a78:	e9dd 8929 	ldrd	r8, r9, [sp, #164]	; 0xa4
 8026a7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8026a7e:	1e44      	subs	r4, r0, #1
 8026a80:	f106 3cff 	add.w	ip, r6, #4294967295
 8026a84:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8026a88:	ea5f 432a 	movs.w	r3, sl, asr #16
 8026a8c:	ea4f 4127 	mov.w	r1, r7, asr #16
 8026a90:	d405      	bmi.n	8026a9e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8026a92:	42a3      	cmp	r3, r4
 8026a94:	da03      	bge.n	8026a9e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8026a96:	2900      	cmp	r1, #0
 8026a98:	db01      	blt.n	8026a9e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8026a9a:	4561      	cmp	r1, ip
 8026a9c:	db54      	blt.n	8026b48 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8026a9e:	f113 0e01 	adds.w	lr, r3, #1
 8026aa2:	d407      	bmi.n	8026ab4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8026aa4:	4586      	cmp	lr, r0
 8026aa6:	dc05      	bgt.n	8026ab4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8026aa8:	f111 0e01 	adds.w	lr, r1, #1
 8026aac:	d402      	bmi.n	8026ab4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8026aae:	45b6      	cmp	lr, r6
 8026ab0:	f340 8189 	ble.w	8026dc6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d2>
 8026ab4:	f1bb 0b01 	subs.w	fp, fp, #1
 8026ab8:	44c2      	add	sl, r8
 8026aba:	444f      	add	r7, r9
 8026abc:	f102 0204 	add.w	r2, r2, #4
 8026ac0:	d1e2      	bne.n	8026a88 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8026ac2:	920d      	str	r2, [sp, #52]	; 0x34
 8026ac4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026ac6:	2b00      	cmp	r3, #0
 8026ac8:	dd39      	ble.n	8026b3e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8026aca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026ace:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026ad2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026ad6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026ada:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026ade:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8026ae2:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026ae6:	ee76 6a68 	vsub.f32	s13, s12, s17
 8026aea:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8026aee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026af2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8026af6:	ee16 2a90 	vmov	r2, s13
 8026afa:	3b01      	subs	r3, #1
 8026afc:	930e      	str	r3, [sp, #56]	; 0x38
 8026afe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026b00:	fb92 f3f3 	sdiv	r3, r2, r3
 8026b04:	ee17 2a10 	vmov	r2, s14
 8026b08:	eeb0 7a48 	vmov.f32	s14, s16
 8026b0c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8026b10:	ee17 7a10 	vmov	r7, s14
 8026b14:	eeb0 7a68 	vmov.f32	s14, s17
 8026b18:	9329      	str	r3, [sp, #164]	; 0xa4
 8026b1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026b1c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8026b20:	fb92 f3f3 	sdiv	r3, r2, r3
 8026b24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026b26:	932a      	str	r3, [sp, #168]	; 0xa8
 8026b28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026b2a:	ee17 aa10 	vmov	sl, s14
 8026b2e:	eeb0 8a67 	vmov.f32	s16, s15
 8026b32:	eef0 8a46 	vmov.f32	s17, s12
 8026b36:	bf14      	ite	ne
 8026b38:	469b      	movne	fp, r3
 8026b3a:	4693      	moveq	fp, r2
 8026b3c:	e78c      	b.n	8026a58 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8026b3e:	b015      	add	sp, #84	; 0x54
 8026b40:	ecbd 8b08 	vpop	{d8-d11}
 8026b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026b48:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8026b4c:	920d      	str	r2, [sp, #52]	; 0x34
 8026b4e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8026b50:	f10b 32ff 	add.w	r2, fp, #4294967295
 8026b54:	fb01 a302 	mla	r3, r1, r2, sl
 8026b58:	141b      	asrs	r3, r3, #16
 8026b5a:	9209      	str	r2, [sp, #36]	; 0x24
 8026b5c:	f100 80d3 	bmi.w	8026d06 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8026b60:	42a3      	cmp	r3, r4
 8026b62:	f280 80d0 	bge.w	8026d06 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8026b66:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026b68:	fb03 7302 	mla	r3, r3, r2, r7
 8026b6c:	141b      	asrs	r3, r3, #16
 8026b6e:	f100 80ca 	bmi.w	8026d06 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8026b72:	3e01      	subs	r6, #1
 8026b74:	42b3      	cmp	r3, r6
 8026b76:	f280 80c6 	bge.w	8026d06 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8026b7a:	f1bb 0f00 	cmp.w	fp, #0
 8026b7e:	dda1      	ble.n	8026ac4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8026b80:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8026b84:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 8026b88:	930c      	str	r3, [sp, #48]	; 0x30
 8026b8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026b8c:	f103 0804 	add.w	r8, r3, #4
 8026b90:	e08f      	b.n	8026cb2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 8026b92:	7861      	ldrb	r1, [r4, #1]
 8026b94:	eb04 0c00 	add.w	ip, r4, r0
 8026b98:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026b9c:	4431      	add	r1, r6
 8026b9e:	2a00      	cmp	r2, #0
 8026ba0:	f000 80a3 	beq.w	8026cea <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f6>
 8026ba4:	5c20      	ldrb	r0, [r4, r0]
 8026ba6:	f89c c001 	ldrb.w	ip, [ip, #1]
 8026baa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026bae:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8026bb2:	4430      	add	r0, r6
 8026bb4:	44b4      	add	ip, r6
 8026bb6:	b29b      	uxth	r3, r3
 8026bb8:	b292      	uxth	r2, r2
 8026bba:	fb03 f402 	mul.w	r4, r3, r2
 8026bbe:	011b      	lsls	r3, r3, #4
 8026bc0:	f891 b001 	ldrb.w	fp, [r1, #1]
 8026bc4:	1b1e      	subs	r6, r3, r4
 8026bc6:	f891 9002 	ldrb.w	r9, [r1, #2]
 8026bca:	b2b6      	uxth	r6, r6
 8026bcc:	7809      	ldrb	r1, [r1, #0]
 8026bce:	fb06 fb0b 	mul.w	fp, r6, fp
 8026bd2:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8026bd6:	b292      	uxth	r2, r2
 8026bd8:	fb06 f909 	mul.w	r9, r6, r9
 8026bdc:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8026be0:	fb06 f601 	mul.w	r6, r6, r1
 8026be4:	1a9b      	subs	r3, r3, r2
 8026be6:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8026bea:	b29b      	uxth	r3, r3
 8026bec:	f89e e002 	ldrb.w	lr, [lr, #2]
 8026bf0:	fb03 bb01 	mla	fp, r3, r1, fp
 8026bf4:	9908      	ldr	r1, [sp, #32]
 8026bf6:	fb03 990e 	mla	r9, r3, lr, r9
 8026bfa:	5d49      	ldrb	r1, [r1, r5]
 8026bfc:	7885      	ldrb	r5, [r0, #2]
 8026bfe:	fb03 6301 	mla	r3, r3, r1, r6
 8026c02:	f890 e001 	ldrb.w	lr, [r0, #1]
 8026c06:	fb02 9905 	mla	r9, r2, r5, r9
 8026c0a:	7801      	ldrb	r1, [r0, #0]
 8026c0c:	fb02 bb0e 	mla	fp, r2, lr, fp
 8026c10:	f89c 0002 	ldrb.w	r0, [ip, #2]
 8026c14:	fb02 3301 	mla	r3, r2, r1, r3
 8026c18:	f89c e001 	ldrb.w	lr, [ip, #1]
 8026c1c:	fb04 9900 	mla	r9, r4, r0, r9
 8026c20:	f89c 1000 	ldrb.w	r1, [ip]
 8026c24:	fb04 bb0e 	mla	fp, r4, lr, fp
 8026c28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026c2a:	f818 cc04 	ldrb.w	ip, [r8, #-4]
 8026c2e:	fb04 3301 	mla	r3, r4, r1, r3
 8026c32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8026c34:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8026c38:	fb19 f902 	smulbb	r9, r9, r2
 8026c3c:	fb1c fc01 	smulbb	ip, ip, r1
 8026c40:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8026c44:	f818 5c02 	ldrb.w	r5, [r8, #-2]
 8026c48:	fb1b fb02 	smulbb	fp, fp, r2
 8026c4c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026c50:	f818 6c03 	ldrb.w	r6, [r8, #-3]
 8026c54:	fb05 9901 	mla	r9, r5, r1, r9
 8026c58:	fb03 c302 	mla	r3, r3, r2, ip
 8026c5c:	fb06 bb01 	mla	fp, r6, r1, fp
 8026c60:	fa1f f989 	uxth.w	r9, r9
 8026c64:	b29b      	uxth	r3, r3
 8026c66:	f109 0101 	add.w	r1, r9, #1
 8026c6a:	1c5a      	adds	r2, r3, #1
 8026c6c:	fa1f fb8b 	uxth.w	fp, fp
 8026c70:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8026c74:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026c78:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8026c7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026c7c:	f10b 0001 	add.w	r0, fp, #1
 8026c80:	3a01      	subs	r2, #1
 8026c82:	eb00 2b1b 	add.w	fp, r0, fp, lsr #8
 8026c86:	448a      	add	sl, r1
 8026c88:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8026c8a:	9209      	str	r2, [sp, #36]	; 0x24
 8026c8c:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8026c90:	ea4f 2929 	mov.w	r9, r9, asr #8
 8026c94:	121b      	asrs	r3, r3, #8
 8026c96:	3201      	adds	r2, #1
 8026c98:	f808 bc03 	strb.w	fp, [r8, #-3]
 8026c9c:	f808 9c02 	strb.w	r9, [r8, #-2]
 8026ca0:	f808 3c04 	strb.w	r3, [r8, #-4]
 8026ca4:	440f      	add	r7, r1
 8026ca6:	f108 0804 	add.w	r8, r8, #4
 8026caa:	d025      	beq.n	8026cf8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 8026cac:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8026cae:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8026cb2:	ea4f 432a 	mov.w	r3, sl, asr #16
 8026cb6:	143c      	asrs	r4, r7, #16
 8026cb8:	fb00 3404 	mla	r4, r0, r4, r3
 8026cbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026cbe:	9e08      	ldr	r6, [sp, #32]
 8026cc0:	5d15      	ldrb	r5, [r2, r4]
 8026cc2:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8026cc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8026cca:	4414      	add	r4, r2
 8026ccc:	eb06 0e05 	add.w	lr, r6, r5
 8026cd0:	f3c7 3203 	ubfx	r2, r7, #12, #4
 8026cd4:	2b00      	cmp	r3, #0
 8026cd6:	f47f af5c 	bne.w	8026b92 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8026cda:	b14a      	cbz	r2, 8026cf0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8026cdc:	5c20      	ldrb	r0, [r4, r0]
 8026cde:	46f4      	mov	ip, lr
 8026ce0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026ce4:	4430      	add	r0, r6
 8026ce6:	4671      	mov	r1, lr
 8026ce8:	e765      	b.n	8026bb6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8026cea:	46f4      	mov	ip, lr
 8026cec:	4670      	mov	r0, lr
 8026cee:	e762      	b.n	8026bb6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8026cf0:	46f4      	mov	ip, lr
 8026cf2:	4670      	mov	r0, lr
 8026cf4:	4671      	mov	r1, lr
 8026cf6:	e75e      	b.n	8026bb6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8026cf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026cfa:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8026cfe:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 8026d02:	930d      	str	r3, [sp, #52]	; 0x34
 8026d04:	e6de      	b.n	8026ac4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8026d06:	f1bb 0f00 	cmp.w	fp, #0
 8026d0a:	f77f aedb 	ble.w	8026ac4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8026d0e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8026d12:	ea4f 432a 	mov.w	r3, sl, asr #16
 8026d16:	1439      	asrs	r1, r7, #16
 8026d18:	4676      	mov	r6, lr
 8026d1a:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8026d1e:	f8dd 80b8 	ldr.w	r8, [sp, #184]	; 0xb8
 8026d22:	2b00      	cmp	r3, #0
 8026d24:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8026d28:	f3c7 3203 	ubfx	r2, r7, #12, #4
 8026d2c:	db29      	blt.n	8026d82 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8026d2e:	1e6c      	subs	r4, r5, #1
 8026d30:	42a3      	cmp	r3, r4
 8026d32:	da26      	bge.n	8026d82 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8026d34:	2900      	cmp	r1, #0
 8026d36:	db24      	blt.n	8026d82 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8026d38:	1e74      	subs	r4, r6, #1
 8026d3a:	42a1      	cmp	r1, r4
 8026d3c:	da21      	bge.n	8026d82 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8026d3e:	b22c      	sxth	r4, r5
 8026d40:	fb01 3304 	mla	r3, r1, r4, r3
 8026d44:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8026d46:	5ce9      	ldrb	r1, [r5, r3]
 8026d48:	442b      	add	r3, r5
 8026d4a:	9d08      	ldr	r5, [sp, #32]
 8026d4c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026d50:	9112      	str	r1, [sp, #72]	; 0x48
 8026d52:	eb05 0c01 	add.w	ip, r5, r1
 8026d56:	2800      	cmp	r0, #0
 8026d58:	d04e      	beq.n	8026df8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8026d5a:	f893 e001 	ldrb.w	lr, [r3, #1]
 8026d5e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8026d62:	44ae      	add	lr, r5
 8026d64:	2a00      	cmp	r2, #0
 8026d66:	f000 80c7 	beq.w	8026ef8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8026d6a:	1919      	adds	r1, r3, r4
 8026d6c:	7849      	ldrb	r1, [r1, #1]
 8026d6e:	5d1c      	ldrb	r4, [r3, r4]
 8026d70:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026d74:	186b      	adds	r3, r5, r1
 8026d76:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026d7a:	930c      	str	r3, [sp, #48]	; 0x30
 8026d7c:	1963      	adds	r3, r4, r5
 8026d7e:	9310      	str	r3, [sp, #64]	; 0x40
 8026d80:	e041      	b.n	8026e06 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8026d82:	1c5c      	adds	r4, r3, #1
 8026d84:	d405      	bmi.n	8026d92 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8026d86:	42ac      	cmp	r4, r5
 8026d88:	dc03      	bgt.n	8026d92 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8026d8a:	1c4c      	adds	r4, r1, #1
 8026d8c:	d401      	bmi.n	8026d92 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8026d8e:	42b4      	cmp	r4, r6
 8026d90:	dd21      	ble.n	8026dd6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8026d92:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026d94:	f1b9 0f00 	cmp.w	r9, #0
 8026d98:	449a      	add	sl, r3
 8026d9a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026d9c:	f10b 0b04 	add.w	fp, fp, #4
 8026da0:	441f      	add	r7, r3
 8026da2:	dd07      	ble.n	8026db4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8026da4:	e9d8 5602 	ldrd	r5, r6, [r8, #8]
 8026da8:	f109 39ff 	add.w	r9, r9, #4294967295
 8026dac:	ea4f 432a 	mov.w	r3, sl, asr #16
 8026db0:	1439      	asrs	r1, r7, #16
 8026db2:	e7b6      	b.n	8026d22 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8026db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026db6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8026db8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8026dbc:	3301      	adds	r3, #1
 8026dbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8026dc2:	930d      	str	r3, [sp, #52]	; 0x34
 8026dc4:	e67e      	b.n	8026ac4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8026dc6:	920d      	str	r2, [sp, #52]	; 0x34
 8026dc8:	f10b 32ff 	add.w	r2, fp, #4294967295
 8026dcc:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8026dd0:	4691      	mov	r9, r2
 8026dd2:	9209      	str	r2, [sp, #36]	; 0x24
 8026dd4:	e7a0      	b.n	8026d18 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8026dd6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026dd8:	b236      	sxth	r6, r6
 8026dda:	b22d      	sxth	r5, r5
 8026ddc:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8026de0:	e9cd 2405 	strd	r2, r4, [sp, #20]
 8026de4:	9302      	str	r3, [sp, #8]
 8026de6:	e9cd 5600 	strd	r5, r6, [sp]
 8026dea:	9b08      	ldr	r3, [sp, #32]
 8026dec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026dee:	4659      	mov	r1, fp
 8026df0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8026df2:	f7ff fcf3 	bl	80267dc <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh>
 8026df6:	e7cc      	b.n	8026d92 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8026df8:	2a00      	cmp	r2, #0
 8026dfa:	d173      	bne.n	8026ee4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8026dfc:	46e6      	mov	lr, ip
 8026dfe:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8026e02:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8026e06:	b283      	uxth	r3, r0
 8026e08:	b292      	uxth	r2, r2
 8026e0a:	fb03 f002 	mul.w	r0, r3, r2
 8026e0e:	011b      	lsls	r3, r3, #4
 8026e10:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8026e14:	f89e 5002 	ldrb.w	r5, [lr, #2]
 8026e18:	1a19      	subs	r1, r3, r0
 8026e1a:	b289      	uxth	r1, r1
 8026e1c:	f89e e000 	ldrb.w	lr, [lr]
 8026e20:	fb01 f505 	mul.w	r5, r1, r5
 8026e24:	ebc0 1202 	rsb	r2, r0, r2, lsl #4
 8026e28:	fb01 f606 	mul.w	r6, r1, r6
 8026e2c:	b292      	uxth	r2, r2
 8026e2e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8026e32:	fb01 f40e 	mul.w	r4, r1, lr
 8026e36:	1a9b      	subs	r3, r3, r2
 8026e38:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8026e3c:	f89c e002 	ldrb.w	lr, [ip, #2]
 8026e40:	b29b      	uxth	r3, r3
 8026e42:	fb03 6601 	mla	r6, r3, r1, r6
 8026e46:	fb03 5e0e 	mla	lr, r3, lr, r5
 8026e4a:	9908      	ldr	r1, [sp, #32]
 8026e4c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8026e4e:	5d49      	ldrb	r1, [r1, r5]
 8026e50:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8026e52:	fb03 4301 	mla	r3, r3, r1, r4
 8026e56:	f895 c001 	ldrb.w	ip, [r5, #1]
 8026e5a:	78ad      	ldrb	r5, [r5, #2]
 8026e5c:	fb02 6c0c 	mla	ip, r2, ip, r6
 8026e60:	fb02 e505 	mla	r5, r2, r5, lr
 8026e64:	990c      	ldr	r1, [sp, #48]	; 0x30
 8026e66:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026e68:	784e      	ldrb	r6, [r1, #1]
 8026e6a:	7824      	ldrb	r4, [r4, #0]
 8026e6c:	7889      	ldrb	r1, [r1, #2]
 8026e6e:	fb02 3204 	mla	r2, r2, r4, r3
 8026e72:	fb00 cc06 	mla	ip, r0, r6, ip
 8026e76:	fb00 5501 	mla	r5, r0, r1, r5
 8026e7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8026e7c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8026e7e:	780b      	ldrb	r3, [r1, #0]
 8026e80:	f89b 4000 	ldrb.w	r4, [fp]
 8026e84:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8026e88:	fb00 2003 	mla	r0, r0, r3, r2
 8026e8c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8026e90:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8026e94:	fb15 f501 	smulbb	r5, r5, r1
 8026e98:	fb14 f406 	smulbb	r4, r4, r6
 8026e9c:	fb1c fc01 	smulbb	ip, ip, r1
 8026ea0:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8026ea4:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8026ea8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026eac:	fb00 4001 	mla	r0, r0, r1, r4
 8026eb0:	fb03 5306 	mla	r3, r3, r6, r5
 8026eb4:	fb02 c106 	mla	r1, r2, r6, ip
 8026eb8:	b29b      	uxth	r3, r3
 8026eba:	b280      	uxth	r0, r0
 8026ebc:	b289      	uxth	r1, r1
 8026ebe:	1c5a      	adds	r2, r3, #1
 8026ec0:	1c4d      	adds	r5, r1, #1
 8026ec2:	1c44      	adds	r4, r0, #1
 8026ec4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8026ec8:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8026ecc:	eb04 2310 	add.w	r3, r4, r0, lsr #8
 8026ed0:	1209      	asrs	r1, r1, #8
 8026ed2:	1212      	asrs	r2, r2, #8
 8026ed4:	121b      	asrs	r3, r3, #8
 8026ed6:	f88b 1001 	strb.w	r1, [fp, #1]
 8026eda:	f88b 2002 	strb.w	r2, [fp, #2]
 8026ede:	f88b 3000 	strb.w	r3, [fp]
 8026ee2:	e756      	b.n	8026d92 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8026ee4:	5d1c      	ldrb	r4, [r3, r4]
 8026ee6:	9b08      	ldr	r3, [sp, #32]
 8026ee8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026eec:	18e3      	adds	r3, r4, r3
 8026eee:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8026ef2:	9310      	str	r3, [sp, #64]	; 0x40
 8026ef4:	46e6      	mov	lr, ip
 8026ef6:	e786      	b.n	8026e06 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8026ef8:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8026efc:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8026f00:	e781      	b.n	8026e06 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8026f02:	f43f addf 	beq.w	8026ac4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8026f06:	1e44      	subs	r4, r0, #1
 8026f08:	e621      	b.n	8026b4e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8026f0a:	bf00      	nop

08026f0c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh>:
 8026f0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026f10:	f9bd c028 	ldrsh.w	ip, [sp, #40]	; 0x28
 8026f14:	e9dd 640c 	ldrd	r6, r4, [sp, #48]	; 0x30
 8026f18:	fb04 6e0c 	mla	lr, r4, ip, r6
 8026f1c:	2c00      	cmp	r4, #0
 8026f1e:	461f      	mov	r7, r3
 8026f20:	eb02 0a0e 	add.w	sl, r2, lr
 8026f24:	f104 0801 	add.w	r8, r4, #1
 8026f28:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8026f2c:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 8026f30:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8026f34:	db01      	blt.n	8026f3a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x2e>
 8026f36:	45a1      	cmp	r9, r4
 8026f38:	dc6f      	bgt.n	802701a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x10e>
 8026f3a:	f891 b000 	ldrb.w	fp, [r1]
 8026f3e:	460b      	mov	r3, r1
 8026f40:	465c      	mov	r4, fp
 8026f42:	468e      	mov	lr, r1
 8026f44:	f1b8 0f00 	cmp.w	r8, #0
 8026f48:	db01      	blt.n	8026f4e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x42>
 8026f4a:	45c1      	cmp	r9, r8
 8026f4c:	dc4a      	bgt.n	8026fe4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xd8>
 8026f4e:	f891 9000 	ldrb.w	r9, [r1]
 8026f52:	460f      	mov	r7, r1
 8026f54:	46ca      	mov	sl, r9
 8026f56:	4688      	mov	r8, r1
 8026f58:	2d0f      	cmp	r5, #15
 8026f5a:	f200 8097 	bhi.w	802708c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x180>
 8026f5e:	280f      	cmp	r0, #15
 8026f60:	f200 8094 	bhi.w	802708c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x180>
 8026f64:	b2aa      	uxth	r2, r5
 8026f66:	b280      	uxth	r0, r0
 8026f68:	fb02 f600 	mul.w	r6, r2, r0
 8026f6c:	0112      	lsls	r2, r2, #4
 8026f6e:	1b95      	subs	r5, r2, r6
 8026f70:	f893 c001 	ldrb.w	ip, [r3, #1]
 8026f74:	789b      	ldrb	r3, [r3, #2]
 8026f76:	b2ad      	uxth	r5, r5
 8026f78:	ebc6 1000 	rsb	r0, r6, r0, lsl #4
 8026f7c:	fb05 f404 	mul.w	r4, r5, r4
 8026f80:	fb05 fc0c 	mul.w	ip, r5, ip
 8026f84:	fb05 f503 	mul.w	r5, r5, r3
 8026f88:	b280      	uxth	r0, r0
 8026f8a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8026f8e:	f89e 3001 	ldrb.w	r3, [lr, #1]
 8026f92:	1a12      	subs	r2, r2, r0
 8026f94:	f89e e002 	ldrb.w	lr, [lr, #2]
 8026f98:	b292      	uxth	r2, r2
 8026f9a:	fb02 cc03 	mla	ip, r2, r3, ip
 8026f9e:	fb02 440b 	mla	r4, r2, fp, r4
 8026fa2:	fb02 520e 	mla	r2, r2, lr, r5
 8026fa6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8026faa:	f898 8002 	ldrb.w	r8, [r8, #2]
 8026fae:	fb00 cc03 	mla	ip, r0, r3, ip
 8026fb2:	fb00 4909 	mla	r9, r0, r9, r4
 8026fb6:	fb00 2008 	mla	r0, r0, r8, r2
 8026fba:	787b      	ldrb	r3, [r7, #1]
 8026fbc:	78ba      	ldrb	r2, [r7, #2]
 8026fbe:	fb06 9a0a 	mla	sl, r6, sl, r9
 8026fc2:	fb06 c303 	mla	r3, r6, r3, ip
 8026fc6:	fb06 0602 	mla	r6, r6, r2, r0
 8026fca:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8026fce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026fd2:	0236      	lsls	r6, r6, #8
 8026fd4:	ea43 030a 	orr.w	r3, r3, sl
 8026fd8:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
 8026fdc:	4333      	orrs	r3, r6
 8026fde:	600b      	str	r3, [r1, #0]
 8026fe0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026fe4:	b378      	cbz	r0, 8027046 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x13a>
 8026fe6:	2e00      	cmp	r6, #0
 8026fe8:	db3f      	blt.n	802706a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x15e>
 8026fea:	45b4      	cmp	ip, r6
 8026fec:	dd3d      	ble.n	802706a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x15e>
 8026fee:	f81a 800c 	ldrb.w	r8, [sl, ip]
 8026ff2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8026ff6:	44b8      	add	r8, r7
 8026ff8:	3601      	adds	r6, #1
 8026ffa:	f898 9000 	ldrb.w	r9, [r8]
 8026ffe:	d430      	bmi.n	8027062 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x156>
 8027000:	45b4      	cmp	ip, r6
 8027002:	dd2e      	ble.n	8027062 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x156>
 8027004:	2d00      	cmp	r5, #0
 8027006:	d03d      	beq.n	8027084 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x178>
 8027008:	44d4      	add	ip, sl
 802700a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802700e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8027012:	f817 a002 	ldrb.w	sl, [r7, r2]
 8027016:	4417      	add	r7, r2
 8027018:	e79e      	b.n	8026f58 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x4c>
 802701a:	2e00      	cmp	r6, #0
 802701c:	db01      	blt.n	8027022 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x116>
 802701e:	45b4      	cmp	ip, r6
 8027020:	dc19      	bgt.n	8027056 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x14a>
 8027022:	468e      	mov	lr, r1
 8027024:	1c73      	adds	r3, r6, #1
 8027026:	f89e b000 	ldrb.w	fp, [lr]
 802702a:	d409      	bmi.n	8027040 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x134>
 802702c:	459c      	cmp	ip, r3
 802702e:	dd07      	ble.n	8027040 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x134>
 8027030:	b1ed      	cbz	r5, 802706e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x162>
 8027032:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8027036:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802703a:	5cfc      	ldrb	r4, [r7, r3]
 802703c:	443b      	add	r3, r7
 802703e:	e781      	b.n	8026f44 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x38>
 8027040:	780c      	ldrb	r4, [r1, #0]
 8027042:	460b      	mov	r3, r1
 8027044:	e77e      	b.n	8026f44 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x38>
 8027046:	2d0f      	cmp	r5, #15
 8027048:	f891 9000 	ldrb.w	r9, [r1]
 802704c:	d81e      	bhi.n	802708c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x180>
 802704e:	460f      	mov	r7, r1
 8027050:	4688      	mov	r8, r1
 8027052:	46ca      	mov	sl, r9
 8027054:	e786      	b.n	8026f64 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x58>
 8027056:	f812 e00e 	ldrb.w	lr, [r2, lr]
 802705a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802705e:	449e      	add	lr, r3
 8027060:	e7e0      	b.n	8027024 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x118>
 8027062:	f891 a000 	ldrb.w	sl, [r1]
 8027066:	460f      	mov	r7, r1
 8027068:	e776      	b.n	8026f58 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x4c>
 802706a:	4688      	mov	r8, r1
 802706c:	e7c4      	b.n	8026ff8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xec>
 802706e:	f1b8 0f00 	cmp.w	r8, #0
 8027072:	780c      	ldrb	r4, [r1, #0]
 8027074:	460b      	mov	r3, r1
 8027076:	f6bf af68 	bge.w	8026f4a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x3e>
 802707a:	460f      	mov	r7, r1
 802707c:	4688      	mov	r8, r1
 802707e:	46a2      	mov	sl, r4
 8027080:	46a1      	mov	r9, r4
 8027082:	e76c      	b.n	8026f5e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x52>
 8027084:	f891 a000 	ldrb.w	sl, [r1]
 8027088:	460f      	mov	r7, r1
 802708a:	e768      	b.n	8026f5e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x52>
 802708c:	4b03      	ldr	r3, [pc, #12]	; (802709c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x190>)
 802708e:	4a04      	ldr	r2, [pc, #16]	; (80270a0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x194>)
 8027090:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8027094:	4803      	ldr	r0, [pc, #12]	; (80270a4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x198>)
 8027096:	f000 ffeb 	bl	8028070 <__assert_func>
 802709a:	bf00      	nop
 802709c:	0802b2dc 	.word	0x0802b2dc
 80270a0:	0802b954 	.word	0x0802b954
 80270a4:	0802b460 	.word	0x0802b460

080270a8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80270a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80270ac:	ed2d 8b0a 	vpush	{d8-d12}
 80270b0:	eeb0 aa40 	vmov.f32	s20, s0
 80270b4:	eef0 9a60 	vmov.f32	s19, s1
 80270b8:	eeb0 9a41 	vmov.f32	s18, s2
 80270bc:	eef0 8a62 	vmov.f32	s17, s5
 80270c0:	eeb0 8a43 	vmov.f32	s16, s6
 80270c4:	eeb0 ca44 	vmov.f32	s24, s8
 80270c8:	eef0 ba64 	vmov.f32	s23, s9
 80270cc:	eeb0 ba45 	vmov.f32	s22, s10
 80270d0:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80270d4:	b091      	sub	sp, #68	; 0x44
 80270d6:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 80270da:	e9dd 9525 	ldrd	r9, r5, [sp, #148]	; 0x94
 80270de:	900f      	str	r0, [sp, #60]	; 0x3c
 80270e0:	4698      	mov	r8, r3
 80270e2:	e9dd 0229 	ldrd	r0, r2, [sp, #164]	; 0xa4
 80270e6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80270e8:	6841      	ldr	r1, [r0, #4]
 80270ea:	fb01 2303 	mla	r3, r1, r3, r2
 80270ee:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80270f0:	6801      	ldr	r1, [r0, #0]
 80270f2:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80270f4:	6852      	ldr	r2, [r2, #4]
 80270f6:	6800      	ldr	r0, [r0, #0]
 80270f8:	eb01 0a83 	add.w	sl, r1, r3, lsl #2
 80270fc:	1d13      	adds	r3, r2, #4
 80270fe:	9009      	str	r0, [sp, #36]	; 0x24
 8027100:	930c      	str	r3, [sp, #48]	; 0x30
 8027102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027104:	2b00      	cmp	r3, #0
 8027106:	dc02      	bgt.n	802710e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8027108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802710a:	2b00      	cmp	r3, #0
 802710c:	dd66      	ble.n	80271dc <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 802710e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027110:	f1b8 0f00 	cmp.w	r8, #0
 8027114:	e9d3 4e02 	ldrd	r4, lr, [r3, #8]
 8027118:	b221      	sxth	r1, r4
 802711a:	fa0f f78e 	sxth.w	r7, lr
 802711e:	f340 81df 	ble.w	80274e0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8027122:	1e4e      	subs	r6, r1, #1
 8027124:	f107 3cff 	add.w	ip, r7, #4294967295
 8027128:	f8cd e01c 	str.w	lr, [sp, #28]
 802712c:	e9dd eb27 	ldrd	lr, fp, [sp, #156]	; 0x9c
 8027130:	ea5f 4329 	movs.w	r3, r9, asr #16
 8027134:	ea4f 4025 	mov.w	r0, r5, asr #16
 8027138:	d405      	bmi.n	8027146 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802713a:	42b3      	cmp	r3, r6
 802713c:	da03      	bge.n	8027146 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802713e:	2800      	cmp	r0, #0
 8027140:	db01      	blt.n	8027146 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8027142:	4560      	cmp	r0, ip
 8027144:	db4f      	blt.n	80271e6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8027146:	1c5a      	adds	r2, r3, #1
 8027148:	d406      	bmi.n	8027158 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802714a:	428a      	cmp	r2, r1
 802714c:	dc04      	bgt.n	8027158 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802714e:	1c42      	adds	r2, r0, #1
 8027150:	d402      	bmi.n	8027158 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8027152:	42ba      	cmp	r2, r7
 8027154:	f340 8157 	ble.w	8027406 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8027158:	f1b8 0801 	subs.w	r8, r8, #1
 802715c:	44f1      	add	r9, lr
 802715e:	445d      	add	r5, fp
 8027160:	f10a 0a04 	add.w	sl, sl, #4
 8027164:	d1e4      	bne.n	8027130 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8027166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027168:	2b00      	cmp	r3, #0
 802716a:	dd37      	ble.n	80271dc <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 802716c:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8027170:	ee79 9aab 	vadd.f32	s19, s19, s23
 8027174:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8027178:	ee39 9a0b 	vadd.f32	s18, s18, s22
 802717c:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8027180:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027184:	ee76 6a68 	vsub.f32	s13, s12, s17
 8027188:	ee37 7ac8 	vsub.f32	s14, s15, s16
 802718c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027190:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8027194:	ee16 2a90 	vmov	r2, s13
 8027198:	3b01      	subs	r3, #1
 802719a:	930a      	str	r3, [sp, #40]	; 0x28
 802719c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802719e:	fb92 f3f3 	sdiv	r3, r2, r3
 80271a2:	ee17 2a10 	vmov	r2, s14
 80271a6:	eeb0 7a48 	vmov.f32	s14, s16
 80271aa:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80271ae:	ee17 5a10 	vmov	r5, s14
 80271b2:	eeb0 7a68 	vmov.f32	s14, s17
 80271b6:	9327      	str	r3, [sp, #156]	; 0x9c
 80271b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80271ba:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80271be:	fb92 f3f3 	sdiv	r3, r2, r3
 80271c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80271c4:	9328      	str	r3, [sp, #160]	; 0xa0
 80271c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80271c8:	ee17 9a10 	vmov	r9, s14
 80271cc:	eeb0 8a67 	vmov.f32	s16, s15
 80271d0:	eef0 8a46 	vmov.f32	s17, s12
 80271d4:	bf14      	ite	ne
 80271d6:	4698      	movne	r8, r3
 80271d8:	4690      	moveq	r8, r2
 80271da:	e792      	b.n	8027102 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80271dc:	b011      	add	sp, #68	; 0x44
 80271de:	ecbd 8b0a 	vpop	{d8-d12}
 80271e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80271e6:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80271ea:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80271ec:	f108 32ff 	add.w	r2, r8, #4294967295
 80271f0:	fb00 9302 	mla	r3, r0, r2, r9
 80271f4:	141b      	asrs	r3, r3, #16
 80271f6:	9207      	str	r2, [sp, #28]
 80271f8:	f100 80a6 	bmi.w	8027348 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80271fc:	42b3      	cmp	r3, r6
 80271fe:	f280 80a3 	bge.w	8027348 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8027202:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027204:	fb03 5302 	mla	r3, r3, r2, r5
 8027208:	141b      	asrs	r3, r3, #16
 802720a:	f100 809d 	bmi.w	8027348 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 802720e:	3f01      	subs	r7, #1
 8027210:	42bb      	cmp	r3, r7
 8027212:	f280 8099 	bge.w	8027348 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8027216:	f1b8 0f00 	cmp.w	r8, #0
 802721a:	dda4      	ble.n	8027166 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 802721c:	f8cd a020 	str.w	sl, [sp, #32]
 8027220:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8027224:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8027228:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 802722c:	e065      	b.n	80272fa <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 802722e:	f890 c001 	ldrb.w	ip, [r0, #1]
 8027232:	1844      	adds	r4, r0, r1
 8027234:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8027238:	44d4      	add	ip, sl
 802723a:	2a00      	cmp	r2, #0
 802723c:	d078      	beq.n	8027330 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 802723e:	5c40      	ldrb	r0, [r0, r1]
 8027240:	7866      	ldrb	r6, [r4, #1]
 8027242:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8027246:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802724a:	4450      	add	r0, sl
 802724c:	4456      	add	r6, sl
 802724e:	b29b      	uxth	r3, r3
 8027250:	b292      	uxth	r2, r2
 8027252:	fb03 f402 	mul.w	r4, r3, r2
 8027256:	011b      	lsls	r3, r3, #4
 8027258:	f89c 8000 	ldrb.w	r8, [ip]
 802725c:	f89c e001 	ldrb.w	lr, [ip, #1]
 8027260:	1b19      	subs	r1, r3, r4
 8027262:	f89c c002 	ldrb.w	ip, [ip, #2]
 8027266:	b289      	uxth	r1, r1
 8027268:	fb01 fe0e 	mul.w	lr, r1, lr
 802726c:	fb01 f808 	mul.w	r8, r1, r8
 8027270:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8027274:	fb01 f10c 	mul.w	r1, r1, ip
 8027278:	b292      	uxth	r2, r2
 802727a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 802727e:	f81a b00b 	ldrb.w	fp, [sl, fp]
 8027282:	f897 c001 	ldrb.w	ip, [r7, #1]
 8027286:	1a9b      	subs	r3, r3, r2
 8027288:	78bf      	ldrb	r7, [r7, #2]
 802728a:	b29b      	uxth	r3, r3
 802728c:	fb03 880b 	mla	r8, r3, fp, r8
 8027290:	fb03 ec0c 	mla	ip, r3, ip, lr
 8027294:	fb03 1307 	mla	r3, r3, r7, r1
 8027298:	7881      	ldrb	r1, [r0, #2]
 802729a:	f890 b000 	ldrb.w	fp, [r0]
 802729e:	fb02 3301 	mla	r3, r2, r1, r3
 80272a2:	f890 e001 	ldrb.w	lr, [r0, #1]
 80272a6:	78b1      	ldrb	r1, [r6, #2]
 80272a8:	fb02 880b 	mla	r8, r2, fp, r8
 80272ac:	fb02 cc0e 	mla	ip, r2, lr, ip
 80272b0:	fb04 3301 	mla	r3, r4, r1, r3
 80272b4:	f896 b000 	ldrb.w	fp, [r6]
 80272b8:	f896 e001 	ldrb.w	lr, [r6, #1]
 80272bc:	0219      	lsls	r1, r3, #8
 80272be:	fb04 880b 	mla	r8, r4, fp, r8
 80272c2:	fb04 cc0e 	mla	ip, r4, lr, ip
 80272c6:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
 80272ca:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80272cc:	9a07      	ldr	r2, [sp, #28]
 80272ce:	4489      	add	r9, r1
 80272d0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80272d2:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80272d6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80272da:	ea48 080c 	orr.w	r8, r8, ip
 80272de:	440d      	add	r5, r1
 80272e0:	9908      	ldr	r1, [sp, #32]
 80272e2:	3a01      	subs	r2, #1
 80272e4:	ea48 0303 	orr.w	r3, r8, r3
 80272e8:	9207      	str	r2, [sp, #28]
 80272ea:	f841 3b04 	str.w	r3, [r1], #4
 80272ee:	3201      	adds	r2, #1
 80272f0:	9108      	str	r1, [sp, #32]
 80272f2:	d024      	beq.n	802733e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80272f4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80272f6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80272fa:	ea4f 4329 	mov.w	r3, r9, asr #16
 80272fe:	1428      	asrs	r0, r5, #16
 8027300:	fb01 3000 	mla	r0, r1, r0, r3
 8027304:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027306:	f3c9 3303 	ubfx	r3, r9, #12, #4
 802730a:	f812 b000 	ldrb.w	fp, [r2, r0]
 802730e:	4410      	add	r0, r2
 8027310:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8027314:	eb0a 070b 	add.w	r7, sl, fp
 8027318:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802731c:	2b00      	cmp	r3, #0
 802731e:	d186      	bne.n	802722e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8027320:	b14a      	cbz	r2, 8027336 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 8027322:	5c40      	ldrb	r0, [r0, r1]
 8027324:	463e      	mov	r6, r7
 8027326:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802732a:	4450      	add	r0, sl
 802732c:	46bc      	mov	ip, r7
 802732e:	e78e      	b.n	802724e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8027330:	463e      	mov	r6, r7
 8027332:	4638      	mov	r0, r7
 8027334:	e78b      	b.n	802724e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8027336:	463e      	mov	r6, r7
 8027338:	4638      	mov	r0, r7
 802733a:	46bc      	mov	ip, r7
 802733c:	e787      	b.n	802724e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 802733e:	e9dd a80d 	ldrd	sl, r8, [sp, #52]	; 0x34
 8027342:	eb0a 0a88 	add.w	sl, sl, r8, lsl #2
 8027346:	e70e      	b.n	8027166 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8027348:	f1b8 0f00 	cmp.w	r8, #0
 802734c:	f77f af0b 	ble.w	8027166 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8027350:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8027354:	ea4f 4329 	mov.w	r3, r9, asr #16
 8027358:	1428      	asrs	r0, r5, #16
 802735a:	4677      	mov	r7, lr
 802735c:	46d0      	mov	r8, sl
 802735e:	f8cd a020 	str.w	sl, [sp, #32]
 8027362:	f8dd a0b0 	ldr.w	sl, [sp, #176]	; 0xb0
 8027366:	2b00      	cmp	r3, #0
 8027368:	f3c9 3103 	ubfx	r1, r9, #12, #4
 802736c:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8027370:	db28      	blt.n	80273c4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8027372:	1e66      	subs	r6, r4, #1
 8027374:	42b3      	cmp	r3, r6
 8027376:	da25      	bge.n	80273c4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8027378:	2800      	cmp	r0, #0
 802737a:	db23      	blt.n	80273c4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 802737c:	1e7e      	subs	r6, r7, #1
 802737e:	42b0      	cmp	r0, r6
 8027380:	da20      	bge.n	80273c4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8027382:	b224      	sxth	r4, r4
 8027384:	fb00 3304 	mla	r3, r0, r4, r3
 8027388:	9809      	ldr	r0, [sp, #36]	; 0x24
 802738a:	5cc7      	ldrb	r7, [r0, r3]
 802738c:	4403      	add	r3, r0
 802738e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8027390:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8027394:	eb00 0c07 	add.w	ip, r0, r7
 8027398:	2900      	cmp	r1, #0
 802739a:	d04a      	beq.n	8027432 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802739c:	785e      	ldrb	r6, [r3, #1]
 802739e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80273a2:	4406      	add	r6, r0
 80273a4:	2a00      	cmp	r2, #0
 80273a6:	f000 8098 	beq.w	80274da <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 80273aa:	1918      	adds	r0, r3, r4
 80273ac:	7840      	ldrb	r0, [r0, #1]
 80273ae:	5d1c      	ldrb	r4, [r3, r4]
 80273b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80273b2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80273b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80273ba:	1818      	adds	r0, r3, r0
 80273bc:	18e3      	adds	r3, r4, r3
 80273be:	900d      	str	r0, [sp, #52]	; 0x34
 80273c0:	930e      	str	r3, [sp, #56]	; 0x38
 80273c2:	e03b      	b.n	802743c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80273c4:	1c5e      	adds	r6, r3, #1
 80273c6:	d405      	bmi.n	80273d4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80273c8:	42a6      	cmp	r6, r4
 80273ca:	dc03      	bgt.n	80273d4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80273cc:	1c46      	adds	r6, r0, #1
 80273ce:	d401      	bmi.n	80273d4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80273d0:	42be      	cmp	r6, r7
 80273d2:	dd1f      	ble.n	8027414 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80273d4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80273d6:	f1bb 0f00 	cmp.w	fp, #0
 80273da:	4499      	add	r9, r3
 80273dc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80273de:	f108 0804 	add.w	r8, r8, #4
 80273e2:	441d      	add	r5, r3
 80273e4:	dd07      	ble.n	80273f6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 80273e6:	e9da 4702 	ldrd	r4, r7, [sl, #8]
 80273ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80273ee:	ea4f 4329 	mov.w	r3, r9, asr #16
 80273f2:	1428      	asrs	r0, r5, #16
 80273f4:	e7b7      	b.n	8027366 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 80273f6:	e9dd 3a07 	ldrd	r3, sl, [sp, #28]
 80273fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80273fe:	3301      	adds	r3, #1
 8027400:	eb0a 0a83 	add.w	sl, sl, r3, lsl #2
 8027404:	e6af      	b.n	8027166 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8027406:	f108 32ff 	add.w	r2, r8, #4294967295
 802740a:	f8dd e01c 	ldr.w	lr, [sp, #28]
 802740e:	4693      	mov	fp, r2
 8027410:	9207      	str	r2, [sp, #28]
 8027412:	e7a2      	b.n	802735a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 8027414:	b23f      	sxth	r7, r7
 8027416:	b224      	sxth	r4, r4
 8027418:	e9cd 1204 	strd	r1, r2, [sp, #16]
 802741c:	e9cd 3002 	strd	r3, r0, [sp, #8]
 8027420:	e9cd 4700 	strd	r4, r7, [sp]
 8027424:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027426:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027428:	4641      	mov	r1, r8
 802742a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802742c:	f7ff fd6e 	bl	8026f0c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh>
 8027430:	e7d0      	b.n	80273d4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8027432:	2a00      	cmp	r2, #0
 8027434:	d147      	bne.n	80274c6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41e>
 8027436:	4666      	mov	r6, ip
 8027438:	e9cd cc0d 	strd	ip, ip, [sp, #52]	; 0x34
 802743c:	b28b      	uxth	r3, r1
 802743e:	b292      	uxth	r2, r2
 8027440:	fb03 f002 	mul.w	r0, r3, r2
 8027444:	011b      	lsls	r3, r3, #4
 8027446:	f896 e000 	ldrb.w	lr, [r6]
 802744a:	7874      	ldrb	r4, [r6, #1]
 802744c:	1a19      	subs	r1, r3, r0
 802744e:	78b6      	ldrb	r6, [r6, #2]
 8027450:	b289      	uxth	r1, r1
 8027452:	fb01 f404 	mul.w	r4, r1, r4
 8027456:	fb01 fe0e 	mul.w	lr, r1, lr
 802745a:	ebc0 1202 	rsb	r2, r0, r2, lsl #4
 802745e:	fb01 f106 	mul.w	r1, r1, r6
 8027462:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8027464:	b292      	uxth	r2, r2
 8027466:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 802746a:	5df7      	ldrb	r7, [r6, r7]
 802746c:	1a9b      	subs	r3, r3, r2
 802746e:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8027472:	f89c c002 	ldrb.w	ip, [ip, #2]
 8027476:	b29b      	uxth	r3, r3
 8027478:	fb03 4606 	mla	r6, r3, r6, r4
 802747c:	fb03 e707 	mla	r7, r3, r7, lr
 8027480:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8027482:	fb03 130c 	mla	r3, r3, ip, r1
 8027486:	7861      	ldrb	r1, [r4, #1]
 8027488:	f894 c000 	ldrb.w	ip, [r4]
 802748c:	78a4      	ldrb	r4, [r4, #2]
 802748e:	fb02 6601 	mla	r6, r2, r1, r6
 8027492:	fb02 770c 	mla	r7, r2, ip, r7
 8027496:	fb02 3104 	mla	r1, r2, r4, r3
 802749a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802749c:	7862      	ldrb	r2, [r4, #1]
 802749e:	7823      	ldrb	r3, [r4, #0]
 80274a0:	78a4      	ldrb	r4, [r4, #2]
 80274a2:	fb00 6602 	mla	r6, r0, r2, r6
 80274a6:	fb00 7303 	mla	r3, r0, r3, r7
 80274aa:	fb00 1204 	mla	r2, r0, r4, r1
 80274ae:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80274b2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80274b6:	0212      	lsls	r2, r2, #8
 80274b8:	4333      	orrs	r3, r6
 80274ba:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 80274be:	4313      	orrs	r3, r2
 80274c0:	f8c8 3000 	str.w	r3, [r8]
 80274c4:	e786      	b.n	80273d4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80274c6:	5d1c      	ldrb	r4, [r3, r4]
 80274c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80274ca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80274ce:	18e3      	adds	r3, r4, r3
 80274d0:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 80274d4:	930e      	str	r3, [sp, #56]	; 0x38
 80274d6:	4666      	mov	r6, ip
 80274d8:	e7b0      	b.n	802743c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80274da:	e9cd cc0d 	strd	ip, ip, [sp, #52]	; 0x34
 80274de:	e7ad      	b.n	802743c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80274e0:	f43f ae41 	beq.w	8027166 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80274e4:	1e4e      	subs	r6, r1, #1
 80274e6:	e680      	b.n	80271ea <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>

080274e8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh>:
 80274e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80274ec:	b087      	sub	sp, #28
 80274ee:	f9bd c040 	ldrsh.w	ip, [sp, #64]	; 0x40
 80274f2:	e9dd 0412 	ldrd	r0, r4, [sp, #72]	; 0x48
 80274f6:	fb04 070c 	mla	r7, r4, ip, r0
 80274fa:	9100      	str	r1, [sp, #0]
 80274fc:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
 8027500:	2c00      	cmp	r4, #0
 8027502:	eb02 0b07 	add.w	fp, r2, r7
 8027506:	f104 0501 	add.w	r5, r4, #1
 802750a:	f9bd 8044 	ldrsh.w	r8, [sp, #68]	; 0x44
 802750e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
 8027512:	f89d 6054 	ldrb.w	r6, [sp, #84]	; 0x54
 8027516:	9101      	str	r1, [sp, #4]
 8027518:	db02      	blt.n	8027520 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x38>
 802751a:	45a0      	cmp	r8, r4
 802751c:	f300 811a 	bgt.w	8027754 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x26c>
 8027520:	2700      	movs	r7, #0
 8027522:	46be      	mov	lr, r7
 8027524:	46b9      	mov	r9, r7
 8027526:	463c      	mov	r4, r7
 8027528:	2d00      	cmp	r5, #0
 802752a:	db02      	blt.n	8027532 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x4a>
 802752c:	45a8      	cmp	r8, r5
 802752e:	f300 812b 	bgt.w	8027788 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2a0>
 8027532:	f04f 0c00 	mov.w	ip, #0
 8027536:	46e0      	mov	r8, ip
 8027538:	4665      	mov	r5, ip
 802753a:	f8cd c010 	str.w	ip, [sp, #16]
 802753e:	f1ba 0f0f 	cmp.w	sl, #15
 8027542:	f200 8167 	bhi.w	8027814 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x32c>
 8027546:	2e0f      	cmp	r6, #15
 8027548:	f200 8164 	bhi.w	8027814 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x32c>
 802754c:	b2b2      	uxth	r2, r6
 802754e:	fa1f f38a 	uxth.w	r3, sl
 8027552:	fb02 f603 	mul.w	r6, r2, r3
 8027556:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 802755a:	b292      	uxth	r2, r2
 802755c:	fb02 fa08 	mul.w	sl, r2, r8
 8027560:	fb06 fb0c 	mul.w	fp, r6, ip
 8027564:	011b      	lsls	r3, r3, #4
 8027566:	1b98      	subs	r0, r3, r6
 8027568:	b280      	uxth	r0, r0
 802756a:	9002      	str	r0, [sp, #8]
 802756c:	fb00 f007 	mul.w	r0, r0, r7
 8027570:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8027574:	1a9b      	subs	r3, r3, r2
 8027576:	b29b      	uxth	r3, r3
 8027578:	fb03 000e 	mla	r0, r3, lr, r0
 802757c:	4450      	add	r0, sl
 802757e:	4458      	add	r0, fp
 8027580:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027584:	9003      	str	r0, [sp, #12]
 8027586:	2800      	cmp	r0, #0
 8027588:	f000 80e1 	beq.w	802774e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x266>
 802758c:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8027590:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8027594:	f009 1bff 	and.w	fp, r9, #16711935	; 0xff00ff
 8027598:	9105      	str	r1, [sp, #20]
 802759a:	d01d      	beq.n	80275d8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xf0>
 802759c:	fb0b fb0e 	mul.w	fp, fp, lr
 80275a0:	fb01 fe0e 	mul.w	lr, r1, lr
 80275a4:	ea4f 2a1b 	mov.w	sl, fp, lsr #8
 80275a8:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 80275ac:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80275b0:	f50e 7080 	add.w	r0, lr, #256	; 0x100
 80275b4:	44d3      	add	fp, sl
 80275b6:	eb00 2e1e 	add.w	lr, r0, lr, lsr #8
 80275ba:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80275be:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80275c2:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80275c6:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80275ca:	ea4b 0e0e 	orr.w	lr, fp, lr
 80275ce:	f40e 417f 	and.w	r1, lr, #65280	; 0xff00
 80275d2:	f00e 1bff 	and.w	fp, lr, #16711935	; 0xff00ff
 80275d6:	9105      	str	r1, [sp, #20]
 80275d8:	2fff      	cmp	r7, #255	; 0xff
 80275da:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80275de:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80275e2:	d01b      	beq.n	802761c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x134>
 80275e4:	fb0e fe07 	mul.w	lr, lr, r7
 80275e8:	fb04 f407 	mul.w	r4, r4, r7
 80275ec:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
 80275f0:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 80275f4:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80275f8:	f504 7080 	add.w	r0, r4, #256	; 0x100
 80275fc:	44d6      	add	lr, sl
 80275fe:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8027602:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027606:	0a24      	lsrs	r4, r4, #8
 8027608:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802760c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8027610:	ea4e 0404 	orr.w	r4, lr, r4
 8027614:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8027618:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802761c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8027620:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 8027624:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8027628:	d019      	beq.n	802765e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x176>
 802762a:	fb00 f008 	mul.w	r0, r0, r8
 802762e:	fb05 f508 	mul.w	r5, r5, r8
 8027632:	ea4f 2910 	mov.w	r9, r0, lsr #8
 8027636:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 802763a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802763e:	f505 7780 	add.w	r7, r5, #256	; 0x100
 8027642:	4448      	add	r0, r9
 8027644:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8027648:	0a00      	lsrs	r0, r0, #8
 802764a:	0a2d      	lsrs	r5, r5, #8
 802764c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8027650:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8027654:	4305      	orrs	r5, r0
 8027656:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 802765a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802765e:	9904      	ldr	r1, [sp, #16]
 8027660:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8027664:	f001 1aff 	and.w	sl, r1, #16711935	; 0xff00ff
 8027668:	f401 497f 	and.w	r9, r1, #65280	; 0xff00
 802766c:	d01c      	beq.n	80276a8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x1c0>
 802766e:	fb0a fa0c 	mul.w	sl, sl, ip
 8027672:	fb09 fc0c 	mul.w	ip, r9, ip
 8027676:	ea4f 281a 	mov.w	r8, sl, lsr #8
 802767a:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 802767e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027682:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8027686:	44c2      	add	sl, r8
 8027688:	eb07 2c1c 	add.w	ip, r7, ip, lsr #8
 802768c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027690:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027694:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8027698:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802769c:	ea4a 090c 	orr.w	r9, sl, ip
 80276a0:	f009 1aff 	and.w	sl, r9, #16711935	; 0xff00ff
 80276a4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80276a8:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 80276ac:	9903      	ldr	r1, [sp, #12]
 80276ae:	fb01 fc08 	mul.w	ip, r1, r8
 80276b2:	f10c 0701 	add.w	r7, ip, #1
 80276b6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80276ba:	ea6f 2c17 	mvn.w	ip, r7, lsr #8
 80276be:	9902      	ldr	r1, [sp, #8]
 80276c0:	fa5f f78c 	uxtb.w	r7, ip
 80276c4:	fb04 f401 	mul.w	r4, r4, r1
 80276c8:	fb0e fe01 	mul.w	lr, lr, r1
 80276cc:	9905      	ldr	r1, [sp, #20]
 80276ce:	fb0b ee03 	mla	lr, fp, r3, lr
 80276d2:	fb01 4303 	mla	r3, r1, r3, r4
 80276d6:	fb00 e002 	mla	r0, r0, r2, lr
 80276da:	fb05 3502 	mla	r5, r5, r2, r3
 80276de:	fb0a 0a06 	mla	sl, sl, r6, r0
 80276e2:	fb09 5906 	mla	r9, r9, r6, r5
 80276e6:	ea4f 261a 	mov.w	r6, sl, lsr #8
 80276ea:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80276ee:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80276f2:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80276f6:	ea46 0609 	orr.w	r6, r6, r9
 80276fa:	b2f2      	uxtb	r2, r6
 80276fc:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8027700:	0c36      	lsrs	r6, r6, #16
 8027702:	9900      	ldr	r1, [sp, #0]
 8027704:	fb12 f408 	smulbb	r4, r2, r8
 8027708:	fb13 f008 	smulbb	r0, r3, r8
 802770c:	fb16 f808 	smulbb	r8, r6, r8
 8027710:	780a      	ldrb	r2, [r1, #0]
 8027712:	784b      	ldrb	r3, [r1, #1]
 8027714:	788e      	ldrb	r6, [r1, #2]
 8027716:	fb02 4207 	mla	r2, r2, r7, r4
 802771a:	fb03 0307 	mla	r3, r3, r7, r0
 802771e:	fb06 8807 	mla	r8, r6, r7, r8
 8027722:	b292      	uxth	r2, r2
 8027724:	b29b      	uxth	r3, r3
 8027726:	fa1f f888 	uxth.w	r8, r8
 802772a:	1c54      	adds	r4, r2, #1
 802772c:	1c58      	adds	r0, r3, #1
 802772e:	f108 0701 	add.w	r7, r8, #1
 8027732:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8027736:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802773a:	eb07 2818 	add.w	r8, r7, r8, lsr #8
 802773e:	1212      	asrs	r2, r2, #8
 8027740:	121b      	asrs	r3, r3, #8
 8027742:	ea4f 2828 	mov.w	r8, r8, asr #8
 8027746:	700a      	strb	r2, [r1, #0]
 8027748:	704b      	strb	r3, [r1, #1]
 802774a:	f881 8002 	strb.w	r8, [r1, #2]
 802774e:	b007      	add	sp, #28
 8027750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027754:	2800      	cmp	r0, #0
 8027756:	db01      	blt.n	802775c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x274>
 8027758:	4584      	cmp	ip, r0
 802775a:	dc40      	bgt.n	80277de <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2f6>
 802775c:	f04f 0e00 	mov.w	lr, #0
 8027760:	46f1      	mov	r9, lr
 8027762:	1c42      	adds	r2, r0, #1
 8027764:	d42b      	bmi.n	80277be <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2d6>
 8027766:	4594      	cmp	ip, r2
 8027768:	dd29      	ble.n	80277be <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2d6>
 802776a:	f1ba 0f00 	cmp.w	sl, #0
 802776e:	d005      	beq.n	802777c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x294>
 8027770:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8027774:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8027778:	0e27      	lsrs	r7, r4, #24
 802777a:	e6d5      	b.n	8027528 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x40>
 802777c:	2d00      	cmp	r5, #0
 802777e:	db41      	blt.n	8027804 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x31c>
 8027780:	45a8      	cmp	r8, r5
 8027782:	dd3f      	ble.n	8027804 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x31c>
 8027784:	4657      	mov	r7, sl
 8027786:	4654      	mov	r4, sl
 8027788:	b1e6      	cbz	r6, 80277c4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2dc>
 802778a:	2800      	cmp	r0, #0
 802778c:	db32      	blt.n	80277f4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x30c>
 802778e:	4584      	cmp	ip, r0
 8027790:	dd30      	ble.n	80277f4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x30c>
 8027792:	f81b 200c 	ldrb.w	r2, [fp, ip]
 8027796:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 802779a:	ea4f 6815 	mov.w	r8, r5, lsr #24
 802779e:	3001      	adds	r0, #1
 80277a0:	d423      	bmi.n	80277ea <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x302>
 80277a2:	4584      	cmp	ip, r0
 80277a4:	dd21      	ble.n	80277ea <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x302>
 80277a6:	f1ba 0f00 	cmp.w	sl, #0
 80277aa:	d027      	beq.n	80277fc <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x314>
 80277ac:	44dc      	add	ip, fp
 80277ae:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80277b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80277b6:	9304      	str	r3, [sp, #16]
 80277b8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80277bc:	e6bf      	b.n	802753e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x56>
 80277be:	2700      	movs	r7, #0
 80277c0:	463c      	mov	r4, r7
 80277c2:	e6b1      	b.n	8027528 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x40>
 80277c4:	f1ba 0f0f 	cmp.w	sl, #15
 80277c8:	d824      	bhi.n	8027814 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x32c>
 80277ca:	fa1f f38a 	uxth.w	r3, sl
 80277ce:	4632      	mov	r2, r6
 80277d0:	46b3      	mov	fp, r6
 80277d2:	46b2      	mov	sl, r6
 80277d4:	9604      	str	r6, [sp, #16]
 80277d6:	4635      	mov	r5, r6
 80277d8:	46b4      	mov	ip, r6
 80277da:	46b0      	mov	r8, r6
 80277dc:	e6c2      	b.n	8027564 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x7c>
 80277de:	5dd2      	ldrb	r2, [r2, r7]
 80277e0:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 80277e4:	ea4f 6e19 	mov.w	lr, r9, lsr #24
 80277e8:	e7bb      	b.n	8027762 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x27a>
 80277ea:	f04f 0c00 	mov.w	ip, #0
 80277ee:	f8cd c010 	str.w	ip, [sp, #16]
 80277f2:	e6a4      	b.n	802753e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x56>
 80277f4:	f04f 0800 	mov.w	r8, #0
 80277f8:	4645      	mov	r5, r8
 80277fa:	e7d0      	b.n	802779e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2b6>
 80277fc:	f8cd a010 	str.w	sl, [sp, #16]
 8027800:	46d4      	mov	ip, sl
 8027802:	e6a0      	b.n	8027546 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x5e>
 8027804:	4654      	mov	r4, sl
 8027806:	f8cd a010 	str.w	sl, [sp, #16]
 802780a:	4655      	mov	r5, sl
 802780c:	46d4      	mov	ip, sl
 802780e:	46d0      	mov	r8, sl
 8027810:	4657      	mov	r7, sl
 8027812:	e698      	b.n	8027546 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x5e>
 8027814:	4b03      	ldr	r3, [pc, #12]	; (8027824 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x33c>)
 8027816:	4a04      	ldr	r2, [pc, #16]	; (8027828 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x340>)
 8027818:	f44f 710f 	mov.w	r1, #572	; 0x23c
 802781c:	4803      	ldr	r0, [pc, #12]	; (802782c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x344>)
 802781e:	f000 fc27 	bl	8028070 <__assert_func>
 8027822:	bf00      	nop
 8027824:	0802b2dc 	.word	0x0802b2dc
 8027828:	0802b954 	.word	0x0802b954
 802782c:	0802b460 	.word	0x0802b460

08027830 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027834:	ed2d 8b08 	vpush	{d8-d11}
 8027838:	b0a9      	sub	sp, #164	; 0xa4
 802783a:	e9dd ba3b 	ldrd	fp, sl, [sp, #236]	; 0xec
 802783e:	eeb0 aa40 	vmov.f32	s20, s0
 8027842:	46d9      	mov	r9, fp
 8027844:	eef0 9a60 	vmov.f32	s19, s1
 8027848:	eeb0 9a41 	vmov.f32	s18, s2
 802784c:	eef0 8a62 	vmov.f32	s17, s5
 8027850:	eeb0 8a43 	vmov.f32	s16, s6
 8027854:	eef0 ba44 	vmov.f32	s23, s8
 8027858:	eeb0 ba64 	vmov.f32	s22, s9
 802785c:	eef0 aa45 	vmov.f32	s21, s10
 8027860:	46d3      	mov	fp, sl
 8027862:	9022      	str	r0, [sp, #136]	; 0x88
 8027864:	983f      	ldr	r0, [sp, #252]	; 0xfc
 8027866:	9115      	str	r1, [sp, #84]	; 0x54
 8027868:	9218      	str	r2, [sp, #96]	; 0x60
 802786a:	6841      	ldr	r1, [r0, #4]
 802786c:	9a40      	ldr	r2, [sp, #256]	; 0x100
 802786e:	469e      	mov	lr, r3
 8027870:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8027872:	6807      	ldr	r7, [r0, #0]
 8027874:	fb01 2303 	mla	r3, r1, r3, r2
 8027878:	9a42      	ldr	r2, [sp, #264]	; 0x108
 802787a:	9842      	ldr	r0, [sp, #264]	; 0x108
 802787c:	6852      	ldr	r2, [r2, #4]
 802787e:	f89d 110c 	ldrb.w	r1, [sp, #268]	; 0x10c
 8027882:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8027886:	6800      	ldr	r0, [r0, #0]
 8027888:	1d13      	adds	r3, r2, #4
 802788a:	930b      	str	r3, [sp, #44]	; 0x2c
 802788c:	b28b      	uxth	r3, r1
 802788e:	9123      	str	r1, [sp, #140]	; 0x8c
 8027890:	9011      	str	r0, [sp, #68]	; 0x44
 8027892:	9317      	str	r3, [sp, #92]	; 0x5c
 8027894:	9712      	str	r7, [sp, #72]	; 0x48
 8027896:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8027898:	2b00      	cmp	r3, #0
 802789a:	dc02      	bgt.n	80278a2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802789c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802789e:	2b00      	cmp	r3, #0
 80278a0:	dd68      	ble.n	8027974 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 80278a2:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80278a4:	f1be 0f00 	cmp.w	lr, #0
 80278a8:	e9d3 5702 	ldrd	r5, r7, [r3, #8]
 80278ac:	b228      	sxth	r0, r5
 80278ae:	b23e      	sxth	r6, r7
 80278b0:	f340 83a0 	ble.w	8027ff4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c4>
 80278b4:	e9dd 8a3d 	ldrd	r8, sl, [sp, #244]	; 0xf4
 80278b8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80278ba:	1e44      	subs	r4, r0, #1
 80278bc:	f106 3cff 	add.w	ip, r6, #4294967295
 80278c0:	9709      	str	r7, [sp, #36]	; 0x24
 80278c2:	ea5f 4329 	movs.w	r3, r9, asr #16
 80278c6:	ea4f 422b 	mov.w	r2, fp, asr #16
 80278ca:	d405      	bmi.n	80278d8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80278cc:	42a3      	cmp	r3, r4
 80278ce:	da03      	bge.n	80278d8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80278d0:	2a00      	cmp	r2, #0
 80278d2:	db01      	blt.n	80278d8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80278d4:	4562      	cmp	r2, ip
 80278d6:	db52      	blt.n	802797e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80278d8:	1c5f      	adds	r7, r3, #1
 80278da:	d406      	bmi.n	80278ea <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80278dc:	4287      	cmp	r7, r0
 80278de:	dc04      	bgt.n	80278ea <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80278e0:	1c57      	adds	r7, r2, #1
 80278e2:	d402      	bmi.n	80278ea <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80278e4:	42b7      	cmp	r7, r6
 80278e6:	f340 835f 	ble.w	8027fa8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>
 80278ea:	f1be 0e01 	subs.w	lr, lr, #1
 80278ee:	44c1      	add	r9, r8
 80278f0:	44d3      	add	fp, sl
 80278f2:	f101 0104 	add.w	r1, r1, #4
 80278f6:	d1e4      	bne.n	80278c2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80278f8:	9112      	str	r1, [sp, #72]	; 0x48
 80278fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80278fc:	2b00      	cmp	r3, #0
 80278fe:	dd39      	ble.n	8027974 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8027900:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027904:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027908:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802790c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027910:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027914:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8027918:	ee69 7a27 	vmul.f32	s15, s18, s15
 802791c:	ee76 6a68 	vsub.f32	s13, s12, s17
 8027920:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8027924:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027928:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802792c:	ee16 2a90 	vmov	r2, s13
 8027930:	3b01      	subs	r3, #1
 8027932:	9315      	str	r3, [sp, #84]	; 0x54
 8027934:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8027936:	fb92 f3f3 	sdiv	r3, r2, r3
 802793a:	ee17 2a10 	vmov	r2, s14
 802793e:	eeb0 7a48 	vmov.f32	s14, s16
 8027942:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8027946:	ee17 ba10 	vmov	fp, s14
 802794a:	eeb0 7a68 	vmov.f32	s14, s17
 802794e:	933d      	str	r3, [sp, #244]	; 0xf4
 8027950:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8027952:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8027956:	fb92 f3f3 	sdiv	r3, r2, r3
 802795a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802795c:	933e      	str	r3, [sp, #248]	; 0xf8
 802795e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8027960:	ee17 9a10 	vmov	r9, s14
 8027964:	eeb0 8a67 	vmov.f32	s16, s15
 8027968:	eef0 8a46 	vmov.f32	s17, s12
 802796c:	bf14      	ite	ne
 802796e:	469e      	movne	lr, r3
 8027970:	4696      	moveq	lr, r2
 8027972:	e790      	b.n	8027896 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8027974:	b029      	add	sp, #164	; 0xa4
 8027976:	ecbd 8b08 	vpop	{d8-d11}
 802797a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802797e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8027980:	9112      	str	r1, [sp, #72]	; 0x48
 8027982:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8027984:	f10e 32ff 	add.w	r2, lr, #4294967295
 8027988:	fb01 9302 	mla	r3, r1, r2, r9
 802798c:	141b      	asrs	r3, r3, #16
 802798e:	920a      	str	r2, [sp, #40]	; 0x28
 8027990:	f100 816a 	bmi.w	8027c68 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8027994:	42a3      	cmp	r3, r4
 8027996:	f280 8167 	bge.w	8027c68 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 802799a:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 802799c:	fb03 b302 	mla	r3, r3, r2, fp
 80279a0:	141b      	asrs	r3, r3, #16
 80279a2:	f100 8161 	bmi.w	8027c68 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 80279a6:	3e01      	subs	r6, #1
 80279a8:	42b3      	cmp	r3, r6
 80279aa:	f280 815d 	bge.w	8027c68 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 80279ae:	f1be 0f00 	cmp.w	lr, #0
 80279b2:	dda2      	ble.n	80278fa <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 80279b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80279b6:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
 80279ba:	3304      	adds	r3, #4
 80279bc:	9309      	str	r3, [sp, #36]	; 0x24
 80279be:	f8cd b0f0 	str.w	fp, [sp, #240]	; 0xf0
 80279c2:	4606      	mov	r6, r0
 80279c4:	465b      	mov	r3, fp
 80279c6:	e12a      	b.n	8027c1e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80279c8:	785f      	ldrb	r7, [r3, #1]
 80279ca:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 80279ce:	9713      	str	r7, [sp, #76]	; 0x4c
 80279d0:	0e3f      	lsrs	r7, r7, #24
 80279d2:	970c      	str	r7, [sp, #48]	; 0x30
 80279d4:	b16a      	cbz	r2, 80279f2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80279d6:	199f      	adds	r7, r3, r6
 80279d8:	5d9b      	ldrb	r3, [r3, r6]
 80279da:	462e      	mov	r6, r5
 80279dc:	787f      	ldrb	r7, [r7, #1]
 80279de:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80279e2:	f855 5027 	ldr.w	r5, [r5, r7, lsl #2]
 80279e6:	9314      	str	r3, [sp, #80]	; 0x50
 80279e8:	9516      	str	r5, [sp, #88]	; 0x58
 80279ea:	0e1b      	lsrs	r3, r3, #24
 80279ec:	0e2d      	lsrs	r5, r5, #24
 80279ee:	950e      	str	r5, [sp, #56]	; 0x38
 80279f0:	930d      	str	r3, [sp, #52]	; 0x34
 80279f2:	fa1f fc81 	uxth.w	ip, r1
 80279f6:	b292      	uxth	r2, r2
 80279f8:	fb0c f602 	mul.w	r6, ip, r2
 80279fc:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8027a00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027a02:	ebac 0706 	sub.w	r7, ip, r6
 8027a06:	b2bf      	uxth	r7, r7
 8027a08:	fb07 f103 	mul.w	r1, r7, r3
 8027a0c:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8027a10:	b292      	uxth	r2, r2
 8027a12:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8027a16:	1a9b      	subs	r3, r3, r2
 8027a18:	b29b      	uxth	r3, r3
 8027a1a:	fb03 1104 	mla	r1, r3, r4, r1
 8027a1e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027a20:	fb02 1105 	mla	r1, r2, r5, r1
 8027a24:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027a26:	fb06 1105 	mla	r1, r6, r5, r1
 8027a2a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8027a2e:	2900      	cmp	r1, #0
 8027a30:	f000 80e3 	beq.w	8027bfa <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8027a34:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8027a38:	2cff      	cmp	r4, #255	; 0xff
 8027a3a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027a3e:	950f      	str	r5, [sp, #60]	; 0x3c
 8027a40:	9010      	str	r0, [sp, #64]	; 0x40
 8027a42:	d01e      	beq.n	8027a82 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8027a44:	fb00 f004 	mul.w	r0, r0, r4
 8027a48:	fb05 fe04 	mul.w	lr, r5, r4
 8027a4c:	4604      	mov	r4, r0
 8027a4e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8027a52:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8027a56:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027a5a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8027a5e:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8027a62:	44e6      	add	lr, ip
 8027a64:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027a68:	0a24      	lsrs	r4, r4, #8
 8027a6a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027a6e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8027a72:	ea4e 0e04 	orr.w	lr, lr, r4
 8027a76:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8027a7a:	900f      	str	r0, [sp, #60]	; 0x3c
 8027a7c:	f40e 407f 	and.w	r0, lr, #65280	; 0xff00
 8027a80:	9010      	str	r0, [sp, #64]	; 0x40
 8027a82:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8027a84:	f000 1eff 	and.w	lr, r0, #16711935	; 0xff00ff
 8027a88:	f400 487f 	and.w	r8, r0, #65280	; 0xff00
 8027a8c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8027a8e:	28ff      	cmp	r0, #255	; 0xff
 8027a90:	d01c      	beq.n	8027acc <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8027a92:	fb0e fe00 	mul.w	lr, lr, r0
 8027a96:	fb08 f800 	mul.w	r8, r8, r0
 8027a9a:	ea4f 241e 	mov.w	r4, lr, lsr #8
 8027a9e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027aa2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8027aa6:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8027aaa:	44a6      	add	lr, r4
 8027aac:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8027ab0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027ab4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027ab8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027abc:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8027ac0:	ea4e 0808 	orr.w	r8, lr, r8
 8027ac4:	f008 1eff 	and.w	lr, r8, #16711935	; 0xff00ff
 8027ac8:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8027acc:	9814      	ldr	r0, [sp, #80]	; 0x50
 8027ace:	f000 1cff 	and.w	ip, r0, #16711935	; 0xff00ff
 8027ad2:	f400 4a7f 	and.w	sl, r0, #65280	; 0xff00
 8027ad6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8027ad8:	28ff      	cmp	r0, #255	; 0xff
 8027ada:	d01c      	beq.n	8027b16 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8027adc:	fb0c fc00 	mul.w	ip, ip, r0
 8027ae0:	fb0a fa00 	mul.w	sl, sl, r0
 8027ae4:	ea4f 241c 	mov.w	r4, ip, lsr #8
 8027ae8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027aec:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027af0:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8027af4:	44a4      	add	ip, r4
 8027af6:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8027afa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027afe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027b02:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027b06:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027b0a:	ea4c 0a0a 	orr.w	sl, ip, sl
 8027b0e:	f00a 1cff 	and.w	ip, sl, #16711935	; 0xff00ff
 8027b12:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027b16:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8027b18:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8027b1c:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8027b20:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8027b22:	2cff      	cmp	r4, #255	; 0xff
 8027b24:	d019      	beq.n	8027b5a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8027b26:	fb00 f004 	mul.w	r0, r0, r4
 8027b2a:	fb0b fb04 	mul.w	fp, fp, r4
 8027b2e:	0a04      	lsrs	r4, r0, #8
 8027b30:	f004 15ff 	and.w	r5, r4, #16711935	; 0xff00ff
 8027b34:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8027b38:	f50b 7480 	add.w	r4, fp, #256	; 0x100
 8027b3c:	eb04 241b 	add.w	r4, r4, fp, lsr #8
 8027b40:	4428      	add	r0, r5
 8027b42:	0a00      	lsrs	r0, r0, #8
 8027b44:	0a24      	lsrs	r4, r4, #8
 8027b46:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8027b4a:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8027b4e:	ea40 0b0b 	orr.w	fp, r0, fp
 8027b52:	f00b 10ff 	and.w	r0, fp, #16711935	; 0xff00ff
 8027b56:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8027b5a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8027b5c:	fb0e fe07 	mul.w	lr, lr, r7
 8027b60:	fb01 f105 	mul.w	r1, r1, r5
 8027b64:	1c4c      	adds	r4, r1, #1
 8027b66:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 8027b6a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8027b6e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8027b70:	fb08 f707 	mul.w	r7, r8, r7
 8027b74:	fb04 ee03 	mla	lr, r4, r3, lr
 8027b78:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8027b7a:	fb0c ee02 	mla	lr, ip, r2, lr
 8027b7e:	fb04 7703 	mla	r7, r4, r3, r7
 8027b82:	fb0a 7702 	mla	r7, sl, r2, r7
 8027b86:	fb00 ee06 	mla	lr, r0, r6, lr
 8027b8a:	fb0b 7706 	mla	r7, fp, r6, r7
 8027b8e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027b92:	0a3f      	lsrs	r7, r7, #8
 8027b94:	f407 437f 	and.w	r3, r7, #65280	; 0xff00
 8027b98:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027b9c:	ea4e 0303 	orr.w	r3, lr, r3
 8027ba0:	b2df      	uxtb	r7, r3
 8027ba2:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8027ba6:	0c1b      	lsrs	r3, r3, #16
 8027ba8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8027baa:	fb17 f705 	smulbb	r7, r7, r5
 8027bae:	fb16 f605 	smulbb	r6, r6, r5
 8027bb2:	fb13 f305 	smulbb	r3, r3, r5
 8027bb6:	f814 0c04 	ldrb.w	r0, [r4, #-4]
 8027bba:	f814 2c03 	ldrb.w	r2, [r4, #-3]
 8027bbe:	f814 cc02 	ldrb.w	ip, [r4, #-2]
 8027bc2:	b2c9      	uxtb	r1, r1
 8027bc4:	fb00 7001 	mla	r0, r0, r1, r7
 8027bc8:	fb02 6201 	mla	r2, r2, r1, r6
 8027bcc:	fb0c 3101 	mla	r1, ip, r1, r3
 8027bd0:	b280      	uxth	r0, r0
 8027bd2:	b292      	uxth	r2, r2
 8027bd4:	b289      	uxth	r1, r1
 8027bd6:	1c47      	adds	r7, r0, #1
 8027bd8:	1c56      	adds	r6, r2, #1
 8027bda:	1c4b      	adds	r3, r1, #1
 8027bdc:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8027be0:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8027be4:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8027be8:	1200      	asrs	r0, r0, #8
 8027bea:	1212      	asrs	r2, r2, #8
 8027bec:	1209      	asrs	r1, r1, #8
 8027bee:	f804 0c04 	strb.w	r0, [r4, #-4]
 8027bf2:	f804 2c03 	strb.w	r2, [r4, #-3]
 8027bf6:	f804 1c02 	strb.w	r1, [r4, #-2]
 8027bfa:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8027bfc:	993e      	ldr	r1, [sp, #248]	; 0xf8
 8027bfe:	4491      	add	r9, r2
 8027c00:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8027c02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027c04:	440a      	add	r2, r1
 8027c06:	923c      	str	r2, [sp, #240]	; 0xf0
 8027c08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027c0a:	3b01      	subs	r3, #1
 8027c0c:	930a      	str	r3, [sp, #40]	; 0x28
 8027c0e:	3204      	adds	r2, #4
 8027c10:	3301      	adds	r3, #1
 8027c12:	9209      	str	r2, [sp, #36]	; 0x24
 8027c14:	d021      	beq.n	8027c5a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8027c16:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8027c18:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 8027c1c:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8027c1e:	ea4f 4229 	mov.w	r2, r9, asr #16
 8027c22:	141b      	asrs	r3, r3, #16
 8027c24:	fb06 2303 	mla	r3, r6, r3, r2
 8027c28:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8027c2a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027c2c:	5ce2      	ldrb	r2, [r4, r3]
 8027c2e:	f3c9 3103 	ubfx	r1, r9, #12, #4
 8027c32:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 8027c36:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8027c38:	4423      	add	r3, r4
 8027c3a:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8027c3e:	0e04      	lsrs	r4, r0, #24
 8027c40:	2900      	cmp	r1, #0
 8027c42:	f47f aec1 	bne.w	80279c8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8027c46:	2a00      	cmp	r2, #0
 8027c48:	f43f aed3 	beq.w	80279f2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027c4c:	5d9b      	ldrb	r3, [r3, r6]
 8027c4e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8027c52:	9314      	str	r3, [sp, #80]	; 0x50
 8027c54:	0e1b      	lsrs	r3, r3, #24
 8027c56:	930d      	str	r3, [sp, #52]	; 0x34
 8027c58:	e6cb      	b.n	80279f2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027c5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8027c5c:	f8dd e064 	ldr.w	lr, [sp, #100]	; 0x64
 8027c60:	eb03 038e 	add.w	r3, r3, lr, lsl #2
 8027c64:	9312      	str	r3, [sp, #72]	; 0x48
 8027c66:	e648      	b.n	80278fa <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8027c68:	f1be 0f00 	cmp.w	lr, #0
 8027c6c:	f77f ae45 	ble.w	80278fa <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8027c70:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8027c74:	ea4f 4329 	mov.w	r3, r9, asr #16
 8027c78:	ea4f 422b 	mov.w	r2, fp, asr #16
 8027c7c:	2b00      	cmp	r3, #0
 8027c7e:	46be      	mov	lr, r7
 8027c80:	4629      	mov	r1, r5
 8027c82:	e9dd 653d 	ldrd	r6, r5, [sp, #244]	; 0xf4
 8027c86:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 8027c8a:	9c42      	ldr	r4, [sp, #264]	; 0x108
 8027c8c:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8027c90:	f3cb 3703 	ubfx	r7, fp, #12, #4
 8027c94:	f2c0 815d 	blt.w	8027f52 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x722>
 8027c98:	f101 3cff 	add.w	ip, r1, #4294967295
 8027c9c:	4563      	cmp	r3, ip
 8027c9e:	f280 8158 	bge.w	8027f52 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x722>
 8027ca2:	2a00      	cmp	r2, #0
 8027ca4:	f2c0 8155 	blt.w	8027f52 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x722>
 8027ca8:	f10e 3cff 	add.w	ip, lr, #4294967295
 8027cac:	4562      	cmp	r2, ip
 8027cae:	f280 8150 	bge.w	8027f52 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x722>
 8027cb2:	fa0f fc81 	sxth.w	ip, r1
 8027cb6:	fb02 330c 	mla	r3, r2, ip, r3
 8027cba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8027cbc:	5cd1      	ldrb	r1, [r2, r3]
 8027cbe:	18d3      	adds	r3, r2, r3
 8027cc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8027cc2:	469e      	mov	lr, r3
 8027cc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8027cc8:	0e19      	lsrs	r1, r3, #24
 8027cca:	9309      	str	r3, [sp, #36]	; 0x24
 8027ccc:	910f      	str	r1, [sp, #60]	; 0x3c
 8027cce:	2800      	cmp	r0, #0
 8027cd0:	f000 8171 	beq.w	8027fb6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x786>
 8027cd4:	4671      	mov	r1, lr
 8027cd6:	f89e e001 	ldrb.w	lr, [lr, #1]
 8027cda:	4613      	mov	r3, r2
 8027cdc:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8027ce0:	9224      	str	r2, [sp, #144]	; 0x90
 8027ce2:	0e12      	lsrs	r2, r2, #24
 8027ce4:	921a      	str	r2, [sp, #104]	; 0x68
 8027ce6:	2f00      	cmp	r7, #0
 8027ce8:	f040 8171 	bne.w	8027fce <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x79e>
 8027cec:	b280      	uxth	r0, r0
 8027cee:	b2bf      	uxth	r7, r7
 8027cf0:	fb00 f207 	mul.w	r2, r0, r7
 8027cf4:	ea4f 1c00 	mov.w	ip, r0, lsl #4
 8027cf8:	ebac 0002 	sub.w	r0, ip, r2
 8027cfc:	b280      	uxth	r0, r0
 8027cfe:	4603      	mov	r3, r0
 8027d00:	9010      	str	r0, [sp, #64]	; 0x40
 8027d02:	981a      	ldr	r0, [sp, #104]	; 0x68
 8027d04:	ebc2 1707 	rsb	r7, r2, r7, lsl #4
 8027d08:	fb03 f000 	mul.w	r0, r3, r0
 8027d0c:	fa1f fe87 	uxth.w	lr, r7
 8027d10:	f5cc 7780 	rsb	r7, ip, #256	; 0x100
 8027d14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027d16:	eba7 070e 	sub.w	r7, r7, lr
 8027d1a:	b2bf      	uxth	r7, r7
 8027d1c:	fb07 0003 	mla	r0, r7, r3, r0
 8027d20:	9719      	str	r7, [sp, #100]	; 0x64
 8027d22:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8027d24:	fb0e 0007 	mla	r0, lr, r7, r0
 8027d28:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8027d2a:	fb02 0007 	mla	r0, r2, r7, r0
 8027d2e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027d32:	900f      	str	r0, [sp, #60]	; 0x3c
 8027d34:	2800      	cmp	r0, #0
 8027d36:	f000 80f6 	beq.w	8027f26 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 8027d3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027d3c:	2bff      	cmp	r3, #255	; 0xff
 8027d3e:	f001 10ff 	and.w	r0, r1, #16711935	; 0xff00ff
 8027d42:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8027d46:	901d      	str	r0, [sp, #116]	; 0x74
 8027d48:	9109      	str	r1, [sp, #36]	; 0x24
 8027d4a:	d01b      	beq.n	8027d84 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x554>
 8027d4c:	fb01 f103 	mul.w	r1, r1, r3
 8027d50:	fb00 f003 	mul.w	r0, r0, r3
 8027d54:	460b      	mov	r3, r1
 8027d56:	0a01      	lsrs	r1, r0, #8
 8027d58:	f100 1701 	add.w	r7, r0, #65537	; 0x10001
 8027d5c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027d60:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8027d64:	4439      	add	r1, r7
 8027d66:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8027d6a:	0a09      	lsrs	r1, r1, #8
 8027d6c:	0a1b      	lsrs	r3, r3, #8
 8027d6e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027d72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027d76:	430b      	orrs	r3, r1
 8027d78:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 8027d7c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027d80:	911d      	str	r1, [sp, #116]	; 0x74
 8027d82:	9309      	str	r3, [sp, #36]	; 0x24
 8027d84:	9924      	ldr	r1, [sp, #144]	; 0x90
 8027d86:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8027d88:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8027d8c:	2fff      	cmp	r7, #255	; 0xff
 8027d8e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8027d92:	931e      	str	r3, [sp, #120]	; 0x78
 8027d94:	911f      	str	r1, [sp, #124]	; 0x7c
 8027d96:	d01c      	beq.n	8027dd2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a2>
 8027d98:	fb01 f107 	mul.w	r1, r1, r7
 8027d9c:	fb03 f307 	mul.w	r3, r3, r7
 8027da0:	460f      	mov	r7, r1
 8027da2:	0a19      	lsrs	r1, r3, #8
 8027da4:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 8027da8:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027dac:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8027db0:	4401      	add	r1, r0
 8027db2:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8027db6:	0a09      	lsrs	r1, r1, #8
 8027db8:	0a1b      	lsrs	r3, r3, #8
 8027dba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027dbe:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027dc2:	ea41 0003 	orr.w	r0, r1, r3
 8027dc6:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8027dca:	931e      	str	r3, [sp, #120]	; 0x78
 8027dcc:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8027dd0:	931f      	str	r3, [sp, #124]	; 0x7c
 8027dd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027dd4:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 8027dd8:	f403 4c7f 	and.w	ip, r3, #65280	; 0xff00
 8027ddc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8027dde:	9120      	str	r1, [sp, #128]	; 0x80
 8027de0:	2bff      	cmp	r3, #255	; 0xff
 8027de2:	d01b      	beq.n	8027e1c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8027de4:	fb01 f103 	mul.w	r1, r1, r3
 8027de8:	fb0c fc03 	mul.w	ip, ip, r3
 8027dec:	0a08      	lsrs	r0, r1, #8
 8027dee:	f50c 7380 	add.w	r3, ip, #256	; 0x100
 8027df2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8027df6:	f101 1101 	add.w	r1, r1, #65537	; 0x10001
 8027dfa:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8027dfe:	4401      	add	r1, r0
 8027e00:	0a09      	lsrs	r1, r1, #8
 8027e02:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027e06:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027e0a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027e0e:	ea41 0c0c 	orr.w	ip, r1, ip
 8027e12:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8027e16:	9320      	str	r3, [sp, #128]	; 0x80
 8027e18:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027e1c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8027e1e:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8027e22:	f400 477f 	and.w	r7, r0, #65280	; 0xff00
 8027e26:	981c      	ldr	r0, [sp, #112]	; 0x70
 8027e28:	9321      	str	r3, [sp, #132]	; 0x84
 8027e2a:	28ff      	cmp	r0, #255	; 0xff
 8027e2c:	d019      	beq.n	8027e62 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x632>
 8027e2e:	fb03 f300 	mul.w	r3, r3, r0
 8027e32:	fb07 f700 	mul.w	r7, r7, r0
 8027e36:	0a18      	lsrs	r0, r3, #8
 8027e38:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8027e3c:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8027e40:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8027e44:	4418      	add	r0, r3
 8027e46:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8027e4a:	0a00      	lsrs	r0, r0, #8
 8027e4c:	0a3f      	lsrs	r7, r7, #8
 8027e4e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8027e52:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027e56:	4307      	orrs	r7, r0
 8027e58:	f007 13ff 	and.w	r3, r7, #16711935	; 0xff00ff
 8027e5c:	9321      	str	r3, [sp, #132]	; 0x84
 8027e5e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027e62:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8027e64:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8027e66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8027e68:	fb01 f100 	mul.w	r1, r1, r0
 8027e6c:	4608      	mov	r0, r1
 8027e6e:	3101      	adds	r1, #1
 8027e70:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8027e74:	ea6f 2110 	mvn.w	r1, r0, lsr #8
 8027e78:	9810      	ldr	r0, [sp, #64]	; 0x40
 8027e7a:	9125      	str	r1, [sp, #148]	; 0x94
 8027e7c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8027e7e:	fb01 f100 	mul.w	r1, r1, r0
 8027e82:	910f      	str	r1, [sp, #60]	; 0x3c
 8027e84:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8027e86:	fb01 f100 	mul.w	r1, r1, r0
 8027e8a:	9110      	str	r1, [sp, #64]	; 0x40
 8027e8c:	991d      	ldr	r1, [sp, #116]	; 0x74
 8027e8e:	4608      	mov	r0, r1
 8027e90:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8027e92:	fb00 1103 	mla	r1, r0, r3, r1
 8027e96:	910f      	str	r1, [sp, #60]	; 0x3c
 8027e98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027e9a:	4608      	mov	r0, r1
 8027e9c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8027e9e:	fb00 1003 	mla	r0, r0, r3, r1
 8027ea2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027ea4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8027ea6:	fb0c 000e 	mla	r0, ip, lr, r0
 8027eaa:	fb03 110e 	mla	r1, r3, lr, r1
 8027eae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8027eb0:	f89a c002 	ldrb.w	ip, [sl, #2]
 8027eb4:	fb03 1102 	mla	r1, r3, r2, r1
 8027eb8:	fb07 0302 	mla	r3, r7, r2, r0
 8027ebc:	0a0a      	lsrs	r2, r1, #8
 8027ebe:	0a1b      	lsrs	r3, r3, #8
 8027ec0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027ec4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027ec8:	4313      	orrs	r3, r2
 8027eca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8027ecc:	b2df      	uxtb	r7, r3
 8027ece:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8027ed2:	0c1b      	lsrs	r3, r3, #16
 8027ed4:	fb17 f702 	smulbb	r7, r7, r2
 8027ed8:	fb10 f002 	smulbb	r0, r0, r2
 8027edc:	fb13 f302 	smulbb	r3, r3, r2
 8027ee0:	f89d e094 	ldrb.w	lr, [sp, #148]	; 0x94
 8027ee4:	f89a 1000 	ldrb.w	r1, [sl]
 8027ee8:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8027eec:	fb01 710e 	mla	r1, r1, lr, r7
 8027ef0:	fb02 020e 	mla	r2, r2, lr, r0
 8027ef4:	fb0c 330e 	mla	r3, ip, lr, r3
 8027ef8:	b297      	uxth	r7, r2
 8027efa:	fa1f fc81 	uxth.w	ip, r1
 8027efe:	b298      	uxth	r0, r3
 8027f00:	f10c 0101 	add.w	r1, ip, #1
 8027f04:	1c7a      	adds	r2, r7, #1
 8027f06:	1c43      	adds	r3, r0, #1
 8027f08:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 8027f0c:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8027f10:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8027f14:	1209      	asrs	r1, r1, #8
 8027f16:	1212      	asrs	r2, r2, #8
 8027f18:	121b      	asrs	r3, r3, #8
 8027f1a:	f88a 1000 	strb.w	r1, [sl]
 8027f1e:	f88a 2001 	strb.w	r2, [sl, #1]
 8027f22:	f88a 3002 	strb.w	r3, [sl, #2]
 8027f26:	f1b8 0f00 	cmp.w	r8, #0
 8027f2a:	f10a 0a04 	add.w	sl, sl, #4
 8027f2e:	44b1      	add	r9, r6
 8027f30:	44ab      	add	fp, r5
 8027f32:	dd30      	ble.n	8027f96 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x766>
 8027f34:	e9d4 1e02 	ldrd	r1, lr, [r4, #8]
 8027f38:	ea4f 4329 	mov.w	r3, r9, asr #16
 8027f3c:	2b00      	cmp	r3, #0
 8027f3e:	f108 38ff 	add.w	r8, r8, #4294967295
 8027f42:	ea4f 422b 	mov.w	r2, fp, asr #16
 8027f46:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8027f4a:	f3cb 3703 	ubfx	r7, fp, #12, #4
 8027f4e:	f6bf aea3 	bge.w	8027c98 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8027f52:	f113 0c01 	adds.w	ip, r3, #1
 8027f56:	d4e6      	bmi.n	8027f26 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 8027f58:	458c      	cmp	ip, r1
 8027f5a:	dce4      	bgt.n	8027f26 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 8027f5c:	f112 0c01 	adds.w	ip, r2, #1
 8027f60:	d4e1      	bmi.n	8027f26 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 8027f62:	45f4      	cmp	ip, lr
 8027f64:	dcdf      	bgt.n	8027f26 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 8027f66:	fa0f fe8e 	sxth.w	lr, lr
 8027f6a:	b209      	sxth	r1, r1
 8027f6c:	e9cd 1e00 	strd	r1, lr, [sp]
 8027f70:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8027f72:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8027f76:	e9cd 7105 	strd	r7, r1, [sp, #20]
 8027f7a:	9302      	str	r3, [sp, #8]
 8027f7c:	4651      	mov	r1, sl
 8027f7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027f80:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8027f82:	9822      	ldr	r0, [sp, #136]	; 0x88
 8027f84:	f7ff fab0 	bl	80274e8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh>
 8027f88:	f1b8 0f00 	cmp.w	r8, #0
 8027f8c:	f10a 0a04 	add.w	sl, sl, #4
 8027f90:	44b1      	add	r9, r6
 8027f92:	44ab      	add	fp, r5
 8027f94:	dcce      	bgt.n	8027f34 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8027f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027f98:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8027f9a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8027f9e:	3301      	adds	r3, #1
 8027fa0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8027fa4:	9312      	str	r3, [sp, #72]	; 0x48
 8027fa6:	e4a8      	b.n	80278fa <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8027fa8:	9112      	str	r1, [sp, #72]	; 0x48
 8027faa:	f10e 31ff 	add.w	r1, lr, #4294967295
 8027fae:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8027fb0:	910a      	str	r1, [sp, #40]	; 0x28
 8027fb2:	4688      	mov	r8, r1
 8027fb4:	e662      	b.n	8027c7c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8027fb6:	2f00      	cmp	r7, #0
 8027fb8:	f43f ae98 	beq.w	8027cec <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 8027fbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027fbe:	f81e 200c 	ldrb.w	r2, [lr, ip]
 8027fc2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8027fc6:	0e13      	lsrs	r3, r2, #24
 8027fc8:	9226      	str	r2, [sp, #152]	; 0x98
 8027fca:	931b      	str	r3, [sp, #108]	; 0x6c
 8027fcc:	e68e      	b.n	8027cec <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 8027fce:	eb01 0e0c 	add.w	lr, r1, ip
 8027fd2:	f89e e001 	ldrb.w	lr, [lr, #1]
 8027fd6:	f811 c00c 	ldrb.w	ip, [r1, ip]
 8027fda:	f853 202e 	ldr.w	r2, [r3, lr, lsl #2]
 8027fde:	4611      	mov	r1, r2
 8027fe0:	9227      	str	r2, [sp, #156]	; 0x9c
 8027fe2:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8027fe6:	4613      	mov	r3, r2
 8027fe8:	9226      	str	r2, [sp, #152]	; 0x98
 8027fea:	0e0a      	lsrs	r2, r1, #24
 8027fec:	921c      	str	r2, [sp, #112]	; 0x70
 8027fee:	0e1a      	lsrs	r2, r3, #24
 8027ff0:	921b      	str	r2, [sp, #108]	; 0x6c
 8027ff2:	e67b      	b.n	8027cec <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 8027ff4:	f43f ac81 	beq.w	80278fa <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8027ff8:	1e44      	subs	r4, r0, #1
 8027ffa:	e4c2      	b.n	8027982 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>

08027ffc <_GLOBAL__sub_I__ZN8touchgfx19GPU2DVectorRenderer5setupERKNS_6WidgetERKNS_4RectE>:
 8027ffc:	2200      	movs	r2, #0
 8027ffe:	4b02      	ldr	r3, [pc, #8]	; (8028008 <_GLOBAL__sub_I__ZN8touchgfx19GPU2DVectorRenderer5setupERKNS_6WidgetERKNS_4RectE+0xc>)
 8028000:	e9c3 2200 	strd	r2, r2, [r3]
 8028004:	4770      	bx	lr
 8028006:	bf00      	nop
 8028008:	20197be4 	.word	0x20197be4

0802800c <__aeabi_atexit>:
 802800c:	460b      	mov	r3, r1
 802800e:	4601      	mov	r1, r0
 8028010:	4618      	mov	r0, r3
 8028012:	f000 b851 	b.w	80280b8 <__cxa_atexit>

08028016 <_ZdlPvj>:
 8028016:	f000 b812 	b.w	802803e <_ZdlPv>

0802801a <__cxa_guard_acquire>:
 802801a:	6803      	ldr	r3, [r0, #0]
 802801c:	07db      	lsls	r3, r3, #31
 802801e:	d406      	bmi.n	802802e <__cxa_guard_acquire+0x14>
 8028020:	7843      	ldrb	r3, [r0, #1]
 8028022:	b103      	cbz	r3, 8028026 <__cxa_guard_acquire+0xc>
 8028024:	deff      	udf	#255	; 0xff
 8028026:	2301      	movs	r3, #1
 8028028:	7043      	strb	r3, [r0, #1]
 802802a:	4618      	mov	r0, r3
 802802c:	4770      	bx	lr
 802802e:	2000      	movs	r0, #0
 8028030:	4770      	bx	lr

08028032 <__cxa_guard_release>:
 8028032:	2301      	movs	r3, #1
 8028034:	6003      	str	r3, [r0, #0]
 8028036:	4770      	bx	lr

08028038 <__cxa_pure_virtual>:
 8028038:	b508      	push	{r3, lr}
 802803a:	f000 f80d 	bl	8028058 <_ZSt9terminatev>

0802803e <_ZdlPv>:
 802803e:	f000 b88d 	b.w	802815c <free>

08028042 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8028042:	b508      	push	{r3, lr}
 8028044:	4780      	blx	r0
 8028046:	f000 f80c 	bl	8028062 <abort>
	...

0802804c <_ZSt13get_terminatev>:
 802804c:	4b01      	ldr	r3, [pc, #4]	; (8028054 <_ZSt13get_terminatev+0x8>)
 802804e:	e8d3 0faf 	lda	r0, [r3]
 8028052:	4770      	bx	lr
 8028054:	200000c0 	.word	0x200000c0

08028058 <_ZSt9terminatev>:
 8028058:	b508      	push	{r3, lr}
 802805a:	f7ff fff7 	bl	802804c <_ZSt13get_terminatev>
 802805e:	f7ff fff0 	bl	8028042 <_ZN10__cxxabiv111__terminateEPFvvE>

08028062 <abort>:
 8028062:	2006      	movs	r0, #6
 8028064:	b508      	push	{r3, lr}
 8028066:	f000 fd5d 	bl	8028b24 <raise>
 802806a:	2001      	movs	r0, #1
 802806c:	f7d9 fcd4 	bl	8001a18 <_exit>

08028070 <__assert_func>:
 8028070:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8028072:	4614      	mov	r4, r2
 8028074:	461a      	mov	r2, r3
 8028076:	4b09      	ldr	r3, [pc, #36]	; (802809c <__assert_func+0x2c>)
 8028078:	4605      	mov	r5, r0
 802807a:	681b      	ldr	r3, [r3, #0]
 802807c:	68d8      	ldr	r0, [r3, #12]
 802807e:	b14c      	cbz	r4, 8028094 <__assert_func+0x24>
 8028080:	4b07      	ldr	r3, [pc, #28]	; (80280a0 <__assert_func+0x30>)
 8028082:	9100      	str	r1, [sp, #0]
 8028084:	4907      	ldr	r1, [pc, #28]	; (80280a4 <__assert_func+0x34>)
 8028086:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802808a:	462b      	mov	r3, r5
 802808c:	f000 f828 	bl	80280e0 <fiprintf>
 8028090:	f7ff ffe7 	bl	8028062 <abort>
 8028094:	4b04      	ldr	r3, [pc, #16]	; (80280a8 <__assert_func+0x38>)
 8028096:	461c      	mov	r4, r3
 8028098:	e7f3      	b.n	8028082 <__assert_func+0x12>
 802809a:	bf00      	nop
 802809c:	200000c4 	.word	0x200000c4
 80280a0:	0802c212 	.word	0x0802c212
 80280a4:	0802c21f 	.word	0x0802c21f
 80280a8:	0802c24d 	.word	0x0802c24d

080280ac <atexit>:
 80280ac:	2300      	movs	r3, #0
 80280ae:	4601      	mov	r1, r0
 80280b0:	461a      	mov	r2, r3
 80280b2:	4618      	mov	r0, r3
 80280b4:	f000 be12 	b.w	8028cdc <__register_exitproc>

080280b8 <__cxa_atexit>:
 80280b8:	b510      	push	{r4, lr}
 80280ba:	4c05      	ldr	r4, [pc, #20]	; (80280d0 <__cxa_atexit+0x18>)
 80280bc:	4613      	mov	r3, r2
 80280be:	b12c      	cbz	r4, 80280cc <__cxa_atexit+0x14>
 80280c0:	460a      	mov	r2, r1
 80280c2:	4601      	mov	r1, r0
 80280c4:	2002      	movs	r0, #2
 80280c6:	f000 fe09 	bl	8028cdc <__register_exitproc>
 80280ca:	bd10      	pop	{r4, pc}
 80280cc:	4620      	mov	r0, r4
 80280ce:	e7fc      	b.n	80280ca <__cxa_atexit+0x12>
 80280d0:	08028cdd 	.word	0x08028cdd

080280d4 <__errno>:
 80280d4:	4b01      	ldr	r3, [pc, #4]	; (80280dc <__errno+0x8>)
 80280d6:	6818      	ldr	r0, [r3, #0]
 80280d8:	4770      	bx	lr
 80280da:	bf00      	nop
 80280dc:	200000c4 	.word	0x200000c4

080280e0 <fiprintf>:
 80280e0:	b40e      	push	{r1, r2, r3}
 80280e2:	b503      	push	{r0, r1, lr}
 80280e4:	ab03      	add	r3, sp, #12
 80280e6:	4601      	mov	r1, r0
 80280e8:	4805      	ldr	r0, [pc, #20]	; (8028100 <fiprintf+0x20>)
 80280ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80280ee:	6800      	ldr	r0, [r0, #0]
 80280f0:	9301      	str	r3, [sp, #4]
 80280f2:	f000 f94d 	bl	8028390 <_vfiprintf_r>
 80280f6:	b002      	add	sp, #8
 80280f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80280fc:	b003      	add	sp, #12
 80280fe:	4770      	bx	lr
 8028100:	200000c4 	.word	0x200000c4

08028104 <__libc_init_array>:
 8028104:	b570      	push	{r4, r5, r6, lr}
 8028106:	4d0d      	ldr	r5, [pc, #52]	; (802813c <__libc_init_array+0x38>)
 8028108:	2600      	movs	r6, #0
 802810a:	4c0d      	ldr	r4, [pc, #52]	; (8028140 <__libc_init_array+0x3c>)
 802810c:	1b64      	subs	r4, r4, r5
 802810e:	10a4      	asrs	r4, r4, #2
 8028110:	42a6      	cmp	r6, r4
 8028112:	d109      	bne.n	8028128 <__libc_init_array+0x24>
 8028114:	4d0b      	ldr	r5, [pc, #44]	; (8028144 <__libc_init_array+0x40>)
 8028116:	2600      	movs	r6, #0
 8028118:	4c0b      	ldr	r4, [pc, #44]	; (8028148 <__libc_init_array+0x44>)
 802811a:	f001 f927 	bl	802936c <_init>
 802811e:	1b64      	subs	r4, r4, r5
 8028120:	10a4      	asrs	r4, r4, #2
 8028122:	42a6      	cmp	r6, r4
 8028124:	d105      	bne.n	8028132 <__libc_init_array+0x2e>
 8028126:	bd70      	pop	{r4, r5, r6, pc}
 8028128:	f855 3b04 	ldr.w	r3, [r5], #4
 802812c:	3601      	adds	r6, #1
 802812e:	4798      	blx	r3
 8028130:	e7ee      	b.n	8028110 <__libc_init_array+0xc>
 8028132:	f855 3b04 	ldr.w	r3, [r5], #4
 8028136:	3601      	adds	r6, #1
 8028138:	4798      	blx	r3
 802813a:	e7f2      	b.n	8028122 <__libc_init_array+0x1e>
 802813c:	0802c378 	.word	0x0802c378
 8028140:	0802c378 	.word	0x0802c378
 8028144:	0802c378 	.word	0x0802c378
 8028148:	0802c394 	.word	0x0802c394

0802814c <malloc>:
 802814c:	4b02      	ldr	r3, [pc, #8]	; (8028158 <malloc+0xc>)
 802814e:	4601      	mov	r1, r0
 8028150:	6818      	ldr	r0, [r3, #0]
 8028152:	f000 b87f 	b.w	8028254 <_malloc_r>
 8028156:	bf00      	nop
 8028158:	200000c4 	.word	0x200000c4

0802815c <free>:
 802815c:	4b02      	ldr	r3, [pc, #8]	; (8028168 <free+0xc>)
 802815e:	4601      	mov	r1, r0
 8028160:	6818      	ldr	r0, [r3, #0]
 8028162:	f000 b80b 	b.w	802817c <_free_r>
 8028166:	bf00      	nop
 8028168:	200000c4 	.word	0x200000c4

0802816c <memset>:
 802816c:	4402      	add	r2, r0
 802816e:	4603      	mov	r3, r0
 8028170:	4293      	cmp	r3, r2
 8028172:	d100      	bne.n	8028176 <memset+0xa>
 8028174:	4770      	bx	lr
 8028176:	f803 1b01 	strb.w	r1, [r3], #1
 802817a:	e7f9      	b.n	8028170 <memset+0x4>

0802817c <_free_r>:
 802817c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802817e:	2900      	cmp	r1, #0
 8028180:	d043      	beq.n	802820a <_free_r+0x8e>
 8028182:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8028186:	1f0c      	subs	r4, r1, #4
 8028188:	9001      	str	r0, [sp, #4]
 802818a:	2b00      	cmp	r3, #0
 802818c:	bfb8      	it	lt
 802818e:	18e4      	addlt	r4, r4, r3
 8028190:	f001 f834 	bl	80291fc <__malloc_lock>
 8028194:	4a1e      	ldr	r2, [pc, #120]	; (8028210 <_free_r+0x94>)
 8028196:	9801      	ldr	r0, [sp, #4]
 8028198:	6813      	ldr	r3, [r2, #0]
 802819a:	b933      	cbnz	r3, 80281aa <_free_r+0x2e>
 802819c:	6063      	str	r3, [r4, #4]
 802819e:	6014      	str	r4, [r2, #0]
 80281a0:	b003      	add	sp, #12
 80281a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80281a6:	f001 b82f 	b.w	8029208 <__malloc_unlock>
 80281aa:	42a3      	cmp	r3, r4
 80281ac:	d908      	bls.n	80281c0 <_free_r+0x44>
 80281ae:	6825      	ldr	r5, [r4, #0]
 80281b0:	1961      	adds	r1, r4, r5
 80281b2:	428b      	cmp	r3, r1
 80281b4:	bf01      	itttt	eq
 80281b6:	6819      	ldreq	r1, [r3, #0]
 80281b8:	685b      	ldreq	r3, [r3, #4]
 80281ba:	1949      	addeq	r1, r1, r5
 80281bc:	6021      	streq	r1, [r4, #0]
 80281be:	e7ed      	b.n	802819c <_free_r+0x20>
 80281c0:	461a      	mov	r2, r3
 80281c2:	685b      	ldr	r3, [r3, #4]
 80281c4:	b10b      	cbz	r3, 80281ca <_free_r+0x4e>
 80281c6:	42a3      	cmp	r3, r4
 80281c8:	d9fa      	bls.n	80281c0 <_free_r+0x44>
 80281ca:	6811      	ldr	r1, [r2, #0]
 80281cc:	1855      	adds	r5, r2, r1
 80281ce:	42a5      	cmp	r5, r4
 80281d0:	d10b      	bne.n	80281ea <_free_r+0x6e>
 80281d2:	6824      	ldr	r4, [r4, #0]
 80281d4:	4421      	add	r1, r4
 80281d6:	1854      	adds	r4, r2, r1
 80281d8:	6011      	str	r1, [r2, #0]
 80281da:	42a3      	cmp	r3, r4
 80281dc:	d1e0      	bne.n	80281a0 <_free_r+0x24>
 80281de:	681c      	ldr	r4, [r3, #0]
 80281e0:	685b      	ldr	r3, [r3, #4]
 80281e2:	4421      	add	r1, r4
 80281e4:	6053      	str	r3, [r2, #4]
 80281e6:	6011      	str	r1, [r2, #0]
 80281e8:	e7da      	b.n	80281a0 <_free_r+0x24>
 80281ea:	d902      	bls.n	80281f2 <_free_r+0x76>
 80281ec:	230c      	movs	r3, #12
 80281ee:	6003      	str	r3, [r0, #0]
 80281f0:	e7d6      	b.n	80281a0 <_free_r+0x24>
 80281f2:	6825      	ldr	r5, [r4, #0]
 80281f4:	1961      	adds	r1, r4, r5
 80281f6:	428b      	cmp	r3, r1
 80281f8:	bf02      	ittt	eq
 80281fa:	6819      	ldreq	r1, [r3, #0]
 80281fc:	685b      	ldreq	r3, [r3, #4]
 80281fe:	1949      	addeq	r1, r1, r5
 8028200:	6063      	str	r3, [r4, #4]
 8028202:	bf08      	it	eq
 8028204:	6021      	streq	r1, [r4, #0]
 8028206:	6054      	str	r4, [r2, #4]
 8028208:	e7ca      	b.n	80281a0 <_free_r+0x24>
 802820a:	b003      	add	sp, #12
 802820c:	bd30      	pop	{r4, r5, pc}
 802820e:	bf00      	nop
 8028210:	20197bec 	.word	0x20197bec

08028214 <sbrk_aligned>:
 8028214:	b570      	push	{r4, r5, r6, lr}
 8028216:	4e0e      	ldr	r6, [pc, #56]	; (8028250 <sbrk_aligned+0x3c>)
 8028218:	460c      	mov	r4, r1
 802821a:	4605      	mov	r5, r0
 802821c:	6831      	ldr	r1, [r6, #0]
 802821e:	b911      	cbnz	r1, 8028226 <sbrk_aligned+0x12>
 8028220:	f000 fc48 	bl	8028ab4 <_sbrk_r>
 8028224:	6030      	str	r0, [r6, #0]
 8028226:	4621      	mov	r1, r4
 8028228:	4628      	mov	r0, r5
 802822a:	f000 fc43 	bl	8028ab4 <_sbrk_r>
 802822e:	1c43      	adds	r3, r0, #1
 8028230:	d00a      	beq.n	8028248 <sbrk_aligned+0x34>
 8028232:	1cc4      	adds	r4, r0, #3
 8028234:	f024 0403 	bic.w	r4, r4, #3
 8028238:	42a0      	cmp	r0, r4
 802823a:	d007      	beq.n	802824c <sbrk_aligned+0x38>
 802823c:	1a21      	subs	r1, r4, r0
 802823e:	4628      	mov	r0, r5
 8028240:	f000 fc38 	bl	8028ab4 <_sbrk_r>
 8028244:	3001      	adds	r0, #1
 8028246:	d101      	bne.n	802824c <sbrk_aligned+0x38>
 8028248:	f04f 34ff 	mov.w	r4, #4294967295
 802824c:	4620      	mov	r0, r4
 802824e:	bd70      	pop	{r4, r5, r6, pc}
 8028250:	20197bf0 	.word	0x20197bf0

08028254 <_malloc_r>:
 8028254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028258:	1ccd      	adds	r5, r1, #3
 802825a:	4607      	mov	r7, r0
 802825c:	f025 0503 	bic.w	r5, r5, #3
 8028260:	3508      	adds	r5, #8
 8028262:	2d0c      	cmp	r5, #12
 8028264:	bf38      	it	cc
 8028266:	250c      	movcc	r5, #12
 8028268:	2d00      	cmp	r5, #0
 802826a:	db01      	blt.n	8028270 <_malloc_r+0x1c>
 802826c:	42a9      	cmp	r1, r5
 802826e:	d905      	bls.n	802827c <_malloc_r+0x28>
 8028270:	230c      	movs	r3, #12
 8028272:	2600      	movs	r6, #0
 8028274:	603b      	str	r3, [r7, #0]
 8028276:	4630      	mov	r0, r6
 8028278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802827c:	4e2e      	ldr	r6, [pc, #184]	; (8028338 <_malloc_r+0xe4>)
 802827e:	f000 ffbd 	bl	80291fc <__malloc_lock>
 8028282:	6833      	ldr	r3, [r6, #0]
 8028284:	461c      	mov	r4, r3
 8028286:	bb34      	cbnz	r4, 80282d6 <_malloc_r+0x82>
 8028288:	4629      	mov	r1, r5
 802828a:	4638      	mov	r0, r7
 802828c:	f7ff ffc2 	bl	8028214 <sbrk_aligned>
 8028290:	1c43      	adds	r3, r0, #1
 8028292:	4604      	mov	r4, r0
 8028294:	d14d      	bne.n	8028332 <_malloc_r+0xde>
 8028296:	6834      	ldr	r4, [r6, #0]
 8028298:	4626      	mov	r6, r4
 802829a:	2e00      	cmp	r6, #0
 802829c:	d140      	bne.n	8028320 <_malloc_r+0xcc>
 802829e:	6823      	ldr	r3, [r4, #0]
 80282a0:	4631      	mov	r1, r6
 80282a2:	4638      	mov	r0, r7
 80282a4:	eb04 0803 	add.w	r8, r4, r3
 80282a8:	f000 fc04 	bl	8028ab4 <_sbrk_r>
 80282ac:	4580      	cmp	r8, r0
 80282ae:	d13a      	bne.n	8028326 <_malloc_r+0xd2>
 80282b0:	6821      	ldr	r1, [r4, #0]
 80282b2:	3503      	adds	r5, #3
 80282b4:	4638      	mov	r0, r7
 80282b6:	1a6d      	subs	r5, r5, r1
 80282b8:	f025 0503 	bic.w	r5, r5, #3
 80282bc:	3508      	adds	r5, #8
 80282be:	2d0c      	cmp	r5, #12
 80282c0:	bf38      	it	cc
 80282c2:	250c      	movcc	r5, #12
 80282c4:	4629      	mov	r1, r5
 80282c6:	f7ff ffa5 	bl	8028214 <sbrk_aligned>
 80282ca:	3001      	adds	r0, #1
 80282cc:	d02b      	beq.n	8028326 <_malloc_r+0xd2>
 80282ce:	6823      	ldr	r3, [r4, #0]
 80282d0:	442b      	add	r3, r5
 80282d2:	6023      	str	r3, [r4, #0]
 80282d4:	e00e      	b.n	80282f4 <_malloc_r+0xa0>
 80282d6:	6822      	ldr	r2, [r4, #0]
 80282d8:	1b52      	subs	r2, r2, r5
 80282da:	d41e      	bmi.n	802831a <_malloc_r+0xc6>
 80282dc:	2a0b      	cmp	r2, #11
 80282de:	d916      	bls.n	802830e <_malloc_r+0xba>
 80282e0:	1961      	adds	r1, r4, r5
 80282e2:	42a3      	cmp	r3, r4
 80282e4:	6025      	str	r5, [r4, #0]
 80282e6:	bf18      	it	ne
 80282e8:	6059      	strne	r1, [r3, #4]
 80282ea:	6863      	ldr	r3, [r4, #4]
 80282ec:	bf08      	it	eq
 80282ee:	6031      	streq	r1, [r6, #0]
 80282f0:	5162      	str	r2, [r4, r5]
 80282f2:	604b      	str	r3, [r1, #4]
 80282f4:	f104 060b 	add.w	r6, r4, #11
 80282f8:	4638      	mov	r0, r7
 80282fa:	f000 ff85 	bl	8029208 <__malloc_unlock>
 80282fe:	1d23      	adds	r3, r4, #4
 8028300:	f026 0607 	bic.w	r6, r6, #7
 8028304:	1af2      	subs	r2, r6, r3
 8028306:	d0b6      	beq.n	8028276 <_malloc_r+0x22>
 8028308:	1b9b      	subs	r3, r3, r6
 802830a:	50a3      	str	r3, [r4, r2]
 802830c:	e7b3      	b.n	8028276 <_malloc_r+0x22>
 802830e:	6862      	ldr	r2, [r4, #4]
 8028310:	42a3      	cmp	r3, r4
 8028312:	bf0c      	ite	eq
 8028314:	6032      	streq	r2, [r6, #0]
 8028316:	605a      	strne	r2, [r3, #4]
 8028318:	e7ec      	b.n	80282f4 <_malloc_r+0xa0>
 802831a:	4623      	mov	r3, r4
 802831c:	6864      	ldr	r4, [r4, #4]
 802831e:	e7b2      	b.n	8028286 <_malloc_r+0x32>
 8028320:	4634      	mov	r4, r6
 8028322:	6876      	ldr	r6, [r6, #4]
 8028324:	e7b9      	b.n	802829a <_malloc_r+0x46>
 8028326:	230c      	movs	r3, #12
 8028328:	4638      	mov	r0, r7
 802832a:	603b      	str	r3, [r7, #0]
 802832c:	f000 ff6c 	bl	8029208 <__malloc_unlock>
 8028330:	e7a1      	b.n	8028276 <_malloc_r+0x22>
 8028332:	6025      	str	r5, [r4, #0]
 8028334:	e7de      	b.n	80282f4 <_malloc_r+0xa0>
 8028336:	bf00      	nop
 8028338:	20197bec 	.word	0x20197bec

0802833c <__sfputc_r>:
 802833c:	6893      	ldr	r3, [r2, #8]
 802833e:	3b01      	subs	r3, #1
 8028340:	2b00      	cmp	r3, #0
 8028342:	6093      	str	r3, [r2, #8]
 8028344:	b410      	push	{r4}
 8028346:	da08      	bge.n	802835a <__sfputc_r+0x1e>
 8028348:	6994      	ldr	r4, [r2, #24]
 802834a:	42a3      	cmp	r3, r4
 802834c:	db01      	blt.n	8028352 <__sfputc_r+0x16>
 802834e:	290a      	cmp	r1, #10
 8028350:	d103      	bne.n	802835a <__sfputc_r+0x1e>
 8028352:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028356:	f000 bc01 	b.w	8028b5c <__swbuf_r>
 802835a:	6813      	ldr	r3, [r2, #0]
 802835c:	1c58      	adds	r0, r3, #1
 802835e:	6010      	str	r0, [r2, #0]
 8028360:	4608      	mov	r0, r1
 8028362:	7019      	strb	r1, [r3, #0]
 8028364:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028368:	4770      	bx	lr

0802836a <__sfputs_r>:
 802836a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802836c:	4606      	mov	r6, r0
 802836e:	460f      	mov	r7, r1
 8028370:	4614      	mov	r4, r2
 8028372:	18d5      	adds	r5, r2, r3
 8028374:	42ac      	cmp	r4, r5
 8028376:	d101      	bne.n	802837c <__sfputs_r+0x12>
 8028378:	2000      	movs	r0, #0
 802837a:	e007      	b.n	802838c <__sfputs_r+0x22>
 802837c:	463a      	mov	r2, r7
 802837e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028382:	4630      	mov	r0, r6
 8028384:	f7ff ffda 	bl	802833c <__sfputc_r>
 8028388:	1c43      	adds	r3, r0, #1
 802838a:	d1f3      	bne.n	8028374 <__sfputs_r+0xa>
 802838c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08028390 <_vfiprintf_r>:
 8028390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028394:	460d      	mov	r5, r1
 8028396:	b09d      	sub	sp, #116	; 0x74
 8028398:	4614      	mov	r4, r2
 802839a:	4698      	mov	r8, r3
 802839c:	4606      	mov	r6, r0
 802839e:	b118      	cbz	r0, 80283a8 <_vfiprintf_r+0x18>
 80283a0:	6983      	ldr	r3, [r0, #24]
 80283a2:	b90b      	cbnz	r3, 80283a8 <_vfiprintf_r+0x18>
 80283a4:	f000 fe16 	bl	8028fd4 <__sinit>
 80283a8:	4b89      	ldr	r3, [pc, #548]	; (80285d0 <_vfiprintf_r+0x240>)
 80283aa:	429d      	cmp	r5, r3
 80283ac:	d11b      	bne.n	80283e6 <_vfiprintf_r+0x56>
 80283ae:	6875      	ldr	r5, [r6, #4]
 80283b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80283b2:	07d9      	lsls	r1, r3, #31
 80283b4:	d405      	bmi.n	80283c2 <_vfiprintf_r+0x32>
 80283b6:	89ab      	ldrh	r3, [r5, #12]
 80283b8:	059a      	lsls	r2, r3, #22
 80283ba:	d402      	bmi.n	80283c2 <_vfiprintf_r+0x32>
 80283bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80283be:	f000 fea7 	bl	8029110 <__retarget_lock_acquire_recursive>
 80283c2:	89ab      	ldrh	r3, [r5, #12]
 80283c4:	071b      	lsls	r3, r3, #28
 80283c6:	d501      	bpl.n	80283cc <_vfiprintf_r+0x3c>
 80283c8:	692b      	ldr	r3, [r5, #16]
 80283ca:	b9eb      	cbnz	r3, 8028408 <_vfiprintf_r+0x78>
 80283cc:	4629      	mov	r1, r5
 80283ce:	4630      	mov	r0, r6
 80283d0:	f000 fc16 	bl	8028c00 <__swsetup_r>
 80283d4:	b1c0      	cbz	r0, 8028408 <_vfiprintf_r+0x78>
 80283d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80283d8:	07dc      	lsls	r4, r3, #31
 80283da:	d50e      	bpl.n	80283fa <_vfiprintf_r+0x6a>
 80283dc:	f04f 30ff 	mov.w	r0, #4294967295
 80283e0:	b01d      	add	sp, #116	; 0x74
 80283e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80283e6:	4b7b      	ldr	r3, [pc, #492]	; (80285d4 <_vfiprintf_r+0x244>)
 80283e8:	429d      	cmp	r5, r3
 80283ea:	d101      	bne.n	80283f0 <_vfiprintf_r+0x60>
 80283ec:	68b5      	ldr	r5, [r6, #8]
 80283ee:	e7df      	b.n	80283b0 <_vfiprintf_r+0x20>
 80283f0:	4b79      	ldr	r3, [pc, #484]	; (80285d8 <_vfiprintf_r+0x248>)
 80283f2:	429d      	cmp	r5, r3
 80283f4:	bf08      	it	eq
 80283f6:	68f5      	ldreq	r5, [r6, #12]
 80283f8:	e7da      	b.n	80283b0 <_vfiprintf_r+0x20>
 80283fa:	89ab      	ldrh	r3, [r5, #12]
 80283fc:	0598      	lsls	r0, r3, #22
 80283fe:	d4ed      	bmi.n	80283dc <_vfiprintf_r+0x4c>
 8028400:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028402:	f000 fe87 	bl	8029114 <__retarget_lock_release_recursive>
 8028406:	e7e9      	b.n	80283dc <_vfiprintf_r+0x4c>
 8028408:	2300      	movs	r3, #0
 802840a:	f8cd 800c 	str.w	r8, [sp, #12]
 802840e:	f04f 0901 	mov.w	r9, #1
 8028412:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80285dc <_vfiprintf_r+0x24c>
 8028416:	9309      	str	r3, [sp, #36]	; 0x24
 8028418:	2320      	movs	r3, #32
 802841a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802841e:	2330      	movs	r3, #48	; 0x30
 8028420:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8028424:	4623      	mov	r3, r4
 8028426:	469a      	mov	sl, r3
 8028428:	f813 2b01 	ldrb.w	r2, [r3], #1
 802842c:	b10a      	cbz	r2, 8028432 <_vfiprintf_r+0xa2>
 802842e:	2a25      	cmp	r2, #37	; 0x25
 8028430:	d1f9      	bne.n	8028426 <_vfiprintf_r+0x96>
 8028432:	ebba 0b04 	subs.w	fp, sl, r4
 8028436:	d00b      	beq.n	8028450 <_vfiprintf_r+0xc0>
 8028438:	465b      	mov	r3, fp
 802843a:	4622      	mov	r2, r4
 802843c:	4629      	mov	r1, r5
 802843e:	4630      	mov	r0, r6
 8028440:	f7ff ff93 	bl	802836a <__sfputs_r>
 8028444:	3001      	adds	r0, #1
 8028446:	f000 80aa 	beq.w	802859e <_vfiprintf_r+0x20e>
 802844a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802844c:	445a      	add	r2, fp
 802844e:	9209      	str	r2, [sp, #36]	; 0x24
 8028450:	f89a 3000 	ldrb.w	r3, [sl]
 8028454:	2b00      	cmp	r3, #0
 8028456:	f000 80a2 	beq.w	802859e <_vfiprintf_r+0x20e>
 802845a:	2300      	movs	r3, #0
 802845c:	f04f 32ff 	mov.w	r2, #4294967295
 8028460:	f10a 0a01 	add.w	sl, sl, #1
 8028464:	9304      	str	r3, [sp, #16]
 8028466:	9307      	str	r3, [sp, #28]
 8028468:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802846c:	931a      	str	r3, [sp, #104]	; 0x68
 802846e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8028472:	4654      	mov	r4, sl
 8028474:	2205      	movs	r2, #5
 8028476:	4859      	ldr	r0, [pc, #356]	; (80285dc <_vfiprintf_r+0x24c>)
 8028478:	f814 1b01 	ldrb.w	r1, [r4], #1
 802847c:	f000 feb0 	bl	80291e0 <memchr>
 8028480:	9a04      	ldr	r2, [sp, #16]
 8028482:	b9d8      	cbnz	r0, 80284bc <_vfiprintf_r+0x12c>
 8028484:	06d1      	lsls	r1, r2, #27
 8028486:	bf44      	itt	mi
 8028488:	2320      	movmi	r3, #32
 802848a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802848e:	0713      	lsls	r3, r2, #28
 8028490:	bf44      	itt	mi
 8028492:	232b      	movmi	r3, #43	; 0x2b
 8028494:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028498:	f89a 3000 	ldrb.w	r3, [sl]
 802849c:	2b2a      	cmp	r3, #42	; 0x2a
 802849e:	d015      	beq.n	80284cc <_vfiprintf_r+0x13c>
 80284a0:	9a07      	ldr	r2, [sp, #28]
 80284a2:	4654      	mov	r4, sl
 80284a4:	2000      	movs	r0, #0
 80284a6:	f04f 0c0a 	mov.w	ip, #10
 80284aa:	4621      	mov	r1, r4
 80284ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80284b0:	3b30      	subs	r3, #48	; 0x30
 80284b2:	2b09      	cmp	r3, #9
 80284b4:	d94e      	bls.n	8028554 <_vfiprintf_r+0x1c4>
 80284b6:	b1b0      	cbz	r0, 80284e6 <_vfiprintf_r+0x156>
 80284b8:	9207      	str	r2, [sp, #28]
 80284ba:	e014      	b.n	80284e6 <_vfiprintf_r+0x156>
 80284bc:	eba0 0308 	sub.w	r3, r0, r8
 80284c0:	46a2      	mov	sl, r4
 80284c2:	fa09 f303 	lsl.w	r3, r9, r3
 80284c6:	4313      	orrs	r3, r2
 80284c8:	9304      	str	r3, [sp, #16]
 80284ca:	e7d2      	b.n	8028472 <_vfiprintf_r+0xe2>
 80284cc:	9b03      	ldr	r3, [sp, #12]
 80284ce:	1d19      	adds	r1, r3, #4
 80284d0:	681b      	ldr	r3, [r3, #0]
 80284d2:	2b00      	cmp	r3, #0
 80284d4:	9103      	str	r1, [sp, #12]
 80284d6:	bfbb      	ittet	lt
 80284d8:	425b      	neglt	r3, r3
 80284da:	f042 0202 	orrlt.w	r2, r2, #2
 80284de:	9307      	strge	r3, [sp, #28]
 80284e0:	9307      	strlt	r3, [sp, #28]
 80284e2:	bfb8      	it	lt
 80284e4:	9204      	strlt	r2, [sp, #16]
 80284e6:	7823      	ldrb	r3, [r4, #0]
 80284e8:	2b2e      	cmp	r3, #46	; 0x2e
 80284ea:	d10c      	bne.n	8028506 <_vfiprintf_r+0x176>
 80284ec:	7863      	ldrb	r3, [r4, #1]
 80284ee:	2b2a      	cmp	r3, #42	; 0x2a
 80284f0:	d135      	bne.n	802855e <_vfiprintf_r+0x1ce>
 80284f2:	9b03      	ldr	r3, [sp, #12]
 80284f4:	3402      	adds	r4, #2
 80284f6:	1d1a      	adds	r2, r3, #4
 80284f8:	681b      	ldr	r3, [r3, #0]
 80284fa:	2b00      	cmp	r3, #0
 80284fc:	9203      	str	r2, [sp, #12]
 80284fe:	bfb8      	it	lt
 8028500:	f04f 33ff 	movlt.w	r3, #4294967295
 8028504:	9305      	str	r3, [sp, #20]
 8028506:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80285ec <_vfiprintf_r+0x25c>
 802850a:	2203      	movs	r2, #3
 802850c:	7821      	ldrb	r1, [r4, #0]
 802850e:	4650      	mov	r0, sl
 8028510:	f000 fe66 	bl	80291e0 <memchr>
 8028514:	b140      	cbz	r0, 8028528 <_vfiprintf_r+0x198>
 8028516:	2340      	movs	r3, #64	; 0x40
 8028518:	eba0 000a 	sub.w	r0, r0, sl
 802851c:	3401      	adds	r4, #1
 802851e:	fa03 f000 	lsl.w	r0, r3, r0
 8028522:	9b04      	ldr	r3, [sp, #16]
 8028524:	4303      	orrs	r3, r0
 8028526:	9304      	str	r3, [sp, #16]
 8028528:	f814 1b01 	ldrb.w	r1, [r4], #1
 802852c:	2206      	movs	r2, #6
 802852e:	482c      	ldr	r0, [pc, #176]	; (80285e0 <_vfiprintf_r+0x250>)
 8028530:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8028534:	f000 fe54 	bl	80291e0 <memchr>
 8028538:	2800      	cmp	r0, #0
 802853a:	d03f      	beq.n	80285bc <_vfiprintf_r+0x22c>
 802853c:	4b29      	ldr	r3, [pc, #164]	; (80285e4 <_vfiprintf_r+0x254>)
 802853e:	bb1b      	cbnz	r3, 8028588 <_vfiprintf_r+0x1f8>
 8028540:	9b03      	ldr	r3, [sp, #12]
 8028542:	3307      	adds	r3, #7
 8028544:	f023 0307 	bic.w	r3, r3, #7
 8028548:	3308      	adds	r3, #8
 802854a:	9303      	str	r3, [sp, #12]
 802854c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802854e:	443b      	add	r3, r7
 8028550:	9309      	str	r3, [sp, #36]	; 0x24
 8028552:	e767      	b.n	8028424 <_vfiprintf_r+0x94>
 8028554:	fb0c 3202 	mla	r2, ip, r2, r3
 8028558:	460c      	mov	r4, r1
 802855a:	2001      	movs	r0, #1
 802855c:	e7a5      	b.n	80284aa <_vfiprintf_r+0x11a>
 802855e:	2300      	movs	r3, #0
 8028560:	3401      	adds	r4, #1
 8028562:	f04f 0c0a 	mov.w	ip, #10
 8028566:	4619      	mov	r1, r3
 8028568:	9305      	str	r3, [sp, #20]
 802856a:	4620      	mov	r0, r4
 802856c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028570:	3a30      	subs	r2, #48	; 0x30
 8028572:	2a09      	cmp	r2, #9
 8028574:	d903      	bls.n	802857e <_vfiprintf_r+0x1ee>
 8028576:	2b00      	cmp	r3, #0
 8028578:	d0c5      	beq.n	8028506 <_vfiprintf_r+0x176>
 802857a:	9105      	str	r1, [sp, #20]
 802857c:	e7c3      	b.n	8028506 <_vfiprintf_r+0x176>
 802857e:	fb0c 2101 	mla	r1, ip, r1, r2
 8028582:	4604      	mov	r4, r0
 8028584:	2301      	movs	r3, #1
 8028586:	e7f0      	b.n	802856a <_vfiprintf_r+0x1da>
 8028588:	ab03      	add	r3, sp, #12
 802858a:	462a      	mov	r2, r5
 802858c:	a904      	add	r1, sp, #16
 802858e:	4630      	mov	r0, r6
 8028590:	9300      	str	r3, [sp, #0]
 8028592:	4b15      	ldr	r3, [pc, #84]	; (80285e8 <_vfiprintf_r+0x258>)
 8028594:	e000      	b.n	8028598 <_vfiprintf_r+0x208>
 8028596:	bf00      	nop
 8028598:	4607      	mov	r7, r0
 802859a:	1c78      	adds	r0, r7, #1
 802859c:	d1d6      	bne.n	802854c <_vfiprintf_r+0x1bc>
 802859e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80285a0:	07d9      	lsls	r1, r3, #31
 80285a2:	d405      	bmi.n	80285b0 <_vfiprintf_r+0x220>
 80285a4:	89ab      	ldrh	r3, [r5, #12]
 80285a6:	059a      	lsls	r2, r3, #22
 80285a8:	d402      	bmi.n	80285b0 <_vfiprintf_r+0x220>
 80285aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80285ac:	f000 fdb2 	bl	8029114 <__retarget_lock_release_recursive>
 80285b0:	89ab      	ldrh	r3, [r5, #12]
 80285b2:	065b      	lsls	r3, r3, #25
 80285b4:	f53f af12 	bmi.w	80283dc <_vfiprintf_r+0x4c>
 80285b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80285ba:	e711      	b.n	80283e0 <_vfiprintf_r+0x50>
 80285bc:	ab03      	add	r3, sp, #12
 80285be:	462a      	mov	r2, r5
 80285c0:	a904      	add	r1, sp, #16
 80285c2:	4630      	mov	r0, r6
 80285c4:	9300      	str	r3, [sp, #0]
 80285c6:	4b08      	ldr	r3, [pc, #32]	; (80285e8 <_vfiprintf_r+0x258>)
 80285c8:	f000 f882 	bl	80286d0 <_printf_i>
 80285cc:	e7e4      	b.n	8028598 <_vfiprintf_r+0x208>
 80285ce:	bf00      	nop
 80285d0:	0802c320 	.word	0x0802c320
 80285d4:	0802c340 	.word	0x0802c340
 80285d8:	0802c300 	.word	0x0802c300
 80285dc:	0802c254 	.word	0x0802c254
 80285e0:	0802c25e 	.word	0x0802c25e
 80285e4:	00000000 	.word	0x00000000
 80285e8:	0802836b 	.word	0x0802836b
 80285ec:	0802c25a 	.word	0x0802c25a

080285f0 <_printf_common>:
 80285f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80285f4:	4616      	mov	r6, r2
 80285f6:	4699      	mov	r9, r3
 80285f8:	688a      	ldr	r2, [r1, #8]
 80285fa:	4607      	mov	r7, r0
 80285fc:	690b      	ldr	r3, [r1, #16]
 80285fe:	460c      	mov	r4, r1
 8028600:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8028604:	4293      	cmp	r3, r2
 8028606:	bfb8      	it	lt
 8028608:	4613      	movlt	r3, r2
 802860a:	6033      	str	r3, [r6, #0]
 802860c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8028610:	b10a      	cbz	r2, 8028616 <_printf_common+0x26>
 8028612:	3301      	adds	r3, #1
 8028614:	6033      	str	r3, [r6, #0]
 8028616:	6823      	ldr	r3, [r4, #0]
 8028618:	0699      	lsls	r1, r3, #26
 802861a:	bf42      	ittt	mi
 802861c:	6833      	ldrmi	r3, [r6, #0]
 802861e:	3302      	addmi	r3, #2
 8028620:	6033      	strmi	r3, [r6, #0]
 8028622:	6825      	ldr	r5, [r4, #0]
 8028624:	f015 0506 	ands.w	r5, r5, #6
 8028628:	d106      	bne.n	8028638 <_printf_common+0x48>
 802862a:	f104 0a19 	add.w	sl, r4, #25
 802862e:	68e3      	ldr	r3, [r4, #12]
 8028630:	6832      	ldr	r2, [r6, #0]
 8028632:	1a9b      	subs	r3, r3, r2
 8028634:	42ab      	cmp	r3, r5
 8028636:	dc29      	bgt.n	802868c <_printf_common+0x9c>
 8028638:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802863c:	1e13      	subs	r3, r2, #0
 802863e:	6822      	ldr	r2, [r4, #0]
 8028640:	bf18      	it	ne
 8028642:	2301      	movne	r3, #1
 8028644:	0692      	lsls	r2, r2, #26
 8028646:	d42e      	bmi.n	80286a6 <_printf_common+0xb6>
 8028648:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802864c:	4649      	mov	r1, r9
 802864e:	4638      	mov	r0, r7
 8028650:	47c0      	blx	r8
 8028652:	3001      	adds	r0, #1
 8028654:	d021      	beq.n	802869a <_printf_common+0xaa>
 8028656:	6823      	ldr	r3, [r4, #0]
 8028658:	341a      	adds	r4, #26
 802865a:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 802865e:	f003 0306 	and.w	r3, r3, #6
 8028662:	6832      	ldr	r2, [r6, #0]
 8028664:	2600      	movs	r6, #0
 8028666:	2b04      	cmp	r3, #4
 8028668:	f854 3c12 	ldr.w	r3, [r4, #-18]
 802866c:	bf08      	it	eq
 802866e:	1aad      	subeq	r5, r5, r2
 8028670:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8028674:	bf14      	ite	ne
 8028676:	2500      	movne	r5, #0
 8028678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802867c:	4293      	cmp	r3, r2
 802867e:	bfc4      	itt	gt
 8028680:	1a9b      	subgt	r3, r3, r2
 8028682:	18ed      	addgt	r5, r5, r3
 8028684:	42b5      	cmp	r5, r6
 8028686:	d11a      	bne.n	80286be <_printf_common+0xce>
 8028688:	2000      	movs	r0, #0
 802868a:	e008      	b.n	802869e <_printf_common+0xae>
 802868c:	2301      	movs	r3, #1
 802868e:	4652      	mov	r2, sl
 8028690:	4649      	mov	r1, r9
 8028692:	4638      	mov	r0, r7
 8028694:	47c0      	blx	r8
 8028696:	3001      	adds	r0, #1
 8028698:	d103      	bne.n	80286a2 <_printf_common+0xb2>
 802869a:	f04f 30ff 	mov.w	r0, #4294967295
 802869e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80286a2:	3501      	adds	r5, #1
 80286a4:	e7c3      	b.n	802862e <_printf_common+0x3e>
 80286a6:	18e1      	adds	r1, r4, r3
 80286a8:	1c5a      	adds	r2, r3, #1
 80286aa:	2030      	movs	r0, #48	; 0x30
 80286ac:	3302      	adds	r3, #2
 80286ae:	4422      	add	r2, r4
 80286b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80286b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80286b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80286bc:	e7c4      	b.n	8028648 <_printf_common+0x58>
 80286be:	2301      	movs	r3, #1
 80286c0:	4622      	mov	r2, r4
 80286c2:	4649      	mov	r1, r9
 80286c4:	4638      	mov	r0, r7
 80286c6:	47c0      	blx	r8
 80286c8:	3001      	adds	r0, #1
 80286ca:	d0e6      	beq.n	802869a <_printf_common+0xaa>
 80286cc:	3601      	adds	r6, #1
 80286ce:	e7d9      	b.n	8028684 <_printf_common+0x94>

080286d0 <_printf_i>:
 80286d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80286d4:	7e0f      	ldrb	r7, [r1, #24]
 80286d6:	4691      	mov	r9, r2
 80286d8:	4680      	mov	r8, r0
 80286da:	460c      	mov	r4, r1
 80286dc:	2f78      	cmp	r7, #120	; 0x78
 80286de:	469a      	mov	sl, r3
 80286e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80286e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80286e6:	d807      	bhi.n	80286f8 <_printf_i+0x28>
 80286e8:	2f62      	cmp	r7, #98	; 0x62
 80286ea:	d80a      	bhi.n	8028702 <_printf_i+0x32>
 80286ec:	2f00      	cmp	r7, #0
 80286ee:	f000 80d8 	beq.w	80288a2 <_printf_i+0x1d2>
 80286f2:	2f58      	cmp	r7, #88	; 0x58
 80286f4:	f000 80a3 	beq.w	802883e <_printf_i+0x16e>
 80286f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80286fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8028700:	e03a      	b.n	8028778 <_printf_i+0xa8>
 8028702:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8028706:	2b15      	cmp	r3, #21
 8028708:	d8f6      	bhi.n	80286f8 <_printf_i+0x28>
 802870a:	a101      	add	r1, pc, #4	; (adr r1, 8028710 <_printf_i+0x40>)
 802870c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8028710:	08028769 	.word	0x08028769
 8028714:	0802877d 	.word	0x0802877d
 8028718:	080286f9 	.word	0x080286f9
 802871c:	080286f9 	.word	0x080286f9
 8028720:	080286f9 	.word	0x080286f9
 8028724:	080286f9 	.word	0x080286f9
 8028728:	0802877d 	.word	0x0802877d
 802872c:	080286f9 	.word	0x080286f9
 8028730:	080286f9 	.word	0x080286f9
 8028734:	080286f9 	.word	0x080286f9
 8028738:	080286f9 	.word	0x080286f9
 802873c:	08028889 	.word	0x08028889
 8028740:	080287ad 	.word	0x080287ad
 8028744:	0802886b 	.word	0x0802886b
 8028748:	080286f9 	.word	0x080286f9
 802874c:	080286f9 	.word	0x080286f9
 8028750:	080288ab 	.word	0x080288ab
 8028754:	080286f9 	.word	0x080286f9
 8028758:	080287ad 	.word	0x080287ad
 802875c:	080286f9 	.word	0x080286f9
 8028760:	080286f9 	.word	0x080286f9
 8028764:	08028873 	.word	0x08028873
 8028768:	682b      	ldr	r3, [r5, #0]
 802876a:	1d1a      	adds	r2, r3, #4
 802876c:	681b      	ldr	r3, [r3, #0]
 802876e:	602a      	str	r2, [r5, #0]
 8028770:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8028774:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8028778:	2301      	movs	r3, #1
 802877a:	e0a3      	b.n	80288c4 <_printf_i+0x1f4>
 802877c:	6820      	ldr	r0, [r4, #0]
 802877e:	6829      	ldr	r1, [r5, #0]
 8028780:	0606      	lsls	r6, r0, #24
 8028782:	f101 0304 	add.w	r3, r1, #4
 8028786:	d50a      	bpl.n	802879e <_printf_i+0xce>
 8028788:	680e      	ldr	r6, [r1, #0]
 802878a:	602b      	str	r3, [r5, #0]
 802878c:	2e00      	cmp	r6, #0
 802878e:	da03      	bge.n	8028798 <_printf_i+0xc8>
 8028790:	232d      	movs	r3, #45	; 0x2d
 8028792:	4276      	negs	r6, r6
 8028794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8028798:	485e      	ldr	r0, [pc, #376]	; (8028914 <_printf_i+0x244>)
 802879a:	230a      	movs	r3, #10
 802879c:	e019      	b.n	80287d2 <_printf_i+0x102>
 802879e:	680e      	ldr	r6, [r1, #0]
 80287a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80287a4:	602b      	str	r3, [r5, #0]
 80287a6:	bf18      	it	ne
 80287a8:	b236      	sxthne	r6, r6
 80287aa:	e7ef      	b.n	802878c <_printf_i+0xbc>
 80287ac:	682b      	ldr	r3, [r5, #0]
 80287ae:	6820      	ldr	r0, [r4, #0]
 80287b0:	1d19      	adds	r1, r3, #4
 80287b2:	6029      	str	r1, [r5, #0]
 80287b4:	0601      	lsls	r1, r0, #24
 80287b6:	d501      	bpl.n	80287bc <_printf_i+0xec>
 80287b8:	681e      	ldr	r6, [r3, #0]
 80287ba:	e002      	b.n	80287c2 <_printf_i+0xf2>
 80287bc:	0646      	lsls	r6, r0, #25
 80287be:	d5fb      	bpl.n	80287b8 <_printf_i+0xe8>
 80287c0:	881e      	ldrh	r6, [r3, #0]
 80287c2:	2f6f      	cmp	r7, #111	; 0x6f
 80287c4:	4853      	ldr	r0, [pc, #332]	; (8028914 <_printf_i+0x244>)
 80287c6:	bf0c      	ite	eq
 80287c8:	2308      	moveq	r3, #8
 80287ca:	230a      	movne	r3, #10
 80287cc:	2100      	movs	r1, #0
 80287ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80287d2:	6865      	ldr	r5, [r4, #4]
 80287d4:	2d00      	cmp	r5, #0
 80287d6:	60a5      	str	r5, [r4, #8]
 80287d8:	bfa2      	ittt	ge
 80287da:	6821      	ldrge	r1, [r4, #0]
 80287dc:	f021 0104 	bicge.w	r1, r1, #4
 80287e0:	6021      	strge	r1, [r4, #0]
 80287e2:	b90e      	cbnz	r6, 80287e8 <_printf_i+0x118>
 80287e4:	2d00      	cmp	r5, #0
 80287e6:	d04d      	beq.n	8028884 <_printf_i+0x1b4>
 80287e8:	4615      	mov	r5, r2
 80287ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80287ee:	fb03 6711 	mls	r7, r3, r1, r6
 80287f2:	5dc7      	ldrb	r7, [r0, r7]
 80287f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80287f8:	4637      	mov	r7, r6
 80287fa:	460e      	mov	r6, r1
 80287fc:	42bb      	cmp	r3, r7
 80287fe:	d9f4      	bls.n	80287ea <_printf_i+0x11a>
 8028800:	2b08      	cmp	r3, #8
 8028802:	d10b      	bne.n	802881c <_printf_i+0x14c>
 8028804:	6823      	ldr	r3, [r4, #0]
 8028806:	07de      	lsls	r6, r3, #31
 8028808:	d508      	bpl.n	802881c <_printf_i+0x14c>
 802880a:	6923      	ldr	r3, [r4, #16]
 802880c:	6861      	ldr	r1, [r4, #4]
 802880e:	4299      	cmp	r1, r3
 8028810:	bfde      	ittt	le
 8028812:	2330      	movle	r3, #48	; 0x30
 8028814:	f805 3c01 	strble.w	r3, [r5, #-1]
 8028818:	f105 35ff 	addle.w	r5, r5, #4294967295
 802881c:	1b52      	subs	r2, r2, r5
 802881e:	6122      	str	r2, [r4, #16]
 8028820:	464b      	mov	r3, r9
 8028822:	aa03      	add	r2, sp, #12
 8028824:	4621      	mov	r1, r4
 8028826:	4640      	mov	r0, r8
 8028828:	f8cd a000 	str.w	sl, [sp]
 802882c:	f7ff fee0 	bl	80285f0 <_printf_common>
 8028830:	3001      	adds	r0, #1
 8028832:	d14c      	bne.n	80288ce <_printf_i+0x1fe>
 8028834:	f04f 30ff 	mov.w	r0, #4294967295
 8028838:	b004      	add	sp, #16
 802883a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802883e:	4835      	ldr	r0, [pc, #212]	; (8028914 <_printf_i+0x244>)
 8028840:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8028844:	6829      	ldr	r1, [r5, #0]
 8028846:	6823      	ldr	r3, [r4, #0]
 8028848:	f851 6b04 	ldr.w	r6, [r1], #4
 802884c:	6029      	str	r1, [r5, #0]
 802884e:	061d      	lsls	r5, r3, #24
 8028850:	d514      	bpl.n	802887c <_printf_i+0x1ac>
 8028852:	07df      	lsls	r7, r3, #31
 8028854:	bf44      	itt	mi
 8028856:	f043 0320 	orrmi.w	r3, r3, #32
 802885a:	6023      	strmi	r3, [r4, #0]
 802885c:	b91e      	cbnz	r6, 8028866 <_printf_i+0x196>
 802885e:	6823      	ldr	r3, [r4, #0]
 8028860:	f023 0320 	bic.w	r3, r3, #32
 8028864:	6023      	str	r3, [r4, #0]
 8028866:	2310      	movs	r3, #16
 8028868:	e7b0      	b.n	80287cc <_printf_i+0xfc>
 802886a:	6823      	ldr	r3, [r4, #0]
 802886c:	f043 0320 	orr.w	r3, r3, #32
 8028870:	6023      	str	r3, [r4, #0]
 8028872:	2378      	movs	r3, #120	; 0x78
 8028874:	4828      	ldr	r0, [pc, #160]	; (8028918 <_printf_i+0x248>)
 8028876:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802887a:	e7e3      	b.n	8028844 <_printf_i+0x174>
 802887c:	0659      	lsls	r1, r3, #25
 802887e:	bf48      	it	mi
 8028880:	b2b6      	uxthmi	r6, r6
 8028882:	e7e6      	b.n	8028852 <_printf_i+0x182>
 8028884:	4615      	mov	r5, r2
 8028886:	e7bb      	b.n	8028800 <_printf_i+0x130>
 8028888:	682b      	ldr	r3, [r5, #0]
 802888a:	6826      	ldr	r6, [r4, #0]
 802888c:	1d18      	adds	r0, r3, #4
 802888e:	6961      	ldr	r1, [r4, #20]
 8028890:	6028      	str	r0, [r5, #0]
 8028892:	0635      	lsls	r5, r6, #24
 8028894:	681b      	ldr	r3, [r3, #0]
 8028896:	d501      	bpl.n	802889c <_printf_i+0x1cc>
 8028898:	6019      	str	r1, [r3, #0]
 802889a:	e002      	b.n	80288a2 <_printf_i+0x1d2>
 802889c:	0670      	lsls	r0, r6, #25
 802889e:	d5fb      	bpl.n	8028898 <_printf_i+0x1c8>
 80288a0:	8019      	strh	r1, [r3, #0]
 80288a2:	2300      	movs	r3, #0
 80288a4:	4615      	mov	r5, r2
 80288a6:	6123      	str	r3, [r4, #16]
 80288a8:	e7ba      	b.n	8028820 <_printf_i+0x150>
 80288aa:	682b      	ldr	r3, [r5, #0]
 80288ac:	2100      	movs	r1, #0
 80288ae:	1d1a      	adds	r2, r3, #4
 80288b0:	602a      	str	r2, [r5, #0]
 80288b2:	681d      	ldr	r5, [r3, #0]
 80288b4:	6862      	ldr	r2, [r4, #4]
 80288b6:	4628      	mov	r0, r5
 80288b8:	f000 fc92 	bl	80291e0 <memchr>
 80288bc:	b108      	cbz	r0, 80288c2 <_printf_i+0x1f2>
 80288be:	1b40      	subs	r0, r0, r5
 80288c0:	6060      	str	r0, [r4, #4]
 80288c2:	6863      	ldr	r3, [r4, #4]
 80288c4:	6123      	str	r3, [r4, #16]
 80288c6:	2300      	movs	r3, #0
 80288c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80288cc:	e7a8      	b.n	8028820 <_printf_i+0x150>
 80288ce:	6923      	ldr	r3, [r4, #16]
 80288d0:	462a      	mov	r2, r5
 80288d2:	4649      	mov	r1, r9
 80288d4:	4640      	mov	r0, r8
 80288d6:	47d0      	blx	sl
 80288d8:	3001      	adds	r0, #1
 80288da:	d0ab      	beq.n	8028834 <_printf_i+0x164>
 80288dc:	6823      	ldr	r3, [r4, #0]
 80288de:	079b      	lsls	r3, r3, #30
 80288e0:	d413      	bmi.n	802890a <_printf_i+0x23a>
 80288e2:	68e0      	ldr	r0, [r4, #12]
 80288e4:	9b03      	ldr	r3, [sp, #12]
 80288e6:	4298      	cmp	r0, r3
 80288e8:	bfb8      	it	lt
 80288ea:	4618      	movlt	r0, r3
 80288ec:	e7a4      	b.n	8028838 <_printf_i+0x168>
 80288ee:	2301      	movs	r3, #1
 80288f0:	4632      	mov	r2, r6
 80288f2:	4649      	mov	r1, r9
 80288f4:	4640      	mov	r0, r8
 80288f6:	47d0      	blx	sl
 80288f8:	3001      	adds	r0, #1
 80288fa:	d09b      	beq.n	8028834 <_printf_i+0x164>
 80288fc:	3501      	adds	r5, #1
 80288fe:	68e3      	ldr	r3, [r4, #12]
 8028900:	9903      	ldr	r1, [sp, #12]
 8028902:	1a5b      	subs	r3, r3, r1
 8028904:	42ab      	cmp	r3, r5
 8028906:	dcf2      	bgt.n	80288ee <_printf_i+0x21e>
 8028908:	e7eb      	b.n	80288e2 <_printf_i+0x212>
 802890a:	2500      	movs	r5, #0
 802890c:	f104 0619 	add.w	r6, r4, #25
 8028910:	e7f5      	b.n	80288fe <_printf_i+0x22e>
 8028912:	bf00      	nop
 8028914:	0802c265 	.word	0x0802c265
 8028918:	0802c276 	.word	0x0802c276

0802891c <iprintf>:
 802891c:	b40f      	push	{r0, r1, r2, r3}
 802891e:	4b0a      	ldr	r3, [pc, #40]	; (8028948 <iprintf+0x2c>)
 8028920:	b513      	push	{r0, r1, r4, lr}
 8028922:	681c      	ldr	r4, [r3, #0]
 8028924:	b124      	cbz	r4, 8028930 <iprintf+0x14>
 8028926:	69a3      	ldr	r3, [r4, #24]
 8028928:	b913      	cbnz	r3, 8028930 <iprintf+0x14>
 802892a:	4620      	mov	r0, r4
 802892c:	f000 fb52 	bl	8028fd4 <__sinit>
 8028930:	ab05      	add	r3, sp, #20
 8028932:	9a04      	ldr	r2, [sp, #16]
 8028934:	68a1      	ldr	r1, [r4, #8]
 8028936:	4620      	mov	r0, r4
 8028938:	9301      	str	r3, [sp, #4]
 802893a:	f7ff fd29 	bl	8028390 <_vfiprintf_r>
 802893e:	b002      	add	sp, #8
 8028940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8028944:	b004      	add	sp, #16
 8028946:	4770      	bx	lr
 8028948:	200000c4 	.word	0x200000c4

0802894c <_puts_r>:
 802894c:	b570      	push	{r4, r5, r6, lr}
 802894e:	460e      	mov	r6, r1
 8028950:	4605      	mov	r5, r0
 8028952:	b118      	cbz	r0, 802895c <_puts_r+0x10>
 8028954:	6983      	ldr	r3, [r0, #24]
 8028956:	b90b      	cbnz	r3, 802895c <_puts_r+0x10>
 8028958:	f000 fb3c 	bl	8028fd4 <__sinit>
 802895c:	69ab      	ldr	r3, [r5, #24]
 802895e:	68ac      	ldr	r4, [r5, #8]
 8028960:	b913      	cbnz	r3, 8028968 <_puts_r+0x1c>
 8028962:	4628      	mov	r0, r5
 8028964:	f000 fb36 	bl	8028fd4 <__sinit>
 8028968:	4b2c      	ldr	r3, [pc, #176]	; (8028a1c <_puts_r+0xd0>)
 802896a:	429c      	cmp	r4, r3
 802896c:	d120      	bne.n	80289b0 <_puts_r+0x64>
 802896e:	686c      	ldr	r4, [r5, #4]
 8028970:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8028972:	07db      	lsls	r3, r3, #31
 8028974:	d405      	bmi.n	8028982 <_puts_r+0x36>
 8028976:	89a3      	ldrh	r3, [r4, #12]
 8028978:	0598      	lsls	r0, r3, #22
 802897a:	d402      	bmi.n	8028982 <_puts_r+0x36>
 802897c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802897e:	f000 fbc7 	bl	8029110 <__retarget_lock_acquire_recursive>
 8028982:	89a3      	ldrh	r3, [r4, #12]
 8028984:	0719      	lsls	r1, r3, #28
 8028986:	d51d      	bpl.n	80289c4 <_puts_r+0x78>
 8028988:	6923      	ldr	r3, [r4, #16]
 802898a:	b1db      	cbz	r3, 80289c4 <_puts_r+0x78>
 802898c:	3e01      	subs	r6, #1
 802898e:	68a3      	ldr	r3, [r4, #8]
 8028990:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8028994:	3b01      	subs	r3, #1
 8028996:	60a3      	str	r3, [r4, #8]
 8028998:	bb39      	cbnz	r1, 80289ea <_puts_r+0x9e>
 802899a:	2b00      	cmp	r3, #0
 802899c:	da38      	bge.n	8028a10 <_puts_r+0xc4>
 802899e:	4622      	mov	r2, r4
 80289a0:	210a      	movs	r1, #10
 80289a2:	4628      	mov	r0, r5
 80289a4:	f000 f8da 	bl	8028b5c <__swbuf_r>
 80289a8:	3001      	adds	r0, #1
 80289aa:	d011      	beq.n	80289d0 <_puts_r+0x84>
 80289ac:	250a      	movs	r5, #10
 80289ae:	e011      	b.n	80289d4 <_puts_r+0x88>
 80289b0:	4b1b      	ldr	r3, [pc, #108]	; (8028a20 <_puts_r+0xd4>)
 80289b2:	429c      	cmp	r4, r3
 80289b4:	d101      	bne.n	80289ba <_puts_r+0x6e>
 80289b6:	68ac      	ldr	r4, [r5, #8]
 80289b8:	e7da      	b.n	8028970 <_puts_r+0x24>
 80289ba:	4b1a      	ldr	r3, [pc, #104]	; (8028a24 <_puts_r+0xd8>)
 80289bc:	429c      	cmp	r4, r3
 80289be:	bf08      	it	eq
 80289c0:	68ec      	ldreq	r4, [r5, #12]
 80289c2:	e7d5      	b.n	8028970 <_puts_r+0x24>
 80289c4:	4621      	mov	r1, r4
 80289c6:	4628      	mov	r0, r5
 80289c8:	f000 f91a 	bl	8028c00 <__swsetup_r>
 80289cc:	2800      	cmp	r0, #0
 80289ce:	d0dd      	beq.n	802898c <_puts_r+0x40>
 80289d0:	f04f 35ff 	mov.w	r5, #4294967295
 80289d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80289d6:	07da      	lsls	r2, r3, #31
 80289d8:	d405      	bmi.n	80289e6 <_puts_r+0x9a>
 80289da:	89a3      	ldrh	r3, [r4, #12]
 80289dc:	059b      	lsls	r3, r3, #22
 80289de:	d402      	bmi.n	80289e6 <_puts_r+0x9a>
 80289e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80289e2:	f000 fb97 	bl	8029114 <__retarget_lock_release_recursive>
 80289e6:	4628      	mov	r0, r5
 80289e8:	bd70      	pop	{r4, r5, r6, pc}
 80289ea:	2b00      	cmp	r3, #0
 80289ec:	da04      	bge.n	80289f8 <_puts_r+0xac>
 80289ee:	69a2      	ldr	r2, [r4, #24]
 80289f0:	429a      	cmp	r2, r3
 80289f2:	dc06      	bgt.n	8028a02 <_puts_r+0xb6>
 80289f4:	290a      	cmp	r1, #10
 80289f6:	d004      	beq.n	8028a02 <_puts_r+0xb6>
 80289f8:	6823      	ldr	r3, [r4, #0]
 80289fa:	1c5a      	adds	r2, r3, #1
 80289fc:	6022      	str	r2, [r4, #0]
 80289fe:	7019      	strb	r1, [r3, #0]
 8028a00:	e7c5      	b.n	802898e <_puts_r+0x42>
 8028a02:	4622      	mov	r2, r4
 8028a04:	4628      	mov	r0, r5
 8028a06:	f000 f8a9 	bl	8028b5c <__swbuf_r>
 8028a0a:	3001      	adds	r0, #1
 8028a0c:	d1bf      	bne.n	802898e <_puts_r+0x42>
 8028a0e:	e7df      	b.n	80289d0 <_puts_r+0x84>
 8028a10:	6823      	ldr	r3, [r4, #0]
 8028a12:	250a      	movs	r5, #10
 8028a14:	1c5a      	adds	r2, r3, #1
 8028a16:	6022      	str	r2, [r4, #0]
 8028a18:	701d      	strb	r5, [r3, #0]
 8028a1a:	e7db      	b.n	80289d4 <_puts_r+0x88>
 8028a1c:	0802c320 	.word	0x0802c320
 8028a20:	0802c340 	.word	0x0802c340
 8028a24:	0802c300 	.word	0x0802c300

08028a28 <puts>:
 8028a28:	4b02      	ldr	r3, [pc, #8]	; (8028a34 <puts+0xc>)
 8028a2a:	4601      	mov	r1, r0
 8028a2c:	6818      	ldr	r0, [r3, #0]
 8028a2e:	f7ff bf8d 	b.w	802894c <_puts_r>
 8028a32:	bf00      	nop
 8028a34:	200000c4 	.word	0x200000c4

08028a38 <rand>:
 8028a38:	4b16      	ldr	r3, [pc, #88]	; (8028a94 <rand+0x5c>)
 8028a3a:	b510      	push	{r4, lr}
 8028a3c:	681c      	ldr	r4, [r3, #0]
 8028a3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8028a40:	b9b3      	cbnz	r3, 8028a70 <rand+0x38>
 8028a42:	2018      	movs	r0, #24
 8028a44:	f7ff fb82 	bl	802814c <malloc>
 8028a48:	63a0      	str	r0, [r4, #56]	; 0x38
 8028a4a:	b928      	cbnz	r0, 8028a58 <rand+0x20>
 8028a4c:	4602      	mov	r2, r0
 8028a4e:	4b12      	ldr	r3, [pc, #72]	; (8028a98 <rand+0x60>)
 8028a50:	214e      	movs	r1, #78	; 0x4e
 8028a52:	4812      	ldr	r0, [pc, #72]	; (8028a9c <rand+0x64>)
 8028a54:	f7ff fb0c 	bl	8028070 <__assert_func>
 8028a58:	4a11      	ldr	r2, [pc, #68]	; (8028aa0 <rand+0x68>)
 8028a5a:	4b12      	ldr	r3, [pc, #72]	; (8028aa4 <rand+0x6c>)
 8028a5c:	e9c0 2300 	strd	r2, r3, [r0]
 8028a60:	4b11      	ldr	r3, [pc, #68]	; (8028aa8 <rand+0x70>)
 8028a62:	2201      	movs	r2, #1
 8028a64:	6083      	str	r3, [r0, #8]
 8028a66:	230b      	movs	r3, #11
 8028a68:	8183      	strh	r3, [r0, #12]
 8028a6a:	2300      	movs	r3, #0
 8028a6c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8028a70:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8028a72:	4a0e      	ldr	r2, [pc, #56]	; (8028aac <rand+0x74>)
 8028a74:	6920      	ldr	r0, [r4, #16]
 8028a76:	6963      	ldr	r3, [r4, #20]
 8028a78:	490d      	ldr	r1, [pc, #52]	; (8028ab0 <rand+0x78>)
 8028a7a:	4342      	muls	r2, r0
 8028a7c:	fb01 2203 	mla	r2, r1, r3, r2
 8028a80:	fba0 0101 	umull	r0, r1, r0, r1
 8028a84:	1c43      	adds	r3, r0, #1
 8028a86:	eb42 0001 	adc.w	r0, r2, r1
 8028a8a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8028a8e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8028a92:	bd10      	pop	{r4, pc}
 8028a94:	200000c4 	.word	0x200000c4
 8028a98:	0802c28c 	.word	0x0802c28c
 8028a9c:	0802c2a3 	.word	0x0802c2a3
 8028aa0:	abcd330e 	.word	0xabcd330e
 8028aa4:	e66d1234 	.word	0xe66d1234
 8028aa8:	0005deec 	.word	0x0005deec
 8028aac:	5851f42d 	.word	0x5851f42d
 8028ab0:	4c957f2d 	.word	0x4c957f2d

08028ab4 <_sbrk_r>:
 8028ab4:	b538      	push	{r3, r4, r5, lr}
 8028ab6:	2300      	movs	r3, #0
 8028ab8:	4d05      	ldr	r5, [pc, #20]	; (8028ad0 <_sbrk_r+0x1c>)
 8028aba:	4604      	mov	r4, r0
 8028abc:	4608      	mov	r0, r1
 8028abe:	602b      	str	r3, [r5, #0]
 8028ac0:	f7d9 f822 	bl	8001b08 <_sbrk>
 8028ac4:	1c43      	adds	r3, r0, #1
 8028ac6:	d102      	bne.n	8028ace <_sbrk_r+0x1a>
 8028ac8:	682b      	ldr	r3, [r5, #0]
 8028aca:	b103      	cbz	r3, 8028ace <_sbrk_r+0x1a>
 8028acc:	6023      	str	r3, [r4, #0]
 8028ace:	bd38      	pop	{r3, r4, r5, pc}
 8028ad0:	20197d90 	.word	0x20197d90

08028ad4 <_raise_r>:
 8028ad4:	291f      	cmp	r1, #31
 8028ad6:	b538      	push	{r3, r4, r5, lr}
 8028ad8:	4604      	mov	r4, r0
 8028ada:	460d      	mov	r5, r1
 8028adc:	d904      	bls.n	8028ae8 <_raise_r+0x14>
 8028ade:	2316      	movs	r3, #22
 8028ae0:	6003      	str	r3, [r0, #0]
 8028ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8028ae6:	bd38      	pop	{r3, r4, r5, pc}
 8028ae8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8028aea:	b112      	cbz	r2, 8028af2 <_raise_r+0x1e>
 8028aec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8028af0:	b94b      	cbnz	r3, 8028b06 <_raise_r+0x32>
 8028af2:	4620      	mov	r0, r4
 8028af4:	f000 f830 	bl	8028b58 <_getpid_r>
 8028af8:	462a      	mov	r2, r5
 8028afa:	4601      	mov	r1, r0
 8028afc:	4620      	mov	r0, r4
 8028afe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028b02:	f000 b817 	b.w	8028b34 <_kill_r>
 8028b06:	2b01      	cmp	r3, #1
 8028b08:	d00a      	beq.n	8028b20 <_raise_r+0x4c>
 8028b0a:	1c59      	adds	r1, r3, #1
 8028b0c:	d103      	bne.n	8028b16 <_raise_r+0x42>
 8028b0e:	2316      	movs	r3, #22
 8028b10:	6003      	str	r3, [r0, #0]
 8028b12:	2001      	movs	r0, #1
 8028b14:	e7e7      	b.n	8028ae6 <_raise_r+0x12>
 8028b16:	2400      	movs	r4, #0
 8028b18:	4628      	mov	r0, r5
 8028b1a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8028b1e:	4798      	blx	r3
 8028b20:	2000      	movs	r0, #0
 8028b22:	e7e0      	b.n	8028ae6 <_raise_r+0x12>

08028b24 <raise>:
 8028b24:	4b02      	ldr	r3, [pc, #8]	; (8028b30 <raise+0xc>)
 8028b26:	4601      	mov	r1, r0
 8028b28:	6818      	ldr	r0, [r3, #0]
 8028b2a:	f7ff bfd3 	b.w	8028ad4 <_raise_r>
 8028b2e:	bf00      	nop
 8028b30:	200000c4 	.word	0x200000c4

08028b34 <_kill_r>:
 8028b34:	b538      	push	{r3, r4, r5, lr}
 8028b36:	2300      	movs	r3, #0
 8028b38:	4d06      	ldr	r5, [pc, #24]	; (8028b54 <_kill_r+0x20>)
 8028b3a:	4604      	mov	r4, r0
 8028b3c:	4608      	mov	r0, r1
 8028b3e:	4611      	mov	r1, r2
 8028b40:	602b      	str	r3, [r5, #0]
 8028b42:	f7d8 ff59 	bl	80019f8 <_kill>
 8028b46:	1c43      	adds	r3, r0, #1
 8028b48:	d102      	bne.n	8028b50 <_kill_r+0x1c>
 8028b4a:	682b      	ldr	r3, [r5, #0]
 8028b4c:	b103      	cbz	r3, 8028b50 <_kill_r+0x1c>
 8028b4e:	6023      	str	r3, [r4, #0]
 8028b50:	bd38      	pop	{r3, r4, r5, pc}
 8028b52:	bf00      	nop
 8028b54:	20197d90 	.word	0x20197d90

08028b58 <_getpid_r>:
 8028b58:	f7d8 bf46 	b.w	80019e8 <_getpid>

08028b5c <__swbuf_r>:
 8028b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028b5e:	460e      	mov	r6, r1
 8028b60:	4614      	mov	r4, r2
 8028b62:	4605      	mov	r5, r0
 8028b64:	b118      	cbz	r0, 8028b6e <__swbuf_r+0x12>
 8028b66:	6983      	ldr	r3, [r0, #24]
 8028b68:	b90b      	cbnz	r3, 8028b6e <__swbuf_r+0x12>
 8028b6a:	f000 fa33 	bl	8028fd4 <__sinit>
 8028b6e:	4b21      	ldr	r3, [pc, #132]	; (8028bf4 <__swbuf_r+0x98>)
 8028b70:	429c      	cmp	r4, r3
 8028b72:	d12b      	bne.n	8028bcc <__swbuf_r+0x70>
 8028b74:	686c      	ldr	r4, [r5, #4]
 8028b76:	69a3      	ldr	r3, [r4, #24]
 8028b78:	60a3      	str	r3, [r4, #8]
 8028b7a:	89a3      	ldrh	r3, [r4, #12]
 8028b7c:	071a      	lsls	r2, r3, #28
 8028b7e:	d52f      	bpl.n	8028be0 <__swbuf_r+0x84>
 8028b80:	6923      	ldr	r3, [r4, #16]
 8028b82:	b36b      	cbz	r3, 8028be0 <__swbuf_r+0x84>
 8028b84:	6923      	ldr	r3, [r4, #16]
 8028b86:	b2f6      	uxtb	r6, r6
 8028b88:	6820      	ldr	r0, [r4, #0]
 8028b8a:	4637      	mov	r7, r6
 8028b8c:	1ac0      	subs	r0, r0, r3
 8028b8e:	6963      	ldr	r3, [r4, #20]
 8028b90:	4283      	cmp	r3, r0
 8028b92:	dc04      	bgt.n	8028b9e <__swbuf_r+0x42>
 8028b94:	4621      	mov	r1, r4
 8028b96:	4628      	mov	r0, r5
 8028b98:	f000 f988 	bl	8028eac <_fflush_r>
 8028b9c:	bb30      	cbnz	r0, 8028bec <__swbuf_r+0x90>
 8028b9e:	68a3      	ldr	r3, [r4, #8]
 8028ba0:	3001      	adds	r0, #1
 8028ba2:	3b01      	subs	r3, #1
 8028ba4:	60a3      	str	r3, [r4, #8]
 8028ba6:	6823      	ldr	r3, [r4, #0]
 8028ba8:	1c5a      	adds	r2, r3, #1
 8028baa:	6022      	str	r2, [r4, #0]
 8028bac:	701e      	strb	r6, [r3, #0]
 8028bae:	6963      	ldr	r3, [r4, #20]
 8028bb0:	4283      	cmp	r3, r0
 8028bb2:	d004      	beq.n	8028bbe <__swbuf_r+0x62>
 8028bb4:	89a3      	ldrh	r3, [r4, #12]
 8028bb6:	07db      	lsls	r3, r3, #31
 8028bb8:	d506      	bpl.n	8028bc8 <__swbuf_r+0x6c>
 8028bba:	2e0a      	cmp	r6, #10
 8028bbc:	d104      	bne.n	8028bc8 <__swbuf_r+0x6c>
 8028bbe:	4621      	mov	r1, r4
 8028bc0:	4628      	mov	r0, r5
 8028bc2:	f000 f973 	bl	8028eac <_fflush_r>
 8028bc6:	b988      	cbnz	r0, 8028bec <__swbuf_r+0x90>
 8028bc8:	4638      	mov	r0, r7
 8028bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028bcc:	4b0a      	ldr	r3, [pc, #40]	; (8028bf8 <__swbuf_r+0x9c>)
 8028bce:	429c      	cmp	r4, r3
 8028bd0:	d101      	bne.n	8028bd6 <__swbuf_r+0x7a>
 8028bd2:	68ac      	ldr	r4, [r5, #8]
 8028bd4:	e7cf      	b.n	8028b76 <__swbuf_r+0x1a>
 8028bd6:	4b09      	ldr	r3, [pc, #36]	; (8028bfc <__swbuf_r+0xa0>)
 8028bd8:	429c      	cmp	r4, r3
 8028bda:	bf08      	it	eq
 8028bdc:	68ec      	ldreq	r4, [r5, #12]
 8028bde:	e7ca      	b.n	8028b76 <__swbuf_r+0x1a>
 8028be0:	4621      	mov	r1, r4
 8028be2:	4628      	mov	r0, r5
 8028be4:	f000 f80c 	bl	8028c00 <__swsetup_r>
 8028be8:	2800      	cmp	r0, #0
 8028bea:	d0cb      	beq.n	8028b84 <__swbuf_r+0x28>
 8028bec:	f04f 37ff 	mov.w	r7, #4294967295
 8028bf0:	e7ea      	b.n	8028bc8 <__swbuf_r+0x6c>
 8028bf2:	bf00      	nop
 8028bf4:	0802c320 	.word	0x0802c320
 8028bf8:	0802c340 	.word	0x0802c340
 8028bfc:	0802c300 	.word	0x0802c300

08028c00 <__swsetup_r>:
 8028c00:	4b32      	ldr	r3, [pc, #200]	; (8028ccc <__swsetup_r+0xcc>)
 8028c02:	b570      	push	{r4, r5, r6, lr}
 8028c04:	681d      	ldr	r5, [r3, #0]
 8028c06:	4606      	mov	r6, r0
 8028c08:	460c      	mov	r4, r1
 8028c0a:	b125      	cbz	r5, 8028c16 <__swsetup_r+0x16>
 8028c0c:	69ab      	ldr	r3, [r5, #24]
 8028c0e:	b913      	cbnz	r3, 8028c16 <__swsetup_r+0x16>
 8028c10:	4628      	mov	r0, r5
 8028c12:	f000 f9df 	bl	8028fd4 <__sinit>
 8028c16:	4b2e      	ldr	r3, [pc, #184]	; (8028cd0 <__swsetup_r+0xd0>)
 8028c18:	429c      	cmp	r4, r3
 8028c1a:	d10f      	bne.n	8028c3c <__swsetup_r+0x3c>
 8028c1c:	686c      	ldr	r4, [r5, #4]
 8028c1e:	89a3      	ldrh	r3, [r4, #12]
 8028c20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028c24:	0719      	lsls	r1, r3, #28
 8028c26:	d42c      	bmi.n	8028c82 <__swsetup_r+0x82>
 8028c28:	06dd      	lsls	r5, r3, #27
 8028c2a:	d411      	bmi.n	8028c50 <__swsetup_r+0x50>
 8028c2c:	2309      	movs	r3, #9
 8028c2e:	6033      	str	r3, [r6, #0]
 8028c30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8028c34:	f04f 30ff 	mov.w	r0, #4294967295
 8028c38:	81a3      	strh	r3, [r4, #12]
 8028c3a:	e03e      	b.n	8028cba <__swsetup_r+0xba>
 8028c3c:	4b25      	ldr	r3, [pc, #148]	; (8028cd4 <__swsetup_r+0xd4>)
 8028c3e:	429c      	cmp	r4, r3
 8028c40:	d101      	bne.n	8028c46 <__swsetup_r+0x46>
 8028c42:	68ac      	ldr	r4, [r5, #8]
 8028c44:	e7eb      	b.n	8028c1e <__swsetup_r+0x1e>
 8028c46:	4b24      	ldr	r3, [pc, #144]	; (8028cd8 <__swsetup_r+0xd8>)
 8028c48:	429c      	cmp	r4, r3
 8028c4a:	bf08      	it	eq
 8028c4c:	68ec      	ldreq	r4, [r5, #12]
 8028c4e:	e7e6      	b.n	8028c1e <__swsetup_r+0x1e>
 8028c50:	0758      	lsls	r0, r3, #29
 8028c52:	d512      	bpl.n	8028c7a <__swsetup_r+0x7a>
 8028c54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028c56:	b141      	cbz	r1, 8028c6a <__swsetup_r+0x6a>
 8028c58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028c5c:	4299      	cmp	r1, r3
 8028c5e:	d002      	beq.n	8028c66 <__swsetup_r+0x66>
 8028c60:	4630      	mov	r0, r6
 8028c62:	f7ff fa8b 	bl	802817c <_free_r>
 8028c66:	2300      	movs	r3, #0
 8028c68:	6363      	str	r3, [r4, #52]	; 0x34
 8028c6a:	89a3      	ldrh	r3, [r4, #12]
 8028c6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8028c70:	81a3      	strh	r3, [r4, #12]
 8028c72:	2300      	movs	r3, #0
 8028c74:	6063      	str	r3, [r4, #4]
 8028c76:	6923      	ldr	r3, [r4, #16]
 8028c78:	6023      	str	r3, [r4, #0]
 8028c7a:	89a3      	ldrh	r3, [r4, #12]
 8028c7c:	f043 0308 	orr.w	r3, r3, #8
 8028c80:	81a3      	strh	r3, [r4, #12]
 8028c82:	6923      	ldr	r3, [r4, #16]
 8028c84:	b94b      	cbnz	r3, 8028c9a <__swsetup_r+0x9a>
 8028c86:	89a3      	ldrh	r3, [r4, #12]
 8028c88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8028c8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8028c90:	d003      	beq.n	8028c9a <__swsetup_r+0x9a>
 8028c92:	4621      	mov	r1, r4
 8028c94:	4630      	mov	r0, r6
 8028c96:	f000 fa63 	bl	8029160 <__smakebuf_r>
 8028c9a:	89a0      	ldrh	r0, [r4, #12]
 8028c9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028ca0:	f010 0301 	ands.w	r3, r0, #1
 8028ca4:	d00a      	beq.n	8028cbc <__swsetup_r+0xbc>
 8028ca6:	2300      	movs	r3, #0
 8028ca8:	60a3      	str	r3, [r4, #8]
 8028caa:	6963      	ldr	r3, [r4, #20]
 8028cac:	425b      	negs	r3, r3
 8028cae:	61a3      	str	r3, [r4, #24]
 8028cb0:	6923      	ldr	r3, [r4, #16]
 8028cb2:	b943      	cbnz	r3, 8028cc6 <__swsetup_r+0xc6>
 8028cb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8028cb8:	d1ba      	bne.n	8028c30 <__swsetup_r+0x30>
 8028cba:	bd70      	pop	{r4, r5, r6, pc}
 8028cbc:	0781      	lsls	r1, r0, #30
 8028cbe:	bf58      	it	pl
 8028cc0:	6963      	ldrpl	r3, [r4, #20]
 8028cc2:	60a3      	str	r3, [r4, #8]
 8028cc4:	e7f4      	b.n	8028cb0 <__swsetup_r+0xb0>
 8028cc6:	2000      	movs	r0, #0
 8028cc8:	e7f7      	b.n	8028cba <__swsetup_r+0xba>
 8028cca:	bf00      	nop
 8028ccc:	200000c4 	.word	0x200000c4
 8028cd0:	0802c320 	.word	0x0802c320
 8028cd4:	0802c340 	.word	0x0802c340
 8028cd8:	0802c300 	.word	0x0802c300

08028cdc <__register_exitproc>:
 8028cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028ce0:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8028da0 <__register_exitproc+0xc4>
 8028ce4:	4606      	mov	r6, r0
 8028ce6:	461f      	mov	r7, r3
 8028ce8:	460d      	mov	r5, r1
 8028cea:	f8d8 0000 	ldr.w	r0, [r8]
 8028cee:	4691      	mov	r9, r2
 8028cf0:	f000 fa0e 	bl	8029110 <__retarget_lock_acquire_recursive>
 8028cf4:	4b26      	ldr	r3, [pc, #152]	; (8028d90 <__register_exitproc+0xb4>)
 8028cf6:	681c      	ldr	r4, [r3, #0]
 8028cf8:	b934      	cbnz	r4, 8028d08 <__register_exitproc+0x2c>
 8028cfa:	4c26      	ldr	r4, [pc, #152]	; (8028d94 <__register_exitproc+0xb8>)
 8028cfc:	601c      	str	r4, [r3, #0]
 8028cfe:	4b26      	ldr	r3, [pc, #152]	; (8028d98 <__register_exitproc+0xbc>)
 8028d00:	b113      	cbz	r3, 8028d08 <__register_exitproc+0x2c>
 8028d02:	681b      	ldr	r3, [r3, #0]
 8028d04:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8028d08:	6863      	ldr	r3, [r4, #4]
 8028d0a:	2b1f      	cmp	r3, #31
 8028d0c:	dd07      	ble.n	8028d1e <__register_exitproc+0x42>
 8028d0e:	f8d8 0000 	ldr.w	r0, [r8]
 8028d12:	f000 f9ff 	bl	8029114 <__retarget_lock_release_recursive>
 8028d16:	f04f 30ff 	mov.w	r0, #4294967295
 8028d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028d1e:	b35e      	cbz	r6, 8028d78 <__register_exitproc+0x9c>
 8028d20:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8028d24:	b988      	cbnz	r0, 8028d4a <__register_exitproc+0x6e>
 8028d26:	4b1d      	ldr	r3, [pc, #116]	; (8028d9c <__register_exitproc+0xc0>)
 8028d28:	b923      	cbnz	r3, 8028d34 <__register_exitproc+0x58>
 8028d2a:	f8d8 0000 	ldr.w	r0, [r8]
 8028d2e:	f000 f9f0 	bl	8029112 <__retarget_lock_release>
 8028d32:	e7f0      	b.n	8028d16 <__register_exitproc+0x3a>
 8028d34:	f44f 7084 	mov.w	r0, #264	; 0x108
 8028d38:	f7ff fa08 	bl	802814c <malloc>
 8028d3c:	2800      	cmp	r0, #0
 8028d3e:	d0f4      	beq.n	8028d2a <__register_exitproc+0x4e>
 8028d40:	2300      	movs	r3, #0
 8028d42:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8028d46:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8028d4a:	6863      	ldr	r3, [r4, #4]
 8028d4c:	2201      	movs	r2, #1
 8028d4e:	2e02      	cmp	r6, #2
 8028d50:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8028d54:	fa02 f203 	lsl.w	r2, r2, r3
 8028d58:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8028d5c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8028d60:	ea43 0302 	orr.w	r3, r3, r2
 8028d64:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8028d68:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8028d6c:	bf02      	ittt	eq
 8028d6e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8028d72:	4313      	orreq	r3, r2
 8028d74:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8028d78:	6863      	ldr	r3, [r4, #4]
 8028d7a:	f8d8 0000 	ldr.w	r0, [r8]
 8028d7e:	1c5a      	adds	r2, r3, #1
 8028d80:	3302      	adds	r3, #2
 8028d82:	6062      	str	r2, [r4, #4]
 8028d84:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8028d88:	f000 f9c4 	bl	8029114 <__retarget_lock_release_recursive>
 8028d8c:	2000      	movs	r0, #0
 8028d8e:	e7c4      	b.n	8028d1a <__register_exitproc+0x3e>
 8028d90:	20197d88 	.word	0x20197d88
 8028d94:	20197cfc 	.word	0x20197cfc
 8028d98:	0802c288 	.word	0x0802c288
 8028d9c:	0802814d 	.word	0x0802814d
 8028da0:	20000128 	.word	0x20000128

08028da4 <__sflush_r>:
 8028da4:	898a      	ldrh	r2, [r1, #12]
 8028da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028daa:	4605      	mov	r5, r0
 8028dac:	0710      	lsls	r0, r2, #28
 8028dae:	460c      	mov	r4, r1
 8028db0:	d458      	bmi.n	8028e64 <__sflush_r+0xc0>
 8028db2:	684b      	ldr	r3, [r1, #4]
 8028db4:	2b00      	cmp	r3, #0
 8028db6:	dc05      	bgt.n	8028dc4 <__sflush_r+0x20>
 8028db8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8028dba:	2b00      	cmp	r3, #0
 8028dbc:	dc02      	bgt.n	8028dc4 <__sflush_r+0x20>
 8028dbe:	2000      	movs	r0, #0
 8028dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028dc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028dc6:	2e00      	cmp	r6, #0
 8028dc8:	d0f9      	beq.n	8028dbe <__sflush_r+0x1a>
 8028dca:	2300      	movs	r3, #0
 8028dcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8028dd0:	682f      	ldr	r7, [r5, #0]
 8028dd2:	602b      	str	r3, [r5, #0]
 8028dd4:	d032      	beq.n	8028e3c <__sflush_r+0x98>
 8028dd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8028dd8:	89a3      	ldrh	r3, [r4, #12]
 8028dda:	075a      	lsls	r2, r3, #29
 8028ddc:	d505      	bpl.n	8028dea <__sflush_r+0x46>
 8028dde:	6863      	ldr	r3, [r4, #4]
 8028de0:	1ac0      	subs	r0, r0, r3
 8028de2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8028de4:	b10b      	cbz	r3, 8028dea <__sflush_r+0x46>
 8028de6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8028de8:	1ac0      	subs	r0, r0, r3
 8028dea:	2300      	movs	r3, #0
 8028dec:	4602      	mov	r2, r0
 8028dee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028df0:	4628      	mov	r0, r5
 8028df2:	6a21      	ldr	r1, [r4, #32]
 8028df4:	47b0      	blx	r6
 8028df6:	1c43      	adds	r3, r0, #1
 8028df8:	89a3      	ldrh	r3, [r4, #12]
 8028dfa:	d106      	bne.n	8028e0a <__sflush_r+0x66>
 8028dfc:	6829      	ldr	r1, [r5, #0]
 8028dfe:	291d      	cmp	r1, #29
 8028e00:	d82c      	bhi.n	8028e5c <__sflush_r+0xb8>
 8028e02:	4a29      	ldr	r2, [pc, #164]	; (8028ea8 <__sflush_r+0x104>)
 8028e04:	40ca      	lsrs	r2, r1
 8028e06:	07d6      	lsls	r6, r2, #31
 8028e08:	d528      	bpl.n	8028e5c <__sflush_r+0xb8>
 8028e0a:	2200      	movs	r2, #0
 8028e0c:	04d9      	lsls	r1, r3, #19
 8028e0e:	6062      	str	r2, [r4, #4]
 8028e10:	6922      	ldr	r2, [r4, #16]
 8028e12:	6022      	str	r2, [r4, #0]
 8028e14:	d504      	bpl.n	8028e20 <__sflush_r+0x7c>
 8028e16:	1c42      	adds	r2, r0, #1
 8028e18:	d101      	bne.n	8028e1e <__sflush_r+0x7a>
 8028e1a:	682b      	ldr	r3, [r5, #0]
 8028e1c:	b903      	cbnz	r3, 8028e20 <__sflush_r+0x7c>
 8028e1e:	6560      	str	r0, [r4, #84]	; 0x54
 8028e20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028e22:	602f      	str	r7, [r5, #0]
 8028e24:	2900      	cmp	r1, #0
 8028e26:	d0ca      	beq.n	8028dbe <__sflush_r+0x1a>
 8028e28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028e2c:	4299      	cmp	r1, r3
 8028e2e:	d002      	beq.n	8028e36 <__sflush_r+0x92>
 8028e30:	4628      	mov	r0, r5
 8028e32:	f7ff f9a3 	bl	802817c <_free_r>
 8028e36:	2000      	movs	r0, #0
 8028e38:	6360      	str	r0, [r4, #52]	; 0x34
 8028e3a:	e7c1      	b.n	8028dc0 <__sflush_r+0x1c>
 8028e3c:	6a21      	ldr	r1, [r4, #32]
 8028e3e:	2301      	movs	r3, #1
 8028e40:	4628      	mov	r0, r5
 8028e42:	47b0      	blx	r6
 8028e44:	1c41      	adds	r1, r0, #1
 8028e46:	d1c7      	bne.n	8028dd8 <__sflush_r+0x34>
 8028e48:	682b      	ldr	r3, [r5, #0]
 8028e4a:	2b00      	cmp	r3, #0
 8028e4c:	d0c4      	beq.n	8028dd8 <__sflush_r+0x34>
 8028e4e:	2b1d      	cmp	r3, #29
 8028e50:	d001      	beq.n	8028e56 <__sflush_r+0xb2>
 8028e52:	2b16      	cmp	r3, #22
 8028e54:	d101      	bne.n	8028e5a <__sflush_r+0xb6>
 8028e56:	602f      	str	r7, [r5, #0]
 8028e58:	e7b1      	b.n	8028dbe <__sflush_r+0x1a>
 8028e5a:	89a3      	ldrh	r3, [r4, #12]
 8028e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028e60:	81a3      	strh	r3, [r4, #12]
 8028e62:	e7ad      	b.n	8028dc0 <__sflush_r+0x1c>
 8028e64:	690f      	ldr	r7, [r1, #16]
 8028e66:	2f00      	cmp	r7, #0
 8028e68:	d0a9      	beq.n	8028dbe <__sflush_r+0x1a>
 8028e6a:	0793      	lsls	r3, r2, #30
 8028e6c:	680e      	ldr	r6, [r1, #0]
 8028e6e:	600f      	str	r7, [r1, #0]
 8028e70:	bf0c      	ite	eq
 8028e72:	694b      	ldreq	r3, [r1, #20]
 8028e74:	2300      	movne	r3, #0
 8028e76:	eba6 0807 	sub.w	r8, r6, r7
 8028e7a:	608b      	str	r3, [r1, #8]
 8028e7c:	f1b8 0f00 	cmp.w	r8, #0
 8028e80:	dd9d      	ble.n	8028dbe <__sflush_r+0x1a>
 8028e82:	4643      	mov	r3, r8
 8028e84:	463a      	mov	r2, r7
 8028e86:	6a21      	ldr	r1, [r4, #32]
 8028e88:	4628      	mov	r0, r5
 8028e8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8028e8c:	47b0      	blx	r6
 8028e8e:	2800      	cmp	r0, #0
 8028e90:	dc06      	bgt.n	8028ea0 <__sflush_r+0xfc>
 8028e92:	89a3      	ldrh	r3, [r4, #12]
 8028e94:	f04f 30ff 	mov.w	r0, #4294967295
 8028e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028e9c:	81a3      	strh	r3, [r4, #12]
 8028e9e:	e78f      	b.n	8028dc0 <__sflush_r+0x1c>
 8028ea0:	4407      	add	r7, r0
 8028ea2:	eba8 0800 	sub.w	r8, r8, r0
 8028ea6:	e7e9      	b.n	8028e7c <__sflush_r+0xd8>
 8028ea8:	20400001 	.word	0x20400001

08028eac <_fflush_r>:
 8028eac:	b538      	push	{r3, r4, r5, lr}
 8028eae:	690b      	ldr	r3, [r1, #16]
 8028eb0:	4605      	mov	r5, r0
 8028eb2:	460c      	mov	r4, r1
 8028eb4:	b913      	cbnz	r3, 8028ebc <_fflush_r+0x10>
 8028eb6:	2500      	movs	r5, #0
 8028eb8:	4628      	mov	r0, r5
 8028eba:	bd38      	pop	{r3, r4, r5, pc}
 8028ebc:	b118      	cbz	r0, 8028ec6 <_fflush_r+0x1a>
 8028ebe:	6983      	ldr	r3, [r0, #24]
 8028ec0:	b90b      	cbnz	r3, 8028ec6 <_fflush_r+0x1a>
 8028ec2:	f000 f887 	bl	8028fd4 <__sinit>
 8028ec6:	4b14      	ldr	r3, [pc, #80]	; (8028f18 <_fflush_r+0x6c>)
 8028ec8:	429c      	cmp	r4, r3
 8028eca:	d11b      	bne.n	8028f04 <_fflush_r+0x58>
 8028ecc:	686c      	ldr	r4, [r5, #4]
 8028ece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028ed2:	2b00      	cmp	r3, #0
 8028ed4:	d0ef      	beq.n	8028eb6 <_fflush_r+0xa>
 8028ed6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8028ed8:	07d0      	lsls	r0, r2, #31
 8028eda:	d404      	bmi.n	8028ee6 <_fflush_r+0x3a>
 8028edc:	0599      	lsls	r1, r3, #22
 8028ede:	d402      	bmi.n	8028ee6 <_fflush_r+0x3a>
 8028ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028ee2:	f000 f915 	bl	8029110 <__retarget_lock_acquire_recursive>
 8028ee6:	4628      	mov	r0, r5
 8028ee8:	4621      	mov	r1, r4
 8028eea:	f7ff ff5b 	bl	8028da4 <__sflush_r>
 8028eee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8028ef0:	4605      	mov	r5, r0
 8028ef2:	07da      	lsls	r2, r3, #31
 8028ef4:	d4e0      	bmi.n	8028eb8 <_fflush_r+0xc>
 8028ef6:	89a3      	ldrh	r3, [r4, #12]
 8028ef8:	059b      	lsls	r3, r3, #22
 8028efa:	d4dd      	bmi.n	8028eb8 <_fflush_r+0xc>
 8028efc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028efe:	f000 f909 	bl	8029114 <__retarget_lock_release_recursive>
 8028f02:	e7d9      	b.n	8028eb8 <_fflush_r+0xc>
 8028f04:	4b05      	ldr	r3, [pc, #20]	; (8028f1c <_fflush_r+0x70>)
 8028f06:	429c      	cmp	r4, r3
 8028f08:	d101      	bne.n	8028f0e <_fflush_r+0x62>
 8028f0a:	68ac      	ldr	r4, [r5, #8]
 8028f0c:	e7df      	b.n	8028ece <_fflush_r+0x22>
 8028f0e:	4b04      	ldr	r3, [pc, #16]	; (8028f20 <_fflush_r+0x74>)
 8028f10:	429c      	cmp	r4, r3
 8028f12:	bf08      	it	eq
 8028f14:	68ec      	ldreq	r4, [r5, #12]
 8028f16:	e7da      	b.n	8028ece <_fflush_r+0x22>
 8028f18:	0802c320 	.word	0x0802c320
 8028f1c:	0802c340 	.word	0x0802c340
 8028f20:	0802c300 	.word	0x0802c300

08028f24 <std>:
 8028f24:	2300      	movs	r3, #0
 8028f26:	b510      	push	{r4, lr}
 8028f28:	4604      	mov	r4, r0
 8028f2a:	6083      	str	r3, [r0, #8]
 8028f2c:	8181      	strh	r1, [r0, #12]
 8028f2e:	4619      	mov	r1, r3
 8028f30:	6643      	str	r3, [r0, #100]	; 0x64
 8028f32:	81c2      	strh	r2, [r0, #14]
 8028f34:	2208      	movs	r2, #8
 8028f36:	6183      	str	r3, [r0, #24]
 8028f38:	e9c0 3300 	strd	r3, r3, [r0]
 8028f3c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8028f40:	305c      	adds	r0, #92	; 0x5c
 8028f42:	f7ff f913 	bl	802816c <memset>
 8028f46:	4b05      	ldr	r3, [pc, #20]	; (8028f5c <std+0x38>)
 8028f48:	6224      	str	r4, [r4, #32]
 8028f4a:	6263      	str	r3, [r4, #36]	; 0x24
 8028f4c:	4b04      	ldr	r3, [pc, #16]	; (8028f60 <std+0x3c>)
 8028f4e:	62a3      	str	r3, [r4, #40]	; 0x28
 8028f50:	4b04      	ldr	r3, [pc, #16]	; (8028f64 <std+0x40>)
 8028f52:	62e3      	str	r3, [r4, #44]	; 0x2c
 8028f54:	4b04      	ldr	r3, [pc, #16]	; (8028f68 <std+0x44>)
 8028f56:	6323      	str	r3, [r4, #48]	; 0x30
 8028f58:	bd10      	pop	{r4, pc}
 8028f5a:	bf00      	nop
 8028f5c:	08029215 	.word	0x08029215
 8028f60:	08029237 	.word	0x08029237
 8028f64:	0802926f 	.word	0x0802926f
 8028f68:	08029293 	.word	0x08029293

08028f6c <_cleanup_r>:
 8028f6c:	4901      	ldr	r1, [pc, #4]	; (8028f74 <_cleanup_r+0x8>)
 8028f6e:	f000 b8af 	b.w	80290d0 <_fwalk_reent>
 8028f72:	bf00      	nop
 8028f74:	08028ead 	.word	0x08028ead

08028f78 <__sfmoreglue>:
 8028f78:	b570      	push	{r4, r5, r6, lr}
 8028f7a:	2268      	movs	r2, #104	; 0x68
 8028f7c:	1e4d      	subs	r5, r1, #1
 8028f7e:	460e      	mov	r6, r1
 8028f80:	4355      	muls	r5, r2
 8028f82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8028f86:	f7ff f965 	bl	8028254 <_malloc_r>
 8028f8a:	4604      	mov	r4, r0
 8028f8c:	b140      	cbz	r0, 8028fa0 <__sfmoreglue+0x28>
 8028f8e:	2100      	movs	r1, #0
 8028f90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8028f94:	e9c0 1600 	strd	r1, r6, [r0]
 8028f98:	300c      	adds	r0, #12
 8028f9a:	60a0      	str	r0, [r4, #8]
 8028f9c:	f7ff f8e6 	bl	802816c <memset>
 8028fa0:	4620      	mov	r0, r4
 8028fa2:	bd70      	pop	{r4, r5, r6, pc}

08028fa4 <__sfp_lock_acquire>:
 8028fa4:	4801      	ldr	r0, [pc, #4]	; (8028fac <__sfp_lock_acquire+0x8>)
 8028fa6:	f000 b8b3 	b.w	8029110 <__retarget_lock_acquire_recursive>
 8028faa:	bf00      	nop
 8028fac:	20197d8e 	.word	0x20197d8e

08028fb0 <__sfp_lock_release>:
 8028fb0:	4801      	ldr	r0, [pc, #4]	; (8028fb8 <__sfp_lock_release+0x8>)
 8028fb2:	f000 b8af 	b.w	8029114 <__retarget_lock_release_recursive>
 8028fb6:	bf00      	nop
 8028fb8:	20197d8e 	.word	0x20197d8e

08028fbc <__sinit_lock_acquire>:
 8028fbc:	4801      	ldr	r0, [pc, #4]	; (8028fc4 <__sinit_lock_acquire+0x8>)
 8028fbe:	f000 b8a7 	b.w	8029110 <__retarget_lock_acquire_recursive>
 8028fc2:	bf00      	nop
 8028fc4:	20197d8f 	.word	0x20197d8f

08028fc8 <__sinit_lock_release>:
 8028fc8:	4801      	ldr	r0, [pc, #4]	; (8028fd0 <__sinit_lock_release+0x8>)
 8028fca:	f000 b8a3 	b.w	8029114 <__retarget_lock_release_recursive>
 8028fce:	bf00      	nop
 8028fd0:	20197d8f 	.word	0x20197d8f

08028fd4 <__sinit>:
 8028fd4:	b510      	push	{r4, lr}
 8028fd6:	4604      	mov	r4, r0
 8028fd8:	f7ff fff0 	bl	8028fbc <__sinit_lock_acquire>
 8028fdc:	69a3      	ldr	r3, [r4, #24]
 8028fde:	b11b      	cbz	r3, 8028fe8 <__sinit+0x14>
 8028fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8028fe4:	f7ff bff0 	b.w	8028fc8 <__sinit_lock_release>
 8028fe8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8028fec:	6523      	str	r3, [r4, #80]	; 0x50
 8028fee:	4620      	mov	r0, r4
 8028ff0:	4b12      	ldr	r3, [pc, #72]	; (802903c <__sinit+0x68>)
 8028ff2:	4a13      	ldr	r2, [pc, #76]	; (8029040 <__sinit+0x6c>)
 8028ff4:	681b      	ldr	r3, [r3, #0]
 8028ff6:	62a2      	str	r2, [r4, #40]	; 0x28
 8028ff8:	42a3      	cmp	r3, r4
 8028ffa:	bf04      	itt	eq
 8028ffc:	2301      	moveq	r3, #1
 8028ffe:	61a3      	streq	r3, [r4, #24]
 8029000:	f000 f820 	bl	8029044 <__sfp>
 8029004:	6060      	str	r0, [r4, #4]
 8029006:	4620      	mov	r0, r4
 8029008:	f000 f81c 	bl	8029044 <__sfp>
 802900c:	60a0      	str	r0, [r4, #8]
 802900e:	4620      	mov	r0, r4
 8029010:	f000 f818 	bl	8029044 <__sfp>
 8029014:	2200      	movs	r2, #0
 8029016:	2104      	movs	r1, #4
 8029018:	60e0      	str	r0, [r4, #12]
 802901a:	6860      	ldr	r0, [r4, #4]
 802901c:	f7ff ff82 	bl	8028f24 <std>
 8029020:	2201      	movs	r2, #1
 8029022:	2109      	movs	r1, #9
 8029024:	68a0      	ldr	r0, [r4, #8]
 8029026:	f7ff ff7d 	bl	8028f24 <std>
 802902a:	2202      	movs	r2, #2
 802902c:	2112      	movs	r1, #18
 802902e:	68e0      	ldr	r0, [r4, #12]
 8029030:	f7ff ff78 	bl	8028f24 <std>
 8029034:	2301      	movs	r3, #1
 8029036:	61a3      	str	r3, [r4, #24]
 8029038:	e7d2      	b.n	8028fe0 <__sinit+0xc>
 802903a:	bf00      	nop
 802903c:	0802c250 	.word	0x0802c250
 8029040:	08028f6d 	.word	0x08028f6d

08029044 <__sfp>:
 8029044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029046:	4607      	mov	r7, r0
 8029048:	f7ff ffac 	bl	8028fa4 <__sfp_lock_acquire>
 802904c:	4b1e      	ldr	r3, [pc, #120]	; (80290c8 <__sfp+0x84>)
 802904e:	681e      	ldr	r6, [r3, #0]
 8029050:	69b3      	ldr	r3, [r6, #24]
 8029052:	b913      	cbnz	r3, 802905a <__sfp+0x16>
 8029054:	4630      	mov	r0, r6
 8029056:	f7ff ffbd 	bl	8028fd4 <__sinit>
 802905a:	3648      	adds	r6, #72	; 0x48
 802905c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8029060:	3b01      	subs	r3, #1
 8029062:	d503      	bpl.n	802906c <__sfp+0x28>
 8029064:	6833      	ldr	r3, [r6, #0]
 8029066:	b30b      	cbz	r3, 80290ac <__sfp+0x68>
 8029068:	6836      	ldr	r6, [r6, #0]
 802906a:	e7f7      	b.n	802905c <__sfp+0x18>
 802906c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8029070:	b9d5      	cbnz	r5, 80290a8 <__sfp+0x64>
 8029072:	4b16      	ldr	r3, [pc, #88]	; (80290cc <__sfp+0x88>)
 8029074:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8029078:	6665      	str	r5, [r4, #100]	; 0x64
 802907a:	60e3      	str	r3, [r4, #12]
 802907c:	f000 f847 	bl	802910e <__retarget_lock_init_recursive>
 8029080:	f7ff ff96 	bl	8028fb0 <__sfp_lock_release>
 8029084:	2208      	movs	r2, #8
 8029086:	4629      	mov	r1, r5
 8029088:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802908c:	6025      	str	r5, [r4, #0]
 802908e:	61a5      	str	r5, [r4, #24]
 8029090:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8029094:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8029098:	f7ff f868 	bl	802816c <memset>
 802909c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80290a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80290a4:	4620      	mov	r0, r4
 80290a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80290a8:	3468      	adds	r4, #104	; 0x68
 80290aa:	e7d9      	b.n	8029060 <__sfp+0x1c>
 80290ac:	2104      	movs	r1, #4
 80290ae:	4638      	mov	r0, r7
 80290b0:	f7ff ff62 	bl	8028f78 <__sfmoreglue>
 80290b4:	4604      	mov	r4, r0
 80290b6:	6030      	str	r0, [r6, #0]
 80290b8:	2800      	cmp	r0, #0
 80290ba:	d1d5      	bne.n	8029068 <__sfp+0x24>
 80290bc:	f7ff ff78 	bl	8028fb0 <__sfp_lock_release>
 80290c0:	230c      	movs	r3, #12
 80290c2:	603b      	str	r3, [r7, #0]
 80290c4:	e7ee      	b.n	80290a4 <__sfp+0x60>
 80290c6:	bf00      	nop
 80290c8:	0802c250 	.word	0x0802c250
 80290cc:	ffff0001 	.word	0xffff0001

080290d0 <_fwalk_reent>:
 80290d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80290d4:	4606      	mov	r6, r0
 80290d6:	4688      	mov	r8, r1
 80290d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80290dc:	2700      	movs	r7, #0
 80290de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80290e2:	f1b9 0901 	subs.w	r9, r9, #1
 80290e6:	d505      	bpl.n	80290f4 <_fwalk_reent+0x24>
 80290e8:	6824      	ldr	r4, [r4, #0]
 80290ea:	2c00      	cmp	r4, #0
 80290ec:	d1f7      	bne.n	80290de <_fwalk_reent+0xe>
 80290ee:	4638      	mov	r0, r7
 80290f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80290f4:	89ab      	ldrh	r3, [r5, #12]
 80290f6:	2b01      	cmp	r3, #1
 80290f8:	d907      	bls.n	802910a <_fwalk_reent+0x3a>
 80290fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80290fe:	3301      	adds	r3, #1
 8029100:	d003      	beq.n	802910a <_fwalk_reent+0x3a>
 8029102:	4629      	mov	r1, r5
 8029104:	4630      	mov	r0, r6
 8029106:	47c0      	blx	r8
 8029108:	4307      	orrs	r7, r0
 802910a:	3568      	adds	r5, #104	; 0x68
 802910c:	e7e9      	b.n	80290e2 <_fwalk_reent+0x12>

0802910e <__retarget_lock_init_recursive>:
 802910e:	4770      	bx	lr

08029110 <__retarget_lock_acquire_recursive>:
 8029110:	4770      	bx	lr

08029112 <__retarget_lock_release>:
 8029112:	4770      	bx	lr

08029114 <__retarget_lock_release_recursive>:
 8029114:	4770      	bx	lr

08029116 <__swhatbuf_r>:
 8029116:	b570      	push	{r4, r5, r6, lr}
 8029118:	460e      	mov	r6, r1
 802911a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802911e:	b096      	sub	sp, #88	; 0x58
 8029120:	4614      	mov	r4, r2
 8029122:	2900      	cmp	r1, #0
 8029124:	461d      	mov	r5, r3
 8029126:	da08      	bge.n	802913a <__swhatbuf_r+0x24>
 8029128:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802912c:	2200      	movs	r2, #0
 802912e:	602a      	str	r2, [r5, #0]
 8029130:	061a      	lsls	r2, r3, #24
 8029132:	d410      	bmi.n	8029156 <__swhatbuf_r+0x40>
 8029134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029138:	e00e      	b.n	8029158 <__swhatbuf_r+0x42>
 802913a:	466a      	mov	r2, sp
 802913c:	f000 f8d0 	bl	80292e0 <_fstat_r>
 8029140:	2800      	cmp	r0, #0
 8029142:	dbf1      	blt.n	8029128 <__swhatbuf_r+0x12>
 8029144:	9a01      	ldr	r2, [sp, #4]
 8029146:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802914a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802914e:	425a      	negs	r2, r3
 8029150:	415a      	adcs	r2, r3
 8029152:	602a      	str	r2, [r5, #0]
 8029154:	e7ee      	b.n	8029134 <__swhatbuf_r+0x1e>
 8029156:	2340      	movs	r3, #64	; 0x40
 8029158:	2000      	movs	r0, #0
 802915a:	6023      	str	r3, [r4, #0]
 802915c:	b016      	add	sp, #88	; 0x58
 802915e:	bd70      	pop	{r4, r5, r6, pc}

08029160 <__smakebuf_r>:
 8029160:	898b      	ldrh	r3, [r1, #12]
 8029162:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8029164:	079d      	lsls	r5, r3, #30
 8029166:	4606      	mov	r6, r0
 8029168:	460c      	mov	r4, r1
 802916a:	d507      	bpl.n	802917c <__smakebuf_r+0x1c>
 802916c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8029170:	6023      	str	r3, [r4, #0]
 8029172:	6123      	str	r3, [r4, #16]
 8029174:	2301      	movs	r3, #1
 8029176:	6163      	str	r3, [r4, #20]
 8029178:	b002      	add	sp, #8
 802917a:	bd70      	pop	{r4, r5, r6, pc}
 802917c:	ab01      	add	r3, sp, #4
 802917e:	466a      	mov	r2, sp
 8029180:	f7ff ffc9 	bl	8029116 <__swhatbuf_r>
 8029184:	9900      	ldr	r1, [sp, #0]
 8029186:	4605      	mov	r5, r0
 8029188:	4630      	mov	r0, r6
 802918a:	f7ff f863 	bl	8028254 <_malloc_r>
 802918e:	b948      	cbnz	r0, 80291a4 <__smakebuf_r+0x44>
 8029190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029194:	059a      	lsls	r2, r3, #22
 8029196:	d4ef      	bmi.n	8029178 <__smakebuf_r+0x18>
 8029198:	f023 0303 	bic.w	r3, r3, #3
 802919c:	f043 0302 	orr.w	r3, r3, #2
 80291a0:	81a3      	strh	r3, [r4, #12]
 80291a2:	e7e3      	b.n	802916c <__smakebuf_r+0xc>
 80291a4:	4b0d      	ldr	r3, [pc, #52]	; (80291dc <__smakebuf_r+0x7c>)
 80291a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80291a8:	89a3      	ldrh	r3, [r4, #12]
 80291aa:	6020      	str	r0, [r4, #0]
 80291ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80291b0:	6120      	str	r0, [r4, #16]
 80291b2:	81a3      	strh	r3, [r4, #12]
 80291b4:	9b00      	ldr	r3, [sp, #0]
 80291b6:	6163      	str	r3, [r4, #20]
 80291b8:	9b01      	ldr	r3, [sp, #4]
 80291ba:	b15b      	cbz	r3, 80291d4 <__smakebuf_r+0x74>
 80291bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80291c0:	4630      	mov	r0, r6
 80291c2:	f000 f89f 	bl	8029304 <_isatty_r>
 80291c6:	b128      	cbz	r0, 80291d4 <__smakebuf_r+0x74>
 80291c8:	89a3      	ldrh	r3, [r4, #12]
 80291ca:	f023 0303 	bic.w	r3, r3, #3
 80291ce:	f043 0301 	orr.w	r3, r3, #1
 80291d2:	81a3      	strh	r3, [r4, #12]
 80291d4:	89a0      	ldrh	r0, [r4, #12]
 80291d6:	4305      	orrs	r5, r0
 80291d8:	81a5      	strh	r5, [r4, #12]
 80291da:	e7cd      	b.n	8029178 <__smakebuf_r+0x18>
 80291dc:	08028f6d 	.word	0x08028f6d

080291e0 <memchr>:
 80291e0:	b2c9      	uxtb	r1, r1
 80291e2:	4402      	add	r2, r0
 80291e4:	b510      	push	{r4, lr}
 80291e6:	4290      	cmp	r0, r2
 80291e8:	4603      	mov	r3, r0
 80291ea:	d101      	bne.n	80291f0 <memchr+0x10>
 80291ec:	2300      	movs	r3, #0
 80291ee:	e003      	b.n	80291f8 <memchr+0x18>
 80291f0:	781c      	ldrb	r4, [r3, #0]
 80291f2:	3001      	adds	r0, #1
 80291f4:	428c      	cmp	r4, r1
 80291f6:	d1f6      	bne.n	80291e6 <memchr+0x6>
 80291f8:	4618      	mov	r0, r3
 80291fa:	bd10      	pop	{r4, pc}

080291fc <__malloc_lock>:
 80291fc:	4801      	ldr	r0, [pc, #4]	; (8029204 <__malloc_lock+0x8>)
 80291fe:	f7ff bf87 	b.w	8029110 <__retarget_lock_acquire_recursive>
 8029202:	bf00      	nop
 8029204:	20197d8d 	.word	0x20197d8d

08029208 <__malloc_unlock>:
 8029208:	4801      	ldr	r0, [pc, #4]	; (8029210 <__malloc_unlock+0x8>)
 802920a:	f7ff bf83 	b.w	8029114 <__retarget_lock_release_recursive>
 802920e:	bf00      	nop
 8029210:	20197d8d 	.word	0x20197d8d

08029214 <__sread>:
 8029214:	b510      	push	{r4, lr}
 8029216:	460c      	mov	r4, r1
 8029218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802921c:	f000 f894 	bl	8029348 <_read_r>
 8029220:	2800      	cmp	r0, #0
 8029222:	bfab      	itete	ge
 8029224:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8029226:	89a3      	ldrhlt	r3, [r4, #12]
 8029228:	181b      	addge	r3, r3, r0
 802922a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802922e:	bfac      	ite	ge
 8029230:	6563      	strge	r3, [r4, #84]	; 0x54
 8029232:	81a3      	strhlt	r3, [r4, #12]
 8029234:	bd10      	pop	{r4, pc}

08029236 <__swrite>:
 8029236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802923a:	461f      	mov	r7, r3
 802923c:	898b      	ldrh	r3, [r1, #12]
 802923e:	4605      	mov	r5, r0
 8029240:	460c      	mov	r4, r1
 8029242:	05db      	lsls	r3, r3, #23
 8029244:	4616      	mov	r6, r2
 8029246:	d505      	bpl.n	8029254 <__swrite+0x1e>
 8029248:	2302      	movs	r3, #2
 802924a:	2200      	movs	r2, #0
 802924c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029250:	f000 f868 	bl	8029324 <_lseek_r>
 8029254:	89a3      	ldrh	r3, [r4, #12]
 8029256:	4632      	mov	r2, r6
 8029258:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802925c:	4628      	mov	r0, r5
 802925e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8029262:	81a3      	strh	r3, [r4, #12]
 8029264:	463b      	mov	r3, r7
 8029266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802926a:	f000 b817 	b.w	802929c <_write_r>

0802926e <__sseek>:
 802926e:	b510      	push	{r4, lr}
 8029270:	460c      	mov	r4, r1
 8029272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029276:	f000 f855 	bl	8029324 <_lseek_r>
 802927a:	1c43      	adds	r3, r0, #1
 802927c:	89a3      	ldrh	r3, [r4, #12]
 802927e:	bf15      	itete	ne
 8029280:	6560      	strne	r0, [r4, #84]	; 0x54
 8029282:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8029286:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802928a:	81a3      	strheq	r3, [r4, #12]
 802928c:	bf18      	it	ne
 802928e:	81a3      	strhne	r3, [r4, #12]
 8029290:	bd10      	pop	{r4, pc}

08029292 <__sclose>:
 8029292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029296:	f000 b813 	b.w	80292c0 <_close_r>
	...

0802929c <_write_r>:
 802929c:	b538      	push	{r3, r4, r5, lr}
 802929e:	4604      	mov	r4, r0
 80292a0:	4d06      	ldr	r5, [pc, #24]	; (80292bc <_write_r+0x20>)
 80292a2:	4608      	mov	r0, r1
 80292a4:	4611      	mov	r1, r2
 80292a6:	2200      	movs	r2, #0
 80292a8:	602a      	str	r2, [r5, #0]
 80292aa:	461a      	mov	r2, r3
 80292ac:	f7d8 fbdb 	bl	8001a66 <_write>
 80292b0:	1c43      	adds	r3, r0, #1
 80292b2:	d102      	bne.n	80292ba <_write_r+0x1e>
 80292b4:	682b      	ldr	r3, [r5, #0]
 80292b6:	b103      	cbz	r3, 80292ba <_write_r+0x1e>
 80292b8:	6023      	str	r3, [r4, #0]
 80292ba:	bd38      	pop	{r3, r4, r5, pc}
 80292bc:	20197d90 	.word	0x20197d90

080292c0 <_close_r>:
 80292c0:	b538      	push	{r3, r4, r5, lr}
 80292c2:	2300      	movs	r3, #0
 80292c4:	4d05      	ldr	r5, [pc, #20]	; (80292dc <_close_r+0x1c>)
 80292c6:	4604      	mov	r4, r0
 80292c8:	4608      	mov	r0, r1
 80292ca:	602b      	str	r3, [r5, #0]
 80292cc:	f7d8 fbe7 	bl	8001a9e <_close>
 80292d0:	1c43      	adds	r3, r0, #1
 80292d2:	d102      	bne.n	80292da <_close_r+0x1a>
 80292d4:	682b      	ldr	r3, [r5, #0]
 80292d6:	b103      	cbz	r3, 80292da <_close_r+0x1a>
 80292d8:	6023      	str	r3, [r4, #0]
 80292da:	bd38      	pop	{r3, r4, r5, pc}
 80292dc:	20197d90 	.word	0x20197d90

080292e0 <_fstat_r>:
 80292e0:	b538      	push	{r3, r4, r5, lr}
 80292e2:	2300      	movs	r3, #0
 80292e4:	4d06      	ldr	r5, [pc, #24]	; (8029300 <_fstat_r+0x20>)
 80292e6:	4604      	mov	r4, r0
 80292e8:	4608      	mov	r0, r1
 80292ea:	4611      	mov	r1, r2
 80292ec:	602b      	str	r3, [r5, #0]
 80292ee:	f7d8 fbe2 	bl	8001ab6 <_fstat>
 80292f2:	1c43      	adds	r3, r0, #1
 80292f4:	d102      	bne.n	80292fc <_fstat_r+0x1c>
 80292f6:	682b      	ldr	r3, [r5, #0]
 80292f8:	b103      	cbz	r3, 80292fc <_fstat_r+0x1c>
 80292fa:	6023      	str	r3, [r4, #0]
 80292fc:	bd38      	pop	{r3, r4, r5, pc}
 80292fe:	bf00      	nop
 8029300:	20197d90 	.word	0x20197d90

08029304 <_isatty_r>:
 8029304:	b538      	push	{r3, r4, r5, lr}
 8029306:	2300      	movs	r3, #0
 8029308:	4d05      	ldr	r5, [pc, #20]	; (8029320 <_isatty_r+0x1c>)
 802930a:	4604      	mov	r4, r0
 802930c:	4608      	mov	r0, r1
 802930e:	602b      	str	r3, [r5, #0]
 8029310:	f7d8 fbe1 	bl	8001ad6 <_isatty>
 8029314:	1c43      	adds	r3, r0, #1
 8029316:	d102      	bne.n	802931e <_isatty_r+0x1a>
 8029318:	682b      	ldr	r3, [r5, #0]
 802931a:	b103      	cbz	r3, 802931e <_isatty_r+0x1a>
 802931c:	6023      	str	r3, [r4, #0]
 802931e:	bd38      	pop	{r3, r4, r5, pc}
 8029320:	20197d90 	.word	0x20197d90

08029324 <_lseek_r>:
 8029324:	b538      	push	{r3, r4, r5, lr}
 8029326:	4604      	mov	r4, r0
 8029328:	4d06      	ldr	r5, [pc, #24]	; (8029344 <_lseek_r+0x20>)
 802932a:	4608      	mov	r0, r1
 802932c:	4611      	mov	r1, r2
 802932e:	2200      	movs	r2, #0
 8029330:	602a      	str	r2, [r5, #0]
 8029332:	461a      	mov	r2, r3
 8029334:	f7d8 fbda 	bl	8001aec <_lseek>
 8029338:	1c43      	adds	r3, r0, #1
 802933a:	d102      	bne.n	8029342 <_lseek_r+0x1e>
 802933c:	682b      	ldr	r3, [r5, #0]
 802933e:	b103      	cbz	r3, 8029342 <_lseek_r+0x1e>
 8029340:	6023      	str	r3, [r4, #0]
 8029342:	bd38      	pop	{r3, r4, r5, pc}
 8029344:	20197d90 	.word	0x20197d90

08029348 <_read_r>:
 8029348:	b538      	push	{r3, r4, r5, lr}
 802934a:	4604      	mov	r4, r0
 802934c:	4d06      	ldr	r5, [pc, #24]	; (8029368 <_read_r+0x20>)
 802934e:	4608      	mov	r0, r1
 8029350:	4611      	mov	r1, r2
 8029352:	2200      	movs	r2, #0
 8029354:	602a      	str	r2, [r5, #0]
 8029356:	461a      	mov	r2, r3
 8029358:	f7d8 fb68 	bl	8001a2c <_read>
 802935c:	1c43      	adds	r3, r0, #1
 802935e:	d102      	bne.n	8029366 <_read_r+0x1e>
 8029360:	682b      	ldr	r3, [r5, #0]
 8029362:	b103      	cbz	r3, 8029366 <_read_r+0x1e>
 8029364:	6023      	str	r3, [r4, #0]
 8029366:	bd38      	pop	{r3, r4, r5, pc}
 8029368:	20197d90 	.word	0x20197d90

0802936c <_init>:
 802936c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802936e:	bf00      	nop
 8029370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029372:	bc08      	pop	{r3}
 8029374:	469e      	mov	lr, r3
 8029376:	4770      	bx	lr

08029378 <_fini>:
 8029378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802937a:	bf00      	nop
 802937c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802937e:	bc08      	pop	{r3}
 8029380:	469e      	mov	lr, r3
 8029382:	4770      	bx	lr
