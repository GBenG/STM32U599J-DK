
STM32U5A9J-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000026c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002a164  0800026c  0800026c  0001026c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003014  0802a3d0  0802a3d0  0003a3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000018  0802d3e4  0802d3e4  0003d3e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  0802d3fc  0802d3fc  0003d3fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   0000001c  0802d404  0802d404  0003d404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000008  0802d420  0802d420  0003d420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000012c  20000000  0802d428  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 TouchGFX_Framebuffer 00151800  2000012c  0802d554  0004012c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000465c4  20151930  0817ed54  00191930  2**3
                  ALLOC
 10 ._user_heap_stack 00001804  20197ef4  0817ed54  00197ef4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  001a01b8  2**0
                  CONTENTS, READONLY
 12 FontFlashSection 000001a8  90000000  90000000  001a0000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 TextFlashSection 00000010  900001a8  900001a8  001a01a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 ExtFlashSection 00000000  900001b8  900001b8  001a01ee  2**0
                  CONTENTS
 15 .debug_info   000b3974  00000000  00000000  001a01ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00015831  00000000  00000000  00253b62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000038f0  00000000  00000000  00269398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00003c80  00000000  00000000  0026cc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0005280e  00000000  00000000  00270908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0005eb0f  00000000  00000000  002c3116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001b42df  00000000  00000000  00321c25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      000000cf  00000000  00000000  004d5f04  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000d6a8  00000000  00000000  004d5fd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loc    00006947  00000000  00000000  004e367c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800026c <__do_global_dtors_aux>:
 800026c:	b510      	push	{r4, lr}
 800026e:	4c05      	ldr	r4, [pc, #20]	; (8000284 <__do_global_dtors_aux+0x18>)
 8000270:	7823      	ldrb	r3, [r4, #0]
 8000272:	b933      	cbnz	r3, 8000282 <__do_global_dtors_aux+0x16>
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <__do_global_dtors_aux+0x1c>)
 8000276:	b113      	cbz	r3, 800027e <__do_global_dtors_aux+0x12>
 8000278:	4804      	ldr	r0, [pc, #16]	; (800028c <__do_global_dtors_aux+0x20>)
 800027a:	e000      	b.n	800027e <__do_global_dtors_aux+0x12>
 800027c:	bf00      	nop
 800027e:	2301      	movs	r3, #1
 8000280:	7023      	strb	r3, [r4, #0]
 8000282:	bd10      	pop	{r4, pc}
 8000284:	20151930 	.word	0x20151930
 8000288:	00000000 	.word	0x00000000
 800028c:	0802a3b8 	.word	0x0802a3b8

08000290 <frame_dummy>:
 8000290:	b508      	push	{r3, lr}
 8000292:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <frame_dummy+0x10>)
 8000294:	b11b      	cbz	r3, 800029e <frame_dummy+0xe>
 8000296:	4903      	ldr	r1, [pc, #12]	; (80002a4 <frame_dummy+0x14>)
 8000298:	4803      	ldr	r0, [pc, #12]	; (80002a8 <frame_dummy+0x18>)
 800029a:	e000      	b.n	800029e <frame_dummy+0xe>
 800029c:	bf00      	nop
 800029e:	bd08      	pop	{r3, pc}
 80002a0:	00000000 	.word	0x00000000
 80002a4:	20151934 	.word	0x20151934
 80002a8:	0802a3b8 	.word	0x0802a3b8

080002ac <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 80002ac:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002ae:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002b2:	4917      	ldr	r1, [pc, #92]	; (8000310 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 80002b4:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002b8:	4816      	ldr	r0, [pc, #88]	; (8000314 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 80002ba:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 80002bc:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 80002c0:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002c2:	4815      	ldr	r0, [pc, #84]	; (8000318 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002c4:	4912      	ldr	r1, [pc, #72]	; (8000310 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 80002c6:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 80002c8:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002ca:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 80002ce:	4913      	ldr	r1, [pc, #76]	; (800031c <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 80002d0:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 80002d2:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002d6:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002d8:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002dc:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002e0:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002e4:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002e8:	490d      	ldr	r1, [pc, #52]	; (8000320 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002ea:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002ee:	4770      	bx	lr

080002f0 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002f0:	f7ff bffe 	b.w	80002f0 <__tx_BadHandler>

080002f4 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002f4:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002f6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002fa:	4770      	bx	lr

080002fc <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002fc:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002fe:	f000 f89f 	bl	8000440 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 8000302:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 8000306:	4770      	bx	lr

08000308 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000308:	f7ff bffe 	b.w	8000308 <__tx_NMIHandler>

0800030c <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 800030c:	f7ff bffe 	b.w	800030c <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000310:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000314:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 8000318:	201973d0 	.word	0x201973d0
    LDR     r1, =SYSTICK_CYCLES
 800031c:	000270ff 	.word	0x000270ff
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000320:	40ff0000 	.word	0x40ff0000

08000324 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 8000324:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000328:	4a31      	ldr	r2, [pc, #196]	; (80003f0 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 800032a:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 800032c:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 8000330:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000334:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000338:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 800033a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800033e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 8000342:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000346:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 800034a:	f3bf 8f6f 	isb	sy

0800034e <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800034e:	e7fe      	b.n	800034e <__tx_wait_here>

08000350 <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000350:	4828      	ldr	r0, [pc, #160]	; (80003f4 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000352:	4a29      	ldr	r2, [pc, #164]	; (80003f8 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000354:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000358:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 800035a:	b191      	cbz	r1, 8000382 <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 800035c:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800035e:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 8000362:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000366:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 800036a:	d101      	bne.n	8000370 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 800036c:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000370 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000370:	4c22      	ldr	r4, [pc, #136]	; (80003fc <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 8000372:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000376:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 800037a:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 800037c:	b10d      	cbz	r5, 8000382 <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800037e:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000380:	6023      	str	r3, [r4, #0]

08000382 <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000382:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000384:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000386:	b1d1      	cbz	r1, 80003be <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000388:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800038a:	b662      	cpsie	i

0800038c <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 800038c:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800038e:	4c1b      	ldr	r4, [pc, #108]	; (80003fc <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000390:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 8000392:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000396:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000398:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 800039a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800039e:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80003a2:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80003a6:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003aa:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80003ae:	d101      	bne.n	80003b4 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80003b0:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080003b4 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80003b4:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80003b8:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 80003bc:	4770      	bx	lr

080003be <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003be:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003c0:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003c2:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003c4:	b949      	cbnz	r1, 80003da <__tx_ts_ready>

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 80003c6:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_enter                      // Possibly enter low power mode
 80003c8:	f002 f948 	bl	800265c <tx_low_power_enter>
    POP     {r0-r3}
 80003cc:	bc0f      	pop	{r0, r1, r2, r3}
    WFI                                             // Wait for interrupt
    ISB                                             // Ensure pipeline is flushed
#endif

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 80003ce:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_exit                       // Exit low power mode
 80003d0:	f002 f94e 	bl	8002670 <tx_low_power_exit>
    POP     {r0-r3}
 80003d4:	bc0f      	pop	{r0, r1, r2, r3}

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003d6:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003d8:	e7f1      	b.n	80003be <__tx_ts_wait>

080003da <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003da:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003de:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003e2:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003e6:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003e8:	e7d0      	b.n	800038c <__tx_ts_restore>
 80003ea:	bf00      	nop

080003ec <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003ec:	4770      	bx	lr
 80003ee:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003f0:	2019746c 	.word	0x2019746c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003f4:	201973d4 	.word	0x201973d4
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003f8:	201973d8 	.word	0x201973d8
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003fc:	201979d8 	.word	0x201979d8

08000400 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000400:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000402:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000406:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 800040a:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 800040e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000410:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000414:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000416:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000418:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800041a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800041c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800041e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000420:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000422:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000424:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000426:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000428:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800042a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800042c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800042e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000432:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000434:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000436:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800043a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800043c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800043e:	4770      	bx	lr

08000440 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000440:	4922      	ldr	r1, [pc, #136]	; (80004cc <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000442:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000444:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000448:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800044a:	4b21      	ldr	r3, [pc, #132]	; (80004d0 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800044c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800044e:	b13a      	cbz	r2, 8000460 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000450:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000454:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000456:	b91a      	cbnz	r2, 8000460 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000458:	4b1e      	ldr	r3, [pc, #120]	; (80004d4 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 800045a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800045e:	6018      	str	r0, [r3, #0]

08000460 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000460:	491d      	ldr	r1, [pc, #116]	; (80004d8 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000462:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000464:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000466:	b122      	cbz	r2, 8000472 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000468:	4b1c      	ldr	r3, [pc, #112]	; (80004dc <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 800046a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800046e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000470:	e008      	b.n	8000484 <__tx_timer_done>

08000472 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000472:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000476:	4b1a      	ldr	r3, [pc, #104]	; (80004e0 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000478:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800047a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800047c:	d101      	bne.n	8000482 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800047e:	4b19      	ldr	r3, [pc, #100]	; (80004e4 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000480:	6818      	ldr	r0, [r3, #0]

08000482 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000482:	6008      	str	r0, [r1, #0]

08000484 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000486:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000488:	b912      	cbnz	r2, 8000490 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800048a:	4914      	ldr	r1, [pc, #80]	; (80004dc <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800048c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800048e:	b1c8      	cbz	r0, 80004c4 <__tx_timer_nothing_expired>

08000490 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000490:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 8000492:	4912      	ldr	r1, [pc, #72]	; (80004dc <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000494:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000496:	b108      	cbz	r0, 800049c <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000498:	f015 fa12 	bl	80158c0 <_tx_timer_expiration_process>

0800049c <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 800049c:	4b0d      	ldr	r3, [pc, #52]	; (80004d4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800049e:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80004a0:	b172      	cbz	r2, 80004c0 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80004a2:	f015 f97f 	bl	80157a4 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004a6:	4810      	ldr	r0, [pc, #64]	; (80004e8 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80004a8:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80004aa:	b949      	cbnz	r1, 80004c0 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004ac:	480f      	ldr	r0, [pc, #60]	; (80004ec <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80004ae:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004b0:	4a0f      	ldr	r2, [pc, #60]	; (80004f0 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80004b2:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004b4:	480f      	ldr	r0, [pc, #60]	; (80004f4 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80004b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80004ba:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80004bc:	d000      	beq.n	80004c0 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80004be:	6002      	str	r2, [r0, #0]

080004c0 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 80004c0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080004c4 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80004c4:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80004c8:	4770      	bx	lr
 80004ca:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004cc:	20197478 	.word	0x20197478
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004d0:	201979d8 	.word	0x201979d8
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004d4:	2019747c 	.word	0x2019747c
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004d8:	20197508 	.word	0x20197508
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004dc:	2019750c 	.word	0x2019750c
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004e0:	20197504 	.word	0x20197504
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004e4:	20197500 	.word	0x20197500
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004e8:	2019746c 	.word	0x2019746c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004ec:	201973d4 	.word	0x201973d4
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004f0:	201973d8 	.word	0x201973d8
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004f4:	e000ed04 	.word	0xe000ed04

080004f8 <__aeabi_uldivmod>:
 80004f8:	b953      	cbnz	r3, 8000510 <__aeabi_uldivmod+0x18>
 80004fa:	b94a      	cbnz	r2, 8000510 <__aeabi_uldivmod+0x18>
 80004fc:	2900      	cmp	r1, #0
 80004fe:	bf08      	it	eq
 8000500:	2800      	cmpeq	r0, #0
 8000502:	bf1c      	itt	ne
 8000504:	f04f 31ff 	movne.w	r1, #4294967295
 8000508:	f04f 30ff 	movne.w	r0, #4294967295
 800050c:	f000 b982 	b.w	8000814 <__aeabi_idiv0>
 8000510:	f1ad 0c08 	sub.w	ip, sp, #8
 8000514:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000518:	f000 f806 	bl	8000528 <__udivmoddi4>
 800051c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000520:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000524:	b004      	add	sp, #16
 8000526:	4770      	bx	lr

08000528 <__udivmoddi4>:
 8000528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800052c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800052e:	4604      	mov	r4, r0
 8000530:	460f      	mov	r7, r1
 8000532:	2b00      	cmp	r3, #0
 8000534:	d148      	bne.n	80005c8 <__udivmoddi4+0xa0>
 8000536:	428a      	cmp	r2, r1
 8000538:	4694      	mov	ip, r2
 800053a:	d961      	bls.n	8000600 <__udivmoddi4+0xd8>
 800053c:	fab2 f382 	clz	r3, r2
 8000540:	b143      	cbz	r3, 8000554 <__udivmoddi4+0x2c>
 8000542:	f1c3 0120 	rsb	r1, r3, #32
 8000546:	409f      	lsls	r7, r3
 8000548:	fa02 fc03 	lsl.w	ip, r2, r3
 800054c:	409c      	lsls	r4, r3
 800054e:	fa20 f101 	lsr.w	r1, r0, r1
 8000552:	430f      	orrs	r7, r1
 8000554:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	0c22      	lsrs	r2, r4, #16
 800055e:	fbb7 f6f1 	udiv	r6, r7, r1
 8000562:	fb01 7716 	mls	r7, r1, r6, r7
 8000566:	fb06 f00e 	mul.w	r0, r6, lr
 800056a:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800056e:	4290      	cmp	r0, r2
 8000570:	d908      	bls.n	8000584 <__udivmoddi4+0x5c>
 8000572:	eb1c 0202 	adds.w	r2, ip, r2
 8000576:	f106 37ff 	add.w	r7, r6, #4294967295
 800057a:	d202      	bcs.n	8000582 <__udivmoddi4+0x5a>
 800057c:	4290      	cmp	r0, r2
 800057e:	f200 8137 	bhi.w	80007f0 <__udivmoddi4+0x2c8>
 8000582:	463e      	mov	r6, r7
 8000584:	1a12      	subs	r2, r2, r0
 8000586:	b2a4      	uxth	r4, r4
 8000588:	fbb2 f0f1 	udiv	r0, r2, r1
 800058c:	fb01 2210 	mls	r2, r1, r0, r2
 8000590:	fb00 fe0e 	mul.w	lr, r0, lr
 8000594:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000598:	45a6      	cmp	lr, r4
 800059a:	d908      	bls.n	80005ae <__udivmoddi4+0x86>
 800059c:	eb1c 0404 	adds.w	r4, ip, r4
 80005a0:	f100 32ff 	add.w	r2, r0, #4294967295
 80005a4:	d202      	bcs.n	80005ac <__udivmoddi4+0x84>
 80005a6:	45a6      	cmp	lr, r4
 80005a8:	f200 811c 	bhi.w	80007e4 <__udivmoddi4+0x2bc>
 80005ac:	4610      	mov	r0, r2
 80005ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005b2:	eba4 040e 	sub.w	r4, r4, lr
 80005b6:	2600      	movs	r6, #0
 80005b8:	b11d      	cbz	r5, 80005c2 <__udivmoddi4+0x9a>
 80005ba:	40dc      	lsrs	r4, r3
 80005bc:	2300      	movs	r3, #0
 80005be:	e9c5 4300 	strd	r4, r3, [r5]
 80005c2:	4631      	mov	r1, r6
 80005c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005c8:	428b      	cmp	r3, r1
 80005ca:	d909      	bls.n	80005e0 <__udivmoddi4+0xb8>
 80005cc:	2d00      	cmp	r5, #0
 80005ce:	f000 80fd 	beq.w	80007cc <__udivmoddi4+0x2a4>
 80005d2:	2600      	movs	r6, #0
 80005d4:	e9c5 0100 	strd	r0, r1, [r5]
 80005d8:	4630      	mov	r0, r6
 80005da:	4631      	mov	r1, r6
 80005dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005e0:	fab3 f683 	clz	r6, r3
 80005e4:	2e00      	cmp	r6, #0
 80005e6:	d14b      	bne.n	8000680 <__udivmoddi4+0x158>
 80005e8:	428b      	cmp	r3, r1
 80005ea:	f0c0 80f2 	bcc.w	80007d2 <__udivmoddi4+0x2aa>
 80005ee:	4282      	cmp	r2, r0
 80005f0:	f240 80ef 	bls.w	80007d2 <__udivmoddi4+0x2aa>
 80005f4:	4630      	mov	r0, r6
 80005f6:	2d00      	cmp	r5, #0
 80005f8:	d0e3      	beq.n	80005c2 <__udivmoddi4+0x9a>
 80005fa:	e9c5 4700 	strd	r4, r7, [r5]
 80005fe:	e7e0      	b.n	80005c2 <__udivmoddi4+0x9a>
 8000600:	b902      	cbnz	r2, 8000604 <__udivmoddi4+0xdc>
 8000602:	deff      	udf	#255	; 0xff
 8000604:	fab2 f382 	clz	r3, r2
 8000608:	2b00      	cmp	r3, #0
 800060a:	f040 809d 	bne.w	8000748 <__udivmoddi4+0x220>
 800060e:	1a89      	subs	r1, r1, r2
 8000610:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000614:	b297      	uxth	r7, r2
 8000616:	2601      	movs	r6, #1
 8000618:	0c20      	lsrs	r0, r4, #16
 800061a:	fbb1 f2fe 	udiv	r2, r1, lr
 800061e:	fb0e 1112 	mls	r1, lr, r2, r1
 8000622:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000626:	fb07 f002 	mul.w	r0, r7, r2
 800062a:	4288      	cmp	r0, r1
 800062c:	d90f      	bls.n	800064e <__udivmoddi4+0x126>
 800062e:	eb1c 0101 	adds.w	r1, ip, r1
 8000632:	f102 38ff 	add.w	r8, r2, #4294967295
 8000636:	bf2c      	ite	cs
 8000638:	f04f 0901 	movcs.w	r9, #1
 800063c:	f04f 0900 	movcc.w	r9, #0
 8000640:	4288      	cmp	r0, r1
 8000642:	d903      	bls.n	800064c <__udivmoddi4+0x124>
 8000644:	f1b9 0f00 	cmp.w	r9, #0
 8000648:	f000 80cf 	beq.w	80007ea <__udivmoddi4+0x2c2>
 800064c:	4642      	mov	r2, r8
 800064e:	1a09      	subs	r1, r1, r0
 8000650:	b2a4      	uxth	r4, r4
 8000652:	fbb1 f0fe 	udiv	r0, r1, lr
 8000656:	fb0e 1110 	mls	r1, lr, r0, r1
 800065a:	fb00 f707 	mul.w	r7, r0, r7
 800065e:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000662:	42a7      	cmp	r7, r4
 8000664:	d908      	bls.n	8000678 <__udivmoddi4+0x150>
 8000666:	eb1c 0404 	adds.w	r4, ip, r4
 800066a:	f100 31ff 	add.w	r1, r0, #4294967295
 800066e:	d202      	bcs.n	8000676 <__udivmoddi4+0x14e>
 8000670:	42a7      	cmp	r7, r4
 8000672:	f200 80b4 	bhi.w	80007de <__udivmoddi4+0x2b6>
 8000676:	4608      	mov	r0, r1
 8000678:	1be4      	subs	r4, r4, r7
 800067a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800067e:	e79b      	b.n	80005b8 <__udivmoddi4+0x90>
 8000680:	f1c6 0720 	rsb	r7, r6, #32
 8000684:	40b3      	lsls	r3, r6
 8000686:	fa01 f406 	lsl.w	r4, r1, r6
 800068a:	fa22 fc07 	lsr.w	ip, r2, r7
 800068e:	40f9      	lsrs	r1, r7
 8000690:	40b2      	lsls	r2, r6
 8000692:	ea4c 0c03 	orr.w	ip, ip, r3
 8000696:	fa20 f307 	lsr.w	r3, r0, r7
 800069a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800069e:	431c      	orrs	r4, r3
 80006a0:	fa1f fe8c 	uxth.w	lr, ip
 80006a4:	fa00 f306 	lsl.w	r3, r0, r6
 80006a8:	0c20      	lsrs	r0, r4, #16
 80006aa:	fbb1 f8f9 	udiv	r8, r1, r9
 80006ae:	fb09 1118 	mls	r1, r9, r8, r1
 80006b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006b6:	fb08 f00e 	mul.w	r0, r8, lr
 80006ba:	4288      	cmp	r0, r1
 80006bc:	d90f      	bls.n	80006de <__udivmoddi4+0x1b6>
 80006be:	eb1c 0101 	adds.w	r1, ip, r1
 80006c2:	f108 3aff 	add.w	sl, r8, #4294967295
 80006c6:	bf2c      	ite	cs
 80006c8:	f04f 0b01 	movcs.w	fp, #1
 80006cc:	f04f 0b00 	movcc.w	fp, #0
 80006d0:	4288      	cmp	r0, r1
 80006d2:	d903      	bls.n	80006dc <__udivmoddi4+0x1b4>
 80006d4:	f1bb 0f00 	cmp.w	fp, #0
 80006d8:	f000 808d 	beq.w	80007f6 <__udivmoddi4+0x2ce>
 80006dc:	46d0      	mov	r8, sl
 80006de:	1a09      	subs	r1, r1, r0
 80006e0:	b2a4      	uxth	r4, r4
 80006e2:	fbb1 f0f9 	udiv	r0, r1, r9
 80006e6:	fb09 1110 	mls	r1, r9, r0, r1
 80006ea:	fb00 fe0e 	mul.w	lr, r0, lr
 80006ee:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80006f2:	458e      	cmp	lr, r1
 80006f4:	d907      	bls.n	8000706 <__udivmoddi4+0x1de>
 80006f6:	eb1c 0101 	adds.w	r1, ip, r1
 80006fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80006fe:	d201      	bcs.n	8000704 <__udivmoddi4+0x1dc>
 8000700:	458e      	cmp	lr, r1
 8000702:	d87f      	bhi.n	8000804 <__udivmoddi4+0x2dc>
 8000704:	4620      	mov	r0, r4
 8000706:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800070a:	eba1 010e 	sub.w	r1, r1, lr
 800070e:	fba0 9802 	umull	r9, r8, r0, r2
 8000712:	4541      	cmp	r1, r8
 8000714:	464c      	mov	r4, r9
 8000716:	46c6      	mov	lr, r8
 8000718:	d302      	bcc.n	8000720 <__udivmoddi4+0x1f8>
 800071a:	d106      	bne.n	800072a <__udivmoddi4+0x202>
 800071c:	454b      	cmp	r3, r9
 800071e:	d204      	bcs.n	800072a <__udivmoddi4+0x202>
 8000720:	3801      	subs	r0, #1
 8000722:	ebb9 0402 	subs.w	r4, r9, r2
 8000726:	eb68 0e0c 	sbc.w	lr, r8, ip
 800072a:	2d00      	cmp	r5, #0
 800072c:	d070      	beq.n	8000810 <__udivmoddi4+0x2e8>
 800072e:	1b1a      	subs	r2, r3, r4
 8000730:	eb61 010e 	sbc.w	r1, r1, lr
 8000734:	fa22 f306 	lsr.w	r3, r2, r6
 8000738:	fa01 f707 	lsl.w	r7, r1, r7
 800073c:	40f1      	lsrs	r1, r6
 800073e:	2600      	movs	r6, #0
 8000740:	431f      	orrs	r7, r3
 8000742:	e9c5 7100 	strd	r7, r1, [r5]
 8000746:	e73c      	b.n	80005c2 <__udivmoddi4+0x9a>
 8000748:	fa02 fc03 	lsl.w	ip, r2, r3
 800074c:	f1c3 0020 	rsb	r0, r3, #32
 8000750:	fa01 f203 	lsl.w	r2, r1, r3
 8000754:	fa21 f600 	lsr.w	r6, r1, r0
 8000758:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800075c:	fa24 f100 	lsr.w	r1, r4, r0
 8000760:	fa1f f78c 	uxth.w	r7, ip
 8000764:	409c      	lsls	r4, r3
 8000766:	4311      	orrs	r1, r2
 8000768:	fbb6 f0fe 	udiv	r0, r6, lr
 800076c:	0c0a      	lsrs	r2, r1, #16
 800076e:	fb0e 6610 	mls	r6, lr, r0, r6
 8000772:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000776:	fb00 f607 	mul.w	r6, r0, r7
 800077a:	4296      	cmp	r6, r2
 800077c:	d90e      	bls.n	800079c <__udivmoddi4+0x274>
 800077e:	eb1c 0202 	adds.w	r2, ip, r2
 8000782:	f100 38ff 	add.w	r8, r0, #4294967295
 8000786:	bf2c      	ite	cs
 8000788:	f04f 0901 	movcs.w	r9, #1
 800078c:	f04f 0900 	movcc.w	r9, #0
 8000790:	4296      	cmp	r6, r2
 8000792:	d902      	bls.n	800079a <__udivmoddi4+0x272>
 8000794:	f1b9 0f00 	cmp.w	r9, #0
 8000798:	d031      	beq.n	80007fe <__udivmoddi4+0x2d6>
 800079a:	4640      	mov	r0, r8
 800079c:	1b92      	subs	r2, r2, r6
 800079e:	b289      	uxth	r1, r1
 80007a0:	fbb2 f6fe 	udiv	r6, r2, lr
 80007a4:	fb0e 2216 	mls	r2, lr, r6, r2
 80007a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80007ac:	fb06 f207 	mul.w	r2, r6, r7
 80007b0:	428a      	cmp	r2, r1
 80007b2:	d907      	bls.n	80007c4 <__udivmoddi4+0x29c>
 80007b4:	eb1c 0101 	adds.w	r1, ip, r1
 80007b8:	f106 38ff 	add.w	r8, r6, #4294967295
 80007bc:	d201      	bcs.n	80007c2 <__udivmoddi4+0x29a>
 80007be:	428a      	cmp	r2, r1
 80007c0:	d823      	bhi.n	800080a <__udivmoddi4+0x2e2>
 80007c2:	4646      	mov	r6, r8
 80007c4:	1a89      	subs	r1, r1, r2
 80007c6:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80007ca:	e725      	b.n	8000618 <__udivmoddi4+0xf0>
 80007cc:	462e      	mov	r6, r5
 80007ce:	4628      	mov	r0, r5
 80007d0:	e6f7      	b.n	80005c2 <__udivmoddi4+0x9a>
 80007d2:	1a84      	subs	r4, r0, r2
 80007d4:	eb61 0303 	sbc.w	r3, r1, r3
 80007d8:	2001      	movs	r0, #1
 80007da:	461f      	mov	r7, r3
 80007dc:	e70b      	b.n	80005f6 <__udivmoddi4+0xce>
 80007de:	4464      	add	r4, ip
 80007e0:	3802      	subs	r0, #2
 80007e2:	e749      	b.n	8000678 <__udivmoddi4+0x150>
 80007e4:	4464      	add	r4, ip
 80007e6:	3802      	subs	r0, #2
 80007e8:	e6e1      	b.n	80005ae <__udivmoddi4+0x86>
 80007ea:	3a02      	subs	r2, #2
 80007ec:	4461      	add	r1, ip
 80007ee:	e72e      	b.n	800064e <__udivmoddi4+0x126>
 80007f0:	3e02      	subs	r6, #2
 80007f2:	4462      	add	r2, ip
 80007f4:	e6c6      	b.n	8000584 <__udivmoddi4+0x5c>
 80007f6:	f1a8 0802 	sub.w	r8, r8, #2
 80007fa:	4461      	add	r1, ip
 80007fc:	e76f      	b.n	80006de <__udivmoddi4+0x1b6>
 80007fe:	3802      	subs	r0, #2
 8000800:	4462      	add	r2, ip
 8000802:	e7cb      	b.n	800079c <__udivmoddi4+0x274>
 8000804:	3802      	subs	r0, #2
 8000806:	4461      	add	r1, ip
 8000808:	e77d      	b.n	8000706 <__udivmoddi4+0x1de>
 800080a:	3e02      	subs	r6, #2
 800080c:	4461      	add	r1, ip
 800080e:	e7d9      	b.n	80007c4 <__udivmoddi4+0x29c>
 8000810:	462e      	mov	r6, r5
 8000812:	e6d6      	b.n	80005c2 <__udivmoddi4+0x9a>

08000814 <__aeabi_idiv0>:
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop

08000818 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af02      	add	r7, sp, #8
 800081e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000824:	2334      	movs	r3, #52	; 0x34
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800082c:	4a13      	ldr	r2, [pc, #76]	; (800087c <tx_application_define+0x64>)
 800082e:	4914      	ldr	r1, [pc, #80]	; (8000880 <tx_application_define+0x68>)
 8000830:	4814      	ldr	r0, [pc, #80]	; (8000884 <tx_application_define+0x6c>)
 8000832:	f015 faef 	bl	8015e14 <_txe_byte_pool_create>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d109      	bne.n	8000850 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <tx_application_define+0x6c>)
 800083e:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000840:	68b8      	ldr	r0, [r7, #8]
 8000842:	f000 f827 	bl	8000894 <App_ThreadX_Init>
 8000846:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d000      	beq.n	8000850 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800084e:	e7fe      	b.n	800084e <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&touchgfx_app_byte_pool, "TouchGFX App memory pool", touchgfx_byte_pool_buffer, TOUCHGFX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000850:	2334      	movs	r3, #52	; 0x34
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000858:	4a0b      	ldr	r2, [pc, #44]	; (8000888 <tx_application_define+0x70>)
 800085a:	490c      	ldr	r1, [pc, #48]	; (800088c <tx_application_define+0x74>)
 800085c:	480c      	ldr	r0, [pc, #48]	; (8000890 <tx_application_define+0x78>)
 800085e:	f015 fad9 	bl	8015e14 <_txe_byte_pool_create>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d104      	bne.n	8000872 <tx_application_define+0x5a>
  {
    /* USER CODE BEGIN TouchGFX_Byte_Pool_Success */

    /* USER CODE END TouchGFX_Byte_Pool_Success */

    memory_ptr = (VOID *)&touchgfx_app_byte_pool;
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <tx_application_define+0x78>)
 800086a:	60bb      	str	r3, [r7, #8]
    if (MX_TouchGFX_Init(memory_ptr) != TX_SUCCESS)
 800086c:	68b8      	ldr	r0, [r7, #8]
 800086e:	f001 fc31 	bl	80020d4 <MX_TouchGFX_Init>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000872:	bf00      	nop
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	2015194c 	.word	0x2015194c
 8000880:	0802a3d0 	.word	0x0802a3d0
 8000884:	20151d4c 	.word	0x20151d4c
 8000888:	20151d80 	.word	0x20151d80
 800088c:	0802a3e4 	.word	0x0802a3e4
 8000890:	20152d80 	.word	0x20152d80

08000894 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 800089c:	2300      	movs	r3, #0
 800089e:	60fb      	str	r3, [r7, #12]

  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */
  /* USER CODE END App_ThreadX_Init */

  return ret;
 80008a0:	68fb      	ldr	r3, [r7, #12]
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3714      	adds	r7, #20
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 80008b2:	f013 fdd9 	bl	8014468 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c0:	f006 ff7a 	bl	80077b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c4:	f000 f828 	bl	8000918 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80008c8:	f000 f885 	bl	80009d6 <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80008cc:	f000 f8b8 	bl	8000a40 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d0:	f000 fecc 	bl	800166c <MX_GPIO_Init>
  MX_ICACHE_Init();
 80008d4:	f000 fae6 	bl	8000ea4 <MX_ICACHE_Init>
  MX_CRC_Init();
 80008d8:	f000 f8c0 	bl	8000a5c <MX_CRC_Init>
  MX_TIM8_Init();
 80008dc:	f000 fdca 	bl	8001474 <MX_TIM8_Init>
  MX_DMA2D_Init();
 80008e0:	f000 f91a 	bl	8000b18 <MX_DMA2D_Init>
  MX_GPU2D_Init();
 80008e4:	f000 fa8a 	bl	8000dfc <MX_GPU2D_Init>
  MX_DSIHOST_DSI_Init();
 80008e8:	f000 f93a 	bl	8000b60 <MX_DSIHOST_DSI_Init>
  MX_LTDC_Init();
 80008ec:	f000 faee 	bl	8000ecc <MX_LTDC_Init>
  MX_OCTOSPI1_Init();
 80008f0:	f000 fd78 	bl	80013e4 <MX_OCTOSPI1_Init>
  MX_HSPI1_Init();
 80008f4:	f000 fa96 	bl	8000e24 <MX_HSPI1_Init>
  MX_DCACHE1_Init();
 80008f8:	f000 f8d2 	bl	8000aa0 <MX_DCACHE1_Init>
  MX_DCACHE2_Init();
 80008fc:	f000 f8ee 	bl	8000adc <MX_DCACHE2_Init>
  MX_USART1_UART_Init();
 8000900:	f000 fe68 	bl	80015d4 <MX_USART1_UART_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8000904:	f001 fbdd 	bl	80020c2 <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */
  printf("Hello VL53L5CX\r\n" );
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <main+0x58>)
 800090a:	f029 f8b3 	bl	8029a74 <puts>
  /* USER CODE END 2 */

  MX_ThreadX_Init();
 800090e:	f7ff ffce 	bl	80008ae <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000912:	e7fe      	b.n	8000912 <main+0x56>
 8000914:	0802a400 	.word	0x0802a400

08000918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b09e      	sub	sp, #120	; 0x78
 800091c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091e:	f107 0318 	add.w	r3, r7, #24
 8000922:	2260      	movs	r2, #96	; 0x60
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f028 fc46 	bl	80291b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092c:	463b      	mov	r3, r7
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]
 800093a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800093c:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000940:	f00b f9fc 	bl	800bd3c <HAL_PWREx_ControlVoltageScaling>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0x36>
  {
    Error_Handler();
 800094a:	f000 ffbd 	bl	80018c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_MSI;
 800094e:	2311      	movs	r3, #17
 8000950:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000952:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000956:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000958:	2301      	movs	r3, #1
 800095a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800095c:	2310      	movs	r3, #16
 800095e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000960:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000964:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000966:	2302      	movs	r3, #2
 8000968:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800096a:	2301      	movs	r3, #1
 800096c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000972:	2301      	movs	r3, #1
 8000974:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000976:	2350      	movs	r3, #80	; 0x50
 8000978:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800097a:	2302      	movs	r3, #2
 800097c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800097e:	2302      	movs	r3, #2
 8000980:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000982:	2302      	movs	r3, #2
 8000984:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8000986:	2300      	movs	r3, #0
 8000988:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098e:	f107 0318 	add.w	r3, r7, #24
 8000992:	4618      	mov	r0, r3
 8000994:	f00b face 	bl	800bf34 <HAL_RCC_OscConfig>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800099e:	f000 ff93 	bl	80018c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a2:	231f      	movs	r3, #31
 80009a4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a6:	2303      	movs	r3, #3
 80009a8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009ba:	463b      	mov	r3, r7
 80009bc:	2104      	movs	r1, #4
 80009be:	4618      	mov	r0, r3
 80009c0:	f00c f994 	bl	800ccec <HAL_RCC_ClockConfig>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80009ca:	f000 ff7d 	bl	80018c8 <Error_Handler>
  }
}
 80009ce:	bf00      	nop
 80009d0:	3778      	adds	r7, #120	; 0x78
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b0b8      	sub	sp, #224	; 0xe0
 80009da:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009dc:	463b      	mov	r3, r7
 80009de:	22e0      	movs	r2, #224	; 0xe0
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f028 fbe8 	bl	80291b8 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_DSI;
 80009e8:	f04f 0200 	mov.w	r2, #0
 80009ec:	f04f 0306 	mov.w	r3, #6
 80009f0:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_PLL3;
 80009f4:	2300      	movs	r3, #0
 80009f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL3;
 80009fa:	2300      	movs	r3, #0
 80009fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 8000a00:	2303      	movs	r3, #3
 8000a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.PLL3.PLL3M = 4;
 8000a04:	2304      	movs	r3, #4
 8000a06:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.PLL3.PLL3N = 125;
 8000a08:	237d      	movs	r3, #125	; 0x7d
 8000a0a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.PLL3.PLL3P = 8;
 8000a0c:	2308      	movs	r3, #8
 8000a0e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.PLL3.PLL3Q = 2;
 8000a10:	2302      	movs	r3, #2
 8000a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.PLL3.PLL3R = 24;
 8000a14:	2318      	movs	r3, #24
 8000a16:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLL3.PLL3FRACN = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVP|RCC_PLL3_DIVR;
 8000a20:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a26:	463b      	mov	r3, r7
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f00c fd6d 	bl	800d508 <HAL_RCCEx_PeriphCLKConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <PeriphCommonClock_Config+0x62>
  {
    Error_Handler();
 8000a34:	f000 ff48 	bl	80018c8 <Error_Handler>
  }
}
 8000a38:	bf00      	nop
 8000a3a:	37e0      	adds	r7, #224	; 0xe0
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a44:	f00b fa66 	bl	800bf14 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000a48:	2002      	movs	r0, #2
 8000a4a:	f00b fa03 	bl	800be54 <HAL_PWREx_ConfigSupply>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000a54:	f000 ff38 	bl	80018c8 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a60:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <MX_CRC_Init+0x3c>)
 8000a62:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <MX_CRC_Init+0x40>)
 8000a64:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_CRC_Init+0x3c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <MX_CRC_Init+0x3c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_CRC_Init+0x3c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000a78:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <MX_CRC_Init+0x3c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_CRC_Init+0x3c>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <MX_CRC_Init+0x3c>)
 8000a86:	f006 ffe9 	bl	8007a5c <HAL_CRC_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000a90:	f000 ff1a 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20152db4 	.word	0x20152db4
 8000a9c:	40023000 	.word	0x40023000

08000aa0 <MX_DCACHE1_Init>:
  * @brief DCACHE1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE1_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 8000aa4:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <MX_DCACHE1_Init+0x34>)
 8000aa6:	4a0c      	ldr	r2, [pc, #48]	; (8000ad8 <MX_DCACHE1_Init+0x38>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_INCR;
 8000aaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <MX_DCACHE1_Init+0x34>)
 8000aac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000ab0:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 8000ab2:	4808      	ldr	r0, [pc, #32]	; (8000ad4 <MX_DCACHE1_Init+0x34>)
 8000ab4:	f007 f8c4 	bl	8007c40 <HAL_DCACHE_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_DCACHE1_Init+0x22>
  {
    Error_Handler();
 8000abe:	f000 ff03 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */
  HAL_DCACHE_Enable(&hdcache1);
 8000ac2:	4804      	ldr	r0, [pc, #16]	; (8000ad4 <MX_DCACHE1_Init+0x34>)
 8000ac4:	f007 f90e 	bl	8007ce4 <HAL_DCACHE_Enable>
  HAL_DCACHE_Invalidate(&hdcache1);
 8000ac8:	4802      	ldr	r0, [pc, #8]	; (8000ad4 <MX_DCACHE1_Init+0x34>)
 8000aca:	f007 f932 	bl	8007d32 <HAL_DCACHE_Invalidate>
  /* USER CODE END DCACHE1_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20152dd8 	.word	0x20152dd8
 8000ad8:	40031400 	.word	0x40031400

08000adc <MX_DCACHE2_Init>:
  * @brief DCACHE2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE2_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE2_Init 0 */

  /* USER CODE BEGIN DCACHE2_Init 1 */

  /* USER CODE END DCACHE2_Init 1 */
  hdcache2.Instance = DCACHE2;
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <MX_DCACHE2_Init+0x34>)
 8000ae2:	4a0c      	ldr	r2, [pc, #48]	; (8000b14 <MX_DCACHE2_Init+0x38>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hdcache2.Init.ReadBurstType = DCACHE_READ_BURST_INCR;
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <MX_DCACHE2_Init+0x34>)
 8000ae8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000aec:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache2) != HAL_OK)
 8000aee:	4808      	ldr	r0, [pc, #32]	; (8000b10 <MX_DCACHE2_Init+0x34>)
 8000af0:	f007 f8a6 	bl	8007c40 <HAL_DCACHE_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_DCACHE2_Init+0x22>
  {
    Error_Handler();
 8000afa:	f000 fee5 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE2_Init 2 */
  HAL_DCACHE_Enable(&hdcache2);
 8000afe:	4804      	ldr	r0, [pc, #16]	; (8000b10 <MX_DCACHE2_Init+0x34>)
 8000b00:	f007 f8f0 	bl	8007ce4 <HAL_DCACHE_Enable>
  HAL_DCACHE_Invalidate(&hdcache2);
 8000b04:	4802      	ldr	r0, [pc, #8]	; (8000b10 <MX_DCACHE2_Init+0x34>)
 8000b06:	f007 f914 	bl	8007d32 <HAL_DCACHE_Invalidate>
  /* USER CODE END DCACHE2_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20152e04 	.word	0x20152e04
 8000b14:	40031800 	.word	0x40031800

08000b18 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_DMA2D_Init+0x40>)
 8000b1e:	4a0f      	ldr	r2, [pc, #60]	; (8000b5c <MX_DMA2D_Init+0x44>)
 8000b20:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000b22:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <MX_DMA2D_Init+0x40>)
 8000b24:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b28:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <MX_DMA2D_Init+0x40>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_DMA2D_Init+0x40>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <MX_DMA2D_Init+0x40>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_DMA2D_Init+0x40>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_DMA2D_Init+0x40>)
 8000b44:	f007 fdae 	bl	80086a4 <HAL_DMA2D_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_DMA2D_Init+0x3a>
  {
    Error_Handler();
 8000b4e:	f000 febb 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20152e30 	.word	0x20152e30
 8000b5c:	4002b000 	.word	0x4002b000

08000b60 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b0e8      	sub	sp, #416	; 0x1a0
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */
  HAL_GPIO_WritePin(DSI_PWR_ON_GPIO_Port, DSI_PWR_ON_Pin, GPIO_PIN_SET);
 8000b66:	2201      	movs	r2, #1
 8000b68:	2120      	movs	r1, #32
 8000b6a:	48a1      	ldr	r0, [pc, #644]	; (8000df0 <MX_DSIHOST_DSI_Init+0x290>)
 8000b6c:	f009 fbc4 	bl	800a2f8 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000b70:	2005      	movs	r0, #5
 8000b72:	f006 fe6f 	bl	8007854 <HAL_Delay>
  HAL_GPIO_WritePin(DSI_PWR_ON_GPIO_Port, DSI_PWR_ON_Pin, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2120      	movs	r1, #32
 8000b7a:	489d      	ldr	r0, [pc, #628]	; (8000df0 <MX_DSIHOST_DSI_Init+0x290>)
 8000b7c:	f009 fbbc 	bl	800a2f8 <HAL_GPIO_WritePin>
  HAL_Delay(11);
 8000b80:	200b      	movs	r0, #11
 8000b82:	f006 fe67 	bl	8007854 <HAL_Delay>
  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000b86:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
 8000b94:	611a      	str	r2, [r3, #16]
 8000b96:	615a      	str	r2, [r3, #20]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000b98:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8000b9c:	2224      	movs	r2, #36	; 0x24
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f028 fb09 	bl	80291b8 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000ba6:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]
 8000bb6:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 8000bb8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000bbc:	226c      	movs	r2, #108	; 0x6c
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f028 faf9 	bl	80291b8 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000bc6:	4b8b      	ldr	r3, [pc, #556]	; (8000df4 <MX_DSIHOST_DSI_Init+0x294>)
 8000bc8:	4a8b      	ldr	r2, [pc, #556]	; (8000df8 <MX_DSIHOST_DSI_Init+0x298>)
 8000bca:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000bcc:	4b89      	ldr	r3, [pc, #548]	; (8000df4 <MX_DSIHOST_DSI_Init+0x294>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000bd2:	4b88      	ldr	r3, [pc, #544]	; (8000df4 <MX_DSIHOST_DSI_Init+0x294>)
 8000bd4:	2204      	movs	r2, #4
 8000bd6:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000bd8:	4b86      	ldr	r3, [pc, #536]	; (8000df4 <MX_DSIHOST_DSI_Init+0x294>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	60da      	str	r2, [r3, #12]
  hdsi.Init.PHYFrequencyRange = DSI_DPHY_FRANGE_450MHZ_510MHZ;
 8000bde:	4b85      	ldr	r3, [pc, #532]	; (8000df4 <MX_DSIHOST_DSI_Init+0x294>)
 8000be0:	2208      	movs	r2, #8
 8000be2:	611a      	str	r2, [r3, #16]
  hdsi.Init.PHYLowPowerOffset = PHY_LP_OFFSSET_0_CLKP;
 8000be4:	4b83      	ldr	r3, [pc, #524]	; (8000df4 <MX_DSIHOST_DSI_Init+0x294>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	615a      	str	r2, [r3, #20]
  PLLInit.PLLNDIV = 125;
 8000bea:	237d      	movs	r3, #125	; 0x7d
 8000bec:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
  PLLInit.PLLIDF = DSI_PLL_IN_DIV4;
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  PLLInit.PLLVCORange = DSI_DPHY_VCO_FRANGE_800MHZ_1GHZ;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
  PLLInit.PLLChargePump = DSI_PLL_CHARGE_PUMP_2000HZ_4400HZ;
 8000c02:	2300      	movs	r3, #0
 8000c04:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
  PLLInit.PLLTuning = DSI_PLL_LOOP_FILTER_2000HZ_4400HZ;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000c0e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000c12:	4619      	mov	r1, r3
 8000c14:	4877      	ldr	r0, [pc, #476]	; (8000df4 <MX_DSIHOST_DSI_Init+0x294>)
 8000c16:	f008 f807 	bl	8008c28 <HAL_DSI_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_DSIHOST_DSI_Init+0xc4>
  {
    Error_Handler();
 8000c20:	f000 fe52 	bl	80018c8 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000c24:	2301      	movs	r3, #1
 8000c26:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  HostTimeouts.LowPowerReadTimeout = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
  HostTimeouts.BTATimeout = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000c5a:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4864      	ldr	r0, [pc, #400]	; (8000df4 <MX_DSIHOST_DSI_Init+0x294>)
 8000c62:	f008 fc72 	bl	800954a <HAL_DSI_ConfigHostTimeouts>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_DSIHOST_DSI_Init+0x110>
  {
    Error_Handler();
 8000c6c:	f000 fe2c 	bl	80018c8 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 11;
 8000c70:	230b      	movs	r3, #11
 8000c72:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  PhyTimings.ClockLaneLP2HSTime = 40;
 8000c76:	2328      	movs	r3, #40	; 0x28
 8000c78:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
  PhyTimings.DataLaneHS2LPTime = 12;
 8000c7c:	230c      	movs	r3, #12
 8000c7e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  PhyTimings.DataLaneLP2HSTime = 23;
 8000c82:	2317      	movs	r3, #23
 8000c84:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  PhyTimings.DataLaneMaxReadTime = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  PhyTimings.StopWaitTime = 7;
 8000c8e:	2307      	movs	r3, #7
 8000c90:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000c94:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4856      	ldr	r0, [pc, #344]	; (8000df4 <MX_DSIHOST_DSI_Init+0x294>)
 8000c9c:	f008 fbbf 	bl	800941e <HAL_DSI_ConfigPhyTimer>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_DSIHOST_DSI_Init+0x14a>
  {
    Error_Handler();
 8000ca6:	f000 fe0f 	bl	80018c8 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000caa:	2104      	movs	r1, #4
 8000cac:	4851      	ldr	r0, [pc, #324]	; (8000df4 <MX_DSIHOST_DSI_Init+0x294>)
 8000cae:	f008 fb8e 	bl	80093ce <HAL_DSI_ConfigFlowControl>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_DSIHOST_DSI_Init+0x15c>
  {
    Error_Handler();
 8000cb8:	f000 fe06 	bl	80018c8 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	484d      	ldr	r0, [pc, #308]	; (8000df4 <MX_DSIHOST_DSI_Init+0x294>)
 8000cc0:	f008 f886 	bl	8008dd0 <HAL_DSI_ConfigErrorMonitor>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_DSIHOST_DSI_Init+0x16e>
  {
    Error_Handler();
 8000cca:	f000 fdfd 	bl	80018c8 <Error_Handler>
  }
  VidCfg.ColorCoding = DSI_RGB888;
 8000cce:	2305      	movs	r3, #5
 8000cd0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  VidCfg.Mode = DSI_VID_MODE_BURST;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  VidCfg.PacketSize = 480;
 8000ce0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000ce4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  VidCfg.NumberOfChunks = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  VidCfg.NullPacketSize = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000d00:	2300      	movs	r3, #0
 8000d02:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  VidCfg.HorizontalSyncActive = 6;
 8000d06:	2306      	movs	r3, #6
 8000d08:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  VidCfg.HorizontalBackPorch = 3;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  VidCfg.HorizontalLine = 1452;
 8000d12:	f240 53ac 	movw	r3, #1452	; 0x5ac
 8000d16:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  VidCfg.VerticalSyncActive = 20;
 8000d1a:	2314      	movs	r3, #20
 8000d1c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  VidCfg.VerticalBackPorch = 12;
 8000d20:	230c      	movs	r3, #12
 8000d22:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  VidCfg.VerticalFrontPorch = 200;
 8000d26:	23c8      	movs	r3, #200	; 0xc8
 8000d28:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  VidCfg.VerticalActive = 481;
 8000d2c:	f240 13e1 	movw	r3, #481	; 0x1e1
 8000d30:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8000d34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d38:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  VidCfg.LPLargestPacketSize = 64;
 8000d3c:	2340      	movs	r3, #64	; 0x40
 8000d3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  VidCfg.LPVACTLargestPacketSize = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 8000d48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d4c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;
 8000d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d54:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;
 8000d58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d5c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;
 8000d60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d64:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;
 8000d68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d6c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE;
 8000d70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d74:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_ENABLE;
 8000d78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d7c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 8000d80:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000d84:	4619      	mov	r1, r3
 8000d86:	481b      	ldr	r0, [pc, #108]	; (8000df4 <MX_DSIHOST_DSI_Init+0x294>)
 8000d88:	f008 f919 	bl	8008fbe <HAL_DSI_ConfigVideoMode>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_DSIHOST_DSI_Init+0x236>
  {
    Error_Handler();
 8000d92:	f000 fd99 	bl	80018c8 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000d96:	2100      	movs	r1, #0
 8000d98:	4816      	ldr	r0, [pc, #88]	; (8000df4 <MX_DSIHOST_DSI_Init+0x294>)
 8000d9a:	f008 f8e5 	bl	8008f68 <HAL_DSI_SetGenericVCID>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_DSIHOST_DSI_Init+0x248>
  {
    Error_Handler();
 8000da4:	f000 fd90 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  // Start DSI
  if (HAL_DSI_Start(&hdsi) != HAL_OK)
 8000da8:	4812      	ldr	r0, [pc, #72]	; (8000df4 <MX_DSIHOST_DSI_Init+0x294>)
 8000daa:	f008 fc94 	bl	80096d6 <HAL_DSI_Start>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_DSIHOST_DSI_Init+0x258>
  {
    Error_Handler();
 8000db4:	f000 fd88 	bl	80018c8 <Error_Handler>
  }

  /* Switch to DSI PHY PLL clock */
  RCC_PeriphCLKInitTypeDef PeriphClkInit;
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8000db8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000dbc:	f5a3 71d0 	sub.w	r1, r3, #416	; 0x1a0
 8000dc0:	f04f 0200 	mov.w	r2, #0
 8000dc4:	f04f 0304 	mov.w	r3, #4
 8000dc8:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInit.DsiClockSelection    = RCC_DSICLKSOURCE_DSIPHY;
 8000dcc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000dd0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8000dd4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000dd8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8000ddc:	463b      	mov	r3, r7
 8000dde:	4618      	mov	r0, r3
 8000de0:	f00c fb92 	bl	800d508 <HAL_RCCEx_PeriphCLKConfig>
  /* USER CODE END DSIHOST_Init 2 */

}
 8000de4:	bf00      	nop
 8000de6:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	42022000 	.word	0x42022000
 8000df4:	20152e90 	.word	0x20152e90
 8000df8:	40016c00 	.word	0x40016c00

08000dfc <MX_GPU2D_Init>:
  * @brief GPU2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPU2D_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE END GPU2D_Init 0 */

  /* USER CODE BEGIN GPU2D_Init 1 */

  /* USER CODE END GPU2D_Init 1 */
  hgpu2d.Instance = GPU2D;
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <MX_GPU2D_Init+0x20>)
 8000e02:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <MX_GPU2D_Init+0x24>)
 8000e04:	601a      	str	r2, [r3, #0]
  if (HAL_GPU2D_Init(&hgpu2d) != HAL_OK)
 8000e06:	4805      	ldr	r0, [pc, #20]	; (8000e1c <MX_GPU2D_Init+0x20>)
 8000e08:	f009 fb33 	bl	800a472 <HAL_GPU2D_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_GPU2D_Init+0x1a>
  {
    Error_Handler();
 8000e12:	f000 fd59 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN GPU2D_Init 2 */

  /* USER CODE END GPU2D_Init 2 */

}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20152eb4 	.word	0x20152eb4
 8000e20:	4002f000 	.word	0x4002f000

08000e24 <MX_HSPI1_Init>:
  * @brief HSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HSPI1_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
  }
  /* USER CODE BEGIN HSPI1_Init 2 */
#endif
  BSP_HSPI_RAM_Cfg_t sHSPI_Init;

  sHSPI_Init.LatencyType      = BSP_HSPI_RAM_FIXED_LATENCY;
 8000e2a:	2320      	movs	r3, #32
 8000e2c:	703b      	strb	r3, [r7, #0]
  sHSPI_Init.BurstType        = BSP_HSPI_RAM_LINEAR_BURST;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	70fb      	strb	r3, [r7, #3]
  sHSPI_Init.BurstLength      = BSP_HSPI_RAM_BURST_16_BYTES;
 8000e32:	2300      	movs	r3, #0
 8000e34:	713b      	strb	r3, [r7, #4]
  sHSPI_Init.ReadLatencyCode  = BSP_HSPI_RAM_READ_LATENCY_6;
 8000e36:	230c      	movs	r3, #12
 8000e38:	707b      	strb	r3, [r7, #1]
  sHSPI_Init.WriteLatencyCode = BSP_HSPI_RAM_WRITE_LATENCY_6;
 8000e3a:	23c0      	movs	r3, #192	; 0xc0
 8000e3c:	70bb      	strb	r3, [r7, #2]
  sHSPI_Init.IOMode           = BSP_HSPI_RAM_IO_X16_MODE;
 8000e3e:	2340      	movs	r3, #64	; 0x40
 8000e40:	717b      	strb	r3, [r7, #5]

  if (BSP_HSPI_RAM_Init(0, &sHSPI_Init) != BSP_ERROR_NONE)
 8000e42:	463b      	mov	r3, r7
 8000e44:	4619      	mov	r1, r3
 8000e46:	2000      	movs	r0, #0
 8000e48:	f004 fc46 	bl	80056d8 <BSP_HSPI_RAM_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d00a      	beq.n	8000e68 <MX_HSPI1_Init+0x44>
  {
    printf("\r\nHSPI RAM Initialization : Failed");
 8000e52:	4810      	ldr	r0, [pc, #64]	; (8000e94 <MX_HSPI1_Init+0x70>)
 8000e54:	f028 fd88 	bl	8029968 <iprintf>
    printf("\r\nHSPI RAM Test Aborted");
 8000e58:	480f      	ldr	r0, [pc, #60]	; (8000e98 <MX_HSPI1_Init+0x74>)
 8000e5a:	f028 fd85 	bl	8029968 <iprintf>
    printf("\r\n");
 8000e5e:	480f      	ldr	r0, [pc, #60]	; (8000e9c <MX_HSPI1_Init+0x78>)
 8000e60:	f028 fe08 	bl	8029a74 <puts>
    Error_Handler();
 8000e64:	f000 fd30 	bl	80018c8 <Error_Handler>
  }

  if(BSP_HSPI_RAM_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f004 fd39 	bl	80058e0 <BSP_HSPI_RAM_EnableMemoryMappedMode>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d00a      	beq.n	8000e8a <MX_HSPI1_Init+0x66>
  {
    printf("\r\nHSPI RAM Mem-Mapped Cfg : Failed");
 8000e74:	480a      	ldr	r0, [pc, #40]	; (8000ea0 <MX_HSPI1_Init+0x7c>)
 8000e76:	f028 fd77 	bl	8029968 <iprintf>
    printf("\r\nHSPI RAM Test Aborted");
 8000e7a:	4807      	ldr	r0, [pc, #28]	; (8000e98 <MX_HSPI1_Init+0x74>)
 8000e7c:	f028 fd74 	bl	8029968 <iprintf>
    printf("\r\n");
 8000e80:	4806      	ldr	r0, [pc, #24]	; (8000e9c <MX_HSPI1_Init+0x78>)
 8000e82:	f028 fdf7 	bl	8029a74 <puts>
    Error_Handler();
 8000e86:	f000 fd1f 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE END HSPI1_Init 2 */

}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	0802a410 	.word	0x0802a410
 8000e98:	0802a434 	.word	0x0802a434
 8000e9c:	0802a44c 	.word	0x0802a44c
 8000ea0:	0802a450 	.word	0x0802a450

08000ea4 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f00a fb4b 	bl	800b544 <HAL_ICACHE_ConfigAssociativityMode>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000eb4:	f000 fd08 	bl	80018c8 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000eb8:	f00a fb64 	bl	800b584 <HAL_ICACHE_Enable>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000ec2:	f000 fd01 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000ecc:	b5b0      	push	{r4, r5, r7, lr}
 8000ece:	b0e4      	sub	sp, #400	; 0x190
 8000ed0:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ed2:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000ed6:	2234      	movs	r2, #52	; 0x34
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f028 f96c 	bl	80291b8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000ee0:	4bc1      	ldr	r3, [pc, #772]	; (80011e8 <MX_LTDC_Init+0x31c>)
 8000ee2:	4ac2      	ldr	r2, [pc, #776]	; (80011ec <MX_LTDC_Init+0x320>)
 8000ee4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000ee6:	4bc0      	ldr	r3, [pc, #768]	; (80011e8 <MX_LTDC_Init+0x31c>)
 8000ee8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000eec:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000eee:	4bbe      	ldr	r3, [pc, #760]	; (80011e8 <MX_LTDC_Init+0x31c>)
 8000ef0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ef4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ef6:	4bbc      	ldr	r3, [pc, #752]	; (80011e8 <MX_LTDC_Init+0x31c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000efc:	4bba      	ldr	r3, [pc, #744]	; (80011e8 <MX_LTDC_Init+0x31c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 1;
 8000f02:	4bb9      	ldr	r3, [pc, #740]	; (80011e8 <MX_LTDC_Init+0x31c>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 19;
 8000f08:	4bb7      	ldr	r3, [pc, #732]	; (80011e8 <MX_LTDC_Init+0x31c>)
 8000f0a:	2213      	movs	r2, #19
 8000f0c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 2;
 8000f0e:	4bb6      	ldr	r3, [pc, #728]	; (80011e8 <MX_LTDC_Init+0x31c>)
 8000f10:	2202      	movs	r2, #2
 8000f12:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 31;
 8000f14:	4bb4      	ldr	r3, [pc, #720]	; (80011e8 <MX_LTDC_Init+0x31c>)
 8000f16:	221f      	movs	r2, #31
 8000f18:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 482;
 8000f1a:	4bb3      	ldr	r3, [pc, #716]	; (80011e8 <MX_LTDC_Init+0x31c>)
 8000f1c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8000f20:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 512;
 8000f22:	4bb1      	ldr	r3, [pc, #708]	; (80011e8 <MX_LTDC_Init+0x31c>)
 8000f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f28:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 483;
 8000f2a:	4baf      	ldr	r3, [pc, #700]	; (80011e8 <MX_LTDC_Init+0x31c>)
 8000f2c:	f240 12e3 	movw	r2, #483	; 0x1e3
 8000f30:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 712;
 8000f32:	4bad      	ldr	r3, [pc, #692]	; (80011e8 <MX_LTDC_Init+0x31c>)
 8000f34:	f44f 7232 	mov.w	r2, #712	; 0x2c8
 8000f38:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000f3a:	4bab      	ldr	r3, [pc, #684]	; (80011e8 <MX_LTDC_Init+0x31c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000f42:	4ba9      	ldr	r3, [pc, #676]	; (80011e8 <MX_LTDC_Init+0x31c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000f4a:	4ba7      	ldr	r3, [pc, #668]	; (80011e8 <MX_LTDC_Init+0x31c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000f52:	48a5      	ldr	r0, [pc, #660]	; (80011e8 <MX_LTDC_Init+0x31c>)
 8000f54:	f00a fb26 	bl	800b5a4 <HAL_LTDC_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_LTDC_Init+0x96>
  {
    Error_Handler();
 8000f5e:	f000 fcb3 	bl	80018c8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  pLayerCfg.WindowX1 = 480;
 8000f68:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000f6c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  pLayerCfg.WindowY0 = 1;
 8000f70:	2301      	movs	r3, #1
 8000f72:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  pLayerCfg.WindowY1 = 481;
 8000f76:	f240 13e1 	movw	r3, #481	; 0x1e1
 8000f7a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  pLayerCfg.Alpha = 255;
 8000f84:	23ff      	movs	r3, #255	; 0xff
 8000f86:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  pLayerCfg.Alpha0 = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000f90:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f94:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000f98:	2307      	movs	r3, #7
 8000f9a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  pLayerCfg.FBStartAdress = 0x0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  pLayerCfg.ImageWidth = 480;
 8000fa4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000fa8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  pLayerCfg.ImageHeight = 480;
 8000fac:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000fb0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
  pLayerCfg.Backcolor.Blue = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
  pLayerCfg.Backcolor.Green = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
  pLayerCfg.Backcolor.Red = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000fc6:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000fca:	2200      	movs	r2, #0
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4886      	ldr	r0, [pc, #536]	; (80011e8 <MX_LTDC_Init+0x31c>)
 8000fd0:	f00a fc70 	bl	800b8b4 <HAL_LTDC_ConfigLayer>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_LTDC_Init+0x112>
  {
    Error_Handler();
 8000fda:	f000 fc75 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */
  HAL_Delay(10);
 8000fde:	200a      	movs	r0, #10
 8000fe0:	f006 fc38 	bl	8007854 <HAL_Delay>
  HAL_DSI_EnterULPM(&hdsi);
 8000fe4:	4882      	ldr	r0, [pc, #520]	; (80011f0 <MX_LTDC_Init+0x324>)
 8000fe6:	f008 fc6b 	bl	80098c0 <HAL_DSI_EnterULPM>
  HAL_Delay(10);
 8000fea:	200a      	movs	r0, #10
 8000fec:	f006 fc32 	bl	8007854 <HAL_Delay>

  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2120      	movs	r1, #32
 8000ff4:	487f      	ldr	r0, [pc, #508]	; (80011f4 <MX_LTDC_Init+0x328>)
 8000ff6:	f009 f97f 	bl	800a2f8 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000ffa:	200a      	movs	r0, #10
 8000ffc:	f006 fc2a 	bl	8007854 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8001000:	2201      	movs	r2, #1
 8001002:	2120      	movs	r1, #32
 8001004:	487b      	ldr	r0, [pc, #492]	; (80011f4 <MX_LTDC_Init+0x328>)
 8001006:	f009 f977 	bl	800a2f8 <HAL_GPIO_WritePin>
  HAL_Delay(150);
 800100a:	2096      	movs	r0, #150	; 0x96
 800100c:	f006 fc22 	bl	8007854 <HAL_Delay>

  HAL_DSI_ExitULPM(&hdsi);
 8001010:	4877      	ldr	r0, [pc, #476]	; (80011f0 <MX_LTDC_Init+0x324>)
 8001012:	f008 fd6d 	bl	8009af0 <HAL_DSI_ExitULPM>
  HAL_Delay(10);
 8001016:	200a      	movs	r0, #10
 8001018:	f006 fc1c 	bl	8007854 <HAL_Delay>

  // CMD Mode
  uint8_t InitParam1[3] = {0xFF ,0x83 , 0x79};
 800101c:	4a76      	ldr	r2, [pc, #472]	; (80011f8 <MX_LTDC_Init+0x32c>)
 800101e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001022:	6812      	ldr	r2, [r2, #0]
 8001024:	4611      	mov	r1, r2
 8001026:	8019      	strh	r1, [r3, #0]
 8001028:	3302      	adds	r3, #2
 800102a:	0c12      	lsrs	r2, r2, #16
 800102c:	701a      	strb	r2, [r3, #0]
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 3, 0xB9, InitParam1) != HAL_OK)
 800102e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001032:	9301      	str	r3, [sp, #4]
 8001034:	23b9      	movs	r3, #185	; 0xb9
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	2303      	movs	r3, #3
 800103a:	2239      	movs	r2, #57	; 0x39
 800103c:	2100      	movs	r1, #0
 800103e:	486c      	ldr	r0, [pc, #432]	; (80011f0 <MX_LTDC_Init+0x324>)
 8001040:	f008 fba7 	bl	8009792 <HAL_DSI_LongWrite>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_LTDC_Init+0x182>
  {
    Error_Handler();
 800104a:	f000 fc3d 	bl	80018c8 <Error_Handler>
  }

  // SETPOWER
  uint8_t InitParam3[16] = {0x44,0x1C,0x1C,0x37,0x57,0x90,0xD0,0xE2,0x58,0x80,0x38,0x38,0xF8,0x33,0x34,0x42};
 800104e:	4b6b      	ldr	r3, [pc, #428]	; (80011fc <MX_LTDC_Init+0x330>)
 8001050:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 8001054:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001056:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 16, 0xB1, InitParam3) != HAL_OK)
 800105a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	23b1      	movs	r3, #177	; 0xb1
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2310      	movs	r3, #16
 8001066:	2239      	movs	r2, #57	; 0x39
 8001068:	2100      	movs	r1, #0
 800106a:	4861      	ldr	r0, [pc, #388]	; (80011f0 <MX_LTDC_Init+0x324>)
 800106c:	f008 fb91 	bl	8009792 <HAL_DSI_LongWrite>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_LTDC_Init+0x1ae>
  {
    Error_Handler();
 8001076:	f000 fc27 	bl	80018c8 <Error_Handler>
  }

  // SETDISP
  uint8_t InitParam4[9] = {0x80,0x14,0x0C,0x30,0x20,0x50,0x11,0x42,0x1D};
 800107a:	4a61      	ldr	r2, [pc, #388]	; (8001200 <MX_LTDC_Init+0x334>)
 800107c:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001080:	ca07      	ldmia	r2, {r0, r1, r2}
 8001082:	c303      	stmia	r3!, {r0, r1}
 8001084:	701a      	strb	r2, [r3, #0]
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xB2, InitParam4) != HAL_OK)
 8001086:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800108a:	9301      	str	r3, [sp, #4]
 800108c:	23b2      	movs	r3, #178	; 0xb2
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2309      	movs	r3, #9
 8001092:	2239      	movs	r2, #57	; 0x39
 8001094:	2100      	movs	r1, #0
 8001096:	4856      	ldr	r0, [pc, #344]	; (80011f0 <MX_LTDC_Init+0x324>)
 8001098:	f008 fb7b 	bl	8009792 <HAL_DSI_LongWrite>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_LTDC_Init+0x1da>
  {
    Error_Handler();
 80010a2:	f000 fc11 	bl	80018c8 <Error_Handler>
  }

  // Set display cycle timing
  uint8_t InitParam5[10] = {0x01,0xAA,0x01,0xAF,0x01,0xAF,0x10,0xEA,0x1C,0xEA};
 80010a6:	4a57      	ldr	r2, [pc, #348]	; (8001204 <MX_LTDC_Init+0x338>)
 80010a8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80010ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80010ae:	c303      	stmia	r3!, {r0, r1}
 80010b0:	801a      	strh	r2, [r3, #0]
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xB4, InitParam5) != HAL_OK)
 80010b2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	23b4      	movs	r3, #180	; 0xb4
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	230a      	movs	r3, #10
 80010be:	2239      	movs	r2, #57	; 0x39
 80010c0:	2100      	movs	r1, #0
 80010c2:	484b      	ldr	r0, [pc, #300]	; (80011f0 <MX_LTDC_Init+0x324>)
 80010c4:	f008 fb65 	bl	8009792 <HAL_DSI_LongWrite>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_LTDC_Init+0x206>
  {
    Error_Handler();
 80010ce:	f000 fbfb 	bl	80018c8 <Error_Handler>
  }

  // SETVCOM
  uint8_t InitParam60[4] = {00,00,00,0xC0};
 80010d2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80010d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xC7, InitParam60) != HAL_OK)
 80010da:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	23c7      	movs	r3, #199	; 0xc7
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2304      	movs	r3, #4
 80010e6:	2239      	movs	r2, #57	; 0x39
 80010e8:	2100      	movs	r1, #0
 80010ea:	4841      	ldr	r0, [pc, #260]	; (80011f0 <MX_LTDC_Init+0x324>)
 80010ec:	f008 fb51 	bl	8009792 <HAL_DSI_LongWrite>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_LTDC_Init+0x22e>
  {
    Error_Handler();
 80010f6:	f000 fbe7 	bl	80018c8 <Error_Handler>
  }

  // Set Panel Related Registers
  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xCC, 0x02) != HAL_OK)
 80010fa:	2302      	movs	r3, #2
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	23cc      	movs	r3, #204	; 0xcc
 8001100:	2215      	movs	r2, #21
 8001102:	2100      	movs	r1, #0
 8001104:	483a      	ldr	r0, [pc, #232]	; (80011f0 <MX_LTDC_Init+0x324>)
 8001106:	f008 fb22 	bl	800974e <HAL_DSI_ShortWrite>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_LTDC_Init+0x248>
  {
    Error_Handler();
 8001110:	f000 fbda 	bl	80018c8 <Error_Handler>
  }

  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xD2, 0x77) != HAL_OK)
 8001114:	2377      	movs	r3, #119	; 0x77
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	23d2      	movs	r3, #210	; 0xd2
 800111a:	2215      	movs	r2, #21
 800111c:	2100      	movs	r1, #0
 800111e:	4834      	ldr	r0, [pc, #208]	; (80011f0 <MX_LTDC_Init+0x324>)
 8001120:	f008 fb15 	bl	800974e <HAL_DSI_ShortWrite>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_LTDC_Init+0x262>
  {
    Error_Handler();
 800112a:	f000 fbcd 	bl	80018c8 <Error_Handler>
  }

  uint8_t InitParam50[37] = {
 800112e:	4b36      	ldr	r3, [pc, #216]	; (8001208 <MX_LTDC_Init+0x33c>)
 8001130:	f107 04fc 	add.w	r4, r7, #252	; 0xfc
 8001134:	461d      	mov	r5, r3
 8001136:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001138:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800113a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800113c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800113e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001142:	6020      	str	r0, [r4, #0]
 8001144:	3404      	adds	r4, #4
 8001146:	7021      	strb	r1, [r4, #0]
    0x00,0x07,0x00,0x00,0x00,0x08,0x08,0x32,0x10,0x01,0x00,0x01,0x03,0x72,0x03,0x72,0x00,0x08,0x00,
    0x08,0x33,0x33,0x05,0x05,0x37,0x05,0x05,0x37,0x0A,0x00,0x00,0x00,0x0A,0x00,0x01,0x00,0x0E
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 37, 0xD3, InitParam50) != HAL_OK)
 8001148:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800114c:	9301      	str	r3, [sp, #4]
 800114e:	23d3      	movs	r3, #211	; 0xd3
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2325      	movs	r3, #37	; 0x25
 8001154:	2239      	movs	r2, #57	; 0x39
 8001156:	2100      	movs	r1, #0
 8001158:	4825      	ldr	r0, [pc, #148]	; (80011f0 <MX_LTDC_Init+0x324>)
 800115a:	f008 fb1a 	bl	8009792 <HAL_DSI_LongWrite>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_LTDC_Init+0x29c>
  {
    Error_Handler();
 8001164:	f000 fbb0 	bl	80018c8 <Error_Handler>
  }

  uint8_t InitParam51[34] = {
 8001168:	4b28      	ldr	r3, [pc, #160]	; (800120c <MX_LTDC_Init+0x340>)
 800116a:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 800116e:	461d      	mov	r5, r3
 8001170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001174:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001176:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001178:	682b      	ldr	r3, [r5, #0]
 800117a:	8023      	strh	r3, [r4, #0]
    0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x19,0x19,0x18,0x18,0x18,0x18,0x19,0x19,0x01,0x00,
    0x03,0x02,0x05,0x04,0x07,0x06,0x23,0x22,0x21,0x20,0x18,0x18,0x18,0x18,0x00,0x00
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 34, 0xD5, InitParam51) != HAL_OK)
 800117c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001180:	9301      	str	r3, [sp, #4]
 8001182:	23d5      	movs	r3, #213	; 0xd5
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	2322      	movs	r3, #34	; 0x22
 8001188:	2239      	movs	r2, #57	; 0x39
 800118a:	2100      	movs	r1, #0
 800118c:	4818      	ldr	r0, [pc, #96]	; (80011f0 <MX_LTDC_Init+0x324>)
 800118e:	f008 fb00 	bl	8009792 <HAL_DSI_LongWrite>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_LTDC_Init+0x2d0>
  {
    Error_Handler();
 8001198:	f000 fb96 	bl	80018c8 <Error_Handler>
  }

  uint8_t InitParam52[35] = {
 800119c:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <MX_LTDC_Init+0x344>)
 800119e:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 80011a2:	461d      	mov	r5, r3
 80011a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ac:	682b      	ldr	r3, [r5, #0]
 80011ae:	7023      	strb	r3, [r4, #0]
 80011b0:	f107 03d5 	add.w	r3, r7, #213	; 0xd5
 80011b4:	2200      	movs	r2, #0
 80011b6:	801a      	strh	r2, [r3, #0]
    0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x19,0x19,0x18,0x18,0x19,0x19,0x18,0x18,0x06,0x07,
    0x04,0x05,0x02,0x03,0x00,0x01,0x20,0x21,0x22,0x23,0x18,0x18,0x18,0x18
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 35, 0xD6, InitParam52) != HAL_OK)
 80011b8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80011bc:	9301      	str	r3, [sp, #4]
 80011be:	23d6      	movs	r3, #214	; 0xd6
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	2323      	movs	r3, #35	; 0x23
 80011c4:	2239      	movs	r2, #57	; 0x39
 80011c6:	2100      	movs	r1, #0
 80011c8:	4809      	ldr	r0, [pc, #36]	; (80011f0 <MX_LTDC_Init+0x324>)
 80011ca:	f008 fae2 	bl	8009792 <HAL_DSI_LongWrite>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_LTDC_Init+0x30c>
  {
    Error_Handler();
 80011d4:	f000 fb78 	bl	80018c8 <Error_Handler>
  }

  // SET GAMMA
  uint8_t InitParam8[42] = {
 80011d8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80011dc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80011e0:	4a0c      	ldr	r2, [pc, #48]	; (8001214 <MX_LTDC_Init+0x348>)
 80011e2:	461c      	mov	r4, r3
 80011e4:	4615      	mov	r5, r2
 80011e6:	e017      	b.n	8001218 <MX_LTDC_Init+0x34c>
 80011e8:	20152ec0 	.word	0x20152ec0
 80011ec:	40016800 	.word	0x40016800
 80011f0:	20152e90 	.word	0x20152e90
 80011f4:	42020c00 	.word	0x42020c00
 80011f8:	0802a474 	.word	0x0802a474
 80011fc:	0802a478 	.word	0x0802a478
 8001200:	0802a488 	.word	0x0802a488
 8001204:	0802a494 	.word	0x0802a494
 8001208:	0802a4a0 	.word	0x0802a4a0
 800120c:	0802a4c8 	.word	0x0802a4c8
 8001210:	0802a4ec 	.word	0x0802a4ec
 8001214:	0802a510 	.word	0x0802a510
 8001218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800121a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800121c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800121e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001220:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001224:	c403      	stmia	r4!, {r0, r1}
 8001226:	8022      	strh	r2, [r4, #0]
    0x00,0x16,0x1B,0x30,0x36,0x3F,0x24,0x40,0x09,0x0D,0x0F,0x18,0x0E,0x11,0x12,0x11,0x14,0x07,
    0x12,0x13,0x18,0x00,0x17,0x1C,0x30,0x36,0x3F,0x24,0x40,0x09,0x0C,0x0F,0x18,0x0E,0x11,0x14,
    0x11,0x12,0x07,0x12,0x14,0x18
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 42, 0xE0, InitParam8) != HAL_OK)
 8001228:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	23e0      	movs	r3, #224	; 0xe0
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	232a      	movs	r3, #42	; 0x2a
 8001234:	2239      	movs	r2, #57	; 0x39
 8001236:	2100      	movs	r1, #0
 8001238:	4865      	ldr	r0, [pc, #404]	; (80013d0 <MX_LTDC_Init+0x504>)
 800123a:	f008 faaa 	bl	8009792 <HAL_DSI_LongWrite>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_LTDC_Init+0x37c>
  {
    Error_Handler();
 8001244:	f000 fb40 	bl	80018c8 <Error_Handler>
  }

  uint8_t InitParam44[3] = {0x2C,0x2C,00};
 8001248:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800124c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001250:	4a60      	ldr	r2, [pc, #384]	; (80013d4 <MX_LTDC_Init+0x508>)
 8001252:	6812      	ldr	r2, [r2, #0]
 8001254:	4611      	mov	r1, r2
 8001256:	8019      	strh	r1, [r3, #0]
 8001258:	3302      	adds	r3, #2
 800125a:	0c12      	lsrs	r2, r2, #16
 800125c:	701a      	strb	r2, [r3, #0]
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 3, 0xB6, InitParam44) != HAL_OK)
 800125e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001262:	9301      	str	r3, [sp, #4]
 8001264:	23b6      	movs	r3, #182	; 0xb6
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2303      	movs	r3, #3
 800126a:	2239      	movs	r2, #57	; 0x39
 800126c:	2100      	movs	r1, #0
 800126e:	4858      	ldr	r0, [pc, #352]	; (80013d0 <MX_LTDC_Init+0x504>)
 8001270:	f008 fa8f 	bl	8009792 <HAL_DSI_LongWrite>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_LTDC_Init+0x3b2>
  {
    Error_Handler();
 800127a:	f000 fb25 	bl	80018c8 <Error_Handler>
  }

  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xBD, 0x00) != HAL_OK)
 800127e:	2300      	movs	r3, #0
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	23bd      	movs	r3, #189	; 0xbd
 8001284:	2215      	movs	r2, #21
 8001286:	2100      	movs	r1, #0
 8001288:	4851      	ldr	r0, [pc, #324]	; (80013d0 <MX_LTDC_Init+0x504>)
 800128a:	f008 fa60 	bl	800974e <HAL_DSI_ShortWrite>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_LTDC_Init+0x3cc>
  {
    Error_Handler();
 8001294:	f000 fb18 	bl	80018c8 <Error_Handler>
  }

  uint8_t InitParam14[] = {
 8001298:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800129c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80012a0:	4a4d      	ldr	r2, [pc, #308]	; (80013d8 <MX_LTDC_Init+0x50c>)
 80012a2:	461c      	mov	r4, r3
 80012a4:	4615      	mov	r5, r2
 80012a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012b2:	c403      	stmia	r4!, {r0, r1}
 80012b4:	8022      	strh	r2, [r4, #0]
 80012b6:	3402      	adds	r4, #2
 80012b8:	0c13      	lsrs	r3, r2, #16
 80012ba:	7023      	strb	r3, [r4, #0]
    0x01,0x00,0x07,0x0F,0x16,0x1F,0x27,0x30,0x38,0x40,0x47,0x4E,0x56,0x5D,0x65,0x6D,0x74,0x7D,
    0x84,0x8A,0x90,0x99,0xA1,0xA9,0xB0,0xB6,0xBD,0xC4,0xCD,0xD4,0xDD,0xE5,0xEC,0xF3,0x36,0x07,
    0x1C,0xC0,0x1B,0x01,0xF1,0x34,0x00
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 42, 0xC1, InitParam14) != HAL_OK)
 80012bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012c0:	9301      	str	r3, [sp, #4]
 80012c2:	23c1      	movs	r3, #193	; 0xc1
 80012c4:	9300      	str	r3, [sp, #0]
 80012c6:	232a      	movs	r3, #42	; 0x2a
 80012c8:	2239      	movs	r2, #57	; 0x39
 80012ca:	2100      	movs	r1, #0
 80012cc:	4840      	ldr	r0, [pc, #256]	; (80013d0 <MX_LTDC_Init+0x504>)
 80012ce:	f008 fa60 	bl	8009792 <HAL_DSI_LongWrite>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_LTDC_Init+0x410>
  {
    Error_Handler();
 80012d8:	f000 faf6 	bl	80018c8 <Error_Handler>
  }

  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xBD, 0x01) != HAL_OK)
 80012dc:	2301      	movs	r3, #1
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	23bd      	movs	r3, #189	; 0xbd
 80012e2:	2215      	movs	r2, #21
 80012e4:	2100      	movs	r1, #0
 80012e6:	483a      	ldr	r0, [pc, #232]	; (80013d0 <MX_LTDC_Init+0x504>)
 80012e8:	f008 fa31 	bl	800974e <HAL_DSI_ShortWrite>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_LTDC_Init+0x42a>
  {
    Error_Handler();
 80012f2:	f000 fae9 	bl	80018c8 <Error_Handler>
  }

  uint8_t InitParam15[] = {
 80012f6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80012fa:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80012fe:	4a37      	ldr	r2, [pc, #220]	; (80013dc <MX_LTDC_Init+0x510>)
 8001300:	461c      	mov	r4, r3
 8001302:	4615      	mov	r5, r2
 8001304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800130a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800130c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001310:	c403      	stmia	r4!, {r0, r1}
 8001312:	8022      	strh	r2, [r4, #0]
    0x00,0x08,0x0F,0x16,0x1F,0x28,0x31,0x39,0x41,0x48,0x51,0x59,0x60,0x68,0x70,0x78,0x7F,0x87,
    0x8D,0x94,0x9C,0xA3,0xAB,0xB3,0xB9,0xC1,0xC8,0xD0,0xD8,0xE0,0xE8,0xEE,0xF5,0x3B,0x1A,0xB6,
    0xA0,0x07,0x45,0xC5,0x37,0x00
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 42, 0xC1, InitParam15) != HAL_OK)
 8001314:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	23c1      	movs	r3, #193	; 0xc1
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	232a      	movs	r3, #42	; 0x2a
 8001320:	2239      	movs	r2, #57	; 0x39
 8001322:	2100      	movs	r1, #0
 8001324:	482a      	ldr	r0, [pc, #168]	; (80013d0 <MX_LTDC_Init+0x504>)
 8001326:	f008 fa34 	bl	8009792 <HAL_DSI_LongWrite>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_LTDC_Init+0x468>
  {
    Error_Handler();
 8001330:	f000 faca 	bl	80018c8 <Error_Handler>
  }

  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xBD, 0x02) != HAL_OK)
 8001334:	2302      	movs	r3, #2
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	23bd      	movs	r3, #189	; 0xbd
 800133a:	2215      	movs	r2, #21
 800133c:	2100      	movs	r1, #0
 800133e:	4824      	ldr	r0, [pc, #144]	; (80013d0 <MX_LTDC_Init+0x504>)
 8001340:	f008 fa05 	bl	800974e <HAL_DSI_ShortWrite>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_LTDC_Init+0x482>
  {
    Error_Handler();
 800134a:	f000 fabd 	bl	80018c8 <Error_Handler>
  }

  uint8_t InitParam20[42] = {
 800134e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001352:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001356:	4a22      	ldr	r2, [pc, #136]	; (80013e0 <MX_LTDC_Init+0x514>)
 8001358:	461c      	mov	r4, r3
 800135a:	4615      	mov	r5, r2
 800135c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800135e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001364:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001368:	c403      	stmia	r4!, {r0, r1}
 800136a:	8022      	strh	r2, [r4, #0]
    0x00,0x09,0x0F,0x18,0x21,0x2A,0x34,0x3C,0x45,0x4C,0x56,0x5E,0x66,0x6E,0x76,0x7E,0x87,0x8E,
    0x95,0x9D,0xA6,0xAF,0xB7,0xBD,0xC5,0xCE,0xD5,0xDF,0xE7,0xEE,0xF4,0xFA,0xFF,0x0C,0x31,0x83,
    0x3C,0x5B,0x56,0x1E,0x5A,0xFF
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 42, 0xC1, InitParam20) != HAL_OK)
 800136c:	463b      	mov	r3, r7
 800136e:	9301      	str	r3, [sp, #4]
 8001370:	23c1      	movs	r3, #193	; 0xc1
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	232a      	movs	r3, #42	; 0x2a
 8001376:	2239      	movs	r2, #57	; 0x39
 8001378:	2100      	movs	r1, #0
 800137a:	4815      	ldr	r0, [pc, #84]	; (80013d0 <MX_LTDC_Init+0x504>)
 800137c:	f008 fa09 	bl	8009792 <HAL_DSI_LongWrite>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_LTDC_Init+0x4be>
  {
    Error_Handler();
 8001386:	f000 fa9f 	bl	80018c8 <Error_Handler>
  }

  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xBD, 0x00) != HAL_OK)
 800138a:	2300      	movs	r3, #0
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	23bd      	movs	r3, #189	; 0xbd
 8001390:	2215      	movs	r2, #21
 8001392:	2100      	movs	r1, #0
 8001394:	480e      	ldr	r0, [pc, #56]	; (80013d0 <MX_LTDC_Init+0x504>)
 8001396:	f008 f9da 	bl	800974e <HAL_DSI_ShortWrite>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_LTDC_Init+0x4d8>
  {
    Error_Handler();
 80013a0:	f000 fa92 	bl	80018c8 <Error_Handler>
  }

  // Exit Sleep Mode
  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, DSI_EXIT_SLEEP_MODE, 0x00) != HAL_OK)
 80013a4:	2300      	movs	r3, #0
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2311      	movs	r3, #17
 80013aa:	2205      	movs	r2, #5
 80013ac:	2100      	movs	r1, #0
 80013ae:	4808      	ldr	r0, [pc, #32]	; (80013d0 <MX_LTDC_Init+0x504>)
 80013b0:	f008 f9cd 	bl	800974e <HAL_DSI_ShortWrite>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_LTDC_Init+0x4f2>
  {
    Error_Handler();
 80013ba:	f000 fa85 	bl	80018c8 <Error_Handler>
  }

  HAL_Delay(120);
 80013be:	2078      	movs	r0, #120	; 0x78
 80013c0:	f006 fa48 	bl	8007854 <HAL_Delay>
  /* USER CODE END LTDC_Init 2 */

}
 80013c4:	bf00      	nop
 80013c6:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bdb0      	pop	{r4, r5, r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20152e90 	.word	0x20152e90
 80013d4:	0802a53c 	.word	0x0802a53c
 80013d8:	0802a540 	.word	0x0802a540
 80013dc:	0802a56c 	.word	0x0802a56c
 80013e0:	0802a598 	.word	0x0802a598

080013e4 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08c      	sub	sp, #48	; 0x30
 80013e8:	af00      	add	r7, sp, #0
  BSP_OSPI_NOR_Info_t sOSPI_NOR_Info;
  BSP_OSPI_NOR_Init_t sOSPI_NOR_Init;

  int32_t status;

  memset(&sOSPI_NOR_Info, 0, sizeof(sOSPI_NOR_Info));
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	2224      	movs	r2, #36	; 0x24
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f027 fee0 	bl	80291b8 <memset>
  memset(&sOSPI_NOR_Init, 0, sizeof(sOSPI_NOR_Init));
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	2202      	movs	r2, #2
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f027 feda 	bl	80291b8 <memset>

  sOSPI_NOR_Init.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8001404:	2301      	movs	r3, #1
 8001406:	713b      	strb	r3, [r7, #4]
  sOSPI_NOR_Init.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 8001408:	2301      	movs	r3, #1
 800140a:	717b      	strb	r3, [r7, #5]

  status = BSP_OSPI_NOR_Init(0, &sOSPI_NOR_Init);
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	4619      	mov	r1, r3
 8001410:	2000      	movs	r0, #0
 8001412:	f005 f897 	bl	8006544 <BSP_OSPI_NOR_Init>
 8001416:	62f8      	str	r0, [r7, #44]	; 0x2c

  if (status != BSP_ERROR_NONE)
 8001418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800141a:	2b00      	cmp	r3, #0
 800141c:	d008      	beq.n	8001430 <MX_OCTOSPI1_Init+0x4c>
  {
    printf("\r\nOSPI NOR Initialization : Failed");
 800141e:	4811      	ldr	r0, [pc, #68]	; (8001464 <MX_OCTOSPI1_Init+0x80>)
 8001420:	f028 faa2 	bl	8029968 <iprintf>
    printf("\r\nOSPI NOR Test Aborted");
 8001424:	4810      	ldr	r0, [pc, #64]	; (8001468 <MX_OCTOSPI1_Init+0x84>)
 8001426:	f028 fa9f 	bl	8029968 <iprintf>
    printf("\r\n");
 800142a:	4810      	ldr	r0, [pc, #64]	; (800146c <MX_OCTOSPI1_Init+0x88>)
 800142c:	f028 fb22 	bl	8029a74 <puts>
  }

  BSP_OSPI_NOR_GetInfo(0, &sOSPI_NOR_Info);
 8001430:	f107 0308 	add.w	r3, r7, #8
 8001434:	4619      	mov	r1, r3
 8001436:	2000      	movs	r0, #0
 8001438:	f005 f97a 	bl	8006730 <BSP_OSPI_NOR_GetInfo>

  if (BSP_OSPI_NOR_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 800143c:	2000      	movs	r0, #0
 800143e:	f005 f98d 	bl	800675c <BSP_OSPI_NOR_EnableMemoryMappedMode>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d008      	beq.n	800145a <MX_OCTOSPI1_Init+0x76>
  {
    printf("\r\nOSPI NOR Mem-Mapped Cfg : Failed");
 8001448:	4809      	ldr	r0, [pc, #36]	; (8001470 <MX_OCTOSPI1_Init+0x8c>)
 800144a:	f028 fa8d 	bl	8029968 <iprintf>
    printf("\r\nOSPI NOR Test Aborted");
 800144e:	4806      	ldr	r0, [pc, #24]	; (8001468 <MX_OCTOSPI1_Init+0x84>)
 8001450:	f028 fa8a 	bl	8029968 <iprintf>
    printf("\r\n");
 8001454:	4805      	ldr	r0, [pc, #20]	; (800146c <MX_OCTOSPI1_Init+0x88>)
 8001456:	f028 fb0d 	bl	8029a74 <puts>
  }
  /* USER CODE END OCTOSPI1_Init 2 */

}
 800145a:	bf00      	nop
 800145c:	3730      	adds	r7, #48	; 0x30
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	0802a5c4 	.word	0x0802a5c4
 8001468:	0802a5e8 	.word	0x0802a5e8
 800146c:	0802a44c 	.word	0x0802a44c
 8001470:	0802a600 	.word	0x0802a600

08001474 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b09c      	sub	sp, #112	; 0x70
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800147a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001488:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001494:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
 80014a4:	615a      	str	r2, [r3, #20]
 80014a6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	2234      	movs	r2, #52	; 0x34
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f027 fe82 	bl	80291b8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80014b4:	4b45      	ldr	r3, [pc, #276]	; (80015cc <MX_TIM8_Init+0x158>)
 80014b6:	4a46      	ldr	r2, [pc, #280]	; (80015d0 <MX_TIM8_Init+0x15c>)
 80014b8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 18;
 80014ba:	4b44      	ldr	r3, [pc, #272]	; (80015cc <MX_TIM8_Init+0x158>)
 80014bc:	2212      	movs	r2, #18
 80014be:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c0:	4b42      	ldr	r3, [pc, #264]	; (80015cc <MX_TIM8_Init+0x158>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 139;
 80014c6:	4b41      	ldr	r3, [pc, #260]	; (80015cc <MX_TIM8_Init+0x158>)
 80014c8:	228b      	movs	r2, #139	; 0x8b
 80014ca:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014cc:	4b3f      	ldr	r3, [pc, #252]	; (80015cc <MX_TIM8_Init+0x158>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80014d2:	4b3e      	ldr	r3, [pc, #248]	; (80015cc <MX_TIM8_Init+0x158>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d8:	4b3c      	ldr	r3, [pc, #240]	; (80015cc <MX_TIM8_Init+0x158>)
 80014da:	2200      	movs	r2, #0
 80014dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80014de:	483b      	ldr	r0, [pc, #236]	; (80015cc <MX_TIM8_Init+0x158>)
 80014e0:	f00f f83a 	bl	8010558 <HAL_TIM_Base_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80014ea:	f000 f9ed 	bl	80018c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f2:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80014f4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80014f8:	4619      	mov	r1, r3
 80014fa:	4834      	ldr	r0, [pc, #208]	; (80015cc <MX_TIM8_Init+0x158>)
 80014fc:	f00f fd6c 	bl	8010fd8 <HAL_TIM_ConfigClockSource>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001506:	f000 f9df 	bl	80018c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800150a:	4830      	ldr	r0, [pc, #192]	; (80015cc <MX_TIM8_Init+0x158>)
 800150c:	f00f f91c 	bl	8010748 <HAL_TIM_PWM_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001516:	f000 f9d7 	bl	80018c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151a:	2300      	movs	r3, #0
 800151c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800151e:	2300      	movs	r3, #0
 8001520:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001526:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800152a:	4619      	mov	r1, r3
 800152c:	4827      	ldr	r0, [pc, #156]	; (80015cc <MX_TIM8_Init+0x158>)
 800152e:	f010 fc0f 	bl	8011d50 <HAL_TIMEx_MasterConfigSynchronization>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8001538:	f000 f9c6 	bl	80018c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800153c:	2360      	movs	r3, #96	; 0x60
 800153e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 100;
 8001540:	2364      	movs	r3, #100	; 0x64
 8001542:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001544:	2300      	movs	r3, #0
 8001546:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001548:	2300      	movs	r3, #0
 800154a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800154c:	2300      	movs	r3, #0
 800154e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001550:	2300      	movs	r3, #0
 8001552:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001554:	2300      	movs	r3, #0
 8001556:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001558:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800155c:	2204      	movs	r2, #4
 800155e:	4619      	mov	r1, r3
 8001560:	481a      	ldr	r0, [pc, #104]	; (80015cc <MX_TIM8_Init+0x158>)
 8001562:	f00f fc25 	bl	8010db0 <HAL_TIM_PWM_ConfigChannel>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 800156c:	f000 f9ac 	bl	80018c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001584:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001588:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800158e:	2300      	movs	r3, #0
 8001590:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001596:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80015a0:	2300      	movs	r3, #0
 80015a2:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	4619      	mov	r1, r3
 80015ac:	4807      	ldr	r0, [pc, #28]	; (80015cc <MX_TIM8_Init+0x158>)
 80015ae:	f010 fc91 	bl	8011ed4 <HAL_TIMEx_ConfigBreakDeadTime>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 80015b8:	f000 f986 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80015bc:	4803      	ldr	r0, [pc, #12]	; (80015cc <MX_TIM8_Init+0x158>)
 80015be:	f000 fb13 	bl	8001be8 <HAL_TIM_MspPostInit>

}
 80015c2:	bf00      	nop
 80015c4:	3770      	adds	r7, #112	; 0x70
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20152f68 	.word	0x20152f68
 80015d0:	40013400 	.word	0x40013400

080015d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015d8:	4b22      	ldr	r3, [pc, #136]	; (8001664 <MX_USART1_UART_Init+0x90>)
 80015da:	4a23      	ldr	r2, [pc, #140]	; (8001668 <MX_USART1_UART_Init+0x94>)
 80015dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015de:	4b21      	ldr	r3, [pc, #132]	; (8001664 <MX_USART1_UART_Init+0x90>)
 80015e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015e6:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <MX_USART1_UART_Init+0x90>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015ec:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <MX_USART1_UART_Init+0x90>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015f2:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <MX_USART1_UART_Init+0x90>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015f8:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <MX_USART1_UART_Init+0x90>)
 80015fa:	220c      	movs	r2, #12
 80015fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fe:	4b19      	ldr	r3, [pc, #100]	; (8001664 <MX_USART1_UART_Init+0x90>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001604:	4b17      	ldr	r3, [pc, #92]	; (8001664 <MX_USART1_UART_Init+0x90>)
 8001606:	2200      	movs	r2, #0
 8001608:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800160a:	4b16      	ldr	r3, [pc, #88]	; (8001664 <MX_USART1_UART_Init+0x90>)
 800160c:	2200      	movs	r2, #0
 800160e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001610:	4b14      	ldr	r3, [pc, #80]	; (8001664 <MX_USART1_UART_Init+0x90>)
 8001612:	2200      	movs	r2, #0
 8001614:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001616:	4b13      	ldr	r3, [pc, #76]	; (8001664 <MX_USART1_UART_Init+0x90>)
 8001618:	2200      	movs	r2, #0
 800161a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800161c:	4811      	ldr	r0, [pc, #68]	; (8001664 <MX_USART1_UART_Init+0x90>)
 800161e:	f010 fd61 	bl	80120e4 <HAL_UART_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001628:	f000 f94e 	bl	80018c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800162c:	2100      	movs	r1, #0
 800162e:	480d      	ldr	r0, [pc, #52]	; (8001664 <MX_USART1_UART_Init+0x90>)
 8001630:	f011 fa36 	bl	8012aa0 <HAL_UARTEx_SetTxFifoThreshold>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800163a:	f000 f945 	bl	80018c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800163e:	2100      	movs	r1, #0
 8001640:	4808      	ldr	r0, [pc, #32]	; (8001664 <MX_USART1_UART_Init+0x90>)
 8001642:	f011 fa6b 	bl	8012b1c <HAL_UARTEx_SetRxFifoThreshold>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800164c:	f000 f93c 	bl	80018c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001650:	4804      	ldr	r0, [pc, #16]	; (8001664 <MX_USART1_UART_Init+0x90>)
 8001652:	f011 f9ec 	bl	8012a2e <HAL_UARTEx_DisableFifoMode>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800165c:	f000 f934 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20152fb4 	.word	0x20152fb4
 8001668:	40013800 	.word	0x40013800

0800166c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08e      	sub	sp, #56	; 0x38
 8001670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
 8001680:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001682:	4b78      	ldr	r3, [pc, #480]	; (8001864 <MX_GPIO_Init+0x1f8>)
 8001684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001688:	4a76      	ldr	r2, [pc, #472]	; (8001864 <MX_GPIO_Init+0x1f8>)
 800168a:	f043 0310 	orr.w	r3, r3, #16
 800168e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001692:	4b74      	ldr	r3, [pc, #464]	; (8001864 <MX_GPIO_Init+0x1f8>)
 8001694:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001698:	f003 0310 	and.w	r3, r3, #16
 800169c:	623b      	str	r3, [r7, #32]
 800169e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a0:	4b70      	ldr	r3, [pc, #448]	; (8001864 <MX_GPIO_Init+0x1f8>)
 80016a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016a6:	4a6f      	ldr	r2, [pc, #444]	; (8001864 <MX_GPIO_Init+0x1f8>)
 80016a8:	f043 0308 	orr.w	r3, r3, #8
 80016ac:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016b0:	4b6c      	ldr	r3, [pc, #432]	; (8001864 <MX_GPIO_Init+0x1f8>)
 80016b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	61fb      	str	r3, [r7, #28]
 80016bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016be:	4b69      	ldr	r3, [pc, #420]	; (8001864 <MX_GPIO_Init+0x1f8>)
 80016c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016c4:	4a67      	ldr	r2, [pc, #412]	; (8001864 <MX_GPIO_Init+0x1f8>)
 80016c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016ce:	4b65      	ldr	r3, [pc, #404]	; (8001864 <MX_GPIO_Init+0x1f8>)
 80016d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016d8:	61bb      	str	r3, [r7, #24]
 80016da:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80016dc:	4b61      	ldr	r3, [pc, #388]	; (8001864 <MX_GPIO_Init+0x1f8>)
 80016de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016e2:	4a60      	ldr	r2, [pc, #384]	; (8001864 <MX_GPIO_Init+0x1f8>)
 80016e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016ec:	4b5d      	ldr	r3, [pc, #372]	; (8001864 <MX_GPIO_Init+0x1f8>)
 80016ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	4b5a      	ldr	r3, [pc, #360]	; (8001864 <MX_GPIO_Init+0x1f8>)
 80016fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001700:	4a58      	ldr	r2, [pc, #352]	; (8001864 <MX_GPIO_Init+0x1f8>)
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800170a:	4b56      	ldr	r3, [pc, #344]	; (8001864 <MX_GPIO_Init+0x1f8>)
 800170c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001718:	4b52      	ldr	r3, [pc, #328]	; (8001864 <MX_GPIO_Init+0x1f8>)
 800171a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800171e:	4a51      	ldr	r2, [pc, #324]	; (8001864 <MX_GPIO_Init+0x1f8>)
 8001720:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001724:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001728:	4b4e      	ldr	r3, [pc, #312]	; (8001864 <MX_GPIO_Init+0x1f8>)
 800172a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800172e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001736:	4b4b      	ldr	r3, [pc, #300]	; (8001864 <MX_GPIO_Init+0x1f8>)
 8001738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800173c:	4a49      	ldr	r2, [pc, #292]	; (8001864 <MX_GPIO_Init+0x1f8>)
 800173e:	f043 0304 	orr.w	r3, r3, #4
 8001742:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001746:	4b47      	ldr	r3, [pc, #284]	; (8001864 <MX_GPIO_Init+0x1f8>)
 8001748:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001754:	4b43      	ldr	r3, [pc, #268]	; (8001864 <MX_GPIO_Init+0x1f8>)
 8001756:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800175a:	4a42      	ldr	r2, [pc, #264]	; (8001864 <MX_GPIO_Init+0x1f8>)
 800175c:	f043 0320 	orr.w	r3, r3, #32
 8001760:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001764:	4b3f      	ldr	r3, [pc, #252]	; (8001864 <MX_GPIO_Init+0x1f8>)
 8001766:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800176a:	f003 0320 	and.w	r3, r3, #32
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8001772:	2200      	movs	r2, #0
 8001774:	2103      	movs	r1, #3
 8001776:	483c      	ldr	r0, [pc, #240]	; (8001868 <MX_GPIO_Init+0x1fc>)
 8001778:	f008 fdbe 	bl	800a2f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 800177c:	2201      	movs	r2, #1
 800177e:	2120      	movs	r1, #32
 8001780:	483a      	ldr	r0, [pc, #232]	; (800186c <MX_GPIO_Init+0x200>)
 8001782:	f008 fdb9 	bl	800a2f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DSI_PWR_ON_GPIO_Port, DSI_PWR_ON_Pin, GPIO_PIN_RESET);
 8001786:	2200      	movs	r2, #0
 8001788:	2120      	movs	r1, #32
 800178a:	4839      	ldr	r0, [pc, #228]	; (8001870 <MX_GPIO_Init+0x204>)
 800178c:	f008 fdb4 	bl	800a2f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, VSYNC_FREQ_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 8001790:	2200      	movs	r2, #0
 8001792:	2103      	movs	r1, #3
 8001794:	4835      	ldr	r0, [pc, #212]	; (800186c <MX_GPIO_Init+0x200>)
 8001796:	f008 fdaf 	bl	800a2f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MCU_ACTIVE_Pin|FRAME_RATE_Pin, GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80017a0:	4834      	ldr	r0, [pc, #208]	; (8001874 <MX_GPIO_Init+0x208>)
 80017a2:	f008 fda9 	bl	800a2f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80017a6:	2303      	movs	r3, #3
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017aa:	2301      	movs	r3, #1
 80017ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b2:	2303      	movs	r3, #3
 80017b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ba:	4619      	mov	r1, r3
 80017bc:	482a      	ldr	r0, [pc, #168]	; (8001868 <MX_GPIO_Init+0x1fc>)
 80017be:	f008 facd 	bl	8009d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin VSYNC_FREQ_Pin RENDER_TIME_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|VSYNC_FREQ_Pin|RENDER_TIME_Pin;
 80017c2:	2323      	movs	r3, #35	; 0x23
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c6:	2301      	movs	r3, #1
 80017c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ce:	2302      	movs	r3, #2
 80017d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d6:	4619      	mov	r1, r3
 80017d8:	4824      	ldr	r0, [pc, #144]	; (800186c <MX_GPIO_Init+0x200>)
 80017da:	f008 fabf 	bl	8009d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_PWR_ON_Pin */
  GPIO_InitStruct.Pin = DSI_PWR_ON_Pin;
 80017de:	2320      	movs	r3, #32
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e2:	2301      	movs	r3, #1
 80017e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DSI_PWR_ON_GPIO_Port, &GPIO_InitStruct);
 80017ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f2:	4619      	mov	r1, r3
 80017f4:	481e      	ldr	r0, [pc, #120]	; (8001870 <MX_GPIO_Init+0x204>)
 80017f6:	f008 fab1 	bl	8009d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80017fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001800:	2300      	movs	r3, #0
 8001802:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800180c:	4619      	mov	r1, r3
 800180e:	481a      	ldr	r0, [pc, #104]	; (8001878 <MX_GPIO_Init+0x20c>)
 8001810:	f008 faa4 	bl	8009d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TOUCH_INT_Pin */
  GPIO_InitStruct.Pin = DSI_TOUCH_INT_Pin;
 8001814:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800181a:	4b18      	ldr	r3, [pc, #96]	; (800187c <MX_GPIO_Init+0x210>)
 800181c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800181e:	2301      	movs	r3, #1
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DSI_TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 8001822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001826:	4619      	mov	r1, r3
 8001828:	480f      	ldr	r0, [pc, #60]	; (8001868 <MX_GPIO_Init+0x1fc>)
 800182a:	f008 fa97 	bl	8009d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_ACTIVE_Pin FRAME_RATE_Pin */
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin|FRAME_RATE_Pin;
 800182e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001834:	2301      	movs	r3, #1
 8001836:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800183c:	2302      	movs	r3, #2
 800183e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001844:	4619      	mov	r1, r3
 8001846:	480b      	ldr	r0, [pc, #44]	; (8001874 <MX_GPIO_Init+0x208>)
 8001848:	f008 fa88 	bl	8009d5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI8_IRQn, 10, 0);
 800184c:	2200      	movs	r2, #0
 800184e:	210a      	movs	r1, #10
 8001850:	2013      	movs	r0, #19
 8001852:	f006 f8db 	bl	8007a0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 8001856:	2013      	movs	r0, #19
 8001858:	f006 f8f2 	bl	8007a40 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800185c:	bf00      	nop
 800185e:	3738      	adds	r7, #56	; 0x38
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	46020c00 	.word	0x46020c00
 8001868:	42021000 	.word	0x42021000
 800186c:	42020c00 	.word	0x42020c00
 8001870:	42022000 	.word	0x42022000
 8001874:	42021400 	.word	0x42021400
 8001878:	42020800 	.word	0x42020800
 800187c:	10210000 	.word	0x10210000

08001880 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001888:	1d39      	adds	r1, r7, #4
 800188a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800188e:	2201      	movs	r2, #1
 8001890:	4803      	ldr	r0, [pc, #12]	; (80018a0 <__io_putchar+0x20>)
 8001892:	f010 fc77 	bl	8012184 <HAL_UART_Transmit>

  return ch;
 8001896:	687b      	ldr	r3, [r7, #4]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20152fb4 	.word	0x20152fb4

080018a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d101      	bne.n	80018ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018b6:	f005 ffad 	bl	8007814 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40001000 	.word	0x40001000

080018c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018cc:	b672      	cpsid	i
}
 80018ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <Error_Handler+0x8>
	...

080018d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <HAL_MspInit+0x30>)
 80018dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e0:	4a08      	ldr	r2, [pc, #32]	; (8001904 <HAL_MspInit+0x30>)
 80018e2:	f043 0304 	orr.w	r3, r3, #4
 80018e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_MspInit+0x30>)
 80018ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	46020c00 	.word	0x46020c00

08001908 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <HAL_CRC_MspInit+0x3c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d10e      	bne.n	8001938 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_CRC_MspInit+0x40>)
 800191c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001920:	4a09      	ldr	r2, [pc, #36]	; (8001948 <HAL_CRC_MspInit+0x40>)
 8001922:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001926:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800192a:	4b07      	ldr	r3, [pc, #28]	; (8001948 <HAL_CRC_MspInit+0x40>)
 800192c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	40023000 	.word	0x40023000
 8001948:	46020c00 	.word	0x46020c00

0800194c <HAL_DCACHE_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcache: DCACHE handle pointer
* @retval None
*/
void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef* hdcache)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  if(hdcache->Instance==DCACHE1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a16      	ldr	r2, [pc, #88]	; (80019b4 <HAL_DCACHE_MspInit+0x68>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d10f      	bne.n	800197e <HAL_DCACHE_MspInit+0x32>
  {
  /* USER CODE BEGIN DCACHE1_MspInit 0 */

  /* USER CODE END DCACHE1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 800195e:	4b16      	ldr	r3, [pc, #88]	; (80019b8 <HAL_DCACHE_MspInit+0x6c>)
 8001960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001964:	4a14      	ldr	r2, [pc, #80]	; (80019b8 <HAL_DCACHE_MspInit+0x6c>)
 8001966:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800196a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800196e:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <HAL_DCACHE_MspInit+0x6c>)
 8001970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001974:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DCACHE2_MspInit 1 */

  /* USER CODE END DCACHE2_MspInit 1 */
  }

}
 800197c:	e013      	b.n	80019a6 <HAL_DCACHE_MspInit+0x5a>
  else if(hdcache->Instance==DCACHE2)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a0e      	ldr	r2, [pc, #56]	; (80019bc <HAL_DCACHE_MspInit+0x70>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d10e      	bne.n	80019a6 <HAL_DCACHE_MspInit+0x5a>
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8001988:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <HAL_DCACHE_MspInit+0x6c>)
 800198a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800198e:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <HAL_DCACHE_MspInit+0x6c>)
 8001990:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001994:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001998:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <HAL_DCACHE_MspInit+0x6c>)
 800199a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800199e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
}
 80019a6:	bf00      	nop
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40031400 	.word	0x40031400
 80019b8:	46020c00 	.word	0x46020c00
 80019bc:	40031800 	.word	0x40031800

080019c0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0e      	ldr	r2, [pc, #56]	; (8001a08 <HAL_DMA2D_MspInit+0x48>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d116      	bne.n	8001a00 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80019d2:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <HAL_DMA2D_MspInit+0x4c>)
 80019d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019d8:	4a0c      	ldr	r2, [pc, #48]	; (8001a0c <HAL_DMA2D_MspInit+0x4c>)
 80019da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <HAL_DMA2D_MspInit+0x4c>)
 80019e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 80019f0:	2200      	movs	r2, #0
 80019f2:	2107      	movs	r1, #7
 80019f4:	2076      	movs	r0, #118	; 0x76
 80019f6:	f006 f809 	bl	8007a0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80019fa:	2076      	movs	r0, #118	; 0x76
 80019fc:	f006 f820 	bl	8007a40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001a00:	bf00      	nop
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	4002b000 	.word	0x4002b000
 8001a0c:	46020c00 	.word	0x46020c00

08001a10 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a0b      	ldr	r2, [pc, #44]	; (8001a4c <HAL_DSI_MspInit+0x3c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d10e      	bne.n	8001a40 <HAL_DSI_MspInit+0x30>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001a22:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <HAL_DSI_MspInit+0x40>)
 8001a24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001a28:	4a09      	ldr	r2, [pc, #36]	; (8001a50 <HAL_DSI_MspInit+0x40>)
 8001a2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a2e:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001a32:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <HAL_DSI_MspInit+0x40>)
 8001a34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001a38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	40016c00 	.word	0x40016c00
 8001a50:	46020c00 	.word	0x46020c00

08001a54 <HAL_GPU2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hgpu2d: GPU2D handle pointer
* @retval None
*/
void HAL_GPU2D_MspInit(GPU2D_HandleTypeDef* hgpu2d)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  if(hgpu2d->Instance==GPU2D)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a24      	ldr	r2, [pc, #144]	; (8001af4 <HAL_GPU2D_MspInit+0xa0>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d142      	bne.n	8001aec <HAL_GPU2D_MspInit+0x98>
  {
  /* USER CODE BEGIN GPU2D_MspInit 0 */

  /* USER CODE END GPU2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GPU2D_CLK_ENABLE();
 8001a66:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <HAL_GPU2D_MspInit+0xa4>)
 8001a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a6c:	4a22      	ldr	r2, [pc, #136]	; (8001af8 <HAL_GPU2D_MspInit+0xa4>)
 8001a6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a72:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001a76:	4b20      	ldr	r3, [pc, #128]	; (8001af8 <HAL_GPU2D_MspInit+0xa4>)
 8001a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8001a84:	4b1c      	ldr	r3, [pc, #112]	; (8001af8 <HAL_GPU2D_MspInit+0xa4>)
 8001a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a8a:	4a1b      	ldr	r2, [pc, #108]	; (8001af8 <HAL_GPU2D_MspInit+0xa4>)
 8001a8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001a94:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <HAL_GPU2D_MspInit+0xa4>)
 8001a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	693b      	ldr	r3, [r7, #16]
    /* GPU2D interrupt Init */
    HAL_NVIC_SetPriority(GPU2D_IRQn, 7, 0);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2107      	movs	r1, #7
 8001aa6:	2084      	movs	r0, #132	; 0x84
 8001aa8:	f005 ffb0 	bl	8007a0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_IRQn);
 8001aac:	2084      	movs	r0, #132	; 0x84
 8001aae:	f005 ffc7 	bl	8007a40 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPU2D_ER_IRQn, 7, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2107      	movs	r1, #7
 8001ab6:	2085      	movs	r0, #133	; 0x85
 8001ab8:	f005 ffa8 	bl	8007a0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_ER_IRQn);
 8001abc:	2085      	movs	r0, #133	; 0x85
 8001abe:	f005 ffbf 	bl	8007a40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN GPU2D_MspInit 1 */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <HAL_GPU2D_MspInit+0xa4>)
 8001ac4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001ac8:	4a0b      	ldr	r2, [pc, #44]	; (8001af8 <HAL_GPU2D_MspInit+0xa4>)
 8001aca:	f043 0302 	orr.w	r3, r3, #2
 8001ace:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001ad2:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <HAL_GPU2D_MspInit+0xa4>)
 8001ad4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	68fb      	ldr	r3, [r7, #12]
    SYSCFG->CFGR1 &= ~(1L << 28);
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_GPU2D_MspInit+0xa8>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	4a05      	ldr	r2, [pc, #20]	; (8001afc <HAL_GPU2D_MspInit+0xa8>)
 8001ae6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aea:	6053      	str	r3, [r2, #4]
  /* USER CODE END GPU2D_MspInit 1 */
  }

}
 8001aec:	bf00      	nop
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	4002f000 	.word	0x4002f000
 8001af8:	46020c00 	.word	0x46020c00
 8001afc:	46000400 	.word	0x46000400

08001b00 <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b0c0      	sub	sp, #256	; 0x100
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b18:	f107 0308 	add.w	r3, r7, #8
 8001b1c:	22e0      	movs	r2, #224	; 0xe0
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4618      	mov	r0, r3
 8001b22:	f027 fb49 	bl	80291b8 <memset>
  /* USER CODE BEGIN HSPI1_MspInit 1 */
#endif
  /* USER CODE END HSPI1_MspInit 1 */
  }

}
 8001b26:	bf00      	nop
 8001b28:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <HAL_XSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspDeInit(XSPI_HandleTypeDef* hxspi)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HSPI1_MspDeInit 1 */
#endif
  /* USER CODE END HSPI1_MspDeInit 1 */
  }

}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a12      	ldr	r2, [pc, #72]	; (8001b9c <HAL_LTDC_MspInit+0x58>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d11e      	bne.n	8001b94 <HAL_LTDC_MspInit+0x50>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001b56:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <HAL_LTDC_MspInit+0x5c>)
 8001b58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001b5c:	4a10      	ldr	r2, [pc, #64]	; (8001ba0 <HAL_LTDC_MspInit+0x5c>)
 8001b5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b62:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <HAL_LTDC_MspInit+0x5c>)
 8001b68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001b6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001b74:	2200      	movs	r2, #0
 8001b76:	2107      	movs	r1, #7
 8001b78:	2087      	movs	r0, #135	; 0x87
 8001b7a:	f005 ff47 	bl	8007a0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001b7e:	2087      	movs	r0, #135	; 0x87
 8001b80:	f005 ff5e 	bl	8007a40 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 7, 0);
 8001b84:	2200      	movs	r2, #0
 8001b86:	2107      	movs	r1, #7
 8001b88:	2088      	movs	r0, #136	; 0x88
 8001b8a:	f005 ff3f 	bl	8007a0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 8001b8e:	2088      	movs	r0, #136	; 0x88
 8001b90:	f005 ff56 	bl	8007a40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001b94:	bf00      	nop
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40016800 	.word	0x40016800
 8001ba0:	46020c00 	.word	0x46020c00

08001ba4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0b      	ldr	r2, [pc, #44]	; (8001be0 <HAL_TIM_Base_MspInit+0x3c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d10e      	bne.n	8001bd4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <HAL_TIM_Base_MspInit+0x40>)
 8001bb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001bbc:	4a09      	ldr	r2, [pc, #36]	; (8001be4 <HAL_TIM_Base_MspInit+0x40>)
 8001bbe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bc2:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001bc6:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <HAL_TIM_Base_MspInit+0x40>)
 8001bc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001bcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	40013400 	.word	0x40013400
 8001be4:	46020c00 	.word	0x46020c00

08001be8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b088      	sub	sp, #32
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 030c 	add.w	r3, r7, #12
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a12      	ldr	r2, [pc, #72]	; (8001c50 <HAL_TIM_MspPostInit+0x68>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d11e      	bne.n	8001c48 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_TIM_MspPostInit+0x6c>)
 8001c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c10:	4a10      	ldr	r2, [pc, #64]	; (8001c54 <HAL_TIM_MspPostInit+0x6c>)
 8001c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <HAL_TIM_MspPostInit+0x6c>)
 8001c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PI6     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = DSI_BL_CTRL_Pin;
 8001c28:	2340      	movs	r3, #64	; 0x40
 8001c2a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c34:	2302      	movs	r3, #2
 8001c36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DSI_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001c3c:	f107 030c 	add.w	r3, r7, #12
 8001c40:	4619      	mov	r1, r3
 8001c42:	4805      	ldr	r0, [pc, #20]	; (8001c58 <HAL_TIM_MspPostInit+0x70>)
 8001c44:	f008 f88a 	bl	8009d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001c48:	bf00      	nop
 8001c4a:	3720      	adds	r7, #32
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40013400 	.word	0x40013400
 8001c54:	46020c00 	.word	0x46020c00
 8001c58:	42022000 	.word	0x42022000

08001c5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b0c2      	sub	sp, #264	; 0x108
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c6a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c7c:	f107 0310 	add.w	r3, r7, #16
 8001c80:	22e0      	movs	r2, #224	; 0xe0
 8001c82:	2100      	movs	r1, #0
 8001c84:	4618      	mov	r0, r3
 8001c86:	f027 fa97 	bl	80291b8 <memset>
  if(huart->Instance==USART1)
 8001c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a2b      	ldr	r2, [pc, #172]	; (8001d44 <HAL_UART_MspInit+0xe8>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d14d      	bne.n	8001d38 <HAL_UART_MspInit+0xdc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c9c:	f04f 0201 	mov.w	r2, #1
 8001ca0:	f04f 0300 	mov.w	r3, #0
 8001ca4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cac:	f107 0310 	add.w	r3, r7, #16
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f00b fc29 	bl	800d508 <HAL_RCCEx_PeriphCLKConfig>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 8001cbc:	f7ff fe04 	bl	80018c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cc0:	4b21      	ldr	r3, [pc, #132]	; (8001d48 <HAL_UART_MspInit+0xec>)
 8001cc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001cc6:	4a20      	ldr	r2, [pc, #128]	; (8001d48 <HAL_UART_MspInit+0xec>)
 8001cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ccc:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <HAL_UART_MspInit+0xec>)
 8001cd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cde:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <HAL_UART_MspInit+0xec>)
 8001ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ce4:	4a18      	ldr	r2, [pc, #96]	; (8001d48 <HAL_UART_MspInit+0xec>)
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001cee:	4b16      	ldr	r3, [pc, #88]	; (8001d48 <HAL_UART_MspInit+0xec>)
 8001cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cf4:	f003 0201 	and.w	r2, r3, #1
 8001cf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001cfc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d06:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001d0a:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001d0c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d10:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d14:	2302      	movs	r3, #2
 8001d16:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d26:	2307      	movs	r3, #7
 8001d28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001d30:	4619      	mov	r1, r3
 8001d32:	4806      	ldr	r0, [pc, #24]	; (8001d4c <HAL_UART_MspInit+0xf0>)
 8001d34:	f008 f812 	bl	8009d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d38:	bf00      	nop
 8001d3a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40013800 	.word	0x40013800
 8001d48:	46020c00 	.word	0x46020c00
 8001d4c:	42020000 	.word	0x42020000

08001d50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08e      	sub	sp, #56	; 0x38
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d60:	4b2e      	ldr	r3, [pc, #184]	; (8001e1c <HAL_InitTick+0xcc>)
 8001d62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d66:	4a2d      	ldr	r2, [pc, #180]	; (8001e1c <HAL_InitTick+0xcc>)
 8001d68:	f043 0310 	orr.w	r3, r3, #16
 8001d6c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001d70:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <HAL_InitTick+0xcc>)
 8001d72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d7e:	f107 0210 	add.w	r2, r7, #16
 8001d82:	f107 0314 	add.w	r3, r7, #20
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f00b faff 	bl	800d38c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d8e:	f00b fac1 	bl	800d314 <HAL_RCC_GetPCLK1Freq>
 8001d92:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d96:	4a22      	ldr	r2, [pc, #136]	; (8001e20 <HAL_InitTick+0xd0>)
 8001d98:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9c:	0c9b      	lsrs	r3, r3, #18
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001da2:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <HAL_InitTick+0xd4>)
 8001da4:	4a20      	ldr	r2, [pc, #128]	; (8001e28 <HAL_InitTick+0xd8>)
 8001da6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001da8:	4b1e      	ldr	r3, [pc, #120]	; (8001e24 <HAL_InitTick+0xd4>)
 8001daa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dae:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001db0:	4a1c      	ldr	r2, [pc, #112]	; (8001e24 <HAL_InitTick+0xd4>)
 8001db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001db6:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <HAL_InitTick+0xd4>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dbc:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <HAL_InitTick+0xd4>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001dc2:	4818      	ldr	r0, [pc, #96]	; (8001e24 <HAL_InitTick+0xd4>)
 8001dc4:	f00e fbc8 	bl	8010558 <HAL_TIM_Base_Init>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8001dce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d118      	bne.n	8001e08 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001dd6:	4813      	ldr	r0, [pc, #76]	; (8001e24 <HAL_InitTick+0xd4>)
 8001dd8:	f00e fc16 	bl	8010608 <HAL_TIM_Base_Start_IT>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8001de2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10e      	bne.n	8001e08 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b0f      	cmp	r3, #15
 8001dee:	d808      	bhi.n	8001e02 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8001df0:	2200      	movs	r2, #0
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	2031      	movs	r0, #49	; 0x31
 8001df6:	f005 fe09 	bl	8007a0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dfa:	4a0c      	ldr	r2, [pc, #48]	; (8001e2c <HAL_InitTick+0xdc>)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	e002      	b.n	8001e08 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001e08:	2031      	movs	r0, #49	; 0x31
 8001e0a:	f005 fe19 	bl	8007a40 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8001e0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3738      	adds	r7, #56	; 0x38
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	46020c00 	.word	0x46020c00
 8001e20:	431bde83 	.word	0x431bde83
 8001e24:	20153048 	.word	0x20153048
 8001e28:	40001000 	.word	0x40001000
 8001e2c:	2000004c 	.word	0x2000004c

08001e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <NMI_Handler+0x4>

08001e36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e3a:	e7fe      	b.n	8001e3a <HardFault_Handler+0x4>

08001e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <MemManage_Handler+0x4>

08001e42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e46:	e7fe      	b.n	8001e46 <BusFault_Handler+0x4>

08001e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <UsageFault_Handler+0x4>

08001e4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <EXTI8_IRQHandler>:

/**
  * @brief This function handles EXTI Line8 interrupt.
  */
void EXTI8_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI8_IRQn 0 */

  /* USER CODE END EXTI8_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DSI_TOUCH_INT_Pin);
 8001e60:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001e64:	f008 fad4 	bl	800a410 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI8_IRQn 1 */

  /* USER CODE END EXTI8_IRQn 1 */
}
 8001e68:	bf00      	nop
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e70:	4802      	ldr	r0, [pc, #8]	; (8001e7c <TIM6_IRQHandler+0x10>)
 8001e72:	f00e fe1d 	bl	8010ab0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20153048 	.word	0x20153048

08001e80 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001e84:	4802      	ldr	r0, [pc, #8]	; (8001e90 <DMA2D_IRQHandler+0x10>)
 8001e86:	f006 fc6e 	bl	8008766 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20152e30 	.word	0x20152e30

08001e94 <GPU2D_IRQHandler>:

/**
  * @brief This function handles GPU2D global interrupt.
  */
void GPU2D_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_IRQn 0 */

  /* USER CODE END GPU2D_IRQn 0 */
  HAL_GPU2D_IRQHandler(&hgpu2d);
 8001e98:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <GPU2D_IRQHandler+0x10>)
 8001e9a:	f008 fb3a 	bl	800a512 <HAL_GPU2D_IRQHandler>
  /* USER CODE BEGIN GPU2D_IRQn 1 */

  /* USER CODE END GPU2D_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20152eb4 	.word	0x20152eb4

08001ea8 <GPU2D_ER_IRQHandler>:

/**
  * @brief This function handles GPU2D Error interrupt.
  */
void GPU2D_ER_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_ER_IRQn 0 */

  /* USER CODE END GPU2D_ER_IRQn 0 */
  HAL_GPU2D_ER_IRQHandler(&hgpu2d);
 8001eac:	4802      	ldr	r0, [pc, #8]	; (8001eb8 <GPU2D_ER_IRQHandler+0x10>)
 8001eae:	f008 fb56 	bl	800a55e <HAL_GPU2D_ER_IRQHandler>
  /* USER CODE BEGIN GPU2D_ER_IRQn 1 */

  /* USER CODE END GPU2D_ER_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20152eb4 	.word	0x20152eb4

08001ebc <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001ec0:	4802      	ldr	r0, [pc, #8]	; (8001ecc <LTDC_IRQHandler+0x10>)
 8001ec2:	f009 fc3f 	bl	800b744 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20152ec0 	.word	0x20152ec0

08001ed0 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LCD-TFT Error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001ed4:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <LTDC_ER_IRQHandler+0x10>)
 8001ed6:	f009 fc35 	bl	800b744 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20152ec0 	.word	0x20152ec0

08001ee4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return 1;
 8001ee8:	2301      	movs	r3, #1
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <_kill>:

int _kill(int pid, int sig)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001efe:	f027 f90f 	bl	8029120 <__errno>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2216      	movs	r2, #22
 8001f06:	601a      	str	r2, [r3, #0]
  return -1;
 8001f08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <_exit>:

void _exit (int status)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff ffe7 	bl	8001ef4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f26:	e7fe      	b.n	8001f26 <_exit+0x12>

08001f28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
 8001f38:	e00a      	b.n	8001f50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f3a:	e000      	b.n	8001f3e <_read+0x16>
 8001f3c:	bf00      	nop
 8001f3e:	4601      	mov	r1, r0
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	1c5a      	adds	r2, r3, #1
 8001f44:	60ba      	str	r2, [r7, #8]
 8001f46:	b2ca      	uxtb	r2, r1
 8001f48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	dbf0      	blt.n	8001f3a <_read+0x12>
  }

  return len;
 8001f58:	687b      	ldr	r3, [r7, #4]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b086      	sub	sp, #24
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	60f8      	str	r0, [r7, #12]
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
 8001f72:	e009      	b.n	8001f88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	1c5a      	adds	r2, r3, #1
 8001f78:	60ba      	str	r2, [r7, #8]
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff fc7f 	bl	8001880 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	3301      	adds	r3, #1
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	dbf1      	blt.n	8001f74 <_write+0x12>
  }
  return len;
 8001f90:	687b      	ldr	r3, [r7, #4]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <_close>:

int _close(int file)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fc2:	605a      	str	r2, [r3, #4]
  return 0;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <_isatty>:

int _isatty(int file)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fda:	2301      	movs	r3, #1
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
	...

08002004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800200c:	4a14      	ldr	r2, [pc, #80]	; (8002060 <_sbrk+0x5c>)
 800200e:	4b15      	ldr	r3, [pc, #84]	; (8002064 <_sbrk+0x60>)
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002018:	4b13      	ldr	r3, [pc, #76]	; (8002068 <_sbrk+0x64>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d102      	bne.n	8002026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002020:	4b11      	ldr	r3, [pc, #68]	; (8002068 <_sbrk+0x64>)
 8002022:	4a12      	ldr	r2, [pc, #72]	; (800206c <_sbrk+0x68>)
 8002024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002026:	4b10      	ldr	r3, [pc, #64]	; (8002068 <_sbrk+0x64>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	429a      	cmp	r2, r3
 8002032:	d207      	bcs.n	8002044 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002034:	f027 f874 	bl	8029120 <__errno>
 8002038:	4603      	mov	r3, r0
 800203a:	220c      	movs	r2, #12
 800203c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800203e:	f04f 33ff 	mov.w	r3, #4294967295
 8002042:	e009      	b.n	8002058 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002044:	4b08      	ldr	r3, [pc, #32]	; (8002068 <_sbrk+0x64>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800204a:	4b07      	ldr	r3, [pc, #28]	; (8002068 <_sbrk+0x64>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4413      	add	r3, r2
 8002052:	4a05      	ldr	r2, [pc, #20]	; (8002068 <_sbrk+0x64>)
 8002054:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002056:	68fb      	ldr	r3, [r7, #12]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20270000 	.word	0x20270000
 8002064:	00001000 	.word	0x00001000
 8002068:	20153094 	.word	0x20153094
 800206c:	20197ef8 	.word	0x20197ef8

08002070 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002070:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020a8 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002074:	f005 fb68 	bl	8007748 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002078:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800207a:	e003      	b.n	8002084 <LoopCopyDataInit>

0800207c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800207c:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800207e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002080:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002082:	3104      	adds	r1, #4

08002084 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002084:	480a      	ldr	r0, [pc, #40]	; (80020b0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002086:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002088:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800208a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800208c:	d3f6      	bcc.n	800207c <CopyDataInit>
	ldr	r2, =_sbss
 800208e:	4a0a      	ldr	r2, [pc, #40]	; (80020b8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002090:	e002      	b.n	8002098 <LoopFillZerobss>

08002092 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002092:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002094:	f842 3b04 	str.w	r3, [r2], #4

08002098 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002098:	4b08      	ldr	r3, [pc, #32]	; (80020bc <LoopForever+0x16>)
	cmp	r2, r3
 800209a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800209c:	d3f9      	bcc.n	8002092 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800209e:	f027 f857 	bl	8029150 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020a2:	f7fe fc0b 	bl	80008bc <main>

080020a6 <LoopForever>:

LoopForever:
    b LoopForever
 80020a6:	e7fe      	b.n	80020a6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80020a8:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 80020ac:	0802d428 	.word	0x0802d428
	ldr	r0, =_sdata
 80020b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80020b4:	2000012c 	.word	0x2000012c
	ldr	r2, =_sbss
 80020b8:	20151930 	.word	0x20151930
	ldr	r3, = _ebss
 80020bc:	20197ef4 	.word	0x20197ef4

080020c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020c0:	e7fe      	b.n	80020c0 <ADC1_2_IRQHandler>

080020c2 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 80020c6:	f000 fe65 	bl	8002d94 <touchgfx_components_init>
  touchgfx_init();
 80020ca:	f000 fdeb 	bl	8002ca4 <touchgfx_init>
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
	...

080020d4 <MX_TouchGFX_Init>:

/**
 * Create TouchGFX Thread
 */
UINT MX_TouchGFX_Init(VOID *memory_ptr)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08c      	sub	sp, #48	; 0x30
 80020d8:	af08      	add	r7, sp, #32
 80020da:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]
  CHAR *pointer = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	60bb      	str	r3, [r7, #8]

  /* Allocate the stack for TouchGFX Thread.  */
  if (tx_byte_allocate((TX_BYTE_POOL*)memory_ptr, (VOID **) &pointer,
 80020e4:	f107 0108 	add.w	r1, r7, #8
 80020e8:	2300      	movs	r3, #0
 80020ea:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f013 fe1c 	bl	8015d2c <_txe_byte_allocate>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d002      	beq.n	8002100 <MX_TouchGFX_Init+0x2c>
                       TOUCHGFX_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    ret = TX_POOL_ERROR;
 80020fa:	2302      	movs	r3, #2
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	e019      	b.n	8002134 <MX_TouchGFX_Init+0x60>
  }

  /* Create TouchGFX Thread */
  else if (tx_thread_create(&TouchGFXThread, (CHAR *)"TouchGFX", TouchGFX_Task, 0,
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	22b0      	movs	r2, #176	; 0xb0
 8002104:	9206      	str	r2, [sp, #24]
 8002106:	2201      	movs	r2, #1
 8002108:	9205      	str	r2, [sp, #20]
 800210a:	2200      	movs	r2, #0
 800210c:	9204      	str	r2, [sp, #16]
 800210e:	2205      	movs	r2, #5
 8002110:	9203      	str	r2, [sp, #12]
 8002112:	2205      	movs	r2, #5
 8002114:	9202      	str	r2, [sp, #8]
 8002116:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 800211a:	9201      	str	r2, [sp, #4]
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	2300      	movs	r3, #0
 8002120:	4a07      	ldr	r2, [pc, #28]	; (8002140 <MX_TouchGFX_Init+0x6c>)
 8002122:	4908      	ldr	r1, [pc, #32]	; (8002144 <MX_TouchGFX_Init+0x70>)
 8002124:	4808      	ldr	r0, [pc, #32]	; (8002148 <MX_TouchGFX_Init+0x74>)
 8002126:	f014 f94f 	bl	80163c8 <_txe_thread_create>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_TouchGFX_Init+0x60>
                       pointer, TOUCHGFX_STACK_SIZE,
                       5, 5,
                       TX_NO_TIME_SLICE, TX_AUTO_START) != TX_SUCCESS)
  {
    ret = TX_THREAD_ERROR;
 8002130:	230e      	movs	r3, #14
 8002132:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002134:	68fb      	ldr	r3, [r7, #12]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	0800214d 	.word	0x0800214d
 8002144:	0802a624 	.word	0x0802a624
 8002148:	20153098 	.word	0x20153098

0800214c <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(unsigned long thread_input)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8002154:	f000 fe28 	bl	8002da8 <touchgfx_taskEntry>
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <_ZN8touchgfx7Buttons4initEv>:
    BUTTON_USER  = '5',
} JOYState_TypeDef;

void Buttons::init()
{
}
 8002160:	4770      	bx	lr
	...

08002164 <_ZN8touchgfx7Buttons6sampleEv>:

unsigned int Buttons::sample()
{
    unsigned int buttonValue = BUTTON_NONE;

    if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_SET)
 8002164:	f44f 5100 	mov.w	r1, #8192	; 0x2000
{
 8002168:	b508      	push	{r3, lr}
    if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_SET)
 800216a:	4804      	ldr	r0, [pc, #16]	; (800217c <_ZN8touchgfx7Buttons6sampleEv+0x18>)
 800216c:	f008 f8ac 	bl	800a2c8 <HAL_GPIO_ReadPin>
        buttonValue = BUTTON_USER;
    }

    if (buttonValue == BUTTON_NONE)
    {
        return 0;
 8002170:	2801      	cmp	r0, #1
    }

    return static_cast<unsigned int>(buttonValue);
}
 8002172:	bf0c      	ite	eq
 8002174:	2035      	moveq	r0, #53	; 0x35
 8002176:	2000      	movne	r0, #0
 8002178:	bd08      	pop	{r3, pc}
 800217a:	bf00      	nop
 800217c:	42020800 	.word	0x42020800

08002180 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8002180:	6840      	ldr	r0, [r0, #4]
    }
 8002182:	4770      	bx	lr

08002184 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8002184:	6041      	str	r1, [r0, #4]
    }
 8002186:	4770      	bx	lr

08002188 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8002188:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800218c:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	; 0xdfc
 8002190:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002194:	f8c2 3dfc 	str.w	r3, [r2, #3580]	; 0xdfc
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8002198:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 800219a:	4a06      	ldr	r2, [pc, #24]	; (80021b4 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 800219c:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
 80021a0:	430a      	orrs	r2, r1
 80021a2:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	f042 0201 	orr.w	r2, r2, #1
 80021ac:	601a      	str	r2, [r3, #0]
}
 80021ae:	4770      	bx	lr
 80021b0:	e0001000 	.word	0xe0001000
 80021b4:	c5acce55 	.word	0xc5acce55

080021b8 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 80021b8:	1a51      	subs	r1, r2, r1
 80021ba:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 80021be:	fbb1 f0f3 	udiv	r0, r1, r3
 80021c2:	4770      	bx	lr

080021c4 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 80021c4:	4b01      	ldr	r3, [pc, #4]	; (80021cc <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 80021c6:	6858      	ldr	r0, [r3, #4]
}
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	e0001000 	.word	0xe0001000

080021d0 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 80021d0:	4770      	bx	lr

080021d2 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 80021d2:	b510      	push	{r4, lr}
 80021d4:	4604      	mov	r4, r0
 80021d6:	210c      	movs	r1, #12
 80021d8:	f026 ff43 	bl	8029062 <_ZdlPvj>
 80021dc:	4620      	mov	r0, r4
 80021de:	bd10      	pop	{r4, pc}

080021e0 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 80021e0:	6803      	ldr	r3, [r0, #0]
{
 80021e2:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 80021e4:	691b      	ldr	r3, [r3, #16]
{
 80021e6:	4604      	mov	r4, r0
    if (active) //idle task sched out
 80021e8:	b131      	cbz	r1, 80021f8 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 80021ea:	4798      	blx	r3
 80021ec:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 80021ee:	6863      	ldr	r3, [r4, #4]
 80021f0:	1a9b      	subs	r3, r3, r2
 80021f2:	4418      	add	r0, r3
 80021f4:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 80021f6:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 80021f8:	4798      	blx	r3
 80021fa:	60a0      	str	r0, [r4, #8]
}
 80021fc:	e7fb      	b.n	80021f6 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>

080021fe <_ZN8touchgfx16ButtonController5resetEv>:
    virtual bool sample(uint8_t& key) = 0;

    /** Resets button controller. Does nothing in the default implementation. */
    virtual void reset()
    {
    }
 80021fe:	4770      	bx	lr

08002200 <_ZN8touchgfx10KeySamplerD1Ev>:
public:
    KeySampler()
    {
        init();
    }
    virtual ~KeySampler() {}
 8002200:	4770      	bx	lr

08002202 <_ZN8touchgfx10KeySampler4initEv>:

using namespace touchgfx;

void KeySampler::init()
{
    previousState = 0;
 8002202:	2300      	movs	r3, #0
 8002204:	7103      	strb	r3, [r0, #4]
    Buttons::init();
 8002206:	f7ff bfab 	b.w	8002160 <_ZN8touchgfx7Buttons4initEv>
	...

0800220c <_ZN8touchgfx10KeySampler6sampleERh>:
}

bool KeySampler::sample(uint8_t& key)
{
 800220c:	b570      	push	{r4, r5, r6, lr}
 800220e:	4604      	mov	r4, r0
 8002210:	460d      	mov	r5, r1
    static uint32_t last_time = 0;

    if ((HAL_GetTick() - last_time) > 800)
 8002212:	f005 fb13 	bl	800783c <HAL_GetTick>
 8002216:	4e0b      	ldr	r6, [pc, #44]	; (8002244 <_ZN8touchgfx10KeySampler6sampleERh+0x38>)
 8002218:	6833      	ldr	r3, [r6, #0]
 800221a:	1ac0      	subs	r0, r0, r3
 800221c:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
 8002220:	d904      	bls.n	800222c <_ZN8touchgfx10KeySampler6sampleERh+0x20>
    {
        last_time = HAL_GetTick();
 8002222:	f005 fb0b 	bl	800783c <HAL_GetTick>
        previousState = 0;
 8002226:	2300      	movs	r3, #0
        last_time = HAL_GetTick();
 8002228:	6030      	str	r0, [r6, #0]
        previousState = 0;
 800222a:	7123      	strb	r3, [r4, #4]
    }

    key = static_cast<uint8_t>(Buttons::sample());
 800222c:	f7ff ff9a 	bl	8002164 <_ZN8touchgfx7Buttons6sampleEv>
 8002230:	b2c0      	uxtb	r0, r0
 8002232:	7028      	strb	r0, [r5, #0]

    //User key
    if (key && (key != previousState))
 8002234:	b128      	cbz	r0, 8002242 <_ZN8touchgfx10KeySampler6sampleERh+0x36>
 8002236:	7922      	ldrb	r2, [r4, #4]
 8002238:	4282      	cmp	r2, r0
    {
        previousState = key;
 800223a:	bf16      	itet	ne
 800223c:	7120      	strbne	r0, [r4, #4]
        return true;
    }

    return false;
 800223e:	2000      	moveq	r0, #0
        return true;
 8002240:	2001      	movne	r0, #1
}
 8002242:	bd70      	pop	{r4, r5, r6, pc}
 8002244:	20153148 	.word	0x20153148

08002248 <_ZN8touchgfx10KeySamplerD0Ev>:
 8002248:	b510      	push	{r4, lr}
 800224a:	4604      	mov	r4, r0
 800224c:	2108      	movs	r1, #8
 800224e:	f026 ff08 	bl	8029062 <_ZdlPvj>
 8002252:	4620      	mov	r0, r4
 8002254:	bd10      	pop	{r4, pc}

08002256 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8002256:	4770      	bx	lr

08002258 <_ZN20STM32TouchControllerD0Ev>:
 8002258:	b510      	push	{r4, lr}
 800225a:	4604      	mov	r4, r0
 800225c:	2104      	movs	r1, #4
 800225e:	f026 ff00 	bl	8029062 <_ZdlPvj>
 8002262:	4620      	mov	r0, r4
 8002264:	bd10      	pop	{r4, pc}
	...

08002268 <_ZN20STM32TouchController11sampleTouchERlS0_>:
    }
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
    if (_initialized)
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1c>)
{
 800226a:	b510      	push	{r4, lr}
    if (_initialized)
 800226c:	7818      	ldrb	r0, [r3, #0]
 800226e:	b130      	cbz	r0, 800227e <_ZN20STM32TouchController11sampleTouchERlS0_+0x16>
    {
        if (state.TouchDetected)
 8002270:	4b05      	ldr	r3, [pc, #20]	; (8002288 <_ZN20STM32TouchController11sampleTouchERlS0_+0x20>)
 8002272:	681c      	ldr	r4, [r3, #0]
 8002274:	b124      	cbz	r4, 8002280 <_ZN20STM32TouchController11sampleTouchERlS0_+0x18>
        {
            x = state.TouchX;
 8002276:	685c      	ldr	r4, [r3, #4]
 8002278:	600c      	str	r4, [r1, #0]
            y = state.TouchY;
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	6013      	str	r3, [r2, #0]
            return true;
        }
    }

    return false;
}
 800227e:	bd10      	pop	{r4, pc}
    return false;
 8002280:	4620      	mov	r0, r4
 8002282:	e7fc      	b.n	800227e <_ZN20STM32TouchController11sampleTouchERlS0_+0x16>
 8002284:	2015314c 	.word	0x2015314c
 8002288:	20153150 	.word	0x20153150

0800228c <_ZN20STM32TouchController4initEv>:
{
 800228c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (!_initialized)
 800228e:	4c09      	ldr	r4, [pc, #36]	; (80022b4 <_ZN20STM32TouchController4initEv+0x28>)
 8002290:	7820      	ldrb	r0, [r4, #0]
 8002292:	b968      	cbnz	r0, 80022b0 <_ZN20STM32TouchController4initEv+0x24>
        TsInit.Width = HAL::DISPLAY_WIDTH;
 8002294:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <_ZN20STM32TouchController4initEv+0x2c>)
        if (BSP_TS_Init(0, &TsInit) == BSP_ERROR_NONE)
 8002296:	4669      	mov	r1, sp
        TsInit.Width = HAL::DISPLAY_WIDTH;
 8002298:	881b      	ldrh	r3, [r3, #0]
        TsInit.Accuracy = 0;
 800229a:	9003      	str	r0, [sp, #12]
        TsInit.Width = HAL::DISPLAY_WIDTH;
 800229c:	9300      	str	r3, [sp, #0]
        TsInit.Height = HAL::DISPLAY_HEIGHT;
 800229e:	4b07      	ldr	r3, [pc, #28]	; (80022bc <_ZN20STM32TouchController4initEv+0x30>)
 80022a0:	881b      	ldrh	r3, [r3, #0]
        TsInit.Orientation = TS_ORIENTATION_PORTRAIT;
 80022a2:	e9cd 3001 	strd	r3, r0, [sp, #4]
        if (BSP_TS_Init(0, &TsInit) == BSP_ERROR_NONE)
 80022a6:	f005 f859 	bl	800735c <BSP_TS_Init>
 80022aa:	b908      	cbnz	r0, 80022b0 <_ZN20STM32TouchController4initEv+0x24>
            _initialized = true;
 80022ac:	2301      	movs	r3, #1
 80022ae:	7023      	strb	r3, [r4, #0]
}
 80022b0:	b004      	add	sp, #16
 80022b2:	bd10      	pop	{r4, pc}
 80022b4:	2015314c 	.word	0x2015314c
 80022b8:	201979dc 	.word	0x201979dc
 80022bc:	201979de 	.word	0x201979de

080022c0 <HAL_GPIO_EXTI_Falling_Callback>:
    if (GPIO_Pin == TS_INT_PIN)
 80022c0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 80022c4:	b508      	push	{r3, lr}
    if (GPIO_Pin == TS_INT_PIN)
 80022c6:	d10d      	bne.n	80022e4 <HAL_GPIO_EXTI_Falling_Callback+0x24>
        if (_initialized)
 80022c8:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <HAL_GPIO_EXTI_Falling_Callback+0x28>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	b153      	cbz	r3, 80022e4 <HAL_GPIO_EXTI_Falling_Callback+0x24>
            if (BSP_TS_GetState(0, &state) != BSP_ERROR_NONE)
 80022ce:	2000      	movs	r0, #0
 80022d0:	4906      	ldr	r1, [pc, #24]	; (80022ec <HAL_GPIO_EXTI_Falling_Callback+0x2c>)
 80022d2:	f005 f8df 	bl	8007494 <BSP_TS_GetState>
 80022d6:	b128      	cbz	r0, 80022e4 <HAL_GPIO_EXTI_Falling_Callback+0x24>
                assert(0 && "Failed to read TS state");
 80022d8:	213b      	movs	r1, #59	; 0x3b
 80022da:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <HAL_GPIO_EXTI_Falling_Callback+0x30>)
 80022dc:	4a05      	ldr	r2, [pc, #20]	; (80022f4 <HAL_GPIO_EXTI_Falling_Callback+0x34>)
 80022de:	4806      	ldr	r0, [pc, #24]	; (80022f8 <HAL_GPIO_EXTI_Falling_Callback+0x38>)
 80022e0:	f026 feec 	bl	80290bc <__assert_func>
}
 80022e4:	bd08      	pop	{r3, pc}
 80022e6:	bf00      	nop
 80022e8:	2015314c 	.word	0x2015314c
 80022ec:	20153150 	.word	0x20153150
 80022f0:	0802a7c8 	.word	0x0802a7c8
 80022f4:	0802a7e7 	.word	0x0802a7e7
 80022f8:	0802a815 	.word	0x0802a815

080022fc <_ZN8touchgfx4GPIO4initEv>:
 * Perform configuration of IO pins.
 */
void GPIO::init()
{

}
 80022fc:	4770      	bx	lr
	...

08002300 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8002300:	2803      	cmp	r0, #3
 8002302:	d814      	bhi.n	800232e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2e>
 8002304:	e8df f000 	tbb	[pc, r0]
 8002308:	0f0a0702 	.word	0x0f0a0702
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
 800230c:	2201      	movs	r2, #1
 800230e:	2102      	movs	r1, #2
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_SET);
 8002310:	4807      	ldr	r0, [pc, #28]	; (8002330 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x30>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_SET);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
 8002312:	f007 bff1 	b.w	800a2f8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_SET);
 8002316:	2201      	movs	r2, #1
 8002318:	4611      	mov	r1, r2
 800231a:	e7f9      	b.n	8002310 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x10>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_SET);
 800231c:	2201      	movs	r2, #1
 800231e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
 8002322:	4804      	ldr	r0, [pc, #16]	; (8002334 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x34>)
 8002324:	e7f5      	b.n	8002312 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x12>
 8002326:	2201      	movs	r2, #1
 8002328:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800232c:	e7f9      	b.n	8002322 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x22>
#endif
        break;
    }
}
 800232e:	4770      	bx	lr
 8002330:	42020c00 	.word	0x42020c00
 8002334:	42021400 	.word	0x42021400

08002338 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8002338:	2803      	cmp	r0, #3
 800233a:	d814      	bhi.n	8002366 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2e>
 800233c:	e8df f000 	tbb	[pc, r0]
 8002340:	0f0a0702 	.word	0x0f0a0702
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8002344:	2200      	movs	r2, #0
 8002346:	2102      	movs	r1, #2
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_RESET);
 8002348:	4807      	ldr	r0, [pc, #28]	; (8002368 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x30>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 800234a:	f007 bfd5 	b.w	800a2f8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_RESET);
 800234e:	2200      	movs	r2, #0
 8002350:	2101      	movs	r1, #1
 8002352:	e7f9      	b.n	8002348 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x10>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 8002354:	2200      	movs	r2, #0
 8002356:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 800235a:	4804      	ldr	r0, [pc, #16]	; (800236c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x34>)
 800235c:	e7f5      	b.n	800234a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x12>
 800235e:	2200      	movs	r2, #0
 8002360:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002364:	e7f9      	b.n	800235a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x22>
#endif
        break;
    }
}
 8002366:	4770      	bx	lr
 8002368:	42020c00 	.word	0x42020c00
 800236c:	42021400 	.word	0x42021400

08002370 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8002370:	2803      	cmp	r0, #3
 8002372:	d810      	bhi.n	8002396 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x26>
 8002374:	e8df f000 	tbb	[pc, r0]
 8002378:	0c080602 	.word	0x0c080602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 800237c:	2102      	movs	r1, #2
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 800237e:	4806      	ldr	r0, [pc, #24]	; (8002398 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8002380:	f007 bfd2 	b.w	800a328 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8002384:	2101      	movs	r1, #1
 8002386:	e7fa      	b.n	800237e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8002388:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800238c:	4803      	ldr	r0, [pc, #12]	; (800239c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
 800238e:	e7f7      	b.n	8002380 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
 8002390:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002394:	e7fa      	b.n	800238c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x1c>
#endif
        break;
    }
}
 8002396:	4770      	bx	lr
 8002398:	42020c00 	.word	0x42020c00
 800239c:	42021400 	.word	0x42021400

080023a0 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 80023a0:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 80023a2:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 80023a6:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 80023aa:	4770      	bx	lr

080023ac <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 80023ac:	2000      	movs	r0, #0
 80023ae:	4770      	bx	lr

080023b0 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80023b0:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80023b2:	3900      	subs	r1, #0
 80023b4:	bf18      	it	ne
 80023b6:	2101      	movne	r1, #1
 80023b8:	4b01      	ldr	r3, [pc, #4]	; (80023c0 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 80023ba:	7019      	strb	r1, [r3, #0]
    }
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	201979e7 	.word	0x201979e7

080023c4 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 80023c4:	2000      	movs	r0, #0
 80023c6:	4770      	bx	lr

080023c8 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 80023c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80023ca:	b10b      	cbz	r3, 80023d0 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 80023cc:	4608      	mov	r0, r1
 80023ce:	4718      	bx	r3
        }
    }
 80023d0:	4770      	bx	lr

080023d2 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 80023d2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80023d6:	4770      	bx	lr

080023d8 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 80023d8:	6840      	ldr	r0, [r0, #4]
 80023da:	6803      	ldr	r3, [r0, #0]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	4718      	bx	r3

080023e0 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
    {
    }
 80023e0:	4770      	bx	lr

080023e2 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
    {
    }
 80023e2:	4770      	bx	lr

080023e4 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80023e4:	4770      	bx	lr
	...

080023e8 <_ZN11TouchGFXHAL10initializeEv>:
using namespace touchgfx;

KeySampler btnctrl;

void TouchGFXHAL::initialize()
{
 80023e8:	b538      	push	{r3, r4, r5, lr}
 80023ea:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80023ec:	f000 fd4e 	bl	8002e8c <_ZN20TouchGFXGeneratedHAL10initializeEv>
        buttonController = btnCtrl;
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <_ZN11TouchGFXHAL10initializeEv+0x2c>)
    setButtonController(&btnctrl);
    lockDMAToFrontPorch(false);
    GPIO::init();
    instrumentation.init();
 80023f2:	f104 05a8 	add.w	r5, r4, #168	; 0xa8
 80023f6:	6163      	str	r3, [r4, #20]
        lockDMAToPorch = enableLock;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
    GPIO::init();
 80023fe:	f7ff ff7d 	bl	80022fc <_ZN8touchgfx4GPIO4initEv>
    instrumentation.init();
 8002402:	4628      	mov	r0, r5
 8002404:	f7ff fec0 	bl	8002188 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8002408:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 800240a:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 800240c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    setMCUInstrumentation(&instrumentation);
    enableMCULoadCalculation(true);
}
 8002410:	bd38      	pop	{r3, r4, r5, pc}
 8002412:	bf00      	nop
 8002414:	20153160 	.word	0x20153160

08002418 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8002418:	f000 bd2a 	b.w	8002e70 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

0800241c <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800241c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 800241e:	2500      	movs	r5, #0
 8002420:	4c10      	ldr	r4, [pc, #64]	; (8002464 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt+0x48>)
 8002422:	9500      	str	r5, [sp, #0]
 8002424:	6823      	ldr	r3, [r4, #0]
 8002426:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800242a:	f022 0208 	bic.w	r2, r2, #8
 800242e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002432:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	9b00      	ldr	r3, [sp, #0]
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800243e:	f000 fd1d 	bl	8002e7c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
    __HAL_DSI_WRAPPER_ENABLE(&hdsi);
 8002442:	6823      	ldr	r3, [r4, #0]
 8002444:	9501      	str	r5, [sp, #4]
 8002446:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800244a:	f042 0208 	orr.w	r2, r2, #8
 800244e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002452:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	9301      	str	r3, [sp, #4]
 800245c:	9b01      	ldr	r3, [sp, #4]
}
 800245e:	b003      	add	sp, #12
 8002460:	bd30      	pop	{r4, r5, pc}
 8002462:	bf00      	nop
 8002464:	20152e90 	.word	0x20152e90

08002468 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8002468:	f000 bd38 	b.w	8002edc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

0800246c <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:
}

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 800246c:	f000 bd38 	b.w	8002ee0 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>

08002470 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8002470:	b508      	push	{r3, lr}
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    TouchGFXGeneratedHAL::configureInterrupts();
 8002472:	f000 fcd7 	bl	8002e24 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002476:	2290      	movs	r2, #144	; 0x90
 8002478:	4b01      	ldr	r3, [pc, #4]	; (8002480 <_ZN11TouchGFXHAL19configureInterruptsEv+0x10>)
 800247a:	f883 2389 	strb.w	r2, [r3, #905]	; 0x389
    NVIC_SetPriority(DSI_IRQn, 9);
}
 800247e:	bd08      	pop	{r3, pc}
 8002480:	e000e100 	.word	0xe000e100

08002484 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8002484:	f000 bcda 	b.w	8002e3c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08002488 <_ZN11TouchGFXHAL10beginFrameEv>:
}

bool TouchGFXHAL::beginFrame()
{
    return TouchGFXGeneratedHAL::beginFrame();
 8002488:	f000 bd1c 	b.w	8002ec4 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>

0800248c <_ZN11TouchGFXHAL8endFrameEv>:
}

void TouchGFXHAL::endFrame()
{
    if (!display_on)
 800248c:	4b0d      	ldr	r3, [pc, #52]	; (80024c4 <_ZN11TouchGFXHAL8endFrameEv+0x38>)
{
 800248e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!display_on)
 8002490:	7819      	ldrb	r1, [r3, #0]
{
 8002492:	4604      	mov	r4, r0
    if (!display_on)
 8002494:	b979      	cbnz	r1, 80024b6 <_ZN11TouchGFXHAL8endFrameEv+0x2a>
    {
        display_on = true;
 8002496:	2201      	movs	r2, #1
        /* Enable the LCD, Send Display on DCS command to display */
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, DSI_SET_DISPLAY_ON, 0x00);
        /* Start PWM Timer channel */
        (void)HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002498:	4d0b      	ldr	r5, [pc, #44]	; (80024c8 <_ZN11TouchGFXHAL8endFrameEv+0x3c>)
        display_on = true;
 800249a:	701a      	strb	r2, [r3, #0]
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, DSI_SET_DISPLAY_ON, 0x00);
 800249c:	480b      	ldr	r0, [pc, #44]	; (80024cc <_ZN11TouchGFXHAL8endFrameEv+0x40>)
 800249e:	2329      	movs	r3, #41	; 0x29
 80024a0:	2215      	movs	r2, #21
 80024a2:	9100      	str	r1, [sp, #0]
 80024a4:	f007 f953 	bl	800974e <HAL_DSI_ShortWrite>
        (void)HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80024a8:	2104      	movs	r1, #4
 80024aa:	4628      	mov	r0, r5
 80024ac:	f00e f9ae 	bl	801080c <HAL_TIM_PWM_Start>
        /* Enable Backlight by setting Brightness to 100% */
        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 2U * 100);
 80024b0:	22c8      	movs	r2, #200	; 0xc8
 80024b2:	682b      	ldr	r3, [r5, #0]
 80024b4:	639a      	str	r2, [r3, #56]	; 0x38
    }

    TouchGFXGeneratedHAL::endFrame();
 80024b6:	4620      	mov	r0, r4
}
 80024b8:	b003      	add	sp, #12
 80024ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    TouchGFXGeneratedHAL::endFrame();
 80024be:	f000 bd03 	b.w	8002ec8 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
 80024c2:	bf00      	nop
 80024c4:	2015315c 	.word	0x2015315c
 80024c8:	20152f68 	.word	0x20152f68
 80024cc:	20152e90 	.word	0x20152e90

080024d0 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 80024d0:	b510      	push	{r4, lr}
 80024d2:	4604      	mov	r4, r0
        swapFrameBuffers();
 80024d4:	f015 f8ea 	bl	80176ac <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80024d8:	6823      	ldr	r3, [r4, #0]
 80024da:	4620      	mov	r0, r4
    }
 80024dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 80024e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80024e4:	4718      	bx	r3

080024e6 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 80024e6:	f014 bb2b 	b.w	8016b40 <_ZN8touchgfx3HAL16flushFrameBufferEv>

080024ea <_ZN11TouchGFXHALD0Ev>:
 80024ea:	b510      	push	{r4, lr}
 80024ec:	4604      	mov	r4, r0
 80024ee:	21b4      	movs	r1, #180	; 0xb4
 80024f0:	f026 fdb7 	bl	8029062 <_ZdlPvj>
 80024f4:	4620      	mov	r0, r4
 80024f6:	bd10      	pop	{r4, pc}

080024f8 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 80024f8:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 80024fc:	b11b      	cbz	r3, 8002506 <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 80024fe:	6840      	ldr	r0, [r0, #4]
 8002500:	6803      	ldr	r3, [r0, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4718      	bx	r3
    }
 8002506:	4618      	mov	r0, r3
 8002508:	4770      	bx	lr
	...

0800250c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void performDisplayOrientationChange()
 800250c:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 800250e:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
 8002512:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
            if (DISPLAY_ROTATION == rotate0)
 8002516:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
        if (requestedOrientation != nativeDisplayOrientation)
 8002518:	428c      	cmp	r4, r1
            if (DISPLAY_ROTATION == rotate0)
 800251a:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 800251c:	d009      	beq.n	8002532 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 800251e:	b93a      	cbnz	r2, 8002530 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
                const uint16_t tmp = DISPLAY_HEIGHT;
 8002520:	490a      	ldr	r1, [pc, #40]	; (800254c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002522:	4a0b      	ldr	r2, [pc, #44]	; (8002550 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8002524:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002526:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8002528:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 800252a:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800252c:	800c      	strh	r4, [r1, #0]
            DISPLAY_ROTATION = rotate0;
 800252e:	701a      	strb	r2, [r3, #0]
    }
 8002530:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8002532:	2a00      	cmp	r2, #0
 8002534:	d0fc      	beq.n	8002530 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002536:	4a06      	ldr	r2, [pc, #24]	; (8002550 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8002538:	4904      	ldr	r1, [pc, #16]	; (800254c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800253a:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 800253c:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800253e:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8002540:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8002542:	2200      	movs	r2, #0
 8002544:	e7f3      	b.n	800252e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8002546:	bf00      	nop
 8002548:	201979e0 	.word	0x201979e0
 800254c:	201979de 	.word	0x201979de
 8002550:	201979dc 	.word	0x201979dc

08002554 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8002554:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8002556:	4b09      	ldr	r3, [pc, #36]	; (800257c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	428b      	cmp	r3, r1
 800255c:	d803      	bhi.n	8002566 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 800255e:	4b08      	ldr	r3, [pc, #32]	; (8002580 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	4293      	cmp	r3, r2
 8002564:	d905      	bls.n	8002572 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8002566:	219e      	movs	r1, #158	; 0x9e
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 800256a:	4a07      	ldr	r2, [pc, #28]	; (8002588 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 800256c:	4807      	ldr	r0, [pc, #28]	; (800258c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 800256e:	f026 fda5 	bl	80290bc <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8002572:	4b07      	ldr	r3, [pc, #28]	; (8002590 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8002574:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8002576:	4b07      	ldr	r3, [pc, #28]	; (8002594 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8002578:	801a      	strh	r2, [r3, #0]
    }
 800257a:	bd08      	pop	{r3, pc}
 800257c:	201979dc 	.word	0x201979dc
 8002580:	201979de 	.word	0x201979de
 8002584:	0802a87c 	.word	0x0802a87c
 8002588:	0802a8df 	.word	0x0802a8df
 800258c:	0802a922 	.word	0x0802a922
 8002590:	201979e2 	.word	0x201979e2
 8002594:	201979e4 	.word	0x201979e4

08002598 <_ZN11TouchGFXHAL17disableInterruptsEv>:
{
 8002598:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::disableInterrupts();
 800259a:	f000 fcc3 	bl	8002f24 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800259e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025a2:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <_ZN11TouchGFXHAL17disableInterruptsEv+0x1c>)
 80025a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80025a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80025ac:	f3bf 8f6f 	isb	sy
}
 80025b0:	bd08      	pop	{r3, pc}
 80025b2:	bf00      	nop
 80025b4:	e000e100 	.word	0xe000e100

080025b8 <_ZN11TouchGFXHAL16enableInterruptsEv>:
{
 80025b8:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::enableInterrupts();
 80025ba:	f000 fccd 	bl	8002f58 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025c2:	4b01      	ldr	r3, [pc, #4]	; (80025c8 <_ZN11TouchGFXHAL16enableInterruptsEv+0x10>)
 80025c4:	611a      	str	r2, [r3, #16]
}
 80025c6:	bd08      	pop	{r3, pc}
 80025c8:	e000e100 	.word	0xe000e100

080025cc <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 80025cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80025ce:	460c      	mov	r4, r1
 80025d0:	b931      	cbnz	r1, 80025e0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x14>
 80025d2:	f240 21d2 	movw	r1, #722	; 0x2d2
 80025d6:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x78>)
 80025d8:	4a1b      	ldr	r2, [pc, #108]	; (8002648 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x7c>)
 80025da:	481c      	ldr	r0, [pc, #112]	; (800264c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x80>)
 80025dc:	f026 fd6e 	bl	80290bc <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80025e0:	e9c0 120f 	strd	r1, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80025e4:	3a00      	subs	r2, #0
 80025e6:	bf18      	it	ne
 80025e8:	2201      	movne	r2, #1
    __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 80025ea:	2500      	movs	r5, #0
 80025ec:	4918      	ldr	r1, [pc, #96]	; (8002650 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x84>)
 80025ee:	4e19      	ldr	r6, [pc, #100]	; (8002654 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x88>)
 80025f0:	700a      	strb	r2, [r1, #0]
        setAnimationStorage(animationStorage);
 80025f2:	6802      	ldr	r2, [r0, #0]
 80025f4:	4619      	mov	r1, r3
 80025f6:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80025fa:	4790      	blx	r2
 80025fc:	6833      	ldr	r3, [r6, #0]
 80025fe:	9500      	str	r5, [sp, #0]
 8002600:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
    (void)HAL_LTDC_SetAddress(&hltdc, (uint32_t)frameBuffer, 0);
 8002604:	4621      	mov	r1, r4
    __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 8002606:	f022 0208 	bic.w	r2, r2, #8
 800260a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800260e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
    (void)HAL_LTDC_SetAddress(&hltdc, (uint32_t)frameBuffer, 0);
 8002612:	462a      	mov	r2, r5
    __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 8002614:	f003 0308 	and.w	r3, r3, #8
 8002618:	9300      	str	r3, [sp, #0]
    (void)HAL_LTDC_SetAddress(&hltdc, (uint32_t)frameBuffer, 0);
 800261a:	480f      	ldr	r0, [pc, #60]	; (8002658 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x8c>)
    __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 800261c:	9b00      	ldr	r3, [sp, #0]
    (void)HAL_LTDC_SetAddress(&hltdc, (uint32_t)frameBuffer, 0);
 800261e:	f009 f987 	bl	800b930 <HAL_LTDC_SetAddress>
    __HAL_DSI_WRAPPER_ENABLE(&hdsi);
 8002622:	6833      	ldr	r3, [r6, #0]
 8002624:	9501      	str	r5, [sp, #4]
 8002626:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800262a:	f042 0208 	orr.w	r2, r2, #8
 800262e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002632:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	9301      	str	r3, [sp, #4]
 800263c:	9b01      	ldr	r3, [sp, #4]
}
 800263e:	b002      	add	sp, #8
 8002640:	bd70      	pop	{r4, r5, r6, pc}
 8002642:	bf00      	nop
 8002644:	0802a967 	.word	0x0802a967
 8002648:	0802a99f 	.word	0x0802a99f
 800264c:	0802a922 	.word	0x0802a922
 8002650:	201979e6 	.word	0x201979e6
 8002654:	20152e90 	.word	0x20152e90
 8002658:	20152ec0 	.word	0x20152ec0

0800265c <tx_low_power_enter>:
#ifdef TX_LOW_POWER
extern "C"
{

    void tx_low_power_enter()
    {
 800265c:	b508      	push	{r3, lr}
        // tgfx task going to sleep
        touchgfx::HAL::getInstance()->setMCUActive(false);
 800265e:	4b03      	ldr	r3, [pc, #12]	; (800266c <tx_low_power_enter+0x10>)
 8002660:	2100      	movs	r1, #0
 8002662:	6818      	ldr	r0, [r3, #0]
 8002664:	f015 f83c 	bl	80176e0 <_ZN8touchgfx3HAL12setMCUActiveEb>
        __WFI();
 8002668:	bf30      	wfi
    }
 800266a:	bd08      	pop	{r3, pc}
 800266c:	201979e8 	.word	0x201979e8

08002670 <tx_low_power_exit>:
    void tx_low_power_exit()
    {

        // tgfx task waking up
        touchgfx::HAL::getInstance()->setMCUActive(true);
 8002670:	4b02      	ldr	r3, [pc, #8]	; (800267c <tx_low_power_exit+0xc>)
 8002672:	2101      	movs	r1, #1
 8002674:	6818      	ldr	r0, [r3, #0]
 8002676:	f015 b833 	b.w	80176e0 <_ZN8touchgfx3HAL12setMCUActiveEb>
 800267a:	bf00      	nop
 800267c:	201979e8 	.word	0x201979e8

08002680 <_GLOBAL__sub_I_btnctrl>:
{
class KeySampler : public ButtonController
{
public:
    KeySampler()
    {
 8002680:	4802      	ldr	r0, [pc, #8]	; (800268c <_GLOBAL__sub_I_btnctrl+0xc>)
 8002682:	4b03      	ldr	r3, [pc, #12]	; (8002690 <_GLOBAL__sub_I_btnctrl+0x10>)
 8002684:	6003      	str	r3, [r0, #0]
        init();
 8002686:	f7ff bdbc 	b.w	8002202 <_ZN8touchgfx10KeySampler4initEv>
 800268a:	bf00      	nop
 800268c:	20153160 	.word	0x20153160
 8002690:	0802a7b4 	.word	0x0802a7b4

08002694 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8002694:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    CHAR* pointer;

    /* Create a byte memory pool from which to allocate the thread stacks.  */
    if (tx_byte_pool_create(&oswrapper_byte_pool, (CHAR*) "OSWrapper Byte Pool", oswrapper_pool_mem,
 8002696:	2334      	movs	r3, #52	; 0x34
 8002698:	4a1a      	ldr	r2, [pc, #104]	; (8002704 <_ZN8touchgfx10OSWrappers10initializeEv+0x70>)
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	491a      	ldr	r1, [pc, #104]	; (8002708 <_ZN8touchgfx10OSWrappers10initializeEv+0x74>)
 800269e:	2364      	movs	r3, #100	; 0x64
 80026a0:	481a      	ldr	r0, [pc, #104]	; (800270c <_ZN8touchgfx10OSWrappers10initializeEv+0x78>)
 80026a2:	f013 fbb7 	bl	8015e14 <_txe_byte_pool_create>
 80026a6:	4603      	mov	r3, r0
 80026a8:	b128      	cbz	r0, 80026b6 <_ZN8touchgfx10OSWrappers10initializeEv+0x22>
                            OSWRAPPER_BYTE_POOL_SIZE) != TX_SUCCESS)
    {
        assert(0 && "Failed to create OSWrapper Pool memory!");
 80026aa:	2138      	movs	r1, #56	; 0x38
 80026ac:	4b18      	ldr	r3, [pc, #96]	; (8002710 <_ZN8touchgfx10OSWrappers10initializeEv+0x7c>)
 80026ae:	4a19      	ldr	r2, [pc, #100]	; (8002714 <_ZN8touchgfx10OSWrappers10initializeEv+0x80>)

    /* Allocate the vsync_q.  */
    if (tx_byte_allocate(&oswrapper_byte_pool, (VOID**) &pointer,
                         OSWRAPPER_QUEUE_SIZE, TX_NO_WAIT) != TX_SUCCESS)
    {
        assert(0 && "Failed to allocate memory for the Vsync Message Queue!");
 80026b0:	4819      	ldr	r0, [pc, #100]	; (8002718 <_ZN8touchgfx10OSWrappers10initializeEv+0x84>)
 80026b2:	f026 fd03 	bl	80290bc <__assert_func>
    if (tx_byte_allocate(&oswrapper_byte_pool, (VOID**) &pointer,
 80026b6:	2204      	movs	r2, #4
 80026b8:	4814      	ldr	r0, [pc, #80]	; (800270c <_ZN8touchgfx10OSWrappers10initializeEv+0x78>)
 80026ba:	a903      	add	r1, sp, #12
 80026bc:	f013 fb36 	bl	8015d2c <_txe_byte_allocate>
 80026c0:	b118      	cbz	r0, 80026ca <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
        assert(0 && "Failed to allocate memory for the Vsync Message Queue!");
 80026c2:	213f      	movs	r1, #63	; 0x3f
 80026c4:	4b15      	ldr	r3, [pc, #84]	; (800271c <_ZN8touchgfx10OSWrappers10initializeEv+0x88>)
 80026c6:	4a13      	ldr	r2, [pc, #76]	; (8002714 <_ZN8touchgfx10OSWrappers10initializeEv+0x80>)
 80026c8:	e7f2      	b.n	80026b0 <_ZN8touchgfx10OSWrappers10initializeEv+0x1c>
    }

    // Create a queue of length 1
    if (tx_queue_create(&vsync_q, (CHAR*) "Vsync Message Queue", TX_1_ULONG,
 80026ca:	2304      	movs	r3, #4
 80026cc:	2238      	movs	r2, #56	; 0x38
 80026ce:	4914      	ldr	r1, [pc, #80]	; (8002720 <_ZN8touchgfx10OSWrappers10initializeEv+0x8c>)
 80026d0:	e9cd 3200 	strd	r3, r2, [sp]
 80026d4:	4813      	ldr	r0, [pc, #76]	; (8002724 <_ZN8touchgfx10OSWrappers10initializeEv+0x90>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	9b03      	ldr	r3, [sp, #12]
 80026da:	f013 fc3b 	bl	8015f54 <_txe_queue_create>
 80026de:	b118      	cbz	r0, 80026e8 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>
                        pointer, OSWRAPPER_QUEUE_SIZE) != TX_SUCCESS)
    {
        assert(0 && "Failed to create Vsync Message Queue!");
 80026e0:	2146      	movs	r1, #70	; 0x46
 80026e2:	4b11      	ldr	r3, [pc, #68]	; (8002728 <_ZN8touchgfx10OSWrappers10initializeEv+0x94>)
 80026e4:	4a0b      	ldr	r2, [pc, #44]	; (8002714 <_ZN8touchgfx10OSWrappers10initializeEv+0x80>)
 80026e6:	e7e3      	b.n	80026b0 <_ZN8touchgfx10OSWrappers10initializeEv+0x1c>
    }

    // Create the Framebuffer Semaphore (Binary)
    if (tx_semaphore_create(&frame_buffer_sem, (CHAR*) "FrameBuffer Semaphore", 1) != TX_SUCCESS)
 80026e8:	231c      	movs	r3, #28
 80026ea:	2201      	movs	r2, #1
 80026ec:	490f      	ldr	r1, [pc, #60]	; (800272c <_ZN8touchgfx10OSWrappers10initializeEv+0x98>)
 80026ee:	4810      	ldr	r0, [pc, #64]	; (8002730 <_ZN8touchgfx10OSWrappers10initializeEv+0x9c>)
 80026f0:	f013 fd74 	bl	80161dc <_txe_semaphore_create>
 80026f4:	b118      	cbz	r0, 80026fe <_ZN8touchgfx10OSWrappers10initializeEv+0x6a>
    {
        assert(0 && "Failed to create FrameBuffer Semaphore!");
 80026f6:	214c      	movs	r1, #76	; 0x4c
 80026f8:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <_ZN8touchgfx10OSWrappers10initializeEv+0xa0>)
 80026fa:	4a06      	ldr	r2, [pc, #24]	; (8002714 <_ZN8touchgfx10OSWrappers10initializeEv+0x80>)
 80026fc:	e7d8      	b.n	80026b0 <_ZN8touchgfx10OSWrappers10initializeEv+0x1c>
    }
}
 80026fe:	b005      	add	sp, #20
 8002700:	f85d fb04 	ldr.w	pc, [sp], #4
 8002704:	20153184 	.word	0x20153184
 8002708:	0802aac8 	.word	0x0802aac8
 800270c:	201531e8 	.word	0x201531e8
 8002710:	0802aadc 	.word	0x0802aadc
 8002714:	0802ab0b 	.word	0x0802ab0b
 8002718:	0802ab3a 	.word	0x0802ab3a
 800271c:	0802ab89 	.word	0x0802ab89
 8002720:	0802abc7 	.word	0x0802abc7
 8002724:	2015321c 	.word	0x2015321c
 8002728:	0802abdb 	.word	0x0802abdb
 800272c:	0802ac08 	.word	0x0802ac08
 8002730:	20153168 	.word	0x20153168
 8002734:	0802ac1e 	.word	0x0802ac1e

08002738 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8002738:	b508      	push	{r3, lr}
    if (tx_semaphore_get(&frame_buffer_sem, TX_WAIT_FOREVER) != TX_SUCCESS)
 800273a:	f04f 31ff 	mov.w	r1, #4294967295
 800273e:	4805      	ldr	r0, [pc, #20]	; (8002754 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x1c>)
 8002740:	f013 fde2 	bl	8016308 <_txe_semaphore_get>
 8002744:	b128      	cbz	r0, 8002752 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x1a>
    {
        assert(0 && "Failed to get FrameBuffer Semaphore!");
 8002746:	2157      	movs	r1, #87	; 0x57
 8002748:	4b03      	ldr	r3, [pc, #12]	; (8002758 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x20>)
 800274a:	4a04      	ldr	r2, [pc, #16]	; (800275c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x24>)
 800274c:	4804      	ldr	r0, [pc, #16]	; (8002760 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x28>)
 800274e:	f026 fcb5 	bl	80290bc <__assert_func>
    }
}
 8002752:	bd08      	pop	{r3, pc}
 8002754:	20153168 	.word	0x20153168
 8002758:	0802ac4d 	.word	0x0802ac4d
 800275c:	0802ac79 	.word	0x0802ac79
 8002760:	0802ab3a 	.word	0x0802ab3a

08002764 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    if (!frame_buffer_sem.tx_semaphore_count)
 8002764:	4806      	ldr	r0, [pc, #24]	; (8002780 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x1c>)
{
 8002766:	b508      	push	{r3, lr}
    if (!frame_buffer_sem.tx_semaphore_count)
 8002768:	6883      	ldr	r3, [r0, #8]
 800276a:	b943      	cbnz	r3, 800277e <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x1a>
    {
        if (tx_semaphore_put(&frame_buffer_sem) != TX_SUCCESS)
 800276c:	f013 fe0e 	bl	801638c <_txe_semaphore_put>
 8002770:	b128      	cbz	r0, 800277e <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x1a>
        {
            assert(0 && "Failed to put FrameBuffer Semaphore!");
 8002772:	2164      	movs	r1, #100	; 0x64
 8002774:	4b03      	ldr	r3, [pc, #12]	; (8002784 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x20>)
 8002776:	4a04      	ldr	r2, [pc, #16]	; (8002788 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x24>)
 8002778:	4804      	ldr	r0, [pc, #16]	; (800278c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x28>)
 800277a:	f026 fc9f 	bl	80290bc <__assert_func>
        }
    }
}
 800277e:	bd08      	pop	{r3, pc}
 8002780:	20153168 	.word	0x20153168
 8002784:	0802acb6 	.word	0x0802acb6
 8002788:	0802ace2 	.word	0x0802ace2
 800278c:	0802ab3a 	.word	0x0802ab3a

08002790 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    if (tx_semaphore_get(&frame_buffer_sem, TX_NO_WAIT) != TX_SUCCESS)
 8002790:	2100      	movs	r1, #0
 8002792:	4801      	ldr	r0, [pc, #4]	; (8002798 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x8>)
 8002794:	f013 bdb8 	b.w	8016308 <_txe_semaphore_get>
 8002798:	20153168 	.word	0x20153168

0800279c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800279c:	b538      	push	{r3, r4, r5, lr}
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800279e:	f3ef 8510 	mrs	r5, PRIMASK
    int_posture = __get_interrupt_posture();

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 80027a2:	b672      	cpsid	i
    TX_INTERRUPT_SAVE_AREA
    TX_DISABLE;
    _tx_thread_preempt_disable++;
 80027a4:	4c0c      	ldr	r4, [pc, #48]	; (80027d8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
    if (!frame_buffer_sem.tx_semaphore_count)
 80027a6:	480d      	ldr	r0, [pc, #52]	; (80027dc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x40>)
    _tx_thread_preempt_disable++;
 80027a8:	6823      	ldr	r3, [r4, #0]
 80027aa:	3301      	adds	r3, #1
 80027ac:	6023      	str	r3, [r4, #0]
    if (!frame_buffer_sem.tx_semaphore_count)
 80027ae:	6883      	ldr	r3, [r0, #8]
 80027b0:	b943      	cbnz	r3, 80027c4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x28>
    {
        if (tx_semaphore_put(&frame_buffer_sem) != TX_SUCCESS)
 80027b2:	f013 fdeb 	bl	801638c <_txe_semaphore_put>
 80027b6:	b128      	cbz	r0, 80027c4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x28>
        {
            assert(0 && "Failed to put FrameBuffer Semaphore!");
 80027b8:	218a      	movs	r1, #138	; 0x8a
 80027ba:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x44>)
 80027bc:	4a09      	ldr	r2, [pc, #36]	; (80027e4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x48>)
 80027be:	480a      	ldr	r0, [pc, #40]	; (80027e8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x4c>)
 80027c0:	f026 fc7c 	bl	80290bc <__assert_func>
        }
    }
    _tx_thread_preempt_disable--;
 80027c4:	6823      	ldr	r3, [r4, #0]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	6023      	str	r3, [r4, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80027ca:	f385 8810 	msr	PRIMASK, r5
    TX_RESTORE;
    _tx_thread_system_preempt_check();
}
 80027ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _tx_thread_system_preempt_check();
 80027d2:	f012 bd95 	b.w	8015300 <_tx_thread_system_preempt_check>
 80027d6:	bf00      	nop
 80027d8:	2019746c 	.word	0x2019746c
 80027dc:	20153168 	.word	0x20153168
 80027e0:	0802acb6 	.word	0x0802acb6
 80027e4:	0802ad1f 	.word	0x0802ad1f
 80027e8:	0802ab3a 	.word	0x0802ab3a

080027ec <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
    UINT ret;

    // Send the message only if the queue is empty.
    // This call is from ISR, so no need to re-send
    // the message if not yet consumed by threads
    if (vsync_q.tx_queue_enqueued == 0)
 80027ec:	4807      	ldr	r0, [pc, #28]	; (800280c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x20>)
{
 80027ee:	b508      	push	{r3, lr}
    if (vsync_q.tx_queue_enqueued == 0)
 80027f0:	6902      	ldr	r2, [r0, #16]
 80027f2:	b94a      	cbnz	r2, 8002808 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>
    {
        // This is supposed to be called from Vsync Interrupt Handler
        // So wait_option should be equal to TX_NO_WAIT
        ret = tx_queue_send(&vsync_q, &dummy_msg, TX_NO_WAIT);
 80027f4:	4906      	ldr	r1, [pc, #24]	; (8002810 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x24>)
 80027f6:	f013 fca7 	bl	8016148 <_txe_queue_send>
        if (ret != TX_SUCCESS)
 80027fa:	b128      	cbz	r0, 8002808 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>
        {
            assert(0 && "Failed to Signal Vsync!");
 80027fc:	21a6      	movs	r1, #166	; 0xa6
 80027fe:	4b05      	ldr	r3, [pc, #20]	; (8002814 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x28>)
 8002800:	4a05      	ldr	r2, [pc, #20]	; (8002818 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x2c>)
 8002802:	4806      	ldr	r0, [pc, #24]	; (800281c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x30>)
 8002804:	f026 fc5a 	bl	80290bc <__assert_func>
        }
    }
}
 8002808:	bd08      	pop	{r3, pc}
 800280a:	bf00      	nop
 800280c:	2015321c 	.word	0x2015321c
 8002810:	20000004 	.word	0x20000004
 8002814:	0802ad63 	.word	0x0802ad63
 8002818:	0802ad82 	.word	0x0802ad82
 800281c:	0802ab3a 	.word	0x0802ab3a

08002820 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002820:	b508      	push	{r3, lr}
    UINT ret;

    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    ret = tx_queue_receive(&vsync_q, &dummy_msg, TX_NO_WAIT);
 8002822:	2200      	movs	r2, #0
 8002824:	490a      	ldr	r1, [pc, #40]	; (8002850 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x30>)
 8002826:	480b      	ldr	r0, [pc, #44]	; (8002854 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x34>)
 8002828:	f013 fc44 	bl	80160b4 <_txe_queue_receive>

    if ((ret == TX_SUCCESS) || (ret == TX_QUEUE_EMPTY))
 800282c:	b138      	cbz	r0, 800283e <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x1e>
 800282e:	280a      	cmp	r0, #10
 8002830:	d005      	beq.n	800283e <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x1e>
        ret = tx_queue_receive(&vsync_q, &dummy_msg, TX_WAIT_FOREVER);
    }

    if (ret != TX_SUCCESS)
    {
        assert(0 && "Failed to Wait for Vsync!");
 8002832:	21c9      	movs	r1, #201	; 0xc9
 8002834:	4b08      	ldr	r3, [pc, #32]	; (8002858 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x38>)
 8002836:	4a09      	ldr	r2, [pc, #36]	; (800285c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x3c>)
 8002838:	4809      	ldr	r0, [pc, #36]	; (8002860 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x40>)
 800283a:	f026 fc3f 	bl	80290bc <__assert_func>
        ret = tx_queue_receive(&vsync_q, &dummy_msg, TX_WAIT_FOREVER);
 800283e:	f04f 32ff 	mov.w	r2, #4294967295
 8002842:	4903      	ldr	r1, [pc, #12]	; (8002850 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x30>)
 8002844:	4803      	ldr	r0, [pc, #12]	; (8002854 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x34>)
 8002846:	f013 fc35 	bl	80160b4 <_txe_queue_receive>
    if (ret != TX_SUCCESS)
 800284a:	2800      	cmp	r0, #0
 800284c:	d1f1      	bne.n	8002832 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x12>
    }
}
 800284e:	bd08      	pop	{r3, pc}
 8002850:	20000004 	.word	0x20000004
 8002854:	2015321c 	.word	0x2015321c
 8002858:	0802adb2 	.word	0x0802adb2
 800285c:	0802add3 	.word	0x0802add3
 8002860:	0802ab3a 	.word	0x0802ab3a

08002864 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8002864:	6803      	ldr	r3, [r0, #0]
 8002866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002868:	4718      	bx	r3

0800286a <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 800286a:	2001      	movs	r0, #1
 800286c:	4770      	bx	lr

0800286e <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 800286e:	6803      	ldr	r3, [r0, #0]
 8002870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002872:	4718      	bx	r3

08002874 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002874:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8002878:	4770      	bx	lr
	...

0800287c <_ZN8STM32DMAD1Ev>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800287c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
STM32DMA::~STM32DMA()
 8002880:	4b04      	ldr	r3, [pc, #16]	; (8002894 <_ZN8STM32DMAD1Ev+0x18>)
 8002882:	6003      	str	r3, [r0, #0]
 8002884:	4b04      	ldr	r3, [pc, #16]	; (8002898 <_ZN8STM32DMAD1Ev+0x1c>)
 8002886:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __ASM volatile ("dsb 0xF":::"memory");
 800288a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800288e:	f3bf 8f6f 	isb	sy
}
 8002892:	4770      	bx	lr
 8002894:	0802af64 	.word	0x0802af64
 8002898:	e000e100 	.word	0xe000e100

0800289c <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 800289c:	b510      	push	{r4, lr}
 800289e:	4604      	mov	r4, r0
}
 80028a0:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 80028a4:	f7ff ffea 	bl	800287c <_ZN8STM32DMAD1Ev>
 80028a8:	4620      	mov	r0, r4
 80028aa:	f026 fbda 	bl	8029062 <_ZdlPvj>
 80028ae:	4620      	mov	r0, r4
 80028b0:	bd10      	pop	{r4, pc}
	...

080028b4 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80028b4:	4b0f      	ldr	r3, [pc, #60]	; (80028f4 <_ZN8STM32DMA10initializeEv+0x40>)
{
 80028b6:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80028b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80028bc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80028c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80028c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80028c8:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80028cc:	9201      	str	r2, [sp, #4]
 80028ce:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80028d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028d2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80028d6:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80028d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028de:	661a      	str	r2, [r3, #96]	; 0x60
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <_ZN8STM32DMA10initializeEv+0x44>)
 80028e2:	4a06      	ldr	r2, [pc, #24]	; (80028fc <_ZN8STM32DMA10initializeEv+0x48>)
 80028e4:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80028ea:	4b05      	ldr	r3, [pc, #20]	; (8002900 <_ZN8STM32DMA10initializeEv+0x4c>)
 80028ec:	60da      	str	r2, [r3, #12]
}
 80028ee:	b002      	add	sp, #8
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	46020c00 	.word	0x46020c00
 80028f8:	20152e30 	.word	0x20152e30
 80028fc:	08002905 	.word	0x08002905
 8002900:	e000e100 	.word	0xe000e100

08002904 <DMA2D_XferCpltCallback>:
        return instance;
 8002904:	4b02      	ldr	r3, [pc, #8]	; (8002910 <DMA2D_XferCpltCallback+0xc>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 800290a:	6803      	ldr	r3, [r0, #0]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	4718      	bx	r3
 8002910:	201979e8 	.word	0x201979e8

08002914 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8002914:	b570      	push	{r4, r5, r6, lr}
 8002916:	4604      	mov	r4, r0
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002918:	2600      	movs	r6, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 800291a:	4625      	mov	r5, r4
 800291c:	4b09      	ldr	r3, [pc, #36]	; (8002944 <_ZN8STM32DMAC1Ev+0x30>)
 800291e:	300c      	adds	r0, #12
 8002920:	6060      	str	r0, [r4, #4]
 8002922:	7226      	strb	r6, [r4, #8]
 8002924:	7266      	strb	r6, [r4, #9]
 8002926:	f845 3b20 	str.w	r3, [r5], #32
 800292a:	2260      	movs	r2, #96	; 0x60
 800292c:	4629      	mov	r1, r5
 800292e:	f015 f815 	bl	801795c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002932:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
        : color(0)
 8002936:	60ee      	str	r6, [r5, #12]
 8002938:	3524      	adds	r5, #36	; 0x24
 800293a:	42ab      	cmp	r3, r5
 800293c:	d1fb      	bne.n	8002936 <_ZN8STM32DMAC1Ev+0x22>
}
 800293e:	4620      	mov	r0, r4
 8002940:	bd70      	pop	{r4, r5, r6, pc}
 8002942:	bf00      	nop
 8002944:	0802af64 	.word	0x0802af64

08002948 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8002948:	b508      	push	{r3, lr}
    switch (format)
 800294a:	290b      	cmp	r1, #11
 800294c:	d80b      	bhi.n	8002966 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 800294e:	e8df f001 	tbb	[pc, r1]
 8002952:	0612      	.short	0x0612
 8002954:	0a0a0a10 	.word	0x0a0a0a10
 8002958:	0808080a 	.word	0x0808080a
 800295c:	0808      	.short	0x0808
 800295e:	2001      	movs	r0, #1
}
 8002960:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002962:	2005      	movs	r0, #5
        break;
 8002964:	e7fc      	b.n	8002960 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 8002966:	2166      	movs	r1, #102	; 0x66
 8002968:	4b04      	ldr	r3, [pc, #16]	; (800297c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 800296a:	4a05      	ldr	r2, [pc, #20]	; (8002980 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 800296c:	4805      	ldr	r0, [pc, #20]	; (8002984 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 800296e:	f026 fba5 	bl	80290bc <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002972:	2000      	movs	r0, #0
 8002974:	e7f4      	b.n	8002960 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002976:	2002      	movs	r0, #2
    return dma2dColorMode;
 8002978:	e7f2      	b.n	8002960 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 800297a:	bf00      	nop
 800297c:	0802ae04 	.word	0x0802ae04
 8002980:	0802ae1f 	.word	0x0802ae1f
 8002984:	0802ae69 	.word	0x0802ae69

08002988 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8002988:	b508      	push	{r3, lr}
    switch (format)
 800298a:	290a      	cmp	r1, #10
 800298c:	d809      	bhi.n	80029a2 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 800298e:	e8df f001 	tbb	[pc, r1]
 8002992:	0610      	.short	0x0610
 8002994:	0808080e 	.word	0x0808080e
 8002998:	06060608 	.word	0x06060608
 800299c:	06          	.byte	0x06
 800299d:	00          	.byte	0x00
 800299e:	2001      	movs	r0, #1
}
 80029a0:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 80029a2:	2187      	movs	r1, #135	; 0x87
 80029a4:	4b04      	ldr	r3, [pc, #16]	; (80029b8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 80029a6:	4a05      	ldr	r2, [pc, #20]	; (80029bc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 80029a8:	4805      	ldr	r0, [pc, #20]	; (80029c0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 80029aa:	f026 fb87 	bl	80290bc <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80029ae:	2000      	movs	r0, #0
 80029b0:	e7f6      	b.n	80029a0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 80029b2:	2002      	movs	r0, #2
    return dma2dColorMode;
 80029b4:	e7f4      	b.n	80029a0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 80029b6:	bf00      	nop
 80029b8:	0802ae04 	.word	0x0802ae04
 80029bc:	0802aeb6 	.word	0x0802aeb6
 80029c0:	0802ae69 	.word	0x0802ae69

080029c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 80029c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80029c8:	7f4f      	ldrb	r7, [r1, #29]
{
 80029ca:	460c      	mov	r4, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80029cc:	4639      	mov	r1, r7
{
 80029ce:	4681      	mov	r9, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80029d0:	f7ff ffba 	bl	8002948 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80029d4:	f894 801e 	ldrb.w	r8, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80029d8:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80029da:	4641      	mov	r1, r8
 80029dc:	4648      	mov	r0, r9
 80029de:	f7ff ffb3 	bl	8002948 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80029e2:	4641      	mov	r1, r8
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80029e4:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80029e6:	4648      	mov	r0, r9
 80029e8:	f7ff ffce 	bl	8002988 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80029ec:	8aa1      	ldrh	r1, [r4, #20]
 80029ee:	8b62      	ldrh	r2, [r4, #26]
 80029f0:	4b42      	ldr	r3, [pc, #264]	; (8002afc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 80029f2:	1a52      	subs	r2, r2, r1
 80029f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80029f6:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80029f8:	8b22      	ldrh	r2, [r4, #24]
 80029fa:	1a52      	subs	r2, r2, r1
 80029fc:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80029fe:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002a00:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002a02:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002a06:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002a08:	6920      	ldr	r0, [r4, #16]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002a0a:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002a0c:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002a0e:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8002a10:	6821      	ldr	r1, [r4, #0]
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002a12:	f894 c01c 	ldrb.w	ip, [r4, #28]
    switch (blitOp.operation)
 8002a16:	2980      	cmp	r1, #128	; 0x80
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002a18:	ea4f 620c 	mov.w	r2, ip, lsl #24
    switch (blitOp.operation)
 8002a1c:	d026      	beq.n	8002a6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 8002a1e:	d810      	bhi.n	8002a42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7e>
 8002a20:	2920      	cmp	r1, #32
 8002a22:	ea45 0402 	orr.w	r4, r5, r2
 8002a26:	d061      	beq.n	8002aec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x128>
 8002a28:	2940      	cmp	r1, #64	; 0x40
 8002a2a:	d05f      	beq.n	8002aec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x128>
 8002a2c:	2904      	cmp	r1, #4
 8002a2e:	d05d      	beq.n	8002aec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x128>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002a30:	4b32      	ldr	r3, [pc, #200]	; (8002afc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8002a32:	432a      	orrs	r2, r5
 8002a34:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002a38:	4547      	cmp	r7, r8
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002a3a:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002a3c:	d05a      	beq.n	8002af4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x130>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002a3e:	4a30      	ldr	r2, [pc, #192]	; (8002b00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8002a40:	e040      	b.n	8002ac4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8002a42:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002a46:	d007      	beq.n	8002a58 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
 8002a48:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002a4c:	d1f0      	bne.n	8002a30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002a4e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002a52:	f042 0209 	orr.w	r2, r2, #9
 8002a56:	e003      	b.n	8002a60 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002a58:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002a5c:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002a60:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8002a62:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002a64:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002a66:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002a68:	6158      	str	r0, [r3, #20]
 8002a6a:	e02a      	b.n	8002ac2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002a6c:	68a4      	ldr	r4, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002a6e:	432a      	orrs	r2, r5
 8002a70:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002a74:	61da      	str	r2, [r3, #28]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002a76:	1d22      	adds	r2, r4, #4
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002a78:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002a7a:	6158      	str	r0, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002a7c:	62da      	str	r2, [r3, #44]	; 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8002a7e:	7822      	ldrb	r2, [r4, #0]
 8002a80:	b142      	cbz	r2, 8002a94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002a82:	2a01      	cmp	r2, #1
 8002a84:	d021      	beq.n	8002aca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8002a86:	f240 1101 	movw	r1, #257	; 0x101
 8002a8a:	4b1e      	ldr	r3, [pc, #120]	; (8002b04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 8002a8c:	4a1e      	ldr	r2, [pc, #120]	; (8002b08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002a8e:	481f      	ldr	r0, [pc, #124]	; (8002b0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8002a90:	f026 fb14 	bl	80290bc <__assert_func>
            bool blend = true;
 8002a94:	2001      	movs	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002a96:	69da      	ldr	r2, [r3, #28]
 8002a98:	8861      	ldrh	r1, [r4, #2]
 8002a9a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002a9e:	3901      	subs	r1, #1
 8002aa0:	f022 0210 	bic.w	r2, r2, #16
 8002aa4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002aa8:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002aaa:	4b14      	ldr	r3, [pc, #80]	; (8002afc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8002aac:	69da      	ldr	r2, [r3, #28]
 8002aae:	f042 0220 	orr.w	r2, r2, #32
 8002ab2:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002ab4:	69da      	ldr	r2, [r3, #28]
 8002ab6:	0692      	lsls	r2, r2, #26
 8002ab8:	d4fc      	bmi.n	8002ab4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002aba:	2210      	movs	r2, #16
 8002abc:	609a      	str	r2, [r3, #8]
            if(blend)
 8002abe:	2800      	cmp	r0, #0
 8002ac0:	d0bd      	beq.n	8002a3e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002ac2:	4a13      	ldr	r2, [pc, #76]	; (8002b10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002ac4:	601a      	str	r2, [r3, #0]
        }

        break;
    }
}
 8002ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002aca:	8862      	ldrh	r2, [r4, #2]
 8002acc:	69d9      	ldr	r1, [r3, #28]
 8002ace:	1e54      	subs	r4, r2, #1
 8002ad0:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 8002ad4:	f022 0210 	bic.w	r2, r2, #16
 8002ad8:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
                if(blitOp.alpha == 255)
 8002adc:	f1bc 00ff 	subs.w	r0, ip, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002ae0:	f042 0210 	orr.w	r2, r2, #16
                if(blitOp.alpha == 255)
 8002ae4:	bf18      	it	ne
 8002ae6:	2001      	movne	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002ae8:	61da      	str	r2, [r3, #28]
                break;
 8002aea:	e7de      	b.n	8002aaa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002aec:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 8002af0:	61dc      	str	r4, [r3, #28]
 8002af2:	e7b8      	b.n	8002a66 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002af4:	f240 2201 	movw	r2, #513	; 0x201
 8002af8:	e7e4      	b.n	8002ac4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 8002afa:	bf00      	nop
 8002afc:	4002b000 	.word	0x4002b000
 8002b00:	00010201 	.word	0x00010201
 8002b04:	0802af01 	.word	0x0802af01
 8002b08:	0802af1b 	.word	0x0802af1b
 8002b0c:	0802ae69 	.word	0x0802ae69
 8002b10:	00020201 	.word	0x00020201

08002b14 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002b14:	b570      	push	{r4, r5, r6, lr}
 8002b16:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002b18:	7f89      	ldrb	r1, [r1, #30]
 8002b1a:	f7ff ff35 	bl	8002988 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002b1e:	8aa5      	ldrh	r5, [r4, #20]
 8002b20:	8ae1      	ldrh	r1, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002b22:	4b11      	ldr	r3, [pc, #68]	; (8002b68 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002b24:	ea41 4105 	orr.w	r1, r1, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002b28:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002b2a:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002b2c:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002b2e:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002b30:	1b52      	subs	r2, r2, r5
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002b32:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002b34:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002b36:	6826      	ldr	r6, [r4, #0]
 8002b38:	68e5      	ldr	r5, [r4, #12]
 8002b3a:	2e08      	cmp	r6, #8
 8002b3c:	d10d      	bne.n	8002b5a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002b3e:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002b40:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002b42:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002b44:	7f20      	ldrb	r0, [r4, #28]
 8002b46:	4a09      	ldr	r2, [pc, #36]	; (8002b6c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8002b48:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002b4c:	61da      	str	r2, [r3, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002b4e:	4a08      	ldr	r2, [pc, #32]	; (8002b70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002b50:	621d      	str	r5, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002b52:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002b54:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002b56:	601a      	str	r2, [r3, #0]
    }
}
 8002b58:	bd70      	pop	{r4, r5, r6, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8002b5a:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002b5c:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002b5e:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002b60:	4a04      	ldr	r2, [pc, #16]	; (8002b74 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002b62:	639d      	str	r5, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002b64:	e7f7      	b.n	8002b56 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8002b66:	bf00      	nop
 8002b68:	4002b000 	.word	0x4002b000
 8002b6c:	00010009 	.word	0x00010009
 8002b70:	00020201 	.word	0x00020201
 8002b74:	00030201 	.word	0x00030201

08002b78 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8002b78:	2001      	movs	r0, #1
 8002b7a:	4770      	bx	lr

08002b7c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002b7c:	200c      	movs	r0, #12
 8002b7e:	4770      	bx	lr

08002b80 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8002b80:	230c      	movs	r3, #12
 8002b82:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002b86:	3008      	adds	r0, #8
 8002b88:	4770      	bx	lr

08002b8a <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8002b8a:	230c      	movs	r3, #12
 8002b8c:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002b90:	3008      	adds	r0, #8
 8002b92:	4770      	bx	lr

08002b94 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002b94:	2001      	movs	r0, #1
 8002b96:	4770      	bx	lr

08002b98 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002b98:	f246 3098 	movw	r0, #25496	; 0x6398
 8002b9c:	4770      	bx	lr

08002b9e <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002b9e:	f246 3398 	movw	r3, #25496	; 0x6398
 8002ba2:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002ba6:	3008      	adds	r0, #8
 8002ba8:	4770      	bx	lr

08002baa <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002baa:	f246 3398 	movw	r3, #25496	; 0x6398
 8002bae:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002bb2:	3008      	adds	r0, #8
 8002bb4:	4770      	bx	lr

08002bb6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002bb6:	2001      	movs	r0, #1
 8002bb8:	4770      	bx	lr

08002bba <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002bba:	2010      	movs	r0, #16
 8002bbc:	4770      	bx	lr

08002bbe <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002bbe:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002bc2:	3008      	adds	r0, #8
 8002bc4:	4770      	bx	lr

08002bc6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002bc6:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002bca:	3008      	adds	r0, #8
 8002bcc:	4770      	bx	lr

08002bce <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8002bce:	4608      	mov	r0, r1
 8002bd0:	f000 bce0 	b.w	8003594 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

08002bd4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8002bd4:	b510      	push	{r4, lr}
 8002bd6:	4604      	mov	r4, r0
 8002bd8:	4b02      	ldr	r3, [pc, #8]	; (8002be4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002bda:	6003      	str	r3, [r0, #0]
 8002bdc:	f013 fd09 	bl	80165f2 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002be0:	4620      	mov	r0, r4
 8002be2:	bd10      	pop	{r4, pc}
 8002be4:	0802b01c 	.word	0x0802b01c

08002be8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002be8:	b510      	push	{r4, lr}
 8002bea:	4604      	mov	r4, r0
 8002bec:	f7ff fff2 	bl	8002bd4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	2114      	movs	r1, #20
 8002bf4:	f026 fa35 	bl	8029062 <_ZdlPvj>
 8002bf8:	4620      	mov	r0, r4
 8002bfa:	bd10      	pop	{r4, pc}

08002bfc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002bfc:	b510      	push	{r4, lr}
 8002bfe:	4604      	mov	r4, r0
 8002c00:	4b02      	ldr	r3, [pc, #8]	; (8002c0c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002c02:	6003      	str	r3, [r0, #0]
 8002c04:	f013 fcf5 	bl	80165f2 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002c08:	4620      	mov	r0, r4
 8002c0a:	bd10      	pop	{r4, pc}
 8002c0c:	0802afe8 	.word	0x0802afe8

08002c10 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002c10:	b510      	push	{r4, lr}
 8002c12:	4604      	mov	r4, r0
 8002c14:	f7ff fff2 	bl	8002bfc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002c18:	4620      	mov	r0, r4
 8002c1a:	f246 31a0 	movw	r1, #25504	; 0x63a0
 8002c1e:	f026 fa20 	bl	8029062 <_ZdlPvj>
 8002c22:	4620      	mov	r0, r4
 8002c24:	bd10      	pop	{r4, pc}
	...

08002c28 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002c28:	b510      	push	{r4, lr}
 8002c2a:	4604      	mov	r4, r0
 8002c2c:	4b02      	ldr	r3, [pc, #8]	; (8002c38 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002c2e:	6003      	str	r3, [r0, #0]
 8002c30:	f013 fcdf 	bl	80165f2 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002c34:	4620      	mov	r0, r4
 8002c36:	bd10      	pop	{r4, pc}
 8002c38:	0802afb4 	.word	0x0802afb4

08002c3c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002c3c:	b510      	push	{r4, lr}
 8002c3e:	4604      	mov	r4, r0
 8002c40:	f7ff fff2 	bl	8002c28 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002c44:	4620      	mov	r0, r4
 8002c46:	2118      	movs	r1, #24
 8002c48:	f026 fa0b 	bl	8029062 <_ZdlPvj>
 8002c4c:	4620      	mov	r0, r4
 8002c4e:	bd10      	pop	{r4, pc}

08002c50 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8002c50:	b510      	push	{r4, lr}
 8002c52:	4604      	mov	r4, r0
 8002c54:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <_ZN12FrontendHeapD1Ev+0x28>)
 8002c56:	6003      	str	r3, [r0, #0]
 8002c58:	f500 40c7 	add.w	r0, r0, #25472	; 0x6380
 8002c5c:	304c      	adds	r0, #76	; 0x4c
 8002c5e:	f7ff ffb9 	bl	8002bd4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002c62:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8002c66:	f7ff ffc9 	bl	8002bfc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002c6a:	f104 0014 	add.w	r0, r4, #20
 8002c6e:	f7ff ffdb 	bl	8002c28 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002c72:	4620      	mov	r0, r4
 8002c74:	bd10      	pop	{r4, pc}
 8002c76:	bf00      	nop
 8002c78:	0802b050 	.word	0x0802b050

08002c7c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002c7c:	b508      	push	{r3, lr}
 8002c7e:	4802      	ldr	r0, [pc, #8]	; (8002c88 <__tcf_0+0xc>)
 8002c80:	f7ff ffe6 	bl	8002c50 <_ZN12FrontendHeapD1Ev>
 8002c84:	bd08      	pop	{r3, pc}
 8002c86:	bf00      	nop
 8002c88:	20153258 	.word	0x20153258

08002c8c <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8002c8c:	b510      	push	{r4, lr}
 8002c8e:	4604      	mov	r4, r0
 8002c90:	f7ff ffde 	bl	8002c50 <_ZN12FrontendHeapD1Ev>
 8002c94:	4620      	mov	r0, r4
 8002c96:	f246 5140 	movw	r1, #25920	; 0x6540
 8002c9a:	f026 f9e2 	bl	8029062 <_ZdlPvj>
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	bd10      	pop	{r4, pc}
	...

08002ca4 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 480);

void touchgfx_init()
{
 8002ca4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8002ca8:	f000 fb14 	bl	80032d4 <_ZN14BitmapDatabase11getInstanceEv>
 8002cac:	2400      	movs	r4, #0
 8002cae:	4605      	mov	r5, r0
 8002cb0:	f000 fb14 	bl	80032dc <_ZN14BitmapDatabase15getInstanceSizeEv>
 8002cb4:	4623      	mov	r3, r4
 8002cb6:	4601      	mov	r1, r0
 8002cb8:	4622      	mov	r2, r4
 8002cba:	4628      	mov	r0, r5
 8002cbc:	9400      	str	r4, [sp, #0]
 8002cbe:	f018 fae9 	bl	801b294 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8002cc2:	4b27      	ldr	r3, [pc, #156]	; (8002d60 <touchgfx_init+0xbc>)
 8002cc4:	4a27      	ldr	r2, [pc, #156]	; (8002d64 <touchgfx_init+0xc0>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	f000 fe61 	bl	8003990 <_ZN8touchgfx5Texts11setLanguageEt>

    display.setFrameBufferFormat(Bitmap::RGB888);
 8002cce:	2101      	movs	r1, #1
 8002cd0:	4825      	ldr	r0, [pc, #148]	; (8002d68 <touchgfx_init+0xc4>)
 8002cd2:	f01f fa5b 	bl	802218c <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE>

    FontManager::setFontProvider(&fontProvider);
 8002cd6:	4825      	ldr	r0, [pc, #148]	; (8002d6c <touchgfx_init+0xc8>)
 8002cd8:	f018 fa44 	bl	801b164 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
        static FrontendHeap instance;
 8002cdc:	4d24      	ldr	r5, [pc, #144]	; (8002d70 <touchgfx_init+0xcc>)
 8002cde:	e8d5 3f8f 	ldab	r3, [r5]
 8002ce2:	07db      	lsls	r3, r3, #31
 8002ce4:	d436      	bmi.n	8002d54 <touchgfx_init+0xb0>
 8002ce6:	4628      	mov	r0, r5
 8002ce8:	f026 f9bd 	bl	8029066 <__cxa_guard_acquire>
 8002cec:	b390      	cbz	r0, 8002d54 <touchgfx_init+0xb0>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002cee:	4c21      	ldr	r4, [pc, #132]	; (8002d74 <touchgfx_init+0xd0>)
 8002cf0:	4f21      	ldr	r7, [pc, #132]	; (8002d78 <touchgfx_init+0xd4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8002cf2:	4b22      	ldr	r3, [pc, #136]	; (8002d7c <touchgfx_init+0xd8>)
 8002cf4:	f107 0618 	add.w	r6, r7, #24
 8002cf8:	f104 0014 	add.w	r0, r4, #20
 8002cfc:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8002d00:	6023      	str	r3, [r4, #0]
 8002d02:	6060      	str	r0, [r4, #4]
 8002d04:	f8c4 8008 	str.w	r8, [r4, #8]
 8002d08:	60e7      	str	r7, [r4, #12]
 8002d0a:	6126      	str	r6, [r4, #16]
 8002d0c:	f013 fc72 	bl	80165f4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002d10:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <touchgfx_init+0xdc>)
 8002d12:	4640      	mov	r0, r8
 8002d14:	6163      	str	r3, [r4, #20]
 8002d16:	f013 fc6d 	bl	80165f4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002d1a:	4b1a      	ldr	r3, [pc, #104]	; (8002d84 <touchgfx_init+0xe0>)
 8002d1c:	4638      	mov	r0, r7
 8002d1e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002d20:	f013 fc68 	bl	80165f4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002d24:	4a18      	ldr	r2, [pc, #96]	; (8002d88 <touchgfx_init+0xe4>)
 8002d26:	f504 43c0 	add.w	r3, r4, #24576	; 0x6000
 8002d2a:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 8002d2e:	f503 7078 	add.w	r0, r3, #992	; 0x3e0
 8002d32:	f000 fe9b 	bl	8003a6c <_ZN5ModelC1Ev>
 8002d36:	4622      	mov	r2, r4
 8002d38:	f107 0114 	add.w	r1, r7, #20
 8002d3c:	4630      	mov	r0, r6
 8002d3e:	f000 fe8b 	bl	8003a58 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8002d42:	4630      	mov	r0, r6
 8002d44:	f000 fc26 	bl	8003594 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 8002d48:	4810      	ldr	r0, [pc, #64]	; (8002d8c <touchgfx_init+0xe8>)
 8002d4a:	f026 f9d5 	bl	80290f8 <atexit>
 8002d4e:	4628      	mov	r0, r5
 8002d50:	f026 f995 	bl	802907e <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8002d54:	480e      	ldr	r0, [pc, #56]	; (8002d90 <touchgfx_init+0xec>)
}
 8002d56:	b002      	add	sp, #8
 8002d58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8002d5c:	f7ff bb44 	b.w	80023e8 <_ZN11TouchGFXHAL10initializeEv>
 8002d60:	20197a44 	.word	0x20197a44
 8002d64:	2015a5f0 	.word	0x2015a5f0
 8002d68:	2015a5f4 	.word	0x2015a5f4
 8002d6c:	20000008 	.word	0x20000008
 8002d70:	20153254 	.word	0x20153254
 8002d74:	20153258 	.word	0x20153258
 8002d78:	20159624 	.word	0x20159624
 8002d7c:	0802b050 	.word	0x0802b050
 8002d80:	0802afb4 	.word	0x0802afb4
 8002d84:	0802afe8 	.word	0x0802afe8
 8002d88:	0802b01c 	.word	0x0802b01c
 8002d8c:	08002c7d 	.word	0x08002c7d
 8002d90:	2015a53c 	.word	0x2015a53c

08002d94 <touchgfx_components_init>:

void touchgfx_components_init()
{
 8002d94:	b508      	push	{r3, lr}
    nema_init();
 8002d96:	f018 fef7 	bl	801bb88 <nema_init>
    nema_vg_init(480, 480);
}
 8002d9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nema_vg_init(480, 480);
 8002d9e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002da2:	4608      	mov	r0, r1
 8002da4:	f019 bfb2 	b.w	801cd0c <nema_vg_init>

08002da8 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8002da8:	4801      	ldr	r0, [pc, #4]	; (8002db0 <touchgfx_taskEntry+0x8>)
 8002daa:	f013 bf32 	b.w	8016c12 <_ZN8touchgfx3HAL9taskEntryEv>
 8002dae:	bf00      	nop
 8002db0:	2015a53c 	.word	0x2015a53c

08002db4 <_GLOBAL__sub_I_touchgfx_init>:
}
 8002db4:	b537      	push	{r0, r1, r2, r4, r5, lr}
static STM32DMA dma;
 8002db6:	4911      	ldr	r1, [pc, #68]	; (8002dfc <_GLOBAL__sub_I_touchgfx_init+0x48>)
{
public:

    STM32TouchController() {}
 8002db8:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <_GLOBAL__sub_I_touchgfx_init+0x4c>)
 8002dba:	4d12      	ldr	r5, [pc, #72]	; (8002e04 <_GLOBAL__sub_I_touchgfx_init+0x50>)
 8002dbc:	4608      	mov	r0, r1
 8002dbe:	602b      	str	r3, [r5, #0]
 8002dc0:	f7ff fda8 	bl	8002914 <_ZN8STM32DMAC1Ev>
static LCDGPU2D display;
 8002dc4:	4a10      	ldr	r2, [pc, #64]	; (8002e08 <_GLOBAL__sub_I_touchgfx_init+0x54>)
        touchgfx::HALGPU2D(dma, display, tc, width, height)
 8002dc6:	4c11      	ldr	r4, [pc, #68]	; (8002e0c <_GLOBAL__sub_I_touchgfx_init+0x58>)
 8002dc8:	4610      	mov	r0, r2
 8002dca:	f01f f9d3 	bl	8022174 <_ZN8touchgfx8LCDGPU2DC1Ev>
 8002dce:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	e9cd 3300 	strd	r3, r3, [sp]
 8002dd8:	4a0b      	ldr	r2, [pc, #44]	; (8002e08 <_GLOBAL__sub_I_touchgfx_init+0x54>)
 8002dda:	462b      	mov	r3, r5
 8002ddc:	4907      	ldr	r1, [pc, #28]	; (8002dfc <_GLOBAL__sub_I_touchgfx_init+0x48>)
 8002dde:	f01b f987 	bl	801e0f0 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8002de2:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <_GLOBAL__sub_I_touchgfx_init+0x5c>)
 8002de4:	6023      	str	r3, [r4, #0]
          cc_in(0)
 8002de6:	2300      	movs	r3, #0
 8002de8:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8002dec:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 8002df0:	4b08      	ldr	r3, [pc, #32]	; (8002e14 <_GLOBAL__sub_I_touchgfx_init+0x60>)
 8002df2:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
}
 8002df6:	b003      	add	sp, #12
 8002df8:	bd30      	pop	{r4, r5, pc}
 8002dfa:	bf00      	nop
 8002dfc:	2015979c 	.word	0x2015979c
 8002e00:	0802a86c 	.word	0x0802a86c
 8002e04:	20159798 	.word	0x20159798
 8002e08:	2015a5f4 	.word	0x2015a5f4
 8002e0c:	2015a53c 	.word	0x2015a53c
 8002e10:	0802a9f8 	.word	0x0802a9f8
 8002e14:	0802a78c 	.word	0x0802a78c

08002e18 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002e18:	4801      	ldr	r0, [pc, #4]	; (8002e20 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8002e1a:	f7ff bd2f 	b.w	800287c <_ZN8STM32DMAD1Ev>
 8002e1e:	bf00      	nop
 8002e20:	2015979c 	.word	0x2015979c

08002e24 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e24:	2290      	movs	r2, #144	; 0x90
 8002e26:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x14>)
 8002e28:	f883 2376 	strb.w	r2, [r3, #886]	; 0x376
 8002e2c:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
 8002e30:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
    NVIC_SetPriority(GPU2D_IRQn, 9);
}
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	e000e100 	.word	0xe000e100

08002e3c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(GPU2D_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002e3c:	4a09      	ldr	r2, [pc, #36]	; (8002e64 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8002e3e:	490a      	ldr	r1, [pc, #40]	; (8002e68 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8002e40:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002e42:	480a      	ldr	r0, [pc, #40]	; (8002e6c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002e44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002e4e:	6911      	ldr	r1, [r2, #16]
 8002e50:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8002e54:	3901      	subs	r1, #1
 8002e56:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8002e58:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8002e5a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002e62:	4770      	bx	lr
 8002e64:	40016800 	.word	0x40016800
 8002e68:	2015a604 	.word	0x2015a604
 8002e6c:	2015a602 	.word	0x2015a602

08002e70 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HALGPU2D::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8002e70:	4b01      	ldr	r3, [pc, #4]	; (8002e78 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8002e72:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
 8002e76:	4770      	bx	lr
 8002e78:	40016800 	.word	0x40016800

08002e7c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002e7c:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002e7e:	4b02      	ldr	r3, [pc, #8]	; (8002e88 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)
 8002e80:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002e84:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002e86:	4770      	bx	lr
 8002e88:	40016800 	.word	0x40016800

08002e8c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8002e8c:	b570      	push	{r4, r5, r6, lr}
 8002e8e:	4604      	mov	r4, r0
    HALGPU2D::initialize(8192);
 8002e90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e94:	f01b f994 	bl	801e1c0 <_ZN8touchgfx8HALGPU2D10initializeEi>
    registerEventListener(*(Application::getInstance()));
 8002e98:	6823      	ldr	r3, [r4, #0]
 8002e9a:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8002e9c:	f015 fdc6 	bl	8018a2c <_ZN8touchgfx11Application11getInstanceEv>
 8002ea0:	4601      	mov	r1, r0
 8002ea2:	4620      	mov	r0, r4
 8002ea4:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8002ea6:	6823      	ldr	r3, [r4, #0]
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8002eae:	4a03      	ldr	r2, [pc, #12]	; (8002ebc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x30>)
 8002eb0:	46ac      	mov	ip, r5
}
 8002eb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	4901      	ldr	r1, [pc, #4]	; (8002ec0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x34>)
 8002eba:	4760      	bx	ip
 8002ebc:	200a8d2c 	.word	0x200a8d2c
 8002ec0:	2000012c 	.word	0x2000012c

08002ec4 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HALGPU2D::beginFrame();
 8002ec4:	f01b b8c4 	b.w	801e050 <_ZN8touchgfx8HALGPU2D10beginFrameEv>

08002ec8 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
 8002ec8:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 8002ecc:	b113      	cbz	r3, 8002ed4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xc>
        refreshRequested = true;
 8002ece:	2201      	movs	r2, #1
 8002ed0:	4b01      	ldr	r3, [pc, #4]	; (8002ed8 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x10>)
 8002ed2:	701a      	strb	r2, [r3, #0]
    HALGPU2D::endFrame();
 8002ed4:	f01b b8ce 	b.w	801e074 <_ZN8touchgfx8HALGPU2D8endFrameEv>
 8002ed8:	2015a600 	.word	0x2015a600

08002edc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HALGPU2D::flushFrameBuffer(rect);
 8002edc:	f013 be36 	b.w	8016b4c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

08002ee0 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HALGPU2D::blockCopy(dest, src, numBytes);
 8002ee0:	f013 bf9f 	b.w	8016e22 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08002ee4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8002ee4:	b570      	push	{r4, r5, r6, lr}
 8002ee6:	460d      	mov	r5, r1
 8002ee8:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8002eea:	b935      	cbnz	r5, 8002efa <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 8002eec:	f240 21d2 	movw	r1, #722	; 0x2d2
 8002ef0:	4b08      	ldr	r3, [pc, #32]	; (8002f14 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 8002ef2:	4a09      	ldr	r2, [pc, #36]	; (8002f18 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8002ef4:	4809      	ldr	r0, [pc, #36]	; (8002f1c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 8002ef6:	f026 f8e1 	bl	80290bc <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8002efa:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
    }
 8002efe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8002f02:	3a00      	subs	r2, #0
 8002f04:	bf18      	it	ne
 8002f06:	2201      	movne	r2, #1
 8002f08:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 8002f0a:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8002f0c:	6803      	ldr	r3, [r0, #0]
 8002f0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f12:	4718      	bx	r3
 8002f14:	0802a967 	.word	0x0802a967
 8002f18:	0802a99f 	.word	0x0802a99f
 8002f1c:	0802a922 	.word	0x0802a922
 8002f20:	201979e6 	.word	0x201979e6

08002f24 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f24:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002f28:	4b0a      	ldr	r3, [pc, #40]	; (8002f54 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x30>)
 8002f2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __ASM volatile ("dsb 0xF":::"memory");
 8002f2e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002f32:	f3bf 8f6f 	isb	sy
 8002f36:	2280      	movs	r2, #128	; 0x80
 8002f38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __ASM volatile ("dsb 0xF":::"memory");
 8002f3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002f40:	f3bf 8f6f 	isb	sy
 8002f44:	2210      	movs	r2, #16
 8002f46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __ASM volatile ("dsb 0xF":::"memory");
 8002f4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002f4e:	f3bf 8f6f 	isb	sy
}
 8002f52:	4770      	bx	lr
 8002f54:	e000e100 	.word	0xe000e100

08002f58 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f58:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002f5c:	4b03      	ldr	r3, [pc, #12]	; (8002f6c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x14>)
 8002f5e:	60da      	str	r2, [r3, #12]
 8002f60:	2280      	movs	r2, #128	; 0x80
 8002f62:	611a      	str	r2, [r3, #16]
 8002f64:	2210      	movs	r2, #16
 8002f66:	611a      	str	r2, [r3, #16]
}
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	e000e100 	.word	0xe000e100

08002f70 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8002f70:	b510      	push	{r4, lr}
        return instance;
 8002f72:	4c14      	ldr	r4, [pc, #80]	; (8002fc4 <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 8002f74:	6823      	ldr	r3, [r4, #0]
 8002f76:	b323      	cbz	r3, 8002fc2 <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8002f78:	4b13      	ldr	r3, [pc, #76]	; (8002fc8 <HAL_LTDC_LineEventCallback+0x58>)
 8002f7a:	4a14      	ldr	r2, [pc, #80]	; (8002fcc <HAL_LTDC_LineEventCallback+0x5c>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	8811      	ldrh	r1, [r2, #0]
 8002f80:	428b      	cmp	r3, r1
 8002f82:	d113      	bne.n	8002fac <HAL_LTDC_LineEventCallback+0x3c>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8002f84:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <HAL_LTDC_LineEventCallback+0x60>)
 8002f86:	8819      	ldrh	r1, [r3, #0]
 8002f88:	f008 fd08 	bl	800b99c <HAL_LTDC_ProgramLineEvent>
 8002f8c:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 8002f8e:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8002f92:	3301      	adds	r3, #1
 8002f94:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 8002f98:	f7ff fc28 	bl	80027ec <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8002f9c:	6820      	ldr	r0, [r4, #0]
 8002f9e:	f014 fb85 	bl	80176ac <_ZN8touchgfx3HAL16swapFrameBuffersEv>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8002fa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	f7ff b9aa 	b.w	8002300 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8002fac:	f008 fcf6 	bl	800b99c <HAL_LTDC_ProgramLineEvent>
        return instance;
 8002fb0:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 8002fb2:	6803      	ldr	r3, [r0, #0]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	4798      	blx	r3
    }
 8002fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	f7ff b9bb 	b.w	8002338 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 8002fc2:	bd10      	pop	{r4, pc}
 8002fc4:	201979e8 	.word	0x201979e8
 8002fc8:	40016800 	.word	0x40016800
 8002fcc:	2015a604 	.word	0x2015a604
 8002fd0:	2015a602 	.word	0x2015a602

08002fd4 <HAL_GPU2D_CommandListCpltCallback>:
#if (USE_HAL_GPU2D_REGISTER_CALLBACKS == 1)
static void GPU2D_CommandListCpltCallback(GPU2D_HandleTypeDef *hgpu2d, uint32_t CmdListID)
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
void HAL_GPU2D_CommandListCpltCallback(GPU2D_HandleTypeDef *hgpu2d, uint32_t CmdListID)
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(hgpu2d);

    last_cl_id = CmdListID;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	4a04      	ldr	r2, [pc, #16]	; (8002ff4 <HAL_GPU2D_CommandListCpltCallback+0x20>)
 8002fe2:	6013      	str	r3, [r2, #0]

    /* Return a token back to a semaphore */
    tx_semaphore_put(&nema_irq_sem);
 8002fe4:	4804      	ldr	r0, [pc, #16]	; (8002ff8 <HAL_GPU2D_CommandListCpltCallback+0x24>)
 8002fe6:	f013 f9d1 	bl	801638c <_txe_semaphore_put>
}
 8002fea:	bf00      	nop
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	2000000c 	.word	0x2000000c
 8002ff8:	20196520 	.word	0x20196520

08002ffc <nema_sys_init>:

int32_t nema_sys_init(void)
{
 8002ffc:	b590      	push	{r4, r7, lr}
 8002ffe:	b089      	sub	sp, #36	; 0x24
 8003000:	af02      	add	r7, sp, #8
    int error_code = 0;
 8003002:	2300      	movs	r3, #0
 8003004:	617b      	str	r3, [r7, #20]
    /* Register Command List Comlete Callback */
    HAL_GPU2D_RegisterCommandListCpltCallback(&hgpu2d, GPU2D_CommandListCpltCallback);
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

    /* Create IRQ semaphore */
    error_code = tx_semaphore_create(&nema_irq_sem, "nema sema irq", 0);
 8003006:	231c      	movs	r3, #28
 8003008:	2200      	movs	r2, #0
 800300a:	4924      	ldr	r1, [pc, #144]	; (800309c <nema_sys_init+0xa0>)
 800300c:	4824      	ldr	r0, [pc, #144]	; (80030a0 <nema_sys_init+0xa4>)
 800300e:	f013 f8e5 	bl	80161dc <_txe_semaphore_create>
 8003012:	4603      	mov	r3, r0
 8003014:	617b      	str	r3, [r7, #20]
    assert(error_code == TX_SUCCESS);
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <nema_sys_init+0x2c>
 800301c:	4b21      	ldr	r3, [pc, #132]	; (80030a4 <nema_sys_init+0xa8>)
 800301e:	4a22      	ldr	r2, [pc, #136]	; (80030a8 <nema_sys_init+0xac>)
 8003020:	2150      	movs	r1, #80	; 0x50
 8003022:	4822      	ldr	r0, [pc, #136]	; (80030ac <nema_sys_init+0xb0>)
 8003024:	f026 f84a 	bl	80290bc <__assert_func>

    /* Initialise Mem Space */
    error_code = tsi_malloc_init_pool(0, (void*)nemagfx_pool_mem, (uintptr_t)nemagfx_pool_mem, NEMAGFX_BYTE_POOL_SIZE, 1);
 8003028:	4a21      	ldr	r2, [pc, #132]	; (80030b0 <nema_sys_init+0xb4>)
 800302a:	2301      	movs	r3, #1
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	4b21      	ldr	r3, [pc, #132]	; (80030b4 <nema_sys_init+0xb8>)
 8003030:	491f      	ldr	r1, [pc, #124]	; (80030b0 <nema_sys_init+0xb4>)
 8003032:	2000      	movs	r0, #0
 8003034:	f019 fff0 	bl	801d018 <tsi_malloc_init_pool>
 8003038:	6178      	str	r0, [r7, #20]
    assert(error_code == 0);
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d005      	beq.n	800304c <nema_sys_init+0x50>
 8003040:	4b1d      	ldr	r3, [pc, #116]	; (80030b8 <nema_sys_init+0xbc>)
 8003042:	4a19      	ldr	r2, [pc, #100]	; (80030a8 <nema_sys_init+0xac>)
 8003044:	2154      	movs	r1, #84	; 0x54
 8003046:	4819      	ldr	r0, [pc, #100]	; (80030ac <nema_sys_init+0xb0>)
 8003048:	f026 f838 	bl	80290bc <__assert_func>

    /* Allocate ring_buffer memory */
    ring_buffer_str.bo = nema_buffer_create(RING_SIZE);
 800304c:	4c1b      	ldr	r4, [pc, #108]	; (80030bc <nema_sys_init+0xc0>)
 800304e:	463b      	mov	r3, r7
 8003050:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003054:	4618      	mov	r0, r3
 8003056:	f000 f891 	bl	800317c <nema_buffer_create>
 800305a:	463b      	mov	r3, r7
 800305c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800305e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    assert(ring_buffer_str.bo.base_virt);
 8003062:	4b16      	ldr	r3, [pc, #88]	; (80030bc <nema_sys_init+0xc0>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d105      	bne.n	8003076 <nema_sys_init+0x7a>
 800306a:	4b15      	ldr	r3, [pc, #84]	; (80030c0 <nema_sys_init+0xc4>)
 800306c:	4a0e      	ldr	r2, [pc, #56]	; (80030a8 <nema_sys_init+0xac>)
 800306e:	2158      	movs	r1, #88	; 0x58
 8003070:	480e      	ldr	r0, [pc, #56]	; (80030ac <nema_sys_init+0xb0>)
 8003072:	f026 f823 	bl	80290bc <__assert_func>

    /* Initialize Ring Buffer */
    error_code = nema_rb_init(&ring_buffer_str, 1);
 8003076:	2101      	movs	r1, #1
 8003078:	4810      	ldr	r0, [pc, #64]	; (80030bc <nema_sys_init+0xc0>)
 800307a:	f018 fb47 	bl	801b70c <nema_rb_init>
 800307e:	6178      	str	r0, [r7, #20]
    if (error_code < 0)
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	2b00      	cmp	r3, #0
 8003084:	da01      	bge.n	800308a <nema_sys_init+0x8e>
    {
        return error_code;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	e003      	b.n	8003092 <nema_sys_init+0x96>
    }

    /* Reset last_cl_id counter */
    last_cl_id = 0;
 800308a:	4b0e      	ldr	r3, [pc, #56]	; (80030c4 <nema_sys_init+0xc8>)
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]

    return error_code;
 8003090:	697b      	ldr	r3, [r7, #20]
}
 8003092:	4618      	mov	r0, r3
 8003094:	371c      	adds	r7, #28
 8003096:	46bd      	mov	sp, r7
 8003098:	bd90      	pop	{r4, r7, pc}
 800309a:	bf00      	nop
 800309c:	0802a630 	.word	0x0802a630
 80030a0:	20196520 	.word	0x20196520
 80030a4:	0802a640 	.word	0x0802a640
 80030a8:	0802b05c 	.word	0x0802b05c
 80030ac:	0802a65c 	.word	0x0802a65c
 80030b0:	2015a608 	.word	0x2015a608
 80030b4:	0003bf00 	.word	0x0003bf00
 80030b8:	0802a6a8 	.word	0x0802a6a8
 80030bc:	20196508 	.word	0x20196508
 80030c0:	0802a6b8 	.word	0x0802a6b8
 80030c4:	2000000c 	.word	0x2000000c

080030c8 <nema_reg_read>:

uint32_t nema_reg_read(uint32_t reg)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
    return HAL_GPU2D_ReadRegister(&hgpu2d, reg);
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	4804      	ldr	r0, [pc, #16]	; (80030e4 <nema_reg_read+0x1c>)
 80030d4:	f007 f9f7 	bl	800a4c6 <HAL_GPU2D_ReadRegister>
 80030d8:	4603      	mov	r3, r0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20152eb4 	.word	0x20152eb4

080030e8 <nema_reg_write>:

void nema_reg_write(uint32_t reg, uint32_t value)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
    HAL_GPU2D_WriteRegister(&hgpu2d, reg, value);
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	4803      	ldr	r0, [pc, #12]	; (8003104 <nema_reg_write+0x1c>)
 80030f8:	f007 f9f7 	bl	800a4ea <HAL_GPU2D_WriteRegister>
}
 80030fc:	bf00      	nop
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	20152eb4 	.word	0x20152eb4

08003108 <nema_wait_irq>:

int nema_wait_irq(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
    /* Wait indefinitely for a free semaphore */
    tx_semaphore_get(&nema_irq_sem, TX_WAIT_FOREVER);
 800310c:	f04f 31ff 	mov.w	r1, #4294967295
 8003110:	4802      	ldr	r0, [pc, #8]	; (800311c <nema_wait_irq+0x14>)
 8003112:	f013 f8f9 	bl	8016308 <_txe_semaphore_get>

    return 0;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	bd80      	pop	{r7, pc}
 800311c:	20196520 	.word	0x20196520

08003120 <nema_wait_irq_cl>:

int nema_wait_irq_cl(int cl_id)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
    while (last_cl_id < cl_id)
 8003128:	e001      	b.n	800312e <nema_wait_irq_cl+0xe>
    {
        (void)nema_wait_irq();
 800312a:	f7ff ffed 	bl	8003108 <nema_wait_irq>
    while (last_cl_id < cl_id)
 800312e:	4b05      	ldr	r3, [pc, #20]	; (8003144 <nema_wait_irq_cl+0x24>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	429a      	cmp	r2, r3
 8003136:	dcf8      	bgt.n	800312a <nema_wait_irq_cl+0xa>
    }

    return 0;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	2000000c 	.word	0x2000000c

08003148 <nema_host_free>:

    return 0;
}

void nema_host_free(void *ptr)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
    tsi_free(ptr);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f019 ffc9 	bl	801d0e8 <tsi_free>
}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <nema_host_malloc>:

void *nema_host_malloc(unsigned size)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b082      	sub	sp, #8
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
    return tsi_malloc(size);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4619      	mov	r1, r3
 800316a:	2000      	movs	r0, #0
 800316c:	f019 ff7c 	bl	801d068 <tsi_malloc_pool>
 8003170:	4603      	mov	r3, r0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
	...

0800317c <nema_buffer_create>:

nema_buffer_t nema_buffer_create(int size)
{
 800317c:	b590      	push	{r4, r7, lr}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
    nema_buffer_t bo;
    memset(&bo, 0, sizeof(bo));
 8003186:	f107 0308 	add.w	r3, r7, #8
 800318a:	2210      	movs	r2, #16
 800318c:	2100      	movs	r1, #0
 800318e:	4618      	mov	r0, r3
 8003190:	f026 f812 	bl	80291b8 <memset>
    bo.base_virt = tsi_malloc(size);
 8003194:	6839      	ldr	r1, [r7, #0]
 8003196:	2000      	movs	r0, #0
 8003198:	f019 ff66 	bl	801d068 <tsi_malloc_pool>
 800319c:	4603      	mov	r3, r0
 800319e:	613b      	str	r3, [r7, #16]
    bo.base_phys = (uint32_t)bo.base_virt;
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	617b      	str	r3, [r7, #20]
    bo.size      = size;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	60bb      	str	r3, [r7, #8]
    assert(bo.base_virt != 0 && "Unable to allocate memory in nema_buffer_create");
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d105      	bne.n	80031ba <nema_buffer_create+0x3e>
 80031ae:	4b08      	ldr	r3, [pc, #32]	; (80031d0 <nema_buffer_create+0x54>)
 80031b0:	4a08      	ldr	r2, [pc, #32]	; (80031d4 <nema_buffer_create+0x58>)
 80031b2:	219e      	movs	r1, #158	; 0x9e
 80031b4:	4808      	ldr	r0, [pc, #32]	; (80031d8 <nema_buffer_create+0x5c>)
 80031b6:	f025 ff81 	bl	80290bc <__assert_func>

    return bo;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	461c      	mov	r4, r3
 80031be:	f107 0308 	add.w	r3, r7, #8
 80031c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	371c      	adds	r7, #28
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd90      	pop	{r4, r7, pc}
 80031d0:	0802a6d8 	.word	0x0802a6d8
 80031d4:	0802b06c 	.word	0x0802b06c
 80031d8:	0802a65c 	.word	0x0802a65c

080031dc <nema_buffer_create_pool>:

nema_buffer_t nema_buffer_create_pool(int pool, int size)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(pool);

    return nema_buffer_create(size);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff ffc5 	bl	800317c <nema_buffer_create>
}
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <nema_buffer_map>:

void *nema_buffer_map(nema_buffer_t *bo)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
    return bo->base_virt;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
}
 8003206:	4618      	mov	r0, r3
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <nema_buffer_destroy>:
    /* Prevent unused argument(s) compilation warning */
    UNUSED(bo);
}

void nema_buffer_destroy(nema_buffer_t *bo)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b082      	sub	sp, #8
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
    if (bo->fd == -1)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003222:	d012      	beq.n	800324a <nema_buffer_destroy+0x38>
    {
        return; /* Buffer weren't allocated! */
    }

    tsi_free(bo->base_virt);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	4618      	mov	r0, r3
 800322a:	f019 ff5d 	bl	801d0e8 <tsi_free>

    bo->base_virt = (void *)0;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	609a      	str	r2, [r3, #8]
    bo->base_phys = 0;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	60da      	str	r2, [r3, #12]
    bo->size      = 0;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]
    bo->fd        = -1; /* Buffer not allocated */
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f04f 32ff 	mov.w	r2, #4294967295
 8003246:	605a      	str	r2, [r3, #4]
 8003248:	e000      	b.n	800324c <nema_buffer_destroy+0x3a>
        return; /* Buffer weren't allocated! */
 800324a:	bf00      	nop
}
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <nema_buffer_flush>:
{
    return bo->base_phys;
}

void nema_buffer_flush(nema_buffer_t * bo)
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(bo);
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <nema_mutex_lock>:

int nema_mutex_lock(int mutex_id)
{
 8003266:	b480      	push	{r7}
 8003268:	b085      	sub	sp, #20
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
    int retval = 0;
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
/* USER CODE BEGIN nema_mutex_lock */
    /* Prevent unused argument(s) compilation warning */
    UNUSED(mutex_id);
/* USER CODE END nema_mutex_lock */

    return retval;
 8003272:	68fb      	ldr	r3, [r7, #12]
}
 8003274:	4618      	mov	r0, r3
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <nema_mutex_unlock>:

int nema_mutex_unlock(int mutex_id)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
    int retval = 0;
 8003288:	2300      	movs	r3, #0
 800328a:	60fb      	str	r3, [r7, #12]
/* USER CODE BEGIN nema_mutex_unlock */
    /* Prevent unused argument(s) compilation warning */
    UNUSED(mutex_id);
/* USER CODE END nema_mutex_unlock */

    return retval;
 800328c:	68fb      	ldr	r3, [r7, #12]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800329a:	4770      	bx	lr

0800329c <_ZN23ApplicationFontProviderD0Ev>:
 800329c:	b510      	push	{r4, lr}
 800329e:	4604      	mov	r4, r0
 80032a0:	2104      	movs	r1, #4
 80032a2:	f025 fede 	bl	8029062 <_ZdlPvj>
 80032a6:	4620      	mov	r0, r4
 80032a8:	bd10      	pop	{r4, pc}

080032aa <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 80032aa:	2901      	cmp	r1, #1
{
 80032ac:	b508      	push	{r3, lr}
    switch (typography)
 80032ae:	d006      	beq.n	80032be <_ZN23ApplicationFontProvider7getFontEt+0x14>
 80032b0:	2902      	cmp	r1, #2
 80032b2:	d008      	beq.n	80032c6 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 80032b4:	b959      	cbnz	r1, 80032ce <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80032b6:	f000 fba9 	bl	8003a0c <_ZN17TypedTextDatabase8getFontsEv>
 80032ba:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 80032bc:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80032be:	f000 fba5 	bl	8003a0c <_ZN17TypedTextDatabase8getFontsEv>
 80032c2:	6840      	ldr	r0, [r0, #4]
 80032c4:	e7fa      	b.n	80032bc <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80032c6:	f000 fba1 	bl	8003a0c <_ZN17TypedTextDatabase8getFontsEv>
 80032ca:	6880      	ldr	r0, [r0, #8]
 80032cc:	e7f6      	b.n	80032bc <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 80032ce:	2000      	movs	r0, #0
 80032d0:	e7f4      	b.n	80032bc <_ZN23ApplicationFontProvider7getFontEt+0x12>
	...

080032d4 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 80032d4:	4800      	ldr	r0, [pc, #0]	; (80032d8 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 80032d6:	4770      	bx	lr
 80032d8:	0802b094 	.word	0x0802b094

080032dc <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 80032dc:	2001      	movs	r0, #1
 80032de:	4770      	bx	lr

080032e0 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80032e0:	b513      	push	{r0, r1, r4, lr}
 80032e2:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 80032e4:	b151      	cbz	r1, 80032fc <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80032e6:	6803      	ldr	r3, [r0, #0]
        const uint8_t* dummyPixelDataPointer = 0;
 80032e8:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 80032ea:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80032ee:	aa01      	add	r2, sp, #4
 80032f0:	689c      	ldr	r4, [r3, #8]
 80032f2:	f10d 0303 	add.w	r3, sp, #3
 80032f6:	47a0      	blx	r4
        return glyph;
    }
 80032f8:	b002      	add	sp, #8
 80032fa:	bd10      	pop	{r4, pc}
            return 0;
 80032fc:	4608      	mov	r0, r1
 80032fe:	e7fb      	b.n	80032f8 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08003300 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8003300:	89c0      	ldrh	r0, [r0, #14]
 8003302:	4770      	bx	lr

08003304 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8003304:	8a00      	ldrh	r0, [r0, #16]
 8003306:	4770      	bx	lr

08003308 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8003308:	88c0      	ldrh	r0, [r0, #6]
 800330a:	4770      	bx	lr

0800330c <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 800330c:	8880      	ldrh	r0, [r0, #4]
 800330e:	4770      	bx	lr

08003310 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8003310:	7a80      	ldrb	r0, [r0, #10]
    }
 8003312:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8003316:	4770      	bx	lr

08003318 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8003318:	7a80      	ldrb	r0, [r0, #10]
    }
 800331a:	09c0      	lsrs	r0, r0, #7
 800331c:	4770      	bx	lr

0800331e <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 800331e:	4770      	bx	lr

08003320 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8003320:	4770      	bx	lr

08003322 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8003322:	f500 7398 	add.w	r3, r0, #304	; 0x130
 8003326:	6808      	ldr	r0, [r1, #0]
 8003328:	6849      	ldr	r1, [r1, #4]
 800332a:	c303      	stmia	r3!, {r0, r1}
    }
 800332c:	4770      	bx	lr

0800332e <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 800332e:	4770      	bx	lr

08003330 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8003330:	4770      	bx	lr

08003332 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8003332:	6041      	str	r1, [r0, #4]
    }
 8003334:	4770      	bx	lr

08003336 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8003336:	4770      	bx	lr

08003338 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003338:	4b06      	ldr	r3, [pc, #24]	; (8003354 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 800333a:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 800333e:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8003342:	2300      	movs	r3, #0
 8003344:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003348:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 800334c:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	080033f9 	.word	0x080033f9

08003358 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8003358:	2301      	movs	r3, #1
 800335a:	7203      	strb	r3, [r0, #8]
    }
 800335c:	4770      	bx	lr

0800335e <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 800335e:	4770      	bx	lr

08003360 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8003360:	4770      	bx	lr

08003362 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003362:	4603      	mov	r3, r0
 8003364:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8003366:	6841      	ldr	r1, [r0, #4]
 8003368:	68c2      	ldr	r2, [r0, #12]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	1054      	asrs	r4, r2, #1
 800336e:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8003372:	07d2      	lsls	r2, r2, #31
 8003374:	bf48      	it	mi
 8003376:	590a      	ldrmi	r2, [r1, r4]
    }
 8003378:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 800337c:	bf48      	it	mi
 800337e:	58d3      	ldrmi	r3, [r2, r3]
 8003380:	4718      	bx	r3

08003382 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 8003382:	6843      	ldr	r3, [r0, #4]
 8003384:	b12b      	cbz	r3, 8003392 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 8003386:	6883      	ldr	r3, [r0, #8]
 8003388:	b92b      	cbnz	r3, 8003396 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 800338a:	68c0      	ldr	r0, [r0, #12]
 800338c:	f000 0001 	and.w	r0, r0, #1
 8003390:	4770      	bx	lr
 8003392:	4618      	mov	r0, r3
 8003394:	4770      	bx	lr
 8003396:	2001      	movs	r0, #1
    }
 8003398:	4770      	bx	lr

0800339a <_ZN8touchgfx12NoTransitionD0Ev>:
 800339a:	b510      	push	{r4, lr}
 800339c:	4604      	mov	r4, r0
 800339e:	210c      	movs	r1, #12
 80033a0:	f025 fe5f 	bl	8029062 <_ZdlPvj>
 80033a4:	4620      	mov	r0, r4
 80033a6:	bd10      	pop	{r4, pc}

080033a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80033a8:	b510      	push	{r4, lr}
 80033aa:	4604      	mov	r4, r0
 80033ac:	2110      	movs	r1, #16
 80033ae:	f025 fe58 	bl	8029062 <_ZdlPvj>
 80033b2:	4620      	mov	r0, r4
 80033b4:	bd10      	pop	{r4, pc}

080033b6 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 80033b6:	b510      	push	{r4, lr}
 80033b8:	4604      	mov	r4, r0
 80033ba:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80033be:	f025 fe50 	bl	8029062 <_ZdlPvj>
 80033c2:	4620      	mov	r0, r4
 80033c4:	bd10      	pop	{r4, pc}

080033c6 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 80033c6:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 80033c8:	f015 fb30 	bl	8018a2c <_ZN8touchgfx11Application11getInstanceEv>
    }
 80033cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
 80033d0:	f015 bf74 	b.w	80192bc <_ZN8touchgfx11Application10invalidateEv>

080033d4 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80033d4:	b510      	push	{r4, lr}
 80033d6:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80033d8:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 80033dc:	b158      	cbz	r0, 80033f6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 80033de:	6803      	ldr	r3, [r0, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	4798      	blx	r3
 80033e4:	b138      	cbz	r0, 80033f6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 80033e6:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 80033ea:	6803      	ldr	r3, [r0, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80033f0:	2300      	movs	r3, #0
 80033f2:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
 80033f6:	bd10      	pop	{r4, pc}

080033f8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 80033f8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80033fc:	e9d0 5a55 	ldrd	r5, sl, [r0, #340]	; 0x154
{
 8003400:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003402:	68a8      	ldr	r0, [r5, #8]
 8003404:	6803      	ldr	r3, [r0, #0]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	4798      	blx	r3
 800340a:	f246 3397 	movw	r3, #25495	; 0x6397
 800340e:	4298      	cmp	r0, r3
 8003410:	d805      	bhi.n	800341e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x26>
 8003412:	21a3      	movs	r1, #163	; 0xa3
 8003414:	4b45      	ldr	r3, [pc, #276]	; (800352c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8003416:	4a46      	ldr	r2, [pc, #280]	; (8003530 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003418:	4846      	ldr	r0, [pc, #280]	; (8003534 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 800341a:	f025 fe4f 	bl	80290bc <__assert_func>
 800341e:	6868      	ldr	r0, [r5, #4]
 8003420:	6803      	ldr	r3, [r0, #0]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	4798      	blx	r3
 8003426:	280f      	cmp	r0, #15
 8003428:	d803      	bhi.n	8003432 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x3a>
 800342a:	21a4      	movs	r1, #164	; 0xa4
 800342c:	4b42      	ldr	r3, [pc, #264]	; (8003538 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 800342e:	4a40      	ldr	r2, [pc, #256]	; (8003530 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8003430:	e7f2      	b.n	8003418 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003432:	68e8      	ldr	r0, [r5, #12]
 8003434:	6803      	ldr	r3, [r0, #0]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	4798      	blx	r3
 800343a:	280b      	cmp	r0, #11
 800343c:	d803      	bhi.n	8003446 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4e>
 800343e:	21a5      	movs	r1, #165	; 0xa5
 8003440:	4b3e      	ldr	r3, [pc, #248]	; (800353c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>)
 8003442:	4a3b      	ldr	r2, [pc, #236]	; (8003530 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8003444:	e7e8      	b.n	8003418 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    Application::getInstance()->clearAllTimerWidgets();
 8003446:	f015 faf1 	bl	8018a2c <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 800344a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8003544 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x14c>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 800344e:	3004      	adds	r0, #4
 8003450:	f015 fb11 	bl	8018a76 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8003454:	f8d9 0000 	ldr.w	r0, [r9]
 8003458:	b110      	cbz	r0, 8003460 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 800345a:	6803      	ldr	r3, [r0, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	4798      	blx	r3
    if (*currentTrans)
 8003460:	f8d9 0000 	ldr.w	r0, [r9]
 8003464:	b110      	cbz	r0, 800346c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 8003466:	6803      	ldr	r3, [r0, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4798      	blx	r3
    if (*currentScreen)
 800346c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8003548 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x150>
 8003470:	f8d8 0000 	ldr.w	r0, [r8]
 8003474:	b110      	cbz	r0, 800347c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 8003476:	6803      	ldr	r3, [r0, #0]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	4798      	blx	r3
    if (*currentPresenter)
 800347c:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8003480:	b110      	cbz	r0, 8003488 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 8003482:	6803      	ldr	r3, [r0, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	4798      	blx	r3
    if (*currentScreen)
 8003488:	f8d8 0000 	ldr.w	r0, [r8]
 800348c:	b110      	cbz	r0, 8003494 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 800348e:	6803      	ldr	r3, [r0, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4798      	blx	r3
    if (*currentPresenter)
 8003494:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8003498:	b110      	cbz	r0, 80034a0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 800349a:	6803      	ldr	r3, [r0, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80034a0:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 80034a2:	2100      	movs	r1, #0
 80034a4:	6803      	ldr	r3, [r0, #0]
        : screenContainer(0), done(false)
 80034a6:	f04f 0b00 	mov.w	fp, #0
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	4798      	blx	r3
 80034ae:	4b24      	ldr	r3, [pc, #144]	; (8003540 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>)
 80034b0:	4604      	mov	r4, r0
 80034b2:	6003      	str	r3, [r0, #0]
 80034b4:	f8c0 b004 	str.w	fp, [r0, #4]
 80034b8:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80034bc:	68a8      	ldr	r0, [r5, #8]
 80034be:	4659      	mov	r1, fp
 80034c0:	6803      	ldr	r3, [r0, #0]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	4798      	blx	r3
 80034c6:	4606      	mov	r6, r0
 80034c8:	f000 fbd8 	bl	8003c7c <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80034cc:	6868      	ldr	r0, [r5, #4]
 80034ce:	4659      	mov	r1, fp
 80034d0:	6803      	ldr	r3, [r0, #0]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	4798      	blx	r3
 80034d6:	4605      	mov	r5, r0
 80034d8:	4631      	mov	r1, r6
 80034da:	f000 fad9 	bl	8003a90 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 80034de:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 80034e2:	f8c7 513c 	str.w	r5, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 80034e6:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 80034ea:	b1e5      	cbz	r5, 8003526 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12e>
 80034ec:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 80034ee:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 80034f2:	6833      	ldr	r3, [r6, #0]
 80034f4:	4630      	mov	r0, r6
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 80034f6:	f8c5 a008 	str.w	sl, [r5, #8]
 80034fa:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 80034fc:	63f5      	str	r5, [r6, #60]	; 0x3c
 80034fe:	4798      	blx	r3
    newPresenter->activate();
 8003500:	682b      	ldr	r3, [r5, #0]
 8003502:	4628      	mov	r0, r5
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003508:	4621      	mov	r1, r4
 800350a:	4630      	mov	r0, r6
 800350c:	f016 ff26 	bl	801a35c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003510:	6823      	ldr	r3, [r4, #0]
 8003512:	4620      	mov	r0, r4
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	4798      	blx	r3
    newTransition->invalidate();
 8003518:	4620      	mov	r0, r4
 800351a:	6823      	ldr	r3, [r4, #0]
 800351c:	695b      	ldr	r3, [r3, #20]
}
 800351e:	b001      	add	sp, #4
 8003520:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003524:	4718      	bx	r3
    model->bind(newPresenter);
 8003526:	462b      	mov	r3, r5
 8003528:	e7e1      	b.n	80034ee <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xf6>
 800352a:	bf00      	nop
 800352c:	0802b0a8 	.word	0x0802b0a8
 8003530:	0802b136 	.word	0x0802b136
 8003534:	0802b23a 	.word	0x0802b23a
 8003538:	0802b281 	.word	0x0802b281
 800353c:	0802b324 	.word	0x0802b324
 8003540:	0802b434 	.word	0x0802b434
 8003544:	20197a28 	.word	0x20197a28
 8003548:	20197a24 	.word	0x20197a24

0800354c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800354c:	b570      	push	{r4, r5, r6, lr}
 800354e:	4604      	mov	r4, r0
 8003550:	460d      	mov	r5, r1
 8003552:	4616      	mov	r6, r2
          pendingScreenTransitionCallback(0)
 8003554:	f015 fb2c 	bl	8018bb0 <_ZN8touchgfx11ApplicationC1Ev>
 8003558:	2100      	movs	r1, #0
        instance = this;
 800355a:	4b0a      	ldr	r3, [pc, #40]	; (8003584 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x38>)
        : pobject(0), pmemfun(0)
 800355c:	e9c4 1153 	strd	r1, r1, [r4, #332]	; 0x14c
 8003560:	601c      	str	r4, [r3, #0]
      model(m)
 8003562:	4b09      	ldr	r3, [pc, #36]	; (8003588 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x3c>)
          pendingScreenTransitionCallback(0)
 8003564:	e9c4 114f 	strd	r1, r1, [r4, #316]	; 0x13c
 8003568:	6023      	str	r3, [r4, #0]
 800356a:	4b08      	ldr	r3, [pc, #32]	; (800358c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x40>)
 800356c:	e9c4 6555 	strd	r6, r5, [r4, #340]	; 0x154
 8003570:	e9c4 3151 	strd	r3, r1, [r4, #324]	; 0x144
        return instance;
 8003574:	4b06      	ldr	r3, [pc, #24]	; (8003590 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x44>)
 8003576:	6818      	ldr	r0, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003578:	6803      	ldr	r3, [r0, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	4798      	blx	r3
}
 800357e:	4620      	mov	r0, r4
 8003580:	bd70      	pop	{r4, r5, r6, pc}
 8003582:	bf00      	nop
 8003584:	20197a34 	.word	0x20197a34
 8003588:	0802b3e8 	.word	0x0802b3e8
 800358c:	0802b3d0 	.word	0x0802b3d0
 8003590:	201979e8 	.word	0x201979e8

08003594 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003594:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 8003596:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 800359a:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 800359e:	2300      	movs	r3, #0
 80035a0:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 80035a4:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 80035a8:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	080033f9 	.word	0x080033f9

080035b4 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 80035b4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80035b6:	4770      	bx	lr

080035b8 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 80035b8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80035ba:	4770      	bx	lr

080035bc <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 80035bc:	4770      	bx	lr

080035be <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80035be:	888b      	ldrh	r3, [r1, #4]
 80035c0:	69c0      	ldr	r0, [r0, #28]
 80035c2:	0adb      	lsrs	r3, r3, #11
 80035c4:	680a      	ldr	r2, [r1, #0]
 80035c6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 80035ca:	4410      	add	r0, r2
 80035cc:	4770      	bx	lr

080035ce <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80035ce:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 80035d0:	b1c2      	cbz	r2, 8003604 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 80035d2:	7b13      	ldrb	r3, [r2, #12]
 80035d4:	b1b3      	cbz	r3, 8003604 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80035d6:	7b54      	ldrb	r4, [r2, #13]
 80035d8:	7ad2      	ldrb	r2, [r2, #11]
 80035da:	0224      	lsls	r4, r4, #8
 80035dc:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80035e0:	4314      	orrs	r4, r2
 80035e2:	6a02      	ldr	r2, [r0, #32]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80035e4:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80035e6:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 80035ea:	8813      	ldrh	r3, [r2, #0]
 80035ec:	428b      	cmp	r3, r1
 80035ee:	d102      	bne.n	80035f6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 80035f0:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 80035f4:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 80035f6:	d805      	bhi.n	8003604 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80035f8:	3801      	subs	r0, #1
 80035fa:	b280      	uxth	r0, r0
 80035fc:	3204      	adds	r2, #4
 80035fe:	2800      	cmp	r0, #0
 8003600:	d1f3      	bne.n	80035ea <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8003602:	e7f7      	b.n	80035f4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8003604:	2000      	movs	r0, #0
 8003606:	e7f5      	b.n	80035f4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08003608 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003608:	b510      	push	{r4, lr}
 800360a:	4604      	mov	r4, r0
 800360c:	212c      	movs	r1, #44	; 0x2c
 800360e:	f025 fd28 	bl	8029062 <_ZdlPvj>
 8003612:	4620      	mov	r0, r4
 8003614:	bd10      	pop	{r4, pc}
	...

08003618 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8003618:	b530      	push	{r4, r5, lr}
 800361a:	4604      	mov	r4, r0
 800361c:	b08b      	sub	sp, #44	; 0x2c
      arabicTable(formsTable)
 800361e:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
 8003622:	9508      	str	r5, [sp, #32]
 8003624:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 8003628:	9507      	str	r5, [sp, #28]
 800362a:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800362e:	9506      	str	r5, [sp, #24]
 8003630:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 8003634:	9505      	str	r5, [sp, #20]
 8003636:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800363a:	9504      	str	r5, [sp, #16]
 800363c:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8003640:	9503      	str	r5, [sp, #12]
 8003642:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8003646:	9502      	str	r5, [sp, #8]
 8003648:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 800364c:	9501      	str	r5, [sp, #4]
 800364e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8003652:	9500      	str	r5, [sp, #0]
 8003654:	f016 fadc 	bl	8019c10 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
}
 8003658:	4620      	mov	r0, r4
      arabicTable(formsTable)
 800365a:	4b06      	ldr	r3, [pc, #24]	; (8003674 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
 800365c:	6023      	str	r3, [r4, #0]
 800365e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003660:	61e3      	str	r3, [r4, #28]
 8003662:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003664:	6223      	str	r3, [r4, #32]
 8003666:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003668:	6263      	str	r3, [r4, #36]	; 0x24
 800366a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800366c:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800366e:	b00b      	add	sp, #44	; 0x2c
 8003670:	bd30      	pop	{r4, r5, pc}
 8003672:	bf00      	nop
 8003674:	0802b458 	.word	0x0802b458

08003678 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8003678:	2000      	movs	r0, #0
 800367a:	4770      	bx	lr

0800367c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 800367c:	8081      	strh	r1, [r0, #4]
    }
 800367e:	4770      	bx	lr

08003680 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8003680:	80c1      	strh	r1, [r0, #6]
    }
 8003682:	4770      	bx	lr

08003684 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8003684:	8101      	strh	r1, [r0, #8]
    }
 8003686:	4770      	bx	lr

08003688 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8003688:	8141      	strh	r1, [r0, #10]
    }
 800368a:	4770      	bx	lr

0800368c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 800368c:	4770      	bx	lr

0800368e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 800368e:	4770      	bx	lr

08003690 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8003690:	4770      	bx	lr

08003692 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8003692:	4770      	bx	lr

08003694 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8003694:	4770      	bx	lr

08003696 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8003696:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8003698:	88c4      	ldrh	r4, [r0, #6]
 800369a:	6803      	ldr	r3, [r0, #0]
 800369c:	1b12      	subs	r2, r2, r4
 800369e:	8884      	ldrh	r4, [r0, #4]
 80036a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a2:	1b09      	subs	r1, r1, r4
 80036a4:	b212      	sxth	r2, r2
    }
 80036a6:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 80036aa:	b209      	sxth	r1, r1
 80036ac:	4718      	bx	r3

080036ae <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80036ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036b2:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80036b4:	f04f 33ff 	mov.w	r3, #4294967295
 80036b8:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 80036ba:	6813      	ldr	r3, [r2, #0]
 80036bc:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 80036be:	6010      	str	r0, [r2, #0]
    }
 80036c0:	4770      	bx	lr

080036c2 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 80036c2:	4770      	bx	lr

080036c4 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 80036c4:	4770      	bx	lr

080036c6 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 80036c6:	4770      	bx	lr

080036c8 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 80036c8:	4770      	bx	lr

080036ca <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 80036ca:	4770      	bx	lr

080036cc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 80036cc:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80036d0:	b11a      	cbz	r2, 80036da <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 80036d2:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 80036d6:	b102      	cbz	r2, 80036da <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 80036d8:	6018      	str	r0, [r3, #0]
        }
    }
 80036da:	4770      	bx	lr

080036dc <_ZN15Screen1ViewBase9tick_funcEv>:
     * Virtual Action Handlers
     */
    virtual void tick_func()
    {
        // Override and implement this function in Screen1
    }
 80036dc:	4770      	bx	lr

080036de <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 80036de:	4770      	bx	lr

080036e0 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 80036e0:	4770      	bx	lr

080036e2 <_ZN15Screen1ViewBase15handleTickEventEv>:
void Screen1ViewBase::handleTickEvent()
{
    //tick_func
    //When every N tick call virtual function
    //Call tick_func
    tick_func();
 80036e2:	6803      	ldr	r3, [r0, #0]
 80036e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e6:	4718      	bx	r3

080036e8 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 80036e8:	b510      	push	{r4, lr}
 80036ea:	4604      	mov	r4, r0
}
 80036ec:	216c      	movs	r1, #108	; 0x6c
 80036ee:	f025 fcb8 	bl	8029062 <_ZdlPvj>
 80036f2:	4620      	mov	r0, r4
 80036f4:	bd10      	pop	{r4, pc}

080036f6 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80036f6:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80036fa:	b112      	cbz	r2, 8003702 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80036fc:	6803      	ldr	r3, [r0, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	4718      	bx	r3
    }
 8003702:	4770      	bx	lr

08003704 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
 8003704:	b538      	push	{r3, r4, r5, lr}
 8003706:	4604      	mov	r4, r0
        : presenter(0)
 8003708:	f016 fc7c 	bl	801a004 <_ZN8touchgfx6ScreenC1Ev>
 800370c:	4625      	mov	r5, r4
 800370e:	2300      	movs	r3, #0
 8003710:	4a14      	ldr	r2, [pc, #80]	; (8003764 <_ZN15Screen1ViewBaseC1Ev+0x60>)
 8003712:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003714:	f845 2b40 	str.w	r2, [r5], #64
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8003718:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
 800371c:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
          visible(true)
 8003720:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 8003724:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
        : color(col)
 8003728:	66a3      	str	r3, [r4, #104]	; 0x68
 800372a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800372e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8003732:	23ff      	movs	r3, #255	; 0xff
 8003734:	4a0c      	ldr	r2, [pc, #48]	; (8003768 <_ZN15Screen1ViewBaseC1Ev+0x64>)
 8003736:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
 800373a:	6422      	str	r2, [r4, #64]	; 0x40
        setWidth(width);
 800373c:	4628      	mov	r0, r5
 800373e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003742:	f7ff ff9f 	bl	8003684 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 8003746:	4628      	mov	r0, r5
 8003748:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800374c:	f7ff ff9c 	bl	8003688 <_ZN8touchgfx8Drawable9setHeightEs>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8003750:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003754:	1d20      	adds	r0, r4, #4
 8003756:	4629      	mov	r1, r5
 8003758:	66a3      	str	r3, [r4, #104]	; 0x68
 800375a:	f012 ff5f 	bl	801661c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800375e:	4620      	mov	r0, r4
 8003760:	bd38      	pop	{r3, r4, r5, pc}
 8003762:	bf00      	nop
 8003764:	0802b4b8 	.word	0x0802b4b8
 8003768:	0802b9f4 	.word	0x0802b9f4

0800376c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800376c:	4770      	bx	lr
	...

08003770 <_Z23getFont_verdana_10_4bppv>:
{
 8003770:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003772:	4d15      	ldr	r5, [pc, #84]	; (80037c8 <_Z23getFont_verdana_10_4bppv+0x58>)
{
 8003774:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003776:	e8d5 4f8f 	ldab	r4, [r5]
 800377a:	f014 0401 	ands.w	r4, r4, #1
 800377e:	d120      	bne.n	80037c2 <_Z23getFont_verdana_10_4bppv+0x52>
 8003780:	4628      	mov	r0, r5
 8003782:	f025 fc70 	bl	8029066 <__cxa_guard_acquire>
 8003786:	b1e0      	cbz	r0, 80037c2 <_Z23getFont_verdana_10_4bppv+0x52>
 8003788:	233f      	movs	r3, #63	; 0x3f
 800378a:	9309      	str	r3, [sp, #36]	; 0x24
 800378c:	4b0f      	ldr	r3, [pc, #60]	; (80037cc <_Z23getFont_verdana_10_4bppv+0x5c>)
 800378e:	2201      	movs	r2, #1
 8003790:	9308      	str	r3, [sp, #32]
 8003792:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <_Z23getFont_verdana_10_4bppv+0x60>)
 8003794:	490f      	ldr	r1, [pc, #60]	; (80037d4 <_Z23getFont_verdana_10_4bppv+0x64>)
 8003796:	e9cd 4306 	strd	r4, r3, [sp, #24]
 800379a:	2304      	movs	r3, #4
 800379c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80037a0:	230a      	movs	r3, #10
 80037a2:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80037ac:	480a      	ldr	r0, [pc, #40]	; (80037d8 <_Z23getFont_verdana_10_4bppv+0x68>)
 80037ae:	940a      	str	r4, [sp, #40]	; 0x28
 80037b0:	9405      	str	r4, [sp, #20]
 80037b2:	f7ff ff31 	bl	8003618 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80037b6:	4809      	ldr	r0, [pc, #36]	; (80037dc <_Z23getFont_verdana_10_4bppv+0x6c>)
 80037b8:	f025 fc9e 	bl	80290f8 <atexit>
 80037bc:	4628      	mov	r0, r5
 80037be:	f025 fc5e 	bl	802907e <__cxa_guard_release>
    return verdana_10_4bpp;
}
 80037c2:	4805      	ldr	r0, [pc, #20]	; (80037d8 <_Z23getFont_verdana_10_4bppv+0x68>)
 80037c4:	b00f      	add	sp, #60	; 0x3c
 80037c6:	bd30      	pop	{r4, r5, pc}
 80037c8:	2019653c 	.word	0x2019653c
 80037cc:	0802d3e4 	.word	0x0802d3e4
 80037d0:	0802d3f0 	.word	0x0802d3f0
 80037d4:	90000178 	.word	0x90000178
 80037d8:	20196540 	.word	0x20196540
 80037dc:	0800376d 	.word	0x0800376d

080037e0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80037e0:	4770      	bx	lr
	...

080037e4 <_Z23getFont_verdana_20_4bppv>:
{
 80037e4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80037e6:	4d15      	ldr	r5, [pc, #84]	; (800383c <_Z23getFont_verdana_20_4bppv+0x58>)
{
 80037e8:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80037ea:	e8d5 4f8f 	ldab	r4, [r5]
 80037ee:	f014 0401 	ands.w	r4, r4, #1
 80037f2:	d120      	bne.n	8003836 <_Z23getFont_verdana_20_4bppv+0x52>
 80037f4:	4628      	mov	r0, r5
 80037f6:	f025 fc36 	bl	8029066 <__cxa_guard_acquire>
 80037fa:	b1e0      	cbz	r0, 8003836 <_Z23getFont_verdana_20_4bppv+0x52>
 80037fc:	233f      	movs	r3, #63	; 0x3f
 80037fe:	9309      	str	r3, [sp, #36]	; 0x24
 8003800:	4b0f      	ldr	r3, [pc, #60]	; (8003840 <_Z23getFont_verdana_20_4bppv+0x5c>)
 8003802:	2201      	movs	r2, #1
 8003804:	9308      	str	r3, [sp, #32]
 8003806:	4b0f      	ldr	r3, [pc, #60]	; (8003844 <_Z23getFont_verdana_20_4bppv+0x60>)
 8003808:	490f      	ldr	r1, [pc, #60]	; (8003848 <_Z23getFont_verdana_20_4bppv+0x64>)
 800380a:	e9cd 4306 	strd	r4, r3, [sp, #24]
 800380e:	2304      	movs	r3, #4
 8003810:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003814:	2314      	movs	r3, #20
 8003816:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003820:	480a      	ldr	r0, [pc, #40]	; (800384c <_Z23getFont_verdana_20_4bppv+0x68>)
 8003822:	940a      	str	r4, [sp, #40]	; 0x28
 8003824:	9405      	str	r4, [sp, #20]
 8003826:	f7ff fef7 	bl	8003618 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800382a:	4809      	ldr	r0, [pc, #36]	; (8003850 <_Z23getFont_verdana_20_4bppv+0x6c>)
 800382c:	f025 fc64 	bl	80290f8 <atexit>
 8003830:	4628      	mov	r0, r5
 8003832:	f025 fc24 	bl	802907e <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8003836:	4805      	ldr	r0, [pc, #20]	; (800384c <_Z23getFont_verdana_20_4bppv+0x68>)
 8003838:	b00f      	add	sp, #60	; 0x3c
 800383a:	bd30      	pop	{r4, r5, pc}
 800383c:	2019656c 	.word	0x2019656c
 8003840:	0802d3e8 	.word	0x0802d3e8
 8003844:	0802d3f4 	.word	0x0802d3f4
 8003848:	90000188 	.word	0x90000188
 800384c:	20196570 	.word	0x20196570
 8003850:	080037e1 	.word	0x080037e1

08003854 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003854:	4770      	bx	lr
	...

08003858 <_Z23getFont_verdana_40_4bppv>:
{
 8003858:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800385a:	4d15      	ldr	r5, [pc, #84]	; (80038b0 <_Z23getFont_verdana_40_4bppv+0x58>)
{
 800385c:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800385e:	e8d5 4f8f 	ldab	r4, [r5]
 8003862:	f014 0401 	ands.w	r4, r4, #1
 8003866:	d120      	bne.n	80038aa <_Z23getFont_verdana_40_4bppv+0x52>
 8003868:	4628      	mov	r0, r5
 800386a:	f025 fbfc 	bl	8029066 <__cxa_guard_acquire>
 800386e:	b1e0      	cbz	r0, 80038aa <_Z23getFont_verdana_40_4bppv+0x52>
 8003870:	233f      	movs	r3, #63	; 0x3f
 8003872:	9309      	str	r3, [sp, #36]	; 0x24
 8003874:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <_Z23getFont_verdana_40_4bppv+0x5c>)
 8003876:	2201      	movs	r2, #1
 8003878:	9308      	str	r3, [sp, #32]
 800387a:	4b0f      	ldr	r3, [pc, #60]	; (80038b8 <_Z23getFont_verdana_40_4bppv+0x60>)
 800387c:	490f      	ldr	r1, [pc, #60]	; (80038bc <_Z23getFont_verdana_40_4bppv+0x64>)
 800387e:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003882:	2304      	movs	r3, #4
 8003884:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003888:	2328      	movs	r3, #40	; 0x28
 800388a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003894:	480a      	ldr	r0, [pc, #40]	; (80038c0 <_Z23getFont_verdana_40_4bppv+0x68>)
 8003896:	940a      	str	r4, [sp, #40]	; 0x28
 8003898:	9405      	str	r4, [sp, #20]
 800389a:	f7ff febd 	bl	8003618 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800389e:	4809      	ldr	r0, [pc, #36]	; (80038c4 <_Z23getFont_verdana_40_4bppv+0x6c>)
 80038a0:	f025 fc2a 	bl	80290f8 <atexit>
 80038a4:	4628      	mov	r0, r5
 80038a6:	f025 fbea 	bl	802907e <__cxa_guard_release>
    return verdana_40_4bpp;
}
 80038aa:	4805      	ldr	r0, [pc, #20]	; (80038c0 <_Z23getFont_verdana_40_4bppv+0x68>)
 80038ac:	b00f      	add	sp, #60	; 0x3c
 80038ae:	bd30      	pop	{r4, r5, pc}
 80038b0:	2019659c 	.word	0x2019659c
 80038b4:	0802d3ec 	.word	0x0802d3ec
 80038b8:	0802d3f8 	.word	0x0802d3f8
 80038bc:	90000198 	.word	0x90000198
 80038c0:	201965a0 	.word	0x201965a0
 80038c4:	08003855 	.word	0x08003855

080038c8 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 80038c8:	2000      	movs	r0, #0
 80038ca:	4770      	bx	lr

080038cc <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 80038cc:	2000      	movs	r0, #0
 80038ce:	4770      	bx	lr

080038d0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80038d0:	b40e      	push	{r1, r2, r3}
 80038d2:	b503      	push	{r0, r1, lr}
 80038d4:	ab03      	add	r3, sp, #12
 80038d6:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80038da:	2100      	movs	r1, #0
    va_start(pArg, text);
 80038dc:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80038de:	f015 ffbf 	bl	8019860 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80038e2:	b002      	add	sp, #8
 80038e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80038e8:	b003      	add	sp, #12
 80038ea:	4770      	bx	lr

080038ec <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80038ec:	b40c      	push	{r2, r3}
 80038ee:	b507      	push	{r0, r1, r2, lr}
 80038f0:	ab04      	add	r3, sp, #16
 80038f2:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 80038f6:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80038f8:	f015 ffb2 	bl	8019860 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80038fc:	b003      	add	sp, #12
 80038fe:	f85d eb04 	ldr.w	lr, [sp], #4
 8003902:	b002      	add	sp, #8
 8003904:	4770      	bx	lr
	...

08003908 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8003908:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 800390a:	b510      	push	{r4, lr}
 800390c:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 800390e:	b373      	cbz	r3, 800396e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8003910:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8003912:	b92b      	cbnz	r3, 8003920 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8003914:	21c5      	movs	r1, #197	; 0xc5
 8003916:	4b18      	ldr	r3, [pc, #96]	; (8003978 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8003918:	4a18      	ldr	r2, [pc, #96]	; (800397c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800391a:	4819      	ldr	r0, [pc, #100]	; (8003980 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 800391c:	f025 fbce 	bl	80290bc <__assert_func>
            return buffer[pos];
 8003920:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8003922:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003926:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003928:	b30b      	cbz	r3, 800396e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 800392a:	f017 f9de 	bl	801acea <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 800392e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8003930:	2b01      	cmp	r3, #1
 8003932:	d803      	bhi.n	800393c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8003934:	21cb      	movs	r1, #203	; 0xcb
 8003936:	4b13      	ldr	r3, [pc, #76]	; (8003984 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8003938:	4a13      	ldr	r2, [pc, #76]	; (8003988 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 800393a:	e7ee      	b.n	800391a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 800393c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800393e:	f640 103f 	movw	r0, #2367	; 0x93f
 8003942:	1c53      	adds	r3, r2, #1
 8003944:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8003946:	4619      	mov	r1, r3
 8003948:	2b09      	cmp	r3, #9
 800394a:	bf88      	it	hi
 800394c:	f1a3 010a 	subhi.w	r1, r3, #10
 8003950:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8003954:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 8003956:	4281      	cmp	r1, r0
 8003958:	d109      	bne.n	800396e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 800395a:	2b0a      	cmp	r3, #10
 800395c:	bf28      	it	cs
 800395e:	2300      	movcs	r3, #0
 8003960:	eb04 0242 	add.w	r2, r4, r2, lsl #1
            return buffer[pos];
 8003964:	8c50      	ldrh	r0, [r2, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8003966:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800396a:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 800396c:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 800396e:	4620      	mov	r0, r4
}
 8003970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8003974:	f017 b8bc 	b.w	801aaf0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8003978:	0802b4e8 	.word	0x0802b4e8
 800397c:	0802b4f1 	.word	0x0802b4f1
 8003980:	0802b59c 	.word	0x0802b59c
 8003984:	0802b5e6 	.word	0x0802b5e6
 8003988:	0802b5f4 	.word	0x0802b5f4

0800398c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 800398c:	f017 b877 	b.w	801aa7e <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08003990 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8003990:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8003992:	bb18      	cbnz	r0, 80039dc <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8003994:	4b12      	ldr	r3, [pc, #72]	; (80039e0 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8003996:	4813      	ldr	r0, [pc, #76]	; (80039e4 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4913      	ldr	r1, [pc, #76]	; (80039e8 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 800399c:	b1b3      	cbz	r3, 80039cc <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800399e:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80039a0:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80039a2:	441a      	add	r2, r3
 80039a4:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80039a6:	685a      	ldr	r2, [r3, #4]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80039a8:	441c      	add	r4, r3
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80039aa:	441a      	add	r2, r3
 80039ac:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 80039ae:	2200      	movs	r2, #0
 80039b0:	4b0e      	ldr	r3, [pc, #56]	; (80039ec <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80039b2:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80039b4:	f000 f82a 	bl	8003a0c <_ZN17TypedTextDatabase8getFontsEv>
 80039b8:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80039ba:	f000 f825 	bl	8003a08 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 80039be:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80039c0:	601c      	str	r4, [r3, #0]
        fonts = f;
 80039c2:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 80039c4:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 80039c6:	4b0c      	ldr	r3, [pc, #48]	; (80039f8 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 80039c8:	8018      	strh	r0, [r3, #0]
    }
}
 80039ca:	e007      	b.n	80039dc <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 80039cc:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 80039ce:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80039d0:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 80039d2:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80039d4:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 80039d6:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 80039d8:	2c00      	cmp	r4, #0
 80039da:	d1e8      	bne.n	80039ae <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 80039dc:	bd38      	pop	{r3, r4, r5, pc}
 80039de:	bf00      	nop
 80039e0:	201965cc 	.word	0x201965cc
 80039e4:	201965d0 	.word	0x201965d0
 80039e8:	201965d4 	.word	0x201965d4
 80039ec:	201965d8 	.word	0x201965d8
 80039f0:	20197a38 	.word	0x20197a38
 80039f4:	20197a40 	.word	0x20197a40
 80039f8:	20197a3c 	.word	0x20197a3c
 80039fc:	900001ac 	.word	0x900001ac
 8003a00:	900001a8 	.word	0x900001a8
 8003a04:	900001b4 	.word	0x900001b4

08003a08 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return 0;
}
 8003a08:	2000      	movs	r0, #0
 8003a0a:	4770      	bx	lr

08003a0c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8003a0c:	4800      	ldr	r0, [pc, #0]	; (8003a10 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8003a0e:	4770      	bx	lr
 8003a10:	201965dc 	.word	0x201965dc

08003a14 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8003a14:	b510      	push	{r4, lr}
    &(getFont_verdana_20_4bpp()),
 8003a16:	f7ff fee5 	bl	80037e4 <_Z23getFont_verdana_20_4bppv>
};
 8003a1a:	4c04      	ldr	r4, [pc, #16]	; (8003a2c <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
 8003a1c:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8003a1e:	f7ff ff1b 	bl	8003858 <_Z23getFont_verdana_40_4bppv>
};
 8003a22:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8003a24:	f7ff fea4 	bl	8003770 <_Z23getFont_verdana_10_4bppv>
};
 8003a28:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8003a2a:	bd10      	pop	{r4, pc}
 8003a2c:	201965dc 	.word	0x201965dc

08003a30 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003a30:	4770      	bx	lr

08003a32 <_ZN19FrontendApplicationD0Ev>:
 8003a32:	b510      	push	{r4, lr}
 8003a34:	4604      	mov	r4, r0
 8003a36:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8003a3a:	f025 fb12 	bl	8029062 <_ZdlPvj>
 8003a3e:	4620      	mov	r0, r4
 8003a40:	bd10      	pop	{r4, pc}

08003a42 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8003a42:	b510      	push	{r4, lr}
 8003a44:	4604      	mov	r4, r0
    {
        model.tick();
 8003a46:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 8003a4a:	f000 f812 	bl	8003a72 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8003a4e:	4620      	mov	r0, r4
    }
 8003a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8003a54:	f015 b86c 	b.w	8018b30 <_ZN8touchgfx11Application15handleTickEventEv>

08003a58 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8003a58:	b510      	push	{r4, lr}
 8003a5a:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8003a5c:	f7ff fd76 	bl	800354c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8003a60:	4b01      	ldr	r3, [pc, #4]	; (8003a68 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8003a62:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8003a64:	6023      	str	r3, [r4, #0]
}
 8003a66:	bd10      	pop	{r4, pc}
 8003a68:	0802b6d0 	.word	0x0802b6d0

08003a6c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	6002      	str	r2, [r0, #0]
{

}
 8003a70:	4770      	bx	lr

08003a72 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8003a72:	4770      	bx	lr

08003a74 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8003a74:	4770      	bx	lr

08003a76 <_ZThn4_N16Screen1PresenterD1Ev>:
 8003a76:	3804      	subs	r0, #4
 8003a78:	4770      	bx	lr

08003a7a <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8003a7a:	4770      	bx	lr

08003a7c <_ZN16Screen1PresenterD0Ev>:
 8003a7c:	b510      	push	{r4, lr}
 8003a7e:	4604      	mov	r4, r0
 8003a80:	2110      	movs	r1, #16
 8003a82:	f025 faee 	bl	8029062 <_ZdlPvj>
 8003a86:	4620      	mov	r0, r4
 8003a88:	bd10      	pop	{r4, pc}

08003a8a <_ZThn4_N16Screen1PresenterD0Ev>:
 8003a8a:	f1a0 0004 	sub.w	r0, r0, #4
 8003a8e:	e7f5      	b.n	8003a7c <_ZN16Screen1PresenterD0Ev>

08003a90 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8003a90:	2200      	movs	r2, #0
Screen1Presenter::Screen1Presenter(Screen1View& v)
 8003a92:	b510      	push	{r4, lr}
 8003a94:	6082      	str	r2, [r0, #8]
    : view(v)
 8003a96:	4a04      	ldr	r2, [pc, #16]	; (8003aa8 <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
 8003a98:	60c1      	str	r1, [r0, #12]
 8003a9a:	f102 0408 	add.w	r4, r2, #8
 8003a9e:	3220      	adds	r2, #32
 8003aa0:	6004      	str	r4, [r0, #0]
 8003aa2:	6042      	str	r2, [r0, #4]
}
 8003aa4:	bd10      	pop	{r4, pc}
 8003aa6:	bf00      	nop
 8003aa8:	0802b714 	.word	0x0802b714

08003aac <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8003aac:	4770      	bx	lr
	...

08003ab0 <_ZN11Screen1View9tick_funcEv>:

void Screen1View::tick_func(){
 8003ab0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ab4:	4f55      	ldr	r7, [pc, #340]	; (8003c0c <_ZN11Screen1View9tick_funcEv+0x15c>)
 8003ab6:	4606      	mov	r6, r0
 8003ab8:	46b8      	mov	r8, r7
 8003aba:	2408      	movs	r4, #8
			if( grid[c][r] > 0 ){
				if( rand()%20 != 0 ){
					grid[c][r]--;
				}
			}else{
				grid[c][r] = 160;
 8003abc:	f04f 0ba0 	mov.w	fp, #160	; 0xa0
				if( rand()%20 != 0 ){
 8003ac0:	f04f 0a14 	mov.w	sl, #20
void Screen1View::tick_func(){
 8003ac4:	4645      	mov	r5, r8
 8003ac6:	f04f 0900 	mov.w	r9, #0
			if( grid[c][r] > 0 ){
 8003aca:	682b      	ldr	r3, [r5, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	dd68      	ble.n	8003ba2 <_ZN11Screen1View9tick_funcEv+0xf2>
				if( rand()%20 != 0 ){
 8003ad0:	f025 ffd8 	bl	8029a84 <rand>
 8003ad4:	fb90 f3fa 	sdiv	r3, r0, sl
 8003ad8:	fb03 001a 	mls	r0, r3, sl, r0
 8003adc:	b110      	cbz	r0, 8003ae4 <_ZN11Screen1View9tick_funcEv+0x34>
					grid[c][r]--;
 8003ade:	682b      	ldr	r3, [r5, #0]
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	602b      	str	r3, [r5, #0]
		for(uint8_t c = 0; c < COLS; c ++ ){
 8003ae4:	f109 0908 	add.w	r9, r9, #8
 8003ae8:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 8003aec:	f105 0520 	add.w	r5, r5, #32
 8003af0:	d1eb      	bne.n	8003aca <_ZN11Screen1View9tick_funcEv+0x1a>
	for(uint8_t r = 0; r < ROWS; r ++ ){
 8003af2:	3c01      	subs	r4, #1
 8003af4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8003af8:	f108 0804 	add.w	r8, r8, #4
 8003afc:	d1e2      	bne.n	8003ac4 <_ZN11Screen1View9tick_funcEv+0x14>
        {
            red = green = blue = value;
            return;
        }

        const uint8_t region = (hue * 6) >> 8;
 8003afe:	f04f 0806 	mov.w	r8, #6
			}
		}
	}

	//Draw cells
	uint16_t index = 0;
 8003b02:	2500      	movs	r5, #0
        const int next_region_start = ((((region + 1) << 8) + 5) / 6); // Can go up to 256, uint8_t not enough
        const uint8_t region_size = next_region_start - (((region << 8) + 5) / 6);
 8003b04:	f06f 0905 	mvn.w	r9, #5
	for(uint8_t r = 0; r < ROWS; r ++ ){
		for(uint8_t c = 0; c < COLS; c ++ ){
			//box[index].setColor(touchgfx::Color::getColorFromRGB(0, 119, 178));
			box[index].setColor(touchgfx::Color::getColorFromHSV(grid[c][r], 255, 255));
 8003b08:	016b      	lsls	r3, r5, #5
 8003b0a:	5cf9      	ldrb	r1, [r7, r3]
 8003b0c:	1960      	adds	r0, r4, r5
        const uint8_t region = (hue * 6) >> 8;
 8003b0e:	fb08 f201 	mul.w	r2, r8, r1
        const int next_region_start = ((((region + 1) << 8) + 5) / 6); // Can go up to 256, uint8_t not enough
 8003b12:	f402 63e0 	and.w	r3, r2, #1792	; 0x700
 8003b16:	f203 1305 	addw	r3, r3, #261	; 0x105
 8003b1a:	fbb3 fef8 	udiv	lr, r3, r8
        const uint8_t region_size = next_region_start - (((region << 8) + 5) / 6);
 8003b1e:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 8003b22:	3305      	adds	r3, #5
 8003b24:	fb93 f3f9 	sdiv	r3, r3, r9
        const uint8_t remainder = 255 - (next_region_start - hue) * 255 / region_size;
 8003b28:	ebae 0101 	sub.w	r1, lr, r1
        const uint8_t region_size = next_region_start - (((region << 8) + 5) / 6);
 8003b2c:	4473      	add	r3, lr
        const uint8_t remainder = 255 - (next_region_start - hue) * 255 / region_size;
 8003b2e:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	fb91 f3f3 	sdiv	r3, r1, r3
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	b2db      	uxtb	r3, r3

        const uint8_t p = LCD::div255(value * (255 - saturation));
        const uint8_t q = LCD::div255(value * (255 - LCD::div255(saturation * remainder)));
 8003b3c:	ebc3 2103 	rsb	r1, r3, r3, lsl #8
 8003b40:	b289      	uxth	r1, r1
        const uint8_t region = (hue * 6) >> 8;
 8003b42:	ea4f 2c22 	mov.w	ip, r2, asr #8
     *
     * @return The result of a division by 255.
     */
    FORCE_INLINE_FUNCTION static uint8_t div255(uint16_t num)
    {
        return (num + 1 + (num >> 8)) >> 8;
 8003b46:	1c4a      	adds	r2, r1, #1
 8003b48:	0a09      	lsrs	r1, r1, #8
 8003b4a:	fa11 f282 	uxtah	r2, r1, r2
 8003b4e:	1212      	asrs	r2, r2, #8
        const uint8_t q = LCD::div255(value * (255 - LCD::div255(saturation * remainder)));
 8003b50:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8003b54:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8003b58:	b292      	uxth	r2, r2
        const uint8_t t = LCD::div255(value * (255 - LCD::div255(saturation * (255 - remainder))));
 8003b5a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8003b5e:	1c51      	adds	r1, r2, #1
 8003b60:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 8003b64:	0a12      	lsrs	r2, r2, #8
 8003b66:	fa12 f281 	uxtah	r2, r2, r1
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8003b70:	1c5a      	adds	r2, r3, #1
 8003b72:	0a1b      	lsrs	r3, r3, #8
 8003b74:	fa13 f282 	uxtah	r2, r3, r2
 8003b78:	1212      	asrs	r2, r2, #8
 8003b7a:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8003b7e:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8003b82:	b292      	uxth	r2, r2
 8003b84:	1c53      	adds	r3, r2, #1
 8003b86:	0a12      	lsrs	r2, r2, #8
 8003b88:	fa12 f383 	uxtah	r3, r2, r3
 8003b8c:	b280      	uxth	r0, r0
 8003b8e:	f3c3 2307 	ubfx	r3, r3, #8, #8

        switch (region)
 8003b92:	f1bc 0f04 	cmp.w	ip, #4
 8003b96:	d832      	bhi.n	8003bfe <_ZN11Screen1View9tick_funcEv+0x14e>
 8003b98:	e8df f00c 	tbb	[pc, ip]
 8003b9c:	29260635 	.word	0x29260635
 8003ba0:	2e          	.byte	0x2e
 8003ba1:	00          	.byte	0x00
				grid[c][r] = 160;
 8003ba2:	f8c5 b000 	str.w	fp, [r5]
 8003ba6:	e79d      	b.n	8003ae4 <_ZN11Screen1View9tick_funcEv+0x34>
 8003ba8:	f04f 0c00 	mov.w	ip, #0
            green = value;
            blue = p;
            break;
        case 2:
            red = p;
            green = value;
 8003bac:	23ff      	movs	r3, #255	; 0xff
 8003bae:	222c      	movs	r2, #44	; 0x2c
 8003bb0:	4350      	muls	r0, r2
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8003bb2:	021b      	lsls	r3, r3, #8
 8003bb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003bb8:	ea43 030c 	orr.w	r3, r3, ip
 8003bbc:	1832      	adds	r2, r6, r0
 8003bbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bc2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
			box[index].invalidate();
 8003bc6:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8003bca:	3098      	adds	r0, #152	; 0x98
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	4430      	add	r0, r6
		for(uint8_t c = 0; c < COLS; c ++ ){
 8003bd0:	3501      	adds	r5, #1
			box[index].invalidate();
 8003bd2:	4798      	blx	r3
		for(uint8_t c = 0; c < COLS; c ++ ){
 8003bd4:	2d08      	cmp	r5, #8
 8003bd6:	d197      	bne.n	8003b08 <_ZN11Screen1View9tick_funcEv+0x58>
			index++;
 8003bd8:	3408      	adds	r4, #8
 8003bda:	b2a4      	uxth	r4, r4
	for(uint8_t r = 0; r < ROWS; r ++ ){
 8003bdc:	2c40      	cmp	r4, #64	; 0x40
 8003bde:	f107 0704 	add.w	r7, r7, #4
 8003be2:	d18e      	bne.n	8003b02 <_ZN11Screen1View9tick_funcEv+0x52>
		}
	}
}
 8003be4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            blue = t;
 8003be8:	469c      	mov	ip, r3
            red = p;
 8003bea:	2100      	movs	r1, #0
 8003bec:	e7de      	b.n	8003bac <_ZN11Screen1View9tick_funcEv+0xfc>
            break;
        case 3:
            red = p;
            green = q;
 8003bee:	460b      	mov	r3, r1
            red = p;
 8003bf0:	2100      	movs	r1, #0
            blue = value;
            break;
        case 4:
            red = t;
            green = p;
            blue = value;
 8003bf2:	f04f 0cff 	mov.w	ip, #255	; 0xff
            break;
 8003bf6:	e7da      	b.n	8003bae <_ZN11Screen1View9tick_funcEv+0xfe>
            red = t;
 8003bf8:	4619      	mov	r1, r3
            green = p;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e7f9      	b.n	8003bf2 <_ZN11Screen1View9tick_funcEv+0x142>
        default:
            red = value;
            green = p;
            blue = q;
 8003bfe:	468c      	mov	ip, r1
            green = p;
 8003c00:	2300      	movs	r3, #0
            red = value;
 8003c02:	21ff      	movs	r1, #255	; 0xff
 8003c04:	e7d3      	b.n	8003bae <_ZN11Screen1View9tick_funcEv+0xfe>
            blue = p;
 8003c06:	f04f 0c00 	mov.w	ip, #0
 8003c0a:	e7fa      	b.n	8003c02 <_ZN11Screen1View9tick_funcEv+0x152>
 8003c0c:	201965e8 	.word	0x201965e8

08003c10 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8003c10:	b538      	push	{r3, r4, r5, lr}
 8003c12:	4604      	mov	r4, r0
 8003c14:	f246 356c 	movw	r5, #25452	; 0x636c
 8003c18:	4b06      	ldr	r3, [pc, #24]	; (8003c34 <_ZN11Screen1ViewD1Ev+0x24>)
 8003c1a:	6003      	str	r3, [r0, #0]
 8003c1c:	5963      	ldr	r3, [r4, r5]
 8003c1e:	1960      	adds	r0, r4, r5
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3d2c      	subs	r5, #44	; 0x2c
 8003c24:	4798      	blx	r3
 8003c26:	2d6c      	cmp	r5, #108	; 0x6c
 8003c28:	d1f8      	bne.n	8003c1c <_ZN11Screen1ViewD1Ev+0xc>
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	f7ff fd57 	bl	80036de <_ZN15Screen1ViewBaseD1Ev>
 8003c30:	4620      	mov	r0, r4
 8003c32:	bd38      	pop	{r3, r4, r5, pc}
 8003c34:	0802b744 	.word	0x0802b744

08003c38 <_ZN11Screen1ViewD0Ev>:
 8003c38:	b510      	push	{r4, lr}
 8003c3a:	4604      	mov	r4, r0
 8003c3c:	f7ff ffe8 	bl	8003c10 <_ZN11Screen1ViewD1Ev>
 8003c40:	4620      	mov	r0, r4
 8003c42:	f246 3198 	movw	r1, #25496	; 0x6398
 8003c46:	f025 fa0c 	bl	8029062 <_ZdlPvj>
 8003c4a:	4620      	mov	r0, r4
 8003c4c:	bd10      	pop	{r4, pc}
	...

08003c50 <_ZN8touchgfx3BoxC1Ev>:
          visible(true)
 8003c50:	f44f 7180 	mov.w	r1, #256	; 0x100
        : Widget(), alpha(255), color(0)
 8003c54:	4a08      	ldr	r2, [pc, #32]	; (8003c78 <_ZN8touchgfx3BoxC1Ev+0x28>)
 8003c56:	8481      	strh	r1, [r0, #36]	; 0x24
 8003c58:	6002      	str	r2, [r0, #0]
 8003c5a:	21ff      	movs	r1, #255	; 0xff
        : x(0), y(0), width(0), height(0)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 8003c62:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8003c66:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8003c6a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8003c6e:	e9c0 2207 	strd	r2, r2, [r0, #28]
        : color(col)
 8003c72:	6282      	str	r2, [r0, #40]	; 0x28
    }
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	0802b9f4 	.word	0x0802b9f4

08003c7c <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8003c7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c80:	4606      	mov	r6, r0
 8003c82:	f7ff fd3f 	bl	8003704 <_ZN15Screen1ViewBaseC1Ev>
 8003c86:	4630      	mov	r0, r6
 8003c88:	4b34      	ldr	r3, [pc, #208]	; (8003d5c <_ZN11Screen1ViewC1Ev+0xe0>)
 8003c8a:	f506 45c7 	add.w	r5, r6, #25472	; 0x6380
 8003c8e:	f840 3b6c 	str.w	r3, [r0], #108
 8003c92:	f7ff ffdd 	bl	8003c50 <_ZN8touchgfx3BoxC1Ev>
 8003c96:	f106 0498 	add.w	r4, r6, #152	; 0x98
 8003c9a:	3518      	adds	r5, #24
 8003c9c:	4620      	mov	r0, r4
 8003c9e:	342c      	adds	r4, #44	; 0x2c
 8003ca0:	f7ff ffd6 	bl	8003c50 <_ZN8touchgfx3BoxC1Ev>
 8003ca4:	42ac      	cmp	r4, r5
 8003ca6:	d1f9      	bne.n	8003c9c <_ZN11Screen1ViewC1Ev+0x20>
 8003ca8:	2408      	movs	r4, #8
			grid[c][r] = 140+rand()%20;
 8003caa:	f04f 0814 	mov.w	r8, #20
 8003cae:	4f2c      	ldr	r7, [pc, #176]	; (8003d60 <_ZN11Screen1ViewC1Ev+0xe4>)
Screen1View::Screen1View()
 8003cb0:	2500      	movs	r5, #0
			grid[c][r] = 140+rand()%20;
 8003cb2:	f025 fee7 	bl	8029a84 <rand>
 8003cb6:	fb90 f3f8 	sdiv	r3, r0, r8
 8003cba:	fb03 0018 	mls	r0, r3, r8, r0
 8003cbe:	308c      	adds	r0, #140	; 0x8c
 8003cc0:	f847 0025 	str.w	r0, [r7, r5, lsl #2]
		for(uint8_t c = 0; c < COLS; c ++ ){
 8003cc4:	3508      	adds	r5, #8
 8003cc6:	2d40      	cmp	r5, #64	; 0x40
 8003cc8:	d1f3      	bne.n	8003cb2 <_ZN11Screen1ViewC1Ev+0x36>
	for(uint8_t r = 0; r < ROWS; r ++ ){
 8003cca:	3c01      	subs	r4, #1
 8003ccc:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8003cd0:	f107 0704 	add.w	r7, r7, #4
 8003cd4:	d1ec      	bne.n	8003cb0 <_ZN11Screen1ViewC1Ev+0x34>
			box[index].setPosition(80+c*40, 80+r*40, 39, 39);
 8003cd6:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
	uint16_t index = 0;
 8003cda:	46a0      	mov	r8, r4
 8003cdc:	f04f 0b50 	mov.w	fp, #80	; 0x50
 8003ce0:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8003ce4:	3150      	adds	r1, #80	; 0x50
 8003ce6:	fa0f f981 	sxth.w	r9, r1
			box[index].setPosition(80+c*40, 80+r*40, 39, 39);
 8003cea:	fb0a f508 	mul.w	r5, sl, r8
 8003cee:	f105 0798 	add.w	r7, r5, #152	; 0x98
        setX(x);
 8003cf2:	4435      	add	r5, r6
 8003cf4:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 8003cf8:	4437      	add	r7, r6
 8003cfa:	fa0f f18b 	sxth.w	r1, fp
 8003cfe:	4638      	mov	r0, r7
 8003d00:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d02:	4790      	blx	r2
        setY(y);
 8003d04:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 8003d08:	4649      	mov	r1, r9
 8003d0a:	4638      	mov	r0, r7
 8003d0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d0e:	4790      	blx	r2
        setWidth(width);
 8003d10:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 8003d14:	2127      	movs	r1, #39	; 0x27
 8003d16:	4638      	mov	r0, r7
 8003d18:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d1a:	4790      	blx	r2
        setHeight(height);
 8003d1c:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 8003d20:	2127      	movs	r1, #39	; 0x27
 8003d22:	4638      	mov	r0, r7
 8003d24:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d26:	4790      	blx	r2
        color = newColor;
 8003d28:	4b0e      	ldr	r3, [pc, #56]	; (8003d64 <_ZN11Screen1ViewC1Ev+0xe8>)
		for(uint8_t c = 0; c < COLS; c ++ ){
 8003d2a:	f10b 0b28 	add.w	fp, fp, #40	; 0x28
 8003d2e:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 8003d32:	4639      	mov	r1, r7
 8003d34:	1d30      	adds	r0, r6, #4
 8003d36:	fa1f fb8b 	uxth.w	fp, fp
 8003d3a:	f012 fc6f 	bl	801661c <_ZN8touchgfx9Container3addERNS_8DrawableE>
			index++;
 8003d3e:	f108 0301 	add.w	r3, r8, #1
		for(uint8_t c = 0; c < COLS; c ++ ){
 8003d42:	f5bb 7fc8 	cmp.w	fp, #400	; 0x190
			index++;
 8003d46:	fa1f f883 	uxth.w	r8, r3
		for(uint8_t c = 0; c < COLS; c ++ ){
 8003d4a:	d1ce      	bne.n	8003cea <_ZN11Screen1ViewC1Ev+0x6e>
			index++;
 8003d4c:	3408      	adds	r4, #8
 8003d4e:	b2a4      	uxth	r4, r4
	for(uint8_t r = 0; r < ROWS; r ++ ){
 8003d50:	2c40      	cmp	r4, #64	; 0x40
 8003d52:	d1c2      	bne.n	8003cda <_ZN11Screen1ViewC1Ev+0x5e>
}
 8003d54:	4630      	mov	r0, r6
 8003d56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d5a:	bf00      	nop
 8003d5c:	0802b744 	.word	0x0802b744
 8003d60:	201965e8 	.word	0x201965e8
 8003d64:	ff0077b2 	.word	0xff0077b2

08003d68 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8003d68:	f7ff bcba 	b.w	80036e0 <_ZN15Screen1ViewBase11setupScreenEv>

08003d6c <APS512XX_EnableMemoryMappedMode>:
  * @param  BurstType Type of burst used for the access
  * @retval Memory status
  */
int32_t APS512XX_EnableMemoryMappedMode(XSPI_HandleTypeDef *Ctx, uint32_t ReadLatencyCode, uint32_t WriteLatencyCode,
                                        uint32_t IOMode, uint32_t BurstType)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b09a      	sub	sp, #104	; 0x68
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
 8003d78:	603b      	str	r3, [r7, #0]
  XSPI_RegularCmdTypeDef   sCommand = {0};
 8003d7a:	f107 0318 	add.w	r3, r7, #24
 8003d7e:	2250      	movs	r2, #80	; 0x50
 8003d80:	2100      	movs	r1, #0
 8003d82:	4618      	mov	r0, r3
 8003d84:	f025 fa18 	bl	80291b8 <memset>
  XSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
 8003d88:	f107 0310 	add.w	r3, r7, #16
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	605a      	str	r2, [r3, #4]

  /* Initialize the write command */
  sCommand.OperationType       = HAL_XSPI_OPTYPE_WRITE_CFG;
 8003d92:	2302      	movs	r3, #2
 8003d94:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode     = HAL_XSPI_INSTRUCTION_8_LINES;
 8003d96:	2304      	movs	r3, #4
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.InstructionWidth    = HAL_XSPI_INSTRUCTION_8_BITS;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionDTRMode  = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction         = ((BurstType == 0U) ? APS512XX_WRITE_LINEAR_BURST_CMD : APS512XX_WRITE_CMD);
 8003da2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <APS512XX_EnableMemoryMappedMode+0x40>
 8003da8:	23a0      	movs	r3, #160	; 0xa0
 8003daa:	e000      	b.n	8003dae <APS512XX_EnableMemoryMappedMode+0x42>
 8003dac:	2380      	movs	r3, #128	; 0x80
 8003dae:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode         = HAL_XSPI_ADDRESS_8_LINES;
 8003db0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003db4:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
 8003db6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003dba:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AddressDTRMode      = HAL_XSPI_ADDRESS_DTR_ENABLE;
 8003dbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode  = HAL_XSPI_ALT_BYTES_NONE;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode            = ((IOMode == 0U) ? HAL_XSPI_DATA_8_LINES : HAL_XSPI_DATA_16_LINES);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d102      	bne.n	8003dd2 <APS512XX_EnableMemoryMappedMode+0x66>
 8003dcc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003dd0:	e001      	b.n	8003dd6 <APS512XX_EnableMemoryMappedMode+0x6a>
 8003dd2:	f04f 63a0 	mov.w	r3, #83886080	; 0x5000000
 8003dd6:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DataDTRMode         = HAL_XSPI_DATA_DTR_ENABLE;
 8003dd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ddc:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles         = (WriteLatencyCode - 1U);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	3b01      	subs	r3, #1
 8003de2:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DQSMode             = HAL_XSPI_DQS_ENABLE;
 8003de4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003de8:	663b      	str	r3, [r7, #96]	; 0x60
#if defined (XSPI_CCR_SIOO)
  sCommand.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8003dea:	2300      	movs	r3, #0
 8003dec:	667b      	str	r3, [r7, #100]	; 0x64
#endif

  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003dee:	f107 0318 	add.w	r3, r7, #24
 8003df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df6:	4619      	mov	r1, r3
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f00f f8af 	bl	8012f5c <HAL_XSPI_Command>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <APS512XX_EnableMemoryMappedMode+0x9e>
  {
    return APS512XX_ERROR;
 8003e04:	f04f 33ff 	mov.w	r3, #4294967295
 8003e08:	e028      	b.n	8003e5c <APS512XX_EnableMemoryMappedMode+0xf0>
  }

  /* Initialize the read command */
  sCommand.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	61bb      	str	r3, [r7, #24]
  sCommand.Instruction   = ((BurstType == 0U) ? APS512XX_READ_LINEAR_BURST_CMD : APS512XX_READ_CMD);
 8003e0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <APS512XX_EnableMemoryMappedMode+0xac>
 8003e14:	2320      	movs	r3, #32
 8003e16:	e000      	b.n	8003e1a <APS512XX_EnableMemoryMappedMode+0xae>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	623b      	str	r3, [r7, #32]
  sCommand.DummyCycles   = (ReadLatencyCode - 1U);
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003e22:	f107 0318 	add.w	r3, r7, #24
 8003e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f00f f895 	bl	8012f5c <HAL_XSPI_Command>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d002      	beq.n	8003e3e <APS512XX_EnableMemoryMappedMode+0xd2>
  {
    return APS512XX_ERROR;
 8003e38:	f04f 33ff 	mov.w	r3, #4294967295
 8003e3c:	e00e      	b.n	8003e5c <APS512XX_EnableMemoryMappedMode+0xf0>
  }

  /* Activation of memory-mapped mode */
  sMemMappedCfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	613b      	str	r3, [r7, #16]

  if (HAL_XSPI_MemoryMapped(Ctx, &sMemMappedCfg) != HAL_OK)
 8003e42:	f107 0310 	add.w	r3, r7, #16
 8003e46:	4619      	mov	r1, r3
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f00f fb13 	bl	8013474 <HAL_XSPI_MemoryMapped>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <APS512XX_EnableMemoryMappedMode+0xee>
  {
    return APS512XX_ERROR;
 8003e54:	f04f 33ff 	mov.w	r3, #4294967295
 8003e58:	e000      	b.n	8003e5c <APS512XX_EnableMemoryMappedMode+0xf0>
  }

  return APS512XX_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3768      	adds	r7, #104	; 0x68
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <APS512XX_ReadReg>:
  * @param  Value Register value pointer
  * @param  LatencyCode Latency used for the access
  * @retval error status
  */
int32_t APS512XX_ReadReg(XSPI_HandleTypeDef *Ctx, uint32_t Address, uint8_t *Value, uint32_t LatencyCode)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b098      	sub	sp, #96	; 0x60
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
 8003e70:	603b      	str	r3, [r7, #0]
  XSPI_RegularCmdTypeDef sCommand = {0};
 8003e72:	f107 0310 	add.w	r3, r7, #16
 8003e76:	2250      	movs	r2, #80	; 0x50
 8003e78:	2100      	movs	r1, #0
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f025 f99c 	bl	80291b8 <memset>

  /* Initialize the read register command */
  sCommand.OperationType       = HAL_XSPI_OPTYPE_COMMON_CFG;
 8003e80:	2300      	movs	r3, #0
 8003e82:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode     = HAL_XSPI_INSTRUCTION_8_LINES;
 8003e84:	2304      	movs	r3, #4
 8003e86:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionWidth    = HAL_XSPI_INSTRUCTION_8_BITS;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDTRMode  = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction         = APS512XX_READ_REG_CMD;
 8003e90:	2340      	movs	r3, #64	; 0x40
 8003e92:	61bb      	str	r3, [r7, #24]
  sCommand.AddressMode         = HAL_XSPI_ADDRESS_8_LINES;
 8003e94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
 8003e9a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003e9e:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDTRMode      = HAL_XSPI_ADDRESS_DTR_ENABLE;
 8003ea0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ea4:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.Address             = Address;
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AlternateBytesMode  = HAL_XSPI_ALT_BYTES_NONE;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode            = HAL_XSPI_DATA_8_LINES;
 8003eae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003eb2:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDTRMode         = HAL_XSPI_DATA_DTR_ENABLE;
 8003eb4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003eb8:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DataLength          = 2;
 8003eba:	2302      	movs	r3, #2
 8003ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DummyCycles         = (LatencyCode - 1U);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode             = HAL_XSPI_DQS_ENABLE;
 8003ec4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003ec8:	65bb      	str	r3, [r7, #88]	; 0x58
#if defined (XSPI_CCR_SIOO)
  sCommand.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

  /* Configure the command */
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ece:	f107 0310 	add.w	r3, r7, #16
 8003ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f00f f83f 	bl	8012f5c <HAL_XSPI_Command>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <APS512XX_ReadReg+0x86>
  {
    return APS512XX_ERROR;
 8003ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee8:	e00c      	b.n	8003f04 <APS512XX_ReadReg+0xa0>
  }

  /* Reception of the data */
  if (HAL_XSPI_Receive(Ctx, (uint8_t *)Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eee:	6879      	ldr	r1, [r7, #4]
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f00f f992 	bl	801321a <HAL_XSPI_Receive>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <APS512XX_ReadReg+0x9e>
  {
    return APS512XX_ERROR;
 8003efc:	f04f 33ff 	mov.w	r3, #4294967295
 8003f00:	e000      	b.n	8003f04 <APS512XX_ReadReg+0xa0>
  }

  return APS512XX_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3760      	adds	r7, #96	; 0x60
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <APS512XX_WriteReg>:
  * @param  Address Register address
  * @param  Value Value to write to register
  * @retval error status
  */
int32_t APS512XX_WriteReg(XSPI_HandleTypeDef *Ctx, uint32_t Address, uint8_t Value)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b098      	sub	sp, #96	; 0x60
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	4613      	mov	r3, r2
 8003f18:	71fb      	strb	r3, [r7, #7]
  XSPI_RegularCmdTypeDef sCommand = {0};
 8003f1a:	f107 0310 	add.w	r3, r7, #16
 8003f1e:	2250      	movs	r2, #80	; 0x50
 8003f20:	2100      	movs	r1, #0
 8003f22:	4618      	mov	r0, r3
 8003f24:	f025 f948 	bl	80291b8 <memset>

  /* Initialize the write register command */
  sCommand.OperationType       = HAL_XSPI_OPTYPE_COMMON_CFG;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode     = HAL_XSPI_INSTRUCTION_8_LINES;
 8003f2c:	2304      	movs	r3, #4
 8003f2e:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionWidth    = HAL_XSPI_INSTRUCTION_8_BITS;
 8003f30:	2300      	movs	r3, #0
 8003f32:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDTRMode  = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8003f34:	2300      	movs	r3, #0
 8003f36:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction         = APS512XX_WRITE_REG_CMD;
 8003f38:	23c0      	movs	r3, #192	; 0xc0
 8003f3a:	61bb      	str	r3, [r7, #24]
  sCommand.AddressMode         = HAL_XSPI_ADDRESS_8_LINES;
 8003f3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
 8003f42:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003f46:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDTRMode      = HAL_XSPI_ADDRESS_DTR_ENABLE;
 8003f48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f4c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.Address             = Address;
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AlternateBytesMode  = HAL_XSPI_ALT_BYTES_NONE;
 8003f52:	2300      	movs	r3, #0
 8003f54:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode            = HAL_XSPI_DATA_8_LINES;
 8003f56:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003f5a:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDTRMode         = HAL_XSPI_DATA_DTR_ENABLE;
 8003f5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f60:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DataLength          = 2;
 8003f62:	2302      	movs	r3, #2
 8003f64:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DummyCycles         = 0;
 8003f66:	2300      	movs	r3, #0
 8003f68:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode             = HAL_XSPI_DQS_DISABLE;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	65bb      	str	r3, [r7, #88]	; 0x58
#if defined (XSPI_CCR_SIOO)
  sCommand.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

  /* Configure the command */
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003f72:	f107 0310 	add.w	r3, r7, #16
 8003f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f00e ffed 	bl	8012f5c <HAL_XSPI_Command>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <APS512XX_WriteReg+0x82>
  {
    return APS512XX_ERROR;
 8003f88:	f04f 33ff 	mov.w	r3, #4294967295
 8003f8c:	e00d      	b.n	8003faa <APS512XX_WriteReg+0x9e>
  }

  /* Transmission of the data */
  if (HAL_XSPI_Transmit(Ctx, (uint8_t *)(&Value), HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003f8e:	1dfb      	adds	r3, r7, #7
 8003f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f94:	4619      	mov	r1, r3
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f00f f8cc 	bl	8013134 <HAL_XSPI_Transmit>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <APS512XX_WriteReg+0x9c>
  {
    return APS512XX_ERROR;
 8003fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa6:	e000      	b.n	8003faa <APS512XX_WriteReg+0x9e>
  }

  return APS512XX_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3760      	adds	r7, #96	; 0x60
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <APS512XX_Reset>:
  * @brief  Reset the memory
  * @param  Ctx Component object pointer
  * @retval error status
  */
int32_t APS512XX_Reset(XSPI_HandleTypeDef *Ctx)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b096      	sub	sp, #88	; 0x58
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  XSPI_RegularCmdTypeDef sCommand = {0};
 8003fba:	f107 0308 	add.w	r3, r7, #8
 8003fbe:	2250      	movs	r2, #80	; 0x50
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f025 f8f8 	bl	80291b8 <memset>

  /* Initialize the command */
  sCommand.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60bb      	str	r3, [r7, #8]
  sCommand.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
 8003fcc:	2304      	movs	r3, #4
 8003fce:	617b      	str	r3, [r7, #20]
  sCommand.InstructionWidth   = HAL_XSPI_INSTRUCTION_8_BITS;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	61fb      	str	r3, [r7, #28]
  sCommand.Instruction        = APS512XX_RESET_CMD;
 8003fd8:	23ff      	movs	r3, #255	; 0xff
 8003fda:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
 8003fdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fe0:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressWidth       = HAL_XSPI_ADDRESS_24_BITS;
 8003fe2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_DISABLE;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Address            = 0;
 8003fec:	2300      	movs	r3, #0
 8003fee:	623b      	str	r3, [r7, #32]
  sCommand.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_XSPI_DATA_NONE;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataLength         = 0;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles        = 0;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8004000:	2300      	movs	r3, #0
 8004002:	653b      	str	r3, [r7, #80]	; 0x50
#if defined (XSPI_CCR_SIOO)
  sCommand.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8004004:	2300      	movs	r3, #0
 8004006:	657b      	str	r3, [r7, #84]	; 0x54
#endif

  /* Configure the command */
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004008:	f107 0308 	add.w	r3, r7, #8
 800400c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004010:	4619      	mov	r1, r3
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f00e ffa2 	bl	8012f5c <HAL_XSPI_Command>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d002      	beq.n	8004024 <APS512XX_Reset+0x72>
  {
    return APS512XX_ERROR;
 800401e:	f04f 33ff 	mov.w	r3, #4294967295
 8004022:	e003      	b.n	800402c <APS512XX_Reset+0x7a>
  }

  /* Need to wait tRST */
  HAL_Delay(1);
 8004024:	2001      	movs	r0, #1
 8004026:	f003 fc15 	bl	8007854 <HAL_Delay>
  return 0/*APS512XX_OK*/;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3758      	adds	r7, #88	; 0x58
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <MX25UM51245G_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval error status
  */
int32_t MX25UM51245G_GetFlashInfo(MX25UM51245G_Info_t *pInfo)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25UM51245G_FLASH_SIZE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004042:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize        = MX25UM51245G_SECTOR_64K;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800404a:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber     = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SECTOR_64K);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004052:	609a      	str	r2, [r3, #8]
  pInfo->EraseSubSectorSize     = MX25UM51245G_SUBSECTOR_4K;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800405a:	60da      	str	r2, [r3, #12]
  pInfo->EraseSubSectorNumber   = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004062:	611a      	str	r2, [r3, #16]
  pInfo->EraseSubSector1Size    = MX25UM51245G_SUBSECTOR_4K;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800406a:	615a      	str	r2, [r3, #20]
  pInfo->EraseSubSector1Number  = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004072:	619a      	str	r2, [r3, #24]
  pInfo->ProgPageSize           = MX25UM51245G_PAGE_SIZE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f44f 7280 	mov.w	r2, #256	; 0x100
 800407a:	61da      	str	r2, [r3, #28]
  pInfo->ProgPagesNumber        = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_PAGE_SIZE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004082:	621a      	str	r2, [r3, #32]

  return MX25UM51245G_OK;
 8004084:	2300      	movs	r3, #0
};
 8004086:	4618      	mov	r0, r3
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <MX25UM51245G_AutoPollingMemReady>:
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25UM51245G_AutoPollingMemReady(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                         MX25UM51245G_Transfer_t Rate)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b09c      	sub	sp, #112	; 0x70
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
 800409a:	460b      	mov	r3, r1
 800409c:	70fb      	strb	r3, [r7, #3]
 800409e:	4613      	mov	r3, r2
 80040a0:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef  s_command = {0};
 80040a2:	f107 0320 	add.w	r3, r7, #32
 80040a6:	2250      	movs	r2, #80	; 0x50
 80040a8:	2100      	movs	r1, #0
 80040aa:	4618      	mov	r0, r3
 80040ac:	f025 f884 	bl	80291b8 <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
 80040b0:	f107 030c 	add.w	r3, r7, #12
 80040b4:	2200      	movs	r2, #0
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	605a      	str	r2, [r3, #4]
 80040ba:	609a      	str	r2, [r3, #8]
 80040bc:	60da      	str	r2, [r3, #12]
 80040be:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 80040c0:	78fb      	ldrb	r3, [r7, #3]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d105      	bne.n	80040d2 <MX25UM51245G_AutoPollingMemReady+0x40>
 80040c6:	78bb      	ldrb	r3, [r7, #2]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d102      	bne.n	80040d2 <MX25UM51245G_AutoPollingMemReady+0x40>
  {
    return MX25UM51245G_ERROR;
 80040cc:	f04f 33ff 	mov.w	r3, #4294967295
 80040d0:	e08d      	b.n	80041ee <MX25UM51245G_AutoPollingMemReady+0x15c>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 80040d2:	2300      	movs	r3, #0
 80040d4:	623b      	str	r3, [r7, #32]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 80040d6:	2300      	movs	r3, #0
 80040d8:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 80040da:	78fb      	ldrb	r3, [r7, #3]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <MX25UM51245G_AutoPollingMemReady+0x52>
 80040e0:	2301      	movs	r3, #1
 80040e2:	e000      	b.n	80040e6 <MX25UM51245G_AutoPollingMemReady+0x54>
 80040e4:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 80040e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 80040e8:	78bb      	ldrb	r3, [r7, #2]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d101      	bne.n	80040f2 <MX25UM51245G_AutoPollingMemReady+0x60>
 80040ee:	2308      	movs	r3, #8
 80040f0:	e000      	b.n	80040f4 <MX25UM51245G_AutoPollingMemReady+0x62>
 80040f2:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 80040f4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 80040f6:	78fb      	ldrb	r3, [r7, #3]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <MX25UM51245G_AutoPollingMemReady+0x6e>
 80040fc:	2300      	movs	r3, #0
 80040fe:	e000      	b.n	8004102 <MX25UM51245G_AutoPollingMemReady+0x70>
 8004100:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 8004102:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_READ_STATUS_REG_CMD
                                 : MX25UM51245G_OCTA_READ_STATUS_REG_CMD;
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <MX25UM51245G_AutoPollingMemReady+0x7c>
 800410a:	2305      	movs	r3, #5
 800410c:	e001      	b.n	8004112 <MX25UM51245G_AutoPollingMemReady+0x80>
 800410e:	f240 53fa 	movw	r3, #1530	; 0x5fa
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 8004112:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
 8004114:	78fb      	ldrb	r3, [r7, #3]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <MX25UM51245G_AutoPollingMemReady+0x8c>
 800411a:	2300      	movs	r3, #0
 800411c:	e001      	b.n	8004122 <MX25UM51245G_AutoPollingMemReady+0x90>
 800411e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004122:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
 8004124:	78bb      	ldrb	r3, [r7, #2]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d102      	bne.n	8004130 <MX25UM51245G_AutoPollingMemReady+0x9e>
 800412a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800412e:	e000      	b.n	8004132 <MX25UM51245G_AutoPollingMemReady+0xa0>
 8004130:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
 8004132:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
 8004134:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004138:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address            = 0U;
 800413a:	2300      	movs	r3, #0
 800413c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 800413e:	2300      	movs	r3, #0
 8004140:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 8004142:	78fb      	ldrb	r3, [r7, #3]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d102      	bne.n	800414e <MX25UM51245G_AutoPollingMemReady+0xbc>
 8004148:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800414c:	e001      	b.n	8004152 <MX25UM51245G_AutoPollingMemReady+0xc0>
 800414e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004152:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
 8004154:	78bb      	ldrb	r3, [r7, #2]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d102      	bne.n	8004160 <MX25UM51245G_AutoPollingMemReady+0xce>
 800415a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800415e:	e000      	b.n	8004162 <MX25UM51245G_AutoPollingMemReady+0xd0>
 8004160:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
 8004162:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? 0U
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
 8004164:	78fb      	ldrb	r3, [r7, #3]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d006      	beq.n	8004178 <MX25UM51245G_AutoPollingMemReady+0xe6>
 800416a:	78bb      	ldrb	r3, [r7, #2]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <MX25UM51245G_AutoPollingMemReady+0xe2>
 8004170:	2305      	movs	r3, #5
 8004172:	e002      	b.n	800417a <MX25UM51245G_AutoPollingMemReady+0xe8>
 8004174:	2304      	movs	r3, #4
 8004176:	e000      	b.n	800417a <MX25UM51245G_AutoPollingMemReady+0xe8>
 8004178:	2300      	movs	r3, #0
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
 800417a:	667b      	str	r3, [r7, #100]	; 0x64
                                    ? DUMMY_CYCLES_REG_OCTAL_DTR
                                    : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
 800417c:	78bb      	ldrb	r3, [r7, #2]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d101      	bne.n	8004186 <MX25UM51245G_AutoPollingMemReady+0xf4>
 8004182:	2302      	movs	r3, #2
 8004184:	e000      	b.n	8004188 <MX25UM51245G_AutoPollingMemReady+0xf6>
 8004186:	2301      	movs	r3, #1
 8004188:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
 800418a:	78bb      	ldrb	r3, [r7, #2]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d102      	bne.n	8004196 <MX25UM51245G_AutoPollingMemReady+0x104>
 8004190:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004194:	e000      	b.n	8004198 <MX25UM51245G_AutoPollingMemReady+0x106>
 8004196:	2300      	movs	r3, #0
 8004198:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 800419a:	2300      	movs	r3, #0
 800419c:	66fb      	str	r3, [r7, #108]	; 0x6c

  s_config.MatchValue    = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	60fb      	str	r3, [r7, #12]
  s_config.MatchMask     = MX25UM51245G_SR_WIP;
 80041a2:	2301      	movs	r3, #1
 80041a4:	613b      	str	r3, [r7, #16]
  s_config.MatchMode     = HAL_XSPI_MATCH_MODE_AND;
 80041a6:	2300      	movs	r3, #0
 80041a8:	617b      	str	r3, [r7, #20]
  s_config.IntervalTime  = MX25UM51245G_AUTOPOLLING_INTERVAL_TIME;
 80041aa:	2310      	movs	r3, #16
 80041ac:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
 80041ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80041b2:	61bb      	str	r3, [r7, #24]

  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80041b4:	f107 0320 	add.w	r3, r7, #32
 80041b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041bc:	4619      	mov	r1, r3
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f00e fecc 	bl	8012f5c <HAL_XSPI_Command>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d002      	beq.n	80041d0 <MX25UM51245G_AutoPollingMemReady+0x13e>
  {
    return MX25UM51245G_ERROR;
 80041ca:	f04f 33ff 	mov.w	r3, #4294967295
 80041ce:	e00e      	b.n	80041ee <MX25UM51245G_AutoPollingMemReady+0x15c>
  }

  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80041d0:	f107 030c 	add.w	r3, r7, #12
 80041d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d8:	4619      	mov	r1, r3
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f00f f8c0 	bl	8013360 <HAL_XSPI_AutoPolling>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d002      	beq.n	80041ec <MX25UM51245G_AutoPollingMemReady+0x15a>
  {
    return MX25UM51245G_ERROR;
 80041e6:	f04f 33ff 	mov.w	r3, #4294967295
 80041ea:	e000      	b.n	80041ee <MX25UM51245G_AutoPollingMemReady+0x15c>
  }

  return MX25UM51245G_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3770      	adds	r7, #112	; 0x70
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <MX25UM51245G_EnableSTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @retval Memory status
  */
int32_t MX25UM51245G_EnableSTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                               MX25UM51245G_AddressSize_t AddressSize)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b098      	sub	sp, #96	; 0x60
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
 80041fe:	460b      	mov	r3, r1
 8004200:	70fb      	strb	r3, [r7, #3]
 8004202:	4613      	mov	r3, r2
 8004204:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef      s_command = {0};
 8004206:	f107 0310 	add.w	r3, r7, #16
 800420a:	2250      	movs	r2, #80	; 0x50
 800420c:	2100      	movs	r1, #0
 800420e:	4618      	mov	r0, r3
 8004210:	f024 ffd2 	bl	80291b8 <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8004214:	f107 0308 	add.w	r3, r7, #8
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]
 800421c:	605a      	str	r2, [r3, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25UM51245G_OPI_MODE) && (AddressSize == MX25UM51245G_3BYTES_SIZE))
 800421e:	78fb      	ldrb	r3, [r7, #3]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d105      	bne.n	8004230 <MX25UM51245G_EnableSTRMemoryMappedMode+0x3a>
 8004224:	78bb      	ldrb	r3, [r7, #2]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d102      	bne.n	8004230 <MX25UM51245G_EnableSTRMemoryMappedMode+0x3a>
  {
    return MX25UM51245G_ERROR;
 800422a:	f04f 33ff 	mov.w	r3, #4294967295
 800422e:	e088      	b.n	8004342 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
 8004230:	2301      	movs	r3, #1
 8004232:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8004234:	2300      	movs	r3, #0
 8004236:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8004238:	78fb      	ldrb	r3, [r7, #3]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <MX25UM51245G_EnableSTRMemoryMappedMode+0x4c>
 800423e:	2301      	movs	r3, #1
 8004240:	e000      	b.n	8004244 <MX25UM51245G_EnableSTRMemoryMappedMode+0x4e>
 8004242:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 8004244:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8004246:	2300      	movs	r3, #0
 8004248:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 800424a:	78fb      	ldrb	r3, [r7, #3]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <MX25UM51245G_EnableSTRMemoryMappedMode+0x5e>
 8004250:	2300      	movs	r3, #0
 8004252:	e000      	b.n	8004256 <MX25UM51245G_EnableSTRMemoryMappedMode+0x60>
 8004254:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 8004256:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? ((AddressSize == MX25UM51245G_3BYTES_SIZE)
                                    ? MX25UM51245G_FAST_READ_CMD
                                    : MX25UM51245G_4_BYTE_ADDR_FAST_READ_CMD)
                                 : MX25UM51245G_OCTA_READ_CMD;
 8004258:	78fb      	ldrb	r3, [r7, #3]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d106      	bne.n	800426c <MX25UM51245G_EnableSTRMemoryMappedMode+0x76>
 800425e:	78bb      	ldrb	r3, [r7, #2]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <MX25UM51245G_EnableSTRMemoryMappedMode+0x72>
 8004264:	230b      	movs	r3, #11
 8004266:	e003      	b.n	8004270 <MX25UM51245G_EnableSTRMemoryMappedMode+0x7a>
 8004268:	230c      	movs	r3, #12
 800426a:	e001      	b.n	8004270 <MX25UM51245G_EnableSTRMemoryMappedMode+0x7a>
 800426c:	f64e 4313 	movw	r3, #60435	; 0xec13
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 8004270:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
 8004272:	78fb      	ldrb	r3, [r7, #3]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d102      	bne.n	800427e <MX25UM51245G_EnableSTRMemoryMappedMode+0x88>
 8004278:	f44f 7380 	mov.w	r3, #256	; 0x100
 800427c:	e001      	b.n	8004282 <MX25UM51245G_EnableSTRMemoryMappedMode+0x8c>
 800427e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004282:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_DISABLE;
 8004284:	2300      	movs	r3, #0
 8004286:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressWidth       = (AddressSize == MX25UM51245G_3BYTES_SIZE)
                                 ? HAL_XSPI_ADDRESS_24_BITS
                                 : HAL_XSPI_ADDRESS_32_BITS;
 8004288:	78bb      	ldrb	r3, [r7, #2]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d102      	bne.n	8004294 <MX25UM51245G_EnableSTRMemoryMappedMode+0x9e>
 800428e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004292:	e001      	b.n	8004298 <MX25UM51245G_EnableSTRMemoryMappedMode+0xa2>
 8004294:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  s_command.AddressWidth       = (AddressSize == MX25UM51245G_3BYTES_SIZE)
 8004298:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 800429a:	2300      	movs	r3, #0
 800429c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 800429e:	78fb      	ldrb	r3, [r7, #3]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d102      	bne.n	80042aa <MX25UM51245G_EnableSTRMemoryMappedMode+0xb4>
 80042a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042a8:	e001      	b.n	80042ae <MX25UM51245G_EnableSTRMemoryMappedMode+0xb8>
 80042aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80042ae:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_DISABLE;
 80042b0:	2300      	movs	r3, #0
 80042b2:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 80042b4:	78fb      	ldrb	r3, [r7, #3]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <MX25UM51245G_EnableSTRMemoryMappedMode+0xc8>
 80042ba:	2308      	movs	r3, #8
 80042bc:	e000      	b.n	80042c0 <MX25UM51245G_EnableSTRMemoryMappedMode+0xca>
 80042be:	2306      	movs	r3, #6
 80042c0:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 80042c2:	2300      	movs	r3, #0
 80042c4:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 80042c6:	2300      	movs	r3, #0
 80042c8:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the read command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80042ca:	f107 0310 	add.w	r3, r7, #16
 80042ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d2:	4619      	mov	r1, r3
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f00e fe41 	bl	8012f5c <HAL_XSPI_Command>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d002      	beq.n	80042e6 <MX25UM51245G_EnableSTRMemoryMappedMode+0xf0>
  {
    return MX25UM51245G_ERROR;
 80042e0:	f04f 33ff 	mov.w	r3, #4294967295
 80042e4:	e02d      	b.n	8004342 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_WRITE_CFG;
 80042e6:	2302      	movs	r3, #2
 80042e8:	613b      	str	r3, [r7, #16]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? ((AddressSize == MX25UM51245G_3BYTES_SIZE)
                                    ? MX25UM51245G_PAGE_PROG_CMD
                                    : MX25UM51245G_4_BYTE_PAGE_PROG_CMD)
                                 : MX25UM51245G_OCTA_PAGE_PROG_CMD;
 80042ea:	78fb      	ldrb	r3, [r7, #3]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d106      	bne.n	80042fe <MX25UM51245G_EnableSTRMemoryMappedMode+0x108>
 80042f0:	78bb      	ldrb	r3, [r7, #2]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <MX25UM51245G_EnableSTRMemoryMappedMode+0x104>
 80042f6:	2302      	movs	r3, #2
 80042f8:	e003      	b.n	8004302 <MX25UM51245G_EnableSTRMemoryMappedMode+0x10c>
 80042fa:	2312      	movs	r3, #18
 80042fc:	e001      	b.n	8004302 <MX25UM51245G_EnableSTRMemoryMappedMode+0x10c>
 80042fe:	f241 23ed 	movw	r3, #4845	; 0x12ed
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 8004302:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles        = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the write command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004308:	f107 0310 	add.w	r3, r7, #16
 800430c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004310:	4619      	mov	r1, r3
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f00e fe22 	bl	8012f5c <HAL_XSPI_Command>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d002      	beq.n	8004324 <MX25UM51245G_EnableSTRMemoryMappedMode+0x12e>
  {
    return MX25UM51245G_ERROR;
 800431e:	f04f 33ff 	mov.w	r3, #4294967295
 8004322:	e00e      	b.n	8004342 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
 8004324:	2300      	movs	r3, #0
 8004326:	60bb      	str	r3, [r7, #8]

  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8004328:	f107 0308 	add.w	r3, r7, #8
 800432c:	4619      	mov	r1, r3
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f00f f8a0 	bl	8013474 <HAL_XSPI_MemoryMapped>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d002      	beq.n	8004340 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14a>
  {
    return MX25UM51245G_ERROR;
 800433a:	f04f 33ff 	mov.w	r3, #4294967295
 800433e:	e000      	b.n	8004342 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  return MX25UM51245G_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3760      	adds	r7, #96	; 0x60
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <MX25UM51245G_EnableDTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval Memory status
  */
int32_t MX25UM51245G_EnableDTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b098      	sub	sp, #96	; 0x60
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
 8004352:	460b      	mov	r3, r1
 8004354:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  XSPI_RegularCmdTypeDef      s_command = {0};
 8004356:	f107 0310 	add.w	r3, r7, #16
 800435a:	2250      	movs	r2, #80	; 0x50
 800435c:	2100      	movs	r1, #0
 800435e:	4618      	mov	r0, r3
 8004360:	f024 ff2a 	bl	80291b8 <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8004364:	f107 0308 	add.w	r3, r7, #8
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	605a      	str	r2, [r3, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
 800436e:	2301      	movs	r3, #1
 8004370:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8004372:	2300      	movs	r3, #0
 8004374:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
 8004376:	2304      	movs	r3, #4
 8004378:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
 800437a:	2308      	movs	r3, #8
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionWidth   = HAL_XSPI_INSTRUCTION_16_BITS;
 800437e:	2310      	movs	r3, #16
 8004380:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = MX25UM51245G_OCTA_READ_DTR_CMD;
 8004382:	f64e 6311 	movw	r3, #60945	; 0xee11
 8004386:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
 8004388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800438c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
 800438e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004392:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
 8004394:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004398:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 800439a:	2300      	movs	r3, #0
 800439c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = HAL_XSPI_DATA_8_LINES;
 800439e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80043a2:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
 80043a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043a8:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 80043aa:	2306      	movs	r3, #6
 80043ac:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_XSPI_DQS_ENABLE;
 80043ae:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80043b2:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 80043b4:	2300      	movs	r3, #0
 80043b6:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043b8:	f107 0310 	add.w	r3, r7, #16
 80043bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c0:	4619      	mov	r1, r3
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f00e fdca 	bl	8012f5c <HAL_XSPI_Command>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d002      	beq.n	80043d4 <MX25UM51245G_EnableDTRMemoryMappedMode+0x8a>
  {
    return MX25UM51245G_ERROR;
 80043ce:	f04f 33ff 	mov.w	r3, #4294967295
 80043d2:	e025      	b.n	8004420 <MX25UM51245G_EnableDTRMemoryMappedMode+0xd6>
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_XSPI_OPTYPE_WRITE_CFG;
 80043d4:	2302      	movs	r3, #2
 80043d6:	613b      	str	r3, [r7, #16]
  s_command.Instruction   = MX25UM51245G_OCTA_PAGE_PROG_CMD;
 80043d8:	f241 23ed 	movw	r3, #4845	; 0x12ed
 80043dc:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles   = 0U;
 80043de:	2300      	movs	r3, #0
 80043e0:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode       = HAL_XSPI_DQS_DISABLE;
 80043e2:	2300      	movs	r3, #0
 80043e4:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043e6:	f107 0310 	add.w	r3, r7, #16
 80043ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ee:	4619      	mov	r1, r3
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f00e fdb3 	bl	8012f5c <HAL_XSPI_Command>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d002      	beq.n	8004402 <MX25UM51245G_EnableDTRMemoryMappedMode+0xb8>
  {
    return MX25UM51245G_ERROR;
 80043fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004400:	e00e      	b.n	8004420 <MX25UM51245G_EnableDTRMemoryMappedMode+0xd6>
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
 8004402:	2300      	movs	r3, #0
 8004404:	60bb      	str	r3, [r7, #8]

  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8004406:	f107 0308 	add.w	r3, r7, #8
 800440a:	4619      	mov	r1, r3
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f00f f831 	bl	8013474 <HAL_XSPI_MemoryMapped>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d002      	beq.n	800441e <MX25UM51245G_EnableDTRMemoryMappedMode+0xd4>
  {
    return MX25UM51245G_ERROR;
 8004418:	f04f 33ff 	mov.w	r3, #4294967295
 800441c:	e000      	b.n	8004420 <MX25UM51245G_EnableDTRMemoryMappedMode+0xd6>
  }

  return MX25UM51245G_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3760      	adds	r7, #96	; 0x60
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <MX25UM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_WriteEnable(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b09c      	sub	sp, #112	; 0x70
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	460b      	mov	r3, r1
 8004432:	70fb      	strb	r3, [r7, #3]
 8004434:	4613      	mov	r3, r2
 8004436:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef     s_command = {0};
 8004438:	f107 0320 	add.w	r3, r7, #32
 800443c:	2250      	movs	r2, #80	; 0x50
 800443e:	2100      	movs	r1, #0
 8004440:	4618      	mov	r0, r3
 8004442:	f024 feb9 	bl	80291b8 <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
 8004446:	f107 030c 	add.w	r3, r7, #12
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	605a      	str	r2, [r3, #4]
 8004450:	609a      	str	r2, [r3, #8]
 8004452:	60da      	str	r2, [r3, #12]
 8004454:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 8004456:	78fb      	ldrb	r3, [r7, #3]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d105      	bne.n	8004468 <MX25UM51245G_WriteEnable+0x40>
 800445c:	78bb      	ldrb	r3, [r7, #2]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d102      	bne.n	8004468 <MX25UM51245G_WriteEnable+0x40>
  {
    return MX25UM51245G_ERROR;
 8004462:	f04f 33ff 	mov.w	r3, #4294967295
 8004466:	e0ab      	b.n	80045c0 <MX25UM51245G_WriteEnable+0x198>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8004468:	2300      	movs	r3, #0
 800446a:	623b      	str	r3, [r7, #32]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 800446c:	2300      	movs	r3, #0
 800446e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8004470:	78fb      	ldrb	r3, [r7, #3]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <MX25UM51245G_WriteEnable+0x52>
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <MX25UM51245G_WriteEnable+0x54>
 800447a:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 800447c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 800447e:	78bb      	ldrb	r3, [r7, #2]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d101      	bne.n	8004488 <MX25UM51245G_WriteEnable+0x60>
 8004484:	2308      	movs	r3, #8
 8004486:	e000      	b.n	800448a <MX25UM51245G_WriteEnable+0x62>
 8004488:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 800448a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 800448c:	78fb      	ldrb	r3, [r7, #3]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <MX25UM51245G_WriteEnable+0x6e>
 8004492:	2300      	movs	r3, #0
 8004494:	e000      	b.n	8004498 <MX25UM51245G_WriteEnable+0x70>
 8004496:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 8004498:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_WRITE_ENABLE_CMD
                                 : MX25UM51245G_OCTA_WRITE_ENABLE_CMD;
 800449a:	78fb      	ldrb	r3, [r7, #3]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <MX25UM51245G_WriteEnable+0x7c>
 80044a0:	2306      	movs	r3, #6
 80044a2:	e001      	b.n	80044a8 <MX25UM51245G_WriteEnable+0x80>
 80044a4:	f240 63f9 	movw	r3, #1785	; 0x6f9
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 80044a8:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
 80044aa:	2300      	movs	r3, #0
 80044ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 80044ae:	2300      	movs	r3, #0
 80044b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
 80044b2:	2300      	movs	r3, #0
 80044b4:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DummyCycles        = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 80044ba:	2300      	movs	r3, #0
 80044bc:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 80044be:	2300      	movs	r3, #0
 80044c0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044c2:	f107 0320 	add.w	r3, r7, #32
 80044c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ca:	4619      	mov	r1, r3
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f00e fd45 	bl	8012f5c <HAL_XSPI_Command>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <MX25UM51245G_WriteEnable+0xb6>
  {
    return MX25UM51245G_ERROR;
 80044d8:	f04f 33ff 	mov.w	r3, #4294967295
 80044dc:	e070      	b.n	80045c0 <MX25UM51245G_WriteEnable+0x198>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25UM51245G_SPI_MODE)
                             ? MX25UM51245G_READ_STATUS_REG_CMD
                             : MX25UM51245G_OCTA_READ_STATUS_REG_CMD;
 80044de:	78fb      	ldrb	r3, [r7, #3]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <MX25UM51245G_WriteEnable+0xc0>
 80044e4:	2305      	movs	r3, #5
 80044e6:	e001      	b.n	80044ec <MX25UM51245G_WriteEnable+0xc4>
 80044e8:	f240 53fa 	movw	r3, #1530	; 0x5fa
  s_command.Instruction    = (Mode == MX25UM51245G_SPI_MODE)
 80044ec:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode    = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
 80044ee:	78fb      	ldrb	r3, [r7, #3]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <MX25UM51245G_WriteEnable+0xd0>
 80044f4:	2300      	movs	r3, #0
 80044f6:	e001      	b.n	80044fc <MX25UM51245G_WriteEnable+0xd4>
 80044f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                             ? HAL_XSPI_ADDRESS_DTR_ENABLE
                             : HAL_XSPI_ADDRESS_DTR_DISABLE;
 80044fe:	78bb      	ldrb	r3, [r7, #2]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d102      	bne.n	800450a <MX25UM51245G_WriteEnable+0xe2>
 8004504:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004508:	e000      	b.n	800450c <MX25UM51245G_WriteEnable+0xe4>
 800450a:	2300      	movs	r3, #0
  s_command.AddressDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 800450c:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressWidth   = HAL_XSPI_ADDRESS_32_BITS;
 800450e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004512:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address        = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DataMode       = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 8004518:	78fb      	ldrb	r3, [r7, #3]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d102      	bne.n	8004524 <MX25UM51245G_WriteEnable+0xfc>
 800451e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004522:	e001      	b.n	8004528 <MX25UM51245G_WriteEnable+0x100>
 8004524:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004528:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDTRMode    = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DATA_DTR_ENABLE : HAL_XSPI_DATA_DTR_DISABLE;
 800452a:	78bb      	ldrb	r3, [r7, #2]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d102      	bne.n	8004536 <MX25UM51245G_WriteEnable+0x10e>
 8004530:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004534:	e000      	b.n	8004538 <MX25UM51245G_WriteEnable+0x110>
 8004536:	2300      	movs	r3, #0
 8004538:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles    = (Mode == MX25UM51245G_SPI_MODE)
                             ? 0U
                             : ((Rate == MX25UM51245G_DTR_TRANSFER)
 800453a:	78fb      	ldrb	r3, [r7, #3]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d006      	beq.n	800454e <MX25UM51245G_WriteEnable+0x126>
 8004540:	78bb      	ldrb	r3, [r7, #2]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d101      	bne.n	800454a <MX25UM51245G_WriteEnable+0x122>
 8004546:	2305      	movs	r3, #5
 8004548:	e002      	b.n	8004550 <MX25UM51245G_WriteEnable+0x128>
 800454a:	2304      	movs	r3, #4
 800454c:	e000      	b.n	8004550 <MX25UM51245G_WriteEnable+0x128>
 800454e:	2300      	movs	r3, #0
  s_command.DummyCycles    = (Mode == MX25UM51245G_SPI_MODE)
 8004550:	667b      	str	r3, [r7, #100]	; 0x64
                                ? DUMMY_CYCLES_REG_OCTAL_DTR
                                : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
 8004552:	78bb      	ldrb	r3, [r7, #2]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d101      	bne.n	800455c <MX25UM51245G_WriteEnable+0x134>
 8004558:	2302      	movs	r3, #2
 800455a:	e000      	b.n	800455e <MX25UM51245G_WriteEnable+0x136>
 800455c:	2301      	movs	r3, #1
 800455e:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode        = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
 8004560:	78bb      	ldrb	r3, [r7, #2]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d102      	bne.n	800456c <MX25UM51245G_WriteEnable+0x144>
 8004566:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800456a:	e000      	b.n	800456e <MX25UM51245G_WriteEnable+0x146>
 800456c:	2300      	movs	r3, #0
 800456e:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004570:	f107 0320 	add.w	r3, r7, #32
 8004574:	f241 3288 	movw	r2, #5000	; 0x1388
 8004578:	4619      	mov	r1, r3
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f00e fcee 	bl	8012f5c <HAL_XSPI_Command>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d002      	beq.n	800458c <MX25UM51245G_WriteEnable+0x164>
  {
    return MX25UM51245G_ERROR;
 8004586:	f04f 33ff 	mov.w	r3, #4294967295
 800458a:	e019      	b.n	80045c0 <MX25UM51245G_WriteEnable+0x198>
  }

  s_config.MatchValue      = 2U;
 800458c:	2302      	movs	r3, #2
 800458e:	60fb      	str	r3, [r7, #12]
  s_config.MatchMask       = 2U;
 8004590:	2302      	movs	r3, #2
 8004592:	613b      	str	r3, [r7, #16]
  s_config.MatchMode       = HAL_XSPI_MATCH_MODE_AND;
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]
  s_config.IntervalTime    = MX25UM51245G_AUTOPOLLING_INTERVAL_TIME;
 8004598:	2310      	movs	r3, #16
 800459a:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop   = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
 800459c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80045a0:	61bb      	str	r3, [r7, #24]

  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045a2:	f107 030c 	add.w	r3, r7, #12
 80045a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045aa:	4619      	mov	r1, r3
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f00e fed7 	bl	8013360 <HAL_XSPI_AutoPolling>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <MX25UM51245G_WriteEnable+0x196>
  {
    return MX25UM51245G_ERROR;
 80045b8:	f04f 33ff 	mov.w	r3, #4294967295
 80045bc:	e000      	b.n	80045c0 <MX25UM51245G_WriteEnable+0x198>
  }

  return MX25UM51245G_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3770      	adds	r7, #112	; 0x70
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <MX25UM51245G_WriteCfg2Register>:
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25UM51245G_WriteCfg2Register(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                       MX25UM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b098      	sub	sp, #96	; 0x60
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	607b      	str	r3, [r7, #4]
 80045d2:	460b      	mov	r3, r1
 80045d4:	72fb      	strb	r3, [r7, #11]
 80045d6:	4613      	mov	r3, r2
 80045d8:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = {0};
 80045da:	f107 0310 	add.w	r3, r7, #16
 80045de:	2250      	movs	r2, #80	; 0x50
 80045e0:	2100      	movs	r1, #0
 80045e2:	4618      	mov	r0, r3
 80045e4:	f024 fde8 	bl	80291b8 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 80045e8:	7afb      	ldrb	r3, [r7, #11]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d105      	bne.n	80045fa <MX25UM51245G_WriteCfg2Register+0x32>
 80045ee:	7abb      	ldrb	r3, [r7, #10]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d102      	bne.n	80045fa <MX25UM51245G_WriteCfg2Register+0x32>
  {
    return MX25UM51245G_ERROR;
 80045f4:	f04f 33ff 	mov.w	r3, #4294967295
 80045f8:	e077      	b.n	80046ea <MX25UM51245G_WriteCfg2Register+0x122>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 80045fa:	2300      	movs	r3, #0
 80045fc:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 80045fe:	2300      	movs	r3, #0
 8004600:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8004602:	7afb      	ldrb	r3, [r7, #11]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <MX25UM51245G_WriteCfg2Register+0x44>
 8004608:	2301      	movs	r3, #1
 800460a:	e000      	b.n	800460e <MX25UM51245G_WriteCfg2Register+0x46>
 800460c:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 800460e:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8004610:	7abb      	ldrb	r3, [r7, #10]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d101      	bne.n	800461a <MX25UM51245G_WriteCfg2Register+0x52>
 8004616:	2308      	movs	r3, #8
 8004618:	e000      	b.n	800461c <MX25UM51245G_WriteCfg2Register+0x54>
 800461a:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 800461c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 800461e:	7afb      	ldrb	r3, [r7, #11]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <MX25UM51245G_WriteCfg2Register+0x60>
 8004624:	2300      	movs	r3, #0
 8004626:	e000      	b.n	800462a <MX25UM51245G_WriteCfg2Register+0x62>
 8004628:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 800462a:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_WRITE_CFG_REG2_CMD
                                 : MX25UM51245G_OCTA_WRITE_CFG_REG2_CMD;
 800462c:	7afb      	ldrb	r3, [r7, #11]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <MX25UM51245G_WriteCfg2Register+0x6e>
 8004632:	2372      	movs	r3, #114	; 0x72
 8004634:	e001      	b.n	800463a <MX25UM51245G_WriteCfg2Register+0x72>
 8004636:	f247 238d 	movw	r3, #29325	; 0x728d
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 800463a:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
 800463c:	7afb      	ldrb	r3, [r7, #11]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d102      	bne.n	8004648 <MX25UM51245G_WriteCfg2Register+0x80>
 8004642:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004646:	e001      	b.n	800464c <MX25UM51245G_WriteCfg2Register+0x84>
 8004648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800464c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
 800464e:	7abb      	ldrb	r3, [r7, #10]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d102      	bne.n	800465a <MX25UM51245G_WriteCfg2Register+0x92>
 8004654:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004658:	e000      	b.n	800465c <MX25UM51245G_WriteCfg2Register+0x94>
 800465a:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
 800465c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
 800465e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004662:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = WriteAddr;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8004668:	2300      	movs	r3, #0
 800466a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 800466c:	7afb      	ldrb	r3, [r7, #11]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d102      	bne.n	8004678 <MX25UM51245G_WriteCfg2Register+0xb0>
 8004672:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004676:	e001      	b.n	800467c <MX25UM51245G_WriteCfg2Register+0xb4>
 8004678:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800467c:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
 800467e:	7abb      	ldrb	r3, [r7, #10]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d102      	bne.n	800468a <MX25UM51245G_WriteCfg2Register+0xc2>
 8004684:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004688:	e000      	b.n	800468c <MX25UM51245G_WriteCfg2Register+0xc4>
 800468a:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
 800468c:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = 0U;
 800468e:	2300      	movs	r3, #0
 8004690:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DataLength             = (Mode == MX25UM51245G_SPI_MODE) ? 1U : ((Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U);
 8004692:	7afb      	ldrb	r3, [r7, #11]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d006      	beq.n	80046a6 <MX25UM51245G_WriteCfg2Register+0xde>
 8004698:	7abb      	ldrb	r3, [r7, #10]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d101      	bne.n	80046a2 <MX25UM51245G_WriteCfg2Register+0xda>
 800469e:	2302      	movs	r3, #2
 80046a0:	e002      	b.n	80046a8 <MX25UM51245G_WriteCfg2Register+0xe0>
 80046a2:	2301      	movs	r3, #1
 80046a4:	e000      	b.n	80046a8 <MX25UM51245G_WriteCfg2Register+0xe0>
 80046a6:	2301      	movs	r3, #1
 80046a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 80046aa:	2300      	movs	r3, #0
 80046ac:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 80046ae:	2300      	movs	r3, #0
 80046b0:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046b2:	f107 0310 	add.w	r3, r7, #16
 80046b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ba:	4619      	mov	r1, r3
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f00e fc4d 	bl	8012f5c <HAL_XSPI_Command>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <MX25UM51245G_WriteCfg2Register+0x106>
  {
    return MX25UM51245G_ERROR;
 80046c8:	f04f 33ff 	mov.w	r3, #4294967295
 80046cc:	e00d      	b.n	80046ea <MX25UM51245G_WriteCfg2Register+0x122>
  }

  if (HAL_XSPI_Transmit(Ctx, &Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f00e fd2c 	bl	8013134 <HAL_XSPI_Transmit>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d002      	beq.n	80046e8 <MX25UM51245G_WriteCfg2Register+0x120>
  {
    return MX25UM51245G_ERROR;
 80046e2:	f04f 33ff 	mov.w	r3, #4294967295
 80046e6:	e000      	b.n	80046ea <MX25UM51245G_WriteCfg2Register+0x122>
  }

  return MX25UM51245G_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3760      	adds	r7, #96	; 0x60
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <MX25UM51245G_ReadCfg2Register>:
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25UM51245G_ReadCfg2Register(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                      MX25UM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b098      	sub	sp, #96	; 0x60
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	60f8      	str	r0, [r7, #12]
 80046fa:	607b      	str	r3, [r7, #4]
 80046fc:	460b      	mov	r3, r1
 80046fe:	72fb      	strb	r3, [r7, #11]
 8004700:	4613      	mov	r3, r2
 8004702:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = {0};
 8004704:	f107 0310 	add.w	r3, r7, #16
 8004708:	2250      	movs	r2, #80	; 0x50
 800470a:	2100      	movs	r1, #0
 800470c:	4618      	mov	r0, r3
 800470e:	f024 fd53 	bl	80291b8 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 8004712:	7afb      	ldrb	r3, [r7, #11]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d105      	bne.n	8004724 <MX25UM51245G_ReadCfg2Register+0x32>
 8004718:	7abb      	ldrb	r3, [r7, #10]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d102      	bne.n	8004724 <MX25UM51245G_ReadCfg2Register+0x32>
  {
    return MX25UM51245G_ERROR;
 800471e:	f04f 33ff 	mov.w	r3, #4294967295
 8004722:	e081      	b.n	8004828 <MX25UM51245G_ReadCfg2Register+0x136>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8004724:	2300      	movs	r3, #0
 8004726:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8004728:	2300      	movs	r3, #0
 800472a:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 800472c:	7afb      	ldrb	r3, [r7, #11]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <MX25UM51245G_ReadCfg2Register+0x44>
 8004732:	2301      	movs	r3, #1
 8004734:	e000      	b.n	8004738 <MX25UM51245G_ReadCfg2Register+0x46>
 8004736:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 8004738:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 800473a:	7abb      	ldrb	r3, [r7, #10]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d101      	bne.n	8004744 <MX25UM51245G_ReadCfg2Register+0x52>
 8004740:	2308      	movs	r3, #8
 8004742:	e000      	b.n	8004746 <MX25UM51245G_ReadCfg2Register+0x54>
 8004744:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 8004746:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 8004748:	7afb      	ldrb	r3, [r7, #11]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <MX25UM51245G_ReadCfg2Register+0x60>
 800474e:	2300      	movs	r3, #0
 8004750:	e000      	b.n	8004754 <MX25UM51245G_ReadCfg2Register+0x62>
 8004752:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 8004754:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_READ_CFG_REG2_CMD
                                 : MX25UM51245G_OCTA_READ_CFG_REG2_CMD;
 8004756:	7afb      	ldrb	r3, [r7, #11]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <MX25UM51245G_ReadCfg2Register+0x6e>
 800475c:	2371      	movs	r3, #113	; 0x71
 800475e:	e001      	b.n	8004764 <MX25UM51245G_ReadCfg2Register+0x72>
 8004760:	f247 138e 	movw	r3, #29070	; 0x718e
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 8004764:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
 8004766:	7afb      	ldrb	r3, [r7, #11]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d102      	bne.n	8004772 <MX25UM51245G_ReadCfg2Register+0x80>
 800476c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004770:	e001      	b.n	8004776 <MX25UM51245G_ReadCfg2Register+0x84>
 8004772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004776:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
 8004778:	7abb      	ldrb	r3, [r7, #10]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d102      	bne.n	8004784 <MX25UM51245G_ReadCfg2Register+0x92>
 800477e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004782:	e000      	b.n	8004786 <MX25UM51245G_ReadCfg2Register+0x94>
 8004784:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
 8004786:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
 8004788:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800478c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = ReadAddr;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8004792:	2300      	movs	r3, #0
 8004794:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 8004796:	7afb      	ldrb	r3, [r7, #11]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d102      	bne.n	80047a2 <MX25UM51245G_ReadCfg2Register+0xb0>
 800479c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047a0:	e001      	b.n	80047a6 <MX25UM51245G_ReadCfg2Register+0xb4>
 80047a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80047a6:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
 80047a8:	7abb      	ldrb	r3, [r7, #10]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d102      	bne.n	80047b4 <MX25UM51245G_ReadCfg2Register+0xc2>
 80047ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047b2:	e000      	b.n	80047b6 <MX25UM51245G_ReadCfg2Register+0xc4>
 80047b4:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
 80047b6:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? 0U
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
 80047b8:	7afb      	ldrb	r3, [r7, #11]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d006      	beq.n	80047cc <MX25UM51245G_ReadCfg2Register+0xda>
 80047be:	7abb      	ldrb	r3, [r7, #10]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d101      	bne.n	80047c8 <MX25UM51245G_ReadCfg2Register+0xd6>
 80047c4:	2305      	movs	r3, #5
 80047c6:	e002      	b.n	80047ce <MX25UM51245G_ReadCfg2Register+0xdc>
 80047c8:	2304      	movs	r3, #4
 80047ca:	e000      	b.n	80047ce <MX25UM51245G_ReadCfg2Register+0xdc>
 80047cc:	2300      	movs	r3, #0
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
 80047ce:	657b      	str	r3, [r7, #84]	; 0x54
                                    ? DUMMY_CYCLES_REG_OCTAL_DTR
                                    : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength             = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
 80047d0:	7abb      	ldrb	r3, [r7, #10]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d101      	bne.n	80047da <MX25UM51245G_ReadCfg2Register+0xe8>
 80047d6:	2302      	movs	r3, #2
 80047d8:	e000      	b.n	80047dc <MX25UM51245G_ReadCfg2Register+0xea>
 80047da:	2301      	movs	r3, #1
 80047dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
 80047de:	7abb      	ldrb	r3, [r7, #10]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d102      	bne.n	80047ea <MX25UM51245G_ReadCfg2Register+0xf8>
 80047e4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80047e8:	e000      	b.n	80047ec <MX25UM51245G_ReadCfg2Register+0xfa>
 80047ea:	2300      	movs	r3, #0
 80047ec:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 80047ee:	2300      	movs	r3, #0
 80047f0:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80047f2:	f107 0310 	add.w	r3, r7, #16
 80047f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047fa:	4619      	mov	r1, r3
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f00e fbad 	bl	8012f5c <HAL_XSPI_Command>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d002      	beq.n	800480e <MX25UM51245G_ReadCfg2Register+0x11c>
  {
    return MX25UM51245G_ERROR;
 8004808:	f04f 33ff 	mov.w	r3, #4294967295
 800480c:	e00c      	b.n	8004828 <MX25UM51245G_ReadCfg2Register+0x136>
  }

  /* Reception of the data */
  if (HAL_XSPI_Receive(Ctx, Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800480e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004812:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f00e fd00 	bl	801321a <HAL_XSPI_Receive>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d002      	beq.n	8004826 <MX25UM51245G_ReadCfg2Register+0x134>
  {
    return MX25UM51245G_ERROR;
 8004820:	f04f 33ff 	mov.w	r3, #4294967295
 8004824:	e000      	b.n	8004828 <MX25UM51245G_ReadCfg2Register+0x136>
  }

  return MX25UM51245G_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3760      	adds	r7, #96	; 0x60
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <MX25UM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_ResetEnable(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b096      	sub	sp, #88	; 0x58
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	460b      	mov	r3, r1
 800483a:	70fb      	strb	r3, [r7, #3]
 800483c:	4613      	mov	r3, r2
 800483e:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef s_command = {0};
 8004840:	f107 0308 	add.w	r3, r7, #8
 8004844:	2250      	movs	r2, #80	; 0x50
 8004846:	2100      	movs	r1, #0
 8004848:	4618      	mov	r0, r3
 800484a:	f024 fcb5 	bl	80291b8 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 800484e:	78fb      	ldrb	r3, [r7, #3]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d105      	bne.n	8004860 <MX25UM51245G_ResetEnable+0x30>
 8004854:	78bb      	ldrb	r3, [r7, #2]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d102      	bne.n	8004860 <MX25UM51245G_ResetEnable+0x30>
  {
    return MX25UM51245G_ERROR;
 800485a:	f04f 33ff 	mov.w	r3, #4294967295
 800485e:	e03b      	b.n	80048d8 <MX25UM51245G_ResetEnable+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8004860:	2300      	movs	r3, #0
 8004862:	60bb      	str	r3, [r7, #8]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8004864:	2300      	movs	r3, #0
 8004866:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8004868:	78fb      	ldrb	r3, [r7, #3]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <MX25UM51245G_ResetEnable+0x42>
 800486e:	2301      	movs	r3, #1
 8004870:	e000      	b.n	8004874 <MX25UM51245G_ResetEnable+0x44>
 8004872:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 8004874:	617b      	str	r3, [r7, #20]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8004876:	78bb      	ldrb	r3, [r7, #2]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d101      	bne.n	8004880 <MX25UM51245G_ResetEnable+0x50>
 800487c:	2308      	movs	r3, #8
 800487e:	e000      	b.n	8004882 <MX25UM51245G_ResetEnable+0x52>
 8004880:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 8004882:	61fb      	str	r3, [r7, #28]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 8004884:	78fb      	ldrb	r3, [r7, #3]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <MX25UM51245G_ResetEnable+0x5e>
 800488a:	2300      	movs	r3, #0
 800488c:	e000      	b.n	8004890 <MX25UM51245G_ResetEnable+0x60>
 800488e:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 8004890:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_RESET_ENABLE_CMD
                                 : MX25UM51245G_OCTA_RESET_ENABLE_CMD;
 8004892:	78fb      	ldrb	r3, [r7, #3]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <MX25UM51245G_ResetEnable+0x6c>
 8004898:	2366      	movs	r3, #102	; 0x66
 800489a:	e001      	b.n	80048a0 <MX25UM51245G_ResetEnable+0x70>
 800489c:	f246 6399 	movw	r3, #26265	; 0x6699
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 80048a0:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
 80048a2:	2300      	movs	r3, #0
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 80048a6:	2300      	movs	r3, #0
 80048a8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
 80048aa:	2300      	movs	r3, #0
 80048ac:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 80048b2:	2300      	movs	r3, #0
 80048b4:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 80048b6:	2300      	movs	r3, #0
 80048b8:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80048ba:	f107 0308 	add.w	r3, r7, #8
 80048be:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c2:	4619      	mov	r1, r3
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f00e fb49 	bl	8012f5c <HAL_XSPI_Command>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <MX25UM51245G_ResetEnable+0xa6>
  {
    return MX25UM51245G_ERROR;
 80048d0:	f04f 33ff 	mov.w	r3, #4294967295
 80048d4:	e000      	b.n	80048d8 <MX25UM51245G_ResetEnable+0xa8>
  }

  return MX25UM51245G_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3758      	adds	r7, #88	; 0x58
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <MX25UM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_ResetMemory(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b096      	sub	sp, #88	; 0x58
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	460b      	mov	r3, r1
 80048ea:	70fb      	strb	r3, [r7, #3]
 80048ec:	4613      	mov	r3, r2
 80048ee:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef s_command = {0};
 80048f0:	f107 0308 	add.w	r3, r7, #8
 80048f4:	2250      	movs	r2, #80	; 0x50
 80048f6:	2100      	movs	r1, #0
 80048f8:	4618      	mov	r0, r3
 80048fa:	f024 fc5d 	bl	80291b8 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 80048fe:	78fb      	ldrb	r3, [r7, #3]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d105      	bne.n	8004910 <MX25UM51245G_ResetMemory+0x30>
 8004904:	78bb      	ldrb	r3, [r7, #2]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d102      	bne.n	8004910 <MX25UM51245G_ResetMemory+0x30>
  {
    return MX25UM51245G_ERROR;
 800490a:	f04f 33ff 	mov.w	r3, #4294967295
 800490e:	e03b      	b.n	8004988 <MX25UM51245G_ResetMemory+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8004910:	2300      	movs	r3, #0
 8004912:	60bb      	str	r3, [r7, #8]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8004914:	2300      	movs	r3, #0
 8004916:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8004918:	78fb      	ldrb	r3, [r7, #3]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <MX25UM51245G_ResetMemory+0x42>
 800491e:	2301      	movs	r3, #1
 8004920:	e000      	b.n	8004924 <MX25UM51245G_ResetMemory+0x44>
 8004922:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 8004924:	617b      	str	r3, [r7, #20]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8004926:	78bb      	ldrb	r3, [r7, #2]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d101      	bne.n	8004930 <MX25UM51245G_ResetMemory+0x50>
 800492c:	2308      	movs	r3, #8
 800492e:	e000      	b.n	8004932 <MX25UM51245G_ResetMemory+0x52>
 8004930:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 8004932:	61fb      	str	r3, [r7, #28]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 8004934:	78fb      	ldrb	r3, [r7, #3]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <MX25UM51245G_ResetMemory+0x5e>
 800493a:	2300      	movs	r3, #0
 800493c:	e000      	b.n	8004940 <MX25UM51245G_ResetMemory+0x60>
 800493e:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 8004940:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_RESET_MEMORY_CMD
                                 : MX25UM51245G_OCTA_RESET_MEMORY_CMD;
 8004942:	78fb      	ldrb	r3, [r7, #3]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d101      	bne.n	800494c <MX25UM51245G_ResetMemory+0x6c>
 8004948:	2399      	movs	r3, #153	; 0x99
 800494a:	e001      	b.n	8004950 <MX25UM51245G_ResetMemory+0x70>
 800494c:	f649 1366 	movw	r3, #39270	; 0x9966
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 8004950:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
 8004952:	2300      	movs	r3, #0
 8004954:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8004956:	2300      	movs	r3, #0
 8004958:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
 800495a:	2300      	movs	r3, #0
 800495c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 800495e:	2300      	movs	r3, #0
 8004960:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8004962:	2300      	movs	r3, #0
 8004964:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8004966:	2300      	movs	r3, #0
 8004968:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800496a:	f107 0308 	add.w	r3, r7, #8
 800496e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004972:	4619      	mov	r1, r3
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f00e faf1 	bl	8012f5c <HAL_XSPI_Command>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <MX25UM51245G_ResetMemory+0xa6>
  {
    return MX25UM51245G_ERROR;
 8004980:	f04f 33ff 	mov.w	r3, #4294967295
 8004984:	e000      	b.n	8004988 <MX25UM51245G_ResetMemory+0xa8>
  }

  return MX25UM51245G_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3758      	adds	r7, #88	; 0x58
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <SITRONIX_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t SITRONIX_RegisterBusIO(SITRONIX_Object_t *pObj, SITRONIX_IO_t *pIO)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d103      	bne.n	80049a8 <SITRONIX_RegisterBusIO+0x18>
  {
    ret = SITRONIX_ERROR;
 80049a0:	f04f 33ff 	mov.w	r3, #4294967295
 80049a4:	60fb      	str	r3, [r7, #12]
 80049a6:	e033      	b.n	8004a10 <SITRONIX_RegisterBusIO+0x80>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	891a      	ldrh	r2, [r3, #8]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	68da      	ldr	r2, [r3, #12]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	691a      	ldr	r2, [r3, #16]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadData  = pIO->ReadData;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	695a      	ldr	r2, [r3, #20]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	699a      	ldr	r2, [r3, #24]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	619a      	str	r2, [r3, #24]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a0e      	ldr	r2, [pc, #56]	; (8004a1c <SITRONIX_RegisterBusIO+0x8c>)
 80049e4:	621a      	str	r2, [r3, #32]
    pObj->Ctx.WriteReg = WriteRegWrap;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a0d      	ldr	r2, [pc, #52]	; (8004a20 <SITRONIX_RegisterBusIO+0x90>)
 80049ea:	61da      	str	r2, [r3, #28]
    pObj->Ctx.ReadData = ReadDataWrap;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a0d      	ldr	r2, [pc, #52]	; (8004a24 <SITRONIX_RegisterBusIO+0x94>)
 80049f0:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.handle   = pObj;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	629a      	str	r2, [r3, #40]	; 0x28

    if (pObj->IO.Init != NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d004      	beq.n	8004a0a <SITRONIX_RegisterBusIO+0x7a>
    {
      ret = pObj->IO.Init();
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4798      	blx	r3
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	e002      	b.n	8004a10 <SITRONIX_RegisterBusIO+0x80>
    }
    else
    {
      ret = SITRONIX_ERROR;
 8004a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a0e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8004a10:	68fb      	ldr	r3, [r7, #12]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	08004ccb 	.word	0x08004ccb
 8004a20:	08004cff 	.word	0x08004cff
 8004a24:	08004d33 	.word	0x08004d33

08004a28 <SITRONIX_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to SITRONIX sensor capabilities
  * @retval Component status
  */
int32_t SITRONIX_GetCapabilities(SITRONIX_Object_t *pObj, SITRONIX_Capabilities_t *Capabilities)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2201      	movs	r2, #1
 8004a36:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = SITRONIX_MAX_DETECTABLE_TOUCH;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	220a      	movs	r2, #10
 8004a42:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = SITRONIX_MAX_X_LENGTH;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004a4a:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = SITRONIX_MAX_Y_LENGTH;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004a52:	609a      	str	r2, [r3, #8]

  return SITRONIX_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <SITRONIX_Init>:
  *         from MCU to SITRONIX : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_Init(SITRONIX_Object_t *pObj)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b08a      	sub	sp, #40	; 0x28
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]

  int32_t ret = SITRONIX_OK;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t data[28U];

  if (pObj->IsInitialized == 0U)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d114      	bne.n	8004aa2 <SITRONIX_Init+0x40>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4798      	blx	r3

    if (sitronix_read_data(&pObj->Ctx, data, (uint16_t)sizeof(data)) != SITRONIX_OK)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	331c      	adds	r3, #28
 8004a82:	f107 0108 	add.w	r1, r7, #8
 8004a86:	221c      	movs	r2, #28
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 f97e 	bl	8004d8a <sitronix_read_data>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d002      	beq.n	8004a9a <SITRONIX_Init+0x38>
    {
      ret = SITRONIX_ERROR;
 8004a94:	f04f 33ff 	mov.w	r3, #4294967295
 8004a98:	627b      	str	r3, [r7, #36]	; 0x24
    }

    pObj->IsInitialized = 1;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }

  if (ret != SITRONIX_OK)
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d002      	beq.n	8004aae <SITRONIX_Init+0x4c>
  {
    ret = SITRONIX_ERROR;
 8004aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
  }

  return ret;
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3728      	adds	r7, #40	; 0x28
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <SITRONIX_DeInit>:
  *         from MCU to SITRONIX : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_DeInit(SITRONIX_Object_t *pObj)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d103      	bne.n	8004ad2 <SITRONIX_DeInit+0x1a>
  {
    pObj->IsInitialized = 0;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }

  return SITRONIX_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <SITRONIX_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval Component status
  */
int32_t SITRONIX_GestureConfig(SITRONIX_Object_t *pObj, SITRONIX_Gesture_Init_t *GestureInit)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  return SITRONIX_ERROR;
 8004aea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <SITRONIX_ReadID>:
  * @param  pObj Component object pointer
  * @param  Id Pointer to component's ID
  * @retval Component status
  */
int32_t SITRONIX_ReadID(SITRONIX_Object_t *pObj, uint32_t *Id)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b08c      	sub	sp, #48	; 0x30
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	6039      	str	r1, [r7, #0]
  int32_t ret = SITRONIX_OK;
 8004b04:	2300      	movs	r3, #0
 8004b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t data[28];
  uint8_t trial = 0;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  for (trial = 0; trial < 10; trial++)
 8004b0e:	2300      	movs	r3, #0
 8004b10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b14:	e01c      	b.n	8004b50 <SITRONIX_ReadID+0x56>
  {
    if (sitronix_read_data(&pObj->Ctx, data, 28) != SITRONIX_OK)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	331c      	adds	r3, #28
 8004b1a:	f107 010c 	add.w	r1, r7, #12
 8004b1e:	221c      	movs	r2, #28
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 f932 	bl	8004d8a <sitronix_read_data>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <SITRONIX_ReadID+0x3a>
    {
      ret = SITRONIX_ERROR;
 8004b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b32:	e008      	b.n	8004b46 <SITRONIX_ReadID+0x4c>
    }
    else
    {
      if ((uint32_t)data[0] == SITRONIX_ID)
 8004b34:	7b3b      	ldrb	r3, [r7, #12]
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d105      	bne.n	8004b46 <SITRONIX_ReadID+0x4c>
      {
        *Id = (uint32_t)data[0];
 8004b3a:	7b3b      	ldrb	r3, [r7, #12]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	601a      	str	r2, [r3, #0]
        return ret;
 8004b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b44:	e009      	b.n	8004b5a <SITRONIX_ReadID+0x60>
  for (trial = 0; trial < 10; trial++)
 8004b46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b54:	2b09      	cmp	r3, #9
 8004b56:	d9de      	bls.n	8004b16 <SITRONIX_ReadID+0x1c>
      }
    }
  }
  return ret;
 8004b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3730      	adds	r7, #48	; 0x30
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <SITRONIX_GetState>:
  * @param  pObj Component object pointer
  * @param  State Single Touch structure pointer
  * @retval Component status.
  */
int32_t SITRONIX_GetState(SITRONIX_Object_t *pObj, SITRONIX_State_t *State)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b086      	sub	sp, #24
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
 8004b6a:	6039      	str	r1, [r7, #0]
  int32_t ret = SITRONIX_OK;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	617b      	str	r3, [r7, #20]
  uint8_t data[5];

  if (sitronix_read_data(&pObj->Ctx, data, (uint16_t)sizeof(data)) != SITRONIX_OK)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	331c      	adds	r3, #28
 8004b74:	f107 010c 	add.w	r1, r7, #12
 8004b78:	2205      	movs	r2, #5
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 f905 	bl	8004d8a <sitronix_read_data>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <SITRONIX_GetState+0x2c>
  {
    ret = SITRONIX_ERROR;
 8004b86:	f04f 33ff 	mov.w	r3, #4294967295
 8004b8a:	617b      	str	r3, [r7, #20]
 8004b8c:	e017      	b.n	8004bbe <SITRONIX_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = ((((uint32_t)data[2] & SITRONIX_TOUCH_POS_LSB_MASK) << 4) | ((uint32_t)data[3]));
 8004b8e:	7bbb      	ldrb	r3, [r7, #14]
 8004b90:	011b      	lsls	r3, r3, #4
 8004b92:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b96:	7bfa      	ldrb	r2, [r7, #15]
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & SITRONIX_TOUCH_POS_MSB_MASK) << 8) | ((uint32_t)data[4]);
 8004b9e:	7bbb      	ldrb	r3, [r7, #14]
 8004ba0:	021b      	lsls	r3, r3, #8
 8004ba2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ba6:	7c3a      	ldrb	r2, [r7, #16]
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	609a      	str	r2, [r3, #8]
	
    State->TouchDetected = ((data[2] & 0x80) == 0x80 ? 1 : 0);
 8004bae:	7bbb      	ldrb	r3, [r7, #14]
 8004bb0:	b25b      	sxtb	r3, r3
 8004bb2:	11db      	asrs	r3, r3, #7
 8004bb4:	b25b      	sxtb	r3, r3
 8004bb6:	f003 0201 	and.w	r2, r3, #1
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8004bbe:	697b      	ldr	r3, [r7, #20]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3718      	adds	r7, #24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <SITRONIX_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval Component status.
  */
int32_t SITRONIX_GetMultiTouchState(SITRONIX_Object_t *pObj, SITRONIX_MultiTouch_State_t *State)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b08a      	sub	sp, #40	; 0x28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  int32_t ret = SITRONIX_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t  data[28];

  State->TouchDetected = (uint32_t)SITRONIX_DetectTouch(pObj);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f855 	bl	8004c86 <SITRONIX_DetectTouch>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	461a      	mov	r2, r3
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	601a      	str	r2, [r3, #0]

  if (sitronix_read_reg(&pObj->Ctx, SITRONIX_P1_XH_REG, data, (uint16_t)sizeof(data)) != SITRONIX_OK)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f103 001c 	add.w	r0, r3, #28
 8004bea:	f107 0208 	add.w	r2, r7, #8
 8004bee:	231c      	movs	r3, #28
 8004bf0:	2109      	movs	r1, #9
 8004bf2:	f000 f8b3 	bl	8004d5c <sitronix_read_reg>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d002      	beq.n	8004c02 <SITRONIX_GetMultiTouchState+0x3a>
  {
    ret = SITRONIX_ERROR;
 8004bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8004c00:	627b      	str	r3, [r7, #36]	; 0x24
  else
  {
    /* To be implemented */
  }

  return ret;
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3728      	adds	r7, #40	; 0x28
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <SITRONIX_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId gesture ID
  * @retval Component status
  */
int32_t SITRONIX_GetGesture(SITRONIX_Object_t *pObj, uint8_t *GestureId)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return SITRONIX_OK as feature not supported by SITRONIX */
  return SITRONIX_ERROR;
 8004c16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <SITRONIX_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_EnableIT(SITRONIX_Object_t *pObj)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b083      	sub	sp, #12
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return SITRONIX_OK as feature not supported by SITRONIX */
  return SITRONIX_ERROR;
 8004c2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <SITRONIX_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_DisableIT(SITRONIX_Object_t *pObj)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return SITRONIX_OK as feature not supported by SITRONIX */
  return SITRONIX_ERROR;
 8004c46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <SITRONIX_ITStatus>:
  *         @note : This feature is not supported by SITRONIX.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_ITStatus(SITRONIX_Object_t *pObj)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return SITRONIX_OK as feature not supported by SITRONIX */
  return SITRONIX_ERROR;
 8004c5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <SITRONIX_ClearIT>:
  *         @note : This feature is not supported by SITRONIX.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_ClearIT(SITRONIX_Object_t *pObj)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return SITRONIX_OK as feature not supported by SITRONIX */
  return SITRONIX_ERROR;
 8004c76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <SITRONIX_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be between 0 and10) or SITRONIX_ERROR
  *         in case of error
  */
static int32_t SITRONIX_DetectTouch(SITRONIX_Object_t *pObj)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b08c      	sub	sp, #48	; 0x30
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch = 0;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t data[28];

  if (sitronix_read_data(&pObj->Ctx, (uint8_t *)&data, 28) != SITRONIX_OK)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	331c      	adds	r3, #28
 8004c98:	f107 010c 	add.w	r1, r7, #12
 8004c9c:	221c      	movs	r2, #28
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 f873 	bl	8004d8a <sitronix_read_data>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <SITRONIX_DetectTouch+0x2c>
  {
    ret = SITRONIX_ERROR;
 8004caa:	f04f 33ff 	mov.w	r3, #4294967295
 8004cae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cb0:	e006      	b.n	8004cc0 <SITRONIX_DetectTouch+0x3a>
  }
  else
  {
    nb_touch = ((data[2] & 0x80) == 0x80 ? 1 : 0);
 8004cb2:	7bbb      	ldrb	r3, [r7, #14]
 8004cb4:	09db      	lsrs	r3, r3, #7
 8004cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    ret = (int32_t)nb_touch;
 8004cba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  return ret;
 8004cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3730      	adds	r7, #48	; 0x30
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004cca:	b590      	push	{r4, r7, lr}
 8004ccc:	b087      	sub	sp, #28
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	60f8      	str	r0, [r7, #12]
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	72fb      	strb	r3, [r7, #11]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	813b      	strh	r3, [r7, #8]
  SITRONIX_Object_t *pObj = (SITRONIX_Object_t *)handle;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	691c      	ldr	r4, [r3, #16]
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	8918      	ldrh	r0, [r3, #8]
 8004cea:	7afb      	ldrb	r3, [r7, #11]
 8004cec:	b299      	uxth	r1, r3
 8004cee:	893b      	ldrh	r3, [r7, #8]
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	47a0      	blx	r4
 8004cf4:	4603      	mov	r3, r0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	371c      	adds	r7, #28
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd90      	pop	{r4, r7, pc}

08004cfe <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004cfe:	b590      	push	{r4, r7, lr}
 8004d00:	b087      	sub	sp, #28
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	60f8      	str	r0, [r7, #12]
 8004d06:	607a      	str	r2, [r7, #4]
 8004d08:	461a      	mov	r2, r3
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	72fb      	strb	r3, [r7, #11]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	813b      	strh	r3, [r7, #8]
  SITRONIX_Object_t *pObj = (SITRONIX_Object_t *)handle;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	68dc      	ldr	r4, [r3, #12]
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	8918      	ldrh	r0, [r3, #8]
 8004d1e:	7afb      	ldrb	r3, [r7, #11]
 8004d20:	b299      	uxth	r1, r3
 8004d22:	893b      	ldrh	r3, [r7, #8]
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	47a0      	blx	r4
 8004d28:	4603      	mov	r3, r0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	371c      	adds	r7, #28
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd90      	pop	{r4, r7, pc}

08004d32 <ReadDataWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadDataWrap(void *handle, uint8_t *pData, uint16_t Length)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b086      	sub	sp, #24
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	80fb      	strh	r3, [r7, #6]
  SITRONIX_Object_t *pObj = (SITRONIX_Object_t *)handle;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadData(pObj->IO.Address, pData, Length);
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	8910      	ldrh	r0, [r2, #8]
 8004d4c:	88fa      	ldrh	r2, [r7, #6]
 8004d4e:	68b9      	ldr	r1, [r7, #8]
 8004d50:	4798      	blx	r3
 8004d52:	4603      	mov	r3, r0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3718      	adds	r7, #24
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <sitronix_read_reg>:
  *                 I2C or SPI reading functions
  * Input         : Register Address, length of buffer
  * Output        : pdata Read
  *******************************************************************************/
int32_t sitronix_read_reg(sitronix_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8004d5c:	b590      	push	{r4, r7, lr}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	607a      	str	r2, [r7, #4]
 8004d66:	461a      	mov	r2, r3
 8004d68:	460b      	mov	r3, r1
 8004d6a:	72fb      	strb	r3, [r7, #11]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	685c      	ldr	r4, [r3, #4]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	68d8      	ldr	r0, [r3, #12]
 8004d78:	893b      	ldrh	r3, [r7, #8]
 8004d7a:	7af9      	ldrb	r1, [r7, #11]
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	47a0      	blx	r4
 8004d80:	4603      	mov	r3, r0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd90      	pop	{r4, r7, pc}

08004d8a <sitronix_read_data>:
  *                 I2C or SPI reading functions
  * Input         : Register Address, length of buffer
  * Output        : pdata Read
  *******************************************************************************/
int32_t sitronix_read_data(sitronix_ctx_t *ctx, uint8_t *pdata, uint16_t length)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b084      	sub	sp, #16
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	60f8      	str	r0, [r7, #12]
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	4613      	mov	r3, r2
 8004d96:	80fb      	strh	r3, [r7, #6]
  return ctx->ReadData(ctx->handle, pdata, length);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	68d0      	ldr	r0, [r2, #12]
 8004da0:	88fa      	ldrh	r2, [r7, #6]
 8004da2:	68b9      	ldr	r1, [r7, #8]
 8004da4:	4798      	blx	r3
 8004da6:	4603      	mov	r3, r0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <BSP_I2C5_Init>:
/**
  * @brief  Initializes I2C5 HAL.
  * @retval BSP status
  */
int32_t BSP_I2C5_Init(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8004db6:	2300      	movs	r3, #0
 8004db8:	607b      	str	r3, [r7, #4]

  hbus_i2c5.Instance = BUS_I2C5;
 8004dba:	4b16      	ldr	r3, [pc, #88]	; (8004e14 <BSP_I2C5_Init+0x64>)
 8004dbc:	4a16      	ldr	r2, [pc, #88]	; (8004e18 <BSP_I2C5_Init+0x68>)
 8004dbe:	601a      	str	r2, [r3, #0]

  if (I2c5InitCounter == 0U)
 8004dc0:	4b16      	ldr	r3, [pc, #88]	; (8004e1c <BSP_I2C5_Init+0x6c>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d11f      	bne.n	8004e08 <BSP_I2C5_Init+0x58>
  {
    I2c5InitCounter++;
 8004dc8:	4b14      	ldr	r3, [pc, #80]	; (8004e1c <BSP_I2C5_Init+0x6c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	4a13      	ldr	r2, [pc, #76]	; (8004e1c <BSP_I2C5_Init+0x6c>)
 8004dd0:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c5) == HAL_I2C_STATE_RESET)
 8004dd2:	4810      	ldr	r0, [pc, #64]	; (8004e14 <BSP_I2C5_Init+0x64>)
 8004dd4:	f005 ffca 	bl	800ad6c <HAL_I2C_GetState>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d114      	bne.n	8004e08 <BSP_I2C5_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif /* BSP_USE_CMSIS_OS */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C5 Msp */
      I2C5_MspInit(&hbus_i2c5);
 8004dde:	480d      	ldr	r0, [pc, #52]	; (8004e14 <BSP_I2C5_Init+0x64>)
 8004de0:	f000 fb88 	bl	80054f4 <I2C5_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */
      if (MX_I2C5_Init(&hbus_i2c5, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C5_FREQUENCY)) != HAL_OK)
 8004de4:	f008 fa96 	bl	800d314 <HAL_RCC_GetPCLK1Freq>
 8004de8:	4603      	mov	r3, r0
 8004dea:	490d      	ldr	r1, [pc, #52]	; (8004e20 <BSP_I2C5_Init+0x70>)
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 f90b 	bl	8005008 <I2C_GetTiming>
 8004df2:	4603      	mov	r3, r0
 8004df4:	4619      	mov	r1, r3
 8004df6:	4807      	ldr	r0, [pc, #28]	; (8004e14 <BSP_I2C5_Init+0x64>)
 8004df8:	f000 f838 	bl	8004e6c <MX_I2C5_Init>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d002      	beq.n	8004e08 <BSP_I2C5_Init+0x58>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8004e02:	f06f 0307 	mvn.w	r3, #7
 8004e06:	607b      	str	r3, [r7, #4]
#if (USE_HAL_I2C_REGISTER_CALLBACKS > 0)
    }
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS > 0) */
  }
}
return ret;
 8004e08:	687b      	ldr	r3, [r7, #4]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3708      	adds	r7, #8
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	201970f0 	.word	0x201970f0
 8004e18:	40009800 	.word	0x40009800
 8004e1c:	201966e8 	.word	0x201966e8
 8004e20:	00061a80 	.word	0x00061a80

08004e24 <BSP_I2C5_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C5_DeInit(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	607b      	str	r3, [r7, #4]

  I2c5InitCounter--;
 8004e2e:	4b0d      	ldr	r3, [pc, #52]	; (8004e64 <BSP_I2C5_DeInit+0x40>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	4a0b      	ldr	r2, [pc, #44]	; (8004e64 <BSP_I2C5_DeInit+0x40>)
 8004e36:	6013      	str	r3, [r2, #0]

  if (I2c5InitCounter == 0U)
 8004e38:	4b0a      	ldr	r3, [pc, #40]	; (8004e64 <BSP_I2C5_DeInit+0x40>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10b      	bne.n	8004e58 <BSP_I2C5_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C5_MspDeInit(&hbus_i2c5);
 8004e40:	4809      	ldr	r0, [pc, #36]	; (8004e68 <BSP_I2C5_DeInit+0x44>)
 8004e42:	f000 fbbd 	bl	80055c0 <I2C5_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c5) != HAL_OK)
 8004e46:	4808      	ldr	r0, [pc, #32]	; (8004e68 <BSP_I2C5_DeInit+0x44>)
 8004e48:	f005 fc28 	bl	800a69c <HAL_I2C_DeInit>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d002      	beq.n	8004e58 <BSP_I2C5_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8004e52:	f06f 0307 	mvn.w	r3, #7
 8004e56:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8004e58:	687b      	ldr	r3, [r7, #4]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3708      	adds	r7, #8
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	201966e8 	.word	0x201966e8
 8004e68:	201970f0 	.word	0x201970f0

08004e6c <MX_I2C5_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C5_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e76:	2300      	movs	r3, #0
 8004e78:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f005 fb67 	bl	800a57e <HAL_I2C_Init>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d002      	beq.n	8004ebc <MX_I2C5_Init+0x50>
  {
    status = HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	73fb      	strb	r3, [r7, #15]
 8004eba:	e014      	b.n	8004ee6 <MX_I2C5_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8004ec0:	68b9      	ldr	r1, [r7, #8]
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f006 faa6 	bl	800b414 <HAL_I2CEx_ConfigAnalogFilter>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d002      	beq.n	8004ed4 <MX_I2C5_Init+0x68>
    {
      status = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	73fb      	strb	r3, [r7, #15]
 8004ed2:	e008      	b.n	8004ee6 <MX_I2C5_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f006 fae7 	bl	800b4aa <HAL_I2CEx_ConfigDigitalFilter>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <MX_I2C5_Init+0x7a>
      {
        status = HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8004ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <BSP_I2C5_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C5_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b088      	sub	sp, #32
 8004ef4:	af02      	add	r7, sp, #8
 8004ef6:	60ba      	str	r2, [r7, #8]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	4603      	mov	r3, r0
 8004efc:	81fb      	strh	r3, [r7, #14]
 8004efe:	460b      	mov	r3, r1
 8004f00:	81bb      	strh	r3, [r7, #12]
 8004f02:	4613      	mov	r3, r2
 8004f04:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C5_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8004f06:	89b9      	ldrh	r1, [r7, #12]
 8004f08:	89f8      	ldrh	r0, [r7, #14]
 8004f0a:	88fb      	ldrh	r3, [r7, #6]
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f000 fb77 	bl	8005604 <I2C5_WriteReg>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d102      	bne.n	8004f22 <BSP_I2C5_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	617b      	str	r3, [r7, #20]
 8004f20:	e00c      	b.n	8004f3c <BSP_I2C5_WriteReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c5) == HAL_I2C_ERROR_AF)
 8004f22:	4809      	ldr	r0, [pc, #36]	; (8004f48 <BSP_I2C5_WriteReg+0x58>)
 8004f24:	f005 ff30 	bl	800ad88 <HAL_I2C_GetError>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b04      	cmp	r3, #4
 8004f2c:	d103      	bne.n	8004f36 <BSP_I2C5_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8004f2e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8004f32:	617b      	str	r3, [r7, #20]
 8004f34:	e002      	b.n	8004f3c <BSP_I2C5_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8004f36:	f06f 0303 	mvn.w	r3, #3
 8004f3a:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8004f3c:	697b      	ldr	r3, [r7, #20]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3718      	adds	r7, #24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	201970f0 	.word	0x201970f0

08004f4c <BSP_I2C5_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C5_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b088      	sub	sp, #32
 8004f50:	af02      	add	r7, sp, #8
 8004f52:	60ba      	str	r2, [r7, #8]
 8004f54:	461a      	mov	r2, r3
 8004f56:	4603      	mov	r3, r0
 8004f58:	81fb      	strh	r3, [r7, #14]
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	81bb      	strh	r3, [r7, #12]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C5_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8004f62:	89b9      	ldrh	r1, [r7, #12]
 8004f64:	89f8      	ldrh	r0, [r7, #14]
 8004f66:	88fb      	ldrh	r3, [r7, #6]
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f000 fb6f 	bl	8005650 <I2C5_ReadReg>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d102      	bne.n	8004f7e <BSP_I2C5_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	617b      	str	r3, [r7, #20]
 8004f7c:	e00c      	b.n	8004f98 <BSP_I2C5_ReadReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c5) == HAL_I2C_ERROR_AF)
 8004f7e:	4809      	ldr	r0, [pc, #36]	; (8004fa4 <BSP_I2C5_ReadReg+0x58>)
 8004f80:	f005 ff02 	bl	800ad88 <HAL_I2C_GetError>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d103      	bne.n	8004f92 <BSP_I2C5_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8004f8a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8004f8e:	617b      	str	r3, [r7, #20]
 8004f90:	e002      	b.n	8004f98 <BSP_I2C5_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8004f92:	f06f 0303 	mvn.w	r3, #3
 8004f96:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8004f98:	697b      	ldr	r3, [r7, #20]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3718      	adds	r7, #24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	201970f0 	.word	0x201970f0

08004fa8 <BSP_I2C5_Recv>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C5_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	4603      	mov	r3, r0
 8004fb0:	6039      	str	r1, [r7, #0]
 8004fb2:	80fb      	strh	r3, [r7, #6]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	80bb      	strh	r3, [r7, #4]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C5_Recv(DevAddr, pData, Length) == 0)
 8004fb8:	88ba      	ldrh	r2, [r7, #4]
 8004fba:	88fb      	ldrh	r3, [r7, #6]
 8004fbc:	6839      	ldr	r1, [r7, #0]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 fb6c 	bl	800569c <I2C5_Recv>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d102      	bne.n	8004fd0 <BSP_I2C5_Recv+0x28>
  {
    ret = BSP_ERROR_NONE;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	e00c      	b.n	8004fea <BSP_I2C5_Recv+0x42>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c5) == HAL_I2C_ERROR_AF)
 8004fd0:	4808      	ldr	r0, [pc, #32]	; (8004ff4 <BSP_I2C5_Recv+0x4c>)
 8004fd2:	f005 fed9 	bl	800ad88 <HAL_I2C_GetError>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b04      	cmp	r3, #4
 8004fda:	d103      	bne.n	8004fe4 <BSP_I2C5_Recv+0x3c>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8004fdc:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8004fe0:	60fb      	str	r3, [r7, #12]
 8004fe2:	e002      	b.n	8004fea <BSP_I2C5_Recv+0x42>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8004fe4:	f06f 0303 	mvn.w	r3, #3
 8004fe8:	60fb      	str	r3, [r7, #12]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8004fea:	68fb      	ldr	r3, [r7, #12]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3710      	adds	r7, #16
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	201970f0 	.word	0x201970f0

08004ff8 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8004ffc:	f002 fc1e 	bl	800783c <HAL_GetTick>
 8005000:	4603      	mov	r3, r0
}
 8005002:	4618      	mov	r0, r3
 8005004:	bd80      	pop	{r7, pc}
	...

08005008 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8005012:	2300      	movs	r3, #0
 8005014:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if ((clock_src_freq != 0U) && (i2c_freq != 0U))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d06b      	beq.n	80050f4 <I2C_GetTiming+0xec>
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d068      	beq.n	80050f4 <I2C_GetTiming+0xec>
  {
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8005022:	2300      	movs	r3, #0
 8005024:	613b      	str	r3, [r7, #16]
 8005026:	e060      	b.n	80050ea <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8005028:	4a35      	ldr	r2, [pc, #212]	; (8005100 <I2C_GetTiming+0xf8>)
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	212c      	movs	r1, #44	; 0x2c
 800502e:	fb01 f303 	mul.w	r3, r1, r3
 8005032:	4413      	add	r3, r2
 8005034:	3304      	adds	r3, #4
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	429a      	cmp	r2, r3
 800503c:	d352      	bcc.n	80050e4 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800503e:	4a30      	ldr	r2, [pc, #192]	; (8005100 <I2C_GetTiming+0xf8>)
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	212c      	movs	r1, #44	; 0x2c
 8005044:	fb01 f303 	mul.w	r3, r1, r3
 8005048:	4413      	add	r3, r2
 800504a:	3308      	adds	r3, #8
 800504c:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	429a      	cmp	r2, r3
 8005052:	d847      	bhi.n	80050e4 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8005054:	6939      	ldr	r1, [r7, #16]
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f856 	bl	8005108 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800505c:	6939      	ldr	r1, [r7, #16]
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f940 	bl	80052e4 <I2C_Compute_SCLL_SCLH>
 8005064:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2b7f      	cmp	r3, #127	; 0x7f
 800506a:	d842      	bhi.n	80050f2 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 800506c:	4925      	ldr	r1, [pc, #148]	; (8005104 <I2C_GetTiming+0xfc>)
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	4613      	mov	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	440b      	add	r3, r1
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 800507e:	4821      	ldr	r0, [pc, #132]	; (8005104 <I2C_GetTiming+0xfc>)
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	4613      	mov	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4403      	add	r3, r0
 800508c:	3304      	adds	r3, #4
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	051b      	lsls	r3, r3, #20
 8005092:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8005096:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 8005098:	481a      	ldr	r0, [pc, #104]	; (8005104 <I2C_GetTiming+0xfc>)
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	4613      	mov	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4403      	add	r3, r0
 80050a6:	3308      	adds	r3, #8
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	041b      	lsls	r3, r3, #16
 80050ac:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 80050b0:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) | \
 80050b2:	4814      	ldr	r0, [pc, #80]	; (8005104 <I2C_GetTiming+0xfc>)
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	4613      	mov	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4403      	add	r3, r0
 80050c0:	330c      	adds	r3, #12
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	021b      	lsls	r3, r3, #8
 80050c6:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 80050c8:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80050ca:	480e      	ldr	r0, [pc, #56]	; (8005104 <I2C_GetTiming+0xfc>)
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	4613      	mov	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4413      	add	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4403      	add	r3, r0
 80050d8:	3310      	adds	r3, #16
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 80050de:	430b      	orrs	r3, r1
 80050e0:	617b      	str	r3, [r7, #20]
        }
        break;
 80050e2:	e006      	b.n	80050f2 <I2C_GetTiming+0xea>
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	3301      	adds	r3, #1
 80050e8:	613b      	str	r3, [r7, #16]
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d99b      	bls.n	8005028 <I2C_GetTiming+0x20>
 80050f0:	e000      	b.n	80050f4 <I2C_GetTiming+0xec>
        break;
 80050f2:	bf00      	nop
      }
    }
  }

  return ret;
 80050f4:	697b      	ldr	r3, [r7, #20]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	0802b774 	.word	0x0802b774
 8005104:	201966ec 	.word	0x201966ec

08005108 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8005108:	b480      	push	{r7}
 800510a:	b08f      	sub	sp, #60	; 0x3c
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8005112:	2310      	movs	r3, #16
 8005114:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t presc;
  uint32_t scldel;
  uint32_t sdadel;
  uint32_t tafdel_min;
  uint32_t tafdel_max;
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	085a      	lsrs	r2, r3, #1
 800511a:	4b6e      	ldr	r3, [pc, #440]	; (80052d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800511c:	4413      	add	r3, r2
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	fbb3 f3f2 	udiv	r3, r3, r2
 8005124:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8005126:	2332      	movs	r3, #50	; 0x32
 8005128:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800512a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800512e:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8005130:	4a69      	ldr	r2, [pc, #420]	; (80052d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	212c      	movs	r1, #44	; 0x2c
 8005136:	fb01 f303 	mul.w	r3, r1, r3
 800513a:	4413      	add	r3, r2
 800513c:	3324      	adds	r3, #36	; 0x24
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4618      	mov	r0, r3
 8005142:	4a65      	ldr	r2, [pc, #404]	; (80052d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	212c      	movs	r1, #44	; 0x2c
 8005148:	fb01 f303 	mul.w	r3, r1, r3
 800514c:	4413      	add	r3, r2
 800514e:	330c      	adds	r3, #12
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	18c2      	adds	r2, r0, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8005154:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8005156:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8005158:	495f      	ldr	r1, [pc, #380]	; (80052d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	202c      	movs	r0, #44	; 0x2c
 800515e:	fb00 f303 	mul.w	r3, r0, r3
 8005162:	440b      	add	r3, r1
 8005164:	3328      	adds	r3, #40	; 0x28
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	3303      	adds	r3, #3
 800516a:	69f9      	ldr	r1, [r7, #28]
 800516c:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8005174:	4a58      	ldr	r2, [pc, #352]	; (80052d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	212c      	movs	r1, #44	; 0x2c
 800517a:	fb01 f303 	mul.w	r3, r1, r3
 800517e:	4413      	add	r3, r2
 8005180:	3310      	adds	r3, #16
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4618      	mov	r0, r3
 8005186:	4a54      	ldr	r2, [pc, #336]	; (80052d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	212c      	movs	r1, #44	; 0x2c
 800518c:	fb01 f303 	mul.w	r3, r1, r3
 8005190:	4413      	add	r3, r2
 8005192:	3320      	adds	r3, #32
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	1ac2      	subs	r2, r0, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8005198:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800519a:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800519c:	494e      	ldr	r1, [pc, #312]	; (80052d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	202c      	movs	r0, #44	; 0x2c
 80051a2:	fb00 f303 	mul.w	r3, r0, r3
 80051a6:	440b      	add	r3, r1
 80051a8:	3328      	adds	r3, #40	; 0x28
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3304      	adds	r3, #4
 80051ae:	69f9      	ldr	r1, [r7, #28]
 80051b0:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 80051b8:	4a47      	ldr	r2, [pc, #284]	; (80052d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	212c      	movs	r1, #44	; 0x2c
 80051be:	fb01 f303 	mul.w	r3, r1, r3
 80051c2:	4413      	add	r3, r2
 80051c4:	3320      	adds	r3, #32
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4618      	mov	r0, r3
 80051ca:	4a43      	ldr	r2, [pc, #268]	; (80052d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	212c      	movs	r1, #44	; 0x2c
 80051d0:	fb01 f303 	mul.w	r3, r1, r3
 80051d4:	4413      	add	r3, r2
 80051d6:	3314      	adds	r3, #20
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4403      	add	r3, r0
 80051dc:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 80051de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	dc01      	bgt.n	80051e8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 80051e4:	2300      	movs	r3, #0
 80051e6:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 80051e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	dc01      	bgt.n	80051f2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 80051ee:	2300      	movs	r3, #0
 80051f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80051f2:	2300      	movs	r3, #0
 80051f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80051f6:	e062      	b.n	80052be <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80051f8:	2300      	movs	r3, #0
 80051fa:	627b      	str	r3, [r7, #36]	; 0x24
 80051fc:	e059      	b.n	80052b2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	3301      	adds	r3, #1
 8005202:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005204:	3201      	adds	r2, #1
 8005206:	fb03 f202 	mul.w	r2, r3, r2
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	fb02 f303 	mul.w	r3, r2, r3
 8005210:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	429a      	cmp	r2, r3
 8005218:	d348      	bcc.n	80052ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800521a:	2300      	movs	r3, #0
 800521c:	623b      	str	r3, [r7, #32]
 800521e:	e042      	b.n	80052a6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8005220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005222:	3301      	adds	r3, #1
 8005224:	6a3a      	ldr	r2, [r7, #32]
 8005226:	fb03 f202 	mul.w	r2, r3, r2
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	fb02 f303 	mul.w	r3, r2, r3
 8005230:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8005232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	429a      	cmp	r2, r3
 8005238:	d332      	bcc.n	80052a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800523a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	429a      	cmp	r2, r3
 8005240:	d82e      	bhi.n	80052a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if (presc != prev_presc)
 8005242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005246:	429a      	cmp	r2, r3
 8005248:	d02a      	beq.n	80052a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800524a:	4b24      	ldr	r3, [pc, #144]	; (80052dc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	4924      	ldr	r1, [pc, #144]	; (80052e0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8005250:	4613      	mov	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	440b      	add	r3, r1
 800525a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800525c:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800525e:	4b1f      	ldr	r3, [pc, #124]	; (80052dc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	491f      	ldr	r1, [pc, #124]	; (80052e0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8005264:	4613      	mov	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4413      	add	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	440b      	add	r3, r1
 800526e:	3304      	adds	r3, #4
 8005270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005272:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8005274:	4b19      	ldr	r3, [pc, #100]	; (80052dc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	4919      	ldr	r1, [pc, #100]	; (80052e0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800527a:	4613      	mov	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4413      	add	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	440b      	add	r3, r1
 8005284:	3308      	adds	r3, #8
 8005286:	6a3a      	ldr	r2, [r7, #32]
 8005288:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800528a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528c:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 800528e:	4b13      	ldr	r3, [pc, #76]	; (80052dc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3301      	adds	r3, #1
 8005294:	4a11      	ldr	r2, [pc, #68]	; (80052dc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005296:	6013      	str	r3, [r2, #0]

              if (I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8005298:	4b10      	ldr	r3, [pc, #64]	; (80052dc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2b7f      	cmp	r3, #127	; 0x7f
 800529e:	d812      	bhi.n	80052c6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	3301      	adds	r3, #1
 80052a4:	623b      	str	r3, [r7, #32]
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	2b0f      	cmp	r3, #15
 80052aa:	d9b9      	bls.n	8005220 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80052ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ae:	3301      	adds	r3, #1
 80052b0:	627b      	str	r3, [r7, #36]	; 0x24
 80052b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b4:	2b0f      	cmp	r3, #15
 80052b6:	d9a2      	bls.n	80051fe <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80052b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ba:	3301      	adds	r3, #1
 80052bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80052be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c0:	2b0f      	cmp	r3, #15
 80052c2:	d999      	bls.n	80051f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 80052c4:	e000      	b.n	80052c8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 80052c6:	bf00      	nop
          }
        }
      }
    }
  }
}
 80052c8:	373c      	adds	r7, #60	; 0x3c
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	3b9aca00 	.word	0x3b9aca00
 80052d8:	0802b774 	.word	0x0802b774
 80052dc:	201970ec 	.word	0x201970ec
 80052e0:	201966ec 	.word	0x201966ec

080052e4 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b093      	sub	sp, #76	; 0x4c
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0xFFFFFFFFU;
 80052ee:	f04f 33ff 	mov.w	r3, #4294967295
 80052f2:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t clk_max;
  uint32_t scll;
  uint32_t sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	085a      	lsrs	r2, r3, #1
 80052f8:	4b7a      	ldr	r3, [pc, #488]	; (80054e4 <I2C_Compute_SCLL_SCLH+0x200>)
 80052fa:	4413      	add	r3, r2
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8005302:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U)) / I2C_Charac[I2C_speed].freq;
 8005304:	4a78      	ldr	r2, [pc, #480]	; (80054e8 <I2C_Compute_SCLL_SCLH+0x204>)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	212c      	movs	r1, #44	; 0x2c
 800530a:	fb01 f303 	mul.w	r3, r1, r3
 800530e:	4413      	add	r3, r2
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	085a      	lsrs	r2, r3, #1
 8005314:	4b73      	ldr	r3, [pc, #460]	; (80054e4 <I2C_Compute_SCLL_SCLH+0x200>)
 8005316:	4413      	add	r3, r2
 8005318:	4973      	ldr	r1, [pc, #460]	; (80054e8 <I2C_Compute_SCLL_SCLH+0x204>)
 800531a:	683a      	ldr	r2, [r7, #0]
 800531c:	202c      	movs	r0, #44	; 0x2c
 800531e:	fb00 f202 	mul.w	r2, r0, r2
 8005322:	440a      	add	r2, r1
 8005324:	6812      	ldr	r2, [r2, #0]
 8005326:	fbb3 f3f2 	udiv	r3, r3, r2
 800532a:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800532c:	2332      	movs	r3, #50	; 0x32
 800532e:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8005330:	4a6d      	ldr	r2, [pc, #436]	; (80054e8 <I2C_Compute_SCLL_SCLH+0x204>)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	212c      	movs	r1, #44	; 0x2c
 8005336:	fb01 f303 	mul.w	r3, r1, r3
 800533a:	4413      	add	r3, r2
 800533c:	3328      	adds	r3, #40	; 0x28
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005342:	fb02 f303 	mul.w	r3, r2, r3
 8005346:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8005348:	4a67      	ldr	r2, [pc, #412]	; (80054e8 <I2C_Compute_SCLL_SCLH+0x204>)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	212c      	movs	r1, #44	; 0x2c
 800534e:	fb01 f303 	mul.w	r3, r1, r3
 8005352:	4413      	add	r3, r2
 8005354:	3304      	adds	r3, #4
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a62      	ldr	r2, [pc, #392]	; (80054e4 <I2C_Compute_SCLL_SCLH+0x200>)
 800535a:	fbb2 f3f3 	udiv	r3, r2, r3
 800535e:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8005360:	4a61      	ldr	r2, [pc, #388]	; (80054e8 <I2C_Compute_SCLL_SCLH+0x204>)
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	212c      	movs	r1, #44	; 0x2c
 8005366:	fb01 f303 	mul.w	r3, r1, r3
 800536a:	4413      	add	r3, r2
 800536c:	3308      	adds	r3, #8
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a5c      	ldr	r2, [pc, #368]	; (80054e4 <I2C_Compute_SCLL_SCLH+0x200>)
 8005372:	fbb2 f3f3 	udiv	r3, r2, r3
 8005376:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8005378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537a:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800537c:	2300      	movs	r3, #0
 800537e:	637b      	str	r3, [r7, #52]	; 0x34
 8005380:	e0a3      	b.n	80054ca <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005382:	495a      	ldr	r1, [pc, #360]	; (80054ec <I2C_Compute_SCLL_SCLH+0x208>)
 8005384:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005386:	4613      	mov	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	440b      	add	r3, r1
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005396:	fb02 f303 	mul.w	r3, r2, r3
 800539a:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800539c:	2300      	movs	r3, #0
 800539e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053a0:	e08c      	b.n	80054bc <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80053a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	441a      	add	r2, r3
 80053a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053aa:	3301      	adds	r3, #1
 80053ac:	6979      	ldr	r1, [r7, #20]
 80053ae:	fb03 f101 	mul.w	r1, r3, r1
 80053b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	440b      	add	r3, r1
 80053b8:	4413      	add	r3, r2
 80053ba:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80053bc:	4a4a      	ldr	r2, [pc, #296]	; (80054e8 <I2C_Compute_SCLL_SCLH+0x204>)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	212c      	movs	r1, #44	; 0x2c
 80053c2:	fb01 f303 	mul.w	r3, r1, r3
 80053c6:	4413      	add	r3, r2
 80053c8:	3318      	adds	r3, #24
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d971      	bls.n	80054b6 <I2C_Compute_SCLL_SCLH+0x1d2>
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d6:	1ad2      	subs	r2, r2, r3
 80053d8:	6a3b      	ldr	r3, [r7, #32]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	089b      	lsrs	r3, r3, #2
 80053de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d268      	bcs.n	80054b6 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80053e4:	2300      	movs	r3, #0
 80053e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80053e8:	e062      	b.n	80054b0 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80053ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	441a      	add	r2, r3
 80053f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f2:	3301      	adds	r3, #1
 80053f4:	6979      	ldr	r1, [r7, #20]
 80053f6:	fb03 f101 	mul.w	r1, r3, r1
 80053fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fc:	005b      	lsls	r3, r3, #1
 80053fe:	440b      	add	r3, r1
 8005400:	4413      	add	r3, r2
 8005402:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	441a      	add	r2, r3
 800540a:	4937      	ldr	r1, [pc, #220]	; (80054e8 <I2C_Compute_SCLL_SCLH+0x204>)
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	202c      	movs	r0, #44	; 0x2c
 8005410:	fb00 f303 	mul.w	r3, r0, r3
 8005414:	440b      	add	r3, r1
 8005416:	3320      	adds	r3, #32
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	441a      	add	r2, r3
 800541c:	4932      	ldr	r1, [pc, #200]	; (80054e8 <I2C_Compute_SCLL_SCLH+0x204>)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	202c      	movs	r0, #44	; 0x2c
 8005422:	fb00 f303 	mul.w	r3, r0, r3
 8005426:	440b      	add	r3, r1
 8005428:	3324      	adds	r3, #36	; 0x24
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4413      	add	r3, r2
 800542e:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && \
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	429a      	cmp	r2, r3
 8005436:	d338      	bcc.n	80054aa <I2C_Compute_SCLL_SCLH+0x1c6>
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	429a      	cmp	r2, r3
 800543e:	d834      	bhi.n	80054aa <I2C_Compute_SCLL_SCLH+0x1c6>
 8005440:	4a29      	ldr	r2, [pc, #164]	; (80054e8 <I2C_Compute_SCLL_SCLH+0x204>)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	212c      	movs	r1, #44	; 0x2c
 8005446:	fb01 f303 	mul.w	r3, r1, r3
 800544a:	4413      	add	r3, r2
 800544c:	331c      	adds	r3, #28
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	429a      	cmp	r2, r3
 8005454:	d329      	bcc.n	80054aa <I2C_Compute_SCLL_SCLH+0x1c6>
 8005456:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	429a      	cmp	r2, r3
 800545c:	d225      	bcs.n	80054aa <I2C_Compute_SCLL_SCLH+0x1c6>
              (ti2cclk < tscl_h))
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 8005466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005468:	2b00      	cmp	r3, #0
 800546a:	da02      	bge.n	8005472 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 800546c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546e:	425b      	negs	r3, r3
 8005470:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8005472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005474:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005476:	429a      	cmp	r2, r3
 8005478:	d917      	bls.n	80054aa <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800547a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547c:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 800547e:	491b      	ldr	r1, [pc, #108]	; (80054ec <I2C_Compute_SCLL_SCLH+0x208>)
 8005480:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005482:	4613      	mov	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4413      	add	r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	440b      	add	r3, r1
 800548c:	3310      	adds	r3, #16
 800548e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005490:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8005492:	4916      	ldr	r1, [pc, #88]	; (80054ec <I2C_Compute_SCLL_SCLH+0x208>)
 8005494:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005496:	4613      	mov	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4413      	add	r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	440b      	add	r3, r1
 80054a0:	330c      	adds	r3, #12
 80054a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054a4:	601a      	str	r2, [r3, #0]
              ret = count;
 80054a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a8:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80054aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ac:	3301      	adds	r3, #1
 80054ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80054b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b2:	2bff      	cmp	r3, #255	; 0xff
 80054b4:	d999      	bls.n	80053ea <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80054b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054b8:	3301      	adds	r3, #1
 80054ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054be:	2bff      	cmp	r3, #255	; 0xff
 80054c0:	f67f af6f 	bls.w	80053a2 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80054c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c6:	3301      	adds	r3, #1
 80054c8:	637b      	str	r3, [r7, #52]	; 0x34
 80054ca:	4b09      	ldr	r3, [pc, #36]	; (80054f0 <I2C_Compute_SCLL_SCLH+0x20c>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054d0:	429a      	cmp	r2, r3
 80054d2:	f4ff af56 	bcc.w	8005382 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 80054d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80054d8:	4618      	mov	r0, r3
 80054da:	374c      	adds	r7, #76	; 0x4c
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr
 80054e4:	3b9aca00 	.word	0x3b9aca00
 80054e8:	0802b774 	.word	0x0802b774
 80054ec:	201966ec 	.word	0x201966ec
 80054f0:	201970ec 	.word	0x201970ec

080054f4 <I2C5_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C5_MspInit(I2C_HandleTypeDef *hI2c)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b08a      	sub	sp, #40	; 0x28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C5_SCL_GPIO_CLK_ENABLE();
 80054fc:	4b2e      	ldr	r3, [pc, #184]	; (80055b8 <I2C5_MspInit+0xc4>)
 80054fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005502:	4a2d      	ldr	r2, [pc, #180]	; (80055b8 <I2C5_MspInit+0xc4>)
 8005504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005508:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800550c:	4b2a      	ldr	r3, [pc, #168]	; (80055b8 <I2C5_MspInit+0xc4>)
 800550e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005516:	613b      	str	r3, [r7, #16]
 8005518:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C5_SDA_GPIO_CLK_ENABLE();
 800551a:	4b27      	ldr	r3, [pc, #156]	; (80055b8 <I2C5_MspInit+0xc4>)
 800551c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005520:	4a25      	ldr	r2, [pc, #148]	; (80055b8 <I2C5_MspInit+0xc4>)
 8005522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005526:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800552a:	4b23      	ldr	r3, [pc, #140]	; (80055b8 <I2C5_MspInit+0xc4>)
 800552c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C5_SCL_PIN;
 8005538:	2320      	movs	r3, #32
 800553a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 800553c:	2312      	movs	r3, #18
 800553e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 8005540:	2301      	movs	r3, #1
 8005542:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 8005544:	2302      	movs	r3, #2
 8005546:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C5_SCL_AF;
 8005548:	2302      	movs	r3, #2
 800554a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C5_SCL_GPIO_PORT, &gpio_init_structure);
 800554c:	f107 0314 	add.w	r3, r7, #20
 8005550:	4619      	mov	r1, r3
 8005552:	481a      	ldr	r0, [pc, #104]	; (80055bc <I2C5_MspInit+0xc8>)
 8005554:	f004 fc02 	bl	8009d5c <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C5_SDA_PIN;
 8005558:	2310      	movs	r3, #16
 800555a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 800555c:	2312      	movs	r3, #18
 800555e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 8005560:	2301      	movs	r3, #1
 8005562:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 8005564:	2302      	movs	r3, #2
 8005566:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C5_SDA_AF;
 8005568:	2302      	movs	r3, #2
 800556a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C5_SDA_GPIO_PORT, &gpio_init_structure);
 800556c:	f107 0314 	add.w	r3, r7, #20
 8005570:	4619      	mov	r1, r3
 8005572:	4812      	ldr	r0, [pc, #72]	; (80055bc <I2C5_MspInit+0xc8>)
 8005574:	f004 fbf2 	bl	8009d5c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C5_CLK_ENABLE();
 8005578:	4b0f      	ldr	r3, [pc, #60]	; (80055b8 <I2C5_MspInit+0xc4>)
 800557a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800557e:	4a0e      	ldr	r2, [pc, #56]	; (80055b8 <I2C5_MspInit+0xc4>)
 8005580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005584:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8005588:	4b0b      	ldr	r3, [pc, #44]	; (80055b8 <I2C5_MspInit+0xc4>)
 800558a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800558e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005592:	60bb      	str	r3, [r7, #8]
 8005594:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C5_FORCE_RESET();
 8005596:	4b08      	ldr	r3, [pc, #32]	; (80055b8 <I2C5_MspInit+0xc4>)
 8005598:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800559a:	4a07      	ldr	r2, [pc, #28]	; (80055b8 <I2C5_MspInit+0xc4>)
 800559c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055a0:	6793      	str	r3, [r2, #120]	; 0x78

  /* Release the I2C peripheral clock reset */
  BUS_I2C5_RELEASE_RESET();
 80055a2:	4b05      	ldr	r3, [pc, #20]	; (80055b8 <I2C5_MspInit+0xc4>)
 80055a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055a6:	4a04      	ldr	r2, [pc, #16]	; (80055b8 <I2C5_MspInit+0xc4>)
 80055a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055ac:	6793      	str	r3, [r2, #120]	; 0x78
}
 80055ae:	bf00      	nop
 80055b0:	3728      	adds	r7, #40	; 0x28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	46020c00 	.word	0x46020c00
 80055bc:	42021c00 	.word	0x42021c00

080055c0 <I2C5_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C5_MspDeInit(I2C_HandleTypeDef *hI2c)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b088      	sub	sp, #32
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C5_SCL_PIN;
 80055c8:	2320      	movs	r3, #32
 80055ca:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C5_SCL_GPIO_PORT, gpio_init_structure.Pin);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4619      	mov	r1, r3
 80055d0:	480a      	ldr	r0, [pc, #40]	; (80055fc <I2C5_MspDeInit+0x3c>)
 80055d2:	f004 fd9b 	bl	800a10c <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C5_SDA_PIN;
 80055d6:	2310      	movs	r3, #16
 80055d8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C5_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	4619      	mov	r1, r3
 80055de:	4807      	ldr	r0, [pc, #28]	; (80055fc <I2C5_MspDeInit+0x3c>)
 80055e0:	f004 fd94 	bl	800a10c <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C5_CLK_DISABLE();
 80055e4:	4b06      	ldr	r3, [pc, #24]	; (8005600 <I2C5_MspDeInit+0x40>)
 80055e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80055ea:	4a05      	ldr	r2, [pc, #20]	; (8005600 <I2C5_MspDeInit+0x40>)
 80055ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055f0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
}
 80055f4:	bf00      	nop
 80055f6:	3720      	adds	r7, #32
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	42021c00 	.word	0x42021c00
 8005600:	46020c00 	.word	0x46020c00

08005604 <I2C5_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C5_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b088      	sub	sp, #32
 8005608:	af04      	add	r7, sp, #16
 800560a:	607b      	str	r3, [r7, #4]
 800560c:	4603      	mov	r3, r0
 800560e:	81fb      	strh	r3, [r7, #14]
 8005610:	460b      	mov	r3, r1
 8005612:	81bb      	strh	r3, [r7, #12]
 8005614:	4613      	mov	r3, r2
 8005616:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Write(&hbus_i2c5, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 8005618:	8978      	ldrh	r0, [r7, #10]
 800561a:	89ba      	ldrh	r2, [r7, #12]
 800561c:	89f9      	ldrh	r1, [r7, #14]
 800561e:	f242 7310 	movw	r3, #10000	; 0x2710
 8005622:	9302      	str	r3, [sp, #8]
 8005624:	8b3b      	ldrh	r3, [r7, #24]
 8005626:	9301      	str	r3, [sp, #4]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	9300      	str	r3, [sp, #0]
 800562c:	4603      	mov	r3, r0
 800562e:	4807      	ldr	r0, [pc, #28]	; (800564c <I2C5_WriteReg+0x48>)
 8005630:	f005 f96e 	bl	800a910 <HAL_I2C_Mem_Write>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <I2C5_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800563a:	2300      	movs	r3, #0
 800563c:	e001      	b.n	8005642 <I2C5_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800563e:	f06f 0307 	mvn.w	r3, #7
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	201970f0 	.word	0x201970f0

08005650 <I2C5_ReadReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C5_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b088      	sub	sp, #32
 8005654:	af04      	add	r7, sp, #16
 8005656:	607b      	str	r3, [r7, #4]
 8005658:	4603      	mov	r3, r0
 800565a:	81fb      	strh	r3, [r7, #14]
 800565c:	460b      	mov	r3, r1
 800565e:	81bb      	strh	r3, [r7, #12]
 8005660:	4613      	mov	r3, r2
 8005662:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c5, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 8005664:	8978      	ldrh	r0, [r7, #10]
 8005666:	89ba      	ldrh	r2, [r7, #12]
 8005668:	89f9      	ldrh	r1, [r7, #14]
 800566a:	f242 7310 	movw	r3, #10000	; 0x2710
 800566e:	9302      	str	r3, [sp, #8]
 8005670:	8b3b      	ldrh	r3, [r7, #24]
 8005672:	9301      	str	r3, [sp, #4]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	4603      	mov	r3, r0
 800567a:	4807      	ldr	r0, [pc, #28]	; (8005698 <I2C5_ReadReg+0x48>)
 800567c:	f005 fa5c 	bl	800ab38 <HAL_I2C_Mem_Read>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <I2C5_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8005686:	2300      	movs	r3, #0
 8005688:	e001      	b.n	800568e <I2C5_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800568a:	f06f 0307 	mvn.w	r3, #7
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	201970f0 	.word	0x201970f0

0800569c <I2C5_Recv>:
  * @param  pData      The target register value to be received
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C5_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af02      	add	r7, sp, #8
 80056a2:	4603      	mov	r3, r0
 80056a4:	6039      	str	r1, [r7, #0]
 80056a6:	80fb      	strh	r3, [r7, #6]
 80056a8:	4613      	mov	r3, r2
 80056aa:	80bb      	strh	r3, [r7, #4]
  if (HAL_I2C_Master_Receive(&hbus_i2c5, DevAddr, pData, Length, 10000) == HAL_OK)
 80056ac:	88bb      	ldrh	r3, [r7, #4]
 80056ae:	88f9      	ldrh	r1, [r7, #6]
 80056b0:	f242 7210 	movw	r2, #10000	; 0x2710
 80056b4:	9200      	str	r2, [sp, #0]
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	4806      	ldr	r0, [pc, #24]	; (80056d4 <I2C5_Recv+0x38>)
 80056ba:	f005 f833 	bl	800a724 <HAL_I2C_Master_Receive>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <I2C5_Recv+0x2c>
  {
    return BSP_ERROR_NONE;
 80056c4:	2300      	movs	r3, #0
 80056c6:	e001      	b.n	80056cc <I2C5_Recv+0x30>
  }

  return BSP_ERROR_BUS_FAILURE;
 80056c8:	f06f 0307 	mvn.w	r3, #7
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	201970f0 	.word	0x201970f0

080056d8 <BSP_HSPI_RAM_Init>:
  * @param  Instance   HSPI Instance
  * @param  Init       HSPI Init structure
  * @retval BSP status
  */
int32_t BSP_HSPI_RAM_Init(uint32_t Instance, BSP_HSPI_RAM_Cfg_t *Init)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b08a      	sub	sp, #40	; 0x28
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  MX_HSPI_InitTypeDef hspi_init;

  /* Check if the instance is supported */
  if (Instance >= HSPI_RAM_INSTANCES_NUMBER)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d003      	beq.n	80056f0 <BSP_HSPI_RAM_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80056e8:	f06f 0301 	mvn.w	r3, #1
 80056ec:	627b      	str	r3, [r7, #36]	; 0x24
 80056ee:	e066      	b.n	80057be <BSP_HSPI_RAM_Init+0xe6>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Hspi_Ram_Ctx[Instance].IsInitialized == HSPI_ACCESS_NONE)
 80056f0:	4935      	ldr	r1, [pc, #212]	; (80057c8 <BSP_HSPI_RAM_Init+0xf0>)
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	4613      	mov	r3, r2
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	1a9b      	subs	r3, r3, r2
 80056fa:	440b      	add	r3, r1
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d15b      	bne.n	80057ba <BSP_HSPI_RAM_Init+0xe2>
    {
#if (USE_HAL_XSPI_REGISTER_CALLBACKS == 0)
      /* Msp HSPI initialization */
      HSPI_RAM_MspInit(&hhspi_ram[Instance]);
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	4613      	mov	r3, r2
 8005706:	005b      	lsls	r3, r3, #1
 8005708:	4413      	add	r3, r2
 800570a:	015b      	lsls	r3, r3, #5
 800570c:	4a2f      	ldr	r2, [pc, #188]	; (80057cc <BSP_HSPI_RAM_Init+0xf4>)
 800570e:	4413      	add	r3, r2
 8005710:	4618      	mov	r0, r3
 8005712:	f000 fbab 	bl	8005e6c <HSPI_RAM_MspInit>
        }
      }
#endif /* USE_HAL_XSPI_REGISTER_CALLBACKS */

      /* Fill config structure */
      hspi_init.ClockPrescaler = 0; /* HSPI clock = 160MHz / ClockPrescaler = 160MHz */
 8005716:	2300      	movs	r3, #0
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800571e:	61fb      	str	r3, [r7, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	fa93 f3a3 	rbit	r3, r3
 8005726:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	623b      	str	r3, [r7, #32]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800572c:	6a3b      	ldr	r3, [r7, #32]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <BSP_HSPI_RAM_Init+0x5e>
  {
    return 32U;
 8005732:	2320      	movs	r3, #32
 8005734:	e003      	b.n	800573e <BSP_HSPI_RAM_Init+0x66>
  }
  return __builtin_clz(value);
 8005736:	6a3b      	ldr	r3, [r7, #32]
 8005738:	fab3 f383 	clz	r3, r3
 800573c:	b2db      	uxtb	r3, r3
      hspi_init.MemorySize     = (uint32_t)POSITION_VAL(APS512XX_RAM_SIZE);
 800573e:	60bb      	str	r3, [r7, #8]
      hspi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8005740:	2300      	movs	r3, #0
 8005742:	613b      	str	r3, [r7, #16]

      /* STM32 HSPI interface initialization */
      if (MX_HSPI_RAM_Init(&hhspi_ram[Instance], &hspi_init) != HAL_OK)
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	4613      	mov	r3, r2
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	4413      	add	r3, r2
 800574c:	015b      	lsls	r3, r3, #5
 800574e:	4a1f      	ldr	r2, [pc, #124]	; (80057cc <BSP_HSPI_RAM_Init+0xf4>)
 8005750:	4413      	add	r3, r2
 8005752:	f107 0208 	add.w	r2, r7, #8
 8005756:	4611      	mov	r1, r2
 8005758:	4618      	mov	r0, r3
 800575a:	f000 f867 	bl	800582c <MX_HSPI_RAM_Init>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d003      	beq.n	800576c <BSP_HSPI_RAM_Init+0x94>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8005764:	f06f 0303 	mvn.w	r3, #3
 8005768:	627b      	str	r3, [r7, #36]	; 0x24
 800576a:	e028      	b.n	80057be <BSP_HSPI_RAM_Init+0xe6>
      }
      /* Reset the memory */
      else if (APS512XX_Reset(&hhspi_ram[Instance]) != 0)/*APS512XX_OK*/
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	4613      	mov	r3, r2
 8005770:	005b      	lsls	r3, r3, #1
 8005772:	4413      	add	r3, r2
 8005774:	015b      	lsls	r3, r3, #5
 8005776:	4a15      	ldr	r2, [pc, #84]	; (80057cc <BSP_HSPI_RAM_Init+0xf4>)
 8005778:	4413      	add	r3, r2
 800577a:	4618      	mov	r0, r3
 800577c:	f7fe fc19 	bl	8003fb2 <APS512XX_Reset>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <BSP_HSPI_RAM_Init+0xb6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005786:	f06f 0304 	mvn.w	r3, #4
 800578a:	627b      	str	r3, [r7, #36]	; 0x24
 800578c:	e017      	b.n	80057be <BSP_HSPI_RAM_Init+0xe6>
      }
      /* Configure the memory */
      else if (BSP_HSPI_RAM_Config16BitsOctalRAM(Instance, Init) != BSP_ERROR_NONE)
 800578e:	6839      	ldr	r1, [r7, #0]
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 f957 	bl	8005a44 <BSP_HSPI_RAM_Config16BitsOctalRAM>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d003      	beq.n	80057a4 <BSP_HSPI_RAM_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800579c:	f06f 0304 	mvn.w	r3, #4
 80057a0:	627b      	str	r3, [r7, #36]	; 0x24
 80057a2:	e00c      	b.n	80057be <BSP_HSPI_RAM_Init+0xe6>
      }
      else
      {
        Hspi_Ram_Ctx[Instance].IsInitialized = HSPI_ACCESS_INDIRECT;
 80057a4:	4908      	ldr	r1, [pc, #32]	; (80057c8 <BSP_HSPI_RAM_Init+0xf0>)
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	4613      	mov	r3, r2
 80057aa:	00db      	lsls	r3, r3, #3
 80057ac:	1a9b      	subs	r3, r3, r2
 80057ae:	440b      	add	r3, r1
 80057b0:	2201      	movs	r2, #1
 80057b2:	701a      	strb	r2, [r3, #0]
        ret = BSP_ERROR_NONE;
 80057b4:	2300      	movs	r3, #0
 80057b6:	627b      	str	r3, [r7, #36]	; 0x24
 80057b8:	e001      	b.n	80057be <BSP_HSPI_RAM_Init+0xe6>
      }
    }
    else
    {
      ret = BSP_ERROR_NONE;
 80057ba:	2300      	movs	r3, #0
 80057bc:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  /* Return BSP status */
  return ret;
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3728      	adds	r7, #40	; 0x28
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	20000040 	.word	0x20000040
 80057cc:	20197144 	.word	0x20197144

080057d0 <Tuning_HSPI_Write>:
  * @brief  Tuning the HSPI write.
  * @param  hhspi          HSPI handle
  * @retval BSP status
  */
static int32_t Tuning_HSPI_Write(XSPI_HandleTypeDef *hhspi)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b088      	sub	sp, #32
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80057d8:	2300      	movs	r3, #0
 80057da:	61fb      	str	r3, [r7, #28]
  XSPI_HSCalTypeDef sCfg;

  hhspi->Instance = HSPI1;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a12      	ldr	r2, [pc, #72]	; (8005828 <Tuning_HSPI_Write+0x58>)
 80057e0:	601a      	str	r2, [r3, #0]
  hhspi->State    = HAL_XSPI_STATE_READY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2202      	movs	r2, #2
 80057e6:	655a      	str	r2, [r3, #84]	; 0x54

  sCfg.DelayValueType        = HAL_XSPI_CAL_DATA_OUTPUT_DELAY;
 80057e8:	2302      	movs	r3, #2
 80057ea:	60fb      	str	r3, [r7, #12]
  sCfg.FineCalibrationUnit   = 0x11;
 80057ec:	2311      	movs	r3, #17
 80057ee:	613b      	str	r3, [r7, #16]
  sCfg.CoarseCalibrationUnit = 0x05;
 80057f0:	2305      	movs	r3, #5
 80057f2:	617b      	str	r3, [r7, #20]
  sCfg.MaxCalibration        = HAL_XSPI_MAXCAL_REACHED;
 80057f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80057f8:	61bb      	str	r3, [r7, #24]
  if (HAL_XSPI_SetDelayValue(hhspi, &sCfg) != HAL_OK)
 80057fa:	f107 030c 	add.w	r3, r7, #12
 80057fe:	4619      	mov	r1, r3
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f00d ffef 	bl	80137e4 <HAL_XSPI_SetDelayValue>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d007      	beq.n	800581c <Tuning_HSPI_Write+0x4c>
  {
    if (hhspi->Instance == HSPI1)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a05      	ldr	r2, [pc, #20]	; (8005828 <Tuning_HSPI_Write+0x58>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d102      	bne.n	800581c <Tuning_HSPI_Write+0x4c>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005816:	f06f 0303 	mvn.w	r3, #3
 800581a:	61fb      	str	r3, [r7, #28]
    }
  }

  /* Return BSP status */
  return ret;
 800581c:	69fb      	ldr	r3, [r7, #28]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3720      	adds	r7, #32
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	420d3400 	.word	0x420d3400

0800582c <MX_HSPI_RAM_Init>:
  * @param  hhspi          HSPI handle
  * @param  Init           HSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_HSPI_RAM_Init(XSPI_HandleTypeDef *hhspi, MX_HSPI_InitTypeDef *Init)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t hspi_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_HSPI);
 8005836:	f04f 0000 	mov.w	r0, #0
 800583a:	f04f 0101 	mov.w	r1, #1
 800583e:	f009 f9d3 	bl	800ebe8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005842:	60f8      	str	r0, [r7, #12]

  /* HSPI initialization */
  hhspi->Instance = HSPI1;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a24      	ldr	r2, [pc, #144]	; (80058d8 <MX_HSPI_RAM_Init+0xac>)
 8005848:	601a      	str	r2, [r3, #0]

  hhspi->Init.FifoThresholdByte       = 2U;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2202      	movs	r2, #2
 800584e:	605a      	str	r2, [r3, #4]
  hhspi->Init.MemoryMode              = HAL_XSPI_SINGLE_MEM;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	609a      	str	r2, [r3, #8]
  hhspi->Init.MemoryType              = HAL_XSPI_MEMTYPE_APMEM_16BITS;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800585c:	60da      	str	r2, [r3, #12]
  hhspi->Init.MemorySize              = Init->MemorySize;
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	611a      	str	r2, [r3, #16]
  hhspi->Init.ChipSelectHighTimeCycle = 1U;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	615a      	str	r2, [r3, #20]
  hhspi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	619a      	str	r2, [r3, #24]
  hhspi->Init.ClockMode               = HAL_XSPI_CLOCK_MODE_0;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	61da      	str	r2, [r3, #28]
  hhspi->Init.WrapSize                = HAL_XSPI_WRAP_32_BYTES;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800587e:	621a      	str	r2, [r3, #32]
  hhspi->Init.ClockPrescaler          = Init->ClockPrescaler;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	625a      	str	r2, [r3, #36]	; 0x24
  hhspi->Init.SampleShifting          = Init->SampleShifting;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	689a      	ldr	r2, [r3, #8]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	629a      	str	r2, [r3, #40]	; 0x28
  hhspi->Init.DelayHoldQuarterCycle   = HAL_XSPI_DHQC_DISABLE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	62da      	str	r2, [r3, #44]	; 0x2c
  hhspi->Init.ChipSelectBoundary      = 11U;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	220b      	movs	r2, #11
 800589a:	631a      	str	r2, [r3, #48]	; 0x30
  hhspi->Init.DelayBlockBypass        = HAL_XSPI_DELAY_BLOCK_ON;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	635a      	str	r2, [r3, #52]	; 0x34
  /* tCEM = 2 us max => REFRESH+4 clock cycles for read */
  hhspi->Init.Refresh                 = ((2U * (hspi_clk / (Init->ClockPrescaler + 1))) / 1000000U) - 4U;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	3301      	adds	r3, #1
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ae:	005b      	lsls	r3, r3, #1
 80058b0:	4a0a      	ldr	r2, [pc, #40]	; (80058dc <MX_HSPI_RAM_Init+0xb0>)
 80058b2:	fba2 2303 	umull	r2, r3, r2, r3
 80058b6:	0c9b      	lsrs	r3, r3, #18
 80058b8:	1f1a      	subs	r2, r3, #4
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hhspi->Init.MaxTran                 = 0U;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	639a      	str	r2, [r3, #56]	; 0x38

  status = HAL_XSPI_Init(hhspi);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f00d f9d5 	bl	8012c74 <HAL_XSPI_Init>
 80058ca:	4603      	mov	r3, r0
 80058cc:	72fb      	strb	r3, [r7, #11]

  return status;
 80058ce:	7afb      	ldrb	r3, [r7, #11]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	420d3400 	.word	0x420d3400
 80058dc:	431bde83 	.word	0x431bde83

080058e0 <BSP_HSPI_RAM_EnableMemoryMappedMode>:
  * @brief  Configure the HSPI in memory-mapped mode
  * @param  Instance  HSPI instance
  * @retval BSP status
  */
int32_t BSP_HSPI_RAM_EnableMemoryMappedMode(uint32_t Instance)
{
 80058e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058e2:	b087      	sub	sp, #28
 80058e4:	af02      	add	r7, sp, #8
 80058e6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80058e8:	2300      	movs	r3, #0
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= HSPI_RAM_INSTANCES_NUMBER)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <BSP_HSPI_RAM_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80058f2:	f06f 0301 	mvn.w	r3, #1
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	e09a      	b.n	8005a30 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x150>
  }
  else
  {
    if (Tuning_HSPI_Write(&hhspi_ram[Instance]) != 0UL)
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	4613      	mov	r3, r2
 80058fe:	005b      	lsls	r3, r3, #1
 8005900:	4413      	add	r3, r2
 8005902:	015b      	lsls	r3, r3, #5
 8005904:	4a4d      	ldr	r2, [pc, #308]	; (8005a3c <BSP_HSPI_RAM_EnableMemoryMappedMode+0x15c>)
 8005906:	4413      	add	r3, r2
 8005908:	4618      	mov	r0, r3
 800590a:	f7ff ff61 	bl	80057d0 <Tuning_HSPI_Write>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d003      	beq.n	800591c <BSP_HSPI_RAM_EnableMemoryMappedMode+0x3c>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005914:	f06f 0303 	mvn.w	r3, #3
 8005918:	60fb      	str	r3, [r7, #12]
 800591a:	e089      	b.n	8005a30 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x150>
    }
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	4613      	mov	r3, r2
 8005920:	005b      	lsls	r3, r3, #1
 8005922:	4413      	add	r3, r2
 8005924:	015b      	lsls	r3, r3, #5
 8005926:	4a45      	ldr	r2, [pc, #276]	; (8005a3c <BSP_HSPI_RAM_EnableMemoryMappedMode+0x15c>)
 8005928:	189c      	adds	r4, r3, r2
                                             (uint32_t)APS512XX_READ_LATENCY((uint32_t)((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode)),
 800592a:	4945      	ldr	r1, [pc, #276]	; (8005a40 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	4613      	mov	r3, r2
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	1a9b      	subs	r3, r3, r2
 8005934:	440b      	add	r3, r1
 8005936:	3301      	adds	r3, #1
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	f003 0320 	and.w	r3, r3, #32
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10c      	bne.n	800595c <BSP_HSPI_RAM_EnableMemoryMappedMode+0x7c>
                                             (uint32_t)APS512XX_READ_LATENCY((uint32_t)((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode)),
 8005942:	493f      	ldr	r1, [pc, #252]	; (8005a40 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	4613      	mov	r3, r2
 8005948:	00db      	lsls	r3, r3, #3
 800594a:	1a9b      	subs	r3, r3, r2
 800594c:	440b      	add	r3, r1
 800594e:	3302      	adds	r3, #2
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	089b      	lsrs	r3, r3, #2
 8005954:	f003 0307 	and.w	r3, r3, #7
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 8005958:	1cd9      	adds	r1, r3, #3
 800595a:	e00c      	b.n	8005976 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x96>
                                             (uint32_t)APS512XX_READ_LATENCY((uint32_t)((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode)),
 800595c:	4938      	ldr	r1, [pc, #224]	; (8005a40 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	4613      	mov	r3, r2
 8005962:	00db      	lsls	r3, r3, #3
 8005964:	1a9b      	subs	r3, r3, r2
 8005966:	440b      	add	r3, r1
 8005968:	3302      	adds	r3, #2
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	089b      	lsrs	r3, r3, #2
 800596e:	f003 0307 	and.w	r3, r3, #7
 8005972:	3303      	adds	r3, #3
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 8005974:	0059      	lsls	r1, r3, #1
                                                                             (uint32_t)(Hspi_Ram_Ctx[Instance].LatencyType)),
                                             APS512XX_WRITE_LATENCY((uint32_t)(Hspi_Ram_Ctx[Instance].WriteLatencyCode)),
 8005976:	4832      	ldr	r0, [pc, #200]	; (8005a40 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	4613      	mov	r3, r2
 800597c:	00db      	lsls	r3, r3, #3
 800597e:	1a9b      	subs	r3, r3, r2
 8005980:	4403      	add	r3, r0
 8005982:	3303      	adds	r3, #3
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 800598a:	2b00      	cmp	r3, #0
 800598c:	d02a      	beq.n	80059e4 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x104>
                                             APS512XX_WRITE_LATENCY((uint32_t)(Hspi_Ram_Ctx[Instance].WriteLatencyCode)),
 800598e:	482c      	ldr	r0, [pc, #176]	; (8005a40 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	4613      	mov	r3, r2
 8005994:	00db      	lsls	r3, r3, #3
 8005996:	1a9b      	subs	r3, r3, r2
 8005998:	4403      	add	r3, r0
 800599a:	3303      	adds	r3, #3
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	f003 0320 	and.w	r3, r3, #32
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d11c      	bne.n	80059e0 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x100>
 80059a6:	4826      	ldr	r0, [pc, #152]	; (8005a40 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	4613      	mov	r3, r2
 80059ac:	00db      	lsls	r3, r3, #3
 80059ae:	1a9b      	subs	r3, r3, r2
 80059b0:	4403      	add	r3, r0
 80059b2:	3303      	adds	r3, #3
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00e      	beq.n	80059dc <BSP_HSPI_RAM_EnableMemoryMappedMode+0xfc>
 80059be:	4820      	ldr	r0, [pc, #128]	; (8005a40 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	4613      	mov	r3, r2
 80059c4:	00db      	lsls	r3, r3, #3
 80059c6:	1a9b      	subs	r3, r3, r2
 80059c8:	4403      	add	r3, r0
 80059ca:	3303      	adds	r3, #3
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	b25b      	sxtb	r3, r3
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	db01      	blt.n	80059d8 <BSP_HSPI_RAM_EnableMemoryMappedMode+0xf8>
 80059d4:	2205      	movs	r2, #5
 80059d6:	e006      	b.n	80059e6 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x106>
 80059d8:	2206      	movs	r2, #6
 80059da:	e004      	b.n	80059e6 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x106>
 80059dc:	2204      	movs	r2, #4
 80059de:	e002      	b.n	80059e6 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x106>
 80059e0:	2207      	movs	r2, #7
 80059e2:	e000      	b.n	80059e6 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x106>
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 80059e4:	2203      	movs	r2, #3
                                             (uint32_t)(Hspi_Ram_Ctx[Instance].IOMode),
 80059e6:	4d16      	ldr	r5, [pc, #88]	; (8005a40 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	4603      	mov	r3, r0
 80059ec:	00db      	lsls	r3, r3, #3
 80059ee:	1a1b      	subs	r3, r3, r0
 80059f0:	442b      	add	r3, r5
 80059f2:	3306      	adds	r3, #6
 80059f4:	781b      	ldrb	r3, [r3, #0]
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 80059f6:	461e      	mov	r6, r3
                                             (uint32_t)(Hspi_Ram_Ctx[Instance].BurstType)) != (int32_t)APS512XX_OK)
 80059f8:	4d11      	ldr	r5, [pc, #68]	; (8005a40 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	4603      	mov	r3, r0
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	1a1b      	subs	r3, r3, r0
 8005a02:	442b      	add	r3, r5
 8005a04:	3304      	adds	r3, #4
 8005a06:	781b      	ldrb	r3, [r3, #0]
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	4633      	mov	r3, r6
 8005a0c:	4620      	mov	r0, r4
 8005a0e:	f7fe f9ad 	bl	8003d6c <APS512XX_EnableMemoryMappedMode>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d003      	beq.n	8005a20 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x140>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a18:	f06f 0304 	mvn.w	r3, #4
 8005a1c:	60fb      	str	r3, [r7, #12]
 8005a1e:	e007      	b.n	8005a30 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x150>
    }
    else /* Update HSPI context if all operations are well done */
    {
      Hspi_Ram_Ctx[Instance].IsInitialized = HSPI_ACCESS_MMP;
 8005a20:	4907      	ldr	r1, [pc, #28]	; (8005a40 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	4613      	mov	r3, r2
 8005a26:	00db      	lsls	r3, r3, #3
 8005a28:	1a9b      	subs	r3, r3, r2
 8005a2a:	440b      	add	r3, r1
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Return BSP status */
  return ret;
 8005a30:	68fb      	ldr	r3, [r7, #12]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	20197144 	.word	0x20197144
 8005a40:	20000040 	.word	0x20000040

08005a44 <BSP_HSPI_RAM_Config16BitsOctalRAM>:
  * @param  Instance    HSPI instance
  * @param  Cfg         pointer to the RAM config
  * @retval BSP status
  */
int32_t BSP_HSPI_RAM_Config16BitsOctalRAM(uint32_t Instance, BSP_HSPI_RAM_Cfg_t *Cfg)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Check if the instance is supported */
  if ((Instance >= HSPI_RAM_INSTANCES_NUMBER)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d103      	bne.n	8005a60 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x1c>
      || (Cfg->BurstLength == (BSP_HSPI_RAM_BurstLength_t)APS512XX_MR8_BL_2K_BYTES))
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	791b      	ldrb	r3, [r3, #4]
 8005a5c:	2b03      	cmp	r3, #3
 8005a5e:	d103      	bne.n	8005a68 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x24>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005a60:	f06f 0301 	mvn.w	r3, #1
 8005a64:	60fb      	str	r3, [r7, #12]
 8005a66:	e1f7      	b.n	8005e58 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x414>
  }
  else
  {
    /* Check if MMP mode locked ***********************************************/
    if (Hspi_Ram_Ctx[Instance].IsInitialized == HSPI_ACCESS_MMP)
 8005a68:	49a9      	ldr	r1, [pc, #676]	; (8005d10 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	1a9b      	subs	r3, r3, r2
 8005a72:	440b      	add	r3, r1
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d103      	bne.n	8005a82 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x3e>
    {
      ret = BSP_ERROR_HSPI_MMP_LOCK_FAILURE;
 8005a7a:	f06f 031f 	mvn.w	r3, #31
 8005a7e:	60fb      	str	r3, [r7, #12]
 8005a80:	e1ea      	b.n	8005e58 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x414>
    }
    else
    {
      if ((Hspi_Ram_Ctx[Instance].IsInitialized  == HSPI_ACCESS_NONE) ||
 8005a82:	49a3      	ldr	r1, [pc, #652]	; (8005d10 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	4613      	mov	r3, r2
 8005a88:	00db      	lsls	r3, r3, #3
 8005a8a:	1a9b      	subs	r3, r3, r2
 8005a8c:	440b      	add	r3, r1
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d017      	beq.n	8005ac4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x80>
          (Hspi_Ram_Ctx[Instance].LatencyType     != Cfg->LatencyType)  ||
 8005a94:	499e      	ldr	r1, [pc, #632]	; (8005d10 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	00db      	lsls	r3, r3, #3
 8005a9c:	1a9b      	subs	r3, r3, r2
 8005a9e:	440b      	add	r3, r1
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	781a      	ldrb	r2, [r3, #0]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
      if ((Hspi_Ram_Ctx[Instance].IsInitialized  == HSPI_ACCESS_NONE) ||
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d10b      	bne.n	8005ac4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x80>
          (Hspi_Ram_Ctx[Instance].ReadLatencyCode != Cfg->ReadLatencyCode))
 8005aac:	4998      	ldr	r1, [pc, #608]	; (8005d10 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	1a9b      	subs	r3, r3, r2
 8005ab6:	440b      	add	r3, r1
 8005ab8:	3302      	adds	r3, #2
 8005aba:	781a      	ldrb	r2, [r3, #0]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	785b      	ldrb	r3, [r3, #1]
          (Hspi_Ram_Ctx[Instance].LatencyType     != Cfg->LatencyType)  ||
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d040      	beq.n	8005b46 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x102>
      {
        /* Reading the configuration of Mode Register 0 ***********************/
        if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR0_ADDRESS, reg,
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	4413      	add	r3, r2
 8005acc:	015b      	lsls	r3, r3, #5
 8005ace:	4a91      	ldr	r2, [pc, #580]	; (8005d14 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 8005ad0:	1898      	adds	r0, r3, r2
                             (uint32_t)APS512XX_READ_REG_LATENCY((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode))) != \
 8005ad2:	498f      	ldr	r1, [pc, #572]	; (8005d10 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	00db      	lsls	r3, r3, #3
 8005ada:	1a9b      	subs	r3, r3, r2
 8005adc:	440b      	add	r3, r1
 8005ade:	3302      	adds	r3, #2
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	089b      	lsrs	r3, r3, #2
 8005ae4:	f003 0307 	and.w	r3, r3, #7
        if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR0_ADDRESS, reg,
 8005ae8:	3303      	adds	r3, #3
 8005aea:	f107 0208 	add.w	r2, r7, #8
 8005aee:	2100      	movs	r1, #0
 8005af0:	f7fe f9b8 	bl	8003e64 <APS512XX_ReadReg>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <BSP_HSPI_RAM_Config16BitsOctalRAM+0xbe>
            (int32_t)APS512XX_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8005afa:	f06f 0304 	mvn.w	r3, #4
 8005afe:	60fb      	str	r3, [r7, #12]
 8005b00:	e021      	b.n	8005b46 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x102>
        }
        else
        {
          /* Configure the 16-bits Octal RAM memory ***************************/
          MODIFY_REG(reg[0], ((uint32_t)APS512XX_MR0_LATENCY_TYPE | (uint32_t)APS512XX_MR0_READ_LATENCY_CODE |
 8005b02:	7a3b      	ldrb	r3, [r7, #8]
 8005b04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	7819      	ldrb	r1, [r3, #0]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	785b      	ldrb	r3, [r3, #1]
 8005b12:	430b      	orrs	r3, r1
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	4313      	orrs	r3, r2
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	f043 0301 	orr.w	r3, r3, #1
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	723b      	strb	r3, [r7, #8]
                              (uint32_t)APS512XX_MR0_DRIVE_STRENGTH),
                     ((uint32_t)(Cfg->LatencyType) | (uint32_t)(Cfg->ReadLatencyCode) | (uint32_t)CONF_HSPI_DS));

          if (APS512XX_WriteReg(&hhspi_ram[Instance], APS512XX_MR0_ADDRESS, reg[0]) != APS512XX_OK)
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	4613      	mov	r3, r2
 8005b26:	005b      	lsls	r3, r3, #1
 8005b28:	4413      	add	r3, r2
 8005b2a:	015b      	lsls	r3, r3, #5
 8005b2c:	4a79      	ldr	r2, [pc, #484]	; (8005d14 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 8005b2e:	4413      	add	r3, r2
 8005b30:	7a3a      	ldrb	r2, [r7, #8]
 8005b32:	2100      	movs	r1, #0
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7fe f9e9 	bl	8003f0c <APS512XX_WriteReg>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d002      	beq.n	8005b46 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x102>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8005b40:	f06f 0304 	mvn.w	r3, #4
 8005b44:	60fb      	str	r3, [r7, #12]
          }
          /* Configure the peripheral *****************************************/
        }
      }

      if (ret == BSP_ERROR_NONE)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d148      	bne.n	8005bde <BSP_HSPI_RAM_Config16BitsOctalRAM+0x19a>
      {
        if ((Hspi_Ram_Ctx[Instance].IsInitialized   == HSPI_ACCESS_NONE) ||
 8005b4c:	4970      	ldr	r1, [pc, #448]	; (8005d10 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	4613      	mov	r3, r2
 8005b52:	00db      	lsls	r3, r3, #3
 8005b54:	1a9b      	subs	r3, r3, r2
 8005b56:	440b      	add	r3, r1
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00b      	beq.n	8005b76 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x132>
            (Hspi_Ram_Ctx[Instance].WriteLatencyCode != Cfg->WriteLatencyCode))
 8005b5e:	496c      	ldr	r1, [pc, #432]	; (8005d10 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	4613      	mov	r3, r2
 8005b64:	00db      	lsls	r3, r3, #3
 8005b66:	1a9b      	subs	r3, r3, r2
 8005b68:	440b      	add	r3, r1
 8005b6a:	3303      	adds	r3, #3
 8005b6c:	781a      	ldrb	r2, [r3, #0]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	789b      	ldrb	r3, [r3, #2]
        if ((Hspi_Ram_Ctx[Instance].IsInitialized   == HSPI_ACCESS_NONE) ||
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d033      	beq.n	8005bde <BSP_HSPI_RAM_Config16BitsOctalRAM+0x19a>
        {
          /* Reading the configuration of Mode Register 4 ***********************/
          if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR4_ADDRESS, reg,
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	005b      	lsls	r3, r3, #1
 8005b7c:	4413      	add	r3, r2
 8005b7e:	015b      	lsls	r3, r3, #5
 8005b80:	4a64      	ldr	r2, [pc, #400]	; (8005d14 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 8005b82:	1898      	adds	r0, r3, r2
                               (uint32_t)APS512XX_READ_REG_LATENCY((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode))) != (int32_t)APS512XX_OK)
 8005b84:	4962      	ldr	r1, [pc, #392]	; (8005d10 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	1a9b      	subs	r3, r3, r2
 8005b8e:	440b      	add	r3, r1
 8005b90:	3302      	adds	r3, #2
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	089b      	lsrs	r3, r3, #2
 8005b96:	f003 0307 	and.w	r3, r3, #7
          if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR4_ADDRESS, reg,
 8005b9a:	3303      	adds	r3, #3
 8005b9c:	f107 0208 	add.w	r2, r7, #8
 8005ba0:	2104      	movs	r1, #4
 8005ba2:	f7fe f95f 	bl	8003e64 <APS512XX_ReadReg>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x170>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8005bac:	f06f 0304 	mvn.w	r3, #4
 8005bb0:	60fb      	str	r3, [r7, #12]
 8005bb2:	e014      	b.n	8005bde <BSP_HSPI_RAM_Config16BitsOctalRAM+0x19a>
          }
          else
          {
            /* Configure the 16-bits Octal RAM memory ***************************/
            MODIFY_REG(reg[0], (APS512XX_MR4_WRITE_LATENCY_CODE | APS512XX_MR4_RF_RATE | APS512XX_MR4_PASR),
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	789b      	ldrb	r3, [r3, #2]
 8005bb8:	723b      	strb	r3, [r7, #8]
                       (Cfg->WriteLatencyCode | CONF_HSPI_RF | CONF_HSPI_PASR));

            if (APS512XX_WriteReg(&hhspi_ram[Instance], APS512XX_MR4_ADDRESS, reg[0]) != APS512XX_OK)
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	4413      	add	r3, r2
 8005bc2:	015b      	lsls	r3, r3, #5
 8005bc4:	4a53      	ldr	r2, [pc, #332]	; (8005d14 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 8005bc6:	4413      	add	r3, r2
 8005bc8:	7a3a      	ldrb	r2, [r7, #8]
 8005bca:	2104      	movs	r1, #4
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7fe f99d 	bl	8003f0c <APS512XX_WriteReg>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d002      	beq.n	8005bde <BSP_HSPI_RAM_Config16BitsOctalRAM+0x19a>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8005bd8:	f06f 0304 	mvn.w	r3, #4
 8005bdc:	60fb      	str	r3, [r7, #12]
            }
          }
        }
      }

      if (ret == BSP_ERROR_NONE)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f040 80ec 	bne.w	8005dbe <BSP_HSPI_RAM_Config16BitsOctalRAM+0x37a>
      {
        if ((Hspi_Ram_Ctx[Instance].IsInitialized == HSPI_ACCESS_NONE)  ||
 8005be6:	494a      	ldr	r1, [pc, #296]	; (8005d10 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	4613      	mov	r3, r2
 8005bec:	00db      	lsls	r3, r3, #3
 8005bee:	1a9b      	subs	r3, r3, r2
 8005bf0:	440b      	add	r3, r1
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d024      	beq.n	8005c42 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x1fe>
            (Hspi_Ram_Ctx[Instance].BurstType      != Cfg->BurstType)   ||
 8005bf8:	4945      	ldr	r1, [pc, #276]	; (8005d10 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	1a9b      	subs	r3, r3, r2
 8005c02:	440b      	add	r3, r1
 8005c04:	3304      	adds	r3, #4
 8005c06:	781a      	ldrb	r2, [r3, #0]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	78db      	ldrb	r3, [r3, #3]
        if ((Hspi_Ram_Ctx[Instance].IsInitialized == HSPI_ACCESS_NONE)  ||
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d118      	bne.n	8005c42 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x1fe>
            (Hspi_Ram_Ctx[Instance].BurstLength    != Cfg->BurstLength) ||
 8005c10:	493f      	ldr	r1, [pc, #252]	; (8005d10 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	4613      	mov	r3, r2
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	1a9b      	subs	r3, r3, r2
 8005c1a:	440b      	add	r3, r1
 8005c1c:	3305      	adds	r3, #5
 8005c1e:	781a      	ldrb	r2, [r3, #0]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	791b      	ldrb	r3, [r3, #4]
            (Hspi_Ram_Ctx[Instance].BurstType      != Cfg->BurstType)   ||
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d10c      	bne.n	8005c42 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x1fe>
            (Hspi_Ram_Ctx[Instance].IOMode         != Cfg->IOMode))
 8005c28:	4939      	ldr	r1, [pc, #228]	; (8005d10 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	00db      	lsls	r3, r3, #3
 8005c30:	1a9b      	subs	r3, r3, r2
 8005c32:	440b      	add	r3, r1
 8005c34:	3306      	adds	r3, #6
 8005c36:	781a      	ldrb	r2, [r3, #0]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	795b      	ldrb	r3, [r3, #5]
            (Hspi_Ram_Ctx[Instance].BurstLength    != Cfg->BurstLength) ||
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	f000 80be 	beq.w	8005dbe <BSP_HSPI_RAM_Config16BitsOctalRAM+0x37a>
        {
          /* Reading the configuration of Mode Register 8 ***********************/
          if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR8_ADDRESS, reg,
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	4613      	mov	r3, r2
 8005c46:	005b      	lsls	r3, r3, #1
 8005c48:	4413      	add	r3, r2
 8005c4a:	015b      	lsls	r3, r3, #5
 8005c4c:	4a31      	ldr	r2, [pc, #196]	; (8005d14 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 8005c4e:	1898      	adds	r0, r3, r2
                               (uint32_t)APS512XX_READ_REG_LATENCY((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode))) != (int32_t)APS512XX_OK)
 8005c50:	492f      	ldr	r1, [pc, #188]	; (8005d10 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	4613      	mov	r3, r2
 8005c56:	00db      	lsls	r3, r3, #3
 8005c58:	1a9b      	subs	r3, r3, r2
 8005c5a:	440b      	add	r3, r1
 8005c5c:	3302      	adds	r3, #2
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	089b      	lsrs	r3, r3, #2
 8005c62:	f003 0307 	and.w	r3, r3, #7
          if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR8_ADDRESS, reg,
 8005c66:	3303      	adds	r3, #3
 8005c68:	f107 0208 	add.w	r2, r7, #8
 8005c6c:	2108      	movs	r1, #8
 8005c6e:	f7fe f8f9 	bl	8003e64 <APS512XX_ReadReg>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d003      	beq.n	8005c80 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x23c>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8005c78:	f06f 0304 	mvn.w	r3, #4
 8005c7c:	60fb      	str	r3, [r7, #12]
 8005c7e:	e09e      	b.n	8005dbe <BSP_HSPI_RAM_Config16BitsOctalRAM+0x37a>
          }
          else
          {
            /* Configure the 16-bits Octal RAM memory ***************************/
            MODIFY_REG(reg[0], ((uint32_t)APS512XX_MR8_X8_X16 | (uint32_t)APS512XX_MR8_BL),
 8005c80:	7a3b      	ldrb	r3, [r7, #8]
 8005c82:	f023 0343 	bic.w	r3, r3, #67	; 0x43
 8005c86:	b2da      	uxtb	r2, r3
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	7959      	ldrb	r1, [r3, #5]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	791b      	ldrb	r3, [r3, #4]
 8005c90:	430b      	orrs	r3, r1
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	4313      	orrs	r3, r2
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	723b      	strb	r3, [r7, #8]
                       ((uint32_t)(Cfg->IOMode) | (uint32_t)(Cfg->BurstLength)));

            if (APS512XX_WriteReg(&hhspi_ram[Instance], APS512XX_MR8_ADDRESS, reg[0]) != APS512XX_OK)
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	4413      	add	r3, r2
 8005ca2:	015b      	lsls	r3, r3, #5
 8005ca4:	4a1b      	ldr	r2, [pc, #108]	; (8005d14 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 8005ca6:	4413      	add	r3, r2
 8005ca8:	7a3a      	ldrb	r2, [r7, #8]
 8005caa:	2108      	movs	r1, #8
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7fe f92d 	bl	8003f0c <APS512XX_WriteReg>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d003      	beq.n	8005cc0 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x27c>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8005cb8:	f06f 0304 	mvn.w	r3, #4
 8005cbc:	60fb      	str	r3, [r7, #12]
 8005cbe:	e07e      	b.n	8005dbe <BSP_HSPI_RAM_Config16BitsOctalRAM+0x37a>
            }
            else
            {
              /* Configure the peripheral *****************************************/
              if (Cfg->BurstType == BSP_HSPI_RAM_HYBRID_BURST)
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	78db      	ldrb	r3, [r3, #3]
 8005cc4:	2b04      	cmp	r3, #4
 8005cc6:	d133      	bne.n	8005d30 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2ec>
              {
                switch (Cfg->BurstLength)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	791b      	ldrb	r3, [r3, #4]
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d023      	beq.n	8005d18 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d4>
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	dc38      	bgt.n	8005d46 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x302>
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d002      	beq.n	8005cde <BSP_HSPI_RAM_Config16BitsOctalRAM+0x29a>
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d00c      	beq.n	8005cf6 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2b2>
                    break;
                  case APS512XX_MR8_BL_64_BYTES :
                    hhspi_ram[Instance].Init.WrapSize = HAL_XSPI_WRAP_64_BYTES;
                    break;
                  default :
                    break;
 8005cdc:	e033      	b.n	8005d46 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x302>
                    hhspi_ram[Instance].Init.WrapSize = HAL_XSPI_WRAP_16_BYTES;
 8005cde:	490d      	ldr	r1, [pc, #52]	; (8005d14 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	005b      	lsls	r3, r3, #1
 8005ce6:	4413      	add	r3, r2
 8005ce8:	015b      	lsls	r3, r3, #5
 8005cea:	440b      	add	r3, r1
 8005cec:	3320      	adds	r3, #32
 8005cee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005cf2:	601a      	str	r2, [r3, #0]
                    break;
 8005cf4:	e028      	b.n	8005d48 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x304>
                    hhspi_ram[Instance].Init.WrapSize = HAL_XSPI_WRAP_32_BYTES;
 8005cf6:	4907      	ldr	r1, [pc, #28]	; (8005d14 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	4413      	add	r3, r2
 8005d00:	015b      	lsls	r3, r3, #5
 8005d02:	440b      	add	r3, r1
 8005d04:	3320      	adds	r3, #32
 8005d06:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005d0a:	601a      	str	r2, [r3, #0]
                    break;
 8005d0c:	e01c      	b.n	8005d48 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x304>
 8005d0e:	bf00      	nop
 8005d10:	20000040 	.word	0x20000040
 8005d14:	20197144 	.word	0x20197144
                    hhspi_ram[Instance].Init.WrapSize = HAL_XSPI_WRAP_64_BYTES;
 8005d18:	4952      	ldr	r1, [pc, #328]	; (8005e64 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	4413      	add	r3, r2
 8005d22:	015b      	lsls	r3, r3, #5
 8005d24:	440b      	add	r3, r1
 8005d26:	3320      	adds	r3, #32
 8005d28:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005d2c:	601a      	str	r2, [r3, #0]
                    break;
 8005d2e:	e00b      	b.n	8005d48 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x304>
                }
              }
              else
              {
                hhspi_ram[Instance].Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 8005d30:	494c      	ldr	r1, [pc, #304]	; (8005e64 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	4613      	mov	r3, r2
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	4413      	add	r3, r2
 8005d3a:	015b      	lsls	r3, r3, #5
 8005d3c:	440b      	add	r3, r1
 8005d3e:	3320      	adds	r3, #32
 8005d40:	2200      	movs	r2, #0
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	e000      	b.n	8005d48 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x304>
                    break;
 8005d46:	bf00      	nop
              }

              if (Cfg->IOMode == BSP_HSPI_RAM_IO_X16_MODE)
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	795b      	ldrb	r3, [r3, #5]
 8005d4c:	2b40      	cmp	r3, #64	; 0x40
 8005d4e:	d10b      	bne.n	8005d68 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x324>
              {
                hhspi_ram[Instance].Init.MemoryType = HAL_XSPI_MEMTYPE_APMEM_16BITS;
 8005d50:	4944      	ldr	r1, [pc, #272]	; (8005e64 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	4613      	mov	r3, r2
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	4413      	add	r3, r2
 8005d5a:	015b      	lsls	r3, r3, #5
 8005d5c:	440b      	add	r3, r1
 8005d5e:	330c      	adds	r3, #12
 8005d60:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005d64:	601a      	str	r2, [r3, #0]
 8005d66:	e00a      	b.n	8005d7e <BSP_HSPI_RAM_Config16BitsOctalRAM+0x33a>
              }
              else
              {
                hhspi_ram[Instance].Init.MemoryType = HAL_XSPI_MEMTYPE_APMEM;
 8005d68:	493e      	ldr	r1, [pc, #248]	; (8005e64 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	005b      	lsls	r3, r3, #1
 8005d70:	4413      	add	r3, r2
 8005d72:	015b      	lsls	r3, r3, #5
 8005d74:	440b      	add	r3, r1
 8005d76:	330c      	adds	r3, #12
 8005d78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d7c:	601a      	str	r2, [r3, #0]
              }

              if (HAL_XSPI_DeInit(&hhspi_ram[Instance]) != HAL_OK)
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	4613      	mov	r3, r2
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	4413      	add	r3, r2
 8005d86:	015b      	lsls	r3, r3, #5
 8005d88:	4a36      	ldr	r2, [pc, #216]	; (8005e64 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 8005d8a:	4413      	add	r3, r2
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f00d f8bd 	bl	8012f0c <HAL_XSPI_DeInit>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d002      	beq.n	8005d9e <BSP_HSPI_RAM_Config16BitsOctalRAM+0x35a>
              {
                ret = BSP_ERROR_PERIPH_FAILURE;
 8005d98:	f06f 0303 	mvn.w	r3, #3
 8005d9c:	60fb      	str	r3, [r7, #12]
              }

              if (HAL_XSPI_Init(&hhspi_ram[Instance]) != HAL_OK)
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	4613      	mov	r3, r2
 8005da2:	005b      	lsls	r3, r3, #1
 8005da4:	4413      	add	r3, r2
 8005da6:	015b      	lsls	r3, r3, #5
 8005da8:	4a2e      	ldr	r2, [pc, #184]	; (8005e64 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 8005daa:	4413      	add	r3, r2
 8005dac:	4618      	mov	r0, r3
 8005dae:	f00c ff61 	bl	8012c74 <HAL_XSPI_Init>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d002      	beq.n	8005dbe <BSP_HSPI_RAM_Config16BitsOctalRAM+0x37a>
              {
                ret = BSP_ERROR_PERIPH_FAILURE;
 8005db8:	f06f 0303 	mvn.w	r3, #3
 8005dbc:	60fb      	str	r3, [r7, #12]
          }
        }
      }

      /* Update HSPI context if all operations are well done */
      if (ret == BSP_ERROR_NONE)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d149      	bne.n	8005e58 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x414>
      {
        /* Update current status parameter *****************************************/
        Hspi_Ram_Ctx[Instance].IsInitialized    = HSPI_ACCESS_INDIRECT;
 8005dc4:	4928      	ldr	r1, [pc, #160]	; (8005e68 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	1a9b      	subs	r3, r3, r2
 8005dce:	440b      	add	r3, r1
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].LatencyType      = Cfg->LatencyType;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	7818      	ldrb	r0, [r3, #0]
 8005dd8:	4923      	ldr	r1, [pc, #140]	; (8005e68 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	1a9b      	subs	r3, r3, r2
 8005de2:	440b      	add	r3, r1
 8005de4:	3301      	adds	r3, #1
 8005de6:	4602      	mov	r2, r0
 8005de8:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].ReadLatencyCode  = Cfg->ReadLatencyCode;
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	7858      	ldrb	r0, [r3, #1]
 8005dee:	491e      	ldr	r1, [pc, #120]	; (8005e68 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	4613      	mov	r3, r2
 8005df4:	00db      	lsls	r3, r3, #3
 8005df6:	1a9b      	subs	r3, r3, r2
 8005df8:	440b      	add	r3, r1
 8005dfa:	3302      	adds	r3, #2
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].WriteLatencyCode = Cfg->WriteLatencyCode;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	7898      	ldrb	r0, [r3, #2]
 8005e04:	4918      	ldr	r1, [pc, #96]	; (8005e68 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	1a9b      	subs	r3, r3, r2
 8005e0e:	440b      	add	r3, r1
 8005e10:	3303      	adds	r3, #3
 8005e12:	4602      	mov	r2, r0
 8005e14:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].BurstType        = Cfg->BurstType;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	78d8      	ldrb	r0, [r3, #3]
 8005e1a:	4913      	ldr	r1, [pc, #76]	; (8005e68 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	00db      	lsls	r3, r3, #3
 8005e22:	1a9b      	subs	r3, r3, r2
 8005e24:	440b      	add	r3, r1
 8005e26:	3304      	adds	r3, #4
 8005e28:	4602      	mov	r2, r0
 8005e2a:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].BurstLength      = Cfg->BurstLength;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	7918      	ldrb	r0, [r3, #4]
 8005e30:	490d      	ldr	r1, [pc, #52]	; (8005e68 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	4613      	mov	r3, r2
 8005e36:	00db      	lsls	r3, r3, #3
 8005e38:	1a9b      	subs	r3, r3, r2
 8005e3a:	440b      	add	r3, r1
 8005e3c:	3305      	adds	r3, #5
 8005e3e:	4602      	mov	r2, r0
 8005e40:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].IOMode           = Cfg->IOMode;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	7958      	ldrb	r0, [r3, #5]
 8005e46:	4908      	ldr	r1, [pc, #32]	; (8005e68 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	00db      	lsls	r3, r3, #3
 8005e4e:	1a9b      	subs	r3, r3, r2
 8005e50:	440b      	add	r3, r1
 8005e52:	3306      	adds	r3, #6
 8005e54:	4602      	mov	r2, r0
 8005e56:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8005e58:	68fb      	ldr	r3, [r7, #12]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	20197144 	.word	0x20197144
 8005e68:	20000040 	.word	0x20000040

08005e6c <HSPI_RAM_MspInit>:
  * @brief  Initializes the HSPI MSP.
  * @param  hhspi HSPI handle
  * @retval None
  */
static void HSPI_RAM_MspInit(XSPI_HandleTypeDef *hhspi)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b0a0      	sub	sp, #128	; 0x80
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  static DMA_HandleTypeDef hdmatx, hdmarx;
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8005e74:	4bbe      	ldr	r3, [pc, #760]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e7a:	4abd      	ldr	r2, [pc, #756]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005e7c:	f043 0304 	orr.w	r3, r3, #4
 8005e80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005e84:	4bba      	ldr	r3, [pc, #744]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e8a:	f003 0304 	and.w	r3, r3, #4
 8005e8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8005e92:	4bb8      	ldr	r3, [pc, #736]	; (8006174 <HSPI_RAM_MspInit+0x308>)
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	4ab7      	ldr	r2, [pc, #732]	; (8006174 <HSPI_RAM_MspInit+0x308>)
 8005e98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e9c:	6113      	str	r3, [r2, #16]

  /* Enable the HSPI memory interface, DMA and GPIO clocks */
  HSPI_CLK_ENABLE();
 8005e9e:	4bb4      	ldr	r3, [pc, #720]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea4:	4ab2      	ldr	r2, [pc, #712]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005ea6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005eae:	4bb0      	ldr	r3, [pc, #704]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005eb8:	667b      	str	r3, [r7, #100]	; 0x64
 8005eba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  HSPI_RAM_DMAx_CLK_ENABLE();
 8005ebc:	4bac      	ldr	r3, [pc, #688]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec2:	4aab      	ldr	r2, [pc, #684]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005ec4:	f043 0301 	orr.w	r3, r3, #1
 8005ec8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8005ecc:	4ba8      	ldr	r3, [pc, #672]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	663b      	str	r3, [r7, #96]	; 0x60
 8005ed8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  HSPI_CLK_GPIO_CLK_ENABLE();
 8005eda:	4ba5      	ldr	r3, [pc, #660]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ee0:	4aa3      	ldr	r2, [pc, #652]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ee6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005eea:	4ba1      	ldr	r3, [pc, #644]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  HSPI_DQS0_GPIO_CLK_ENABLE();
 8005ef8:	4b9d      	ldr	r3, [pc, #628]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005efa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005efe:	4a9c      	ldr	r2, [pc, #624]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f04:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005f08:	4b99      	ldr	r3, [pc, #612]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005f0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f12:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  HSPI_DQS1_GPIO_CLK_ENABLE();
 8005f16:	4b96      	ldr	r3, [pc, #600]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f1c:	4a94      	ldr	r2, [pc, #592]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005f26:	4b92      	ldr	r3, [pc, #584]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005f28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f30:	657b      	str	r3, [r7, #84]	; 0x54
 8005f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  HSPI_CS_GPIO_CLK_ENABLE();
 8005f34:	4b8e      	ldr	r3, [pc, #568]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005f36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f3a:	4a8d      	ldr	r2, [pc, #564]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f40:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005f44:	4b8a      	ldr	r3, [pc, #552]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005f46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f4e:	653b      	str	r3, [r7, #80]	; 0x50
 8005f50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  HSPI_D0_GPIO_CLK_ENABLE();
 8005f52:	4b87      	ldr	r3, [pc, #540]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f58:	4a85      	ldr	r2, [pc, #532]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005f62:	4b83      	ldr	r3, [pc, #524]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  HSPI_D1_GPIO_CLK_ENABLE();
 8005f70:	4b7f      	ldr	r3, [pc, #508]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f76:	4a7e      	ldr	r2, [pc, #504]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f7c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005f80:	4b7b      	ldr	r3, [pc, #492]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005f82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  HSPI_D2_GPIO_CLK_ENABLE();
 8005f8e:	4b78      	ldr	r3, [pc, #480]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f94:	4a76      	ldr	r2, [pc, #472]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005f9e:	4b74      	ldr	r3, [pc, #464]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fa8:	647b      	str	r3, [r7, #68]	; 0x44
 8005faa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  HSPI_D3_GPIO_CLK_ENABLE();
 8005fac:	4b70      	ldr	r3, [pc, #448]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fb2:	4a6f      	ldr	r2, [pc, #444]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fb8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005fbc:	4b6c      	ldr	r3, [pc, #432]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc6:	643b      	str	r3, [r7, #64]	; 0x40
 8005fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  HSPI_D4_GPIO_CLK_ENABLE();
 8005fca:	4b69      	ldr	r3, [pc, #420]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fd0:	4a67      	ldr	r2, [pc, #412]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005fda:	4b65      	ldr	r3, [pc, #404]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  HSPI_D5_GPIO_CLK_ENABLE();
 8005fe8:	4b61      	ldr	r3, [pc, #388]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fee:	4a60      	ldr	r2, [pc, #384]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005ff8:	4b5d      	ldr	r3, [pc, #372]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8005ffa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006002:	63bb      	str	r3, [r7, #56]	; 0x38
 8006004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  HSPI_D6_GPIO_CLK_ENABLE();
 8006006:	4b5a      	ldr	r3, [pc, #360]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8006008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800600c:	4a58      	ldr	r2, [pc, #352]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 800600e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006012:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006016:	4b56      	ldr	r3, [pc, #344]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8006018:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800601c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006020:	637b      	str	r3, [r7, #52]	; 0x34
 8006022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  HSPI_D7_GPIO_CLK_ENABLE();
 8006024:	4b52      	ldr	r3, [pc, #328]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8006026:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800602a:	4a51      	ldr	r2, [pc, #324]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 800602c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006030:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006034:	4b4e      	ldr	r3, [pc, #312]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8006036:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800603a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800603e:	633b      	str	r3, [r7, #48]	; 0x30
 8006040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  HSPI_D8_GPIO_CLK_ENABLE();
 8006042:	4b4b      	ldr	r3, [pc, #300]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8006044:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006048:	4a49      	ldr	r2, [pc, #292]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 800604a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800604e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006052:	4b47      	ldr	r3, [pc, #284]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8006054:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800605c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800605e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  HSPI_D9_GPIO_CLK_ENABLE();
 8006060:	4b43      	ldr	r3, [pc, #268]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8006062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006066:	4a42      	ldr	r2, [pc, #264]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8006068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800606c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006070:	4b3f      	ldr	r3, [pc, #252]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8006072:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800607a:	62bb      	str	r3, [r7, #40]	; 0x28
 800607c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  HSPI_D10_GPIO_CLK_ENABLE();
 800607e:	4b3c      	ldr	r3, [pc, #240]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8006080:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006084:	4a3a      	ldr	r2, [pc, #232]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8006086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800608a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800608e:	4b38      	ldr	r3, [pc, #224]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8006090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006098:	627b      	str	r3, [r7, #36]	; 0x24
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  HSPI_D11_GPIO_CLK_ENABLE();
 800609c:	4b34      	ldr	r3, [pc, #208]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 800609e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060a2:	4a33      	ldr	r2, [pc, #204]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 80060a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060a8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80060ac:	4b30      	ldr	r3, [pc, #192]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 80060ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b6:	623b      	str	r3, [r7, #32]
 80060b8:	6a3b      	ldr	r3, [r7, #32]
  HSPI_D12_GPIO_CLK_ENABLE();
 80060ba:	4b2d      	ldr	r3, [pc, #180]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 80060bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060c0:	4a2b      	ldr	r2, [pc, #172]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 80060c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80060ca:	4b29      	ldr	r3, [pc, #164]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 80060cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d4:	61fb      	str	r3, [r7, #28]
 80060d6:	69fb      	ldr	r3, [r7, #28]
  HSPI_D13_GPIO_CLK_ENABLE();
 80060d8:	4b25      	ldr	r3, [pc, #148]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 80060da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060de:	4a24      	ldr	r2, [pc, #144]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 80060e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060e4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80060e8:	4b21      	ldr	r3, [pc, #132]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 80060ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f2:	61bb      	str	r3, [r7, #24]
 80060f4:	69bb      	ldr	r3, [r7, #24]
  HSPI_D14_GPIO_CLK_ENABLE();
 80060f6:	4b1e      	ldr	r3, [pc, #120]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 80060f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060fc:	4a1c      	ldr	r2, [pc, #112]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 80060fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006102:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006106:	4b1a      	ldr	r3, [pc, #104]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8006108:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800610c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006110:	617b      	str	r3, [r7, #20]
 8006112:	697b      	ldr	r3, [r7, #20]
  HSPI_D15_GPIO_CLK_ENABLE();
 8006114:	4b16      	ldr	r3, [pc, #88]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8006116:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800611a:	4a15      	ldr	r2, [pc, #84]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 800611c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006120:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006124:	4b12      	ldr	r3, [pc, #72]	; (8006170 <HSPI_RAM_MspInit+0x304>)
 8006126:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800612a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800612e:	613b      	str	r3, [r7, #16]
 8006130:	693b      	ldr	r3, [r7, #16]

  /*  Activate HSLV  */
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_CS_GPIO_PORT, HSPI_CS_PIN);
 8006132:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006136:	4810      	ldr	r0, [pc, #64]	; (8006178 <HSPI_RAM_MspInit+0x30c>)
 8006138:	f004 f910 	bl	800a35c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_DQS0_GPIO_PORT, HSPI_DQS0_PIN);
 800613c:	2104      	movs	r1, #4
 800613e:	480f      	ldr	r0, [pc, #60]	; (800617c <HSPI_RAM_MspInit+0x310>)
 8006140:	f004 f90c 	bl	800a35c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_DQS1_GPIO_PORT, HSPI_DQS1_PIN);
 8006144:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006148:	480c      	ldr	r0, [pc, #48]	; (800617c <HSPI_RAM_MspInit+0x310>)
 800614a:	f004 f907 	bl	800a35c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_CLK_GPIO_PORT, HSPI_CLK_PIN);
 800614e:	2108      	movs	r1, #8
 8006150:	480a      	ldr	r0, [pc, #40]	; (800617c <HSPI_RAM_MspInit+0x310>)
 8006152:	f004 f903 	bl	800a35c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_NCLK_GPIO_PORT, HSPI_NCLK_PIN);
 8006156:	2110      	movs	r1, #16
 8006158:	4808      	ldr	r0, [pc, #32]	; (800617c <HSPI_RAM_MspInit+0x310>)
 800615a:	f004 f8ff 	bl	800a35c <HAL_GPIO_EnableHighSPeedLowVoltage>

  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D0_GPIO_PORT, HSPI_D0_PIN);
 800615e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006162:	4805      	ldr	r0, [pc, #20]	; (8006178 <HSPI_RAM_MspInit+0x30c>)
 8006164:	f004 f8fa 	bl	800a35c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D1_GPIO_PORT, HSPI_D1_PIN);
 8006168:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800616c:	e008      	b.n	8006180 <HSPI_RAM_MspInit+0x314>
 800616e:	bf00      	nop
 8006170:	46020c00 	.word	0x46020c00
 8006174:	46020800 	.word	0x46020800
 8006178:	42021c00 	.word	0x42021c00
 800617c:	42022000 	.word	0x42022000
 8006180:	48bf      	ldr	r0, [pc, #764]	; (8006480 <HSPI_RAM_MspInit+0x614>)
 8006182:	f004 f8eb 	bl	800a35c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D2_GPIO_PORT, HSPI_D2_PIN);
 8006186:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800618a:	48bd      	ldr	r0, [pc, #756]	; (8006480 <HSPI_RAM_MspInit+0x614>)
 800618c:	f004 f8e6 	bl	800a35c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D3_GPIO_PORT, HSPI_D3_PIN);
 8006190:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006194:	48ba      	ldr	r0, [pc, #744]	; (8006480 <HSPI_RAM_MspInit+0x614>)
 8006196:	f004 f8e1 	bl	800a35c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D4_GPIO_PORT, HSPI_D4_PIN);
 800619a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800619e:	48b8      	ldr	r0, [pc, #736]	; (8006480 <HSPI_RAM_MspInit+0x614>)
 80061a0:	f004 f8dc 	bl	800a35c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D5_GPIO_PORT, HSPI_D5_PIN);
 80061a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061a8:	48b5      	ldr	r0, [pc, #724]	; (8006480 <HSPI_RAM_MspInit+0x614>)
 80061aa:	f004 f8d7 	bl	800a35c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D6_GPIO_PORT, HSPI_D6_PIN);
 80061ae:	2101      	movs	r1, #1
 80061b0:	48b4      	ldr	r0, [pc, #720]	; (8006484 <HSPI_RAM_MspInit+0x618>)
 80061b2:	f004 f8d3 	bl	800a35c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D7_GPIO_PORT, HSPI_D7_PIN);
 80061b6:	2102      	movs	r1, #2
 80061b8:	48b2      	ldr	r0, [pc, #712]	; (8006484 <HSPI_RAM_MspInit+0x618>)
 80061ba:	f004 f8cf 	bl	800a35c <HAL_GPIO_EnableHighSPeedLowVoltage>

  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D8_GPIO_PORT, HSPI_D8_PIN);
 80061be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80061c2:	48b0      	ldr	r0, [pc, #704]	; (8006484 <HSPI_RAM_MspInit+0x618>)
 80061c4:	f004 f8ca 	bl	800a35c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D9_GPIO_PORT, HSPI_D9_PIN);
 80061c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80061cc:	48ad      	ldr	r0, [pc, #692]	; (8006484 <HSPI_RAM_MspInit+0x618>)
 80061ce:	f004 f8c5 	bl	800a35c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D10_GPIO_PORT, HSPI_D10_PIN);
 80061d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80061d6:	48ab      	ldr	r0, [pc, #684]	; (8006484 <HSPI_RAM_MspInit+0x618>)
 80061d8:	f004 f8c0 	bl	800a35c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D11_GPIO_PORT, HSPI_D11_PIN);
 80061dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80061e0:	48a8      	ldr	r0, [pc, #672]	; (8006484 <HSPI_RAM_MspInit+0x618>)
 80061e2:	f004 f8bb 	bl	800a35c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D12_GPIO_PORT, HSPI_D12_PIN);
 80061e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80061ea:	48a6      	ldr	r0, [pc, #664]	; (8006484 <HSPI_RAM_MspInit+0x618>)
 80061ec:	f004 f8b6 	bl	800a35c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D13_GPIO_PORT, HSPI_D13_PIN);
 80061f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80061f4:	48a3      	ldr	r0, [pc, #652]	; (8006484 <HSPI_RAM_MspInit+0x618>)
 80061f6:	f004 f8b1 	bl	800a35c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D14_GPIO_PORT, HSPI_D14_PIN);
 80061fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061fe:	48a1      	ldr	r0, [pc, #644]	; (8006484 <HSPI_RAM_MspInit+0x618>)
 8006200:	f004 f8ac 	bl	800a35c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D15_GPIO_PORT, HSPI_D15_PIN);
 8006204:	2101      	movs	r1, #1
 8006206:	48a0      	ldr	r0, [pc, #640]	; (8006488 <HSPI_RAM_MspInit+0x61c>)
 8006208:	f004 f8a8 	bl	800a35c <HAL_GPIO_EnableHighSPeedLowVoltage>

  /* Reset the HSPI memory interface */
  HSPI_FORCE_RESET();
 800620c:	4b9f      	ldr	r3, [pc, #636]	; (800648c <HSPI_RAM_MspInit+0x620>)
 800620e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006210:	4a9e      	ldr	r2, [pc, #632]	; (800648c <HSPI_RAM_MspInit+0x620>)
 8006212:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006216:	6693      	str	r3, [r2, #104]	; 0x68
  HSPI_RELEASE_RESET();
 8006218:	4b9c      	ldr	r3, [pc, #624]	; (800648c <HSPI_RAM_MspInit+0x620>)
 800621a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800621c:	4a9b      	ldr	r2, [pc, #620]	; (800648c <HSPI_RAM_MspInit+0x620>)
 800621e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006222:	6693      	str	r3, [r2, #104]	; 0x68

  /* HSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_CS_PIN;
 8006224:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006228:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800622a:	2302      	movs	r3, #2
 800622c:	673b      	str	r3, [r7, #112]	; 0x70
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800622e:	2300      	movs	r3, #0
 8006230:	677b      	str	r3, [r7, #116]	; 0x74
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8006232:	2302      	movs	r3, #2
 8006234:	67bb      	str	r3, [r7, #120]	; 0x78
  GPIO_InitStruct.Alternate = HSPI_CS_PIN_AF;
 8006236:	2308      	movs	r3, #8
 8006238:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 800623a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800623e:	4619      	mov	r1, r3
 8006240:	488f      	ldr	r0, [pc, #572]	; (8006480 <HSPI_RAM_MspInit+0x614>)
 8006242:	f003 fd8b 	bl	8009d5c <HAL_GPIO_Init>

  /* HSPI DQS0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_DQS0_PIN;
 8006246:	2304      	movs	r3, #4
 8006248:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_DQS0_PIN_AF;
 800624a:	2308      	movs	r3, #8
 800624c:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_DQS0_GPIO_PORT, &GPIO_InitStruct);
 800624e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006252:	4619      	mov	r1, r3
 8006254:	488b      	ldr	r0, [pc, #556]	; (8006484 <HSPI_RAM_MspInit+0x618>)
 8006256:	f003 fd81 	bl	8009d5c <HAL_GPIO_Init>

  /* HSPI DQS1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_DQS1_PIN;
 800625a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800625e:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_DQS1_PIN_AF;
 8006260:	2308      	movs	r3, #8
 8006262:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_DQS1_GPIO_PORT, &GPIO_InitStruct);
 8006264:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006268:	4619      	mov	r1, r3
 800626a:	4886      	ldr	r0, [pc, #536]	; (8006484 <HSPI_RAM_MspInit+0x618>)
 800626c:	f003 fd76 	bl	8009d5c <HAL_GPIO_Init>

  /* HSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_CLK_PIN;
 8006270:	2308      	movs	r3, #8
 8006272:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_CLK_PIN_AF;
 8006274:	2308      	movs	r3, #8
 8006276:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 8006278:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800627c:	4619      	mov	r1, r3
 800627e:	4881      	ldr	r0, [pc, #516]	; (8006484 <HSPI_RAM_MspInit+0x618>)
 8006280:	f003 fd6c 	bl	8009d5c <HAL_GPIO_Init>

  /* HSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D0_PIN;
 8006284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006288:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D0_PIN_AF;
 800628a:	2308      	movs	r3, #8
 800628c:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 800628e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006292:	4619      	mov	r1, r3
 8006294:	487a      	ldr	r0, [pc, #488]	; (8006480 <HSPI_RAM_MspInit+0x614>)
 8006296:	f003 fd61 	bl	8009d5c <HAL_GPIO_Init>

  /* HSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D1_PIN;
 800629a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800629e:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D1_PIN_AF;
 80062a0:	2308      	movs	r3, #8
 80062a2:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 80062a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80062a8:	4619      	mov	r1, r3
 80062aa:	4875      	ldr	r0, [pc, #468]	; (8006480 <HSPI_RAM_MspInit+0x614>)
 80062ac:	f003 fd56 	bl	8009d5c <HAL_GPIO_Init>

  /* HSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D2_PIN;
 80062b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D2_PIN_AF;
 80062b6:	2308      	movs	r3, #8
 80062b8:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 80062ba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80062be:	4619      	mov	r1, r3
 80062c0:	486f      	ldr	r0, [pc, #444]	; (8006480 <HSPI_RAM_MspInit+0x614>)
 80062c2:	f003 fd4b 	bl	8009d5c <HAL_GPIO_Init>

  /* HSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D3_PIN;
 80062c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80062ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D3_PIN_AF;
 80062cc:	2308      	movs	r3, #8
 80062ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 80062d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80062d4:	4619      	mov	r1, r3
 80062d6:	486a      	ldr	r0, [pc, #424]	; (8006480 <HSPI_RAM_MspInit+0x614>)
 80062d8:	f003 fd40 	bl	8009d5c <HAL_GPIO_Init>

  /* HSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D4_PIN;
 80062dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80062e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D4_PIN_AF;
 80062e2:	2308      	movs	r3, #8
 80062e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 80062e6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80062ea:	4619      	mov	r1, r3
 80062ec:	4864      	ldr	r0, [pc, #400]	; (8006480 <HSPI_RAM_MspInit+0x614>)
 80062ee:	f003 fd35 	bl	8009d5c <HAL_GPIO_Init>

  /* HSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D5_PIN;
 80062f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D5_PIN_AF;
 80062f8:	2308      	movs	r3, #8
 80062fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 80062fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006300:	4619      	mov	r1, r3
 8006302:	485f      	ldr	r0, [pc, #380]	; (8006480 <HSPI_RAM_MspInit+0x614>)
 8006304:	f003 fd2a 	bl	8009d5c <HAL_GPIO_Init>

  /* HSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D6_PIN;
 8006308:	2301      	movs	r3, #1
 800630a:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D6_PIN_AF;
 800630c:	2308      	movs	r3, #8
 800630e:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 8006310:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006314:	4619      	mov	r1, r3
 8006316:	485b      	ldr	r0, [pc, #364]	; (8006484 <HSPI_RAM_MspInit+0x618>)
 8006318:	f003 fd20 	bl	8009d5c <HAL_GPIO_Init>

  /* HSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D7_PIN;
 800631c:	2302      	movs	r3, #2
 800631e:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D7_PIN_AF;
 8006320:	2308      	movs	r3, #8
 8006322:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 8006324:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006328:	4619      	mov	r1, r3
 800632a:	4856      	ldr	r0, [pc, #344]	; (8006484 <HSPI_RAM_MspInit+0x618>)
 800632c:	f003 fd16 	bl	8009d5c <HAL_GPIO_Init>

  /* HSPI D8 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D8_PIN;
 8006330:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006334:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D8_PIN_AF;
 8006336:	2308      	movs	r3, #8
 8006338:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D8_GPIO_PORT, &GPIO_InitStruct);
 800633a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800633e:	4619      	mov	r1, r3
 8006340:	4850      	ldr	r0, [pc, #320]	; (8006484 <HSPI_RAM_MspInit+0x618>)
 8006342:	f003 fd0b 	bl	8009d5c <HAL_GPIO_Init>

  /* HSPI D9 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D9_PIN;
 8006346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800634a:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D9_PIN_AF;
 800634c:	2308      	movs	r3, #8
 800634e:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D9_GPIO_PORT, &GPIO_InitStruct);
 8006350:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006354:	4619      	mov	r1, r3
 8006356:	484b      	ldr	r0, [pc, #300]	; (8006484 <HSPI_RAM_MspInit+0x618>)
 8006358:	f003 fd00 	bl	8009d5c <HAL_GPIO_Init>

  /* HSPI D10 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D10_PIN;
 800635c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006360:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D10_PIN_AF;
 8006362:	2308      	movs	r3, #8
 8006364:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D10_GPIO_PORT, &GPIO_InitStruct);
 8006366:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800636a:	4619      	mov	r1, r3
 800636c:	4845      	ldr	r0, [pc, #276]	; (8006484 <HSPI_RAM_MspInit+0x618>)
 800636e:	f003 fcf5 	bl	8009d5c <HAL_GPIO_Init>

  /* HSPI D11 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D11_PIN;
 8006372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006376:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D11_PIN_AF;
 8006378:	2308      	movs	r3, #8
 800637a:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D11_GPIO_PORT, &GPIO_InitStruct);
 800637c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006380:	4619      	mov	r1, r3
 8006382:	4840      	ldr	r0, [pc, #256]	; (8006484 <HSPI_RAM_MspInit+0x618>)
 8006384:	f003 fcea 	bl	8009d5c <HAL_GPIO_Init>

  /* HSPI D12 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D12_PIN;
 8006388:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800638c:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D12_PIN_AF;
 800638e:	2308      	movs	r3, #8
 8006390:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D12_GPIO_PORT, &GPIO_InitStruct);
 8006392:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006396:	4619      	mov	r1, r3
 8006398:	483a      	ldr	r0, [pc, #232]	; (8006484 <HSPI_RAM_MspInit+0x618>)
 800639a:	f003 fcdf 	bl	8009d5c <HAL_GPIO_Init>

  /* HSPI D13 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D13_PIN;
 800639e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80063a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D13_PIN_AF;
 80063a4:	2308      	movs	r3, #8
 80063a6:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D13_GPIO_PORT, &GPIO_InitStruct);
 80063a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80063ac:	4619      	mov	r1, r3
 80063ae:	4835      	ldr	r0, [pc, #212]	; (8006484 <HSPI_RAM_MspInit+0x618>)
 80063b0:	f003 fcd4 	bl	8009d5c <HAL_GPIO_Init>

  /* HSPI D14 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D14_PIN;
 80063b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D14_PIN_AF;
 80063ba:	2308      	movs	r3, #8
 80063bc:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D14_GPIO_PORT, &GPIO_InitStruct);
 80063be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80063c2:	4619      	mov	r1, r3
 80063c4:	482f      	ldr	r0, [pc, #188]	; (8006484 <HSPI_RAM_MspInit+0x618>)
 80063c6:	f003 fcc9 	bl	8009d5c <HAL_GPIO_Init>

  /* HSPI D15 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D15_PIN;
 80063ca:	2301      	movs	r3, #1
 80063cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D15_PIN_AF;
 80063ce:	2308      	movs	r3, #8
 80063d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D15_GPIO_PORT, &GPIO_InitStruct);
 80063d2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80063d6:	4619      	mov	r1, r3
 80063d8:	482b      	ldr	r0, [pc, #172]	; (8006488 <HSPI_RAM_MspInit+0x61c>)
 80063da:	f003 fcbf 	bl	8009d5c <HAL_GPIO_Init>

  hdmatx.Init.Request = GPDMA1_REQUEST_HSPI1;
 80063de:	4b2c      	ldr	r3, [pc, #176]	; (8006490 <HSPI_RAM_MspInit+0x624>)
 80063e0:	2272      	movs	r2, #114	; 0x72
 80063e2:	605a      	str	r2, [r3, #4]
  hdmatx.Instance = GPDMA1_Channel12;
 80063e4:	4b2a      	ldr	r3, [pc, #168]	; (8006490 <HSPI_RAM_MspInit+0x624>)
 80063e6:	4a2b      	ldr	r2, [pc, #172]	; (8006494 <HSPI_RAM_MspInit+0x628>)
 80063e8:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriority(GPDMA1_Channel12_IRQn, 0x00, 0);
 80063ea:	2200      	movs	r2, #0
 80063ec:	2100      	movs	r1, #0
 80063ee:	2054      	movs	r0, #84	; 0x54
 80063f0:	f001 fb0c 	bl	8007a0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(GPDMA1_Channel12_IRQn);
 80063f4:	2054      	movs	r0, #84	; 0x54
 80063f6:	f001 fb23 	bl	8007a40 <HAL_NVIC_EnableIRQ>

  /* Configure the HSPI DMA transmit */
  hdmatx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80063fa:	4b25      	ldr	r3, [pc, #148]	; (8006490 <HSPI_RAM_MspInit+0x624>)
 80063fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006400:	60da      	str	r2, [r3, #12]
  hdmatx.Init.SrcInc              = DMA_SINC_INCREMENTED;
 8006402:	4b23      	ldr	r3, [pc, #140]	; (8006490 <HSPI_RAM_MspInit+0x624>)
 8006404:	2208      	movs	r2, #8
 8006406:	611a      	str	r2, [r3, #16]
  hdmatx.Init.DestInc             = DMA_DINC_FIXED;
 8006408:	4b21      	ldr	r3, [pc, #132]	; (8006490 <HSPI_RAM_MspInit+0x624>)
 800640a:	2200      	movs	r2, #0
 800640c:	615a      	str	r2, [r3, #20]
  hdmatx.Init.Priority            = DMA_HIGH_PRIORITY;
 800640e:	4b20      	ldr	r3, [pc, #128]	; (8006490 <HSPI_RAM_MspInit+0x624>)
 8006410:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8006414:	621a      	str	r2, [r3, #32]
  hdmatx.Init.SrcBurstLength      = 1;
 8006416:	4b1e      	ldr	r3, [pc, #120]	; (8006490 <HSPI_RAM_MspInit+0x624>)
 8006418:	2201      	movs	r2, #1
 800641a:	625a      	str	r2, [r3, #36]	; 0x24
  hdmatx.Init.DestBurstLength     = 1;
 800641c:	4b1c      	ldr	r3, [pc, #112]	; (8006490 <HSPI_RAM_MspInit+0x624>)
 800641e:	2201      	movs	r2, #1
 8006420:	629a      	str	r2, [r3, #40]	; 0x28
  hdmatx.Init.TransferEventMode   = DMA_TCEM_BLOCK_TRANSFER;
 8006422:	4b1b      	ldr	r3, [pc, #108]	; (8006490 <HSPI_RAM_MspInit+0x624>)
 8006424:	2200      	movs	r2, #0
 8006426:	631a      	str	r2, [r3, #48]	; 0x30
  hdmatx.Init.SrcDataWidth        = DMA_SRC_DATAWIDTH_WORD ;
 8006428:	4b19      	ldr	r3, [pc, #100]	; (8006490 <HSPI_RAM_MspInit+0x624>)
 800642a:	2202      	movs	r2, #2
 800642c:	619a      	str	r2, [r3, #24]
  hdmatx.Init.DestDataWidth       = DMA_DEST_DATAWIDTH_WORD  ;
 800642e:	4b18      	ldr	r3, [pc, #96]	; (8006490 <HSPI_RAM_MspInit+0x624>)
 8006430:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006434:	61da      	str	r2, [r3, #28]

  /* Enable the GPDMA clock */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8006436:	4b15      	ldr	r3, [pc, #84]	; (800648c <HSPI_RAM_MspInit+0x620>)
 8006438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800643c:	4a13      	ldr	r2, [pc, #76]	; (800648c <HSPI_RAM_MspInit+0x620>)
 800643e:	f043 0301 	orr.w	r3, r3, #1
 8006442:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8006446:	4b11      	ldr	r3, [pc, #68]	; (800648c <HSPI_RAM_MspInit+0x620>)
 8006448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800644c:	f003 0301 	and.w	r3, r3, #1
 8006450:	60fb      	str	r3, [r7, #12]
 8006452:	68fb      	ldr	r3, [r7, #12]

  /* Initialize the DMA channel */
  __HAL_LINKDMA(hhspi, hdmatx, hdmatx);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a0e      	ldr	r2, [pc, #56]	; (8006490 <HSPI_RAM_MspInit+0x624>)
 8006458:	64da      	str	r2, [r3, #76]	; 0x4c
 800645a:	4a0d      	ldr	r2, [pc, #52]	; (8006490 <HSPI_RAM_MspInit+0x624>)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	65d3      	str	r3, [r2, #92]	; 0x5c
  HAL_DMA_Init(&hdmatx);
 8006460:	480b      	ldr	r0, [pc, #44]	; (8006490 <HSPI_RAM_MspInit+0x624>)
 8006462:	f001 fcf1 	bl	8007e48 <HAL_DMA_Init>

  hdmarx.Init.Request = GPDMA1_REQUEST_HSPI1;
 8006466:	4b0c      	ldr	r3, [pc, #48]	; (8006498 <HSPI_RAM_MspInit+0x62c>)
 8006468:	2272      	movs	r2, #114	; 0x72
 800646a:	605a      	str	r2, [r3, #4]
  hdmarx.Instance = GPDMA1_Channel7;
 800646c:	4b0a      	ldr	r3, [pc, #40]	; (8006498 <HSPI_RAM_MspInit+0x62c>)
 800646e:	4a0b      	ldr	r2, [pc, #44]	; (800649c <HSPI_RAM_MspInit+0x630>)
 8006470:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriority(GPDMA1_Channel7_IRQn, 0x00, 0);
 8006472:	2200      	movs	r2, #0
 8006474:	2100      	movs	r1, #0
 8006476:	2024      	movs	r0, #36	; 0x24
 8006478:	f001 fac8 	bl	8007a0c <HAL_NVIC_SetPriority>
 800647c:	e010      	b.n	80064a0 <HSPI_RAM_MspInit+0x634>
 800647e:	bf00      	nop
 8006480:	42021c00 	.word	0x42021c00
 8006484:	42022000 	.word	0x42022000
 8006488:	42022400 	.word	0x42022400
 800648c:	46020c00 	.word	0x46020c00
 8006490:	201971a4 	.word	0x201971a4
 8006494:	40020650 	.word	0x40020650
 8006498:	2019721c 	.word	0x2019721c
 800649c:	400203d0 	.word	0x400203d0
  HAL_NVIC_EnableIRQ(GPDMA1_Channel7_IRQn);
 80064a0:	2024      	movs	r0, #36	; 0x24
 80064a2:	f001 facd 	bl	8007a40 <HAL_NVIC_EnableIRQ>

  /* Configure the HSPI DMA receive */
  hdmarx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80064a6:	4b25      	ldr	r3, [pc, #148]	; (800653c <HSPI_RAM_MspInit+0x6d0>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	60da      	str	r2, [r3, #12]
  hdmarx.Init.SrcInc              = DMA_SINC_FIXED;
 80064ac:	4b23      	ldr	r3, [pc, #140]	; (800653c <HSPI_RAM_MspInit+0x6d0>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	611a      	str	r2, [r3, #16]
  hdmarx.Init.DestInc             = DMA_DINC_INCREMENTED;
 80064b2:	4b22      	ldr	r3, [pc, #136]	; (800653c <HSPI_RAM_MspInit+0x6d0>)
 80064b4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80064b8:	615a      	str	r2, [r3, #20]
  hdmarx.Init.Priority            = DMA_HIGH_PRIORITY;
 80064ba:	4b20      	ldr	r3, [pc, #128]	; (800653c <HSPI_RAM_MspInit+0x6d0>)
 80064bc:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80064c0:	621a      	str	r2, [r3, #32]
  hdmarx.Init.SrcBurstLength      = 1;
 80064c2:	4b1e      	ldr	r3, [pc, #120]	; (800653c <HSPI_RAM_MspInit+0x6d0>)
 80064c4:	2201      	movs	r2, #1
 80064c6:	625a      	str	r2, [r3, #36]	; 0x24
  hdmarx.Init.DestBurstLength     = 1;
 80064c8:	4b1c      	ldr	r3, [pc, #112]	; (800653c <HSPI_RAM_MspInit+0x6d0>)
 80064ca:	2201      	movs	r2, #1
 80064cc:	629a      	str	r2, [r3, #40]	; 0x28
  hdmarx.Init.TransferEventMode   = DMA_TCEM_BLOCK_TRANSFER;
 80064ce:	4b1b      	ldr	r3, [pc, #108]	; (800653c <HSPI_RAM_MspInit+0x6d0>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	631a      	str	r2, [r3, #48]	; 0x30
  hdmarx.Init.SrcDataWidth        = DMA_SRC_DATAWIDTH_WORD ;
 80064d4:	4b19      	ldr	r3, [pc, #100]	; (800653c <HSPI_RAM_MspInit+0x6d0>)
 80064d6:	2202      	movs	r2, #2
 80064d8:	619a      	str	r2, [r3, #24]
  hdmarx.Init.DestDataWidth       = DMA_DEST_DATAWIDTH_WORD  ;
 80064da:	4b18      	ldr	r3, [pc, #96]	; (800653c <HSPI_RAM_MspInit+0x6d0>)
 80064dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80064e0:	61da      	str	r2, [r3, #28]

  /* Enable the GPDMA clock */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80064e2:	4b17      	ldr	r3, [pc, #92]	; (8006540 <HSPI_RAM_MspInit+0x6d4>)
 80064e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e8:	4a15      	ldr	r2, [pc, #84]	; (8006540 <HSPI_RAM_MspInit+0x6d4>)
 80064ea:	f043 0301 	orr.w	r3, r3, #1
 80064ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80064f2:	4b13      	ldr	r3, [pc, #76]	; (8006540 <HSPI_RAM_MspInit+0x6d4>)
 80064f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f8:	f003 0301 	and.w	r3, r3, #1
 80064fc:	60bb      	str	r3, [r7, #8]
 80064fe:	68bb      	ldr	r3, [r7, #8]

  /* Initialize the DMA channel */
  __HAL_LINKDMA(hhspi, hdmarx, hdmarx);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a0e      	ldr	r2, [pc, #56]	; (800653c <HSPI_RAM_MspInit+0x6d0>)
 8006504:	651a      	str	r2, [r3, #80]	; 0x50
 8006506:	4a0d      	ldr	r2, [pc, #52]	; (800653c <HSPI_RAM_MspInit+0x6d0>)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	65d3      	str	r3, [r2, #92]	; 0x5c
  HAL_DMA_Init(&hdmarx);
 800650c:	480b      	ldr	r0, [pc, #44]	; (800653c <HSPI_RAM_MspInit+0x6d0>)
 800650e:	f001 fc9b 	bl	8007e48 <HAL_DMA_Init>

  /* Enable and set priority of the HSPI and DMA interrupts */
  HAL_NVIC_SetPriority(HSPI1_IRQn, BSP_HSPI_RAM_IT_PRIORITY, 0);
 8006512:	2200      	movs	r2, #0
 8006514:	210f      	movs	r1, #15
 8006516:	2083      	movs	r0, #131	; 0x83
 8006518:	f001 fa78 	bl	8007a0c <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(HSPI_RAM_DMAx_IRQn, BSP_HSPI_RAM_DMA_IT_PRIORITY, 0);
 800651c:	2200      	movs	r2, #0
 800651e:	210f      	movs	r1, #15
 8006520:	201f      	movs	r0, #31
 8006522:	f001 fa73 	bl	8007a0c <HAL_NVIC_SetPriority>

  HAL_NVIC_EnableIRQ(HSPI1_IRQn);
 8006526:	2083      	movs	r0, #131	; 0x83
 8006528:	f001 fa8a 	bl	8007a40 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(HSPI_RAM_DMAx_IRQn);
 800652c:	201f      	movs	r0, #31
 800652e:	f001 fa87 	bl	8007a40 <HAL_NVIC_EnableIRQ>
}
 8006532:	bf00      	nop
 8006534:	3780      	adds	r7, #128	; 0x80
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	2019721c 	.word	0x2019721c
 8006540:	46020c00 	.word	0x46020c00

08006544 <BSP_OSPI_NOR_Init>:
  * @param  Instance   OSPI Instance
  * @param  Init       OSPI Init structure
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Init(uint32_t Instance, BSP_OSPI_NOR_Init_t *Init)
{
 8006544:	b590      	push	{r4, r7, lr}
 8006546:	b095      	sub	sp, #84	; 0x54
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  BSP_OSPI_NOR_Info_t pInfo;
  MX_OSPI_InitTypeDef ospi_init;

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d003      	beq.n	800655c <BSP_OSPI_NOR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006554:	f06f 0301 	mvn.w	r3, #1
 8006558:	64fb      	str	r3, [r7, #76]	; 0x4c
 800655a:	e095      	b.n	8006688 <BSP_OSPI_NOR_Init+0x144>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 800655c:	494d      	ldr	r1, [pc, #308]	; (8006694 <BSP_OSPI_NOR_Init+0x150>)
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	4613      	mov	r3, r2
 8006562:	005b      	lsls	r3, r3, #1
 8006564:	4413      	add	r3, r2
 8006566:	440b      	add	r3, r1
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	f040 808a 	bne.w	8006684 <BSP_OSPI_NOR_Init+0x140>
    {
#if (USE_HAL_XSPI_REGISTER_CALLBACKS == 0)
      /* Msp OSPI initialization */
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	4613      	mov	r3, r2
 8006574:	005b      	lsls	r3, r3, #1
 8006576:	4413      	add	r3, r2
 8006578:	015b      	lsls	r3, r3, #5
 800657a:	4a47      	ldr	r2, [pc, #284]	; (8006698 <BSP_OSPI_NOR_Init+0x154>)
 800657c:	4413      	add	r3, r2
 800657e:	4618      	mov	r0, r3
 8006580:	f000 fa26 	bl	80069d0 <OSPI_NOR_MspInit>
        }
      }
#endif /* USE_HAL_XSPI_REGISTER_CALLBACKS */

      /* Get Flash information of one memory */
      (void)MX25UM51245G_GetFlashInfo(&pInfo);
 8006584:	f107 031c 	add.w	r3, r7, #28
 8006588:	4618      	mov	r0, r3
 800658a:	f7fd fd53 	bl	8004034 <MX25UM51245G_GetFlashInfo>

      /* Fill config structure */
      ospi_init.ClockPrescaler = 1;
 800658e:	2301      	movs	r3, #1
 8006590:	613b      	str	r3, [r7, #16]
      ospi_init.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006598:	fa93 f3a3 	rbit	r3, r3
 800659c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800659e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065a0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80065a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d101      	bne.n	80065ac <BSP_OSPI_NOR_Init+0x68>
    return 32U;
 80065a8:	2320      	movs	r3, #32
 80065aa:	e003      	b.n	80065b4 <BSP_OSPI_NOR_Init+0x70>
  return __builtin_clz(value);
 80065ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065ae:	fab3 f383 	clz	r3, r3
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	60fb      	str	r3, [r7, #12]
      ospi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 80065b6:	2300      	movs	r3, #0
 80065b8:	617b      	str	r3, [r7, #20]
      ospi_init.TransferRate   = (uint32_t) Init->TransferRate;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	785b      	ldrb	r3, [r3, #1]
 80065be:	61bb      	str	r3, [r7, #24]

      /* STM32 OSPI interface initialization */
      if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_init) != HAL_OK)
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	4613      	mov	r3, r2
 80065c4:	005b      	lsls	r3, r3, #1
 80065c6:	4413      	add	r3, r2
 80065c8:	015b      	lsls	r3, r3, #5
 80065ca:	4a33      	ldr	r2, [pc, #204]	; (8006698 <BSP_OSPI_NOR_Init+0x154>)
 80065cc:	4413      	add	r3, r2
 80065ce:	f107 020c 	add.w	r2, r7, #12
 80065d2:	4611      	mov	r1, r2
 80065d4:	4618      	mov	r0, r3
 80065d6:	f000 f861 	bl	800669c <MX_OSPI_NOR_Init>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d003      	beq.n	80065e8 <BSP_OSPI_NOR_Init+0xa4>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 80065e0:	f06f 0303 	mvn.w	r3, #3
 80065e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065e6:	e04f      	b.n	8006688 <BSP_OSPI_NOR_Init+0x144>
      }
      /* OSPI Delay Block enable */
      else if (OSPI_DLYB_Enable(&hospi_nor[Instance]) != BSP_ERROR_NONE)
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	4613      	mov	r3, r2
 80065ec:	005b      	lsls	r3, r3, #1
 80065ee:	4413      	add	r3, r2
 80065f0:	015b      	lsls	r3, r3, #5
 80065f2:	4a29      	ldr	r2, [pc, #164]	; (8006698 <BSP_OSPI_NOR_Init+0x154>)
 80065f4:	4413      	add	r3, r2
 80065f6:	4618      	mov	r0, r3
 80065f8:	f000 f9a0 	bl	800693c <OSPI_DLYB_Enable>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d003      	beq.n	800660a <BSP_OSPI_NOR_Init+0xc6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006602:	f06f 0304 	mvn.w	r3, #4
 8006606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006608:	e03e      	b.n	8006688 <BSP_OSPI_NOR_Init+0x144>
      }
      /* OSPI memory reset */
      else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 fb72 	bl	8006cf4 <OSPI_NOR_ResetMemory>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d003      	beq.n	800661e <BSP_OSPI_NOR_Init+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006616:	f06f 0304 	mvn.w	r3, #4
 800661a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800661c:	e034      	b.n	8006688 <BSP_OSPI_NOR_Init+0x144>
      }
      /* Check if memory is ready */
      else if (MX25UM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	4613      	mov	r3, r2
 8006622:	005b      	lsls	r3, r3, #1
 8006624:	4413      	add	r3, r2
 8006626:	015b      	lsls	r3, r3, #5
 8006628:	4a1b      	ldr	r2, [pc, #108]	; (8006698 <BSP_OSPI_NOR_Init+0x154>)
 800662a:	1898      	adds	r0, r3, r2
 800662c:	4919      	ldr	r1, [pc, #100]	; (8006694 <BSP_OSPI_NOR_Init+0x150>)
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	4613      	mov	r3, r2
 8006632:	005b      	lsls	r3, r3, #1
 8006634:	4413      	add	r3, r2
 8006636:	440b      	add	r3, r1
 8006638:	3301      	adds	r3, #1
 800663a:	7819      	ldrb	r1, [r3, #0]
 800663c:	4c15      	ldr	r4, [pc, #84]	; (8006694 <BSP_OSPI_NOR_Init+0x150>)
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	4613      	mov	r3, r2
 8006642:	005b      	lsls	r3, r3, #1
 8006644:	4413      	add	r3, r2
 8006646:	4423      	add	r3, r4
 8006648:	3302      	adds	r3, #2
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	461a      	mov	r2, r3
 800664e:	f7fd fd20 	bl	8004092 <MX25UM51245G_AutoPollingMemReady>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d003      	beq.n	8006660 <BSP_OSPI_NOR_Init+0x11c>
                                                Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006658:	f06f 0304 	mvn.w	r3, #4
 800665c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800665e:	e013      	b.n	8006688 <BSP_OSPI_NOR_Init+0x144>
      }
      /* Configure the memory */
      else if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	7819      	ldrb	r1, [r3, #0]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	785b      	ldrb	r3, [r3, #1]
 8006668:	461a      	mov	r2, r3
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f8da 	bl	8006824 <BSP_OSPI_NOR_ConfigFlash>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d003      	beq.n	800667e <BSP_OSPI_NOR_Init+0x13a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006676:	f06f 0304 	mvn.w	r3, #4
 800667a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800667c:	e004      	b.n	8006688 <BSP_OSPI_NOR_Init+0x144>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800667e:	2300      	movs	r3, #0
 8006680:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006682:	e001      	b.n	8006688 <BSP_OSPI_NOR_Init+0x144>
      }
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8006684:	2300      	movs	r3, #0
 8006686:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  /* Return BSP status */
  return ret;
 8006688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800668a:	4618      	mov	r0, r3
 800668c:	3754      	adds	r7, #84	; 0x54
 800668e:	46bd      	mov	sp, r7
 8006690:	bd90      	pop	{r4, r7, pc}
 8006692:	bf00      	nop
 8006694:	201972f4 	.word	0x201972f4
 8006698:	20197294 	.word	0x20197294

0800669c <MX_OSPI_NOR_Init>:
  * @param  hospi          OSPI handle
  * @param  Init           OSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_OSPI_NOR_Init(XSPI_HandleTypeDef *hospi, MX_OSPI_InitTypeDef *Init)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  /* OctoSPI initialization */
  hospi->Instance = OCTOSPI1;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a20      	ldr	r2, [pc, #128]	; (800672c <MX_OSPI_NOR_Init+0x90>)
 80066aa:	601a      	str	r2, [r3, #0]

  hospi->Init.FifoThresholdByte       = 4;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2204      	movs	r2, #4
 80066b0:	605a      	str	r2, [r3, #4]
  hospi->Init.MemoryMode              = HAL_XSPI_SINGLE_MEM;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	609a      	str	r2, [r3, #8]
  hospi->Init.MemorySize              = Init->MemorySize; /* 512 MBits */
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	611a      	str	r2, [r3, #16]
  hospi->Init.ChipSelectHighTimeCycle = 2;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2202      	movs	r2, #2
 80066c4:	615a      	str	r2, [r3, #20]
  hospi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	619a      	str	r2, [r3, #24]
  hospi->Init.ClockMode               = HAL_XSPI_CLOCK_MODE_0;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	61da      	str	r2, [r3, #28]
  hospi->Init.WrapSize                = HAL_XSPI_WRAP_NOT_SUPPORTED;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	621a      	str	r2, [r3, #32]
  hospi->Init.ClockPrescaler          = Init->ClockPrescaler;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	685a      	ldr	r2, [r3, #4]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	625a      	str	r2, [r3, #36]	; 0x24
  hospi->Init.SampleShifting          = Init->SampleShifting;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	689a      	ldr	r2, [r3, #8]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	629a      	str	r2, [r3, #40]	; 0x28
  hospi->Init.ChipSelectBoundary      = 0;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	631a      	str	r2, [r3, #48]	; 0x30
  hospi->Init.DelayBlockBypass        = HAL_XSPI_DELAY_BLOCK_ON;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	635a      	str	r2, [r3, #52]	; 0x34

  if (Init->TransferRate == (uint32_t) BSP_OSPI_NOR_DTR_TRANSFER)
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d108      	bne.n	800670e <MX_OSPI_NOR_Init+0x72>
  {
    hospi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006702:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800670a:	62da      	str	r2, [r3, #44]	; 0x2c
 800670c:	e005      	b.n	800671a <MX_OSPI_NOR_Init+0x7e>
  }
  else
  {
    hospi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  return HAL_XSPI_Init(hospi);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f00c faaa 	bl	8012c74 <HAL_XSPI_Init>
 8006720:	4603      	mov	r3, r0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3708      	adds	r7, #8
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	420d1400 	.word	0x420d1400

08006730 <BSP_OSPI_NOR_GetInfo>:
  * @param  Instance  OSPI instance
  * @param  pInfo     pointer on the configuration structure
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_GetInfo(uint32_t Instance, BSP_OSPI_NOR_Info_t *pInfo)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800673a:	2300      	movs	r3, #0
 800673c:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d003      	beq.n	800674c <BSP_OSPI_NOR_GetInfo+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006744:	f06f 0301 	mvn.w	r3, #1
 8006748:	60fb      	str	r3, [r7, #12]
 800674a:	e002      	b.n	8006752 <BSP_OSPI_NOR_GetInfo+0x22>
  }
  else
  {
    (void)MX25UM51245G_GetFlashInfo(pInfo);
 800674c:	6838      	ldr	r0, [r7, #0]
 800674e:	f7fd fc71 	bl	8004034 <MX25UM51245G_GetFlashInfo>
  }

  /* Return BSP status */
  return ret;
 8006752:	68fb      	ldr	r3, [r7, #12]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  * @brief  Configure the OSPI in memory-mapped mode
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_EnableMemoryMappedMode(uint32_t Instance)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006764:	2300      	movs	r3, #0
 8006766:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d003      	beq.n	8006776 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800676e:	f06f 0301 	mvn.w	r3, #1
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	e04d      	b.n	8006812 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xb6>
  }
  else
  {
    if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8006776:	4929      	ldr	r1, [pc, #164]	; (800681c <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc0>)
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	4613      	mov	r3, r2
 800677c:	005b      	lsls	r3, r3, #1
 800677e:	4413      	add	r3, r2
 8006780:	440b      	add	r3, r1
 8006782:	3302      	adds	r3, #2
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d122      	bne.n	80067d0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x74>
    {
      if (MX25UM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	4613      	mov	r3, r2
 800678e:	005b      	lsls	r3, r3, #1
 8006790:	4413      	add	r3, r2
 8006792:	015b      	lsls	r3, r3, #5
 8006794:	4a22      	ldr	r2, [pc, #136]	; (8006820 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc4>)
 8006796:	1898      	adds	r0, r3, r2
 8006798:	4920      	ldr	r1, [pc, #128]	; (800681c <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc0>)
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	4613      	mov	r3, r2
 800679e:	005b      	lsls	r3, r3, #1
 80067a0:	4413      	add	r3, r2
 80067a2:	440b      	add	r3, r1
 80067a4:	3301      	adds	r3, #1
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	2201      	movs	r2, #1
 80067aa:	4619      	mov	r1, r3
 80067ac:	f7fd fd23 	bl	80041f6 <MX25UM51245G_EnableSTRMemoryMappedMode>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d003      	beq.n	80067be <BSP_OSPI_NOR_EnableMemoryMappedMode+0x62>
                                                 MX25UM51245G_4BYTES_SIZE) != MX25UM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80067b6:	f06f 0304 	mvn.w	r3, #4
 80067ba:	60fb      	str	r3, [r7, #12]
 80067bc:	e029      	b.n	8006812 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xb6>
      }
      else /* Update OSPI context if all operations are well done */
      {
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 80067be:	4917      	ldr	r1, [pc, #92]	; (800681c <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc0>)
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	4613      	mov	r3, r2
 80067c4:	005b      	lsls	r3, r3, #1
 80067c6:	4413      	add	r3, r2
 80067c8:	440b      	add	r3, r1
 80067ca:	2202      	movs	r2, #2
 80067cc:	701a      	strb	r2, [r3, #0]
 80067ce:	e020      	b.n	8006812 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xb6>
      }
    }
    else
    {
      if (MX25UM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance],
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	4613      	mov	r3, r2
 80067d4:	005b      	lsls	r3, r3, #1
 80067d6:	4413      	add	r3, r2
 80067d8:	015b      	lsls	r3, r3, #5
 80067da:	4a11      	ldr	r2, [pc, #68]	; (8006820 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc4>)
 80067dc:	1898      	adds	r0, r3, r2
 80067de:	490f      	ldr	r1, [pc, #60]	; (800681c <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc0>)
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	4613      	mov	r3, r2
 80067e4:	005b      	lsls	r3, r3, #1
 80067e6:	4413      	add	r3, r2
 80067e8:	440b      	add	r3, r1
 80067ea:	3301      	adds	r3, #1
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	4619      	mov	r1, r3
 80067f0:	f7fd fdab 	bl	800434a <MX25UM51245G_EnableDTRMemoryMappedMode>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d003      	beq.n	8006802 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa6>
                                                 Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25UM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80067fa:	f06f 0304 	mvn.w	r3, #4
 80067fe:	60fb      	str	r3, [r7, #12]
 8006800:	e007      	b.n	8006812 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xb6>
      }
      else /* Update OSPI context if all operations are well done */
      {
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8006802:	4906      	ldr	r1, [pc, #24]	; (800681c <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc0>)
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	4613      	mov	r3, r2
 8006808:	005b      	lsls	r3, r3, #1
 800680a:	4413      	add	r3, r2
 800680c:	440b      	add	r3, r1
 800680e:	2202      	movs	r2, #2
 8006810:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8006812:	68fb      	ldr	r3, [r7, #12]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	201972f4 	.word	0x201972f4
 8006820:	20197294 	.word	0x20197294

08006824 <BSP_OSPI_NOR_ConfigFlash>:
  * @param  Mode      OSPI mode
  * @param  Rate      OSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_ConfigFlash(uint32_t Instance, BSP_OSPI_NOR_Interface_t Mode, BSP_OSPI_NOR_Transfer_t Rate)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	460b      	mov	r3, r1
 800682e:	70fb      	strb	r3, [r7, #3]
 8006830:	4613      	mov	r3, r2
 8006832:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8006834:	2300      	movs	r3, #0
 8006836:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <BSP_OSPI_NOR_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800683e:	f06f 0301 	mvn.w	r3, #1
 8006842:	60fb      	str	r3, [r7, #12]
 8006844:	e072      	b.n	800692c <BSP_OSPI_NOR_ConfigFlash+0x108>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8006846:	493c      	ldr	r1, [pc, #240]	; (8006938 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	4613      	mov	r3, r2
 800684c:	005b      	lsls	r3, r3, #1
 800684e:	4413      	add	r3, r2
 8006850:	440b      	add	r3, r1
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	2b02      	cmp	r3, #2
 8006856:	d103      	bne.n	8006860 <BSP_OSPI_NOR_ConfigFlash+0x3c>
    {
      ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 8006858:	f06f 0315 	mvn.w	r3, #21
 800685c:	60fb      	str	r3, [r7, #12]
 800685e:	e065      	b.n	800692c <BSP_OSPI_NOR_ConfigFlash+0x108>
    }
    else
    {
      /* Setup Flash interface ***************************************************/
      switch (Ospi_Nor_Ctx[Instance].InterfaceMode)
 8006860:	4935      	ldr	r1, [pc, #212]	; (8006938 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	4613      	mov	r3, r2
 8006866:	005b      	lsls	r3, r3, #1
 8006868:	4413      	add	r3, r2
 800686a:	440b      	add	r3, r1
 800686c:	3301      	adds	r3, #1
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d12b      	bne.n	80068cc <BSP_OSPI_NOR_ConfigFlash+0xa8>
      {
        case BSP_OSPI_NOR_OPI_MODE :  /* 8-8-8 commands */
          if ((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 8006874:	78fb      	ldrb	r3, [r7, #3]
 8006876:	2b01      	cmp	r3, #1
 8006878:	d10a      	bne.n	8006890 <BSP_OSPI_NOR_ConfigFlash+0x6c>
 800687a:	492f      	ldr	r1, [pc, #188]	; (8006938 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	4613      	mov	r3, r2
 8006880:	005b      	lsls	r3, r3, #1
 8006882:	4413      	add	r3, r2
 8006884:	440b      	add	r3, r1
 8006886:	3302      	adds	r3, #2
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	78ba      	ldrb	r2, [r7, #2]
 800688c:	429a      	cmp	r2, r3
 800688e:	d02d      	beq.n	80068ec <BSP_OSPI_NOR_ConfigFlash+0xc8>
          {
            /* Exit OPI mode */
            ret = OSPI_NOR_ExitOPIMode(Instance);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 fca1 	bl	80071d8 <OSPI_NOR_ExitOPIMode>
 8006896:	60f8      	str	r0, [r7, #12]

            if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d126      	bne.n	80068ec <BSP_OSPI_NOR_ConfigFlash+0xc8>
 800689e:	78fb      	ldrb	r3, [r7, #3]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d123      	bne.n	80068ec <BSP_OSPI_NOR_ConfigFlash+0xc8>
            {

              if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 80068a4:	4924      	ldr	r1, [pc, #144]	; (8006938 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	4613      	mov	r3, r2
 80068aa:	005b      	lsls	r3, r3, #1
 80068ac:	4413      	add	r3, r2
 80068ae:	440b      	add	r3, r1
 80068b0:	3302      	adds	r3, #2
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d104      	bne.n	80068c2 <BSP_OSPI_NOR_ConfigFlash+0x9e>
              {
                /* Enter DTR OPI mode */
                ret = OSPI_NOR_EnterDOPIMode(Instance);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 fac1 	bl	8006e40 <OSPI_NOR_EnterDOPIMode>
 80068be:	60f8      	str	r0, [r7, #12]
                /* Enter STR OPI mode */
                ret = OSPI_NOR_EnterSOPIMode(Instance);
              }
            }
          }
          break;
 80068c0:	e014      	b.n	80068ec <BSP_OSPI_NOR_ConfigFlash+0xc8>
                ret = OSPI_NOR_EnterSOPIMode(Instance);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fbb6 	bl	8007034 <OSPI_NOR_EnterSOPIMode>
 80068c8:	60f8      	str	r0, [r7, #12]
          break;
 80068ca:	e00f      	b.n	80068ec <BSP_OSPI_NOR_ConfigFlash+0xc8>

        case BSP_OSPI_NOR_SPI_MODE :  /* 1-1-1 commands, Power on H/W default setting */
        default :
          if (Mode == BSP_OSPI_NOR_OPI_MODE)
 80068cc:	78fb      	ldrb	r3, [r7, #3]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d10e      	bne.n	80068f0 <BSP_OSPI_NOR_ConfigFlash+0xcc>
          {
            if (Rate == BSP_OSPI_NOR_STR_TRANSFER)
 80068d2:	78bb      	ldrb	r3, [r7, #2]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d104      	bne.n	80068e2 <BSP_OSPI_NOR_ConfigFlash+0xbe>
            {
              /* Enter STR OPI mode */
              ret = OSPI_NOR_EnterSOPIMode(Instance);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 fbab 	bl	8007034 <OSPI_NOR_EnterSOPIMode>
 80068de:	60f8      	str	r0, [r7, #12]
            {
              /* Enter DTR OPI mode */
              ret = OSPI_NOR_EnterDOPIMode(Instance);
            }
          }
          break;
 80068e0:	e006      	b.n	80068f0 <BSP_OSPI_NOR_ConfigFlash+0xcc>
              ret = OSPI_NOR_EnterDOPIMode(Instance);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 faac 	bl	8006e40 <OSPI_NOR_EnterDOPIMode>
 80068e8:	60f8      	str	r0, [r7, #12]
          break;
 80068ea:	e001      	b.n	80068f0 <BSP_OSPI_NOR_ConfigFlash+0xcc>
          break;
 80068ec:	bf00      	nop
 80068ee:	e000      	b.n	80068f2 <BSP_OSPI_NOR_ConfigFlash+0xce>
          break;
 80068f0:	bf00      	nop
      }

      /* Update OSPI context if all operations are well done */
      if (ret == BSP_ERROR_NONE)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d119      	bne.n	800692c <BSP_OSPI_NOR_ConfigFlash+0x108>
      {
        /* Update current status parameter *****************************************/
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 80068f8:	490f      	ldr	r1, [pc, #60]	; (8006938 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	4613      	mov	r3, r2
 80068fe:	005b      	lsls	r3, r3, #1
 8006900:	4413      	add	r3, r2
 8006902:	440b      	add	r3, r1
 8006904:	2201      	movs	r2, #1
 8006906:	701a      	strb	r2, [r3, #0]
        Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 8006908:	490b      	ldr	r1, [pc, #44]	; (8006938 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	4613      	mov	r3, r2
 800690e:	005b      	lsls	r3, r3, #1
 8006910:	4413      	add	r3, r2
 8006912:	440b      	add	r3, r1
 8006914:	3301      	adds	r3, #1
 8006916:	78fa      	ldrb	r2, [r7, #3]
 8006918:	701a      	strb	r2, [r3, #0]
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 800691a:	4907      	ldr	r1, [pc, #28]	; (8006938 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	4613      	mov	r3, r2
 8006920:	005b      	lsls	r3, r3, #1
 8006922:	4413      	add	r3, r2
 8006924:	440b      	add	r3, r1
 8006926:	3302      	adds	r3, #2
 8006928:	78ba      	ldrb	r2, [r7, #2]
 800692a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800692c:	68fb      	ldr	r3, [r7, #12]
}
 800692e:	4618      	mov	r0, r3
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	201972f4 	.word	0x201972f4

0800693c <OSPI_DLYB_Enable>:
  * @brief  This function enables delay block.
  * @param  hospi OSPI handle
  * @retval BSP status
  */
static int32_t OSPI_DLYB_Enable(XSPI_HandleTypeDef *hospi)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b088      	sub	sp, #32
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  LL_DLYB_CfgTypeDef dlyb_cfg, dlyb_cfg_test;
  int32_t ret = BSP_ERROR_NONE;
 8006944:	2300      	movs	r3, #0
 8006946:	61fb      	str	r3, [r7, #28]
  uint32_t div_value = 4;
 8006948:	2304      	movs	r3, #4
 800694a:	61bb      	str	r3, [r7, #24]

  /* Delay block configuration ------------------------------------------------ */
  if (HAL_XSPI_DLYB_GetClockPeriod(hospi, &dlyb_cfg) != HAL_OK)
 800694c:	f107 0310 	add.w	r3, r7, #16
 8006950:	4619      	mov	r1, r3
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f00c feec 	bl	8013730 <HAL_XSPI_DLYB_GetClockPeriod>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d002      	beq.n	8006964 <OSPI_DLYB_Enable+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 800695e:	f06f 0303 	mvn.w	r3, #3
 8006962:	61fb      	str	r3, [r7, #28]
  }

  /* PhaseSel is divided by 4 (emperic value)*/
  dlyb_cfg.PhaseSel /= div_value;
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	fbb2 f3f3 	udiv	r3, r2, r3
 800696c:	617b      	str	r3, [r7, #20]

  /* save the present configuration for check*/
  dlyb_cfg_test = dlyb_cfg;
 800696e:	f107 0308 	add.w	r3, r7, #8
 8006972:	f107 0210 	add.w	r2, r7, #16
 8006976:	e892 0003 	ldmia.w	r2, {r0, r1}
 800697a:	e883 0003 	stmia.w	r3, {r0, r1}

  /*set delay block configuration*/
  if (HAL_XSPI_DLYB_SetConfig(hospi, &dlyb_cfg) != HAL_OK)
 800697e:	f107 0310 	add.w	r3, r7, #16
 8006982:	4619      	mov	r1, r3
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f00c fe53 	bl	8013630 <HAL_XSPI_DLYB_SetConfig>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d002      	beq.n	8006996 <OSPI_DLYB_Enable+0x5a>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8006990:	f06f 0303 	mvn.w	r3, #3
 8006994:	61fb      	str	r3, [r7, #28]
  }

  /*check the set value*/
  if (HAL_XSPI_DLYB_GetConfig(hospi, &dlyb_cfg) != HAL_OK)
 8006996:	f107 0310 	add.w	r3, r7, #16
 800699a:	4619      	mov	r1, r3
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f00c fe95 	bl	80136cc <HAL_XSPI_DLYB_GetConfig>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d002      	beq.n	80069ae <OSPI_DLYB_Enable+0x72>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 80069a8:	f06f 0303 	mvn.w	r3, #3
 80069ac:	61fb      	str	r3, [r7, #28]
  }

  if ((dlyb_cfg.PhaseSel != dlyb_cfg_test.PhaseSel) || (dlyb_cfg.Units != dlyb_cfg_test.Units))
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d103      	bne.n	80069be <OSPI_DLYB_Enable+0x82>
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d002      	beq.n	80069c4 <OSPI_DLYB_Enable+0x88>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 80069be:	f06f 0303 	mvn.w	r3, #3
 80069c2:	61fb      	str	r3, [r7, #28]
  }

  /* Return BSP status */
  return ret;
 80069c4:	69fb      	ldr	r3, [r7, #28]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3720      	adds	r7, #32
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
	...

080069d0 <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(XSPI_HandleTypeDef *hospi)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b094      	sub	sp, #80	; 0x50
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_CLK_ENABLE();
 80069d8:	4bc1      	ldr	r3, [pc, #772]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 80069da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069de:	4ac0      	ldr	r2, [pc, #768]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 80069e0:	f043 0310 	orr.w	r3, r3, #16
 80069e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80069e8:	4bbd      	ldr	r3, [pc, #756]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 80069ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ee:	f003 0310 	and.w	r3, r3, #16
 80069f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80069f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38

  __HAL_RCC_PWR_CLK_ENABLE();
 80069f6:	4bba      	ldr	r3, [pc, #744]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 80069f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069fc:	4ab8      	ldr	r2, [pc, #736]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 80069fe:	f043 0304 	orr.w	r3, r3, #4
 8006a02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006a06:	4bb6      	ldr	r3, [pc, #728]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a0c:	f003 0304 	and.w	r3, r3, #4
 8006a10:	637b      	str	r3, [r7, #52]	; 0x34
 8006a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  /* Enable VDDIO2 supply */
  HAL_PWREx_EnableVddIO2();
 8006a14:	f005 fa6e 	bl	800bef4 <HAL_PWREx_EnableVddIO2>

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 8006a18:	4bb1      	ldr	r3, [pc, #708]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006a1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a1c:	4ab0      	ldr	r2, [pc, #704]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006a1e:	f043 0310 	orr.w	r3, r3, #16
 8006a22:	6693      	str	r3, [r2, #104]	; 0x68
  OSPI_RELEASE_RESET();
 8006a24:	4bae      	ldr	r3, [pc, #696]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006a26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a28:	4aad      	ldr	r2, [pc, #692]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006a2a:	f023 0310 	bic.w	r3, r3, #16
 8006a2e:	6693      	str	r3, [r2, #104]	; 0x68

  /* Enable GPIO clocks */
  OSPI_CLK_GPIO_CLK_ENABLE();
 8006a30:	4bab      	ldr	r3, [pc, #684]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006a32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a36:	4aaa      	ldr	r2, [pc, #680]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006a38:	f043 0320 	orr.w	r3, r3, #32
 8006a3c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006a40:	4ba7      	ldr	r3, [pc, #668]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006a42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a46:	f003 0320 	and.w	r3, r3, #32
 8006a4a:	633b      	str	r3, [r7, #48]	; 0x30
 8006a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  OSPI_DQS_GPIO_CLK_ENABLE();
 8006a4e:	4ba4      	ldr	r3, [pc, #656]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a54:	4aa2      	ldr	r2, [pc, #648]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006a56:	f043 0301 	orr.w	r3, r3, #1
 8006a5a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006a5e:	4ba0      	ldr	r3, [pc, #640]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a64:	f003 0301 	and.w	r3, r3, #1
 8006a68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  OSPI_CS_GPIO_CLK_ENABLE();
 8006a6c:	4b9c      	ldr	r3, [pc, #624]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a72:	4a9b      	ldr	r2, [pc, #620]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006a74:	f043 0301 	orr.w	r3, r3, #1
 8006a78:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006a7c:	4b98      	ldr	r3, [pc, #608]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006a7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
  OSPI_D0_GPIO_CLK_ENABLE();
 8006a8a:	4b95      	ldr	r3, [pc, #596]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a90:	4a93      	ldr	r2, [pc, #588]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006a92:	f043 0320 	orr.w	r3, r3, #32
 8006a96:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006a9a:	4b91      	ldr	r3, [pc, #580]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006aa0:	f003 0320 	and.w	r3, r3, #32
 8006aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  OSPI_D1_GPIO_CLK_ENABLE();
 8006aa8:	4b8d      	ldr	r3, [pc, #564]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006aae:	4a8c      	ldr	r2, [pc, #560]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006ab0:	f043 0320 	orr.w	r3, r3, #32
 8006ab4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006ab8:	4b89      	ldr	r3, [pc, #548]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006abe:	f003 0320 	and.w	r3, r3, #32
 8006ac2:	623b      	str	r3, [r7, #32]
 8006ac4:	6a3b      	ldr	r3, [r7, #32]
  OSPI_D2_GPIO_CLK_ENABLE();
 8006ac6:	4b86      	ldr	r3, [pc, #536]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006acc:	4a84      	ldr	r2, [pc, #528]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006ace:	f043 0320 	orr.w	r3, r3, #32
 8006ad2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006ad6:	4b82      	ldr	r3, [pc, #520]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006adc:	f003 0320 	and.w	r3, r3, #32
 8006ae0:	61fb      	str	r3, [r7, #28]
 8006ae2:	69fb      	ldr	r3, [r7, #28]
  OSPI_D3_GPIO_CLK_ENABLE();
 8006ae4:	4b7e      	ldr	r3, [pc, #504]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006ae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006aea:	4a7d      	ldr	r2, [pc, #500]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006aec:	f043 0320 	orr.w	r3, r3, #32
 8006af0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006af4:	4b7a      	ldr	r3, [pc, #488]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006af6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006afa:	f003 0320 	and.w	r3, r3, #32
 8006afe:	61bb      	str	r3, [r7, #24]
 8006b00:	69bb      	ldr	r3, [r7, #24]
  OSPI_D4_GPIO_CLK_ENABLE();
 8006b02:	4b77      	ldr	r3, [pc, #476]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b08:	4a75      	ldr	r2, [pc, #468]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006b0a:	f043 0304 	orr.w	r3, r3, #4
 8006b0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006b12:	4b73      	ldr	r3, [pc, #460]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b18:	f003 0304 	and.w	r3, r3, #4
 8006b1c:	617b      	str	r3, [r7, #20]
 8006b1e:	697b      	ldr	r3, [r7, #20]
  OSPI_D5_GPIO_CLK_ENABLE();
 8006b20:	4b6f      	ldr	r3, [pc, #444]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006b22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b26:	4a6e      	ldr	r2, [pc, #440]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006b28:	f043 0304 	orr.w	r3, r3, #4
 8006b2c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006b30:	4b6b      	ldr	r3, [pc, #428]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b36:	f003 0304 	and.w	r3, r3, #4
 8006b3a:	613b      	str	r3, [r7, #16]
 8006b3c:	693b      	ldr	r3, [r7, #16]
  OSPI_D6_GPIO_CLK_ENABLE();
 8006b3e:	4b68      	ldr	r3, [pc, #416]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b44:	4a66      	ldr	r2, [pc, #408]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006b46:	f043 0304 	orr.w	r3, r3, #4
 8006b4a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006b4e:	4b64      	ldr	r3, [pc, #400]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b54:	f003 0304 	and.w	r3, r3, #4
 8006b58:	60fb      	str	r3, [r7, #12]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
  OSPI_D7_GPIO_CLK_ENABLE();
 8006b5c:	4b60      	ldr	r3, [pc, #384]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b62:	4a5f      	ldr	r2, [pc, #380]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006b64:	f043 0304 	orr.w	r3, r3, #4
 8006b68:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006b6c:	4b5c      	ldr	r3, [pc, #368]	; (8006ce0 <OSPI_NOR_MspInit+0x310>)
 8006b6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b72:	f003 0304 	and.w	r3, r3, #4
 8006b76:	60bb      	str	r3, [r7, #8]
 8006b78:	68bb      	ldr	r3, [r7, #8]

  /* Enable HSLV GPIOs */
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_CLK_GPIO_PORT, OSPI_CLK_PIN);
 8006b7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b7e:	4859      	ldr	r0, [pc, #356]	; (8006ce4 <OSPI_NOR_MspInit+0x314>)
 8006b80:	f003 fbec 	bl	800a35c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_CS_GPIO_PORT, OSPI_CS_PIN);
 8006b84:	2104      	movs	r1, #4
 8006b86:	4858      	ldr	r0, [pc, #352]	; (8006ce8 <OSPI_NOR_MspInit+0x318>)
 8006b88:	f003 fbe8 	bl	800a35c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_DQS_GPIO_PORT, OSPI_DQS_PIN);
 8006b8c:	2102      	movs	r1, #2
 8006b8e:	4856      	ldr	r0, [pc, #344]	; (8006ce8 <OSPI_NOR_MspInit+0x318>)
 8006b90:	f003 fbe4 	bl	800a35c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D0_GPIO_PORT, OSPI_D0_PIN);
 8006b94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b98:	4852      	ldr	r0, [pc, #328]	; (8006ce4 <OSPI_NOR_MspInit+0x314>)
 8006b9a:	f003 fbdf 	bl	800a35c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D1_GPIO_PORT, OSPI_D1_PIN);
 8006b9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006ba2:	4850      	ldr	r0, [pc, #320]	; (8006ce4 <OSPI_NOR_MspInit+0x314>)
 8006ba4:	f003 fbda 	bl	800a35c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D2_GPIO_PORT, OSPI_D2_PIN);
 8006ba8:	2180      	movs	r1, #128	; 0x80
 8006baa:	484e      	ldr	r0, [pc, #312]	; (8006ce4 <OSPI_NOR_MspInit+0x314>)
 8006bac:	f003 fbd6 	bl	800a35c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D3_GPIO_PORT, OSPI_D3_PIN);
 8006bb0:	2140      	movs	r1, #64	; 0x40
 8006bb2:	484c      	ldr	r0, [pc, #304]	; (8006ce4 <OSPI_NOR_MspInit+0x314>)
 8006bb4:	f003 fbd2 	bl	800a35c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D4_GPIO_PORT, OSPI_D4_PIN);
 8006bb8:	2102      	movs	r1, #2
 8006bba:	484c      	ldr	r0, [pc, #304]	; (8006cec <OSPI_NOR_MspInit+0x31c>)
 8006bbc:	f003 fbce 	bl	800a35c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D5_GPIO_PORT, OSPI_D5_PIN);
 8006bc0:	2104      	movs	r1, #4
 8006bc2:	484a      	ldr	r0, [pc, #296]	; (8006cec <OSPI_NOR_MspInit+0x31c>)
 8006bc4:	f003 fbca 	bl	800a35c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D6_GPIO_PORT, OSPI_D6_PIN);
 8006bc8:	2108      	movs	r1, #8
 8006bca:	4848      	ldr	r0, [pc, #288]	; (8006cec <OSPI_NOR_MspInit+0x31c>)
 8006bcc:	f003 fbc6 	bl	800a35c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D7_GPIO_PORT, OSPI_D7_PIN);
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	4846      	ldr	r0, [pc, #280]	; (8006cec <OSPI_NOR_MspInit+0x31c>)
 8006bd4:	f003 fbc2 	bl	800a35c <HAL_GPIO_EnableHighSPeedLowVoltage>

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CS_PIN;
 8006bd8:	2304      	movs	r3, #4
 8006bda:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8006bdc:	2302      	movs	r3, #2
 8006bde:	643b      	str	r3, [r7, #64]	; 0x40
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8006be0:	2301      	movs	r3, #1
 8006be2:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8006be4:	2303      	movs	r3, #3
 8006be6:	64bb      	str	r3, [r7, #72]	; 0x48
  GPIO_InitStruct.Alternate = OSPI_CS_PIN_AF;
 8006be8:	230a      	movs	r3, #10
 8006bea:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 8006bec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	483d      	ldr	r0, [pc, #244]	; (8006ce8 <OSPI_NOR_MspInit+0x318>)
 8006bf4:	f003 f8b2 	bl	8009d5c <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CLK_PIN;
 8006bf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_CLK_PIN_AF;
 8006c02:	2303      	movs	r3, #3
 8006c04:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 8006c06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	4835      	ldr	r0, [pc, #212]	; (8006ce4 <OSPI_NOR_MspInit+0x314>)
 8006c0e:	f003 f8a5 	bl	8009d5c <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D0_PIN;
 8006c12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D0_PIN_AF;
 8006c18:	230a      	movs	r3, #10
 8006c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 8006c1c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006c20:	4619      	mov	r1, r3
 8006c22:	4830      	ldr	r0, [pc, #192]	; (8006ce4 <OSPI_NOR_MspInit+0x314>)
 8006c24:	f003 f89a 	bl	8009d5c <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D1_PIN;
 8006c28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D1_PIN_AF;
 8006c2e:	230a      	movs	r3, #10
 8006c30:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 8006c32:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006c36:	4619      	mov	r1, r3
 8006c38:	482a      	ldr	r0, [pc, #168]	; (8006ce4 <OSPI_NOR_MspInit+0x314>)
 8006c3a:	f003 f88f 	bl	8009d5c <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D2_PIN;
 8006c3e:	2380      	movs	r3, #128	; 0x80
 8006c40:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D2_PIN_AF;
 8006c42:	230a      	movs	r3, #10
 8006c44:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 8006c46:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	4825      	ldr	r0, [pc, #148]	; (8006ce4 <OSPI_NOR_MspInit+0x314>)
 8006c4e:	f003 f885 	bl	8009d5c <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D3_PIN;
 8006c52:	2340      	movs	r3, #64	; 0x40
 8006c54:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D3_PIN_AF;
 8006c56:	230a      	movs	r3, #10
 8006c58:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 8006c5a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006c5e:	4619      	mov	r1, r3
 8006c60:	4820      	ldr	r0, [pc, #128]	; (8006ce4 <OSPI_NOR_MspInit+0x314>)
 8006c62:	f003 f87b 	bl	8009d5c <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D4_PIN;
 8006c66:	2302      	movs	r3, #2
 8006c68:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D4_PIN_AF;
 8006c6a:	230a      	movs	r3, #10
 8006c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 8006c6e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006c72:	4619      	mov	r1, r3
 8006c74:	481d      	ldr	r0, [pc, #116]	; (8006cec <OSPI_NOR_MspInit+0x31c>)
 8006c76:	f003 f871 	bl	8009d5c <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D5_PIN;
 8006c7a:	2304      	movs	r3, #4
 8006c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D5_PIN_AF;
 8006c7e:	230a      	movs	r3, #10
 8006c80:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 8006c82:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006c86:	4619      	mov	r1, r3
 8006c88:	4818      	ldr	r0, [pc, #96]	; (8006cec <OSPI_NOR_MspInit+0x31c>)
 8006c8a:	f003 f867 	bl	8009d5c <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D6_PIN;
 8006c8e:	2308      	movs	r3, #8
 8006c90:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D6_PIN_AF;
 8006c92:	230a      	movs	r3, #10
 8006c94:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 8006c96:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	4813      	ldr	r0, [pc, #76]	; (8006cec <OSPI_NOR_MspInit+0x31c>)
 8006c9e:	f003 f85d 	bl	8009d5c <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D7_PIN;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D7_PIN_AF;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 8006caa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006cae:	4619      	mov	r1, r3
 8006cb0:	480e      	ldr	r0, [pc, #56]	; (8006cec <OSPI_NOR_MspInit+0x31c>)
 8006cb2:	f003 f853 	bl	8009d5c <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_DQS_PIN;
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_DQS_PIN_AF;
 8006cba:	230a      	movs	r3, #10
 8006cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
 8006cbe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	4808      	ldr	r0, [pc, #32]	; (8006ce8 <OSPI_NOR_MspInit+0x318>)
 8006cc6:	f003 f849 	bl	8009d5c <HAL_GPIO_Init>

  /* Configure the NVIC for OSPI */
  /* NVIC configuration for OSPI interrupt */
  HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 0x0F, 0);
 8006cca:	2200      	movs	r2, #0
 8006ccc:	210f      	movs	r1, #15
 8006cce:	204c      	movs	r0, #76	; 0x4c
 8006cd0:	f000 fe9c 	bl	8007a0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 8006cd4:	204c      	movs	r0, #76	; 0x4c
 8006cd6:	f000 feb3 	bl	8007a40 <HAL_NVIC_EnableIRQ>
}
 8006cda:	bf00      	nop
 8006cdc:	3750      	adds	r7, #80	; 0x50
 8006cde:	e007      	b.n	8006cf0 <OSPI_NOR_MspInit+0x320>
 8006ce0:	46020c00 	.word	0x46020c00
 8006ce4:	42021400 	.word	0x42021400
 8006ce8:	42020000 	.word	0x42020000
 8006cec:	42020800 	.word	0x42020800
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory(uint32_t Instance)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d003      	beq.n	8006d0e <OSPI_NOR_ResetMemory+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006d06:	f06f 0301 	mvn.w	r3, #1
 8006d0a:	60fb      	str	r3, [r7, #12]
 8006d0c:	e08e      	b.n	8006e2c <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE,
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	4613      	mov	r3, r2
 8006d12:	005b      	lsls	r3, r3, #1
 8006d14:	4413      	add	r3, r2
 8006d16:	015b      	lsls	r3, r3, #5
 8006d18:	4a47      	ldr	r2, [pc, #284]	; (8006e38 <OSPI_NOR_ResetMemory+0x144>)
 8006d1a:	4413      	add	r3, r2
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	2100      	movs	r1, #0
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7fd fd85 	bl	8004830 <MX25UM51245G_ResetEnable>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d003      	beq.n	8006d34 <OSPI_NOR_ResetMemory+0x40>
                                    BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006d2c:	f06f 0304 	mvn.w	r3, #4
 8006d30:	60fb      	str	r3, [r7, #12]
 8006d32:	e07b      	b.n	8006e2c <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE,
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	4613      	mov	r3, r2
 8006d38:	005b      	lsls	r3, r3, #1
 8006d3a:	4413      	add	r3, r2
 8006d3c:	015b      	lsls	r3, r3, #5
 8006d3e:	4a3e      	ldr	r2, [pc, #248]	; (8006e38 <OSPI_NOR_ResetMemory+0x144>)
 8006d40:	4413      	add	r3, r2
 8006d42:	2200      	movs	r2, #0
 8006d44:	2100      	movs	r1, #0
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fd fdca 	bl	80048e0 <MX25UM51245G_ResetMemory>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d003      	beq.n	8006d5a <OSPI_NOR_ResetMemory+0x66>
                                    BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006d52:	f06f 0304 	mvn.w	r3, #4
 8006d56:	60fb      	str	r3, [r7, #12]
 8006d58:	e068      	b.n	8006e2c <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	005b      	lsls	r3, r3, #1
 8006d60:	4413      	add	r3, r2
 8006d62:	015b      	lsls	r3, r3, #5
 8006d64:	4a34      	ldr	r2, [pc, #208]	; (8006e38 <OSPI_NOR_ResetMemory+0x144>)
 8006d66:	4413      	add	r3, r2
 8006d68:	2200      	movs	r2, #0
 8006d6a:	2101      	movs	r1, #1
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7fd fd5f 	bl	8004830 <MX25UM51245G_ResetEnable>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d003      	beq.n	8006d80 <OSPI_NOR_ResetMemory+0x8c>
                                    BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006d78:	f06f 0304 	mvn.w	r3, #4
 8006d7c:	60fb      	str	r3, [r7, #12]
 8006d7e:	e055      	b.n	8006e2c <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	4613      	mov	r3, r2
 8006d84:	005b      	lsls	r3, r3, #1
 8006d86:	4413      	add	r3, r2
 8006d88:	015b      	lsls	r3, r3, #5
 8006d8a:	4a2b      	ldr	r2, [pc, #172]	; (8006e38 <OSPI_NOR_ResetMemory+0x144>)
 8006d8c:	4413      	add	r3, r2
 8006d8e:	2200      	movs	r2, #0
 8006d90:	2101      	movs	r1, #1
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7fd fda4 	bl	80048e0 <MX25UM51245G_ResetMemory>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d003      	beq.n	8006da6 <OSPI_NOR_ResetMemory+0xb2>
                                    BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006d9e:	f06f 0304 	mvn.w	r3, #4
 8006da2:	60fb      	str	r3, [r7, #12]
 8006da4:	e042      	b.n	8006e2c <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	4613      	mov	r3, r2
 8006daa:	005b      	lsls	r3, r3, #1
 8006dac:	4413      	add	r3, r2
 8006dae:	015b      	lsls	r3, r3, #5
 8006db0:	4a21      	ldr	r2, [pc, #132]	; (8006e38 <OSPI_NOR_ResetMemory+0x144>)
 8006db2:	4413      	add	r3, r2
 8006db4:	2201      	movs	r2, #1
 8006db6:	2101      	movs	r1, #1
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7fd fd39 	bl	8004830 <MX25UM51245G_ResetEnable>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d003      	beq.n	8006dcc <OSPI_NOR_ResetMemory+0xd8>
                                    BSP_OSPI_NOR_DTR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006dc4:	f06f 0304 	mvn.w	r3, #4
 8006dc8:	60fb      	str	r3, [r7, #12]
 8006dca:	e02f      	b.n	8006e2c <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	005b      	lsls	r3, r3, #1
 8006dd2:	4413      	add	r3, r2
 8006dd4:	015b      	lsls	r3, r3, #5
 8006dd6:	4a18      	ldr	r2, [pc, #96]	; (8006e38 <OSPI_NOR_ResetMemory+0x144>)
 8006dd8:	4413      	add	r3, r2
 8006dda:	2201      	movs	r2, #1
 8006ddc:	2101      	movs	r1, #1
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7fd fd7e 	bl	80048e0 <MX25UM51245G_ResetMemory>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d003      	beq.n	8006df2 <OSPI_NOR_ResetMemory+0xfe>
                                    BSP_OSPI_NOR_DTR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006dea:	f06f 0304 	mvn.w	r3, #4
 8006dee:	60fb      	str	r3, [r7, #12]
 8006df0:	e01c      	b.n	8006e2c <OSPI_NOR_ResetMemory+0x138>
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access  */
 8006df2:	4912      	ldr	r1, [pc, #72]	; (8006e3c <OSPI_NOR_ResetMemory+0x148>)
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	4613      	mov	r3, r2
 8006df8:	005b      	lsls	r3, r3, #1
 8006dfa:	4413      	add	r3, r2
 8006dfc:	440b      	add	r3, r1
 8006dfe:	2201      	movs	r2, #1
 8006e00:	701a      	strb	r2, [r3, #0]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;     /* After reset H/W back to SPI mode by default */
 8006e02:	490e      	ldr	r1, [pc, #56]	; (8006e3c <OSPI_NOR_ResetMemory+0x148>)
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	4613      	mov	r3, r2
 8006e08:	005b      	lsls	r3, r3, #1
 8006e0a:	4413      	add	r3, r2
 8006e0c:	440b      	add	r3, r1
 8006e0e:	3301      	adds	r3, #1
 8006e10:	2200      	movs	r2, #0
 8006e12:	701a      	strb	r2, [r3, #0]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER; /* After reset S/W setting to STR mode         */
 8006e14:	4909      	ldr	r1, [pc, #36]	; (8006e3c <OSPI_NOR_ResetMemory+0x148>)
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	005b      	lsls	r3, r3, #1
 8006e1c:	4413      	add	r3, r2
 8006e1e:	440b      	add	r3, r1
 8006e20:	3302      	adds	r3, #2
 8006e22:	2200      	movs	r2, #0
 8006e24:	701a      	strb	r2, [r3, #0]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25UM51245G_RESET_MAX_TIME);
 8006e26:	2064      	movs	r0, #100	; 0x64
 8006e28:	f000 fd14 	bl	8007854 <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	20197294 	.word	0x20197294
 8006e3c:	201972f4 	.word	0x201972f4

08006e40 <OSPI_NOR_EnterDOPIMode>:
  * @brief  This function enables the octal DTR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
{
 8006e40:	b590      	push	{r4, r7, lr}
 8006e42:	b087      	sub	sp, #28
 8006e44:	af02      	add	r7, sp, #8
 8006e46:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t reg[2];

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d003      	beq.n	8006e56 <OSPI_NOR_EnterDOPIMode+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006e4e:	f06f 0301 	mvn.w	r3, #1
 8006e52:	60fb      	str	r3, [r7, #12]
 8006e54:	e0e4      	b.n	8007020 <OSPI_NOR_EnterDOPIMode+0x1e0>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	4613      	mov	r3, r2
 8006e5a:	005b      	lsls	r3, r3, #1
 8006e5c:	4413      	add	r3, r2
 8006e5e:	015b      	lsls	r3, r3, #5
 8006e60:	4a72      	ldr	r2, [pc, #456]	; (800702c <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8006e62:	1898      	adds	r0, r3, r2
 8006e64:	4972      	ldr	r1, [pc, #456]	; (8007030 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	4613      	mov	r3, r2
 8006e6a:	005b      	lsls	r3, r3, #1
 8006e6c:	4413      	add	r3, r2
 8006e6e:	440b      	add	r3, r1
 8006e70:	3301      	adds	r3, #1
 8006e72:	7819      	ldrb	r1, [r3, #0]
 8006e74:	4c6e      	ldr	r4, [pc, #440]	; (8007030 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	005b      	lsls	r3, r3, #1
 8006e7c:	4413      	add	r3, r2
 8006e7e:	4423      	add	r3, r4
 8006e80:	3302      	adds	r3, #2
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	461a      	mov	r2, r3
 8006e86:	f7fd facf 	bl	8004428 <MX25UM51245G_WriteEnable>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d003      	beq.n	8006e98 <OSPI_NOR_EnterDOPIMode+0x58>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006e90:	f06f 0304 	mvn.w	r3, #4
 8006e94:	60fb      	str	r3, [r7, #12]
 8006e96:	e0c3      	b.n	8007020 <OSPI_NOR_EnterDOPIMode+0x1e0>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25UM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	005b      	lsls	r3, r3, #1
 8006e9e:	4413      	add	r3, r2
 8006ea0:	015b      	lsls	r3, r3, #5
 8006ea2:	4a62      	ldr	r2, [pc, #392]	; (800702c <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8006ea4:	1898      	adds	r0, r3, r2
 8006ea6:	4962      	ldr	r1, [pc, #392]	; (8007030 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	005b      	lsls	r3, r3, #1
 8006eae:	4413      	add	r3, r2
 8006eb0:	440b      	add	r3, r1
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	7819      	ldrb	r1, [r3, #0]
 8006eb6:	4c5e      	ldr	r4, [pc, #376]	; (8007030 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	005b      	lsls	r3, r3, #1
 8006ebe:	4413      	add	r3, r2
 8006ec0:	4423      	add	r3, r4
 8006ec2:	3302      	adds	r3, #2
 8006ec4:	781a      	ldrb	r2, [r3, #0]
 8006ec6:	2307      	movs	r3, #7
 8006ec8:	9300      	str	r3, [sp, #0]
 8006eca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006ece:	f7fd fb7b 	bl	80045c8 <MX25UM51245G_WriteCfg2Register>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d003      	beq.n	8006ee0 <OSPI_NOR_EnterDOPIMode+0xa0>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG3_ADDR,
                                          MX25UM51245G_CR2_DC_6_CYCLES) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006ed8:	f06f 0304 	mvn.w	r3, #4
 8006edc:	60fb      	str	r3, [r7, #12]
 8006ede:	e09f      	b.n	8007020 <OSPI_NOR_EnterDOPIMode+0x1e0>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	005b      	lsls	r3, r3, #1
 8006ee6:	4413      	add	r3, r2
 8006ee8:	015b      	lsls	r3, r3, #5
 8006eea:	4a50      	ldr	r2, [pc, #320]	; (800702c <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8006eec:	1898      	adds	r0, r3, r2
 8006eee:	4950      	ldr	r1, [pc, #320]	; (8007030 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	005b      	lsls	r3, r3, #1
 8006ef6:	4413      	add	r3, r2
 8006ef8:	440b      	add	r3, r1
 8006efa:	3301      	adds	r3, #1
 8006efc:	7819      	ldrb	r1, [r3, #0]
 8006efe:	4c4c      	ldr	r4, [pc, #304]	; (8007030 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	4613      	mov	r3, r2
 8006f04:	005b      	lsls	r3, r3, #1
 8006f06:	4413      	add	r3, r2
 8006f08:	4423      	add	r3, r4
 8006f0a:	3302      	adds	r3, #2
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	461a      	mov	r2, r3
 8006f10:	f7fd fa8a 	bl	8004428 <MX25UM51245G_WriteEnable>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d003      	beq.n	8006f22 <OSPI_NOR_EnterDOPIMode+0xe2>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006f1a:	f06f 0304 	mvn.w	r3, #4
 8006f1e:	60fb      	str	r3, [r7, #12]
 8006f20:	e07e      	b.n	8007020 <OSPI_NOR_EnterDOPIMode+0x1e0>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25UM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	4613      	mov	r3, r2
 8006f26:	005b      	lsls	r3, r3, #1
 8006f28:	4413      	add	r3, r2
 8006f2a:	015b      	lsls	r3, r3, #5
 8006f2c:	4a3f      	ldr	r2, [pc, #252]	; (800702c <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8006f2e:	1898      	adds	r0, r3, r2
 8006f30:	493f      	ldr	r1, [pc, #252]	; (8007030 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	4613      	mov	r3, r2
 8006f36:	005b      	lsls	r3, r3, #1
 8006f38:	4413      	add	r3, r2
 8006f3a:	440b      	add	r3, r1
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	7819      	ldrb	r1, [r3, #0]
 8006f40:	4c3b      	ldr	r4, [pc, #236]	; (8007030 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	4613      	mov	r3, r2
 8006f46:	005b      	lsls	r3, r3, #1
 8006f48:	4413      	add	r3, r2
 8006f4a:	4423      	add	r3, r4
 8006f4c:	3302      	adds	r3, #2
 8006f4e:	781a      	ldrb	r2, [r3, #0]
 8006f50:	2302      	movs	r3, #2
 8006f52:	9300      	str	r3, [sp, #0]
 8006f54:	2300      	movs	r3, #0
 8006f56:	f7fd fb37 	bl	80045c8 <MX25UM51245G_WriteCfg2Register>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d003      	beq.n	8006f68 <OSPI_NOR_EnterDOPIMode+0x128>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG1_ADDR,
                                          MX25UM51245G_CR2_DOPI) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006f60:	f06f 0304 	mvn.w	r3, #4
 8006f64:	60fb      	str	r3, [r7, #12]
 8006f66:	e05b      	b.n	8007020 <OSPI_NOR_EnterDOPIMode+0x1e0>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
 8006f68:	2028      	movs	r0, #40	; 0x28
 8006f6a:	f000 fc73 	bl	8007854 <HAL_Delay>

    /* Reconfigure the memory type of the peripheral */
    hospi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
 8006f6e:	492f      	ldr	r1, [pc, #188]	; (800702c <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	4613      	mov	r3, r2
 8006f74:	005b      	lsls	r3, r3, #1
 8006f76:	4413      	add	r3, r2
 8006f78:	015b      	lsls	r3, r3, #5
 8006f7a:	440b      	add	r3, r1
 8006f7c:	330c      	adds	r3, #12
 8006f7e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f82:	601a      	str	r2, [r3, #0]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
 8006f84:	4929      	ldr	r1, [pc, #164]	; (800702c <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	005b      	lsls	r3, r3, #1
 8006f8c:	4413      	add	r3, r2
 8006f8e:	015b      	lsls	r3, r3, #5
 8006f90:	440b      	add	r3, r1
 8006f92:	332c      	adds	r3, #44	; 0x2c
 8006f94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f98:	601a      	str	r2, [r3, #0]
    if (HAL_XSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	005b      	lsls	r3, r3, #1
 8006fa0:	4413      	add	r3, r2
 8006fa2:	015b      	lsls	r3, r3, #5
 8006fa4:	4a21      	ldr	r2, [pc, #132]	; (800702c <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8006fa6:	4413      	add	r3, r2
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f00b fe63 	bl	8012c74 <HAL_XSPI_Init>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d003      	beq.n	8006fbc <OSPI_NOR_EnterDOPIMode+0x17c>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006fb4:	f06f 0303 	mvn.w	r3, #3
 8006fb8:	60fb      	str	r3, [r7, #12]
 8006fba:	e031      	b.n	8007020 <OSPI_NOR_EnterDOPIMode+0x1e0>
    }
    /* Check Flash busy ? */
    else if (MX25UM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	005b      	lsls	r3, r3, #1
 8006fc2:	4413      	add	r3, r2
 8006fc4:	015b      	lsls	r3, r3, #5
 8006fc6:	4a19      	ldr	r2, [pc, #100]	; (800702c <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8006fc8:	4413      	add	r3, r2
 8006fca:	2201      	movs	r2, #1
 8006fcc:	2101      	movs	r1, #1
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7fd f85f 	bl	8004092 <MX25UM51245G_AutoPollingMemReady>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d003      	beq.n	8006fe2 <OSPI_NOR_EnterDOPIMode+0x1a2>
                                              BSP_OSPI_NOR_DTR_TRANSFER) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006fda:	f06f 0304 	mvn.w	r3, #4
 8006fde:	60fb      	str	r3, [r7, #12]
 8006fe0:	e01e      	b.n	8007020 <OSPI_NOR_EnterDOPIMode+0x1e0>
    }
    /* Check the configuration has been correctly done */
    else if (MX25UM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER,
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	005b      	lsls	r3, r3, #1
 8006fe8:	4413      	add	r3, r2
 8006fea:	015b      	lsls	r3, r3, #5
 8006fec:	4a0f      	ldr	r2, [pc, #60]	; (800702c <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8006fee:	1898      	adds	r0, r3, r2
 8006ff0:	f107 0308 	add.w	r3, r7, #8
 8006ff4:	9300      	str	r3, [sp, #0]
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	2101      	movs	r1, #1
 8006ffc:	f7fd fb79 	bl	80046f2 <MX25UM51245G_ReadCfg2Register>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d003      	beq.n	800700e <OSPI_NOR_EnterDOPIMode+0x1ce>
                                           MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007006:	f06f 0304 	mvn.w	r3, #4
 800700a:	60fb      	str	r3, [r7, #12]
 800700c:	e008      	b.n	8007020 <OSPI_NOR_EnterDOPIMode+0x1e0>
    }
    else if (reg[0] != MX25UM51245G_CR2_DOPI)
 800700e:	7a3b      	ldrb	r3, [r7, #8]
 8007010:	2b02      	cmp	r3, #2
 8007012:	d003      	beq.n	800701c <OSPI_NOR_EnterDOPIMode+0x1dc>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007014:	f06f 0304 	mvn.w	r3, #4
 8007018:	60fb      	str	r3, [r7, #12]
 800701a:	e001      	b.n	8007020 <OSPI_NOR_EnterDOPIMode+0x1e0>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 800701c:	2300      	movs	r3, #0
 800701e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
 8007020:	68fb      	ldr	r3, [r7, #12]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3714      	adds	r7, #20
 8007026:	46bd      	mov	sp, r7
 8007028:	bd90      	pop	{r4, r7, pc}
 800702a:	bf00      	nop
 800702c:	20197294 	.word	0x20197294
 8007030:	201972f4 	.word	0x201972f4

08007034 <OSPI_NOR_EnterSOPIMode>:
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
{
 8007034:	b590      	push	{r4, r7, lr}
 8007036:	b087      	sub	sp, #28
 8007038:	af02      	add	r7, sp, #8
 800703a:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t reg[2];

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d003      	beq.n	800704a <OSPI_NOR_EnterSOPIMode+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007042:	f06f 0301 	mvn.w	r3, #1
 8007046:	60fb      	str	r3, [r7, #12]
 8007048:	e0bd      	b.n	80071c6 <OSPI_NOR_EnterSOPIMode+0x192>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	4613      	mov	r3, r2
 800704e:	005b      	lsls	r3, r3, #1
 8007050:	4413      	add	r3, r2
 8007052:	015b      	lsls	r3, r3, #5
 8007054:	4a5e      	ldr	r2, [pc, #376]	; (80071d0 <OSPI_NOR_EnterSOPIMode+0x19c>)
 8007056:	1898      	adds	r0, r3, r2
 8007058:	495e      	ldr	r1, [pc, #376]	; (80071d4 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	4613      	mov	r3, r2
 800705e:	005b      	lsls	r3, r3, #1
 8007060:	4413      	add	r3, r2
 8007062:	440b      	add	r3, r1
 8007064:	3301      	adds	r3, #1
 8007066:	7819      	ldrb	r1, [r3, #0]
 8007068:	4c5a      	ldr	r4, [pc, #360]	; (80071d4 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	4613      	mov	r3, r2
 800706e:	005b      	lsls	r3, r3, #1
 8007070:	4413      	add	r3, r2
 8007072:	4423      	add	r3, r4
 8007074:	3302      	adds	r3, #2
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	461a      	mov	r2, r3
 800707a:	f7fd f9d5 	bl	8004428 <MX25UM51245G_WriteEnable>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d003      	beq.n	800708c <OSPI_NOR_EnterSOPIMode+0x58>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007084:	f06f 0304 	mvn.w	r3, #4
 8007088:	60fb      	str	r3, [r7, #12]
 800708a:	e09c      	b.n	80071c6 <OSPI_NOR_EnterSOPIMode+0x192>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25UM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	4613      	mov	r3, r2
 8007090:	005b      	lsls	r3, r3, #1
 8007092:	4413      	add	r3, r2
 8007094:	015b      	lsls	r3, r3, #5
 8007096:	4a4e      	ldr	r2, [pc, #312]	; (80071d0 <OSPI_NOR_EnterSOPIMode+0x19c>)
 8007098:	1898      	adds	r0, r3, r2
 800709a:	494e      	ldr	r1, [pc, #312]	; (80071d4 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	4613      	mov	r3, r2
 80070a0:	005b      	lsls	r3, r3, #1
 80070a2:	4413      	add	r3, r2
 80070a4:	440b      	add	r3, r1
 80070a6:	3301      	adds	r3, #1
 80070a8:	7819      	ldrb	r1, [r3, #0]
 80070aa:	4c4a      	ldr	r4, [pc, #296]	; (80071d4 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	4613      	mov	r3, r2
 80070b0:	005b      	lsls	r3, r3, #1
 80070b2:	4413      	add	r3, r2
 80070b4:	4423      	add	r3, r4
 80070b6:	3302      	adds	r3, #2
 80070b8:	781a      	ldrb	r2, [r3, #0]
 80070ba:	2307      	movs	r3, #7
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80070c2:	f7fd fa81 	bl	80045c8 <MX25UM51245G_WriteCfg2Register>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d003      	beq.n	80070d4 <OSPI_NOR_EnterSOPIMode+0xa0>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG3_ADDR,
                                          MX25UM51245G_CR2_DC_6_CYCLES) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80070cc:	f06f 0304 	mvn.w	r3, #4
 80070d0:	60fb      	str	r3, [r7, #12]
 80070d2:	e078      	b.n	80071c6 <OSPI_NOR_EnterSOPIMode+0x192>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	4613      	mov	r3, r2
 80070d8:	005b      	lsls	r3, r3, #1
 80070da:	4413      	add	r3, r2
 80070dc:	015b      	lsls	r3, r3, #5
 80070de:	4a3c      	ldr	r2, [pc, #240]	; (80071d0 <OSPI_NOR_EnterSOPIMode+0x19c>)
 80070e0:	1898      	adds	r0, r3, r2
 80070e2:	493c      	ldr	r1, [pc, #240]	; (80071d4 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	4613      	mov	r3, r2
 80070e8:	005b      	lsls	r3, r3, #1
 80070ea:	4413      	add	r3, r2
 80070ec:	440b      	add	r3, r1
 80070ee:	3301      	adds	r3, #1
 80070f0:	7819      	ldrb	r1, [r3, #0]
 80070f2:	4c38      	ldr	r4, [pc, #224]	; (80071d4 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	4613      	mov	r3, r2
 80070f8:	005b      	lsls	r3, r3, #1
 80070fa:	4413      	add	r3, r2
 80070fc:	4423      	add	r3, r4
 80070fe:	3302      	adds	r3, #2
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	461a      	mov	r2, r3
 8007104:	f7fd f990 	bl	8004428 <MX25UM51245G_WriteEnable>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d003      	beq.n	8007116 <OSPI_NOR_EnterSOPIMode+0xe2>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800710e:	f06f 0304 	mvn.w	r3, #4
 8007112:	60fb      	str	r3, [r7, #12]
 8007114:	e057      	b.n	80071c6 <OSPI_NOR_EnterSOPIMode+0x192>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25UM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	4613      	mov	r3, r2
 800711a:	005b      	lsls	r3, r3, #1
 800711c:	4413      	add	r3, r2
 800711e:	015b      	lsls	r3, r3, #5
 8007120:	4a2b      	ldr	r2, [pc, #172]	; (80071d0 <OSPI_NOR_EnterSOPIMode+0x19c>)
 8007122:	1898      	adds	r0, r3, r2
 8007124:	492b      	ldr	r1, [pc, #172]	; (80071d4 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	4613      	mov	r3, r2
 800712a:	005b      	lsls	r3, r3, #1
 800712c:	4413      	add	r3, r2
 800712e:	440b      	add	r3, r1
 8007130:	3301      	adds	r3, #1
 8007132:	7819      	ldrb	r1, [r3, #0]
 8007134:	4c27      	ldr	r4, [pc, #156]	; (80071d4 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	4613      	mov	r3, r2
 800713a:	005b      	lsls	r3, r3, #1
 800713c:	4413      	add	r3, r2
 800713e:	4423      	add	r3, r4
 8007140:	3302      	adds	r3, #2
 8007142:	781a      	ldrb	r2, [r3, #0]
 8007144:	2301      	movs	r3, #1
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	2300      	movs	r3, #0
 800714a:	f7fd fa3d 	bl	80045c8 <MX25UM51245G_WriteCfg2Register>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d003      	beq.n	800715c <OSPI_NOR_EnterSOPIMode+0x128>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG1_ADDR,
                                          MX25UM51245G_CR2_SOPI) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007154:	f06f 0304 	mvn.w	r3, #4
 8007158:	60fb      	str	r3, [r7, #12]
 800715a:	e034      	b.n	80071c6 <OSPI_NOR_EnterSOPIMode+0x192>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
 800715c:	2028      	movs	r0, #40	; 0x28
 800715e:	f000 fb79 	bl	8007854 <HAL_Delay>

    /* Check Flash busy ? */
    if (MX25UM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	4613      	mov	r3, r2
 8007166:	005b      	lsls	r3, r3, #1
 8007168:	4413      	add	r3, r2
 800716a:	015b      	lsls	r3, r3, #5
 800716c:	4a18      	ldr	r2, [pc, #96]	; (80071d0 <OSPI_NOR_EnterSOPIMode+0x19c>)
 800716e:	4413      	add	r3, r2
 8007170:	2200      	movs	r2, #0
 8007172:	2101      	movs	r1, #1
 8007174:	4618      	mov	r0, r3
 8007176:	f7fc ff8c 	bl	8004092 <MX25UM51245G_AutoPollingMemReady>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d003      	beq.n	8007188 <OSPI_NOR_EnterSOPIMode+0x154>
                                         BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007180:	f06f 0304 	mvn.w	r3, #4
 8007184:	60fb      	str	r3, [r7, #12]
 8007186:	e01e      	b.n	80071c6 <OSPI_NOR_EnterSOPIMode+0x192>
    }
    /* Check the configuration has been correctly done */
    else if (MX25UM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER,
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	4613      	mov	r3, r2
 800718c:	005b      	lsls	r3, r3, #1
 800718e:	4413      	add	r3, r2
 8007190:	015b      	lsls	r3, r3, #5
 8007192:	4a0f      	ldr	r2, [pc, #60]	; (80071d0 <OSPI_NOR_EnterSOPIMode+0x19c>)
 8007194:	1898      	adds	r0, r3, r2
 8007196:	f107 0308 	add.w	r3, r7, #8
 800719a:	9300      	str	r3, [sp, #0]
 800719c:	2300      	movs	r3, #0
 800719e:	2200      	movs	r2, #0
 80071a0:	2101      	movs	r1, #1
 80071a2:	f7fd faa6 	bl	80046f2 <MX25UM51245G_ReadCfg2Register>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d003      	beq.n	80071b4 <OSPI_NOR_EnterSOPIMode+0x180>
                                           MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80071ac:	f06f 0304 	mvn.w	r3, #4
 80071b0:	60fb      	str	r3, [r7, #12]
 80071b2:	e008      	b.n	80071c6 <OSPI_NOR_EnterSOPIMode+0x192>
    }
    else if (reg[0] != MX25UM51245G_CR2_SOPI)
 80071b4:	7a3b      	ldrb	r3, [r7, #8]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d003      	beq.n	80071c2 <OSPI_NOR_EnterSOPIMode+0x18e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80071ba:	f06f 0304 	mvn.w	r3, #4
 80071be:	60fb      	str	r3, [r7, #12]
 80071c0:	e001      	b.n	80071c6 <OSPI_NOR_EnterSOPIMode+0x192>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 80071c2:	2300      	movs	r3, #0
 80071c4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
 80071c6:	68fb      	ldr	r3, [r7, #12]
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3714      	adds	r7, #20
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd90      	pop	{r4, r7, pc}
 80071d0:	20197294 	.word	0x20197294
 80071d4:	201972f4 	.word	0x201972f4

080071d8 <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode(uint32_t Instance)
{
 80071d8:	b590      	push	{r4, r7, lr}
 80071da:	b087      	sub	sp, #28
 80071dc:	af02      	add	r7, sp, #8
 80071de:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80071e0:	2300      	movs	r3, #0
 80071e2:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d003      	beq.n	80071f2 <OSPI_NOR_ExitOPIMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80071ea:	f06f 0301 	mvn.w	r3, #1
 80071ee:	60fb      	str	r3, [r7, #12]
 80071f0:	e0aa      	b.n	8007348 <OSPI_NOR_ExitOPIMode+0x170>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	4613      	mov	r3, r2
 80071f6:	005b      	lsls	r3, r3, #1
 80071f8:	4413      	add	r3, r2
 80071fa:	015b      	lsls	r3, r3, #5
 80071fc:	4a55      	ldr	r2, [pc, #340]	; (8007354 <OSPI_NOR_ExitOPIMode+0x17c>)
 80071fe:	1898      	adds	r0, r3, r2
 8007200:	4955      	ldr	r1, [pc, #340]	; (8007358 <OSPI_NOR_ExitOPIMode+0x180>)
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	4613      	mov	r3, r2
 8007206:	005b      	lsls	r3, r3, #1
 8007208:	4413      	add	r3, r2
 800720a:	440b      	add	r3, r1
 800720c:	3301      	adds	r3, #1
 800720e:	7819      	ldrb	r1, [r3, #0]
 8007210:	4c51      	ldr	r4, [pc, #324]	; (8007358 <OSPI_NOR_ExitOPIMode+0x180>)
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	4613      	mov	r3, r2
 8007216:	005b      	lsls	r3, r3, #1
 8007218:	4413      	add	r3, r2
 800721a:	4423      	add	r3, r4
 800721c:	3302      	adds	r3, #2
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	461a      	mov	r2, r3
 8007222:	f7fd f901 	bl	8004428 <MX25UM51245G_WriteEnable>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d003      	beq.n	8007234 <OSPI_NOR_ExitOPIMode+0x5c>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800722c:	f06f 0304 	mvn.w	r3, #4
 8007230:	60fb      	str	r3, [r7, #12]
 8007232:	e089      	b.n	8007348 <OSPI_NOR_ExitOPIMode+0x170>
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 8007234:	2300      	movs	r3, #0
 8007236:	723b      	strb	r3, [r7, #8]
    reg[1] = 0;
 8007238:	2300      	movs	r3, #0
 800723a:	727b      	strb	r3, [r7, #9]
    if (MX25UM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	4613      	mov	r3, r2
 8007240:	005b      	lsls	r3, r3, #1
 8007242:	4413      	add	r3, r2
 8007244:	015b      	lsls	r3, r3, #5
 8007246:	4a43      	ldr	r2, [pc, #268]	; (8007354 <OSPI_NOR_ExitOPIMode+0x17c>)
 8007248:	1898      	adds	r0, r3, r2
 800724a:	4943      	ldr	r1, [pc, #268]	; (8007358 <OSPI_NOR_ExitOPIMode+0x180>)
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	4613      	mov	r3, r2
 8007250:	005b      	lsls	r3, r3, #1
 8007252:	4413      	add	r3, r2
 8007254:	440b      	add	r3, r1
 8007256:	3301      	adds	r3, #1
 8007258:	7819      	ldrb	r1, [r3, #0]
 800725a:	4c3f      	ldr	r4, [pc, #252]	; (8007358 <OSPI_NOR_ExitOPIMode+0x180>)
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	4613      	mov	r3, r2
 8007260:	005b      	lsls	r3, r3, #1
 8007262:	4413      	add	r3, r2
 8007264:	4423      	add	r3, r4
 8007266:	3302      	adds	r3, #2
 8007268:	781a      	ldrb	r2, [r3, #0]
 800726a:	7a3b      	ldrb	r3, [r7, #8]
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	2300      	movs	r3, #0
 8007270:	f7fd f9aa 	bl	80045c8 <MX25UM51245G_WriteCfg2Register>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d003      	beq.n	8007282 <OSPI_NOR_ExitOPIMode+0xaa>
                                       Ospi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG1_ADDR,
                                       reg[0]) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800727a:	f06f 0304 	mvn.w	r3, #4
 800727e:	60fb      	str	r3, [r7, #12]
 8007280:	e062      	b.n	8007348 <OSPI_NOR_ExitOPIMode+0x170>
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
 8007282:	2028      	movs	r0, #40	; 0x28
 8007284:	f000 fae6 	bl	8007854 <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8007288:	4933      	ldr	r1, [pc, #204]	; (8007358 <OSPI_NOR_ExitOPIMode+0x180>)
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	4613      	mov	r3, r2
 800728e:	005b      	lsls	r3, r3, #1
 8007290:	4413      	add	r3, r2
 8007292:	440b      	add	r3, r1
 8007294:	3302      	adds	r3, #2
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d123      	bne.n	80072e4 <OSPI_NOR_ExitOPIMode+0x10c>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
 800729c:	492d      	ldr	r1, [pc, #180]	; (8007354 <OSPI_NOR_ExitOPIMode+0x17c>)
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	4613      	mov	r3, r2
 80072a2:	005b      	lsls	r3, r3, #1
 80072a4:	4413      	add	r3, r2
 80072a6:	015b      	lsls	r3, r3, #5
 80072a8:	440b      	add	r3, r1
 80072aa:	330c      	adds	r3, #12
 80072ac:	2200      	movs	r2, #0
 80072ae:	601a      	str	r2, [r3, #0]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 80072b0:	4928      	ldr	r1, [pc, #160]	; (8007354 <OSPI_NOR_ExitOPIMode+0x17c>)
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	4613      	mov	r3, r2
 80072b6:	005b      	lsls	r3, r3, #1
 80072b8:	4413      	add	r3, r2
 80072ba:	015b      	lsls	r3, r3, #5
 80072bc:	440b      	add	r3, r1
 80072be:	332c      	adds	r3, #44	; 0x2c
 80072c0:	2200      	movs	r2, #0
 80072c2:	601a      	str	r2, [r3, #0]
        if (HAL_XSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	4613      	mov	r3, r2
 80072c8:	005b      	lsls	r3, r3, #1
 80072ca:	4413      	add	r3, r2
 80072cc:	015b      	lsls	r3, r3, #5
 80072ce:	4a21      	ldr	r2, [pc, #132]	; (8007354 <OSPI_NOR_ExitOPIMode+0x17c>)
 80072d0:	4413      	add	r3, r2
 80072d2:	4618      	mov	r0, r3
 80072d4:	f00b fcce 	bl	8012c74 <HAL_XSPI_Init>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d002      	beq.n	80072e4 <OSPI_NOR_ExitOPIMode+0x10c>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 80072de:	f06f 0303 	mvn.w	r3, #3
 80072e2:	60fb      	str	r3, [r7, #12]
        }
      }

      if (ret == BSP_ERROR_NONE)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d12e      	bne.n	8007348 <OSPI_NOR_ExitOPIMode+0x170>
      {
        /* Check Flash busy ? */
        if (MX25UM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE,
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	4613      	mov	r3, r2
 80072ee:	005b      	lsls	r3, r3, #1
 80072f0:	4413      	add	r3, r2
 80072f2:	015b      	lsls	r3, r3, #5
 80072f4:	4a17      	ldr	r2, [pc, #92]	; (8007354 <OSPI_NOR_ExitOPIMode+0x17c>)
 80072f6:	4413      	add	r3, r2
 80072f8:	2200      	movs	r2, #0
 80072fa:	2100      	movs	r1, #0
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7fc fec8 	bl	8004092 <MX25UM51245G_AutoPollingMemReady>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d003      	beq.n	8007310 <OSPI_NOR_ExitOPIMode+0x138>
                                             BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8007308:	f06f 0304 	mvn.w	r3, #4
 800730c:	60fb      	str	r3, [r7, #12]
 800730e:	e01b      	b.n	8007348 <OSPI_NOR_ExitOPIMode+0x170>
        }
        /* Check the configuration has been correctly done */
        else if (MX25UM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER,
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	4613      	mov	r3, r2
 8007314:	005b      	lsls	r3, r3, #1
 8007316:	4413      	add	r3, r2
 8007318:	015b      	lsls	r3, r3, #5
 800731a:	4a0e      	ldr	r2, [pc, #56]	; (8007354 <OSPI_NOR_ExitOPIMode+0x17c>)
 800731c:	1898      	adds	r0, r3, r2
 800731e:	f107 0308 	add.w	r3, r7, #8
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	2300      	movs	r3, #0
 8007326:	2200      	movs	r2, #0
 8007328:	2100      	movs	r1, #0
 800732a:	f7fd f9e2 	bl	80046f2 <MX25UM51245G_ReadCfg2Register>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d003      	beq.n	800733c <OSPI_NOR_ExitOPIMode+0x164>
                                               MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8007334:	f06f 0304 	mvn.w	r3, #4
 8007338:	60fb      	str	r3, [r7, #12]
 800733a:	e005      	b.n	8007348 <OSPI_NOR_ExitOPIMode+0x170>
        }
        else if (reg[0] != 0U)
 800733c:	7a3b      	ldrb	r3, [r7, #8]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d002      	beq.n	8007348 <OSPI_NOR_ExitOPIMode+0x170>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8007342:	f06f 0304 	mvn.w	r3, #4
 8007346:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8007348:	68fb      	ldr	r3, [r7, #12]
}
 800734a:	4618      	mov	r0, r3
 800734c:	3714      	adds	r7, #20
 800734e:	46bd      	mov	sp, r7
 8007350:	bd90      	pop	{r4, r7, pc}
 8007352:	bf00      	nop
 8007354:	20197294 	.word	0x20197294
 8007358:	201972f4 	.word	0x201972f4

0800735c <BSP_TS_Init>:
  * @param  Instance TS Instance.
  * @param  TS_Init  Pointer to TS initialization structure.
  * @retval BSP status.
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b088      	sub	sp, #32
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8007366:	2300      	movs	r3, #0
 8007368:	61fb      	str	r3, [r7, #28]

  if ((TS_Init == NULL) || (Instance >= TS_INSTANCES_NBR))
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d002      	beq.n	8007376 <BSP_TS_Init+0x1a>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d003      	beq.n	800737e <BSP_TS_Init+0x22>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8007376:	f06f 0301 	mvn.w	r3, #1
 800737a:	61fb      	str	r3, [r7, #28]
 800737c:	e07f      	b.n	800747e <BSP_TS_Init+0x122>
  }
  else
  {
    /* Probe the TS driver */
    if (SITRONIX_Probe(Instance) != BSP_ERROR_NONE)
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f98c 	bl	800769c <SITRONIX_Probe>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d003      	beq.n	8007392 <BSP_TS_Init+0x36>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 800738a:	f06f 0304 	mvn.w	r3, #4
 800738e:	61fb      	str	r3, [r7, #28]
 8007390:	e075      	b.n	800747e <BSP_TS_Init+0x122>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t          i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	493c      	ldr	r1, [pc, #240]	; (8007488 <BSP_TS_Init+0x12c>)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2068      	movs	r0, #104	; 0x68
 800739c:	fb00 f303 	mul.w	r3, r0, r3
 80073a0:	440b      	add	r3, r1
 80073a2:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	685a      	ldr	r2, [r3, #4]
 80073a8:	4937      	ldr	r1, [pc, #220]	; (8007488 <BSP_TS_Init+0x12c>)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2068      	movs	r0, #104	; 0x68
 80073ae:	fb00 f303 	mul.w	r3, r0, r3
 80073b2:	440b      	add	r3, r1
 80073b4:	3304      	adds	r3, #4
 80073b6:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	689a      	ldr	r2, [r3, #8]
 80073bc:	4932      	ldr	r1, [pc, #200]	; (8007488 <BSP_TS_Init+0x12c>)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2068      	movs	r0, #104	; 0x68
 80073c2:	fb00 f303 	mul.w	r3, r0, r3
 80073c6:	440b      	add	r3, r1
 80073c8:	3308      	adds	r3, #8
 80073ca:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	68da      	ldr	r2, [r3, #12]
 80073d0:	492d      	ldr	r1, [pc, #180]	; (8007488 <BSP_TS_Init+0x12c>)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2068      	movs	r0, #104	; 0x68
 80073d6:	fb00 f303 	mul.w	r3, r0, r3
 80073da:	440b      	add	r3, r1
 80073dc:	330c      	adds	r3, #12
 80073de:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
      if (Ts_Drv[Instance]->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80073e0:	4a2a      	ldr	r2, [pc, #168]	; (800748c <BSP_TS_Init+0x130>)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073e8:	69db      	ldr	r3, [r3, #28]
 80073ea:	4929      	ldr	r1, [pc, #164]	; (8007490 <BSP_TS_Init+0x134>)
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80073f2:	f107 010c 	add.w	r1, r7, #12
 80073f6:	4610      	mov	r0, r2
 80073f8:	4798      	blx	r3
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	da03      	bge.n	8007408 <BSP_TS_Init+0xac>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 8007400:	f06f 0304 	mvn.w	r3, #4
 8007404:	61fb      	str	r3, [r7, #28]
 8007406:	e03a      	b.n	800747e <BSP_TS_Init+0x122>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8007408:	693a      	ldr	r2, [r7, #16]
 800740a:	491f      	ldr	r1, [pc, #124]	; (8007488 <BSP_TS_Init+0x12c>)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2068      	movs	r0, #104	; 0x68
 8007410:	fb00 f303 	mul.w	r3, r0, r3
 8007414:	440b      	add	r3, r1
 8007416:	3310      	adds	r3, #16
 8007418:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	491a      	ldr	r1, [pc, #104]	; (8007488 <BSP_TS_Init+0x12c>)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2068      	movs	r0, #104	; 0x68
 8007422:	fb00 f303 	mul.w	r3, r0, r3
 8007426:	440b      	add	r3, r1
 8007428:	3314      	adds	r3, #20
 800742a:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for (i = 0; i < TS_TOUCH_NBR; i++)
 800742c:	2300      	movs	r3, #0
 800742e:	61bb      	str	r3, [r7, #24]
 8007430:	e022      	b.n	8007478 <BSP_TS_Init+0x11c>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	4413      	add	r3, r2
 800743c:	1c5a      	adds	r2, r3, #1
 800743e:	4812      	ldr	r0, [pc, #72]	; (8007488 <BSP_TS_Init+0x12c>)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	211a      	movs	r1, #26
 8007444:	fb03 f101 	mul.w	r1, r3, r1
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	440b      	add	r3, r1
 800744c:	3306      	adds	r3, #6
 800744e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	685a      	ldr	r2, [r3, #4]
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	4413      	add	r3, r2
 800745c:	1c5a      	adds	r2, r3, #1
 800745e:	480a      	ldr	r0, [pc, #40]	; (8007488 <BSP_TS_Init+0x12c>)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	211a      	movs	r1, #26
 8007464:	fb03 f101 	mul.w	r1, r3, r1
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	440b      	add	r3, r1
 800746c:	3310      	adds	r3, #16
 800746e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        for (i = 0; i < TS_TOUCH_NBR; i++)
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	3301      	adds	r3, #1
 8007476:	61bb      	str	r3, [r7, #24]
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	2b09      	cmp	r3, #9
 800747c:	d9d9      	bls.n	8007432 <BSP_TS_Init+0xd6>
        }
      }
    }
  }

  return status;
 800747e:	69fb      	ldr	r3, [r7, #28]
}
 8007480:	4618      	mov	r0, r3
 8007482:	3720      	adds	r7, #32
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	20197300 	.word	0x20197300
 800748c:	201972fc 	.word	0x201972fc
 8007490:	201972f8 	.word	0x201972f8

08007494 <BSP_TS_GetState>:
  * @param  Instance TS Instance.
  * @param  TS_State Pointer to single touch structure.
  * @retval BSP status.
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b08a      	sub	sp, #40	; 0x28
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 800749e:	2300      	movs	r3, #0
 80074a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented;
  uint32_t y_oriented;
  uint32_t x_diff;
  uint32_t y_diff;

  if (Instance >= TS_INSTANCES_NBR)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d003      	beq.n	80074b0 <BSP_TS_GetState+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80074a8:	f06f 0301 	mvn.w	r3, #1
 80074ac:	627b      	str	r3, [r7, #36]	; 0x24
 80074ae:	e0ea      	b.n	8007686 <BSP_TS_GetState+0x1f2>
  else
  {
    SITRONIX_State_t state;

    /* Get each touch coordinates */
    if (Ts_Drv[Instance]->GetState(Ts_CompObj[Instance], &state) < 0)
 80074b0:	4a77      	ldr	r2, [pc, #476]	; (8007690 <BSP_TS_GetState+0x1fc>)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	4976      	ldr	r1, [pc, #472]	; (8007694 <BSP_TS_GetState+0x200>)
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80074c2:	f107 0108 	add.w	r1, r7, #8
 80074c6:	4610      	mov	r0, r2
 80074c8:	4798      	blx	r3
 80074ca:	4603      	mov	r3, r0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	da03      	bge.n	80074d8 <BSP_TS_GetState+0x44>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 80074d0:	f06f 0304 	mvn.w	r3, #4
 80074d4:	627b      	str	r3, [r7, #36]	; 0x24
 80074d6:	e0d6      	b.n	8007686 <BSP_TS_GetState+0x1f2>
    }/* Check and update the number of touches active detected */
    else if (state.TouchDetected != 0U)
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f000 80bc 	beq.w	8007658 <BSP_TS_GetState+0x1c4>
    {
      x_oriented = /*Ts_Ctx[Instance].MaxX -*/ state.TouchX;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	623b      	str	r3, [r7, #32]
      y_oriented = /*Ts_Ctx[Instance].MaxY -*/ state.TouchY;
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	61fb      	str	r3, [r7, #28]

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / (Ts_Ctx[Instance].MaxX);
 80074e8:	4a6b      	ldr	r2, [pc, #428]	; (8007698 <BSP_TS_GetState+0x204>)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2168      	movs	r1, #104	; 0x68
 80074ee:	fb01 f303 	mul.w	r3, r1, r3
 80074f2:	4413      	add	r3, r2
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	6a3a      	ldr	r2, [r7, #32]
 80074f8:	fb03 f202 	mul.w	r2, r3, r2
 80074fc:	4966      	ldr	r1, [pc, #408]	; (8007698 <BSP_TS_GetState+0x204>)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2068      	movs	r0, #104	; 0x68
 8007502:	fb00 f303 	mul.w	r3, r0, r3
 8007506:	440b      	add	r3, r1
 8007508:	3310      	adds	r3, #16
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / (Ts_Ctx[Instance].MaxY);
 8007514:	4a60      	ldr	r2, [pc, #384]	; (8007698 <BSP_TS_GetState+0x204>)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2168      	movs	r1, #104	; 0x68
 800751a:	fb01 f303 	mul.w	r3, r1, r3
 800751e:	4413      	add	r3, r2
 8007520:	3304      	adds	r3, #4
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	69fa      	ldr	r2, [r7, #28]
 8007526:	fb03 f202 	mul.w	r2, r3, r2
 800752a:	495b      	ldr	r1, [pc, #364]	; (8007698 <BSP_TS_GetState+0x204>)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2068      	movs	r0, #104	; 0x68
 8007530:	fb00 f303 	mul.w	r3, r0, r3
 8007534:	440b      	add	r3, r1
 8007536:	3314      	adds	r3, #20
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	fbb2 f2f3 	udiv	r2, r2, r3
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 8007542:	68ba      	ldr	r2, [r7, #8]
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0]) ?
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	685a      	ldr	r2, [r3, #4]
 800754c:	4952      	ldr	r1, [pc, #328]	; (8007698 <BSP_TS_GetState+0x204>)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2068      	movs	r0, #104	; 0x68
 8007552:	fb00 f303 	mul.w	r3, r0, r3
 8007556:	440b      	add	r3, r1
 8007558:	3318      	adds	r3, #24
 800755a:	681b      	ldr	r3, [r3, #0]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]) :
 800755c:	429a      	cmp	r2, r3
 800755e:	d90b      	bls.n	8007578 <BSP_TS_GetState+0xe4>
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	685a      	ldr	r2, [r3, #4]
 8007564:	494c      	ldr	r1, [pc, #304]	; (8007698 <BSP_TS_GetState+0x204>)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2068      	movs	r0, #104	; 0x68
 800756a:	fb00 f303 	mul.w	r3, r0, r3
 800756e:	440b      	add	r3, r1
 8007570:	3318      	adds	r3, #24
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	e00a      	b.n	800758e <BSP_TS_GetState+0xfa>
               (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 8007578:	4a47      	ldr	r2, [pc, #284]	; (8007698 <BSP_TS_GetState+0x204>)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2168      	movs	r1, #104	; 0x68
 800757e:	fb01 f303 	mul.w	r3, r1, r3
 8007582:	4413      	add	r3, r2
 8007584:	3318      	adds	r3, #24
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	685b      	ldr	r3, [r3, #4]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]) :
 800758c:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0]) ?
 800758e:	61bb      	str	r3, [r7, #24]

      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0]) ?
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	689a      	ldr	r2, [r3, #8]
 8007594:	4940      	ldr	r1, [pc, #256]	; (8007698 <BSP_TS_GetState+0x204>)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2068      	movs	r0, #104	; 0x68
 800759a:	fb00 f303 	mul.w	r3, r0, r3
 800759e:	440b      	add	r3, r1
 80075a0:	3340      	adds	r3, #64	; 0x40
 80075a2:	681b      	ldr	r3, [r3, #0]
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]) :
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d90b      	bls.n	80075c0 <BSP_TS_GetState+0x12c>
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	689a      	ldr	r2, [r3, #8]
 80075ac:	493a      	ldr	r1, [pc, #232]	; (8007698 <BSP_TS_GetState+0x204>)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2068      	movs	r0, #104	; 0x68
 80075b2:	fb00 f303 	mul.w	r3, r0, r3
 80075b6:	440b      	add	r3, r1
 80075b8:	3340      	adds	r3, #64	; 0x40
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	e00a      	b.n	80075d6 <BSP_TS_GetState+0x142>
               (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 80075c0:	4a35      	ldr	r2, [pc, #212]	; (8007698 <BSP_TS_GetState+0x204>)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2168      	movs	r1, #104	; 0x68
 80075c6:	fb01 f303 	mul.w	r3, r1, r3
 80075ca:	4413      	add	r3, r2
 80075cc:	3340      	adds	r3, #64	; 0x40
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	689b      	ldr	r3, [r3, #8]
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]) :
 80075d4:	1ad3      	subs	r3, r2, r3
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0]) ?
 80075d6:	617b      	str	r3, [r7, #20]

      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80075d8:	4a2f      	ldr	r2, [pc, #188]	; (8007698 <BSP_TS_GetState+0x204>)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2168      	movs	r1, #104	; 0x68
 80075de:	fb01 f303 	mul.w	r3, r1, r3
 80075e2:	4413      	add	r3, r2
 80075e4:	330c      	adds	r3, #12
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	69ba      	ldr	r2, [r7, #24]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d80a      	bhi.n	8007604 <BSP_TS_GetState+0x170>
 80075ee:	4a2a      	ldr	r2, [pc, #168]	; (8007698 <BSP_TS_GetState+0x204>)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2168      	movs	r1, #104	; 0x68
 80075f4:	fb01 f303 	mul.w	r3, r1, r3
 80075f8:	4413      	add	r3, r2
 80075fa:	330c      	adds	r3, #12
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	697a      	ldr	r2, [r7, #20]
 8007600:	429a      	cmp	r2, r3
 8007602:	d914      	bls.n	800762e <BSP_TS_GetState+0x19a>
      {
        /* New touch detected */
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	685a      	ldr	r2, [r3, #4]
 8007608:	4923      	ldr	r1, [pc, #140]	; (8007698 <BSP_TS_GetState+0x204>)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2068      	movs	r0, #104	; 0x68
 800760e:	fb00 f303 	mul.w	r3, r0, r3
 8007612:	440b      	add	r3, r1
 8007614:	3318      	adds	r3, #24
 8007616:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	689a      	ldr	r2, [r3, #8]
 800761c:	491e      	ldr	r1, [pc, #120]	; (8007698 <BSP_TS_GetState+0x204>)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2068      	movs	r0, #104	; 0x68
 8007622:	fb00 f303 	mul.w	r3, r0, r3
 8007626:	440b      	add	r3, r1
 8007628:	3340      	adds	r3, #64	; 0x40
 800762a:	601a      	str	r2, [r3, #0]
 800762c:	e02b      	b.n	8007686 <BSP_TS_GetState+0x1f2>
      }
      else
      {
        TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800762e:	4a1a      	ldr	r2, [pc, #104]	; (8007698 <BSP_TS_GetState+0x204>)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2168      	movs	r1, #104	; 0x68
 8007634:	fb01 f303 	mul.w	r3, r1, r3
 8007638:	4413      	add	r3, r2
 800763a:	3318      	adds	r3, #24
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	605a      	str	r2, [r3, #4]
        TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8007642:	4a15      	ldr	r2, [pc, #84]	; (8007698 <BSP_TS_GetState+0x204>)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2168      	movs	r1, #104	; 0x68
 8007648:	fb01 f303 	mul.w	r3, r1, r3
 800764c:	4413      	add	r3, r2
 800764e:	3340      	adds	r3, #64	; 0x40
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	609a      	str	r2, [r3, #8]
 8007656:	e016      	b.n	8007686 <BSP_TS_GetState+0x1f2>
      }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	2200      	movs	r2, #0
 800765c:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800765e:	4a0e      	ldr	r2, [pc, #56]	; (8007698 <BSP_TS_GetState+0x204>)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2168      	movs	r1, #104	; 0x68
 8007664:	fb01 f303 	mul.w	r3, r1, r3
 8007668:	4413      	add	r3, r2
 800766a:	3318      	adds	r3, #24
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8007672:	4a09      	ldr	r2, [pc, #36]	; (8007698 <BSP_TS_GetState+0x204>)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2168      	movs	r1, #104	; 0x68
 8007678:	fb01 f303 	mul.w	r3, r1, r3
 800767c:	4413      	add	r3, r2
 800767e:	3340      	adds	r3, #64	; 0x40
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	609a      	str	r2, [r3, #8]
    }
  }

  return status;
 8007686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007688:	4618      	mov	r0, r3
 800768a:	3728      	adds	r7, #40	; 0x28
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}
 8007690:	201972fc 	.word	0x201972fc
 8007694:	201972f8 	.word	0x201972f8
 8007698:	20197300 	.word	0x20197300

0800769c <SITRONIX_Probe>:
  * @brief  Probe the SITRONIX TS driver.
  * @param  Instance TS Instance.
  * @retval BSP status.
  */
static int32_t SITRONIX_Probe(uint32_t Instance)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b08a      	sub	sp, #40	; 0x28
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  int32_t                  status;
  SITRONIX_IO_t              IOCtx;
  static SITRONIX_Object_t SITRONIXObj;

  /* Configure the TS driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 80076a4:	23e0      	movs	r3, #224	; 0xe0
 80076a6:	823b      	strh	r3, [r7, #16]
  IOCtx.Init        = BSP_I2C5_Init;
 80076a8:	4b1d      	ldr	r3, [pc, #116]	; (8007720 <SITRONIX_Probe+0x84>)
 80076aa:	60bb      	str	r3, [r7, #8]
  IOCtx.DeInit      = BSP_I2C5_DeInit;
 80076ac:	4b1d      	ldr	r3, [pc, #116]	; (8007724 <SITRONIX_Probe+0x88>)
 80076ae:	60fb      	str	r3, [r7, #12]
  IOCtx.ReadReg     = BSP_I2C5_ReadReg;
 80076b0:	4b1d      	ldr	r3, [pc, #116]	; (8007728 <SITRONIX_Probe+0x8c>)
 80076b2:	61bb      	str	r3, [r7, #24]
  IOCtx.WriteReg    = BSP_I2C5_WriteReg;
 80076b4:	4b1d      	ldr	r3, [pc, #116]	; (800772c <SITRONIX_Probe+0x90>)
 80076b6:	617b      	str	r3, [r7, #20]
  IOCtx.ReadData    = BSP_I2C5_Recv;
 80076b8:	4b1d      	ldr	r3, [pc, #116]	; (8007730 <SITRONIX_Probe+0x94>)
 80076ba:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = BSP_GetTick;
 80076bc:	4b1d      	ldr	r3, [pc, #116]	; (8007734 <SITRONIX_Probe+0x98>)
 80076be:	623b      	str	r3, [r7, #32]

  if (SITRONIX_RegisterBusIO(&SITRONIXObj, &IOCtx) != SITRONIX_OK)
 80076c0:	f107 0308 	add.w	r3, r7, #8
 80076c4:	4619      	mov	r1, r3
 80076c6:	481c      	ldr	r0, [pc, #112]	; (8007738 <SITRONIX_Probe+0x9c>)
 80076c8:	f7fd f962 	bl	8004990 <SITRONIX_RegisterBusIO>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d003      	beq.n	80076da <SITRONIX_Probe+0x3e>
  {
    status = BSP_ERROR_BUS_FAILURE;
 80076d2:	f06f 0307 	mvn.w	r3, #7
 80076d6:	627b      	str	r3, [r7, #36]	; 0x24
 80076d8:	e01d      	b.n	8007716 <SITRONIX_Probe+0x7a>
  }
  else
  {
    Ts_CompObj[Instance] = &SITRONIXObj;
 80076da:	4a18      	ldr	r2, [pc, #96]	; (800773c <SITRONIX_Probe+0xa0>)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4916      	ldr	r1, [pc, #88]	; (8007738 <SITRONIX_Probe+0x9c>)
 80076e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv[Instance]     = (TS_Drv_t *) &SITRONIX_TS_Driver;
 80076e4:	4a16      	ldr	r2, [pc, #88]	; (8007740 <SITRONIX_Probe+0xa4>)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4916      	ldr	r1, [pc, #88]	; (8007744 <SITRONIX_Probe+0xa8>)
 80076ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if (Ts_Drv[Instance]->Init(Ts_CompObj[Instance]) < 0)
 80076ee:	4a14      	ldr	r2, [pc, #80]	; (8007740 <SITRONIX_Probe+0xa4>)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4910      	ldr	r1, [pc, #64]	; (800773c <SITRONIX_Probe+0xa0>)
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007700:	4610      	mov	r0, r2
 8007702:	4798      	blx	r3
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	da03      	bge.n	8007712 <SITRONIX_Probe+0x76>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 800770a:	f06f 0304 	mvn.w	r3, #4
 800770e:	627b      	str	r3, [r7, #36]	; 0x24
 8007710:	e001      	b.n	8007716 <SITRONIX_Probe+0x7a>
    }
    else
    {
      status = BSP_ERROR_NONE;
 8007712:	2300      	movs	r3, #0
 8007714:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return status;
 8007716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007718:	4618      	mov	r0, r3
 800771a:	3728      	adds	r7, #40	; 0x28
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}
 8007720:	08004db1 	.word	0x08004db1
 8007724:	08004e25 	.word	0x08004e25
 8007728:	08004f4d 	.word	0x08004f4d
 800772c:	08004ef1 	.word	0x08004ef1
 8007730:	08004fa9 	.word	0x08004fa9
 8007734:	08004ff9 	.word	0x08004ff9
 8007738:	20197368 	.word	0x20197368
 800773c:	201972f8 	.word	0x201972f8
 8007740:	201972fc 	.word	0x201972fc
 8007744:	20000010 	.word	0x20000010

08007748 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007748:	b480      	push	{r7}
 800774a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800774c:	4b18      	ldr	r3, [pc, #96]	; (80077b0 <SystemInit+0x68>)
 800774e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007752:	4a17      	ldr	r2, [pc, #92]	; (80077b0 <SystemInit+0x68>)
 8007754:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007758:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800775c:	4b15      	ldr	r3, [pc, #84]	; (80077b4 <SystemInit+0x6c>)
 800775e:	2201      	movs	r2, #1
 8007760:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8007762:	4b14      	ldr	r3, [pc, #80]	; (80077b4 <SystemInit+0x6c>)
 8007764:	2200      	movs	r2, #0
 8007766:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8007768:	4b12      	ldr	r3, [pc, #72]	; (80077b4 <SystemInit+0x6c>)
 800776a:	2200      	movs	r2, #0
 800776c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800776e:	4b11      	ldr	r3, [pc, #68]	; (80077b4 <SystemInit+0x6c>)
 8007770:	2200      	movs	r2, #0
 8007772:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8007774:	4b0f      	ldr	r3, [pc, #60]	; (80077b4 <SystemInit+0x6c>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a0e      	ldr	r2, [pc, #56]	; (80077b4 <SystemInit+0x6c>)
 800777a:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800777e:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8007782:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8007784:	4b0b      	ldr	r3, [pc, #44]	; (80077b4 <SystemInit+0x6c>)
 8007786:	2200      	movs	r2, #0
 8007788:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800778a:	4b0a      	ldr	r3, [pc, #40]	; (80077b4 <SystemInit+0x6c>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a09      	ldr	r2, [pc, #36]	; (80077b4 <SystemInit+0x6c>)
 8007790:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007794:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8007796:	4b07      	ldr	r3, [pc, #28]	; (80077b4 <SystemInit+0x6c>)
 8007798:	2200      	movs	r2, #0
 800779a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800779c:	4b04      	ldr	r3, [pc, #16]	; (80077b0 <SystemInit+0x68>)
 800779e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80077a2:	609a      	str	r2, [r3, #8]
  #endif
}
 80077a4:	bf00      	nop
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	e000ed00 	.word	0xe000ed00
 80077b4:	46020c00 	.word	0x46020c00

080077b8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80077bc:	4b11      	ldr	r3, [pc, #68]	; (8007804 <HAL_Init+0x4c>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a10      	ldr	r2, [pc, #64]	; (8007804 <HAL_Init+0x4c>)
 80077c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80077c8:	2003      	movs	r0, #3
 80077ca:	f000 f914 	bl	80079f6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80077ce:	f005 fc7f 	bl	800d0d0 <HAL_RCC_GetSysClockFreq>
 80077d2:	4602      	mov	r2, r0
 80077d4:	4b0c      	ldr	r3, [pc, #48]	; (8007808 <HAL_Init+0x50>)
 80077d6:	6a1b      	ldr	r3, [r3, #32]
 80077d8:	f003 030f 	and.w	r3, r3, #15
 80077dc:	490b      	ldr	r1, [pc, #44]	; (800780c <HAL_Init+0x54>)
 80077de:	5ccb      	ldrb	r3, [r1, r3]
 80077e0:	fa22 f303 	lsr.w	r3, r2, r3
 80077e4:	4a0a      	ldr	r2, [pc, #40]	; (8007810 <HAL_Init+0x58>)
 80077e6:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80077e8:	2000      	movs	r0, #0
 80077ea:	f7fa fab1 	bl	8001d50 <HAL_InitTick>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d001      	beq.n	80077f8 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	e002      	b.n	80077fe <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80077f8:	f7fa f86c 	bl	80018d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	40022000 	.word	0x40022000
 8007808:	46020c00 	.word	0x46020c00
 800780c:	0802b7f8 	.word	0x0802b7f8
 8007810:	20000048 	.word	0x20000048

08007814 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007814:	b480      	push	{r7}
 8007816:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007818:	4b06      	ldr	r3, [pc, #24]	; (8007834 <HAL_IncTick+0x20>)
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	461a      	mov	r2, r3
 800781e:	4b06      	ldr	r3, [pc, #24]	; (8007838 <HAL_IncTick+0x24>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4413      	add	r3, r2
 8007824:	4a04      	ldr	r2, [pc, #16]	; (8007838 <HAL_IncTick+0x24>)
 8007826:	6013      	str	r3, [r2, #0]
}
 8007828:	bf00      	nop
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	20000050 	.word	0x20000050
 8007838:	20197398 	.word	0x20197398

0800783c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800783c:	b480      	push	{r7}
 800783e:	af00      	add	r7, sp, #0
  return uwTick;
 8007840:	4b03      	ldr	r3, [pc, #12]	; (8007850 <HAL_GetTick+0x14>)
 8007842:	681b      	ldr	r3, [r3, #0]
}
 8007844:	4618      	mov	r0, r3
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop
 8007850:	20197398 	.word	0x20197398

08007854 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800785c:	f7ff ffee 	bl	800783c <HAL_GetTick>
 8007860:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800786c:	d005      	beq.n	800787a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800786e:	4b0a      	ldr	r3, [pc, #40]	; (8007898 <HAL_Delay+0x44>)
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	461a      	mov	r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	4413      	add	r3, r2
 8007878:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800787a:	bf00      	nop
 800787c:	f7ff ffde 	bl	800783c <HAL_GetTick>
 8007880:	4602      	mov	r2, r0
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	1ad3      	subs	r3, r2, r3
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	429a      	cmp	r2, r3
 800788a:	d8f7      	bhi.n	800787c <HAL_Delay+0x28>
  {
  }
}
 800788c:	bf00      	nop
 800788e:	bf00      	nop
 8007890:	3710      	adds	r7, #16
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	20000050 	.word	0x20000050

0800789c <__NVIC_SetPriorityGrouping>:
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f003 0307 	and.w	r3, r3, #7
 80078aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80078ac:	4b0c      	ldr	r3, [pc, #48]	; (80078e0 <__NVIC_SetPriorityGrouping+0x44>)
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80078b8:	4013      	ands	r3, r2
 80078ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80078c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80078c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80078ce:	4a04      	ldr	r2, [pc, #16]	; (80078e0 <__NVIC_SetPriorityGrouping+0x44>)
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	60d3      	str	r3, [r2, #12]
}
 80078d4:	bf00      	nop
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	e000ed00 	.word	0xe000ed00

080078e4 <__NVIC_GetPriorityGrouping>:
{
 80078e4:	b480      	push	{r7}
 80078e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80078e8:	4b04      	ldr	r3, [pc, #16]	; (80078fc <__NVIC_GetPriorityGrouping+0x18>)
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	0a1b      	lsrs	r3, r3, #8
 80078ee:	f003 0307 	and.w	r3, r3, #7
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr
 80078fc:	e000ed00 	.word	0xe000ed00

08007900 <__NVIC_EnableIRQ>:
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	4603      	mov	r3, r0
 8007908:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800790a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800790e:	2b00      	cmp	r3, #0
 8007910:	db0b      	blt.n	800792a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007912:	88fb      	ldrh	r3, [r7, #6]
 8007914:	f003 021f 	and.w	r2, r3, #31
 8007918:	4907      	ldr	r1, [pc, #28]	; (8007938 <__NVIC_EnableIRQ+0x38>)
 800791a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800791e:	095b      	lsrs	r3, r3, #5
 8007920:	2001      	movs	r0, #1
 8007922:	fa00 f202 	lsl.w	r2, r0, r2
 8007926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800792a:	bf00      	nop
 800792c:	370c      	adds	r7, #12
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	e000e100 	.word	0xe000e100

0800793c <__NVIC_SetPriority>:
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	4603      	mov	r3, r0
 8007944:	6039      	str	r1, [r7, #0]
 8007946:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007948:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800794c:	2b00      	cmp	r3, #0
 800794e:	db0a      	blt.n	8007966 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	b2da      	uxtb	r2, r3
 8007954:	490c      	ldr	r1, [pc, #48]	; (8007988 <__NVIC_SetPriority+0x4c>)
 8007956:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800795a:	0112      	lsls	r2, r2, #4
 800795c:	b2d2      	uxtb	r2, r2
 800795e:	440b      	add	r3, r1
 8007960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007964:	e00a      	b.n	800797c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	b2da      	uxtb	r2, r3
 800796a:	4908      	ldr	r1, [pc, #32]	; (800798c <__NVIC_SetPriority+0x50>)
 800796c:	88fb      	ldrh	r3, [r7, #6]
 800796e:	f003 030f 	and.w	r3, r3, #15
 8007972:	3b04      	subs	r3, #4
 8007974:	0112      	lsls	r2, r2, #4
 8007976:	b2d2      	uxtb	r2, r2
 8007978:	440b      	add	r3, r1
 800797a:	761a      	strb	r2, [r3, #24]
}
 800797c:	bf00      	nop
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr
 8007988:	e000e100 	.word	0xe000e100
 800798c:	e000ed00 	.word	0xe000ed00

08007990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007990:	b480      	push	{r7}
 8007992:	b089      	sub	sp, #36	; 0x24
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f003 0307 	and.w	r3, r3, #7
 80079a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	f1c3 0307 	rsb	r3, r3, #7
 80079aa:	2b04      	cmp	r3, #4
 80079ac:	bf28      	it	cs
 80079ae:	2304      	movcs	r3, #4
 80079b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	3304      	adds	r3, #4
 80079b6:	2b06      	cmp	r3, #6
 80079b8:	d902      	bls.n	80079c0 <NVIC_EncodePriority+0x30>
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	3b03      	subs	r3, #3
 80079be:	e000      	b.n	80079c2 <NVIC_EncodePriority+0x32>
 80079c0:	2300      	movs	r3, #0
 80079c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079c4:	f04f 32ff 	mov.w	r2, #4294967295
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	fa02 f303 	lsl.w	r3, r2, r3
 80079ce:	43da      	mvns	r2, r3
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	401a      	ands	r2, r3
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80079d8:	f04f 31ff 	mov.w	r1, #4294967295
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	fa01 f303 	lsl.w	r3, r1, r3
 80079e2:	43d9      	mvns	r1, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079e8:	4313      	orrs	r3, r2
         );
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3724      	adds	r7, #36	; 0x24
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr

080079f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b082      	sub	sp, #8
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f7ff ff4c 	bl	800789c <__NVIC_SetPriorityGrouping>
}
 8007a04:	bf00      	nop
 8007a06:	3708      	adds	r7, #8
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b086      	sub	sp, #24
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	4603      	mov	r3, r0
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	607a      	str	r2, [r7, #4]
 8007a18:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007a1a:	f7ff ff63 	bl	80078e4 <__NVIC_GetPriorityGrouping>
 8007a1e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	68b9      	ldr	r1, [r7, #8]
 8007a24:	6978      	ldr	r0, [r7, #20]
 8007a26:	f7ff ffb3 	bl	8007990 <NVIC_EncodePriority>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007a30:	4611      	mov	r1, r2
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7ff ff82 	bl	800793c <__NVIC_SetPriority>
}
 8007a38:	bf00      	nop
 8007a3a:	3718      	adds	r7, #24
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	4603      	mov	r3, r0
 8007a48:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007a4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7ff ff56 	bl	8007900 <__NVIC_EnableIRQ>
}
 8007a54:	bf00      	nop
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d101      	bne.n	8007a6e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e054      	b.n	8007b18 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	7f5b      	ldrb	r3, [r3, #29]
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d105      	bne.n	8007a84 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f7f9 ff42 	bl	8001908 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2202      	movs	r2, #2
 8007a88:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	791b      	ldrb	r3, [r3, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10c      	bne.n	8007aac <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a22      	ldr	r2, [pc, #136]	; (8007b20 <HAL_CRC_Init+0xc4>)
 8007a98:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	689a      	ldr	r2, [r3, #8]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f022 0218 	bic.w	r2, r2, #24
 8007aa8:	609a      	str	r2, [r3, #8]
 8007aaa:	e00c      	b.n	8007ac6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6899      	ldr	r1, [r3, #8]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f834 	bl	8007b24 <HAL_CRCEx_Polynomial_Set>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d001      	beq.n	8007ac6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e028      	b.n	8007b18 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	795b      	ldrb	r3, [r3, #5]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d105      	bne.n	8007ada <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ad6:	611a      	str	r2, [r3, #16]
 8007ad8:	e004      	b.n	8007ae4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	6912      	ldr	r2, [r2, #16]
 8007ae2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	695a      	ldr	r2, [r3, #20]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	430a      	orrs	r2, r1
 8007af8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	699a      	ldr	r2, [r3, #24]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	430a      	orrs	r2, r1
 8007b0e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3708      	adds	r7, #8
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	04c11db7 	.word	0x04c11db7

08007b24 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b087      	sub	sp, #28
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b30:	2300      	movs	r3, #0
 8007b32:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8007b34:	231f      	movs	r3, #31
 8007b36:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	f003 0301 	and.w	r3, r3, #1
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d102      	bne.n	8007b48 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	75fb      	strb	r3, [r7, #23]
 8007b46:	e063      	b.n	8007c10 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007b48:	bf00      	nop
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	1e5a      	subs	r2, r3, #1
 8007b4e:	613a      	str	r2, [r7, #16]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d009      	beq.n	8007b68 <HAL_CRCEx_Polynomial_Set+0x44>
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	f003 031f 	and.w	r3, r3, #31
 8007b5a:	68ba      	ldr	r2, [r7, #8]
 8007b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b60:	f003 0301 	and.w	r3, r3, #1
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d0f0      	beq.n	8007b4a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2b18      	cmp	r3, #24
 8007b6c:	d846      	bhi.n	8007bfc <HAL_CRCEx_Polynomial_Set+0xd8>
 8007b6e:	a201      	add	r2, pc, #4	; (adr r2, 8007b74 <HAL_CRCEx_Polynomial_Set+0x50>)
 8007b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b74:	08007c03 	.word	0x08007c03
 8007b78:	08007bfd 	.word	0x08007bfd
 8007b7c:	08007bfd 	.word	0x08007bfd
 8007b80:	08007bfd 	.word	0x08007bfd
 8007b84:	08007bfd 	.word	0x08007bfd
 8007b88:	08007bfd 	.word	0x08007bfd
 8007b8c:	08007bfd 	.word	0x08007bfd
 8007b90:	08007bfd 	.word	0x08007bfd
 8007b94:	08007bf1 	.word	0x08007bf1
 8007b98:	08007bfd 	.word	0x08007bfd
 8007b9c:	08007bfd 	.word	0x08007bfd
 8007ba0:	08007bfd 	.word	0x08007bfd
 8007ba4:	08007bfd 	.word	0x08007bfd
 8007ba8:	08007bfd 	.word	0x08007bfd
 8007bac:	08007bfd 	.word	0x08007bfd
 8007bb0:	08007bfd 	.word	0x08007bfd
 8007bb4:	08007be5 	.word	0x08007be5
 8007bb8:	08007bfd 	.word	0x08007bfd
 8007bbc:	08007bfd 	.word	0x08007bfd
 8007bc0:	08007bfd 	.word	0x08007bfd
 8007bc4:	08007bfd 	.word	0x08007bfd
 8007bc8:	08007bfd 	.word	0x08007bfd
 8007bcc:	08007bfd 	.word	0x08007bfd
 8007bd0:	08007bfd 	.word	0x08007bfd
 8007bd4:	08007bd9 	.word	0x08007bd9
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	2b06      	cmp	r3, #6
 8007bdc:	d913      	bls.n	8007c06 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8007be2:	e010      	b.n	8007c06 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	2b07      	cmp	r3, #7
 8007be8:	d90f      	bls.n	8007c0a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8007bee:	e00c      	b.n	8007c0a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	2b0f      	cmp	r3, #15
 8007bf4:	d90b      	bls.n	8007c0e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8007bfa:	e008      	b.n	8007c0e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	75fb      	strb	r3, [r7, #23]
        break;
 8007c00:	e006      	b.n	8007c10 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007c02:	bf00      	nop
 8007c04:	e004      	b.n	8007c10 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007c06:	bf00      	nop
 8007c08:	e002      	b.n	8007c10 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007c0a:	bf00      	nop
 8007c0c:	e000      	b.n	8007c10 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007c0e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8007c10:	7dfb      	ldrb	r3, [r7, #23]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d10d      	bne.n	8007c32 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68ba      	ldr	r2, [r7, #8]
 8007c1c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	f023 0118 	bic.w	r1, r3, #24
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	430a      	orrs	r2, r1
 8007c30:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8007c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	371c      	adds	r7, #28
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d101      	bne.n	8007c52 <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e037      	b.n	8007cc2 <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d119      	bne.n	8007c92 <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a1a      	ldr	r2, [pc, #104]	; (8007ccc <HAL_DCACHE_Init+0x8c>)
 8007c62:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a1a      	ldr	r2, [pc, #104]	; (8007cd0 <HAL_DCACHE_Init+0x90>)
 8007c68:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a19      	ldr	r2, [pc, #100]	; (8007cd4 <HAL_DCACHE_Init+0x94>)
 8007c6e:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	4a19      	ldr	r2, [pc, #100]	; (8007cd8 <HAL_DCACHE_Init+0x98>)
 8007c74:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a18      	ldr	r2, [pc, #96]	; (8007cdc <HAL_DCACHE_Init+0x9c>)
 8007c7a:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	69db      	ldr	r3, [r3, #28]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d102      	bne.n	8007c8a <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a16      	ldr	r2, [pc, #88]	; (8007ce0 <HAL_DCACHE_Init+0xa0>)
 8007c88:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	69db      	ldr	r3, [r3, #28]
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	629a      	str	r2, [r3, #40]	; 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	685a      	ldr	r2, [r3, #4]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	430a      	orrs	r2, r1
 8007cb4:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f814 	bl	8007ce4 <HAL_DCACHE_Enable>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	73fb      	strb	r3, [r7, #15]

  return status;
 8007cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	08007e33 	.word	0x08007e33
 8007cd0:	08007de3 	.word	0x08007de3
 8007cd4:	08007df7 	.word	0x08007df7
 8007cd8:	08007e1f 	.word	0x08007e1f
 8007cdc:	08007e0b 	.word	0x08007e0b
 8007ce0:	0800194d 	.word	0x0800194d

08007ce4 <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b085      	sub	sp, #20
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cec:	2300      	movs	r3, #0
 8007cee:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d101      	bne.n	8007cfa <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e015      	b.n	8007d26 <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	f003 0309 	and.w	r3, r3, #9
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d002      	beq.n	8007d0e <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 8007d08:	2302      	movs	r3, #2
 8007d0a:	73fb      	strb	r3, [r7, #15]
 8007d0c:	e00a      	b.n	8007d24 <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	629a      	str	r2, [r3, #40]	; 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f042 0201 	orr.w	r2, r2, #1
 8007d22:	601a      	str	r2, [r3, #0]
  }

  return status;
 8007d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3714      	adds	r7, #20
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr

08007d32 <HAL_DCACHE_Invalidate>:
  *                 the configuration information for the specified DCACHEx peripheral.
  * @note   This function waits for end of full cache invalidation
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Invalidate(DCACHE_HandleTypeDef *hdcache)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b084      	sub	sp, #16
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d101      	bne.n	8007d48 <HAL_DCACHE_Invalidate+0x16>
  {
    return HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	e048      	b.n	8007dda <HAL_DCACHE_Invalidate+0xa8>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	f003 0309 	and.w	r3, r3, #9
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d002      	beq.n	8007d5c <HAL_DCACHE_Invalidate+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 8007d56:	2302      	movs	r3, #2
 8007d58:	73fb      	strb	r3, [r7, #15]
 8007d5a:	e03d      	b.n	8007dd8 <HAL_DCACHE_Invalidate+0xa6>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	629a      	str	r2, [r3, #40]	; 0x28

    /* Change DCACHE Handle state */
    hdcache->State = HAL_DCACHE_STATE_READY;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2201      	movs	r2, #1
 8007d66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Make sure flags are reset */
    WRITE_REG(hdcache->Instance->FCR, (DCACHE_FCR_CBSYENDF | DCACHE_FCR_CCMDENDF));
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2212      	movs	r2, #18
 8007d70:	60da      	str	r2, [r3, #12]

    /* Set no operation on address range */
    MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_CACHECMD, 0U);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007d80:	601a      	str	r2, [r3, #0]

    /* Launch cache invalidation */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_CACHEINV);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f042 0202 	orr.w	r2, r2, #2
 8007d90:	601a      	str	r2, [r3, #0]

    /* Get timeout */
    tickstart = HAL_GetTick();
 8007d92:	f7ff fd53 	bl	800783c <HAL_GetTick>
 8007d96:	60b8      	str	r0, [r7, #8]

    /* Wait for end of cache invalidation */
    while (READ_BIT(hdcache->Instance->SR, DCACHE_SR_BUSYF) != 0U)
 8007d98:	e017      	b.n	8007dca <HAL_DCACHE_Invalidate+0x98>
    {
      if ((HAL_GetTick() - tickstart) > DCACHE_COMMAND_TIMEOUT_VALUE)
 8007d9a:	f7ff fd4f 	bl	800783c <HAL_GetTick>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	1ad3      	subs	r3, r2, r3
 8007da4:	2bc8      	cmp	r3, #200	; 0xc8
 8007da6:	d910      	bls.n	8007dca <HAL_DCACHE_Invalidate+0x98>
      {
        if (READ_BIT(hdcache->Instance->SR, DCACHE_SR_BUSYF) != 0U)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	f003 0301 	and.w	r3, r3, #1
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d009      	beq.n	8007dca <HAL_DCACHE_Invalidate+0x98>
        {
          /* Update error code */
          hdcache->ErrorCode = HAL_DCACHE_ERROR_TIMEOUT;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2210      	movs	r2, #16
 8007dba:	629a      	str	r2, [r3, #40]	; 0x28

          /* Change the DCACHE state */
          hdcache->State = HAL_DCACHE_STATE_ERROR;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2206      	movs	r2, #6
 8007dc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          /* Return error status */
          status =  HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	73fb      	strb	r3, [r7, #15]
          break;
 8007dc8:	e006      	b.n	8007dd8 <HAL_DCACHE_Invalidate+0xa6>
    while (READ_BIT(hdcache->Instance->SR, DCACHE_SR_BUSYF) != 0U)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	f003 0301 	and.w	r3, r3, #1
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1e0      	bne.n	8007d9a <HAL_DCACHE_Invalidate+0x68>
        }
      }
    }
  }

  return status;
 8007dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8007de2:	b480      	push	{r7}
 8007de4:	b083      	sub	sp, #12
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 8007dea:	bf00      	nop
 8007dec:	370c      	adds	r7, #12
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr

08007df6 <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8007df6:	b480      	push	{r7}
 8007df8:	b083      	sub	sp, #12
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 8007dfe:	bf00      	nop
 8007e00:	370c      	adds	r7, #12
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b083      	sub	sp, #12
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 8007e12:	bf00      	nop
 8007e14:	370c      	adds	r7, #12
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr

08007e1e <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 8007e1e:	b480      	push	{r7}
 8007e20:	b083      	sub	sp, #12
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 8007e26:	bf00      	nop
 8007e28:	370c      	adds	r7, #12
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr

08007e32 <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b083      	sub	sp, #12
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 8007e3a:	bf00      	nop
 8007e3c:	370c      	adds	r7, #12
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
	...

08007e48 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8007e50:	f7ff fcf4 	bl	800783c <HAL_GetTick>
 8007e54:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d101      	bne.n	8007e60 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e0e0      	b.n	8008022 <HAL_DMA_Init+0x1da>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
  if ((hdma->Init.Direction == DMA_MEMORY_TO_PERIPH) || (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a6f      	ldr	r2, [pc, #444]	; (800802c <HAL_DMA_Init+0x1e4>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	f000 809f 	beq.w	8007fb2 <HAL_DMA_Init+0x16a>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a6d      	ldr	r2, [pc, #436]	; (8008030 <HAL_DMA_Init+0x1e8>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	f000 8099 	beq.w	8007fb2 <HAL_DMA_Init+0x16a>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a6b      	ldr	r2, [pc, #428]	; (8008034 <HAL_DMA_Init+0x1ec>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	f000 8093 	beq.w	8007fb2 <HAL_DMA_Init+0x16a>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a69      	ldr	r2, [pc, #420]	; (8008038 <HAL_DMA_Init+0x1f0>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	f000 808d 	beq.w	8007fb2 <HAL_DMA_Init+0x16a>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a67      	ldr	r2, [pc, #412]	; (800803c <HAL_DMA_Init+0x1f4>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	f000 8087 	beq.w	8007fb2 <HAL_DMA_Init+0x16a>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a65      	ldr	r2, [pc, #404]	; (8008040 <HAL_DMA_Init+0x1f8>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	f000 8081 	beq.w	8007fb2 <HAL_DMA_Init+0x16a>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a63      	ldr	r2, [pc, #396]	; (8008044 <HAL_DMA_Init+0x1fc>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d07b      	beq.n	8007fb2 <HAL_DMA_Init+0x16a>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a62      	ldr	r2, [pc, #392]	; (8008048 <HAL_DMA_Init+0x200>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d076      	beq.n	8007fb2 <HAL_DMA_Init+0x16a>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a60      	ldr	r2, [pc, #384]	; (800804c <HAL_DMA_Init+0x204>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d071      	beq.n	8007fb2 <HAL_DMA_Init+0x16a>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a5f      	ldr	r2, [pc, #380]	; (8008050 <HAL_DMA_Init+0x208>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d06c      	beq.n	8007fb2 <HAL_DMA_Init+0x16a>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a5d      	ldr	r2, [pc, #372]	; (8008054 <HAL_DMA_Init+0x20c>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d067      	beq.n	8007fb2 <HAL_DMA_Init+0x16a>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a5c      	ldr	r2, [pc, #368]	; (8008058 <HAL_DMA_Init+0x210>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d062      	beq.n	8007fb2 <HAL_DMA_Init+0x16a>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a5a      	ldr	r2, [pc, #360]	; (800805c <HAL_DMA_Init+0x214>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d05d      	beq.n	8007fb2 <HAL_DMA_Init+0x16a>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a59      	ldr	r2, [pc, #356]	; (8008060 <HAL_DMA_Init+0x218>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d058      	beq.n	8007fb2 <HAL_DMA_Init+0x16a>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a57      	ldr	r2, [pc, #348]	; (8008064 <HAL_DMA_Init+0x21c>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d053      	beq.n	8007fb2 <HAL_DMA_Init+0x16a>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a56      	ldr	r2, [pc, #344]	; (8008068 <HAL_DMA_Init+0x220>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d04e      	beq.n	8007fb2 <HAL_DMA_Init+0x16a>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a54      	ldr	r2, [pc, #336]	; (800806c <HAL_DMA_Init+0x224>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d049      	beq.n	8007fb2 <HAL_DMA_Init+0x16a>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a53      	ldr	r2, [pc, #332]	; (8008070 <HAL_DMA_Init+0x228>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d044      	beq.n	8007fb2 <HAL_DMA_Init+0x16a>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a51      	ldr	r2, [pc, #324]	; (8008074 <HAL_DMA_Init+0x22c>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d03f      	beq.n	8007fb2 <HAL_DMA_Init+0x16a>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a50      	ldr	r2, [pc, #320]	; (8008078 <HAL_DMA_Init+0x230>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d03a      	beq.n	8007fb2 <HAL_DMA_Init+0x16a>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a4e      	ldr	r2, [pc, #312]	; (800807c <HAL_DMA_Init+0x234>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d035      	beq.n	8007fb2 <HAL_DMA_Init+0x16a>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a4d      	ldr	r2, [pc, #308]	; (8008080 <HAL_DMA_Init+0x238>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d030      	beq.n	8007fb2 <HAL_DMA_Init+0x16a>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a4b      	ldr	r2, [pc, #300]	; (8008084 <HAL_DMA_Init+0x23c>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d02b      	beq.n	8007fb2 <HAL_DMA_Init+0x16a>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a4a      	ldr	r2, [pc, #296]	; (8008088 <HAL_DMA_Init+0x240>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d026      	beq.n	8007fb2 <HAL_DMA_Init+0x16a>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a48      	ldr	r2, [pc, #288]	; (800808c <HAL_DMA_Init+0x244>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d021      	beq.n	8007fb2 <HAL_DMA_Init+0x16a>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a47      	ldr	r2, [pc, #284]	; (8008090 <HAL_DMA_Init+0x248>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d01c      	beq.n	8007fb2 <HAL_DMA_Init+0x16a>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a45      	ldr	r2, [pc, #276]	; (8008094 <HAL_DMA_Init+0x24c>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d017      	beq.n	8007fb2 <HAL_DMA_Init+0x16a>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a44      	ldr	r2, [pc, #272]	; (8008098 <HAL_DMA_Init+0x250>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d012      	beq.n	8007fb2 <HAL_DMA_Init+0x16a>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a42      	ldr	r2, [pc, #264]	; (800809c <HAL_DMA_Init+0x254>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d00d      	beq.n	8007fb2 <HAL_DMA_Init+0x16a>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a41      	ldr	r2, [pc, #260]	; (80080a0 <HAL_DMA_Init+0x258>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d008      	beq.n	8007fb2 <HAL_DMA_Init+0x16a>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a3f      	ldr	r2, [pc, #252]	; (80080a4 <HAL_DMA_Init+0x25c>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d003      	beq.n	8007fb2 <HAL_DMA_Init+0x16a>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a3e      	ldr	r2, [pc, #248]	; (80080a8 <HAL_DMA_Init+0x260>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	bf00      	nop
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	695a      	ldr	r2, [r3, #20]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f042 0206 	orr.w	r2, r2, #6
 8007fd2:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8007fd4:	e00f      	b.n	8007ff6 <HAL_DMA_Init+0x1ae>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8007fd6:	f7ff fc31 	bl	800783c <HAL_GetTick>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	1ad3      	subs	r3, r2, r3
 8007fe0:	2b05      	cmp	r3, #5
 8007fe2:	d908      	bls.n	8007ff6 <HAL_DMA_Init+0x1ae>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2210      	movs	r2, #16
 8007fe8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2203      	movs	r2, #3
 8007fee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e015      	b.n	8008022 <HAL_DMA_Init+0x1da>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	695b      	ldr	r3, [r3, #20]
 8007ffc:	f003 0301 	and.w	r3, r3, #1
 8008000:	2b00      	cmp	r3, #0
 8008002:	d1e8      	bne.n	8007fd6 <HAL_DMA_Init+0x18e>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 f8cd 	bl	80081a4 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	40020050 	.word	0x40020050
 8008030:	50020050 	.word	0x50020050
 8008034:	400200d0 	.word	0x400200d0
 8008038:	500200d0 	.word	0x500200d0
 800803c:	40020150 	.word	0x40020150
 8008040:	50020150 	.word	0x50020150
 8008044:	400201d0 	.word	0x400201d0
 8008048:	500201d0 	.word	0x500201d0
 800804c:	40020250 	.word	0x40020250
 8008050:	50020250 	.word	0x50020250
 8008054:	400202d0 	.word	0x400202d0
 8008058:	500202d0 	.word	0x500202d0
 800805c:	40020350 	.word	0x40020350
 8008060:	50020350 	.word	0x50020350
 8008064:	400203d0 	.word	0x400203d0
 8008068:	500203d0 	.word	0x500203d0
 800806c:	40020450 	.word	0x40020450
 8008070:	50020450 	.word	0x50020450
 8008074:	400204d0 	.word	0x400204d0
 8008078:	500204d0 	.word	0x500204d0
 800807c:	40020550 	.word	0x40020550
 8008080:	50020550 	.word	0x50020550
 8008084:	400205d0 	.word	0x400205d0
 8008088:	500205d0 	.word	0x500205d0
 800808c:	40020650 	.word	0x40020650
 8008090:	50020650 	.word	0x50020650
 8008094:	400206d0 	.word	0x400206d0
 8008098:	500206d0 	.word	0x500206d0
 800809c:	40020750 	.word	0x40020750
 80080a0:	50020750 	.word	0x50020750
 80080a4:	400207d0 	.word	0x400207d0
 80080a8:	500207d0 	.word	0x500207d0

080080ac <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80080b4:	f7ff fbc2 	bl	800783c <HAL_GetTick>
 80080b8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d101      	bne.n	80080c4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	e06b      	b.n	800819c <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d008      	beq.n	80080e2 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2220      	movs	r2, #32
 80080d4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e05c      	b.n	800819c <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	695a      	ldr	r2, [r3, #20]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f042 0204 	orr.w	r2, r2, #4
 80080f0:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2205      	movs	r2, #5
 80080f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80080fa:	e020      	b.n	800813e <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80080fc:	f7ff fb9e 	bl	800783c <HAL_GetTick>
 8008100:	4602      	mov	r2, r0
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	2b05      	cmp	r3, #5
 8008108:	d919      	bls.n	800813e <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800810e:	f043 0210 	orr.w	r2, r3, #16
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2203      	movs	r2, #3
 800811a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008126:	2b00      	cmp	r3, #0
 8008128:	d003      	beq.n	8008132 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800812e:	2201      	movs	r2, #1
 8008130:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	e02e      	b.n	800819c <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008148:	2b00      	cmp	r3, #0
 800814a:	d0d7      	beq.n	80080fc <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	695a      	ldr	r2, [r3, #20]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f042 0202 	orr.w	r2, r2, #2
 800815a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2204      	movs	r2, #4
 8008160:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 800816c:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800817a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800817e:	2b00      	cmp	r3, #0
 8008180:	d007      	beq.n	8008192 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008186:	2201      	movs	r2, #1
 8008188:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2200      	movs	r2, #0
 8008190:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	3710      	adds	r7, #16
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a1b      	ldr	r3, [r3, #32]
 80081b0:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	695b      	ldr	r3, [r3, #20]
 80081b8:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	430a      	orrs	r2, r1
 80081c4:	615a      	str	r2, [r3, #20]


  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	695a      	ldr	r2, [r3, #20]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	69db      	ldr	r3, [r3, #28]
 80081ce:	431a      	orrs	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	431a      	orrs	r2, r3
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	699b      	ldr	r3, [r3, #24]
 80081da:	4313      	orrs	r3, r2
 80081dc:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a53      	ldr	r2, [pc, #332]	; (8008330 <DMA_Init+0x18c>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	f000 80a0 	beq.w	800832a <DMA_Init+0x186>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a51      	ldr	r2, [pc, #324]	; (8008334 <DMA_Init+0x190>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	f000 809a 	beq.w	800832a <DMA_Init+0x186>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a4f      	ldr	r2, [pc, #316]	; (8008338 <DMA_Init+0x194>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	f000 8094 	beq.w	800832a <DMA_Init+0x186>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a4d      	ldr	r2, [pc, #308]	; (800833c <DMA_Init+0x198>)
 8008208:	4293      	cmp	r3, r2
 800820a:	f000 808e 	beq.w	800832a <DMA_Init+0x186>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a4b      	ldr	r2, [pc, #300]	; (8008340 <DMA_Init+0x19c>)
 8008214:	4293      	cmp	r3, r2
 8008216:	f000 8088 	beq.w	800832a <DMA_Init+0x186>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a49      	ldr	r2, [pc, #292]	; (8008344 <DMA_Init+0x1a0>)
 8008220:	4293      	cmp	r3, r2
 8008222:	f000 8082 	beq.w	800832a <DMA_Init+0x186>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a47      	ldr	r2, [pc, #284]	; (8008348 <DMA_Init+0x1a4>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d07c      	beq.n	800832a <DMA_Init+0x186>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a45      	ldr	r2, [pc, #276]	; (800834c <DMA_Init+0x1a8>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d077      	beq.n	800832a <DMA_Init+0x186>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a44      	ldr	r2, [pc, #272]	; (8008350 <DMA_Init+0x1ac>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d072      	beq.n	800832a <DMA_Init+0x186>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a42      	ldr	r2, [pc, #264]	; (8008354 <DMA_Init+0x1b0>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d06d      	beq.n	800832a <DMA_Init+0x186>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a41      	ldr	r2, [pc, #260]	; (8008358 <DMA_Init+0x1b4>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d068      	beq.n	800832a <DMA_Init+0x186>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a3f      	ldr	r2, [pc, #252]	; (800835c <DMA_Init+0x1b8>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d063      	beq.n	800832a <DMA_Init+0x186>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a3e      	ldr	r2, [pc, #248]	; (8008360 <DMA_Init+0x1bc>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d05e      	beq.n	800832a <DMA_Init+0x186>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a3c      	ldr	r2, [pc, #240]	; (8008364 <DMA_Init+0x1c0>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d059      	beq.n	800832a <DMA_Init+0x186>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a3b      	ldr	r2, [pc, #236]	; (8008368 <DMA_Init+0x1c4>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d054      	beq.n	800832a <DMA_Init+0x186>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a39      	ldr	r2, [pc, #228]	; (800836c <DMA_Init+0x1c8>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d04f      	beq.n	800832a <DMA_Init+0x186>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a38      	ldr	r2, [pc, #224]	; (8008370 <DMA_Init+0x1cc>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d04a      	beq.n	800832a <DMA_Init+0x186>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a36      	ldr	r2, [pc, #216]	; (8008374 <DMA_Init+0x1d0>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d045      	beq.n	800832a <DMA_Init+0x186>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a35      	ldr	r2, [pc, #212]	; (8008378 <DMA_Init+0x1d4>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d040      	beq.n	800832a <DMA_Init+0x186>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a33      	ldr	r2, [pc, #204]	; (800837c <DMA_Init+0x1d8>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d03b      	beq.n	800832a <DMA_Init+0x186>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a32      	ldr	r2, [pc, #200]	; (8008380 <DMA_Init+0x1dc>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d036      	beq.n	800832a <DMA_Init+0x186>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a30      	ldr	r2, [pc, #192]	; (8008384 <DMA_Init+0x1e0>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d031      	beq.n	800832a <DMA_Init+0x186>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a2f      	ldr	r2, [pc, #188]	; (8008388 <DMA_Init+0x1e4>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d02c      	beq.n	800832a <DMA_Init+0x186>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a2d      	ldr	r2, [pc, #180]	; (800838c <DMA_Init+0x1e8>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d027      	beq.n	800832a <DMA_Init+0x186>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a2c      	ldr	r2, [pc, #176]	; (8008390 <DMA_Init+0x1ec>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d022      	beq.n	800832a <DMA_Init+0x186>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a2a      	ldr	r2, [pc, #168]	; (8008394 <DMA_Init+0x1f0>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d01d      	beq.n	800832a <DMA_Init+0x186>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a29      	ldr	r2, [pc, #164]	; (8008398 <DMA_Init+0x1f4>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d018      	beq.n	800832a <DMA_Init+0x186>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a27      	ldr	r2, [pc, #156]	; (800839c <DMA_Init+0x1f8>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d013      	beq.n	800832a <DMA_Init+0x186>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a26      	ldr	r2, [pc, #152]	; (80083a0 <DMA_Init+0x1fc>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d00e      	beq.n	800832a <DMA_Init+0x186>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a24      	ldr	r2, [pc, #144]	; (80083a4 <DMA_Init+0x200>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d009      	beq.n	800832a <DMA_Init+0x186>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a23      	ldr	r2, [pc, #140]	; (80083a8 <DMA_Init+0x204>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d004      	beq.n	800832a <DMA_Init+0x186>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a21      	ldr	r2, [pc, #132]	; (80083ac <DMA_Init+0x208>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d142      	bne.n	80083b0 <DMA_Init+0x20c>
 800832a:	2301      	movs	r3, #1
 800832c:	e041      	b.n	80083b2 <DMA_Init+0x20e>
 800832e:	bf00      	nop
 8008330:	40020050 	.word	0x40020050
 8008334:	50020050 	.word	0x50020050
 8008338:	400200d0 	.word	0x400200d0
 800833c:	500200d0 	.word	0x500200d0
 8008340:	40020150 	.word	0x40020150
 8008344:	50020150 	.word	0x50020150
 8008348:	400201d0 	.word	0x400201d0
 800834c:	500201d0 	.word	0x500201d0
 8008350:	40020250 	.word	0x40020250
 8008354:	50020250 	.word	0x50020250
 8008358:	400202d0 	.word	0x400202d0
 800835c:	500202d0 	.word	0x500202d0
 8008360:	40020350 	.word	0x40020350
 8008364:	50020350 	.word	0x50020350
 8008368:	400203d0 	.word	0x400203d0
 800836c:	500203d0 	.word	0x500203d0
 8008370:	40020450 	.word	0x40020450
 8008374:	50020450 	.word	0x50020450
 8008378:	400204d0 	.word	0x400204d0
 800837c:	500204d0 	.word	0x500204d0
 8008380:	40020550 	.word	0x40020550
 8008384:	50020550 	.word	0x50020550
 8008388:	400205d0 	.word	0x400205d0
 800838c:	500205d0 	.word	0x500205d0
 8008390:	40020650 	.word	0x40020650
 8008394:	50020650 	.word	0x50020650
 8008398:	400206d0 	.word	0x400206d0
 800839c:	500206d0 	.word	0x500206d0
 80083a0:	40020750 	.word	0x40020750
 80083a4:	50020750 	.word	0x50020750
 80083a8:	400207d0 	.word	0x400207d0
 80083ac:	500207d0 	.word	0x500207d0
 80083b0:	2300      	movs	r3, #0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d012      	beq.n	80083dc <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083be:	3b01      	subs	r3, #1
 80083c0:	051b      	lsls	r3, r3, #20
 80083c2:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80083c6:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083cc:	3b01      	subs	r3, #1
 80083ce:	011b      	lsls	r3, r3, #4
 80083d0:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80083d4:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	4313      	orrs	r3, r2
 80083da:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e2:	f003 2180 	and.w	r1, r3, #2147516416	; 0x80008000
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	430a      	orrs	r2, r1
 80083ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	689a      	ldr	r2, [r3, #8]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083fc:	431a      	orrs	r2, r3
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008402:	4313      	orrs	r3, r2
 8008404:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800840e:	f040 80b0 	bne.w	8008572 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a82      	ldr	r2, [pc, #520]	; (8008620 <DMA_Init+0x47c>)
 8008418:	4293      	cmp	r3, r2
 800841a:	f000 80a0 	beq.w	800855e <DMA_Init+0x3ba>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a80      	ldr	r2, [pc, #512]	; (8008624 <DMA_Init+0x480>)
 8008424:	4293      	cmp	r3, r2
 8008426:	f000 809a 	beq.w	800855e <DMA_Init+0x3ba>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a7e      	ldr	r2, [pc, #504]	; (8008628 <DMA_Init+0x484>)
 8008430:	4293      	cmp	r3, r2
 8008432:	f000 8094 	beq.w	800855e <DMA_Init+0x3ba>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a7c      	ldr	r2, [pc, #496]	; (800862c <DMA_Init+0x488>)
 800843c:	4293      	cmp	r3, r2
 800843e:	f000 808e 	beq.w	800855e <DMA_Init+0x3ba>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a7a      	ldr	r2, [pc, #488]	; (8008630 <DMA_Init+0x48c>)
 8008448:	4293      	cmp	r3, r2
 800844a:	f000 8088 	beq.w	800855e <DMA_Init+0x3ba>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a78      	ldr	r2, [pc, #480]	; (8008634 <DMA_Init+0x490>)
 8008454:	4293      	cmp	r3, r2
 8008456:	f000 8082 	beq.w	800855e <DMA_Init+0x3ba>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a76      	ldr	r2, [pc, #472]	; (8008638 <DMA_Init+0x494>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d07c      	beq.n	800855e <DMA_Init+0x3ba>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a74      	ldr	r2, [pc, #464]	; (800863c <DMA_Init+0x498>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d077      	beq.n	800855e <DMA_Init+0x3ba>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a73      	ldr	r2, [pc, #460]	; (8008640 <DMA_Init+0x49c>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d072      	beq.n	800855e <DMA_Init+0x3ba>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a71      	ldr	r2, [pc, #452]	; (8008644 <DMA_Init+0x4a0>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d06d      	beq.n	800855e <DMA_Init+0x3ba>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a70      	ldr	r2, [pc, #448]	; (8008648 <DMA_Init+0x4a4>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d068      	beq.n	800855e <DMA_Init+0x3ba>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a6e      	ldr	r2, [pc, #440]	; (800864c <DMA_Init+0x4a8>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d063      	beq.n	800855e <DMA_Init+0x3ba>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a6d      	ldr	r2, [pc, #436]	; (8008650 <DMA_Init+0x4ac>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d05e      	beq.n	800855e <DMA_Init+0x3ba>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a6b      	ldr	r2, [pc, #428]	; (8008654 <DMA_Init+0x4b0>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d059      	beq.n	800855e <DMA_Init+0x3ba>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a6a      	ldr	r2, [pc, #424]	; (8008658 <DMA_Init+0x4b4>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d054      	beq.n	800855e <DMA_Init+0x3ba>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a68      	ldr	r2, [pc, #416]	; (800865c <DMA_Init+0x4b8>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d04f      	beq.n	800855e <DMA_Init+0x3ba>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a67      	ldr	r2, [pc, #412]	; (8008660 <DMA_Init+0x4bc>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d04a      	beq.n	800855e <DMA_Init+0x3ba>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a65      	ldr	r2, [pc, #404]	; (8008664 <DMA_Init+0x4c0>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d045      	beq.n	800855e <DMA_Init+0x3ba>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a64      	ldr	r2, [pc, #400]	; (8008668 <DMA_Init+0x4c4>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d040      	beq.n	800855e <DMA_Init+0x3ba>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a62      	ldr	r2, [pc, #392]	; (800866c <DMA_Init+0x4c8>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d03b      	beq.n	800855e <DMA_Init+0x3ba>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a61      	ldr	r2, [pc, #388]	; (8008670 <DMA_Init+0x4cc>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d036      	beq.n	800855e <DMA_Init+0x3ba>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a5f      	ldr	r2, [pc, #380]	; (8008674 <DMA_Init+0x4d0>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d031      	beq.n	800855e <DMA_Init+0x3ba>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a5e      	ldr	r2, [pc, #376]	; (8008678 <DMA_Init+0x4d4>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d02c      	beq.n	800855e <DMA_Init+0x3ba>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a5c      	ldr	r2, [pc, #368]	; (800867c <DMA_Init+0x4d8>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d027      	beq.n	800855e <DMA_Init+0x3ba>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a5b      	ldr	r2, [pc, #364]	; (8008680 <DMA_Init+0x4dc>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d022      	beq.n	800855e <DMA_Init+0x3ba>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a59      	ldr	r2, [pc, #356]	; (8008684 <DMA_Init+0x4e0>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d01d      	beq.n	800855e <DMA_Init+0x3ba>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a58      	ldr	r2, [pc, #352]	; (8008688 <DMA_Init+0x4e4>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d018      	beq.n	800855e <DMA_Init+0x3ba>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a56      	ldr	r2, [pc, #344]	; (800868c <DMA_Init+0x4e8>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d013      	beq.n	800855e <DMA_Init+0x3ba>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a55      	ldr	r2, [pc, #340]	; (8008690 <DMA_Init+0x4ec>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d00e      	beq.n	800855e <DMA_Init+0x3ba>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a53      	ldr	r2, [pc, #332]	; (8008694 <DMA_Init+0x4f0>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d009      	beq.n	800855e <DMA_Init+0x3ba>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a52      	ldr	r2, [pc, #328]	; (8008698 <DMA_Init+0x4f4>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d004      	beq.n	800855e <DMA_Init+0x3ba>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a50      	ldr	r2, [pc, #320]	; (800869c <DMA_Init+0x4f8>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d101      	bne.n	8008562 <DMA_Init+0x3be>
 800855e:	2301      	movs	r3, #1
 8008560:	e000      	b.n	8008564 <DMA_Init+0x3c0>
 8008562:	2300      	movs	r3, #0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d00d      	beq.n	8008584 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800856e:	60fb      	str	r3, [r7, #12]
 8008570:	e008      	b.n	8008584 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800857a:	d103      	bne.n	8008584 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008582:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800858a:	4b45      	ldr	r3, [pc, #276]	; (80086a0 <DMA_Init+0x4fc>)
 800858c:	4013      	ands	r3, r2
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	6812      	ldr	r2, [r2, #0]
 8008592:	68f9      	ldr	r1, [r7, #12]
 8008594:	430b      	orrs	r3, r1
 8008596:	6453      	str	r3, [r2, #68]	; 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2200      	movs	r2, #0
 800859e:	649a      	str	r2, [r3, #72]	; 0x48


  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a36      	ldr	r2, [pc, #216]	; (8008680 <DMA_Init+0x4dc>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d022      	beq.n	80085f0 <DMA_Init+0x44c>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a35      	ldr	r2, [pc, #212]	; (8008684 <DMA_Init+0x4e0>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d01d      	beq.n	80085f0 <DMA_Init+0x44c>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a33      	ldr	r2, [pc, #204]	; (8008688 <DMA_Init+0x4e4>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d018      	beq.n	80085f0 <DMA_Init+0x44c>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a32      	ldr	r2, [pc, #200]	; (800868c <DMA_Init+0x4e8>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d013      	beq.n	80085f0 <DMA_Init+0x44c>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a30      	ldr	r2, [pc, #192]	; (8008690 <DMA_Init+0x4ec>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d00e      	beq.n	80085f0 <DMA_Init+0x44c>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a2f      	ldr	r2, [pc, #188]	; (8008694 <DMA_Init+0x4f0>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d009      	beq.n	80085f0 <DMA_Init+0x44c>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a2d      	ldr	r2, [pc, #180]	; (8008698 <DMA_Init+0x4f4>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d004      	beq.n	80085f0 <DMA_Init+0x44c>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a2c      	ldr	r2, [pc, #176]	; (800869c <DMA_Init+0x4f8>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d101      	bne.n	80085f4 <DMA_Init+0x450>
 80085f0:	2301      	movs	r3, #1
 80085f2:	e000      	b.n	80085f6 <DMA_Init+0x452>
 80085f4:	2300      	movs	r3, #0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d007      	beq.n	800860a <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2200      	movs	r2, #0
 8008600:	655a      	str	r2, [r3, #84]	; 0x54


    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2200      	movs	r2, #0
 8008608:	659a      	str	r2, [r3, #88]	; 0x58
  }


  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2200      	movs	r2, #0
 8008610:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8008612:	bf00      	nop
 8008614:	3714      	adds	r7, #20
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	40020050 	.word	0x40020050
 8008624:	50020050 	.word	0x50020050
 8008628:	400200d0 	.word	0x400200d0
 800862c:	500200d0 	.word	0x500200d0
 8008630:	40020150 	.word	0x40020150
 8008634:	50020150 	.word	0x50020150
 8008638:	400201d0 	.word	0x400201d0
 800863c:	500201d0 	.word	0x500201d0
 8008640:	40020250 	.word	0x40020250
 8008644:	50020250 	.word	0x50020250
 8008648:	400202d0 	.word	0x400202d0
 800864c:	500202d0 	.word	0x500202d0
 8008650:	40020350 	.word	0x40020350
 8008654:	50020350 	.word	0x50020350
 8008658:	400203d0 	.word	0x400203d0
 800865c:	500203d0 	.word	0x500203d0
 8008660:	40020450 	.word	0x40020450
 8008664:	50020450 	.word	0x50020450
 8008668:	400204d0 	.word	0x400204d0
 800866c:	500204d0 	.word	0x500204d0
 8008670:	40020550 	.word	0x40020550
 8008674:	50020550 	.word	0x50020550
 8008678:	400205d0 	.word	0x400205d0
 800867c:	500205d0 	.word	0x500205d0
 8008680:	40020650 	.word	0x40020650
 8008684:	50020650 	.word	0x50020650
 8008688:	400206d0 	.word	0x400206d0
 800868c:	500206d0 	.word	0x500206d0
 8008690:	40020750 	.word	0x40020750
 8008694:	50020750 	.word	0x50020750
 8008698:	400207d0 	.word	0x400207d0
 800869c:	500207d0 	.word	0x500207d0
 80086a0:	3cc03180 	.word	0x3cc03180

080086a4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d101      	bne.n	80086b6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e053      	b.n	800875e <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d106      	bne.n	80086d0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f7f9 f978 	bl	80019c0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2202      	movs	r2, #2
 80086d4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80086e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	6851      	ldr	r1, [r2, #4]
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	69d2      	ldr	r2, [r2, #28]
 80086ee:	4311      	orrs	r1, r2
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	6812      	ldr	r2, [r2, #0]
 80086f4:	430b      	orrs	r3, r1
 80086f6:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086fe:	f423 7383 	bic.w	r3, r3, #262	; 0x106
 8008702:	f023 0301 	bic.w	r3, r3, #1
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	6891      	ldr	r1, [r2, #8]
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	6992      	ldr	r2, [r2, #24]
 800870e:	4311      	orrs	r1, r2
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	6812      	ldr	r2, [r2, #0]
 8008714:	430b      	orrs	r3, r1
 8008716:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800871e:	0c1b      	lsrs	r3, r3, #16
 8008720:	041b      	lsls	r3, r3, #16
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	68d1      	ldr	r1, [r2, #12]
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	6812      	ldr	r2, [r2, #0]
 800872a:	430b      	orrs	r3, r1
 800872c:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008734:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	691b      	ldr	r3, [r3, #16]
 800873c:	051a      	lsls	r2, r3, #20
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	695b      	ldr	r3, [r3, #20]
 8008742:	055b      	lsls	r3, r3, #21
 8008744:	431a      	orrs	r2, r3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	430a      	orrs	r2, r1
 800874c:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b084      	sub	sp, #16
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f003 0301 	and.w	r3, r3, #1
 8008784:	2b00      	cmp	r3, #0
 8008786:	d026      	beq.n	80087d6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800878e:	2b00      	cmp	r3, #0
 8008790:	d021      	beq.n	80087d6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087a0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087a6:	f043 0201 	orr.w	r2, r3, #1
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2201      	movs	r2, #1
 80087b4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2204      	movs	r2, #4
 80087ba:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d003      	beq.n	80087d6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f003 0320 	and.w	r3, r3, #32
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d026      	beq.n	800882e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d021      	beq.n	800882e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80087f8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2220      	movs	r2, #32
 8008800:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008806:	f043 0202 	orr.w	r2, r3, #2
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2204      	movs	r2, #4
 8008812:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008822:	2b00      	cmp	r3, #0
 8008824:	d003      	beq.n	800882e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f003 0308 	and.w	r3, r3, #8
 8008834:	2b00      	cmp	r3, #0
 8008836:	d026      	beq.n	8008886 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800883e:	2b00      	cmp	r3, #0
 8008840:	d021      	beq.n	8008886 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008850:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2208      	movs	r2, #8
 8008858:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800885e:	f043 0204 	orr.w	r2, r3, #4
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2204      	movs	r2, #4
 800886a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887a:	2b00      	cmp	r3, #0
 800887c:	d003      	beq.n	8008886 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f003 0304 	and.w	r3, r3, #4
 800888c:	2b00      	cmp	r3, #0
 800888e:	d013      	beq.n	80088b8 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00e      	beq.n	80088b8 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088a8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2204      	movs	r2, #4
 80088b0:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 f853 	bl	800895e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f003 0302 	and.w	r3, r3, #2
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d024      	beq.n	800890c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d01f      	beq.n	800890c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80088da:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2202      	movs	r2, #2
 80088e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferCpltCallback != NULL)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6a1b      	ldr	r3, [r3, #32]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d003      	beq.n	800890c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6a1b      	ldr	r3, [r3, #32]
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f003 0310 	and.w	r3, r3, #16
 8008912:	2b00      	cmp	r3, #0
 8008914:	d01f      	beq.n	8008956 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800891c:	2b00      	cmp	r3, #0
 800891e:	d01a      	beq.n	8008956 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800892e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2210      	movs	r2, #16
 8008936:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2201      	movs	r2, #1
 8008944:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 f80e 	bl	8008972 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8008956:	bf00      	nop
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800895e:	b480      	push	{r7}
 8008960:	b083      	sub	sp, #12
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8008966:	bf00      	nop
 8008968:	370c      	adds	r7, #12
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr

08008972 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8008972:	b480      	push	{r7}
 8008974:	b083      	sub	sp, #12
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800897a:	bf00      	nop
 800897c:	370c      	adds	r7, #12
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr

08008986 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8008986:	b480      	push	{r7}
 8008988:	b085      	sub	sp, #20
 800898a:	af00      	add	r7, sp, #0
 800898c:	60f8      	str	r0, [r7, #12]
 800898e:	60b9      	str	r1, [r7, #8]
 8008990:	607a      	str	r2, [r7, #4]
 8008992:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	019a      	lsls	r2, r3, #6
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	431a      	orrs	r2, r3
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	021b      	lsls	r3, r3, #8
 80089a0:	431a      	orrs	r2, r3
 80089a2:	69bb      	ldr	r3, [r7, #24]
 80089a4:	041b      	lsls	r3, r3, #16
 80089a6:	431a      	orrs	r2, r3
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80089ac:	bf00      	nop
 80089ae:	3714      	adds	r7, #20
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b086      	sub	sp, #24
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	607a      	str	r2, [r7, #4]
 80089c4:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80089c6:	f7fe ff39 	bl	800783c <HAL_GetTick>
 80089ca:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80089cc:	e008      	b.n	80089e0 <DSI_ShortWrite+0x28>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80089ce:	f7fe ff35 	bl	800783c <HAL_GetTick>
 80089d2:	4602      	mov	r2, r0
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	1ad3      	subs	r3, r2, r3
 80089d8:	2b64      	cmp	r3, #100	; 0x64
 80089da:	d901      	bls.n	80089e0 <DSI_ShortWrite+0x28>
    {
      return HAL_TIMEOUT;
 80089dc:	2303      	movs	r3, #3
 80089de:	e015      	b.n	8008a0c <DSI_ShortWrite+0x54>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089e6:	f003 0301 	and.w	r3, r3, #1
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d0ef      	beq.n	80089ce <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	019a      	lsls	r2, r3, #6
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	431a      	orrs	r2, r3
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	021b      	lsls	r3, r3, #8
 80089fa:	ea42 0103 	orr.w	r1, r2, r3
 80089fe:	6a3b      	ldr	r3, [r7, #32]
 8008a00:	041a      	lsls	r2, r3, #16
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	430a      	orrs	r2, r1
 8008a08:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3718      	adds	r7, #24
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <DSI_ConfigBandControl>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
static void DSI_ConfigBandControl(DSI_HandleTypeDef *hdsi)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]

  /* Set Band Control Frequency for clock lane */
  hdsi->Instance->DPCBCR &= ~DSI_DPCBCR;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8008a2c:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
  hdsi->Instance->DPCBCR |= (hdsi->Init.PHYFrequencyRange << DSI_DPCBCR_Pos);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f8d3 1c04 	ldr.w	r1, [r3, #3076]	; 0xc04
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	691b      	ldr	r3, [r3, #16]
 8008a3c:	00da      	lsls	r2, r3, #3
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	430a      	orrs	r2, r1
 8008a44:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04

  /* Set the slew rate for clock lane */
  hdsi->Instance->DPCSRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	220e      	movs	r2, #14
 8008a4e:	f8c3 2c34 	str.w	r2, [r3, #3124]	; 0xc34

  /* Set Band Control Frequency for Data Lane0 */
  hdsi->Instance->DPDL0BCR &= ~DSI_DPDL0BCR;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f8d3 2c70 	ldr.w	r2, [r3, #3184]	; 0xc70
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f022 021f 	bic.w	r2, r2, #31
 8008a62:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70
  hdsi->Instance->DPDL0BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL0BCR_Pos);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	6912      	ldr	r2, [r2, #16]
 8008a6e:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70

  /* Set the slew rate for data Lane0 */
  hdsi->Instance->DPDL0SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	220e      	movs	r2, #14
 8008a78:	f8c3 2ca0 	str.w	r2, [r3, #3232]	; 0xca0

  /* Set Band Control Frequency for Data Lane1 */
  hdsi->Instance->DPDL1BCR &= ~DSI_DPDL1BCR;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f8d3 2d08 	ldr.w	r2, [r3, #3336]	; 0xd08
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f022 021f 	bic.w	r2, r2, #31
 8008a8c:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
  hdsi->Instance->DPDL1BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL1BCR_Pos);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	6912      	ldr	r2, [r2, #16]
 8008a98:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08

  /* Set Slew rate for data Lane1 */
  hdsi->Instance->DPDL1SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	220e      	movs	r2, #14
 8008aa2:	f8c3 2d38 	str.w	r2, [r3, #3384]	; 0xd38

  /* Set HS prepare offset for data lanes */
  hdsi->Instance->DPDL0HSOCR &= ~DSI_DPDL0HSOCR;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f8d3 2c5c 	ldr.w	r2, [r3, #3164]	; 0xc5c
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008ab6:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
  hdsi->Instance->DPDL1HSOCR &= ~DSI_DPDL1HSOCR;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008aca:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4

  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	691b      	ldr	r3, [r3, #16]
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d007      	beq.n	8008ae6 <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	691b      	ldr	r3, [r3, #16]
  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d003      	beq.n	8008ae6 <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_240MHZ_320MHZ))
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	691b      	ldr	r3, [r3, #16]
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 8008ae2:	2b05      	cmp	r3, #5
 8008ae4:	d10a      	bne.n	8008afc <DSI_ConfigBandControl+0xe8>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL0HSOCR_Pos);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL1HSOCR_Pos);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
 8008afa:	e02c      	b.n	8008b56 <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	691b      	ldr	r3, [r3, #16]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00b      	beq.n	8008b1c <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 8008b08:	2b03      	cmp	r3, #3
 8008b0a:	d007      	beq.n	8008b1c <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 8008b10:	2b04      	cmp	r3, #4
 8008b12:	d003      	beq.n	8008b1c <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_320MHZ_390MHZ))
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 8008b18:	2b06      	cmp	r3, #6
 8008b1a:	d10a      	bne.n	8008b32 <DSI_ConfigBandControl+0x11e>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL0HSOCR_Pos);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2210      	movs	r2, #16
 8008b22:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL1HSOCR_Pos);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2210      	movs	r2, #16
 8008b2c:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
 8008b30:	e011      	b.n	8008b56 <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	2b07      	cmp	r3, #7
 8008b38:	d003      	beq.n	8008b42 <DSI_ConfigBandControl+0x12e>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_450MHZ_510MHZ))
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 8008b3e:	2b08      	cmp	r3, #8
 8008b40:	d109      	bne.n	8008b56 <DSI_ConfigBandControl+0x142>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL0HSOCR_Pos);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2220      	movs	r2, #32
 8008b48:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL1HSOCR_Pos);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2220      	movs	r2, #32
 8008b52:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
  {
    /* Nothing to do */
  }

  /* Set LPXO value for data lanes */
  hdsi->Instance->DPDL0LPXOCR &= ~DSI_DPDL0LPXOCR;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f8d3 2c60 	ldr.w	r2, [r3, #3168]	; 0xc60
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f022 020f 	bic.w	r2, r2, #15
 8008b66:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
  hdsi->Instance->DPDL1LPXOCR &= ~DSI_DPDL1LPXOCR;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f8d3 2cf8 	ldr.w	r2, [r3, #3320]	; 0xcf8
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f022 020f 	bic.w	r2, r2, #15
 8008b7a:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8

  hdsi->Instance->DPDL0LPXOCR = hdsi->Init.PHYLowPowerOffset;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	6952      	ldr	r2, [r2, #20]
 8008b86:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
  hdsi->Instance->DPDL1LPXOCR = hdsi->Init.PHYLowPowerOffset;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	6952      	ldr	r2, [r2, #20]
 8008b92:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8

}
 8008b96:	bf00      	nop
 8008b98:	370c      	adds	r7, #12
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr

08008ba2 <DSI_SetWrapperPLLTuning>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
static void DSI_SetWrapperPLLTuning(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8008ba2:	b480      	push	{r7}
 8008ba4:	b083      	sub	sp, #12
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
 8008baa:	6039      	str	r1, [r7, #0]
  /* Set the VCO Frequency */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_BC);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8008bbc:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (PLLInit->PLLVCORange << DSI_WRPCR_BC_Pos);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	075a      	lsls	r2, r3, #29
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	430a      	orrs	r2, r1
 8008bd4:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  hdsi->Instance->WPTR &= ~(DSI_WPTR_LPF | DSI_WPTR_CP);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f8d3 2434 	ldr.w	r2, [r3, #1076]	; 0x434
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8008be8:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

  /* Set PLL Tuning */
  hdsi->Instance->WPTR |= (PLLInit->PLLTuning << DSI_WPTR_LPF_Pos);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	695b      	ldr	r3, [r3, #20]
 8008bf8:	031a      	lsls	r2, r3, #12
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	430a      	orrs	r2, r1
 8008c00:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

  /* Set PLL_Charge Value */
  hdsi->Instance->WPTR |= (PLLInit->PLLChargePump << DSI_WPTR_CP_Pos);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	691b      	ldr	r3, [r3, #16]
 8008c10:	021a      	lsls	r2, r3, #8
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	430a      	orrs	r2, r1
 8008c18:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

}
 8008c1c:	bf00      	nop
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d101      	bne.n	8008c3c <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e0c3      	b.n	8008dc4 <HAL_DSI_Init+0x19c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	7e5b      	ldrb	r3, [r3, #25]
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d102      	bne.n	8008c4c <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f7f8 fee2 	bl	8001a10 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2203      	movs	r2, #3
 8008c50:	765a      	strb	r2, [r3, #25]

  /**************** Turn on the Reference Bias and enable the DSI PLL ****************/
  /* bias power up */
  hdsi->Instance->BCFGR |= DSI_BCFGR_PWRUP;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c62:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808

  /* Requires min of 2ms delay, 2ms delay is inserted */
  HAL_Delay(2);
 8008c66:	2002      	movs	r0, #2
 8008c68:	f7fe fdf4 	bl	8007854 <HAL_Delay>


  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	4b54      	ldr	r3, [pc, #336]	; (8008dcc <HAL_DSI_Init+0x1a4>)
 8008c7a:	400b      	ands	r3, r1
 8008c7c:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008c94:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	051b      	lsls	r3, r3, #20
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8008c9c:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	430a      	orrs	r2, r1
 8008ca4:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /************************ Set D-PHY Band Control registers ******************************/
  /* Set Band Control Frequency and LPX Offset */
  DSI_ConfigBandControl(hdsi);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f7ff feb3 	bl	8008a14 <DSI_ConfigBandControl>

  /* Set PLL Tuning */
  DSI_SetWrapperPLLTuning(hdsi, PLLInit);
 8008cae:	6839      	ldr	r1, [r7, #0]
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f7ff ff76 	bl	8008ba2 <DSI_SetWrapperPLLTuning>

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	60bb      	str	r3, [r7, #8]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f042 0201 	orr.w	r2, r2, #1
 8008cca:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8008cd6:	f003 0301 	and.w	r3, r3, #1
 8008cda:	60bb      	str	r3, [r7, #8]
 8008cdc:	68bb      	ldr	r3, [r7, #8]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8008cde:	2001      	movs	r0, #1
 8008ce0:	f7fe fdb8 	bl	8007854 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8008ce4:	f7fe fdaa 	bl	800783c <HAL_GetTick>
 8008ce8:	60f8      	str	r0, [r7, #12]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8008cea:	e008      	b.n	8008cfe <HAL_DSI_Init+0xd6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008cec:	f7fe fda6 	bl	800783c <HAL_GetTick>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	1ad3      	subs	r3, r2, r3
 8008cf6:	2b64      	cmp	r3, #100	; 0x64
 8008cf8:	d901      	bls.n	8008cfe <HAL_DSI_Init+0xd6>
    {
      return HAL_TIMEOUT;
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	e062      	b.n	8008dc4 <HAL_DSI_Init+0x19c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d0ee      	beq.n	8008cec <HAL_DSI_Init+0xc4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f042 0206 	orr.w	r2, r2, #6
 8008d1e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f022 0203 	bic.w	r2, r2, #3
 8008d32:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	431a      	orrs	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f042 0201 	orr.w	r2, r2, #1
 8008d4c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f022 0203 	bic.w	r2, r2, #3
 8008d60:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	68da      	ldr	r2, [r3, #12]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	430a      	orrs	r2, r1
 8008d76:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	689a      	ldr	r2, [r3, #8]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008d88:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	6899      	ldr	r1, [r3, #8]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	689a      	ldr	r2, [r3, #8]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	430a      	orrs	r2, r1
 8008d9a:	609a      	str	r2, [r3, #8]


  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	2200      	movs	r2, #0
 8008da2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	621a      	str	r2, [r3, #32]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	61da      	str	r2, [r3, #28]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	765a      	strb	r2, [r3, #25]

  return HAL_OK;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	e0000003 	.word	0xe0000003

08008dd0 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	7e1b      	ldrb	r3, [r3, #24]
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d101      	bne.n	8008de6 <HAL_DSI_ConfigErrorMonitor+0x16>
 8008de2:	2302      	movs	r3, #2
 8008de4:	e0ba      	b.n	8008f5c <HAL_DSI_ConfigErrorMonitor+0x18c>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2201      	movs	r2, #1
 8008dea:	761a      	strb	r2, [r3, #24]

  hdsi->Instance->IER[0U] = 0U;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2200      	movs	r2, #0
 8008df2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	683a      	ldr	r2, [r7, #0]
 8008e04:	621a      	str	r2, [r3, #32]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	f003 0301 	and.w	r3, r3, #1
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00b      	beq.n	8008e28 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	6812      	ldr	r2, [r2, #0]
 8008e1c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8008e20:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8008e24:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	f003 0302 	and.w	r3, r3, #2
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d009      	beq.n	8008e46 <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8008e42:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	f003 0304 	and.w	r3, r3, #4
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d009      	beq.n	8008e64 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f042 0201 	orr.w	r2, r2, #1
 8008e60:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	f003 0308 	and.w	r3, r3, #8
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d009      	beq.n	8008e82 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f042 0202 	orr.w	r2, r2, #2
 8008e7e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	f003 0310 	and.w	r3, r3, #16
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d009      	beq.n	8008ea0 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f042 020c 	orr.w	r2, r2, #12
 8008e9c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	f003 0320 	and.w	r3, r3, #32
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d009      	beq.n	8008ebe <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f042 0210 	orr.w	r2, r2, #16
 8008eba:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d009      	beq.n	8008edc <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f042 0220 	orr.w	r2, r2, #32
 8008ed8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d009      	beq.n	8008efa <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ef6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d009      	beq.n	8008f18 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008f14:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d009      	beq.n	8008f36 <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8008f32:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PBU) != 0U)
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d009      	beq.n	8008f54 <HAL_DSI_ConfigErrorMonitor+0x184>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PBU_MASK;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8008f50:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	7e1b      	ldrb	r3, [r3, #24]
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d101      	bne.n	8008f7e <HAL_DSI_SetGenericVCID+0x16>
 8008f7a:	2302      	movs	r3, #2
 8008f7c:	e019      	b.n	8008fb2 <HAL_DSI_SetGenericVCID+0x4a>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2201      	movs	r2, #1
 8008f82:	761a      	strb	r2, [r3, #24]

  /* Update the GVCIDR register with the Tx and Rx Virtual channel ID */
  hdsi->Instance->GVCIDR &= ~(DSI_GVCIDR_VCIDRX | DSI_GVCIDR_VCIDTX);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f022 1203 	bic.w	r2, r2, #196611	; 0x30003
 8008f92:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	6b19      	ldr	r1, [r3, #48]	; 0x30
                             (VirtualChannelID << DSI_GVCIDR_VCIDTX_Pos));
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	041a      	lsls	r2, r3, #16
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	431a      	orrs	r2, r3
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	430a      	orrs	r2, r1
 8008fa8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	370c      	adds	r7, #12
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr

08008fbe <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8008fbe:	b480      	push	{r7}
 8008fc0:	b083      	sub	sp, #12
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
 8008fc6:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	7e1b      	ldrb	r3, [r3, #24]
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d101      	bne.n	8008fd4 <HAL_DSI_ConfigVideoMode+0x16>
 8008fd0:	2302      	movs	r3, #2
 8008fd2:	e1f6      	b.n	80093c2 <HAL_DSI_ConfigVideoMode+0x404>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	761a      	strb	r2, [r3, #24]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f022 0201 	bic.w	r2, r2, #1
 8008fe8:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f022 0201 	bic.w	r2, r2, #1
 8008ffa:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f022 0203 	bic.w	r2, r2, #3
 800900c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	68da      	ldr	r2, [r3, #12]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	430a      	orrs	r2, r1
 800901e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	6812      	ldr	r2, [r2, #0]
 800902a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800902e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009032:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	691a      	ldr	r2, [r3, #16]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	430a      	orrs	r2, r1
 8009044:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	6812      	ldr	r2, [r2, #0]
 8009050:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8009054:	f023 031f 	bic.w	r3, r3, #31
 8009058:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	695a      	ldr	r2, [r3, #20]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	430a      	orrs	r2, r1
 800906a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	6812      	ldr	r2, [r2, #0]
 8009076:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800907a:	f023 031f 	bic.w	r3, r3, #31
 800907e:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	699a      	ldr	r2, [r3, #24]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	430a      	orrs	r2, r1
 8009090:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	68da      	ldr	r2, [r3, #12]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f022 0203 	bic.w	r2, r2, #3
 80090a0:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	68d9      	ldr	r1, [r3, #12]
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	430a      	orrs	r2, r1
 80090b2:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	695a      	ldr	r2, [r3, #20]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f022 0207 	bic.w	r2, r2, #7
 80090c2:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	6959      	ldr	r1, [r3, #20]
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	6a1b      	ldr	r3, [r3, #32]
 80090d2:	431a      	orrs	r2, r3
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	69db      	ldr	r3, [r3, #28]
 80090d8:	431a      	orrs	r2, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	430a      	orrs	r2, r1
 80090e0:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	691a      	ldr	r2, [r3, #16]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f022 020f 	bic.w	r2, r2, #15
 80090f0:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	6919      	ldr	r1, [r3, #16]
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	685a      	ldr	r2, [r3, #4]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	430a      	orrs	r2, r1
 8009102:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f022 020e 	bic.w	r2, r2, #14
 8009114:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	005a      	lsls	r2, r3, #1
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	430a      	orrs	r2, r1
 800912c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	2b03      	cmp	r3, #3
 8009136:	d110      	bne.n	800915a <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	691a      	ldr	r2, [r3, #16]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009146:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	6919      	ldr	r1, [r3, #16]
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	689a      	ldr	r2, [r3, #8]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	430a      	orrs	r2, r1
 8009158:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	6812      	ldr	r2, [r2, #0]
 8009164:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009168:	f023 030f 	bic.w	r3, r3, #15
 800916c:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	430a      	orrs	r2, r1
 800917e:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	6812      	ldr	r2, [r2, #0]
 800918a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800918e:	f023 030f 	bic.w	r3, r3, #15
 8009192:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	430a      	orrs	r2, r1
 80091a4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	6812      	ldr	r2, [r2, #0]
 80091b0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80091b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80091b8:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	430a      	orrs	r2, r1
 80091ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	6812      	ldr	r2, [r2, #0]
 80091d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80091da:	f023 0303 	bic.w	r3, r3, #3
 80091de:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	430a      	orrs	r2, r1
 80091f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	6812      	ldr	r2, [r2, #0]
 80091fc:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009200:	f023 0303 	bic.w	r3, r3, #3
 8009204:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	430a      	orrs	r2, r1
 8009216:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	6812      	ldr	r2, [r2, #0]
 8009222:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009226:	f023 0303 	bic.w	r3, r3, #3
 800922a:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	430a      	orrs	r2, r1
 800923c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	6812      	ldr	r2, [r2, #0]
 8009248:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800924c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009250:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	430a      	orrs	r2, r1
 8009262:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009272:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	430a      	orrs	r2, r1
 8009284:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	699a      	ldr	r2, [r3, #24]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8009294:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	6999      	ldr	r1, [r3, #24]
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092a0:	041a      	lsls	r2, r3, #16
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	430a      	orrs	r2, r1
 80092a8:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	699a      	ldr	r2, [r3, #24]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80092b8:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	6999      	ldr	r1, [r3, #24]
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	430a      	orrs	r2, r1
 80092ca:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80092da:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	430a      	orrs	r2, r1
 80092ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80092fc:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	430a      	orrs	r2, r1
 800930e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800931e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	430a      	orrs	r2, r1
 8009330:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009340:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	430a      	orrs	r2, r1
 8009352:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009362:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	430a      	orrs	r2, r1
 8009374:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009384:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	430a      	orrs	r2, r1
 8009396:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80093a6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	430a      	orrs	r2, r1
 80093b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80093c0:	2300      	movs	r3, #0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	370c      	adds	r7, #12
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr

080093ce <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 80093ce:	b480      	push	{r7}
 80093d0:	b083      	sub	sp, #12
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
 80093d6:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	7e1b      	ldrb	r3, [r3, #24]
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d101      	bne.n	80093e4 <HAL_DSI_ConfigFlowControl+0x16>
 80093e0:	2302      	movs	r3, #2
 80093e2:	e016      	b.n	8009412 <HAL_DSI_ConfigFlowControl+0x44>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2201      	movs	r2, #1
 80093e8:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80093f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	683a      	ldr	r2, [r7, #0]
 8009406:	430a      	orrs	r2, r1
 8009408:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8009410:	2300      	movs	r3, #0
}
 8009412:	4618      	mov	r0, r3
 8009414:	370c      	adds	r7, #12
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr

0800941e <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800941e:	b480      	push	{r7}
 8009420:	b085      	sub	sp, #20
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
 8009426:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	7e1b      	ldrb	r3, [r3, #24]
 800942c:	2b01      	cmp	r3, #1
 800942e:	d101      	bne.n	8009434 <HAL_DSI_ConfigPhyTimer+0x16>
 8009430:	2302      	movs	r3, #2
 8009432:	e084      	b.n	800953e <HAL_DSI_ConfigPhyTimer+0x120>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2201      	movs	r2, #1
 8009438:	761a      	strb	r2, [r3, #24]

  /* Insert LPX Offset into the timings */
  PhyTimers->ClockLaneHS2LPTime = PhyTimers->ClockLaneHS2LPTime + hdsi->Init.PHYLowPowerOffset;
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	695b      	ldr	r3, [r3, #20]
 8009442:	441a      	add	r2, r3
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	601a      	str	r2, [r3, #0]
  PhyTimers->ClockLaneLP2HSTime = PhyTimers->ClockLaneLP2HSTime + (3U * hdsi->Init.PHYLowPowerOffset);
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	6859      	ldr	r1, [r3, #4]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	695a      	ldr	r2, [r3, #20]
 8009450:	4613      	mov	r3, r2
 8009452:	005b      	lsls	r3, r3, #1
 8009454:	4413      	add	r3, r2
 8009456:	18ca      	adds	r2, r1, r3
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	605a      	str	r2, [r3, #4]
  PhyTimers->DataLaneLP2HSTime  = PhyTimers->DataLaneLP2HSTime + (2U * hdsi->Init.PHYLowPowerOffset);
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	68da      	ldr	r2, [r3, #12]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	695b      	ldr	r3, [r3, #20]
 8009464:	005b      	lsls	r3, r3, #1
 8009466:	441a      	add	r2, r3
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	60da      	str	r2, [r3, #12]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	4293      	cmp	r3, r2
 8009476:	bf38      	it	cc
 8009478:	4613      	movcc	r3, r2
 800947a:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 800948c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	041a      	lsls	r2, r3, #16
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	431a      	orrs	r2, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	430a      	orrs	r2, r1
 80094a6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80094ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneLP2HSTime | ((PhyTimers->DataLaneHS2LPTime) << 16U));
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	68da      	ldr	r2, [r3, #12]
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	041b      	lsls	r3, r3, #16
 80094d0:	431a      	orrs	r2, r3
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	430a      	orrs	r2, r1
 80094d8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTRCR &= ~DSI_DLTRCR_MRD_TIME;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	6812      	ldr	r2, [r2, #0]
 80094e8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80094ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80094f0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
  hdsi->Instance->DLTRCR |= PhyTimers->DataLaneMaxReadTime;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	691a      	ldr	r2, [r3, #16]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	430a      	orrs	r2, r1
 8009506:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800951a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	695b      	ldr	r3, [r3, #20]
 800952a:	021a      	lsls	r2, r3, #8
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	430a      	orrs	r2, r1
 8009532:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3714      	adds	r7, #20
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr

0800954a <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 800954a:	b480      	push	{r7}
 800954c:	b083      	sub	sp, #12
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
 8009552:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	7e1b      	ldrb	r3, [r3, #24]
 8009558:	2b01      	cmp	r3, #1
 800955a:	d101      	bne.n	8009560 <HAL_DSI_ConfigHostTimeouts+0x16>
 800955c:	2302      	movs	r3, #2
 800955e:	e0b4      	b.n	80096ca <HAL_DSI_ConfigHostTimeouts+0x180>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2201      	movs	r2, #1
 8009564:	761a      	strb	r2, [r3, #24]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	689a      	ldr	r2, [r3, #8]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8009574:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	6899      	ldr	r1, [r3, #8]
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	021a      	lsls	r2, r3, #8
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	430a      	orrs	r2, r1
 8009588:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	b292      	uxth	r2, r2
 8009596:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	041a      	lsls	r2, r3, #16
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	430a      	orrs	r2, r1
 80095aa:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	6812      	ldr	r2, [r2, #0]
 80095b6:	0c1b      	lsrs	r3, r3, #16
 80095b8:	041b      	lsls	r3, r3, #16
 80095ba:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	689a      	ldr	r2, [r3, #8]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	430a      	orrs	r2, r1
 80095cc:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	6812      	ldr	r2, [r2, #0]
 80095d8:	0c1b      	lsrs	r3, r3, #16
 80095da:	041b      	lsls	r3, r3, #16
 80095dc:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	68da      	ldr	r2, [r3, #12]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	430a      	orrs	r2, r1
 80095ee:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095f8:	687a      	ldr	r2, [r7, #4]
 80095fa:	6812      	ldr	r2, [r2, #0]
 80095fc:	0c1b      	lsrs	r3, r3, #16
 80095fe:	041b      	lsls	r3, r3, #16
 8009600:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	691a      	ldr	r2, [r3, #16]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	430a      	orrs	r2, r1
 8009616:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	6812      	ldr	r2, [r2, #0]
 8009626:	0c1b      	lsrs	r3, r3, #16
 8009628:	041b      	lsls	r3, r3, #16
 800962a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	695a      	ldr	r2, [r3, #20]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	430a      	orrs	r2, r1
 8009640:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	699a      	ldr	r2, [r3, #24]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	430a      	orrs	r2, r1
 800966a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	6812      	ldr	r2, [r2, #0]
 800967a:	0c1b      	lsrs	r3, r3, #16
 800967c:	041b      	lsls	r3, r3, #16
 800967e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	69da      	ldr	r2, [r3, #28]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	430a      	orrs	r2, r1
 8009694:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	6812      	ldr	r2, [r2, #0]
 80096a4:	0c1b      	lsrs	r3, r3, #16
 80096a6:	041b      	lsls	r3, r3, #16
 80096a8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	6a1a      	ldr	r2, [r3, #32]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	430a      	orrs	r2, r1
 80096be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2200      	movs	r2, #0
 80096c6:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	370c      	adds	r7, #12
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr

080096d6 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 80096d6:	b480      	push	{r7}
 80096d8:	b085      	sub	sp, #20
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	7e1b      	ldrb	r3, [r3, #24]
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d101      	bne.n	80096ea <HAL_DSI_Start+0x14>
 80096e6:	2302      	movs	r3, #2
 80096e8:	e02b      	b.n	8009742 <HAL_DSI_Start+0x6c>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2201      	movs	r2, #1
 80096ee:	761a      	strb	r2, [r3, #24]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80096f0:	2300      	movs	r3, #0
 80096f2:	60fb      	str	r3, [r7, #12]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	685a      	ldr	r2, [r3, #4]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f042 0201 	orr.w	r2, r2, #1
 8009702:	605a      	str	r2, [r3, #4]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	f003 0301 	and.w	r3, r3, #1
 800970e:	60fb      	str	r3, [r7, #12]
 8009710:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8009712:	2300      	movs	r3, #0
 8009714:	60bb      	str	r3, [r7, #8]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f042 0208 	orr.w	r2, r2, #8
 8009726:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009732:	f003 0308 	and.w	r3, r3, #8
 8009736:	60bb      	str	r3, [r7, #8]
 8009738:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2200      	movs	r2, #0
 800973e:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	3714      	adds	r7, #20
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr

0800974e <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800974e:	b580      	push	{r7, lr}
 8009750:	b088      	sub	sp, #32
 8009752:	af02      	add	r7, sp, #8
 8009754:	60f8      	str	r0, [r7, #12]
 8009756:	60b9      	str	r1, [r7, #8]
 8009758:	607a      	str	r2, [r7, #4]
 800975a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	7e1b      	ldrb	r3, [r3, #24]
 8009760:	2b01      	cmp	r3, #1
 8009762:	d101      	bne.n	8009768 <HAL_DSI_ShortWrite+0x1a>
 8009764:	2302      	movs	r3, #2
 8009766:	e010      	b.n	800978a <HAL_DSI_ShortWrite+0x3c>
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2201      	movs	r2, #1
 800976c:	761a      	strb	r2, [r3, #24]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800976e:	6a3b      	ldr	r3, [r7, #32]
 8009770:	9300      	str	r3, [sp, #0]
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	68b9      	ldr	r1, [r7, #8]
 8009778:	68f8      	ldr	r0, [r7, #12]
 800977a:	f7ff f91d 	bl	80089b8 <DSI_ShortWrite>
 800977e:	4603      	mov	r3, r0
 8009780:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2200      	movs	r2, #0
 8009786:	761a      	strb	r2, [r3, #24]

  return status;
 8009788:	7dfb      	ldrb	r3, [r7, #23]
}
 800978a:	4618      	mov	r0, r3
 800978c:	3718      	adds	r7, #24
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b08c      	sub	sp, #48	; 0x30
 8009796:	af02      	add	r7, sp, #8
 8009798:	60f8      	str	r0, [r7, #12]
 800979a:	60b9      	str	r1, [r7, #8]
 800979c:	607a      	str	r2, [r7, #4]
 800979e:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 80097a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097a2:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	7e1b      	ldrb	r3, [r3, #24]
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d101      	bne.n	80097b0 <HAL_DSI_LongWrite+0x1e>
 80097ac:	2302      	movs	r3, #2
 80097ae:	e083      	b.n	80098b8 <HAL_DSI_LongWrite+0x126>
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2201      	movs	r2, #1
 80097b4:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 80097b6:	f7fe f841 	bl	800783c <HAL_GetTick>
 80097ba:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80097bc:	e00b      	b.n	80097d6 <HAL_DSI_LongWrite+0x44>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80097be:	f7fe f83d 	bl	800783c <HAL_GetTick>
 80097c2:	4602      	mov	r2, r0
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	1ad3      	subs	r3, r2, r3
 80097c8:	2b64      	cmp	r3, #100	; 0x64
 80097ca:	d904      	bls.n	80097d6 <HAL_DSI_LongWrite+0x44>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2200      	movs	r2, #0
 80097d0:	761a      	strb	r2, [r3, #24]

      return HAL_TIMEOUT;
 80097d2:	2303      	movs	r3, #3
 80097d4:	e070      	b.n	80098b8 <HAL_DSI_LongWrite+0x126>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097dc:	f003 0301 	and.w	r3, r3, #1
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d0ec      	beq.n	80097be <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 80097e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e6:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	2b03      	cmp	r3, #3
 80097ec:	bf28      	it	cs
 80097ee:	2303      	movcs	r3, #3
 80097f0:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 80097f2:	2300      	movs	r3, #0
 80097f4:	623b      	str	r3, [r7, #32]
 80097f6:	e00f      	b.n	8009818 <HAL_DSI_LongWrite+0x86>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80097f8:	69ba      	ldr	r2, [r7, #24]
 80097fa:	6a3b      	ldr	r3, [r7, #32]
 80097fc:	4413      	add	r3, r2
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	461a      	mov	r2, r3
 8009802:	6a3b      	ldr	r3, [r7, #32]
 8009804:	3301      	adds	r3, #1
 8009806:	00db      	lsls	r3, r3, #3
 8009808:	fa02 f303 	lsl.w	r3, r2, r3
 800980c:	69fa      	ldr	r2, [r7, #28]
 800980e:	4313      	orrs	r3, r2
 8009810:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8009812:	6a3b      	ldr	r3, [r7, #32]
 8009814:	3301      	adds	r3, #1
 8009816:	623b      	str	r3, [r7, #32]
 8009818:	6a3a      	ldr	r2, [r7, #32]
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	429a      	cmp	r2, r3
 800981e:	d3eb      	bcc.n	80097f8 <HAL_DSI_LongWrite+0x66>
  }
  hdsi->Instance->GPDR = fifoword;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	69fa      	ldr	r2, [r7, #28]
 8009826:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8009828:	683a      	ldr	r2, [r7, #0]
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	1ad3      	subs	r3, r2, r3
 800982e:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8009830:	69ba      	ldr	r2, [r7, #24]
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	4413      	add	r3, r2
 8009836:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8009838:	e028      	b.n	800988c <HAL_DSI_LongWrite+0xfa>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800983a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983c:	2b04      	cmp	r3, #4
 800983e:	bf28      	it	cs
 8009840:	2304      	movcs	r3, #4
 8009842:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8009844:	2300      	movs	r3, #0
 8009846:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8009848:	2300      	movs	r3, #0
 800984a:	623b      	str	r3, [r7, #32]
 800984c:	e00e      	b.n	800986c <HAL_DSI_LongWrite+0xda>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800984e:	69ba      	ldr	r2, [r7, #24]
 8009850:	6a3b      	ldr	r3, [r7, #32]
 8009852:	4413      	add	r3, r2
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	461a      	mov	r2, r3
 8009858:	6a3b      	ldr	r3, [r7, #32]
 800985a:	00db      	lsls	r3, r3, #3
 800985c:	fa02 f303 	lsl.w	r3, r2, r3
 8009860:	69fa      	ldr	r2, [r7, #28]
 8009862:	4313      	orrs	r3, r2
 8009864:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8009866:	6a3b      	ldr	r3, [r7, #32]
 8009868:	3301      	adds	r3, #1
 800986a:	623b      	str	r3, [r7, #32]
 800986c:	6a3a      	ldr	r2, [r7, #32]
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	429a      	cmp	r2, r3
 8009872:	d3ec      	bcc.n	800984e <HAL_DSI_LongWrite+0xbc>
    }
    hdsi->Instance->GPDR = fifoword;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	69fa      	ldr	r2, [r7, #28]
 800987a:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 800987c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	1ad3      	subs	r3, r2, r3
 8009882:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8009884:	69ba      	ldr	r2, [r7, #24]
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	4413      	add	r3, r2
 800988a:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 800988c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988e:	2b00      	cmp	r3, #0
 8009890:	d1d3      	bne.n	800983a <HAL_DSI_LongWrite+0xa8>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 800989a:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	3301      	adds	r3, #1
 80098a0:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	9300      	str	r3, [sp, #0]
 80098a6:	4613      	mov	r3, r2
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	68b9      	ldr	r1, [r7, #8]
 80098ac:	f7ff f86b 	bl	8008986 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2200      	movs	r2, #0
 80098b4:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80098b6:	2300      	movs	r3, #0
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3728      	adds	r7, #40	; 0x28
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <HAL_DSI_EnterULPM>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_EnterULPM(DSI_HandleTypeDef *hdsi)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process locked */
  __HAL_LOCK(hdsi);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	7e1b      	ldrb	r3, [r3, #24]
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d101      	bne.n	80098d4 <HAL_DSI_EnterULPM+0x14>
 80098d0:	2302      	movs	r3, #2
 80098d2:	e106      	b.n	8009ae2 <HAL_DSI_EnterULPM+0x222>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2201      	movs	r2, #1
 80098d8:	761a      	strb	r2, [r3, #24]

  /* Verify the initial status of the DSI Host */

  /* Verify that the clock lane and the digital section of the D-PHY are enabled */
  if ((hdsi->Instance->PCTLR & (DSI_PCTLR_CKE | DSI_PCTLR_DEN)) != (DSI_PCTLR_CKE | DSI_PCTLR_DEN))
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80098e2:	f003 0306 	and.w	r3, r3, #6
 80098e6:	2b06      	cmp	r3, #6
 80098e8:	d004      	beq.n	80098f4 <HAL_DSI_EnterULPM+0x34>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 80098f0:	2301      	movs	r3, #1
 80098f2:	e0f6      	b.n	8009ae2 <HAL_DSI_EnterULPM+0x222>
  }

  /* Verify that the D-PHY PLL and the reference bias are enabled */
  if ((hdsi->Instance->WRPCR & DSI_WRPCR_PLLEN) != DSI_WRPCR_PLLEN)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80098fc:	f003 0301 	and.w	r3, r3, #1
 8009900:	2b01      	cmp	r3, #1
 8009902:	d004      	beq.n	800990e <HAL_DSI_EnterULPM+0x4e>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	e0e9      	b.n	8009ae2 <HAL_DSI_EnterULPM+0x222>
  }
  else if ((hdsi->Instance->BCFGR  & DSI_BCFGR_PWRUP) != DSI_BCFGR_PWRUP)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8009916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800991a:	2b40      	cmp	r3, #64	; 0x40
 800991c:	d004      	beq.n	8009928 <HAL_DSI_EnterULPM+0x68>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2200      	movs	r2, #0
 8009922:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 8009924:	2301      	movs	r3, #1
 8009926:	e0dc      	b.n	8009ae2 <HAL_DSI_EnterULPM+0x222>
  {
    /* Nothing to do */
  }

  /* Verify that there are no ULPS exit or request on both data and clock lanes */
  if ((hdsi->Instance->PUCR & (DSI_PUCR_UEDL | DSI_PUCR_URDL | DSI_PUCR_UECL | DSI_PUCR_URCL)) != 0U)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009930:	f003 030f 	and.w	r3, r3, #15
 8009934:	2b00      	cmp	r3, #0
 8009936:	d004      	beq.n	8009942 <HAL_DSI_EnterULPM+0x82>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2200      	movs	r2, #0
 800993c:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	e0cf      	b.n	8009ae2 <HAL_DSI_EnterULPM+0x222>
  }

  /* Verify that there are no Transmission trigger */
  if ((hdsi->Instance->PTTCR & DSI_PTTCR_TX_TRIG) != 0U)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800994a:	f003 030f 	and.w	r3, r3, #15
 800994e:	2b00      	cmp	r3, #0
 8009950:	d004      	beq.n	800995c <HAL_DSI_EnterULPM+0x9c>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2200      	movs	r2, #0
 8009956:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 8009958:	2301      	movs	r3, #1
 800995a:	e0c2      	b.n	8009ae2 <HAL_DSI_EnterULPM+0x222>
  }

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 800995c:	2001      	movs	r0, #1
 800995e:	f7fd ff79 	bl	8007854 <HAL_Delay>

  /* Verify that D-PHY PLL is locked */
  tickstart = HAL_GetTick();
 8009962:	f7fd ff6b 	bl	800783c <HAL_GetTick>
 8009966:	60f8      	str	r0, [r7, #12]

  while ((__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U))
 8009968:	e00b      	b.n	8009982 <HAL_DSI_EnterULPM+0xc2>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800996a:	f7fd ff67 	bl	800783c <HAL_GetTick>
 800996e:	4602      	mov	r2, r0
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	1ad3      	subs	r3, r2, r3
 8009974:	2b64      	cmp	r3, #100	; 0x64
 8009976:	d904      	bls.n	8009982 <HAL_DSI_EnterULPM+0xc2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	761a      	strb	r2, [r3, #24]

      return HAL_TIMEOUT;
 800997e:	2303      	movs	r3, #3
 8009980:	e0af      	b.n	8009ae2 <HAL_DSI_EnterULPM+0x222>
  while ((__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U))
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800998a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800998e:	2b00      	cmp	r3, #0
 8009990:	d0eb      	beq.n	800996a <HAL_DSI_EnterULPM+0xaa>
    }
  }

  /* Verify that all active lanes are in Stop state */
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800999a:	f003 0303 	and.w	r3, r3, #3
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d10c      	bne.n	80099bc <HAL_DSI_EnterULPM+0xfc>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_PSS0)) != (DSI_PSR_UAN0 | DSI_PSR_PSS0))
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80099aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80099ae:	2b30      	cmp	r3, #48	; 0x30
 80099b0:	d01f      	beq.n	80099f2 <HAL_DSI_EnterULPM+0x132>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	761a      	strb	r2, [r3, #24]
      return HAL_ERROR;
 80099b8:	2301      	movs	r3, #1
 80099ba:	e092      	b.n	8009ae2 <HAL_DSI_EnterULPM+0x222>
    }
  }
  else if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_TWO_DATA_LANES)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80099c4:	f003 0303 	and.w	r3, r3, #3
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d10d      	bne.n	80099e8 <HAL_DSI_EnterULPM+0x128>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_PSS0 | DSI_PSR_PSS1 | \
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80099d4:	f403 73d8 	and.w	r3, r3, #432	; 0x1b0
 80099d8:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80099dc:	d009      	beq.n	80099f2 <HAL_DSI_EnterULPM+0x132>
                                DSI_PSR_UAN1)) != (DSI_PSR_UAN0 | DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_UAN1))
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2200      	movs	r2, #0
 80099e2:	761a      	strb	r2, [r3, #24]
      return HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	e07c      	b.n	8009ae2 <HAL_DSI_EnterULPM+0x222>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdsi);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2200      	movs	r2, #0
 80099ec:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 80099ee:	2301      	movs	r3, #1
 80099f0:	e077      	b.n	8009ae2 <HAL_DSI_EnterULPM+0x222>
  }

  /* Clock lane configuration: no more HS request */
  hdsi->Instance->CLCR &= ~DSI_CLCR_DPCC;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f022 0201 	bic.w	r2, r2, #1
 8009a02:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Use system PLL as byte lane clock source before stopping DSIPHY clock source */
  __HAL_RCC_DSI_CONFIG(RCC_DSICLKSOURCE_PLL3);
 8009a06:	4b39      	ldr	r3, [pc, #228]	; (8009aec <HAL_DSI_EnterULPM+0x22c>)
 8009a08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009a0c:	4a37      	ldr	r2, [pc, #220]	; (8009aec <HAL_DSI_EnterULPM+0x22c>)
 8009a0e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009a12:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4

  /* ULPS Request on Clock and Data Lanes */
  hdsi->Instance->PUCR |= (DSI_PUCR_URCL | DSI_PUCR_URDL);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f042 0205 	orr.w	r2, r2, #5
 8009a26:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  /* Get tick */
  tickstart = HAL_GetTick();
 8009a2a:	f7fd ff07 	bl	800783c <HAL_GetTick>
 8009a2e:	60f8      	str	r0, [r7, #12]

  /* Wait until all active lanes enter ULPM */
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009a38:	f003 0303 	and.w	r3, r3, #3
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d115      	bne.n	8009a6c <HAL_DSI_EnterULPM+0x1ac>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UANC)) != 0U)
 8009a40:	e00b      	b.n	8009a5a <HAL_DSI_EnterULPM+0x19a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009a42:	f7fd fefb 	bl	800783c <HAL_GetTick>
 8009a46:	4602      	mov	r2, r0
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	1ad3      	subs	r3, r2, r3
 8009a4c:	2b64      	cmp	r3, #100	; 0x64
 8009a4e:	d904      	bls.n	8009a5a <HAL_DSI_EnterULPM+0x19a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	761a      	strb	r2, [r3, #24]

        return HAL_TIMEOUT;
 8009a56:	2303      	movs	r3, #3
 8009a58:	e043      	b.n	8009ae2 <HAL_DSI_EnterULPM+0x222>
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UANC)) != 0U)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a62:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d1eb      	bne.n	8009a42 <HAL_DSI_EnterULPM+0x182>
 8009a6a:	e022      	b.n	8009ab2 <HAL_DSI_EnterULPM+0x1f2>
      }
    }
  }
  else if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_TWO_DATA_LANES)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009a74:	f003 0303 	and.w	r3, r3, #3
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d115      	bne.n	8009aa8 <HAL_DSI_EnterULPM+0x1e8>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UAN1 | DSI_PSR_UANC)) != 0U)
 8009a7c:	e00b      	b.n	8009a96 <HAL_DSI_EnterULPM+0x1d6>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009a7e:	f7fd fedd 	bl	800783c <HAL_GetTick>
 8009a82:	4602      	mov	r2, r0
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	1ad3      	subs	r3, r2, r3
 8009a88:	2b64      	cmp	r3, #100	; 0x64
 8009a8a:	d904      	bls.n	8009a96 <HAL_DSI_EnterULPM+0x1d6>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	761a      	strb	r2, [r3, #24]

        return HAL_TIMEOUT;
 8009a92:	2303      	movs	r3, #3
 8009a94:	e025      	b.n	8009ae2 <HAL_DSI_EnterULPM+0x222>
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UAN1 | DSI_PSR_UANC)) != 0U)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a9e:	f403 7394 	and.w	r3, r3, #296	; 0x128
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d1eb      	bne.n	8009a7e <HAL_DSI_EnterULPM+0x1be>
 8009aa6:	e004      	b.n	8009ab2 <HAL_DSI_EnterULPM+0x1f2>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdsi);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	761a      	strb	r2, [r3, #24]

    return HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e017      	b.n	8009ae2 <HAL_DSI_EnterULPM+0x222>
  }

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	60bb      	str	r3, [r7, #8]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f022 0201 	bic.w	r2, r2, #1
 8009ac6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8009ad2:	f003 0301 	and.w	r3, r3, #1
 8009ad6:	60bb      	str	r3, [r7, #8]
 8009ad8:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8009ae0:	2300      	movs	r3, #0
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	46020c00 	.word	0x46020c00

08009af0 <HAL_DSI_ExitULPM>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ExitULPM(DSI_HandleTypeDef *hdsi)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	7e1b      	ldrb	r3, [r3, #24]
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	d101      	bne.n	8009b04 <HAL_DSI_ExitULPM+0x14>
 8009b00:	2302      	movs	r3, #2
 8009b02:	e125      	b.n	8009d50 <HAL_DSI_ExitULPM+0x260>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	761a      	strb	r2, [r3, #24]

  /* Verify that all active lanes are in ULPM */
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009b12:	f003 0303 	and.w	r3, r3, #3
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d10c      	bne.n	8009b34 <HAL_DSI_ExitULPM+0x44>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_RUE0 | DSI_PSR_UAN0 | DSI_PSR_PSS0 | \
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009b22:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d01e      	beq.n	8009b68 <HAL_DSI_ExitULPM+0x78>
                                DSI_PSR_UANC | DSI_PSR_PSSC | DSI_PSR_PD)) != 0U)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	761a      	strb	r2, [r3, #24]

      return HAL_ERROR;
 8009b30:	2301      	movs	r3, #1
 8009b32:	e10d      	b.n	8009d50 <HAL_DSI_ExitULPM+0x260>
    }
  }
  else if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_TWO_DATA_LANES)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009b3c:	f003 0303 	and.w	r3, r3, #3
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d10c      	bne.n	8009b5e <HAL_DSI_ExitULPM+0x6e>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_RUE0 | DSI_PSR_UAN0 | DSI_PSR_PSS0 | DSI_PSR_UAN1 | \
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009b4c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d009      	beq.n	8009b68 <HAL_DSI_ExitULPM+0x78>
                                DSI_PSR_PSS1 | DSI_PSR_UANC | DSI_PSR_PSSC | DSI_PSR_PD)) != 0U)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	761a      	strb	r2, [r3, #24]

      return HAL_ERROR;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	e0f8      	b.n	8009d50 <HAL_DSI_ExitULPM+0x260>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdsi);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	761a      	strb	r2, [r3, #24]

    return HAL_ERROR;
 8009b64:	2301      	movs	r3, #1
 8009b66:	e0f3      	b.n	8009d50 <HAL_DSI_ExitULPM+0x260>
  }

  /* Turn on the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8009b68:	2300      	movs	r3, #0
 8009b6a:	60bb      	str	r3, [r7, #8]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f042 0201 	orr.w	r2, r2, #1
 8009b7c:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8009b88:	f003 0301 	and.w	r3, r3, #1
 8009b8c:	60bb      	str	r3, [r7, #8]
 8009b8e:	68bb      	ldr	r3, [r7, #8]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8009b90:	2001      	movs	r0, #1
 8009b92:	f7fd fe5f 	bl	8007854 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8009b96:	f7fd fe51 	bl	800783c <HAL_GetTick>
 8009b9a:	60f8      	str	r0, [r7, #12]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8009b9c:	e00b      	b.n	8009bb6 <HAL_DSI_ExitULPM+0xc6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009b9e:	f7fd fe4d 	bl	800783c <HAL_GetTick>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	1ad3      	subs	r3, r2, r3
 8009ba8:	2b64      	cmp	r3, #100	; 0x64
 8009baa:	d904      	bls.n	8009bb6 <HAL_DSI_ExitULPM+0xc6>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	761a      	strb	r2, [r3, #24]

      return HAL_TIMEOUT;
 8009bb2:	2303      	movs	r3, #3
 8009bb4:	e0cc      	b.n	8009d50 <HAL_DSI_ExitULPM+0x260>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d0eb      	beq.n	8009b9e <HAL_DSI_ExitULPM+0xae>
    }
  }

  /* Exit ULPS on Clock and Data Lanes */
  hdsi->Instance->PUCR |= (DSI_PUCR_UECL | DSI_PUCR_UEDL);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f042 020a 	orr.w	r2, r2, #10
 8009bd6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  /* Get tick */
  tickstart = HAL_GetTick();
 8009bda:	f7fd fe2f 	bl	800783c <HAL_GetTick>
 8009bde:	60f8      	str	r0, [r7, #12]

  /* Wait until all active lanes exit ULPM */
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009be8:	f003 0303 	and.w	r3, r3, #3
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d115      	bne.n	8009c1c <HAL_DSI_ExitULPM+0x12c>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UANC)) != (DSI_PSR_UAN0 | DSI_PSR_UANC))
 8009bf0:	e00b      	b.n	8009c0a <HAL_DSI_ExitULPM+0x11a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009bf2:	f7fd fe23 	bl	800783c <HAL_GetTick>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	1ad3      	subs	r3, r2, r3
 8009bfc:	2b64      	cmp	r3, #100	; 0x64
 8009bfe:	d904      	bls.n	8009c0a <HAL_DSI_ExitULPM+0x11a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	761a      	strb	r2, [r3, #24]

        return HAL_TIMEOUT;
 8009c06:	2303      	movs	r3, #3
 8009c08:	e0a2      	b.n	8009d50 <HAL_DSI_ExitULPM+0x260>
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UANC)) != (DSI_PSR_UAN0 | DSI_PSR_UANC))
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009c12:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009c16:	2b28      	cmp	r3, #40	; 0x28
 8009c18:	d1eb      	bne.n	8009bf2 <HAL_DSI_ExitULPM+0x102>
 8009c1a:	e023      	b.n	8009c64 <HAL_DSI_ExitULPM+0x174>
      }
    }
  }
  else if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_TWO_DATA_LANES)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009c24:	f003 0303 	and.w	r3, r3, #3
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d116      	bne.n	8009c5a <HAL_DSI_ExitULPM+0x16a>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UAN1 | DSI_PSR_UANC)) != (DSI_PSR_UAN0 | DSI_PSR_UAN1 |
 8009c2c:	e00b      	b.n	8009c46 <HAL_DSI_ExitULPM+0x156>
                                                                                    DSI_PSR_UANC))
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009c2e:	f7fd fe05 	bl	800783c <HAL_GetTick>
 8009c32:	4602      	mov	r2, r0
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	1ad3      	subs	r3, r2, r3
 8009c38:	2b64      	cmp	r3, #100	; 0x64
 8009c3a:	d904      	bls.n	8009c46 <HAL_DSI_ExitULPM+0x156>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	761a      	strb	r2, [r3, #24]

        return HAL_TIMEOUT;
 8009c42:	2303      	movs	r3, #3
 8009c44:	e084      	b.n	8009d50 <HAL_DSI_ExitULPM+0x260>
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UAN1 | DSI_PSR_UANC)) != (DSI_PSR_UAN0 | DSI_PSR_UAN1 |
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009c4e:	f403 7394 	and.w	r3, r3, #296	; 0x128
 8009c52:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 8009c56:	d1ea      	bne.n	8009c2e <HAL_DSI_ExitULPM+0x13e>
 8009c58:	e004      	b.n	8009c64 <HAL_DSI_ExitULPM+0x174>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdsi);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	761a      	strb	r2, [r3, #24]

    return HAL_ERROR;
 8009c60:	2301      	movs	r3, #1
 8009c62:	e075      	b.n	8009d50 <HAL_DSI_ExitULPM+0x260>
  }

  /* wait for 1 ms */
  HAL_Delay(1U);
 8009c64:	2001      	movs	r0, #1
 8009c66:	f7fd fdf5 	bl	8007854 <HAL_Delay>

  /* De-assert the ULPM requests and the ULPM exit bits */
  hdsi->Instance->PUCR = 0U;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  /* Switch the lane byte clock source in the RCC from system PLL to D-PHY */
  __HAL_RCC_DSI_CONFIG(RCC_DSICLKSOURCE_DSIPHY);
 8009c74:	4b38      	ldr	r3, [pc, #224]	; (8009d58 <HAL_DSI_ExitULPM+0x268>)
 8009c76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009c7a:	4a37      	ldr	r2, [pc, #220]	; (8009d58 <HAL_DSI_ExitULPM+0x268>)
 8009c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c80:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4

  /* Restore clock lane configuration to HS */
  hdsi->Instance->CLCR |= DSI_CLCR_DPCC;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f042 0201 	orr.w	r2, r2, #1
 8009c94:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Verify that D-PHY PLL is enabled */
  if ((hdsi->Instance->WRPCR & DSI_WRPCR_PLLEN) != DSI_WRPCR_PLLEN)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8009ca0:	f003 0301 	and.w	r3, r3, #1
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d004      	beq.n	8009cb2 <HAL_DSI_ExitULPM+0x1c2>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2200      	movs	r2, #0
 8009cac:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	e04e      	b.n	8009d50 <HAL_DSI_ExitULPM+0x260>
  }

  /* Verify that all active lanes are in Stop state */
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009cba:	f003 0303 	and.w	r3, r3, #3
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d10c      	bne.n	8009cdc <HAL_DSI_ExitULPM+0x1ec>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_PSS0)) != (DSI_PSR_UAN0 | DSI_PSR_PSS0))
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009cca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009cce:	2b30      	cmp	r3, #48	; 0x30
 8009cd0:	d01f      	beq.n	8009d12 <HAL_DSI_ExitULPM+0x222>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	761a      	strb	r2, [r3, #24]
      return HAL_ERROR;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	e039      	b.n	8009d50 <HAL_DSI_ExitULPM+0x260>
    }
  }
  else if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_TWO_DATA_LANES)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009ce4:	f003 0303 	and.w	r3, r3, #3
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d10d      	bne.n	8009d08 <HAL_DSI_ExitULPM+0x218>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_PSS0 | DSI_PSR_PSS1 | \
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009cf4:	f403 73d8 	and.w	r3, r3, #432	; 0x1b0
 8009cf8:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8009cfc:	d009      	beq.n	8009d12 <HAL_DSI_ExitULPM+0x222>
                                DSI_PSR_UAN1)) != (DSI_PSR_UAN0 | DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_UAN1))
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2200      	movs	r2, #0
 8009d02:	761a      	strb	r2, [r3, #24]
      return HAL_ERROR;
 8009d04:	2301      	movs	r3, #1
 8009d06:	e023      	b.n	8009d50 <HAL_DSI_ExitULPM+0x260>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdsi);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e01e      	b.n	8009d50 <HAL_DSI_ExitULPM+0x260>
  }

  /* Verify that D-PHY PLL is locked */
  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8009d12:	2001      	movs	r0, #1
 8009d14:	f7fd fd9e 	bl	8007854 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8009d18:	f7fd fd90 	bl	800783c <HAL_GetTick>
 8009d1c:	60f8      	str	r0, [r7, #12]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8009d1e:	e00b      	b.n	8009d38 <HAL_DSI_ExitULPM+0x248>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009d20:	f7fd fd8c 	bl	800783c <HAL_GetTick>
 8009d24:	4602      	mov	r2, r0
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	1ad3      	subs	r3, r2, r3
 8009d2a:	2b64      	cmp	r3, #100	; 0x64
 8009d2c:	d904      	bls.n	8009d38 <HAL_DSI_ExitULPM+0x248>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2200      	movs	r2, #0
 8009d32:	761a      	strb	r2, [r3, #24]

      return HAL_TIMEOUT;
 8009d34:	2303      	movs	r3, #3
 8009d36:	e00b      	b.n	8009d50 <HAL_DSI_ExitULPM+0x260>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d0eb      	beq.n	8009d20 <HAL_DSI_ExitULPM+0x230>
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8009d4e:	2300      	movs	r3, #0
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3710      	adds	r7, #16
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	46020c00 	.word	0x46020c00

08009d5c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b089      	sub	sp, #36	; 0x24
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8009d66:	2300      	movs	r3, #0
 8009d68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8009d6e:	e1ba      	b.n	800a0e6 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	2101      	movs	r1, #1
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	fa01 f303 	lsl.w	r3, r1, r3
 8009d7c:	4013      	ands	r3, r2
 8009d7e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	f000 81aa 	beq.w	800a0e0 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	4a55      	ldr	r2, [pc, #340]	; (8009ee4 <HAL_GPIO_Init+0x188>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d15d      	bne.n	8009e50 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8009da2:	43db      	mvns	r3, r3
 8009da4:	69fa      	ldr	r2, [r7, #28]
 8009da6:	4013      	ands	r3, r2
 8009da8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	f003 0201 	and.w	r2, r3, #1
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	fa02 f303 	lsl.w	r3, r2, r3
 8009db8:	69fa      	ldr	r2, [r7, #28]
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	69fa      	ldr	r2, [r7, #28]
 8009dc2:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8009dc4:	4a48      	ldr	r2, [pc, #288]	; (8009ee8 <HAL_GPIO_Init+0x18c>)
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009dcc:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8009dce:	4a46      	ldr	r2, [pc, #280]	; (8009ee8 <HAL_GPIO_Init+0x18c>)
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	00db      	lsls	r3, r3, #3
 8009dd4:	4413      	add	r3, r2
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8009dda:	69bb      	ldr	r3, [r7, #24]
 8009ddc:	08da      	lsrs	r2, r3, #3
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	3208      	adds	r2, #8
 8009de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009de6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8009de8:	69bb      	ldr	r3, [r7, #24]
 8009dea:	f003 0307 	and.w	r3, r3, #7
 8009dee:	009b      	lsls	r3, r3, #2
 8009df0:	220f      	movs	r2, #15
 8009df2:	fa02 f303 	lsl.w	r3, r2, r3
 8009df6:	43db      	mvns	r3, r3
 8009df8:	69fa      	ldr	r2, [r7, #28]
 8009dfa:	4013      	ands	r3, r2
 8009dfc:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8009dfe:	69bb      	ldr	r3, [r7, #24]
 8009e00:	f003 0307 	and.w	r3, r3, #7
 8009e04:	009b      	lsls	r3, r3, #2
 8009e06:	220b      	movs	r2, #11
 8009e08:	fa02 f303 	lsl.w	r3, r2, r3
 8009e0c:	69fa      	ldr	r2, [r7, #28]
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8009e12:	69bb      	ldr	r3, [r7, #24]
 8009e14:	08da      	lsrs	r2, r3, #3
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	3208      	adds	r2, #8
 8009e1a:	69f9      	ldr	r1, [r7, #28]
 8009e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8009e26:	69bb      	ldr	r3, [r7, #24]
 8009e28:	005b      	lsls	r3, r3, #1
 8009e2a:	2203      	movs	r2, #3
 8009e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e30:	43db      	mvns	r3, r3
 8009e32:	69fa      	ldr	r2, [r7, #28]
 8009e34:	4013      	ands	r3, r2
 8009e36:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8009e38:	69bb      	ldr	r3, [r7, #24]
 8009e3a:	005b      	lsls	r3, r3, #1
 8009e3c:	2202      	movs	r2, #2
 8009e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e42:	69fa      	ldr	r2, [r7, #28]
 8009e44:	4313      	orrs	r3, r2
 8009e46:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	69fa      	ldr	r2, [r7, #28]
 8009e4c:	601a      	str	r2, [r3, #0]
 8009e4e:	e067      	b.n	8009f20 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	2b02      	cmp	r3, #2
 8009e56:	d003      	beq.n	8009e60 <HAL_GPIO_Init+0x104>
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	2b12      	cmp	r3, #18
 8009e5e:	d145      	bne.n	8009eec <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	08da      	lsrs	r2, r3, #3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	3208      	adds	r2, #8
 8009e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e6c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	f003 0307 	and.w	r3, r3, #7
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	220f      	movs	r2, #15
 8009e78:	fa02 f303 	lsl.w	r3, r2, r3
 8009e7c:	43db      	mvns	r3, r3
 8009e7e:	69fa      	ldr	r2, [r7, #28]
 8009e80:	4013      	ands	r3, r2
 8009e82:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	691b      	ldr	r3, [r3, #16]
 8009e88:	f003 020f 	and.w	r2, r3, #15
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	f003 0307 	and.w	r3, r3, #7
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	fa02 f303 	lsl.w	r3, r2, r3
 8009e98:	69fa      	ldr	r2, [r7, #28]
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	08da      	lsrs	r2, r3, #3
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	3208      	adds	r2, #8
 8009ea6:	69f9      	ldr	r1, [r7, #28]
 8009ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	005b      	lsls	r3, r3, #1
 8009eb6:	2203      	movs	r2, #3
 8009eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8009ebc:	43db      	mvns	r3, r3
 8009ebe:	69fa      	ldr	r2, [r7, #28]
 8009ec0:	4013      	ands	r3, r2
 8009ec2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	f003 0203 	and.w	r2, r3, #3
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	005b      	lsls	r3, r3, #1
 8009ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ed4:	69fa      	ldr	r2, [r7, #28]
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	69fa      	ldr	r2, [r7, #28]
 8009ede:	601a      	str	r2, [r3, #0]
 8009ee0:	e01e      	b.n	8009f20 <HAL_GPIO_Init+0x1c4>
 8009ee2:	bf00      	nop
 8009ee4:	46020000 	.word	0x46020000
 8009ee8:	0802b850 	.word	0x0802b850
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	005b      	lsls	r3, r3, #1
 8009ef6:	2203      	movs	r2, #3
 8009ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8009efc:	43db      	mvns	r3, r3
 8009efe:	69fa      	ldr	r2, [r7, #28]
 8009f00:	4013      	ands	r3, r2
 8009f02:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	f003 0203 	and.w	r2, r3, #3
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	005b      	lsls	r3, r3, #1
 8009f10:	fa02 f303 	lsl.w	r3, r2, r3
 8009f14:	69fa      	ldr	r2, [r7, #28]
 8009f16:	4313      	orrs	r3, r2
 8009f18:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	69fa      	ldr	r2, [r7, #28]
 8009f1e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d00b      	beq.n	8009f40 <HAL_GPIO_Init+0x1e4>
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	2b02      	cmp	r3, #2
 8009f2e:	d007      	beq.n	8009f40 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009f34:	2b11      	cmp	r3, #17
 8009f36:	d003      	beq.n	8009f40 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	2b12      	cmp	r3, #18
 8009f3e:	d130      	bne.n	8009fa2 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	005b      	lsls	r3, r3, #1
 8009f4a:	2203      	movs	r2, #3
 8009f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8009f50:	43db      	mvns	r3, r3
 8009f52:	69fa      	ldr	r2, [r7, #28]
 8009f54:	4013      	ands	r3, r2
 8009f56:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	68da      	ldr	r2, [r3, #12]
 8009f5c:	69bb      	ldr	r3, [r7, #24]
 8009f5e:	005b      	lsls	r3, r3, #1
 8009f60:	fa02 f303 	lsl.w	r3, r2, r3
 8009f64:	69fa      	ldr	r2, [r7, #28]
 8009f66:	4313      	orrs	r3, r2
 8009f68:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	69fa      	ldr	r2, [r7, #28]
 8009f6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8009f76:	2201      	movs	r2, #1
 8009f78:	69bb      	ldr	r3, [r7, #24]
 8009f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8009f7e:	43db      	mvns	r3, r3
 8009f80:	69fa      	ldr	r2, [r7, #28]
 8009f82:	4013      	ands	r3, r2
 8009f84:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	091b      	lsrs	r3, r3, #4
 8009f8c:	f003 0201 	and.w	r2, r3, #1
 8009f90:	69bb      	ldr	r3, [r7, #24]
 8009f92:	fa02 f303 	lsl.w	r3, r2, r3
 8009f96:	69fa      	ldr	r2, [r7, #28]
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	69fa      	ldr	r2, [r7, #28]
 8009fa0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	2b03      	cmp	r3, #3
 8009fa8:	d017      	beq.n	8009fda <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	68db      	ldr	r3, [r3, #12]
 8009fae:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8009fb0:	69bb      	ldr	r3, [r7, #24]
 8009fb2:	005b      	lsls	r3, r3, #1
 8009fb4:	2203      	movs	r2, #3
 8009fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8009fba:	43db      	mvns	r3, r3
 8009fbc:	69fa      	ldr	r2, [r7, #28]
 8009fbe:	4013      	ands	r3, r2
 8009fc0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	689a      	ldr	r2, [r3, #8]
 8009fc6:	69bb      	ldr	r3, [r7, #24]
 8009fc8:	005b      	lsls	r3, r3, #1
 8009fca:	fa02 f303 	lsl.w	r3, r2, r3
 8009fce:	69fa      	ldr	r2, [r7, #28]
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	69fa      	ldr	r2, [r7, #28]
 8009fd8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d07c      	beq.n	800a0e0 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8009fe6:	4a47      	ldr	r2, [pc, #284]	; (800a104 <HAL_GPIO_Init+0x3a8>)
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	089b      	lsrs	r3, r3, #2
 8009fec:	3318      	adds	r3, #24
 8009fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ff2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	f003 0303 	and.w	r3, r3, #3
 8009ffa:	00db      	lsls	r3, r3, #3
 8009ffc:	220f      	movs	r2, #15
 8009ffe:	fa02 f303 	lsl.w	r3, r2, r3
 800a002:	43db      	mvns	r3, r3
 800a004:	69fa      	ldr	r2, [r7, #28]
 800a006:	4013      	ands	r3, r2
 800a008:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	0a9a      	lsrs	r2, r3, #10
 800a00e:	4b3e      	ldr	r3, [pc, #248]	; (800a108 <HAL_GPIO_Init+0x3ac>)
 800a010:	4013      	ands	r3, r2
 800a012:	697a      	ldr	r2, [r7, #20]
 800a014:	f002 0203 	and.w	r2, r2, #3
 800a018:	00d2      	lsls	r2, r2, #3
 800a01a:	4093      	lsls	r3, r2
 800a01c:	69fa      	ldr	r2, [r7, #28]
 800a01e:	4313      	orrs	r3, r2
 800a020:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800a022:	4938      	ldr	r1, [pc, #224]	; (800a104 <HAL_GPIO_Init+0x3a8>)
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	089b      	lsrs	r3, r3, #2
 800a028:	3318      	adds	r3, #24
 800a02a:	69fa      	ldr	r2, [r7, #28]
 800a02c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800a030:	4b34      	ldr	r3, [pc, #208]	; (800a104 <HAL_GPIO_Init+0x3a8>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	43db      	mvns	r3, r3
 800a03a:	69fa      	ldr	r2, [r7, #28]
 800a03c:	4013      	ands	r3, r2
 800a03e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d003      	beq.n	800a054 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800a04c:	69fa      	ldr	r2, [r7, #28]
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	4313      	orrs	r3, r2
 800a052:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800a054:	4a2b      	ldr	r2, [pc, #172]	; (800a104 <HAL_GPIO_Init+0x3a8>)
 800a056:	69fb      	ldr	r3, [r7, #28]
 800a058:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800a05a:	4b2a      	ldr	r3, [pc, #168]	; (800a104 <HAL_GPIO_Init+0x3a8>)
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	43db      	mvns	r3, r3
 800a064:	69fa      	ldr	r2, [r7, #28]
 800a066:	4013      	ands	r3, r2
 800a068:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a072:	2b00      	cmp	r3, #0
 800a074:	d003      	beq.n	800a07e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800a076:	69fa      	ldr	r2, [r7, #28]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	4313      	orrs	r3, r2
 800a07c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800a07e:	4a21      	ldr	r2, [pc, #132]	; (800a104 <HAL_GPIO_Init+0x3a8>)
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800a084:	4b1f      	ldr	r3, [pc, #124]	; (800a104 <HAL_GPIO_Init+0x3a8>)
 800a086:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a08a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	43db      	mvns	r3, r3
 800a090:	69fa      	ldr	r2, [r7, #28]
 800a092:	4013      	ands	r3, r2
 800a094:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d003      	beq.n	800a0aa <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800a0a2:	69fa      	ldr	r2, [r7, #28]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800a0aa:	4a16      	ldr	r2, [pc, #88]	; (800a104 <HAL_GPIO_Init+0x3a8>)
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800a0b2:	4b14      	ldr	r3, [pc, #80]	; (800a104 <HAL_GPIO_Init+0x3a8>)
 800a0b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0b8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	43db      	mvns	r3, r3
 800a0be:	69fa      	ldr	r2, [r7, #28]
 800a0c0:	4013      	ands	r3, r2
 800a0c2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d003      	beq.n	800a0d8 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800a0d0:	69fa      	ldr	r2, [r7, #28]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800a0d8:	4a0a      	ldr	r2, [pc, #40]	; (800a104 <HAL_GPIO_Init+0x3a8>)
 800a0da:	69fb      	ldr	r3, [r7, #28]
 800a0dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	fa22 f303 	lsr.w	r3, r2, r3
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	f47f ae3d 	bne.w	8009d70 <HAL_GPIO_Init+0x14>
  }
}
 800a0f6:	bf00      	nop
 800a0f8:	bf00      	nop
 800a0fa:	3724      	adds	r7, #36	; 0x24
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr
 800a104:	46022000 	.word	0x46022000
 800a108:	002f7f7f 	.word	0x002f7f7f

0800a10c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b089      	sub	sp, #36	; 0x24
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800a116:	2300      	movs	r3, #0
 800a118:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800a11e:	e0bc      	b.n	800a29a <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800a120:	2201      	movs	r2, #1
 800a122:	69bb      	ldr	r3, [r7, #24]
 800a124:	fa02 f303 	lsl.w	r3, r2, r3
 800a128:	683a      	ldr	r2, [r7, #0]
 800a12a:	4013      	ands	r3, r2
 800a12c:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 800a12e:	69bb      	ldr	r3, [r7, #24]
 800a130:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	2b00      	cmp	r3, #0
 800a136:	f000 80ad 	beq.w	800a294 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4a5e      	ldr	r2, [pc, #376]	; (800a2b8 <HAL_GPIO_DeInit+0x1ac>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d115      	bne.n	800a16e <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 800a142:	4a5e      	ldr	r2, [pc, #376]	; (800a2bc <HAL_GPIO_DeInit+0x1b0>)
 800a144:	69fb      	ldr	r3, [r7, #28]
 800a146:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a14a:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800a14c:	4a5b      	ldr	r2, [pc, #364]	; (800a2bc <HAL_GPIO_DeInit+0x1b0>)
 800a14e:	69bb      	ldr	r3, [r7, #24]
 800a150:	00db      	lsls	r3, r3, #3
 800a152:	4413      	add	r3, r2
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 800a158:	4b57      	ldr	r3, [pc, #348]	; (800a2b8 <HAL_GPIO_DeInit+0x1ac>)
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	2101      	movs	r1, #1
 800a15e:	69fb      	ldr	r3, [r7, #28]
 800a160:	fa01 f303 	lsl.w	r3, r1, r3
 800a164:	43db      	mvns	r3, r3
 800a166:	4954      	ldr	r1, [pc, #336]	; (800a2b8 <HAL_GPIO_DeInit+0x1ac>)
 800a168:	4013      	ands	r3, r2
 800a16a:	600b      	str	r3, [r1, #0]
 800a16c:	e053      	b.n	800a216 <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 800a16e:	4a54      	ldr	r2, [pc, #336]	; (800a2c0 <HAL_GPIO_DeInit+0x1b4>)
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	089b      	lsrs	r3, r3, #2
 800a174:	3318      	adds	r3, #24
 800a176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a17a:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 800a17c:	69bb      	ldr	r3, [r7, #24]
 800a17e:	f003 0303 	and.w	r3, r3, #3
 800a182:	00db      	lsls	r3, r3, #3
 800a184:	220f      	movs	r2, #15
 800a186:	fa02 f303 	lsl.w	r3, r2, r3
 800a18a:	68fa      	ldr	r2, [r7, #12]
 800a18c:	4013      	ands	r3, r2
 800a18e:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	0a9a      	lsrs	r2, r3, #10
 800a194:	4b4b      	ldr	r3, [pc, #300]	; (800a2c4 <HAL_GPIO_DeInit+0x1b8>)
 800a196:	4013      	ands	r3, r2
 800a198:	69ba      	ldr	r2, [r7, #24]
 800a19a:	f002 0203 	and.w	r2, r2, #3
 800a19e:	00d2      	lsls	r2, r2, #3
 800a1a0:	4093      	lsls	r3, r2
 800a1a2:	68fa      	ldr	r2, [r7, #12]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d136      	bne.n	800a216 <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 800a1a8:	4b45      	ldr	r3, [pc, #276]	; (800a2c0 <HAL_GPIO_DeInit+0x1b4>)
 800a1aa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	43db      	mvns	r3, r3
 800a1b2:	4943      	ldr	r1, [pc, #268]	; (800a2c0 <HAL_GPIO_DeInit+0x1b4>)
 800a1b4:	4013      	ands	r3, r2
 800a1b6:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
          EXTI->EMR1 &= ~(iocurrent);
 800a1ba:	4b41      	ldr	r3, [pc, #260]	; (800a2c0 <HAL_GPIO_DeInit+0x1b4>)
 800a1bc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	43db      	mvns	r3, r3
 800a1c4:	493e      	ldr	r1, [pc, #248]	; (800a2c0 <HAL_GPIO_DeInit+0x1b4>)
 800a1c6:	4013      	ands	r3, r2
 800a1c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 800a1cc:	4b3c      	ldr	r3, [pc, #240]	; (800a2c0 <HAL_GPIO_DeInit+0x1b4>)
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	43db      	mvns	r3, r3
 800a1d4:	493a      	ldr	r1, [pc, #232]	; (800a2c0 <HAL_GPIO_DeInit+0x1b4>)
 800a1d6:	4013      	ands	r3, r2
 800a1d8:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 800a1da:	4b39      	ldr	r3, [pc, #228]	; (800a2c0 <HAL_GPIO_DeInit+0x1b4>)
 800a1dc:	685a      	ldr	r2, [r3, #4]
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	43db      	mvns	r3, r3
 800a1e2:	4937      	ldr	r1, [pc, #220]	; (800a2c0 <HAL_GPIO_DeInit+0x1b4>)
 800a1e4:	4013      	ands	r3, r2
 800a1e6:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 800a1e8:	69bb      	ldr	r3, [r7, #24]
 800a1ea:	f003 0303 	and.w	r3, r3, #3
 800a1ee:	00db      	lsls	r3, r3, #3
 800a1f0:	220f      	movs	r2, #15
 800a1f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a1f6:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 800a1f8:	4a31      	ldr	r2, [pc, #196]	; (800a2c0 <HAL_GPIO_DeInit+0x1b4>)
 800a1fa:	69bb      	ldr	r3, [r7, #24]
 800a1fc:	089b      	lsrs	r3, r3, #2
 800a1fe:	3318      	adds	r3, #24
 800a200:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	43da      	mvns	r2, r3
 800a208:	482d      	ldr	r0, [pc, #180]	; (800a2c0 <HAL_GPIO_DeInit+0x1b4>)
 800a20a:	69bb      	ldr	r3, [r7, #24]
 800a20c:	089b      	lsrs	r3, r3, #2
 800a20e:	400a      	ands	r2, r1
 800a210:	3318      	adds	r3, #24
 800a212:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	69fb      	ldr	r3, [r7, #28]
 800a21c:	005b      	lsls	r3, r3, #1
 800a21e:	2103      	movs	r1, #3
 800a220:	fa01 f303 	lsl.w	r3, r1, r3
 800a224:	431a      	orrs	r2, r3
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 800a22a:	69fb      	ldr	r3, [r7, #28]
 800a22c:	08da      	lsrs	r2, r3, #3
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	3208      	adds	r2, #8
 800a232:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	f003 0307 	and.w	r3, r3, #7
 800a23c:	009b      	lsls	r3, r3, #2
 800a23e:	220f      	movs	r2, #15
 800a240:	fa02 f303 	lsl.w	r3, r2, r3
 800a244:	43db      	mvns	r3, r3
 800a246:	69fa      	ldr	r2, [r7, #28]
 800a248:	08d2      	lsrs	r2, r2, #3
 800a24a:	4019      	ands	r1, r3
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	3208      	adds	r2, #8
 800a250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	689a      	ldr	r2, [r3, #8]
 800a258:	69fb      	ldr	r3, [r7, #28]
 800a25a:	005b      	lsls	r3, r3, #1
 800a25c:	2103      	movs	r1, #3
 800a25e:	fa01 f303 	lsl.w	r3, r1, r3
 800a262:	43db      	mvns	r3, r3
 800a264:	401a      	ands	r2, r3
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	685a      	ldr	r2, [r3, #4]
 800a26e:	2101      	movs	r1, #1
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	fa01 f303 	lsl.w	r3, r1, r3
 800a276:	43db      	mvns	r3, r3
 800a278:	401a      	ands	r2, r3
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	68da      	ldr	r2, [r3, #12]
 800a282:	69fb      	ldr	r3, [r7, #28]
 800a284:	005b      	lsls	r3, r3, #1
 800a286:	2103      	movs	r1, #3
 800a288:	fa01 f303 	lsl.w	r3, r1, r3
 800a28c:	43db      	mvns	r3, r3
 800a28e:	401a      	ands	r2, r3
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	60da      	str	r2, [r3, #12]
    }

    position++;
 800a294:	69bb      	ldr	r3, [r7, #24]
 800a296:	3301      	adds	r3, #1
 800a298:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 800a29a:	683a      	ldr	r2, [r7, #0]
 800a29c:	69bb      	ldr	r3, [r7, #24]
 800a29e:	fa22 f303 	lsr.w	r3, r2, r3
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	f47f af3c 	bne.w	800a120 <HAL_GPIO_DeInit+0x14>
  }
}
 800a2a8:	bf00      	nop
 800a2aa:	bf00      	nop
 800a2ac:	3724      	adds	r7, #36	; 0x24
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr
 800a2b6:	bf00      	nop
 800a2b8:	46020000 	.word	0x46020000
 800a2bc:	0802b850 	.word	0x0802b850
 800a2c0:	46022000 	.word	0x46022000
 800a2c4:	002f7f7f 	.word	0x002f7f7f

0800a2c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b085      	sub	sp, #20
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	691a      	ldr	r2, [r3, #16]
 800a2d8:	887b      	ldrh	r3, [r7, #2]
 800a2da:	4013      	ands	r3, r2
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d002      	beq.n	800a2e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	73fb      	strb	r3, [r7, #15]
 800a2e4:	e001      	b.n	800a2ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 800a2ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3714      	adds	r7, #20
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b083      	sub	sp, #12
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	460b      	mov	r3, r1
 800a302:	807b      	strh	r3, [r7, #2]
 800a304:	4613      	mov	r3, r2
 800a306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a308:	787b      	ldrb	r3, [r7, #1]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d003      	beq.n	800a316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a30e:	887a      	ldrh	r2, [r7, #2]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800a314:	e002      	b.n	800a31c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800a316:	887a      	ldrh	r2, [r7, #2]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a31c:	bf00      	nop
 800a31e:	370c      	adds	r7, #12
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a328:	b480      	push	{r7}
 800a32a:	b085      	sub	sp, #20
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	460b      	mov	r3, r1
 800a332:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	695b      	ldr	r3, [r3, #20]
 800a338:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a33a:	887a      	ldrh	r2, [r7, #2]
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	4013      	ands	r3, r2
 800a340:	041a      	lsls	r2, r3, #16
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	43d9      	mvns	r1, r3
 800a346:	887b      	ldrh	r3, [r7, #2]
 800a348:	400b      	ands	r3, r1
 800a34a:	431a      	orrs	r2, r3
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	619a      	str	r2, [r3, #24]
}
 800a350:	bf00      	nop
 800a352:	3714      	adds	r7, #20
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <HAL_GPIO_EnableHighSPeedLowVoltage>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_EnableHighSPeedLowVoltage(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b08b      	sub	sp, #44	; 0x2c
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	460b      	mov	r3, r1
 800a366:	807b      	strh	r3, [r7, #2]
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800a368:	2300      	movs	r3, #0
 800a36a:	623b      	str	r3, [r7, #32]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800a370:	e03c      	b.n	800a3ec <HAL_GPIO_EnableHighSPeedLowVoltage+0x90>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position);
 800a372:	887a      	ldrh	r2, [r7, #2]
 800a374:	2101      	movs	r1, #1
 800a376:	6a3b      	ldr	r3, [r7, #32]
 800a378:	fa01 f303 	lsl.w	r3, r1, r3
 800a37c:	4013      	ands	r3, r2
 800a37e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800a380:	69bb      	ldr	r3, [r7, #24]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d02f      	beq.n	800a3e6 <HAL_GPIO_EnableHighSPeedLowVoltage+0x8a>
    {
      /* In case of LPGPIO Port */
      if (GPIOx == LPGPIO1)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	4a1f      	ldr	r2, [pc, #124]	; (800a408 <HAL_GPIO_EnableHighSPeedLowVoltage+0xac>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d120      	bne.n	800a3d0 <HAL_GPIO_EnableHighSPeedLowVoltage+0x74>
      {
        /* Get GPIO pin position */
        position = POSITION_VAL(GPIO_Pin);
 800a38e:	887b      	ldrh	r3, [r7, #2]
 800a390:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	fa93 f3a3 	rbit	r3, r3
 800a398:	60fb      	str	r3, [r7, #12]
  return result;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d101      	bne.n	800a3a8 <HAL_GPIO_EnableHighSPeedLowVoltage+0x4c>
    return 32U;
 800a3a4:	2320      	movs	r3, #32
 800a3a6:	e003      	b.n	800a3b0 <HAL_GPIO_EnableHighSPeedLowVoltage+0x54>
  return __builtin_clz(value);
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	fab3 f383 	clz	r3, r3
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	623b      	str	r3, [r7, #32]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800a3b2:	4a16      	ldr	r2, [pc, #88]	; (800a40c <HAL_GPIO_EnableHighSPeedLowVoltage+0xb0>)
 800a3b4:	6a3b      	ldr	r3, [r7, #32]
 800a3b6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a3ba:	61fb      	str	r3, [r7, #28]
        pin_position = (1UL << (LPGPIO_Map[position].Pin_Pos));
 800a3bc:	4a13      	ldr	r2, [pc, #76]	; (800a40c <HAL_GPIO_EnableHighSPeedLowVoltage+0xb0>)
 800a3be:	6a3b      	ldr	r3, [r7, #32]
 800a3c0:	00db      	lsls	r3, r3, #3
 800a3c2:	4413      	add	r3, r2
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a3cc:	627b      	str	r3, [r7, #36]	; 0x24
 800a3ce:	e004      	b.n	800a3da <HAL_GPIO_EnableHighSPeedLowVoltage+0x7e>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Save GPIO pin pos */
        pin_position = (1UL << position);
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	6a3b      	ldr	r3, [r7, #32]
 800a3d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a3d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      /* Set HSLVR gpio pin */
      SET_BIT(p_gpio->HSLVR, pin_position);
 800a3da:	69fb      	ldr	r3, [r7, #28]
 800a3dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e0:	431a      	orrs	r2, r3
 800a3e2:	69fb      	ldr	r3, [r7, #28]
 800a3e4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    position++;
 800a3e6:	6a3b      	ldr	r3, [r7, #32]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	623b      	str	r3, [r7, #32]
  while ((GPIO_Pin >> position) != 0U)
 800a3ec:	887a      	ldrh	r2, [r7, #2]
 800a3ee:	6a3b      	ldr	r3, [r7, #32]
 800a3f0:	fa42 f303 	asr.w	r3, r2, r3
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d1bc      	bne.n	800a372 <HAL_GPIO_EnableHighSPeedLowVoltage+0x16>
  }
}
 800a3f8:	bf00      	nop
 800a3fa:	bf00      	nop
 800a3fc:	372c      	adds	r7, #44	; 0x2c
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop
 800a408:	46020000 	.word	0x46020000
 800a40c:	0802b850 	.word	0x0802b850

0800a410 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b082      	sub	sp, #8
 800a414:	af00      	add	r7, sp, #0
 800a416:	4603      	mov	r3, r0
 800a418:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800a41a:	4b0f      	ldr	r3, [pc, #60]	; (800a458 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a41c:	68da      	ldr	r2, [r3, #12]
 800a41e:	88fb      	ldrh	r3, [r7, #6]
 800a420:	4013      	ands	r3, r2
 800a422:	2b00      	cmp	r3, #0
 800a424:	d006      	beq.n	800a434 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800a426:	4a0c      	ldr	r2, [pc, #48]	; (800a458 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a428:	88fb      	ldrh	r3, [r7, #6]
 800a42a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800a42c:	88fb      	ldrh	r3, [r7, #6]
 800a42e:	4618      	mov	r0, r3
 800a430:	f000 f814 	bl	800a45c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800a434:	4b08      	ldr	r3, [pc, #32]	; (800a458 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a436:	691a      	ldr	r2, [r3, #16]
 800a438:	88fb      	ldrh	r3, [r7, #6]
 800a43a:	4013      	ands	r3, r2
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d006      	beq.n	800a44e <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800a440:	4a05      	ldr	r2, [pc, #20]	; (800a458 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a442:	88fb      	ldrh	r3, [r7, #6]
 800a444:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800a446:	88fb      	ldrh	r3, [r7, #6]
 800a448:	4618      	mov	r0, r3
 800a44a:	f7f7 ff39 	bl	80022c0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800a44e:	bf00      	nop
 800a450:	3708      	adds	r7, #8
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	46022000 	.word	0x46022000

0800a45c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
 800a462:	4603      	mov	r3, r0
 800a464:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800a466:	bf00      	nop
 800a468:	370c      	adds	r7, #12
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr

0800a472 <HAL_GPU2D_Init>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_GPU2D_Init(GPU2D_HandleTypeDef *hgpu2d)
{
 800a472:	b580      	push	{r7, lr}
 800a474:	b082      	sub	sp, #8
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
  /* Check the GPU2D handle validity */
  if (hgpu2d == NULL)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d101      	bne.n	800a484 <HAL_GPU2D_Init+0x12>
  {
    return HAL_ERROR;
 800a480:	2301      	movs	r3, #1
 800a482:	e01c      	b.n	800a4be <HAL_GPU2D_Init+0x4c>
  }

  /* Check the parameters */
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));

  if (hgpu2d->State == HAL_GPU2D_STATE_RESET)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	795b      	ldrb	r3, [r3, #5]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d105      	bne.n	800a498 <HAL_GPU2D_Init+0x26>

    /* Init the low level hardware */
    hgpu2d->MspInitCallback(hgpu2d);
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    /* Init the low level hardware */
    HAL_GPU2D_MspInit(hgpu2d);
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f7f7 fae1 	bl	8001a54 <HAL_GPU2D_MspInit>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

    /* Allocate lock resource and initialize it */
    hgpu2d->Lock = HAL_UNLOCKED;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2200      	movs	r2, #0
 800a496:	711a      	strb	r2, [r3, #4]
  }

  /* Process locked */
  __HAL_LOCK(hgpu2d);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	791b      	ldrb	r3, [r3, #4]
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d101      	bne.n	800a4a4 <HAL_GPU2D_Init+0x32>
 800a4a0:	2302      	movs	r3, #2
 800a4a2:	e00c      	b.n	800a4be <HAL_GPU2D_Init+0x4c>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	711a      	strb	r2, [r3, #4]
  /* Reset the CommandListCpltCallback handler */
  hgpu2d->CommandListCpltCallback = NULL;
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

  /* Update error code */
  hgpu2d->ErrorCode = HAL_GPU2D_ERROR_NONE;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	609a      	str	r2, [r3, #8]

  /* Initialize the GPU2D state*/
  hgpu2d->State = HAL_GPU2D_STATE_READY;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	715a      	strb	r2, [r3, #5]

  /* Release Lock */
  __HAL_UNLOCK(hgpu2d);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	711a      	strb	r2, [r3, #4]

  return HAL_OK;
 800a4bc:	2300      	movs	r3, #0
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3708      	adds	r7, #8
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <HAL_GPU2D_ReadRegister>:
  *                   the configuration information for the GPU2D.
  * @param  offset    The register offset from GPU2D base address to read.
  * @retval Register value
  */
uint32_t HAL_GPU2D_ReadRegister(GPU2D_HandleTypeDef *hgpu2d, uint32_t offset)
{
 800a4c6:	b480      	push	{r7}
 800a4c8:	b085      	sub	sp, #20
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
 800a4ce:	6039      	str	r1, [r7, #0]
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));
  assert_param(IS_GPU2D_OFFSET(offset));

  /* No locking is required since reading a register is an atomic operation
   * and doesn't incur a state change in hal_gpu2d. */
  value = GPU2D_ReadReg(hgpu2d->Instance, offset);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	4413      	add	r3, r2
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	60fb      	str	r3, [r7, #12]

  return value;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3714      	adds	r7, #20
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr

0800a4ea <HAL_GPU2D_WriteRegister>:
  * @param  offset    The register offset from GPU2D base address to write.
  * @param  value     The value to be written to provided register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_GPU2D_WriteRegister(GPU2D_HandleTypeDef *hgpu2d, uint32_t offset, uint32_t value)
{
 800a4ea:	b480      	push	{r7}
 800a4ec:	b085      	sub	sp, #20
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	60f8      	str	r0, [r7, #12]
 800a4f2:	60b9      	str	r1, [r7, #8]
 800a4f4:	607a      	str	r2, [r7, #4]
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));
  assert_param(IS_GPU2D_OFFSET(offset));

  /* No locking is required since writing a register is an atomic operation
   * and doesn't incur a state change in hal_gpu2d. */
  GPU2D_WriteReg(hgpu2d->Instance, offset, value);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681a      	ldr	r2, [r3, #0]
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	461a      	mov	r2, r3
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a504:	2300      	movs	r3, #0
}
 800a506:	4618      	mov	r0, r3
 800a508:	3714      	adds	r7, #20
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr

0800a512 <HAL_GPU2D_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b086      	sub	sp, #24
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
  uint32_t isr_flags = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_ITCTRL);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	33f8      	adds	r3, #248	; 0xf8
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	617b      	str	r3, [r7, #20]

  /* Command List Complete Interrupt management */
  if ((isr_flags & GPU2D_FLAG_CLC) != 0U)
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	f003 0301 	and.w	r3, r3, #1
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d013      	beq.n	800a556 <HAL_GPU2D_IRQHandler+0x44>
  {
    uint32_t last_cl_id;

    /* Clear the completion flag */
    __HAL_GPU2D_CLEAR_FLAG(hgpu2d, GPU2D_FLAG_CLC);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	33f8      	adds	r3, #248	; 0xf8
 800a534:	613b      	str	r3, [r7, #16]
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f023 0201 	bic.w	r2, r3, #1
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	601a      	str	r2, [r3, #0]

    last_cl_id = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_CLID);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	60fb      	str	r3, [r7, #12]
    if (hgpu2d->CommandListCpltCallback != NULL)
    {
      hgpu2d->CommandListCpltCallback(hgpu2d, last_cl_id);
    }
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    HAL_GPU2D_CommandListCpltCallback(hgpu2d, last_cl_id);
 800a54e:	68f9      	ldr	r1, [r7, #12]
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f7f8 fd3f 	bl	8002fd4 <HAL_GPU2D_CommandListCpltCallback>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */
  }
}
 800a556:	bf00      	nop
 800a558:	3718      	adds	r7, #24
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}

0800a55e <HAL_GPU2D_ER_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_ER_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 800a55e:	b580      	push	{r7, lr}
 800a560:	b082      	sub	sp, #8
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
  HAL_GPU2D_ErrorCallback(hgpu2d);
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 f804 	bl	800a574 <HAL_GPU2D_ErrorCallback>
}
 800a56c:	bf00      	nop
 800a56e:	3708      	adds	r7, #8
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <HAL_GPU2D_ErrorCallback>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
__weak void HAL_GPU2D_ErrorCallback(GPU2D_HandleTypeDef *hgpu2d)
{
 800a574:	b480      	push	{r7}
 800a576:	b083      	sub	sp, #12
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
            the HAL_GPU2D_ErrorCallback can be implemented in the user file.
            The default implementation stops the execution as an error is considered
            fatal and non recoverable.
   */

  for (;;)
 800a57c:	e7fe      	b.n	800a57c <HAL_GPU2D_ErrorCallback+0x8>

0800a57e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a57e:	b580      	push	{r7, lr}
 800a580:	b082      	sub	sp, #8
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d101      	bne.n	800a590 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a58c:	2301      	movs	r3, #1
 800a58e:	e081      	b.n	800a694 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a596:	b2db      	uxtb	r3, r3
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d106      	bne.n	800a5aa <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f000 f8a8 	bl	800a6fa <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2224      	movs	r2, #36	; 0x24
 800a5ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f022 0201 	bic.w	r2, r2, #1
 800a5c0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	685a      	ldr	r2, [r3, #4]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a5ce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	689a      	ldr	r2, [r3, #8]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a5de:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	68db      	ldr	r3, [r3, #12]
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d107      	bne.n	800a5f8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	689a      	ldr	r2, [r3, #8]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a5f4:	609a      	str	r2, [r3, #8]
 800a5f6:	e006      	b.n	800a606 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	689a      	ldr	r2, [r3, #8]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a604:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	2b02      	cmp	r3, #2
 800a60c:	d104      	bne.n	800a618 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a616:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	6812      	ldr	r2, [r2, #0]
 800a622:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a62a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	68da      	ldr	r2, [r3, #12]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a63a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	691a      	ldr	r2, [r3, #16]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	695b      	ldr	r3, [r3, #20]
 800a644:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	699b      	ldr	r3, [r3, #24]
 800a64c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	430a      	orrs	r2, r1
 800a654:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	69d9      	ldr	r1, [r3, #28]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6a1a      	ldr	r2, [r3, #32]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	430a      	orrs	r2, r1
 800a664:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f042 0201 	orr.w	r2, r2, #1
 800a674:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2200      	movs	r2, #0
 800a67a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2220      	movs	r2, #32
 800a680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2200      	movs	r2, #0
 800a68e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a692:	2300      	movs	r3, #0
}
 800a694:	4618      	mov	r0, r3
 800a696:	3708      	adds	r7, #8
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d101      	bne.n	800a6ae <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e021      	b.n	800a6f2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2224      	movs	r2, #36	; 0x24
 800a6b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f022 0201 	bic.w	r2, r2, #1
 800a6c4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f000 f821 	bl	800a70e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a6f0:	2300      	movs	r3, #0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3708      	adds	r7, #8
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800a6fa:	b480      	push	{r7}
 800a6fc:	b083      	sub	sp, #12
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800a702:	bf00      	nop
 800a704:	370c      	adds	r7, #12
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr

0800a70e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800a70e:	b480      	push	{r7}
 800a710:	b083      	sub	sp, #12
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800a716:	bf00      	nop
 800a718:	370c      	adds	r7, #12
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr
	...

0800a724 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b088      	sub	sp, #32
 800a728:	af02      	add	r7, sp, #8
 800a72a:	60f8      	str	r0, [r7, #12]
 800a72c:	607a      	str	r2, [r7, #4]
 800a72e:	461a      	mov	r2, r3
 800a730:	460b      	mov	r3, r1
 800a732:	817b      	strh	r3, [r7, #10]
 800a734:	4613      	mov	r3, r2
 800a736:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	2b20      	cmp	r3, #32
 800a742:	f040 80db 	bne.w	800a8fc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d101      	bne.n	800a754 <HAL_I2C_Master_Receive+0x30>
 800a750:	2302      	movs	r3, #2
 800a752:	e0d4      	b.n	800a8fe <HAL_I2C_Master_Receive+0x1da>
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2201      	movs	r2, #1
 800a758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a75c:	f7fd f86e 	bl	800783c <HAL_GetTick>
 800a760:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	9300      	str	r3, [sp, #0]
 800a766:	2319      	movs	r3, #25
 800a768:	2201      	movs	r2, #1
 800a76a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a76e:	68f8      	ldr	r0, [r7, #12]
 800a770:	f000 fbe2 	bl	800af38 <I2C_WaitOnFlagUntilTimeout>
 800a774:	4603      	mov	r3, r0
 800a776:	2b00      	cmp	r3, #0
 800a778:	d001      	beq.n	800a77e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800a77a:	2301      	movs	r3, #1
 800a77c:	e0bf      	b.n	800a8fe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2222      	movs	r2, #34	; 0x22
 800a782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2210      	movs	r2, #16
 800a78a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2200      	movs	r2, #0
 800a792:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	893a      	ldrh	r2, [r7, #8]
 800a79e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	2bff      	cmp	r3, #255	; 0xff
 800a7ae:	d90e      	bls.n	800a7ce <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	22ff      	movs	r2, #255	; 0xff
 800a7b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7ba:	b2da      	uxtb	r2, r3
 800a7bc:	8979      	ldrh	r1, [r7, #10]
 800a7be:	4b52      	ldr	r3, [pc, #328]	; (800a908 <HAL_I2C_Master_Receive+0x1e4>)
 800a7c0:	9300      	str	r3, [sp, #0]
 800a7c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a7c6:	68f8      	ldr	r0, [r7, #12]
 800a7c8:	f000 fdf2 	bl	800b3b0 <I2C_TransferConfig>
 800a7cc:	e06d      	b.n	800a8aa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7d2:	b29a      	uxth	r2, r3
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7dc:	b2da      	uxtb	r2, r3
 800a7de:	8979      	ldrh	r1, [r7, #10]
 800a7e0:	4b49      	ldr	r3, [pc, #292]	; (800a908 <HAL_I2C_Master_Receive+0x1e4>)
 800a7e2:	9300      	str	r3, [sp, #0]
 800a7e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a7e8:	68f8      	ldr	r0, [r7, #12]
 800a7ea:	f000 fde1 	bl	800b3b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800a7ee:	e05c      	b.n	800a8aa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a7f0:	697a      	ldr	r2, [r7, #20]
 800a7f2:	6a39      	ldr	r1, [r7, #32]
 800a7f4:	68f8      	ldr	r0, [r7, #12]
 800a7f6:	f000 fc79 	bl	800b0ec <I2C_WaitOnRXNEFlagUntilTimeout>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d001      	beq.n	800a804 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800a800:	2301      	movs	r3, #1
 800a802:	e07c      	b.n	800a8fe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a80e:	b2d2      	uxtb	r2, r2
 800a810:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a816:	1c5a      	adds	r2, r3, #1
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a820:	3b01      	subs	r3, #1
 800a822:	b29a      	uxth	r2, r3
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	3b01      	subs	r3, #1
 800a830:	b29a      	uxth	r2, r3
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a83a:	b29b      	uxth	r3, r3
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d034      	beq.n	800a8aa <HAL_I2C_Master_Receive+0x186>
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a844:	2b00      	cmp	r3, #0
 800a846:	d130      	bne.n	800a8aa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	9300      	str	r3, [sp, #0]
 800a84c:	6a3b      	ldr	r3, [r7, #32]
 800a84e:	2200      	movs	r2, #0
 800a850:	2180      	movs	r1, #128	; 0x80
 800a852:	68f8      	ldr	r0, [r7, #12]
 800a854:	f000 fb70 	bl	800af38 <I2C_WaitOnFlagUntilTimeout>
 800a858:	4603      	mov	r3, r0
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d001      	beq.n	800a862 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800a85e:	2301      	movs	r3, #1
 800a860:	e04d      	b.n	800a8fe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a866:	b29b      	uxth	r3, r3
 800a868:	2bff      	cmp	r3, #255	; 0xff
 800a86a:	d90e      	bls.n	800a88a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	22ff      	movs	r2, #255	; 0xff
 800a870:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a876:	b2da      	uxtb	r2, r3
 800a878:	8979      	ldrh	r1, [r7, #10]
 800a87a:	2300      	movs	r3, #0
 800a87c:	9300      	str	r3, [sp, #0]
 800a87e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a882:	68f8      	ldr	r0, [r7, #12]
 800a884:	f000 fd94 	bl	800b3b0 <I2C_TransferConfig>
 800a888:	e00f      	b.n	800a8aa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a88e:	b29a      	uxth	r2, r3
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a898:	b2da      	uxtb	r2, r3
 800a89a:	8979      	ldrh	r1, [r7, #10]
 800a89c:	2300      	movs	r3, #0
 800a89e:	9300      	str	r3, [sp, #0]
 800a8a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a8a4:	68f8      	ldr	r0, [r7, #12]
 800a8a6:	f000 fd83 	bl	800b3b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d19d      	bne.n	800a7f0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a8b4:	697a      	ldr	r2, [r7, #20]
 800a8b6:	6a39      	ldr	r1, [r7, #32]
 800a8b8:	68f8      	ldr	r0, [r7, #12]
 800a8ba:	f000 fbd3 	bl	800b064 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d001      	beq.n	800a8c8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	e01a      	b.n	800a8fe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	2220      	movs	r2, #32
 800a8ce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	6859      	ldr	r1, [r3, #4]
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	4b0c      	ldr	r3, [pc, #48]	; (800a90c <HAL_I2C_Master_Receive+0x1e8>)
 800a8dc:	400b      	ands	r3, r1
 800a8de:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2220      	movs	r2, #32
 800a8e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	e000      	b.n	800a8fe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800a8fc:	2302      	movs	r3, #2
  }
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3718      	adds	r7, #24
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop
 800a908:	80002400 	.word	0x80002400
 800a90c:	fe00e800 	.word	0xfe00e800

0800a910 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b088      	sub	sp, #32
 800a914:	af02      	add	r7, sp, #8
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	4608      	mov	r0, r1
 800a91a:	4611      	mov	r1, r2
 800a91c:	461a      	mov	r2, r3
 800a91e:	4603      	mov	r3, r0
 800a920:	817b      	strh	r3, [r7, #10]
 800a922:	460b      	mov	r3, r1
 800a924:	813b      	strh	r3, [r7, #8]
 800a926:	4613      	mov	r3, r2
 800a928:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a930:	b2db      	uxtb	r3, r3
 800a932:	2b20      	cmp	r3, #32
 800a934:	f040 80f9 	bne.w	800ab2a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a938:	6a3b      	ldr	r3, [r7, #32]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d002      	beq.n	800a944 <HAL_I2C_Mem_Write+0x34>
 800a93e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a940:	2b00      	cmp	r3, #0
 800a942:	d105      	bne.n	800a950 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a94a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a94c:	2301      	movs	r3, #1
 800a94e:	e0ed      	b.n	800ab2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a956:	2b01      	cmp	r3, #1
 800a958:	d101      	bne.n	800a95e <HAL_I2C_Mem_Write+0x4e>
 800a95a:	2302      	movs	r3, #2
 800a95c:	e0e6      	b.n	800ab2c <HAL_I2C_Mem_Write+0x21c>
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2201      	movs	r2, #1
 800a962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a966:	f7fc ff69 	bl	800783c <HAL_GetTick>
 800a96a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	9300      	str	r3, [sp, #0]
 800a970:	2319      	movs	r3, #25
 800a972:	2201      	movs	r2, #1
 800a974:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a978:	68f8      	ldr	r0, [r7, #12]
 800a97a:	f000 fadd 	bl	800af38 <I2C_WaitOnFlagUntilTimeout>
 800a97e:	4603      	mov	r3, r0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d001      	beq.n	800a988 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a984:	2301      	movs	r3, #1
 800a986:	e0d1      	b.n	800ab2c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2221      	movs	r2, #33	; 0x21
 800a98c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2240      	movs	r2, #64	; 0x40
 800a994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	2200      	movs	r2, #0
 800a99c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	6a3a      	ldr	r2, [r7, #32]
 800a9a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a9a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a9b0:	88f8      	ldrh	r0, [r7, #6]
 800a9b2:	893a      	ldrh	r2, [r7, #8]
 800a9b4:	8979      	ldrh	r1, [r7, #10]
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	9301      	str	r3, [sp, #4]
 800a9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9bc:	9300      	str	r3, [sp, #0]
 800a9be:	4603      	mov	r3, r0
 800a9c0:	68f8      	ldr	r0, [r7, #12]
 800a9c2:	f000 f9ed 	bl	800ada0 <I2C_RequestMemoryWrite>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d005      	beq.n	800a9d8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	e0a9      	b.n	800ab2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	2bff      	cmp	r3, #255	; 0xff
 800a9e0:	d90e      	bls.n	800aa00 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	22ff      	movs	r2, #255	; 0xff
 800a9e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9ec:	b2da      	uxtb	r2, r3
 800a9ee:	8979      	ldrh	r1, [r7, #10]
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	9300      	str	r3, [sp, #0]
 800a9f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a9f8:	68f8      	ldr	r0, [r7, #12]
 800a9fa:	f000 fcd9 	bl	800b3b0 <I2C_TransferConfig>
 800a9fe:	e00f      	b.n	800aa20 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa04:	b29a      	uxth	r2, r3
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa0e:	b2da      	uxtb	r2, r3
 800aa10:	8979      	ldrh	r1, [r7, #10]
 800aa12:	2300      	movs	r3, #0
 800aa14:	9300      	str	r3, [sp, #0]
 800aa16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aa1a:	68f8      	ldr	r0, [r7, #12]
 800aa1c:	f000 fcc8 	bl	800b3b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa20:	697a      	ldr	r2, [r7, #20]
 800aa22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa24:	68f8      	ldr	r0, [r7, #12]
 800aa26:	f000 fad6 	bl	800afd6 <I2C_WaitOnTXISFlagUntilTimeout>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d001      	beq.n	800aa34 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800aa30:	2301      	movs	r3, #1
 800aa32:	e07b      	b.n	800ab2c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa38:	781a      	ldrb	r2, [r3, #0]
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa44:	1c5a      	adds	r2, r3, #1
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	3b01      	subs	r3, #1
 800aa52:	b29a      	uxth	r2, r3
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa5c:	3b01      	subs	r3, #1
 800aa5e:	b29a      	uxth	r2, r3
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa68:	b29b      	uxth	r3, r3
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d034      	beq.n	800aad8 <HAL_I2C_Mem_Write+0x1c8>
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d130      	bne.n	800aad8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	9300      	str	r3, [sp, #0]
 800aa7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	2180      	movs	r1, #128	; 0x80
 800aa80:	68f8      	ldr	r0, [r7, #12]
 800aa82:	f000 fa59 	bl	800af38 <I2C_WaitOnFlagUntilTimeout>
 800aa86:	4603      	mov	r3, r0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d001      	beq.n	800aa90 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	e04d      	b.n	800ab2c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa94:	b29b      	uxth	r3, r3
 800aa96:	2bff      	cmp	r3, #255	; 0xff
 800aa98:	d90e      	bls.n	800aab8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	22ff      	movs	r2, #255	; 0xff
 800aa9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aaa4:	b2da      	uxtb	r2, r3
 800aaa6:	8979      	ldrh	r1, [r7, #10]
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	9300      	str	r3, [sp, #0]
 800aaac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aab0:	68f8      	ldr	r0, [r7, #12]
 800aab2:	f000 fc7d 	bl	800b3b0 <I2C_TransferConfig>
 800aab6:	e00f      	b.n	800aad8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aabc:	b29a      	uxth	r2, r3
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aac6:	b2da      	uxtb	r2, r3
 800aac8:	8979      	ldrh	r1, [r7, #10]
 800aaca:	2300      	movs	r3, #0
 800aacc:	9300      	str	r3, [sp, #0]
 800aace:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aad2:	68f8      	ldr	r0, [r7, #12]
 800aad4:	f000 fc6c 	bl	800b3b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aadc:	b29b      	uxth	r3, r3
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d19e      	bne.n	800aa20 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aae2:	697a      	ldr	r2, [r7, #20]
 800aae4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aae6:	68f8      	ldr	r0, [r7, #12]
 800aae8:	f000 fabc 	bl	800b064 <I2C_WaitOnSTOPFlagUntilTimeout>
 800aaec:	4603      	mov	r3, r0
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d001      	beq.n	800aaf6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	e01a      	b.n	800ab2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	2220      	movs	r2, #32
 800aafc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	6859      	ldr	r1, [r3, #4]
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	4b0a      	ldr	r3, [pc, #40]	; (800ab34 <HAL_I2C_Mem_Write+0x224>)
 800ab0a:	400b      	ands	r3, r1
 800ab0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2220      	movs	r2, #32
 800ab12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2200      	movs	r2, #0
 800ab22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ab26:	2300      	movs	r3, #0
 800ab28:	e000      	b.n	800ab2c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800ab2a:	2302      	movs	r3, #2
  }
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3718      	adds	r7, #24
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}
 800ab34:	fe00e800 	.word	0xfe00e800

0800ab38 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b088      	sub	sp, #32
 800ab3c:	af02      	add	r7, sp, #8
 800ab3e:	60f8      	str	r0, [r7, #12]
 800ab40:	4608      	mov	r0, r1
 800ab42:	4611      	mov	r1, r2
 800ab44:	461a      	mov	r2, r3
 800ab46:	4603      	mov	r3, r0
 800ab48:	817b      	strh	r3, [r7, #10]
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	813b      	strh	r3, [r7, #8]
 800ab4e:	4613      	mov	r3, r2
 800ab50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	2b20      	cmp	r3, #32
 800ab5c:	f040 80fd 	bne.w	800ad5a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab60:	6a3b      	ldr	r3, [r7, #32]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d002      	beq.n	800ab6c <HAL_I2C_Mem_Read+0x34>
 800ab66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d105      	bne.n	800ab78 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab72:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800ab74:	2301      	movs	r3, #1
 800ab76:	e0f1      	b.n	800ad5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	d101      	bne.n	800ab86 <HAL_I2C_Mem_Read+0x4e>
 800ab82:	2302      	movs	r3, #2
 800ab84:	e0ea      	b.n	800ad5c <HAL_I2C_Mem_Read+0x224>
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2201      	movs	r2, #1
 800ab8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ab8e:	f7fc fe55 	bl	800783c <HAL_GetTick>
 800ab92:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	9300      	str	r3, [sp, #0]
 800ab98:	2319      	movs	r3, #25
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800aba0:	68f8      	ldr	r0, [r7, #12]
 800aba2:	f000 f9c9 	bl	800af38 <I2C_WaitOnFlagUntilTimeout>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d001      	beq.n	800abb0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800abac:	2301      	movs	r3, #1
 800abae:	e0d5      	b.n	800ad5c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2222      	movs	r2, #34	; 0x22
 800abb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2240      	movs	r2, #64	; 0x40
 800abbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2200      	movs	r2, #0
 800abc4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	6a3a      	ldr	r2, [r7, #32]
 800abca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800abd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2200      	movs	r2, #0
 800abd6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800abd8:	88f8      	ldrh	r0, [r7, #6]
 800abda:	893a      	ldrh	r2, [r7, #8]
 800abdc:	8979      	ldrh	r1, [r7, #10]
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	9301      	str	r3, [sp, #4]
 800abe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe4:	9300      	str	r3, [sp, #0]
 800abe6:	4603      	mov	r3, r0
 800abe8:	68f8      	ldr	r0, [r7, #12]
 800abea:	f000 f92d 	bl	800ae48 <I2C_RequestMemoryRead>
 800abee:	4603      	mov	r3, r0
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d005      	beq.n	800ac00 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2200      	movs	r2, #0
 800abf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800abfc:	2301      	movs	r3, #1
 800abfe:	e0ad      	b.n	800ad5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	2bff      	cmp	r3, #255	; 0xff
 800ac08:	d90e      	bls.n	800ac28 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	22ff      	movs	r2, #255	; 0xff
 800ac0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac14:	b2da      	uxtb	r2, r3
 800ac16:	8979      	ldrh	r1, [r7, #10]
 800ac18:	4b52      	ldr	r3, [pc, #328]	; (800ad64 <HAL_I2C_Mem_Read+0x22c>)
 800ac1a:	9300      	str	r3, [sp, #0]
 800ac1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	f000 fbc5 	bl	800b3b0 <I2C_TransferConfig>
 800ac26:	e00f      	b.n	800ac48 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac2c:	b29a      	uxth	r2, r3
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac36:	b2da      	uxtb	r2, r3
 800ac38:	8979      	ldrh	r1, [r7, #10]
 800ac3a:	4b4a      	ldr	r3, [pc, #296]	; (800ad64 <HAL_I2C_Mem_Read+0x22c>)
 800ac3c:	9300      	str	r3, [sp, #0]
 800ac3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ac42:	68f8      	ldr	r0, [r7, #12]
 800ac44:	f000 fbb4 	bl	800b3b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	9300      	str	r3, [sp, #0]
 800ac4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac4e:	2200      	movs	r2, #0
 800ac50:	2104      	movs	r1, #4
 800ac52:	68f8      	ldr	r0, [r7, #12]
 800ac54:	f000 f970 	bl	800af38 <I2C_WaitOnFlagUntilTimeout>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d001      	beq.n	800ac62 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800ac5e:	2301      	movs	r3, #1
 800ac60:	e07c      	b.n	800ad5c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac6c:	b2d2      	uxtb	r2, r2
 800ac6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac74:	1c5a      	adds	r2, r3, #1
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac7e:	3b01      	subs	r3, #1
 800ac80:	b29a      	uxth	r2, r3
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	3b01      	subs	r3, #1
 800ac8e:	b29a      	uxth	r2, r3
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac98:	b29b      	uxth	r3, r3
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d034      	beq.n	800ad08 <HAL_I2C_Mem_Read+0x1d0>
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d130      	bne.n	800ad08 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	9300      	str	r3, [sp, #0]
 800acaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acac:	2200      	movs	r2, #0
 800acae:	2180      	movs	r1, #128	; 0x80
 800acb0:	68f8      	ldr	r0, [r7, #12]
 800acb2:	f000 f941 	bl	800af38 <I2C_WaitOnFlagUntilTimeout>
 800acb6:	4603      	mov	r3, r0
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d001      	beq.n	800acc0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800acbc:	2301      	movs	r3, #1
 800acbe:	e04d      	b.n	800ad5c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	2bff      	cmp	r3, #255	; 0xff
 800acc8:	d90e      	bls.n	800ace8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	22ff      	movs	r2, #255	; 0xff
 800acce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acd4:	b2da      	uxtb	r2, r3
 800acd6:	8979      	ldrh	r1, [r7, #10]
 800acd8:	2300      	movs	r3, #0
 800acda:	9300      	str	r3, [sp, #0]
 800acdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ace0:	68f8      	ldr	r0, [r7, #12]
 800ace2:	f000 fb65 	bl	800b3b0 <I2C_TransferConfig>
 800ace6:	e00f      	b.n	800ad08 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acec:	b29a      	uxth	r2, r3
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acf6:	b2da      	uxtb	r2, r3
 800acf8:	8979      	ldrh	r1, [r7, #10]
 800acfa:	2300      	movs	r3, #0
 800acfc:	9300      	str	r3, [sp, #0]
 800acfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ad02:	68f8      	ldr	r0, [r7, #12]
 800ad04:	f000 fb54 	bl	800b3b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad0c:	b29b      	uxth	r3, r3
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d19a      	bne.n	800ac48 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ad12:	697a      	ldr	r2, [r7, #20]
 800ad14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad16:	68f8      	ldr	r0, [r7, #12]
 800ad18:	f000 f9a4 	bl	800b064 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d001      	beq.n	800ad26 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800ad22:	2301      	movs	r3, #1
 800ad24:	e01a      	b.n	800ad5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2220      	movs	r2, #32
 800ad2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	6859      	ldr	r1, [r3, #4]
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681a      	ldr	r2, [r3, #0]
 800ad38:	4b0b      	ldr	r3, [pc, #44]	; (800ad68 <HAL_I2C_Mem_Read+0x230>)
 800ad3a:	400b      	ands	r3, r1
 800ad3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2220      	movs	r2, #32
 800ad42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2200      	movs	r2, #0
 800ad52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ad56:	2300      	movs	r3, #0
 800ad58:	e000      	b.n	800ad5c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800ad5a:	2302      	movs	r3, #2
  }
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3718      	adds	r7, #24
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}
 800ad64:	80002400 	.word	0x80002400
 800ad68:	fe00e800 	.word	0xfe00e800

0800ad6c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b083      	sub	sp, #12
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad7a:	b2db      	uxtb	r3, r3
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	370c      	adds	r7, #12
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr

0800ad88 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	370c      	adds	r7, #12
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr

0800ada0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b086      	sub	sp, #24
 800ada4:	af02      	add	r7, sp, #8
 800ada6:	60f8      	str	r0, [r7, #12]
 800ada8:	4608      	mov	r0, r1
 800adaa:	4611      	mov	r1, r2
 800adac:	461a      	mov	r2, r3
 800adae:	4603      	mov	r3, r0
 800adb0:	817b      	strh	r3, [r7, #10]
 800adb2:	460b      	mov	r3, r1
 800adb4:	813b      	strh	r3, [r7, #8]
 800adb6:	4613      	mov	r3, r2
 800adb8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800adba:	88fb      	ldrh	r3, [r7, #6]
 800adbc:	b2da      	uxtb	r2, r3
 800adbe:	8979      	ldrh	r1, [r7, #10]
 800adc0:	4b20      	ldr	r3, [pc, #128]	; (800ae44 <I2C_RequestMemoryWrite+0xa4>)
 800adc2:	9300      	str	r3, [sp, #0]
 800adc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	f000 faf1 	bl	800b3b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800adce:	69fa      	ldr	r2, [r7, #28]
 800add0:	69b9      	ldr	r1, [r7, #24]
 800add2:	68f8      	ldr	r0, [r7, #12]
 800add4:	f000 f8ff 	bl	800afd6 <I2C_WaitOnTXISFlagUntilTimeout>
 800add8:	4603      	mov	r3, r0
 800adda:	2b00      	cmp	r3, #0
 800addc:	d001      	beq.n	800ade2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800adde:	2301      	movs	r3, #1
 800ade0:	e02c      	b.n	800ae3c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ade2:	88fb      	ldrh	r3, [r7, #6]
 800ade4:	2b01      	cmp	r3, #1
 800ade6:	d105      	bne.n	800adf4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ade8:	893b      	ldrh	r3, [r7, #8]
 800adea:	b2da      	uxtb	r2, r3
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	629a      	str	r2, [r3, #40]	; 0x28
 800adf2:	e015      	b.n	800ae20 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800adf4:	893b      	ldrh	r3, [r7, #8]
 800adf6:	0a1b      	lsrs	r3, r3, #8
 800adf8:	b29b      	uxth	r3, r3
 800adfa:	b2da      	uxtb	r2, r3
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae02:	69fa      	ldr	r2, [r7, #28]
 800ae04:	69b9      	ldr	r1, [r7, #24]
 800ae06:	68f8      	ldr	r0, [r7, #12]
 800ae08:	f000 f8e5 	bl	800afd6 <I2C_WaitOnTXISFlagUntilTimeout>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d001      	beq.n	800ae16 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800ae12:	2301      	movs	r3, #1
 800ae14:	e012      	b.n	800ae3c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ae16:	893b      	ldrh	r3, [r7, #8]
 800ae18:	b2da      	uxtb	r2, r3
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800ae20:	69fb      	ldr	r3, [r7, #28]
 800ae22:	9300      	str	r3, [sp, #0]
 800ae24:	69bb      	ldr	r3, [r7, #24]
 800ae26:	2200      	movs	r2, #0
 800ae28:	2180      	movs	r1, #128	; 0x80
 800ae2a:	68f8      	ldr	r0, [r7, #12]
 800ae2c:	f000 f884 	bl	800af38 <I2C_WaitOnFlagUntilTimeout>
 800ae30:	4603      	mov	r3, r0
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d001      	beq.n	800ae3a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800ae36:	2301      	movs	r3, #1
 800ae38:	e000      	b.n	800ae3c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800ae3a:	2300      	movs	r3, #0
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3710      	adds	r7, #16
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}
 800ae44:	80002000 	.word	0x80002000

0800ae48 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b086      	sub	sp, #24
 800ae4c:	af02      	add	r7, sp, #8
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	4608      	mov	r0, r1
 800ae52:	4611      	mov	r1, r2
 800ae54:	461a      	mov	r2, r3
 800ae56:	4603      	mov	r3, r0
 800ae58:	817b      	strh	r3, [r7, #10]
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	813b      	strh	r3, [r7, #8]
 800ae5e:	4613      	mov	r3, r2
 800ae60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ae62:	88fb      	ldrh	r3, [r7, #6]
 800ae64:	b2da      	uxtb	r2, r3
 800ae66:	8979      	ldrh	r1, [r7, #10]
 800ae68:	4b20      	ldr	r3, [pc, #128]	; (800aeec <I2C_RequestMemoryRead+0xa4>)
 800ae6a:	9300      	str	r3, [sp, #0]
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	68f8      	ldr	r0, [r7, #12]
 800ae70:	f000 fa9e 	bl	800b3b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae74:	69fa      	ldr	r2, [r7, #28]
 800ae76:	69b9      	ldr	r1, [r7, #24]
 800ae78:	68f8      	ldr	r0, [r7, #12]
 800ae7a:	f000 f8ac 	bl	800afd6 <I2C_WaitOnTXISFlagUntilTimeout>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d001      	beq.n	800ae88 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800ae84:	2301      	movs	r3, #1
 800ae86:	e02c      	b.n	800aee2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ae88:	88fb      	ldrh	r3, [r7, #6]
 800ae8a:	2b01      	cmp	r3, #1
 800ae8c:	d105      	bne.n	800ae9a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ae8e:	893b      	ldrh	r3, [r7, #8]
 800ae90:	b2da      	uxtb	r2, r3
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	629a      	str	r2, [r3, #40]	; 0x28
 800ae98:	e015      	b.n	800aec6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ae9a:	893b      	ldrh	r3, [r7, #8]
 800ae9c:	0a1b      	lsrs	r3, r3, #8
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	b2da      	uxtb	r2, r3
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aea8:	69fa      	ldr	r2, [r7, #28]
 800aeaa:	69b9      	ldr	r1, [r7, #24]
 800aeac:	68f8      	ldr	r0, [r7, #12]
 800aeae:	f000 f892 	bl	800afd6 <I2C_WaitOnTXISFlagUntilTimeout>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d001      	beq.n	800aebc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800aeb8:	2301      	movs	r3, #1
 800aeba:	e012      	b.n	800aee2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800aebc:	893b      	ldrh	r3, [r7, #8]
 800aebe:	b2da      	uxtb	r2, r3
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800aec6:	69fb      	ldr	r3, [r7, #28]
 800aec8:	9300      	str	r3, [sp, #0]
 800aeca:	69bb      	ldr	r3, [r7, #24]
 800aecc:	2200      	movs	r2, #0
 800aece:	2140      	movs	r1, #64	; 0x40
 800aed0:	68f8      	ldr	r0, [r7, #12]
 800aed2:	f000 f831 	bl	800af38 <I2C_WaitOnFlagUntilTimeout>
 800aed6:	4603      	mov	r3, r0
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d001      	beq.n	800aee0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800aedc:	2301      	movs	r3, #1
 800aede:	e000      	b.n	800aee2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800aee0:	2300      	movs	r3, #0
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3710      	adds	r7, #16
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop
 800aeec:	80002000 	.word	0x80002000

0800aef0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b083      	sub	sp, #12
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	699b      	ldr	r3, [r3, #24]
 800aefe:	f003 0302 	and.w	r3, r3, #2
 800af02:	2b02      	cmp	r3, #2
 800af04:	d103      	bne.n	800af0e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	2200      	movs	r2, #0
 800af0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	699b      	ldr	r3, [r3, #24]
 800af14:	f003 0301 	and.w	r3, r3, #1
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d007      	beq.n	800af2c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	699a      	ldr	r2, [r3, #24]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f042 0201 	orr.w	r2, r2, #1
 800af2a:	619a      	str	r2, [r3, #24]
  }
}
 800af2c:	bf00      	nop
 800af2e:	370c      	adds	r7, #12
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr

0800af38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b084      	sub	sp, #16
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	60f8      	str	r0, [r7, #12]
 800af40:	60b9      	str	r1, [r7, #8]
 800af42:	603b      	str	r3, [r7, #0]
 800af44:	4613      	mov	r3, r2
 800af46:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800af48:	e031      	b.n	800afae <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af50:	d02d      	beq.n	800afae <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af52:	f7fc fc73 	bl	800783c <HAL_GetTick>
 800af56:	4602      	mov	r2, r0
 800af58:	69bb      	ldr	r3, [r7, #24]
 800af5a:	1ad3      	subs	r3, r2, r3
 800af5c:	683a      	ldr	r2, [r7, #0]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d302      	bcc.n	800af68 <I2C_WaitOnFlagUntilTimeout+0x30>
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d122      	bne.n	800afae <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	699a      	ldr	r2, [r3, #24]
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	4013      	ands	r3, r2
 800af72:	68ba      	ldr	r2, [r7, #8]
 800af74:	429a      	cmp	r2, r3
 800af76:	bf0c      	ite	eq
 800af78:	2301      	moveq	r3, #1
 800af7a:	2300      	movne	r3, #0
 800af7c:	b2db      	uxtb	r3, r3
 800af7e:	461a      	mov	r2, r3
 800af80:	79fb      	ldrb	r3, [r7, #7]
 800af82:	429a      	cmp	r2, r3
 800af84:	d113      	bne.n	800afae <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af8a:	f043 0220 	orr.w	r2, r3, #32
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2220      	movs	r2, #32
 800af96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2200      	movs	r2, #0
 800af9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	2200      	movs	r2, #0
 800afa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800afaa:	2301      	movs	r3, #1
 800afac:	e00f      	b.n	800afce <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	699a      	ldr	r2, [r3, #24]
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	4013      	ands	r3, r2
 800afb8:	68ba      	ldr	r2, [r7, #8]
 800afba:	429a      	cmp	r2, r3
 800afbc:	bf0c      	ite	eq
 800afbe:	2301      	moveq	r3, #1
 800afc0:	2300      	movne	r3, #0
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	461a      	mov	r2, r3
 800afc6:	79fb      	ldrb	r3, [r7, #7]
 800afc8:	429a      	cmp	r2, r3
 800afca:	d0be      	beq.n	800af4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800afcc:	2300      	movs	r3, #0
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3710      	adds	r7, #16
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}

0800afd6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800afd6:	b580      	push	{r7, lr}
 800afd8:	b084      	sub	sp, #16
 800afda:	af00      	add	r7, sp, #0
 800afdc:	60f8      	str	r0, [r7, #12]
 800afde:	60b9      	str	r1, [r7, #8]
 800afe0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800afe2:	e033      	b.n	800b04c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	68b9      	ldr	r1, [r7, #8]
 800afe8:	68f8      	ldr	r0, [r7, #12]
 800afea:	f000 f901 	bl	800b1f0 <I2C_IsErrorOccurred>
 800afee:	4603      	mov	r3, r0
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d001      	beq.n	800aff8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800aff4:	2301      	movs	r3, #1
 800aff6:	e031      	b.n	800b05c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800affe:	d025      	beq.n	800b04c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b000:	f7fc fc1c 	bl	800783c <HAL_GetTick>
 800b004:	4602      	mov	r2, r0
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	1ad3      	subs	r3, r2, r3
 800b00a:	68ba      	ldr	r2, [r7, #8]
 800b00c:	429a      	cmp	r2, r3
 800b00e:	d302      	bcc.n	800b016 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d11a      	bne.n	800b04c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	699b      	ldr	r3, [r3, #24]
 800b01c:	f003 0302 	and.w	r3, r3, #2
 800b020:	2b02      	cmp	r3, #2
 800b022:	d013      	beq.n	800b04c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b028:	f043 0220 	orr.w	r2, r3, #32
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2220      	movs	r2, #32
 800b034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2200      	movs	r2, #0
 800b03c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2200      	movs	r2, #0
 800b044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800b048:	2301      	movs	r3, #1
 800b04a:	e007      	b.n	800b05c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	699b      	ldr	r3, [r3, #24]
 800b052:	f003 0302 	and.w	r3, r3, #2
 800b056:	2b02      	cmp	r3, #2
 800b058:	d1c4      	bne.n	800afe4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b05a:	2300      	movs	r3, #0
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3710      	adds	r7, #16
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	60f8      	str	r0, [r7, #12]
 800b06c:	60b9      	str	r1, [r7, #8]
 800b06e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b070:	e02f      	b.n	800b0d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	68b9      	ldr	r1, [r7, #8]
 800b076:	68f8      	ldr	r0, [r7, #12]
 800b078:	f000 f8ba 	bl	800b1f0 <I2C_IsErrorOccurred>
 800b07c:	4603      	mov	r3, r0
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d001      	beq.n	800b086 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b082:	2301      	movs	r3, #1
 800b084:	e02d      	b.n	800b0e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b086:	f7fc fbd9 	bl	800783c <HAL_GetTick>
 800b08a:	4602      	mov	r2, r0
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	1ad3      	subs	r3, r2, r3
 800b090:	68ba      	ldr	r2, [r7, #8]
 800b092:	429a      	cmp	r2, r3
 800b094:	d302      	bcc.n	800b09c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d11a      	bne.n	800b0d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	699b      	ldr	r3, [r3, #24]
 800b0a2:	f003 0320 	and.w	r3, r3, #32
 800b0a6:	2b20      	cmp	r3, #32
 800b0a8:	d013      	beq.n	800b0d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0ae:	f043 0220 	orr.w	r2, r3, #32
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2220      	movs	r2, #32
 800b0ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	e007      	b.n	800b0e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	699b      	ldr	r3, [r3, #24]
 800b0d8:	f003 0320 	and.w	r3, r3, #32
 800b0dc:	2b20      	cmp	r3, #32
 800b0de:	d1c8      	bne.n	800b072 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b0e0:	2300      	movs	r3, #0
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3710      	adds	r7, #16
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
	...

0800b0ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b0f8:	e06b      	b.n	800b1d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	68b9      	ldr	r1, [r7, #8]
 800b0fe:	68f8      	ldr	r0, [r7, #12]
 800b100:	f000 f876 	bl	800b1f0 <I2C_IsErrorOccurred>
 800b104:	4603      	mov	r3, r0
 800b106:	2b00      	cmp	r3, #0
 800b108:	d001      	beq.n	800b10e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b10a:	2301      	movs	r3, #1
 800b10c:	e069      	b.n	800b1e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	699b      	ldr	r3, [r3, #24]
 800b114:	f003 0320 	and.w	r3, r3, #32
 800b118:	2b20      	cmp	r3, #32
 800b11a:	d138      	bne.n	800b18e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	699b      	ldr	r3, [r3, #24]
 800b122:	f003 0304 	and.w	r3, r3, #4
 800b126:	2b04      	cmp	r3, #4
 800b128:	d105      	bne.n	800b136 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d001      	beq.n	800b136 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800b132:	2300      	movs	r3, #0
 800b134:	e055      	b.n	800b1e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	699b      	ldr	r3, [r3, #24]
 800b13c:	f003 0310 	and.w	r3, r3, #16
 800b140:	2b10      	cmp	r3, #16
 800b142:	d107      	bne.n	800b154 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	2210      	movs	r2, #16
 800b14a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2204      	movs	r2, #4
 800b150:	645a      	str	r2, [r3, #68]	; 0x44
 800b152:	e002      	b.n	800b15a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2200      	movs	r2, #0
 800b158:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	2220      	movs	r2, #32
 800b160:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	6859      	ldr	r1, [r3, #4]
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	4b1f      	ldr	r3, [pc, #124]	; (800b1ec <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800b16e:	400b      	ands	r3, r1
 800b170:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	2220      	movs	r2, #32
 800b176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2200      	movs	r2, #0
 800b17e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2200      	movs	r2, #0
 800b186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b18a:	2301      	movs	r3, #1
 800b18c:	e029      	b.n	800b1e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b18e:	f7fc fb55 	bl	800783c <HAL_GetTick>
 800b192:	4602      	mov	r2, r0
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	1ad3      	subs	r3, r2, r3
 800b198:	68ba      	ldr	r2, [r7, #8]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d302      	bcc.n	800b1a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d116      	bne.n	800b1d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	699b      	ldr	r3, [r3, #24]
 800b1aa:	f003 0304 	and.w	r3, r3, #4
 800b1ae:	2b04      	cmp	r3, #4
 800b1b0:	d00f      	beq.n	800b1d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1b6:	f043 0220 	orr.w	r2, r3, #32
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2220      	movs	r2, #32
 800b1c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	e007      	b.n	800b1e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	699b      	ldr	r3, [r3, #24]
 800b1d8:	f003 0304 	and.w	r3, r3, #4
 800b1dc:	2b04      	cmp	r3, #4
 800b1de:	d18c      	bne.n	800b0fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b1e0:	2300      	movs	r3, #0
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	fe00e800 	.word	0xfe00e800

0800b1f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b08a      	sub	sp, #40	; 0x28
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	60f8      	str	r0, [r7, #12]
 800b1f8:	60b9      	str	r1, [r7, #8]
 800b1fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	699b      	ldr	r3, [r3, #24]
 800b208:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b20a:	2300      	movs	r3, #0
 800b20c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b212:	69bb      	ldr	r3, [r7, #24]
 800b214:	f003 0310 	and.w	r3, r3, #16
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d068      	beq.n	800b2ee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	2210      	movs	r2, #16
 800b222:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b224:	e049      	b.n	800b2ba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b22c:	d045      	beq.n	800b2ba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b22e:	f7fc fb05 	bl	800783c <HAL_GetTick>
 800b232:	4602      	mov	r2, r0
 800b234:	69fb      	ldr	r3, [r7, #28]
 800b236:	1ad3      	subs	r3, r2, r3
 800b238:	68ba      	ldr	r2, [r7, #8]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d302      	bcc.n	800b244 <I2C_IsErrorOccurred+0x54>
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d13a      	bne.n	800b2ba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	685b      	ldr	r3, [r3, #4]
 800b24a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b24e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b256:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	699b      	ldr	r3, [r3, #24]
 800b25e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b262:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b266:	d121      	bne.n	800b2ac <I2C_IsErrorOccurred+0xbc>
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b26e:	d01d      	beq.n	800b2ac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800b270:	7cfb      	ldrb	r3, [r7, #19]
 800b272:	2b20      	cmp	r3, #32
 800b274:	d01a      	beq.n	800b2ac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	685a      	ldr	r2, [r3, #4]
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b284:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b286:	f7fc fad9 	bl	800783c <HAL_GetTick>
 800b28a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b28c:	e00e      	b.n	800b2ac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b28e:	f7fc fad5 	bl	800783c <HAL_GetTick>
 800b292:	4602      	mov	r2, r0
 800b294:	69fb      	ldr	r3, [r7, #28]
 800b296:	1ad3      	subs	r3, r2, r3
 800b298:	2b19      	cmp	r3, #25
 800b29a:	d907      	bls.n	800b2ac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b29c:	6a3b      	ldr	r3, [r7, #32]
 800b29e:	f043 0320 	orr.w	r3, r3, #32
 800b2a2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800b2aa:	e006      	b.n	800b2ba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	699b      	ldr	r3, [r3, #24]
 800b2b2:	f003 0320 	and.w	r3, r3, #32
 800b2b6:	2b20      	cmp	r3, #32
 800b2b8:	d1e9      	bne.n	800b28e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	699b      	ldr	r3, [r3, #24]
 800b2c0:	f003 0320 	and.w	r3, r3, #32
 800b2c4:	2b20      	cmp	r3, #32
 800b2c6:	d003      	beq.n	800b2d0 <I2C_IsErrorOccurred+0xe0>
 800b2c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d0aa      	beq.n	800b226 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b2d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d103      	bne.n	800b2e0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	2220      	movs	r2, #32
 800b2de:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b2e0:	6a3b      	ldr	r3, [r7, #32]
 800b2e2:	f043 0304 	orr.w	r3, r3, #4
 800b2e6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	699b      	ldr	r3, [r3, #24]
 800b2f4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d00b      	beq.n	800b318 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b300:	6a3b      	ldr	r3, [r7, #32]
 800b302:	f043 0301 	orr.w	r3, r3, #1
 800b306:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b310:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b312:	2301      	movs	r3, #1
 800b314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b318:	69bb      	ldr	r3, [r7, #24]
 800b31a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d00b      	beq.n	800b33a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b322:	6a3b      	ldr	r3, [r7, #32]
 800b324:	f043 0308 	orr.w	r3, r3, #8
 800b328:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b332:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b334:	2301      	movs	r3, #1
 800b336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b33a:	69bb      	ldr	r3, [r7, #24]
 800b33c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b340:	2b00      	cmp	r3, #0
 800b342:	d00b      	beq.n	800b35c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b344:	6a3b      	ldr	r3, [r7, #32]
 800b346:	f043 0302 	orr.w	r3, r3, #2
 800b34a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b354:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b356:	2301      	movs	r3, #1
 800b358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800b35c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b360:	2b00      	cmp	r3, #0
 800b362:	d01c      	beq.n	800b39e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b364:	68f8      	ldr	r0, [r7, #12]
 800b366:	f7ff fdc3 	bl	800aef0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	6859      	ldr	r1, [r3, #4]
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	4b0d      	ldr	r3, [pc, #52]	; (800b3ac <I2C_IsErrorOccurred+0x1bc>)
 800b376:	400b      	ands	r3, r1
 800b378:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b37e:	6a3b      	ldr	r3, [r7, #32]
 800b380:	431a      	orrs	r2, r3
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2220      	movs	r2, #32
 800b38a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2200      	movs	r2, #0
 800b392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2200      	movs	r2, #0
 800b39a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800b39e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3728      	adds	r7, #40	; 0x28
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}
 800b3aa:	bf00      	nop
 800b3ac:	fe00e800 	.word	0xfe00e800

0800b3b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b087      	sub	sp, #28
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	60f8      	str	r0, [r7, #12]
 800b3b8:	607b      	str	r3, [r7, #4]
 800b3ba:	460b      	mov	r3, r1
 800b3bc:	817b      	strh	r3, [r7, #10]
 800b3be:	4613      	mov	r3, r2
 800b3c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b3c2:	897b      	ldrh	r3, [r7, #10]
 800b3c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b3c8:	7a7b      	ldrb	r3, [r7, #9]
 800b3ca:	041b      	lsls	r3, r3, #16
 800b3cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b3d0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b3d6:	6a3b      	ldr	r3, [r7, #32]
 800b3d8:	4313      	orrs	r3, r2
 800b3da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b3de:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	685a      	ldr	r2, [r3, #4]
 800b3e6:	6a3b      	ldr	r3, [r7, #32]
 800b3e8:	0d5b      	lsrs	r3, r3, #21
 800b3ea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b3ee:	4b08      	ldr	r3, [pc, #32]	; (800b410 <I2C_TransferConfig+0x60>)
 800b3f0:	430b      	orrs	r3, r1
 800b3f2:	43db      	mvns	r3, r3
 800b3f4:	ea02 0103 	and.w	r1, r2, r3
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	697a      	ldr	r2, [r7, #20]
 800b3fe:	430a      	orrs	r2, r1
 800b400:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b402:	bf00      	nop
 800b404:	371c      	adds	r7, #28
 800b406:	46bd      	mov	sp, r7
 800b408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40c:	4770      	bx	lr
 800b40e:	bf00      	nop
 800b410:	03ff63ff 	.word	0x03ff63ff

0800b414 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b414:	b480      	push	{r7}
 800b416:	b083      	sub	sp, #12
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b424:	b2db      	uxtb	r3, r3
 800b426:	2b20      	cmp	r3, #32
 800b428:	d138      	bne.n	800b49c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b430:	2b01      	cmp	r3, #1
 800b432:	d101      	bne.n	800b438 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b434:	2302      	movs	r3, #2
 800b436:	e032      	b.n	800b49e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2201      	movs	r2, #1
 800b43c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2224      	movs	r2, #36	; 0x24
 800b444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f022 0201 	bic.w	r2, r2, #1
 800b456:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	681a      	ldr	r2, [r3, #0]
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b466:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	6819      	ldr	r1, [r3, #0]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	683a      	ldr	r2, [r7, #0]
 800b474:	430a      	orrs	r2, r1
 800b476:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f042 0201 	orr.w	r2, r2, #1
 800b486:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2220      	movs	r2, #32
 800b48c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2200      	movs	r2, #0
 800b494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b498:	2300      	movs	r3, #0
 800b49a:	e000      	b.n	800b49e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b49c:	2302      	movs	r3, #2
  }
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	370c      	adds	r7, #12
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr

0800b4aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b4aa:	b480      	push	{r7}
 800b4ac:	b085      	sub	sp, #20
 800b4ae:	af00      	add	r7, sp, #0
 800b4b0:	6078      	str	r0, [r7, #4]
 800b4b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	2b20      	cmp	r3, #32
 800b4be:	d139      	bne.n	800b534 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d101      	bne.n	800b4ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b4ca:	2302      	movs	r3, #2
 800b4cc:	e033      	b.n	800b536 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2224      	movs	r2, #36	; 0x24
 800b4da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f022 0201 	bic.w	r2, r2, #1
 800b4ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b4fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	021b      	lsls	r3, r3, #8
 800b502:	68fa      	ldr	r2, [r7, #12]
 800b504:	4313      	orrs	r3, r2
 800b506:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	68fa      	ldr	r2, [r7, #12]
 800b50e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	681a      	ldr	r2, [r3, #0]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f042 0201 	orr.w	r2, r2, #1
 800b51e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2220      	movs	r2, #32
 800b524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2200      	movs	r2, #0
 800b52c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b530:	2300      	movs	r3, #0
 800b532:	e000      	b.n	800b536 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b534:	2302      	movs	r3, #2
  }
}
 800b536:	4618      	mov	r0, r3
 800b538:	3714      	adds	r7, #20
 800b53a:	46bd      	mov	sp, r7
 800b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b540:	4770      	bx	lr
	...

0800b544 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800b544:	b480      	push	{r7}
 800b546:	b085      	sub	sp, #20
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b54c:	2300      	movs	r3, #0
 800b54e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800b550:	4b0b      	ldr	r3, [pc, #44]	; (800b580 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f003 0301 	and.w	r3, r3, #1
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d002      	beq.n	800b562 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800b55c:	2301      	movs	r3, #1
 800b55e:	73fb      	strb	r3, [r7, #15]
 800b560:	e007      	b.n	800b572 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800b562:	4b07      	ldr	r3, [pc, #28]	; (800b580 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f023 0204 	bic.w	r2, r3, #4
 800b56a:	4905      	ldr	r1, [pc, #20]	; (800b580 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	4313      	orrs	r3, r2
 800b570:	600b      	str	r3, [r1, #0]
  }

  return status;
 800b572:	7bfb      	ldrb	r3, [r7, #15]
}
 800b574:	4618      	mov	r0, r3
 800b576:	3714      	adds	r7, #20
 800b578:	46bd      	mov	sp, r7
 800b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57e:	4770      	bx	lr
 800b580:	40030400 	.word	0x40030400

0800b584 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800b584:	b480      	push	{r7}
 800b586:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800b588:	4b05      	ldr	r3, [pc, #20]	; (800b5a0 <HAL_ICACHE_Enable+0x1c>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4a04      	ldr	r2, [pc, #16]	; (800b5a0 <HAL_ICACHE_Enable+0x1c>)
 800b58e:	f043 0301 	orr.w	r3, r3, #1
 800b592:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b594:	2300      	movs	r3, #0
}
 800b596:	4618      	mov	r0, r3
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr
 800b5a0:	40030400 	.word	0x40030400

0800b5a4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d101      	bne.n	800b5b6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	e0bf      	b.n	800b736 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800b5bc:	b2db      	uxtb	r3, r3
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d106      	bne.n	800b5d0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f7f6 faba 	bl	8001b44 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2202      	movs	r2, #2
 800b5d4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	699a      	ldr	r2, [r3, #24]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800b5e6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	6999      	ldr	r1, [r3, #24]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	685a      	ldr	r2, [r3, #4]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	689b      	ldr	r3, [r3, #8]
 800b5f6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b5fc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	691b      	ldr	r3, [r3, #16]
 800b602:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	430a      	orrs	r2, r1
 800b60a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	6899      	ldr	r1, [r3, #8]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681a      	ldr	r2, [r3, #0]
 800b616:	4b4a      	ldr	r3, [pc, #296]	; (800b740 <HAL_LTDC_Init+0x19c>)
 800b618:	400b      	ands	r3, r1
 800b61a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	695b      	ldr	r3, [r3, #20]
 800b620:	041b      	lsls	r3, r3, #16
 800b622:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	6899      	ldr	r1, [r3, #8]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	699a      	ldr	r2, [r3, #24]
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	431a      	orrs	r2, r3
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	430a      	orrs	r2, r1
 800b638:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	68d9      	ldr	r1, [r3, #12]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681a      	ldr	r2, [r3, #0]
 800b644:	4b3e      	ldr	r3, [pc, #248]	; (800b740 <HAL_LTDC_Init+0x19c>)
 800b646:	400b      	ands	r3, r1
 800b648:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	69db      	ldr	r3, [r3, #28]
 800b64e:	041b      	lsls	r3, r3, #16
 800b650:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	68d9      	ldr	r1, [r3, #12]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6a1a      	ldr	r2, [r3, #32]
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	431a      	orrs	r2, r3
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	430a      	orrs	r2, r1
 800b666:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	6919      	ldr	r1, [r3, #16]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681a      	ldr	r2, [r3, #0]
 800b672:	4b33      	ldr	r3, [pc, #204]	; (800b740 <HAL_LTDC_Init+0x19c>)
 800b674:	400b      	ands	r3, r1
 800b676:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b67c:	041b      	lsls	r3, r3, #16
 800b67e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	6919      	ldr	r1, [r3, #16]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	431a      	orrs	r2, r3
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	430a      	orrs	r2, r1
 800b694:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	6959      	ldr	r1, [r3, #20]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681a      	ldr	r2, [r3, #0]
 800b6a0:	4b27      	ldr	r3, [pc, #156]	; (800b740 <HAL_LTDC_Init+0x19c>)
 800b6a2:	400b      	ands	r3, r1
 800b6a4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6aa:	041b      	lsls	r3, r3, #16
 800b6ac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	6959      	ldr	r1, [r3, #20]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	431a      	orrs	r2, r3
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	430a      	orrs	r2, r1
 800b6c2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b6ca:	021b      	lsls	r3, r3, #8
 800b6cc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b6d4:	041b      	lsls	r3, r3, #16
 800b6d6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800b6e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b6ee:	68ba      	ldr	r2, [r7, #8]
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	687a      	ldr	r2, [r7, #4]
 800b6f6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800b6fa:	431a      	orrs	r2, r3
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	430a      	orrs	r2, r1
 800b702:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f042 0206 	orr.w	r2, r2, #6
 800b712:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	699a      	ldr	r2, [r3, #24]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f042 0201 	orr.w	r2, r2, #1
 800b722:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2200      	movs	r2, #0
 800b728:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2201      	movs	r2, #1
 800b730:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800b734:	2300      	movs	r3, #0
}
 800b736:	4618      	mov	r0, r3
 800b738:	3710      	adds	r7, #16
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}
 800b73e:	bf00      	nop
 800b740:	f000f800 	.word	0xf000f800

0800b744 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b752:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b75a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	f003 0304 	and.w	r3, r3, #4
 800b762:	2b00      	cmp	r3, #0
 800b764:	d023      	beq.n	800b7ae <HAL_LTDC_IRQHandler+0x6a>
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	f003 0304 	and.w	r3, r3, #4
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d01e      	beq.n	800b7ae <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f022 0204 	bic.w	r2, r2, #4
 800b77e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	2204      	movs	r2, #4
 800b786:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b78e:	f043 0201 	orr.w	r2, r3, #1
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2204      	movs	r2, #4
 800b79c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 f86f 	bl	800b88c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	f003 0302 	and.w	r3, r3, #2
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d023      	beq.n	800b800 <HAL_LTDC_IRQHandler+0xbc>
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	f003 0302 	and.w	r3, r3, #2
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d01e      	beq.n	800b800 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f022 0202 	bic.w	r2, r2, #2
 800b7d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	2202      	movs	r2, #2
 800b7d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b7e0:	f043 0202 	orr.w	r2, r3, #2
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2204      	movs	r2, #4
 800b7ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f000 f846 	bl	800b88c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	f003 0301 	and.w	r3, r3, #1
 800b806:	2b00      	cmp	r3, #0
 800b808:	d01b      	beq.n	800b842 <HAL_LTDC_IRQHandler+0xfe>
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	f003 0301 	and.w	r3, r3, #1
 800b810:	2b00      	cmp	r3, #0
 800b812:	d016      	beq.n	800b842 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f022 0201 	bic.w	r2, r2, #1
 800b822:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	2201      	movs	r2, #1
 800b82a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2201      	movs	r2, #1
 800b830:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2200      	movs	r2, #0
 800b838:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f7f7 fb97 	bl	8002f70 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f003 0308 	and.w	r3, r3, #8
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d01b      	beq.n	800b884 <HAL_LTDC_IRQHandler+0x140>
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	f003 0308 	and.w	r3, r3, #8
 800b852:	2b00      	cmp	r3, #0
 800b854:	d016      	beq.n	800b884 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f022 0208 	bic.w	r2, r2, #8
 800b864:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	2208      	movs	r2, #8
 800b86c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2201      	movs	r2, #1
 800b872:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2200      	movs	r2, #0
 800b87a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 f80e 	bl	800b8a0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800b884:	bf00      	nop
 800b886:	3710      	adds	r7, #16
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b083      	sub	sp, #12
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800b894:	bf00      	nop
 800b896:	370c      	adds	r7, #12
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr

0800b8a0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b083      	sub	sp, #12
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800b8a8:	bf00      	nop
 800b8aa:	370c      	adds	r7, #12
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr

0800b8b4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800b8b4:	b5b0      	push	{r4, r5, r7, lr}
 800b8b6:	b084      	sub	sp, #16
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	60f8      	str	r0, [r7, #12]
 800b8bc:	60b9      	str	r1, [r7, #8]
 800b8be:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800b8c6:	2b01      	cmp	r3, #1
 800b8c8:	d101      	bne.n	800b8ce <HAL_LTDC_ConfigLayer+0x1a>
 800b8ca:	2302      	movs	r3, #2
 800b8cc:	e02c      	b.n	800b928 <HAL_LTDC_ConfigLayer+0x74>
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	2202      	movs	r2, #2
 800b8da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b8de:	68fa      	ldr	r2, [r7, #12]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2134      	movs	r1, #52	; 0x34
 800b8e4:	fb01 f303 	mul.w	r3, r1, r3
 800b8e8:	4413      	add	r3, r2
 800b8ea:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	4614      	mov	r4, r2
 800b8f2:	461d      	mov	r5, r3
 800b8f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b8f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b8f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b8fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b8fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b8fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b900:	682b      	ldr	r3, [r5, #0]
 800b902:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800b904:	687a      	ldr	r2, [r7, #4]
 800b906:	68b9      	ldr	r1, [r7, #8]
 800b908:	68f8      	ldr	r0, [r7, #12]
 800b90a:	f000 f87f 	bl	800ba0c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	2201      	movs	r2, #1
 800b914:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2201      	movs	r2, #1
 800b91a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2200      	movs	r2, #0
 800b922:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800b926:	2300      	movs	r3, #0
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3710      	adds	r7, #16
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bdb0      	pop	{r4, r5, r7, pc}

0800b930 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b086      	sub	sp, #24
 800b934:	af00      	add	r7, sp, #0
 800b936:	60f8      	str	r0, [r7, #12]
 800b938:	60b9      	str	r1, [r7, #8]
 800b93a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800b942:	2b01      	cmp	r3, #1
 800b944:	d101      	bne.n	800b94a <HAL_LTDC_SetAddress+0x1a>
 800b946:	2302      	movs	r3, #2
 800b948:	e024      	b.n	800b994 <HAL_LTDC_SetAddress+0x64>
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2201      	movs	r2, #1
 800b94e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2202      	movs	r2, #2
 800b956:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2234      	movs	r2, #52	; 0x34
 800b95e:	fb02 f303 	mul.w	r3, r2, r3
 800b962:	3338      	adds	r3, #56	; 0x38
 800b964:	68fa      	ldr	r2, [r7, #12]
 800b966:	4413      	add	r3, r2
 800b968:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	68ba      	ldr	r2, [r7, #8]
 800b96e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800b970:	687a      	ldr	r2, [r7, #4]
 800b972:	6979      	ldr	r1, [r7, #20]
 800b974:	68f8      	ldr	r0, [r7, #12]
 800b976:	f000 f849 	bl	800ba0c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	2201      	movs	r2, #1
 800b980:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2201      	movs	r2, #1
 800b986:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2200      	movs	r2, #0
 800b98e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800b992:	2300      	movs	r3, #0
}
 800b994:	4618      	mov	r0, r3
 800b996:	3718      	adds	r7, #24
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b083      	sub	sp, #12
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
 800b9a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d101      	bne.n	800b9b4 <HAL_LTDC_ProgramLineEvent+0x18>
 800b9b0:	2302      	movs	r3, #2
 800b9b2:	e023      	b.n	800b9fc <HAL_LTDC_ProgramLineEvent+0x60>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2202      	movs	r2, #2
 800b9c0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f022 0201 	bic.w	r2, r2, #1
 800b9d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800b9d4:	4a0c      	ldr	r2, [pc, #48]	; (800ba08 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f042 0201 	orr.w	r2, r2, #1
 800b9e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800b9fa:	2300      	movs	r3, #0
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	370c      	adds	r7, #12
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr
 800ba08:	40016800 	.word	0x40016800

0800ba0c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b089      	sub	sp, #36	; 0x24
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	60f8      	str	r0, [r7, #12]
 800ba14:	60b9      	str	r1, [r7, #8]
 800ba16:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	685a      	ldr	r2, [r3, #4]
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	0c1b      	lsrs	r3, r3, #16
 800ba24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ba28:	4413      	add	r3, r2
 800ba2a:	041b      	lsls	r3, r3, #16
 800ba2c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	461a      	mov	r2, r3
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	01db      	lsls	r3, r3, #7
 800ba38:	4413      	add	r3, r2
 800ba3a:	3384      	adds	r3, #132	; 0x84
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	68fa      	ldr	r2, [r7, #12]
 800ba40:	6812      	ldr	r2, [r2, #0]
 800ba42:	4611      	mov	r1, r2
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	01d2      	lsls	r2, r2, #7
 800ba48:	440a      	add	r2, r1
 800ba4a:	3284      	adds	r2, #132	; 0x84
 800ba4c:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800ba50:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	68db      	ldr	r3, [r3, #12]
 800ba5c:	0c1b      	lsrs	r3, r3, #16
 800ba5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ba62:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ba64:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	01db      	lsls	r3, r3, #7
 800ba70:	440b      	add	r3, r1
 800ba72:	3384      	adds	r3, #132	; 0x84
 800ba74:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ba76:	69fb      	ldr	r3, [r7, #28]
 800ba78:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ba7a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	68da      	ldr	r2, [r3, #12]
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	68db      	ldr	r3, [r3, #12]
 800ba86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ba8a:	4413      	add	r3, r2
 800ba8c:	041b      	lsls	r3, r3, #16
 800ba8e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	461a      	mov	r2, r3
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	01db      	lsls	r3, r3, #7
 800ba9a:	4413      	add	r3, r2
 800ba9c:	3384      	adds	r3, #132	; 0x84
 800ba9e:	689b      	ldr	r3, [r3, #8]
 800baa0:	68fa      	ldr	r2, [r7, #12]
 800baa2:	6812      	ldr	r2, [r2, #0]
 800baa4:	4611      	mov	r1, r2
 800baa6:	687a      	ldr	r2, [r7, #4]
 800baa8:	01d2      	lsls	r2, r2, #7
 800baaa:	440a      	add	r2, r1
 800baac:	3284      	adds	r2, #132	; 0x84
 800baae:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800bab2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	689a      	ldr	r2, [r3, #8]
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	68db      	ldr	r3, [r3, #12]
 800babe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bac2:	4413      	add	r3, r2
 800bac4:	1c5a      	adds	r2, r3, #1
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4619      	mov	r1, r3
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	01db      	lsls	r3, r3, #7
 800bad0:	440b      	add	r3, r1
 800bad2:	3384      	adds	r3, #132	; 0x84
 800bad4:	4619      	mov	r1, r3
 800bad6:	69fb      	ldr	r3, [r7, #28]
 800bad8:	4313      	orrs	r3, r2
 800bada:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	461a      	mov	r2, r3
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	01db      	lsls	r3, r3, #7
 800bae6:	4413      	add	r3, r2
 800bae8:	3384      	adds	r3, #132	; 0x84
 800baea:	691b      	ldr	r3, [r3, #16]
 800baec:	68fa      	ldr	r2, [r7, #12]
 800baee:	6812      	ldr	r2, [r2, #0]
 800baf0:	4611      	mov	r1, r2
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	01d2      	lsls	r2, r2, #7
 800baf6:	440a      	add	r2, r1
 800baf8:	3284      	adds	r2, #132	; 0x84
 800bafa:	f023 0307 	bic.w	r3, r3, #7
 800bafe:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	461a      	mov	r2, r3
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	01db      	lsls	r3, r3, #7
 800bb0a:	4413      	add	r3, r2
 800bb0c:	3384      	adds	r3, #132	; 0x84
 800bb0e:	461a      	mov	r2, r3
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	691b      	ldr	r3, [r3, #16]
 800bb14:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bb1c:	021b      	lsls	r3, r3, #8
 800bb1e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800bb26:	041b      	lsls	r3, r3, #16
 800bb28:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	699b      	ldr	r3, [r3, #24]
 800bb2e:	061b      	lsls	r3, r3, #24
 800bb30:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	461a      	mov	r2, r3
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	01db      	lsls	r3, r3, #7
 800bb3c:	4413      	add	r3, r2
 800bb3e:	3384      	adds	r3, #132	; 0x84
 800bb40:	699b      	ldr	r3, [r3, #24]
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	461a      	mov	r2, r3
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	01db      	lsls	r3, r3, #7
 800bb4c:	4413      	add	r3, r2
 800bb4e:	3384      	adds	r3, #132	; 0x84
 800bb50:	461a      	mov	r2, r3
 800bb52:	2300      	movs	r3, #0
 800bb54:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	69fb      	ldr	r3, [r7, #28]
 800bb60:	431a      	orrs	r2, r3
 800bb62:	69bb      	ldr	r3, [r7, #24]
 800bb64:	431a      	orrs	r2, r3
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	01db      	lsls	r3, r3, #7
 800bb70:	440b      	add	r3, r1
 800bb72:	3384      	adds	r3, #132	; 0x84
 800bb74:	4619      	mov	r1, r3
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	461a      	mov	r2, r3
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	01db      	lsls	r3, r3, #7
 800bb86:	4413      	add	r3, r2
 800bb88:	3384      	adds	r3, #132	; 0x84
 800bb8a:	695b      	ldr	r3, [r3, #20]
 800bb8c:	68fa      	ldr	r2, [r7, #12]
 800bb8e:	6812      	ldr	r2, [r2, #0]
 800bb90:	4611      	mov	r1, r2
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	01d2      	lsls	r2, r2, #7
 800bb96:	440a      	add	r2, r1
 800bb98:	3284      	adds	r2, #132	; 0x84
 800bb9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bb9e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	461a      	mov	r2, r3
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	01db      	lsls	r3, r3, #7
 800bbaa:	4413      	add	r3, r2
 800bbac:	3384      	adds	r3, #132	; 0x84
 800bbae:	461a      	mov	r2, r3
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	695b      	ldr	r3, [r3, #20]
 800bbb4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	461a      	mov	r2, r3
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	01db      	lsls	r3, r3, #7
 800bbc0:	4413      	add	r3, r2
 800bbc2:	3384      	adds	r3, #132	; 0x84
 800bbc4:	69db      	ldr	r3, [r3, #28]
 800bbc6:	68fa      	ldr	r2, [r7, #12]
 800bbc8:	6812      	ldr	r2, [r2, #0]
 800bbca:	4611      	mov	r1, r2
 800bbcc:	687a      	ldr	r2, [r7, #4]
 800bbce:	01d2      	lsls	r2, r2, #7
 800bbd0:	440a      	add	r2, r1
 800bbd2:	3284      	adds	r2, #132	; 0x84
 800bbd4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800bbd8:	f023 0307 	bic.w	r3, r3, #7
 800bbdc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	69da      	ldr	r2, [r3, #28]
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	6a1b      	ldr	r3, [r3, #32]
 800bbe6:	68f9      	ldr	r1, [r7, #12]
 800bbe8:	6809      	ldr	r1, [r1, #0]
 800bbea:	4608      	mov	r0, r1
 800bbec:	6879      	ldr	r1, [r7, #4]
 800bbee:	01c9      	lsls	r1, r1, #7
 800bbf0:	4401      	add	r1, r0
 800bbf2:	3184      	adds	r1, #132	; 0x84
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	01db      	lsls	r3, r3, #7
 800bc02:	4413      	add	r3, r2
 800bc04:	3384      	adds	r3, #132	; 0x84
 800bc06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	01db      	lsls	r3, r3, #7
 800bc12:	4413      	add	r3, r2
 800bc14:	3384      	adds	r3, #132	; 0x84
 800bc16:	461a      	mov	r2, r3
 800bc18:	2300      	movs	r3, #0
 800bc1a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	461a      	mov	r2, r3
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	01db      	lsls	r3, r3, #7
 800bc26:	4413      	add	r3, r2
 800bc28:	3384      	adds	r3, #132	; 0x84
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc30:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	691b      	ldr	r3, [r3, #16]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d102      	bne.n	800bc40 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800bc3a:	2304      	movs	r3, #4
 800bc3c:	61fb      	str	r3, [r7, #28]
 800bc3e:	e01b      	b.n	800bc78 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	691b      	ldr	r3, [r3, #16]
 800bc44:	2b01      	cmp	r3, #1
 800bc46:	d102      	bne.n	800bc4e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800bc48:	2303      	movs	r3, #3
 800bc4a:	61fb      	str	r3, [r7, #28]
 800bc4c:	e014      	b.n	800bc78 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	691b      	ldr	r3, [r3, #16]
 800bc52:	2b04      	cmp	r3, #4
 800bc54:	d00b      	beq.n	800bc6e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800bc5a:	2b02      	cmp	r3, #2
 800bc5c:	d007      	beq.n	800bc6e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800bc62:	2b03      	cmp	r3, #3
 800bc64:	d003      	beq.n	800bc6e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800bc6a:	2b07      	cmp	r3, #7
 800bc6c:	d102      	bne.n	800bc74 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800bc6e:	2302      	movs	r3, #2
 800bc70:	61fb      	str	r3, [r7, #28]
 800bc72:	e001      	b.n	800bc78 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800bc74:	2301      	movs	r3, #1
 800bc76:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	01db      	lsls	r3, r3, #7
 800bc82:	4413      	add	r3, r2
 800bc84:	3384      	adds	r3, #132	; 0x84
 800bc86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc88:	68fa      	ldr	r2, [r7, #12]
 800bc8a:	6812      	ldr	r2, [r2, #0]
 800bc8c:	4611      	mov	r1, r2
 800bc8e:	687a      	ldr	r2, [r7, #4]
 800bc90:	01d2      	lsls	r2, r2, #7
 800bc92:	440a      	add	r2, r1
 800bc94:	3284      	adds	r2, #132	; 0x84
 800bc96:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800bc9a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bca0:	69fa      	ldr	r2, [r7, #28]
 800bca2:	fb02 f303 	mul.w	r3, r2, r3
 800bca6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	6859      	ldr	r1, [r3, #4]
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	1acb      	subs	r3, r1, r3
 800bcb2:	69f9      	ldr	r1, [r7, #28]
 800bcb4:	fb01 f303 	mul.w	r3, r1, r3
 800bcb8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800bcba:	68f9      	ldr	r1, [r7, #12]
 800bcbc:	6809      	ldr	r1, [r1, #0]
 800bcbe:	4608      	mov	r0, r1
 800bcc0:	6879      	ldr	r1, [r7, #4]
 800bcc2:	01c9      	lsls	r1, r1, #7
 800bcc4:	4401      	add	r1, r0
 800bcc6:	3184      	adds	r1, #132	; 0x84
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	461a      	mov	r2, r3
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	01db      	lsls	r3, r3, #7
 800bcd6:	4413      	add	r3, r2
 800bcd8:	3384      	adds	r3, #132	; 0x84
 800bcda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcdc:	68fa      	ldr	r2, [r7, #12]
 800bcde:	6812      	ldr	r2, [r2, #0]
 800bce0:	4611      	mov	r1, r2
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	01d2      	lsls	r2, r2, #7
 800bce6:	440a      	add	r2, r1
 800bce8:	3284      	adds	r2, #132	; 0x84
 800bcea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bcee:	f023 0307 	bic.w	r3, r3, #7
 800bcf2:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	461a      	mov	r2, r3
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	01db      	lsls	r3, r3, #7
 800bcfe:	4413      	add	r3, r2
 800bd00:	3384      	adds	r3, #132	; 0x84
 800bd02:	461a      	mov	r2, r3
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd08:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	461a      	mov	r2, r3
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	01db      	lsls	r3, r3, #7
 800bd14:	4413      	add	r3, r2
 800bd16:	3384      	adds	r3, #132	; 0x84
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	68fa      	ldr	r2, [r7, #12]
 800bd1c:	6812      	ldr	r2, [r2, #0]
 800bd1e:	4611      	mov	r1, r2
 800bd20:	687a      	ldr	r2, [r7, #4]
 800bd22:	01d2      	lsls	r2, r2, #7
 800bd24:	440a      	add	r2, r1
 800bd26:	3284      	adds	r2, #132	; 0x84
 800bd28:	f043 0301 	orr.w	r3, r3, #1
 800bd2c:	6013      	str	r3, [r2, #0]
}
 800bd2e:	bf00      	nop
 800bd30:	3724      	adds	r7, #36	; 0x24
 800bd32:	46bd      	mov	sp, r7
 800bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd38:	4770      	bx	lr
	...

0800bd3c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b085      	sub	sp, #20
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800bd44:	4b39      	ldr	r3, [pc, #228]	; (800be2c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bd46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bd4c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800bd4e:	68ba      	ldr	r2, [r7, #8]
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d10b      	bne.n	800bd6e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd5c:	d905      	bls.n	800bd6a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800bd5e:	4b33      	ldr	r3, [pc, #204]	; (800be2c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bd60:	68db      	ldr	r3, [r3, #12]
 800bd62:	4a32      	ldr	r2, [pc, #200]	; (800be2c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bd64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bd68:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	e057      	b.n	800be1e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd74:	d90a      	bls.n	800bd8c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800bd76:	4b2d      	ldr	r3, [pc, #180]	; (800be2c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bd78:	68db      	ldr	r3, [r3, #12]
 800bd7a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	4313      	orrs	r3, r2
 800bd82:	4a2a      	ldr	r2, [pc, #168]	; (800be2c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bd84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bd88:	60d3      	str	r3, [r2, #12]
 800bd8a:	e007      	b.n	800bd9c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800bd8c:	4b27      	ldr	r3, [pc, #156]	; (800be2c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bd8e:	68db      	ldr	r3, [r3, #12]
 800bd90:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800bd94:	4925      	ldr	r1, [pc, #148]	; (800be2c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	4313      	orrs	r3, r2
 800bd9a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800bd9c:	4b24      	ldr	r3, [pc, #144]	; (800be30 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	4a24      	ldr	r2, [pc, #144]	; (800be34 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800bda2:	fba2 2303 	umull	r2, r3, r2, r3
 800bda6:	099b      	lsrs	r3, r3, #6
 800bda8:	2232      	movs	r2, #50	; 0x32
 800bdaa:	fb02 f303 	mul.w	r3, r2, r3
 800bdae:	4a21      	ldr	r2, [pc, #132]	; (800be34 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800bdb0:	fba2 2303 	umull	r2, r3, r2, r3
 800bdb4:	099b      	lsrs	r3, r3, #6
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800bdba:	e002      	b.n	800bdc2 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	3b01      	subs	r3, #1
 800bdc0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800bdc2:	4b1a      	ldr	r3, [pc, #104]	; (800be2c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bdc4:	68db      	ldr	r3, [r3, #12]
 800bdc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d102      	bne.n	800bdd4 <HAL_PWREx_ControlVoltageScaling+0x98>
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d1f3      	bne.n	800bdbc <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d01b      	beq.n	800be12 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800bdda:	4b15      	ldr	r3, [pc, #84]	; (800be30 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	4a15      	ldr	r2, [pc, #84]	; (800be34 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800bde0:	fba2 2303 	umull	r2, r3, r2, r3
 800bde4:	099b      	lsrs	r3, r3, #6
 800bde6:	2232      	movs	r2, #50	; 0x32
 800bde8:	fb02 f303 	mul.w	r3, r2, r3
 800bdec:	4a11      	ldr	r2, [pc, #68]	; (800be34 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800bdee:	fba2 2303 	umull	r2, r3, r2, r3
 800bdf2:	099b      	lsrs	r3, r3, #6
 800bdf4:	3301      	adds	r3, #1
 800bdf6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800bdf8:	e002      	b.n	800be00 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	3b01      	subs	r3, #1
 800bdfe:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800be00:	4b0a      	ldr	r3, [pc, #40]	; (800be2c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800be02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d102      	bne.n	800be12 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d1f3      	bne.n	800bdfa <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d101      	bne.n	800be1c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800be18:	2303      	movs	r3, #3
 800be1a:	e000      	b.n	800be1e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800be1c:	2300      	movs	r3, #0
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3714      	adds	r7, #20
 800be22:	46bd      	mov	sp, r7
 800be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be28:	4770      	bx	lr
 800be2a:	bf00      	nop
 800be2c:	46020800 	.word	0x46020800
 800be30:	20000048 	.word	0x20000048
 800be34:	10624dd3 	.word	0x10624dd3

0800be38 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800be38:	b480      	push	{r7}
 800be3a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800be3c:	4b04      	ldr	r3, [pc, #16]	; (800be50 <HAL_PWREx_GetVoltageRange+0x18>)
 800be3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800be44:	4618      	mov	r0, r3
 800be46:	46bd      	mov	sp, r7
 800be48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4c:	4770      	bx	lr
 800be4e:	bf00      	nop
 800be50:	46020800 	.word	0x46020800

0800be54 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800be54:	b480      	push	{r7}
 800be56:	b085      	sub	sp, #20
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800be5c:	4b22      	ldr	r3, [pc, #136]	; (800bee8 <HAL_PWREx_ConfigSupply+0x94>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	4a22      	ldr	r2, [pc, #136]	; (800beec <HAL_PWREx_ConfigSupply+0x98>)
 800be62:	fba2 2303 	umull	r2, r3, r2, r3
 800be66:	099b      	lsrs	r3, r3, #6
 800be68:	2232      	movs	r2, #50	; 0x32
 800be6a:	fb02 f303 	mul.w	r3, r2, r3
 800be6e:	4a1f      	ldr	r2, [pc, #124]	; (800beec <HAL_PWREx_ConfigSupply+0x98>)
 800be70:	fba2 2303 	umull	r2, r3, r2, r3
 800be74:	099b      	lsrs	r3, r3, #6
 800be76:	3301      	adds	r3, #1
 800be78:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d113      	bne.n	800bea8 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800be80:	4b1b      	ldr	r3, [pc, #108]	; (800bef0 <HAL_PWREx_ConfigSupply+0x9c>)
 800be82:	689b      	ldr	r3, [r3, #8]
 800be84:	4a1a      	ldr	r2, [pc, #104]	; (800bef0 <HAL_PWREx_ConfigSupply+0x9c>)
 800be86:	f023 0302 	bic.w	r3, r3, #2
 800be8a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800be8c:	e002      	b.n	800be94 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	3b01      	subs	r3, #1
 800be92:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800be94:	4b16      	ldr	r3, [pc, #88]	; (800bef0 <HAL_PWREx_ConfigSupply+0x9c>)
 800be96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be98:	f003 0302 	and.w	r3, r3, #2
 800be9c:	2b02      	cmp	r3, #2
 800be9e:	d116      	bne.n	800bece <HAL_PWREx_ConfigSupply+0x7a>
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d1f3      	bne.n	800be8e <HAL_PWREx_ConfigSupply+0x3a>
 800bea6:	e012      	b.n	800bece <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800bea8:	4b11      	ldr	r3, [pc, #68]	; (800bef0 <HAL_PWREx_ConfigSupply+0x9c>)
 800beaa:	689b      	ldr	r3, [r3, #8]
 800beac:	4a10      	ldr	r2, [pc, #64]	; (800bef0 <HAL_PWREx_ConfigSupply+0x9c>)
 800beae:	f043 0302 	orr.w	r3, r3, #2
 800beb2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800beb4:	e002      	b.n	800bebc <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	3b01      	subs	r3, #1
 800beba:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800bebc:	4b0c      	ldr	r3, [pc, #48]	; (800bef0 <HAL_PWREx_ConfigSupply+0x9c>)
 800bebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bec0:	f003 0302 	and.w	r3, r3, #2
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d102      	bne.n	800bece <HAL_PWREx_ConfigSupply+0x7a>
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d1f3      	bne.n	800beb6 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d101      	bne.n	800bed8 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800bed4:	2303      	movs	r3, #3
 800bed6:	e000      	b.n	800beda <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800bed8:	2300      	movs	r3, #0
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3714      	adds	r7, #20
 800bede:	46bd      	mov	sp, r7
 800bee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee4:	4770      	bx	lr
 800bee6:	bf00      	nop
 800bee8:	20000048 	.word	0x20000048
 800beec:	10624dd3 	.word	0x10624dd3
 800bef0:	46020800 	.word	0x46020800

0800bef4 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800bef4:	b480      	push	{r7}
 800bef6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800bef8:	4b05      	ldr	r3, [pc, #20]	; (800bf10 <HAL_PWREx_EnableVddIO2+0x1c>)
 800befa:	691b      	ldr	r3, [r3, #16]
 800befc:	4a04      	ldr	r2, [pc, #16]	; (800bf10 <HAL_PWREx_EnableVddIO2+0x1c>)
 800befe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bf02:	6113      	str	r3, [r2, #16]
}
 800bf04:	bf00      	nop
 800bf06:	46bd      	mov	sp, r7
 800bf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0c:	4770      	bx	lr
 800bf0e:	bf00      	nop
 800bf10:	46020800 	.word	0x46020800

0800bf14 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800bf14:	b480      	push	{r7}
 800bf16:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 800bf18:	4b05      	ldr	r3, [pc, #20]	; (800bf30 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800bf1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf1c:	4a04      	ldr	r2, [pc, #16]	; (800bf30 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800bf1e:	f043 0301 	orr.w	r3, r3, #1
 800bf22:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800bf24:	bf00      	nop
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr
 800bf2e:	bf00      	nop
 800bf30:	46020800 	.word	0x46020800

0800bf34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b08e      	sub	sp, #56	; 0x38
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d102      	bne.n	800bf4e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800bf48:	2301      	movs	r3, #1
 800bf4a:	f000 bec8 	b.w	800ccde <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bf4e:	4b99      	ldr	r3, [pc, #612]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800bf50:	69db      	ldr	r3, [r3, #28]
 800bf52:	f003 030c 	and.w	r3, r3, #12
 800bf56:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bf58:	4b96      	ldr	r3, [pc, #600]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800bf5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf5c:	f003 0303 	and.w	r3, r3, #3
 800bf60:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f003 0310 	and.w	r3, r3, #16
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	f000 816c 	beq.w	800c248 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800bf70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d007      	beq.n	800bf86 <HAL_RCC_OscConfig+0x52>
 800bf76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf78:	2b0c      	cmp	r3, #12
 800bf7a:	f040 80de 	bne.w	800c13a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800bf7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	f040 80da 	bne.w	800c13a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	69db      	ldr	r3, [r3, #28]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d102      	bne.n	800bf94 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800bf8e:	2301      	movs	r3, #1
 800bf90:	f000 bea5 	b.w	800ccde <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf98:	4b86      	ldr	r3, [pc, #536]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800bf9a:	689b      	ldr	r3, [r3, #8]
 800bf9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d004      	beq.n	800bfae <HAL_RCC_OscConfig+0x7a>
 800bfa4:	4b83      	ldr	r3, [pc, #524]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800bfa6:	689b      	ldr	r3, [r3, #8]
 800bfa8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bfac:	e005      	b.n	800bfba <HAL_RCC_OscConfig+0x86>
 800bfae:	4b81      	ldr	r3, [pc, #516]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800bfb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bfb4:	041b      	lsls	r3, r3, #16
 800bfb6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	d255      	bcs.n	800c06a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800bfbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d10a      	bne.n	800bfda <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f001 fa17 	bl	800d3fc <RCC_SetFlashLatencyFromMSIRange>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d002      	beq.n	800bfda <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	f000 be82 	b.w	800ccde <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800bfda:	4b76      	ldr	r3, [pc, #472]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800bfdc:	689b      	ldr	r3, [r3, #8]
 800bfde:	4a75      	ldr	r2, [pc, #468]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800bfe0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bfe4:	6093      	str	r3, [r2, #8]
 800bfe6:	4b73      	ldr	r3, [pc, #460]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800bfe8:	689b      	ldr	r3, [r3, #8]
 800bfea:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bff2:	4970      	ldr	r1, [pc, #448]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800bff4:	4313      	orrs	r3, r2
 800bff6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bffc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800c000:	d309      	bcc.n	800c016 <HAL_RCC_OscConfig+0xe2>
 800c002:	4b6c      	ldr	r3, [pc, #432]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800c004:	68db      	ldr	r3, [r3, #12]
 800c006:	f023 021f 	bic.w	r2, r3, #31
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6a1b      	ldr	r3, [r3, #32]
 800c00e:	4969      	ldr	r1, [pc, #420]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800c010:	4313      	orrs	r3, r2
 800c012:	60cb      	str	r3, [r1, #12]
 800c014:	e07e      	b.n	800c114 <HAL_RCC_OscConfig+0x1e0>
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	da0a      	bge.n	800c034 <HAL_RCC_OscConfig+0x100>
 800c01e:	4b65      	ldr	r3, [pc, #404]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800c020:	68db      	ldr	r3, [r3, #12]
 800c022:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6a1b      	ldr	r3, [r3, #32]
 800c02a:	015b      	lsls	r3, r3, #5
 800c02c:	4961      	ldr	r1, [pc, #388]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800c02e:	4313      	orrs	r3, r2
 800c030:	60cb      	str	r3, [r1, #12]
 800c032:	e06f      	b.n	800c114 <HAL_RCC_OscConfig+0x1e0>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c03c:	d30a      	bcc.n	800c054 <HAL_RCC_OscConfig+0x120>
 800c03e:	4b5d      	ldr	r3, [pc, #372]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800c040:	68db      	ldr	r3, [r3, #12]
 800c042:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6a1b      	ldr	r3, [r3, #32]
 800c04a:	029b      	lsls	r3, r3, #10
 800c04c:	4959      	ldr	r1, [pc, #356]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800c04e:	4313      	orrs	r3, r2
 800c050:	60cb      	str	r3, [r1, #12]
 800c052:	e05f      	b.n	800c114 <HAL_RCC_OscConfig+0x1e0>
 800c054:	4b57      	ldr	r3, [pc, #348]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800c056:	68db      	ldr	r3, [r3, #12]
 800c058:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6a1b      	ldr	r3, [r3, #32]
 800c060:	03db      	lsls	r3, r3, #15
 800c062:	4954      	ldr	r1, [pc, #336]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800c064:	4313      	orrs	r3, r2
 800c066:	60cb      	str	r3, [r1, #12]
 800c068:	e054      	b.n	800c114 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800c06a:	4b52      	ldr	r3, [pc, #328]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800c06c:	689b      	ldr	r3, [r3, #8]
 800c06e:	4a51      	ldr	r2, [pc, #324]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800c070:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c074:	6093      	str	r3, [r2, #8]
 800c076:	4b4f      	ldr	r3, [pc, #316]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800c078:	689b      	ldr	r3, [r3, #8]
 800c07a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c082:	494c      	ldr	r1, [pc, #304]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800c084:	4313      	orrs	r3, r2
 800c086:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c08c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800c090:	d309      	bcc.n	800c0a6 <HAL_RCC_OscConfig+0x172>
 800c092:	4b48      	ldr	r3, [pc, #288]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800c094:	68db      	ldr	r3, [r3, #12]
 800c096:	f023 021f 	bic.w	r2, r3, #31
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6a1b      	ldr	r3, [r3, #32]
 800c09e:	4945      	ldr	r1, [pc, #276]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800c0a0:	4313      	orrs	r3, r2
 800c0a2:	60cb      	str	r3, [r1, #12]
 800c0a4:	e028      	b.n	800c0f8 <HAL_RCC_OscConfig+0x1c4>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	da0a      	bge.n	800c0c4 <HAL_RCC_OscConfig+0x190>
 800c0ae:	4b41      	ldr	r3, [pc, #260]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800c0b0:	68db      	ldr	r3, [r3, #12]
 800c0b2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6a1b      	ldr	r3, [r3, #32]
 800c0ba:	015b      	lsls	r3, r3, #5
 800c0bc:	493d      	ldr	r1, [pc, #244]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800c0be:	4313      	orrs	r3, r2
 800c0c0:	60cb      	str	r3, [r1, #12]
 800c0c2:	e019      	b.n	800c0f8 <HAL_RCC_OscConfig+0x1c4>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0cc:	d30a      	bcc.n	800c0e4 <HAL_RCC_OscConfig+0x1b0>
 800c0ce:	4b39      	ldr	r3, [pc, #228]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800c0d0:	68db      	ldr	r3, [r3, #12]
 800c0d2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6a1b      	ldr	r3, [r3, #32]
 800c0da:	029b      	lsls	r3, r3, #10
 800c0dc:	4935      	ldr	r1, [pc, #212]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800c0de:	4313      	orrs	r3, r2
 800c0e0:	60cb      	str	r3, [r1, #12]
 800c0e2:	e009      	b.n	800c0f8 <HAL_RCC_OscConfig+0x1c4>
 800c0e4:	4b33      	ldr	r3, [pc, #204]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800c0e6:	68db      	ldr	r3, [r3, #12]
 800c0e8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6a1b      	ldr	r3, [r3, #32]
 800c0f0:	03db      	lsls	r3, r3, #15
 800c0f2:	4930      	ldr	r1, [pc, #192]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800c0f4:	4313      	orrs	r3, r2
 800c0f6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d10a      	bne.n	800c114 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c102:	4618      	mov	r0, r3
 800c104:	f001 f97a 	bl	800d3fc <RCC_SetFlashLatencyFromMSIRange>
 800c108:	4603      	mov	r3, r0
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d002      	beq.n	800c114 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800c10e:	2301      	movs	r3, #1
 800c110:	f000 bde5 	b.w	800ccde <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800c114:	f001 f8e4 	bl	800d2e0 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800c118:	4b27      	ldr	r3, [pc, #156]	; (800c1b8 <HAL_RCC_OscConfig+0x284>)
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	4618      	mov	r0, r3
 800c11e:	f7f5 fe17 	bl	8001d50 <HAL_InitTick>
 800c122:	4603      	mov	r3, r0
 800c124:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 800c128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	f000 808a 	beq.w	800c246 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800c132:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c136:	f000 bdd2 	b.w	800ccde <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	69db      	ldr	r3, [r3, #28]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d066      	beq.n	800c210 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800c142:	4b1c      	ldr	r3, [pc, #112]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	4a1b      	ldr	r2, [pc, #108]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800c148:	f043 0301 	orr.w	r3, r3, #1
 800c14c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c14e:	f7fb fb75 	bl	800783c <HAL_GetTick>
 800c152:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800c154:	e009      	b.n	800c16a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c156:	f7fb fb71 	bl	800783c <HAL_GetTick>
 800c15a:	4602      	mov	r2, r0
 800c15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c15e:	1ad3      	subs	r3, r2, r3
 800c160:	2b02      	cmp	r3, #2
 800c162:	d902      	bls.n	800c16a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800c164:	2303      	movs	r3, #3
 800c166:	f000 bdba 	b.w	800ccde <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800c16a:	4b12      	ldr	r3, [pc, #72]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f003 0304 	and.w	r3, r3, #4
 800c172:	2b00      	cmp	r3, #0
 800c174:	d0ef      	beq.n	800c156 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800c176:	4b0f      	ldr	r3, [pc, #60]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800c178:	689b      	ldr	r3, [r3, #8]
 800c17a:	4a0e      	ldr	r2, [pc, #56]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800c17c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c180:	6093      	str	r3, [r2, #8]
 800c182:	4b0c      	ldr	r3, [pc, #48]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800c184:	689b      	ldr	r3, [r3, #8]
 800c186:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c18e:	4909      	ldr	r1, [pc, #36]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800c190:	4313      	orrs	r3, r2
 800c192:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c198:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800c19c:	d30e      	bcc.n	800c1bc <HAL_RCC_OscConfig+0x288>
 800c19e:	4b05      	ldr	r3, [pc, #20]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800c1a0:	68db      	ldr	r3, [r3, #12]
 800c1a2:	f023 021f 	bic.w	r2, r3, #31
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6a1b      	ldr	r3, [r3, #32]
 800c1aa:	4902      	ldr	r1, [pc, #8]	; (800c1b4 <HAL_RCC_OscConfig+0x280>)
 800c1ac:	4313      	orrs	r3, r2
 800c1ae:	60cb      	str	r3, [r1, #12]
 800c1b0:	e04a      	b.n	800c248 <HAL_RCC_OscConfig+0x314>
 800c1b2:	bf00      	nop
 800c1b4:	46020c00 	.word	0x46020c00
 800c1b8:	2000004c 	.word	0x2000004c
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	da0a      	bge.n	800c1da <HAL_RCC_OscConfig+0x2a6>
 800c1c4:	4b98      	ldr	r3, [pc, #608]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c1c6:	68db      	ldr	r3, [r3, #12]
 800c1c8:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6a1b      	ldr	r3, [r3, #32]
 800c1d0:	015b      	lsls	r3, r3, #5
 800c1d2:	4995      	ldr	r1, [pc, #596]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c1d4:	4313      	orrs	r3, r2
 800c1d6:	60cb      	str	r3, [r1, #12]
 800c1d8:	e036      	b.n	800c248 <HAL_RCC_OscConfig+0x314>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1e2:	d30a      	bcc.n	800c1fa <HAL_RCC_OscConfig+0x2c6>
 800c1e4:	4b90      	ldr	r3, [pc, #576]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c1e6:	68db      	ldr	r3, [r3, #12]
 800c1e8:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	6a1b      	ldr	r3, [r3, #32]
 800c1f0:	029b      	lsls	r3, r3, #10
 800c1f2:	498d      	ldr	r1, [pc, #564]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c1f4:	4313      	orrs	r3, r2
 800c1f6:	60cb      	str	r3, [r1, #12]
 800c1f8:	e026      	b.n	800c248 <HAL_RCC_OscConfig+0x314>
 800c1fa:	4b8b      	ldr	r3, [pc, #556]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c1fc:	68db      	ldr	r3, [r3, #12]
 800c1fe:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6a1b      	ldr	r3, [r3, #32]
 800c206:	03db      	lsls	r3, r3, #15
 800c208:	4987      	ldr	r1, [pc, #540]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c20a:	4313      	orrs	r3, r2
 800c20c:	60cb      	str	r3, [r1, #12]
 800c20e:	e01b      	b.n	800c248 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800c210:	4b85      	ldr	r3, [pc, #532]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	4a84      	ldr	r2, [pc, #528]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c216:	f023 0301 	bic.w	r3, r3, #1
 800c21a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c21c:	f7fb fb0e 	bl	800783c <HAL_GetTick>
 800c220:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800c222:	e009      	b.n	800c238 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c224:	f7fb fb0a 	bl	800783c <HAL_GetTick>
 800c228:	4602      	mov	r2, r0
 800c22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c22c:	1ad3      	subs	r3, r2, r3
 800c22e:	2b02      	cmp	r3, #2
 800c230:	d902      	bls.n	800c238 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800c232:	2303      	movs	r3, #3
 800c234:	f000 bd53 	b.w	800ccde <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800c238:	4b7b      	ldr	r3, [pc, #492]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f003 0304 	and.w	r3, r3, #4
 800c240:	2b00      	cmp	r3, #0
 800c242:	d1ef      	bne.n	800c224 <HAL_RCC_OscConfig+0x2f0>
 800c244:	e000      	b.n	800c248 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800c246:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f003 0301 	and.w	r3, r3, #1
 800c250:	2b00      	cmp	r3, #0
 800c252:	f000 808b 	beq.w	800c36c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800c256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c258:	2b08      	cmp	r3, #8
 800c25a:	d005      	beq.n	800c268 <HAL_RCC_OscConfig+0x334>
 800c25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25e:	2b0c      	cmp	r3, #12
 800c260:	d109      	bne.n	800c276 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800c262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c264:	2b03      	cmp	r3, #3
 800c266:	d106      	bne.n	800c276 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	685b      	ldr	r3, [r3, #4]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d17d      	bne.n	800c36c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800c270:	2301      	movs	r3, #1
 800c272:	f000 bd34 	b.w	800ccde <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	685b      	ldr	r3, [r3, #4]
 800c27a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c27e:	d106      	bne.n	800c28e <HAL_RCC_OscConfig+0x35a>
 800c280:	4b69      	ldr	r3, [pc, #420]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4a68      	ldr	r2, [pc, #416]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c28a:	6013      	str	r3, [r2, #0]
 800c28c:	e041      	b.n	800c312 <HAL_RCC_OscConfig+0x3de>
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	685b      	ldr	r3, [r3, #4]
 800c292:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c296:	d112      	bne.n	800c2be <HAL_RCC_OscConfig+0x38a>
 800c298:	4b63      	ldr	r3, [pc, #396]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	4a62      	ldr	r2, [pc, #392]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c29e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c2a2:	6013      	str	r3, [r2, #0]
 800c2a4:	4b60      	ldr	r3, [pc, #384]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	4a5f      	ldr	r2, [pc, #380]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c2aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c2ae:	6013      	str	r3, [r2, #0]
 800c2b0:	4b5d      	ldr	r3, [pc, #372]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	4a5c      	ldr	r2, [pc, #368]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c2b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c2ba:	6013      	str	r3, [r2, #0]
 800c2bc:	e029      	b.n	800c312 <HAL_RCC_OscConfig+0x3de>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	685b      	ldr	r3, [r3, #4]
 800c2c2:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800c2c6:	d112      	bne.n	800c2ee <HAL_RCC_OscConfig+0x3ba>
 800c2c8:	4b57      	ldr	r3, [pc, #348]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4a56      	ldr	r2, [pc, #344]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c2ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c2d2:	6013      	str	r3, [r2, #0]
 800c2d4:	4b54      	ldr	r3, [pc, #336]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	4a53      	ldr	r2, [pc, #332]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c2da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c2de:	6013      	str	r3, [r2, #0]
 800c2e0:	4b51      	ldr	r3, [pc, #324]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	4a50      	ldr	r2, [pc, #320]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c2e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c2ea:	6013      	str	r3, [r2, #0]
 800c2ec:	e011      	b.n	800c312 <HAL_RCC_OscConfig+0x3de>
 800c2ee:	4b4e      	ldr	r3, [pc, #312]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	4a4d      	ldr	r2, [pc, #308]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c2f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c2f8:	6013      	str	r3, [r2, #0]
 800c2fa:	4b4b      	ldr	r3, [pc, #300]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	4a4a      	ldr	r2, [pc, #296]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c300:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c304:	6013      	str	r3, [r2, #0]
 800c306:	4b48      	ldr	r3, [pc, #288]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	4a47      	ldr	r2, [pc, #284]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c30c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c310:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	685b      	ldr	r3, [r3, #4]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d014      	beq.n	800c344 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800c31a:	f7fb fa8f 	bl	800783c <HAL_GetTick>
 800c31e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c320:	e009      	b.n	800c336 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c322:	f7fb fa8b 	bl	800783c <HAL_GetTick>
 800c326:	4602      	mov	r2, r0
 800c328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c32a:	1ad3      	subs	r3, r2, r3
 800c32c:	2b64      	cmp	r3, #100	; 0x64
 800c32e:	d902      	bls.n	800c336 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800c330:	2303      	movs	r3, #3
 800c332:	f000 bcd4 	b.w	800ccde <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c336:	4b3c      	ldr	r3, [pc, #240]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d0ef      	beq.n	800c322 <HAL_RCC_OscConfig+0x3ee>
 800c342:	e013      	b.n	800c36c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800c344:	f7fb fa7a 	bl	800783c <HAL_GetTick>
 800c348:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c34a:	e009      	b.n	800c360 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c34c:	f7fb fa76 	bl	800783c <HAL_GetTick>
 800c350:	4602      	mov	r2, r0
 800c352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c354:	1ad3      	subs	r3, r2, r3
 800c356:	2b64      	cmp	r3, #100	; 0x64
 800c358:	d902      	bls.n	800c360 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800c35a:	2303      	movs	r3, #3
 800c35c:	f000 bcbf 	b.w	800ccde <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c360:	4b31      	ldr	r3, [pc, #196]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d1ef      	bne.n	800c34c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f003 0302 	and.w	r3, r3, #2
 800c374:	2b00      	cmp	r3, #0
 800c376:	d05f      	beq.n	800c438 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800c378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37a:	2b04      	cmp	r3, #4
 800c37c:	d005      	beq.n	800c38a <HAL_RCC_OscConfig+0x456>
 800c37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c380:	2b0c      	cmp	r3, #12
 800c382:	d114      	bne.n	800c3ae <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800c384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c386:	2b02      	cmp	r3, #2
 800c388:	d111      	bne.n	800c3ae <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	68db      	ldr	r3, [r3, #12]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d102      	bne.n	800c398 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800c392:	2301      	movs	r3, #1
 800c394:	f000 bca3 	b.w	800ccde <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800c398:	4b23      	ldr	r3, [pc, #140]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c39a:	691b      	ldr	r3, [r3, #16]
 800c39c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	691b      	ldr	r3, [r3, #16]
 800c3a4:	041b      	lsls	r3, r3, #16
 800c3a6:	4920      	ldr	r1, [pc, #128]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c3ac:	e044      	b.n	800c438 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	68db      	ldr	r3, [r3, #12]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d024      	beq.n	800c400 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800c3b6:	4b1c      	ldr	r3, [pc, #112]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4a1b      	ldr	r2, [pc, #108]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c3bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3c0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c3c2:	f7fb fa3b 	bl	800783c <HAL_GetTick>
 800c3c6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c3c8:	e009      	b.n	800c3de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c3ca:	f7fb fa37 	bl	800783c <HAL_GetTick>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d2:	1ad3      	subs	r3, r2, r3
 800c3d4:	2b02      	cmp	r3, #2
 800c3d6:	d902      	bls.n	800c3de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800c3d8:	2303      	movs	r3, #3
 800c3da:	f000 bc80 	b.w	800ccde <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c3de:	4b12      	ldr	r3, [pc, #72]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d0ef      	beq.n	800c3ca <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800c3ea:	4b0f      	ldr	r3, [pc, #60]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c3ec:	691b      	ldr	r3, [r3, #16]
 800c3ee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	691b      	ldr	r3, [r3, #16]
 800c3f6:	041b      	lsls	r3, r3, #16
 800c3f8:	490b      	ldr	r1, [pc, #44]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c3fa:	4313      	orrs	r3, r2
 800c3fc:	610b      	str	r3, [r1, #16]
 800c3fe:	e01b      	b.n	800c438 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800c400:	4b09      	ldr	r3, [pc, #36]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	4a08      	ldr	r2, [pc, #32]	; (800c428 <HAL_RCC_OscConfig+0x4f4>)
 800c406:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c40a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c40c:	f7fb fa16 	bl	800783c <HAL_GetTick>
 800c410:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c412:	e00b      	b.n	800c42c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c414:	f7fb fa12 	bl	800783c <HAL_GetTick>
 800c418:	4602      	mov	r2, r0
 800c41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41c:	1ad3      	subs	r3, r2, r3
 800c41e:	2b02      	cmp	r3, #2
 800c420:	d904      	bls.n	800c42c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800c422:	2303      	movs	r3, #3
 800c424:	f000 bc5b 	b.w	800ccde <HAL_RCC_OscConfig+0xdaa>
 800c428:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c42c:	4baf      	ldr	r3, [pc, #700]	; (800c6ec <HAL_RCC_OscConfig+0x7b8>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c434:	2b00      	cmp	r3, #0
 800c436:	d1ed      	bne.n	800c414 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f003 0308 	and.w	r3, r3, #8
 800c440:	2b00      	cmp	r3, #0
 800c442:	f000 80c8 	beq.w	800c5d6 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800c446:	2300      	movs	r3, #0
 800c448:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c44c:	4ba7      	ldr	r3, [pc, #668]	; (800c6ec <HAL_RCC_OscConfig+0x7b8>)
 800c44e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c452:	f003 0304 	and.w	r3, r3, #4
 800c456:	2b00      	cmp	r3, #0
 800c458:	d111      	bne.n	800c47e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c45a:	4ba4      	ldr	r3, [pc, #656]	; (800c6ec <HAL_RCC_OscConfig+0x7b8>)
 800c45c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c460:	4aa2      	ldr	r2, [pc, #648]	; (800c6ec <HAL_RCC_OscConfig+0x7b8>)
 800c462:	f043 0304 	orr.w	r3, r3, #4
 800c466:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800c46a:	4ba0      	ldr	r3, [pc, #640]	; (800c6ec <HAL_RCC_OscConfig+0x7b8>)
 800c46c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c470:	f003 0304 	and.w	r3, r3, #4
 800c474:	617b      	str	r3, [r7, #20]
 800c476:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800c478:	2301      	movs	r3, #1
 800c47a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c47e:	4b9c      	ldr	r3, [pc, #624]	; (800c6f0 <HAL_RCC_OscConfig+0x7bc>)
 800c480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c482:	f003 0301 	and.w	r3, r3, #1
 800c486:	2b00      	cmp	r3, #0
 800c488:	d119      	bne.n	800c4be <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800c48a:	4b99      	ldr	r3, [pc, #612]	; (800c6f0 <HAL_RCC_OscConfig+0x7bc>)
 800c48c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c48e:	4a98      	ldr	r2, [pc, #608]	; (800c6f0 <HAL_RCC_OscConfig+0x7bc>)
 800c490:	f043 0301 	orr.w	r3, r3, #1
 800c494:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c496:	f7fb f9d1 	bl	800783c <HAL_GetTick>
 800c49a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c49c:	e009      	b.n	800c4b2 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c49e:	f7fb f9cd 	bl	800783c <HAL_GetTick>
 800c4a2:	4602      	mov	r2, r0
 800c4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a6:	1ad3      	subs	r3, r2, r3
 800c4a8:	2b02      	cmp	r3, #2
 800c4aa:	d902      	bls.n	800c4b2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800c4ac:	2303      	movs	r3, #3
 800c4ae:	f000 bc16 	b.w	800ccde <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c4b2:	4b8f      	ldr	r3, [pc, #572]	; (800c6f0 <HAL_RCC_OscConfig+0x7bc>)
 800c4b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4b6:	f003 0301 	and.w	r3, r3, #1
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d0ef      	beq.n	800c49e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	695b      	ldr	r3, [r3, #20]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d05f      	beq.n	800c586 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800c4c6:	4b89      	ldr	r3, [pc, #548]	; (800c6ec <HAL_RCC_OscConfig+0x7b8>)
 800c4c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c4cc:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	699a      	ldr	r2, [r3, #24]
 800c4d2:	6a3b      	ldr	r3, [r7, #32]
 800c4d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c4d8:	429a      	cmp	r2, r3
 800c4da:	d037      	beq.n	800c54c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800c4dc:	6a3b      	ldr	r3, [r7, #32]
 800c4de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d006      	beq.n	800c4f4 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800c4e6:	6a3b      	ldr	r3, [r7, #32]
 800c4e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d101      	bne.n	800c4f4 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	e3f4      	b.n	800ccde <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800c4f4:	6a3b      	ldr	r3, [r7, #32]
 800c4f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d01b      	beq.n	800c536 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800c4fe:	4b7b      	ldr	r3, [pc, #492]	; (800c6ec <HAL_RCC_OscConfig+0x7b8>)
 800c500:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c504:	4a79      	ldr	r2, [pc, #484]	; (800c6ec <HAL_RCC_OscConfig+0x7b8>)
 800c506:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800c50a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800c50e:	f7fb f995 	bl	800783c <HAL_GetTick>
 800c512:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c514:	e008      	b.n	800c528 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c516:	f7fb f991 	bl	800783c <HAL_GetTick>
 800c51a:	4602      	mov	r2, r0
 800c51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c51e:	1ad3      	subs	r3, r2, r3
 800c520:	2b05      	cmp	r3, #5
 800c522:	d901      	bls.n	800c528 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800c524:	2303      	movs	r3, #3
 800c526:	e3da      	b.n	800ccde <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c528:	4b70      	ldr	r3, [pc, #448]	; (800c6ec <HAL_RCC_OscConfig+0x7b8>)
 800c52a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c52e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c532:	2b00      	cmp	r3, #0
 800c534:	d1ef      	bne.n	800c516 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800c536:	4b6d      	ldr	r3, [pc, #436]	; (800c6ec <HAL_RCC_OscConfig+0x7b8>)
 800c538:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c53c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	699b      	ldr	r3, [r3, #24]
 800c544:	4969      	ldr	r1, [pc, #420]	; (800c6ec <HAL_RCC_OscConfig+0x7b8>)
 800c546:	4313      	orrs	r3, r2
 800c548:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800c54c:	4b67      	ldr	r3, [pc, #412]	; (800c6ec <HAL_RCC_OscConfig+0x7b8>)
 800c54e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c552:	4a66      	ldr	r2, [pc, #408]	; (800c6ec <HAL_RCC_OscConfig+0x7b8>)
 800c554:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c558:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800c55c:	f7fb f96e 	bl	800783c <HAL_GetTick>
 800c560:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800c562:	e008      	b.n	800c576 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c564:	f7fb f96a 	bl	800783c <HAL_GetTick>
 800c568:	4602      	mov	r2, r0
 800c56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c56c:	1ad3      	subs	r3, r2, r3
 800c56e:	2b05      	cmp	r3, #5
 800c570:	d901      	bls.n	800c576 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800c572:	2303      	movs	r3, #3
 800c574:	e3b3      	b.n	800ccde <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800c576:	4b5d      	ldr	r3, [pc, #372]	; (800c6ec <HAL_RCC_OscConfig+0x7b8>)
 800c578:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c57c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c580:	2b00      	cmp	r3, #0
 800c582:	d0ef      	beq.n	800c564 <HAL_RCC_OscConfig+0x630>
 800c584:	e01b      	b.n	800c5be <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800c586:	4b59      	ldr	r3, [pc, #356]	; (800c6ec <HAL_RCC_OscConfig+0x7b8>)
 800c588:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c58c:	4a57      	ldr	r2, [pc, #348]	; (800c6ec <HAL_RCC_OscConfig+0x7b8>)
 800c58e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800c592:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800c596:	f7fb f951 	bl	800783c <HAL_GetTick>
 800c59a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c59c:	e008      	b.n	800c5b0 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c59e:	f7fb f94d 	bl	800783c <HAL_GetTick>
 800c5a2:	4602      	mov	r2, r0
 800c5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a6:	1ad3      	subs	r3, r2, r3
 800c5a8:	2b05      	cmp	r3, #5
 800c5aa:	d901      	bls.n	800c5b0 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800c5ac:	2303      	movs	r3, #3
 800c5ae:	e396      	b.n	800ccde <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c5b0:	4b4e      	ldr	r3, [pc, #312]	; (800c6ec <HAL_RCC_OscConfig+0x7b8>)
 800c5b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c5b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d1ef      	bne.n	800c59e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c5be:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c5c2:	2b01      	cmp	r3, #1
 800c5c4:	d107      	bne.n	800c5d6 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c5c6:	4b49      	ldr	r3, [pc, #292]	; (800c6ec <HAL_RCC_OscConfig+0x7b8>)
 800c5c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c5cc:	4a47      	ldr	r2, [pc, #284]	; (800c6ec <HAL_RCC_OscConfig+0x7b8>)
 800c5ce:	f023 0304 	bic.w	r3, r3, #4
 800c5d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f003 0304 	and.w	r3, r3, #4
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	f000 8111 	beq.w	800c806 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c5ea:	4b40      	ldr	r3, [pc, #256]	; (800c6ec <HAL_RCC_OscConfig+0x7b8>)
 800c5ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c5f0:	f003 0304 	and.w	r3, r3, #4
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d111      	bne.n	800c61c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c5f8:	4b3c      	ldr	r3, [pc, #240]	; (800c6ec <HAL_RCC_OscConfig+0x7b8>)
 800c5fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c5fe:	4a3b      	ldr	r2, [pc, #236]	; (800c6ec <HAL_RCC_OscConfig+0x7b8>)
 800c600:	f043 0304 	orr.w	r3, r3, #4
 800c604:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800c608:	4b38      	ldr	r3, [pc, #224]	; (800c6ec <HAL_RCC_OscConfig+0x7b8>)
 800c60a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c60e:	f003 0304 	and.w	r3, r3, #4
 800c612:	613b      	str	r3, [r7, #16]
 800c614:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800c616:	2301      	movs	r3, #1
 800c618:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c61c:	4b34      	ldr	r3, [pc, #208]	; (800c6f0 <HAL_RCC_OscConfig+0x7bc>)
 800c61e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c620:	f003 0301 	and.w	r3, r3, #1
 800c624:	2b00      	cmp	r3, #0
 800c626:	d118      	bne.n	800c65a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800c628:	4b31      	ldr	r3, [pc, #196]	; (800c6f0 <HAL_RCC_OscConfig+0x7bc>)
 800c62a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c62c:	4a30      	ldr	r2, [pc, #192]	; (800c6f0 <HAL_RCC_OscConfig+0x7bc>)
 800c62e:	f043 0301 	orr.w	r3, r3, #1
 800c632:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c634:	f7fb f902 	bl	800783c <HAL_GetTick>
 800c638:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c63a:	e008      	b.n	800c64e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c63c:	f7fb f8fe 	bl	800783c <HAL_GetTick>
 800c640:	4602      	mov	r2, r0
 800c642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c644:	1ad3      	subs	r3, r2, r3
 800c646:	2b02      	cmp	r3, #2
 800c648:	d901      	bls.n	800c64e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800c64a:	2303      	movs	r3, #3
 800c64c:	e347      	b.n	800ccde <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c64e:	4b28      	ldr	r3, [pc, #160]	; (800c6f0 <HAL_RCC_OscConfig+0x7bc>)
 800c650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c652:	f003 0301 	and.w	r3, r3, #1
 800c656:	2b00      	cmp	r3, #0
 800c658:	d0f0      	beq.n	800c63c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	689b      	ldr	r3, [r3, #8]
 800c65e:	f003 0301 	and.w	r3, r3, #1
 800c662:	2b00      	cmp	r3, #0
 800c664:	d01f      	beq.n	800c6a6 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	689b      	ldr	r3, [r3, #8]
 800c66a:	f003 0304 	and.w	r3, r3, #4
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d010      	beq.n	800c694 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800c672:	4b1e      	ldr	r3, [pc, #120]	; (800c6ec <HAL_RCC_OscConfig+0x7b8>)
 800c674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c678:	4a1c      	ldr	r2, [pc, #112]	; (800c6ec <HAL_RCC_OscConfig+0x7b8>)
 800c67a:	f043 0304 	orr.w	r3, r3, #4
 800c67e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c682:	4b1a      	ldr	r3, [pc, #104]	; (800c6ec <HAL_RCC_OscConfig+0x7b8>)
 800c684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c688:	4a18      	ldr	r2, [pc, #96]	; (800c6ec <HAL_RCC_OscConfig+0x7b8>)
 800c68a:	f043 0301 	orr.w	r3, r3, #1
 800c68e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800c692:	e018      	b.n	800c6c6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c694:	4b15      	ldr	r3, [pc, #84]	; (800c6ec <HAL_RCC_OscConfig+0x7b8>)
 800c696:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c69a:	4a14      	ldr	r2, [pc, #80]	; (800c6ec <HAL_RCC_OscConfig+0x7b8>)
 800c69c:	f043 0301 	orr.w	r3, r3, #1
 800c6a0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800c6a4:	e00f      	b.n	800c6c6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c6a6:	4b11      	ldr	r3, [pc, #68]	; (800c6ec <HAL_RCC_OscConfig+0x7b8>)
 800c6a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c6ac:	4a0f      	ldr	r2, [pc, #60]	; (800c6ec <HAL_RCC_OscConfig+0x7b8>)
 800c6ae:	f023 0301 	bic.w	r3, r3, #1
 800c6b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800c6b6:	4b0d      	ldr	r3, [pc, #52]	; (800c6ec <HAL_RCC_OscConfig+0x7b8>)
 800c6b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c6bc:	4a0b      	ldr	r2, [pc, #44]	; (800c6ec <HAL_RCC_OscConfig+0x7b8>)
 800c6be:	f023 0304 	bic.w	r3, r3, #4
 800c6c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	689b      	ldr	r3, [r3, #8]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d057      	beq.n	800c77e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800c6ce:	f7fb f8b5 	bl	800783c <HAL_GetTick>
 800c6d2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c6d4:	e00e      	b.n	800c6f4 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c6d6:	f7fb f8b1 	bl	800783c <HAL_GetTick>
 800c6da:	4602      	mov	r2, r0
 800c6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6de:	1ad3      	subs	r3, r2, r3
 800c6e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d905      	bls.n	800c6f4 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800c6e8:	2303      	movs	r3, #3
 800c6ea:	e2f8      	b.n	800ccde <HAL_RCC_OscConfig+0xdaa>
 800c6ec:	46020c00 	.word	0x46020c00
 800c6f0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c6f4:	4b9c      	ldr	r3, [pc, #624]	; (800c968 <HAL_RCC_OscConfig+0xa34>)
 800c6f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c6fa:	f003 0302 	and.w	r3, r3, #2
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d0e9      	beq.n	800c6d6 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	689b      	ldr	r3, [r3, #8]
 800c706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d01b      	beq.n	800c746 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c70e:	4b96      	ldr	r3, [pc, #600]	; (800c968 <HAL_RCC_OscConfig+0xa34>)
 800c710:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c714:	4a94      	ldr	r2, [pc, #592]	; (800c968 <HAL_RCC_OscConfig+0xa34>)
 800c716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c71a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800c71e:	e00a      	b.n	800c736 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c720:	f7fb f88c 	bl	800783c <HAL_GetTick>
 800c724:	4602      	mov	r2, r0
 800c726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c728:	1ad3      	subs	r3, r2, r3
 800c72a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c72e:	4293      	cmp	r3, r2
 800c730:	d901      	bls.n	800c736 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800c732:	2303      	movs	r3, #3
 800c734:	e2d3      	b.n	800ccde <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800c736:	4b8c      	ldr	r3, [pc, #560]	; (800c968 <HAL_RCC_OscConfig+0xa34>)
 800c738:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c73c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c740:	2b00      	cmp	r3, #0
 800c742:	d0ed      	beq.n	800c720 <HAL_RCC_OscConfig+0x7ec>
 800c744:	e053      	b.n	800c7ee <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c746:	4b88      	ldr	r3, [pc, #544]	; (800c968 <HAL_RCC_OscConfig+0xa34>)
 800c748:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c74c:	4a86      	ldr	r2, [pc, #536]	; (800c968 <HAL_RCC_OscConfig+0xa34>)
 800c74e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c752:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c756:	e00a      	b.n	800c76e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c758:	f7fb f870 	bl	800783c <HAL_GetTick>
 800c75c:	4602      	mov	r2, r0
 800c75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c760:	1ad3      	subs	r3, r2, r3
 800c762:	f241 3288 	movw	r2, #5000	; 0x1388
 800c766:	4293      	cmp	r3, r2
 800c768:	d901      	bls.n	800c76e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800c76a:	2303      	movs	r3, #3
 800c76c:	e2b7      	b.n	800ccde <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c76e:	4b7e      	ldr	r3, [pc, #504]	; (800c968 <HAL_RCC_OscConfig+0xa34>)
 800c770:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c774:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d1ed      	bne.n	800c758 <HAL_RCC_OscConfig+0x824>
 800c77c:	e037      	b.n	800c7ee <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800c77e:	f7fb f85d 	bl	800783c <HAL_GetTick>
 800c782:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c784:	e00a      	b.n	800c79c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c786:	f7fb f859 	bl	800783c <HAL_GetTick>
 800c78a:	4602      	mov	r2, r0
 800c78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78e:	1ad3      	subs	r3, r2, r3
 800c790:	f241 3288 	movw	r2, #5000	; 0x1388
 800c794:	4293      	cmp	r3, r2
 800c796:	d901      	bls.n	800c79c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800c798:	2303      	movs	r3, #3
 800c79a:	e2a0      	b.n	800ccde <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c79c:	4b72      	ldr	r3, [pc, #456]	; (800c968 <HAL_RCC_OscConfig+0xa34>)
 800c79e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c7a2:	f003 0302 	and.w	r3, r3, #2
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d1ed      	bne.n	800c786 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800c7aa:	4b6f      	ldr	r3, [pc, #444]	; (800c968 <HAL_RCC_OscConfig+0xa34>)
 800c7ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c7b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d01a      	beq.n	800c7ee <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c7b8:	4b6b      	ldr	r3, [pc, #428]	; (800c968 <HAL_RCC_OscConfig+0xa34>)
 800c7ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c7be:	4a6a      	ldr	r2, [pc, #424]	; (800c968 <HAL_RCC_OscConfig+0xa34>)
 800c7c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c7c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c7c8:	e00a      	b.n	800c7e0 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c7ca:	f7fb f837 	bl	800783c <HAL_GetTick>
 800c7ce:	4602      	mov	r2, r0
 800c7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d2:	1ad3      	subs	r3, r2, r3
 800c7d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7d8:	4293      	cmp	r3, r2
 800c7da:	d901      	bls.n	800c7e0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800c7dc:	2303      	movs	r3, #3
 800c7de:	e27e      	b.n	800ccde <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c7e0:	4b61      	ldr	r3, [pc, #388]	; (800c968 <HAL_RCC_OscConfig+0xa34>)
 800c7e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c7e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d1ed      	bne.n	800c7ca <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c7ee:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800c7f2:	2b01      	cmp	r3, #1
 800c7f4:	d107      	bne.n	800c806 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c7f6:	4b5c      	ldr	r3, [pc, #368]	; (800c968 <HAL_RCC_OscConfig+0xa34>)
 800c7f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c7fc:	4a5a      	ldr	r2, [pc, #360]	; (800c968 <HAL_RCC_OscConfig+0xa34>)
 800c7fe:	f023 0304 	bic.w	r3, r3, #4
 800c802:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	f003 0320 	and.w	r3, r3, #32
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d036      	beq.n	800c880 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c816:	2b00      	cmp	r3, #0
 800c818:	d019      	beq.n	800c84e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800c81a:	4b53      	ldr	r3, [pc, #332]	; (800c968 <HAL_RCC_OscConfig+0xa34>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	4a52      	ldr	r2, [pc, #328]	; (800c968 <HAL_RCC_OscConfig+0xa34>)
 800c820:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c824:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c826:	f7fb f809 	bl	800783c <HAL_GetTick>
 800c82a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800c82c:	e008      	b.n	800c840 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c82e:	f7fb f805 	bl	800783c <HAL_GetTick>
 800c832:	4602      	mov	r2, r0
 800c834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c836:	1ad3      	subs	r3, r2, r3
 800c838:	2b02      	cmp	r3, #2
 800c83a:	d901      	bls.n	800c840 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800c83c:	2303      	movs	r3, #3
 800c83e:	e24e      	b.n	800ccde <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800c840:	4b49      	ldr	r3, [pc, #292]	; (800c968 <HAL_RCC_OscConfig+0xa34>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d0f0      	beq.n	800c82e <HAL_RCC_OscConfig+0x8fa>
 800c84c:	e018      	b.n	800c880 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800c84e:	4b46      	ldr	r3, [pc, #280]	; (800c968 <HAL_RCC_OscConfig+0xa34>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	4a45      	ldr	r2, [pc, #276]	; (800c968 <HAL_RCC_OscConfig+0xa34>)
 800c854:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c858:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c85a:	f7fa ffef 	bl	800783c <HAL_GetTick>
 800c85e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800c860:	e008      	b.n	800c874 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c862:	f7fa ffeb 	bl	800783c <HAL_GetTick>
 800c866:	4602      	mov	r2, r0
 800c868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c86a:	1ad3      	subs	r3, r2, r3
 800c86c:	2b02      	cmp	r3, #2
 800c86e:	d901      	bls.n	800c874 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800c870:	2303      	movs	r3, #3
 800c872:	e234      	b.n	800ccde <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800c874:	4b3c      	ldr	r3, [pc, #240]	; (800c968 <HAL_RCC_OscConfig+0xa34>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d1f0      	bne.n	800c862 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d036      	beq.n	800c8fa <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c890:	2b00      	cmp	r3, #0
 800c892:	d019      	beq.n	800c8c8 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800c894:	4b34      	ldr	r3, [pc, #208]	; (800c968 <HAL_RCC_OscConfig+0xa34>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	4a33      	ldr	r2, [pc, #204]	; (800c968 <HAL_RCC_OscConfig+0xa34>)
 800c89a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c89e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c8a0:	f7fa ffcc 	bl	800783c <HAL_GetTick>
 800c8a4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800c8a6:	e008      	b.n	800c8ba <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800c8a8:	f7fa ffc8 	bl	800783c <HAL_GetTick>
 800c8ac:	4602      	mov	r2, r0
 800c8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b0:	1ad3      	subs	r3, r2, r3
 800c8b2:	2b02      	cmp	r3, #2
 800c8b4:	d901      	bls.n	800c8ba <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800c8b6:	2303      	movs	r3, #3
 800c8b8:	e211      	b.n	800ccde <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800c8ba:	4b2b      	ldr	r3, [pc, #172]	; (800c968 <HAL_RCC_OscConfig+0xa34>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d0f0      	beq.n	800c8a8 <HAL_RCC_OscConfig+0x974>
 800c8c6:	e018      	b.n	800c8fa <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800c8c8:	4b27      	ldr	r3, [pc, #156]	; (800c968 <HAL_RCC_OscConfig+0xa34>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4a26      	ldr	r2, [pc, #152]	; (800c968 <HAL_RCC_OscConfig+0xa34>)
 800c8ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c8d2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c8d4:	f7fa ffb2 	bl	800783c <HAL_GetTick>
 800c8d8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800c8da:	e008      	b.n	800c8ee <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800c8dc:	f7fa ffae 	bl	800783c <HAL_GetTick>
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e4:	1ad3      	subs	r3, r2, r3
 800c8e6:	2b02      	cmp	r3, #2
 800c8e8:	d901      	bls.n	800c8ee <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800c8ea:	2303      	movs	r3, #3
 800c8ec:	e1f7      	b.n	800ccde <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800c8ee:	4b1e      	ldr	r3, [pc, #120]	; (800c968 <HAL_RCC_OscConfig+0xa34>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d1f0      	bne.n	800c8dc <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c902:	2b00      	cmp	r3, #0
 800c904:	d07f      	beq.n	800ca06 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d062      	beq.n	800c9d4 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800c90e:	4b16      	ldr	r3, [pc, #88]	; (800c968 <HAL_RCC_OscConfig+0xa34>)
 800c910:	689b      	ldr	r3, [r3, #8]
 800c912:	4a15      	ldr	r2, [pc, #84]	; (800c968 <HAL_RCC_OscConfig+0xa34>)
 800c914:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c918:	6093      	str	r3, [r2, #8]
 800c91a:	4b13      	ldr	r3, [pc, #76]	; (800c968 <HAL_RCC_OscConfig+0xa34>)
 800c91c:	689b      	ldr	r3, [r3, #8]
 800c91e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c926:	4910      	ldr	r1, [pc, #64]	; (800c968 <HAL_RCC_OscConfig+0xa34>)
 800c928:	4313      	orrs	r3, r2
 800c92a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c930:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800c934:	d309      	bcc.n	800c94a <HAL_RCC_OscConfig+0xa16>
 800c936:	4b0c      	ldr	r3, [pc, #48]	; (800c968 <HAL_RCC_OscConfig+0xa34>)
 800c938:	68db      	ldr	r3, [r3, #12]
 800c93a:	f023 021f 	bic.w	r2, r3, #31
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6a1b      	ldr	r3, [r3, #32]
 800c942:	4909      	ldr	r1, [pc, #36]	; (800c968 <HAL_RCC_OscConfig+0xa34>)
 800c944:	4313      	orrs	r3, r2
 800c946:	60cb      	str	r3, [r1, #12]
 800c948:	e02a      	b.n	800c9a0 <HAL_RCC_OscConfig+0xa6c>
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c94e:	2b00      	cmp	r3, #0
 800c950:	da0c      	bge.n	800c96c <HAL_RCC_OscConfig+0xa38>
 800c952:	4b05      	ldr	r3, [pc, #20]	; (800c968 <HAL_RCC_OscConfig+0xa34>)
 800c954:	68db      	ldr	r3, [r3, #12]
 800c956:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6a1b      	ldr	r3, [r3, #32]
 800c95e:	015b      	lsls	r3, r3, #5
 800c960:	4901      	ldr	r1, [pc, #4]	; (800c968 <HAL_RCC_OscConfig+0xa34>)
 800c962:	4313      	orrs	r3, r2
 800c964:	60cb      	str	r3, [r1, #12]
 800c966:	e01b      	b.n	800c9a0 <HAL_RCC_OscConfig+0xa6c>
 800c968:	46020c00 	.word	0x46020c00
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c974:	d30a      	bcc.n	800c98c <HAL_RCC_OscConfig+0xa58>
 800c976:	4ba1      	ldr	r3, [pc, #644]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800c978:	68db      	ldr	r3, [r3, #12]
 800c97a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6a1b      	ldr	r3, [r3, #32]
 800c982:	029b      	lsls	r3, r3, #10
 800c984:	499d      	ldr	r1, [pc, #628]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800c986:	4313      	orrs	r3, r2
 800c988:	60cb      	str	r3, [r1, #12]
 800c98a:	e009      	b.n	800c9a0 <HAL_RCC_OscConfig+0xa6c>
 800c98c:	4b9b      	ldr	r3, [pc, #620]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800c98e:	68db      	ldr	r3, [r3, #12]
 800c990:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6a1b      	ldr	r3, [r3, #32]
 800c998:	03db      	lsls	r3, r3, #15
 800c99a:	4998      	ldr	r1, [pc, #608]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800c99c:	4313      	orrs	r3, r2
 800c99e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800c9a0:	4b96      	ldr	r3, [pc, #600]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4a95      	ldr	r2, [pc, #596]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800c9a6:	f043 0310 	orr.w	r3, r3, #16
 800c9aa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c9ac:	f7fa ff46 	bl	800783c <HAL_GetTick>
 800c9b0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800c9b2:	e008      	b.n	800c9c6 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800c9b4:	f7fa ff42 	bl	800783c <HAL_GetTick>
 800c9b8:	4602      	mov	r2, r0
 800c9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9bc:	1ad3      	subs	r3, r2, r3
 800c9be:	2b02      	cmp	r3, #2
 800c9c0:	d901      	bls.n	800c9c6 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800c9c2:	2303      	movs	r3, #3
 800c9c4:	e18b      	b.n	800ccde <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800c9c6:	4b8d      	ldr	r3, [pc, #564]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f003 0320 	and.w	r3, r3, #32
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d0f0      	beq.n	800c9b4 <HAL_RCC_OscConfig+0xa80>
 800c9d2:	e018      	b.n	800ca06 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800c9d4:	4b89      	ldr	r3, [pc, #548]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	4a88      	ldr	r2, [pc, #544]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800c9da:	f023 0310 	bic.w	r3, r3, #16
 800c9de:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c9e0:	f7fa ff2c 	bl	800783c <HAL_GetTick>
 800c9e4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800c9e6:	e008      	b.n	800c9fa <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800c9e8:	f7fa ff28 	bl	800783c <HAL_GetTick>
 800c9ec:	4602      	mov	r2, r0
 800c9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f0:	1ad3      	subs	r3, r2, r3
 800c9f2:	2b02      	cmp	r3, #2
 800c9f4:	d901      	bls.n	800c9fa <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800c9f6:	2303      	movs	r3, #3
 800c9f8:	e171      	b.n	800ccde <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800c9fa:	4b80      	ldr	r3, [pc, #512]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f003 0320 	and.w	r3, r3, #32
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d1f0      	bne.n	800c9e8 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	f000 8166 	beq.w	800ccdc <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800ca10:	2300      	movs	r3, #0
 800ca12:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ca16:	4b79      	ldr	r3, [pc, #484]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800ca18:	69db      	ldr	r3, [r3, #28]
 800ca1a:	f003 030c 	and.w	r3, r3, #12
 800ca1e:	2b0c      	cmp	r3, #12
 800ca20:	f000 80f2 	beq.w	800cc08 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca28:	2b02      	cmp	r3, #2
 800ca2a:	f040 80c5 	bne.w	800cbb8 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800ca2e:	4b73      	ldr	r3, [pc, #460]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	4a72      	ldr	r2, [pc, #456]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800ca34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ca38:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800ca3a:	f7fa feff 	bl	800783c <HAL_GetTick>
 800ca3e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800ca40:	e008      	b.n	800ca54 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ca42:	f7fa fefb 	bl	800783c <HAL_GetTick>
 800ca46:	4602      	mov	r2, r0
 800ca48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca4a:	1ad3      	subs	r3, r2, r3
 800ca4c:	2b02      	cmp	r3, #2
 800ca4e:	d901      	bls.n	800ca54 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800ca50:	2303      	movs	r3, #3
 800ca52:	e144      	b.n	800ccde <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800ca54:	4b69      	ldr	r3, [pc, #420]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d1f0      	bne.n	800ca42 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ca60:	4b66      	ldr	r3, [pc, #408]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800ca62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ca66:	f003 0304 	and.w	r3, r3, #4
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d111      	bne.n	800ca92 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800ca6e:	4b63      	ldr	r3, [pc, #396]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800ca70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ca74:	4a61      	ldr	r2, [pc, #388]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800ca76:	f043 0304 	orr.w	r3, r3, #4
 800ca7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800ca7e:	4b5f      	ldr	r3, [pc, #380]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800ca80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ca84:	f003 0304 	and.w	r3, r3, #4
 800ca88:	60fb      	str	r3, [r7, #12]
 800ca8a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800ca92:	4b5b      	ldr	r3, [pc, #364]	; (800cc00 <HAL_RCC_OscConfig+0xccc>)
 800ca94:	68db      	ldr	r3, [r3, #12]
 800ca96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ca9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ca9e:	d102      	bne.n	800caa6 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800caa0:	2301      	movs	r3, #1
 800caa2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800caa6:	4b56      	ldr	r3, [pc, #344]	; (800cc00 <HAL_RCC_OscConfig+0xccc>)
 800caa8:	68db      	ldr	r3, [r3, #12]
 800caaa:	4a55      	ldr	r2, [pc, #340]	; (800cc00 <HAL_RCC_OscConfig+0xccc>)
 800caac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cab0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800cab2:	4b52      	ldr	r3, [pc, #328]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800cab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cab6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800caba:	f023 0303 	bic.w	r3, r3, #3
 800cabe:	687a      	ldr	r2, [r7, #4]
 800cac0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800cac2:	687a      	ldr	r2, [r7, #4]
 800cac4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800cac6:	3a01      	subs	r2, #1
 800cac8:	0212      	lsls	r2, r2, #8
 800caca:	4311      	orrs	r1, r2
 800cacc:	687a      	ldr	r2, [r7, #4]
 800cace:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800cad0:	430a      	orrs	r2, r1
 800cad2:	494a      	ldr	r1, [pc, #296]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800cad4:	4313      	orrs	r3, r2
 800cad6:	628b      	str	r3, [r1, #40]	; 0x28
 800cad8:	4b48      	ldr	r3, [pc, #288]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800cada:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cadc:	4b49      	ldr	r3, [pc, #292]	; (800cc04 <HAL_RCC_OscConfig+0xcd0>)
 800cade:	4013      	ands	r3, r2
 800cae0:	687a      	ldr	r2, [r7, #4]
 800cae2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800cae4:	3a01      	subs	r2, #1
 800cae6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800caea:	687a      	ldr	r2, [r7, #4]
 800caec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800caee:	3a01      	subs	r2, #1
 800caf0:	0252      	lsls	r2, r2, #9
 800caf2:	b292      	uxth	r2, r2
 800caf4:	4311      	orrs	r1, r2
 800caf6:	687a      	ldr	r2, [r7, #4]
 800caf8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800cafa:	3a01      	subs	r2, #1
 800cafc:	0412      	lsls	r2, r2, #16
 800cafe:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800cb02:	4311      	orrs	r1, r2
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800cb08:	3a01      	subs	r2, #1
 800cb0a:	0612      	lsls	r2, r2, #24
 800cb0c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800cb10:	430a      	orrs	r2, r1
 800cb12:	493a      	ldr	r1, [pc, #232]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800cb14:	4313      	orrs	r3, r2
 800cb16:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800cb18:	4b38      	ldr	r3, [pc, #224]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800cb1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb1c:	4a37      	ldr	r2, [pc, #220]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800cb1e:	f023 0310 	bic.w	r3, r3, #16
 800cb22:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb28:	4a34      	ldr	r2, [pc, #208]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800cb2a:	00db      	lsls	r3, r3, #3
 800cb2c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800cb2e:	4b33      	ldr	r3, [pc, #204]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800cb30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb32:	4a32      	ldr	r2, [pc, #200]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800cb34:	f043 0310 	orr.w	r3, r3, #16
 800cb38:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800cb3a:	4b30      	ldr	r3, [pc, #192]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800cb3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb3e:	f023 020c 	bic.w	r2, r3, #12
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb46:	492d      	ldr	r1, [pc, #180]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800cb48:	4313      	orrs	r3, r2
 800cb4a:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800cb4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	d105      	bne.n	800cb60 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800cb54:	4b2a      	ldr	r3, [pc, #168]	; (800cc00 <HAL_RCC_OscConfig+0xccc>)
 800cb56:	68db      	ldr	r3, [r3, #12]
 800cb58:	4a29      	ldr	r2, [pc, #164]	; (800cc00 <HAL_RCC_OscConfig+0xccc>)
 800cb5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cb5e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800cb60:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800cb64:	2b01      	cmp	r3, #1
 800cb66:	d107      	bne.n	800cb78 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800cb68:	4b24      	ldr	r3, [pc, #144]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800cb6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cb6e:	4a23      	ldr	r2, [pc, #140]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800cb70:	f023 0304 	bic.w	r3, r3, #4
 800cb74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800cb78:	4b20      	ldr	r3, [pc, #128]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800cb7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb7c:	4a1f      	ldr	r2, [pc, #124]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800cb7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cb82:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800cb84:	4b1d      	ldr	r3, [pc, #116]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	4a1c      	ldr	r2, [pc, #112]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800cb8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cb8e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800cb90:	f7fa fe54 	bl	800783c <HAL_GetTick>
 800cb94:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800cb96:	e008      	b.n	800cbaa <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cb98:	f7fa fe50 	bl	800783c <HAL_GetTick>
 800cb9c:	4602      	mov	r2, r0
 800cb9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cba0:	1ad3      	subs	r3, r2, r3
 800cba2:	2b02      	cmp	r3, #2
 800cba4:	d901      	bls.n	800cbaa <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 800cba6:	2303      	movs	r3, #3
 800cba8:	e099      	b.n	800ccde <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800cbaa:	4b14      	ldr	r3, [pc, #80]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d0f0      	beq.n	800cb98 <HAL_RCC_OscConfig+0xc64>
 800cbb6:	e091      	b.n	800ccdc <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800cbb8:	4b10      	ldr	r3, [pc, #64]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	4a0f      	ldr	r2, [pc, #60]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800cbbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cbc2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800cbc4:	f7fa fe3a 	bl	800783c <HAL_GetTick>
 800cbc8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800cbca:	e008      	b.n	800cbde <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cbcc:	f7fa fe36 	bl	800783c <HAL_GetTick>
 800cbd0:	4602      	mov	r2, r0
 800cbd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd4:	1ad3      	subs	r3, r2, r3
 800cbd6:	2b02      	cmp	r3, #2
 800cbd8:	d901      	bls.n	800cbde <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800cbda:	2303      	movs	r3, #3
 800cbdc:	e07f      	b.n	800ccde <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800cbde:	4b07      	ldr	r3, [pc, #28]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d1f0      	bne.n	800cbcc <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800cbea:	4b04      	ldr	r3, [pc, #16]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800cbec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbee:	4a03      	ldr	r2, [pc, #12]	; (800cbfc <HAL_RCC_OscConfig+0xcc8>)
 800cbf0:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800cbf4:	f023 0303 	bic.w	r3, r3, #3
 800cbf8:	6293      	str	r3, [r2, #40]	; 0x28
 800cbfa:	e06f      	b.n	800ccdc <HAL_RCC_OscConfig+0xda8>
 800cbfc:	46020c00 	.word	0x46020c00
 800cc00:	46020800 	.word	0x46020800
 800cc04:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800cc08:	4b37      	ldr	r3, [pc, #220]	; (800cce8 <HAL_RCC_OscConfig+0xdb4>)
 800cc0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc0c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800cc0e:	4b36      	ldr	r3, [pc, #216]	; (800cce8 <HAL_RCC_OscConfig+0xdb4>)
 800cc10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc12:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc18:	2b01      	cmp	r3, #1
 800cc1a:	d039      	beq.n	800cc90 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800cc1c:	69fb      	ldr	r3, [r7, #28]
 800cc1e:	f003 0203 	and.w	r2, r3, #3
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d132      	bne.n	800cc90 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800cc2a:	69fb      	ldr	r3, [r7, #28]
 800cc2c:	0a1b      	lsrs	r3, r3, #8
 800cc2e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc36:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	d129      	bne.n	800cc90 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800cc3c:	69fb      	ldr	r3, [r7, #28]
 800cc3e:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800cc46:	429a      	cmp	r2, r3
 800cc48:	d122      	bne.n	800cc90 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800cc4a:	69bb      	ldr	r3, [r7, #24]
 800cc4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc54:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d11a      	bne.n	800cc90 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800cc5a:	69bb      	ldr	r3, [r7, #24]
 800cc5c:	0a5b      	lsrs	r3, r3, #9
 800cc5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc66:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	d111      	bne.n	800cc90 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800cc6c:	69bb      	ldr	r3, [r7, #24]
 800cc6e:	0c1b      	lsrs	r3, r3, #16
 800cc70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc78:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	d108      	bne.n	800cc90 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800cc7e:	69bb      	ldr	r3, [r7, #24]
 800cc80:	0e1b      	lsrs	r3, r3, #24
 800cc82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc8a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	d001      	beq.n	800cc94 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800cc90:	2301      	movs	r3, #1
 800cc92:	e024      	b.n	800ccde <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800cc94:	4b14      	ldr	r3, [pc, #80]	; (800cce8 <HAL_RCC_OscConfig+0xdb4>)
 800cc96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc98:	08db      	lsrs	r3, r3, #3
 800cc9a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d01a      	beq.n	800ccdc <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800cca6:	4b10      	ldr	r3, [pc, #64]	; (800cce8 <HAL_RCC_OscConfig+0xdb4>)
 800cca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccaa:	4a0f      	ldr	r2, [pc, #60]	; (800cce8 <HAL_RCC_OscConfig+0xdb4>)
 800ccac:	f023 0310 	bic.w	r3, r3, #16
 800ccb0:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ccb2:	f7fa fdc3 	bl	800783c <HAL_GetTick>
 800ccb6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800ccb8:	bf00      	nop
 800ccba:	f7fa fdbf 	bl	800783c <HAL_GetTick>
 800ccbe:	4602      	mov	r2, r0
 800ccc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	d0f9      	beq.n	800ccba <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ccca:	4a07      	ldr	r2, [pc, #28]	; (800cce8 <HAL_RCC_OscConfig+0xdb4>)
 800cccc:	00db      	lsls	r3, r3, #3
 800ccce:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800ccd0:	4b05      	ldr	r3, [pc, #20]	; (800cce8 <HAL_RCC_OscConfig+0xdb4>)
 800ccd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccd4:	4a04      	ldr	r2, [pc, #16]	; (800cce8 <HAL_RCC_OscConfig+0xdb4>)
 800ccd6:	f043 0310 	orr.w	r3, r3, #16
 800ccda:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 800ccdc:	2300      	movs	r3, #0
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3738      	adds	r7, #56	; 0x38
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}
 800cce6:	bf00      	nop
 800cce8:	46020c00 	.word	0x46020c00

0800ccec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b086      	sub	sp, #24
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d101      	bne.n	800cd00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	e1d9      	b.n	800d0b4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cd00:	4b9b      	ldr	r3, [pc, #620]	; (800cf70 <HAL_RCC_ClockConfig+0x284>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f003 030f 	and.w	r3, r3, #15
 800cd08:	683a      	ldr	r2, [r7, #0]
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d910      	bls.n	800cd30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cd0e:	4b98      	ldr	r3, [pc, #608]	; (800cf70 <HAL_RCC_ClockConfig+0x284>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	f023 020f 	bic.w	r2, r3, #15
 800cd16:	4996      	ldr	r1, [pc, #600]	; (800cf70 <HAL_RCC_ClockConfig+0x284>)
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	4313      	orrs	r3, r2
 800cd1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cd1e:	4b94      	ldr	r3, [pc, #592]	; (800cf70 <HAL_RCC_ClockConfig+0x284>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	f003 030f 	and.w	r3, r3, #15
 800cd26:	683a      	ldr	r2, [r7, #0]
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d001      	beq.n	800cd30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	e1c1      	b.n	800d0b4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f003 0310 	and.w	r3, r3, #16
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d010      	beq.n	800cd5e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	695a      	ldr	r2, [r3, #20]
 800cd40:	4b8c      	ldr	r3, [pc, #560]	; (800cf74 <HAL_RCC_ClockConfig+0x288>)
 800cd42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	d908      	bls.n	800cd5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800cd4c:	4b89      	ldr	r3, [pc, #548]	; (800cf74 <HAL_RCC_ClockConfig+0x288>)
 800cd4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	695b      	ldr	r3, [r3, #20]
 800cd58:	4986      	ldr	r1, [pc, #536]	; (800cf74 <HAL_RCC_ClockConfig+0x288>)
 800cd5a:	4313      	orrs	r3, r2
 800cd5c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	f003 0308 	and.w	r3, r3, #8
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d012      	beq.n	800cd90 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	691a      	ldr	r2, [r3, #16]
 800cd6e:	4b81      	ldr	r3, [pc, #516]	; (800cf74 <HAL_RCC_ClockConfig+0x288>)
 800cd70:	6a1b      	ldr	r3, [r3, #32]
 800cd72:	091b      	lsrs	r3, r3, #4
 800cd74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	d909      	bls.n	800cd90 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800cd7c:	4b7d      	ldr	r3, [pc, #500]	; (800cf74 <HAL_RCC_ClockConfig+0x288>)
 800cd7e:	6a1b      	ldr	r3, [r3, #32]
 800cd80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	691b      	ldr	r3, [r3, #16]
 800cd88:	011b      	lsls	r3, r3, #4
 800cd8a:	497a      	ldr	r1, [pc, #488]	; (800cf74 <HAL_RCC_ClockConfig+0x288>)
 800cd8c:	4313      	orrs	r3, r2
 800cd8e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f003 0304 	and.w	r3, r3, #4
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d010      	beq.n	800cdbe <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	68da      	ldr	r2, [r3, #12]
 800cda0:	4b74      	ldr	r3, [pc, #464]	; (800cf74 <HAL_RCC_ClockConfig+0x288>)
 800cda2:	6a1b      	ldr	r3, [r3, #32]
 800cda4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d908      	bls.n	800cdbe <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800cdac:	4b71      	ldr	r3, [pc, #452]	; (800cf74 <HAL_RCC_ClockConfig+0x288>)
 800cdae:	6a1b      	ldr	r3, [r3, #32]
 800cdb0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	68db      	ldr	r3, [r3, #12]
 800cdb8:	496e      	ldr	r1, [pc, #440]	; (800cf74 <HAL_RCC_ClockConfig+0x288>)
 800cdba:	4313      	orrs	r3, r2
 800cdbc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f003 0302 	and.w	r3, r3, #2
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d010      	beq.n	800cdec <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	689a      	ldr	r2, [r3, #8]
 800cdce:	4b69      	ldr	r3, [pc, #420]	; (800cf74 <HAL_RCC_ClockConfig+0x288>)
 800cdd0:	6a1b      	ldr	r3, [r3, #32]
 800cdd2:	f003 030f 	and.w	r3, r3, #15
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	d908      	bls.n	800cdec <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800cdda:	4b66      	ldr	r3, [pc, #408]	; (800cf74 <HAL_RCC_ClockConfig+0x288>)
 800cddc:	6a1b      	ldr	r3, [r3, #32]
 800cdde:	f023 020f 	bic.w	r2, r3, #15
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	689b      	ldr	r3, [r3, #8]
 800cde6:	4963      	ldr	r1, [pc, #396]	; (800cf74 <HAL_RCC_ClockConfig+0x288>)
 800cde8:	4313      	orrs	r3, r2
 800cdea:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f003 0301 	and.w	r3, r3, #1
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	f000 80d2 	beq.w	800cf9e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	685b      	ldr	r3, [r3, #4]
 800ce02:	2b03      	cmp	r3, #3
 800ce04:	d143      	bne.n	800ce8e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ce06:	4b5b      	ldr	r3, [pc, #364]	; (800cf74 <HAL_RCC_ClockConfig+0x288>)
 800ce08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ce0c:	f003 0304 	and.w	r3, r3, #4
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d110      	bne.n	800ce36 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800ce14:	4b57      	ldr	r3, [pc, #348]	; (800cf74 <HAL_RCC_ClockConfig+0x288>)
 800ce16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ce1a:	4a56      	ldr	r2, [pc, #344]	; (800cf74 <HAL_RCC_ClockConfig+0x288>)
 800ce1c:	f043 0304 	orr.w	r3, r3, #4
 800ce20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800ce24:	4b53      	ldr	r3, [pc, #332]	; (800cf74 <HAL_RCC_ClockConfig+0x288>)
 800ce26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ce2a:	f003 0304 	and.w	r3, r3, #4
 800ce2e:	60bb      	str	r3, [r7, #8]
 800ce30:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800ce32:	2301      	movs	r3, #1
 800ce34:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800ce36:	f7fa fd01 	bl	800783c <HAL_GetTick>
 800ce3a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800ce3c:	4b4e      	ldr	r3, [pc, #312]	; (800cf78 <HAL_RCC_ClockConfig+0x28c>)
 800ce3e:	68db      	ldr	r3, [r3, #12]
 800ce40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d00f      	beq.n	800ce68 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800ce48:	e008      	b.n	800ce5c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800ce4a:	f7fa fcf7 	bl	800783c <HAL_GetTick>
 800ce4e:	4602      	mov	r2, r0
 800ce50:	693b      	ldr	r3, [r7, #16]
 800ce52:	1ad3      	subs	r3, r2, r3
 800ce54:	2b02      	cmp	r3, #2
 800ce56:	d901      	bls.n	800ce5c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800ce58:	2303      	movs	r3, #3
 800ce5a:	e12b      	b.n	800d0b4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800ce5c:	4b46      	ldr	r3, [pc, #280]	; (800cf78 <HAL_RCC_ClockConfig+0x28c>)
 800ce5e:	68db      	ldr	r3, [r3, #12]
 800ce60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d0f0      	beq.n	800ce4a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800ce68:	7dfb      	ldrb	r3, [r7, #23]
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	d107      	bne.n	800ce7e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800ce6e:	4b41      	ldr	r3, [pc, #260]	; (800cf74 <HAL_RCC_ClockConfig+0x288>)
 800ce70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ce74:	4a3f      	ldr	r2, [pc, #252]	; (800cf74 <HAL_RCC_ClockConfig+0x288>)
 800ce76:	f023 0304 	bic.w	r3, r3, #4
 800ce7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800ce7e:	4b3d      	ldr	r3, [pc, #244]	; (800cf74 <HAL_RCC_ClockConfig+0x288>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d121      	bne.n	800cece <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	e112      	b.n	800d0b4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	685b      	ldr	r3, [r3, #4]
 800ce92:	2b02      	cmp	r3, #2
 800ce94:	d107      	bne.n	800cea6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ce96:	4b37      	ldr	r3, [pc, #220]	; (800cf74 <HAL_RCC_ClockConfig+0x288>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d115      	bne.n	800cece <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800cea2:	2301      	movs	r3, #1
 800cea4:	e106      	b.n	800d0b4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	685b      	ldr	r3, [r3, #4]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d107      	bne.n	800cebe <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800ceae:	4b31      	ldr	r3, [pc, #196]	; (800cf74 <HAL_RCC_ClockConfig+0x288>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f003 0304 	and.w	r3, r3, #4
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d109      	bne.n	800cece <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800ceba:	2301      	movs	r3, #1
 800cebc:	e0fa      	b.n	800d0b4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cebe:	4b2d      	ldr	r3, [pc, #180]	; (800cf74 <HAL_RCC_ClockConfig+0x288>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d101      	bne.n	800cece <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800ceca:	2301      	movs	r3, #1
 800cecc:	e0f2      	b.n	800d0b4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800cece:	4b29      	ldr	r3, [pc, #164]	; (800cf74 <HAL_RCC_ClockConfig+0x288>)
 800ced0:	69db      	ldr	r3, [r3, #28]
 800ced2:	f023 0203 	bic.w	r2, r3, #3
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	685b      	ldr	r3, [r3, #4]
 800ceda:	4926      	ldr	r1, [pc, #152]	; (800cf74 <HAL_RCC_ClockConfig+0x288>)
 800cedc:	4313      	orrs	r3, r2
 800cede:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800cee0:	f7fa fcac 	bl	800783c <HAL_GetTick>
 800cee4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	685b      	ldr	r3, [r3, #4]
 800ceea:	2b03      	cmp	r3, #3
 800ceec:	d112      	bne.n	800cf14 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ceee:	e00a      	b.n	800cf06 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cef0:	f7fa fca4 	bl	800783c <HAL_GetTick>
 800cef4:	4602      	mov	r2, r0
 800cef6:	693b      	ldr	r3, [r7, #16]
 800cef8:	1ad3      	subs	r3, r2, r3
 800cefa:	f241 3288 	movw	r2, #5000	; 0x1388
 800cefe:	4293      	cmp	r3, r2
 800cf00:	d901      	bls.n	800cf06 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800cf02:	2303      	movs	r3, #3
 800cf04:	e0d6      	b.n	800d0b4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cf06:	4b1b      	ldr	r3, [pc, #108]	; (800cf74 <HAL_RCC_ClockConfig+0x288>)
 800cf08:	69db      	ldr	r3, [r3, #28]
 800cf0a:	f003 030c 	and.w	r3, r3, #12
 800cf0e:	2b0c      	cmp	r3, #12
 800cf10:	d1ee      	bne.n	800cef0 <HAL_RCC_ClockConfig+0x204>
 800cf12:	e044      	b.n	800cf9e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	685b      	ldr	r3, [r3, #4]
 800cf18:	2b02      	cmp	r3, #2
 800cf1a:	d112      	bne.n	800cf42 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800cf1c:	e00a      	b.n	800cf34 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cf1e:	f7fa fc8d 	bl	800783c <HAL_GetTick>
 800cf22:	4602      	mov	r2, r0
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	1ad3      	subs	r3, r2, r3
 800cf28:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d901      	bls.n	800cf34 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800cf30:	2303      	movs	r3, #3
 800cf32:	e0bf      	b.n	800d0b4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800cf34:	4b0f      	ldr	r3, [pc, #60]	; (800cf74 <HAL_RCC_ClockConfig+0x288>)
 800cf36:	69db      	ldr	r3, [r3, #28]
 800cf38:	f003 030c 	and.w	r3, r3, #12
 800cf3c:	2b08      	cmp	r3, #8
 800cf3e:	d1ee      	bne.n	800cf1e <HAL_RCC_ClockConfig+0x232>
 800cf40:	e02d      	b.n	800cf9e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	685b      	ldr	r3, [r3, #4]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d123      	bne.n	800cf92 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800cf4a:	e00a      	b.n	800cf62 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cf4c:	f7fa fc76 	bl	800783c <HAL_GetTick>
 800cf50:	4602      	mov	r2, r0
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	1ad3      	subs	r3, r2, r3
 800cf56:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d901      	bls.n	800cf62 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800cf5e:	2303      	movs	r3, #3
 800cf60:	e0a8      	b.n	800d0b4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800cf62:	4b04      	ldr	r3, [pc, #16]	; (800cf74 <HAL_RCC_ClockConfig+0x288>)
 800cf64:	69db      	ldr	r3, [r3, #28]
 800cf66:	f003 030c 	and.w	r3, r3, #12
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d1ee      	bne.n	800cf4c <HAL_RCC_ClockConfig+0x260>
 800cf6e:	e016      	b.n	800cf9e <HAL_RCC_ClockConfig+0x2b2>
 800cf70:	40022000 	.word	0x40022000
 800cf74:	46020c00 	.word	0x46020c00
 800cf78:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cf7c:	f7fa fc5e 	bl	800783c <HAL_GetTick>
 800cf80:	4602      	mov	r2, r0
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	1ad3      	subs	r3, r2, r3
 800cf86:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf8a:	4293      	cmp	r3, r2
 800cf8c:	d901      	bls.n	800cf92 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800cf8e:	2303      	movs	r3, #3
 800cf90:	e090      	b.n	800d0b4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800cf92:	4b4a      	ldr	r3, [pc, #296]	; (800d0bc <HAL_RCC_ClockConfig+0x3d0>)
 800cf94:	69db      	ldr	r3, [r3, #28]
 800cf96:	f003 030c 	and.w	r3, r3, #12
 800cf9a:	2b04      	cmp	r3, #4
 800cf9c:	d1ee      	bne.n	800cf7c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	f003 0302 	and.w	r3, r3, #2
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d010      	beq.n	800cfcc <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	689a      	ldr	r2, [r3, #8]
 800cfae:	4b43      	ldr	r3, [pc, #268]	; (800d0bc <HAL_RCC_ClockConfig+0x3d0>)
 800cfb0:	6a1b      	ldr	r3, [r3, #32]
 800cfb2:	f003 030f 	and.w	r3, r3, #15
 800cfb6:	429a      	cmp	r2, r3
 800cfb8:	d208      	bcs.n	800cfcc <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800cfba:	4b40      	ldr	r3, [pc, #256]	; (800d0bc <HAL_RCC_ClockConfig+0x3d0>)
 800cfbc:	6a1b      	ldr	r3, [r3, #32]
 800cfbe:	f023 020f 	bic.w	r2, r3, #15
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	689b      	ldr	r3, [r3, #8]
 800cfc6:	493d      	ldr	r1, [pc, #244]	; (800d0bc <HAL_RCC_ClockConfig+0x3d0>)
 800cfc8:	4313      	orrs	r3, r2
 800cfca:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cfcc:	4b3c      	ldr	r3, [pc, #240]	; (800d0c0 <HAL_RCC_ClockConfig+0x3d4>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	f003 030f 	and.w	r3, r3, #15
 800cfd4:	683a      	ldr	r2, [r7, #0]
 800cfd6:	429a      	cmp	r2, r3
 800cfd8:	d210      	bcs.n	800cffc <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cfda:	4b39      	ldr	r3, [pc, #228]	; (800d0c0 <HAL_RCC_ClockConfig+0x3d4>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	f023 020f 	bic.w	r2, r3, #15
 800cfe2:	4937      	ldr	r1, [pc, #220]	; (800d0c0 <HAL_RCC_ClockConfig+0x3d4>)
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	4313      	orrs	r3, r2
 800cfe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cfea:	4b35      	ldr	r3, [pc, #212]	; (800d0c0 <HAL_RCC_ClockConfig+0x3d4>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f003 030f 	and.w	r3, r3, #15
 800cff2:	683a      	ldr	r2, [r7, #0]
 800cff4:	429a      	cmp	r2, r3
 800cff6:	d001      	beq.n	800cffc <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800cff8:	2301      	movs	r3, #1
 800cffa:	e05b      	b.n	800d0b4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	f003 0304 	and.w	r3, r3, #4
 800d004:	2b00      	cmp	r3, #0
 800d006:	d010      	beq.n	800d02a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	68da      	ldr	r2, [r3, #12]
 800d00c:	4b2b      	ldr	r3, [pc, #172]	; (800d0bc <HAL_RCC_ClockConfig+0x3d0>)
 800d00e:	6a1b      	ldr	r3, [r3, #32]
 800d010:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d014:	429a      	cmp	r2, r3
 800d016:	d208      	bcs.n	800d02a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800d018:	4b28      	ldr	r3, [pc, #160]	; (800d0bc <HAL_RCC_ClockConfig+0x3d0>)
 800d01a:	6a1b      	ldr	r3, [r3, #32]
 800d01c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	68db      	ldr	r3, [r3, #12]
 800d024:	4925      	ldr	r1, [pc, #148]	; (800d0bc <HAL_RCC_ClockConfig+0x3d0>)
 800d026:	4313      	orrs	r3, r2
 800d028:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	f003 0308 	and.w	r3, r3, #8
 800d032:	2b00      	cmp	r3, #0
 800d034:	d012      	beq.n	800d05c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	691a      	ldr	r2, [r3, #16]
 800d03a:	4b20      	ldr	r3, [pc, #128]	; (800d0bc <HAL_RCC_ClockConfig+0x3d0>)
 800d03c:	6a1b      	ldr	r3, [r3, #32]
 800d03e:	091b      	lsrs	r3, r3, #4
 800d040:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d044:	429a      	cmp	r2, r3
 800d046:	d209      	bcs.n	800d05c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800d048:	4b1c      	ldr	r3, [pc, #112]	; (800d0bc <HAL_RCC_ClockConfig+0x3d0>)
 800d04a:	6a1b      	ldr	r3, [r3, #32]
 800d04c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	691b      	ldr	r3, [r3, #16]
 800d054:	011b      	lsls	r3, r3, #4
 800d056:	4919      	ldr	r1, [pc, #100]	; (800d0bc <HAL_RCC_ClockConfig+0x3d0>)
 800d058:	4313      	orrs	r3, r2
 800d05a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	f003 0310 	and.w	r3, r3, #16
 800d064:	2b00      	cmp	r3, #0
 800d066:	d010      	beq.n	800d08a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	695a      	ldr	r2, [r3, #20]
 800d06c:	4b13      	ldr	r3, [pc, #76]	; (800d0bc <HAL_RCC_ClockConfig+0x3d0>)
 800d06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d070:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d074:	429a      	cmp	r2, r3
 800d076:	d208      	bcs.n	800d08a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800d078:	4b10      	ldr	r3, [pc, #64]	; (800d0bc <HAL_RCC_ClockConfig+0x3d0>)
 800d07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d07c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	695b      	ldr	r3, [r3, #20]
 800d084:	490d      	ldr	r1, [pc, #52]	; (800d0bc <HAL_RCC_ClockConfig+0x3d0>)
 800d086:	4313      	orrs	r3, r2
 800d088:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800d08a:	f000 f821 	bl	800d0d0 <HAL_RCC_GetSysClockFreq>
 800d08e:	4602      	mov	r2, r0
 800d090:	4b0a      	ldr	r3, [pc, #40]	; (800d0bc <HAL_RCC_ClockConfig+0x3d0>)
 800d092:	6a1b      	ldr	r3, [r3, #32]
 800d094:	f003 030f 	and.w	r3, r3, #15
 800d098:	490a      	ldr	r1, [pc, #40]	; (800d0c4 <HAL_RCC_ClockConfig+0x3d8>)
 800d09a:	5ccb      	ldrb	r3, [r1, r3]
 800d09c:	fa22 f303 	lsr.w	r3, r2, r3
 800d0a0:	4a09      	ldr	r2, [pc, #36]	; (800d0c8 <HAL_RCC_ClockConfig+0x3dc>)
 800d0a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800d0a4:	4b09      	ldr	r3, [pc, #36]	; (800d0cc <HAL_RCC_ClockConfig+0x3e0>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f7f4 fe51 	bl	8001d50 <HAL_InitTick>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	73fb      	strb	r3, [r7, #15]

  return status;
 800d0b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3718      	adds	r7, #24
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}
 800d0bc:	46020c00 	.word	0x46020c00
 800d0c0:	40022000 	.word	0x40022000
 800d0c4:	0802b7f8 	.word	0x0802b7f8
 800d0c8:	20000048 	.word	0x20000048
 800d0cc:	2000004c 	.word	0x2000004c

0800d0d0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b08b      	sub	sp, #44	; 0x2c
 800d0d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d0de:	4b7b      	ldr	r3, [pc, #492]	; (800d2cc <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d0e0:	69db      	ldr	r3, [r3, #28]
 800d0e2:	f003 030c 	and.w	r3, r3, #12
 800d0e6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d0e8:	4b78      	ldr	r3, [pc, #480]	; (800d2cc <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d0ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0ec:	f003 0303 	and.w	r3, r3, #3
 800d0f0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800d0f2:	69bb      	ldr	r3, [r7, #24]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d005      	beq.n	800d104 <HAL_RCC_GetSysClockFreq+0x34>
 800d0f8:	69bb      	ldr	r3, [r7, #24]
 800d0fa:	2b0c      	cmp	r3, #12
 800d0fc:	d121      	bne.n	800d142 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	2b01      	cmp	r3, #1
 800d102:	d11e      	bne.n	800d142 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800d104:	4b71      	ldr	r3, [pc, #452]	; (800d2cc <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d106:	689b      	ldr	r3, [r3, #8]
 800d108:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d107      	bne.n	800d120 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800d110:	4b6e      	ldr	r3, [pc, #440]	; (800d2cc <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d112:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d116:	0b1b      	lsrs	r3, r3, #12
 800d118:	f003 030f 	and.w	r3, r3, #15
 800d11c:	627b      	str	r3, [r7, #36]	; 0x24
 800d11e:	e005      	b.n	800d12c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800d120:	4b6a      	ldr	r3, [pc, #424]	; (800d2cc <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d122:	689b      	ldr	r3, [r3, #8]
 800d124:	0f1b      	lsrs	r3, r3, #28
 800d126:	f003 030f 	and.w	r3, r3, #15
 800d12a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800d12c:	4a68      	ldr	r2, [pc, #416]	; (800d2d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800d12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d134:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800d136:	69bb      	ldr	r3, [r7, #24]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d110      	bne.n	800d15e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800d13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d13e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800d140:	e00d      	b.n	800d15e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d142:	4b62      	ldr	r3, [pc, #392]	; (800d2cc <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d144:	69db      	ldr	r3, [r3, #28]
 800d146:	f003 030c 	and.w	r3, r3, #12
 800d14a:	2b04      	cmp	r3, #4
 800d14c:	d102      	bne.n	800d154 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d14e:	4b61      	ldr	r3, [pc, #388]	; (800d2d4 <HAL_RCC_GetSysClockFreq+0x204>)
 800d150:	623b      	str	r3, [r7, #32]
 800d152:	e004      	b.n	800d15e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d154:	69bb      	ldr	r3, [r7, #24]
 800d156:	2b08      	cmp	r3, #8
 800d158:	d101      	bne.n	800d15e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d15a:	4b5e      	ldr	r3, [pc, #376]	; (800d2d4 <HAL_RCC_GetSysClockFreq+0x204>)
 800d15c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d15e:	69bb      	ldr	r3, [r7, #24]
 800d160:	2b0c      	cmp	r3, #12
 800d162:	f040 80ac 	bne.w	800d2be <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800d166:	4b59      	ldr	r3, [pc, #356]	; (800d2cc <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d16a:	f003 0303 	and.w	r3, r3, #3
 800d16e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800d170:	4b56      	ldr	r3, [pc, #344]	; (800d2cc <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d174:	0a1b      	lsrs	r3, r3, #8
 800d176:	f003 030f 	and.w	r3, r3, #15
 800d17a:	3301      	adds	r3, #1
 800d17c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800d17e:	4b53      	ldr	r3, [pc, #332]	; (800d2cc <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d182:	091b      	lsrs	r3, r3, #4
 800d184:	f003 0301 	and.w	r3, r3, #1
 800d188:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800d18a:	4b50      	ldr	r3, [pc, #320]	; (800d2cc <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d18c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d18e:	08db      	lsrs	r3, r3, #3
 800d190:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d194:	68ba      	ldr	r2, [r7, #8]
 800d196:	fb02 f303 	mul.w	r3, r2, r3
 800d19a:	ee07 3a90 	vmov	s15, r3
 800d19e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1a2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	f000 8086 	beq.w	800d2ba <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	2b02      	cmp	r3, #2
 800d1b2:	d003      	beq.n	800d1bc <HAL_RCC_GetSysClockFreq+0xec>
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	2b03      	cmp	r3, #3
 800d1b8:	d022      	beq.n	800d200 <HAL_RCC_GetSysClockFreq+0x130>
 800d1ba:	e043      	b.n	800d244 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	ee07 3a90 	vmov	s15, r3
 800d1c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1c6:	eddf 6a44 	vldr	s13, [pc, #272]	; 800d2d8 <HAL_RCC_GetSysClockFreq+0x208>
 800d1ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1ce:	4b3f      	ldr	r3, [pc, #252]	; (800d2cc <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d1d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1d6:	ee07 3a90 	vmov	s15, r3
 800d1da:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d1de:	ed97 6a01 	vldr	s12, [r7, #4]
 800d1e2:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800d2dc <HAL_RCC_GetSysClockFreq+0x20c>
 800d1e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d1ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d1ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d1f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1fa:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800d1fe:	e046      	b.n	800d28e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	ee07 3a90 	vmov	s15, r3
 800d206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d20a:	eddf 6a33 	vldr	s13, [pc, #204]	; 800d2d8 <HAL_RCC_GetSysClockFreq+0x208>
 800d20e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d212:	4b2e      	ldr	r3, [pc, #184]	; (800d2cc <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d21a:	ee07 3a90 	vmov	s15, r3
 800d21e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d222:	ed97 6a01 	vldr	s12, [r7, #4]
 800d226:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800d2dc <HAL_RCC_GetSysClockFreq+0x20c>
 800d22a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d22e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d236:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d23a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d23e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800d242:	e024      	b.n	800d28e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d246:	ee07 3a90 	vmov	s15, r3
 800d24a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	ee07 3a90 	vmov	s15, r3
 800d254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d258:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d25c:	4b1b      	ldr	r3, [pc, #108]	; (800d2cc <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d25e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d264:	ee07 3a90 	vmov	s15, r3
 800d268:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d26c:	ed97 6a01 	vldr	s12, [r7, #4]
 800d270:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800d2dc <HAL_RCC_GetSysClockFreq+0x20c>
 800d274:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d278:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d27c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d280:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d284:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d288:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800d28c:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800d28e:	4b0f      	ldr	r3, [pc, #60]	; (800d2cc <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d292:	0e1b      	lsrs	r3, r3, #24
 800d294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d298:	3301      	adds	r3, #1
 800d29a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	ee07 3a90 	vmov	s15, r3
 800d2a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d2a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d2aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d2ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2b2:	ee17 3a90 	vmov	r3, s15
 800d2b6:	623b      	str	r3, [r7, #32]
 800d2b8:	e001      	b.n	800d2be <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800d2be:	6a3b      	ldr	r3, [r7, #32]
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	372c      	adds	r7, #44	; 0x2c
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ca:	4770      	bx	lr
 800d2cc:	46020c00 	.word	0x46020c00
 800d2d0:	0802b810 	.word	0x0802b810
 800d2d4:	00f42400 	.word	0x00f42400
 800d2d8:	4b742400 	.word	0x4b742400
 800d2dc:	46000000 	.word	0x46000000

0800d2e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800d2e4:	f7ff fef4 	bl	800d0d0 <HAL_RCC_GetSysClockFreq>
 800d2e8:	4602      	mov	r2, r0
 800d2ea:	4b07      	ldr	r3, [pc, #28]	; (800d308 <HAL_RCC_GetHCLKFreq+0x28>)
 800d2ec:	6a1b      	ldr	r3, [r3, #32]
 800d2ee:	f003 030f 	and.w	r3, r3, #15
 800d2f2:	4906      	ldr	r1, [pc, #24]	; (800d30c <HAL_RCC_GetHCLKFreq+0x2c>)
 800d2f4:	5ccb      	ldrb	r3, [r1, r3]
 800d2f6:	fa22 f303 	lsr.w	r3, r2, r3
 800d2fa:	4a05      	ldr	r2, [pc, #20]	; (800d310 <HAL_RCC_GetHCLKFreq+0x30>)
 800d2fc:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800d2fe:	4b04      	ldr	r3, [pc, #16]	; (800d310 <HAL_RCC_GetHCLKFreq+0x30>)
 800d300:	681b      	ldr	r3, [r3, #0]
}
 800d302:	4618      	mov	r0, r3
 800d304:	bd80      	pop	{r7, pc}
 800d306:	bf00      	nop
 800d308:	46020c00 	.word	0x46020c00
 800d30c:	0802b7f8 	.word	0x0802b7f8
 800d310:	20000048 	.word	0x20000048

0800d314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800d318:	f7ff ffe2 	bl	800d2e0 <HAL_RCC_GetHCLKFreq>
 800d31c:	4602      	mov	r2, r0
 800d31e:	4b05      	ldr	r3, [pc, #20]	; (800d334 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d320:	6a1b      	ldr	r3, [r3, #32]
 800d322:	091b      	lsrs	r3, r3, #4
 800d324:	f003 0307 	and.w	r3, r3, #7
 800d328:	4903      	ldr	r1, [pc, #12]	; (800d338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d32a:	5ccb      	ldrb	r3, [r1, r3]
 800d32c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d330:	4618      	mov	r0, r3
 800d332:	bd80      	pop	{r7, pc}
 800d334:	46020c00 	.word	0x46020c00
 800d338:	0802b808 	.word	0x0802b808

0800d33c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800d340:	f7ff ffce 	bl	800d2e0 <HAL_RCC_GetHCLKFreq>
 800d344:	4602      	mov	r2, r0
 800d346:	4b05      	ldr	r3, [pc, #20]	; (800d35c <HAL_RCC_GetPCLK2Freq+0x20>)
 800d348:	6a1b      	ldr	r3, [r3, #32]
 800d34a:	0a1b      	lsrs	r3, r3, #8
 800d34c:	f003 0307 	and.w	r3, r3, #7
 800d350:	4903      	ldr	r1, [pc, #12]	; (800d360 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d352:	5ccb      	ldrb	r3, [r1, r3]
 800d354:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d358:	4618      	mov	r0, r3
 800d35a:	bd80      	pop	{r7, pc}
 800d35c:	46020c00 	.word	0x46020c00
 800d360:	0802b808 	.word	0x0802b808

0800d364 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800d368:	f7ff ffba 	bl	800d2e0 <HAL_RCC_GetHCLKFreq>
 800d36c:	4602      	mov	r2, r0
 800d36e:	4b05      	ldr	r3, [pc, #20]	; (800d384 <HAL_RCC_GetPCLK3Freq+0x20>)
 800d370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d372:	091b      	lsrs	r3, r3, #4
 800d374:	f003 0307 	and.w	r3, r3, #7
 800d378:	4903      	ldr	r1, [pc, #12]	; (800d388 <HAL_RCC_GetPCLK3Freq+0x24>)
 800d37a:	5ccb      	ldrb	r3, [r1, r3]
 800d37c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d380:	4618      	mov	r0, r3
 800d382:	bd80      	pop	{r7, pc}
 800d384:	46020c00 	.word	0x46020c00
 800d388:	0802b808 	.word	0x0802b808

0800d38c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b083      	sub	sp, #12
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
 800d394:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	221f      	movs	r2, #31
 800d39a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 800d39c:	4b15      	ldr	r3, [pc, #84]	; (800d3f4 <HAL_RCC_GetClockConfig+0x68>)
 800d39e:	69db      	ldr	r3, [r3, #28]
 800d3a0:	f003 0203 	and.w	r2, r3, #3
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 800d3a8:	4b12      	ldr	r3, [pc, #72]	; (800d3f4 <HAL_RCC_GetClockConfig+0x68>)
 800d3aa:	6a1b      	ldr	r3, [r3, #32]
 800d3ac:	f003 020f 	and.w	r2, r3, #15
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 800d3b4:	4b0f      	ldr	r3, [pc, #60]	; (800d3f4 <HAL_RCC_GetClockConfig+0x68>)
 800d3b6:	6a1b      	ldr	r3, [r3, #32]
 800d3b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 800d3c0:	4b0c      	ldr	r3, [pc, #48]	; (800d3f4 <HAL_RCC_GetClockConfig+0x68>)
 800d3c2:	6a1b      	ldr	r3, [r3, #32]
 800d3c4:	091b      	lsrs	r3, r3, #4
 800d3c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 800d3ce:	4b09      	ldr	r3, [pc, #36]	; (800d3f4 <HAL_RCC_GetClockConfig+0x68>)
 800d3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3d2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d3da:	4b07      	ldr	r3, [pc, #28]	; (800d3f8 <HAL_RCC_GetClockConfig+0x6c>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	f003 020f 	and.w	r2, r3, #15
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	601a      	str	r2, [r3, #0]
}
 800d3e6:	bf00      	nop
 800d3e8:	370c      	adds	r7, #12
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f0:	4770      	bx	lr
 800d3f2:	bf00      	nop
 800d3f4:	46020c00 	.word	0x46020c00
 800d3f8:	40022000 	.word	0x40022000

0800d3fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b086      	sub	sp, #24
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800d404:	4b3e      	ldr	r3, [pc, #248]	; (800d500 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d406:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d40a:	f003 0304 	and.w	r3, r3, #4
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d003      	beq.n	800d41a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800d412:	f7fe fd11 	bl	800be38 <HAL_PWREx_GetVoltageRange>
 800d416:	6178      	str	r0, [r7, #20]
 800d418:	e019      	b.n	800d44e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800d41a:	4b39      	ldr	r3, [pc, #228]	; (800d500 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d41c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d420:	4a37      	ldr	r2, [pc, #220]	; (800d500 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d422:	f043 0304 	orr.w	r3, r3, #4
 800d426:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800d42a:	4b35      	ldr	r3, [pc, #212]	; (800d500 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d42c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d430:	f003 0304 	and.w	r3, r3, #4
 800d434:	60fb      	str	r3, [r7, #12]
 800d436:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800d438:	f7fe fcfe 	bl	800be38 <HAL_PWREx_GetVoltageRange>
 800d43c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800d43e:	4b30      	ldr	r3, [pc, #192]	; (800d500 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d444:	4a2e      	ldr	r2, [pc, #184]	; (800d500 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d446:	f023 0304 	bic.w	r3, r3, #4
 800d44a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d454:	d003      	beq.n	800d45e <RCC_SetFlashLatencyFromMSIRange+0x62>
 800d456:	697b      	ldr	r3, [r7, #20]
 800d458:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d45c:	d109      	bne.n	800d472 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d464:	d202      	bcs.n	800d46c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800d466:	2301      	movs	r3, #1
 800d468:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800d46a:	e033      	b.n	800d4d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800d46c:	2300      	movs	r3, #0
 800d46e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800d470:	e030      	b.n	800d4d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d478:	d208      	bcs.n	800d48c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d480:	d102      	bne.n	800d488 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800d482:	2303      	movs	r3, #3
 800d484:	613b      	str	r3, [r7, #16]
 800d486:	e025      	b.n	800d4d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800d488:	2301      	movs	r3, #1
 800d48a:	e035      	b.n	800d4f8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d492:	d90f      	bls.n	800d4b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d109      	bne.n	800d4ae <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d4a0:	d902      	bls.n	800d4a8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	613b      	str	r3, [r7, #16]
 800d4a6:	e015      	b.n	800d4d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	613b      	str	r3, [r7, #16]
 800d4ac:	e012      	b.n	800d4d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	613b      	str	r3, [r7, #16]
 800d4b2:	e00f      	b.n	800d4d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d4ba:	d109      	bne.n	800d4d0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d4c2:	d102      	bne.n	800d4ca <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	613b      	str	r3, [r7, #16]
 800d4c8:	e004      	b.n	800d4d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800d4ca:	2302      	movs	r3, #2
 800d4cc:	613b      	str	r3, [r7, #16]
 800d4ce:	e001      	b.n	800d4d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800d4d4:	4b0b      	ldr	r3, [pc, #44]	; (800d504 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	f023 020f 	bic.w	r2, r3, #15
 800d4dc:	4909      	ldr	r1, [pc, #36]	; (800d504 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	4313      	orrs	r3, r2
 800d4e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800d4e4:	4b07      	ldr	r3, [pc, #28]	; (800d504 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	f003 030f 	and.w	r3, r3, #15
 800d4ec:	693a      	ldr	r2, [r7, #16]
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	d001      	beq.n	800d4f6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	e000      	b.n	800d4f8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800d4f6:	2300      	movs	r3, #0
}
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	3718      	adds	r7, #24
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}
 800d500:	46020c00 	.word	0x46020c00
 800d504:	40022000 	.word	0x40022000

0800d508 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800d508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d50c:	b0c8      	sub	sp, #288	; 0x120
 800d50e:	af00      	add	r7, sp, #0
 800d510:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d514:	2300      	movs	r3, #0
 800d516:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d51a:	2300      	movs	r3, #0
 800d51c:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d520:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d528:	f002 0401 	and.w	r4, r2, #1
 800d52c:	2500      	movs	r5, #0
 800d52e:	ea54 0305 	orrs.w	r3, r4, r5
 800d532:	d00b      	beq.n	800d54c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800d534:	4bd5      	ldr	r3, [pc, #852]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d53a:	f023 0103 	bic.w	r1, r3, #3
 800d53e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d544:	4ad1      	ldr	r2, [pc, #836]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d546:	430b      	orrs	r3, r1
 800d548:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d54c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d554:	f002 0802 	and.w	r8, r2, #2
 800d558:	f04f 0900 	mov.w	r9, #0
 800d55c:	ea58 0309 	orrs.w	r3, r8, r9
 800d560:	d00b      	beq.n	800d57a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800d562:	4bca      	ldr	r3, [pc, #808]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d568:	f023 010c 	bic.w	r1, r3, #12
 800d56c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d572:	4ac6      	ldr	r2, [pc, #792]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d574:	430b      	orrs	r3, r1
 800d576:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d57a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d582:	f002 0a04 	and.w	sl, r2, #4
 800d586:	f04f 0b00 	mov.w	fp, #0
 800d58a:	ea5a 030b 	orrs.w	r3, sl, fp
 800d58e:	d00b      	beq.n	800d5a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800d590:	4bbe      	ldr	r3, [pc, #760]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d596:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800d59a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d59e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5a0:	4aba      	ldr	r2, [pc, #744]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d5a2:	430b      	orrs	r3, r1
 800d5a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d5a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b0:	f002 0308 	and.w	r3, r2, #8
 800d5b4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d5be:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800d5c2:	460b      	mov	r3, r1
 800d5c4:	4313      	orrs	r3, r2
 800d5c6:	d00b      	beq.n	800d5e0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800d5c8:	4bb0      	ldr	r3, [pc, #704]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d5ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d5ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d5d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d5d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d5d8:	4aac      	ldr	r2, [pc, #688]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d5da:	430b      	orrs	r3, r1
 800d5dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d5e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e8:	f002 0310 	and.w	r3, r2, #16
 800d5ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d5f6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800d5fa:	460b      	mov	r3, r1
 800d5fc:	4313      	orrs	r3, r2
 800d5fe:	d00b      	beq.n	800d618 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800d600:	4ba2      	ldr	r3, [pc, #648]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d606:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d60a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d60e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d610:	4a9e      	ldr	r2, [pc, #632]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d612:	430b      	orrs	r3, r1
 800d614:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800d618:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d620:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800d624:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d628:	2300      	movs	r3, #0
 800d62a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d62e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800d632:	460b      	mov	r3, r1
 800d634:	4313      	orrs	r3, r2
 800d636:	d00b      	beq.n	800d650 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800d638:	4b94      	ldr	r3, [pc, #592]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d63a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d63e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800d642:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d646:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d648:	4a90      	ldr	r2, [pc, #576]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d64a:	430b      	orrs	r3, r1
 800d64c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d650:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d658:	f002 0320 	and.w	r3, r2, #32
 800d65c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d660:	2300      	movs	r3, #0
 800d662:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d666:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800d66a:	460b      	mov	r3, r1
 800d66c:	4313      	orrs	r3, r2
 800d66e:	d00b      	beq.n	800d688 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800d670:	4b86      	ldr	r3, [pc, #536]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d672:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d676:	f023 0107 	bic.w	r1, r3, #7
 800d67a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d67e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d680:	4a82      	ldr	r2, [pc, #520]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d682:	430b      	orrs	r3, r1
 800d684:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d688:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d690:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800d694:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d698:	2300      	movs	r3, #0
 800d69a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d69e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800d6a2:	460b      	mov	r3, r1
 800d6a4:	4313      	orrs	r3, r2
 800d6a6:	d00b      	beq.n	800d6c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800d6a8:	4b78      	ldr	r3, [pc, #480]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d6aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d6ae:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800d6b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d6b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6b8:	4a74      	ldr	r2, [pc, #464]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d6ba:	430b      	orrs	r3, r1
 800d6bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d6c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800d6cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d6d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d6da:	460b      	mov	r3, r1
 800d6dc:	4313      	orrs	r3, r2
 800d6de:	d00b      	beq.n	800d6f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800d6e0:	4b6a      	ldr	r3, [pc, #424]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d6e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d6e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d6ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d6ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6f0:	4a66      	ldr	r2, [pc, #408]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d6f2:	430b      	orrs	r3, r1
 800d6f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d6f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d700:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800d704:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d708:	2300      	movs	r3, #0
 800d70a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d70e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800d712:	460b      	mov	r3, r1
 800d714:	4313      	orrs	r3, r2
 800d716:	d00b      	beq.n	800d730 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800d718:	4b5c      	ldr	r3, [pc, #368]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d71a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d71e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d722:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d728:	4a58      	ldr	r2, [pc, #352]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d72a:	430b      	orrs	r3, r1
 800d72c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d730:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d738:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800d73c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d740:	2300      	movs	r3, #0
 800d742:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d746:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800d74a:	460b      	mov	r3, r1
 800d74c:	4313      	orrs	r3, r2
 800d74e:	d00b      	beq.n	800d768 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800d750:	4b4e      	ldr	r3, [pc, #312]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d756:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800d75a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d75e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d760:	4a4a      	ldr	r2, [pc, #296]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d762:	430b      	orrs	r3, r1
 800d764:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800d768:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d770:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800d774:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d778:	2300      	movs	r3, #0
 800d77a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d77e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d782:	460b      	mov	r3, r1
 800d784:	4313      	orrs	r3, r2
 800d786:	d00b      	beq.n	800d7a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800d788:	4b40      	ldr	r3, [pc, #256]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d78a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d78e:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 800d792:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d796:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d798:	4a3c      	ldr	r2, [pc, #240]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d79a:	430b      	orrs	r3, r1
 800d79c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800d7a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800d7ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d7b6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800d7ba:	460b      	mov	r3, r1
 800d7bc:	4313      	orrs	r3, r2
 800d7be:	d00c      	beq.n	800d7da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800d7c0:	4b32      	ldr	r3, [pc, #200]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d7c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d7c6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800d7ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d7ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d7d2:	4a2e      	ldr	r2, [pc, #184]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d7d4:	430b      	orrs	r3, r1
 800d7d6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d7da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e2:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800d7e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d7f0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800d7f4:	460b      	mov	r3, r1
 800d7f6:	4313      	orrs	r3, r2
 800d7f8:	d00c      	beq.n	800d814 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800d7fa:	4b24      	ldr	r3, [pc, #144]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d7fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d800:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800d804:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d80c:	4a1f      	ldr	r2, [pc, #124]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d80e:	430b      	orrs	r3, r1
 800d810:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d814:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d81c:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800d820:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d824:	2300      	movs	r3, #0
 800d826:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d82a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d82e:	460b      	mov	r3, r1
 800d830:	4313      	orrs	r3, r2
 800d832:	d00c      	beq.n	800d84e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800d834:	4b15      	ldr	r3, [pc, #84]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d83a:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800d83e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d846:	4a11      	ldr	r2, [pc, #68]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d848:	430b      	orrs	r3, r1
 800d84a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800d84e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d856:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800d85a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d85e:	2300      	movs	r3, #0
 800d860:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d864:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800d868:	460b      	mov	r3, r1
 800d86a:	4313      	orrs	r3, r2
 800d86c:	d010      	beq.n	800d890 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800d86e:	4b07      	ldr	r3, [pc, #28]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d870:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d874:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d878:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d87c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d880:	4a02      	ldr	r2, [pc, #8]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d882:	430b      	orrs	r3, r1
 800d884:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800d888:	e002      	b.n	800d890 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800d88a:	bf00      	nop
 800d88c:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d890:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d898:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800d89c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d8a6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800d8aa:	460b      	mov	r3, r1
 800d8ac:	4313      	orrs	r3, r2
 800d8ae:	d04c      	beq.n	800d94a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800d8b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d8b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d8b8:	2b80      	cmp	r3, #128	; 0x80
 800d8ba:	d02d      	beq.n	800d918 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800d8bc:	2b80      	cmp	r3, #128	; 0x80
 800d8be:	d827      	bhi.n	800d910 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800d8c0:	2b60      	cmp	r3, #96	; 0x60
 800d8c2:	d02b      	beq.n	800d91c <HAL_RCCEx_PeriphCLKConfig+0x414>
 800d8c4:	2b60      	cmp	r3, #96	; 0x60
 800d8c6:	d823      	bhi.n	800d910 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800d8c8:	2b40      	cmp	r3, #64	; 0x40
 800d8ca:	d006      	beq.n	800d8da <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800d8cc:	2b40      	cmp	r3, #64	; 0x40
 800d8ce:	d81f      	bhi.n	800d910 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d009      	beq.n	800d8e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800d8d4:	2b20      	cmp	r3, #32
 800d8d6:	d011      	beq.n	800d8fc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800d8d8:	e01a      	b.n	800d910 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d8da:	4bc0      	ldr	r3, [pc, #768]	; (800dbdc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d8dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8de:	4abf      	ldr	r2, [pc, #764]	; (800dbdc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d8e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d8e4:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d8e6:	e01a      	b.n	800d91e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d8e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d8ec:	3308      	adds	r3, #8
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f002 fd02 	bl	80102f8 <RCCEx_PLL2_Config>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d8fa:	e010      	b.n	800d91e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d8fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d900:	332c      	adds	r3, #44	; 0x2c
 800d902:	4618      	mov	r0, r3
 800d904:	f002 fd90 	bl	8010428 <RCCEx_PLL3_Config>
 800d908:	4603      	mov	r3, r0
 800d90a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d90e:	e006      	b.n	800d91e <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d910:	2301      	movs	r3, #1
 800d912:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d916:	e002      	b.n	800d91e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800d918:	bf00      	nop
 800d91a:	e000      	b.n	800d91e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800d91c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d91e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d922:	2b00      	cmp	r3, #0
 800d924:	d10d      	bne.n	800d942 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800d926:	4bad      	ldr	r3, [pc, #692]	; (800dbdc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d928:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d92c:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 800d930:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d934:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d938:	4aa8      	ldr	r2, [pc, #672]	; (800dbdc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d93a:	430b      	orrs	r3, r1
 800d93c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800d940:	e003      	b.n	800d94a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d942:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d946:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800d94a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d952:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800d956:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d95a:	2300      	movs	r3, #0
 800d95c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d960:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800d964:	460b      	mov	r3, r1
 800d966:	4313      	orrs	r3, r2
 800d968:	d053      	beq.n	800da12 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800d96a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d96e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d976:	d033      	beq.n	800d9e0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800d978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d97c:	d82c      	bhi.n	800d9d8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800d97e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d982:	d02f      	beq.n	800d9e4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800d984:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d988:	d826      	bhi.n	800d9d8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800d98a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d98e:	d008      	beq.n	800d9a2 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800d990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d994:	d820      	bhi.n	800d9d8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800d996:	2b00      	cmp	r3, #0
 800d998:	d00a      	beq.n	800d9b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800d99a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d99e:	d011      	beq.n	800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800d9a0:	e01a      	b.n	800d9d8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d9a2:	4b8e      	ldr	r3, [pc, #568]	; (800dbdc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d9a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9a6:	4a8d      	ldr	r2, [pc, #564]	; (800dbdc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d9a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d9ac:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800d9ae:	e01a      	b.n	800d9e6 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800d9b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d9b4:	3308      	adds	r3, #8
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f002 fc9e 	bl	80102f8 <RCCEx_PLL2_Config>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800d9c2:	e010      	b.n	800d9e6 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800d9c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d9c8:	332c      	adds	r3, #44	; 0x2c
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f002 fd2c 	bl	8010428 <RCCEx_PLL3_Config>
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800d9d6:	e006      	b.n	800d9e6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d9d8:	2301      	movs	r3, #1
 800d9da:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800d9de:	e002      	b.n	800d9e6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800d9e0:	bf00      	nop
 800d9e2:	e000      	b.n	800d9e6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800d9e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d9e6:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d10d      	bne.n	800da0a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800d9ee:	4b7b      	ldr	r3, [pc, #492]	; (800dbdc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800d9f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d9f4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800d9f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d9fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800da00:	4a76      	ldr	r2, [pc, #472]	; (800dbdc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800da02:	430b      	orrs	r3, r1
 800da04:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800da08:	e003      	b.n	800da12 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da0a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800da0e:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800da12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da1a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800da1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800da22:	2300      	movs	r3, #0
 800da24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800da28:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800da2c:	460b      	mov	r3, r1
 800da2e:	4313      	orrs	r3, r2
 800da30:	d046      	beq.n	800dac0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800da32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800da3a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800da3e:	d028      	beq.n	800da92 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800da40:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800da44:	d821      	bhi.n	800da8a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800da46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800da4a:	d022      	beq.n	800da92 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800da4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800da50:	d81b      	bhi.n	800da8a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800da52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800da56:	d01c      	beq.n	800da92 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800da58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800da5c:	d815      	bhi.n	800da8a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800da5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800da62:	d008      	beq.n	800da76 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800da64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800da68:	d80f      	bhi.n	800da8a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d011      	beq.n	800da92 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800da6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da72:	d00e      	beq.n	800da92 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800da74:	e009      	b.n	800da8a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800da76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da7a:	3308      	adds	r3, #8
 800da7c:	4618      	mov	r0, r3
 800da7e:	f002 fc3b 	bl	80102f8 <RCCEx_PLL2_Config>
 800da82:	4603      	mov	r3, r0
 800da84:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800da88:	e004      	b.n	800da94 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800da8a:	2301      	movs	r3, #1
 800da8c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800da90:	e000      	b.n	800da94 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800da92:	bf00      	nop
    }

    if (ret == HAL_OK)
 800da94:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d10d      	bne.n	800dab8 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800da9c:	4b4f      	ldr	r3, [pc, #316]	; (800dbdc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800da9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800daa2:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800daa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800daaa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800daae:	4a4b      	ldr	r2, [pc, #300]	; (800dbdc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800dab0:	430b      	orrs	r3, r1
 800dab2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800dab6:	e003      	b.n	800dac0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dab8:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dabc:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800dac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac8:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800dacc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800dad0:	2300      	movs	r3, #0
 800dad2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dad6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800dada:	460b      	mov	r3, r1
 800dadc:	4313      	orrs	r3, r2
 800dade:	d03f      	beq.n	800db60 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800dae0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dae8:	2b04      	cmp	r3, #4
 800daea:	d81e      	bhi.n	800db2a <HAL_RCCEx_PeriphCLKConfig+0x622>
 800daec:	a201      	add	r2, pc, #4	; (adr r2, 800daf4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800daee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daf2:	bf00      	nop
 800daf4:	0800db33 	.word	0x0800db33
 800daf8:	0800db09 	.word	0x0800db09
 800dafc:	0800db17 	.word	0x0800db17
 800db00:	0800db33 	.word	0x0800db33
 800db04:	0800db33 	.word	0x0800db33
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800db08:	4b34      	ldr	r3, [pc, #208]	; (800dbdc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800db0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db0c:	4a33      	ldr	r2, [pc, #204]	; (800dbdc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800db0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800db12:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800db14:	e00e      	b.n	800db34 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800db16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db1a:	332c      	adds	r3, #44	; 0x2c
 800db1c:	4618      	mov	r0, r3
 800db1e:	f002 fc83 	bl	8010428 <RCCEx_PLL3_Config>
 800db22:	4603      	mov	r3, r0
 800db24:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800db28:	e004      	b.n	800db34 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800db2a:	2301      	movs	r3, #1
 800db2c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800db30:	e000      	b.n	800db34 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800db32:	bf00      	nop
    }
    if (ret == HAL_OK)
 800db34:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d10d      	bne.n	800db58 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800db3c:	4b27      	ldr	r3, [pc, #156]	; (800dbdc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800db3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800db42:	f023 0107 	bic.w	r1, r3, #7
 800db46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800db4e:	4a23      	ldr	r2, [pc, #140]	; (800dbdc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800db50:	430b      	orrs	r3, r1
 800db52:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800db56:	e003      	b.n	800db60 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db58:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800db5c:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800db60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db68:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800db6c:	67bb      	str	r3, [r7, #120]	; 0x78
 800db6e:	2300      	movs	r3, #0
 800db70:	67fb      	str	r3, [r7, #124]	; 0x7c
 800db72:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800db76:	460b      	mov	r3, r1
 800db78:	4313      	orrs	r3, r2
 800db7a:	d04c      	beq.n	800dc16 <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800db7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800db84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800db88:	d02a      	beq.n	800dbe0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800db8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800db8e:	d821      	bhi.n	800dbd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800db90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800db94:	d026      	beq.n	800dbe4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800db96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800db9a:	d81b      	bhi.n	800dbd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800db9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dba0:	d00e      	beq.n	800dbc0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800dba2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dba6:	d815      	bhi.n	800dbd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d01d      	beq.n	800dbe8 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800dbac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbb0:	d110      	bne.n	800dbd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800dbb2:	4b0a      	ldr	r3, [pc, #40]	; (800dbdc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800dbb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbb6:	4a09      	ldr	r2, [pc, #36]	; (800dbdc <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800dbb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dbbc:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800dbbe:	e014      	b.n	800dbea <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800dbc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dbc4:	332c      	adds	r3, #44	; 0x2c
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f002 fc2e 	bl	8010428 <RCCEx_PLL3_Config>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800dbd2:	e00a      	b.n	800dbea <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800dbd4:	2301      	movs	r3, #1
 800dbd6:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800dbda:	e006      	b.n	800dbea <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800dbdc:	46020c00 	.word	0x46020c00
        break;
 800dbe0:	bf00      	nop
 800dbe2:	e002      	b.n	800dbea <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800dbe4:	bf00      	nop
 800dbe6:	e000      	b.n	800dbea <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800dbe8:	bf00      	nop
    }
    if (ret == HAL_OK)
 800dbea:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d10d      	bne.n	800dc0e <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800dbf2:	4baf      	ldr	r3, [pc, #700]	; (800deb0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dbf4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800dbf8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800dbfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800dc04:	4aaa      	ldr	r2, [pc, #680]	; (800deb0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dc06:	430b      	orrs	r3, r1
 800dc08:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800dc0c:	e003      	b.n	800dc16 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc0e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dc12:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800dc16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc1e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800dc22:	673b      	str	r3, [r7, #112]	; 0x70
 800dc24:	2300      	movs	r3, #0
 800dc26:	677b      	str	r3, [r7, #116]	; 0x74
 800dc28:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800dc2c:	460b      	mov	r3, r1
 800dc2e:	4313      	orrs	r3, r2
 800dc30:	f000 80b5 	beq.w	800dd9e <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800dc34:	2300      	movs	r3, #0
 800dc36:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800dc3a:	4b9d      	ldr	r3, [pc, #628]	; (800deb0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dc3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dc40:	f003 0304 	and.w	r3, r3, #4
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d113      	bne.n	800dc70 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dc48:	4b99      	ldr	r3, [pc, #612]	; (800deb0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dc4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dc4e:	4a98      	ldr	r2, [pc, #608]	; (800deb0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dc50:	f043 0304 	orr.w	r3, r3, #4
 800dc54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800dc58:	4b95      	ldr	r3, [pc, #596]	; (800deb0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dc5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dc5e:	f003 0304 	and.w	r3, r3, #4
 800dc62:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800dc66:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
      pwrclkchanged = SET;
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800dc70:	4b90      	ldr	r3, [pc, #576]	; (800deb4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800dc72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc74:	4a8f      	ldr	r2, [pc, #572]	; (800deb4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800dc76:	f043 0301 	orr.w	r3, r3, #1
 800dc7a:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800dc7c:	f7f9 fdde 	bl	800783c <HAL_GetTick>
 800dc80:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800dc84:	e00b      	b.n	800dc9e <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dc86:	f7f9 fdd9 	bl	800783c <HAL_GetTick>
 800dc8a:	4602      	mov	r2, r0
 800dc8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc90:	1ad3      	subs	r3, r2, r3
 800dc92:	2b02      	cmp	r3, #2
 800dc94:	d903      	bls.n	800dc9e <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800dc96:	2303      	movs	r3, #3
 800dc98:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800dc9c:	e005      	b.n	800dcaa <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800dc9e:	4b85      	ldr	r3, [pc, #532]	; (800deb4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800dca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dca2:	f003 0301 	and.w	r3, r3, #1
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d0ed      	beq.n	800dc86 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800dcaa:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d165      	bne.n	800dd7e <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800dcb2:	4b7f      	ldr	r3, [pc, #508]	; (800deb0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dcb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800dcb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dcbc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800dcc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d023      	beq.n	800dd10 <HAL_RCCEx_PeriphCLKConfig+0x808>
 800dcc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dccc:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800dcd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	d01b      	beq.n	800dd10 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800dcd8:	4b75      	ldr	r3, [pc, #468]	; (800deb0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dcda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800dcde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dce2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800dce6:	4b72      	ldr	r3, [pc, #456]	; (800deb0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dce8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800dcec:	4a70      	ldr	r2, [pc, #448]	; (800deb0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dcee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dcf2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800dcf6:	4b6e      	ldr	r3, [pc, #440]	; (800deb0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dcf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800dcfc:	4a6c      	ldr	r2, [pc, #432]	; (800deb0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dcfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dd02:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800dd06:	4a6a      	ldr	r2, [pc, #424]	; (800deb0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dd08:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800dd0c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800dd10:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800dd14:	f003 0301 	and.w	r3, r3, #1
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d019      	beq.n	800dd50 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd1c:	f7f9 fd8e 	bl	800783c <HAL_GetTick>
 800dd20:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800dd24:	e00d      	b.n	800dd42 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dd26:	f7f9 fd89 	bl	800783c <HAL_GetTick>
 800dd2a:	4602      	mov	r2, r0
 800dd2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd30:	1ad2      	subs	r2, r2, r3
 800dd32:	f241 3388 	movw	r3, #5000	; 0x1388
 800dd36:	429a      	cmp	r2, r3
 800dd38:	d903      	bls.n	800dd42 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800dd3a:	2303      	movs	r3, #3
 800dd3c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
            break;
 800dd40:	e006      	b.n	800dd50 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800dd42:	4b5b      	ldr	r3, [pc, #364]	; (800deb0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dd44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800dd48:	f003 0302 	and.w	r3, r3, #2
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d0ea      	beq.n	800dd26 <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800dd50:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d10d      	bne.n	800dd74 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800dd58:	4b55      	ldr	r3, [pc, #340]	; (800deb0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dd5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800dd5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800dd62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd66:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800dd6a:	4a51      	ldr	r2, [pc, #324]	; (800deb0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dd6c:	430b      	orrs	r3, r1
 800dd6e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800dd72:	e008      	b.n	800dd86 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800dd74:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dd78:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
 800dd7c:	e003      	b.n	800dd86 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd7e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dd82:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800dd86:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 800dd8a:	2b01      	cmp	r3, #1
 800dd8c:	d107      	bne.n	800dd9e <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dd8e:	4b48      	ldr	r3, [pc, #288]	; (800deb0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dd90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dd94:	4a46      	ldr	r2, [pc, #280]	; (800deb0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dd96:	f023 0304 	bic.w	r3, r3, #4
 800dd9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800dd9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dda6:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800ddaa:	66bb      	str	r3, [r7, #104]	; 0x68
 800ddac:	2300      	movs	r3, #0
 800ddae:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ddb0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800ddb4:	460b      	mov	r3, r1
 800ddb6:	4313      	orrs	r3, r2
 800ddb8:	d042      	beq.n	800de40 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800ddba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ddbe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ddc2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ddc6:	d022      	beq.n	800de0e <HAL_RCCEx_PeriphCLKConfig+0x906>
 800ddc8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ddcc:	d81b      	bhi.n	800de06 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800ddce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ddd2:	d011      	beq.n	800ddf8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800ddd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ddd8:	d815      	bhi.n	800de06 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d019      	beq.n	800de12 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800ddde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dde2:	d110      	bne.n	800de06 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800dde4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dde8:	3308      	adds	r3, #8
 800ddea:	4618      	mov	r0, r3
 800ddec:	f002 fa84 	bl	80102f8 <RCCEx_PLL2_Config>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800ddf6:	e00d      	b.n	800de14 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ddf8:	4b2d      	ldr	r3, [pc, #180]	; (800deb0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800ddfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddfc:	4a2c      	ldr	r2, [pc, #176]	; (800deb0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800ddfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800de02:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800de04:	e006      	b.n	800de14 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800de06:	2301      	movs	r3, #1
 800de08:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800de0c:	e002      	b.n	800de14 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800de0e:	bf00      	nop
 800de10:	e000      	b.n	800de14 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800de12:	bf00      	nop
    }
    if (ret == HAL_OK)
 800de14:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d10d      	bne.n	800de38 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800de1c:	4b24      	ldr	r3, [pc, #144]	; (800deb0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800de1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800de22:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800de26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800de2e:	4a20      	ldr	r2, [pc, #128]	; (800deb0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800de30:	430b      	orrs	r3, r1
 800de32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800de36:	e003      	b.n	800de40 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de38:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800de3c:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800de40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de48:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800de4c:	663b      	str	r3, [r7, #96]	; 0x60
 800de4e:	2300      	movs	r3, #0
 800de50:	667b      	str	r3, [r7, #100]	; 0x64
 800de52:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800de56:	460b      	mov	r3, r1
 800de58:	4313      	orrs	r3, r2
 800de5a:	d031      	beq.n	800dec0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800de5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800de64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de68:	d00b      	beq.n	800de82 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800de6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de6e:	d804      	bhi.n	800de7a <HAL_RCCEx_PeriphCLKConfig+0x972>
 800de70:	2b00      	cmp	r3, #0
 800de72:	d008      	beq.n	800de86 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800de74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de78:	d007      	beq.n	800de8a <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800de7a:	2301      	movs	r3, #1
 800de7c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800de80:	e004      	b.n	800de8c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800de82:	bf00      	nop
 800de84:	e002      	b.n	800de8c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800de86:	bf00      	nop
 800de88:	e000      	b.n	800de8c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800de8a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800de8c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800de90:	2b00      	cmp	r3, #0
 800de92:	d111      	bne.n	800deb8 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800de94:	4b06      	ldr	r3, [pc, #24]	; (800deb0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800de96:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800de9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800de9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dea2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800dea6:	4a02      	ldr	r2, [pc, #8]	; (800deb0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dea8:	430b      	orrs	r3, r1
 800deaa:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800deae:	e007      	b.n	800dec0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800deb0:	46020c00 	.word	0x46020c00
 800deb4:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800deb8:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800debc:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800dec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec8:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800decc:	65bb      	str	r3, [r7, #88]	; 0x58
 800dece:	2300      	movs	r3, #0
 800ded0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ded2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800ded6:	460b      	mov	r3, r1
 800ded8:	4313      	orrs	r3, r2
 800deda:	d00c      	beq.n	800def6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800dedc:	4bb2      	ldr	r3, [pc, #712]	; (800e1a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dede:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800dee2:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800dee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800deea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800deee:	4aae      	ldr	r2, [pc, #696]	; (800e1a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800def0:	430b      	orrs	r3, r1
 800def2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800def6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800defa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800defe:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800df02:	653b      	str	r3, [r7, #80]	; 0x50
 800df04:	2300      	movs	r3, #0
 800df06:	657b      	str	r3, [r7, #84]	; 0x54
 800df08:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800df0c:	460b      	mov	r3, r1
 800df0e:	4313      	orrs	r3, r2
 800df10:	d019      	beq.n	800df46 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800df12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800df1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800df1e:	d105      	bne.n	800df2c <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800df20:	4ba1      	ldr	r3, [pc, #644]	; (800e1a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800df22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df24:	4aa0      	ldr	r2, [pc, #640]	; (800e1a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800df26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800df2a:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800df2c:	4b9e      	ldr	r3, [pc, #632]	; (800e1a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800df2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800df32:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800df36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800df3e:	4a9a      	ldr	r2, [pc, #616]	; (800e1a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800df40:	430b      	orrs	r3, r1
 800df42:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800df46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df4e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800df52:	64bb      	str	r3, [r7, #72]	; 0x48
 800df54:	2300      	movs	r3, #0
 800df56:	64fb      	str	r3, [r7, #76]	; 0x4c
 800df58:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800df5c:	460b      	mov	r3, r1
 800df5e:	4313      	orrs	r3, r2
 800df60:	d00c      	beq.n	800df7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800df62:	4b91      	ldr	r3, [pc, #580]	; (800e1a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800df64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800df68:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800df6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df70:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800df74:	4a8c      	ldr	r2, [pc, #560]	; (800e1a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800df76:	430b      	orrs	r3, r1
 800df78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800df7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df84:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800df88:	643b      	str	r3, [r7, #64]	; 0x40
 800df8a:	2300      	movs	r3, #0
 800df8c:	647b      	str	r3, [r7, #68]	; 0x44
 800df8e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800df92:	460b      	mov	r3, r1
 800df94:	4313      	orrs	r3, r2
 800df96:	d00c      	beq.n	800dfb2 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800df98:	4b83      	ldr	r3, [pc, #524]	; (800e1a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800df9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800df9e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800dfa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dfa6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800dfaa:	4a7f      	ldr	r2, [pc, #508]	; (800e1a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dfac:	430b      	orrs	r3, r1
 800dfae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800dfb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfba:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800dfbe:	63bb      	str	r3, [r7, #56]	; 0x38
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dfc4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800dfc8:	460b      	mov	r3, r1
 800dfca:	4313      	orrs	r3, r2
 800dfcc:	d00c      	beq.n	800dfe8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800dfce:	4b76      	ldr	r3, [pc, #472]	; (800e1a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dfd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800dfd4:	f023 0118 	bic.w	r1, r3, #24
 800dfd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dfdc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800dfe0:	4a71      	ldr	r2, [pc, #452]	; (800e1a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800dfe2:	430b      	orrs	r3, r1
 800dfe4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800dfe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dfec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff0:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800dff4:	633b      	str	r3, [r7, #48]	; 0x30
 800dff6:	2300      	movs	r3, #0
 800dff8:	637b      	str	r3, [r7, #52]	; 0x34
 800dffa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800dffe:	460b      	mov	r3, r1
 800e000:	4313      	orrs	r3, r2
 800e002:	d032      	beq.n	800e06a <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800e004:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e008:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e00c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e010:	d105      	bne.n	800e01e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e012:	4b65      	ldr	r3, [pc, #404]	; (800e1a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e016:	4a64      	ldr	r2, [pc, #400]	; (800e1a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e01c:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800e01e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e022:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e026:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e02a:	d108      	bne.n	800e03e <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e02c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e030:	3308      	adds	r3, #8
 800e032:	4618      	mov	r0, r3
 800e034:	f002 f960 	bl	80102f8 <RCCEx_PLL2_Config>
 800e038:	4603      	mov	r3, r0
 800e03a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    }
    if (ret == HAL_OK)
 800e03e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e042:	2b00      	cmp	r3, #0
 800e044:	d10d      	bne.n	800e062 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800e046:	4b58      	ldr	r3, [pc, #352]	; (800e1a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e048:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e04c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800e050:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e054:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e058:	4a53      	ldr	r2, [pc, #332]	; (800e1a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e05a:	430b      	orrs	r3, r1
 800e05c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800e060:	e003      	b.n	800e06a <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e062:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e066:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800e06a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e072:	2100      	movs	r1, #0
 800e074:	62b9      	str	r1, [r7, #40]	; 0x28
 800e076:	f003 0301 	and.w	r3, r3, #1
 800e07a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e07c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800e080:	460b      	mov	r3, r1
 800e082:	4313      	orrs	r3, r2
 800e084:	d04a      	beq.n	800e11c <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800e086:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e08a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800e08e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800e092:	d01e      	beq.n	800e0d2 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800e094:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800e098:	d825      	bhi.n	800e0e6 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800e09a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e09e:	d00e      	beq.n	800e0be <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800e0a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e0a4:	d81f      	bhi.n	800e0e6 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d021      	beq.n	800e0ee <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800e0aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e0ae:	d11a      	bne.n	800e0e6 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e0b0:	4b3d      	ldr	r3, [pc, #244]	; (800e1a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e0b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0b4:	4a3c      	ldr	r2, [pc, #240]	; (800e1a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e0b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e0ba:	6293      	str	r3, [r2, #40]	; 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800e0bc:	e018      	b.n	800e0f0 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e0be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e0c2:	3308      	adds	r3, #8
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f002 f917 	bl	80102f8 <RCCEx_PLL2_Config>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800e0d0:	e00e      	b.n	800e0f0 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e0d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e0d6:	332c      	adds	r3, #44	; 0x2c
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f002 f9a5 	bl	8010428 <RCCEx_PLL3_Config>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800e0e4:	e004      	b.n	800e0f0 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800e0e6:	2301      	movs	r3, #1
 800e0e8:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800e0ec:	e000      	b.n	800e0f0 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800e0ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e0f0:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d10d      	bne.n	800e114 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800e0f8:	4b2b      	ldr	r3, [pc, #172]	; (800e1a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e0fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e0fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e102:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e106:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800e10a:	4927      	ldr	r1, [pc, #156]	; (800e1a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e10c:	4313      	orrs	r3, r2
 800e10e:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800e112:	e003      	b.n	800e11c <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e114:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e118:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800e11c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e124:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800e128:	623b      	str	r3, [r7, #32]
 800e12a:	2300      	movs	r3, #0
 800e12c:	627b      	str	r3, [r7, #36]	; 0x24
 800e12e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e132:	460b      	mov	r3, r1
 800e134:	4313      	orrs	r3, r2
 800e136:	d03d      	beq.n	800e1b4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800e138:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e13c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e140:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e144:	d00e      	beq.n	800e164 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800e146:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e14a:	d815      	bhi.n	800e178 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d017      	beq.n	800e180 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800e150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e154:	d110      	bne.n	800e178 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e156:	4b14      	ldr	r3, [pc, #80]	; (800e1a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e15a:	4a13      	ldr	r2, [pc, #76]	; (800e1a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e15c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e160:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800e162:	e00e      	b.n	800e182 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e164:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e168:	3308      	adds	r3, #8
 800e16a:	4618      	mov	r0, r3
 800e16c:	f002 f8c4 	bl	80102f8 <RCCEx_PLL2_Config>
 800e170:	4603      	mov	r3, r0
 800e172:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800e176:	e004      	b.n	800e182 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800e178:	2301      	movs	r3, #1
 800e17a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800e17e:	e000      	b.n	800e182 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800e180:	bf00      	nop
    }
    if (ret == HAL_OK)
 800e182:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e186:	2b00      	cmp	r3, #0
 800e188:	d110      	bne.n	800e1ac <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800e18a:	4b07      	ldr	r3, [pc, #28]	; (800e1a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e18c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e190:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800e194:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e19c:	4902      	ldr	r1, [pc, #8]	; (800e1a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e19e:	4313      	orrs	r3, r2
 800e1a0:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800e1a4:	e006      	b.n	800e1b4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800e1a6:	bf00      	nop
 800e1a8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1ac:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e1b0:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800e1b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1bc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800e1c0:	61bb      	str	r3, [r7, #24]
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	61fb      	str	r3, [r7, #28]
 800e1c6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e1ca:	460b      	mov	r3, r1
 800e1cc:	4313      	orrs	r3, r2
 800e1ce:	d00c      	beq.n	800e1ea <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800e1d0:	4b68      	ldr	r3, [pc, #416]	; (800e374 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e1d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e1d6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800e1da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e1de:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e1e2:	4964      	ldr	r1, [pc, #400]	; (800e374 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e1e4:	4313      	orrs	r3, r2
 800e1e6:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e1ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f2:	2100      	movs	r1, #0
 800e1f4:	6139      	str	r1, [r7, #16]
 800e1f6:	f003 0302 	and.w	r3, r3, #2
 800e1fa:	617b      	str	r3, [r7, #20]
 800e1fc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e200:	460b      	mov	r3, r1
 800e202:	4313      	orrs	r3, r2
 800e204:	d036      	beq.n	800e274 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800e206:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e20a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d00c      	beq.n	800e22c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800e212:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e216:	d113      	bne.n	800e240 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e218:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e21c:	3308      	adds	r3, #8
 800e21e:	4618      	mov	r0, r3
 800e220:	f002 f86a 	bl	80102f8 <RCCEx_PLL2_Config>
 800e224:	4603      	mov	r3, r0
 800e226:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800e22a:	e00d      	b.n	800e248 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e22c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e230:	332c      	adds	r3, #44	; 0x2c
 800e232:	4618      	mov	r0, r3
 800e234:	f002 f8f8 	bl	8010428 <RCCEx_PLL3_Config>
 800e238:	4603      	mov	r3, r0
 800e23a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800e23e:	e003      	b.n	800e248 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800e240:	2301      	movs	r3, #1
 800e242:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800e246:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e248:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d10d      	bne.n	800e26c <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800e250:	4b48      	ldr	r3, [pc, #288]	; (800e374 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e252:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e256:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800e25a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e25e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800e262:	4944      	ldr	r1, [pc, #272]	; (800e374 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e264:	4313      	orrs	r3, r2
 800e266:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800e26a:	e003      	b.n	800e274 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e26c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e270:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800e274:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e27c:	2100      	movs	r1, #0
 800e27e:	60b9      	str	r1, [r7, #8]
 800e280:	f003 0304 	and.w	r3, r3, #4
 800e284:	60fb      	str	r3, [r7, #12]
 800e286:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e28a:	460b      	mov	r3, r1
 800e28c:	4313      	orrs	r3, r2
 800e28e:	d024      	beq.n	800e2da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800e290:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e294:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d108      	bne.n	800e2ae <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e29c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e2a0:	332c      	adds	r3, #44	; 0x2c
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f002 f8c0 	bl	8010428 <RCCEx_PLL3_Config>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    }

    if (ret == HAL_OK)
 800e2ae:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d10d      	bne.n	800e2d2 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800e2b6:	4b2f      	ldr	r3, [pc, #188]	; (800e374 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e2b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e2bc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800e2c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e2c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e2c8:	492a      	ldr	r1, [pc, #168]	; (800e374 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e2ca:	4313      	orrs	r3, r2
 800e2cc:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800e2d0:	e003      	b.n	800e2da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e2d2:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e2d6:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800e2da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e2:	2100      	movs	r1, #0
 800e2e4:	6039      	str	r1, [r7, #0]
 800e2e6:	f003 0308 	and.w	r3, r3, #8
 800e2ea:	607b      	str	r3, [r7, #4]
 800e2ec:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e2f0:	460b      	mov	r3, r1
 800e2f2:	4313      	orrs	r3, r2
 800e2f4:	d036      	beq.n	800e364 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800e2f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e2fa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800e2fe:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800e302:	d00d      	beq.n	800e320 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800e304:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800e308:	d811      	bhi.n	800e32e <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800e30a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e30e:	d012      	beq.n	800e336 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800e310:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e314:	d80b      	bhi.n	800e32e <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800e316:	2b00      	cmp	r3, #0
 800e318:	d00d      	beq.n	800e336 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800e31a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e31e:	d106      	bne.n	800e32e <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e320:	4b14      	ldr	r3, [pc, #80]	; (800e374 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e324:	4a13      	ldr	r2, [pc, #76]	; (800e374 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e32a:	6293      	str	r3, [r2, #40]	; 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800e32c:	e004      	b.n	800e338 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800e32e:	2301      	movs	r3, #1
 800e330:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800e334:	e000      	b.n	800e338 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800e336:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e338:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d10d      	bne.n	800e35c <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800e340:	4b0c      	ldr	r3, [pc, #48]	; (800e374 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e342:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e346:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800e34a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e34e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800e352:	4908      	ldr	r1, [pc, #32]	; (800e374 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e354:	4313      	orrs	r3, r2
 800e356:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800e35a:	e003      	b.n	800e364 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e35c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e360:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800e364:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
}
 800e368:	4618      	mov	r0, r3
 800e36a:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800e36e:	46bd      	mov	sp, r7
 800e370:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e374:	46020c00 	.word	0x46020c00

0800e378 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800e378:	b480      	push	{r7}
 800e37a:	b089      	sub	sp, #36	; 0x24
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800e380:	4bad      	ldr	r3, [pc, #692]	; (800e638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e388:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800e38a:	4bab      	ldr	r3, [pc, #684]	; (800e638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e38c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e38e:	f003 0303 	and.w	r3, r3, #3
 800e392:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800e394:	4ba8      	ldr	r3, [pc, #672]	; (800e638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e398:	0a1b      	lsrs	r3, r3, #8
 800e39a:	f003 030f 	and.w	r3, r3, #15
 800e39e:	3301      	adds	r3, #1
 800e3a0:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800e3a2:	4ba5      	ldr	r3, [pc, #660]	; (800e638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e3a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3a6:	091b      	lsrs	r3, r3, #4
 800e3a8:	f003 0301 	and.w	r3, r3, #1
 800e3ac:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800e3ae:	4ba2      	ldr	r3, [pc, #648]	; (800e638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e3b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3b2:	08db      	lsrs	r3, r3, #3
 800e3b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e3b8:	68fa      	ldr	r2, [r7, #12]
 800e3ba:	fb02 f303 	mul.w	r3, r2, r3
 800e3be:	ee07 3a90 	vmov	s15, r3
 800e3c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e3c6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800e3ca:	693b      	ldr	r3, [r7, #16]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	f000 8123 	beq.w	800e618 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 800e3d2:	697b      	ldr	r3, [r7, #20]
 800e3d4:	2b03      	cmp	r3, #3
 800e3d6:	d062      	beq.n	800e49e <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	2b03      	cmp	r3, #3
 800e3dc:	f200 8081 	bhi.w	800e4e2 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 800e3e0:	697b      	ldr	r3, [r7, #20]
 800e3e2:	2b01      	cmp	r3, #1
 800e3e4:	d024      	beq.n	800e430 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 800e3e6:	697b      	ldr	r3, [r7, #20]
 800e3e8:	2b02      	cmp	r3, #2
 800e3ea:	d17a      	bne.n	800e4e2 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e3ec:	693b      	ldr	r3, [r7, #16]
 800e3ee:	ee07 3a90 	vmov	s15, r3
 800e3f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e3f6:	eddf 6a91 	vldr	s13, [pc, #580]	; 800e63c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800e3fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e3fe:	4b8e      	ldr	r3, [pc, #568]	; (800e638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e406:	ee07 3a90 	vmov	s15, r3
 800e40a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800e40e:	ed97 6a02 	vldr	s12, [r7, #8]
 800e412:	eddf 5a8b 	vldr	s11, [pc, #556]	; 800e640 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800e416:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e41a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800e41e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e422:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e42a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e42e:	e08f      	b.n	800e550 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e430:	4b81      	ldr	r3, [pc, #516]	; (800e638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e432:	689b      	ldr	r3, [r3, #8]
 800e434:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d005      	beq.n	800e448 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 800e43c:	4b7e      	ldr	r3, [pc, #504]	; (800e638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e43e:	689b      	ldr	r3, [r3, #8]
 800e440:	0f1b      	lsrs	r3, r3, #28
 800e442:	f003 030f 	and.w	r3, r3, #15
 800e446:	e006      	b.n	800e456 <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 800e448:	4b7b      	ldr	r3, [pc, #492]	; (800e638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e44a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e44e:	041b      	lsls	r3, r3, #16
 800e450:	0f1b      	lsrs	r3, r3, #28
 800e452:	f003 030f 	and.w	r3, r3, #15
 800e456:	4a7b      	ldr	r2, [pc, #492]	; (800e644 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 800e458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e45c:	ee07 3a90 	vmov	s15, r3
 800e460:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e464:	693b      	ldr	r3, [r7, #16]
 800e466:	ee07 3a90 	vmov	s15, r3
 800e46a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e46e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e472:	69bb      	ldr	r3, [r7, #24]
 800e474:	ee07 3a90 	vmov	s15, r3
 800e478:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e47c:	ed97 6a02 	vldr	s12, [r7, #8]
 800e480:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800e640 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800e484:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e488:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e48c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e490:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e494:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e498:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e49c:	e058      	b.n	800e550 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e49e:	693b      	ldr	r3, [r7, #16]
 800e4a0:	ee07 3a90 	vmov	s15, r3
 800e4a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e4a8:	eddf 6a64 	vldr	s13, [pc, #400]	; 800e63c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800e4ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e4b0:	4b61      	ldr	r3, [pc, #388]	; (800e638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e4b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4b8:	ee07 3a90 	vmov	s15, r3
 800e4bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800e4c0:	ed97 6a02 	vldr	s12, [r7, #8]
 800e4c4:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800e640 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800e4c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e4cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800e4d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e4d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e4d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e4e0:	e036      	b.n	800e550 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e4e2:	4b55      	ldr	r3, [pc, #340]	; (800e638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e4e4:	689b      	ldr	r3, [r3, #8]
 800e4e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d005      	beq.n	800e4fa <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 800e4ee:	4b52      	ldr	r3, [pc, #328]	; (800e638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e4f0:	689b      	ldr	r3, [r3, #8]
 800e4f2:	0f1b      	lsrs	r3, r3, #28
 800e4f4:	f003 030f 	and.w	r3, r3, #15
 800e4f8:	e006      	b.n	800e508 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 800e4fa:	4b4f      	ldr	r3, [pc, #316]	; (800e638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e4fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e500:	041b      	lsls	r3, r3, #16
 800e502:	0f1b      	lsrs	r3, r3, #28
 800e504:	f003 030f 	and.w	r3, r3, #15
 800e508:	4a4e      	ldr	r2, [pc, #312]	; (800e644 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 800e50a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e50e:	ee07 3a90 	vmov	s15, r3
 800e512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e516:	693b      	ldr	r3, [r7, #16]
 800e518:	ee07 3a90 	vmov	s15, r3
 800e51c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e520:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e524:	69bb      	ldr	r3, [r7, #24]
 800e526:	ee07 3a90 	vmov	s15, r3
 800e52a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e52e:	ed97 6a02 	vldr	s12, [r7, #8]
 800e532:	eddf 5a43 	vldr	s11, [pc, #268]	; 800e640 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800e536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e53a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e53e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e542:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e54a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e54e:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800e550:	4b39      	ldr	r3, [pc, #228]	; (800e638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d017      	beq.n	800e58c <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e55c:	4b36      	ldr	r3, [pc, #216]	; (800e638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e55e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e560:	0a5b      	lsrs	r3, r3, #9
 800e562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e566:	ee07 3a90 	vmov	s15, r3
 800e56a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800e56e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e572:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e576:	edd7 6a07 	vldr	s13, [r7, #28]
 800e57a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e57e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e582:	ee17 2a90 	vmov	r2, s15
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	601a      	str	r2, [r3, #0]
 800e58a:	e002      	b.n	800e592 <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2200      	movs	r2, #0
 800e590:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800e592:	4b29      	ldr	r3, [pc, #164]	; (800e638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d017      	beq.n	800e5ce <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e59e:	4b26      	ldr	r3, [pc, #152]	; (800e638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e5a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5a2:	0c1b      	lsrs	r3, r3, #16
 800e5a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5a8:	ee07 3a90 	vmov	s15, r3
 800e5ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800e5b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e5b4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e5b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800e5bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e5c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e5c4:	ee17 2a90 	vmov	r2, s15
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	605a      	str	r2, [r3, #4]
 800e5cc:	e002      	b.n	800e5d4 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800e5d4:	4b18      	ldr	r3, [pc, #96]	; (800e638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e5d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d017      	beq.n	800e610 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e5e0:	4b15      	ldr	r3, [pc, #84]	; (800e638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e5e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5e4:	0e1b      	lsrs	r3, r3, #24
 800e5e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5ea:	ee07 3a90 	vmov	s15, r3
 800e5ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800e5f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e5f6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e5fa:	edd7 6a07 	vldr	s13, [r7, #28]
 800e5fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e602:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e606:	ee17 2a90 	vmov	r2, s15
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800e60e:	e00c      	b.n	800e62a <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2200      	movs	r2, #0
 800e614:	609a      	str	r2, [r3, #8]
}
 800e616:	e008      	b.n	800e62a <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2200      	movs	r2, #0
 800e61c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2200      	movs	r2, #0
 800e622:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2200      	movs	r2, #0
 800e628:	609a      	str	r2, [r3, #8]
}
 800e62a:	bf00      	nop
 800e62c:	3724      	adds	r7, #36	; 0x24
 800e62e:	46bd      	mov	sp, r7
 800e630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e634:	4770      	bx	lr
 800e636:	bf00      	nop
 800e638:	46020c00 	.word	0x46020c00
 800e63c:	4b742400 	.word	0x4b742400
 800e640:	46000000 	.word	0x46000000
 800e644:	0802b810 	.word	0x0802b810

0800e648 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800e648:	b480      	push	{r7}
 800e64a:	b089      	sub	sp, #36	; 0x24
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800e650:	4bad      	ldr	r3, [pc, #692]	; (800e908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e658:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800e65a:	4bab      	ldr	r3, [pc, #684]	; (800e908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e65c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e65e:	f003 0303 	and.w	r3, r3, #3
 800e662:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800e664:	4ba8      	ldr	r3, [pc, #672]	; (800e908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e668:	0a1b      	lsrs	r3, r3, #8
 800e66a:	f003 030f 	and.w	r3, r3, #15
 800e66e:	3301      	adds	r3, #1
 800e670:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800e672:	4ba5      	ldr	r3, [pc, #660]	; (800e908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e676:	091b      	lsrs	r3, r3, #4
 800e678:	f003 0301 	and.w	r3, r3, #1
 800e67c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800e67e:	4ba2      	ldr	r3, [pc, #648]	; (800e908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e682:	08db      	lsrs	r3, r3, #3
 800e684:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e688:	68fa      	ldr	r2, [r7, #12]
 800e68a:	fb02 f303 	mul.w	r3, r2, r3
 800e68e:	ee07 3a90 	vmov	s15, r3
 800e692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e696:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800e69a:	693b      	ldr	r3, [r7, #16]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	f000 8123 	beq.w	800e8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 800e6a2:	697b      	ldr	r3, [r7, #20]
 800e6a4:	2b03      	cmp	r3, #3
 800e6a6:	d062      	beq.n	800e76e <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 800e6a8:	697b      	ldr	r3, [r7, #20]
 800e6aa:	2b03      	cmp	r3, #3
 800e6ac:	f200 8081 	bhi.w	800e7b2 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 800e6b0:	697b      	ldr	r3, [r7, #20]
 800e6b2:	2b01      	cmp	r3, #1
 800e6b4:	d024      	beq.n	800e700 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	2b02      	cmp	r3, #2
 800e6ba:	d17a      	bne.n	800e7b2 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e6bc:	693b      	ldr	r3, [r7, #16]
 800e6be:	ee07 3a90 	vmov	s15, r3
 800e6c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6c6:	eddf 6a91 	vldr	s13, [pc, #580]	; 800e90c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800e6ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e6ce:	4b8e      	ldr	r3, [pc, #568]	; (800e908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e6d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6d6:	ee07 3a90 	vmov	s15, r3
 800e6da:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800e6de:	ed97 6a02 	vldr	s12, [r7, #8]
 800e6e2:	eddf 5a8b 	vldr	s11, [pc, #556]	; 800e910 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800e6e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e6ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800e6ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e6f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e6f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e6fe:	e08f      	b.n	800e820 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800e700:	4b81      	ldr	r3, [pc, #516]	; (800e908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e702:	689b      	ldr	r3, [r3, #8]
 800e704:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d005      	beq.n	800e718 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 800e70c:	4b7e      	ldr	r3, [pc, #504]	; (800e908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e70e:	689b      	ldr	r3, [r3, #8]
 800e710:	0f1b      	lsrs	r3, r3, #28
 800e712:	f003 030f 	and.w	r3, r3, #15
 800e716:	e006      	b.n	800e726 <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 800e718:	4b7b      	ldr	r3, [pc, #492]	; (800e908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e71a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e71e:	041b      	lsls	r3, r3, #16
 800e720:	0f1b      	lsrs	r3, r3, #28
 800e722:	f003 030f 	and.w	r3, r3, #15
 800e726:	4a7b      	ldr	r2, [pc, #492]	; (800e914 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 800e728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e72c:	ee07 3a90 	vmov	s15, r3
 800e730:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e734:	693b      	ldr	r3, [r7, #16]
 800e736:	ee07 3a90 	vmov	s15, r3
 800e73a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e73e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e742:	69bb      	ldr	r3, [r7, #24]
 800e744:	ee07 3a90 	vmov	s15, r3
 800e748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e74c:	ed97 6a02 	vldr	s12, [r7, #8]
 800e750:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800e910 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800e754:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e758:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e75c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e760:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800e764:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e768:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e76c:	e058      	b.n	800e820 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e76e:	693b      	ldr	r3, [r7, #16]
 800e770:	ee07 3a90 	vmov	s15, r3
 800e774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e778:	eddf 6a64 	vldr	s13, [pc, #400]	; 800e90c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800e77c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e780:	4b61      	ldr	r3, [pc, #388]	; (800e908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e788:	ee07 3a90 	vmov	s15, r3
 800e78c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800e790:	ed97 6a02 	vldr	s12, [r7, #8]
 800e794:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800e910 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800e798:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e79c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800e7a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e7a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e7a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e7ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e7b0:	e036      	b.n	800e820 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800e7b2:	4b55      	ldr	r3, [pc, #340]	; (800e908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e7b4:	689b      	ldr	r3, [r3, #8]
 800e7b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d005      	beq.n	800e7ca <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 800e7be:	4b52      	ldr	r3, [pc, #328]	; (800e908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e7c0:	689b      	ldr	r3, [r3, #8]
 800e7c2:	0f1b      	lsrs	r3, r3, #28
 800e7c4:	f003 030f 	and.w	r3, r3, #15
 800e7c8:	e006      	b.n	800e7d8 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 800e7ca:	4b4f      	ldr	r3, [pc, #316]	; (800e908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e7cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e7d0:	041b      	lsls	r3, r3, #16
 800e7d2:	0f1b      	lsrs	r3, r3, #28
 800e7d4:	f003 030f 	and.w	r3, r3, #15
 800e7d8:	4a4e      	ldr	r2, [pc, #312]	; (800e914 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 800e7da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7de:	ee07 3a90 	vmov	s15, r3
 800e7e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e7e6:	693b      	ldr	r3, [r7, #16]
 800e7e8:	ee07 3a90 	vmov	s15, r3
 800e7ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e7f4:	69bb      	ldr	r3, [r7, #24]
 800e7f6:	ee07 3a90 	vmov	s15, r3
 800e7fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e7fe:	ed97 6a02 	vldr	s12, [r7, #8]
 800e802:	eddf 5a43 	vldr	s11, [pc, #268]	; 800e910 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800e806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e80a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e80e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e812:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800e816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e81a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e81e:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800e820:	4b39      	ldr	r3, [pc, #228]	; (800e908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d017      	beq.n	800e85c <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e82c:	4b36      	ldr	r3, [pc, #216]	; (800e908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e82e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e830:	0a5b      	lsrs	r3, r3, #9
 800e832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e836:	ee07 3a90 	vmov	s15, r3
 800e83a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800e83e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e842:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e846:	edd7 6a07 	vldr	s13, [r7, #28]
 800e84a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e84e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e852:	ee17 2a90 	vmov	r2, s15
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	601a      	str	r2, [r3, #0]
 800e85a:	e002      	b.n	800e862 <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2200      	movs	r2, #0
 800e860:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800e862:	4b29      	ldr	r3, [pc, #164]	; (800e908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d017      	beq.n	800e89e <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e86e:	4b26      	ldr	r3, [pc, #152]	; (800e908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e872:	0c1b      	lsrs	r3, r3, #16
 800e874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e878:	ee07 3a90 	vmov	s15, r3
 800e87c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800e880:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e884:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e888:	edd7 6a07 	vldr	s13, [r7, #28]
 800e88c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e890:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e894:	ee17 2a90 	vmov	r2, s15
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	605a      	str	r2, [r3, #4]
 800e89c:	e002      	b.n	800e8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800e8a4:	4b18      	ldr	r3, [pc, #96]	; (800e908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e8a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d017      	beq.n	800e8e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e8b0:	4b15      	ldr	r3, [pc, #84]	; (800e908 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e8b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8b4:	0e1b      	lsrs	r3, r3, #24
 800e8b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e8ba:	ee07 3a90 	vmov	s15, r3
 800e8be:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800e8c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e8c6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e8ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800e8ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e8d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e8d6:	ee17 2a90 	vmov	r2, s15
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800e8de:	e00c      	b.n	800e8fa <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	609a      	str	r2, [r3, #8]
}
 800e8e6:	e008      	b.n	800e8fa <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	609a      	str	r2, [r3, #8]
}
 800e8fa:	bf00      	nop
 800e8fc:	3724      	adds	r7, #36	; 0x24
 800e8fe:	46bd      	mov	sp, r7
 800e900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e904:	4770      	bx	lr
 800e906:	bf00      	nop
 800e908:	46020c00 	.word	0x46020c00
 800e90c:	4b742400 	.word	0x4b742400
 800e910:	46000000 	.word	0x46000000
 800e914:	0802b810 	.word	0x0802b810

0800e918 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800e918:	b480      	push	{r7}
 800e91a:	b089      	sub	sp, #36	; 0x24
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800e920:	4bad      	ldr	r3, [pc, #692]	; (800ebd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e928:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800e92a:	4bab      	ldr	r3, [pc, #684]	; (800ebd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e92c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e92e:	f003 0303 	and.w	r3, r3, #3
 800e932:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800e934:	4ba8      	ldr	r3, [pc, #672]	; (800ebd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e938:	0a1b      	lsrs	r3, r3, #8
 800e93a:	f003 030f 	and.w	r3, r3, #15
 800e93e:	3301      	adds	r3, #1
 800e940:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800e942:	4ba5      	ldr	r3, [pc, #660]	; (800ebd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e946:	091b      	lsrs	r3, r3, #4
 800e948:	f003 0301 	and.w	r3, r3, #1
 800e94c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800e94e:	4ba2      	ldr	r3, [pc, #648]	; (800ebd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e952:	08db      	lsrs	r3, r3, #3
 800e954:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e958:	68fa      	ldr	r2, [r7, #12]
 800e95a:	fb02 f303 	mul.w	r3, r2, r3
 800e95e:	ee07 3a90 	vmov	s15, r3
 800e962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e966:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800e96a:	693b      	ldr	r3, [r7, #16]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	f000 8123 	beq.w	800ebb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	2b03      	cmp	r3, #3
 800e976:	d062      	beq.n	800ea3e <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 800e978:	697b      	ldr	r3, [r7, #20]
 800e97a:	2b03      	cmp	r3, #3
 800e97c:	f200 8081 	bhi.w	800ea82 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 800e980:	697b      	ldr	r3, [r7, #20]
 800e982:	2b01      	cmp	r3, #1
 800e984:	d024      	beq.n	800e9d0 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 800e986:	697b      	ldr	r3, [r7, #20]
 800e988:	2b02      	cmp	r3, #2
 800e98a:	d17a      	bne.n	800ea82 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e98c:	693b      	ldr	r3, [r7, #16]
 800e98e:	ee07 3a90 	vmov	s15, r3
 800e992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e996:	eddf 6a91 	vldr	s13, [pc, #580]	; 800ebdc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800e99a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e99e:	4b8e      	ldr	r3, [pc, #568]	; (800ebd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e9a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9a6:	ee07 3a90 	vmov	s15, r3
 800e9aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800e9ae:	ed97 6a02 	vldr	s12, [r7, #8]
 800e9b2:	eddf 5a8b 	vldr	s11, [pc, #556]	; 800ebe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800e9b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e9ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800e9be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e9c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800e9c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9ca:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 800e9ce:	e08f      	b.n	800eaf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800e9d0:	4b81      	ldr	r3, [pc, #516]	; (800ebd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e9d2:	689b      	ldr	r3, [r3, #8]
 800e9d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d005      	beq.n	800e9e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 800e9dc:	4b7e      	ldr	r3, [pc, #504]	; (800ebd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e9de:	689b      	ldr	r3, [r3, #8]
 800e9e0:	0f1b      	lsrs	r3, r3, #28
 800e9e2:	f003 030f 	and.w	r3, r3, #15
 800e9e6:	e006      	b.n	800e9f6 <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 800e9e8:	4b7b      	ldr	r3, [pc, #492]	; (800ebd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800e9ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e9ee:	041b      	lsls	r3, r3, #16
 800e9f0:	0f1b      	lsrs	r3, r3, #28
 800e9f2:	f003 030f 	and.w	r3, r3, #15
 800e9f6:	4a7b      	ldr	r2, [pc, #492]	; (800ebe4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 800e9f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9fc:	ee07 3a90 	vmov	s15, r3
 800ea00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea04:	693b      	ldr	r3, [r7, #16]
 800ea06:	ee07 3a90 	vmov	s15, r3
 800ea0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ea12:	69bb      	ldr	r3, [r7, #24]
 800ea14:	ee07 3a90 	vmov	s15, r3
 800ea18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea1c:	ed97 6a02 	vldr	s12, [r7, #8]
 800ea20:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800ebe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800ea24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ea28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ea2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ea30:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ea34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ea3c:	e058      	b.n	800eaf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ea3e:	693b      	ldr	r3, [r7, #16]
 800ea40:	ee07 3a90 	vmov	s15, r3
 800ea44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea48:	eddf 6a64 	vldr	s13, [pc, #400]	; 800ebdc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800ea4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ea50:	4b61      	ldr	r3, [pc, #388]	; (800ebd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ea52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea58:	ee07 3a90 	vmov	s15, r3
 800ea5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800ea60:	ed97 6a02 	vldr	s12, [r7, #8]
 800ea64:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800ebe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800ea68:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ea6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800ea70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ea74:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ea78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea7c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ea80:	e036      	b.n	800eaf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ea82:	4b55      	ldr	r3, [pc, #340]	; (800ebd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ea84:	689b      	ldr	r3, [r3, #8]
 800ea86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d005      	beq.n	800ea9a <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 800ea8e:	4b52      	ldr	r3, [pc, #328]	; (800ebd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ea90:	689b      	ldr	r3, [r3, #8]
 800ea92:	0f1b      	lsrs	r3, r3, #28
 800ea94:	f003 030f 	and.w	r3, r3, #15
 800ea98:	e006      	b.n	800eaa8 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 800ea9a:	4b4f      	ldr	r3, [pc, #316]	; (800ebd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ea9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800eaa0:	041b      	lsls	r3, r3, #16
 800eaa2:	0f1b      	lsrs	r3, r3, #28
 800eaa4:	f003 030f 	and.w	r3, r3, #15
 800eaa8:	4a4e      	ldr	r2, [pc, #312]	; (800ebe4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 800eaaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eaae:	ee07 3a90 	vmov	s15, r3
 800eab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eab6:	693b      	ldr	r3, [r7, #16]
 800eab8:	ee07 3a90 	vmov	s15, r3
 800eabc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eac0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800eac4:	69bb      	ldr	r3, [r7, #24]
 800eac6:	ee07 3a90 	vmov	s15, r3
 800eaca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eace:	ed97 6a02 	vldr	s12, [r7, #8]
 800ead2:	eddf 5a43 	vldr	s11, [pc, #268]	; 800ebe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800ead6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eade:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800eae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eaea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800eaee:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800eaf0:	4b39      	ldr	r3, [pc, #228]	; (800ebd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800eaf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eaf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d017      	beq.n	800eb2c <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800eafc:	4b36      	ldr	r3, [pc, #216]	; (800ebd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800eafe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb00:	0a5b      	lsrs	r3, r3, #9
 800eb02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb06:	ee07 3a90 	vmov	s15, r3
 800eb0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800eb0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eb12:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800eb16:	edd7 6a07 	vldr	s13, [r7, #28]
 800eb1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eb22:	ee17 2a90 	vmov	r2, s15
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	601a      	str	r2, [r3, #0]
 800eb2a:	e002      	b.n	800eb32 <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2200      	movs	r2, #0
 800eb30:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800eb32:	4b29      	ldr	r3, [pc, #164]	; (800ebd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800eb34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d017      	beq.n	800eb6e <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800eb3e:	4b26      	ldr	r3, [pc, #152]	; (800ebd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800eb40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb42:	0c1b      	lsrs	r3, r3, #16
 800eb44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb48:	ee07 3a90 	vmov	s15, r3
 800eb4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800eb50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eb54:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800eb58:	edd7 6a07 	vldr	s13, [r7, #28]
 800eb5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eb64:	ee17 2a90 	vmov	r2, s15
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	605a      	str	r2, [r3, #4]
 800eb6c:	e002      	b.n	800eb74 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2200      	movs	r2, #0
 800eb72:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800eb74:	4b18      	ldr	r3, [pc, #96]	; (800ebd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800eb76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d017      	beq.n	800ebb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800eb80:	4b15      	ldr	r3, [pc, #84]	; (800ebd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800eb82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb84:	0e1b      	lsrs	r3, r3, #24
 800eb86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb8a:	ee07 3a90 	vmov	s15, r3
 800eb8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800eb92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eb96:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800eb9a:	edd7 6a07 	vldr	s13, [r7, #28]
 800eb9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eba2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eba6:	ee17 2a90 	vmov	r2, s15
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800ebae:	e00c      	b.n	800ebca <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	609a      	str	r2, [r3, #8]
}
 800ebb6:	e008      	b.n	800ebca <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2200      	movs	r2, #0
 800ebbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	609a      	str	r2, [r3, #8]
}
 800ebca:	bf00      	nop
 800ebcc:	3724      	adds	r7, #36	; 0x24
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd4:	4770      	bx	lr
 800ebd6:	bf00      	nop
 800ebd8:	46020c00 	.word	0x46020c00
 800ebdc:	4b742400 	.word	0x4b742400
 800ebe0:	46000000 	.word	0x46000000
 800ebe4:	0802b810 	.word	0x0802b810

0800ebe8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b08e      	sub	sp, #56	; 0x38
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800ebf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ebf6:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800ebfa:	430b      	orrs	r3, r1
 800ebfc:	d145      	bne.n	800ec8a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800ebfe:	4ba7      	ldr	r3, [pc, #668]	; (800ee9c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ec00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ec04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ec08:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800ec0a:	4ba4      	ldr	r3, [pc, #656]	; (800ee9c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ec0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ec10:	f003 0302 	and.w	r3, r3, #2
 800ec14:	2b02      	cmp	r3, #2
 800ec16:	d108      	bne.n	800ec2a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800ec18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec1e:	d104      	bne.n	800ec2a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800ec20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec24:	637b      	str	r3, [r7, #52]	; 0x34
 800ec26:	f001 bb58 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800ec2a:	4b9c      	ldr	r3, [pc, #624]	; (800ee9c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ec2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ec30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ec34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ec38:	d114      	bne.n	800ec64 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800ec3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec40:	d110      	bne.n	800ec64 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ec42:	4b96      	ldr	r3, [pc, #600]	; (800ee9c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ec44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ec48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ec4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ec50:	d103      	bne.n	800ec5a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800ec52:	23fa      	movs	r3, #250	; 0xfa
 800ec54:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ec56:	f001 bb40 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = LSI_VALUE;
 800ec5a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ec5e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ec60:	f001 bb3b 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800ec64:	4b8d      	ldr	r3, [pc, #564]	; (800ee9c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ec6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ec70:	d107      	bne.n	800ec82 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800ec72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ec78:	d103      	bne.n	800ec82 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800ec7a:	4b89      	ldr	r3, [pc, #548]	; (800eea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800ec7c:	637b      	str	r3, [r7, #52]	; 0x34
 800ec7e:	f001 bb2c 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800ec82:	2300      	movs	r3, #0
 800ec84:	637b      	str	r3, [r7, #52]	; 0x34
 800ec86:	f001 bb28 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ec8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec8e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800ec92:	430b      	orrs	r3, r1
 800ec94:	d151      	bne.n	800ed3a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800ec96:	4b81      	ldr	r3, [pc, #516]	; (800ee9c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ec98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ec9c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800eca0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800eca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eca4:	2b80      	cmp	r3, #128	; 0x80
 800eca6:	d035      	beq.n	800ed14 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800eca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecaa:	2b80      	cmp	r3, #128	; 0x80
 800ecac:	d841      	bhi.n	800ed32 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800ecae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecb0:	2b60      	cmp	r3, #96	; 0x60
 800ecb2:	d02a      	beq.n	800ed0a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800ecb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecb6:	2b60      	cmp	r3, #96	; 0x60
 800ecb8:	d83b      	bhi.n	800ed32 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800ecba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecbc:	2b40      	cmp	r3, #64	; 0x40
 800ecbe:	d009      	beq.n	800ecd4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ecc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc2:	2b40      	cmp	r3, #64	; 0x40
 800ecc4:	d835      	bhi.n	800ed32 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800ecc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d00c      	beq.n	800ece6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800eccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecce:	2b20      	cmp	r3, #32
 800ecd0:	d012      	beq.n	800ecf8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800ecd2:	e02e      	b.n	800ed32 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ecd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f7ff fb4d 	bl	800e378 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800ecde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ece0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ece2:	f001 bafa 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ece6:	f107 0318 	add.w	r3, r7, #24
 800ecea:	4618      	mov	r0, r3
 800ecec:	f7ff fcac 	bl	800e648 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800ecf0:	69bb      	ldr	r3, [r7, #24]
 800ecf2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ecf4:	f001 baf1 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ecf8:	f107 030c 	add.w	r3, r7, #12
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	f7ff fe0b 	bl	800e918 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ed06:	f001 bae8 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800ed0a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ed0e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ed10:	f001 bae3 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ed14:	4b61      	ldr	r3, [pc, #388]	; (800ee9c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ed1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed20:	d103      	bne.n	800ed2a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800ed22:	4b60      	ldr	r3, [pc, #384]	; (800eea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ed24:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ed26:	f001 bad8 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ed2e:	f001 bad4 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default :
      {
        frequency = 0U;
 800ed32:	2300      	movs	r3, #0
 800ed34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ed36:	f001 bad0 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800ed3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed3e:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800ed42:	430b      	orrs	r3, r1
 800ed44:	d158      	bne.n	800edf8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800ed46:	4b55      	ldr	r3, [pc, #340]	; (800ee9c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ed48:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ed4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ed50:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800ed52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed58:	d03b      	beq.n	800edd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800ed5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed60:	d846      	bhi.n	800edf0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800ed62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ed68:	d02e      	beq.n	800edc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800ed6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ed70:	d83e      	bhi.n	800edf0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800ed72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed78:	d00b      	beq.n	800ed92 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800ed7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed80:	d836      	bhi.n	800edf0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800ed82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d00d      	beq.n	800eda4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800ed88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed8e:	d012      	beq.n	800edb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800ed90:	e02e      	b.n	800edf0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ed92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed96:	4618      	mov	r0, r3
 800ed98:	f7ff faee 	bl	800e378 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800ed9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed9e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800eda0:	f001 ba9b 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eda4:	f107 0318 	add.w	r3, r7, #24
 800eda8:	4618      	mov	r0, r3
 800edaa:	f7ff fc4d 	bl	800e648 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800edae:	69bb      	ldr	r3, [r7, #24]
 800edb0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800edb2:	f001 ba92 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800edb6:	f107 030c 	add.w	r3, r7, #12
 800edba:	4618      	mov	r0, r3
 800edbc:	f7ff fdac 	bl	800e918 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800edc4:	f001 ba89 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800edc8:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800edcc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800edce:	f001 ba84 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800edd2:	4b32      	ldr	r3, [pc, #200]	; (800ee9c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800edda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800edde:	d103      	bne.n	800ede8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800ede0:	4b30      	ldr	r3, [pc, #192]	; (800eea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ede2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ede4:	f001 ba79 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800ede8:	2300      	movs	r3, #0
 800edea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800edec:	f001 ba75 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default :

        frequency = 0U;
 800edf0:	2300      	movs	r3, #0
 800edf2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800edf4:	f001 ba71 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800edf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800edfc:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800ee00:	430b      	orrs	r3, r1
 800ee02:	d126      	bne.n	800ee52 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800ee04:	4b25      	ldr	r3, [pc, #148]	; (800ee9c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ee06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ee0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ee0e:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800ee10:	4b22      	ldr	r3, [pc, #136]	; (800ee9c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ee18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee1c:	d106      	bne.n	800ee2c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800ee1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d103      	bne.n	800ee2c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800ee24:	4b1f      	ldr	r3, [pc, #124]	; (800eea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ee26:	637b      	str	r3, [r7, #52]	; 0x34
 800ee28:	f001 ba57 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800ee2c:	4b1b      	ldr	r3, [pc, #108]	; (800ee9c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ee34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee38:	d107      	bne.n	800ee4a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800ee3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ee40:	d103      	bne.n	800ee4a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800ee42:	4b19      	ldr	r3, [pc, #100]	; (800eea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800ee44:	637b      	str	r3, [r7, #52]	; 0x34
 800ee46:	f001 ba48 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	637b      	str	r3, [r7, #52]	; 0x34
 800ee4e:	f001 ba44 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800ee52:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee56:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800ee5a:	430b      	orrs	r3, r1
 800ee5c:	d16e      	bne.n	800ef3c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800ee5e:	4b0f      	ldr	r3, [pc, #60]	; (800ee9c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ee60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ee64:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800ee68:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800ee6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee6c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ee70:	d03d      	beq.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800ee72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee74:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ee78:	d85c      	bhi.n	800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800ee7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ee80:	d014      	beq.n	800eeac <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800ee82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ee88:	d854      	bhi.n	800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800ee8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d01f      	beq.n	800eed0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800ee90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ee96:	d012      	beq.n	800eebe <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800ee98:	e04c      	b.n	800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800ee9a:	bf00      	nop
 800ee9c:	46020c00 	.word	0x46020c00
 800eea0:	0007a120 	.word	0x0007a120
 800eea4:	00f42400 	.word	0x00f42400
 800eea8:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800eeac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f7ff fa61 	bl	800e378 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800eeb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800eeba:	f001 ba0e 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eebe:	f107 0318 	add.w	r3, r7, #24
 800eec2:	4618      	mov	r0, r3
 800eec4:	f7ff fbc0 	bl	800e648 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800eec8:	69fb      	ldr	r3, [r7, #28]
 800eeca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800eecc:	f001 ba05 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800eed0:	4ba7      	ldr	r3, [pc, #668]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800eed8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eedc:	d103      	bne.n	800eee6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800eede:	4ba5      	ldr	r3, [pc, #660]	; (800f174 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800eee0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800eee2:	f001 b9fa 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800eee6:	2300      	movs	r3, #0
 800eee8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800eeea:	f001 b9f6 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800eeee:	4ba0      	ldr	r3, [pc, #640]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	f003 0320 	and.w	r3, r3, #32
 800eef6:	2b20      	cmp	r3, #32
 800eef8:	d118      	bne.n	800ef2c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800eefa:	4b9d      	ldr	r3, [pc, #628]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eefc:	689b      	ldr	r3, [r3, #8]
 800eefe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d005      	beq.n	800ef12 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800ef06:	4b9a      	ldr	r3, [pc, #616]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ef08:	689b      	ldr	r3, [r3, #8]
 800ef0a:	0e1b      	lsrs	r3, r3, #24
 800ef0c:	f003 030f 	and.w	r3, r3, #15
 800ef10:	e006      	b.n	800ef20 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800ef12:	4b97      	ldr	r3, [pc, #604]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ef14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ef18:	041b      	lsls	r3, r3, #16
 800ef1a:	0e1b      	lsrs	r3, r3, #24
 800ef1c:	f003 030f 	and.w	r3, r3, #15
 800ef20:	4a95      	ldr	r2, [pc, #596]	; (800f178 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ef22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef26:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ef28:	f001 b9d7 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ef30:	f001 b9d3 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default :

        frequency = 0U;
 800ef34:	2300      	movs	r3, #0
 800ef36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ef38:	f001 b9cf 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ef3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef40:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800ef44:	430b      	orrs	r3, r1
 800ef46:	d17f      	bne.n	800f048 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ef48:	4b89      	ldr	r3, [pc, #548]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ef4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ef4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ef52:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800ef54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d165      	bne.n	800f026 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800ef5a:	4b85      	ldr	r3, [pc, #532]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ef5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ef60:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800ef64:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800ef66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef68:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ef6c:	d034      	beq.n	800efd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800ef6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef70:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ef74:	d853      	bhi.n	800f01e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800ef76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ef7c:	d00b      	beq.n	800ef96 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800ef7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ef84:	d84b      	bhi.n	800f01e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800ef86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d016      	beq.n	800efba <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800ef8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ef92:	d009      	beq.n	800efa8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800ef94:	e043      	b.n	800f01e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ef96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f7ff f9ec 	bl	800e378 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800efa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efa2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800efa4:	f001 b999 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800efa8:	f107 0318 	add.w	r3, r7, #24
 800efac:	4618      	mov	r0, r3
 800efae:	f7ff fb4b 	bl	800e648 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800efb2:	69fb      	ldr	r3, [r7, #28]
 800efb4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800efb6:	f001 b990 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800efba:	4b6d      	ldr	r3, [pc, #436]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800efc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800efc6:	d103      	bne.n	800efd0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800efc8:	4b6a      	ldr	r3, [pc, #424]	; (800f174 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800efca:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800efcc:	f001 b985 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
            frequency = 0U;
 800efd0:	2300      	movs	r3, #0
 800efd2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800efd4:	f001 b981 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800efd8:	4b65      	ldr	r3, [pc, #404]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	f003 0320 	and.w	r3, r3, #32
 800efe0:	2b20      	cmp	r3, #32
 800efe2:	d118      	bne.n	800f016 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800efe4:	4b62      	ldr	r3, [pc, #392]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800efe6:	689b      	ldr	r3, [r3, #8]
 800efe8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800efec:	2b00      	cmp	r3, #0
 800efee:	d005      	beq.n	800effc <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800eff0:	4b5f      	ldr	r3, [pc, #380]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800eff2:	689b      	ldr	r3, [r3, #8]
 800eff4:	0e1b      	lsrs	r3, r3, #24
 800eff6:	f003 030f 	and.w	r3, r3, #15
 800effa:	e006      	b.n	800f00a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800effc:	4b5c      	ldr	r3, [pc, #368]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800effe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f002:	041b      	lsls	r3, r3, #16
 800f004:	0e1b      	lsrs	r3, r3, #24
 800f006:	f003 030f 	and.w	r3, r3, #15
 800f00a:	4a5b      	ldr	r2, [pc, #364]	; (800f178 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800f00c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f010:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800f012:	f001 b962 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
            frequency = 0U;
 800f016:	2300      	movs	r3, #0
 800f018:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800f01a:	f001 b95e 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
        }
        default :
        {
          frequency = 0U;
 800f01e:	2300      	movs	r3, #0
 800f020:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800f022:	f001 b95a 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800f026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f028:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f02c:	d108      	bne.n	800f040 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f02e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f032:	4618      	mov	r0, r3
 800f034:	f7ff f9a0 	bl	800e378 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800f038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f03a:	637b      	str	r3, [r7, #52]	; 0x34
 800f03c:	f001 b94d 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else
    {
      frequency = 0U;
 800f040:	2300      	movs	r3, #0
 800f042:	637b      	str	r3, [r7, #52]	; 0x34
 800f044:	f001 b949 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800f048:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f04c:	1e51      	subs	r1, r2, #1
 800f04e:	430b      	orrs	r3, r1
 800f050:	d136      	bne.n	800f0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800f052:	4b47      	ldr	r3, [pc, #284]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f058:	f003 0303 	and.w	r3, r3, #3
 800f05c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800f05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f060:	2b00      	cmp	r3, #0
 800f062:	d104      	bne.n	800f06e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800f064:	f7fe f96a 	bl	800d33c <HAL_RCC_GetPCLK2Freq>
 800f068:	6378      	str	r0, [r7, #52]	; 0x34
 800f06a:	f001 b936 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800f06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f070:	2b01      	cmp	r3, #1
 800f072:	d104      	bne.n	800f07e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f074:	f7fe f82c 	bl	800d0d0 <HAL_RCC_GetSysClockFreq>
 800f078:	6378      	str	r0, [r7, #52]	; 0x34
 800f07a:	f001 b92e 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800f07e:	4b3c      	ldr	r3, [pc, #240]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f08a:	d106      	bne.n	800f09a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800f08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f08e:	2b02      	cmp	r3, #2
 800f090:	d103      	bne.n	800f09a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800f092:	4b3a      	ldr	r3, [pc, #232]	; (800f17c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800f094:	637b      	str	r3, [r7, #52]	; 0x34
 800f096:	f001 b920 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800f09a:	4b35      	ldr	r3, [pc, #212]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f09c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f0a0:	f003 0302 	and.w	r3, r3, #2
 800f0a4:	2b02      	cmp	r3, #2
 800f0a6:	d107      	bne.n	800f0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800f0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0aa:	2b03      	cmp	r3, #3
 800f0ac:	d104      	bne.n	800f0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800f0ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f0b2:	637b      	str	r3, [r7, #52]	; 0x34
 800f0b4:	f001 b911 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	637b      	str	r3, [r7, #52]	; 0x34
 800f0bc:	f001 b90d 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800f0c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f0c4:	1e91      	subs	r1, r2, #2
 800f0c6:	430b      	orrs	r3, r1
 800f0c8:	d136      	bne.n	800f138 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800f0ca:	4b29      	ldr	r3, [pc, #164]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f0cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f0d0:	f003 030c 	and.w	r3, r3, #12
 800f0d4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800f0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d104      	bne.n	800f0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f0dc:	f7fe f91a 	bl	800d314 <HAL_RCC_GetPCLK1Freq>
 800f0e0:	6378      	str	r0, [r7, #52]	; 0x34
 800f0e2:	f001 b8fa 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800f0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0e8:	2b04      	cmp	r3, #4
 800f0ea:	d104      	bne.n	800f0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f0ec:	f7fd fff0 	bl	800d0d0 <HAL_RCC_GetSysClockFreq>
 800f0f0:	6378      	str	r0, [r7, #52]	; 0x34
 800f0f2:	f001 b8f2 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800f0f6:	4b1e      	ldr	r3, [pc, #120]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f0fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f102:	d106      	bne.n	800f112 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800f104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f106:	2b08      	cmp	r3, #8
 800f108:	d103      	bne.n	800f112 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800f10a:	4b1c      	ldr	r3, [pc, #112]	; (800f17c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800f10c:	637b      	str	r3, [r7, #52]	; 0x34
 800f10e:	f001 b8e4 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800f112:	4b17      	ldr	r3, [pc, #92]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f114:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f118:	f003 0302 	and.w	r3, r3, #2
 800f11c:	2b02      	cmp	r3, #2
 800f11e:	d107      	bne.n	800f130 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800f120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f122:	2b0c      	cmp	r3, #12
 800f124:	d104      	bne.n	800f130 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800f126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f12a:	637b      	str	r3, [r7, #52]	; 0x34
 800f12c:	f001 b8d5 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800f130:	2300      	movs	r3, #0
 800f132:	637b      	str	r3, [r7, #52]	; 0x34
 800f134:	f001 b8d1 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800f138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f13c:	1f11      	subs	r1, r2, #4
 800f13e:	430b      	orrs	r3, r1
 800f140:	d13f      	bne.n	800f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800f142:	4b0b      	ldr	r3, [pc, #44]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f148:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f14c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800f14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f150:	2b00      	cmp	r3, #0
 800f152:	d104      	bne.n	800f15e <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f154:	f7fe f8de 	bl	800d314 <HAL_RCC_GetPCLK1Freq>
 800f158:	6378      	str	r0, [r7, #52]	; 0x34
 800f15a:	f001 b8be 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800f15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f160:	2b10      	cmp	r3, #16
 800f162:	d10d      	bne.n	800f180 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f164:	f7fd ffb4 	bl	800d0d0 <HAL_RCC_GetSysClockFreq>
 800f168:	6378      	str	r0, [r7, #52]	; 0x34
 800f16a:	f001 b8b6 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 800f16e:	bf00      	nop
 800f170:	46020c00 	.word	0x46020c00
 800f174:	02dc6c00 	.word	0x02dc6c00
 800f178:	0802b810 	.word	0x0802b810
 800f17c:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800f180:	4ba8      	ldr	r3, [pc, #672]	; (800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f18c:	d106      	bne.n	800f19c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800f18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f190:	2b20      	cmp	r3, #32
 800f192:	d103      	bne.n	800f19c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800f194:	4ba4      	ldr	r3, [pc, #656]	; (800f428 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f196:	637b      	str	r3, [r7, #52]	; 0x34
 800f198:	f001 b89f 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800f19c:	4ba1      	ldr	r3, [pc, #644]	; (800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f19e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f1a2:	f003 0302 	and.w	r3, r3, #2
 800f1a6:	2b02      	cmp	r3, #2
 800f1a8:	d107      	bne.n	800f1ba <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800f1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ac:	2b30      	cmp	r3, #48	; 0x30
 800f1ae:	d104      	bne.n	800f1ba <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800f1b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f1b4:	637b      	str	r3, [r7, #52]	; 0x34
 800f1b6:	f001 b890 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	637b      	str	r3, [r7, #52]	; 0x34
 800f1be:	f001 b88c 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800f1c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f1c6:	f1a2 0108 	sub.w	r1, r2, #8
 800f1ca:	430b      	orrs	r3, r1
 800f1cc:	d136      	bne.n	800f23c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800f1ce:	4b95      	ldr	r3, [pc, #596]	; (800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f1d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f1d4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f1d8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800f1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d104      	bne.n	800f1ea <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f1e0:	f7fe f898 	bl	800d314 <HAL_RCC_GetPCLK1Freq>
 800f1e4:	6378      	str	r0, [r7, #52]	; 0x34
 800f1e6:	f001 b878 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800f1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ec:	2b40      	cmp	r3, #64	; 0x40
 800f1ee:	d104      	bne.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f1f0:	f7fd ff6e 	bl	800d0d0 <HAL_RCC_GetSysClockFreq>
 800f1f4:	6378      	str	r0, [r7, #52]	; 0x34
 800f1f6:	f001 b870 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800f1fa:	4b8a      	ldr	r3, [pc, #552]	; (800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f206:	d106      	bne.n	800f216 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800f208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f20a:	2b80      	cmp	r3, #128	; 0x80
 800f20c:	d103      	bne.n	800f216 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800f20e:	4b86      	ldr	r3, [pc, #536]	; (800f428 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f210:	637b      	str	r3, [r7, #52]	; 0x34
 800f212:	f001 b862 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800f216:	4b83      	ldr	r3, [pc, #524]	; (800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f218:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f21c:	f003 0302 	and.w	r3, r3, #2
 800f220:	2b02      	cmp	r3, #2
 800f222:	d107      	bne.n	800f234 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800f224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f226:	2bc0      	cmp	r3, #192	; 0xc0
 800f228:	d104      	bne.n	800f234 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800f22a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f22e:	637b      	str	r3, [r7, #52]	; 0x34
 800f230:	f001 b853 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800f234:	2300      	movs	r3, #0
 800f236:	637b      	str	r3, [r7, #52]	; 0x34
 800f238:	f001 b84f 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800f23c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f240:	f1a2 0110 	sub.w	r1, r2, #16
 800f244:	430b      	orrs	r3, r1
 800f246:	d139      	bne.n	800f2bc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800f248:	4b76      	ldr	r3, [pc, #472]	; (800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f24a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f24e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f252:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800f254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f256:	2b00      	cmp	r3, #0
 800f258:	d104      	bne.n	800f264 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f25a:	f7fe f85b 	bl	800d314 <HAL_RCC_GetPCLK1Freq>
 800f25e:	6378      	str	r0, [r7, #52]	; 0x34
 800f260:	f001 b83b 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800f264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f26a:	d104      	bne.n	800f276 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f26c:	f7fd ff30 	bl	800d0d0 <HAL_RCC_GetSysClockFreq>
 800f270:	6378      	str	r0, [r7, #52]	; 0x34
 800f272:	f001 b832 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800f276:	4b6b      	ldr	r3, [pc, #428]	; (800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f27e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f282:	d107      	bne.n	800f294 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800f284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f28a:	d103      	bne.n	800f294 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800f28c:	4b66      	ldr	r3, [pc, #408]	; (800f428 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f28e:	637b      	str	r3, [r7, #52]	; 0x34
 800f290:	f001 b823 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800f294:	4b63      	ldr	r3, [pc, #396]	; (800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f296:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f29a:	f003 0302 	and.w	r3, r3, #2
 800f29e:	2b02      	cmp	r3, #2
 800f2a0:	d108      	bne.n	800f2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800f2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f2a8:	d104      	bne.n	800f2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800f2aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f2ae:	637b      	str	r3, [r7, #52]	; 0x34
 800f2b0:	f001 b813 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	637b      	str	r3, [r7, #52]	; 0x34
 800f2b8:	f001 b80f 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800f2bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f2c0:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
 800f2c4:	430b      	orrs	r3, r1
 800f2c6:	d139      	bne.n	800f33c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800f2c8:	4b56      	ldr	r3, [pc, #344]	; (800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f2ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f2ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f2d2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800f2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d104      	bne.n	800f2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f2da:	f7fe f81b 	bl	800d314 <HAL_RCC_GetPCLK1Freq>
 800f2de:	6378      	str	r0, [r7, #52]	; 0x34
 800f2e0:	f000 bffb 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800f2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f2ea:	d104      	bne.n	800f2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f2ec:	f7fd fef0 	bl	800d0d0 <HAL_RCC_GetSysClockFreq>
 800f2f0:	6378      	str	r0, [r7, #52]	; 0x34
 800f2f2:	f000 bff2 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800f2f6:	4b4b      	ldr	r3, [pc, #300]	; (800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f2fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f302:	d107      	bne.n	800f314 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800f304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f306:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f30a:	d103      	bne.n	800f314 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800f30c:	4b46      	ldr	r3, [pc, #280]	; (800f428 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f30e:	637b      	str	r3, [r7, #52]	; 0x34
 800f310:	f000 bfe3 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800f314:	4b43      	ldr	r3, [pc, #268]	; (800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f316:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f31a:	f003 0302 	and.w	r3, r3, #2
 800f31e:	2b02      	cmp	r3, #2
 800f320:	d108      	bne.n	800f334 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800f322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f324:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f328:	d104      	bne.n	800f334 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800f32a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f32e:	637b      	str	r3, [r7, #52]	; 0x34
 800f330:	f000 bfd3 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800f334:	2300      	movs	r3, #0
 800f336:	637b      	str	r3, [r7, #52]	; 0x34
 800f338:	f000 bfcf 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800f33c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f340:	f1a2 0120 	sub.w	r1, r2, #32
 800f344:	430b      	orrs	r3, r1
 800f346:	d158      	bne.n	800f3fa <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800f348:	4b36      	ldr	r3, [pc, #216]	; (800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f34a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f34e:	f003 0307 	and.w	r3, r3, #7
 800f352:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800f354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f356:	2b00      	cmp	r3, #0
 800f358:	d104      	bne.n	800f364 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800f35a:	f7fe f803 	bl	800d364 <HAL_RCC_GetPCLK3Freq>
 800f35e:	6378      	str	r0, [r7, #52]	; 0x34
 800f360:	f000 bfbb 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800f364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f366:	2b01      	cmp	r3, #1
 800f368:	d104      	bne.n	800f374 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f36a:	f7fd feb1 	bl	800d0d0 <HAL_RCC_GetSysClockFreq>
 800f36e:	6378      	str	r0, [r7, #52]	; 0x34
 800f370:	f000 bfb3 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800f374:	4b2b      	ldr	r3, [pc, #172]	; (800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f37c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f380:	d106      	bne.n	800f390 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800f382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f384:	2b02      	cmp	r3, #2
 800f386:	d103      	bne.n	800f390 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800f388:	4b27      	ldr	r3, [pc, #156]	; (800f428 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f38a:	637b      	str	r3, [r7, #52]	; 0x34
 800f38c:	f000 bfa5 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800f390:	4b24      	ldr	r3, [pc, #144]	; (800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f392:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f396:	f003 0302 	and.w	r3, r3, #2
 800f39a:	2b02      	cmp	r3, #2
 800f39c:	d107      	bne.n	800f3ae <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800f39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3a0:	2b03      	cmp	r3, #3
 800f3a2:	d104      	bne.n	800f3ae <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800f3a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f3a8:	637b      	str	r3, [r7, #52]	; 0x34
 800f3aa:	f000 bf96 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800f3ae:	4b1d      	ldr	r3, [pc, #116]	; (800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	f003 0320 	and.w	r3, r3, #32
 800f3b6:	2b20      	cmp	r3, #32
 800f3b8:	d11b      	bne.n	800f3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800f3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3bc:	2b04      	cmp	r3, #4
 800f3be:	d118      	bne.n	800f3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f3c0:	4b18      	ldr	r3, [pc, #96]	; (800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f3c2:	689b      	ldr	r3, [r3, #8]
 800f3c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d005      	beq.n	800f3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800f3cc:	4b15      	ldr	r3, [pc, #84]	; (800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f3ce:	689b      	ldr	r3, [r3, #8]
 800f3d0:	0e1b      	lsrs	r3, r3, #24
 800f3d2:	f003 030f 	and.w	r3, r3, #15
 800f3d6:	e006      	b.n	800f3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800f3d8:	4b12      	ldr	r3, [pc, #72]	; (800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f3da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f3de:	041b      	lsls	r3, r3, #16
 800f3e0:	0e1b      	lsrs	r3, r3, #24
 800f3e2:	f003 030f 	and.w	r3, r3, #15
 800f3e6:	4a11      	ldr	r2, [pc, #68]	; (800f42c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800f3e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3ec:	637b      	str	r3, [r7, #52]	; 0x34
 800f3ee:	f000 bf74 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	637b      	str	r3, [r7, #52]	; 0x34
 800f3f6:	f000 bf70 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800f3fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f3fe:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800f402:	430b      	orrs	r3, r1
 800f404:	d172      	bne.n	800f4ec <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800f406:	4b07      	ldr	r3, [pc, #28]	; (800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f408:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f40c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800f410:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800f412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f418:	d10a      	bne.n	800f430 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f41a:	f7fd fe59 	bl	800d0d0 <HAL_RCC_GetSysClockFreq>
 800f41e:	6378      	str	r0, [r7, #52]	; 0x34
 800f420:	f000 bf5b 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 800f424:	46020c00 	.word	0x46020c00
 800f428:	00f42400 	.word	0x00f42400
 800f42c:	0802b810 	.word	0x0802b810
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800f430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f436:	d108      	bne.n	800f44a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f438:	f107 0318 	add.w	r3, r7, #24
 800f43c:	4618      	mov	r0, r3
 800f43e:	f7ff f903 	bl	800e648 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800f442:	6a3b      	ldr	r3, [r7, #32]
 800f444:	637b      	str	r3, [r7, #52]	; 0x34
 800f446:	f000 bf48 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800f44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d104      	bne.n	800f45a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800f450:	f7fd ff46 	bl	800d2e0 <HAL_RCC_GetHCLKFreq>
 800f454:	6378      	str	r0, [r7, #52]	; 0x34
 800f456:	f000 bf40 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800f45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f45c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800f460:	d122      	bne.n	800f4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f462:	4baa      	ldr	r3, [pc, #680]	; (800f70c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	f003 0320 	and.w	r3, r3, #32
 800f46a:	2b20      	cmp	r3, #32
 800f46c:	d118      	bne.n	800f4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f46e:	4ba7      	ldr	r3, [pc, #668]	; (800f70c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f470:	689b      	ldr	r3, [r3, #8]
 800f472:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f476:	2b00      	cmp	r3, #0
 800f478:	d005      	beq.n	800f486 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800f47a:	4ba4      	ldr	r3, [pc, #656]	; (800f70c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f47c:	689b      	ldr	r3, [r3, #8]
 800f47e:	0e1b      	lsrs	r3, r3, #24
 800f480:	f003 030f 	and.w	r3, r3, #15
 800f484:	e006      	b.n	800f494 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800f486:	4ba1      	ldr	r3, [pc, #644]	; (800f70c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f488:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f48c:	041b      	lsls	r3, r3, #16
 800f48e:	0e1b      	lsrs	r3, r3, #24
 800f490:	f003 030f 	and.w	r3, r3, #15
 800f494:	4a9e      	ldr	r2, [pc, #632]	; (800f710 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800f496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f49a:	637b      	str	r3, [r7, #52]	; 0x34
 800f49c:	f000 bf1d 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = 0U;
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	637b      	str	r3, [r7, #52]	; 0x34
 800f4a4:	f000 bf19 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800f4a8:	4b98      	ldr	r3, [pc, #608]	; (800f70c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f4b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f4b4:	d107      	bne.n	800f4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800f4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f4bc:	d103      	bne.n	800f4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800f4be:	4b95      	ldr	r3, [pc, #596]	; (800f714 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800f4c0:	637b      	str	r3, [r7, #52]	; 0x34
 800f4c2:	f000 bf0a 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800f4c6:	4b91      	ldr	r3, [pc, #580]	; (800f70c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f4ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f4d2:	d107      	bne.n	800f4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800f4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f4da:	d103      	bne.n	800f4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800f4dc:	4b8d      	ldr	r3, [pc, #564]	; (800f714 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800f4de:	637b      	str	r3, [r7, #52]	; 0x34
 800f4e0:	f000 befb 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	637b      	str	r3, [r7, #52]	; 0x34
 800f4e8:	f000 bef7 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800f4ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f4f0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800f4f4:	430b      	orrs	r3, r1
 800f4f6:	d158      	bne.n	800f5aa <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800f4f8:	4b84      	ldr	r3, [pc, #528]	; (800f70c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f4fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f4fe:	f003 0307 	and.w	r3, r3, #7
 800f502:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f506:	2b04      	cmp	r3, #4
 800f508:	d84b      	bhi.n	800f5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800f50a:	a201      	add	r2, pc, #4	; (adr r2, 800f510 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800f50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f510:	0800f549 	.word	0x0800f549
 800f514:	0800f525 	.word	0x0800f525
 800f518:	0800f537 	.word	0x0800f537
 800f51c:	0800f553 	.word	0x0800f553
 800f520:	0800f55d 	.word	0x0800f55d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f528:	4618      	mov	r0, r3
 800f52a:	f7fe ff25 	bl	800e378 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800f52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f530:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f532:	f000 bed2 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f536:	f107 030c 	add.w	r3, r7, #12
 800f53a:	4618      	mov	r0, r3
 800f53c:	f7ff f9ec 	bl	800e918 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800f540:	693b      	ldr	r3, [r7, #16]
 800f542:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f544:	f000 bec9 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800f548:	f7fd feca 	bl	800d2e0 <HAL_RCC_GetHCLKFreq>
 800f54c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f54e:	f000 bec4 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800f552:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800f556:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f558:	f000 bebf 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f55c:	4b6b      	ldr	r3, [pc, #428]	; (800f70c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	f003 0320 	and.w	r3, r3, #32
 800f564:	2b20      	cmp	r3, #32
 800f566:	d118      	bne.n	800f59a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f568:	4b68      	ldr	r3, [pc, #416]	; (800f70c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f56a:	689b      	ldr	r3, [r3, #8]
 800f56c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f570:	2b00      	cmp	r3, #0
 800f572:	d005      	beq.n	800f580 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800f574:	4b65      	ldr	r3, [pc, #404]	; (800f70c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f576:	689b      	ldr	r3, [r3, #8]
 800f578:	0e1b      	lsrs	r3, r3, #24
 800f57a:	f003 030f 	and.w	r3, r3, #15
 800f57e:	e006      	b.n	800f58e <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800f580:	4b62      	ldr	r3, [pc, #392]	; (800f70c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f582:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f586:	041b      	lsls	r3, r3, #16
 800f588:	0e1b      	lsrs	r3, r3, #24
 800f58a:	f003 030f 	and.w	r3, r3, #15
 800f58e:	4a60      	ldr	r2, [pc, #384]	; (800f710 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800f590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f594:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f596:	f000 bea0 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800f59a:	2300      	movs	r3, #0
 800f59c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f59e:	f000 be9c 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f5a6:	f000 be98 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800f5aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5ae:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800f5b2:	430b      	orrs	r3, r1
 800f5b4:	d167      	bne.n	800f686 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800f5b6:	4b55      	ldr	r3, [pc, #340]	; (800f70c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f5b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f5bc:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800f5c0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f5c8:	d036      	beq.n	800f638 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800f5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f5d0:	d855      	bhi.n	800f67e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800f5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f5d8:	d029      	beq.n	800f62e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800f5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f5e0:	d84d      	bhi.n	800f67e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800f5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f5e8:	d013      	beq.n	800f612 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800f5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f5f0:	d845      	bhi.n	800f67e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800f5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d015      	beq.n	800f624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800f5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5fe:	d13e      	bne.n	800f67e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f604:	4618      	mov	r0, r3
 800f606:	f7fe feb7 	bl	800e378 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800f60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f60c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f60e:	f000 be64 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f612:	f107 030c 	add.w	r3, r7, #12
 800f616:	4618      	mov	r0, r3
 800f618:	f7ff f97e 	bl	800e918 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800f61c:	693b      	ldr	r3, [r7, #16]
 800f61e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f620:	f000 be5b 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800f624:	f7fd fe5c 	bl	800d2e0 <HAL_RCC_GetHCLKFreq>
 800f628:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f62a:	f000 be56 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800f62e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800f632:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f634:	f000 be51 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f638:	4b34      	ldr	r3, [pc, #208]	; (800f70c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	f003 0320 	and.w	r3, r3, #32
 800f640:	2b20      	cmp	r3, #32
 800f642:	d118      	bne.n	800f676 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f644:	4b31      	ldr	r3, [pc, #196]	; (800f70c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f646:	689b      	ldr	r3, [r3, #8]
 800f648:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d005      	beq.n	800f65c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800f650:	4b2e      	ldr	r3, [pc, #184]	; (800f70c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f652:	689b      	ldr	r3, [r3, #8]
 800f654:	0e1b      	lsrs	r3, r3, #24
 800f656:	f003 030f 	and.w	r3, r3, #15
 800f65a:	e006      	b.n	800f66a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800f65c:	4b2b      	ldr	r3, [pc, #172]	; (800f70c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f65e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f662:	041b      	lsls	r3, r3, #16
 800f664:	0e1b      	lsrs	r3, r3, #24
 800f666:	f003 030f 	and.w	r3, r3, #15
 800f66a:	4a29      	ldr	r2, [pc, #164]	; (800f710 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800f66c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f670:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f672:	f000 be32 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800f676:	2300      	movs	r3, #0
 800f678:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f67a:	f000 be2e 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 800f67e:	2300      	movs	r3, #0
 800f680:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f682:	f000 be2a 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800f686:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f68a:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800f68e:	430b      	orrs	r3, r1
 800f690:	d153      	bne.n	800f73a <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800f692:	4b1e      	ldr	r3, [pc, #120]	; (800f70c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f698:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f69c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800f69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d104      	bne.n	800f6ae <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f6a4:	f7fd fe36 	bl	800d314 <HAL_RCC_GetPCLK1Freq>
 800f6a8:	6378      	str	r0, [r7, #52]	; 0x34
 800f6aa:	f000 be16 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800f6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f6b4:	d104      	bne.n	800f6c0 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f6b6:	f7fd fd0b 	bl	800d0d0 <HAL_RCC_GetSysClockFreq>
 800f6ba:	6378      	str	r0, [r7, #52]	; 0x34
 800f6bc:	f000 be0d 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800f6c0:	4b12      	ldr	r3, [pc, #72]	; (800f70c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f6c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f6cc:	d107      	bne.n	800f6de <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800f6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f6d4:	d103      	bne.n	800f6de <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800f6d6:	4b0f      	ldr	r3, [pc, #60]	; (800f714 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800f6d8:	637b      	str	r3, [r7, #52]	; 0x34
 800f6da:	f000 bdfe 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800f6de:	4b0b      	ldr	r3, [pc, #44]	; (800f70c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	f003 0320 	and.w	r3, r3, #32
 800f6e6:	2b20      	cmp	r3, #32
 800f6e8:	d123      	bne.n	800f732 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 800f6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f6f0:	d11f      	bne.n	800f732 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f6f2:	4b06      	ldr	r3, [pc, #24]	; (800f70c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f6f4:	689b      	ldr	r3, [r3, #8]
 800f6f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d00c      	beq.n	800f718 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800f6fe:	4b03      	ldr	r3, [pc, #12]	; (800f70c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f700:	689b      	ldr	r3, [r3, #8]
 800f702:	0e1b      	lsrs	r3, r3, #24
 800f704:	f003 030f 	and.w	r3, r3, #15
 800f708:	e00d      	b.n	800f726 <HAL_RCCEx_GetPeriphCLKFreq+0xb3e>
 800f70a:	bf00      	nop
 800f70c:	46020c00 	.word	0x46020c00
 800f710:	0802b810 	.word	0x0802b810
 800f714:	00f42400 	.word	0x00f42400
 800f718:	4ba0      	ldr	r3, [pc, #640]	; (800f99c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f71a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f71e:	041b      	lsls	r3, r3, #16
 800f720:	0e1b      	lsrs	r3, r3, #24
 800f722:	f003 030f 	and.w	r3, r3, #15
 800f726:	4a9e      	ldr	r2, [pc, #632]	; (800f9a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 800f728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f72c:	637b      	str	r3, [r7, #52]	; 0x34
 800f72e:	f000 bdd4 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800f732:	2300      	movs	r3, #0
 800f734:	637b      	str	r3, [r7, #52]	; 0x34
 800f736:	f000 bdd0 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800f73a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f73e:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800f742:	430b      	orrs	r3, r1
 800f744:	d14c      	bne.n	800f7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf8>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800f746:	4b95      	ldr	r3, [pc, #596]	; (800f99c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f74c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800f750:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800f752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f754:	2b00      	cmp	r3, #0
 800f756:	d104      	bne.n	800f762 <HAL_RCCEx_GetPeriphCLKFreq+0xb7a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f758:	f7fd fddc 	bl	800d314 <HAL_RCC_GetPCLK1Freq>
 800f75c:	6378      	str	r0, [r7, #52]	; 0x34
 800f75e:	f000 bdbc 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800f762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f768:	d104      	bne.n	800f774 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f76a:	f7fd fcb1 	bl	800d0d0 <HAL_RCC_GetSysClockFreq>
 800f76e:	6378      	str	r0, [r7, #52]	; 0x34
 800f770:	f000 bdb3 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800f774:	4b89      	ldr	r3, [pc, #548]	; (800f99c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f77c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f780:	d107      	bne.n	800f792 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 800f782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f788:	d103      	bne.n	800f792 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
    {
      frequency = HSI_VALUE;
 800f78a:	4b86      	ldr	r3, [pc, #536]	; (800f9a4 <HAL_RCCEx_GetPeriphCLKFreq+0xdbc>)
 800f78c:	637b      	str	r3, [r7, #52]	; 0x34
 800f78e:	f000 bda4 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800f792:	4b82      	ldr	r3, [pc, #520]	; (800f99c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	f003 0320 	and.w	r3, r3, #32
 800f79a:	2b20      	cmp	r3, #32
 800f79c:	d11c      	bne.n	800f7d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
 800f79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f7a4:	d118      	bne.n	800f7d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f7a6:	4b7d      	ldr	r3, [pc, #500]	; (800f99c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f7a8:	689b      	ldr	r3, [r3, #8]
 800f7aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d005      	beq.n	800f7be <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 800f7b2:	4b7a      	ldr	r3, [pc, #488]	; (800f99c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f7b4:	689b      	ldr	r3, [r3, #8]
 800f7b6:	0e1b      	lsrs	r3, r3, #24
 800f7b8:	f003 030f 	and.w	r3, r3, #15
 800f7bc:	e006      	b.n	800f7cc <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 800f7be:	4b77      	ldr	r3, [pc, #476]	; (800f99c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f7c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f7c4:	041b      	lsls	r3, r3, #16
 800f7c6:	0e1b      	lsrs	r3, r3, #24
 800f7c8:	f003 030f 	and.w	r3, r3, #15
 800f7cc:	4a74      	ldr	r2, [pc, #464]	; (800f9a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 800f7ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f7d2:	637b      	str	r3, [r7, #52]	; 0x34
 800f7d4:	f000 bd81 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800f7d8:	2300      	movs	r3, #0
 800f7da:	637b      	str	r3, [r7, #52]	; 0x34
 800f7dc:	f000 bd7d 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800f7e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f7e4:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800f7e8:	430b      	orrs	r3, r1
 800f7ea:	d158      	bne.n	800f89e <HAL_RCCEx_GetPeriphCLKFreq+0xcb6>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800f7ec:	4b6b      	ldr	r3, [pc, #428]	; (800f99c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f7ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f7f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f7f6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7fa:	2bc0      	cmp	r3, #192	; 0xc0
 800f7fc:	d028      	beq.n	800f850 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
 800f7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f800:	2bc0      	cmp	r3, #192	; 0xc0
 800f802:	d848      	bhi.n	800f896 <HAL_RCCEx_GetPeriphCLKFreq+0xcae>
 800f804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f806:	2b80      	cmp	r3, #128	; 0x80
 800f808:	d00e      	beq.n	800f828 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
 800f80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f80c:	2b80      	cmp	r3, #128	; 0x80
 800f80e:	d842      	bhi.n	800f896 <HAL_RCCEx_GetPeriphCLKFreq+0xcae>
 800f810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f812:	2b00      	cmp	r3, #0
 800f814:	d003      	beq.n	800f81e <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
 800f816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f818:	2b40      	cmp	r3, #64	; 0x40
 800f81a:	d014      	beq.n	800f846 <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
 800f81c:	e03b      	b.n	800f896 <HAL_RCCEx_GetPeriphCLKFreq+0xcae>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800f81e:	f7fd fda1 	bl	800d364 <HAL_RCC_GetPCLK3Freq>
 800f822:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f824:	f000 bd59 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f828:	4b5c      	ldr	r3, [pc, #368]	; (800f99c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f834:	d103      	bne.n	800f83e <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
        {
          frequency = HSI_VALUE;
 800f836:	4b5b      	ldr	r3, [pc, #364]	; (800f9a4 <HAL_RCCEx_GetPeriphCLKFreq+0xdbc>)
 800f838:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f83a:	f000 bd4e 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800f83e:	2300      	movs	r3, #0
 800f840:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f842:	f000 bd4a 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800f846:	f7fd fc43 	bl	800d0d0 <HAL_RCC_GetSysClockFreq>
 800f84a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f84c:	f000 bd45 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f850:	4b52      	ldr	r3, [pc, #328]	; (800f99c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	f003 0320 	and.w	r3, r3, #32
 800f858:	2b20      	cmp	r3, #32
 800f85a:	d118      	bne.n	800f88e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f85c:	4b4f      	ldr	r3, [pc, #316]	; (800f99c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f85e:	689b      	ldr	r3, [r3, #8]
 800f860:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f864:	2b00      	cmp	r3, #0
 800f866:	d005      	beq.n	800f874 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
 800f868:	4b4c      	ldr	r3, [pc, #304]	; (800f99c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f86a:	689b      	ldr	r3, [r3, #8]
 800f86c:	0e1b      	lsrs	r3, r3, #24
 800f86e:	f003 030f 	and.w	r3, r3, #15
 800f872:	e006      	b.n	800f882 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800f874:	4b49      	ldr	r3, [pc, #292]	; (800f99c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f876:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f87a:	041b      	lsls	r3, r3, #16
 800f87c:	0e1b      	lsrs	r3, r3, #24
 800f87e:	f003 030f 	and.w	r3, r3, #15
 800f882:	4a47      	ldr	r2, [pc, #284]	; (800f9a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 800f884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f888:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f88a:	f000 bd26 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800f88e:	2300      	movs	r3, #0
 800f890:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f892:	f000 bd22 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      default:
      {
        frequency = 0U;
 800f896:	2300      	movs	r3, #0
 800f898:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f89a:	f000 bd1e 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800f89e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f8a2:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800f8a6:	430b      	orrs	r3, r1
 800f8a8:	d14c      	bne.n	800f944 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800f8aa:	4b3c      	ldr	r3, [pc, #240]	; (800f99c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f8ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f8b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800f8b4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800f8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d104      	bne.n	800f8c6 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f8bc:	f7fd fd2a 	bl	800d314 <HAL_RCC_GetPCLK1Freq>
 800f8c0:	6378      	str	r0, [r7, #52]	; 0x34
 800f8c2:	f000 bd0a 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800f8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f8cc:	d104      	bne.n	800f8d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcf0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f8ce:	f7fd fbff 	bl	800d0d0 <HAL_RCC_GetSysClockFreq>
 800f8d2:	6378      	str	r0, [r7, #52]	; 0x34
 800f8d4:	f000 bd01 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800f8d8:	4b30      	ldr	r3, [pc, #192]	; (800f99c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f8e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f8e4:	d107      	bne.n	800f8f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
 800f8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f8ec:	d103      	bne.n	800f8f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
    {
      frequency = HSI_VALUE;
 800f8ee:	4b2d      	ldr	r3, [pc, #180]	; (800f9a4 <HAL_RCCEx_GetPeriphCLKFreq+0xdbc>)
 800f8f0:	637b      	str	r3, [r7, #52]	; 0x34
 800f8f2:	f000 bcf2 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800f8f6:	4b29      	ldr	r3, [pc, #164]	; (800f99c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	f003 0320 	and.w	r3, r3, #32
 800f8fe:	2b20      	cmp	r3, #32
 800f900:	d11c      	bne.n	800f93c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 800f902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f904:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f908:	d118      	bne.n	800f93c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f90a:	4b24      	ldr	r3, [pc, #144]	; (800f99c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f90c:	689b      	ldr	r3, [r3, #8]
 800f90e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f912:	2b00      	cmp	r3, #0
 800f914:	d005      	beq.n	800f922 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 800f916:	4b21      	ldr	r3, [pc, #132]	; (800f99c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f918:	689b      	ldr	r3, [r3, #8]
 800f91a:	0e1b      	lsrs	r3, r3, #24
 800f91c:	f003 030f 	and.w	r3, r3, #15
 800f920:	e006      	b.n	800f930 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>
 800f922:	4b1e      	ldr	r3, [pc, #120]	; (800f99c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f924:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f928:	041b      	lsls	r3, r3, #16
 800f92a:	0e1b      	lsrs	r3, r3, #24
 800f92c:	f003 030f 	and.w	r3, r3, #15
 800f930:	4a1b      	ldr	r2, [pc, #108]	; (800f9a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 800f932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f936:	637b      	str	r3, [r7, #52]	; 0x34
 800f938:	f000 bccf 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800f93c:	2300      	movs	r3, #0
 800f93e:	637b      	str	r3, [r7, #52]	; 0x34
 800f940:	f000 bccb 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800f944:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f948:	f102 4140 	add.w	r1, r2, #3221225472	; 0xc0000000
 800f94c:	430b      	orrs	r3, r1
 800f94e:	d152      	bne.n	800f9f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800f950:	4b12      	ldr	r3, [pc, #72]	; (800f99c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f952:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f956:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800f95a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800f95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d104      	bne.n	800f96c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f962:	f7fd fcd7 	bl	800d314 <HAL_RCC_GetPCLK1Freq>
 800f966:	6378      	str	r0, [r7, #52]	; 0x34
 800f968:	f000 bcb7 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800f96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f96e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f972:	d104      	bne.n	800f97e <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f974:	f7fd fbac 	bl	800d0d0 <HAL_RCC_GetSysClockFreq>
 800f978:	6378      	str	r0, [r7, #52]	; 0x34
 800f97a:	f000 bcae 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800f97e:	4b07      	ldr	r3, [pc, #28]	; (800f99c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f986:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f98a:	d10d      	bne.n	800f9a8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc0>
 800f98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f98e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f992:	d109      	bne.n	800f9a8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc0>
    {
      frequency = HSI_VALUE;
 800f994:	4b03      	ldr	r3, [pc, #12]	; (800f9a4 <HAL_RCCEx_GetPeriphCLKFreq+0xdbc>)
 800f996:	637b      	str	r3, [r7, #52]	; 0x34
 800f998:	f000 bc9f 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 800f99c:	46020c00 	.word	0x46020c00
 800f9a0:	0802b810 	.word	0x0802b810
 800f9a4:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800f9a8:	4ba6      	ldr	r3, [pc, #664]	; (800fc44 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	f003 0320 	and.w	r3, r3, #32
 800f9b0:	2b20      	cmp	r3, #32
 800f9b2:	d11c      	bne.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
 800f9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f9ba:	d118      	bne.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f9bc:	4ba1      	ldr	r3, [pc, #644]	; (800fc44 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f9be:	689b      	ldr	r3, [r3, #8]
 800f9c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d005      	beq.n	800f9d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800f9c8:	4b9e      	ldr	r3, [pc, #632]	; (800fc44 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f9ca:	689b      	ldr	r3, [r3, #8]
 800f9cc:	0e1b      	lsrs	r3, r3, #24
 800f9ce:	f003 030f 	and.w	r3, r3, #15
 800f9d2:	e006      	b.n	800f9e2 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
 800f9d4:	4b9b      	ldr	r3, [pc, #620]	; (800fc44 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800f9d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f9da:	041b      	lsls	r3, r3, #16
 800f9dc:	0e1b      	lsrs	r3, r3, #24
 800f9de:	f003 030f 	and.w	r3, r3, #15
 800f9e2:	4a99      	ldr	r2, [pc, #612]	; (800fc48 <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 800f9e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9e8:	637b      	str	r3, [r7, #52]	; 0x34
 800f9ea:	f000 bc76 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	637b      	str	r3, [r7, #52]	; 0x34
 800f9f2:	f000 bc72 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800f9f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f9fa:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 800f9fe:	430b      	orrs	r3, r1
 800fa00:	d14c      	bne.n	800fa9c <HAL_RCCEx_GetPeriphCLKFreq+0xeb4>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800fa02:	4b90      	ldr	r3, [pc, #576]	; (800fc44 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fa04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800fa08:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800fa0c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800fa0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d104      	bne.n	800fa1e <HAL_RCCEx_GetPeriphCLKFreq+0xe36>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800fa14:	f7fd fc7e 	bl	800d314 <HAL_RCC_GetPCLK1Freq>
 800fa18:	6378      	str	r0, [r7, #52]	; 0x34
 800fa1a:	f000 bc5e 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800fa1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800fa24:	d104      	bne.n	800fa30 <HAL_RCCEx_GetPeriphCLKFreq+0xe48>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800fa26:	f7fd fb53 	bl	800d0d0 <HAL_RCC_GetSysClockFreq>
 800fa2a:	6378      	str	r0, [r7, #52]	; 0x34
 800fa2c:	f000 bc55 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800fa30:	4b84      	ldr	r3, [pc, #528]	; (800fc44 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fa38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fa3c:	d107      	bne.n	800fa4e <HAL_RCCEx_GetPeriphCLKFreq+0xe66>
 800fa3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fa44:	d103      	bne.n	800fa4e <HAL_RCCEx_GetPeriphCLKFreq+0xe66>
    {
      frequency = HSI_VALUE;
 800fa46:	4b81      	ldr	r3, [pc, #516]	; (800fc4c <HAL_RCCEx_GetPeriphCLKFreq+0x1064>)
 800fa48:	637b      	str	r3, [r7, #52]	; 0x34
 800fa4a:	f000 bc46 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800fa4e:	4b7d      	ldr	r3, [pc, #500]	; (800fc44 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	f003 0320 	and.w	r3, r3, #32
 800fa56:	2b20      	cmp	r3, #32
 800fa58:	d11c      	bne.n	800fa94 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
 800fa5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa5c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800fa60:	d118      	bne.n	800fa94 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fa62:	4b78      	ldr	r3, [pc, #480]	; (800fc44 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fa64:	689b      	ldr	r3, [r3, #8]
 800fa66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d005      	beq.n	800fa7a <HAL_RCCEx_GetPeriphCLKFreq+0xe92>
 800fa6e:	4b75      	ldr	r3, [pc, #468]	; (800fc44 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fa70:	689b      	ldr	r3, [r3, #8]
 800fa72:	0e1b      	lsrs	r3, r3, #24
 800fa74:	f003 030f 	and.w	r3, r3, #15
 800fa78:	e006      	b.n	800fa88 <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 800fa7a:	4b72      	ldr	r3, [pc, #456]	; (800fc44 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fa7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fa80:	041b      	lsls	r3, r3, #16
 800fa82:	0e1b      	lsrs	r3, r3, #24
 800fa84:	f003 030f 	and.w	r3, r3, #15
 800fa88:	4a6f      	ldr	r2, [pc, #444]	; (800fc48 <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 800fa8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa8e:	637b      	str	r3, [r7, #52]	; 0x34
 800fa90:	f000 bc23 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800fa94:	2300      	movs	r3, #0
 800fa96:	637b      	str	r3, [r7, #52]	; 0x34
 800fa98:	f000 bc1f 	b.w	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800fa9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800faa0:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800faa4:	430b      	orrs	r3, r1
 800faa6:	d164      	bne.n	800fb72 <HAL_RCCEx_GetPeriphCLKFreq+0xf8a>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800faa8:	4b66      	ldr	r3, [pc, #408]	; (800fc44 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800faaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800faae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fab2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800fab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d120      	bne.n	800fafc <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800faba:	4b62      	ldr	r3, [pc, #392]	; (800fc44 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	f003 0320 	and.w	r3, r3, #32
 800fac2:	2b20      	cmp	r3, #32
 800fac4:	d117      	bne.n	800faf6 <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fac6:	4b5f      	ldr	r3, [pc, #380]	; (800fc44 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fac8:	689b      	ldr	r3, [r3, #8]
 800faca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800face:	2b00      	cmp	r3, #0
 800fad0:	d005      	beq.n	800fade <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
 800fad2:	4b5c      	ldr	r3, [pc, #368]	; (800fc44 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fad4:	689b      	ldr	r3, [r3, #8]
 800fad6:	0e1b      	lsrs	r3, r3, #24
 800fad8:	f003 030f 	and.w	r3, r3, #15
 800fadc:	e006      	b.n	800faec <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 800fade:	4b59      	ldr	r3, [pc, #356]	; (800fc44 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fae0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fae4:	041b      	lsls	r3, r3, #16
 800fae6:	0e1b      	lsrs	r3, r3, #24
 800fae8:	f003 030f 	and.w	r3, r3, #15
 800faec:	4a56      	ldr	r2, [pc, #344]	; (800fc48 <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 800faee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800faf2:	637b      	str	r3, [r7, #52]	; 0x34
 800faf4:	e3f1      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = 0U;
 800faf6:	2300      	movs	r3, #0
 800faf8:	637b      	str	r3, [r7, #52]	; 0x34
 800fafa:	e3ee      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800fafc:	4b51      	ldr	r3, [pc, #324]	; (800fc44 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fafe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fb02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fb06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fb0a:	d112      	bne.n	800fb32 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800fb0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fb12:	d10e      	bne.n	800fb32 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fb14:	4b4b      	ldr	r3, [pc, #300]	; (800fc44 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fb16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fb1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fb1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fb22:	d102      	bne.n	800fb2a <HAL_RCCEx_GetPeriphCLKFreq+0xf42>
      {
        frequency = LSI_VALUE / 128U;
 800fb24:	23fa      	movs	r3, #250	; 0xfa
 800fb26:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fb28:	e3d7      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = LSI_VALUE;
 800fb2a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800fb2e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fb30:	e3d3      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800fb32:	4b44      	ldr	r3, [pc, #272]	; (800fc44 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fb3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fb3e:	d106      	bne.n	800fb4e <HAL_RCCEx_GetPeriphCLKFreq+0xf66>
 800fb40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fb46:	d102      	bne.n	800fb4e <HAL_RCCEx_GetPeriphCLKFreq+0xf66>
    {
      frequency = HSI_VALUE;
 800fb48:	4b40      	ldr	r3, [pc, #256]	; (800fc4c <HAL_RCCEx_GetPeriphCLKFreq+0x1064>)
 800fb4a:	637b      	str	r3, [r7, #52]	; 0x34
 800fb4c:	e3c5      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800fb4e:	4b3d      	ldr	r3, [pc, #244]	; (800fc44 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fb50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fb54:	f003 0302 	and.w	r3, r3, #2
 800fb58:	2b02      	cmp	r3, #2
 800fb5a:	d107      	bne.n	800fb6c <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
 800fb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fb62:	d103      	bne.n	800fb6c <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
    {
      frequency = LSE_VALUE;
 800fb64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fb68:	637b      	str	r3, [r7, #52]	; 0x34
 800fb6a:	e3b6      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	637b      	str	r3, [r7, #52]	; 0x34
 800fb70:	e3b3      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800fb72:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb76:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800fb7a:	430b      	orrs	r3, r1
 800fb7c:	d16b      	bne.n	800fc56 <HAL_RCCEx_GetPeriphCLKFreq+0x106e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800fb7e:	4b31      	ldr	r3, [pc, #196]	; (800fc44 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fb80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800fb84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800fb88:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800fb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d120      	bne.n	800fbd2 <HAL_RCCEx_GetPeriphCLKFreq+0xfea>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800fb90:	4b2c      	ldr	r3, [pc, #176]	; (800fc44 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	f003 0320 	and.w	r3, r3, #32
 800fb98:	2b20      	cmp	r3, #32
 800fb9a:	d117      	bne.n	800fbcc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fb9c:	4b29      	ldr	r3, [pc, #164]	; (800fc44 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fb9e:	689b      	ldr	r3, [r3, #8]
 800fba0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d005      	beq.n	800fbb4 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 800fba8:	4b26      	ldr	r3, [pc, #152]	; (800fc44 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fbaa:	689b      	ldr	r3, [r3, #8]
 800fbac:	0e1b      	lsrs	r3, r3, #24
 800fbae:	f003 030f 	and.w	r3, r3, #15
 800fbb2:	e006      	b.n	800fbc2 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
 800fbb4:	4b23      	ldr	r3, [pc, #140]	; (800fc44 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fbb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fbba:	041b      	lsls	r3, r3, #16
 800fbbc:	0e1b      	lsrs	r3, r3, #24
 800fbbe:	f003 030f 	and.w	r3, r3, #15
 800fbc2:	4a21      	ldr	r2, [pc, #132]	; (800fc48 <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 800fbc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbc8:	637b      	str	r3, [r7, #52]	; 0x34
 800fbca:	e386      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = 0U;
 800fbcc:	2300      	movs	r3, #0
 800fbce:	637b      	str	r3, [r7, #52]	; 0x34
 800fbd0:	e383      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800fbd2:	4b1c      	ldr	r3, [pc, #112]	; (800fc44 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fbd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fbd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fbdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fbe0:	d112      	bne.n	800fc08 <HAL_RCCEx_GetPeriphCLKFreq+0x1020>
 800fbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fbe8:	d10e      	bne.n	800fc08 <HAL_RCCEx_GetPeriphCLKFreq+0x1020>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fbea:	4b16      	ldr	r3, [pc, #88]	; (800fc44 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fbec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fbf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fbf4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fbf8:	d102      	bne.n	800fc00 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
      {
        frequency = LSI_VALUE / 128U;
 800fbfa:	23fa      	movs	r3, #250	; 0xfa
 800fbfc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fbfe:	e36c      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = LSI_VALUE;
 800fc00:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800fc04:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fc06:	e368      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800fc08:	4b0e      	ldr	r3, [pc, #56]	; (800fc44 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fc10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fc14:	d106      	bne.n	800fc24 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>
 800fc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fc1c:	d102      	bne.n	800fc24 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>
    {
      frequency = HSI_VALUE;
 800fc1e:	4b0b      	ldr	r3, [pc, #44]	; (800fc4c <HAL_RCCEx_GetPeriphCLKFreq+0x1064>)
 800fc20:	637b      	str	r3, [r7, #52]	; 0x34
 800fc22:	e35a      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800fc24:	4b07      	ldr	r3, [pc, #28]	; (800fc44 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fc26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fc2a:	f003 0302 	and.w	r3, r3, #2
 800fc2e:	2b02      	cmp	r3, #2
 800fc30:	d10e      	bne.n	800fc50 <HAL_RCCEx_GetPeriphCLKFreq+0x1068>
 800fc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fc38:	d10a      	bne.n	800fc50 <HAL_RCCEx_GetPeriphCLKFreq+0x1068>
    {
      frequency = LSE_VALUE;
 800fc3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fc3e:	637b      	str	r3, [r7, #52]	; 0x34
 800fc40:	e34b      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 800fc42:	bf00      	nop
 800fc44:	46020c00 	.word	0x46020c00
 800fc48:	0802b810 	.word	0x0802b810
 800fc4c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800fc50:	2300      	movs	r3, #0
 800fc52:	637b      	str	r3, [r7, #52]	; 0x34
 800fc54:	e341      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800fc56:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc5a:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800fc5e:	430b      	orrs	r3, r1
 800fc60:	d147      	bne.n	800fcf2 <HAL_RCCEx_GetPeriphCLKFreq+0x110a>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800fc62:	4b9b      	ldr	r3, [pc, #620]	; (800fed0 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800fc64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc68:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800fc6c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800fc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d103      	bne.n	800fc7c <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800fc74:	f7fd fb4e 	bl	800d314 <HAL_RCC_GetPCLK1Freq>
 800fc78:	6378      	str	r0, [r7, #52]	; 0x34
 800fc7a:	e32e      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800fc7c:	4b94      	ldr	r3, [pc, #592]	; (800fed0 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800fc7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fc82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fc86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fc8a:	d112      	bne.n	800fcb2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
 800fc8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800fc92:	d10e      	bne.n	800fcb2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fc94:	4b8e      	ldr	r3, [pc, #568]	; (800fed0 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800fc96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fc9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fc9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fca2:	d102      	bne.n	800fcaa <HAL_RCCEx_GetPeriphCLKFreq+0x10c2>
      {
        frequency = LSI_VALUE / 128U;
 800fca4:	23fa      	movs	r3, #250	; 0xfa
 800fca6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fca8:	e317      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = LSI_VALUE;
 800fcaa:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800fcae:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fcb0:	e313      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800fcb2:	4b87      	ldr	r3, [pc, #540]	; (800fed0 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fcba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fcbe:	d106      	bne.n	800fcce <HAL_RCCEx_GetPeriphCLKFreq+0x10e6>
 800fcc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcc2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800fcc6:	d102      	bne.n	800fcce <HAL_RCCEx_GetPeriphCLKFreq+0x10e6>
    {
      frequency = HSI_VALUE;
 800fcc8:	4b82      	ldr	r3, [pc, #520]	; (800fed4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fcca:	637b      	str	r3, [r7, #52]	; 0x34
 800fccc:	e305      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800fcce:	4b80      	ldr	r3, [pc, #512]	; (800fed0 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800fcd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fcd4:	f003 0302 	and.w	r3, r3, #2
 800fcd8:	2b02      	cmp	r3, #2
 800fcda:	d107      	bne.n	800fcec <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
 800fcdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcde:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800fce2:	d103      	bne.n	800fcec <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
    {
      frequency = LSE_VALUE;
 800fce4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fce8:	637b      	str	r3, [r7, #52]	; 0x34
 800fcea:	e2f6      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800fcec:	2300      	movs	r3, #0
 800fcee:	637b      	str	r3, [r7, #52]	; 0x34
 800fcf0:	e2f3      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800fcf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fcf6:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800fcfa:	430b      	orrs	r3, r1
 800fcfc:	d12d      	bne.n	800fd5a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800fcfe:	4b74      	ldr	r3, [pc, #464]	; (800fed0 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800fd00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fd04:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800fd08:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800fd0a:	4b71      	ldr	r3, [pc, #452]	; (800fed0 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fd12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fd16:	d105      	bne.n	800fd24 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800fd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d102      	bne.n	800fd24 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
    {
      frequency = HSE_VALUE;
 800fd1e:	4b6d      	ldr	r3, [pc, #436]	; (800fed4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fd20:	637b      	str	r3, [r7, #52]	; 0x34
 800fd22:	e2da      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800fd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fd2a:	d107      	bne.n	800fd3c <HAL_RCCEx_GetPeriphCLKFreq+0x1154>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fd2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd30:	4618      	mov	r0, r3
 800fd32:	f7fe fb21 	bl	800e378 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800fd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd38:	637b      	str	r3, [r7, #52]	; 0x34
 800fd3a:	e2ce      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800fd3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fd42:	d107      	bne.n	800fd54 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fd44:	f107 0318 	add.w	r3, r7, #24
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f7fe fc7d 	bl	800e648 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800fd4e:	69bb      	ldr	r3, [r7, #24]
 800fd50:	637b      	str	r3, [r7, #52]	; 0x34
 800fd52:	e2c2      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800fd54:	2300      	movs	r3, #0
 800fd56:	637b      	str	r3, [r7, #52]	; 0x34
 800fd58:	e2bf      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800fd5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd5e:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800fd62:	430b      	orrs	r3, r1
 800fd64:	d156      	bne.n	800fe14 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800fd66:	4b5a      	ldr	r3, [pc, #360]	; (800fed0 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800fd68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fd6c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800fd70:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800fd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fd78:	d028      	beq.n	800fdcc <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>
 800fd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fd80:	d845      	bhi.n	800fe0e <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
 800fd82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fd88:	d013      	beq.n	800fdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x11ca>
 800fd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fd90:	d83d      	bhi.n	800fe0e <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
 800fd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d004      	beq.n	800fda2 <HAL_RCCEx_GetPeriphCLKFreq+0x11ba>
 800fd98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fd9e:	d004      	beq.n	800fdaa <HAL_RCCEx_GetPeriphCLKFreq+0x11c2>
 800fda0:	e035      	b.n	800fe0e <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800fda2:	f7fd facb 	bl	800d33c <HAL_RCC_GetPCLK2Freq>
 800fda6:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fda8:	e297      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800fdaa:	f7fd f991 	bl	800d0d0 <HAL_RCC_GetSysClockFreq>
 800fdae:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fdb0:	e293      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fdb2:	4b47      	ldr	r3, [pc, #284]	; (800fed0 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fdba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fdbe:	d102      	bne.n	800fdc6 <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        {
          frequency = HSI_VALUE;
 800fdc0:	4b44      	ldr	r3, [pc, #272]	; (800fed4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fdc2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fdc4:	e289      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fdca:	e286      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800fdcc:	4b40      	ldr	r3, [pc, #256]	; (800fed0 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	f003 0320 	and.w	r3, r3, #32
 800fdd4:	2b20      	cmp	r3, #32
 800fdd6:	d117      	bne.n	800fe08 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fdd8:	4b3d      	ldr	r3, [pc, #244]	; (800fed0 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800fdda:	689b      	ldr	r3, [r3, #8]
 800fddc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d005      	beq.n	800fdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800fde4:	4b3a      	ldr	r3, [pc, #232]	; (800fed0 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800fde6:	689b      	ldr	r3, [r3, #8]
 800fde8:	0e1b      	lsrs	r3, r3, #24
 800fdea:	f003 030f 	and.w	r3, r3, #15
 800fdee:	e006      	b.n	800fdfe <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 800fdf0:	4b37      	ldr	r3, [pc, #220]	; (800fed0 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800fdf2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fdf6:	041b      	lsls	r3, r3, #16
 800fdf8:	0e1b      	lsrs	r3, r3, #24
 800fdfa:	f003 030f 	and.w	r3, r3, #15
 800fdfe:	4a36      	ldr	r2, [pc, #216]	; (800fed8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 800fe00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe04:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fe06:	e268      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800fe08:	2300      	movs	r3, #0
 800fe0a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fe0c:	e265      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 800fe0e:	2300      	movs	r3, #0
 800fe10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fe12:	e262      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800fe14:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe18:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800fe1c:	430b      	orrs	r3, r1
 800fe1e:	d15d      	bne.n	800fedc <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800fe20:	4b2b      	ldr	r3, [pc, #172]	; (800fed0 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800fe22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fe26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800fe2a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800fe2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800fe32:	d028      	beq.n	800fe86 <HAL_RCCEx_GetPeriphCLKFreq+0x129e>
 800fe34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800fe3a:	d845      	bhi.n	800fec8 <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
 800fe3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fe42:	d013      	beq.n	800fe6c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>
 800fe44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fe4a:	d83d      	bhi.n	800fec8 <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
 800fe4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d004      	beq.n	800fe5c <HAL_RCCEx_GetPeriphCLKFreq+0x1274>
 800fe52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fe58:	d004      	beq.n	800fe64 <HAL_RCCEx_GetPeriphCLKFreq+0x127c>
 800fe5a:	e035      	b.n	800fec8 <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800fe5c:	f7fd fa5a 	bl	800d314 <HAL_RCC_GetPCLK1Freq>
 800fe60:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fe62:	e23a      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800fe64:	f7fd f934 	bl	800d0d0 <HAL_RCC_GetSysClockFreq>
 800fe68:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fe6a:	e236      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fe6c:	4b18      	ldr	r3, [pc, #96]	; (800fed0 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fe74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fe78:	d102      	bne.n	800fe80 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
        {
          frequency = HSI_VALUE;
 800fe7a:	4b16      	ldr	r3, [pc, #88]	; (800fed4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fe7c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fe7e:	e22c      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800fe80:	2300      	movs	r3, #0
 800fe82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fe84:	e229      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800fe86:	4b12      	ldr	r3, [pc, #72]	; (800fed0 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	f003 0320 	and.w	r3, r3, #32
 800fe8e:	2b20      	cmp	r3, #32
 800fe90:	d117      	bne.n	800fec2 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fe92:	4b0f      	ldr	r3, [pc, #60]	; (800fed0 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800fe94:	689b      	ldr	r3, [r3, #8]
 800fe96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d005      	beq.n	800feaa <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 800fe9e:	4b0c      	ldr	r3, [pc, #48]	; (800fed0 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800fea0:	689b      	ldr	r3, [r3, #8]
 800fea2:	0e1b      	lsrs	r3, r3, #24
 800fea4:	f003 030f 	and.w	r3, r3, #15
 800fea8:	e006      	b.n	800feb8 <HAL_RCCEx_GetPeriphCLKFreq+0x12d0>
 800feaa:	4b09      	ldr	r3, [pc, #36]	; (800fed0 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800feac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800feb0:	041b      	lsls	r3, r3, #16
 800feb2:	0e1b      	lsrs	r3, r3, #24
 800feb4:	f003 030f 	and.w	r3, r3, #15
 800feb8:	4a07      	ldr	r2, [pc, #28]	; (800fed8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 800feba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800febe:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fec0:	e20b      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800fec2:	2300      	movs	r3, #0
 800fec4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fec6:	e208      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 800fec8:	2300      	movs	r3, #0
 800feca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fecc:	e205      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 800fece:	bf00      	nop
 800fed0:	46020c00 	.word	0x46020c00
 800fed4:	00f42400 	.word	0x00f42400
 800fed8:	0802b810 	.word	0x0802b810
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800fedc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fee0:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800fee4:	430b      	orrs	r3, r1
 800fee6:	d176      	bne.n	800ffd6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ee>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800fee8:	4ba6      	ldr	r3, [pc, #664]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800feea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800feee:	f003 0318 	and.w	r3, r3, #24
 800fef2:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800fef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fef6:	2b18      	cmp	r3, #24
 800fef8:	d86a      	bhi.n	800ffd0 <HAL_RCCEx_GetPeriphCLKFreq+0x13e8>
 800fefa:	a201      	add	r2, pc, #4	; (adr r2, 800ff00 <HAL_RCCEx_GetPeriphCLKFreq+0x1318>)
 800fefc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff00:	0800ff65 	.word	0x0800ff65
 800ff04:	0800ffd1 	.word	0x0800ffd1
 800ff08:	0800ffd1 	.word	0x0800ffd1
 800ff0c:	0800ffd1 	.word	0x0800ffd1
 800ff10:	0800ffd1 	.word	0x0800ffd1
 800ff14:	0800ffd1 	.word	0x0800ffd1
 800ff18:	0800ffd1 	.word	0x0800ffd1
 800ff1c:	0800ffd1 	.word	0x0800ffd1
 800ff20:	0800ff6d 	.word	0x0800ff6d
 800ff24:	0800ffd1 	.word	0x0800ffd1
 800ff28:	0800ffd1 	.word	0x0800ffd1
 800ff2c:	0800ffd1 	.word	0x0800ffd1
 800ff30:	0800ffd1 	.word	0x0800ffd1
 800ff34:	0800ffd1 	.word	0x0800ffd1
 800ff38:	0800ffd1 	.word	0x0800ffd1
 800ff3c:	0800ffd1 	.word	0x0800ffd1
 800ff40:	0800ff75 	.word	0x0800ff75
 800ff44:	0800ffd1 	.word	0x0800ffd1
 800ff48:	0800ffd1 	.word	0x0800ffd1
 800ff4c:	0800ffd1 	.word	0x0800ffd1
 800ff50:	0800ffd1 	.word	0x0800ffd1
 800ff54:	0800ffd1 	.word	0x0800ffd1
 800ff58:	0800ffd1 	.word	0x0800ffd1
 800ff5c:	0800ffd1 	.word	0x0800ffd1
 800ff60:	0800ff8f 	.word	0x0800ff8f
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800ff64:	f7fd f9fe 	bl	800d364 <HAL_RCC_GetPCLK3Freq>
 800ff68:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ff6a:	e1b6      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800ff6c:	f7fd f8b0 	bl	800d0d0 <HAL_RCC_GetSysClockFreq>
 800ff70:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ff72:	e1b2      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ff74:	4b83      	ldr	r3, [pc, #524]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ff7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ff80:	d102      	bne.n	800ff88 <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
        {
          frequency = HSI_VALUE;
 800ff82:	4b81      	ldr	r3, [pc, #516]	; (8010188 <HAL_RCCEx_GetPeriphCLKFreq+0x15a0>)
 800ff84:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ff86:	e1a8      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800ff88:	2300      	movs	r3, #0
 800ff8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ff8c:	e1a5      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ff8e:	4b7d      	ldr	r3, [pc, #500]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	f003 0320 	and.w	r3, r3, #32
 800ff96:	2b20      	cmp	r3, #32
 800ff98:	d117      	bne.n	800ffca <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ff9a:	4b7a      	ldr	r3, [pc, #488]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800ff9c:	689b      	ldr	r3, [r3, #8]
 800ff9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d005      	beq.n	800ffb2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ca>
 800ffa6:	4b77      	ldr	r3, [pc, #476]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800ffa8:	689b      	ldr	r3, [r3, #8]
 800ffaa:	0e1b      	lsrs	r3, r3, #24
 800ffac:	f003 030f 	and.w	r3, r3, #15
 800ffb0:	e006      	b.n	800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 800ffb2:	4b74      	ldr	r3, [pc, #464]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800ffb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ffb8:	041b      	lsls	r3, r3, #16
 800ffba:	0e1b      	lsrs	r3, r3, #24
 800ffbc:	f003 030f 	and.w	r3, r3, #15
 800ffc0:	4a72      	ldr	r2, [pc, #456]	; (801018c <HAL_RCCEx_GetPeriphCLKFreq+0x15a4>)
 800ffc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffc6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ffc8:	e187      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800ffca:	2300      	movs	r3, #0
 800ffcc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ffce:	e184      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ffd4:	e181      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800ffd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ffda:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800ffde:	430b      	orrs	r3, r1
 800ffe0:	d155      	bne.n	801008e <HAL_RCCEx_GetPeriphCLKFreq+0x14a6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800ffe2:	4b68      	ldr	r3, [pc, #416]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 800ffe4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ffe8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800ffec:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800ffee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fff0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fff4:	d013      	beq.n	801001e <HAL_RCCEx_GetPeriphCLKFreq+0x1436>
 800fff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fff8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fffc:	d844      	bhi.n	8010088 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 800fffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010000:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010004:	d013      	beq.n	801002e <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
 8010006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010008:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801000c:	d83c      	bhi.n	8010088 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 801000e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010010:	2b00      	cmp	r3, #0
 8010012:	d014      	beq.n	801003e <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 8010014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010016:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801001a:	d014      	beq.n	8010046 <HAL_RCCEx_GetPeriphCLKFreq+0x145e>
 801001c:	e034      	b.n	8010088 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801001e:	f107 0318 	add.w	r3, r7, #24
 8010022:	4618      	mov	r0, r3
 8010024:	f7fe fb10 	bl	800e648 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8010028:	69fb      	ldr	r3, [r7, #28]
 801002a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801002c:	e155      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801002e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010032:	4618      	mov	r0, r3
 8010034:	f7fe f9a0 	bl	800e378 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8010038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801003a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801003c:	e14d      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 801003e:	f7fd f847 	bl	800d0d0 <HAL_RCC_GetSysClockFreq>
 8010042:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8010044:	e149      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8010046:	4b4f      	ldr	r3, [pc, #316]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	f003 0320 	and.w	r3, r3, #32
 801004e:	2b20      	cmp	r3, #32
 8010050:	d117      	bne.n	8010082 <HAL_RCCEx_GetPeriphCLKFreq+0x149a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8010052:	4b4c      	ldr	r3, [pc, #304]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 8010054:	689b      	ldr	r3, [r3, #8]
 8010056:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801005a:	2b00      	cmp	r3, #0
 801005c:	d005      	beq.n	801006a <HAL_RCCEx_GetPeriphCLKFreq+0x1482>
 801005e:	4b49      	ldr	r3, [pc, #292]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 8010060:	689b      	ldr	r3, [r3, #8]
 8010062:	0e1b      	lsrs	r3, r3, #24
 8010064:	f003 030f 	and.w	r3, r3, #15
 8010068:	e006      	b.n	8010078 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>
 801006a:	4b46      	ldr	r3, [pc, #280]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 801006c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8010070:	041b      	lsls	r3, r3, #16
 8010072:	0e1b      	lsrs	r3, r3, #24
 8010074:	f003 030f 	and.w	r3, r3, #15
 8010078:	4a44      	ldr	r2, [pc, #272]	; (801018c <HAL_RCCEx_GetPeriphCLKFreq+0x15a4>)
 801007a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801007e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8010080:	e12b      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 8010082:	2300      	movs	r3, #0
 8010084:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010086:	e128      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 8010088:	2300      	movs	r3, #0
 801008a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801008c:	e125      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 801008e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010092:	1e59      	subs	r1, r3, #1
 8010094:	ea52 0301 	orrs.w	r3, r2, r1
 8010098:	d13c      	bne.n	8010114 <HAL_RCCEx_GetPeriphCLKFreq+0x152c>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 801009a:	4b3a      	ldr	r3, [pc, #232]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 801009c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80100a0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80100a4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80100a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80100ac:	d027      	beq.n	80100fe <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 80100ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80100b4:	d82b      	bhi.n	801010e <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 80100b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80100bc:	d017      	beq.n	80100ee <HAL_RCCEx_GetPeriphCLKFreq+0x1506>
 80100be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80100c4:	d823      	bhi.n	801010e <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 80100c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d004      	beq.n	80100d6 <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 80100cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80100d2:	d004      	beq.n	80100de <HAL_RCCEx_GetPeriphCLKFreq+0x14f6>
 80100d4:	e01b      	b.n	801010e <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80100d6:	f7fc fffb 	bl	800d0d0 <HAL_RCC_GetSysClockFreq>
 80100da:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80100dc:	e0fd      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80100de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80100e2:	4618      	mov	r0, r3
 80100e4:	f7fe f948 	bl	800e378 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80100e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80100ec:	e0f5      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80100ee:	f107 0318 	add.w	r3, r7, #24
 80100f2:	4618      	mov	r0, r3
 80100f4:	f7fe faa8 	bl	800e648 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80100f8:	69fb      	ldr	r3, [r7, #28]
 80100fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80100fc:	e0ed      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80100fe:	f107 030c 	add.w	r3, r7, #12
 8010102:	4618      	mov	r0, r3
 8010104:	f7fe fc08 	bl	800e918 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 8010108:	697b      	ldr	r3, [r7, #20]
 801010a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801010c:	e0e5      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 801010e:	2300      	movs	r3, #0
 8010110:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010112:	e0e2      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8010114:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010118:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 801011c:	430b      	orrs	r3, r1
 801011e:	d137      	bne.n	8010190 <HAL_RCCEx_GetPeriphCLKFreq+0x15a8>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8010120:	4b18      	ldr	r3, [pc, #96]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 8010122:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8010126:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801012a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 801012c:	4b15      	ldr	r3, [pc, #84]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 801012e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8010132:	f003 0302 	and.w	r3, r3, #2
 8010136:	2b02      	cmp	r3, #2
 8010138:	d106      	bne.n	8010148 <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
 801013a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801013c:	2b00      	cmp	r3, #0
 801013e:	d103      	bne.n	8010148 <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
    {
      frequency = LSE_VALUE;
 8010140:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010144:	637b      	str	r3, [r7, #52]	; 0x34
 8010146:	e0c8      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8010148:	4b0e      	ldr	r3, [pc, #56]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 801014a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801014e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010152:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010156:	d112      	bne.n	801017e <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
 8010158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801015a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801015e:	d10e      	bne.n	801017e <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8010160:	4b08      	ldr	r3, [pc, #32]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 8010162:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8010166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801016a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801016e:	d102      	bne.n	8010176 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
      {
        frequency = LSI_VALUE / 128U;
 8010170:	23fa      	movs	r3, #250	; 0xfa
 8010172:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8010174:	e0b1      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = LSI_VALUE;
 8010176:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 801017a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 801017c:	e0ad      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 801017e:	2300      	movs	r3, #0
 8010180:	637b      	str	r3, [r7, #52]	; 0x34
 8010182:	e0aa      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 8010184:	46020c00 	.word	0x46020c00
 8010188:	00f42400 	.word	0x00f42400
 801018c:	0802b810 	.word	0x0802b810
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8010190:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010194:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8010198:	430b      	orrs	r3, r1
 801019a:	d131      	bne.n	8010200 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 801019c:	4b51      	ldr	r3, [pc, #324]	; (80102e4 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 801019e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80101a2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80101a6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80101a8:	4b4e      	ldr	r3, [pc, #312]	; (80102e4 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80101b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80101b4:	d105      	bne.n	80101c2 <HAL_RCCEx_GetPeriphCLKFreq+0x15da>
 80101b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d102      	bne.n	80101c2 <HAL_RCCEx_GetPeriphCLKFreq+0x15da>
    {
      frequency = HSI48_VALUE;
 80101bc:	4b4a      	ldr	r3, [pc, #296]	; (80102e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 80101be:	637b      	str	r3, [r7, #52]	; 0x34
 80101c0:	e08b      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80101c2:	4b48      	ldr	r3, [pc, #288]	; (80102e4 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80101ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80101ce:	d106      	bne.n	80101de <HAL_RCCEx_GetPeriphCLKFreq+0x15f6>
 80101d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80101d6:	d102      	bne.n	80101de <HAL_RCCEx_GetPeriphCLKFreq+0x15f6>
    {
      frequency = HSI48_VALUE >> 1U ;
 80101d8:	4b44      	ldr	r3, [pc, #272]	; (80102ec <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 80101da:	637b      	str	r3, [r7, #52]	; 0x34
 80101dc:	e07d      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80101de:	4b41      	ldr	r3, [pc, #260]	; (80102e4 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80101e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80101ea:	d106      	bne.n	80101fa <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
 80101ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80101f2:	d102      	bne.n	80101fa <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
    {
      frequency = HSI_VALUE;
 80101f4:	4b3e      	ldr	r3, [pc, #248]	; (80102f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 80101f6:	637b      	str	r3, [r7, #52]	; 0x34
 80101f8:	e06f      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80101fa:	2300      	movs	r3, #0
 80101fc:	637b      	str	r3, [r7, #52]	; 0x34
 80101fe:	e06c      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 8010200:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010204:	1e99      	subs	r1, r3, #2
 8010206:	ea52 0301 	orrs.w	r3, r2, r1
 801020a:	d120      	bne.n	801024e <HAL_RCCEx_GetPeriphCLKFreq+0x1666>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 801020c:	4b35      	ldr	r3, [pc, #212]	; (80102e4 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 801020e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8010212:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010216:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8010218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801021a:	2b00      	cmp	r3, #0
 801021c:	d004      	beq.n	8010228 <HAL_RCCEx_GetPeriphCLKFreq+0x1640>
 801021e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010220:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010224:	d008      	beq.n	8010238 <HAL_RCCEx_GetPeriphCLKFreq+0x1650>
 8010226:	e00f      	b.n	8010248 <HAL_RCCEx_GetPeriphCLKFreq+0x1660>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010228:	f107 030c 	add.w	r3, r7, #12
 801022c:	4618      	mov	r0, r3
 801022e:	f7fe fb73 	bl	800e918 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 8010232:	697b      	ldr	r3, [r7, #20]
 8010234:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010236:	e050      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010238:	f107 0318 	add.w	r3, r7, #24
 801023c:	4618      	mov	r0, r3
 801023e:	f7fe fa03 	bl	800e648 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 8010242:	6a3b      	ldr	r3, [r7, #32]
 8010244:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010246:	e048      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 8010248:	2300      	movs	r3, #0
 801024a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801024c:	e045      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 801024e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010252:	f1a3 0108 	sub.w	r1, r3, #8
 8010256:	ea52 0301 	orrs.w	r3, r2, r1
 801025a:	d13c      	bne.n	80102d6 <HAL_RCCEx_GetPeriphCLKFreq+0x16ee>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 801025c:	4b21      	ldr	r3, [pc, #132]	; (80102e4 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 801025e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8010262:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8010266:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 8010268:	4b1e      	ldr	r3, [pc, #120]	; (80102e4 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010270:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010274:	d105      	bne.n	8010282 <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
 8010276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010278:	2b00      	cmp	r3, #0
 801027a:	d102      	bne.n	8010282 <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
    {
      frequency = HSE_VALUE;
 801027c:	4b1c      	ldr	r3, [pc, #112]	; (80102f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 801027e:	637b      	str	r3, [r7, #52]	; 0x34
 8010280:	e02b      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 8010282:	4b18      	ldr	r3, [pc, #96]	; (80102e4 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801028a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801028e:	d106      	bne.n	801029e <HAL_RCCEx_GetPeriphCLKFreq+0x16b6>
 8010290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010292:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010296:	d102      	bne.n	801029e <HAL_RCCEx_GetPeriphCLKFreq+0x16b6>
    {
      frequency = HSE_VALUE >> 1U ;
 8010298:	4b16      	ldr	r3, [pc, #88]	; (80102f4 <HAL_RCCEx_GetPeriphCLKFreq+0x170c>)
 801029a:	637b      	str	r3, [r7, #52]	; 0x34
 801029c:	e01d      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 801029e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80102a4:	d107      	bne.n	80102b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16ce>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80102a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80102aa:	4618      	mov	r0, r3
 80102ac:	f7fe f864 	bl	800e378 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80102b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102b2:	637b      	str	r3, [r7, #52]	; 0x34
 80102b4:	e011      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 80102b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102b8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80102bc:	d108      	bne.n	80102d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16e8>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80102be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80102c2:	4618      	mov	r0, r3
 80102c4:	f7fe f858 	bl	800e378 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 80102c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ca:	085b      	lsrs	r3, r3, #1
 80102cc:	637b      	str	r3, [r7, #52]	; 0x34
 80102ce:	e004      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 80102d0:	2300      	movs	r3, #0
 80102d2:	637b      	str	r3, [r7, #52]	; 0x34
 80102d4:	e001      	b.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80102d6:	2300      	movs	r3, #0
 80102d8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 80102da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80102dc:	4618      	mov	r0, r3
 80102de:	3738      	adds	r7, #56	; 0x38
 80102e0:	46bd      	mov	sp, r7
 80102e2:	bd80      	pop	{r7, pc}
 80102e4:	46020c00 	.word	0x46020c00
 80102e8:	02dc6c00 	.word	0x02dc6c00
 80102ec:	016e3600 	.word	0x016e3600
 80102f0:	00f42400 	.word	0x00f42400
 80102f4:	007a1200 	.word	0x007a1200

080102f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b084      	sub	sp, #16
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8010300:	4b47      	ldr	r3, [pc, #284]	; (8010420 <RCCEx_PLL2_Config+0x128>)
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	4a46      	ldr	r2, [pc, #280]	; (8010420 <RCCEx_PLL2_Config+0x128>)
 8010306:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801030a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801030c:	f7f7 fa96 	bl	800783c <HAL_GetTick>
 8010310:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010312:	e008      	b.n	8010326 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010314:	f7f7 fa92 	bl	800783c <HAL_GetTick>
 8010318:	4602      	mov	r2, r0
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	1ad3      	subs	r3, r2, r3
 801031e:	2b02      	cmp	r3, #2
 8010320:	d901      	bls.n	8010326 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8010322:	2303      	movs	r3, #3
 8010324:	e077      	b.n	8010416 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010326:	4b3e      	ldr	r3, [pc, #248]	; (8010420 <RCCEx_PLL2_Config+0x128>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801032e:	2b00      	cmp	r3, #0
 8010330:	d1f0      	bne.n	8010314 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8010332:	4b3b      	ldr	r3, [pc, #236]	; (8010420 <RCCEx_PLL2_Config+0x128>)
 8010334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010336:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801033a:	f023 0303 	bic.w	r3, r3, #3
 801033e:	687a      	ldr	r2, [r7, #4]
 8010340:	6811      	ldr	r1, [r2, #0]
 8010342:	687a      	ldr	r2, [r7, #4]
 8010344:	6852      	ldr	r2, [r2, #4]
 8010346:	3a01      	subs	r2, #1
 8010348:	0212      	lsls	r2, r2, #8
 801034a:	430a      	orrs	r2, r1
 801034c:	4934      	ldr	r1, [pc, #208]	; (8010420 <RCCEx_PLL2_Config+0x128>)
 801034e:	4313      	orrs	r3, r2
 8010350:	62cb      	str	r3, [r1, #44]	; 0x2c
 8010352:	4b33      	ldr	r3, [pc, #204]	; (8010420 <RCCEx_PLL2_Config+0x128>)
 8010354:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010356:	4b33      	ldr	r3, [pc, #204]	; (8010424 <RCCEx_PLL2_Config+0x12c>)
 8010358:	4013      	ands	r3, r2
 801035a:	687a      	ldr	r2, [r7, #4]
 801035c:	6892      	ldr	r2, [r2, #8]
 801035e:	3a01      	subs	r2, #1
 8010360:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8010364:	687a      	ldr	r2, [r7, #4]
 8010366:	68d2      	ldr	r2, [r2, #12]
 8010368:	3a01      	subs	r2, #1
 801036a:	0252      	lsls	r2, r2, #9
 801036c:	b292      	uxth	r2, r2
 801036e:	4311      	orrs	r1, r2
 8010370:	687a      	ldr	r2, [r7, #4]
 8010372:	6912      	ldr	r2, [r2, #16]
 8010374:	3a01      	subs	r2, #1
 8010376:	0412      	lsls	r2, r2, #16
 8010378:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 801037c:	4311      	orrs	r1, r2
 801037e:	687a      	ldr	r2, [r7, #4]
 8010380:	6952      	ldr	r2, [r2, #20]
 8010382:	3a01      	subs	r2, #1
 8010384:	0612      	lsls	r2, r2, #24
 8010386:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 801038a:	430a      	orrs	r2, r1
 801038c:	4924      	ldr	r1, [pc, #144]	; (8010420 <RCCEx_PLL2_Config+0x128>)
 801038e:	4313      	orrs	r3, r2
 8010390:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8010392:	4b23      	ldr	r3, [pc, #140]	; (8010420 <RCCEx_PLL2_Config+0x128>)
 8010394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010396:	f023 020c 	bic.w	r2, r3, #12
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	699b      	ldr	r3, [r3, #24]
 801039e:	4920      	ldr	r1, [pc, #128]	; (8010420 <RCCEx_PLL2_Config+0x128>)
 80103a0:	4313      	orrs	r3, r2
 80103a2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80103a4:	4b1e      	ldr	r3, [pc, #120]	; (8010420 <RCCEx_PLL2_Config+0x128>)
 80103a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	6a1b      	ldr	r3, [r3, #32]
 80103ac:	491c      	ldr	r1, [pc, #112]	; (8010420 <RCCEx_PLL2_Config+0x128>)
 80103ae:	4313      	orrs	r3, r2
 80103b0:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80103b2:	4b1b      	ldr	r3, [pc, #108]	; (8010420 <RCCEx_PLL2_Config+0x128>)
 80103b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103b6:	4a1a      	ldr	r2, [pc, #104]	; (8010420 <RCCEx_PLL2_Config+0x128>)
 80103b8:	f023 0310 	bic.w	r3, r3, #16
 80103bc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80103be:	4b18      	ldr	r3, [pc, #96]	; (8010420 <RCCEx_PLL2_Config+0x128>)
 80103c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80103c6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80103ca:	687a      	ldr	r2, [r7, #4]
 80103cc:	69d2      	ldr	r2, [r2, #28]
 80103ce:	00d2      	lsls	r2, r2, #3
 80103d0:	4913      	ldr	r1, [pc, #76]	; (8010420 <RCCEx_PLL2_Config+0x128>)
 80103d2:	4313      	orrs	r3, r2
 80103d4:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80103d6:	4b12      	ldr	r3, [pc, #72]	; (8010420 <RCCEx_PLL2_Config+0x128>)
 80103d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103da:	4a11      	ldr	r2, [pc, #68]	; (8010420 <RCCEx_PLL2_Config+0x128>)
 80103dc:	f043 0310 	orr.w	r3, r3, #16
 80103e0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80103e2:	4b0f      	ldr	r3, [pc, #60]	; (8010420 <RCCEx_PLL2_Config+0x128>)
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	4a0e      	ldr	r2, [pc, #56]	; (8010420 <RCCEx_PLL2_Config+0x128>)
 80103e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80103ec:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80103ee:	f7f7 fa25 	bl	800783c <HAL_GetTick>
 80103f2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80103f4:	e008      	b.n	8010408 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80103f6:	f7f7 fa21 	bl	800783c <HAL_GetTick>
 80103fa:	4602      	mov	r2, r0
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	1ad3      	subs	r3, r2, r3
 8010400:	2b02      	cmp	r3, #2
 8010402:	d901      	bls.n	8010408 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8010404:	2303      	movs	r3, #3
 8010406:	e006      	b.n	8010416 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010408:	4b05      	ldr	r3, [pc, #20]	; (8010420 <RCCEx_PLL2_Config+0x128>)
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010410:	2b00      	cmp	r3, #0
 8010412:	d0f0      	beq.n	80103f6 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8010414:	2300      	movs	r3, #0

}
 8010416:	4618      	mov	r0, r3
 8010418:	3710      	adds	r7, #16
 801041a:	46bd      	mov	sp, r7
 801041c:	bd80      	pop	{r7, pc}
 801041e:	bf00      	nop
 8010420:	46020c00 	.word	0x46020c00
 8010424:	80800000 	.word	0x80800000

08010428 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b084      	sub	sp, #16
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8010430:	4b47      	ldr	r3, [pc, #284]	; (8010550 <RCCEx_PLL3_Config+0x128>)
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	4a46      	ldr	r2, [pc, #280]	; (8010550 <RCCEx_PLL3_Config+0x128>)
 8010436:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801043a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801043c:	f7f7 f9fe 	bl	800783c <HAL_GetTick>
 8010440:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010442:	e008      	b.n	8010456 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010444:	f7f7 f9fa 	bl	800783c <HAL_GetTick>
 8010448:	4602      	mov	r2, r0
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	1ad3      	subs	r3, r2, r3
 801044e:	2b02      	cmp	r3, #2
 8010450:	d901      	bls.n	8010456 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8010452:	2303      	movs	r3, #3
 8010454:	e077      	b.n	8010546 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010456:	4b3e      	ldr	r3, [pc, #248]	; (8010550 <RCCEx_PLL3_Config+0x128>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801045e:	2b00      	cmp	r3, #0
 8010460:	d1f0      	bne.n	8010444 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8010462:	4b3b      	ldr	r3, [pc, #236]	; (8010550 <RCCEx_PLL3_Config+0x128>)
 8010464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010466:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801046a:	f023 0303 	bic.w	r3, r3, #3
 801046e:	687a      	ldr	r2, [r7, #4]
 8010470:	6811      	ldr	r1, [r2, #0]
 8010472:	687a      	ldr	r2, [r7, #4]
 8010474:	6852      	ldr	r2, [r2, #4]
 8010476:	3a01      	subs	r2, #1
 8010478:	0212      	lsls	r2, r2, #8
 801047a:	430a      	orrs	r2, r1
 801047c:	4934      	ldr	r1, [pc, #208]	; (8010550 <RCCEx_PLL3_Config+0x128>)
 801047e:	4313      	orrs	r3, r2
 8010480:	630b      	str	r3, [r1, #48]	; 0x30
 8010482:	4b33      	ldr	r3, [pc, #204]	; (8010550 <RCCEx_PLL3_Config+0x128>)
 8010484:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010486:	4b33      	ldr	r3, [pc, #204]	; (8010554 <RCCEx_PLL3_Config+0x12c>)
 8010488:	4013      	ands	r3, r2
 801048a:	687a      	ldr	r2, [r7, #4]
 801048c:	6892      	ldr	r2, [r2, #8]
 801048e:	3a01      	subs	r2, #1
 8010490:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8010494:	687a      	ldr	r2, [r7, #4]
 8010496:	68d2      	ldr	r2, [r2, #12]
 8010498:	3a01      	subs	r2, #1
 801049a:	0252      	lsls	r2, r2, #9
 801049c:	b292      	uxth	r2, r2
 801049e:	4311      	orrs	r1, r2
 80104a0:	687a      	ldr	r2, [r7, #4]
 80104a2:	6912      	ldr	r2, [r2, #16]
 80104a4:	3a01      	subs	r2, #1
 80104a6:	0412      	lsls	r2, r2, #16
 80104a8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80104ac:	4311      	orrs	r1, r2
 80104ae:	687a      	ldr	r2, [r7, #4]
 80104b0:	6952      	ldr	r2, [r2, #20]
 80104b2:	3a01      	subs	r2, #1
 80104b4:	0612      	lsls	r2, r2, #24
 80104b6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80104ba:	430a      	orrs	r2, r1
 80104bc:	4924      	ldr	r1, [pc, #144]	; (8010550 <RCCEx_PLL3_Config+0x128>)
 80104be:	4313      	orrs	r3, r2
 80104c0:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80104c2:	4b23      	ldr	r3, [pc, #140]	; (8010550 <RCCEx_PLL3_Config+0x128>)
 80104c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104c6:	f023 020c 	bic.w	r2, r3, #12
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	699b      	ldr	r3, [r3, #24]
 80104ce:	4920      	ldr	r1, [pc, #128]	; (8010550 <RCCEx_PLL3_Config+0x128>)
 80104d0:	4313      	orrs	r3, r2
 80104d2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80104d4:	4b1e      	ldr	r3, [pc, #120]	; (8010550 <RCCEx_PLL3_Config+0x128>)
 80104d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	6a1b      	ldr	r3, [r3, #32]
 80104dc:	491c      	ldr	r1, [pc, #112]	; (8010550 <RCCEx_PLL3_Config+0x128>)
 80104de:	4313      	orrs	r3, r2
 80104e0:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80104e2:	4b1b      	ldr	r3, [pc, #108]	; (8010550 <RCCEx_PLL3_Config+0x128>)
 80104e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104e6:	4a1a      	ldr	r2, [pc, #104]	; (8010550 <RCCEx_PLL3_Config+0x128>)
 80104e8:	f023 0310 	bic.w	r3, r3, #16
 80104ec:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80104ee:	4b18      	ldr	r3, [pc, #96]	; (8010550 <RCCEx_PLL3_Config+0x128>)
 80104f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80104f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80104f6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80104fa:	687a      	ldr	r2, [r7, #4]
 80104fc:	69d2      	ldr	r2, [r2, #28]
 80104fe:	00d2      	lsls	r2, r2, #3
 8010500:	4913      	ldr	r1, [pc, #76]	; (8010550 <RCCEx_PLL3_Config+0x128>)
 8010502:	4313      	orrs	r3, r2
 8010504:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8010506:	4b12      	ldr	r3, [pc, #72]	; (8010550 <RCCEx_PLL3_Config+0x128>)
 8010508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801050a:	4a11      	ldr	r2, [pc, #68]	; (8010550 <RCCEx_PLL3_Config+0x128>)
 801050c:	f043 0310 	orr.w	r3, r3, #16
 8010510:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8010512:	4b0f      	ldr	r3, [pc, #60]	; (8010550 <RCCEx_PLL3_Config+0x128>)
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	4a0e      	ldr	r2, [pc, #56]	; (8010550 <RCCEx_PLL3_Config+0x128>)
 8010518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801051c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801051e:	f7f7 f98d 	bl	800783c <HAL_GetTick>
 8010522:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010524:	e008      	b.n	8010538 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010526:	f7f7 f989 	bl	800783c <HAL_GetTick>
 801052a:	4602      	mov	r2, r0
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	1ad3      	subs	r3, r2, r3
 8010530:	2b02      	cmp	r3, #2
 8010532:	d901      	bls.n	8010538 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8010534:	2303      	movs	r3, #3
 8010536:	e006      	b.n	8010546 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010538:	4b05      	ldr	r3, [pc, #20]	; (8010550 <RCCEx_PLL3_Config+0x128>)
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010540:	2b00      	cmp	r3, #0
 8010542:	d0f0      	beq.n	8010526 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8010544:	2300      	movs	r3, #0
}
 8010546:	4618      	mov	r0, r3
 8010548:	3710      	adds	r7, #16
 801054a:	46bd      	mov	sp, r7
 801054c:	bd80      	pop	{r7, pc}
 801054e:	bf00      	nop
 8010550:	46020c00 	.word	0x46020c00
 8010554:	80800000 	.word	0x80800000

08010558 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b082      	sub	sp, #8
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d101      	bne.n	801056a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010566:	2301      	movs	r3, #1
 8010568:	e049      	b.n	80105fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010570:	b2db      	uxtb	r3, r3
 8010572:	2b00      	cmp	r3, #0
 8010574:	d106      	bne.n	8010584 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	2200      	movs	r2, #0
 801057a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f7f1 fb10 	bl	8001ba4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2202      	movs	r2, #2
 8010588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	681a      	ldr	r2, [r3, #0]
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	3304      	adds	r3, #4
 8010594:	4619      	mov	r1, r3
 8010596:	4610      	mov	r0, r2
 8010598:	f000 fe48 	bl	801122c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	2201      	movs	r2, #1
 80105a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	2201      	movs	r2, #1
 80105a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	2201      	movs	r2, #1
 80105b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2201      	movs	r2, #1
 80105b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	2201      	movs	r2, #1
 80105c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2201      	movs	r2, #1
 80105c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	2201      	movs	r2, #1
 80105d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	2201      	movs	r2, #1
 80105d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2201      	movs	r2, #1
 80105e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	2201      	movs	r2, #1
 80105e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	2201      	movs	r2, #1
 80105f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	2201      	movs	r2, #1
 80105f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80105fc:	2300      	movs	r3, #0
}
 80105fe:	4618      	mov	r0, r3
 8010600:	3708      	adds	r7, #8
 8010602:	46bd      	mov	sp, r7
 8010604:	bd80      	pop	{r7, pc}
	...

08010608 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010608:	b480      	push	{r7}
 801060a:	b085      	sub	sp, #20
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010616:	b2db      	uxtb	r3, r3
 8010618:	2b01      	cmp	r3, #1
 801061a:	d001      	beq.n	8010620 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801061c:	2301      	movs	r3, #1
 801061e:	e072      	b.n	8010706 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2202      	movs	r2, #2
 8010624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	68da      	ldr	r2, [r3, #12]
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	f042 0201 	orr.w	r2, r2, #1
 8010636:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	4a35      	ldr	r2, [pc, #212]	; (8010714 <HAL_TIM_Base_Start_IT+0x10c>)
 801063e:	4293      	cmp	r3, r2
 8010640:	d040      	beq.n	80106c4 <HAL_TIM_Base_Start_IT+0xbc>
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	4a34      	ldr	r2, [pc, #208]	; (8010718 <HAL_TIM_Base_Start_IT+0x110>)
 8010648:	4293      	cmp	r3, r2
 801064a:	d03b      	beq.n	80106c4 <HAL_TIM_Base_Start_IT+0xbc>
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010654:	d036      	beq.n	80106c4 <HAL_TIM_Base_Start_IT+0xbc>
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801065e:	d031      	beq.n	80106c4 <HAL_TIM_Base_Start_IT+0xbc>
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	4a2d      	ldr	r2, [pc, #180]	; (801071c <HAL_TIM_Base_Start_IT+0x114>)
 8010666:	4293      	cmp	r3, r2
 8010668:	d02c      	beq.n	80106c4 <HAL_TIM_Base_Start_IT+0xbc>
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	4a2c      	ldr	r2, [pc, #176]	; (8010720 <HAL_TIM_Base_Start_IT+0x118>)
 8010670:	4293      	cmp	r3, r2
 8010672:	d027      	beq.n	80106c4 <HAL_TIM_Base_Start_IT+0xbc>
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	4a2a      	ldr	r2, [pc, #168]	; (8010724 <HAL_TIM_Base_Start_IT+0x11c>)
 801067a:	4293      	cmp	r3, r2
 801067c:	d022      	beq.n	80106c4 <HAL_TIM_Base_Start_IT+0xbc>
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	4a29      	ldr	r2, [pc, #164]	; (8010728 <HAL_TIM_Base_Start_IT+0x120>)
 8010684:	4293      	cmp	r3, r2
 8010686:	d01d      	beq.n	80106c4 <HAL_TIM_Base_Start_IT+0xbc>
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	4a27      	ldr	r2, [pc, #156]	; (801072c <HAL_TIM_Base_Start_IT+0x124>)
 801068e:	4293      	cmp	r3, r2
 8010690:	d018      	beq.n	80106c4 <HAL_TIM_Base_Start_IT+0xbc>
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	4a26      	ldr	r2, [pc, #152]	; (8010730 <HAL_TIM_Base_Start_IT+0x128>)
 8010698:	4293      	cmp	r3, r2
 801069a:	d013      	beq.n	80106c4 <HAL_TIM_Base_Start_IT+0xbc>
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	4a24      	ldr	r2, [pc, #144]	; (8010734 <HAL_TIM_Base_Start_IT+0x12c>)
 80106a2:	4293      	cmp	r3, r2
 80106a4:	d00e      	beq.n	80106c4 <HAL_TIM_Base_Start_IT+0xbc>
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	4a23      	ldr	r2, [pc, #140]	; (8010738 <HAL_TIM_Base_Start_IT+0x130>)
 80106ac:	4293      	cmp	r3, r2
 80106ae:	d009      	beq.n	80106c4 <HAL_TIM_Base_Start_IT+0xbc>
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	4a21      	ldr	r2, [pc, #132]	; (801073c <HAL_TIM_Base_Start_IT+0x134>)
 80106b6:	4293      	cmp	r3, r2
 80106b8:	d004      	beq.n	80106c4 <HAL_TIM_Base_Start_IT+0xbc>
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	4a20      	ldr	r2, [pc, #128]	; (8010740 <HAL_TIM_Base_Start_IT+0x138>)
 80106c0:	4293      	cmp	r3, r2
 80106c2:	d115      	bne.n	80106f0 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	689a      	ldr	r2, [r3, #8]
 80106ca:	4b1e      	ldr	r3, [pc, #120]	; (8010744 <HAL_TIM_Base_Start_IT+0x13c>)
 80106cc:	4013      	ands	r3, r2
 80106ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	2b06      	cmp	r3, #6
 80106d4:	d015      	beq.n	8010702 <HAL_TIM_Base_Start_IT+0xfa>
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80106dc:	d011      	beq.n	8010702 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	681a      	ldr	r2, [r3, #0]
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	f042 0201 	orr.w	r2, r2, #1
 80106ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80106ee:	e008      	b.n	8010702 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	681a      	ldr	r2, [r3, #0]
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	f042 0201 	orr.w	r2, r2, #1
 80106fe:	601a      	str	r2, [r3, #0]
 8010700:	e000      	b.n	8010704 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010702:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010704:	2300      	movs	r3, #0
}
 8010706:	4618      	mov	r0, r3
 8010708:	3714      	adds	r7, #20
 801070a:	46bd      	mov	sp, r7
 801070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010710:	4770      	bx	lr
 8010712:	bf00      	nop
 8010714:	40012c00 	.word	0x40012c00
 8010718:	50012c00 	.word	0x50012c00
 801071c:	40000400 	.word	0x40000400
 8010720:	50000400 	.word	0x50000400
 8010724:	40000800 	.word	0x40000800
 8010728:	50000800 	.word	0x50000800
 801072c:	40000c00 	.word	0x40000c00
 8010730:	50000c00 	.word	0x50000c00
 8010734:	40013400 	.word	0x40013400
 8010738:	50013400 	.word	0x50013400
 801073c:	40014000 	.word	0x40014000
 8010740:	50014000 	.word	0x50014000
 8010744:	00010007 	.word	0x00010007

08010748 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010748:	b580      	push	{r7, lr}
 801074a:	b082      	sub	sp, #8
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d101      	bne.n	801075a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010756:	2301      	movs	r3, #1
 8010758:	e049      	b.n	80107ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010760:	b2db      	uxtb	r3, r3
 8010762:	2b00      	cmp	r3, #0
 8010764:	d106      	bne.n	8010774 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	2200      	movs	r2, #0
 801076a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801076e:	6878      	ldr	r0, [r7, #4]
 8010770:	f000 f841 	bl	80107f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	2202      	movs	r2, #2
 8010778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	681a      	ldr	r2, [r3, #0]
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	3304      	adds	r3, #4
 8010784:	4619      	mov	r1, r3
 8010786:	4610      	mov	r0, r2
 8010788:	f000 fd50 	bl	801122c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	2201      	movs	r2, #1
 8010790:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	2201      	movs	r2, #1
 8010798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	2201      	movs	r2, #1
 80107a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	2201      	movs	r2, #1
 80107a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	2201      	movs	r2, #1
 80107b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	2201      	movs	r2, #1
 80107b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	2201      	movs	r2, #1
 80107c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	2201      	movs	r2, #1
 80107c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	2201      	movs	r2, #1
 80107d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	2201      	movs	r2, #1
 80107d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	2201      	movs	r2, #1
 80107e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	2201      	movs	r2, #1
 80107e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80107ec:	2300      	movs	r3, #0
}
 80107ee:	4618      	mov	r0, r3
 80107f0:	3708      	adds	r7, #8
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd80      	pop	{r7, pc}

080107f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80107f6:	b480      	push	{r7}
 80107f8:	b083      	sub	sp, #12
 80107fa:	af00      	add	r7, sp, #0
 80107fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80107fe:	bf00      	nop
 8010800:	370c      	adds	r7, #12
 8010802:	46bd      	mov	sp, r7
 8010804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010808:	4770      	bx	lr
	...

0801080c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801080c:	b580      	push	{r7, lr}
 801080e:	b084      	sub	sp, #16
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
 8010814:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010816:	683b      	ldr	r3, [r7, #0]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d109      	bne.n	8010830 <HAL_TIM_PWM_Start+0x24>
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010822:	b2db      	uxtb	r3, r3
 8010824:	2b01      	cmp	r3, #1
 8010826:	bf14      	ite	ne
 8010828:	2301      	movne	r3, #1
 801082a:	2300      	moveq	r3, #0
 801082c:	b2db      	uxtb	r3, r3
 801082e:	e03c      	b.n	80108aa <HAL_TIM_PWM_Start+0x9e>
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	2b04      	cmp	r3, #4
 8010834:	d109      	bne.n	801084a <HAL_TIM_PWM_Start+0x3e>
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801083c:	b2db      	uxtb	r3, r3
 801083e:	2b01      	cmp	r3, #1
 8010840:	bf14      	ite	ne
 8010842:	2301      	movne	r3, #1
 8010844:	2300      	moveq	r3, #0
 8010846:	b2db      	uxtb	r3, r3
 8010848:	e02f      	b.n	80108aa <HAL_TIM_PWM_Start+0x9e>
 801084a:	683b      	ldr	r3, [r7, #0]
 801084c:	2b08      	cmp	r3, #8
 801084e:	d109      	bne.n	8010864 <HAL_TIM_PWM_Start+0x58>
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010856:	b2db      	uxtb	r3, r3
 8010858:	2b01      	cmp	r3, #1
 801085a:	bf14      	ite	ne
 801085c:	2301      	movne	r3, #1
 801085e:	2300      	moveq	r3, #0
 8010860:	b2db      	uxtb	r3, r3
 8010862:	e022      	b.n	80108aa <HAL_TIM_PWM_Start+0x9e>
 8010864:	683b      	ldr	r3, [r7, #0]
 8010866:	2b0c      	cmp	r3, #12
 8010868:	d109      	bne.n	801087e <HAL_TIM_PWM_Start+0x72>
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010870:	b2db      	uxtb	r3, r3
 8010872:	2b01      	cmp	r3, #1
 8010874:	bf14      	ite	ne
 8010876:	2301      	movne	r3, #1
 8010878:	2300      	moveq	r3, #0
 801087a:	b2db      	uxtb	r3, r3
 801087c:	e015      	b.n	80108aa <HAL_TIM_PWM_Start+0x9e>
 801087e:	683b      	ldr	r3, [r7, #0]
 8010880:	2b10      	cmp	r3, #16
 8010882:	d109      	bne.n	8010898 <HAL_TIM_PWM_Start+0x8c>
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801088a:	b2db      	uxtb	r3, r3
 801088c:	2b01      	cmp	r3, #1
 801088e:	bf14      	ite	ne
 8010890:	2301      	movne	r3, #1
 8010892:	2300      	moveq	r3, #0
 8010894:	b2db      	uxtb	r3, r3
 8010896:	e008      	b.n	80108aa <HAL_TIM_PWM_Start+0x9e>
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801089e:	b2db      	uxtb	r3, r3
 80108a0:	2b01      	cmp	r3, #1
 80108a2:	bf14      	ite	ne
 80108a4:	2301      	movne	r3, #1
 80108a6:	2300      	moveq	r3, #0
 80108a8:	b2db      	uxtb	r3, r3
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d001      	beq.n	80108b2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80108ae:	2301      	movs	r3, #1
 80108b0:	e0d8      	b.n	8010a64 <HAL_TIM_PWM_Start+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80108b2:	683b      	ldr	r3, [r7, #0]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d104      	bne.n	80108c2 <HAL_TIM_PWM_Start+0xb6>
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	2202      	movs	r2, #2
 80108bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80108c0:	e023      	b.n	801090a <HAL_TIM_PWM_Start+0xfe>
 80108c2:	683b      	ldr	r3, [r7, #0]
 80108c4:	2b04      	cmp	r3, #4
 80108c6:	d104      	bne.n	80108d2 <HAL_TIM_PWM_Start+0xc6>
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	2202      	movs	r2, #2
 80108cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80108d0:	e01b      	b.n	801090a <HAL_TIM_PWM_Start+0xfe>
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	2b08      	cmp	r3, #8
 80108d6:	d104      	bne.n	80108e2 <HAL_TIM_PWM_Start+0xd6>
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	2202      	movs	r2, #2
 80108dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80108e0:	e013      	b.n	801090a <HAL_TIM_PWM_Start+0xfe>
 80108e2:	683b      	ldr	r3, [r7, #0]
 80108e4:	2b0c      	cmp	r3, #12
 80108e6:	d104      	bne.n	80108f2 <HAL_TIM_PWM_Start+0xe6>
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	2202      	movs	r2, #2
 80108ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80108f0:	e00b      	b.n	801090a <HAL_TIM_PWM_Start+0xfe>
 80108f2:	683b      	ldr	r3, [r7, #0]
 80108f4:	2b10      	cmp	r3, #16
 80108f6:	d104      	bne.n	8010902 <HAL_TIM_PWM_Start+0xf6>
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	2202      	movs	r2, #2
 80108fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010900:	e003      	b.n	801090a <HAL_TIM_PWM_Start+0xfe>
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	2202      	movs	r2, #2
 8010906:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	2201      	movs	r2, #1
 8010910:	6839      	ldr	r1, [r7, #0]
 8010912:	4618      	mov	r0, r3
 8010914:	f001 f9f6 	bl	8011d04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	4a53      	ldr	r2, [pc, #332]	; (8010a6c <HAL_TIM_PWM_Start+0x260>)
 801091e:	4293      	cmp	r3, r2
 8010920:	d02c      	beq.n	801097c <HAL_TIM_PWM_Start+0x170>
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	4a52      	ldr	r2, [pc, #328]	; (8010a70 <HAL_TIM_PWM_Start+0x264>)
 8010928:	4293      	cmp	r3, r2
 801092a:	d027      	beq.n	801097c <HAL_TIM_PWM_Start+0x170>
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	4a50      	ldr	r2, [pc, #320]	; (8010a74 <HAL_TIM_PWM_Start+0x268>)
 8010932:	4293      	cmp	r3, r2
 8010934:	d022      	beq.n	801097c <HAL_TIM_PWM_Start+0x170>
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	4a4f      	ldr	r2, [pc, #316]	; (8010a78 <HAL_TIM_PWM_Start+0x26c>)
 801093c:	4293      	cmp	r3, r2
 801093e:	d01d      	beq.n	801097c <HAL_TIM_PWM_Start+0x170>
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	4a4d      	ldr	r2, [pc, #308]	; (8010a7c <HAL_TIM_PWM_Start+0x270>)
 8010946:	4293      	cmp	r3, r2
 8010948:	d018      	beq.n	801097c <HAL_TIM_PWM_Start+0x170>
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	4a4c      	ldr	r2, [pc, #304]	; (8010a80 <HAL_TIM_PWM_Start+0x274>)
 8010950:	4293      	cmp	r3, r2
 8010952:	d013      	beq.n	801097c <HAL_TIM_PWM_Start+0x170>
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	4a4a      	ldr	r2, [pc, #296]	; (8010a84 <HAL_TIM_PWM_Start+0x278>)
 801095a:	4293      	cmp	r3, r2
 801095c:	d00e      	beq.n	801097c <HAL_TIM_PWM_Start+0x170>
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	4a49      	ldr	r2, [pc, #292]	; (8010a88 <HAL_TIM_PWM_Start+0x27c>)
 8010964:	4293      	cmp	r3, r2
 8010966:	d009      	beq.n	801097c <HAL_TIM_PWM_Start+0x170>
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	4a47      	ldr	r2, [pc, #284]	; (8010a8c <HAL_TIM_PWM_Start+0x280>)
 801096e:	4293      	cmp	r3, r2
 8010970:	d004      	beq.n	801097c <HAL_TIM_PWM_Start+0x170>
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	4a46      	ldr	r2, [pc, #280]	; (8010a90 <HAL_TIM_PWM_Start+0x284>)
 8010978:	4293      	cmp	r3, r2
 801097a:	d101      	bne.n	8010980 <HAL_TIM_PWM_Start+0x174>
 801097c:	2301      	movs	r3, #1
 801097e:	e000      	b.n	8010982 <HAL_TIM_PWM_Start+0x176>
 8010980:	2300      	movs	r3, #0
 8010982:	2b00      	cmp	r3, #0
 8010984:	d007      	beq.n	8010996 <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010994:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	4a34      	ldr	r2, [pc, #208]	; (8010a6c <HAL_TIM_PWM_Start+0x260>)
 801099c:	4293      	cmp	r3, r2
 801099e:	d040      	beq.n	8010a22 <HAL_TIM_PWM_Start+0x216>
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	4a32      	ldr	r2, [pc, #200]	; (8010a70 <HAL_TIM_PWM_Start+0x264>)
 80109a6:	4293      	cmp	r3, r2
 80109a8:	d03b      	beq.n	8010a22 <HAL_TIM_PWM_Start+0x216>
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80109b2:	d036      	beq.n	8010a22 <HAL_TIM_PWM_Start+0x216>
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80109bc:	d031      	beq.n	8010a22 <HAL_TIM_PWM_Start+0x216>
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	4a34      	ldr	r2, [pc, #208]	; (8010a94 <HAL_TIM_PWM_Start+0x288>)
 80109c4:	4293      	cmp	r3, r2
 80109c6:	d02c      	beq.n	8010a22 <HAL_TIM_PWM_Start+0x216>
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	4a32      	ldr	r2, [pc, #200]	; (8010a98 <HAL_TIM_PWM_Start+0x28c>)
 80109ce:	4293      	cmp	r3, r2
 80109d0:	d027      	beq.n	8010a22 <HAL_TIM_PWM_Start+0x216>
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	4a31      	ldr	r2, [pc, #196]	; (8010a9c <HAL_TIM_PWM_Start+0x290>)
 80109d8:	4293      	cmp	r3, r2
 80109da:	d022      	beq.n	8010a22 <HAL_TIM_PWM_Start+0x216>
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	4a2f      	ldr	r2, [pc, #188]	; (8010aa0 <HAL_TIM_PWM_Start+0x294>)
 80109e2:	4293      	cmp	r3, r2
 80109e4:	d01d      	beq.n	8010a22 <HAL_TIM_PWM_Start+0x216>
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	4a2e      	ldr	r2, [pc, #184]	; (8010aa4 <HAL_TIM_PWM_Start+0x298>)
 80109ec:	4293      	cmp	r3, r2
 80109ee:	d018      	beq.n	8010a22 <HAL_TIM_PWM_Start+0x216>
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	4a2c      	ldr	r2, [pc, #176]	; (8010aa8 <HAL_TIM_PWM_Start+0x29c>)
 80109f6:	4293      	cmp	r3, r2
 80109f8:	d013      	beq.n	8010a22 <HAL_TIM_PWM_Start+0x216>
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	4a1d      	ldr	r2, [pc, #116]	; (8010a74 <HAL_TIM_PWM_Start+0x268>)
 8010a00:	4293      	cmp	r3, r2
 8010a02:	d00e      	beq.n	8010a22 <HAL_TIM_PWM_Start+0x216>
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	4a1b      	ldr	r2, [pc, #108]	; (8010a78 <HAL_TIM_PWM_Start+0x26c>)
 8010a0a:	4293      	cmp	r3, r2
 8010a0c:	d009      	beq.n	8010a22 <HAL_TIM_PWM_Start+0x216>
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	4a1a      	ldr	r2, [pc, #104]	; (8010a7c <HAL_TIM_PWM_Start+0x270>)
 8010a14:	4293      	cmp	r3, r2
 8010a16:	d004      	beq.n	8010a22 <HAL_TIM_PWM_Start+0x216>
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	4a18      	ldr	r2, [pc, #96]	; (8010a80 <HAL_TIM_PWM_Start+0x274>)
 8010a1e:	4293      	cmp	r3, r2
 8010a20:	d115      	bne.n	8010a4e <HAL_TIM_PWM_Start+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	689a      	ldr	r2, [r3, #8]
 8010a28:	4b20      	ldr	r3, [pc, #128]	; (8010aac <HAL_TIM_PWM_Start+0x2a0>)
 8010a2a:	4013      	ands	r3, r2
 8010a2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	2b06      	cmp	r3, #6
 8010a32:	d015      	beq.n	8010a60 <HAL_TIM_PWM_Start+0x254>
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010a3a:	d011      	beq.n	8010a60 <HAL_TIM_PWM_Start+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	681a      	ldr	r2, [r3, #0]
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	f042 0201 	orr.w	r2, r2, #1
 8010a4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010a4c:	e008      	b.n	8010a60 <HAL_TIM_PWM_Start+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	681a      	ldr	r2, [r3, #0]
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	f042 0201 	orr.w	r2, r2, #1
 8010a5c:	601a      	str	r2, [r3, #0]
 8010a5e:	e000      	b.n	8010a62 <HAL_TIM_PWM_Start+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010a60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010a62:	2300      	movs	r3, #0
}
 8010a64:	4618      	mov	r0, r3
 8010a66:	3710      	adds	r7, #16
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bd80      	pop	{r7, pc}
 8010a6c:	40012c00 	.word	0x40012c00
 8010a70:	50012c00 	.word	0x50012c00
 8010a74:	40013400 	.word	0x40013400
 8010a78:	50013400 	.word	0x50013400
 8010a7c:	40014000 	.word	0x40014000
 8010a80:	50014000 	.word	0x50014000
 8010a84:	40014400 	.word	0x40014400
 8010a88:	50014400 	.word	0x50014400
 8010a8c:	40014800 	.word	0x40014800
 8010a90:	50014800 	.word	0x50014800
 8010a94:	40000400 	.word	0x40000400
 8010a98:	50000400 	.word	0x50000400
 8010a9c:	40000800 	.word	0x40000800
 8010aa0:	50000800 	.word	0x50000800
 8010aa4:	40000c00 	.word	0x40000c00
 8010aa8:	50000c00 	.word	0x50000c00
 8010aac:	00010007 	.word	0x00010007

08010ab0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b082      	sub	sp, #8
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	691b      	ldr	r3, [r3, #16]
 8010abe:	f003 0302 	and.w	r3, r3, #2
 8010ac2:	2b02      	cmp	r3, #2
 8010ac4:	d122      	bne.n	8010b0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	68db      	ldr	r3, [r3, #12]
 8010acc:	f003 0302 	and.w	r3, r3, #2
 8010ad0:	2b02      	cmp	r3, #2
 8010ad2:	d11b      	bne.n	8010b0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	f06f 0202 	mvn.w	r2, #2
 8010adc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	2201      	movs	r2, #1
 8010ae2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	699b      	ldr	r3, [r3, #24]
 8010aea:	f003 0303 	and.w	r3, r3, #3
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d003      	beq.n	8010afa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010af2:	6878      	ldr	r0, [r7, #4]
 8010af4:	f000 fb7c 	bl	80111f0 <HAL_TIM_IC_CaptureCallback>
 8010af8:	e005      	b.n	8010b06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010afa:	6878      	ldr	r0, [r7, #4]
 8010afc:	f000 fb6e 	bl	80111dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010b00:	6878      	ldr	r0, [r7, #4]
 8010b02:	f000 fb7f 	bl	8011204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	2200      	movs	r2, #0
 8010b0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	691b      	ldr	r3, [r3, #16]
 8010b12:	f003 0304 	and.w	r3, r3, #4
 8010b16:	2b04      	cmp	r3, #4
 8010b18:	d122      	bne.n	8010b60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	68db      	ldr	r3, [r3, #12]
 8010b20:	f003 0304 	and.w	r3, r3, #4
 8010b24:	2b04      	cmp	r3, #4
 8010b26:	d11b      	bne.n	8010b60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	f06f 0204 	mvn.w	r2, #4
 8010b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	2202      	movs	r2, #2
 8010b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	699b      	ldr	r3, [r3, #24]
 8010b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d003      	beq.n	8010b4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010b46:	6878      	ldr	r0, [r7, #4]
 8010b48:	f000 fb52 	bl	80111f0 <HAL_TIM_IC_CaptureCallback>
 8010b4c:	e005      	b.n	8010b5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010b4e:	6878      	ldr	r0, [r7, #4]
 8010b50:	f000 fb44 	bl	80111dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010b54:	6878      	ldr	r0, [r7, #4]
 8010b56:	f000 fb55 	bl	8011204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	691b      	ldr	r3, [r3, #16]
 8010b66:	f003 0308 	and.w	r3, r3, #8
 8010b6a:	2b08      	cmp	r3, #8
 8010b6c:	d122      	bne.n	8010bb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	68db      	ldr	r3, [r3, #12]
 8010b74:	f003 0308 	and.w	r3, r3, #8
 8010b78:	2b08      	cmp	r3, #8
 8010b7a:	d11b      	bne.n	8010bb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	f06f 0208 	mvn.w	r2, #8
 8010b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	2204      	movs	r2, #4
 8010b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	69db      	ldr	r3, [r3, #28]
 8010b92:	f003 0303 	and.w	r3, r3, #3
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d003      	beq.n	8010ba2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010b9a:	6878      	ldr	r0, [r7, #4]
 8010b9c:	f000 fb28 	bl	80111f0 <HAL_TIM_IC_CaptureCallback>
 8010ba0:	e005      	b.n	8010bae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010ba2:	6878      	ldr	r0, [r7, #4]
 8010ba4:	f000 fb1a 	bl	80111dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010ba8:	6878      	ldr	r0, [r7, #4]
 8010baa:	f000 fb2b 	bl	8011204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	691b      	ldr	r3, [r3, #16]
 8010bba:	f003 0310 	and.w	r3, r3, #16
 8010bbe:	2b10      	cmp	r3, #16
 8010bc0:	d122      	bne.n	8010c08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	68db      	ldr	r3, [r3, #12]
 8010bc8:	f003 0310 	and.w	r3, r3, #16
 8010bcc:	2b10      	cmp	r3, #16
 8010bce:	d11b      	bne.n	8010c08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	f06f 0210 	mvn.w	r2, #16
 8010bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	2208      	movs	r2, #8
 8010bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	69db      	ldr	r3, [r3, #28]
 8010be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d003      	beq.n	8010bf6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010bee:	6878      	ldr	r0, [r7, #4]
 8010bf0:	f000 fafe 	bl	80111f0 <HAL_TIM_IC_CaptureCallback>
 8010bf4:	e005      	b.n	8010c02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010bf6:	6878      	ldr	r0, [r7, #4]
 8010bf8:	f000 faf0 	bl	80111dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010bfc:	6878      	ldr	r0, [r7, #4]
 8010bfe:	f000 fb01 	bl	8011204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	2200      	movs	r2, #0
 8010c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	691b      	ldr	r3, [r3, #16]
 8010c0e:	f003 0301 	and.w	r3, r3, #1
 8010c12:	2b01      	cmp	r3, #1
 8010c14:	d10e      	bne.n	8010c34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	68db      	ldr	r3, [r3, #12]
 8010c1c:	f003 0301 	and.w	r3, r3, #1
 8010c20:	2b01      	cmp	r3, #1
 8010c22:	d107      	bne.n	8010c34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	f06f 0201 	mvn.w	r2, #1
 8010c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010c2e:	6878      	ldr	r0, [r7, #4]
 8010c30:	f7f0 fe38 	bl	80018a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	691b      	ldr	r3, [r3, #16]
 8010c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c3e:	2b80      	cmp	r3, #128	; 0x80
 8010c40:	d10e      	bne.n	8010c60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	68db      	ldr	r3, [r3, #12]
 8010c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c4c:	2b80      	cmp	r3, #128	; 0x80
 8010c4e:	d107      	bne.n	8010c60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010c5a:	6878      	ldr	r0, [r7, #4]
 8010c5c:	f001 fa06 	bl	801206c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	691b      	ldr	r3, [r3, #16]
 8010c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c6e:	d10e      	bne.n	8010c8e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	68db      	ldr	r3, [r3, #12]
 8010c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c7a:	2b80      	cmp	r3, #128	; 0x80
 8010c7c:	d107      	bne.n	8010c8e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010c88:	6878      	ldr	r0, [r7, #4]
 8010c8a:	f001 f9f9 	bl	8012080 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	691b      	ldr	r3, [r3, #16]
 8010c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c98:	2b40      	cmp	r3, #64	; 0x40
 8010c9a:	d10e      	bne.n	8010cba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	68db      	ldr	r3, [r3, #12]
 8010ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ca6:	2b40      	cmp	r3, #64	; 0x40
 8010ca8:	d107      	bne.n	8010cba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010cb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010cb4:	6878      	ldr	r0, [r7, #4]
 8010cb6:	f000 faaf 	bl	8011218 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	691b      	ldr	r3, [r3, #16]
 8010cc0:	f003 0320 	and.w	r3, r3, #32
 8010cc4:	2b20      	cmp	r3, #32
 8010cc6:	d10e      	bne.n	8010ce6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	68db      	ldr	r3, [r3, #12]
 8010cce:	f003 0320 	and.w	r3, r3, #32
 8010cd2:	2b20      	cmp	r3, #32
 8010cd4:	d107      	bne.n	8010ce6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	f06f 0220 	mvn.w	r2, #32
 8010cde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010ce0:	6878      	ldr	r0, [r7, #4]
 8010ce2:	f001 f9b9 	bl	8012058 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	691b      	ldr	r3, [r3, #16]
 8010cec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010cf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010cf4:	d10f      	bne.n	8010d16 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	68db      	ldr	r3, [r3, #12]
 8010cfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010d00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010d04:	d107      	bne.n	8010d16 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8010d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8010d10:	6878      	ldr	r0, [r7, #4]
 8010d12:	f001 f9bf 	bl	8012094 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	691b      	ldr	r3, [r3, #16]
 8010d1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010d20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010d24:	d10f      	bne.n	8010d46 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	68db      	ldr	r3, [r3, #12]
 8010d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010d30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010d34:	d107      	bne.n	8010d46 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8010d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8010d40:	6878      	ldr	r0, [r7, #4]
 8010d42:	f001 f9b1 	bl	80120a8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	691b      	ldr	r3, [r3, #16]
 8010d4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010d50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010d54:	d10f      	bne.n	8010d76 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	68db      	ldr	r3, [r3, #12]
 8010d5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010d60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010d64:	d107      	bne.n	8010d76 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8010d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8010d70:	6878      	ldr	r0, [r7, #4]
 8010d72:	f001 f9a3 	bl	80120bc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	691b      	ldr	r3, [r3, #16]
 8010d7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010d80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010d84:	d10f      	bne.n	8010da6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	68db      	ldr	r3, [r3, #12]
 8010d8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010d90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010d94:	d107      	bne.n	8010da6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8010d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8010da0:	6878      	ldr	r0, [r7, #4]
 8010da2:	f001 f995 	bl	80120d0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010da6:	bf00      	nop
 8010da8:	3708      	adds	r7, #8
 8010daa:	46bd      	mov	sp, r7
 8010dac:	bd80      	pop	{r7, pc}
	...

08010db0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b086      	sub	sp, #24
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	60f8      	str	r0, [r7, #12]
 8010db8:	60b9      	str	r1, [r7, #8]
 8010dba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010dc6:	2b01      	cmp	r3, #1
 8010dc8:	d101      	bne.n	8010dce <HAL_TIM_PWM_ConfigChannel+0x1e>
 8010dca:	2302      	movs	r3, #2
 8010dcc:	e0ff      	b.n	8010fce <HAL_TIM_PWM_ConfigChannel+0x21e>
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	2201      	movs	r2, #1
 8010dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	2b14      	cmp	r3, #20
 8010dda:	f200 80f0 	bhi.w	8010fbe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8010dde:	a201      	add	r2, pc, #4	; (adr r2, 8010de4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010de4:	08010e39 	.word	0x08010e39
 8010de8:	08010fbf 	.word	0x08010fbf
 8010dec:	08010fbf 	.word	0x08010fbf
 8010df0:	08010fbf 	.word	0x08010fbf
 8010df4:	08010e79 	.word	0x08010e79
 8010df8:	08010fbf 	.word	0x08010fbf
 8010dfc:	08010fbf 	.word	0x08010fbf
 8010e00:	08010fbf 	.word	0x08010fbf
 8010e04:	08010ebb 	.word	0x08010ebb
 8010e08:	08010fbf 	.word	0x08010fbf
 8010e0c:	08010fbf 	.word	0x08010fbf
 8010e10:	08010fbf 	.word	0x08010fbf
 8010e14:	08010efb 	.word	0x08010efb
 8010e18:	08010fbf 	.word	0x08010fbf
 8010e1c:	08010fbf 	.word	0x08010fbf
 8010e20:	08010fbf 	.word	0x08010fbf
 8010e24:	08010f3d 	.word	0x08010f3d
 8010e28:	08010fbf 	.word	0x08010fbf
 8010e2c:	08010fbf 	.word	0x08010fbf
 8010e30:	08010fbf 	.word	0x08010fbf
 8010e34:	08010f7d 	.word	0x08010f7d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	68b9      	ldr	r1, [r7, #8]
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f000 faee 	bl	8011420 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	699a      	ldr	r2, [r3, #24]
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	f042 0208 	orr.w	r2, r2, #8
 8010e52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	699a      	ldr	r2, [r3, #24]
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	f022 0204 	bic.w	r2, r2, #4
 8010e62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	6999      	ldr	r1, [r3, #24]
 8010e6a:	68bb      	ldr	r3, [r7, #8]
 8010e6c:	691a      	ldr	r2, [r3, #16]
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	430a      	orrs	r2, r1
 8010e74:	619a      	str	r2, [r3, #24]
      break;
 8010e76:	e0a5      	b.n	8010fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	68b9      	ldr	r1, [r7, #8]
 8010e7e:	4618      	mov	r0, r3
 8010e80:	f000 fb90 	bl	80115a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	699a      	ldr	r2, [r3, #24]
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010e92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	699a      	ldr	r2, [r3, #24]
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010ea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	6999      	ldr	r1, [r3, #24]
 8010eaa:	68bb      	ldr	r3, [r7, #8]
 8010eac:	691b      	ldr	r3, [r3, #16]
 8010eae:	021a      	lsls	r2, r3, #8
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	430a      	orrs	r2, r1
 8010eb6:	619a      	str	r2, [r3, #24]
      break;
 8010eb8:	e084      	b.n	8010fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	68b9      	ldr	r1, [r7, #8]
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	f000 fc1f 	bl	8011704 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	69da      	ldr	r2, [r3, #28]
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	f042 0208 	orr.w	r2, r2, #8
 8010ed4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	69da      	ldr	r2, [r3, #28]
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	f022 0204 	bic.w	r2, r2, #4
 8010ee4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	69d9      	ldr	r1, [r3, #28]
 8010eec:	68bb      	ldr	r3, [r7, #8]
 8010eee:	691a      	ldr	r2, [r3, #16]
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	430a      	orrs	r2, r1
 8010ef6:	61da      	str	r2, [r3, #28]
      break;
 8010ef8:	e064      	b.n	8010fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	68b9      	ldr	r1, [r7, #8]
 8010f00:	4618      	mov	r0, r3
 8010f02:	f000 fcad 	bl	8011860 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	69da      	ldr	r2, [r3, #28]
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010f14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	69da      	ldr	r2, [r3, #28]
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010f24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	69d9      	ldr	r1, [r3, #28]
 8010f2c:	68bb      	ldr	r3, [r7, #8]
 8010f2e:	691b      	ldr	r3, [r3, #16]
 8010f30:	021a      	lsls	r2, r3, #8
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	430a      	orrs	r2, r1
 8010f38:	61da      	str	r2, [r3, #28]
      break;
 8010f3a:	e043      	b.n	8010fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	68b9      	ldr	r1, [r7, #8]
 8010f42:	4618      	mov	r0, r3
 8010f44:	f000 fd3c 	bl	80119c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	f042 0208 	orr.w	r2, r2, #8
 8010f56:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	f022 0204 	bic.w	r2, r2, #4
 8010f66:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8010f6e:	68bb      	ldr	r3, [r7, #8]
 8010f70:	691a      	ldr	r2, [r3, #16]
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	430a      	orrs	r2, r1
 8010f78:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8010f7a:	e023      	b.n	8010fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	68b9      	ldr	r1, [r7, #8]
 8010f82:	4618      	mov	r0, r3
 8010f84:	f000 fd9e 	bl	8011ac4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010f96:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010fa6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8010fae:	68bb      	ldr	r3, [r7, #8]
 8010fb0:	691b      	ldr	r3, [r3, #16]
 8010fb2:	021a      	lsls	r2, r3, #8
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	430a      	orrs	r2, r1
 8010fba:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8010fbc:	e002      	b.n	8010fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8010fbe:	2301      	movs	r3, #1
 8010fc0:	75fb      	strb	r3, [r7, #23]
      break;
 8010fc2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fce:	4618      	mov	r0, r3
 8010fd0:	3718      	adds	r7, #24
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	bd80      	pop	{r7, pc}
 8010fd6:	bf00      	nop

08010fd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b084      	sub	sp, #16
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
 8010fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010fec:	2b01      	cmp	r3, #1
 8010fee:	d101      	bne.n	8010ff4 <HAL_TIM_ConfigClockSource+0x1c>
 8010ff0:	2302      	movs	r3, #2
 8010ff2:	e0e6      	b.n	80111c2 <HAL_TIM_ConfigClockSource+0x1ea>
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	2201      	movs	r2, #1
 8010ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	2202      	movs	r2, #2
 8011000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	689b      	ldr	r3, [r3, #8]
 801100a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801100c:	68bb      	ldr	r3, [r7, #8]
 801100e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8011012:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8011016:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011018:	68bb      	ldr	r3, [r7, #8]
 801101a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801101e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	68ba      	ldr	r2, [r7, #8]
 8011026:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8011028:	683b      	ldr	r3, [r7, #0]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	4a67      	ldr	r2, [pc, #412]	; (80111cc <HAL_TIM_ConfigClockSource+0x1f4>)
 801102e:	4293      	cmp	r3, r2
 8011030:	f000 80b1 	beq.w	8011196 <HAL_TIM_ConfigClockSource+0x1be>
 8011034:	4a65      	ldr	r2, [pc, #404]	; (80111cc <HAL_TIM_ConfigClockSource+0x1f4>)
 8011036:	4293      	cmp	r3, r2
 8011038:	f200 80b6 	bhi.w	80111a8 <HAL_TIM_ConfigClockSource+0x1d0>
 801103c:	4a64      	ldr	r2, [pc, #400]	; (80111d0 <HAL_TIM_ConfigClockSource+0x1f8>)
 801103e:	4293      	cmp	r3, r2
 8011040:	f000 80a9 	beq.w	8011196 <HAL_TIM_ConfigClockSource+0x1be>
 8011044:	4a62      	ldr	r2, [pc, #392]	; (80111d0 <HAL_TIM_ConfigClockSource+0x1f8>)
 8011046:	4293      	cmp	r3, r2
 8011048:	f200 80ae 	bhi.w	80111a8 <HAL_TIM_ConfigClockSource+0x1d0>
 801104c:	4a61      	ldr	r2, [pc, #388]	; (80111d4 <HAL_TIM_ConfigClockSource+0x1fc>)
 801104e:	4293      	cmp	r3, r2
 8011050:	f000 80a1 	beq.w	8011196 <HAL_TIM_ConfigClockSource+0x1be>
 8011054:	4a5f      	ldr	r2, [pc, #380]	; (80111d4 <HAL_TIM_ConfigClockSource+0x1fc>)
 8011056:	4293      	cmp	r3, r2
 8011058:	f200 80a6 	bhi.w	80111a8 <HAL_TIM_ConfigClockSource+0x1d0>
 801105c:	4a5e      	ldr	r2, [pc, #376]	; (80111d8 <HAL_TIM_ConfigClockSource+0x200>)
 801105e:	4293      	cmp	r3, r2
 8011060:	f000 8099 	beq.w	8011196 <HAL_TIM_ConfigClockSource+0x1be>
 8011064:	4a5c      	ldr	r2, [pc, #368]	; (80111d8 <HAL_TIM_ConfigClockSource+0x200>)
 8011066:	4293      	cmp	r3, r2
 8011068:	f200 809e 	bhi.w	80111a8 <HAL_TIM_ConfigClockSource+0x1d0>
 801106c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011070:	f000 8091 	beq.w	8011196 <HAL_TIM_ConfigClockSource+0x1be>
 8011074:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011078:	f200 8096 	bhi.w	80111a8 <HAL_TIM_ConfigClockSource+0x1d0>
 801107c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011080:	f000 8089 	beq.w	8011196 <HAL_TIM_ConfigClockSource+0x1be>
 8011084:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011088:	f200 808e 	bhi.w	80111a8 <HAL_TIM_ConfigClockSource+0x1d0>
 801108c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011090:	d03e      	beq.n	8011110 <HAL_TIM_ConfigClockSource+0x138>
 8011092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011096:	f200 8087 	bhi.w	80111a8 <HAL_TIM_ConfigClockSource+0x1d0>
 801109a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801109e:	f000 8086 	beq.w	80111ae <HAL_TIM_ConfigClockSource+0x1d6>
 80110a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80110a6:	d87f      	bhi.n	80111a8 <HAL_TIM_ConfigClockSource+0x1d0>
 80110a8:	2b70      	cmp	r3, #112	; 0x70
 80110aa:	d01a      	beq.n	80110e2 <HAL_TIM_ConfigClockSource+0x10a>
 80110ac:	2b70      	cmp	r3, #112	; 0x70
 80110ae:	d87b      	bhi.n	80111a8 <HAL_TIM_ConfigClockSource+0x1d0>
 80110b0:	2b60      	cmp	r3, #96	; 0x60
 80110b2:	d050      	beq.n	8011156 <HAL_TIM_ConfigClockSource+0x17e>
 80110b4:	2b60      	cmp	r3, #96	; 0x60
 80110b6:	d877      	bhi.n	80111a8 <HAL_TIM_ConfigClockSource+0x1d0>
 80110b8:	2b50      	cmp	r3, #80	; 0x50
 80110ba:	d03c      	beq.n	8011136 <HAL_TIM_ConfigClockSource+0x15e>
 80110bc:	2b50      	cmp	r3, #80	; 0x50
 80110be:	d873      	bhi.n	80111a8 <HAL_TIM_ConfigClockSource+0x1d0>
 80110c0:	2b40      	cmp	r3, #64	; 0x40
 80110c2:	d058      	beq.n	8011176 <HAL_TIM_ConfigClockSource+0x19e>
 80110c4:	2b40      	cmp	r3, #64	; 0x40
 80110c6:	d86f      	bhi.n	80111a8 <HAL_TIM_ConfigClockSource+0x1d0>
 80110c8:	2b30      	cmp	r3, #48	; 0x30
 80110ca:	d064      	beq.n	8011196 <HAL_TIM_ConfigClockSource+0x1be>
 80110cc:	2b30      	cmp	r3, #48	; 0x30
 80110ce:	d86b      	bhi.n	80111a8 <HAL_TIM_ConfigClockSource+0x1d0>
 80110d0:	2b20      	cmp	r3, #32
 80110d2:	d060      	beq.n	8011196 <HAL_TIM_ConfigClockSource+0x1be>
 80110d4:	2b20      	cmp	r3, #32
 80110d6:	d867      	bhi.n	80111a8 <HAL_TIM_ConfigClockSource+0x1d0>
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d05c      	beq.n	8011196 <HAL_TIM_ConfigClockSource+0x1be>
 80110dc:	2b10      	cmp	r3, #16
 80110de:	d05a      	beq.n	8011196 <HAL_TIM_ConfigClockSource+0x1be>
 80110e0:	e062      	b.n	80111a8 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	6818      	ldr	r0, [r3, #0]
 80110e6:	683b      	ldr	r3, [r7, #0]
 80110e8:	6899      	ldr	r1, [r3, #8]
 80110ea:	683b      	ldr	r3, [r7, #0]
 80110ec:	685a      	ldr	r2, [r3, #4]
 80110ee:	683b      	ldr	r3, [r7, #0]
 80110f0:	68db      	ldr	r3, [r3, #12]
 80110f2:	f000 fde7 	bl	8011cc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	689b      	ldr	r3, [r3, #8]
 80110fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80110fe:	68bb      	ldr	r3, [r7, #8]
 8011100:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8011104:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	68ba      	ldr	r2, [r7, #8]
 801110c:	609a      	str	r2, [r3, #8]
      break;
 801110e:	e04f      	b.n	80111b0 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	6818      	ldr	r0, [r3, #0]
 8011114:	683b      	ldr	r3, [r7, #0]
 8011116:	6899      	ldr	r1, [r3, #8]
 8011118:	683b      	ldr	r3, [r7, #0]
 801111a:	685a      	ldr	r2, [r3, #4]
 801111c:	683b      	ldr	r3, [r7, #0]
 801111e:	68db      	ldr	r3, [r3, #12]
 8011120:	f000 fdd0 	bl	8011cc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	689a      	ldr	r2, [r3, #8]
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011132:	609a      	str	r2, [r3, #8]
      break;
 8011134:	e03c      	b.n	80111b0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	6818      	ldr	r0, [r3, #0]
 801113a:	683b      	ldr	r3, [r7, #0]
 801113c:	6859      	ldr	r1, [r3, #4]
 801113e:	683b      	ldr	r3, [r7, #0]
 8011140:	68db      	ldr	r3, [r3, #12]
 8011142:	461a      	mov	r2, r3
 8011144:	f000 fd42 	bl	8011bcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	2150      	movs	r1, #80	; 0x50
 801114e:	4618      	mov	r0, r3
 8011150:	f000 fd9b 	bl	8011c8a <TIM_ITRx_SetConfig>
      break;
 8011154:	e02c      	b.n	80111b0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	6818      	ldr	r0, [r3, #0]
 801115a:	683b      	ldr	r3, [r7, #0]
 801115c:	6859      	ldr	r1, [r3, #4]
 801115e:	683b      	ldr	r3, [r7, #0]
 8011160:	68db      	ldr	r3, [r3, #12]
 8011162:	461a      	mov	r2, r3
 8011164:	f000 fd61 	bl	8011c2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	2160      	movs	r1, #96	; 0x60
 801116e:	4618      	mov	r0, r3
 8011170:	f000 fd8b 	bl	8011c8a <TIM_ITRx_SetConfig>
      break;
 8011174:	e01c      	b.n	80111b0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	6818      	ldr	r0, [r3, #0]
 801117a:	683b      	ldr	r3, [r7, #0]
 801117c:	6859      	ldr	r1, [r3, #4]
 801117e:	683b      	ldr	r3, [r7, #0]
 8011180:	68db      	ldr	r3, [r3, #12]
 8011182:	461a      	mov	r2, r3
 8011184:	f000 fd22 	bl	8011bcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	2140      	movs	r1, #64	; 0x40
 801118e:	4618      	mov	r0, r3
 8011190:	f000 fd7b 	bl	8011c8a <TIM_ITRx_SetConfig>
      break;
 8011194:	e00c      	b.n	80111b0 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	681a      	ldr	r2, [r3, #0]
 801119a:	683b      	ldr	r3, [r7, #0]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	4619      	mov	r1, r3
 80111a0:	4610      	mov	r0, r2
 80111a2:	f000 fd72 	bl	8011c8a <TIM_ITRx_SetConfig>
      break;
 80111a6:	e003      	b.n	80111b0 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 80111a8:	2301      	movs	r3, #1
 80111aa:	73fb      	strb	r3, [r7, #15]
      break;
 80111ac:	e000      	b.n	80111b0 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 80111ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	2201      	movs	r2, #1
 80111b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	2200      	movs	r2, #0
 80111bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80111c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80111c2:	4618      	mov	r0, r3
 80111c4:	3710      	adds	r7, #16
 80111c6:	46bd      	mov	sp, r7
 80111c8:	bd80      	pop	{r7, pc}
 80111ca:	bf00      	nop
 80111cc:	00100070 	.word	0x00100070
 80111d0:	00100040 	.word	0x00100040
 80111d4:	00100030 	.word	0x00100030
 80111d8:	00100020 	.word	0x00100020

080111dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80111dc:	b480      	push	{r7}
 80111de:	b083      	sub	sp, #12
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80111e4:	bf00      	nop
 80111e6:	370c      	adds	r7, #12
 80111e8:	46bd      	mov	sp, r7
 80111ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ee:	4770      	bx	lr

080111f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80111f0:	b480      	push	{r7}
 80111f2:	b083      	sub	sp, #12
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80111f8:	bf00      	nop
 80111fa:	370c      	adds	r7, #12
 80111fc:	46bd      	mov	sp, r7
 80111fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011202:	4770      	bx	lr

08011204 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8011204:	b480      	push	{r7}
 8011206:	b083      	sub	sp, #12
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801120c:	bf00      	nop
 801120e:	370c      	adds	r7, #12
 8011210:	46bd      	mov	sp, r7
 8011212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011216:	4770      	bx	lr

08011218 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011218:	b480      	push	{r7}
 801121a:	b083      	sub	sp, #12
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011220:	bf00      	nop
 8011222:	370c      	adds	r7, #12
 8011224:	46bd      	mov	sp, r7
 8011226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122a:	4770      	bx	lr

0801122c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801122c:	b480      	push	{r7}
 801122e:	b085      	sub	sp, #20
 8011230:	af00      	add	r7, sp, #0
 8011232:	6078      	str	r0, [r7, #4]
 8011234:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	4a68      	ldr	r2, [pc, #416]	; (80113e0 <TIM_Base_SetConfig+0x1b4>)
 8011240:	4293      	cmp	r3, r2
 8011242:	d02b      	beq.n	801129c <TIM_Base_SetConfig+0x70>
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	4a67      	ldr	r2, [pc, #412]	; (80113e4 <TIM_Base_SetConfig+0x1b8>)
 8011248:	4293      	cmp	r3, r2
 801124a:	d027      	beq.n	801129c <TIM_Base_SetConfig+0x70>
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011252:	d023      	beq.n	801129c <TIM_Base_SetConfig+0x70>
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801125a:	d01f      	beq.n	801129c <TIM_Base_SetConfig+0x70>
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	4a62      	ldr	r2, [pc, #392]	; (80113e8 <TIM_Base_SetConfig+0x1bc>)
 8011260:	4293      	cmp	r3, r2
 8011262:	d01b      	beq.n	801129c <TIM_Base_SetConfig+0x70>
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	4a61      	ldr	r2, [pc, #388]	; (80113ec <TIM_Base_SetConfig+0x1c0>)
 8011268:	4293      	cmp	r3, r2
 801126a:	d017      	beq.n	801129c <TIM_Base_SetConfig+0x70>
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	4a60      	ldr	r2, [pc, #384]	; (80113f0 <TIM_Base_SetConfig+0x1c4>)
 8011270:	4293      	cmp	r3, r2
 8011272:	d013      	beq.n	801129c <TIM_Base_SetConfig+0x70>
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	4a5f      	ldr	r2, [pc, #380]	; (80113f4 <TIM_Base_SetConfig+0x1c8>)
 8011278:	4293      	cmp	r3, r2
 801127a:	d00f      	beq.n	801129c <TIM_Base_SetConfig+0x70>
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	4a5e      	ldr	r2, [pc, #376]	; (80113f8 <TIM_Base_SetConfig+0x1cc>)
 8011280:	4293      	cmp	r3, r2
 8011282:	d00b      	beq.n	801129c <TIM_Base_SetConfig+0x70>
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	4a5d      	ldr	r2, [pc, #372]	; (80113fc <TIM_Base_SetConfig+0x1d0>)
 8011288:	4293      	cmp	r3, r2
 801128a:	d007      	beq.n	801129c <TIM_Base_SetConfig+0x70>
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	4a5c      	ldr	r2, [pc, #368]	; (8011400 <TIM_Base_SetConfig+0x1d4>)
 8011290:	4293      	cmp	r3, r2
 8011292:	d003      	beq.n	801129c <TIM_Base_SetConfig+0x70>
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	4a5b      	ldr	r2, [pc, #364]	; (8011404 <TIM_Base_SetConfig+0x1d8>)
 8011298:	4293      	cmp	r3, r2
 801129a:	d108      	bne.n	80112ae <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80112a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80112a4:	683b      	ldr	r3, [r7, #0]
 80112a6:	685b      	ldr	r3, [r3, #4]
 80112a8:	68fa      	ldr	r2, [r7, #12]
 80112aa:	4313      	orrs	r3, r2
 80112ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	4a4b      	ldr	r2, [pc, #300]	; (80113e0 <TIM_Base_SetConfig+0x1b4>)
 80112b2:	4293      	cmp	r3, r2
 80112b4:	d043      	beq.n	801133e <TIM_Base_SetConfig+0x112>
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	4a4a      	ldr	r2, [pc, #296]	; (80113e4 <TIM_Base_SetConfig+0x1b8>)
 80112ba:	4293      	cmp	r3, r2
 80112bc:	d03f      	beq.n	801133e <TIM_Base_SetConfig+0x112>
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80112c4:	d03b      	beq.n	801133e <TIM_Base_SetConfig+0x112>
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80112cc:	d037      	beq.n	801133e <TIM_Base_SetConfig+0x112>
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	4a45      	ldr	r2, [pc, #276]	; (80113e8 <TIM_Base_SetConfig+0x1bc>)
 80112d2:	4293      	cmp	r3, r2
 80112d4:	d033      	beq.n	801133e <TIM_Base_SetConfig+0x112>
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	4a44      	ldr	r2, [pc, #272]	; (80113ec <TIM_Base_SetConfig+0x1c0>)
 80112da:	4293      	cmp	r3, r2
 80112dc:	d02f      	beq.n	801133e <TIM_Base_SetConfig+0x112>
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	4a43      	ldr	r2, [pc, #268]	; (80113f0 <TIM_Base_SetConfig+0x1c4>)
 80112e2:	4293      	cmp	r3, r2
 80112e4:	d02b      	beq.n	801133e <TIM_Base_SetConfig+0x112>
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	4a42      	ldr	r2, [pc, #264]	; (80113f4 <TIM_Base_SetConfig+0x1c8>)
 80112ea:	4293      	cmp	r3, r2
 80112ec:	d027      	beq.n	801133e <TIM_Base_SetConfig+0x112>
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	4a41      	ldr	r2, [pc, #260]	; (80113f8 <TIM_Base_SetConfig+0x1cc>)
 80112f2:	4293      	cmp	r3, r2
 80112f4:	d023      	beq.n	801133e <TIM_Base_SetConfig+0x112>
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	4a40      	ldr	r2, [pc, #256]	; (80113fc <TIM_Base_SetConfig+0x1d0>)
 80112fa:	4293      	cmp	r3, r2
 80112fc:	d01f      	beq.n	801133e <TIM_Base_SetConfig+0x112>
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	4a3f      	ldr	r2, [pc, #252]	; (8011400 <TIM_Base_SetConfig+0x1d4>)
 8011302:	4293      	cmp	r3, r2
 8011304:	d01b      	beq.n	801133e <TIM_Base_SetConfig+0x112>
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	4a3e      	ldr	r2, [pc, #248]	; (8011404 <TIM_Base_SetConfig+0x1d8>)
 801130a:	4293      	cmp	r3, r2
 801130c:	d017      	beq.n	801133e <TIM_Base_SetConfig+0x112>
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	4a3d      	ldr	r2, [pc, #244]	; (8011408 <TIM_Base_SetConfig+0x1dc>)
 8011312:	4293      	cmp	r3, r2
 8011314:	d013      	beq.n	801133e <TIM_Base_SetConfig+0x112>
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	4a3c      	ldr	r2, [pc, #240]	; (801140c <TIM_Base_SetConfig+0x1e0>)
 801131a:	4293      	cmp	r3, r2
 801131c:	d00f      	beq.n	801133e <TIM_Base_SetConfig+0x112>
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	4a3b      	ldr	r2, [pc, #236]	; (8011410 <TIM_Base_SetConfig+0x1e4>)
 8011322:	4293      	cmp	r3, r2
 8011324:	d00b      	beq.n	801133e <TIM_Base_SetConfig+0x112>
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	4a3a      	ldr	r2, [pc, #232]	; (8011414 <TIM_Base_SetConfig+0x1e8>)
 801132a:	4293      	cmp	r3, r2
 801132c:	d007      	beq.n	801133e <TIM_Base_SetConfig+0x112>
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	4a39      	ldr	r2, [pc, #228]	; (8011418 <TIM_Base_SetConfig+0x1ec>)
 8011332:	4293      	cmp	r3, r2
 8011334:	d003      	beq.n	801133e <TIM_Base_SetConfig+0x112>
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	4a38      	ldr	r2, [pc, #224]	; (801141c <TIM_Base_SetConfig+0x1f0>)
 801133a:	4293      	cmp	r3, r2
 801133c:	d108      	bne.n	8011350 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011346:	683b      	ldr	r3, [r7, #0]
 8011348:	68db      	ldr	r3, [r3, #12]
 801134a:	68fa      	ldr	r2, [r7, #12]
 801134c:	4313      	orrs	r3, r2
 801134e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011356:	683b      	ldr	r3, [r7, #0]
 8011358:	695b      	ldr	r3, [r3, #20]
 801135a:	4313      	orrs	r3, r2
 801135c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	68fa      	ldr	r2, [r7, #12]
 8011362:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011364:	683b      	ldr	r3, [r7, #0]
 8011366:	689a      	ldr	r2, [r3, #8]
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801136c:	683b      	ldr	r3, [r7, #0]
 801136e:	681a      	ldr	r2, [r3, #0]
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	4a1a      	ldr	r2, [pc, #104]	; (80113e0 <TIM_Base_SetConfig+0x1b4>)
 8011378:	4293      	cmp	r3, r2
 801137a:	d023      	beq.n	80113c4 <TIM_Base_SetConfig+0x198>
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	4a19      	ldr	r2, [pc, #100]	; (80113e4 <TIM_Base_SetConfig+0x1b8>)
 8011380:	4293      	cmp	r3, r2
 8011382:	d01f      	beq.n	80113c4 <TIM_Base_SetConfig+0x198>
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	4a1e      	ldr	r2, [pc, #120]	; (8011400 <TIM_Base_SetConfig+0x1d4>)
 8011388:	4293      	cmp	r3, r2
 801138a:	d01b      	beq.n	80113c4 <TIM_Base_SetConfig+0x198>
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	4a1d      	ldr	r2, [pc, #116]	; (8011404 <TIM_Base_SetConfig+0x1d8>)
 8011390:	4293      	cmp	r3, r2
 8011392:	d017      	beq.n	80113c4 <TIM_Base_SetConfig+0x198>
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	4a1c      	ldr	r2, [pc, #112]	; (8011408 <TIM_Base_SetConfig+0x1dc>)
 8011398:	4293      	cmp	r3, r2
 801139a:	d013      	beq.n	80113c4 <TIM_Base_SetConfig+0x198>
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	4a1b      	ldr	r2, [pc, #108]	; (801140c <TIM_Base_SetConfig+0x1e0>)
 80113a0:	4293      	cmp	r3, r2
 80113a2:	d00f      	beq.n	80113c4 <TIM_Base_SetConfig+0x198>
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	4a1a      	ldr	r2, [pc, #104]	; (8011410 <TIM_Base_SetConfig+0x1e4>)
 80113a8:	4293      	cmp	r3, r2
 80113aa:	d00b      	beq.n	80113c4 <TIM_Base_SetConfig+0x198>
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	4a19      	ldr	r2, [pc, #100]	; (8011414 <TIM_Base_SetConfig+0x1e8>)
 80113b0:	4293      	cmp	r3, r2
 80113b2:	d007      	beq.n	80113c4 <TIM_Base_SetConfig+0x198>
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	4a18      	ldr	r2, [pc, #96]	; (8011418 <TIM_Base_SetConfig+0x1ec>)
 80113b8:	4293      	cmp	r3, r2
 80113ba:	d003      	beq.n	80113c4 <TIM_Base_SetConfig+0x198>
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	4a17      	ldr	r2, [pc, #92]	; (801141c <TIM_Base_SetConfig+0x1f0>)
 80113c0:	4293      	cmp	r3, r2
 80113c2:	d103      	bne.n	80113cc <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80113c4:	683b      	ldr	r3, [r7, #0]
 80113c6:	691a      	ldr	r2, [r3, #16]
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	2201      	movs	r2, #1
 80113d0:	615a      	str	r2, [r3, #20]
}
 80113d2:	bf00      	nop
 80113d4:	3714      	adds	r7, #20
 80113d6:	46bd      	mov	sp, r7
 80113d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113dc:	4770      	bx	lr
 80113de:	bf00      	nop
 80113e0:	40012c00 	.word	0x40012c00
 80113e4:	50012c00 	.word	0x50012c00
 80113e8:	40000400 	.word	0x40000400
 80113ec:	50000400 	.word	0x50000400
 80113f0:	40000800 	.word	0x40000800
 80113f4:	50000800 	.word	0x50000800
 80113f8:	40000c00 	.word	0x40000c00
 80113fc:	50000c00 	.word	0x50000c00
 8011400:	40013400 	.word	0x40013400
 8011404:	50013400 	.word	0x50013400
 8011408:	40014000 	.word	0x40014000
 801140c:	50014000 	.word	0x50014000
 8011410:	40014400 	.word	0x40014400
 8011414:	50014400 	.word	0x50014400
 8011418:	40014800 	.word	0x40014800
 801141c:	50014800 	.word	0x50014800

08011420 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011420:	b480      	push	{r7}
 8011422:	b087      	sub	sp, #28
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]
 8011428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	6a1b      	ldr	r3, [r3, #32]
 801142e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	6a1b      	ldr	r3, [r3, #32]
 8011434:	f023 0201 	bic.w	r2, r3, #1
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	685b      	ldr	r3, [r3, #4]
 8011440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	699b      	ldr	r3, [r3, #24]
 8011446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801144e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	f023 0303 	bic.w	r3, r3, #3
 801145a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801145c:	683b      	ldr	r3, [r7, #0]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	68fa      	ldr	r2, [r7, #12]
 8011462:	4313      	orrs	r3, r2
 8011464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011466:	697b      	ldr	r3, [r7, #20]
 8011468:	f023 0302 	bic.w	r3, r3, #2
 801146c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801146e:	683b      	ldr	r3, [r7, #0]
 8011470:	689b      	ldr	r3, [r3, #8]
 8011472:	697a      	ldr	r2, [r7, #20]
 8011474:	4313      	orrs	r3, r2
 8011476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	4a40      	ldr	r2, [pc, #256]	; (801157c <TIM_OC1_SetConfig+0x15c>)
 801147c:	4293      	cmp	r3, r2
 801147e:	d023      	beq.n	80114c8 <TIM_OC1_SetConfig+0xa8>
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	4a3f      	ldr	r2, [pc, #252]	; (8011580 <TIM_OC1_SetConfig+0x160>)
 8011484:	4293      	cmp	r3, r2
 8011486:	d01f      	beq.n	80114c8 <TIM_OC1_SetConfig+0xa8>
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	4a3e      	ldr	r2, [pc, #248]	; (8011584 <TIM_OC1_SetConfig+0x164>)
 801148c:	4293      	cmp	r3, r2
 801148e:	d01b      	beq.n	80114c8 <TIM_OC1_SetConfig+0xa8>
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	4a3d      	ldr	r2, [pc, #244]	; (8011588 <TIM_OC1_SetConfig+0x168>)
 8011494:	4293      	cmp	r3, r2
 8011496:	d017      	beq.n	80114c8 <TIM_OC1_SetConfig+0xa8>
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	4a3c      	ldr	r2, [pc, #240]	; (801158c <TIM_OC1_SetConfig+0x16c>)
 801149c:	4293      	cmp	r3, r2
 801149e:	d013      	beq.n	80114c8 <TIM_OC1_SetConfig+0xa8>
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	4a3b      	ldr	r2, [pc, #236]	; (8011590 <TIM_OC1_SetConfig+0x170>)
 80114a4:	4293      	cmp	r3, r2
 80114a6:	d00f      	beq.n	80114c8 <TIM_OC1_SetConfig+0xa8>
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	4a3a      	ldr	r2, [pc, #232]	; (8011594 <TIM_OC1_SetConfig+0x174>)
 80114ac:	4293      	cmp	r3, r2
 80114ae:	d00b      	beq.n	80114c8 <TIM_OC1_SetConfig+0xa8>
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	4a39      	ldr	r2, [pc, #228]	; (8011598 <TIM_OC1_SetConfig+0x178>)
 80114b4:	4293      	cmp	r3, r2
 80114b6:	d007      	beq.n	80114c8 <TIM_OC1_SetConfig+0xa8>
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	4a38      	ldr	r2, [pc, #224]	; (801159c <TIM_OC1_SetConfig+0x17c>)
 80114bc:	4293      	cmp	r3, r2
 80114be:	d003      	beq.n	80114c8 <TIM_OC1_SetConfig+0xa8>
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	4a37      	ldr	r2, [pc, #220]	; (80115a0 <TIM_OC1_SetConfig+0x180>)
 80114c4:	4293      	cmp	r3, r2
 80114c6:	d10c      	bne.n	80114e2 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80114c8:	697b      	ldr	r3, [r7, #20]
 80114ca:	f023 0308 	bic.w	r3, r3, #8
 80114ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80114d0:	683b      	ldr	r3, [r7, #0]
 80114d2:	68db      	ldr	r3, [r3, #12]
 80114d4:	697a      	ldr	r2, [r7, #20]
 80114d6:	4313      	orrs	r3, r2
 80114d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80114da:	697b      	ldr	r3, [r7, #20]
 80114dc:	f023 0304 	bic.w	r3, r3, #4
 80114e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	4a25      	ldr	r2, [pc, #148]	; (801157c <TIM_OC1_SetConfig+0x15c>)
 80114e6:	4293      	cmp	r3, r2
 80114e8:	d023      	beq.n	8011532 <TIM_OC1_SetConfig+0x112>
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	4a24      	ldr	r2, [pc, #144]	; (8011580 <TIM_OC1_SetConfig+0x160>)
 80114ee:	4293      	cmp	r3, r2
 80114f0:	d01f      	beq.n	8011532 <TIM_OC1_SetConfig+0x112>
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	4a23      	ldr	r2, [pc, #140]	; (8011584 <TIM_OC1_SetConfig+0x164>)
 80114f6:	4293      	cmp	r3, r2
 80114f8:	d01b      	beq.n	8011532 <TIM_OC1_SetConfig+0x112>
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	4a22      	ldr	r2, [pc, #136]	; (8011588 <TIM_OC1_SetConfig+0x168>)
 80114fe:	4293      	cmp	r3, r2
 8011500:	d017      	beq.n	8011532 <TIM_OC1_SetConfig+0x112>
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	4a21      	ldr	r2, [pc, #132]	; (801158c <TIM_OC1_SetConfig+0x16c>)
 8011506:	4293      	cmp	r3, r2
 8011508:	d013      	beq.n	8011532 <TIM_OC1_SetConfig+0x112>
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	4a20      	ldr	r2, [pc, #128]	; (8011590 <TIM_OC1_SetConfig+0x170>)
 801150e:	4293      	cmp	r3, r2
 8011510:	d00f      	beq.n	8011532 <TIM_OC1_SetConfig+0x112>
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	4a1f      	ldr	r2, [pc, #124]	; (8011594 <TIM_OC1_SetConfig+0x174>)
 8011516:	4293      	cmp	r3, r2
 8011518:	d00b      	beq.n	8011532 <TIM_OC1_SetConfig+0x112>
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	4a1e      	ldr	r2, [pc, #120]	; (8011598 <TIM_OC1_SetConfig+0x178>)
 801151e:	4293      	cmp	r3, r2
 8011520:	d007      	beq.n	8011532 <TIM_OC1_SetConfig+0x112>
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	4a1d      	ldr	r2, [pc, #116]	; (801159c <TIM_OC1_SetConfig+0x17c>)
 8011526:	4293      	cmp	r3, r2
 8011528:	d003      	beq.n	8011532 <TIM_OC1_SetConfig+0x112>
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	4a1c      	ldr	r2, [pc, #112]	; (80115a0 <TIM_OC1_SetConfig+0x180>)
 801152e:	4293      	cmp	r3, r2
 8011530:	d111      	bne.n	8011556 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8011532:	693b      	ldr	r3, [r7, #16]
 8011534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801153a:	693b      	ldr	r3, [r7, #16]
 801153c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8011542:	683b      	ldr	r3, [r7, #0]
 8011544:	695b      	ldr	r3, [r3, #20]
 8011546:	693a      	ldr	r2, [r7, #16]
 8011548:	4313      	orrs	r3, r2
 801154a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801154c:	683b      	ldr	r3, [r7, #0]
 801154e:	699b      	ldr	r3, [r3, #24]
 8011550:	693a      	ldr	r2, [r7, #16]
 8011552:	4313      	orrs	r3, r2
 8011554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	693a      	ldr	r2, [r7, #16]
 801155a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	68fa      	ldr	r2, [r7, #12]
 8011560:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011562:	683b      	ldr	r3, [r7, #0]
 8011564:	685a      	ldr	r2, [r3, #4]
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	697a      	ldr	r2, [r7, #20]
 801156e:	621a      	str	r2, [r3, #32]
}
 8011570:	bf00      	nop
 8011572:	371c      	adds	r7, #28
 8011574:	46bd      	mov	sp, r7
 8011576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801157a:	4770      	bx	lr
 801157c:	40012c00 	.word	0x40012c00
 8011580:	50012c00 	.word	0x50012c00
 8011584:	40013400 	.word	0x40013400
 8011588:	50013400 	.word	0x50013400
 801158c:	40014000 	.word	0x40014000
 8011590:	50014000 	.word	0x50014000
 8011594:	40014400 	.word	0x40014400
 8011598:	50014400 	.word	0x50014400
 801159c:	40014800 	.word	0x40014800
 80115a0:	50014800 	.word	0x50014800

080115a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80115a4:	b480      	push	{r7}
 80115a6:	b087      	sub	sp, #28
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	6078      	str	r0, [r7, #4]
 80115ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	6a1b      	ldr	r3, [r3, #32]
 80115b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	6a1b      	ldr	r3, [r3, #32]
 80115b8:	f023 0210 	bic.w	r2, r3, #16
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	685b      	ldr	r3, [r3, #4]
 80115c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	699b      	ldr	r3, [r3, #24]
 80115ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80115d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80115d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80115de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80115e0:	683b      	ldr	r3, [r7, #0]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	021b      	lsls	r3, r3, #8
 80115e6:	68fa      	ldr	r2, [r7, #12]
 80115e8:	4313      	orrs	r3, r2
 80115ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80115ec:	697b      	ldr	r3, [r7, #20]
 80115ee:	f023 0320 	bic.w	r3, r3, #32
 80115f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80115f4:	683b      	ldr	r3, [r7, #0]
 80115f6:	689b      	ldr	r3, [r3, #8]
 80115f8:	011b      	lsls	r3, r3, #4
 80115fa:	697a      	ldr	r2, [r7, #20]
 80115fc:	4313      	orrs	r3, r2
 80115fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	4a36      	ldr	r2, [pc, #216]	; (80116dc <TIM_OC2_SetConfig+0x138>)
 8011604:	4293      	cmp	r3, r2
 8011606:	d00b      	beq.n	8011620 <TIM_OC2_SetConfig+0x7c>
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	4a35      	ldr	r2, [pc, #212]	; (80116e0 <TIM_OC2_SetConfig+0x13c>)
 801160c:	4293      	cmp	r3, r2
 801160e:	d007      	beq.n	8011620 <TIM_OC2_SetConfig+0x7c>
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	4a34      	ldr	r2, [pc, #208]	; (80116e4 <TIM_OC2_SetConfig+0x140>)
 8011614:	4293      	cmp	r3, r2
 8011616:	d003      	beq.n	8011620 <TIM_OC2_SetConfig+0x7c>
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	4a33      	ldr	r2, [pc, #204]	; (80116e8 <TIM_OC2_SetConfig+0x144>)
 801161c:	4293      	cmp	r3, r2
 801161e:	d10d      	bne.n	801163c <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011620:	697b      	ldr	r3, [r7, #20]
 8011622:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011626:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011628:	683b      	ldr	r3, [r7, #0]
 801162a:	68db      	ldr	r3, [r3, #12]
 801162c:	011b      	lsls	r3, r3, #4
 801162e:	697a      	ldr	r2, [r7, #20]
 8011630:	4313      	orrs	r3, r2
 8011632:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011634:	697b      	ldr	r3, [r7, #20]
 8011636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801163a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	4a27      	ldr	r2, [pc, #156]	; (80116dc <TIM_OC2_SetConfig+0x138>)
 8011640:	4293      	cmp	r3, r2
 8011642:	d023      	beq.n	801168c <TIM_OC2_SetConfig+0xe8>
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	4a26      	ldr	r2, [pc, #152]	; (80116e0 <TIM_OC2_SetConfig+0x13c>)
 8011648:	4293      	cmp	r3, r2
 801164a:	d01f      	beq.n	801168c <TIM_OC2_SetConfig+0xe8>
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	4a25      	ldr	r2, [pc, #148]	; (80116e4 <TIM_OC2_SetConfig+0x140>)
 8011650:	4293      	cmp	r3, r2
 8011652:	d01b      	beq.n	801168c <TIM_OC2_SetConfig+0xe8>
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	4a24      	ldr	r2, [pc, #144]	; (80116e8 <TIM_OC2_SetConfig+0x144>)
 8011658:	4293      	cmp	r3, r2
 801165a:	d017      	beq.n	801168c <TIM_OC2_SetConfig+0xe8>
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	4a23      	ldr	r2, [pc, #140]	; (80116ec <TIM_OC2_SetConfig+0x148>)
 8011660:	4293      	cmp	r3, r2
 8011662:	d013      	beq.n	801168c <TIM_OC2_SetConfig+0xe8>
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	4a22      	ldr	r2, [pc, #136]	; (80116f0 <TIM_OC2_SetConfig+0x14c>)
 8011668:	4293      	cmp	r3, r2
 801166a:	d00f      	beq.n	801168c <TIM_OC2_SetConfig+0xe8>
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	4a21      	ldr	r2, [pc, #132]	; (80116f4 <TIM_OC2_SetConfig+0x150>)
 8011670:	4293      	cmp	r3, r2
 8011672:	d00b      	beq.n	801168c <TIM_OC2_SetConfig+0xe8>
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	4a20      	ldr	r2, [pc, #128]	; (80116f8 <TIM_OC2_SetConfig+0x154>)
 8011678:	4293      	cmp	r3, r2
 801167a:	d007      	beq.n	801168c <TIM_OC2_SetConfig+0xe8>
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	4a1f      	ldr	r2, [pc, #124]	; (80116fc <TIM_OC2_SetConfig+0x158>)
 8011680:	4293      	cmp	r3, r2
 8011682:	d003      	beq.n	801168c <TIM_OC2_SetConfig+0xe8>
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	4a1e      	ldr	r2, [pc, #120]	; (8011700 <TIM_OC2_SetConfig+0x15c>)
 8011688:	4293      	cmp	r3, r2
 801168a:	d113      	bne.n	80116b4 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801168c:	693b      	ldr	r3, [r7, #16]
 801168e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011692:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011694:	693b      	ldr	r3, [r7, #16]
 8011696:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801169a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801169c:	683b      	ldr	r3, [r7, #0]
 801169e:	695b      	ldr	r3, [r3, #20]
 80116a0:	009b      	lsls	r3, r3, #2
 80116a2:	693a      	ldr	r2, [r7, #16]
 80116a4:	4313      	orrs	r3, r2
 80116a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80116a8:	683b      	ldr	r3, [r7, #0]
 80116aa:	699b      	ldr	r3, [r3, #24]
 80116ac:	009b      	lsls	r3, r3, #2
 80116ae:	693a      	ldr	r2, [r7, #16]
 80116b0:	4313      	orrs	r3, r2
 80116b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	693a      	ldr	r2, [r7, #16]
 80116b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	68fa      	ldr	r2, [r7, #12]
 80116be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80116c0:	683b      	ldr	r3, [r7, #0]
 80116c2:	685a      	ldr	r2, [r3, #4]
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	697a      	ldr	r2, [r7, #20]
 80116cc:	621a      	str	r2, [r3, #32]
}
 80116ce:	bf00      	nop
 80116d0:	371c      	adds	r7, #28
 80116d2:	46bd      	mov	sp, r7
 80116d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d8:	4770      	bx	lr
 80116da:	bf00      	nop
 80116dc:	40012c00 	.word	0x40012c00
 80116e0:	50012c00 	.word	0x50012c00
 80116e4:	40013400 	.word	0x40013400
 80116e8:	50013400 	.word	0x50013400
 80116ec:	40014000 	.word	0x40014000
 80116f0:	50014000 	.word	0x50014000
 80116f4:	40014400 	.word	0x40014400
 80116f8:	50014400 	.word	0x50014400
 80116fc:	40014800 	.word	0x40014800
 8011700:	50014800 	.word	0x50014800

08011704 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011704:	b480      	push	{r7}
 8011706:	b087      	sub	sp, #28
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
 801170c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	6a1b      	ldr	r3, [r3, #32]
 8011712:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	6a1b      	ldr	r3, [r3, #32]
 8011718:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	685b      	ldr	r3, [r3, #4]
 8011724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	69db      	ldr	r3, [r3, #28]
 801172a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	f023 0303 	bic.w	r3, r3, #3
 801173e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011740:	683b      	ldr	r3, [r7, #0]
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	68fa      	ldr	r2, [r7, #12]
 8011746:	4313      	orrs	r3, r2
 8011748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801174a:	697b      	ldr	r3, [r7, #20]
 801174c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011750:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011752:	683b      	ldr	r3, [r7, #0]
 8011754:	689b      	ldr	r3, [r3, #8]
 8011756:	021b      	lsls	r3, r3, #8
 8011758:	697a      	ldr	r2, [r7, #20]
 801175a:	4313      	orrs	r3, r2
 801175c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	4a35      	ldr	r2, [pc, #212]	; (8011838 <TIM_OC3_SetConfig+0x134>)
 8011762:	4293      	cmp	r3, r2
 8011764:	d00b      	beq.n	801177e <TIM_OC3_SetConfig+0x7a>
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	4a34      	ldr	r2, [pc, #208]	; (801183c <TIM_OC3_SetConfig+0x138>)
 801176a:	4293      	cmp	r3, r2
 801176c:	d007      	beq.n	801177e <TIM_OC3_SetConfig+0x7a>
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	4a33      	ldr	r2, [pc, #204]	; (8011840 <TIM_OC3_SetConfig+0x13c>)
 8011772:	4293      	cmp	r3, r2
 8011774:	d003      	beq.n	801177e <TIM_OC3_SetConfig+0x7a>
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	4a32      	ldr	r2, [pc, #200]	; (8011844 <TIM_OC3_SetConfig+0x140>)
 801177a:	4293      	cmp	r3, r2
 801177c:	d10d      	bne.n	801179a <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801177e:	697b      	ldr	r3, [r7, #20]
 8011780:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011784:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011786:	683b      	ldr	r3, [r7, #0]
 8011788:	68db      	ldr	r3, [r3, #12]
 801178a:	021b      	lsls	r3, r3, #8
 801178c:	697a      	ldr	r2, [r7, #20]
 801178e:	4313      	orrs	r3, r2
 8011790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011792:	697b      	ldr	r3, [r7, #20]
 8011794:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	4a26      	ldr	r2, [pc, #152]	; (8011838 <TIM_OC3_SetConfig+0x134>)
 801179e:	4293      	cmp	r3, r2
 80117a0:	d023      	beq.n	80117ea <TIM_OC3_SetConfig+0xe6>
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	4a25      	ldr	r2, [pc, #148]	; (801183c <TIM_OC3_SetConfig+0x138>)
 80117a6:	4293      	cmp	r3, r2
 80117a8:	d01f      	beq.n	80117ea <TIM_OC3_SetConfig+0xe6>
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	4a24      	ldr	r2, [pc, #144]	; (8011840 <TIM_OC3_SetConfig+0x13c>)
 80117ae:	4293      	cmp	r3, r2
 80117b0:	d01b      	beq.n	80117ea <TIM_OC3_SetConfig+0xe6>
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	4a23      	ldr	r2, [pc, #140]	; (8011844 <TIM_OC3_SetConfig+0x140>)
 80117b6:	4293      	cmp	r3, r2
 80117b8:	d017      	beq.n	80117ea <TIM_OC3_SetConfig+0xe6>
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	4a22      	ldr	r2, [pc, #136]	; (8011848 <TIM_OC3_SetConfig+0x144>)
 80117be:	4293      	cmp	r3, r2
 80117c0:	d013      	beq.n	80117ea <TIM_OC3_SetConfig+0xe6>
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	4a21      	ldr	r2, [pc, #132]	; (801184c <TIM_OC3_SetConfig+0x148>)
 80117c6:	4293      	cmp	r3, r2
 80117c8:	d00f      	beq.n	80117ea <TIM_OC3_SetConfig+0xe6>
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	4a20      	ldr	r2, [pc, #128]	; (8011850 <TIM_OC3_SetConfig+0x14c>)
 80117ce:	4293      	cmp	r3, r2
 80117d0:	d00b      	beq.n	80117ea <TIM_OC3_SetConfig+0xe6>
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	4a1f      	ldr	r2, [pc, #124]	; (8011854 <TIM_OC3_SetConfig+0x150>)
 80117d6:	4293      	cmp	r3, r2
 80117d8:	d007      	beq.n	80117ea <TIM_OC3_SetConfig+0xe6>
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	4a1e      	ldr	r2, [pc, #120]	; (8011858 <TIM_OC3_SetConfig+0x154>)
 80117de:	4293      	cmp	r3, r2
 80117e0:	d003      	beq.n	80117ea <TIM_OC3_SetConfig+0xe6>
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	4a1d      	ldr	r2, [pc, #116]	; (801185c <TIM_OC3_SetConfig+0x158>)
 80117e6:	4293      	cmp	r3, r2
 80117e8:	d113      	bne.n	8011812 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80117ea:	693b      	ldr	r3, [r7, #16]
 80117ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80117f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80117f2:	693b      	ldr	r3, [r7, #16]
 80117f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80117f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80117fa:	683b      	ldr	r3, [r7, #0]
 80117fc:	695b      	ldr	r3, [r3, #20]
 80117fe:	011b      	lsls	r3, r3, #4
 8011800:	693a      	ldr	r2, [r7, #16]
 8011802:	4313      	orrs	r3, r2
 8011804:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011806:	683b      	ldr	r3, [r7, #0]
 8011808:	699b      	ldr	r3, [r3, #24]
 801180a:	011b      	lsls	r3, r3, #4
 801180c:	693a      	ldr	r2, [r7, #16]
 801180e:	4313      	orrs	r3, r2
 8011810:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	693a      	ldr	r2, [r7, #16]
 8011816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	68fa      	ldr	r2, [r7, #12]
 801181c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801181e:	683b      	ldr	r3, [r7, #0]
 8011820:	685a      	ldr	r2, [r3, #4]
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	697a      	ldr	r2, [r7, #20]
 801182a:	621a      	str	r2, [r3, #32]
}
 801182c:	bf00      	nop
 801182e:	371c      	adds	r7, #28
 8011830:	46bd      	mov	sp, r7
 8011832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011836:	4770      	bx	lr
 8011838:	40012c00 	.word	0x40012c00
 801183c:	50012c00 	.word	0x50012c00
 8011840:	40013400 	.word	0x40013400
 8011844:	50013400 	.word	0x50013400
 8011848:	40014000 	.word	0x40014000
 801184c:	50014000 	.word	0x50014000
 8011850:	40014400 	.word	0x40014400
 8011854:	50014400 	.word	0x50014400
 8011858:	40014800 	.word	0x40014800
 801185c:	50014800 	.word	0x50014800

08011860 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011860:	b480      	push	{r7}
 8011862:	b087      	sub	sp, #28
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
 8011868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	6a1b      	ldr	r3, [r3, #32]
 801186e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	6a1b      	ldr	r3, [r3, #32]
 8011874:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	685b      	ldr	r3, [r3, #4]
 8011880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	69db      	ldr	r3, [r3, #28]
 8011886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801188e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801189a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801189c:	683b      	ldr	r3, [r7, #0]
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	021b      	lsls	r3, r3, #8
 80118a2:	68fa      	ldr	r2, [r7, #12]
 80118a4:	4313      	orrs	r3, r2
 80118a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80118a8:	697b      	ldr	r3, [r7, #20]
 80118aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80118ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80118b0:	683b      	ldr	r3, [r7, #0]
 80118b2:	689b      	ldr	r3, [r3, #8]
 80118b4:	031b      	lsls	r3, r3, #12
 80118b6:	697a      	ldr	r2, [r7, #20]
 80118b8:	4313      	orrs	r3, r2
 80118ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	4a36      	ldr	r2, [pc, #216]	; (8011998 <TIM_OC4_SetConfig+0x138>)
 80118c0:	4293      	cmp	r3, r2
 80118c2:	d00b      	beq.n	80118dc <TIM_OC4_SetConfig+0x7c>
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	4a35      	ldr	r2, [pc, #212]	; (801199c <TIM_OC4_SetConfig+0x13c>)
 80118c8:	4293      	cmp	r3, r2
 80118ca:	d007      	beq.n	80118dc <TIM_OC4_SetConfig+0x7c>
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	4a34      	ldr	r2, [pc, #208]	; (80119a0 <TIM_OC4_SetConfig+0x140>)
 80118d0:	4293      	cmp	r3, r2
 80118d2:	d003      	beq.n	80118dc <TIM_OC4_SetConfig+0x7c>
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	4a33      	ldr	r2, [pc, #204]	; (80119a4 <TIM_OC4_SetConfig+0x144>)
 80118d8:	4293      	cmp	r3, r2
 80118da:	d10d      	bne.n	80118f8 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80118dc:	697b      	ldr	r3, [r7, #20]
 80118de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80118e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80118e4:	683b      	ldr	r3, [r7, #0]
 80118e6:	68db      	ldr	r3, [r3, #12]
 80118e8:	031b      	lsls	r3, r3, #12
 80118ea:	697a      	ldr	r2, [r7, #20]
 80118ec:	4313      	orrs	r3, r2
 80118ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80118f0:	697b      	ldr	r3, [r7, #20]
 80118f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80118f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	4a27      	ldr	r2, [pc, #156]	; (8011998 <TIM_OC4_SetConfig+0x138>)
 80118fc:	4293      	cmp	r3, r2
 80118fe:	d023      	beq.n	8011948 <TIM_OC4_SetConfig+0xe8>
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	4a26      	ldr	r2, [pc, #152]	; (801199c <TIM_OC4_SetConfig+0x13c>)
 8011904:	4293      	cmp	r3, r2
 8011906:	d01f      	beq.n	8011948 <TIM_OC4_SetConfig+0xe8>
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	4a25      	ldr	r2, [pc, #148]	; (80119a0 <TIM_OC4_SetConfig+0x140>)
 801190c:	4293      	cmp	r3, r2
 801190e:	d01b      	beq.n	8011948 <TIM_OC4_SetConfig+0xe8>
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	4a24      	ldr	r2, [pc, #144]	; (80119a4 <TIM_OC4_SetConfig+0x144>)
 8011914:	4293      	cmp	r3, r2
 8011916:	d017      	beq.n	8011948 <TIM_OC4_SetConfig+0xe8>
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	4a23      	ldr	r2, [pc, #140]	; (80119a8 <TIM_OC4_SetConfig+0x148>)
 801191c:	4293      	cmp	r3, r2
 801191e:	d013      	beq.n	8011948 <TIM_OC4_SetConfig+0xe8>
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	4a22      	ldr	r2, [pc, #136]	; (80119ac <TIM_OC4_SetConfig+0x14c>)
 8011924:	4293      	cmp	r3, r2
 8011926:	d00f      	beq.n	8011948 <TIM_OC4_SetConfig+0xe8>
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	4a21      	ldr	r2, [pc, #132]	; (80119b0 <TIM_OC4_SetConfig+0x150>)
 801192c:	4293      	cmp	r3, r2
 801192e:	d00b      	beq.n	8011948 <TIM_OC4_SetConfig+0xe8>
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	4a20      	ldr	r2, [pc, #128]	; (80119b4 <TIM_OC4_SetConfig+0x154>)
 8011934:	4293      	cmp	r3, r2
 8011936:	d007      	beq.n	8011948 <TIM_OC4_SetConfig+0xe8>
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	4a1f      	ldr	r2, [pc, #124]	; (80119b8 <TIM_OC4_SetConfig+0x158>)
 801193c:	4293      	cmp	r3, r2
 801193e:	d003      	beq.n	8011948 <TIM_OC4_SetConfig+0xe8>
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	4a1e      	ldr	r2, [pc, #120]	; (80119bc <TIM_OC4_SetConfig+0x15c>)
 8011944:	4293      	cmp	r3, r2
 8011946:	d113      	bne.n	8011970 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011948:	693b      	ldr	r3, [r7, #16]
 801194a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801194e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8011950:	693b      	ldr	r3, [r7, #16]
 8011952:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8011956:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011958:	683b      	ldr	r3, [r7, #0]
 801195a:	695b      	ldr	r3, [r3, #20]
 801195c:	019b      	lsls	r3, r3, #6
 801195e:	693a      	ldr	r2, [r7, #16]
 8011960:	4313      	orrs	r3, r2
 8011962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8011964:	683b      	ldr	r3, [r7, #0]
 8011966:	699b      	ldr	r3, [r3, #24]
 8011968:	019b      	lsls	r3, r3, #6
 801196a:	693a      	ldr	r2, [r7, #16]
 801196c:	4313      	orrs	r3, r2
 801196e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	693a      	ldr	r2, [r7, #16]
 8011974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	68fa      	ldr	r2, [r7, #12]
 801197a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801197c:	683b      	ldr	r3, [r7, #0]
 801197e:	685a      	ldr	r2, [r3, #4]
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	697a      	ldr	r2, [r7, #20]
 8011988:	621a      	str	r2, [r3, #32]
}
 801198a:	bf00      	nop
 801198c:	371c      	adds	r7, #28
 801198e:	46bd      	mov	sp, r7
 8011990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011994:	4770      	bx	lr
 8011996:	bf00      	nop
 8011998:	40012c00 	.word	0x40012c00
 801199c:	50012c00 	.word	0x50012c00
 80119a0:	40013400 	.word	0x40013400
 80119a4:	50013400 	.word	0x50013400
 80119a8:	40014000 	.word	0x40014000
 80119ac:	50014000 	.word	0x50014000
 80119b0:	40014400 	.word	0x40014400
 80119b4:	50014400 	.word	0x50014400
 80119b8:	40014800 	.word	0x40014800
 80119bc:	50014800 	.word	0x50014800

080119c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80119c0:	b480      	push	{r7}
 80119c2:	b087      	sub	sp, #28
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	6078      	str	r0, [r7, #4]
 80119c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	6a1b      	ldr	r3, [r3, #32]
 80119ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	6a1b      	ldr	r3, [r3, #32]
 80119d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	685b      	ldr	r3, [r3, #4]
 80119e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80119e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80119ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80119f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80119f4:	683b      	ldr	r3, [r7, #0]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	68fa      	ldr	r2, [r7, #12]
 80119fa:	4313      	orrs	r3, r2
 80119fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80119fe:	693b      	ldr	r3, [r7, #16]
 8011a00:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8011a04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011a06:	683b      	ldr	r3, [r7, #0]
 8011a08:	689b      	ldr	r3, [r3, #8]
 8011a0a:	041b      	lsls	r3, r3, #16
 8011a0c:	693a      	ldr	r2, [r7, #16]
 8011a0e:	4313      	orrs	r3, r2
 8011a10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	4a21      	ldr	r2, [pc, #132]	; (8011a9c <TIM_OC5_SetConfig+0xdc>)
 8011a16:	4293      	cmp	r3, r2
 8011a18:	d023      	beq.n	8011a62 <TIM_OC5_SetConfig+0xa2>
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	4a20      	ldr	r2, [pc, #128]	; (8011aa0 <TIM_OC5_SetConfig+0xe0>)
 8011a1e:	4293      	cmp	r3, r2
 8011a20:	d01f      	beq.n	8011a62 <TIM_OC5_SetConfig+0xa2>
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	4a1f      	ldr	r2, [pc, #124]	; (8011aa4 <TIM_OC5_SetConfig+0xe4>)
 8011a26:	4293      	cmp	r3, r2
 8011a28:	d01b      	beq.n	8011a62 <TIM_OC5_SetConfig+0xa2>
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	4a1e      	ldr	r2, [pc, #120]	; (8011aa8 <TIM_OC5_SetConfig+0xe8>)
 8011a2e:	4293      	cmp	r3, r2
 8011a30:	d017      	beq.n	8011a62 <TIM_OC5_SetConfig+0xa2>
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	4a1d      	ldr	r2, [pc, #116]	; (8011aac <TIM_OC5_SetConfig+0xec>)
 8011a36:	4293      	cmp	r3, r2
 8011a38:	d013      	beq.n	8011a62 <TIM_OC5_SetConfig+0xa2>
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	4a1c      	ldr	r2, [pc, #112]	; (8011ab0 <TIM_OC5_SetConfig+0xf0>)
 8011a3e:	4293      	cmp	r3, r2
 8011a40:	d00f      	beq.n	8011a62 <TIM_OC5_SetConfig+0xa2>
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	4a1b      	ldr	r2, [pc, #108]	; (8011ab4 <TIM_OC5_SetConfig+0xf4>)
 8011a46:	4293      	cmp	r3, r2
 8011a48:	d00b      	beq.n	8011a62 <TIM_OC5_SetConfig+0xa2>
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	4a1a      	ldr	r2, [pc, #104]	; (8011ab8 <TIM_OC5_SetConfig+0xf8>)
 8011a4e:	4293      	cmp	r3, r2
 8011a50:	d007      	beq.n	8011a62 <TIM_OC5_SetConfig+0xa2>
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	4a19      	ldr	r2, [pc, #100]	; (8011abc <TIM_OC5_SetConfig+0xfc>)
 8011a56:	4293      	cmp	r3, r2
 8011a58:	d003      	beq.n	8011a62 <TIM_OC5_SetConfig+0xa2>
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	4a18      	ldr	r2, [pc, #96]	; (8011ac0 <TIM_OC5_SetConfig+0x100>)
 8011a5e:	4293      	cmp	r3, r2
 8011a60:	d109      	bne.n	8011a76 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011a62:	697b      	ldr	r3, [r7, #20]
 8011a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011a68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8011a6a:	683b      	ldr	r3, [r7, #0]
 8011a6c:	695b      	ldr	r3, [r3, #20]
 8011a6e:	021b      	lsls	r3, r3, #8
 8011a70:	697a      	ldr	r2, [r7, #20]
 8011a72:	4313      	orrs	r3, r2
 8011a74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	697a      	ldr	r2, [r7, #20]
 8011a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	68fa      	ldr	r2, [r7, #12]
 8011a80:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011a82:	683b      	ldr	r3, [r7, #0]
 8011a84:	685a      	ldr	r2, [r3, #4]
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	693a      	ldr	r2, [r7, #16]
 8011a8e:	621a      	str	r2, [r3, #32]
}
 8011a90:	bf00      	nop
 8011a92:	371c      	adds	r7, #28
 8011a94:	46bd      	mov	sp, r7
 8011a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a9a:	4770      	bx	lr
 8011a9c:	40012c00 	.word	0x40012c00
 8011aa0:	50012c00 	.word	0x50012c00
 8011aa4:	40013400 	.word	0x40013400
 8011aa8:	50013400 	.word	0x50013400
 8011aac:	40014000 	.word	0x40014000
 8011ab0:	50014000 	.word	0x50014000
 8011ab4:	40014400 	.word	0x40014400
 8011ab8:	50014400 	.word	0x50014400
 8011abc:	40014800 	.word	0x40014800
 8011ac0:	50014800 	.word	0x50014800

08011ac4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011ac4:	b480      	push	{r7}
 8011ac6:	b087      	sub	sp, #28
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	6078      	str	r0, [r7, #4]
 8011acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	6a1b      	ldr	r3, [r3, #32]
 8011ad2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	6a1b      	ldr	r3, [r3, #32]
 8011ad8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	685b      	ldr	r3, [r3, #4]
 8011ae4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011af6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011af8:	683b      	ldr	r3, [r7, #0]
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	021b      	lsls	r3, r3, #8
 8011afe:	68fa      	ldr	r2, [r7, #12]
 8011b00:	4313      	orrs	r3, r2
 8011b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011b04:	693b      	ldr	r3, [r7, #16]
 8011b06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011b0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	689b      	ldr	r3, [r3, #8]
 8011b10:	051b      	lsls	r3, r3, #20
 8011b12:	693a      	ldr	r2, [r7, #16]
 8011b14:	4313      	orrs	r3, r2
 8011b16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	4a22      	ldr	r2, [pc, #136]	; (8011ba4 <TIM_OC6_SetConfig+0xe0>)
 8011b1c:	4293      	cmp	r3, r2
 8011b1e:	d023      	beq.n	8011b68 <TIM_OC6_SetConfig+0xa4>
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	4a21      	ldr	r2, [pc, #132]	; (8011ba8 <TIM_OC6_SetConfig+0xe4>)
 8011b24:	4293      	cmp	r3, r2
 8011b26:	d01f      	beq.n	8011b68 <TIM_OC6_SetConfig+0xa4>
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	4a20      	ldr	r2, [pc, #128]	; (8011bac <TIM_OC6_SetConfig+0xe8>)
 8011b2c:	4293      	cmp	r3, r2
 8011b2e:	d01b      	beq.n	8011b68 <TIM_OC6_SetConfig+0xa4>
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	4a1f      	ldr	r2, [pc, #124]	; (8011bb0 <TIM_OC6_SetConfig+0xec>)
 8011b34:	4293      	cmp	r3, r2
 8011b36:	d017      	beq.n	8011b68 <TIM_OC6_SetConfig+0xa4>
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	4a1e      	ldr	r2, [pc, #120]	; (8011bb4 <TIM_OC6_SetConfig+0xf0>)
 8011b3c:	4293      	cmp	r3, r2
 8011b3e:	d013      	beq.n	8011b68 <TIM_OC6_SetConfig+0xa4>
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	4a1d      	ldr	r2, [pc, #116]	; (8011bb8 <TIM_OC6_SetConfig+0xf4>)
 8011b44:	4293      	cmp	r3, r2
 8011b46:	d00f      	beq.n	8011b68 <TIM_OC6_SetConfig+0xa4>
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	4a1c      	ldr	r2, [pc, #112]	; (8011bbc <TIM_OC6_SetConfig+0xf8>)
 8011b4c:	4293      	cmp	r3, r2
 8011b4e:	d00b      	beq.n	8011b68 <TIM_OC6_SetConfig+0xa4>
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	4a1b      	ldr	r2, [pc, #108]	; (8011bc0 <TIM_OC6_SetConfig+0xfc>)
 8011b54:	4293      	cmp	r3, r2
 8011b56:	d007      	beq.n	8011b68 <TIM_OC6_SetConfig+0xa4>
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	4a1a      	ldr	r2, [pc, #104]	; (8011bc4 <TIM_OC6_SetConfig+0x100>)
 8011b5c:	4293      	cmp	r3, r2
 8011b5e:	d003      	beq.n	8011b68 <TIM_OC6_SetConfig+0xa4>
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	4a19      	ldr	r2, [pc, #100]	; (8011bc8 <TIM_OC6_SetConfig+0x104>)
 8011b64:	4293      	cmp	r3, r2
 8011b66:	d109      	bne.n	8011b7c <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011b68:	697b      	ldr	r3, [r7, #20]
 8011b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011b6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011b70:	683b      	ldr	r3, [r7, #0]
 8011b72:	695b      	ldr	r3, [r3, #20]
 8011b74:	029b      	lsls	r3, r3, #10
 8011b76:	697a      	ldr	r2, [r7, #20]
 8011b78:	4313      	orrs	r3, r2
 8011b7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	697a      	ldr	r2, [r7, #20]
 8011b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	68fa      	ldr	r2, [r7, #12]
 8011b86:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011b88:	683b      	ldr	r3, [r7, #0]
 8011b8a:	685a      	ldr	r2, [r3, #4]
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	693a      	ldr	r2, [r7, #16]
 8011b94:	621a      	str	r2, [r3, #32]
}
 8011b96:	bf00      	nop
 8011b98:	371c      	adds	r7, #28
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba0:	4770      	bx	lr
 8011ba2:	bf00      	nop
 8011ba4:	40012c00 	.word	0x40012c00
 8011ba8:	50012c00 	.word	0x50012c00
 8011bac:	40013400 	.word	0x40013400
 8011bb0:	50013400 	.word	0x50013400
 8011bb4:	40014000 	.word	0x40014000
 8011bb8:	50014000 	.word	0x50014000
 8011bbc:	40014400 	.word	0x40014400
 8011bc0:	50014400 	.word	0x50014400
 8011bc4:	40014800 	.word	0x40014800
 8011bc8:	50014800 	.word	0x50014800

08011bcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011bcc:	b480      	push	{r7}
 8011bce:	b087      	sub	sp, #28
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	60f8      	str	r0, [r7, #12]
 8011bd4:	60b9      	str	r1, [r7, #8]
 8011bd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	6a1b      	ldr	r3, [r3, #32]
 8011bdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	6a1b      	ldr	r3, [r3, #32]
 8011be2:	f023 0201 	bic.w	r2, r3, #1
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	699b      	ldr	r3, [r3, #24]
 8011bee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011bf0:	693b      	ldr	r3, [r7, #16]
 8011bf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011bf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	011b      	lsls	r3, r3, #4
 8011bfc:	693a      	ldr	r2, [r7, #16]
 8011bfe:	4313      	orrs	r3, r2
 8011c00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011c02:	697b      	ldr	r3, [r7, #20]
 8011c04:	f023 030a 	bic.w	r3, r3, #10
 8011c08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011c0a:	697a      	ldr	r2, [r7, #20]
 8011c0c:	68bb      	ldr	r3, [r7, #8]
 8011c0e:	4313      	orrs	r3, r2
 8011c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	693a      	ldr	r2, [r7, #16]
 8011c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	697a      	ldr	r2, [r7, #20]
 8011c1c:	621a      	str	r2, [r3, #32]
}
 8011c1e:	bf00      	nop
 8011c20:	371c      	adds	r7, #28
 8011c22:	46bd      	mov	sp, r7
 8011c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c28:	4770      	bx	lr

08011c2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011c2a:	b480      	push	{r7}
 8011c2c:	b087      	sub	sp, #28
 8011c2e:	af00      	add	r7, sp, #0
 8011c30:	60f8      	str	r0, [r7, #12]
 8011c32:	60b9      	str	r1, [r7, #8]
 8011c34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	6a1b      	ldr	r3, [r3, #32]
 8011c3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	6a1b      	ldr	r3, [r3, #32]
 8011c40:	f023 0210 	bic.w	r2, r3, #16
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	699b      	ldr	r3, [r3, #24]
 8011c4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011c4e:	693b      	ldr	r3, [r7, #16]
 8011c50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011c54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	031b      	lsls	r3, r3, #12
 8011c5a:	693a      	ldr	r2, [r7, #16]
 8011c5c:	4313      	orrs	r3, r2
 8011c5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011c60:	697b      	ldr	r3, [r7, #20]
 8011c62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8011c66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011c68:	68bb      	ldr	r3, [r7, #8]
 8011c6a:	011b      	lsls	r3, r3, #4
 8011c6c:	697a      	ldr	r2, [r7, #20]
 8011c6e:	4313      	orrs	r3, r2
 8011c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	693a      	ldr	r2, [r7, #16]
 8011c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	697a      	ldr	r2, [r7, #20]
 8011c7c:	621a      	str	r2, [r3, #32]
}
 8011c7e:	bf00      	nop
 8011c80:	371c      	adds	r7, #28
 8011c82:	46bd      	mov	sp, r7
 8011c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c88:	4770      	bx	lr

08011c8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011c8a:	b480      	push	{r7}
 8011c8c:	b085      	sub	sp, #20
 8011c8e:	af00      	add	r7, sp, #0
 8011c90:	6078      	str	r0, [r7, #4]
 8011c92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	689b      	ldr	r3, [r3, #8]
 8011c98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8011ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011ca4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011ca6:	683a      	ldr	r2, [r7, #0]
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	4313      	orrs	r3, r2
 8011cac:	f043 0307 	orr.w	r3, r3, #7
 8011cb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	68fa      	ldr	r2, [r7, #12]
 8011cb6:	609a      	str	r2, [r3, #8]
}
 8011cb8:	bf00      	nop
 8011cba:	3714      	adds	r7, #20
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc2:	4770      	bx	lr

08011cc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011cc4:	b480      	push	{r7}
 8011cc6:	b087      	sub	sp, #28
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	60f8      	str	r0, [r7, #12]
 8011ccc:	60b9      	str	r1, [r7, #8]
 8011cce:	607a      	str	r2, [r7, #4]
 8011cd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	689b      	ldr	r3, [r3, #8]
 8011cd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011cd8:	697b      	ldr	r3, [r7, #20]
 8011cda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011cde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011ce0:	683b      	ldr	r3, [r7, #0]
 8011ce2:	021a      	lsls	r2, r3, #8
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	431a      	orrs	r2, r3
 8011ce8:	68bb      	ldr	r3, [r7, #8]
 8011cea:	4313      	orrs	r3, r2
 8011cec:	697a      	ldr	r2, [r7, #20]
 8011cee:	4313      	orrs	r3, r2
 8011cf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	697a      	ldr	r2, [r7, #20]
 8011cf6:	609a      	str	r2, [r3, #8]
}
 8011cf8:	bf00      	nop
 8011cfa:	371c      	adds	r7, #28
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d02:	4770      	bx	lr

08011d04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011d04:	b480      	push	{r7}
 8011d06:	b087      	sub	sp, #28
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	60f8      	str	r0, [r7, #12]
 8011d0c:	60b9      	str	r1, [r7, #8]
 8011d0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011d10:	68bb      	ldr	r3, [r7, #8]
 8011d12:	f003 031f 	and.w	r3, r3, #31
 8011d16:	2201      	movs	r2, #1
 8011d18:	fa02 f303 	lsl.w	r3, r2, r3
 8011d1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	6a1a      	ldr	r2, [r3, #32]
 8011d22:	697b      	ldr	r3, [r7, #20]
 8011d24:	43db      	mvns	r3, r3
 8011d26:	401a      	ands	r2, r3
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	6a1a      	ldr	r2, [r3, #32]
 8011d30:	68bb      	ldr	r3, [r7, #8]
 8011d32:	f003 031f 	and.w	r3, r3, #31
 8011d36:	6879      	ldr	r1, [r7, #4]
 8011d38:	fa01 f303 	lsl.w	r3, r1, r3
 8011d3c:	431a      	orrs	r2, r3
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	621a      	str	r2, [r3, #32]
}
 8011d42:	bf00      	nop
 8011d44:	371c      	adds	r7, #28
 8011d46:	46bd      	mov	sp, r7
 8011d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d4c:	4770      	bx	lr
	...

08011d50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011d50:	b480      	push	{r7}
 8011d52:	b085      	sub	sp, #20
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	6078      	str	r0, [r7, #4]
 8011d58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011d60:	2b01      	cmp	r3, #1
 8011d62:	d101      	bne.n	8011d68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011d64:	2302      	movs	r3, #2
 8011d66:	e097      	b.n	8011e98 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	2201      	movs	r2, #1
 8011d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	2202      	movs	r2, #2
 8011d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	685b      	ldr	r3, [r3, #4]
 8011d7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	689b      	ldr	r3, [r3, #8]
 8011d86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	4a45      	ldr	r2, [pc, #276]	; (8011ea4 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8011d8e:	4293      	cmp	r3, r2
 8011d90:	d00e      	beq.n	8011db0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	4a44      	ldr	r2, [pc, #272]	; (8011ea8 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8011d98:	4293      	cmp	r3, r2
 8011d9a:	d009      	beq.n	8011db0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	4a42      	ldr	r2, [pc, #264]	; (8011eac <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8011da2:	4293      	cmp	r3, r2
 8011da4:	d004      	beq.n	8011db0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	4a41      	ldr	r2, [pc, #260]	; (8011eb0 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8011dac:	4293      	cmp	r3, r2
 8011dae:	d108      	bne.n	8011dc2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8011db6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011db8:	683b      	ldr	r3, [r7, #0]
 8011dba:	685b      	ldr	r3, [r3, #4]
 8011dbc:	68fa      	ldr	r2, [r7, #12]
 8011dbe:	4313      	orrs	r3, r2
 8011dc0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8011dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011dcc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011dce:	683b      	ldr	r3, [r7, #0]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	68fa      	ldr	r2, [r7, #12]
 8011dd4:	4313      	orrs	r3, r2
 8011dd6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	68fa      	ldr	r2, [r7, #12]
 8011dde:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	4a2f      	ldr	r2, [pc, #188]	; (8011ea4 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8011de6:	4293      	cmp	r3, r2
 8011de8:	d040      	beq.n	8011e6c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	4a2e      	ldr	r2, [pc, #184]	; (8011ea8 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8011df0:	4293      	cmp	r3, r2
 8011df2:	d03b      	beq.n	8011e6c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011dfc:	d036      	beq.n	8011e6c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011e06:	d031      	beq.n	8011e6c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	4a29      	ldr	r2, [pc, #164]	; (8011eb4 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8011e0e:	4293      	cmp	r3, r2
 8011e10:	d02c      	beq.n	8011e6c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	4a28      	ldr	r2, [pc, #160]	; (8011eb8 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8011e18:	4293      	cmp	r3, r2
 8011e1a:	d027      	beq.n	8011e6c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	4a26      	ldr	r2, [pc, #152]	; (8011ebc <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8011e22:	4293      	cmp	r3, r2
 8011e24:	d022      	beq.n	8011e6c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	4a25      	ldr	r2, [pc, #148]	; (8011ec0 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8011e2c:	4293      	cmp	r3, r2
 8011e2e:	d01d      	beq.n	8011e6c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	4a23      	ldr	r2, [pc, #140]	; (8011ec4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8011e36:	4293      	cmp	r3, r2
 8011e38:	d018      	beq.n	8011e6c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	4a22      	ldr	r2, [pc, #136]	; (8011ec8 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8011e40:	4293      	cmp	r3, r2
 8011e42:	d013      	beq.n	8011e6c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	4a18      	ldr	r2, [pc, #96]	; (8011eac <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8011e4a:	4293      	cmp	r3, r2
 8011e4c:	d00e      	beq.n	8011e6c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	4a17      	ldr	r2, [pc, #92]	; (8011eb0 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8011e54:	4293      	cmp	r3, r2
 8011e56:	d009      	beq.n	8011e6c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	4a1b      	ldr	r2, [pc, #108]	; (8011ecc <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8011e5e:	4293      	cmp	r3, r2
 8011e60:	d004      	beq.n	8011e6c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	4a1a      	ldr	r2, [pc, #104]	; (8011ed0 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8011e68:	4293      	cmp	r3, r2
 8011e6a:	d10c      	bne.n	8011e86 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011e6c:	68bb      	ldr	r3, [r7, #8]
 8011e6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011e72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011e74:	683b      	ldr	r3, [r7, #0]
 8011e76:	689b      	ldr	r3, [r3, #8]
 8011e78:	68ba      	ldr	r2, [r7, #8]
 8011e7a:	4313      	orrs	r3, r2
 8011e7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	68ba      	ldr	r2, [r7, #8]
 8011e84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	2201      	movs	r2, #1
 8011e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	2200      	movs	r2, #0
 8011e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011e96:	2300      	movs	r3, #0
}
 8011e98:	4618      	mov	r0, r3
 8011e9a:	3714      	adds	r7, #20
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea2:	4770      	bx	lr
 8011ea4:	40012c00 	.word	0x40012c00
 8011ea8:	50012c00 	.word	0x50012c00
 8011eac:	40013400 	.word	0x40013400
 8011eb0:	50013400 	.word	0x50013400
 8011eb4:	40000400 	.word	0x40000400
 8011eb8:	50000400 	.word	0x50000400
 8011ebc:	40000800 	.word	0x40000800
 8011ec0:	50000800 	.word	0x50000800
 8011ec4:	40000c00 	.word	0x40000c00
 8011ec8:	50000c00 	.word	0x50000c00
 8011ecc:	40014000 	.word	0x40014000
 8011ed0:	50014000 	.word	0x50014000

08011ed4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8011ed4:	b480      	push	{r7}
 8011ed6:	b085      	sub	sp, #20
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
 8011edc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8011ede:	2300      	movs	r3, #0
 8011ee0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011ee8:	2b01      	cmp	r3, #1
 8011eea:	d101      	bne.n	8011ef0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8011eec:	2302      	movs	r3, #2
 8011eee:	e0a5      	b.n	801203c <HAL_TIMEx_ConfigBreakDeadTime+0x168>
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	2201      	movs	r2, #1
 8011ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011efe:	683b      	ldr	r3, [r7, #0]
 8011f00:	68db      	ldr	r3, [r3, #12]
 8011f02:	4313      	orrs	r3, r2
 8011f04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011f0c:	683b      	ldr	r3, [r7, #0]
 8011f0e:	689b      	ldr	r3, [r3, #8]
 8011f10:	4313      	orrs	r3, r2
 8011f12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8011f1a:	683b      	ldr	r3, [r7, #0]
 8011f1c:	685b      	ldr	r3, [r3, #4]
 8011f1e:	4313      	orrs	r3, r2
 8011f20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8011f28:	683b      	ldr	r3, [r7, #0]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	4313      	orrs	r3, r2
 8011f2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011f36:	683b      	ldr	r3, [r7, #0]
 8011f38:	691b      	ldr	r3, [r3, #16]
 8011f3a:	4313      	orrs	r3, r2
 8011f3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8011f44:	683b      	ldr	r3, [r7, #0]
 8011f46:	695b      	ldr	r3, [r3, #20]
 8011f48:	4313      	orrs	r3, r2
 8011f4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8011f52:	683b      	ldr	r3, [r7, #0]
 8011f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f56:	4313      	orrs	r3, r2
 8011f58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8011f60:	683b      	ldr	r3, [r7, #0]
 8011f62:	699b      	ldr	r3, [r3, #24]
 8011f64:	041b      	lsls	r3, r3, #16
 8011f66:	4313      	orrs	r3, r2
 8011f68:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	4a36      	ldr	r2, [pc, #216]	; (8012048 <HAL_TIMEx_ConfigBreakDeadTime+0x174>)
 8011f70:	4293      	cmp	r3, r2
 8011f72:	d00e      	beq.n	8011f92 <HAL_TIMEx_ConfigBreakDeadTime+0xbe>
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	4a34      	ldr	r2, [pc, #208]	; (801204c <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 8011f7a:	4293      	cmp	r3, r2
 8011f7c:	d009      	beq.n	8011f92 <HAL_TIMEx_ConfigBreakDeadTime+0xbe>
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	4a33      	ldr	r2, [pc, #204]	; (8012050 <HAL_TIMEx_ConfigBreakDeadTime+0x17c>)
 8011f84:	4293      	cmp	r3, r2
 8011f86:	d004      	beq.n	8011f92 <HAL_TIMEx_ConfigBreakDeadTime+0xbe>
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	4a31      	ldr	r2, [pc, #196]	; (8012054 <HAL_TIMEx_ConfigBreakDeadTime+0x180>)
 8011f8e:	4293      	cmp	r3, r2
 8011f90:	d106      	bne.n	8011fa0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8011f98:	683b      	ldr	r3, [r7, #0]
 8011f9a:	69db      	ldr	r3, [r3, #28]
 8011f9c:	4313      	orrs	r3, r2
 8011f9e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	4a28      	ldr	r2, [pc, #160]	; (8012048 <HAL_TIMEx_ConfigBreakDeadTime+0x174>)
 8011fa6:	4293      	cmp	r3, r2
 8011fa8:	d00e      	beq.n	8011fc8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	4a27      	ldr	r2, [pc, #156]	; (801204c <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 8011fb0:	4293      	cmp	r3, r2
 8011fb2:	d009      	beq.n	8011fc8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	4a25      	ldr	r2, [pc, #148]	; (8012050 <HAL_TIMEx_ConfigBreakDeadTime+0x17c>)
 8011fba:	4293      	cmp	r3, r2
 8011fbc:	d004      	beq.n	8011fc8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	4a24      	ldr	r2, [pc, #144]	; (8012054 <HAL_TIMEx_ConfigBreakDeadTime+0x180>)
 8011fc4:	4293      	cmp	r3, r2
 8011fc6:	d130      	bne.n	801202a <HAL_TIMEx_ConfigBreakDeadTime+0x156>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8011fce:	683b      	ldr	r3, [r7, #0]
 8011fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011fd2:	051b      	lsls	r3, r3, #20
 8011fd4:	4313      	orrs	r3, r2
 8011fd6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8011fde:	683b      	ldr	r3, [r7, #0]
 8011fe0:	6a1b      	ldr	r3, [r3, #32]
 8011fe2:	4313      	orrs	r3, r2
 8011fe4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8011fec:	683b      	ldr	r3, [r7, #0]
 8011fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ff0:	4313      	orrs	r3, r2
 8011ff2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	4a13      	ldr	r2, [pc, #76]	; (8012048 <HAL_TIMEx_ConfigBreakDeadTime+0x174>)
 8011ffa:	4293      	cmp	r3, r2
 8011ffc:	d00e      	beq.n	801201c <HAL_TIMEx_ConfigBreakDeadTime+0x148>
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	4a12      	ldr	r2, [pc, #72]	; (801204c <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 8012004:	4293      	cmp	r3, r2
 8012006:	d009      	beq.n	801201c <HAL_TIMEx_ConfigBreakDeadTime+0x148>
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	4a10      	ldr	r2, [pc, #64]	; (8012050 <HAL_TIMEx_ConfigBreakDeadTime+0x17c>)
 801200e:	4293      	cmp	r3, r2
 8012010:	d004      	beq.n	801201c <HAL_TIMEx_ConfigBreakDeadTime+0x148>
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	4a0f      	ldr	r2, [pc, #60]	; (8012054 <HAL_TIMEx_ConfigBreakDeadTime+0x180>)
 8012018:	4293      	cmp	r3, r2
 801201a:	d106      	bne.n	801202a <HAL_TIMEx_ConfigBreakDeadTime+0x156>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8012022:	683b      	ldr	r3, [r7, #0]
 8012024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012026:	4313      	orrs	r3, r2
 8012028:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	68fa      	ldr	r2, [r7, #12]
 8012030:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	2200      	movs	r2, #0
 8012036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801203a:	2300      	movs	r3, #0
}
 801203c:	4618      	mov	r0, r3
 801203e:	3714      	adds	r7, #20
 8012040:	46bd      	mov	sp, r7
 8012042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012046:	4770      	bx	lr
 8012048:	40012c00 	.word	0x40012c00
 801204c:	50012c00 	.word	0x50012c00
 8012050:	40013400 	.word	0x40013400
 8012054:	50013400 	.word	0x50013400

08012058 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012058:	b480      	push	{r7}
 801205a:	b083      	sub	sp, #12
 801205c:	af00      	add	r7, sp, #0
 801205e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012060:	bf00      	nop
 8012062:	370c      	adds	r7, #12
 8012064:	46bd      	mov	sp, r7
 8012066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206a:	4770      	bx	lr

0801206c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801206c:	b480      	push	{r7}
 801206e:	b083      	sub	sp, #12
 8012070:	af00      	add	r7, sp, #0
 8012072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012074:	bf00      	nop
 8012076:	370c      	adds	r7, #12
 8012078:	46bd      	mov	sp, r7
 801207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801207e:	4770      	bx	lr

08012080 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8012080:	b480      	push	{r7}
 8012082:	b083      	sub	sp, #12
 8012084:	af00      	add	r7, sp, #0
 8012086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8012088:	bf00      	nop
 801208a:	370c      	adds	r7, #12
 801208c:	46bd      	mov	sp, r7
 801208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012092:	4770      	bx	lr

08012094 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8012094:	b480      	push	{r7}
 8012096:	b083      	sub	sp, #12
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 801209c:	bf00      	nop
 801209e:	370c      	adds	r7, #12
 80120a0:	46bd      	mov	sp, r7
 80120a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a6:	4770      	bx	lr

080120a8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80120a8:	b480      	push	{r7}
 80120aa:	b083      	sub	sp, #12
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80120b0:	bf00      	nop
 80120b2:	370c      	adds	r7, #12
 80120b4:	46bd      	mov	sp, r7
 80120b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ba:	4770      	bx	lr

080120bc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80120bc:	b480      	push	{r7}
 80120be:	b083      	sub	sp, #12
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80120c4:	bf00      	nop
 80120c6:	370c      	adds	r7, #12
 80120c8:	46bd      	mov	sp, r7
 80120ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ce:	4770      	bx	lr

080120d0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80120d0:	b480      	push	{r7}
 80120d2:	b083      	sub	sp, #12
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80120d8:	bf00      	nop
 80120da:	370c      	adds	r7, #12
 80120dc:	46bd      	mov	sp, r7
 80120de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e2:	4770      	bx	lr

080120e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b082      	sub	sp, #8
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d101      	bne.n	80120f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80120f2:	2301      	movs	r3, #1
 80120f4:	e042      	b.n	801217c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d106      	bne.n	801210e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	2200      	movs	r2, #0
 8012104:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012108:	6878      	ldr	r0, [r7, #4]
 801210a:	f7ef fda7 	bl	8001c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	2224      	movs	r2, #36	; 0x24
 8012112:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	681a      	ldr	r2, [r3, #0]
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	f022 0201 	bic.w	r2, r2, #1
 8012124:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012126:	6878      	ldr	r0, [r7, #4]
 8012128:	f000 f8ba 	bl	80122a0 <UART_SetConfig>
 801212c:	4603      	mov	r3, r0
 801212e:	2b01      	cmp	r3, #1
 8012130:	d101      	bne.n	8012136 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8012132:	2301      	movs	r3, #1
 8012134:	e022      	b.n	801217c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801213a:	2b00      	cmp	r3, #0
 801213c:	d002      	beq.n	8012144 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801213e:	6878      	ldr	r0, [r7, #4]
 8012140:	f000 fa5c 	bl	80125fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	685a      	ldr	r2, [r3, #4]
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012152:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	689a      	ldr	r2, [r3, #8]
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012162:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	681a      	ldr	r2, [r3, #0]
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	f042 0201 	orr.w	r2, r2, #1
 8012172:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012174:	6878      	ldr	r0, [r7, #4]
 8012176:	f000 fae3 	bl	8012740 <UART_CheckIdleState>
 801217a:	4603      	mov	r3, r0
}
 801217c:	4618      	mov	r0, r3
 801217e:	3708      	adds	r7, #8
 8012180:	46bd      	mov	sp, r7
 8012182:	bd80      	pop	{r7, pc}

08012184 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012184:	b580      	push	{r7, lr}
 8012186:	b08a      	sub	sp, #40	; 0x28
 8012188:	af02      	add	r7, sp, #8
 801218a:	60f8      	str	r0, [r7, #12]
 801218c:	60b9      	str	r1, [r7, #8]
 801218e:	603b      	str	r3, [r7, #0]
 8012190:	4613      	mov	r3, r2
 8012192:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801219a:	2b20      	cmp	r3, #32
 801219c:	d17b      	bne.n	8012296 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801219e:	68bb      	ldr	r3, [r7, #8]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d002      	beq.n	80121aa <HAL_UART_Transmit+0x26>
 80121a4:	88fb      	ldrh	r3, [r7, #6]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d101      	bne.n	80121ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80121aa:	2301      	movs	r3, #1
 80121ac:	e074      	b.n	8012298 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	2200      	movs	r2, #0
 80121b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	2221      	movs	r2, #33	; 0x21
 80121ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80121be:	f7f5 fb3d 	bl	800783c <HAL_GetTick>
 80121c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	88fa      	ldrh	r2, [r7, #6]
 80121c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	88fa      	ldrh	r2, [r7, #6]
 80121d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	689b      	ldr	r3, [r3, #8]
 80121d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80121dc:	d108      	bne.n	80121f0 <HAL_UART_Transmit+0x6c>
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	691b      	ldr	r3, [r3, #16]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d104      	bne.n	80121f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80121e6:	2300      	movs	r3, #0
 80121e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80121ea:	68bb      	ldr	r3, [r7, #8]
 80121ec:	61bb      	str	r3, [r7, #24]
 80121ee:	e003      	b.n	80121f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80121f0:	68bb      	ldr	r3, [r7, #8]
 80121f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80121f4:	2300      	movs	r3, #0
 80121f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80121f8:	e030      	b.n	801225c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80121fa:	683b      	ldr	r3, [r7, #0]
 80121fc:	9300      	str	r3, [sp, #0]
 80121fe:	697b      	ldr	r3, [r7, #20]
 8012200:	2200      	movs	r2, #0
 8012202:	2180      	movs	r1, #128	; 0x80
 8012204:	68f8      	ldr	r0, [r7, #12]
 8012206:	f000 fb45 	bl	8012894 <UART_WaitOnFlagUntilTimeout>
 801220a:	4603      	mov	r3, r0
 801220c:	2b00      	cmp	r3, #0
 801220e:	d005      	beq.n	801221c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	2220      	movs	r2, #32
 8012214:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8012218:	2303      	movs	r3, #3
 801221a:	e03d      	b.n	8012298 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 801221c:	69fb      	ldr	r3, [r7, #28]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d10b      	bne.n	801223a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8012222:	69bb      	ldr	r3, [r7, #24]
 8012224:	881b      	ldrh	r3, [r3, #0]
 8012226:	461a      	mov	r2, r3
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012230:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8012232:	69bb      	ldr	r3, [r7, #24]
 8012234:	3302      	adds	r3, #2
 8012236:	61bb      	str	r3, [r7, #24]
 8012238:	e007      	b.n	801224a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801223a:	69fb      	ldr	r3, [r7, #28]
 801223c:	781a      	ldrb	r2, [r3, #0]
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8012244:	69fb      	ldr	r3, [r7, #28]
 8012246:	3301      	adds	r3, #1
 8012248:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012250:	b29b      	uxth	r3, r3
 8012252:	3b01      	subs	r3, #1
 8012254:	b29a      	uxth	r2, r3
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012262:	b29b      	uxth	r3, r3
 8012264:	2b00      	cmp	r3, #0
 8012266:	d1c8      	bne.n	80121fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012268:	683b      	ldr	r3, [r7, #0]
 801226a:	9300      	str	r3, [sp, #0]
 801226c:	697b      	ldr	r3, [r7, #20]
 801226e:	2200      	movs	r2, #0
 8012270:	2140      	movs	r1, #64	; 0x40
 8012272:	68f8      	ldr	r0, [r7, #12]
 8012274:	f000 fb0e 	bl	8012894 <UART_WaitOnFlagUntilTimeout>
 8012278:	4603      	mov	r3, r0
 801227a:	2b00      	cmp	r3, #0
 801227c:	d005      	beq.n	801228a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	2220      	movs	r2, #32
 8012282:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8012286:	2303      	movs	r3, #3
 8012288:	e006      	b.n	8012298 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	2220      	movs	r2, #32
 801228e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8012292:	2300      	movs	r3, #0
 8012294:	e000      	b.n	8012298 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8012296:	2302      	movs	r3, #2
  }
}
 8012298:	4618      	mov	r0, r3
 801229a:	3720      	adds	r7, #32
 801229c:	46bd      	mov	sp, r7
 801229e:	bd80      	pop	{r7, pc}

080122a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80122a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80122a4:	b094      	sub	sp, #80	; 0x50
 80122a6:	af00      	add	r7, sp, #0
 80122a8:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80122aa:	2300      	movs	r3, #0
 80122ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80122b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122b2:	681a      	ldr	r2, [r3, #0]
 80122b4:	4b83      	ldr	r3, [pc, #524]	; (80124c4 <UART_SetConfig+0x224>)
 80122b6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80122b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ba:	689a      	ldr	r2, [r3, #8]
 80122bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122be:	691b      	ldr	r3, [r3, #16]
 80122c0:	431a      	orrs	r2, r3
 80122c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122c4:	695b      	ldr	r3, [r3, #20]
 80122c6:	431a      	orrs	r2, r3
 80122c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ca:	69db      	ldr	r3, [r3, #28]
 80122cc:	4313      	orrs	r3, r2
 80122ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80122d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	497c      	ldr	r1, [pc, #496]	; (80124c8 <UART_SetConfig+0x228>)
 80122d8:	4019      	ands	r1, r3
 80122da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122dc:	681a      	ldr	r2, [r3, #0]
 80122de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122e0:	430b      	orrs	r3, r1
 80122e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80122e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	685b      	ldr	r3, [r3, #4]
 80122ea:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80122ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122f0:	68d9      	ldr	r1, [r3, #12]
 80122f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122f4:	681a      	ldr	r2, [r3, #0]
 80122f6:	ea40 0301 	orr.w	r3, r0, r1
 80122fa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80122fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122fe:	699b      	ldr	r3, [r3, #24]
 8012300:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012304:	681a      	ldr	r2, [r3, #0]
 8012306:	4b6f      	ldr	r3, [pc, #444]	; (80124c4 <UART_SetConfig+0x224>)
 8012308:	429a      	cmp	r2, r3
 801230a:	d009      	beq.n	8012320 <UART_SetConfig+0x80>
 801230c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801230e:	681a      	ldr	r2, [r3, #0]
 8012310:	4b6e      	ldr	r3, [pc, #440]	; (80124cc <UART_SetConfig+0x22c>)
 8012312:	429a      	cmp	r2, r3
 8012314:	d004      	beq.n	8012320 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012318:	6a1a      	ldr	r2, [r3, #32]
 801231a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801231c:	4313      	orrs	r3, r2
 801231e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	689b      	ldr	r3, [r3, #8]
 8012326:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 801232a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 801232e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012330:	681a      	ldr	r2, [r3, #0]
 8012332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012334:	430b      	orrs	r3, r1
 8012336:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801233e:	f023 000f 	bic.w	r0, r3, #15
 8012342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012344:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8012346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012348:	681a      	ldr	r2, [r3, #0]
 801234a:	ea40 0301 	orr.w	r3, r0, r1
 801234e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012352:	681a      	ldr	r2, [r3, #0]
 8012354:	4b5e      	ldr	r3, [pc, #376]	; (80124d0 <UART_SetConfig+0x230>)
 8012356:	429a      	cmp	r2, r3
 8012358:	d102      	bne.n	8012360 <UART_SetConfig+0xc0>
 801235a:	2301      	movs	r3, #1
 801235c:	64bb      	str	r3, [r7, #72]	; 0x48
 801235e:	e032      	b.n	80123c6 <UART_SetConfig+0x126>
 8012360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012362:	681a      	ldr	r2, [r3, #0]
 8012364:	4b5b      	ldr	r3, [pc, #364]	; (80124d4 <UART_SetConfig+0x234>)
 8012366:	429a      	cmp	r2, r3
 8012368:	d102      	bne.n	8012370 <UART_SetConfig+0xd0>
 801236a:	2302      	movs	r3, #2
 801236c:	64bb      	str	r3, [r7, #72]	; 0x48
 801236e:	e02a      	b.n	80123c6 <UART_SetConfig+0x126>
 8012370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012372:	681a      	ldr	r2, [r3, #0]
 8012374:	4b58      	ldr	r3, [pc, #352]	; (80124d8 <UART_SetConfig+0x238>)
 8012376:	429a      	cmp	r2, r3
 8012378:	d102      	bne.n	8012380 <UART_SetConfig+0xe0>
 801237a:	2304      	movs	r3, #4
 801237c:	64bb      	str	r3, [r7, #72]	; 0x48
 801237e:	e022      	b.n	80123c6 <UART_SetConfig+0x126>
 8012380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012382:	681a      	ldr	r2, [r3, #0]
 8012384:	4b55      	ldr	r3, [pc, #340]	; (80124dc <UART_SetConfig+0x23c>)
 8012386:	429a      	cmp	r2, r3
 8012388:	d102      	bne.n	8012390 <UART_SetConfig+0xf0>
 801238a:	2308      	movs	r3, #8
 801238c:	64bb      	str	r3, [r7, #72]	; 0x48
 801238e:	e01a      	b.n	80123c6 <UART_SetConfig+0x126>
 8012390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012392:	681a      	ldr	r2, [r3, #0]
 8012394:	4b52      	ldr	r3, [pc, #328]	; (80124e0 <UART_SetConfig+0x240>)
 8012396:	429a      	cmp	r2, r3
 8012398:	d102      	bne.n	80123a0 <UART_SetConfig+0x100>
 801239a:	2310      	movs	r3, #16
 801239c:	64bb      	str	r3, [r7, #72]	; 0x48
 801239e:	e012      	b.n	80123c6 <UART_SetConfig+0x126>
 80123a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123a2:	681a      	ldr	r2, [r3, #0]
 80123a4:	4b4f      	ldr	r3, [pc, #316]	; (80124e4 <UART_SetConfig+0x244>)
 80123a6:	429a      	cmp	r2, r3
 80123a8:	d103      	bne.n	80123b2 <UART_SetConfig+0x112>
 80123aa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80123ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80123b0:	e009      	b.n	80123c6 <UART_SetConfig+0x126>
 80123b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123b4:	681a      	ldr	r2, [r3, #0]
 80123b6:	4b43      	ldr	r3, [pc, #268]	; (80124c4 <UART_SetConfig+0x224>)
 80123b8:	429a      	cmp	r2, r3
 80123ba:	d102      	bne.n	80123c2 <UART_SetConfig+0x122>
 80123bc:	2320      	movs	r3, #32
 80123be:	64bb      	str	r3, [r7, #72]	; 0x48
 80123c0:	e001      	b.n	80123c6 <UART_SetConfig+0x126>
 80123c2:	2300      	movs	r3, #0
 80123c4:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80123c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123c8:	681a      	ldr	r2, [r3, #0]
 80123ca:	4b3e      	ldr	r3, [pc, #248]	; (80124c4 <UART_SetConfig+0x224>)
 80123cc:	429a      	cmp	r2, r3
 80123ce:	d005      	beq.n	80123dc <UART_SetConfig+0x13c>
 80123d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123d2:	681a      	ldr	r2, [r3, #0]
 80123d4:	4b3d      	ldr	r3, [pc, #244]	; (80124cc <UART_SetConfig+0x22c>)
 80123d6:	429a      	cmp	r2, r3
 80123d8:	f040 8088 	bne.w	80124ec <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80123dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80123de:	2200      	movs	r2, #0
 80123e0:	623b      	str	r3, [r7, #32]
 80123e2:	627a      	str	r2, [r7, #36]	; 0x24
 80123e4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80123e8:	f7fc fbfe 	bl	800ebe8 <HAL_RCCEx_GetPeriphCLKFreq>
 80123ec:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80123ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	f000 80eb 	beq.w	80125cc <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80123f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123fa:	4a3b      	ldr	r2, [pc, #236]	; (80124e8 <UART_SetConfig+0x248>)
 80123fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012400:	461a      	mov	r2, r3
 8012402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012404:	fbb3 f3f2 	udiv	r3, r3, r2
 8012408:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801240a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801240c:	685a      	ldr	r2, [r3, #4]
 801240e:	4613      	mov	r3, r2
 8012410:	005b      	lsls	r3, r3, #1
 8012412:	4413      	add	r3, r2
 8012414:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012416:	429a      	cmp	r2, r3
 8012418:	d305      	bcc.n	8012426 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801241a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801241c:	685b      	ldr	r3, [r3, #4]
 801241e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012420:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012422:	429a      	cmp	r2, r3
 8012424:	d903      	bls.n	801242e <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8012426:	2301      	movs	r3, #1
 8012428:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801242c:	e048      	b.n	80124c0 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801242e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012430:	2200      	movs	r2, #0
 8012432:	61bb      	str	r3, [r7, #24]
 8012434:	61fa      	str	r2, [r7, #28]
 8012436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801243a:	4a2b      	ldr	r2, [pc, #172]	; (80124e8 <UART_SetConfig+0x248>)
 801243c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012440:	b29b      	uxth	r3, r3
 8012442:	2200      	movs	r2, #0
 8012444:	613b      	str	r3, [r7, #16]
 8012446:	617a      	str	r2, [r7, #20]
 8012448:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801244c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8012450:	f7ee f852 	bl	80004f8 <__aeabi_uldivmod>
 8012454:	4602      	mov	r2, r0
 8012456:	460b      	mov	r3, r1
 8012458:	4610      	mov	r0, r2
 801245a:	4619      	mov	r1, r3
 801245c:	f04f 0200 	mov.w	r2, #0
 8012460:	f04f 0300 	mov.w	r3, #0
 8012464:	020b      	lsls	r3, r1, #8
 8012466:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801246a:	0202      	lsls	r2, r0, #8
 801246c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801246e:	6849      	ldr	r1, [r1, #4]
 8012470:	0849      	lsrs	r1, r1, #1
 8012472:	2000      	movs	r0, #0
 8012474:	460c      	mov	r4, r1
 8012476:	4605      	mov	r5, r0
 8012478:	eb12 0804 	adds.w	r8, r2, r4
 801247c:	eb43 0905 	adc.w	r9, r3, r5
 8012480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012482:	685b      	ldr	r3, [r3, #4]
 8012484:	2200      	movs	r2, #0
 8012486:	60bb      	str	r3, [r7, #8]
 8012488:	60fa      	str	r2, [r7, #12]
 801248a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801248e:	4640      	mov	r0, r8
 8012490:	4649      	mov	r1, r9
 8012492:	f7ee f831 	bl	80004f8 <__aeabi_uldivmod>
 8012496:	4602      	mov	r2, r0
 8012498:	460b      	mov	r3, r1
 801249a:	4613      	mov	r3, r2
 801249c:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801249e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80124a4:	d308      	bcc.n	80124b8 <UART_SetConfig+0x218>
 80124a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80124ac:	d204      	bcs.n	80124b8 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 80124ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80124b4:	60da      	str	r2, [r3, #12]
 80124b6:	e003      	b.n	80124c0 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 80124b8:	2301      	movs	r3, #1
 80124ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 80124be:	e085      	b.n	80125cc <UART_SetConfig+0x32c>
 80124c0:	e084      	b.n	80125cc <UART_SetConfig+0x32c>
 80124c2:	bf00      	nop
 80124c4:	46002400 	.word	0x46002400
 80124c8:	cfff69f3 	.word	0xcfff69f3
 80124cc:	56002400 	.word	0x56002400
 80124d0:	40013800 	.word	0x40013800
 80124d4:	40004400 	.word	0x40004400
 80124d8:	40004800 	.word	0x40004800
 80124dc:	40004c00 	.word	0x40004c00
 80124e0:	40005000 	.word	0x40005000
 80124e4:	40006400 	.word	0x40006400
 80124e8:	0802b8d0 	.word	0x0802b8d0
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80124ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124ee:	69db      	ldr	r3, [r3, #28]
 80124f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80124f4:	d13c      	bne.n	8012570 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80124f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80124f8:	2200      	movs	r2, #0
 80124fa:	603b      	str	r3, [r7, #0]
 80124fc:	607a      	str	r2, [r7, #4]
 80124fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012502:	f7fc fb71 	bl	800ebe8 <HAL_RCCEx_GetPeriphCLKFreq>
 8012506:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8012508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801250a:	2b00      	cmp	r3, #0
 801250c:	d05e      	beq.n	80125cc <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801250e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012512:	4a39      	ldr	r2, [pc, #228]	; (80125f8 <UART_SetConfig+0x358>)
 8012514:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012518:	461a      	mov	r2, r3
 801251a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801251c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012520:	005a      	lsls	r2, r3, #1
 8012522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012524:	685b      	ldr	r3, [r3, #4]
 8012526:	085b      	lsrs	r3, r3, #1
 8012528:	441a      	add	r2, r3
 801252a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801252c:	685b      	ldr	r3, [r3, #4]
 801252e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012532:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012536:	2b0f      	cmp	r3, #15
 8012538:	d916      	bls.n	8012568 <UART_SetConfig+0x2c8>
 801253a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801253c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012540:	d212      	bcs.n	8012568 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012544:	b29b      	uxth	r3, r3
 8012546:	f023 030f 	bic.w	r3, r3, #15
 801254a:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801254c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801254e:	085b      	lsrs	r3, r3, #1
 8012550:	b29b      	uxth	r3, r3
 8012552:	f003 0307 	and.w	r3, r3, #7
 8012556:	b29a      	uxth	r2, r3
 8012558:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801255a:	4313      	orrs	r3, r2
 801255c:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 801255e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012564:	60da      	str	r2, [r3, #12]
 8012566:	e031      	b.n	80125cc <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8012568:	2301      	movs	r3, #1
 801256a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801256e:	e02d      	b.n	80125cc <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8012570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012572:	2200      	movs	r2, #0
 8012574:	469a      	mov	sl, r3
 8012576:	4693      	mov	fp, r2
 8012578:	4650      	mov	r0, sl
 801257a:	4659      	mov	r1, fp
 801257c:	f7fc fb34 	bl	800ebe8 <HAL_RCCEx_GetPeriphCLKFreq>
 8012580:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8012582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012584:	2b00      	cmp	r3, #0
 8012586:	d021      	beq.n	80125cc <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801258c:	4a1a      	ldr	r2, [pc, #104]	; (80125f8 <UART_SetConfig+0x358>)
 801258e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012592:	461a      	mov	r2, r3
 8012594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012596:	fbb3 f2f2 	udiv	r2, r3, r2
 801259a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801259c:	685b      	ldr	r3, [r3, #4]
 801259e:	085b      	lsrs	r3, r3, #1
 80125a0:	441a      	add	r2, r3
 80125a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125a4:	685b      	ldr	r3, [r3, #4]
 80125a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80125aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80125ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125ae:	2b0f      	cmp	r3, #15
 80125b0:	d909      	bls.n	80125c6 <UART_SetConfig+0x326>
 80125b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80125b8:	d205      	bcs.n	80125c6 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80125ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125bc:	b29a      	uxth	r2, r3
 80125be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	60da      	str	r2, [r3, #12]
 80125c4:	e002      	b.n	80125cc <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80125c6:	2301      	movs	r3, #1
 80125c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80125cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125ce:	2201      	movs	r2, #1
 80125d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80125d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125d6:	2201      	movs	r2, #1
 80125d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80125dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125de:	2200      	movs	r2, #0
 80125e0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80125e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125e4:	2200      	movs	r2, #0
 80125e6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80125e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80125ec:	4618      	mov	r0, r3
 80125ee:	3750      	adds	r7, #80	; 0x50
 80125f0:	46bd      	mov	sp, r7
 80125f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80125f6:	bf00      	nop
 80125f8:	0802b8d0 	.word	0x0802b8d0

080125fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80125fc:	b480      	push	{r7}
 80125fe:	b083      	sub	sp, #12
 8012600:	af00      	add	r7, sp, #0
 8012602:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012608:	f003 0301 	and.w	r3, r3, #1
 801260c:	2b00      	cmp	r3, #0
 801260e:	d00a      	beq.n	8012626 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	685b      	ldr	r3, [r3, #4]
 8012616:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	430a      	orrs	r2, r1
 8012624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801262a:	f003 0302 	and.w	r3, r3, #2
 801262e:	2b00      	cmp	r3, #0
 8012630:	d00a      	beq.n	8012648 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	685b      	ldr	r3, [r3, #4]
 8012638:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	430a      	orrs	r2, r1
 8012646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801264c:	f003 0304 	and.w	r3, r3, #4
 8012650:	2b00      	cmp	r3, #0
 8012652:	d00a      	beq.n	801266a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	685b      	ldr	r3, [r3, #4]
 801265a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	430a      	orrs	r2, r1
 8012668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801266e:	f003 0308 	and.w	r3, r3, #8
 8012672:	2b00      	cmp	r3, #0
 8012674:	d00a      	beq.n	801268c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	685b      	ldr	r3, [r3, #4]
 801267c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	430a      	orrs	r2, r1
 801268a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012690:	f003 0310 	and.w	r3, r3, #16
 8012694:	2b00      	cmp	r3, #0
 8012696:	d00a      	beq.n	80126ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	689b      	ldr	r3, [r3, #8]
 801269e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	430a      	orrs	r2, r1
 80126ac:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80126b2:	f003 0320 	and.w	r3, r3, #32
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d00a      	beq.n	80126d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	689b      	ldr	r3, [r3, #8]
 80126c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	430a      	orrs	r2, r1
 80126ce:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80126d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d01a      	beq.n	8012712 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	685b      	ldr	r3, [r3, #4]
 80126e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	430a      	orrs	r2, r1
 80126f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80126f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80126fa:	d10a      	bne.n	8012712 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	685b      	ldr	r3, [r3, #4]
 8012702:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	430a      	orrs	r2, r1
 8012710:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801271a:	2b00      	cmp	r3, #0
 801271c:	d00a      	beq.n	8012734 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	685b      	ldr	r3, [r3, #4]
 8012724:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	430a      	orrs	r2, r1
 8012732:	605a      	str	r2, [r3, #4]
  }
}
 8012734:	bf00      	nop
 8012736:	370c      	adds	r7, #12
 8012738:	46bd      	mov	sp, r7
 801273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801273e:	4770      	bx	lr

08012740 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012740:	b580      	push	{r7, lr}
 8012742:	b098      	sub	sp, #96	; 0x60
 8012744:	af02      	add	r7, sp, #8
 8012746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	2200      	movs	r2, #0
 801274c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012750:	f7f5 f874 	bl	800783c <HAL_GetTick>
 8012754:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	f003 0308 	and.w	r3, r3, #8
 8012760:	2b08      	cmp	r3, #8
 8012762:	d12f      	bne.n	80127c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012764:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012768:	9300      	str	r3, [sp, #0]
 801276a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801276c:	2200      	movs	r2, #0
 801276e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012772:	6878      	ldr	r0, [r7, #4]
 8012774:	f000 f88e 	bl	8012894 <UART_WaitOnFlagUntilTimeout>
 8012778:	4603      	mov	r3, r0
 801277a:	2b00      	cmp	r3, #0
 801277c:	d022      	beq.n	80127c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012786:	e853 3f00 	ldrex	r3, [r3]
 801278a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801278c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801278e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012792:	653b      	str	r3, [r7, #80]	; 0x50
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	461a      	mov	r2, r3
 801279a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801279c:	647b      	str	r3, [r7, #68]	; 0x44
 801279e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80127a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80127a4:	e841 2300 	strex	r3, r2, [r1]
 80127a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80127aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d1e6      	bne.n	801277e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	2220      	movs	r2, #32
 80127b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	2200      	movs	r2, #0
 80127bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80127c0:	2303      	movs	r3, #3
 80127c2:	e063      	b.n	801288c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	f003 0304 	and.w	r3, r3, #4
 80127ce:	2b04      	cmp	r3, #4
 80127d0:	d149      	bne.n	8012866 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80127d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80127d6:	9300      	str	r3, [sp, #0]
 80127d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80127da:	2200      	movs	r2, #0
 80127dc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80127e0:	6878      	ldr	r0, [r7, #4]
 80127e2:	f000 f857 	bl	8012894 <UART_WaitOnFlagUntilTimeout>
 80127e6:	4603      	mov	r3, r0
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d03c      	beq.n	8012866 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127f4:	e853 3f00 	ldrex	r3, [r3]
 80127f8:	623b      	str	r3, [r7, #32]
   return(result);
 80127fa:	6a3b      	ldr	r3, [r7, #32]
 80127fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012800:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	461a      	mov	r2, r3
 8012808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801280a:	633b      	str	r3, [r7, #48]	; 0x30
 801280c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801280e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012812:	e841 2300 	strex	r3, r2, [r1]
 8012816:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801281a:	2b00      	cmp	r3, #0
 801281c:	d1e6      	bne.n	80127ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	3308      	adds	r3, #8
 8012824:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012826:	693b      	ldr	r3, [r7, #16]
 8012828:	e853 3f00 	ldrex	r3, [r3]
 801282c:	60fb      	str	r3, [r7, #12]
   return(result);
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	f023 0301 	bic.w	r3, r3, #1
 8012834:	64bb      	str	r3, [r7, #72]	; 0x48
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	3308      	adds	r3, #8
 801283c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801283e:	61fa      	str	r2, [r7, #28]
 8012840:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012842:	69b9      	ldr	r1, [r7, #24]
 8012844:	69fa      	ldr	r2, [r7, #28]
 8012846:	e841 2300 	strex	r3, r2, [r1]
 801284a:	617b      	str	r3, [r7, #20]
   return(result);
 801284c:	697b      	ldr	r3, [r7, #20]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d1e5      	bne.n	801281e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	2220      	movs	r2, #32
 8012856:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	2200      	movs	r2, #0
 801285e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012862:	2303      	movs	r3, #3
 8012864:	e012      	b.n	801288c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	2220      	movs	r2, #32
 801286a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	2220      	movs	r2, #32
 8012872:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	2200      	movs	r2, #0
 801287a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	2200      	movs	r2, #0
 8012880:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	2200      	movs	r2, #0
 8012886:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801288a:	2300      	movs	r3, #0
}
 801288c:	4618      	mov	r0, r3
 801288e:	3758      	adds	r7, #88	; 0x58
 8012890:	46bd      	mov	sp, r7
 8012892:	bd80      	pop	{r7, pc}

08012894 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b084      	sub	sp, #16
 8012898:	af00      	add	r7, sp, #0
 801289a:	60f8      	str	r0, [r7, #12]
 801289c:	60b9      	str	r1, [r7, #8]
 801289e:	603b      	str	r3, [r7, #0]
 80128a0:	4613      	mov	r3, r2
 80128a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80128a4:	e049      	b.n	801293a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80128a6:	69bb      	ldr	r3, [r7, #24]
 80128a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128ac:	d045      	beq.n	801293a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80128ae:	f7f4 ffc5 	bl	800783c <HAL_GetTick>
 80128b2:	4602      	mov	r2, r0
 80128b4:	683b      	ldr	r3, [r7, #0]
 80128b6:	1ad3      	subs	r3, r2, r3
 80128b8:	69ba      	ldr	r2, [r7, #24]
 80128ba:	429a      	cmp	r2, r3
 80128bc:	d302      	bcc.n	80128c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80128be:	69bb      	ldr	r3, [r7, #24]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d101      	bne.n	80128c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80128c4:	2303      	movs	r3, #3
 80128c6:	e048      	b.n	801295a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	f003 0304 	and.w	r3, r3, #4
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d031      	beq.n	801293a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	69db      	ldr	r3, [r3, #28]
 80128dc:	f003 0308 	and.w	r3, r3, #8
 80128e0:	2b08      	cmp	r3, #8
 80128e2:	d110      	bne.n	8012906 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	2208      	movs	r2, #8
 80128ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80128ec:	68f8      	ldr	r0, [r7, #12]
 80128ee:	f000 f838 	bl	8012962 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	2208      	movs	r2, #8
 80128f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	2200      	movs	r2, #0
 80128fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8012902:	2301      	movs	r3, #1
 8012904:	e029      	b.n	801295a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	69db      	ldr	r3, [r3, #28]
 801290c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012910:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012914:	d111      	bne.n	801293a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801291e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012920:	68f8      	ldr	r0, [r7, #12]
 8012922:	f000 f81e 	bl	8012962 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	2220      	movs	r2, #32
 801292a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	2200      	movs	r2, #0
 8012932:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8012936:	2303      	movs	r3, #3
 8012938:	e00f      	b.n	801295a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	69da      	ldr	r2, [r3, #28]
 8012940:	68bb      	ldr	r3, [r7, #8]
 8012942:	4013      	ands	r3, r2
 8012944:	68ba      	ldr	r2, [r7, #8]
 8012946:	429a      	cmp	r2, r3
 8012948:	bf0c      	ite	eq
 801294a:	2301      	moveq	r3, #1
 801294c:	2300      	movne	r3, #0
 801294e:	b2db      	uxtb	r3, r3
 8012950:	461a      	mov	r2, r3
 8012952:	79fb      	ldrb	r3, [r7, #7]
 8012954:	429a      	cmp	r2, r3
 8012956:	d0a6      	beq.n	80128a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012958:	2300      	movs	r3, #0
}
 801295a:	4618      	mov	r0, r3
 801295c:	3710      	adds	r7, #16
 801295e:	46bd      	mov	sp, r7
 8012960:	bd80      	pop	{r7, pc}

08012962 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012962:	b480      	push	{r7}
 8012964:	b095      	sub	sp, #84	; 0x54
 8012966:	af00      	add	r7, sp, #0
 8012968:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012972:	e853 3f00 	ldrex	r3, [r3]
 8012976:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801297a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801297e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	461a      	mov	r2, r3
 8012986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012988:	643b      	str	r3, [r7, #64]	; 0x40
 801298a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801298c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801298e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012990:	e841 2300 	strex	r3, r2, [r1]
 8012994:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012998:	2b00      	cmp	r3, #0
 801299a:	d1e6      	bne.n	801296a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	3308      	adds	r3, #8
 80129a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129a4:	6a3b      	ldr	r3, [r7, #32]
 80129a6:	e853 3f00 	ldrex	r3, [r3]
 80129aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80129ac:	69fb      	ldr	r3, [r7, #28]
 80129ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80129b2:	f023 0301 	bic.w	r3, r3, #1
 80129b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	3308      	adds	r3, #8
 80129be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80129c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80129c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80129c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80129c8:	e841 2300 	strex	r3, r2, [r1]
 80129cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80129ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d1e3      	bne.n	801299c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129d8:	2b01      	cmp	r3, #1
 80129da:	d118      	bne.n	8012a0e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	e853 3f00 	ldrex	r3, [r3]
 80129e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80129ea:	68bb      	ldr	r3, [r7, #8]
 80129ec:	f023 0310 	bic.w	r3, r3, #16
 80129f0:	647b      	str	r3, [r7, #68]	; 0x44
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	461a      	mov	r2, r3
 80129f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80129fa:	61bb      	str	r3, [r7, #24]
 80129fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129fe:	6979      	ldr	r1, [r7, #20]
 8012a00:	69ba      	ldr	r2, [r7, #24]
 8012a02:	e841 2300 	strex	r3, r2, [r1]
 8012a06:	613b      	str	r3, [r7, #16]
   return(result);
 8012a08:	693b      	ldr	r3, [r7, #16]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d1e6      	bne.n	80129dc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	2220      	movs	r2, #32
 8012a12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	2200      	movs	r2, #0
 8012a1a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	2200      	movs	r2, #0
 8012a20:	675a      	str	r2, [r3, #116]	; 0x74
}
 8012a22:	bf00      	nop
 8012a24:	3754      	adds	r7, #84	; 0x54
 8012a26:	46bd      	mov	sp, r7
 8012a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a2c:	4770      	bx	lr

08012a2e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012a2e:	b480      	push	{r7}
 8012a30:	b085      	sub	sp, #20
 8012a32:	af00      	add	r7, sp, #0
 8012a34:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012a3c:	2b01      	cmp	r3, #1
 8012a3e:	d101      	bne.n	8012a44 <HAL_UARTEx_DisableFifoMode+0x16>
 8012a40:	2302      	movs	r3, #2
 8012a42:	e027      	b.n	8012a94 <HAL_UARTEx_DisableFifoMode+0x66>
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	2201      	movs	r2, #1
 8012a48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	2224      	movs	r2, #36	; 0x24
 8012a50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	681a      	ldr	r2, [r3, #0]
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	f022 0201 	bic.w	r2, r2, #1
 8012a6a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012a72:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	2200      	movs	r2, #0
 8012a78:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	68fa      	ldr	r2, [r7, #12]
 8012a80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	2220      	movs	r2, #32
 8012a86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	2200      	movs	r2, #0
 8012a8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012a92:	2300      	movs	r3, #0
}
 8012a94:	4618      	mov	r0, r3
 8012a96:	3714      	adds	r7, #20
 8012a98:	46bd      	mov	sp, r7
 8012a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a9e:	4770      	bx	lr

08012aa0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012aa0:	b580      	push	{r7, lr}
 8012aa2:	b084      	sub	sp, #16
 8012aa4:	af00      	add	r7, sp, #0
 8012aa6:	6078      	str	r0, [r7, #4]
 8012aa8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012ab0:	2b01      	cmp	r3, #1
 8012ab2:	d101      	bne.n	8012ab8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012ab4:	2302      	movs	r3, #2
 8012ab6:	e02d      	b.n	8012b14 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	2201      	movs	r2, #1
 8012abc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	2224      	movs	r2, #36	; 0x24
 8012ac4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	681a      	ldr	r2, [r3, #0]
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	f022 0201 	bic.w	r2, r2, #1
 8012ade:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	689b      	ldr	r3, [r3, #8]
 8012ae6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	683a      	ldr	r2, [r7, #0]
 8012af0:	430a      	orrs	r2, r1
 8012af2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012af4:	6878      	ldr	r0, [r7, #4]
 8012af6:	f000 f84f 	bl	8012b98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	68fa      	ldr	r2, [r7, #12]
 8012b00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	2220      	movs	r2, #32
 8012b06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	2200      	movs	r2, #0
 8012b0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012b12:	2300      	movs	r3, #0
}
 8012b14:	4618      	mov	r0, r3
 8012b16:	3710      	adds	r7, #16
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	bd80      	pop	{r7, pc}

08012b1c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b084      	sub	sp, #16
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
 8012b24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012b2c:	2b01      	cmp	r3, #1
 8012b2e:	d101      	bne.n	8012b34 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012b30:	2302      	movs	r3, #2
 8012b32:	e02d      	b.n	8012b90 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	2201      	movs	r2, #1
 8012b38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	2224      	movs	r2, #36	; 0x24
 8012b40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	681a      	ldr	r2, [r3, #0]
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	f022 0201 	bic.w	r2, r2, #1
 8012b5a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	689b      	ldr	r3, [r3, #8]
 8012b62:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	683a      	ldr	r2, [r7, #0]
 8012b6c:	430a      	orrs	r2, r1
 8012b6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012b70:	6878      	ldr	r0, [r7, #4]
 8012b72:	f000 f811 	bl	8012b98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	68fa      	ldr	r2, [r7, #12]
 8012b7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	2220      	movs	r2, #32
 8012b82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	2200      	movs	r2, #0
 8012b8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012b8e:	2300      	movs	r3, #0
}
 8012b90:	4618      	mov	r0, r3
 8012b92:	3710      	adds	r7, #16
 8012b94:	46bd      	mov	sp, r7
 8012b96:	bd80      	pop	{r7, pc}

08012b98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012b98:	b480      	push	{r7}
 8012b9a:	b085      	sub	sp, #20
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d108      	bne.n	8012bba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	2201      	movs	r2, #1
 8012bac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	2201      	movs	r2, #1
 8012bb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012bb8:	e031      	b.n	8012c1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012bba:	2308      	movs	r3, #8
 8012bbc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012bbe:	2308      	movs	r3, #8
 8012bc0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	689b      	ldr	r3, [r3, #8]
 8012bc8:	0e5b      	lsrs	r3, r3, #25
 8012bca:	b2db      	uxtb	r3, r3
 8012bcc:	f003 0307 	and.w	r3, r3, #7
 8012bd0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	689b      	ldr	r3, [r3, #8]
 8012bd8:	0f5b      	lsrs	r3, r3, #29
 8012bda:	b2db      	uxtb	r3, r3
 8012bdc:	f003 0307 	and.w	r3, r3, #7
 8012be0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012be2:	7bbb      	ldrb	r3, [r7, #14]
 8012be4:	7b3a      	ldrb	r2, [r7, #12]
 8012be6:	4911      	ldr	r1, [pc, #68]	; (8012c2c <UARTEx_SetNbDataToProcess+0x94>)
 8012be8:	5c8a      	ldrb	r2, [r1, r2]
 8012bea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012bee:	7b3a      	ldrb	r2, [r7, #12]
 8012bf0:	490f      	ldr	r1, [pc, #60]	; (8012c30 <UARTEx_SetNbDataToProcess+0x98>)
 8012bf2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012bf4:	fb93 f3f2 	sdiv	r3, r3, r2
 8012bf8:	b29a      	uxth	r2, r3
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012c00:	7bfb      	ldrb	r3, [r7, #15]
 8012c02:	7b7a      	ldrb	r2, [r7, #13]
 8012c04:	4909      	ldr	r1, [pc, #36]	; (8012c2c <UARTEx_SetNbDataToProcess+0x94>)
 8012c06:	5c8a      	ldrb	r2, [r1, r2]
 8012c08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012c0c:	7b7a      	ldrb	r2, [r7, #13]
 8012c0e:	4908      	ldr	r1, [pc, #32]	; (8012c30 <UARTEx_SetNbDataToProcess+0x98>)
 8012c10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012c12:	fb93 f3f2 	sdiv	r3, r3, r2
 8012c16:	b29a      	uxth	r2, r3
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012c1e:	bf00      	nop
 8012c20:	3714      	adds	r7, #20
 8012c22:	46bd      	mov	sp, r7
 8012c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c28:	4770      	bx	lr
 8012c2a:	bf00      	nop
 8012c2c:	0802b8e8 	.word	0x0802b8e8
 8012c30:	0802b8f0 	.word	0x0802b8f0

08012c34 <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8012c34:	b480      	push	{r7}
 8012c36:	b083      	sub	sp, #12
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	f043 0201 	orr.w	r2, r3, #1
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	601a      	str	r2, [r3, #0]
}
 8012c48:	bf00      	nop
 8012c4a:	370c      	adds	r7, #12
 8012c4c:	46bd      	mov	sp, r7
 8012c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c52:	4770      	bx	lr

08012c54 <LL_DLYB_Disable>:
  * @param  DLYBx DLYB Instance.
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Disable(DLYB_TypeDef *DLYBx)
{
 8012c54:	b480      	push	{r7}
 8012c56:	b083      	sub	sp, #12
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(DLYBx->CR, DLYB_CR_DEN);
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	f023 0201 	bic.w	r2, r3, #1
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	601a      	str	r2, [r3, #0]
}
 8012c68:	bf00      	nop
 8012c6a:	370c      	adds	r7, #12
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c72:	4770      	bx	lr

08012c74 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 8012c74:	b580      	push	{r7, lr}
 8012c76:	b086      	sub	sp, #24
 8012c78:	af02      	add	r7, sp, #8
 8012c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8012c80:	f7f4 fddc 	bl	800783c <HAL_GetTick>
 8012c84:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d102      	bne.n	8012c92 <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8012c8c:	2301      	movs	r3, #1
 8012c8e:	73fb      	strb	r3, [r7, #15]
 8012c90:	e137      	b.n	8012f02 <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	4a76      	ldr	r2, [pc, #472]	; (8012e70 <HAL_XSPI_Init+0x1fc>)
 8012c98:	4293      	cmp	r3, r2
 8012c9a:	d008      	beq.n	8012cae <HAL_XSPI_Init+0x3a>
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	4a74      	ldr	r2, [pc, #464]	; (8012e74 <HAL_XSPI_Init+0x200>)
 8012ca2:	4293      	cmp	r3, r2
 8012ca4:	d003      	beq.n	8012cae <HAL_XSPI_Init+0x3a>
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	4a73      	ldr	r2, [pc, #460]	; (8012e78 <HAL_XSPI_Init+0x204>)
 8012cac:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	4a72      	ldr	r2, [pc, #456]	; (8012e7c <HAL_XSPI_Init+0x208>)
 8012cb4:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	4a6d      	ldr	r2, [pc, #436]	; (8012e70 <HAL_XSPI_Init+0x1fc>)
 8012cbc:	4293      	cmp	r3, r2
 8012cbe:	d008      	beq.n	8012cd2 <HAL_XSPI_Init+0x5e>
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	4a6b      	ldr	r2, [pc, #428]	; (8012e74 <HAL_XSPI_Init+0x200>)
 8012cc6:	4293      	cmp	r3, r2
 8012cc8:	d003      	beq.n	8012cd2 <HAL_XSPI_Init+0x5e>
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	4a6a      	ldr	r2, [pc, #424]	; (8012e78 <HAL_XSPI_Init+0x204>)
 8012cd0:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	4a66      	ldr	r2, [pc, #408]	; (8012e70 <HAL_XSPI_Init+0x1fc>)
 8012cd8:	4293      	cmp	r3, r2
 8012cda:	d008      	beq.n	8012cee <HAL_XSPI_Init+0x7a>
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	4a64      	ldr	r2, [pc, #400]	; (8012e74 <HAL_XSPI_Init+0x200>)
 8012ce2:	4293      	cmp	r3, r2
 8012ce4:	d003      	beq.n	8012cee <HAL_XSPI_Init+0x7a>
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	4a63      	ldr	r2, [pc, #396]	; (8012e78 <HAL_XSPI_Init+0x204>)
 8012cec:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	2200      	movs	r2, #0
 8012cf2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	f040 8102 	bne.w	8012f02 <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 8012cfe:	6878      	ldr	r0, [r7, #4]
 8012d00:	f7ee fefe 	bl	8001b00 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8012d04:	f241 3188 	movw	r1, #5000	; 0x1388
 8012d08:	6878      	ldr	r0, [r7, #4]
 8012d0a:	f000 fc82 	bl	8013612 <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	689a      	ldr	r2, [r3, #8]
 8012d14:	4b5a      	ldr	r3, [pc, #360]	; (8012e80 <HAL_XSPI_Init+0x20c>)
 8012d16:	4013      	ands	r3, r2
 8012d18:	687a      	ldr	r2, [r7, #4]
 8012d1a:	68d1      	ldr	r1, [r2, #12]
 8012d1c:	687a      	ldr	r2, [r7, #4]
 8012d1e:	6912      	ldr	r2, [r2, #16]
 8012d20:	0412      	lsls	r2, r2, #16
 8012d22:	4311      	orrs	r1, r2
 8012d24:	687a      	ldr	r2, [r7, #4]
 8012d26:	6952      	ldr	r2, [r2, #20]
 8012d28:	3a01      	subs	r2, #1
 8012d2a:	0212      	lsls	r2, r2, #8
 8012d2c:	4311      	orrs	r1, r2
 8012d2e:	687a      	ldr	r2, [r7, #4]
 8012d30:	69d2      	ldr	r2, [r2, #28]
 8012d32:	4311      	orrs	r1, r2
 8012d34:	687a      	ldr	r2, [r7, #4]
 8012d36:	6812      	ldr	r2, [r2, #0]
 8012d38:	430b      	orrs	r3, r1
 8012d3a:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	4a4b      	ldr	r2, [pc, #300]	; (8012e70 <HAL_XSPI_Init+0x1fc>)
 8012d42:	4293      	cmp	r3, r2
 8012d44:	d00e      	beq.n	8012d64 <HAL_XSPI_Init+0xf0>
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	4a4a      	ldr	r2, [pc, #296]	; (8012e74 <HAL_XSPI_Init+0x200>)
 8012d4c:	4293      	cmp	r3, r2
 8012d4e:	d009      	beq.n	8012d64 <HAL_XSPI_Init+0xf0>
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	4a48      	ldr	r2, [pc, #288]	; (8012e78 <HAL_XSPI_Init+0x204>)
 8012d56:	4293      	cmp	r3, r2
 8012d58:	d004      	beq.n	8012d64 <HAL_XSPI_Init+0xf0>
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	4a49      	ldr	r2, [pc, #292]	; (8012e84 <HAL_XSPI_Init+0x210>)
 8012d60:	4293      	cmp	r3, r2
 8012d62:	d10a      	bne.n	8012d7a <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	689b      	ldr	r3, [r3, #8]
 8012d6a:	f023 0108 	bic.w	r1, r3, #8
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	430a      	orrs	r2, r1
 8012d78:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	68db      	ldr	r3, [r3, #12]
 8012d80:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	6a1a      	ldr	r2, [r3, #32]
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	430a      	orrs	r2, r1
 8012d8e:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	691b      	ldr	r3, [r3, #16]
 8012d96:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d9e:	041a      	lsls	r2, r3, #16
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	430a      	orrs	r2, r1
 8012da6:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	4a30      	ldr	r2, [pc, #192]	; (8012e70 <HAL_XSPI_Init+0x1fc>)
 8012dae:	4293      	cmp	r3, r2
 8012db0:	d00e      	beq.n	8012dd0 <HAL_XSPI_Init+0x15c>
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	4a2f      	ldr	r2, [pc, #188]	; (8012e74 <HAL_XSPI_Init+0x200>)
 8012db8:	4293      	cmp	r3, r2
 8012dba:	d009      	beq.n	8012dd0 <HAL_XSPI_Init+0x15c>
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	4a2d      	ldr	r2, [pc, #180]	; (8012e78 <HAL_XSPI_Init+0x204>)
 8012dc2:	4293      	cmp	r3, r2
 8012dc4:	d004      	beq.n	8012dd0 <HAL_XSPI_Init+0x15c>
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	4a2e      	ldr	r2, [pc, #184]	; (8012e84 <HAL_XSPI_Init+0x210>)
 8012dcc:	4293      	cmp	r3, r2
 8012dce:	d10a      	bne.n	8012de6 <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	691b      	ldr	r3, [r3, #16]
 8012dd6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	430a      	orrs	r2, r1
 8012de4:	611a      	str	r2, [r3, #16]
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	687a      	ldr	r2, [r7, #4]
 8012dec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8012dee:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	685b      	ldr	r3, [r3, #4]
 8012dfe:	3b01      	subs	r3, #1
 8012e00:	021a      	lsls	r2, r3, #8
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	430a      	orrs	r2, r1
 8012e08:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012e0e:	9300      	str	r3, [sp, #0]
 8012e10:	68bb      	ldr	r3, [r7, #8]
 8012e12:	2200      	movs	r2, #0
 8012e14:	2120      	movs	r1, #32
 8012e16:	6878      	ldr	r0, [r7, #4]
 8012e18:	f000 fd60 	bl	80138dc <XSPI_WaitFlagStateUntilTimeout>
 8012e1c:	4603      	mov	r3, r0
 8012e1e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8012e20:	7bfb      	ldrb	r3, [r7, #15]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d16d      	bne.n	8012f02 <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	68db      	ldr	r3, [r3, #12]
 8012e2c:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	430a      	orrs	r2, r1
 8012e3a:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	4a0e      	ldr	r2, [pc, #56]	; (8012e7c <HAL_XSPI_Init+0x208>)
 8012e42:	4293      	cmp	r3, r2
 8012e44:	d004      	beq.n	8012e50 <HAL_XSPI_Init+0x1dc>
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	4a0f      	ldr	r2, [pc, #60]	; (8012e88 <HAL_XSPI_Init+0x214>)
 8012e4c:	4293      	cmp	r3, r2
 8012e4e:	d11d      	bne.n	8012e8c <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012e54:	9300      	str	r3, [sp, #0]
 8012e56:	68bb      	ldr	r3, [r7, #8]
 8012e58:	2200      	movs	r2, #0
 8012e5a:	2120      	movs	r1, #32
 8012e5c:	6878      	ldr	r0, [r7, #4]
 8012e5e:	f000 fd3d 	bl	80138dc <XSPI_WaitFlagStateUntilTimeout>
 8012e62:	4603      	mov	r3, r0
 8012e64:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 8012e66:	7bfb      	ldrb	r3, [r7, #15]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d00f      	beq.n	8012e8c <HAL_XSPI_Init+0x218>
          {
            return status;
 8012e6c:	7bfb      	ldrb	r3, [r7, #15]
 8012e6e:	e049      	b.n	8012f04 <HAL_XSPI_Init+0x290>
 8012e70:	420d1400 	.word	0x420d1400
 8012e74:	520d1400 	.word	0x520d1400
 8012e78:	420d2400 	.word	0x420d2400
 8012e7c:	420d3400 	.word	0x420d3400
 8012e80:	f8e0c0fc 	.word	0xf8e0c0fc
 8012e84:	520d2400 	.word	0x520d2400
 8012e88:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	689a      	ldr	r2, [r3, #8]
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	430a      	orrs	r2, r1
 8012ea0:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8012eaa:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012eb6:	431a      	orrs	r2, r3
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	430a      	orrs	r2, r1
 8012ebe:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	681a      	ldr	r2, [r3, #0]
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	f042 0201 	orr.w	r2, r2, #1
 8012ed0:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	699b      	ldr	r3, [r3, #24]
 8012ed6:	2b02      	cmp	r3, #2
 8012ed8:	d107      	bne.n	8012eea <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	689a      	ldr	r2, [r3, #8]
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	f042 0202 	orr.w	r2, r2, #2
 8012ee8:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	68db      	ldr	r3, [r3, #12]
 8012eee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8012ef2:	d103      	bne.n	8012efc <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	2201      	movs	r2, #1
 8012ef8:	655a      	str	r2, [r3, #84]	; 0x54
 8012efa:	e002      	b.n	8012f02 <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	2202      	movs	r2, #2
 8012f00:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
  }
  return status;
 8012f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f04:	4618      	mov	r0, r3
 8012f06:	3710      	adds	r7, #16
 8012f08:	46bd      	mov	sp, r7
 8012f0a:	bd80      	pop	{r7, pc}

08012f0c <HAL_XSPI_DeInit>:
  * @brief  De-Initialize the XSPI peripheral.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_DeInit(XSPI_HandleTypeDef *hxspi)
{
 8012f0c:	b580      	push	{r7, lr}
 8012f0e:	b084      	sub	sp, #16
 8012f10:	af00      	add	r7, sp, #0
 8012f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012f14:	2300      	movs	r3, #0
 8012f16:	73fb      	strb	r3, [r7, #15]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d102      	bne.n	8012f24 <HAL_XSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 8012f1e:	2301      	movs	r3, #1
 8012f20:	73fb      	strb	r3, [r7, #15]
 8012f22:	e015      	b.n	8012f50 <HAL_XSPI_DeInit+0x44>
    /* No error code can be set as the handler is null */
  }
  else
  {
    /* Disable XSPI */
    HAL_XSPI_DISABLE(hxspi);
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	681a      	ldr	r2, [r3, #0]
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	f022 0201 	bic.w	r2, r2, #1
 8012f32:	601a      	str	r2, [r3, #0]

    /* Disable free running clock if needed : must be done after XSPI disable */
    CLEAR_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	689a      	ldr	r2, [r3, #8]
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	f022 0202 	bic.w	r2, r2, #2
 8012f42:	609a      	str	r2, [r3, #8]

    /* De-initialize the low level hardware */
    hxspi->MspDeInitCallback(hxspi);
#else
    /* De-initialize the low-level hardware */
    HAL_XSPI_MspDeInit(hxspi);
 8012f44:	6878      	ldr	r0, [r7, #4]
 8012f46:	f7ee fdf3 	bl	8001b30 <HAL_XSPI_MspDeInit>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

    /* Reset the driver state */
    hxspi->State = HAL_XSPI_STATE_RESET;
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	2200      	movs	r2, #0
 8012f4e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  return status;
 8012f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f52:	4618      	mov	r0, r3
 8012f54:	3710      	adds	r7, #16
 8012f56:	46bd      	mov	sp, r7
 8012f58:	bd80      	pop	{r7, pc}
	...

08012f5c <HAL_XSPI_Command>:
  * @param  pCmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Command(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *const pCmd, uint32_t Timeout)
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b08a      	sub	sp, #40	; 0x28
 8012f60:	af02      	add	r7, sp, #8
 8012f62:	60f8      	str	r0, [r7, #12]
 8012f64:	60b9      	str	r1, [r7, #8]
 8012f66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8012f68:	f7f4 fc68 	bl	800783c <HAL_GetTick>
 8012f6c:	61b8      	str	r0, [r7, #24]

  /* Check the parameters of the command structure */
  assert_param(IS_XSPI_OPERATION_TYPE(pCmd->OperationType));
  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	689b      	ldr	r3, [r3, #8]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d125      	bne.n	8012fc2 <HAL_XSPI_Command+0x66>
  {
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	4a68      	ldr	r2, [pc, #416]	; (801311c <HAL_XSPI_Command+0x1c0>)
 8012f7c:	4293      	cmp	r3, r2
 8012f7e:	d020      	beq.n	8012fc2 <HAL_XSPI_Command+0x66>
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	4a66      	ldr	r2, [pc, #408]	; (8013120 <HAL_XSPI_Command+0x1c4>)
 8012f86:	4293      	cmp	r3, r2
 8012f88:	d01b      	beq.n	8012fc2 <HAL_XSPI_Command+0x66>
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	4a65      	ldr	r2, [pc, #404]	; (8013124 <HAL_XSPI_Command+0x1c8>)
 8012f90:	4293      	cmp	r3, r2
 8012f92:	d016      	beq.n	8012fc2 <HAL_XSPI_Command+0x66>
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	4a63      	ldr	r2, [pc, #396]	; (8013128 <HAL_XSPI_Command+0x1cc>)
 8012f9a:	4293      	cmp	r3, r2
 8012f9c:	d011      	beq.n	8012fc2 <HAL_XSPI_Command+0x66>
    {
      assert_param(IS_OCTOSPI_IO_SELECT(pCmd->IOSelect));
    }
#if defined(HSPI1)
    else if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	4a62      	ldr	r2, [pc, #392]	; (801312c <HAL_XSPI_Command+0x1d0>)
 8012fa4:	4293      	cmp	r3, r2
 8012fa6:	d00c      	beq.n	8012fc2 <HAL_XSPI_Command+0x66>
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	4a60      	ldr	r2, [pc, #384]	; (8013130 <HAL_XSPI_Command+0x1d4>)
 8012fae:	4293      	cmp	r3, r2
 8012fb0:	d007      	beq.n	8012fc2 <HAL_XSPI_Command+0x66>
      assert_param(IS_HSPI_IO_SELECT(pCmd->IOSelect));
    }
#endif /* HSPI1 */
    else
    {
      hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012fb6:	f043 0208 	orr.w	r2, r3, #8
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8012fbe:	2301      	movs	r3, #1
 8012fc0:	e0a8      	b.n	8013114 <HAL_XSPI_Command+0x1b8>
  {
    assert_param(IS_XSPI_ALT_BYTES_WIDTH(pCmd->AlternateBytesWidth));
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
  }

  if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	4a55      	ldr	r2, [pc, #340]	; (801311c <HAL_XSPI_Command+0x1c0>)
 8012fc8:	4293      	cmp	r3, r2
 8012fca:	d020      	beq.n	801300e <HAL_XSPI_Command+0xb2>
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	4a53      	ldr	r2, [pc, #332]	; (8013120 <HAL_XSPI_Command+0x1c4>)
 8012fd2:	4293      	cmp	r3, r2
 8012fd4:	d01b      	beq.n	801300e <HAL_XSPI_Command+0xb2>
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	4a52      	ldr	r2, [pc, #328]	; (8013124 <HAL_XSPI_Command+0x1c8>)
 8012fdc:	4293      	cmp	r3, r2
 8012fde:	d016      	beq.n	801300e <HAL_XSPI_Command+0xb2>
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	4a50      	ldr	r2, [pc, #320]	; (8013128 <HAL_XSPI_Command+0x1cc>)
 8012fe6:	4293      	cmp	r3, r2
 8012fe8:	d011      	beq.n	801300e <HAL_XSPI_Command+0xb2>
  {
    assert_param(IS_OCTOSPI_DATA_MODE(pCmd->DataMode));
  }
#if defined(HSPI1)
  else if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	4a4f      	ldr	r2, [pc, #316]	; (801312c <HAL_XSPI_Command+0x1d0>)
 8012ff0:	4293      	cmp	r3, r2
 8012ff2:	d00c      	beq.n	801300e <HAL_XSPI_Command+0xb2>
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	681b      	ldr	r3, [r3, #0]
 8012ff8:	4a4d      	ldr	r2, [pc, #308]	; (8013130 <HAL_XSPI_Command+0x1d4>)
 8012ffa:	4293      	cmp	r3, r2
 8012ffc:	d007      	beq.n	801300e <HAL_XSPI_Command+0xb2>
    assert_param(IS_HSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));
  }
#endif /* HSPI1 */
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013002:	f043 0208 	orr.w	r2, r3, #8
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	659a      	str	r2, [r3, #88]	; 0x58
    return HAL_ERROR;
 801300a:	2301      	movs	r3, #1
 801300c:	e082      	b.n	8013114 <HAL_XSPI_Command+0x1b8>
  }

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 801300e:	68bb      	ldr	r3, [r7, #8]
 8013010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013012:	2b00      	cmp	r3, #0

  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));
  assert_param(IS_XSPI_SIOO_MODE(pCmd->SIOOMode));

  /* Check the state of the driver */
  state = hxspi->State;
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013018:	617b      	str	r3, [r7, #20]
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
 801301a:	697b      	ldr	r3, [r7, #20]
 801301c:	2b02      	cmp	r3, #2
 801301e:	d104      	bne.n	801302a <HAL_XSPI_Command+0xce>
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	68db      	ldr	r3, [r3, #12]
 8013024:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8013028:	d115      	bne.n	8013056 <HAL_XSPI_Command+0xfa>
 801302a:	697b      	ldr	r3, [r7, #20]
 801302c:	2b14      	cmp	r3, #20
 801302e:	d107      	bne.n	8013040 <HAL_XSPI_Command+0xe4>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 8013030:	68bb      	ldr	r3, [r7, #8]
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	2b02      	cmp	r3, #2
 8013036:	d00e      	beq.n	8013056 <HAL_XSPI_Command+0xfa>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 8013038:	68bb      	ldr	r3, [r7, #8]
 801303a:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 801303c:	2b03      	cmp	r3, #3
 801303e:	d00a      	beq.n	8013056 <HAL_XSPI_Command+0xfa>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 8013040:	697b      	ldr	r3, [r7, #20]
 8013042:	2b24      	cmp	r3, #36	; 0x24
 8013044:	d15e      	bne.n	8013104 <HAL_XSPI_Command+0x1a8>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 8013046:	68bb      	ldr	r3, [r7, #8]
 8013048:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
 801304a:	2b01      	cmp	r3, #1
 801304c:	d003      	beq.n	8013056 <HAL_XSPI_Command+0xfa>
        (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))))
 801304e:	68bb      	ldr	r3, [r7, #8]
 8013050:	681b      	ldr	r3, [r3, #0]
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 8013052:	2b03      	cmp	r3, #3
 8013054:	d156      	bne.n	8013104 <HAL_XSPI_Command+0x1a8>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	9300      	str	r3, [sp, #0]
 801305a:	69bb      	ldr	r3, [r7, #24]
 801305c:	2200      	movs	r2, #0
 801305e:	2120      	movs	r1, #32
 8013060:	68f8      	ldr	r0, [r7, #12]
 8013062:	f000 fc3b 	bl	80138dc <XSPI_WaitFlagStateUntilTimeout>
 8013066:	4603      	mov	r3, r0
 8013068:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 801306a:	7ffb      	ldrb	r3, [r7, #31]
 801306c:	2b00      	cmp	r3, #0
 801306e:	d146      	bne.n	80130fe <HAL_XSPI_Command+0x1a2>
    {
      /* Initialize error code */
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	2200      	movs	r2, #0
 8013074:	659a      	str	r2, [r3, #88]	; 0x58

      /* Configure the registers */
      status = XSPI_ConfigCmd(hxspi, pCmd);
 8013076:	68b9      	ldr	r1, [r7, #8]
 8013078:	68f8      	ldr	r0, [r7, #12]
 801307a:	f000 fc67 	bl	801394c <XSPI_ConfigCmd>
 801307e:	4603      	mov	r3, r0
 8013080:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8013082:	7ffb      	ldrb	r3, [r7, #31]
 8013084:	2b00      	cmp	r3, #0
 8013086:	d143      	bne.n	8013110 <HAL_XSPI_Command+0x1b4>
      {
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
 8013088:	68bb      	ldr	r3, [r7, #8]
 801308a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801308c:	2b00      	cmp	r3, #0
 801308e:	d10e      	bne.n	80130ae <HAL_XSPI_Command+0x152>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	9300      	str	r3, [sp, #0]
 8013094:	69bb      	ldr	r3, [r7, #24]
 8013096:	2201      	movs	r2, #1
 8013098:	2102      	movs	r1, #2
 801309a:	68f8      	ldr	r0, [r7, #12]
 801309c:	f000 fc1e 	bl	80138dc <XSPI_WaitFlagStateUntilTimeout>
 80130a0:	4603      	mov	r3, r0
 80130a2:	77fb      	strb	r3, [r7, #31]

          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	2202      	movs	r2, #2
 80130aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80130ac:	e030      	b.n	8013110 <HAL_XSPI_Command+0x1b4>
        }
        else
        {
          /* Update the state */
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 80130ae:	68bb      	ldr	r3, [r7, #8]
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d103      	bne.n	80130be <HAL_XSPI_Command+0x162>
          {
            hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	2204      	movs	r2, #4
 80130ba:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 80130bc:	e028      	b.n	8013110 <HAL_XSPI_Command+0x1b4>
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
 80130be:	68bb      	ldr	r3, [r7, #8]
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	2b01      	cmp	r3, #1
 80130c4:	d10b      	bne.n	80130de <HAL_XSPI_Command+0x182>
          {
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80130ca:	2b24      	cmp	r3, #36	; 0x24
 80130cc:	d103      	bne.n	80130d6 <HAL_XSPI_Command+0x17a>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	2204      	movs	r2, #4
 80130d2:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 80130d4:	e01c      	b.n	8013110 <HAL_XSPI_Command+0x1b4>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	2214      	movs	r2, #20
 80130da:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 80130dc:	e018      	b.n	8013110 <HAL_XSPI_Command+0x1b4>
            }
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 80130de:	68bb      	ldr	r3, [r7, #8]
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	2b02      	cmp	r3, #2
 80130e4:	d114      	bne.n	8013110 <HAL_XSPI_Command+0x1b4>
          {
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80130ea:	2b14      	cmp	r3, #20
 80130ec:	d103      	bne.n	80130f6 <HAL_XSPI_Command+0x19a>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	2204      	movs	r2, #4
 80130f2:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 80130f4:	e00c      	b.n	8013110 <HAL_XSPI_Command+0x1b4>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	2224      	movs	r2, #36	; 0x24
 80130fa:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 80130fc:	e008      	b.n	8013110 <HAL_XSPI_Command+0x1b4>
        }
      }
    }
    else
    {
      status = HAL_BUSY;
 80130fe:	2302      	movs	r3, #2
 8013100:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
 8013102:	e005      	b.n	8013110 <HAL_XSPI_Command+0x1b4>
    }
  }
  else
  {
    status = HAL_ERROR;
 8013104:	2301      	movs	r3, #1
 8013106:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	2210      	movs	r2, #16
 801310c:	659a      	str	r2, [r3, #88]	; 0x58
 801310e:	e000      	b.n	8013112 <HAL_XSPI_Command+0x1b6>
    if (status == HAL_OK)
 8013110:	bf00      	nop
  }

  return status;
 8013112:	7ffb      	ldrb	r3, [r7, #31]
}
 8013114:	4618      	mov	r0, r3
 8013116:	3720      	adds	r7, #32
 8013118:	46bd      	mov	sp, r7
 801311a:	bd80      	pop	{r7, pc}
 801311c:	420d1400 	.word	0x420d1400
 8013120:	520d1400 	.word	0x520d1400
 8013124:	420d2400 	.word	0x420d2400
 8013128:	520d2400 	.word	0x520d2400
 801312c:	420d3400 	.word	0x420d3400
 8013130:	520d3400 	.word	0x520d3400

08013134 <HAL_XSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Transmit(XSPI_HandleTypeDef *hxspi, uint8_t *const pData, uint32_t Timeout)
{
 8013134:	b580      	push	{r7, lr}
 8013136:	b08a      	sub	sp, #40	; 0x28
 8013138:	af02      	add	r7, sp, #8
 801313a:	60f8      	str	r0, [r7, #12]
 801313c:	60b9      	str	r1, [r7, #8]
 801313e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8013140:	f7f4 fb7c 	bl	800783c <HAL_GetTick>
 8013144:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	3350      	adds	r3, #80	; 0x50
 801314c:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 801314e:	68bb      	ldr	r3, [r7, #8]
 8013150:	2b00      	cmp	r3, #0
 8013152:	d105      	bne.n	8013160 <HAL_XSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8013154:	2301      	movs	r3, #1
 8013156:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	2208      	movs	r2, #8
 801315c:	659a      	str	r2, [r3, #88]	; 0x58
 801315e:	e057      	b.n	8013210 <HAL_XSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013164:	2b04      	cmp	r3, #4
 8013166:	d14e      	bne.n	8013206 <HAL_XSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801316e:	1c5a      	adds	r2, r3, #1
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	649a      	str	r2, [r3, #72]	; 0x48
      hxspi->XferSize  = hxspi->XferCount;
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	645a      	str	r2, [r3, #68]	; 0x44
      hxspi->pBuffPtr  = pData;
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	68ba      	ldr	r2, [r7, #8]
 8013180:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	681a      	ldr	r2, [r3, #0]
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8013190:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	9300      	str	r3, [sp, #0]
 8013196:	69bb      	ldr	r3, [r7, #24]
 8013198:	2201      	movs	r2, #1
 801319a:	2104      	movs	r1, #4
 801319c:	68f8      	ldr	r0, [r7, #12]
 801319e:	f000 fb9d 	bl	80138dc <XSPI_WaitFlagStateUntilTimeout>
 80131a2:	4603      	mov	r3, r0
 80131a4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80131a6:	7ffb      	ldrb	r3, [r7, #31]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d113      	bne.n	80131d4 <HAL_XSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131b0:	781a      	ldrb	r2, [r3, #0]
 80131b2:	697b      	ldr	r3, [r7, #20]
 80131b4:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131ba:	1c5a      	adds	r2, r3, #1
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	641a      	str	r2, [r3, #64]	; 0x40
        hxspi->XferCount--;
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80131c4:	1e5a      	subs	r2, r3, #1
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	649a      	str	r2, [r3, #72]	; 0x48
      } while (hxspi->XferCount > 0U);
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d1df      	bne.n	8013192 <HAL_XSPI_Transmit+0x5e>
 80131d2:	e000      	b.n	80131d6 <HAL_XSPI_Transmit+0xa2>
          break;
 80131d4:	bf00      	nop

      if (status == HAL_OK)
 80131d6:	7ffb      	ldrb	r3, [r7, #31]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d119      	bne.n	8013210 <HAL_XSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	9300      	str	r3, [sp, #0]
 80131e0:	69bb      	ldr	r3, [r7, #24]
 80131e2:	2201      	movs	r2, #1
 80131e4:	2102      	movs	r1, #2
 80131e6:	68f8      	ldr	r0, [r7, #12]
 80131e8:	f000 fb78 	bl	80138dc <XSPI_WaitFlagStateUntilTimeout>
 80131ec:	4603      	mov	r3, r0
 80131ee:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80131f0:	7ffb      	ldrb	r3, [r7, #31]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d10c      	bne.n	8013210 <HAL_XSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	2202      	movs	r2, #2
 80131fc:	625a      	str	r2, [r3, #36]	; 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	2202      	movs	r2, #2
 8013202:	655a      	str	r2, [r3, #84]	; 0x54
 8013204:	e004      	b.n	8013210 <HAL_XSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8013206:	2301      	movs	r3, #1
 8013208:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	2210      	movs	r2, #16
 801320e:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  return status;
 8013210:	7ffb      	ldrb	r3, [r7, #31]
}
 8013212:	4618      	mov	r0, r3
 8013214:	3720      	adds	r7, #32
 8013216:	46bd      	mov	sp, r7
 8013218:	bd80      	pop	{r7, pc}

0801321a <HAL_XSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Receive(XSPI_HandleTypeDef *hxspi, uint8_t *const pData, uint32_t Timeout)
{
 801321a:	b580      	push	{r7, lr}
 801321c:	b08c      	sub	sp, #48	; 0x30
 801321e:	af02      	add	r7, sp, #8
 8013220:	60f8      	str	r0, [r7, #12]
 8013222:	60b9      	str	r1, [r7, #8]
 8013224:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8013226:	f7f4 fb09 	bl	800783c <HAL_GetTick>
 801322a:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	3350      	adds	r3, #80	; 0x50
 8013232:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hxspi->Instance->AR;
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801323a:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hxspi->Instance->IR;
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8013244:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8013246:	68bb      	ldr	r3, [r7, #8]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d106      	bne.n	801325a <HAL_XSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 801324c:	2301      	movs	r3, #1
 801324e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	2208      	movs	r2, #8
 8013256:	659a      	str	r2, [r3, #88]	; 0x58
 8013258:	e07c      	b.n	8013354 <HAL_XSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801325e:	2b04      	cmp	r3, #4
 8013260:	d172      	bne.n	8013348 <HAL_XSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013268:	1c5a      	adds	r2, r3, #1
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	649a      	str	r2, [r3, #72]	; 0x48
      hxspi->XferSize  = hxspi->XferCount;
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	645a      	str	r2, [r3, #68]	; 0x44
      hxspi->pBuffPtr  = pData;
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	68ba      	ldr	r2, [r7, #8]
 801327a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 801328e:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	68db      	ldr	r3, [r3, #12]
 8013294:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8013298:	d104      	bne.n	80132a4 <HAL_XSPI_Receive+0x8a>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	69ba      	ldr	r2, [r7, #24]
 80132a0:	649a      	str	r2, [r3, #72]	; 0x48
 80132a2:	e011      	b.n	80132c8 <HAL_XSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80132ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d004      	beq.n	80132be <HAL_XSPI_Receive+0xa4>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	69ba      	ldr	r2, [r7, #24]
 80132ba:	649a      	str	r2, [r3, #72]	; 0x48
 80132bc:	e004      	b.n	80132c8 <HAL_XSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	697a      	ldr	r2, [r7, #20]
 80132c4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	9300      	str	r3, [sp, #0]
 80132cc:	6a3b      	ldr	r3, [r7, #32]
 80132ce:	2201      	movs	r2, #1
 80132d0:	2106      	movs	r1, #6
 80132d2:	68f8      	ldr	r0, [r7, #12]
 80132d4:	f000 fb02 	bl	80138dc <XSPI_WaitFlagStateUntilTimeout>
 80132d8:	4603      	mov	r3, r0
 80132da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 80132de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d114      	bne.n	8013310 <HAL_XSPI_Receive+0xf6>
        {
          break;
        }

        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132ea:	69fa      	ldr	r2, [r7, #28]
 80132ec:	7812      	ldrb	r2, [r2, #0]
 80132ee:	b2d2      	uxtb	r2, r2
 80132f0:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132f6:	1c5a      	adds	r2, r3, #1
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	641a      	str	r2, [r3, #64]	; 0x40
        hxspi->XferCount--;
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013300:	1e5a      	subs	r2, r3, #1
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	649a      	str	r2, [r3, #72]	; 0x48
      } while (hxspi->XferCount > 0U);
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801330a:	2b00      	cmp	r3, #0
 801330c:	d1dc      	bne.n	80132c8 <HAL_XSPI_Receive+0xae>
 801330e:	e000      	b.n	8013312 <HAL_XSPI_Receive+0xf8>
          break;
 8013310:	bf00      	nop

      if (status == HAL_OK)
 8013312:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013316:	2b00      	cmp	r3, #0
 8013318:	d11c      	bne.n	8013354 <HAL_XSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	9300      	str	r3, [sp, #0]
 801331e:	6a3b      	ldr	r3, [r7, #32]
 8013320:	2201      	movs	r2, #1
 8013322:	2102      	movs	r1, #2
 8013324:	68f8      	ldr	r0, [r7, #12]
 8013326:	f000 fad9 	bl	80138dc <XSPI_WaitFlagStateUntilTimeout>
 801332a:	4603      	mov	r3, r0
 801332c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 8013330:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013334:	2b00      	cmp	r3, #0
 8013336:	d10d      	bne.n	8013354 <HAL_XSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	2202      	movs	r2, #2
 801333e:	625a      	str	r2, [r3, #36]	; 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	2202      	movs	r2, #2
 8013344:	655a      	str	r2, [r3, #84]	; 0x54
 8013346:	e005      	b.n	8013354 <HAL_XSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8013348:	2301      	movs	r3, #1
 801334a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	2210      	movs	r2, #16
 8013352:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  return status;
 8013354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8013358:	4618      	mov	r0, r3
 801335a:	3728      	adds	r7, #40	; 0x28
 801335c:	46bd      	mov	sp, r7
 801335e:	bd80      	pop	{r7, pc}

08013360 <HAL_XSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_AutoPolling(XSPI_HandleTypeDef *hxspi, XSPI_AutoPollingTypeDef *const pCfg,
                                       uint32_t Timeout)
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b08a      	sub	sp, #40	; 0x28
 8013364:	af02      	add	r7, sp, #8
 8013366:	60f8      	str	r0, [r7, #12]
 8013368:	60b9      	str	r1, [r7, #8]
 801336a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 801336c:	f7f4 fa66 	bl	800783c <HAL_GetTick>
 8013370:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hxspi->Instance->AR;
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013378:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hxspi->Instance->IR;
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8013382:	613b      	str	r3, [r7, #16]
  assert_param(IS_XSPI_AUTOMATIC_STOP(pCfg->AutomaticStop));
  assert_param(IS_XSPI_INTERVAL(pCfg->IntervalTime));
  assert_param(IS_XSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hxspi->State == HAL_XSPI_STATE_CMD_CFG) && (pCfg->AutomaticStop == HAL_XSPI_AUTOMATIC_STOP_ENABLE))
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013388:	2b04      	cmp	r3, #4
 801338a:	d167      	bne.n	801345c <HAL_XSPI_AutoPolling+0xfc>
 801338c:	68bb      	ldr	r3, [r7, #8]
 801338e:	68db      	ldr	r3, [r3, #12]
 8013390:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8013394:	d162      	bne.n	801345c <HAL_XSPI_AutoPolling+0xfc>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	9300      	str	r3, [sp, #0]
 801339a:	69bb      	ldr	r3, [r7, #24]
 801339c:	2200      	movs	r2, #0
 801339e:	2120      	movs	r1, #32
 80133a0:	68f8      	ldr	r0, [r7, #12]
 80133a2:	f000 fa9b 	bl	80138dc <XSPI_WaitFlagStateUntilTimeout>
 80133a6:	4603      	mov	r3, r0
 80133a8:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80133aa:	7ffb      	ldrb	r3, [r7, #31]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d152      	bne.n	8013456 <HAL_XSPI_AutoPolling+0xf6>
    {
      /* Configure registers */
      WRITE_REG(hxspi->Instance->PSMAR, pCfg->MatchValue);
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	68ba      	ldr	r2, [r7, #8]
 80133b6:	6812      	ldr	r2, [r2, #0]
 80133b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG(hxspi->Instance->PSMKR, pCfg->MatchMask);
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	68ba      	ldr	r2, [r7, #8]
 80133c2:	6852      	ldr	r2, [r2, #4]
 80133c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG(hxspi->Instance->PIR,   pCfg->IntervalTime);
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	68ba      	ldr	r2, [r7, #8]
 80133ce:	6912      	ldr	r2, [r2, #16]
 80133d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 80133de:	68bb      	ldr	r3, [r7, #8]
 80133e0:	6899      	ldr	r1, [r3, #8]
 80133e2:	68bb      	ldr	r3, [r7, #8]
 80133e4:	68db      	ldr	r3, [r3, #12]
 80133e6:	430b      	orrs	r3, r1
 80133e8:	431a      	orrs	r2, r3
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80133f2:	601a      	str	r2, [r3, #0]
                 (pCfg->MatchMode | pCfg->AutomaticStop | XSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	68db      	ldr	r3, [r3, #12]
 80133f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80133fc:	d104      	bne.n	8013408 <HAL_XSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	697a      	ldr	r2, [r7, #20]
 8013404:	649a      	str	r2, [r3, #72]	; 0x48
 8013406:	e011      	b.n	801342c <HAL_XSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8013410:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013414:	2b00      	cmp	r3, #0
 8013416:	d004      	beq.n	8013422 <HAL_XSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	697a      	ldr	r2, [r7, #20]
 801341e:	649a      	str	r2, [r3, #72]	; 0x48
 8013420:	e004      	b.n	801342c <HAL_XSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	693a      	ldr	r2, [r7, #16]
 8013428:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_SM, SET, tickstart, Timeout);
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	9300      	str	r3, [sp, #0]
 8013430:	69bb      	ldr	r3, [r7, #24]
 8013432:	2201      	movs	r2, #1
 8013434:	2108      	movs	r1, #8
 8013436:	68f8      	ldr	r0, [r7, #12]
 8013438:	f000 fa50 	bl	80138dc <XSPI_WaitFlagStateUntilTimeout>
 801343c:	4603      	mov	r3, r0
 801343e:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8013440:	7ffb      	ldrb	r3, [r7, #31]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d110      	bne.n	8013468 <HAL_XSPI_AutoPolling+0x108>
      {
        /* Clear status match flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_SM);
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	2208      	movs	r2, #8
 801344c:	625a      	str	r2, [r3, #36]	; 0x24

        hxspi->State = HAL_XSPI_STATE_READY;
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	2202      	movs	r2, #2
 8013452:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 8013454:	e008      	b.n	8013468 <HAL_XSPI_AutoPolling+0x108>
      }
    }
    else
    {
      status = HAL_BUSY;
 8013456:	2302      	movs	r3, #2
 8013458:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
 801345a:	e005      	b.n	8013468 <HAL_XSPI_AutoPolling+0x108>
    }
  }
  else
  {
    status = HAL_ERROR;
 801345c:	2301      	movs	r3, #1
 801345e:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	2210      	movs	r2, #16
 8013464:	659a      	str	r2, [r3, #88]	; 0x58
 8013466:	e000      	b.n	801346a <HAL_XSPI_AutoPolling+0x10a>
    if (status == HAL_OK)
 8013468:	bf00      	nop
  }

  return status;
 801346a:	7ffb      	ldrb	r3, [r7, #31]
}
 801346c:	4618      	mov	r0, r3
 801346e:	3720      	adds	r7, #32
 8013470:	46bd      	mov	sp, r7
 8013472:	bd80      	pop	{r7, pc}

08013474 <HAL_XSPI_MemoryMapped>:
  * @param  pCfg   : Pointer to structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_MemoryMapped(XSPI_HandleTypeDef *hxspi, XSPI_MemoryMappedTypeDef *const pCfg)
{
 8013474:	b580      	push	{r7, lr}
 8013476:	b086      	sub	sp, #24
 8013478:	af02      	add	r7, sp, #8
 801347a:	6078      	str	r0, [r7, #4]
 801347c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 801347e:	f7f4 f9dd 	bl	800783c <HAL_GetTick>
 8013482:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));

  /* Check the state */
  if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013488:	2b04      	cmp	r3, #4
 801348a:	d136      	bne.n	80134fa <HAL_XSPI_MemoryMapped+0x86>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013490:	9300      	str	r3, [sp, #0]
 8013492:	68bb      	ldr	r3, [r7, #8]
 8013494:	2200      	movs	r2, #0
 8013496:	2120      	movs	r1, #32
 8013498:	6878      	ldr	r0, [r7, #4]
 801349a:	f000 fa1f 	bl	80138dc <XSPI_WaitFlagStateUntilTimeout>
 801349e:	4603      	mov	r3, r0
 80134a0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80134a2:	7bfb      	ldrb	r3, [r7, #15]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d12d      	bne.n	8013504 <HAL_XSPI_MemoryMapped+0x90>
    {
      hxspi->State = HAL_XSPI_STATE_BUSY_MEM_MAPPED;
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	2288      	movs	r2, #136	; 0x88
 80134ac:	655a      	str	r2, [r3, #84]	; 0x54

      if (pCfg->TimeOutActivation == HAL_XSPI_TIMEOUT_COUNTER_ENABLE)
 80134ae:	683b      	ldr	r3, [r7, #0]
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	2b08      	cmp	r3, #8
 80134b4:	d111      	bne.n	80134da <HAL_XSPI_MemoryMapped+0x66>
      {
        assert_param(IS_XSPI_TIMEOUT_PERIOD(pCfg->TimeoutPeriodClock));

        /* Configure register */
        WRITE_REG(hxspi->Instance->LPTR, pCfg->TimeoutPeriodClock);
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	683a      	ldr	r2, [r7, #0]
 80134bc:	6852      	ldr	r2, [r2, #4]
 80134be:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TO);
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	2210      	movs	r2, #16
 80134c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TO);
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	681a      	ldr	r2, [r3, #0]
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80134d8:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_TCEN | XSPI_CR_FMODE),
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80134e4:	f023 0308 	bic.w	r3, r3, #8
 80134e8:	683a      	ldr	r2, [r7, #0]
 80134ea:	6812      	ldr	r2, [r2, #0]
 80134ec:	431a      	orrs	r2, r3
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80134f6:	601a      	str	r2, [r3, #0]
 80134f8:	e004      	b.n	8013504 <HAL_XSPI_MemoryMapped+0x90>
                 (pCfg->TimeOutActivation | XSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 80134fa:	2301      	movs	r3, #1
 80134fc:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	2210      	movs	r2, #16
 8013502:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return status;
 8013504:	7bfb      	ldrb	r3, [r7, #15]
}
 8013506:	4618      	mov	r0, r3
 8013508:	3710      	adds	r7, #16
 801350a:	46bd      	mov	sp, r7
 801350c:	bd80      	pop	{r7, pc}

0801350e <HAL_XSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Abort(XSPI_HandleTypeDef *hxspi)
{
 801350e:	b580      	push	{r7, lr}
 8013510:	b088      	sub	sp, #32
 8013512:	af02      	add	r7, sp, #8
 8013514:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013516:	2300      	movs	r3, #0
 8013518:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 801351a:	f7f4 f98f 	bl	800783c <HAL_GetTick>
 801351e:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hxspi->State;
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013524:	60fb      	str	r3, [r7, #12]
  if (((state & XSPI_BUSY_STATE_MASK) != 0U) || ((state & XSPI_CFG_STATE_MASK) != 0U))
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	f003 0308 	and.w	r3, r3, #8
 801352c:	2b00      	cmp	r3, #0
 801352e:	d104      	bne.n	801353a <HAL_XSPI_Abort+0x2c>
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	f003 0304 	and.w	r3, r3, #4
 8013536:	2b00      	cmp	r3, #0
 8013538:	d05f      	beq.n	80135fa <HAL_XSPI_Abort+0xec>
  {
    /* Check if the DMA is enabled */
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	f003 0304 	and.w	r3, r3, #4
 8013544:	2b00      	cmp	r3, #0
 8013546:	d021      	beq.n	801358c <HAL_XSPI_Abort+0x7e>
    {
      /* Disable the DMA transfer on the XSPI side */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_DMAEN);
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	681a      	ldr	r2, [r3, #0]
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	f022 0204 	bic.w	r2, r2, #4
 8013556:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transmit on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmatx);
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801355c:	4618      	mov	r0, r3
 801355e:	f7f4 fda5 	bl	80080ac <HAL_DMA_Abort>
 8013562:	4603      	mov	r3, r0
 8013564:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8013566:	7dfb      	ldrb	r3, [r7, #23]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d002      	beq.n	8013572 <HAL_XSPI_Abort+0x64>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	2204      	movs	r2, #4
 8013570:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Disable the DMA receive on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmarx);
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013576:	4618      	mov	r0, r3
 8013578:	f7f4 fd98 	bl	80080ac <HAL_DMA_Abort>
 801357c:	4603      	mov	r3, r0
 801357e:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8013580:	7dfb      	ldrb	r3, [r7, #23]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d002      	beq.n	801358c <HAL_XSPI_Abort+0x7e>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	2204      	movs	r2, #4
 801358a:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }

    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	6a1b      	ldr	r3, [r3, #32]
 8013592:	f003 0320 	and.w	r3, r3, #32
 8013596:	2b00      	cmp	r3, #0
 8013598:	d02b      	beq.n	80135f2 <HAL_XSPI_Abort+0xe4>
    {
      /* Perform an abort of the XSPI */
      SET_BIT(hxspi->Instance->CR, XSPI_CR_ABORT);
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	681a      	ldr	r2, [r3, #0]
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	f042 0202 	orr.w	r2, r2, #2
 80135a8:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, hxspi->Timeout);
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80135ae:	9300      	str	r3, [sp, #0]
 80135b0:	693b      	ldr	r3, [r7, #16]
 80135b2:	2201      	movs	r2, #1
 80135b4:	2102      	movs	r1, #2
 80135b6:	6878      	ldr	r0, [r7, #4]
 80135b8:	f000 f990 	bl	80138dc <XSPI_WaitFlagStateUntilTimeout>
 80135bc:	4603      	mov	r3, r0
 80135be:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80135c0:	7dfb      	ldrb	r3, [r7, #23]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d11f      	bne.n	8013606 <HAL_XSPI_Abort+0xf8>
      {
        /* Clear transfer complete flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	2202      	movs	r2, #2
 80135cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80135d2:	9300      	str	r3, [sp, #0]
 80135d4:	693b      	ldr	r3, [r7, #16]
 80135d6:	2200      	movs	r2, #0
 80135d8:	2120      	movs	r1, #32
 80135da:	6878      	ldr	r0, [r7, #4]
 80135dc:	f000 f97e 	bl	80138dc <XSPI_WaitFlagStateUntilTimeout>
 80135e0:	4603      	mov	r3, r0
 80135e2:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80135e4:	7dfb      	ldrb	r3, [r7, #23]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d10d      	bne.n	8013606 <HAL_XSPI_Abort+0xf8>
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	2202      	movs	r2, #2
 80135ee:	655a      	str	r2, [r3, #84]	; 0x54
    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
 80135f0:	e009      	b.n	8013606 <HAL_XSPI_Abort+0xf8>
        }
      }
    }
    else
    {
      hxspi->State = HAL_XSPI_STATE_READY;
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	2202      	movs	r2, #2
 80135f6:	655a      	str	r2, [r3, #84]	; 0x54
    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
 80135f8:	e005      	b.n	8013606 <HAL_XSPI_Abort+0xf8>
    }
  }
  else
  {
    status = HAL_ERROR;
 80135fa:	2301      	movs	r3, #1
 80135fc:	75fb      	strb	r3, [r7, #23]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	2210      	movs	r2, #16
 8013602:	659a      	str	r2, [r3, #88]	; 0x58
 8013604:	e000      	b.n	8013608 <HAL_XSPI_Abort+0xfa>
    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
 8013606:	bf00      	nop
  }

  return status;
 8013608:	7dfb      	ldrb	r3, [r7, #23]
}
 801360a:	4618      	mov	r0, r3
 801360c:	3718      	adds	r7, #24
 801360e:	46bd      	mov	sp, r7
 8013610:	bd80      	pop	{r7, pc}

08013612 <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 8013612:	b480      	push	{r7}
 8013614:	b083      	sub	sp, #12
 8013616:	af00      	add	r7, sp, #0
 8013618:	6078      	str	r0, [r7, #4]
 801361a:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	683a      	ldr	r2, [r7, #0]
 8013620:	65da      	str	r2, [r3, #92]	; 0x5c
  return HAL_OK;
 8013622:	2300      	movs	r3, #0
}
 8013624:	4618      	mov	r0, r3
 8013626:	370c      	adds	r7, #12
 8013628:	46bd      	mov	sp, r7
 801362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801362e:	4770      	bx	lr

08013630 <HAL_XSPI_DLYB_SetConfig>:
  * @param  hxspi   : XSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_XSPI_DLYB_SetConfig(XSPI_HandleTypeDef *hxspi, HAL_XSPI_DLYB_CfgTypeDef  *const pdlyb_cfg)
{
 8013630:	b580      	push	{r7, lr}
 8013632:	b084      	sub	sp, #16
 8013634:	af00      	add	r7, sp, #0
 8013636:	6078      	str	r0, [r7, #4]
 8013638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 801363a:	2301      	movs	r3, #1
 801363c:	73fb      	strb	r3, [r7, #15]

  /* Enable XSPI Free Running Clock (mandatory) */
  SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	689a      	ldr	r2, [r3, #8]
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	f042 0202 	orr.w	r2, r2, #2
 801364c:	609a      	str	r2, [r3, #8]

  /* Update XSPI state */
  hxspi->State = HAL_XSPI_STATE_BUSY_CMD;
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	2208      	movs	r2, #8
 8013652:	655a      	str	r2, [r3, #84]	; 0x54

  if (hxspi->Instance == OCTOSPI1)
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	4a18      	ldr	r2, [pc, #96]	; (80136bc <HAL_XSPI_DLYB_SetConfig+0x8c>)
 801365a:	4293      	cmp	r3, r2
 801365c:	d109      	bne.n	8013672 <HAL_XSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 801365e:	4818      	ldr	r0, [pc, #96]	; (80136c0 <HAL_XSPI_DLYB_SetConfig+0x90>)
 8013660:	f7ff fae8 	bl	8012c34 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8013664:	6839      	ldr	r1, [r7, #0]
 8013666:	4816      	ldr	r0, [pc, #88]	; (80136c0 <HAL_XSPI_DLYB_SetConfig+0x90>)
 8013668:	f000 fb2e 	bl	8013cc8 <LL_DLYB_SetDelay>
    status = HAL_OK;
 801366c:	2300      	movs	r3, #0
 801366e:	73fb      	strb	r3, [r7, #15]
 8013670:	e014      	b.n	801369c <HAL_XSPI_DLYB_SetConfig+0x6c>
  }
#if defined(OCTOSPI2)
  else if (hxspi->Instance == OCTOSPI2)
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	4a13      	ldr	r2, [pc, #76]	; (80136c4 <HAL_XSPI_DLYB_SetConfig+0x94>)
 8013678:	4293      	cmp	r3, r2
 801367a:	d109      	bne.n	8013690 <HAL_XSPI_DLYB_SetConfig+0x60>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 801367c:	4812      	ldr	r0, [pc, #72]	; (80136c8 <HAL_XSPI_DLYB_SetConfig+0x98>)
 801367e:	f7ff fad9 	bl	8012c34 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8013682:	6839      	ldr	r1, [r7, #0]
 8013684:	4810      	ldr	r0, [pc, #64]	; (80136c8 <HAL_XSPI_DLYB_SetConfig+0x98>)
 8013686:	f000 fb1f 	bl	8013cc8 <LL_DLYB_SetDelay>
    status = HAL_OK;
 801368a:	2300      	movs	r3, #0
 801368c:	73fb      	strb	r3, [r7, #15]
 801368e:	e005      	b.n	801369c <HAL_XSPI_DLYB_SetConfig+0x6c>
  }
#endif /* OCTOSPI2 */
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013694:	f043 0208 	orr.w	r2, r3, #8
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Abort the current XSPI operation if exist */
  (void)HAL_XSPI_Abort(hxspi);
 801369c:	6878      	ldr	r0, [r7, #4]
 801369e:	f7ff ff36 	bl	801350e <HAL_XSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	689a      	ldr	r2, [r3, #8]
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	f022 0202 	bic.w	r2, r2, #2
 80136b0:	609a      	str	r2, [r3, #8]

  return status;
 80136b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80136b4:	4618      	mov	r0, r3
 80136b6:	3710      	adds	r7, #16
 80136b8:	46bd      	mov	sp, r7
 80136ba:	bd80      	pop	{r7, pc}
 80136bc:	420d1400 	.word	0x420d1400
 80136c0:	420cf000 	.word	0x420cf000
 80136c4:	420d2400 	.word	0x420d2400
 80136c8:	420cf400 	.word	0x420cf400

080136cc <HAL_XSPI_DLYB_GetConfig>:
  * @param  hxspi   : XSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_XSPI_DLYB_GetConfig(XSPI_HandleTypeDef *hxspi, HAL_XSPI_DLYB_CfgTypeDef  *const pdlyb_cfg)
{
 80136cc:	b580      	push	{r7, lr}
 80136ce:	b084      	sub	sp, #16
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	6078      	str	r0, [r7, #4]
 80136d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80136d6:	2301      	movs	r3, #1
 80136d8:	73fb      	strb	r3, [r7, #15]

  if (hxspi->Instance == OCTOSPI1)
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	4a10      	ldr	r2, [pc, #64]	; (8013720 <HAL_XSPI_DLYB_GetConfig+0x54>)
 80136e0:	4293      	cmp	r3, r2
 80136e2:	d106      	bne.n	80136f2 <HAL_XSPI_DLYB_GetConfig+0x26>
  {
    LL_DLYB_GetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 80136e4:	6839      	ldr	r1, [r7, #0]
 80136e6:	480f      	ldr	r0, [pc, #60]	; (8013724 <HAL_XSPI_DLYB_GetConfig+0x58>)
 80136e8:	f000 fb0d 	bl	8013d06 <LL_DLYB_GetDelay>
    status = HAL_OK;
 80136ec:	2300      	movs	r3, #0
 80136ee:	73fb      	strb	r3, [r7, #15]
 80136f0:	e011      	b.n	8013716 <HAL_XSPI_DLYB_GetConfig+0x4a>
  }
#if defined(OCTOSPI2)
  else if (hxspi->Instance == OCTOSPI2)
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	4a0c      	ldr	r2, [pc, #48]	; (8013728 <HAL_XSPI_DLYB_GetConfig+0x5c>)
 80136f8:	4293      	cmp	r3, r2
 80136fa:	d106      	bne.n	801370a <HAL_XSPI_DLYB_GetConfig+0x3e>
  {
    LL_DLYB_GetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 80136fc:	6839      	ldr	r1, [r7, #0]
 80136fe:	480b      	ldr	r0, [pc, #44]	; (801372c <HAL_XSPI_DLYB_GetConfig+0x60>)
 8013700:	f000 fb01 	bl	8013d06 <LL_DLYB_GetDelay>
    status = HAL_OK;
 8013704:	2300      	movs	r3, #0
 8013706:	73fb      	strb	r3, [r7, #15]
 8013708:	e005      	b.n	8013716 <HAL_XSPI_DLYB_GetConfig+0x4a>
  }
#endif /* OCTOSPI2 */
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801370e:	f043 0208 	orr.w	r2, r3, #8
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return status;
 8013716:	7bfb      	ldrb	r3, [r7, #15]
}
 8013718:	4618      	mov	r0, r3
 801371a:	3710      	adds	r7, #16
 801371c:	46bd      	mov	sp, r7
 801371e:	bd80      	pop	{r7, pc}
 8013720:	420d1400 	.word	0x420d1400
 8013724:	420cf000 	.word	0x420cf000
 8013728:	420d2400 	.word	0x420d2400
 801372c:	420cf400 	.word	0x420cf400

08013730 <HAL_XSPI_DLYB_GetClockPeriod>:
  * @param  hxspi   : XSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_XSPI_DLYB_GetClockPeriod(XSPI_HandleTypeDef *hxspi, HAL_XSPI_DLYB_CfgTypeDef  *const pdlyb_cfg)
{
 8013730:	b580      	push	{r7, lr}
 8013732:	b084      	sub	sp, #16
 8013734:	af00      	add	r7, sp, #0
 8013736:	6078      	str	r0, [r7, #4]
 8013738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 801373a:	2301      	movs	r3, #1
 801373c:	73fb      	strb	r3, [r7, #15]

  /* Enable XSPI Free Running Clock (mandatory) */
  SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	689a      	ldr	r2, [r3, #8]
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	f042 0202 	orr.w	r2, r2, #2
 801374c:	609a      	str	r2, [r3, #8]

  /* Update XSPI state */
  hxspi->State = HAL_XSPI_STATE_BUSY_CMD;
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	2208      	movs	r2, #8
 8013752:	655a      	str	r2, [r3, #84]	; 0x54

  if (hxspi->Instance == OCTOSPI1)
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	4a1e      	ldr	r2, [pc, #120]	; (80137d4 <HAL_XSPI_DLYB_GetClockPeriod+0xa4>)
 801375a:	4293      	cmp	r3, r2
 801375c:	d10f      	bne.n	801377e <HAL_XSPI_DLYB_GetClockPeriod+0x4e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 801375e:	481e      	ldr	r0, [pc, #120]	; (80137d8 <HAL_XSPI_DLYB_GetClockPeriod+0xa8>)
 8013760:	f7ff fa68 	bl	8012c34 <LL_DLYB_Enable>

    /* try to detect Period */
    if (LL_DLYB_GetClockPeriod(DLYB_OCTOSPI1, pdlyb_cfg) == (uint32_t)SUCCESS)
 8013764:	6839      	ldr	r1, [r7, #0]
 8013766:	481c      	ldr	r0, [pc, #112]	; (80137d8 <HAL_XSPI_DLYB_GetClockPeriod+0xa8>)
 8013768:	f000 fae6 	bl	8013d38 <LL_DLYB_GetClockPeriod>
 801376c:	4603      	mov	r3, r0
 801376e:	2b00      	cmp	r3, #0
 8013770:	d101      	bne.n	8013776 <HAL_XSPI_DLYB_GetClockPeriod+0x46>
    {
      status = HAL_OK;
 8013772:	2300      	movs	r3, #0
 8013774:	73fb      	strb	r3, [r7, #15]
    }

    /* Disable the DelayBlock */
    LL_DLYB_Disable(DLYB_OCTOSPI1);
 8013776:	4818      	ldr	r0, [pc, #96]	; (80137d8 <HAL_XSPI_DLYB_GetClockPeriod+0xa8>)
 8013778:	f7ff fa6c 	bl	8012c54 <LL_DLYB_Disable>
 801377c:	e01a      	b.n	80137b4 <HAL_XSPI_DLYB_GetClockPeriod+0x84>
  }
#if defined(OCTOSPI2)
  else if (hxspi->Instance == OCTOSPI2)
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	4a16      	ldr	r2, [pc, #88]	; (80137dc <HAL_XSPI_DLYB_GetClockPeriod+0xac>)
 8013784:	4293      	cmp	r3, r2
 8013786:	d10f      	bne.n	80137a8 <HAL_XSPI_DLYB_GetClockPeriod+0x78>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8013788:	4815      	ldr	r0, [pc, #84]	; (80137e0 <HAL_XSPI_DLYB_GetClockPeriod+0xb0>)
 801378a:	f7ff fa53 	bl	8012c34 <LL_DLYB_Enable>

    /* try to detect Period */
    if (LL_DLYB_GetClockPeriod(DLYB_OCTOSPI2, pdlyb_cfg) == (uint32_t)SUCCESS)
 801378e:	6839      	ldr	r1, [r7, #0]
 8013790:	4813      	ldr	r0, [pc, #76]	; (80137e0 <HAL_XSPI_DLYB_GetClockPeriod+0xb0>)
 8013792:	f000 fad1 	bl	8013d38 <LL_DLYB_GetClockPeriod>
 8013796:	4603      	mov	r3, r0
 8013798:	2b00      	cmp	r3, #0
 801379a:	d101      	bne.n	80137a0 <HAL_XSPI_DLYB_GetClockPeriod+0x70>
    {
      status = HAL_OK;
 801379c:	2300      	movs	r3, #0
 801379e:	73fb      	strb	r3, [r7, #15]
    }

    /* Disable the DelayBlock */
    LL_DLYB_Disable(DLYB_OCTOSPI2);
 80137a0:	480f      	ldr	r0, [pc, #60]	; (80137e0 <HAL_XSPI_DLYB_GetClockPeriod+0xb0>)
 80137a2:	f7ff fa57 	bl	8012c54 <LL_DLYB_Disable>
 80137a6:	e005      	b.n	80137b4 <HAL_XSPI_DLYB_GetClockPeriod+0x84>
  }
#endif /* OCTOSPI2 */
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80137ac:	f043 0208 	orr.w	r2, r3, #8
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Abort the current XSPI operation if exist */
  (void)HAL_XSPI_Abort(hxspi);
 80137b4:	6878      	ldr	r0, [r7, #4]
 80137b6:	f7ff feaa 	bl	801350e <HAL_XSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	689a      	ldr	r2, [r3, #8]
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	f022 0202 	bic.w	r2, r2, #2
 80137c8:	609a      	str	r2, [r3, #8]

  return status;
 80137ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80137cc:	4618      	mov	r0, r3
 80137ce:	3710      	adds	r7, #16
 80137d0:	46bd      	mov	sp, r7
 80137d2:	bd80      	pop	{r7, pc}
 80137d4:	420d1400 	.word	0x420d1400
 80137d8:	420cf000 	.word	0x420cf000
 80137dc:	420d2400 	.word	0x420d2400
 80137e0:	420cf400 	.word	0x420cf400

080137e4 <HAL_XSPI_SetDelayValue>:
  * @param  hxspi : XSPI handle
  * @param  pCfg   : Configuration of delay value specified in DelayValueType field.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_SetDelayValue(XSPI_HandleTypeDef *hxspi, XSPI_HSCalTypeDef *const pCfg)
{
 80137e4:	b480      	push	{r7}
 80137e6:	b085      	sub	sp, #20
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	6078      	str	r0, [r7, #4]
 80137ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80137ee:	2300      	movs	r3, #0
 80137f0:	73fb      	strb	r3, [r7, #15]

  if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	4a37      	ldr	r2, [pc, #220]	; (80138d4 <HAL_XSPI_SetDelayValue+0xf0>)
 80137f8:	4293      	cmp	r3, r2
 80137fa:	d004      	beq.n	8013806 <HAL_XSPI_SetDelayValue+0x22>
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	4a35      	ldr	r2, [pc, #212]	; (80138d8 <HAL_XSPI_SetDelayValue+0xf4>)
 8013802:	4293      	cmp	r3, r2
 8013804:	d159      	bne.n	80138ba <HAL_XSPI_SetDelayValue+0xd6>
    assert_param(IS_XSPI_DELAY_TYPE(pCfg->DelayValueType));
    assert_param(IS_XSPI_FINECAL_VALUE(pCfg->FineCalibrationUnit));
    assert_param(IS_XSPI_COARSECAL_VALUE(pCfg->CoarseCalibrationUnit));

    /* Check if the state isn't in one of the busy states */
    if ((hxspi->State & XSPI_BUSY_STATE_MASK) == 0U)
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801380a:	f003 0308 	and.w	r3, r3, #8
 801380e:	2b00      	cmp	r3, #0
 8013810:	d14c      	bne.n	80138ac <HAL_XSPI_SetDelayValue+0xc8>
    {
      switch (pCfg->DelayValueType)
 8013812:	683b      	ldr	r3, [r7, #0]
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	2b03      	cmp	r3, #3
 8013818:	d02e      	beq.n	8013878 <HAL_XSPI_SetDelayValue+0x94>
 801381a:	2b03      	cmp	r3, #3
 801381c:	d840      	bhi.n	80138a0 <HAL_XSPI_SetDelayValue+0xbc>
 801381e:	2b01      	cmp	r3, #1
 8013820:	d002      	beq.n	8013828 <HAL_XSPI_SetDelayValue+0x44>
 8013822:	2b02      	cmp	r3, #2
 8013824:	d014      	beq.n	8013850 <HAL_XSPI_SetDelayValue+0x6c>
 8013826:	e03b      	b.n	80138a0 <HAL_XSPI_SetDelayValue+0xbc>
      {
        case HAL_XSPI_CAL_FEEDBACK_CLK_DELAY:
          MODIFY_REG(hxspi->Instance->CALMR, (HSPI_CALMR_COARSE |  HSPI_CALMR_FINE),
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8013830:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8013834:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013838:	683a      	ldr	r2, [r7, #0]
 801383a:	6851      	ldr	r1, [r2, #4]
 801383c:	683a      	ldr	r2, [r7, #0]
 801383e:	6892      	ldr	r2, [r2, #8]
 8013840:	0412      	lsls	r2, r2, #16
 8013842:	4311      	orrs	r1, r2
 8013844:	687a      	ldr	r2, [r7, #4]
 8013846:	6812      	ldr	r2, [r2, #0]
 8013848:	430b      	orrs	r3, r1
 801384a:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218
                     (pCfg->FineCalibrationUnit | (pCfg->CoarseCalibrationUnit << HSPI_CALMR_COARSE_Pos)));
          break;
 801384e:	e033      	b.n	80138b8 <HAL_XSPI_SetDelayValue+0xd4>
        case HAL_XSPI_CAL_DATA_OUTPUT_DELAY:
          MODIFY_REG(hxspi->Instance->CALSOR, (HSPI_CALSOR_COARSE | HSPI_CALSOR_FINE),
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8013858:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801385c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013860:	683a      	ldr	r2, [r7, #0]
 8013862:	6851      	ldr	r1, [r2, #4]
 8013864:	683a      	ldr	r2, [r7, #0]
 8013866:	6892      	ldr	r2, [r2, #8]
 8013868:	0412      	lsls	r2, r2, #16
 801386a:	4311      	orrs	r1, r2
 801386c:	687a      	ldr	r2, [r7, #4]
 801386e:	6812      	ldr	r2, [r2, #0]
 8013870:	430b      	orrs	r3, r1
 8013872:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
                     (pCfg->FineCalibrationUnit | (pCfg->CoarseCalibrationUnit << HSPI_CALSOR_COARSE_Pos)));
          break;
 8013876:	e01f      	b.n	80138b8 <HAL_XSPI_SetDelayValue+0xd4>
        case HAL_XSPI_CAL_DQS_INPUT_DELAY:
          MODIFY_REG(hxspi->Instance->CALSIR, (HSPI_CALSIR_COARSE | HSPI_CALSIR_FINE),
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8013880:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8013884:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013888:	683a      	ldr	r2, [r7, #0]
 801388a:	6851      	ldr	r1, [r2, #4]
 801388c:	683a      	ldr	r2, [r7, #0]
 801388e:	6892      	ldr	r2, [r2, #8]
 8013890:	0412      	lsls	r2, r2, #16
 8013892:	4311      	orrs	r1, r2
 8013894:	687a      	ldr	r2, [r7, #4]
 8013896:	6812      	ldr	r2, [r2, #0]
 8013898:	430b      	orrs	r3, r1
 801389a:	f8c2 3228 	str.w	r3, [r2, #552]	; 0x228
                     (pCfg->FineCalibrationUnit | (pCfg->CoarseCalibrationUnit << HSPI_CALSIR_COARSE_Pos)));
          break;
 801389e:	e00b      	b.n	80138b8 <HAL_XSPI_SetDelayValue+0xd4>
        default:
          status = HAL_ERROR;
 80138a0:	2301      	movs	r3, #1
 80138a2:	73fb      	strb	r3, [r7, #15]
          hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	2208      	movs	r2, #8
 80138a8:	659a      	str	r2, [r3, #88]	; 0x58
          break;
 80138aa:	e005      	b.n	80138b8 <HAL_XSPI_SetDelayValue+0xd4>
      }
    }
    else
    {
      status = HAL_ERROR;
 80138ac:	2301      	movs	r3, #1
 80138ae:	73fb      	strb	r3, [r7, #15]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	2210      	movs	r2, #16
 80138b4:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hxspi->State & XSPI_BUSY_STATE_MASK) == 0U)
 80138b6:	e005      	b.n	80138c4 <HAL_XSPI_SetDelayValue+0xe0>
 80138b8:	e004      	b.n	80138c4 <HAL_XSPI_SetDelayValue+0xe0>
    }
  }
  else
  {
    status = HAL_ERROR;
 80138ba:	2301      	movs	r3, #1
 80138bc:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	2208      	movs	r2, #8
 80138c2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return status;
 80138c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80138c6:	4618      	mov	r0, r3
 80138c8:	3714      	adds	r7, #20
 80138ca:	46bd      	mov	sp, r7
 80138cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d0:	4770      	bx	lr
 80138d2:	bf00      	nop
 80138d4:	420d3400 	.word	0x420d3400
 80138d8:	520d3400 	.word	0x520d3400

080138dc <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80138dc:	b580      	push	{r7, lr}
 80138de:	b084      	sub	sp, #16
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	60f8      	str	r0, [r7, #12]
 80138e4:	60b9      	str	r1, [r7, #8]
 80138e6:	603b      	str	r3, [r7, #0]
 80138e8:	4613      	mov	r3, r2
 80138ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 80138ec:	e01a      	b.n	8013924 <XSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80138ee:	69bb      	ldr	r3, [r7, #24]
 80138f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138f4:	d016      	beq.n	8013924 <XSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80138f6:	f7f3 ffa1 	bl	800783c <HAL_GetTick>
 80138fa:	4602      	mov	r2, r0
 80138fc:	683b      	ldr	r3, [r7, #0]
 80138fe:	1ad3      	subs	r3, r2, r3
 8013900:	69ba      	ldr	r2, [r7, #24]
 8013902:	429a      	cmp	r2, r3
 8013904:	d302      	bcc.n	801390c <XSPI_WaitFlagStateUntilTimeout+0x30>
 8013906:	69bb      	ldr	r3, [r7, #24]
 8013908:	2b00      	cmp	r3, #0
 801390a:	d10b      	bne.n	8013924 <XSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hxspi->State     = HAL_XSPI_STATE_ERROR;
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013912:	655a      	str	r2, [r3, #84]	; 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013918:	f043 0201 	orr.w	r2, r3, #1
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 8013920:	2303      	movs	r3, #3
 8013922:	e00e      	b.n	8013942 <XSPI_WaitFlagStateUntilTimeout+0x66>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	6a1a      	ldr	r2, [r3, #32]
 801392a:	68bb      	ldr	r3, [r7, #8]
 801392c:	4013      	ands	r3, r2
 801392e:	2b00      	cmp	r3, #0
 8013930:	bf14      	ite	ne
 8013932:	2301      	movne	r3, #1
 8013934:	2300      	moveq	r3, #0
 8013936:	b2db      	uxtb	r3, r3
 8013938:	461a      	mov	r2, r3
 801393a:	79fb      	ldrb	r3, [r7, #7]
 801393c:	429a      	cmp	r2, r3
 801393e:	d1d6      	bne.n	80138ee <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8013940:	2300      	movs	r3, #0
}
 8013942:	4618      	mov	r0, r3
 8013944:	3710      	adds	r7, #16
 8013946:	46bd      	mov	sp, r7
 8013948:	bd80      	pop	{r7, pc}
	...

0801394c <XSPI_ConfigCmd>:
  * @param  hxspi : XSPI handle
  * @param  pCmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_ConfigCmd(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *pCmd)
{
 801394c:	b480      	push	{r7}
 801394e:	b089      	sub	sp, #36	; 0x24
 8013950:	af00      	add	r7, sp, #0
 8013952:	6078      	str	r0, [r7, #4]
 8013954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013956:	2300      	movs	r3, #0
 8013958:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	681a      	ldr	r2, [r3, #0]
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8013968:	601a      	str	r2, [r3, #0]

  if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	4a8f      	ldr	r2, [pc, #572]	; (8013bac <XSPI_ConfigCmd+0x260>)
 8013970:	4293      	cmp	r3, r2
 8013972:	d00e      	beq.n	8013992 <XSPI_ConfigCmd+0x46>
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	4a8d      	ldr	r2, [pc, #564]	; (8013bb0 <XSPI_ConfigCmd+0x264>)
 801397a:	4293      	cmp	r3, r2
 801397c:	d009      	beq.n	8013992 <XSPI_ConfigCmd+0x46>
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	4a8c      	ldr	r2, [pc, #560]	; (8013bb4 <XSPI_ConfigCmd+0x268>)
 8013984:	4293      	cmp	r3, r2
 8013986:	d004      	beq.n	8013992 <XSPI_ConfigCmd+0x46>
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	4a8a      	ldr	r2, [pc, #552]	; (8013bb8 <XSPI_ConfigCmd+0x26c>)
 801398e:	4293      	cmp	r3, r2
 8013990:	d10f      	bne.n	80139b2 <XSPI_ConfigCmd+0x66>
  {
    if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	689b      	ldr	r3, [r3, #8]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d12d      	bne.n	80139f6 <XSPI_ConfigCmd+0xaa>
    {
      assert_param(IS_OCTOSPI_IO_SELECT(pCmd->IOSelect));
      MODIFY_REG(hxspi->Instance->CR, OCTOSPI_CR_MSEL, pCmd->IOSelect);
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80139a4:	683b      	ldr	r3, [r7, #0]
 80139a6:	685a      	ldr	r2, [r3, #4]
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	430a      	orrs	r2, r1
 80139ae:	601a      	str	r2, [r3, #0]
    if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 80139b0:	e021      	b.n	80139f6 <XSPI_ConfigCmd+0xaa>
    }
  }
#if defined(HSPI1)
  else if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	4a81      	ldr	r2, [pc, #516]	; (8013bbc <XSPI_ConfigCmd+0x270>)
 80139b8:	4293      	cmp	r3, r2
 80139ba:	d004      	beq.n	80139c6 <XSPI_ConfigCmd+0x7a>
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	4a7f      	ldr	r2, [pc, #508]	; (8013bc0 <XSPI_ConfigCmd+0x274>)
 80139c2:	4293      	cmp	r3, r2
 80139c4:	d10f      	bne.n	80139e6 <XSPI_ConfigCmd+0x9a>
  {
    if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	689b      	ldr	r3, [r3, #8]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d113      	bne.n	80139f6 <XSPI_ConfigCmd+0xaa>
    {
      assert_param(IS_HSPI_IO_SELECT(pCmd->IOSelect));
      MODIFY_REG(hxspi->Instance->CR, HSPI_CR_MSEL, pCmd->IOSelect);
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 80139d8:	683b      	ldr	r3, [r7, #0]
 80139da:	685a      	ldr	r2, [r3, #4]
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	430a      	orrs	r2, r1
 80139e2:	601a      	str	r2, [r3, #0]
    if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 80139e4:	e007      	b.n	80139f6 <XSPI_ConfigCmd+0xaa>
    }
  }
#endif /* HSPI1 */
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80139ea:	f043 0208 	orr.w	r2, r3, #8
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	659a      	str	r2, [r3, #88]	; 0x58
    return HAL_ERROR;
 80139f2:	2301      	movs	r3, #1
 80139f4:	e162      	b.n	8013cbc <XSPI_ConfigCmd+0x370>
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 80139f6:	683b      	ldr	r3, [r7, #0]
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	2b02      	cmp	r3, #2
 80139fc:	d114      	bne.n	8013a28 <XSPI_ConfigCmd+0xdc>
  {
    ccr_reg = &(hxspi->Instance->WCCR);
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8013a06:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WTCR);
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8013a10:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WIR);
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8013a1a:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WABR);
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8013a24:	60fb      	str	r3, [r7, #12]
 8013a26:	e02c      	b.n	8013a82 <XSPI_ConfigCmd+0x136>
  }
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
 8013a28:	683b      	ldr	r3, [r7, #0]
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	2b03      	cmp	r3, #3
 8013a2e:	d114      	bne.n	8013a5a <XSPI_ConfigCmd+0x10e>
  {
    ccr_reg = &(hxspi->Instance->WPCCR);
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8013a38:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WPTCR);
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8013a42:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WPIR);
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013a4c:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WPABR);
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8013a56:	60fb      	str	r3, [r7, #12]
 8013a58:	e013      	b.n	8013a82 <XSPI_ConfigCmd+0x136>
  }
  else
  {
    ccr_reg = &(hxspi->Instance->CCR);
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013a62:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->TCR);
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8013a6c:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->IR);
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8013a76:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->ABR);
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8013a80:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (pCmd->DQSMode | pCmd->SIOOMode);
 8013a82:	683b      	ldr	r3, [r7, #0]
 8013a84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013a86:	683b      	ldr	r3, [r7, #0]
 8013a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013a8a:	431a      	orrs	r2, r3
 8013a8c:	69bb      	ldr	r3, [r7, #24]
 8013a8e:	601a      	str	r2, [r3, #0]

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
 8013a90:	683b      	ldr	r3, [r7, #0]
 8013a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d012      	beq.n	8013abe <XSPI_ConfigCmd+0x172>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
 8013a98:	683b      	ldr	r3, [r7, #0]
 8013a9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
 8013aa0:	69bb      	ldr	r3, [r7, #24]
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8013aa8:	683b      	ldr	r3, [r7, #0]
 8013aaa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8013aac:	683b      	ldr	r3, [r7, #0]
 8013aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ab0:	4319      	orrs	r1, r3
 8013ab2:	683b      	ldr	r3, [r7, #0]
 8013ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ab6:	430b      	orrs	r3, r1
 8013ab8:	431a      	orrs	r2, r3
 8013aba:	69bb      	ldr	r3, [r7, #24]
 8013abc:	601a      	str	r2, [r3, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
 8013abe:	697b      	ldr	r3, [r7, #20]
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	f023 021f 	bic.w	r2, r3, #31
 8013ac6:	683b      	ldr	r3, [r7, #0]
 8013ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013aca:	431a      	orrs	r2, r3
 8013acc:	697b      	ldr	r3, [r7, #20]
 8013ace:	601a      	str	r2, [r3, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8013ad0:	683b      	ldr	r3, [r7, #0]
 8013ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d009      	beq.n	8013aec <XSPI_ConfigCmd+0x1a0>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 8013ad8:	683b      	ldr	r3, [r7, #0]
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d105      	bne.n	8013aec <XSPI_ConfigCmd+0x1a0>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
 8013ae0:	683b      	ldr	r3, [r7, #0]
 8013ae2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	3a01      	subs	r2, #1
 8013aea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
 8013aec:	683b      	ldr	r3, [r7, #0]
 8013aee:	68db      	ldr	r3, [r3, #12]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	f000 80a8 	beq.w	8013c46 <XSPI_ConfigCmd+0x2fa>
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 8013af6:	683b      	ldr	r3, [r7, #0]
 8013af8:	69db      	ldr	r3, [r3, #28]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d064      	beq.n	8013bc8 <XSPI_ConfigCmd+0x27c>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8013afe:	683b      	ldr	r3, [r7, #0]
 8013b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d01e      	beq.n	8013b44 <XSPI_ConfigCmd+0x1f8>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 8013b06:	69bb      	ldr	r3, [r7, #24]
 8013b08:	681a      	ldr	r2, [r3, #0]
 8013b0a:	4b2e      	ldr	r3, [pc, #184]	; (8013bc4 <XSPI_ConfigCmd+0x278>)
 8013b0c:	4013      	ands	r3, r2
 8013b0e:	683a      	ldr	r2, [r7, #0]
 8013b10:	68d1      	ldr	r1, [r2, #12]
 8013b12:	683a      	ldr	r2, [r7, #0]
 8013b14:	6952      	ldr	r2, [r2, #20]
 8013b16:	4311      	orrs	r1, r2
 8013b18:	683a      	ldr	r2, [r7, #0]
 8013b1a:	6912      	ldr	r2, [r2, #16]
 8013b1c:	4311      	orrs	r1, r2
 8013b1e:	683a      	ldr	r2, [r7, #0]
 8013b20:	69d2      	ldr	r2, [r2, #28]
 8013b22:	4311      	orrs	r1, r2
 8013b24:	683a      	ldr	r2, [r7, #0]
 8013b26:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013b28:	4311      	orrs	r1, r2
 8013b2a:	683a      	ldr	r2, [r7, #0]
 8013b2c:	6a12      	ldr	r2, [r2, #32]
 8013b2e:	4311      	orrs	r1, r2
 8013b30:	683a      	ldr	r2, [r7, #0]
 8013b32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8013b34:	4311      	orrs	r1, r2
 8013b36:	683a      	ldr	r2, [r7, #0]
 8013b38:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8013b3a:	430a      	orrs	r2, r1
 8013b3c:	431a      	orrs	r2, r3
 8013b3e:	69bb      	ldr	r3, [r7, #24]
 8013b40:	601a      	str	r2, [r3, #0]
 8013b42:	e028      	b.n	8013b96 <XSPI_ConfigCmd+0x24a>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 8013b44:	69bb      	ldr	r3, [r7, #24]
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013b4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8013b50:	683a      	ldr	r2, [r7, #0]
 8013b52:	68d1      	ldr	r1, [r2, #12]
 8013b54:	683a      	ldr	r2, [r7, #0]
 8013b56:	6952      	ldr	r2, [r2, #20]
 8013b58:	4311      	orrs	r1, r2
 8013b5a:	683a      	ldr	r2, [r7, #0]
 8013b5c:	6912      	ldr	r2, [r2, #16]
 8013b5e:	4311      	orrs	r1, r2
 8013b60:	683a      	ldr	r2, [r7, #0]
 8013b62:	69d2      	ldr	r2, [r2, #28]
 8013b64:	4311      	orrs	r1, r2
 8013b66:	683a      	ldr	r2, [r7, #0]
 8013b68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013b6a:	4311      	orrs	r1, r2
 8013b6c:	683a      	ldr	r2, [r7, #0]
 8013b6e:	6a12      	ldr	r2, [r2, #32]
 8013b70:	430a      	orrs	r2, r1
 8013b72:	431a      	orrs	r2, r3
 8013b74:	69bb      	ldr	r3, [r7, #24]
 8013b76:	601a      	str	r2, [r3, #0]
                                XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth |
                    pCmd->AddressMode     | pCmd->AddressDTRMode     | pCmd->AddressWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013b80:	d109      	bne.n	8013b96 <XSPI_ConfigCmd+0x24a>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 8013b82:	683b      	ldr	r3, [r7, #0]
 8013b84:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8013b86:	2b08      	cmp	r3, #8
 8013b88:	d105      	bne.n	8013b96 <XSPI_ConfigCmd+0x24a>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 8013b8a:	69bb      	ldr	r3, [r7, #24]
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8013b92:	69bb      	ldr	r3, [r7, #24]
 8013b94:	601a      	str	r2, [r3, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 8013b96:	683b      	ldr	r3, [r7, #0]
 8013b98:	689a      	ldr	r2, [r3, #8]
 8013b9a:	693b      	ldr	r3, [r7, #16]
 8013b9c:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hxspi->Instance->AR = pCmd->Address;
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	683a      	ldr	r2, [r7, #0]
 8013ba4:	6992      	ldr	r2, [r2, #24]
 8013ba6:	649a      	str	r2, [r3, #72]	; 0x48
 8013ba8:	e087      	b.n	8013cba <XSPI_ConfigCmd+0x36e>
 8013baa:	bf00      	nop
 8013bac:	420d1400 	.word	0x420d1400
 8013bb0:	520d1400 	.word	0x520d1400
 8013bb4:	420d2400 	.word	0x420d2400
 8013bb8:	520d2400 	.word	0x520d2400
 8013bbc:	420d3400 	.word	0x420d3400
 8013bc0:	520d3400 	.word	0x520d3400
 8013bc4:	f0ffc0c0 	.word	0xf0ffc0c0
    }
    else
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8013bc8:	683b      	ldr	r3, [r7, #0]
 8013bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d017      	beq.n	8013c00 <XSPI_ConfigCmd+0x2b4>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
 8013bd0:	69bb      	ldr	r3, [r7, #24]
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8013bd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8013bdc:	683a      	ldr	r2, [r7, #0]
 8013bde:	68d1      	ldr	r1, [r2, #12]
 8013be0:	683a      	ldr	r2, [r7, #0]
 8013be2:	6952      	ldr	r2, [r2, #20]
 8013be4:	4311      	orrs	r1, r2
 8013be6:	683a      	ldr	r2, [r7, #0]
 8013be8:	6912      	ldr	r2, [r2, #16]
 8013bea:	4311      	orrs	r1, r2
 8013bec:	683a      	ldr	r2, [r7, #0]
 8013bee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8013bf0:	4311      	orrs	r1, r2
 8013bf2:	683a      	ldr	r2, [r7, #0]
 8013bf4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8013bf6:	430a      	orrs	r2, r1
 8013bf8:	431a      	orrs	r2, r3
 8013bfa:	69bb      	ldr	r3, [r7, #24]
 8013bfc:	601a      	str	r2, [r3, #0]
 8013bfe:	e01d      	b.n	8013c3c <XSPI_ConfigCmd+0x2f0>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
 8013c00:	69bb      	ldr	r3, [r7, #24]
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8013c08:	683b      	ldr	r3, [r7, #0]
 8013c0a:	68d9      	ldr	r1, [r3, #12]
 8013c0c:	683b      	ldr	r3, [r7, #0]
 8013c0e:	695b      	ldr	r3, [r3, #20]
 8013c10:	4319      	orrs	r1, r3
 8013c12:	683b      	ldr	r3, [r7, #0]
 8013c14:	691b      	ldr	r3, [r3, #16]
 8013c16:	430b      	orrs	r3, r1
 8013c18:	431a      	orrs	r2, r3
 8013c1a:	69bb      	ldr	r3, [r7, #24]
 8013c1c:	601a      	str	r2, [r3, #0]
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013c26:	d109      	bne.n	8013c3c <XSPI_ConfigCmd+0x2f0>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 8013c28:	683b      	ldr	r3, [r7, #0]
 8013c2a:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8013c2c:	2b08      	cmp	r3, #8
 8013c2e:	d105      	bne.n	8013c3c <XSPI_ConfigCmd+0x2f0>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 8013c30:	69bb      	ldr	r3, [r7, #24]
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8013c38:	69bb      	ldr	r3, [r7, #24]
 8013c3a:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 8013c3c:	683b      	ldr	r3, [r7, #0]
 8013c3e:	689a      	ldr	r2, [r3, #8]
 8013c40:	693b      	ldr	r3, [r7, #16]
 8013c42:	601a      	str	r2, [r3, #0]
 8013c44:	e039      	b.n	8013cba <XSPI_ConfigCmd+0x36e>

    }
  }
  else
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 8013c46:	683b      	ldr	r3, [r7, #0]
 8013c48:	69db      	ldr	r3, [r3, #28]
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d030      	beq.n	8013cb0 <XSPI_ConfigCmd+0x364>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8013c4e:	683b      	ldr	r3, [r7, #0]
 8013c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d017      	beq.n	8013c86 <XSPI_ConfigCmd+0x33a>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
 8013c56:	69bb      	ldr	r3, [r7, #24]
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8013c5e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013c62:	683a      	ldr	r2, [r7, #0]
 8013c64:	69d1      	ldr	r1, [r2, #28]
 8013c66:	683a      	ldr	r2, [r7, #0]
 8013c68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013c6a:	4311      	orrs	r1, r2
 8013c6c:	683a      	ldr	r2, [r7, #0]
 8013c6e:	6a12      	ldr	r2, [r2, #32]
 8013c70:	4311      	orrs	r1, r2
 8013c72:	683a      	ldr	r2, [r7, #0]
 8013c74:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8013c76:	4311      	orrs	r1, r2
 8013c78:	683a      	ldr	r2, [r7, #0]
 8013c7a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8013c7c:	430a      	orrs	r2, r1
 8013c7e:	431a      	orrs	r2, r3
 8013c80:	69bb      	ldr	r3, [r7, #24]
 8013c82:	601a      	str	r2, [r3, #0]
 8013c84:	e00e      	b.n	8013ca4 <XSPI_ConfigCmd+0x358>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
 8013c86:	69bb      	ldr	r3, [r7, #24]
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8013c8e:	683b      	ldr	r3, [r7, #0]
 8013c90:	69d9      	ldr	r1, [r3, #28]
 8013c92:	683b      	ldr	r3, [r7, #0]
 8013c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c96:	4319      	orrs	r1, r3
 8013c98:	683b      	ldr	r3, [r7, #0]
 8013c9a:	6a1b      	ldr	r3, [r3, #32]
 8013c9c:	430b      	orrs	r3, r1
 8013c9e:	431a      	orrs	r2, r3
 8013ca0:	69bb      	ldr	r3, [r7, #24]
 8013ca2:	601a      	str	r2, [r3, #0]
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	683a      	ldr	r2, [r7, #0]
 8013caa:	6992      	ldr	r2, [r2, #24]
 8013cac:	649a      	str	r2, [r3, #72]	; 0x48
 8013cae:	e004      	b.n	8013cba <XSPI_ConfigCmd+0x36e>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8013cb0:	2301      	movs	r3, #1
 8013cb2:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	2208      	movs	r2, #8
 8013cb8:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  return status;
 8013cba:	7ffb      	ldrb	r3, [r7, #31]
}
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	3724      	adds	r7, #36	; 0x24
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc6:	4770      	bx	lr

08013cc8 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8013cc8:	b480      	push	{r7}
 8013cca:	b083      	sub	sp, #12
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]
 8013cd0:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	f043 0202 	orr.w	r2, r3, #2
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 8013cde:	683b      	ldr	r3, [r7, #0]
 8013ce0:	685a      	ldr	r2, [r3, #4]
 8013ce2:	683b      	ldr	r3, [r7, #0]
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	021b      	lsls	r3, r3, #8
 8013ce8:	431a      	orrs	r2, r3
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	f023 0202 	bic.w	r2, r3, #2
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	601a      	str	r2, [r3, #0]
}
 8013cfa:	bf00      	nop
 8013cfc:	370c      	adds	r7, #12
 8013cfe:	46bd      	mov	sp, r7
 8013d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d04:	4770      	bx	lr

08013d06 <LL_DLYB_GetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is received.
  *          - ERROR: the Delay value is not received.
  */
void LL_DLYB_GetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef *pdlyb_cfg)
{
 8013d06:	b480      	push	{r7}
 8013d08:	b083      	sub	sp, #12
 8013d0a:	af00      	add	r7, sp, #0
 8013d0c:	6078      	str	r0, [r7, #4]
 8013d0e:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Fill the DelayBlock configuration structure with SEL and UNIT value */
  pdlyb_cfg->Units = ((DLYBx->CFGR & DLYB_CFGR_UNIT) >> DLYB_CFGR_UNIT_Pos);
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	685b      	ldr	r3, [r3, #4]
 8013d14:	0a1b      	lsrs	r3, r3, #8
 8013d16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013d1a:	683b      	ldr	r3, [r7, #0]
 8013d1c:	601a      	str	r2, [r3, #0]
  pdlyb_cfg->PhaseSel = (DLYBx->CFGR & DLYB_CFGR_SEL);
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	685b      	ldr	r3, [r3, #4]
 8013d22:	f003 020f 	and.w	r2, r3, #15
 8013d26:	683b      	ldr	r3, [r7, #0]
 8013d28:	605a      	str	r2, [r3, #4]
}
 8013d2a:	bf00      	nop
 8013d2c:	370c      	adds	r7, #12
 8013d2e:	46bd      	mov	sp, r7
 8013d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d34:	4770      	bx	lr
	...

08013d38 <LL_DLYB_GetClockPeriod>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: there is a valid period detected and stored in pdlyb_cfg.
  *          - ERROR: there is no valid period detected.
  */
uint32_t LL_DLYB_GetClockPeriod(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef *pdlyb_cfg)
{
 8013d38:	b580      	push	{r7, lr}
 8013d3a:	b086      	sub	sp, #24
 8013d3c:	af00      	add	r7, sp, #0
 8013d3e:	6078      	str	r0, [r7, #4]
 8013d40:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8013d42:	2300      	movs	r3, #0
 8013d44:	617b      	str	r3, [r7, #20]

  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	f043 0202 	orr.w	r2, r3, #2
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	601a      	str	r2, [r3, #0]

  /* Delay line length detection */
  while (i < DLYB_MAX_UNIT)
 8013d52:	e02a      	b.n	8013daa <LL_DLYB_GetClockPeriod+0x72>
  {
    /* Set the Delay of the UNIT(s)*/
    DLYBx->CFGR = DLYB_MAX_SELECT | (i << DLYB_CFGR_UNIT_Pos);
 8013d54:	697b      	ldr	r3, [r7, #20]
 8013d56:	021b      	lsls	r3, r3, #8
 8013d58:	f043 020c 	orr.w	r2, r3, #12
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	605a      	str	r2, [r3, #4]

    /* Waiting for a LNG valid value */
    tickstart =  HAL_GetTick();
 8013d60:	f7f3 fd6c 	bl	800783c <HAL_GetTick>
 8013d64:	60f8      	str	r0, [r7, #12]
    while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8013d66:	e00c      	b.n	8013d82 <LL_DLYB_GetClockPeriod+0x4a>
    {
      if ((HAL_GetTick() - tickstart) >=  DLYB_TIMEOUT)
 8013d68:	f7f3 fd68 	bl	800783c <HAL_GetTick>
 8013d6c:	4602      	mov	r2, r0
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	1ad3      	subs	r3, r2, r3
 8013d72:	2bfe      	cmp	r3, #254	; 0xfe
 8013d74:	d905      	bls.n	8013d82 <LL_DLYB_GetClockPeriod+0x4a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	685b      	ldr	r3, [r3, #4]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	db01      	blt.n	8013d82 <LL_DLYB_GetClockPeriod+0x4a>
        {
          return (uint32_t) HAL_TIMEOUT;
 8013d7e:	2303      	movs	r3, #3
 8013d80:	e042      	b.n	8013e08 <LL_DLYB_GetClockPeriod+0xd0>
    while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	685b      	ldr	r3, [r3, #4]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	daee      	bge.n	8013d68 <LL_DLYB_GetClockPeriod+0x30>
        }
      }
    }

    if ((DLYBx->CFGR & DLYB_LNG_10_0_MASK) != 0U)
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	685a      	ldr	r2, [r3, #4]
 8013d8e:	4b20      	ldr	r3, [pc, #128]	; (8013e10 <LL_DLYB_GetClockPeriod+0xd8>)
 8013d90:	4013      	ands	r3, r2
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d006      	beq.n	8013da4 <LL_DLYB_GetClockPeriod+0x6c>
    {
      if ((DLYBx->CFGR & (DLYB_CFGR_LNG_11 | DLYB_CFGR_LNG_10)) != DLYB_LNG_11_10_MASK)
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	685b      	ldr	r3, [r3, #4]
 8013d9a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8013d9e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8013da2:	d106      	bne.n	8013db2 <LL_DLYB_GetClockPeriod+0x7a>
      {
        /* Delay line length is configured to one input clock period*/
        break;
      }
    }
    i++;
 8013da4:	697b      	ldr	r3, [r7, #20]
 8013da6:	3301      	adds	r3, #1
 8013da8:	617b      	str	r3, [r7, #20]
  while (i < DLYB_MAX_UNIT)
 8013daa:	697b      	ldr	r3, [r7, #20]
 8013dac:	2b7f      	cmp	r3, #127	; 0x7f
 8013dae:	d9d1      	bls.n	8013d54 <LL_DLYB_GetClockPeriod+0x1c>
 8013db0:	e000      	b.n	8013db4 <LL_DLYB_GetClockPeriod+0x7c>
        break;
 8013db2:	bf00      	nop
  }

  if (DLYB_MAX_UNIT != i)
 8013db4:	697b      	ldr	r3, [r7, #20]
 8013db6:	2b80      	cmp	r3, #128	; 0x80
 8013db8:	d022      	beq.n	8013e00 <LL_DLYB_GetClockPeriod+0xc8>
  {
    /* Determine how many unit delays (nb) span one input clock period */
    lng = (DLYBx->CFGR & DLYB_CFGR_LNG) >> 16U;
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	685b      	ldr	r3, [r3, #4]
 8013dbe:	0c1b      	lsrs	r3, r3, #16
 8013dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013dc4:	60bb      	str	r3, [r7, #8]
    nb = 10U;
 8013dc6:	230a      	movs	r3, #10
 8013dc8:	613b      	str	r3, [r7, #16]
    while ((nb > 0U) && ((lng >> nb) == 0U))
 8013dca:	e002      	b.n	8013dd2 <LL_DLYB_GetClockPeriod+0x9a>
    {
      nb--;
 8013dcc:	693b      	ldr	r3, [r7, #16]
 8013dce:	3b01      	subs	r3, #1
 8013dd0:	613b      	str	r3, [r7, #16]
    while ((nb > 0U) && ((lng >> nb) == 0U))
 8013dd2:	693b      	ldr	r3, [r7, #16]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d005      	beq.n	8013de4 <LL_DLYB_GetClockPeriod+0xac>
 8013dd8:	68ba      	ldr	r2, [r7, #8]
 8013dda:	693b      	ldr	r3, [r7, #16]
 8013ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d0f3      	beq.n	8013dcc <LL_DLYB_GetClockPeriod+0x94>
    }
    if (nb != 0U)
 8013de4:	693b      	ldr	r3, [r7, #16]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d00a      	beq.n	8013e00 <LL_DLYB_GetClockPeriod+0xc8>
    {
      pdlyb_cfg->PhaseSel = nb ;
 8013dea:	683b      	ldr	r3, [r7, #0]
 8013dec:	693a      	ldr	r2, [r7, #16]
 8013dee:	605a      	str	r2, [r3, #4]
      pdlyb_cfg->Units = i ;
 8013df0:	683b      	ldr	r3, [r7, #0]
 8013df2:	697a      	ldr	r2, [r7, #20]
 8013df4:	601a      	str	r2, [r3, #0]

      /* Disable the length sampling */
      DLYBx->CR = DLYB_CR_SEN;
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	2202      	movs	r2, #2
 8013dfa:	601a      	str	r2, [r3, #0]

      return (uint32_t)SUCCESS;
 8013dfc:	2300      	movs	r3, #0
 8013dfe:	e003      	b.n	8013e08 <LL_DLYB_GetClockPeriod+0xd0>
    }
  }

  /* Disable the length sampling */
  DLYBx->CR = DLYB_CR_SEN;
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	2202      	movs	r2, #2
 8013e04:	601a      	str	r2, [r3, #0]

  return (uint32_t)ERROR;
 8013e06:	2301      	movs	r3, #1

}
 8013e08:	4618      	mov	r0, r3
 8013e0a:	3718      	adds	r7, #24
 8013e0c:	46bd      	mov	sp, r7
 8013e0e:	bd80      	pop	{r7, pc}
 8013e10:	07ff0000 	.word	0x07ff0000

08013e14 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8013e14:	b580      	push	{r7, lr}
 8013e16:	b096      	sub	sp, #88	; 0x58
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	60f8      	str	r0, [r7, #12]
 8013e1c:	60b9      	str	r1, [r7, #8]
 8013e1e:	607a      	str	r2, [r7, #4]
 8013e20:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	3303      	adds	r3, #3
 8013e26:	f023 0303 	bic.w	r3, r3, #3
 8013e2a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013e2c:	f3ef 8310 	mrs	r3, PRIMASK
 8013e30:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8013e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8013e34:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8013e36:	b672      	cpsid	i
#endif
    return(int_posture);
 8013e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 8013e3a:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8013e3c:	4b55      	ldr	r3, [pc, #340]	; (8013f94 <_tx_byte_allocate+0x180>)
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8013e42:	2300      	movs	r3, #0
 8013e44:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013e4a:	621a      	str	r2, [r3, #32]
 8013e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013e4e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e52:	f383 8810 	msr	PRIMASK, r3
}
 8013e56:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8013e58:	6879      	ldr	r1, [r7, #4]
 8013e5a:	68f8      	ldr	r0, [r7, #12]
 8013e5c:	f000 f9b2 	bl	80141c4 <_tx_byte_pool_search>
 8013e60:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013e62:	f3ef 8310 	mrs	r3, PRIMASK
 8013e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8013e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8013e6a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8013e6c:	b672      	cpsid	i
    return(int_posture);
 8013e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8013e70:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 8013e72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d002      	beq.n	8013e7e <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8013e78:	2301      	movs	r3, #1
 8013e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013e7c:	e006      	b.n	8013e8c <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	6a1b      	ldr	r3, [r3, #32]
 8013e82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013e84:	429a      	cmp	r2, r3
 8013e86:	d101      	bne.n	8013e8c <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8013e88:	2301      	movs	r3, #1
 8013e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8013e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d0d9      	beq.n	8013e46 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 8013e92:	68bb      	ldr	r3, [r7, #8]
 8013e94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013e96:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 8013e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d008      	beq.n	8013eb0 <_tx_byte_allocate+0x9c>
 8013e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013ea0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013ea2:	6a3b      	ldr	r3, [r7, #32]
 8013ea4:	f383 8810 	msr	PRIMASK, r3
}
 8013ea8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 8013eaa:	2300      	movs	r3, #0
 8013eac:	653b      	str	r3, [r7, #80]	; 0x50
 8013eae:	e06c      	b.n	8013f8a <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8013eb0:	683b      	ldr	r3, [r7, #0]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d061      	beq.n	8013f7a <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8013eb6:	4b38      	ldr	r3, [pc, #224]	; (8013f98 <_tx_byte_allocate+0x184>)
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d007      	beq.n	8013ece <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8013ebe:	2310      	movs	r3, #16
 8013ec0:	653b      	str	r3, [r7, #80]	; 0x50
 8013ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013ec4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013ec6:	69fb      	ldr	r3, [r7, #28]
 8013ec8:	f383 8810 	msr	PRIMASK, r3
}
 8013ecc:	e05d      	b.n	8013f8a <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8013ece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ed0:	4a32      	ldr	r2, [pc, #200]	; (8013f9c <_tx_byte_allocate+0x188>)
 8013ed2:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8013ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ed6:	68fa      	ldr	r2, [r7, #12]
 8013ed8:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8013eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013edc:	68ba      	ldr	r2, [r7, #8]
 8013ede:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8013ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ee2:	687a      	ldr	r2, [r7, #4]
 8013ee4:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8013ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ee8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013eec:	1c5a      	adds	r2, r3, #1
 8013eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ef0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ef8:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013efe:	1c5a      	adds	r2, r3, #1
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8013f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d109      	bne.n	8013f1e <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013f0e:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8013f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013f14:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8013f16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013f1a:	675a      	str	r2, [r3, #116]	; 0x74
 8013f1c:	e011      	b.n	8013f42 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f22:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8013f24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013f28:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8013f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013f2e:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8013f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013f34:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8013f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013f3a:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8013f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013f40:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8013f42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f44:	2209      	movs	r2, #9
 8013f46:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8013f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f4a:	2201      	movs	r2, #1
 8013f4c:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8013f4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f50:	683a      	ldr	r2, [r7, #0]
 8013f52:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8013f54:	4b10      	ldr	r3, [pc, #64]	; (8013f98 <_tx_byte_allocate+0x184>)
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	3301      	adds	r3, #1
 8013f5a:	4a0f      	ldr	r2, [pc, #60]	; (8013f98 <_tx_byte_allocate+0x184>)
 8013f5c:	6013      	str	r3, [r2, #0]
 8013f5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013f60:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013f62:	69bb      	ldr	r3, [r7, #24]
 8013f64:	f383 8810 	msr	PRIMASK, r3
}
 8013f68:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8013f6a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8013f6c:	f001 fb02 	bl	8015574 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8013f70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013f76:	653b      	str	r3, [r7, #80]	; 0x50
 8013f78:	e007      	b.n	8013f8a <_tx_byte_allocate+0x176>
 8013f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013f7c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013f7e:	697b      	ldr	r3, [r7, #20]
 8013f80:	f383 8810 	msr	PRIMASK, r3
}
 8013f84:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8013f86:	2310      	movs	r3, #16
 8013f88:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 8013f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	3758      	adds	r7, #88	; 0x58
 8013f90:	46bd      	mov	sp, r7
 8013f92:	bd80      	pop	{r7, pc}
 8013f94:	201973d4 	.word	0x201973d4
 8013f98:	2019746c 	.word	0x2019746c
 8013f9c:	08013fa1 	.word	0x08013fa1

08013fa0 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8013fa0:	b580      	push	{r7, lr}
 8013fa2:	b08e      	sub	sp, #56	; 0x38
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	6078      	str	r0, [r7, #4]
 8013fa8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013faa:	f3ef 8310 	mrs	r3, PRIMASK
 8013fae:	623b      	str	r3, [r7, #32]
    return(posture);
 8013fb0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8013fb2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013fb4:	b672      	cpsid	i
    return(int_posture);
 8013fb6:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8013fb8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013fbe:	4a33      	ldr	r2, [pc, #204]	; (801408c <_tx_byte_pool_cleanup+0xec>)
 8013fc0:	4293      	cmp	r3, r2
 8013fc2:	d158      	bne.n	8014076 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013fca:	683a      	ldr	r2, [r7, #0]
 8013fcc:	429a      	cmp	r2, r3
 8013fce:	d152      	bne.n	8014076 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fd4:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8013fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d04c      	beq.n	8014076 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8013fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	4a2b      	ldr	r2, [pc, #172]	; (8014090 <_tx_byte_pool_cleanup+0xf0>)
 8013fe2:	4293      	cmp	r3, r2
 8013fe4:	d147      	bne.n	8014076 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8013fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d043      	beq.n	8014076 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	2200      	movs	r2, #0
 8013ff2:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8013ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ff8:	1e5a      	subs	r2, r3, #1
 8013ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ffc:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8013ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014002:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8014004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014006:	2b00      	cmp	r3, #0
 8014008:	d103      	bne.n	8014012 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 801400a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801400c:	2200      	movs	r2, #0
 801400e:	625a      	str	r2, [r3, #36]	; 0x24
 8014010:	e013      	b.n	801403a <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014016:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801401c:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014022:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8014024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014028:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 801402a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801402e:	687a      	ldr	r2, [r7, #4]
 8014030:	429a      	cmp	r2, r3
 8014032:	d102      	bne.n	801403a <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8014034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014036:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014038:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801403e:	2b09      	cmp	r3, #9
 8014040:	d119      	bne.n	8014076 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	2210      	movs	r2, #16
 8014046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801404a:	4b12      	ldr	r3, [pc, #72]	; (8014094 <_tx_byte_pool_cleanup+0xf4>)
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	3301      	adds	r3, #1
 8014050:	4a10      	ldr	r2, [pc, #64]	; (8014094 <_tx_byte_pool_cleanup+0xf4>)
 8014052:	6013      	str	r3, [r2, #0]
 8014054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014056:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014058:	693b      	ldr	r3, [r7, #16]
 801405a:	f383 8810 	msr	PRIMASK, r3
}
 801405e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8014060:	6878      	ldr	r0, [r7, #4]
 8014062:	f001 f987 	bl	8015374 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014066:	f3ef 8310 	mrs	r3, PRIMASK
 801406a:	61bb      	str	r3, [r7, #24]
    return(posture);
 801406c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801406e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014070:	b672      	cpsid	i
    return(int_posture);
 8014072:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8014074:	637b      	str	r3, [r7, #52]	; 0x34
 8014076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014078:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	f383 8810 	msr	PRIMASK, r3
}
 8014080:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8014082:	bf00      	nop
 8014084:	3738      	adds	r7, #56	; 0x38
 8014086:	46bd      	mov	sp, r7
 8014088:	bd80      	pop	{r7, pc}
 801408a:	bf00      	nop
 801408c:	08013fa1 	.word	0x08013fa1
 8014090:	42595445 	.word	0x42595445
 8014094:	2019746c 	.word	0x2019746c

08014098 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8014098:	b580      	push	{r7, lr}
 801409a:	b08e      	sub	sp, #56	; 0x38
 801409c:	af00      	add	r7, sp, #0
 801409e:	60f8      	str	r0, [r7, #12]
 80140a0:	60b9      	str	r1, [r7, #8]
 80140a2:	607a      	str	r2, [r7, #4]
 80140a4:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 80140a6:	2234      	movs	r2, #52	; 0x34
 80140a8:	2100      	movs	r1, #0
 80140aa:	68f8      	ldr	r0, [r7, #12]
 80140ac:	f015 f884 	bl	80291b8 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80140b0:	683b      	ldr	r3, [r7, #0]
 80140b2:	f023 0303 	bic.w	r3, r3, #3
 80140b6:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	68ba      	ldr	r2, [r7, #8]
 80140bc:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	687a      	ldr	r2, [r7, #4]
 80140c2:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	683a      	ldr	r2, [r7, #0]
 80140c8:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	687a      	ldr	r2, [r7, #4]
 80140ce:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	687a      	ldr	r2, [r7, #4]
 80140d4:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 80140d6:	683b      	ldr	r3, [r7, #0]
 80140d8:	f1a3 0208 	sub.w	r2, r3, #8
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	2202      	movs	r2, #2
 80140e4:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 80140ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80140ec:	683b      	ldr	r3, [r7, #0]
 80140ee:	4413      	add	r3, r2
 80140f0:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 80140f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140f4:	3b04      	subs	r3, #4
 80140f6:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80140fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8014100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014104:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8014106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014108:	3b04      	subs	r3, #4
 801410a:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 801410c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801410e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8014110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014112:	687a      	ldr	r2, [r7, #4]
 8014114:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 801411a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801411c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 801411e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014120:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014122:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8014128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801412a:	3304      	adds	r3, #4
 801412c:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 801412e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014130:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8014132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014134:	4a1f      	ldr	r2, [pc, #124]	; (80141b4 <_tx_byte_pool_create+0x11c>)
 8014136:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	2200      	movs	r2, #0
 801413c:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801413e:	f3ef 8310 	mrs	r3, PRIMASK
 8014142:	61bb      	str	r3, [r7, #24]
    return(posture);
 8014144:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8014146:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014148:	b672      	cpsid	i
    return(int_posture);
 801414a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 801414c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	4a19      	ldr	r2, [pc, #100]	; (80141b8 <_tx_byte_pool_create+0x120>)
 8014152:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8014154:	4b19      	ldr	r3, [pc, #100]	; (80141bc <_tx_byte_pool_create+0x124>)
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	2b00      	cmp	r3, #0
 801415a:	d109      	bne.n	8014170 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 801415c:	4a18      	ldr	r2, [pc, #96]	; (80141c0 <_tx_byte_pool_create+0x128>)
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	68fa      	ldr	r2, [r7, #12]
 8014166:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	68fa      	ldr	r2, [r7, #12]
 801416c:	631a      	str	r2, [r3, #48]	; 0x30
 801416e:	e011      	b.n	8014194 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8014170:	4b13      	ldr	r3, [pc, #76]	; (80141c0 <_tx_byte_pool_create+0x128>)
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8014176:	6a3b      	ldr	r3, [r7, #32]
 8014178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801417a:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 801417c:	6a3b      	ldr	r3, [r7, #32]
 801417e:	68fa      	ldr	r2, [r7, #12]
 8014180:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8014182:	69fb      	ldr	r3, [r7, #28]
 8014184:	68fa      	ldr	r2, [r7, #12]
 8014186:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	69fa      	ldr	r2, [r7, #28]
 801418c:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	6a3a      	ldr	r2, [r7, #32]
 8014192:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8014194:	4b09      	ldr	r3, [pc, #36]	; (80141bc <_tx_byte_pool_create+0x124>)
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	3301      	adds	r3, #1
 801419a:	4a08      	ldr	r2, [pc, #32]	; (80141bc <_tx_byte_pool_create+0x124>)
 801419c:	6013      	str	r3, [r2, #0]
 801419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141a0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80141a2:	693b      	ldr	r3, [r7, #16]
 80141a4:	f383 8810 	msr	PRIMASK, r3
}
 80141a8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80141aa:	2300      	movs	r3, #0
}
 80141ac:	4618      	mov	r0, r3
 80141ae:	3738      	adds	r7, #56	; 0x38
 80141b0:	46bd      	mov	sp, r7
 80141b2:	bd80      	pop	{r7, pc}
 80141b4:	ffffeeee 	.word	0xffffeeee
 80141b8:	42595445 	.word	0x42595445
 80141bc:	201973c8 	.word	0x201973c8
 80141c0:	201973c4 	.word	0x201973c4

080141c4 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 80141c4:	b480      	push	{r7}
 80141c6:	b097      	sub	sp, #92	; 0x5c
 80141c8:	af00      	add	r7, sp, #0
 80141ca:	6078      	str	r0, [r7, #4]
 80141cc:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 80141ce:	2300      	movs	r3, #0
 80141d0:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80141d2:	f3ef 8310 	mrs	r3, PRIMASK
 80141d6:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80141d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80141da:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80141dc:	b672      	cpsid	i
    return(int_posture);
 80141de:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 80141e0:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	689a      	ldr	r2, [r3, #8]
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	68db      	ldr	r3, [r3, #12]
 80141ea:	3b02      	subs	r3, #2
 80141ec:	00db      	lsls	r3, r3, #3
 80141ee:	4413      	add	r3, r2
 80141f0:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 80141f2:	683a      	ldr	r2, [r7, #0]
 80141f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80141f6:	429a      	cmp	r2, r3
 80141f8:	d308      	bcc.n	801420c <_tx_byte_pool_search+0x48>
 80141fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80141fc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80141fe:	69fb      	ldr	r3, [r7, #28]
 8014200:	f383 8810 	msr	PRIMASK, r3
}
 8014204:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8014206:	2300      	movs	r3, #0
 8014208:	653b      	str	r3, [r7, #80]	; 0x50
 801420a:	e0dd      	b.n	80143c8 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 801420c:	4b72      	ldr	r3, [pc, #456]	; (80143d8 <_tx_byte_pool_search+0x214>)
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014216:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	695b      	ldr	r3, [r3, #20]
 801421c:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	68db      	ldr	r3, [r3, #12]
 8014222:	3301      	adds	r3, #1
 8014224:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 8014226:	2300      	movs	r3, #0
 8014228:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 801422a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801422c:	3304      	adds	r3, #4
 801422e:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8014230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014232:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8014234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	4a68      	ldr	r2, [pc, #416]	; (80143dc <_tx_byte_pool_search+0x218>)
 801423a:	4293      	cmp	r3, r2
 801423c:	d143      	bne.n	80142c6 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 801423e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014240:	2b00      	cmp	r3, #0
 8014242:	d104      	bne.n	801424e <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014248:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 801424a:	2301      	movs	r3, #1
 801424c:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801424e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014250:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 8014252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8014258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801425a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801425c:	1ad3      	subs	r3, r2, r3
 801425e:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8014260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014262:	3b08      	subs	r3, #8
 8014264:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8014266:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014268:	683b      	ldr	r3, [r7, #0]
 801426a:	429a      	cmp	r2, r3
 801426c:	d257      	bcs.n	801431e <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 801426e:	2300      	movs	r3, #0
 8014270:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8014272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014274:	3304      	adds	r3, #4
 8014276:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8014278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801427a:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 801427c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	4a56      	ldr	r2, [pc, #344]	; (80143dc <_tx_byte_pool_search+0x218>)
 8014282:	4293      	cmp	r3, r2
 8014284:	d113      	bne.n	80142ae <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8014286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014288:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 801428a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801428c:	681a      	ldr	r2, [r3, #0]
 801428e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014290:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	68db      	ldr	r3, [r3, #12]
 8014296:	1e5a      	subs	r2, r3, #1
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	695b      	ldr	r3, [r3, #20]
 80142a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142a2:	429a      	cmp	r2, r3
 80142a4:	d114      	bne.n	80142d0 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80142aa:	615a      	str	r2, [r3, #20]
 80142ac:	e010      	b.n	80142d0 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80142ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142b0:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 80142b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 80142b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d008      	beq.n	80142d0 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 80142be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142c0:	3b01      	subs	r3, #1
 80142c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80142c4:	e004      	b.n	80142d0 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80142c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80142c8:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 80142ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 80142d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d002      	beq.n	80142dc <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 80142d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142d8:	3b01      	subs	r3, #1
 80142da:	64bb      	str	r3, [r7, #72]	; 0x48
 80142dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80142de:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80142e0:	693b      	ldr	r3, [r7, #16]
 80142e2:	f383 8810 	msr	PRIMASK, r3
}
 80142e6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80142e8:	f3ef 8310 	mrs	r3, PRIMASK
 80142ec:	61bb      	str	r3, [r7, #24]
    return(posture);
 80142ee:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80142f0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80142f2:	b672      	cpsid	i
    return(int_posture);
 80142f4:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 80142f6:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	6a1b      	ldr	r3, [r3, #32]
 80142fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80142fe:	429a      	cmp	r2, r3
 8014300:	d009      	beq.n	8014316 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	695b      	ldr	r3, [r3, #20]
 8014306:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	68db      	ldr	r3, [r3, #12]
 801430c:	3301      	adds	r3, #1
 801430e:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014314:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8014316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014318:	2b00      	cmp	r3, #0
 801431a:	d186      	bne.n	801422a <_tx_byte_pool_search+0x66>
 801431c:	e000      	b.n	8014320 <_tx_byte_pool_search+0x15c>
                    break;
 801431e:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8014320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014322:	2b00      	cmp	r3, #0
 8014324:	d048      	beq.n	80143b8 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8014326:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014328:	683b      	ldr	r3, [r7, #0]
 801432a:	1ad3      	subs	r3, r2, r3
 801432c:	2b13      	cmp	r3, #19
 801432e:	d91e      	bls.n	801436e <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8014330:	683b      	ldr	r3, [r7, #0]
 8014332:	3308      	adds	r3, #8
 8014334:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014336:	4413      	add	r3, r2
 8014338:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 801433a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801433c:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801433e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014340:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 8014342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014344:	681a      	ldr	r2, [r3, #0]
 8014346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014348:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 801434a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801434c:	3304      	adds	r3, #4
 801434e:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8014350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014352:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8014354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014356:	4a21      	ldr	r2, [pc, #132]	; (80143dc <_tx_byte_pool_search+0x218>)
 8014358:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	68db      	ldr	r3, [r3, #12]
 801435e:	1c5a      	adds	r2, r3, #1
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8014364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014366:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014368:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 801436a:	683b      	ldr	r3, [r7, #0]
 801436c:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 801436e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014370:	3304      	adds	r3, #4
 8014372:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8014374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014376:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8014378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801437a:	687a      	ldr	r2, [r7, #4]
 801437c:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	689a      	ldr	r2, [r3, #8]
 8014382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014384:	1ad3      	subs	r3, r2, r3
 8014386:	f1a3 0208 	sub.w	r2, r3, #8
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	695b      	ldr	r3, [r3, #20]
 8014392:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014394:	429a      	cmp	r2, r3
 8014396:	d105      	bne.n	80143a4 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8014398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801439a:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 801439c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801439e:	681a      	ldr	r2, [r3, #0]
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	615a      	str	r2, [r3, #20]
 80143a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80143a6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	f383 8810 	msr	PRIMASK, r3
}
 80143ae:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 80143b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80143b2:	3308      	adds	r3, #8
 80143b4:	653b      	str	r3, [r7, #80]	; 0x50
 80143b6:	e007      	b.n	80143c8 <_tx_byte_pool_search+0x204>
 80143b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80143ba:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80143bc:	68bb      	ldr	r3, [r7, #8]
 80143be:	f383 8810 	msr	PRIMASK, r3
}
 80143c2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 80143c4:	2300      	movs	r3, #0
 80143c6:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 80143c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 80143ca:	4618      	mov	r0, r3
 80143cc:	375c      	adds	r7, #92	; 0x5c
 80143ce:	46bd      	mov	sp, r7
 80143d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143d4:	4770      	bx	lr
 80143d6:	bf00      	nop
 80143d8:	201973d4 	.word	0x201973d4
 80143dc:	ffffeeee 	.word	0xffffeeee

080143e0 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 80143e0:	b580      	push	{r7, lr}
 80143e2:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 80143e4:	f000 ff04 	bl	80151f0 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 80143e8:	f001 fa8c 	bl	8015904 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 80143ec:	4b12      	ldr	r3, [pc, #72]	; (8014438 <_tx_initialize_high_level+0x58>)
 80143ee:	2200      	movs	r2, #0
 80143f0:	601a      	str	r2, [r3, #0]
 80143f2:	4b12      	ldr	r3, [pc, #72]	; (801443c <_tx_initialize_high_level+0x5c>)
 80143f4:	2200      	movs	r2, #0
 80143f6:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 80143f8:	4b11      	ldr	r3, [pc, #68]	; (8014440 <_tx_initialize_high_level+0x60>)
 80143fa:	2200      	movs	r2, #0
 80143fc:	601a      	str	r2, [r3, #0]
 80143fe:	4b11      	ldr	r3, [pc, #68]	; (8014444 <_tx_initialize_high_level+0x64>)
 8014400:	2200      	movs	r2, #0
 8014402:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8014404:	4b10      	ldr	r3, [pc, #64]	; (8014448 <_tx_initialize_high_level+0x68>)
 8014406:	2200      	movs	r2, #0
 8014408:	601a      	str	r2, [r3, #0]
 801440a:	4b10      	ldr	r3, [pc, #64]	; (801444c <_tx_initialize_high_level+0x6c>)
 801440c:	2200      	movs	r2, #0
 801440e:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8014410:	4b0f      	ldr	r3, [pc, #60]	; (8014450 <_tx_initialize_high_level+0x70>)
 8014412:	2200      	movs	r2, #0
 8014414:	601a      	str	r2, [r3, #0]
 8014416:	4b0f      	ldr	r3, [pc, #60]	; (8014454 <_tx_initialize_high_level+0x74>)
 8014418:	2200      	movs	r2, #0
 801441a:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 801441c:	4b0e      	ldr	r3, [pc, #56]	; (8014458 <_tx_initialize_high_level+0x78>)
 801441e:	2200      	movs	r2, #0
 8014420:	601a      	str	r2, [r3, #0]
 8014422:	4b0e      	ldr	r3, [pc, #56]	; (801445c <_tx_initialize_high_level+0x7c>)
 8014424:	2200      	movs	r2, #0
 8014426:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8014428:	4b0d      	ldr	r3, [pc, #52]	; (8014460 <_tx_initialize_high_level+0x80>)
 801442a:	2200      	movs	r2, #0
 801442c:	601a      	str	r2, [r3, #0]
 801442e:	4b0d      	ldr	r3, [pc, #52]	; (8014464 <_tx_initialize_high_level+0x84>)
 8014430:	2200      	movs	r2, #0
 8014432:	601a      	str	r2, [r3, #0]
#endif
}
 8014434:	bf00      	nop
 8014436:	bd80      	pop	{r7, pc}
 8014438:	2019739c 	.word	0x2019739c
 801443c:	201973a0 	.word	0x201973a0
 8014440:	201973a4 	.word	0x201973a4
 8014444:	201973a8 	.word	0x201973a8
 8014448:	201973ac 	.word	0x201973ac
 801444c:	201973b0 	.word	0x201973b0
 8014450:	201973bc 	.word	0x201973bc
 8014454:	201973c0 	.word	0x201973c0
 8014458:	201973c4 	.word	0x201973c4
 801445c:	201973c8 	.word	0x201973c8
 8014460:	201973b4 	.word	0x201973b4
 8014464:	201973b8 	.word	0x201973b8

08014468 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8014468:	b580      	push	{r7, lr}
 801446a:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 801446c:	4b10      	ldr	r3, [pc, #64]	; (80144b0 <_tx_initialize_kernel_enter+0x48>)
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8014474:	d00c      	beq.n	8014490 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8014476:	4b0e      	ldr	r3, [pc, #56]	; (80144b0 <_tx_initialize_kernel_enter+0x48>)
 8014478:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 801447c:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 801447e:	f7eb ff15 	bl	80002ac <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8014482:	f7ff ffad 	bl	80143e0 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8014486:	4b0b      	ldr	r3, [pc, #44]	; (80144b4 <_tx_initialize_kernel_enter+0x4c>)
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	3301      	adds	r3, #1
 801448c:	4a09      	ldr	r2, [pc, #36]	; (80144b4 <_tx_initialize_kernel_enter+0x4c>)
 801448e:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8014490:	4b07      	ldr	r3, [pc, #28]	; (80144b0 <_tx_initialize_kernel_enter+0x48>)
 8014492:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8014496:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8014498:	4b07      	ldr	r3, [pc, #28]	; (80144b8 <_tx_initialize_kernel_enter+0x50>)
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	4618      	mov	r0, r3
 801449e:	f7ec f9bb 	bl	8000818 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 80144a2:	4b03      	ldr	r3, [pc, #12]	; (80144b0 <_tx_initialize_kernel_enter+0x48>)
 80144a4:	2200      	movs	r2, #0
 80144a6:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 80144a8:	f7eb ff3c 	bl	8000324 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80144ac:	bf00      	nop
 80144ae:	bd80      	pop	{r7, pc}
 80144b0:	20000054 	.word	0x20000054
 80144b4:	2019746c 	.word	0x2019746c
 80144b8:	201973cc 	.word	0x201973cc

080144bc <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 80144bc:	b580      	push	{r7, lr}
 80144be:	b08e      	sub	sp, #56	; 0x38
 80144c0:	af00      	add	r7, sp, #0
 80144c2:	6078      	str	r0, [r7, #4]
 80144c4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80144c6:	f3ef 8310 	mrs	r3, PRIMASK
 80144ca:	623b      	str	r3, [r7, #32]
    return(posture);
 80144cc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80144ce:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80144d0:	b672      	cpsid	i
    return(int_posture);
 80144d2:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 80144d4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80144da:	4a37      	ldr	r2, [pc, #220]	; (80145b8 <_tx_queue_cleanup+0xfc>)
 80144dc:	4293      	cmp	r3, r2
 80144de:	d161      	bne.n	80145a4 <_tx_queue_cleanup+0xe8>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80144e6:	683a      	ldr	r2, [r7, #0]
 80144e8:	429a      	cmp	r2, r3
 80144ea:	d15b      	bne.n	80145a4 <_tx_queue_cleanup+0xe8>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144f0:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 80144f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d055      	beq.n	80145a4 <_tx_queue_cleanup+0xe8>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 80144f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	4a2f      	ldr	r2, [pc, #188]	; (80145bc <_tx_queue_cleanup+0x100>)
 80144fe:	4293      	cmp	r3, r2
 8014500:	d150      	bne.n	80145a4 <_tx_queue_cleanup+0xe8>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 8014502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014506:	2b00      	cmp	r3, #0
 8014508:	d04c      	beq.n	80145a4 <_tx_queue_cleanup+0xe8>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	2200      	movs	r2, #0
 801450e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 8014510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014514:	1e5a      	subs	r2, r3, #1
 8014516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014518:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 801451a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801451c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801451e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8014520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014522:	2b00      	cmp	r3, #0
 8014524:	d103      	bne.n	801452e <_tx_queue_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8014526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014528:	2200      	movs	r2, #0
 801452a:	629a      	str	r2, [r3, #40]	; 0x28
 801452c:	e013      	b.n	8014556 <_tx_queue_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014532:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014538:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801453a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801453c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801453e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8014540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014542:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014544:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 8014546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801454a:	687a      	ldr	r2, [r7, #4]
 801454c:	429a      	cmp	r2, r3
 801454e:	d102      	bne.n	8014556 <_tx_queue_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 8014550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014552:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014554:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801455a:	2b05      	cmp	r3, #5
 801455c:	d122      	bne.n	80145a4 <_tx_queue_cleanup+0xe8>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 801455e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014560:	691b      	ldr	r3, [r3, #16]
 8014562:	2b00      	cmp	r3, #0
 8014564:	d004      	beq.n	8014570 <_tx_queue_cleanup+0xb4>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	220b      	movs	r2, #11
 801456a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 801456e:	e003      	b.n	8014578 <_tx_queue_cleanup+0xbc>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	220a      	movs	r2, #10
 8014574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8014578:	4b11      	ldr	r3, [pc, #68]	; (80145c0 <_tx_queue_cleanup+0x104>)
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	3301      	adds	r3, #1
 801457e:	4a10      	ldr	r2, [pc, #64]	; (80145c0 <_tx_queue_cleanup+0x104>)
 8014580:	6013      	str	r3, [r2, #0]
 8014582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014584:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014586:	693b      	ldr	r3, [r7, #16]
 8014588:	f383 8810 	msr	PRIMASK, r3
}
 801458c:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 801458e:	6878      	ldr	r0, [r7, #4]
 8014590:	f000 fef0 	bl	8015374 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014594:	f3ef 8310 	mrs	r3, PRIMASK
 8014598:	61bb      	str	r3, [r7, #24]
    return(posture);
 801459a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801459c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801459e:	b672      	cpsid	i
    return(int_posture);
 80145a0:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80145a2:	637b      	str	r3, [r7, #52]	; 0x34
 80145a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145a6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	f383 8810 	msr	PRIMASK, r3
}
 80145ae:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80145b0:	bf00      	nop
 80145b2:	3738      	adds	r7, #56	; 0x38
 80145b4:	46bd      	mov	sp, r7
 80145b6:	bd80      	pop	{r7, pc}
 80145b8:	080144bd 	.word	0x080144bd
 80145bc:	51554555 	.word	0x51554555
 80145c0:	2019746c 	.word	0x2019746c

080145c4 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 80145c4:	b580      	push	{r7, lr}
 80145c6:	b08c      	sub	sp, #48	; 0x30
 80145c8:	af00      	add	r7, sp, #0
 80145ca:	60f8      	str	r0, [r7, #12]
 80145cc:	60b9      	str	r1, [r7, #8]
 80145ce:	607a      	str	r2, [r7, #4]
 80145d0:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 80145d2:	2238      	movs	r2, #56	; 0x38
 80145d4:	2100      	movs	r1, #0
 80145d6:	68f8      	ldr	r0, [r7, #12]
 80145d8:	f014 fdee 	bl	80291b8 <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	68ba      	ldr	r2, [r7, #8]
 80145e0:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	687a      	ldr	r2, [r7, #4]
 80145e6:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	009b      	lsls	r3, r3, #2
 80145ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80145ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80145f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    used_words =  capacity * message_size;
 80145f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145f6:	687a      	ldr	r2, [r7, #4]
 80145f8:	fb02 f303 	mul.w	r3, r2, r3
 80145fc:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	683a      	ldr	r2, [r7, #0]
 8014602:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	699a      	ldr	r2, [r3, #24]
 8014608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801460a:	009b      	lsls	r3, r3, #2
 801460c:	441a      	add	r2, r3
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	683a      	ldr	r2, [r7, #0]
 8014616:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	683a      	ldr	r2, [r7, #0]
 801461c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014622:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014628:	60da      	str	r2, [r3, #12]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801462a:	f3ef 8310 	mrs	r3, PRIMASK
 801462e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8014630:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8014632:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014634:	b672      	cpsid	i
    return(int_posture);
 8014636:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 8014638:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	4a18      	ldr	r2, [pc, #96]	; (80146a0 <_tx_queue_create+0xdc>)
 801463e:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 8014640:	4b18      	ldr	r3, [pc, #96]	; (80146a4 <_tx_queue_create+0xe0>)
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d109      	bne.n	801465c <_tx_queue_create+0x98>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 8014648:	4a17      	ldr	r2, [pc, #92]	; (80146a8 <_tx_queue_create+0xe4>)
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	68fa      	ldr	r2, [r7, #12]
 8014652:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	68fa      	ldr	r2, [r7, #12]
 8014658:	635a      	str	r2, [r3, #52]	; 0x34
 801465a:	e011      	b.n	8014680 <_tx_queue_create+0xbc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 801465c:	4b12      	ldr	r3, [pc, #72]	; (80146a8 <_tx_queue_create+0xe4>)
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	623b      	str	r3, [r7, #32]
        previous_queue =  next_queue -> tx_queue_created_previous;
 8014662:	6a3b      	ldr	r3, [r7, #32]
 8014664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014666:	61fb      	str	r3, [r7, #28]

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 8014668:	6a3b      	ldr	r3, [r7, #32]
 801466a:	68fa      	ldr	r2, [r7, #12]
 801466c:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 801466e:	69fb      	ldr	r3, [r7, #28]
 8014670:	68fa      	ldr	r2, [r7, #12]
 8014672:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	69fa      	ldr	r2, [r7, #28]
 8014678:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	6a3a      	ldr	r2, [r7, #32]
 801467e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 8014680:	4b08      	ldr	r3, [pc, #32]	; (80146a4 <_tx_queue_create+0xe0>)
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	3301      	adds	r3, #1
 8014686:	4a07      	ldr	r2, [pc, #28]	; (80146a4 <_tx_queue_create+0xe0>)
 8014688:	6013      	str	r3, [r2, #0]
 801468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801468c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801468e:	693b      	ldr	r3, [r7, #16]
 8014690:	f383 8810 	msr	PRIMASK, r3
}
 8014694:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8014696:	2300      	movs	r3, #0
}
 8014698:	4618      	mov	r0, r3
 801469a:	3730      	adds	r7, #48	; 0x30
 801469c:	46bd      	mov	sp, r7
 801469e:	bd80      	pop	{r7, pc}
 80146a0:	51554555 	.word	0x51554555
 80146a4:	201973a8 	.word	0x201973a8
 80146a8:	201973a4 	.word	0x201973a4

080146ac <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 80146ac:	b580      	push	{r7, lr}
 80146ae:	b096      	sub	sp, #88	; 0x58
 80146b0:	af00      	add	r7, sp, #0
 80146b2:	60f8      	str	r0, [r7, #12]
 80146b4:	60b9      	str	r1, [r7, #8]
 80146b6:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 80146b8:	2300      	movs	r3, #0
 80146ba:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80146bc:	f3ef 8310 	mrs	r3, PRIMASK
 80146c0:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 80146c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 80146c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 80146c6:	b672      	cpsid	i
    return(int_posture);
 80146c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 80146ca:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146d0:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	691b      	ldr	r3, [r3, #16]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	f000 8136 	beq.w	8014948 <_tx_queue_receive+0x29c>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 80146dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d13c      	bne.n	801475c <_tx_queue_receive+0xb0>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	6a1b      	ldr	r3, [r3, #32]
 80146e6:	657b      	str	r3, [r7, #84]	; 0x54
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 80146e8:	68bb      	ldr	r3, [r7, #8]
 80146ea:	653b      	str	r3, [r7, #80]	; 0x50
            size =         queue_ptr -> tx_queue_message_size;
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	689b      	ldr	r3, [r3, #8]
 80146f0:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80146f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80146f4:	1d13      	adds	r3, r2, #4
 80146f6:	657b      	str	r3, [r7, #84]	; 0x54
 80146f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80146fa:	1d19      	adds	r1, r3, #4
 80146fc:	6539      	str	r1, [r7, #80]	; 0x50
 80146fe:	6812      	ldr	r2, [r2, #0]
 8014700:	601a      	str	r2, [r3, #0]
 8014702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014704:	2b01      	cmp	r3, #1
 8014706:	d90e      	bls.n	8014726 <_tx_queue_receive+0x7a>
 8014708:	e007      	b.n	801471a <_tx_queue_receive+0x6e>
 801470a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801470c:	1d13      	adds	r3, r2, #4
 801470e:	657b      	str	r3, [r7, #84]	; 0x54
 8014710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014712:	1d19      	adds	r1, r3, #4
 8014714:	6539      	str	r1, [r7, #80]	; 0x50
 8014716:	6812      	ldr	r2, [r2, #0]
 8014718:	601a      	str	r2, [r3, #0]
 801471a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801471c:	3b01      	subs	r3, #1
 801471e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014722:	2b00      	cmp	r3, #0
 8014724:	d1f1      	bne.n	801470a <_tx_queue_receive+0x5e>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	69db      	ldr	r3, [r3, #28]
 801472a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801472c:	429a      	cmp	r2, r3
 801472e:	d102      	bne.n	8014736 <_tx_queue_receive+0x8a>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	699b      	ldr	r3, [r3, #24]
 8014734:	657b      	str	r3, [r7, #84]	; 0x54
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801473a:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	695b      	ldr	r3, [r3, #20]
 8014740:	1c5a      	adds	r2, r3, #1
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	691b      	ldr	r3, [r3, #16]
 801474a:	1e5a      	subs	r2, r3, #1
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	611a      	str	r2, [r3, #16]
 8014750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014752:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014756:	f383 8810 	msr	PRIMASK, r3
}
 801475a:	e163      	b.n	8014a24 <_tx_queue_receive+0x378>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014760:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 8014762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014764:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014768:	2b01      	cmp	r3, #1
 801476a:	d153      	bne.n	8014814 <_tx_queue_receive+0x168>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 801476c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801476e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014770:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8014772:	68bb      	ldr	r3, [r7, #8]
 8014774:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	689b      	ldr	r3, [r3, #8]
 801477a:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 801477c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801477e:	1d13      	adds	r3, r2, #4
 8014780:	657b      	str	r3, [r7, #84]	; 0x54
 8014782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014784:	1d19      	adds	r1, r3, #4
 8014786:	6539      	str	r1, [r7, #80]	; 0x50
 8014788:	6812      	ldr	r2, [r2, #0]
 801478a:	601a      	str	r2, [r3, #0]
 801478c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801478e:	2b01      	cmp	r3, #1
 8014790:	d90e      	bls.n	80147b0 <_tx_queue_receive+0x104>
 8014792:	e007      	b.n	80147a4 <_tx_queue_receive+0xf8>
 8014794:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014796:	1d13      	adds	r3, r2, #4
 8014798:	657b      	str	r3, [r7, #84]	; 0x54
 801479a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801479c:	1d19      	adds	r1, r3, #4
 801479e:	6539      	str	r1, [r7, #80]	; 0x50
 80147a0:	6812      	ldr	r2, [r2, #0]
 80147a2:	601a      	str	r2, [r3, #0]
 80147a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80147a6:	3b01      	subs	r3, #1
 80147a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80147aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d1f1      	bne.n	8014794 <_tx_queue_receive+0xe8>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 80147b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80147b2:	3b01      	subs	r3, #1
 80147b4:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 80147b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d103      	bne.n	80147c4 <_tx_queue_receive+0x118>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	2200      	movs	r2, #0
 80147c0:	629a      	str	r2, [r3, #40]	; 0x28
 80147c2:	e00e      	b.n	80147e2 <_tx_queue_receive+0x136>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 80147c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80147c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147c8:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80147ce:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 80147d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80147d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80147d4:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 80147d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80147da:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 80147dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80147e0:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80147e6:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80147e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80147ea:	2200      	movs	r2, #0
 80147ec:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80147ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80147f0:	2200      	movs	r2, #0
 80147f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80147f6:	4b8e      	ldr	r3, [pc, #568]	; (8014a30 <_tx_queue_receive+0x384>)
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	3301      	adds	r3, #1
 80147fc:	4a8c      	ldr	r2, [pc, #560]	; (8014a30 <_tx_queue_receive+0x384>)
 80147fe:	6013      	str	r3, [r2, #0]
 8014800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014802:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014806:	f383 8810 	msr	PRIMASK, r3
}
 801480a:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 801480c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801480e:	f000 fdb1 	bl	8015374 <_tx_thread_system_resume>
 8014812:	e107      	b.n	8014a24 <_tx_queue_receive+0x378>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	6a1b      	ldr	r3, [r3, #32]
 8014818:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 801481a:	68bb      	ldr	r3, [r7, #8]
 801481c:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	689b      	ldr	r3, [r3, #8]
 8014822:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8014824:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014826:	1d13      	adds	r3, r2, #4
 8014828:	657b      	str	r3, [r7, #84]	; 0x54
 801482a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801482c:	1d19      	adds	r1, r3, #4
 801482e:	6539      	str	r1, [r7, #80]	; 0x50
 8014830:	6812      	ldr	r2, [r2, #0]
 8014832:	601a      	str	r2, [r3, #0]
 8014834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014836:	2b01      	cmp	r3, #1
 8014838:	d90e      	bls.n	8014858 <_tx_queue_receive+0x1ac>
 801483a:	e007      	b.n	801484c <_tx_queue_receive+0x1a0>
 801483c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801483e:	1d13      	adds	r3, r2, #4
 8014840:	657b      	str	r3, [r7, #84]	; 0x54
 8014842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014844:	1d19      	adds	r1, r3, #4
 8014846:	6539      	str	r1, [r7, #80]	; 0x50
 8014848:	6812      	ldr	r2, [r2, #0]
 801484a:	601a      	str	r2, [r3, #0]
 801484c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801484e:	3b01      	subs	r3, #1
 8014850:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014854:	2b00      	cmp	r3, #0
 8014856:	d1f1      	bne.n	801483c <_tx_queue_receive+0x190>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	69db      	ldr	r3, [r3, #28]
 801485c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801485e:	429a      	cmp	r2, r3
 8014860:	d102      	bne.n	8014868 <_tx_queue_receive+0x1bc>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	699b      	ldr	r3, [r3, #24]
 8014866:	657b      	str	r3, [r7, #84]	; 0x54
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801486c:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 801486e:	4b70      	ldr	r3, [pc, #448]	; (8014a30 <_tx_queue_receive+0x384>)
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	3301      	adds	r3, #1
 8014874:	4a6e      	ldr	r2, [pc, #440]	; (8014a30 <_tx_queue_receive+0x384>)
 8014876:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 8014878:	4b6d      	ldr	r3, [pc, #436]	; (8014a30 <_tx_queue_receive+0x384>)
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	3b01      	subs	r3, #1
 801487e:	4a6c      	ldr	r2, [pc, #432]	; (8014a30 <_tx_queue_receive+0x384>)
 8014880:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8014882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014884:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014886:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  queue_ptr -> tx_queue_write;
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801488c:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	689b      	ldr	r3, [r3, #8]
 8014892:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8014894:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014896:	1d13      	adds	r3, r2, #4
 8014898:	657b      	str	r3, [r7, #84]	; 0x54
 801489a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801489c:	1d19      	adds	r1, r3, #4
 801489e:	6539      	str	r1, [r7, #80]	; 0x50
 80148a0:	6812      	ldr	r2, [r2, #0]
 80148a2:	601a      	str	r2, [r3, #0]
 80148a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148a6:	2b01      	cmp	r3, #1
 80148a8:	d90e      	bls.n	80148c8 <_tx_queue_receive+0x21c>
 80148aa:	e007      	b.n	80148bc <_tx_queue_receive+0x210>
 80148ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80148ae:	1d13      	adds	r3, r2, #4
 80148b0:	657b      	str	r3, [r7, #84]	; 0x54
 80148b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148b4:	1d19      	adds	r1, r3, #4
 80148b6:	6539      	str	r1, [r7, #80]	; 0x50
 80148b8:	6812      	ldr	r2, [r2, #0]
 80148ba:	601a      	str	r2, [r3, #0]
 80148bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148be:	3b01      	subs	r3, #1
 80148c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80148c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d1f1      	bne.n	80148ac <_tx_queue_receive+0x200>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	69db      	ldr	r3, [r3, #28]
 80148cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80148ce:	429a      	cmp	r2, r3
 80148d0:	d102      	bne.n	80148d8 <_tx_queue_receive+0x22c>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	699b      	ldr	r3, [r3, #24]
 80148d6:	653b      	str	r3, [r7, #80]	; 0x50
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80148dc:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80148e2:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 80148e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80148e6:	3b01      	subs	r3, #1
 80148e8:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 80148ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d103      	bne.n	80148f8 <_tx_queue_receive+0x24c>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	2200      	movs	r2, #0
 80148f4:	629a      	str	r2, [r3, #40]	; 0x28
 80148f6:	e00e      	b.n	8014916 <_tx_queue_receive+0x26a>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 80148f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80148fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80148fc:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014902:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8014904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014908:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 801490a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801490c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801490e:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 8014910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014912:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014914:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801491a:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801491c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801491e:	2200      	movs	r2, #0
 8014920:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8014922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014924:	2200      	movs	r2, #0
 8014926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 801492a:	4b41      	ldr	r3, [pc, #260]	; (8014a30 <_tx_queue_receive+0x384>)
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	3301      	adds	r3, #1
 8014930:	4a3f      	ldr	r2, [pc, #252]	; (8014a30 <_tx_queue_receive+0x384>)
 8014932:	6013      	str	r3, [r2, #0]
 8014934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014936:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014938:	6a3b      	ldr	r3, [r7, #32]
 801493a:	f383 8810 	msr	PRIMASK, r3
}
 801493e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 8014940:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014942:	f000 fd17 	bl	8015374 <_tx_thread_system_resume>
 8014946:	e06d      	b.n	8014a24 <_tx_queue_receive+0x378>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	2b00      	cmp	r3, #0
 801494c:	d062      	beq.n	8014a14 <_tx_queue_receive+0x368>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 801494e:	4b38      	ldr	r3, [pc, #224]	; (8014a30 <_tx_queue_receive+0x384>)
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	2b00      	cmp	r3, #0
 8014954:	d008      	beq.n	8014968 <_tx_queue_receive+0x2bc>
 8014956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014958:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801495a:	69fb      	ldr	r3, [r7, #28]
 801495c:	f383 8810 	msr	PRIMASK, r3
}
 8014960:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 8014962:	230a      	movs	r3, #10
 8014964:	64bb      	str	r3, [r7, #72]	; 0x48
 8014966:	e05d      	b.n	8014a24 <_tx_queue_receive+0x378>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8014968:	4b32      	ldr	r3, [pc, #200]	; (8014a34 <_tx_queue_receive+0x388>)
 801496a:	681b      	ldr	r3, [r3, #0]
 801496c:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 801496e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014970:	4a31      	ldr	r2, [pc, #196]	; (8014a38 <_tx_queue_receive+0x38c>)
 8014972:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8014974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014976:	68fa      	ldr	r2, [r7, #12]
 8014978:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 801497a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801497c:	68ba      	ldr	r2, [r7, #8]
 801497e:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8014980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014982:	2200      	movs	r2, #0
 8014984:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8014988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801498a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801498e:	1c5a      	adds	r2, r3, #1
 8014990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014992:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 8014996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014998:	2b00      	cmp	r3, #0
 801499a:	d109      	bne.n	80149b0 <_tx_queue_receive+0x304>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80149a0:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 80149a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80149a6:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 80149a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80149ac:	675a      	str	r2, [r3, #116]	; 0x74
 80149ae:	e011      	b.n	80149d4 <_tx_queue_receive+0x328>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80149b4:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 80149b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80149ba:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80149bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80149c0:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80149c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80149c6:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80149c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80149cc:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80149ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80149d2:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 80149d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80149d6:	1c5a      	adds	r2, r3, #1
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 80149dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149de:	2205      	movs	r2, #5
 80149e0:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80149e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149e4:	2201      	movs	r2, #1
 80149e6:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80149e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149ea:	687a      	ldr	r2, [r7, #4]
 80149ec:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80149ee:	4b10      	ldr	r3, [pc, #64]	; (8014a30 <_tx_queue_receive+0x384>)
 80149f0:	681b      	ldr	r3, [r3, #0]
 80149f2:	3301      	adds	r3, #1
 80149f4:	4a0e      	ldr	r2, [pc, #56]	; (8014a30 <_tx_queue_receive+0x384>)
 80149f6:	6013      	str	r3, [r2, #0]
 80149f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80149fa:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80149fc:	69bb      	ldr	r3, [r7, #24]
 80149fe:	f383 8810 	msr	PRIMASK, r3
}
 8014a02:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8014a04:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014a06:	f000 fdb5 	bl	8015574 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8014a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014a10:	64bb      	str	r3, [r7, #72]	; 0x48
 8014a12:	e007      	b.n	8014a24 <_tx_queue_receive+0x378>
 8014a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a16:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014a18:	697b      	ldr	r3, [r7, #20]
 8014a1a:	f383 8810 	msr	PRIMASK, r3
}
 8014a1e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 8014a20:	230a      	movs	r3, #10
 8014a22:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Return completion status.  */
    return(status);
 8014a24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8014a26:	4618      	mov	r0, r3
 8014a28:	3758      	adds	r7, #88	; 0x58
 8014a2a:	46bd      	mov	sp, r7
 8014a2c:	bd80      	pop	{r7, pc}
 8014a2e:	bf00      	nop
 8014a30:	2019746c 	.word	0x2019746c
 8014a34:	201973d4 	.word	0x201973d4
 8014a38:	080144bd 	.word	0x080144bd

08014a3c <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8014a3c:	b580      	push	{r7, lr}
 8014a3e:	b094      	sub	sp, #80	; 0x50
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	60f8      	str	r0, [r7, #12]
 8014a44:	60b9      	str	r1, [r7, #8]
 8014a46:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8014a48:	2300      	movs	r3, #0
 8014a4a:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014a4c:	f3ef 8310 	mrs	r3, PRIMASK
 8014a50:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8014a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8014a54:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8014a56:	b672      	cpsid	i
    return(int_posture);
 8014a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 8014a5a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a60:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	695b      	ldr	r3, [r3, #20]
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	f000 809b 	beq.w	8014ba2 <_tx_queue_send+0x166>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8014a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d13c      	bne.n	8014aec <_tx_queue_send+0xb0>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	695b      	ldr	r3, [r3, #20]
 8014a76:	1e5a      	subs	r2, r3, #1
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	691b      	ldr	r3, [r3, #16]
 8014a80:	1c5a      	adds	r2, r3, #1
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8014a86:	68bb      	ldr	r3, [r7, #8]
 8014a88:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  queue_ptr -> tx_queue_write;
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a8e:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	689b      	ldr	r3, [r3, #8]
 8014a94:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8014a96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014a98:	1d13      	adds	r3, r2, #4
 8014a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014a9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014a9e:	1d19      	adds	r1, r3, #4
 8014aa0:	64b9      	str	r1, [r7, #72]	; 0x48
 8014aa2:	6812      	ldr	r2, [r2, #0]
 8014aa4:	601a      	str	r2, [r3, #0]
 8014aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014aa8:	2b01      	cmp	r3, #1
 8014aaa:	d90e      	bls.n	8014aca <_tx_queue_send+0x8e>
 8014aac:	e007      	b.n	8014abe <_tx_queue_send+0x82>
 8014aae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014ab0:	1d13      	adds	r3, r2, #4
 8014ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014ab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014ab6:	1d19      	adds	r1, r3, #4
 8014ab8:	64b9      	str	r1, [r7, #72]	; 0x48
 8014aba:	6812      	ldr	r2, [r2, #0]
 8014abc:	601a      	str	r2, [r3, #0]
 8014abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ac0:	3b01      	subs	r3, #1
 8014ac2:	647b      	str	r3, [r7, #68]	; 0x44
 8014ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d1f1      	bne.n	8014aae <_tx_queue_send+0x72>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	69db      	ldr	r3, [r3, #28]
 8014ace:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014ad0:	429a      	cmp	r2, r3
 8014ad2:	d102      	bne.n	8014ada <_tx_queue_send+0x9e>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	699b      	ldr	r3, [r3, #24]
 8014ad8:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014ade:	625a      	str	r2, [r3, #36]	; 0x24
 8014ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ae2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014ae4:	6a3b      	ldr	r3, [r7, #32]
 8014ae6:	f383 8810 	msr	PRIMASK, r3
}
 8014aea:	e0c8      	b.n	8014c7e <_tx_queue_send+0x242>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014af0:	637b      	str	r3, [r7, #52]	; 0x34

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 8014af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014af4:	3b01      	subs	r3, #1
 8014af6:	63bb      	str	r3, [r7, #56]	; 0x38
            if (suspended_count == TX_NO_SUSPENSIONS)
 8014af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d103      	bne.n	8014b06 <_tx_queue_send+0xca>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	2200      	movs	r2, #0
 8014b02:	629a      	str	r2, [r3, #40]	; 0x28
 8014b04:	e012      	b.n	8014b2c <_tx_queue_send+0xf0>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8014b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8014b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014b12:	633b      	str	r3, [r7, #48]	; 0x30
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b18:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8014b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 8014b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014b24:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 8014b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b2a:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8014b2c:	68fb      	ldr	r3, [r7, #12]
 8014b2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014b30:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8014b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b34:	2200      	movs	r2, #0
 8014b36:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8014b38:	68bb      	ldr	r3, [r7, #8]
 8014b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8014b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b40:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	689b      	ldr	r3, [r3, #8]
 8014b46:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8014b48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014b4a:	1d13      	adds	r3, r2, #4
 8014b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014b4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014b50:	1d19      	adds	r1, r3, #4
 8014b52:	64b9      	str	r1, [r7, #72]	; 0x48
 8014b54:	6812      	ldr	r2, [r2, #0]
 8014b56:	601a      	str	r2, [r3, #0]
 8014b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b5a:	2b01      	cmp	r3, #1
 8014b5c:	d90e      	bls.n	8014b7c <_tx_queue_send+0x140>
 8014b5e:	e007      	b.n	8014b70 <_tx_queue_send+0x134>
 8014b60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014b62:	1d13      	adds	r3, r2, #4
 8014b64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014b66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014b68:	1d19      	adds	r1, r3, #4
 8014b6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8014b6c:	6812      	ldr	r2, [r2, #0]
 8014b6e:	601a      	str	r2, [r3, #0]
 8014b70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b72:	3b01      	subs	r3, #1
 8014b74:	647b      	str	r3, [r7, #68]	; 0x44
 8014b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d1f1      	bne.n	8014b60 <_tx_queue_send+0x124>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8014b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b7e:	2200      	movs	r2, #0
 8014b80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8014b84:	4b40      	ldr	r3, [pc, #256]	; (8014c88 <_tx_queue_send+0x24c>)
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	3301      	adds	r3, #1
 8014b8a:	4a3f      	ldr	r2, [pc, #252]	; (8014c88 <_tx_queue_send+0x24c>)
 8014b8c:	6013      	str	r3, [r2, #0]
 8014b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b90:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014b92:	69fb      	ldr	r3, [r7, #28]
 8014b94:	f383 8810 	msr	PRIMASK, r3
}
 8014b98:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 8014b9a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014b9c:	f000 fbea 	bl	8015374 <_tx_thread_system_resume>
 8014ba0:	e06d      	b.n	8014c7e <_tx_queue_send+0x242>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d062      	beq.n	8014c6e <_tx_queue_send+0x232>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8014ba8:	4b37      	ldr	r3, [pc, #220]	; (8014c88 <_tx_queue_send+0x24c>)
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d008      	beq.n	8014bc2 <_tx_queue_send+0x186>
 8014bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014bb2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014bb4:	69bb      	ldr	r3, [r7, #24]
 8014bb6:	f383 8810 	msr	PRIMASK, r3
}
 8014bba:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 8014bbc:	230b      	movs	r3, #11
 8014bbe:	643b      	str	r3, [r7, #64]	; 0x40
 8014bc0:	e05d      	b.n	8014c7e <_tx_queue_send+0x242>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8014bc2:	4b32      	ldr	r3, [pc, #200]	; (8014c8c <_tx_queue_send+0x250>)
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	637b      	str	r3, [r7, #52]	; 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8014bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bca:	4a31      	ldr	r2, [pc, #196]	; (8014c90 <_tx_queue_send+0x254>)
 8014bcc:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8014bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bd0:	68fa      	ldr	r2, [r7, #12]
 8014bd2:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 8014bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bd6:	68ba      	ldr	r2, [r7, #8]
 8014bd8:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8014bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bdc:	2200      	movs	r2, #0
 8014bde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8014be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014be4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014be8:	1c5a      	adds	r2, r3, #1
 8014bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bec:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 8014bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d109      	bne.n	8014c0a <_tx_queue_send+0x1ce>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014bfa:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8014bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014c00:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8014c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014c06:	675a      	str	r2, [r3, #116]	; 0x74
 8014c08:	e011      	b.n	8014c2e <_tx_queue_send+0x1f2>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c0e:	633b      	str	r3, [r7, #48]	; 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8014c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c14:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8014c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8014c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014c20:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8014c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014c26:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8014c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014c2c:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 8014c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c30:	1c5a      	adds	r2, r3, #1
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8014c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c38:	2205      	movs	r2, #5
 8014c3a:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8014c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c3e:	2201      	movs	r2, #1
 8014c40:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8014c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c44:	687a      	ldr	r2, [r7, #4]
 8014c46:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8014c48:	4b0f      	ldr	r3, [pc, #60]	; (8014c88 <_tx_queue_send+0x24c>)
 8014c4a:	681b      	ldr	r3, [r3, #0]
 8014c4c:	3301      	adds	r3, #1
 8014c4e:	4a0e      	ldr	r2, [pc, #56]	; (8014c88 <_tx_queue_send+0x24c>)
 8014c50:	6013      	str	r3, [r2, #0]
 8014c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c54:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014c56:	697b      	ldr	r3, [r7, #20]
 8014c58:	f383 8810 	msr	PRIMASK, r3
}
 8014c5c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8014c5e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014c60:	f000 fc88 	bl	8015574 <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8014c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014c6a:	643b      	str	r3, [r7, #64]	; 0x40
 8014c6c:	e007      	b.n	8014c7e <_tx_queue_send+0x242>
 8014c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c70:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014c72:	693b      	ldr	r3, [r7, #16]
 8014c74:	f383 8810 	msr	PRIMASK, r3
}
 8014c78:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 8014c7a:	230b      	movs	r3, #11
 8014c7c:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Return completion status.  */
    return(status);
 8014c7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8014c80:	4618      	mov	r0, r3
 8014c82:	3750      	adds	r7, #80	; 0x50
 8014c84:	46bd      	mov	sp, r7
 8014c86:	bd80      	pop	{r7, pc}
 8014c88:	2019746c 	.word	0x2019746c
 8014c8c:	201973d4 	.word	0x201973d4
 8014c90:	080144bd 	.word	0x080144bd

08014c94 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8014c94:	b580      	push	{r7, lr}
 8014c96:	b08e      	sub	sp, #56	; 0x38
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	6078      	str	r0, [r7, #4]
 8014c9c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014c9e:	f3ef 8310 	mrs	r3, PRIMASK
 8014ca2:	623b      	str	r3, [r7, #32]
    return(posture);
 8014ca4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8014ca6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014ca8:	b672      	cpsid	i
    return(int_posture);
 8014caa:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 8014cac:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014cb2:	4a33      	ldr	r2, [pc, #204]	; (8014d80 <_tx_semaphore_cleanup+0xec>)
 8014cb4:	4293      	cmp	r3, r2
 8014cb6:	d158      	bne.n	8014d6a <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014cbe:	683a      	ldr	r2, [r7, #0]
 8014cc0:	429a      	cmp	r2, r3
 8014cc2:	d152      	bne.n	8014d6a <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014cc8:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 8014cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d04c      	beq.n	8014d6a <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 8014cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	4a2b      	ldr	r2, [pc, #172]	; (8014d84 <_tx_semaphore_cleanup+0xf0>)
 8014cd6:	4293      	cmp	r3, r2
 8014cd8:	d147      	bne.n	8014d6a <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 8014cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cdc:	691b      	ldr	r3, [r3, #16]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d043      	beq.n	8014d6a <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	2200      	movs	r2, #0
 8014ce6:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 8014ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cea:	691b      	ldr	r3, [r3, #16]
 8014cec:	1e5a      	subs	r2, r3, #1
 8014cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cf0:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8014cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cf4:	691b      	ldr	r3, [r3, #16]
 8014cf6:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8014cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d103      	bne.n	8014d06 <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8014cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d00:	2200      	movs	r2, #0
 8014d02:	60da      	str	r2, [r3, #12]
 8014d04:	e013      	b.n	8014d2e <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d0a:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014d10:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8014d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d16:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8014d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014d1c:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 8014d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d20:	68db      	ldr	r3, [r3, #12]
 8014d22:	687a      	ldr	r2, [r7, #4]
 8014d24:	429a      	cmp	r2, r3
 8014d26:	d102      	bne.n	8014d2e <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8014d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014d2c:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d32:	2b06      	cmp	r3, #6
 8014d34:	d119      	bne.n	8014d6a <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	220d      	movs	r2, #13
 8014d3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8014d3e:	4b12      	ldr	r3, [pc, #72]	; (8014d88 <_tx_semaphore_cleanup+0xf4>)
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	3301      	adds	r3, #1
 8014d44:	4a10      	ldr	r2, [pc, #64]	; (8014d88 <_tx_semaphore_cleanup+0xf4>)
 8014d46:	6013      	str	r3, [r2, #0]
 8014d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d4a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014d4c:	693b      	ldr	r3, [r7, #16]
 8014d4e:	f383 8810 	msr	PRIMASK, r3
}
 8014d52:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8014d54:	6878      	ldr	r0, [r7, #4]
 8014d56:	f000 fb0d 	bl	8015374 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014d5a:	f3ef 8310 	mrs	r3, PRIMASK
 8014d5e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8014d60:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8014d62:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014d64:	b672      	cpsid	i
    return(int_posture);
 8014d66:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8014d68:	637b      	str	r3, [r7, #52]	; 0x34
 8014d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d6c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	f383 8810 	msr	PRIMASK, r3
}
 8014d74:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8014d76:	bf00      	nop
 8014d78:	3738      	adds	r7, #56	; 0x38
 8014d7a:	46bd      	mov	sp, r7
 8014d7c:	bd80      	pop	{r7, pc}
 8014d7e:	bf00      	nop
 8014d80:	08014c95 	.word	0x08014c95
 8014d84:	53454d41 	.word	0x53454d41
 8014d88:	2019746c 	.word	0x2019746c

08014d8c <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	b08a      	sub	sp, #40	; 0x28
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	60f8      	str	r0, [r7, #12]
 8014d94:	60b9      	str	r1, [r7, #8]
 8014d96:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 8014d98:	221c      	movs	r2, #28
 8014d9a:	2100      	movs	r1, #0
 8014d9c:	68f8      	ldr	r0, [r7, #12]
 8014d9e:	f014 fa0b 	bl	80291b8 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	68ba      	ldr	r2, [r7, #8]
 8014da6:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	687a      	ldr	r2, [r7, #4]
 8014dac:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014dae:	f3ef 8310 	mrs	r3, PRIMASK
 8014db2:	61bb      	str	r3, [r7, #24]
    return(posture);
 8014db4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8014db6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014db8:	b672      	cpsid	i
    return(int_posture);
 8014dba:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 8014dbc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	4a18      	ldr	r2, [pc, #96]	; (8014e24 <_tx_semaphore_create+0x98>)
 8014dc2:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8014dc4:	4b18      	ldr	r3, [pc, #96]	; (8014e28 <_tx_semaphore_create+0x9c>)
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d109      	bne.n	8014de0 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8014dcc:	4a17      	ldr	r2, [pc, #92]	; (8014e2c <_tx_semaphore_create+0xa0>)
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	68fa      	ldr	r2, [r7, #12]
 8014dd6:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	68fa      	ldr	r2, [r7, #12]
 8014ddc:	619a      	str	r2, [r3, #24]
 8014dde:	e011      	b.n	8014e04 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 8014de0:	4b12      	ldr	r3, [pc, #72]	; (8014e2c <_tx_semaphore_create+0xa0>)
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8014de6:	6a3b      	ldr	r3, [r7, #32]
 8014de8:	699b      	ldr	r3, [r3, #24]
 8014dea:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 8014dec:	6a3b      	ldr	r3, [r7, #32]
 8014dee:	68fa      	ldr	r2, [r7, #12]
 8014df0:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 8014df2:	69fb      	ldr	r3, [r7, #28]
 8014df4:	68fa      	ldr	r2, [r7, #12]
 8014df6:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	69fa      	ldr	r2, [r7, #28]
 8014dfc:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	6a3a      	ldr	r2, [r7, #32]
 8014e02:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8014e04:	4b08      	ldr	r3, [pc, #32]	; (8014e28 <_tx_semaphore_create+0x9c>)
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	3301      	adds	r3, #1
 8014e0a:	4a07      	ldr	r2, [pc, #28]	; (8014e28 <_tx_semaphore_create+0x9c>)
 8014e0c:	6013      	str	r3, [r2, #0]
 8014e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e10:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014e12:	693b      	ldr	r3, [r7, #16]
 8014e14:	f383 8810 	msr	PRIMASK, r3
}
 8014e18:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8014e1a:	2300      	movs	r3, #0
}
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	3728      	adds	r7, #40	; 0x28
 8014e20:	46bd      	mov	sp, r7
 8014e22:	bd80      	pop	{r7, pc}
 8014e24:	53454d41 	.word	0x53454d41
 8014e28:	201973a0 	.word	0x201973a0
 8014e2c:	2019739c 	.word	0x2019739c

08014e30 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8014e30:	b580      	push	{r7, lr}
 8014e32:	b08e      	sub	sp, #56	; 0x38
 8014e34:	af00      	add	r7, sp, #0
 8014e36:	6078      	str	r0, [r7, #4]
 8014e38:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8014e3a:	2300      	movs	r3, #0
 8014e3c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8014e42:	623b      	str	r3, [r7, #32]
    return(posture);
 8014e44:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8014e46:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014e48:	b672      	cpsid	i
    return(int_posture);
 8014e4a:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 8014e4c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	689b      	ldr	r3, [r3, #8]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d00a      	beq.n	8014e6c <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	689b      	ldr	r3, [r3, #8]
 8014e5a:	1e5a      	subs	r2, r3, #1
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	609a      	str	r2, [r3, #8]
 8014e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e62:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014e64:	69bb      	ldr	r3, [r7, #24]
 8014e66:	f383 8810 	msr	PRIMASK, r3
}
 8014e6a:	e068      	b.n	8014f3e <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8014e6c:	683b      	ldr	r3, [r7, #0]
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d05d      	beq.n	8014f2e <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8014e72:	4b35      	ldr	r3, [pc, #212]	; (8014f48 <_tx_semaphore_get+0x118>)
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d008      	beq.n	8014e8c <_tx_semaphore_get+0x5c>
 8014e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e7c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014e7e:	697b      	ldr	r3, [r7, #20]
 8014e80:	f383 8810 	msr	PRIMASK, r3
}
 8014e84:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 8014e86:	230d      	movs	r3, #13
 8014e88:	637b      	str	r3, [r7, #52]	; 0x34
 8014e8a:	e058      	b.n	8014f3e <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8014e8c:	4b2f      	ldr	r3, [pc, #188]	; (8014f4c <_tx_semaphore_get+0x11c>)
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8014e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e94:	4a2e      	ldr	r2, [pc, #184]	; (8014f50 <_tx_semaphore_get+0x120>)
 8014e96:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 8014e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e9a:	687a      	ldr	r2, [r7, #4]
 8014e9c:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8014e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ea0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014ea4:	1c5a      	adds	r2, r3, #1
 8014ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ea8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	691b      	ldr	r3, [r3, #16]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d109      	bne.n	8014ec8 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014eb8:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 8014eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014ebe:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8014ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014ec4:	675a      	str	r2, [r3, #116]	; 0x74
 8014ec6:	e011      	b.n	8014eec <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	68db      	ldr	r3, [r3, #12]
 8014ecc:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8014ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014ed2:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8014ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014ed8:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8014eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ede:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8014ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014ee4:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8014ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014eea:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	691b      	ldr	r3, [r3, #16]
 8014ef0:	1c5a      	adds	r2, r3, #1
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 8014ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ef8:	2206      	movs	r2, #6
 8014efa:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8014efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014efe:	2201      	movs	r2, #1
 8014f00:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8014f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f04:	683a      	ldr	r2, [r7, #0]
 8014f06:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8014f08:	4b0f      	ldr	r3, [pc, #60]	; (8014f48 <_tx_semaphore_get+0x118>)
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	3301      	adds	r3, #1
 8014f0e:	4a0e      	ldr	r2, [pc, #56]	; (8014f48 <_tx_semaphore_get+0x118>)
 8014f10:	6013      	str	r3, [r2, #0]
 8014f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f14:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014f16:	693b      	ldr	r3, [r7, #16]
 8014f18:	f383 8810 	msr	PRIMASK, r3
}
 8014f1c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8014f1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014f20:	f000 fb28 	bl	8015574 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8014f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014f2a:	637b      	str	r3, [r7, #52]	; 0x34
 8014f2c:	e007      	b.n	8014f3e <_tx_semaphore_get+0x10e>
 8014f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f30:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	f383 8810 	msr	PRIMASK, r3
}
 8014f38:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 8014f3a:	230d      	movs	r3, #13
 8014f3c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 8014f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014f40:	4618      	mov	r0, r3
 8014f42:	3738      	adds	r7, #56	; 0x38
 8014f44:	46bd      	mov	sp, r7
 8014f46:	bd80      	pop	{r7, pc}
 8014f48:	2019746c 	.word	0x2019746c
 8014f4c:	201973d4 	.word	0x201973d4
 8014f50:	08014c95 	.word	0x08014c95

08014f54 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8014f54:	b580      	push	{r7, lr}
 8014f56:	b08c      	sub	sp, #48	; 0x30
 8014f58:	af00      	add	r7, sp, #0
 8014f5a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014f5c:	f3ef 8310 	mrs	r3, PRIMASK
 8014f60:	61bb      	str	r3, [r7, #24]
    return(posture);
 8014f62:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8014f64:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014f66:	b672      	cpsid	i
    return(int_posture);
 8014f68:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 8014f6a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	691b      	ldr	r3, [r3, #16]
 8014f70:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8014f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d10a      	bne.n	8014f8e <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	689b      	ldr	r3, [r3, #8]
 8014f7c:	1c5a      	adds	r2, r3, #1
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	609a      	str	r2, [r3, #8]
 8014f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f84:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014f86:	693b      	ldr	r3, [r7, #16]
 8014f88:	f383 8810 	msr	PRIMASK, r3
}
 8014f8c:	e033      	b.n	8014ff6 <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	68db      	ldr	r3, [r3, #12]
 8014f92:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8014f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f96:	3b01      	subs	r3, #1
 8014f98:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 8014f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d103      	bne.n	8014fa8 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	2200      	movs	r2, #0
 8014fa4:	60da      	str	r2, [r3, #12]
 8014fa6:	e00e      	b.n	8014fc6 <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 8014fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014fac:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	6a3a      	ldr	r2, [r7, #32]
 8014fb2:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8014fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014fb8:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8014fba:	6a3b      	ldr	r3, [r7, #32]
 8014fbc:	69fa      	ldr	r2, [r7, #28]
 8014fbe:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8014fc0:	69fb      	ldr	r3, [r7, #28]
 8014fc2:	6a3a      	ldr	r2, [r7, #32]
 8014fc4:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014fca:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8014fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fce:	2200      	movs	r2, #0
 8014fd0:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8014fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fd4:	2200      	movs	r2, #0
 8014fd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8014fda:	4b09      	ldr	r3, [pc, #36]	; (8015000 <_tx_semaphore_put+0xac>)
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	3301      	adds	r3, #1
 8014fe0:	4a07      	ldr	r2, [pc, #28]	; (8015000 <_tx_semaphore_put+0xac>)
 8014fe2:	6013      	str	r3, [r2, #0]
 8014fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fe6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	f383 8810 	msr	PRIMASK, r3
}
 8014fee:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8014ff0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014ff2:	f000 f9bf 	bl	8015374 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8014ff6:	2300      	movs	r3, #0
}
 8014ff8:	4618      	mov	r0, r3
 8014ffa:	3730      	adds	r7, #48	; 0x30
 8014ffc:	46bd      	mov	sp, r7
 8014ffe:	bd80      	pop	{r7, pc}
 8015000:	2019746c 	.word	0x2019746c

08015004 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8015004:	b580      	push	{r7, lr}
 8015006:	b092      	sub	sp, #72	; 0x48
 8015008:	af00      	add	r7, sp, #0
 801500a:	60f8      	str	r0, [r7, #12]
 801500c:	60b9      	str	r1, [r7, #8]
 801500e:	607a      	str	r2, [r7, #4]
 8015010:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8015012:	2300      	movs	r3, #0
 8015014:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8015016:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015018:	21ef      	movs	r1, #239	; 0xef
 801501a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801501c:	f014 f8cc 	bl	80291b8 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8015020:	22b0      	movs	r2, #176	; 0xb0
 8015022:	2100      	movs	r1, #0
 8015024:	68f8      	ldr	r0, [r7, #12]
 8015026:	f014 f8c7 	bl	80291b8 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	68ba      	ldr	r2, [r7, #8]
 801502e:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	687a      	ldr	r2, [r7, #4]
 8015034:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	683a      	ldr	r2, [r7, #0]
 801503a:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015040:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015046:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801504c:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015052:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801505a:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015060:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8015062:	68fb      	ldr	r3, [r7, #12]
 8015064:	2220      	movs	r2, #32
 8015066:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 801506a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801506c:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 801506e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015070:	3b01      	subs	r3, #1
 8015072:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015074:	4413      	add	r3, r2
 8015076:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801507c:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 801507e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015080:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015082:	429a      	cmp	r2, r3
 8015084:	d007      	beq.n	8015096 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8015086:	68fb      	ldr	r3, [r7, #12]
 8015088:	2200      	movs	r2, #0
 801508a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	2200      	movs	r2, #0
 8015090:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8015094:	e006      	b.n	80150a4 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801509a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80150a0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	2203      	movs	r2, #3
 80150a8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	4a48      	ldr	r2, [pc, #288]	; (80151d0 <_tx_thread_create+0x1cc>)
 80150ae:	655a      	str	r2, [r3, #84]	; 0x54
 80150b0:	68fa      	ldr	r2, [r7, #12]
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 80150b6:	4947      	ldr	r1, [pc, #284]	; (80151d4 <_tx_thread_create+0x1d0>)
 80150b8:	68f8      	ldr	r0, [r7, #12]
 80150ba:	f7eb f9a1 	bl	8000400 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80150be:	f3ef 8310 	mrs	r3, PRIMASK
 80150c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80150c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80150c6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80150c8:	b672      	cpsid	i
    return(int_posture);
 80150ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 80150cc:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	4a41      	ldr	r2, [pc, #260]	; (80151d8 <_tx_thread_create+0x1d4>)
 80150d2:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 80150d4:	4b41      	ldr	r3, [pc, #260]	; (80151dc <_tx_thread_create+0x1d8>)
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d10b      	bne.n	80150f4 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 80150dc:	4a40      	ldr	r2, [pc, #256]	; (80151e0 <_tx_thread_create+0x1dc>)
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	68fa      	ldr	r2, [r7, #12]
 80150e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	68fa      	ldr	r2, [r7, #12]
 80150ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80150f2:	e016      	b.n	8015122 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 80150f4:	4b3a      	ldr	r3, [pc, #232]	; (80151e0 <_tx_thread_create+0x1dc>)
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 80150fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015100:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8015102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015104:	68fa      	ldr	r2, [r7, #12]
 8015106:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 801510a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801510c:	68fa      	ldr	r2, [r7, #12]
 801510e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015116:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801511e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8015122:	4b2e      	ldr	r3, [pc, #184]	; (80151dc <_tx_thread_create+0x1d8>)
 8015124:	681b      	ldr	r3, [r3, #0]
 8015126:	3301      	adds	r3, #1
 8015128:	4a2c      	ldr	r2, [pc, #176]	; (80151dc <_tx_thread_create+0x1d8>)
 801512a:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 801512c:	4b2d      	ldr	r3, [pc, #180]	; (80151e4 <_tx_thread_create+0x1e0>)
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	3301      	adds	r3, #1
 8015132:	4a2c      	ldr	r2, [pc, #176]	; (80151e4 <_tx_thread_create+0x1e0>)
 8015134:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8015136:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015138:	2b01      	cmp	r3, #1
 801513a:	d129      	bne.n	8015190 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801513c:	f3ef 8305 	mrs	r3, IPSR
 8015140:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8015142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8015144:	4b28      	ldr	r3, [pc, #160]	; (80151e8 <_tx_thread_create+0x1e4>)
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	4313      	orrs	r3, r2
 801514a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801514e:	d30d      	bcc.n	801516c <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8015150:	4b26      	ldr	r3, [pc, #152]	; (80151ec <_tx_thread_create+0x1e8>)
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8015156:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015158:	2b00      	cmp	r3, #0
 801515a:	d009      	beq.n	8015170 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 801515c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801515e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015160:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8015162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015168:	63da      	str	r2, [r3, #60]	; 0x3c
 801516a:	e001      	b.n	8015170 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 801516c:	2300      	movs	r3, #0
 801516e:	647b      	str	r3, [r7, #68]	; 0x44
 8015170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015172:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015174:	6a3b      	ldr	r3, [r7, #32]
 8015176:	f383 8810 	msr	PRIMASK, r3
}
 801517a:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 801517c:	68f8      	ldr	r0, [r7, #12]
 801517e:	f000 f8f9 	bl	8015374 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8015182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015184:	2b00      	cmp	r3, #0
 8015186:	d01e      	beq.n	80151c6 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8015188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801518a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801518c:	63da      	str	r2, [r3, #60]	; 0x3c
 801518e:	e01a      	b.n	80151c6 <_tx_thread_create+0x1c2>
 8015190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015192:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015194:	693b      	ldr	r3, [r7, #16]
 8015196:	f383 8810 	msr	PRIMASK, r3
}
 801519a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801519c:	f3ef 8310 	mrs	r3, PRIMASK
 80151a0:	61bb      	str	r3, [r7, #24]
    return(posture);
 80151a2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80151a4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80151a6:	b672      	cpsid	i
    return(int_posture);
 80151a8:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 80151aa:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 80151ac:	4b0d      	ldr	r3, [pc, #52]	; (80151e4 <_tx_thread_create+0x1e0>)
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	3b01      	subs	r3, #1
 80151b2:	4a0c      	ldr	r2, [pc, #48]	; (80151e4 <_tx_thread_create+0x1e0>)
 80151b4:	6013      	str	r3, [r2, #0]
 80151b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151b8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80151ba:	69fb      	ldr	r3, [r7, #28]
 80151bc:	f383 8810 	msr	PRIMASK, r3
}
 80151c0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80151c2:	f000 f89d 	bl	8015300 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 80151c6:	2300      	movs	r3, #0
}
 80151c8:	4618      	mov	r0, r3
 80151ca:	3748      	adds	r7, #72	; 0x48
 80151cc:	46bd      	mov	sp, r7
 80151ce:	bd80      	pop	{r7, pc}
 80151d0:	08015849 	.word	0x08015849
 80151d4:	08015269 	.word	0x08015269
 80151d8:	54485244 	.word	0x54485244
 80151dc:	201973e0 	.word	0x201973e0
 80151e0:	201973dc 	.word	0x201973dc
 80151e4:	2019746c 	.word	0x2019746c
 80151e8:	20000054 	.word	0x20000054
 80151ec:	201973d8 	.word	0x201973d8

080151f0 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 80151f0:	b580      	push	{r7, lr}
 80151f2:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 80151f4:	4b12      	ldr	r3, [pc, #72]	; (8015240 <_tx_thread_initialize+0x50>)
 80151f6:	2200      	movs	r2, #0
 80151f8:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 80151fa:	4b12      	ldr	r3, [pc, #72]	; (8015244 <_tx_thread_initialize+0x54>)
 80151fc:	2200      	movs	r2, #0
 80151fe:	601a      	str	r2, [r3, #0]
 8015200:	4b11      	ldr	r3, [pc, #68]	; (8015248 <_tx_thread_initialize+0x58>)
 8015202:	2200      	movs	r2, #0
 8015204:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8015206:	4b11      	ldr	r3, [pc, #68]	; (801524c <_tx_thread_initialize+0x5c>)
 8015208:	2220      	movs	r2, #32
 801520a:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 801520c:	2280      	movs	r2, #128	; 0x80
 801520e:	2100      	movs	r1, #0
 8015210:	480f      	ldr	r0, [pc, #60]	; (8015250 <_tx_thread_initialize+0x60>)
 8015212:	f013 ffd1 	bl	80291b8 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8015216:	4b0f      	ldr	r3, [pc, #60]	; (8015254 <_tx_thread_initialize+0x64>)
 8015218:	2200      	movs	r2, #0
 801521a:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 801521c:	4b0e      	ldr	r3, [pc, #56]	; (8015258 <_tx_thread_initialize+0x68>)
 801521e:	2200      	movs	r2, #0
 8015220:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8015222:	4b0e      	ldr	r3, [pc, #56]	; (801525c <_tx_thread_initialize+0x6c>)
 8015224:	2200      	movs	r2, #0
 8015226:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8015228:	4b0d      	ldr	r3, [pc, #52]	; (8015260 <_tx_thread_initialize+0x70>)
 801522a:	2200      	movs	r2, #0
 801522c:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 801522e:	4b0d      	ldr	r3, [pc, #52]	; (8015264 <_tx_thread_initialize+0x74>)
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 8015236:	4a0b      	ldr	r2, [pc, #44]	; (8015264 <_tx_thread_initialize+0x74>)
 8015238:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 801523a:	bf00      	nop
 801523c:	bd80      	pop	{r7, pc}
 801523e:	bf00      	nop
 8015240:	201973d4 	.word	0x201973d4
 8015244:	201973d8 	.word	0x201973d8
 8015248:	201973e4 	.word	0x201973e4
 801524c:	201973e8 	.word	0x201973e8
 8015250:	201973ec 	.word	0x201973ec
 8015254:	201973dc 	.word	0x201973dc
 8015258:	201973e0 	.word	0x201973e0
 801525c:	2019746c 	.word	0x2019746c
 8015260:	20197470 	.word	0x20197470
 8015264:	20197474 	.word	0x20197474

08015268 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8015268:	b580      	push	{r7, lr}
 801526a:	b088      	sub	sp, #32
 801526c:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801526e:	4b21      	ldr	r3, [pc, #132]	; (80152f4 <_tx_thread_shell_entry+0x8c>)
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8015274:	69fb      	ldr	r3, [r7, #28]
 8015276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015278:	69fa      	ldr	r2, [r7, #28]
 801527a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801527c:	4610      	mov	r0, r2
 801527e:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8015280:	4b1d      	ldr	r3, [pc, #116]	; (80152f8 <_tx_thread_shell_entry+0x90>)
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	2b00      	cmp	r3, #0
 8015286:	d003      	beq.n	8015290 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8015288:	4b1b      	ldr	r3, [pc, #108]	; (80152f8 <_tx_thread_shell_entry+0x90>)
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	69f8      	ldr	r0, [r7, #28]
 801528e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015290:	f3ef 8310 	mrs	r3, PRIMASK
 8015294:	607b      	str	r3, [r7, #4]
    return(posture);
 8015296:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8015298:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 801529a:	b672      	cpsid	i
    return(int_posture);
 801529c:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 801529e:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 80152a0:	69fb      	ldr	r3, [r7, #28]
 80152a2:	2201      	movs	r2, #1
 80152a4:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80152a6:	69fb      	ldr	r3, [r7, #28]
 80152a8:	2201      	movs	r2, #1
 80152aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80152ac:	69fb      	ldr	r3, [r7, #28]
 80152ae:	2200      	movs	r2, #0
 80152b0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80152b2:	4b12      	ldr	r3, [pc, #72]	; (80152fc <_tx_thread_shell_entry+0x94>)
 80152b4:	681b      	ldr	r3, [r3, #0]
 80152b6:	3301      	adds	r3, #1
 80152b8:	4a10      	ldr	r2, [pc, #64]	; (80152fc <_tx_thread_shell_entry+0x94>)
 80152ba:	6013      	str	r3, [r2, #0]
 80152bc:	69bb      	ldr	r3, [r7, #24]
 80152be:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80152c0:	68bb      	ldr	r3, [r7, #8]
 80152c2:	f383 8810 	msr	PRIMASK, r3
}
 80152c6:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 80152c8:	f3ef 8314 	mrs	r3, CONTROL
 80152cc:	60fb      	str	r3, [r7, #12]
    return(control_value);
 80152ce:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 80152d0:	617b      	str	r3, [r7, #20]
 80152d2:	697b      	ldr	r3, [r7, #20]
 80152d4:	f023 0304 	bic.w	r3, r3, #4
 80152d8:	617b      	str	r3, [r7, #20]
 80152da:	697b      	ldr	r3, [r7, #20]
 80152dc:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 80152de:	693b      	ldr	r3, [r7, #16]
 80152e0:	f383 8814 	msr	CONTROL, r3
}
 80152e4:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 80152e6:	69f8      	ldr	r0, [r7, #28]
 80152e8:	f000 f944 	bl	8015574 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80152ec:	bf00      	nop
 80152ee:	3720      	adds	r7, #32
 80152f0:	46bd      	mov	sp, r7
 80152f2:	bd80      	pop	{r7, pc}
 80152f4:	201973d4 	.word	0x201973d4
 80152f8:	20197470 	.word	0x20197470
 80152fc:	2019746c 	.word	0x2019746c

08015300 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8015300:	b480      	push	{r7}
 8015302:	b089      	sub	sp, #36	; 0x24
 8015304:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8015306:	4b17      	ldr	r3, [pc, #92]	; (8015364 <_tx_thread_system_preempt_check+0x64>)
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 801530c:	69fb      	ldr	r3, [r7, #28]
 801530e:	2b00      	cmp	r3, #0
 8015310:	d121      	bne.n	8015356 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8015312:	4b15      	ldr	r3, [pc, #84]	; (8015368 <_tx_thread_system_preempt_check+0x68>)
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8015318:	4b14      	ldr	r3, [pc, #80]	; (801536c <_tx_thread_system_preempt_check+0x6c>)
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 801531e:	69ba      	ldr	r2, [r7, #24]
 8015320:	697b      	ldr	r3, [r7, #20]
 8015322:	429a      	cmp	r2, r3
 8015324:	d017      	beq.n	8015356 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8015326:	4b12      	ldr	r3, [pc, #72]	; (8015370 <_tx_thread_system_preempt_check+0x70>)
 8015328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801532c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801532e:	f3ef 8305 	mrs	r3, IPSR
 8015332:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8015334:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 8015336:	2b00      	cmp	r3, #0
 8015338:	d10c      	bne.n	8015354 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801533a:	f3ef 8310 	mrs	r3, PRIMASK
 801533e:	60fb      	str	r3, [r7, #12]
    return(posture);
 8015340:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8015342:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8015344:	b662      	cpsie	i
}
 8015346:	bf00      	nop
 8015348:	68bb      	ldr	r3, [r7, #8]
 801534a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	f383 8810 	msr	PRIMASK, r3
}
 8015352:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8015354:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8015356:	bf00      	nop
 8015358:	3724      	adds	r7, #36	; 0x24
 801535a:	46bd      	mov	sp, r7
 801535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015360:	4770      	bx	lr
 8015362:	bf00      	nop
 8015364:	2019746c 	.word	0x2019746c
 8015368:	201973d4 	.word	0x201973d4
 801536c:	201973d8 	.word	0x201973d8
 8015370:	e000ed04 	.word	0xe000ed04

08015374 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8015374:	b580      	push	{r7, lr}
 8015376:	b096      	sub	sp, #88	; 0x58
 8015378:	af00      	add	r7, sp, #0
 801537a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801537c:	f3ef 8310 	mrs	r3, PRIMASK
 8015380:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8015382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8015384:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8015386:	b672      	cpsid	i
    return(int_posture);
 8015388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 801538a:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015390:	2b00      	cmp	r3, #0
 8015392:	d005      	beq.n	80153a0 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	334c      	adds	r3, #76	; 0x4c
 8015398:	4618      	mov	r0, r3
 801539a:	f000 fb91 	bl	8015ac0 <_tx_timer_system_deactivate>
 801539e:	e002      	b.n	80153a6 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	2200      	movs	r2, #0
 80153a4:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80153a6:	4b6c      	ldr	r3, [pc, #432]	; (8015558 <_tx_thread_system_resume+0x1e4>)
 80153a8:	681b      	ldr	r3, [r3, #0]
 80153aa:	3b01      	subs	r3, #1
 80153ac:	4a6a      	ldr	r2, [pc, #424]	; (8015558 <_tx_thread_system_resume+0x1e4>)
 80153ae:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	f040 8083 	bne.w	80154c0 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80153be:	2b00      	cmp	r3, #0
 80153c0:	f000 8097 	beq.w	80154f2 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d172      	bne.n	80154b2 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	2200      	movs	r2, #0
 80153d0:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153d6:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 80153d8:	4a60      	ldr	r2, [pc, #384]	; (801555c <_tx_thread_system_resume+0x1e8>)
 80153da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80153dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80153e0:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 80153e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d154      	bne.n	8015492 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 80153e8:	495c      	ldr	r1, [pc, #368]	; (801555c <_tx_thread_system_resume+0x1e8>)
 80153ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80153ec:	687a      	ldr	r2, [r7, #4]
 80153ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	687a      	ldr	r2, [r7, #4]
 80153f6:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	687a      	ldr	r2, [r7, #4]
 80153fc:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80153fe:	2201      	movs	r2, #1
 8015400:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015402:	fa02 f303 	lsl.w	r3, r2, r3
 8015406:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8015408:	4b55      	ldr	r3, [pc, #340]	; (8015560 <_tx_thread_system_resume+0x1ec>)
 801540a:	681a      	ldr	r2, [r3, #0]
 801540c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801540e:	4313      	orrs	r3, r2
 8015410:	4a53      	ldr	r2, [pc, #332]	; (8015560 <_tx_thread_system_resume+0x1ec>)
 8015412:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8015414:	4b53      	ldr	r3, [pc, #332]	; (8015564 <_tx_thread_system_resume+0x1f0>)
 8015416:	681b      	ldr	r3, [r3, #0]
 8015418:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801541a:	429a      	cmp	r2, r3
 801541c:	d269      	bcs.n	80154f2 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 801541e:	4a51      	ldr	r2, [pc, #324]	; (8015564 <_tx_thread_system_resume+0x1f0>)
 8015420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015422:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8015424:	4b50      	ldr	r3, [pc, #320]	; (8015568 <_tx_thread_system_resume+0x1f4>)
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 801542a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801542c:	2b00      	cmp	r3, #0
 801542e:	d103      	bne.n	8015438 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8015430:	4a4d      	ldr	r2, [pc, #308]	; (8015568 <_tx_thread_system_resume+0x1f4>)
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	6013      	str	r3, [r2, #0]
 8015436:	e05c      	b.n	80154f2 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8015438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801543a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801543c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801543e:	429a      	cmp	r2, r3
 8015440:	d257      	bcs.n	80154f2 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8015442:	4a49      	ldr	r2, [pc, #292]	; (8015568 <_tx_thread_system_resume+0x1f4>)
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	6013      	str	r3, [r2, #0]
 8015448:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801544a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801544c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801544e:	f383 8810 	msr	PRIMASK, r3
}
 8015452:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8015454:	4b40      	ldr	r3, [pc, #256]	; (8015558 <_tx_thread_system_resume+0x1e4>)
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 801545a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801545c:	2b00      	cmp	r3, #0
 801545e:	d174      	bne.n	801554a <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8015460:	4b42      	ldr	r3, [pc, #264]	; (801556c <_tx_thread_system_resume+0x1f8>)
 8015462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015466:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015468:	f3ef 8305 	mrs	r3, IPSR
 801546c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 801546e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (_tx_ipsr_get() == 0)
 8015470:	2b00      	cmp	r3, #0
 8015472:	d10c      	bne.n	801548e <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015474:	f3ef 8310 	mrs	r3, PRIMASK
 8015478:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 801547c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 801547e:	b662      	cpsie	i
}
 8015480:	bf00      	nop
 8015482:	6a3b      	ldr	r3, [r7, #32]
 8015484:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015486:	69fb      	ldr	r3, [r7, #28]
 8015488:	f383 8810 	msr	PRIMASK, r3
}
 801548c:	bf00      	nop
}
 801548e:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8015490:	e05b      	b.n	801554a <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8015492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015496:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8015498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801549a:	687a      	ldr	r2, [r7, #4]
 801549c:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 801549e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80154a0:	687a      	ldr	r2, [r7, #4]
 80154a2:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80154a8:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80154ae:	621a      	str	r2, [r3, #32]
 80154b0:	e01f      	b.n	80154f2 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	2200      	movs	r2, #0
 80154b6:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	2203      	movs	r2, #3
 80154bc:	631a      	str	r2, [r3, #48]	; 0x30
 80154be:	e018      	b.n	80154f2 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154c4:	2b01      	cmp	r3, #1
 80154c6:	d014      	beq.n	80154f2 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154cc:	2b02      	cmp	r3, #2
 80154ce:	d010      	beq.n	80154f2 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d106      	bne.n	80154e6 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	2200      	movs	r2, #0
 80154dc:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	2200      	movs	r2, #0
 80154e2:	631a      	str	r2, [r3, #48]	; 0x30
 80154e4:	e005      	b.n	80154f2 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	2200      	movs	r2, #0
 80154ea:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	2203      	movs	r2, #3
 80154f0:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80154f2:	4b1f      	ldr	r3, [pc, #124]	; (8015570 <_tx_thread_system_resume+0x1fc>)
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80154f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80154fa:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80154fc:	69bb      	ldr	r3, [r7, #24]
 80154fe:	f383 8810 	msr	PRIMASK, r3
}
 8015502:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8015504:	4b18      	ldr	r3, [pc, #96]	; (8015568 <_tx_thread_system_resume+0x1f4>)
 8015506:	681b      	ldr	r3, [r3, #0]
 8015508:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801550a:	429a      	cmp	r2, r3
 801550c:	d020      	beq.n	8015550 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801550e:	4b12      	ldr	r3, [pc, #72]	; (8015558 <_tx_thread_system_resume+0x1e4>)
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8015514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015516:	2b00      	cmp	r3, #0
 8015518:	d11a      	bne.n	8015550 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801551a:	4b14      	ldr	r3, [pc, #80]	; (801556c <_tx_thread_system_resume+0x1f8>)
 801551c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015520:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015522:	f3ef 8305 	mrs	r3, IPSR
 8015526:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8015528:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 801552a:	2b00      	cmp	r3, #0
 801552c:	d10f      	bne.n	801554e <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801552e:	f3ef 8310 	mrs	r3, PRIMASK
 8015532:	613b      	str	r3, [r7, #16]
    return(posture);
 8015534:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8015536:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8015538:	b662      	cpsie	i
}
 801553a:	bf00      	nop
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015540:	68bb      	ldr	r3, [r7, #8]
 8015542:	f383 8810 	msr	PRIMASK, r3
}
 8015546:	bf00      	nop
}
 8015548:	e001      	b.n	801554e <_tx_thread_system_resume+0x1da>
                                return;
 801554a:	bf00      	nop
 801554c:	e000      	b.n	8015550 <_tx_thread_system_resume+0x1dc>
 801554e:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8015550:	3758      	adds	r7, #88	; 0x58
 8015552:	46bd      	mov	sp, r7
 8015554:	bd80      	pop	{r7, pc}
 8015556:	bf00      	nop
 8015558:	2019746c 	.word	0x2019746c
 801555c:	201973ec 	.word	0x201973ec
 8015560:	201973e4 	.word	0x201973e4
 8015564:	201973e8 	.word	0x201973e8
 8015568:	201973d8 	.word	0x201973d8
 801556c:	e000ed04 	.word	0xe000ed04
 8015570:	201973d4 	.word	0x201973d4

08015574 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8015574:	b580      	push	{r7, lr}
 8015576:	b09e      	sub	sp, #120	; 0x78
 8015578:	af00      	add	r7, sp, #0
 801557a:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 801557c:	4b81      	ldr	r3, [pc, #516]	; (8015784 <_tx_thread_system_suspend+0x210>)
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015582:	f3ef 8310 	mrs	r3, PRIMASK
 8015586:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8015588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 801558a:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 801558c:	b672      	cpsid	i
    return(int_posture);
 801558e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8015590:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8015592:	687a      	ldr	r2, [r7, #4]
 8015594:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015596:	429a      	cmp	r2, r3
 8015598:	d112      	bne.n	80155c0 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801559e:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 80155a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d008      	beq.n	80155b8 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 80155a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80155a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155ac:	d004      	beq.n	80155b8 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	334c      	adds	r3, #76	; 0x4c
 80155b2:	4618      	mov	r0, r3
 80155b4:	f000 fa22 	bl	80159fc <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	69db      	ldr	r3, [r3, #28]
 80155bc:	4a72      	ldr	r2, [pc, #456]	; (8015788 <_tx_thread_system_suspend+0x214>)
 80155be:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80155c0:	4b72      	ldr	r3, [pc, #456]	; (801578c <_tx_thread_system_suspend+0x218>)
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	3b01      	subs	r3, #1
 80155c6:	4a71      	ldr	r2, [pc, #452]	; (801578c <_tx_thread_system_suspend+0x218>)
 80155c8:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80155ce:	2b01      	cmp	r3, #1
 80155d0:	f040 80a6 	bne.w	8015720 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	2200      	movs	r2, #0
 80155d8:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155de:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	6a1b      	ldr	r3, [r3, #32]
 80155e4:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 80155e6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	429a      	cmp	r2, r3
 80155ec:	d015      	beq.n	801561a <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155f2:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 80155f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80155f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80155f8:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 80155fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80155fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80155fe:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8015600:	4a63      	ldr	r2, [pc, #396]	; (8015790 <_tx_thread_system_suspend+0x21c>)
 8015602:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015608:	687a      	ldr	r2, [r7, #4]
 801560a:	429a      	cmp	r2, r3
 801560c:	d157      	bne.n	80156be <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 801560e:	4960      	ldr	r1, [pc, #384]	; (8015790 <_tx_thread_system_suspend+0x21c>)
 8015610:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015612:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8015618:	e051      	b.n	80156be <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 801561a:	4a5d      	ldr	r2, [pc, #372]	; (8015790 <_tx_thread_system_suspend+0x21c>)
 801561c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801561e:	2100      	movs	r1, #0
 8015620:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8015624:	2201      	movs	r2, #1
 8015626:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015628:	fa02 f303 	lsl.w	r3, r2, r3
 801562c:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 801562e:	4b59      	ldr	r3, [pc, #356]	; (8015794 <_tx_thread_system_suspend+0x220>)
 8015630:	681a      	ldr	r2, [r3, #0]
 8015632:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015634:	43db      	mvns	r3, r3
 8015636:	4013      	ands	r3, r2
 8015638:	4a56      	ldr	r2, [pc, #344]	; (8015794 <_tx_thread_system_suspend+0x220>)
 801563a:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 801563c:	2300      	movs	r3, #0
 801563e:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8015640:	4b54      	ldr	r3, [pc, #336]	; (8015794 <_tx_thread_system_suspend+0x220>)
 8015642:	681b      	ldr	r3, [r3, #0]
 8015644:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8015646:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015648:	2b00      	cmp	r3, #0
 801564a:	d12b      	bne.n	80156a4 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 801564c:	4b52      	ldr	r3, [pc, #328]	; (8015798 <_tx_thread_system_suspend+0x224>)
 801564e:	2220      	movs	r2, #32
 8015650:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8015652:	4b52      	ldr	r3, [pc, #328]	; (801579c <_tx_thread_system_suspend+0x228>)
 8015654:	2200      	movs	r2, #0
 8015656:	601a      	str	r2, [r3, #0]
 8015658:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801565a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801565c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801565e:	f383 8810 	msr	PRIMASK, r3
}
 8015662:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8015664:	4b49      	ldr	r3, [pc, #292]	; (801578c <_tx_thread_system_suspend+0x218>)
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 801566a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801566c:	2b00      	cmp	r3, #0
 801566e:	f040 8081 	bne.w	8015774 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8015672:	4b4b      	ldr	r3, [pc, #300]	; (80157a0 <_tx_thread_system_suspend+0x22c>)
 8015674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015678:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801567a:	f3ef 8305 	mrs	r3, IPSR
 801567e:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8015680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 8015682:	2b00      	cmp	r3, #0
 8015684:	d10c      	bne.n	80156a0 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015686:	f3ef 8310 	mrs	r3, PRIMASK
 801568a:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 801568c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 801568e:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8015690:	b662      	cpsie	i
}
 8015692:	bf00      	nop
 8015694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015696:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801569a:	f383 8810 	msr	PRIMASK, r3
}
 801569e:	bf00      	nop
}
 80156a0:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 80156a2:	e067      	b.n	8015774 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 80156a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80156a6:	fa93 f3a3 	rbit	r3, r3
 80156aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80156ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80156ae:	fab3 f383 	clz	r3, r3
 80156b2:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 80156b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80156b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80156b8:	4413      	add	r3, r2
 80156ba:	4a37      	ldr	r2, [pc, #220]	; (8015798 <_tx_thread_system_suspend+0x224>)
 80156bc:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 80156be:	4b37      	ldr	r3, [pc, #220]	; (801579c <_tx_thread_system_suspend+0x228>)
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	687a      	ldr	r2, [r7, #4]
 80156c4:	429a      	cmp	r2, r3
 80156c6:	d12b      	bne.n	8015720 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80156c8:	4b33      	ldr	r3, [pc, #204]	; (8015798 <_tx_thread_system_suspend+0x224>)
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	4a30      	ldr	r2, [pc, #192]	; (8015790 <_tx_thread_system_suspend+0x21c>)
 80156ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80156d2:	4a32      	ldr	r2, [pc, #200]	; (801579c <_tx_thread_system_suspend+0x228>)
 80156d4:	6013      	str	r3, [r2, #0]
 80156d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80156d8:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80156da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156dc:	f383 8810 	msr	PRIMASK, r3
}
 80156e0:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80156e2:	4b2a      	ldr	r3, [pc, #168]	; (801578c <_tx_thread_system_suspend+0x218>)
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 80156e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d144      	bne.n	8015778 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80156ee:	4b2c      	ldr	r3, [pc, #176]	; (80157a0 <_tx_thread_system_suspend+0x22c>)
 80156f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80156f4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80156f6:	f3ef 8305 	mrs	r3, IPSR
 80156fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 80156fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d10c      	bne.n	801571c <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015702:	f3ef 8310 	mrs	r3, PRIMASK
 8015706:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8015708:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 801570a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 801570c:	b662      	cpsie	i
}
 801570e:	bf00      	nop
 8015710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015712:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015714:	6a3b      	ldr	r3, [r7, #32]
 8015716:	f383 8810 	msr	PRIMASK, r3
}
 801571a:	bf00      	nop
}
 801571c:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 801571e:	e02b      	b.n	8015778 <_tx_thread_system_suspend+0x204>
 8015720:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015722:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015724:	69fb      	ldr	r3, [r7, #28]
 8015726:	f383 8810 	msr	PRIMASK, r3
}
 801572a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 801572c:	4b1b      	ldr	r3, [pc, #108]	; (801579c <_tx_thread_system_suspend+0x228>)
 801572e:	681b      	ldr	r3, [r3, #0]
 8015730:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015732:	429a      	cmp	r2, r3
 8015734:	d022      	beq.n	801577c <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8015736:	4b15      	ldr	r3, [pc, #84]	; (801578c <_tx_thread_system_suspend+0x218>)
 8015738:	681b      	ldr	r3, [r3, #0]
 801573a:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 801573c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801573e:	2b00      	cmp	r3, #0
 8015740:	d11c      	bne.n	801577c <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8015742:	4b17      	ldr	r3, [pc, #92]	; (80157a0 <_tx_thread_system_suspend+0x22c>)
 8015744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015748:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801574a:	f3ef 8305 	mrs	r3, IPSR
 801574e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8015750:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 8015752:	2b00      	cmp	r3, #0
 8015754:	d10c      	bne.n	8015770 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015756:	f3ef 8310 	mrs	r3, PRIMASK
 801575a:	617b      	str	r3, [r7, #20]
    return(posture);
 801575c:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 801575e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8015760:	b662      	cpsie	i
}
 8015762:	bf00      	nop
 8015764:	693b      	ldr	r3, [r7, #16]
 8015766:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	f383 8810 	msr	PRIMASK, r3
}
 801576e:	bf00      	nop
}
 8015770:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8015772:	e003      	b.n	801577c <_tx_thread_system_suspend+0x208>
                return;
 8015774:	bf00      	nop
 8015776:	e002      	b.n	801577e <_tx_thread_system_suspend+0x20a>
            return;
 8015778:	bf00      	nop
 801577a:	e000      	b.n	801577e <_tx_thread_system_suspend+0x20a>
    return;
 801577c:	bf00      	nop
}
 801577e:	3778      	adds	r7, #120	; 0x78
 8015780:	46bd      	mov	sp, r7
 8015782:	bd80      	pop	{r7, pc}
 8015784:	201973d4 	.word	0x201973d4
 8015788:	201979d8 	.word	0x201979d8
 801578c:	2019746c 	.word	0x2019746c
 8015790:	201973ec 	.word	0x201973ec
 8015794:	201973e4 	.word	0x201973e4
 8015798:	201973e8 	.word	0x201973e8
 801579c:	201973d8 	.word	0x201973d8
 80157a0:	e000ed04 	.word	0xe000ed04

080157a4 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 80157a4:	b480      	push	{r7}
 80157a6:	b087      	sub	sp, #28
 80157a8:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80157aa:	4b21      	ldr	r3, [pc, #132]	; (8015830 <_tx_thread_time_slice+0x8c>)
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80157b0:	f3ef 8310 	mrs	r3, PRIMASK
 80157b4:	60fb      	str	r3, [r7, #12]
    return(posture);
 80157b6:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 80157b8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 80157ba:	b672      	cpsid	i
    return(int_posture);
 80157bc:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 80157be:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 80157c0:	4b1c      	ldr	r3, [pc, #112]	; (8015834 <_tx_thread_time_slice+0x90>)
 80157c2:	2200      	movs	r2, #0
 80157c4:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 80157c6:	697b      	ldr	r3, [r7, #20]
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d024      	beq.n	8015816 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 80157cc:	697b      	ldr	r3, [r7, #20]
 80157ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d120      	bne.n	8015816 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80157d4:	697b      	ldr	r3, [r7, #20]
 80157d6:	69da      	ldr	r2, [r3, #28]
 80157d8:	697b      	ldr	r3, [r7, #20]
 80157da:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 80157dc:	697b      	ldr	r3, [r7, #20]
 80157de:	699b      	ldr	r3, [r3, #24]
 80157e0:	4a15      	ldr	r2, [pc, #84]	; (8015838 <_tx_thread_time_slice+0x94>)
 80157e2:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 80157e4:	697b      	ldr	r3, [r7, #20]
 80157e6:	6a1b      	ldr	r3, [r3, #32]
 80157e8:	697a      	ldr	r2, [r7, #20]
 80157ea:	429a      	cmp	r2, r3
 80157ec:	d013      	beq.n	8015816 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 80157ee:	697b      	ldr	r3, [r7, #20]
 80157f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157f2:	697b      	ldr	r3, [r7, #20]
 80157f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80157f6:	429a      	cmp	r2, r3
 80157f8:	d10d      	bne.n	8015816 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 80157fa:	697b      	ldr	r3, [r7, #20]
 80157fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157fe:	697a      	ldr	r2, [r7, #20]
 8015800:	6a12      	ldr	r2, [r2, #32]
 8015802:	490e      	ldr	r1, [pc, #56]	; (801583c <_tx_thread_time_slice+0x98>)
 8015804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8015808:	4b0d      	ldr	r3, [pc, #52]	; (8015840 <_tx_thread_time_slice+0x9c>)
 801580a:	681b      	ldr	r3, [r3, #0]
 801580c:	4a0b      	ldr	r2, [pc, #44]	; (801583c <_tx_thread_time_slice+0x98>)
 801580e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015812:	4a0c      	ldr	r2, [pc, #48]	; (8015844 <_tx_thread_time_slice+0xa0>)
 8015814:	6013      	str	r3, [r2, #0]
 8015816:	693b      	ldr	r3, [r7, #16]
 8015818:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	f383 8810 	msr	PRIMASK, r3
}
 8015820:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8015822:	bf00      	nop
 8015824:	371c      	adds	r7, #28
 8015826:	46bd      	mov	sp, r7
 8015828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801582c:	4770      	bx	lr
 801582e:	bf00      	nop
 8015830:	201973d4 	.word	0x201973d4
 8015834:	2019747c 	.word	0x2019747c
 8015838:	201979d8 	.word	0x201979d8
 801583c:	201973ec 	.word	0x201973ec
 8015840:	201973e8 	.word	0x201973e8
 8015844:	201973d8 	.word	0x201973d8

08015848 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8015848:	b580      	push	{r7, lr}
 801584a:	b08a      	sub	sp, #40	; 0x28
 801584c:	af00      	add	r7, sp, #0
 801584e:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015854:	f3ef 8310 	mrs	r3, PRIMASK
 8015858:	617b      	str	r3, [r7, #20]
    return(posture);
 801585a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 801585c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 801585e:	b672      	cpsid	i
    return(int_posture);
 8015860:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8015862:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8015864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015868:	2b04      	cmp	r3, #4
 801586a:	d10e      	bne.n	801588a <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 801586c:	4b13      	ldr	r3, [pc, #76]	; (80158bc <_tx_thread_timeout+0x74>)
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	3301      	adds	r3, #1
 8015872:	4a12      	ldr	r2, [pc, #72]	; (80158bc <_tx_thread_timeout+0x74>)
 8015874:	6013      	str	r3, [r2, #0]
 8015876:	6a3b      	ldr	r3, [r7, #32]
 8015878:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	f383 8810 	msr	PRIMASK, r3
}
 8015880:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8015882:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015884:	f7ff fd76 	bl	8015374 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8015888:	e013      	b.n	80158b2 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 801588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801588c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801588e:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8015890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015892:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8015896:	61bb      	str	r3, [r7, #24]
 8015898:	6a3b      	ldr	r3, [r7, #32]
 801589a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801589c:	68bb      	ldr	r3, [r7, #8]
 801589e:	f383 8810 	msr	PRIMASK, r3
}
 80158a2:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 80158a4:	69fb      	ldr	r3, [r7, #28]
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d003      	beq.n	80158b2 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 80158aa:	69fb      	ldr	r3, [r7, #28]
 80158ac:	69b9      	ldr	r1, [r7, #24]
 80158ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80158b0:	4798      	blx	r3
}
 80158b2:	bf00      	nop
 80158b4:	3728      	adds	r7, #40	; 0x28
 80158b6:	46bd      	mov	sp, r7
 80158b8:	bd80      	pop	{r7, pc}
 80158ba:	bf00      	nop
 80158bc:	2019746c 	.word	0x2019746c

080158c0 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 80158c0:	b580      	push	{r7, lr}
 80158c2:	b084      	sub	sp, #16
 80158c4:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80158c6:	f3ef 8310 	mrs	r3, PRIMASK
 80158ca:	607b      	str	r3, [r7, #4]
    return(posture);
 80158cc:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 80158ce:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 80158d0:	b672      	cpsid	i
    return(int_posture);
 80158d2:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 80158d4:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 80158d6:	4b09      	ldr	r3, [pc, #36]	; (80158fc <_tx_timer_expiration_process+0x3c>)
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	3301      	adds	r3, #1
 80158dc:	4a07      	ldr	r2, [pc, #28]	; (80158fc <_tx_timer_expiration_process+0x3c>)
 80158de:	6013      	str	r3, [r2, #0]
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80158e4:	68bb      	ldr	r3, [r7, #8]
 80158e6:	f383 8810 	msr	PRIMASK, r3
}
 80158ea:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 80158ec:	4804      	ldr	r0, [pc, #16]	; (8015900 <_tx_timer_expiration_process+0x40>)
 80158ee:	f7ff fd41 	bl	8015374 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80158f2:	bf00      	nop
 80158f4:	3710      	adds	r7, #16
 80158f6:	46bd      	mov	sp, r7
 80158f8:	bd80      	pop	{r7, pc}
 80158fa:	bf00      	nop
 80158fc:	2019746c 	.word	0x2019746c
 8015900:	2019751c 	.word	0x2019751c

08015904 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8015904:	b590      	push	{r4, r7, lr}
 8015906:	b089      	sub	sp, #36	; 0x24
 8015908:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 801590a:	4b28      	ldr	r3, [pc, #160]	; (80159ac <_tx_timer_initialize+0xa8>)
 801590c:	2200      	movs	r2, #0
 801590e:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8015910:	4b27      	ldr	r3, [pc, #156]	; (80159b0 <_tx_timer_initialize+0xac>)
 8015912:	2200      	movs	r2, #0
 8015914:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8015916:	4b27      	ldr	r3, [pc, #156]	; (80159b4 <_tx_timer_initialize+0xb0>)
 8015918:	2200      	movs	r2, #0
 801591a:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 801591c:	4b26      	ldr	r3, [pc, #152]	; (80159b8 <_tx_timer_initialize+0xb4>)
 801591e:	2200      	movs	r2, #0
 8015920:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8015922:	4b26      	ldr	r3, [pc, #152]	; (80159bc <_tx_timer_initialize+0xb8>)
 8015924:	2200      	movs	r2, #0
 8015926:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8015928:	2280      	movs	r2, #128	; 0x80
 801592a:	2100      	movs	r1, #0
 801592c:	4824      	ldr	r0, [pc, #144]	; (80159c0 <_tx_timer_initialize+0xbc>)
 801592e:	f013 fc43 	bl	80291b8 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8015932:	4b24      	ldr	r3, [pc, #144]	; (80159c4 <_tx_timer_initialize+0xc0>)
 8015934:	4a22      	ldr	r2, [pc, #136]	; (80159c0 <_tx_timer_initialize+0xbc>)
 8015936:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8015938:	4b23      	ldr	r3, [pc, #140]	; (80159c8 <_tx_timer_initialize+0xc4>)
 801593a:	4a21      	ldr	r2, [pc, #132]	; (80159c0 <_tx_timer_initialize+0xbc>)
 801593c:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 801593e:	4b23      	ldr	r3, [pc, #140]	; (80159cc <_tx_timer_initialize+0xc8>)
 8015940:	4a23      	ldr	r2, [pc, #140]	; (80159d0 <_tx_timer_initialize+0xcc>)
 8015942:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8015944:	4b21      	ldr	r3, [pc, #132]	; (80159cc <_tx_timer_initialize+0xc8>)
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	3304      	adds	r3, #4
 801594a:	4a20      	ldr	r2, [pc, #128]	; (80159cc <_tx_timer_initialize+0xc8>)
 801594c:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 801594e:	4b21      	ldr	r3, [pc, #132]	; (80159d4 <_tx_timer_initialize+0xd0>)
 8015950:	4a21      	ldr	r2, [pc, #132]	; (80159d8 <_tx_timer_initialize+0xd4>)
 8015952:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8015954:	4b21      	ldr	r3, [pc, #132]	; (80159dc <_tx_timer_initialize+0xd8>)
 8015956:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801595a:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 801595c:	4b20      	ldr	r3, [pc, #128]	; (80159e0 <_tx_timer_initialize+0xdc>)
 801595e:	2200      	movs	r2, #0
 8015960:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8015962:	4b1c      	ldr	r3, [pc, #112]	; (80159d4 <_tx_timer_initialize+0xd0>)
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	4a1d      	ldr	r2, [pc, #116]	; (80159dc <_tx_timer_initialize+0xd8>)
 8015968:	6812      	ldr	r2, [r2, #0]
 801596a:	491d      	ldr	r1, [pc, #116]	; (80159e0 <_tx_timer_initialize+0xdc>)
 801596c:	6809      	ldr	r1, [r1, #0]
 801596e:	481c      	ldr	r0, [pc, #112]	; (80159e0 <_tx_timer_initialize+0xdc>)
 8015970:	6800      	ldr	r0, [r0, #0]
 8015972:	2400      	movs	r4, #0
 8015974:	9405      	str	r4, [sp, #20]
 8015976:	2400      	movs	r4, #0
 8015978:	9404      	str	r4, [sp, #16]
 801597a:	9003      	str	r0, [sp, #12]
 801597c:	9102      	str	r1, [sp, #8]
 801597e:	9201      	str	r2, [sp, #4]
 8015980:	9300      	str	r3, [sp, #0]
 8015982:	4b18      	ldr	r3, [pc, #96]	; (80159e4 <_tx_timer_initialize+0xe0>)
 8015984:	4a18      	ldr	r2, [pc, #96]	; (80159e8 <_tx_timer_initialize+0xe4>)
 8015986:	4919      	ldr	r1, [pc, #100]	; (80159ec <_tx_timer_initialize+0xe8>)
 8015988:	4819      	ldr	r0, [pc, #100]	; (80159f0 <_tx_timer_initialize+0xec>)
 801598a:	f7ff fb3b 	bl	8015004 <_tx_thread_create>
 801598e:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	2b00      	cmp	r3, #0
 8015994:	d1e5      	bne.n	8015962 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8015996:	4b17      	ldr	r3, [pc, #92]	; (80159f4 <_tx_timer_initialize+0xf0>)
 8015998:	2200      	movs	r2, #0
 801599a:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 801599c:	4b16      	ldr	r3, [pc, #88]	; (80159f8 <_tx_timer_initialize+0xf4>)
 801599e:	2200      	movs	r2, #0
 80159a0:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 80159a2:	bf00      	nop
 80159a4:	370c      	adds	r7, #12
 80159a6:	46bd      	mov	sp, r7
 80159a8:	bd90      	pop	{r4, r7, pc}
 80159aa:	bf00      	nop
 80159ac:	20197478 	.word	0x20197478
 80159b0:	201979d8 	.word	0x201979d8
 80159b4:	2019747c 	.word	0x2019747c
 80159b8:	2019750c 	.word	0x2019750c
 80159bc:	20197518 	.word	0x20197518
 80159c0:	20197480 	.word	0x20197480
 80159c4:	20197500 	.word	0x20197500
 80159c8:	20197508 	.word	0x20197508
 80159cc:	20197504 	.word	0x20197504
 80159d0:	201974fc 	.word	0x201974fc
 80159d4:	201975cc 	.word	0x201975cc
 80159d8:	201975d8 	.word	0x201975d8
 80159dc:	201975d0 	.word	0x201975d0
 80159e0:	201975d4 	.word	0x201975d4
 80159e4:	4154494d 	.word	0x4154494d
 80159e8:	08015b31 	.word	0x08015b31
 80159ec:	0802a720 	.word	0x0802a720
 80159f0:	2019751c 	.word	0x2019751c
 80159f4:	20197510 	.word	0x20197510
 80159f8:	20197514 	.word	0x20197514

080159fc <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 80159fc:	b480      	push	{r7}
 80159fe:	b089      	sub	sp, #36	; 0x24
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	681b      	ldr	r3, [r3, #0]
 8015a08:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8015a0a:	697b      	ldr	r3, [r7, #20]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d04a      	beq.n	8015aa6 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8015a10:	697b      	ldr	r3, [r7, #20]
 8015a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a16:	d046      	beq.n	8015aa6 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	699b      	ldr	r3, [r3, #24]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d142      	bne.n	8015aa6 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8015a20:	697b      	ldr	r3, [r7, #20]
 8015a22:	2b20      	cmp	r3, #32
 8015a24:	d902      	bls.n	8015a2c <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8015a26:	231f      	movs	r3, #31
 8015a28:	61bb      	str	r3, [r7, #24]
 8015a2a:	e002      	b.n	8015a32 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8015a2c:	697b      	ldr	r3, [r7, #20]
 8015a2e:	3b01      	subs	r3, #1
 8015a30:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8015a32:	4b20      	ldr	r3, [pc, #128]	; (8015ab4 <_tx_timer_system_activate+0xb8>)
 8015a34:	681a      	ldr	r2, [r3, #0]
 8015a36:	69bb      	ldr	r3, [r7, #24]
 8015a38:	009b      	lsls	r3, r3, #2
 8015a3a:	4413      	add	r3, r2
 8015a3c:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8015a3e:	4b1e      	ldr	r3, [pc, #120]	; (8015ab8 <_tx_timer_system_activate+0xbc>)
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	69fa      	ldr	r2, [r7, #28]
 8015a44:	429a      	cmp	r2, r3
 8015a46:	d30b      	bcc.n	8015a60 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8015a48:	4b1b      	ldr	r3, [pc, #108]	; (8015ab8 <_tx_timer_system_activate+0xbc>)
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	69fa      	ldr	r2, [r7, #28]
 8015a4e:	1ad3      	subs	r3, r2, r3
 8015a50:	109b      	asrs	r3, r3, #2
 8015a52:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8015a54:	4b19      	ldr	r3, [pc, #100]	; (8015abc <_tx_timer_system_activate+0xc0>)
 8015a56:	681a      	ldr	r2, [r3, #0]
 8015a58:	693b      	ldr	r3, [r7, #16]
 8015a5a:	009b      	lsls	r3, r3, #2
 8015a5c:	4413      	add	r3, r2
 8015a5e:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8015a60:	69fb      	ldr	r3, [r7, #28]
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d109      	bne.n	8015a7c <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	687a      	ldr	r2, [r7, #4]
 8015a6c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	687a      	ldr	r2, [r7, #4]
 8015a72:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8015a74:	69fb      	ldr	r3, [r7, #28]
 8015a76:	687a      	ldr	r2, [r7, #4]
 8015a78:	601a      	str	r2, [r3, #0]
 8015a7a:	e011      	b.n	8015aa0 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8015a7c:	69fb      	ldr	r3, [r7, #28]
 8015a7e:	681b      	ldr	r3, [r3, #0]
 8015a80:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	695b      	ldr	r3, [r3, #20]
 8015a86:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8015a88:	68bb      	ldr	r3, [r7, #8]
 8015a8a:	687a      	ldr	r2, [r7, #4]
 8015a8c:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	687a      	ldr	r2, [r7, #4]
 8015a92:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	68fa      	ldr	r2, [r7, #12]
 8015a98:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	68ba      	ldr	r2, [r7, #8]
 8015a9e:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	69fa      	ldr	r2, [r7, #28]
 8015aa4:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8015aa6:	bf00      	nop
 8015aa8:	3724      	adds	r7, #36	; 0x24
 8015aaa:	46bd      	mov	sp, r7
 8015aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ab0:	4770      	bx	lr
 8015ab2:	bf00      	nop
 8015ab4:	20197508 	.word	0x20197508
 8015ab8:	20197504 	.word	0x20197504
 8015abc:	20197500 	.word	0x20197500

08015ac0 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8015ac0:	b480      	push	{r7}
 8015ac2:	b087      	sub	sp, #28
 8015ac4:	af00      	add	r7, sp, #0
 8015ac6:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	699b      	ldr	r3, [r3, #24]
 8015acc:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8015ace:	697b      	ldr	r3, [r7, #20]
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d026      	beq.n	8015b22 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	691b      	ldr	r3, [r3, #16]
 8015ad8:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8015ada:	687a      	ldr	r2, [r7, #4]
 8015adc:	693b      	ldr	r3, [r7, #16]
 8015ade:	429a      	cmp	r2, r3
 8015ae0:	d108      	bne.n	8015af4 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8015ae2:	697b      	ldr	r3, [r7, #20]
 8015ae4:	681b      	ldr	r3, [r3, #0]
 8015ae6:	687a      	ldr	r2, [r7, #4]
 8015ae8:	429a      	cmp	r2, r3
 8015aea:	d117      	bne.n	8015b1c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8015aec:	697b      	ldr	r3, [r7, #20]
 8015aee:	2200      	movs	r2, #0
 8015af0:	601a      	str	r2, [r3, #0]
 8015af2:	e013      	b.n	8015b1c <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	695b      	ldr	r3, [r3, #20]
 8015af8:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8015afa:	693b      	ldr	r3, [r7, #16]
 8015afc:	68fa      	ldr	r2, [r7, #12]
 8015afe:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8015b00:	68fb      	ldr	r3, [r7, #12]
 8015b02:	693a      	ldr	r2, [r7, #16]
 8015b04:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8015b06:	697b      	ldr	r3, [r7, #20]
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	687a      	ldr	r2, [r7, #4]
 8015b0c:	429a      	cmp	r2, r3
 8015b0e:	d105      	bne.n	8015b1c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8015b10:	693b      	ldr	r3, [r7, #16]
 8015b12:	697a      	ldr	r2, [r7, #20]
 8015b14:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8015b16:	697b      	ldr	r3, [r7, #20]
 8015b18:	693a      	ldr	r2, [r7, #16]
 8015b1a:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	2200      	movs	r2, #0
 8015b20:	619a      	str	r2, [r3, #24]
    }
}
 8015b22:	bf00      	nop
 8015b24:	371c      	adds	r7, #28
 8015b26:	46bd      	mov	sp, r7
 8015b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b2c:	4770      	bx	lr
	...

08015b30 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8015b30:	b580      	push	{r7, lr}
 8015b32:	b098      	sub	sp, #96	; 0x60
 8015b34:	af00      	add	r7, sp, #0
 8015b36:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8015b38:	2300      	movs	r3, #0
 8015b3a:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	4a73      	ldr	r2, [pc, #460]	; (8015d0c <_tx_timer_thread_entry+0x1dc>)
 8015b40:	4293      	cmp	r3, r2
 8015b42:	f040 80de 	bne.w	8015d02 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015b46:	f3ef 8310 	mrs	r3, PRIMASK
 8015b4a:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8015b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8015b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8015b50:	b672      	cpsid	i
    return(int_posture);
 8015b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8015b54:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8015b56:	4b6e      	ldr	r3, [pc, #440]	; (8015d10 <_tx_timer_thread_entry+0x1e0>)
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	681b      	ldr	r3, [r3, #0]
 8015b5c:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d003      	beq.n	8015b6c <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8015b64:	68fb      	ldr	r3, [r7, #12]
 8015b66:	f107 020c 	add.w	r2, r7, #12
 8015b6a:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8015b6c:	4b68      	ldr	r3, [pc, #416]	; (8015d10 <_tx_timer_thread_entry+0x1e0>)
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	2200      	movs	r2, #0
 8015b72:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8015b74:	4b66      	ldr	r3, [pc, #408]	; (8015d10 <_tx_timer_thread_entry+0x1e0>)
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	3304      	adds	r3, #4
 8015b7a:	4a65      	ldr	r2, [pc, #404]	; (8015d10 <_tx_timer_thread_entry+0x1e0>)
 8015b7c:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8015b7e:	4b64      	ldr	r3, [pc, #400]	; (8015d10 <_tx_timer_thread_entry+0x1e0>)
 8015b80:	681a      	ldr	r2, [r3, #0]
 8015b82:	4b64      	ldr	r3, [pc, #400]	; (8015d14 <_tx_timer_thread_entry+0x1e4>)
 8015b84:	681b      	ldr	r3, [r3, #0]
 8015b86:	429a      	cmp	r2, r3
 8015b88:	d103      	bne.n	8015b92 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8015b8a:	4b63      	ldr	r3, [pc, #396]	; (8015d18 <_tx_timer_thread_entry+0x1e8>)
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	4a60      	ldr	r2, [pc, #384]	; (8015d10 <_tx_timer_thread_entry+0x1e0>)
 8015b90:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8015b92:	4b62      	ldr	r3, [pc, #392]	; (8015d1c <_tx_timer_thread_entry+0x1ec>)
 8015b94:	2200      	movs	r2, #0
 8015b96:	601a      	str	r2, [r3, #0]
 8015b98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015b9a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b9e:	f383 8810 	msr	PRIMASK, r3
}
 8015ba2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015ba4:	f3ef 8310 	mrs	r3, PRIMASK
 8015ba8:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8015baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8015bac:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8015bae:	b672      	cpsid	i
    return(int_posture);
 8015bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8015bb2:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8015bb4:	e07f      	b.n	8015cb6 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8015bb6:	68fb      	ldr	r3, [r7, #12]
 8015bb8:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	691b      	ldr	r3, [r3, #16]
 8015bbe:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8015bc0:	2300      	movs	r3, #0
 8015bc2:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8015bc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015bc8:	429a      	cmp	r2, r3
 8015bca:	d102      	bne.n	8015bd2 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8015bcc:	2300      	movs	r3, #0
 8015bce:	60fb      	str	r3, [r7, #12]
 8015bd0:	e00e      	b.n	8015bf0 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8015bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015bd4:	695b      	ldr	r3, [r3, #20]
 8015bd6:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8015bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015bda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015bdc:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8015bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015be0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015be2:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8015be4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015be6:	f107 020c 	add.w	r2, r7, #12
 8015bea:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8015bec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015bee:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8015bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	2b20      	cmp	r3, #32
 8015bf6:	d911      	bls.n	8015c1c <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8015bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015bfa:	681b      	ldr	r3, [r3, #0]
 8015bfc:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8015c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c02:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8015c04:	2300      	movs	r3, #0
 8015c06:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8015c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c0a:	f107 0208 	add.w	r2, r7, #8
 8015c0e:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8015c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015c14:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8015c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c18:	60bb      	str	r3, [r7, #8]
 8015c1a:	e01a      	b.n	8015c52 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8015c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c1e:	689b      	ldr	r3, [r3, #8]
 8015c20:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8015c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c24:	68db      	ldr	r3, [r3, #12]
 8015c26:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8015c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c2a:	685a      	ldr	r2, [r3, #4]
 8015c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c2e:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8015c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d009      	beq.n	8015c4c <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8015c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c3a:	f107 0208 	add.w	r2, r7, #8
 8015c3e:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8015c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015c44:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8015c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c48:	60bb      	str	r3, [r7, #8]
 8015c4a:	e002      	b.n	8015c52 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8015c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c4e:	2200      	movs	r2, #0
 8015c50:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8015c52:	4a33      	ldr	r2, [pc, #204]	; (8015d20 <_tx_timer_thread_entry+0x1f0>)
 8015c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c56:	6013      	str	r3, [r2, #0]
 8015c58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c5e:	f383 8810 	msr	PRIMASK, r3
}
 8015c62:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8015c64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d002      	beq.n	8015c70 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8015c6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015c6c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015c6e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015c70:	f3ef 8310 	mrs	r3, PRIMASK
 8015c74:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8015c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8015c78:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8015c7a:	b672      	cpsid	i
    return(int_posture);
 8015c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8015c7e:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8015c80:	4b27      	ldr	r3, [pc, #156]	; (8015d20 <_tx_timer_thread_entry+0x1f0>)
 8015c82:	2200      	movs	r2, #0
 8015c84:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8015c86:	68bb      	ldr	r3, [r7, #8]
 8015c88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015c8a:	429a      	cmp	r2, r3
 8015c8c:	d105      	bne.n	8015c9a <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8015c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c90:	2200      	movs	r2, #0
 8015c92:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8015c94:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8015c96:	f7ff feb1 	bl	80159fc <_tx_timer_system_activate>
 8015c9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015c9c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015c9e:	69bb      	ldr	r3, [r7, #24]
 8015ca0:	f383 8810 	msr	PRIMASK, r3
}
 8015ca4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015ca6:	f3ef 8310 	mrs	r3, PRIMASK
 8015caa:	623b      	str	r3, [r7, #32]
    return(posture);
 8015cac:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8015cae:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015cb0:	b672      	cpsid	i
    return(int_posture);
 8015cb2:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8015cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	f47f af7c 	bne.w	8015bb6 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8015cbe:	4b17      	ldr	r3, [pc, #92]	; (8015d1c <_tx_timer_thread_entry+0x1ec>)
 8015cc0:	681b      	ldr	r3, [r3, #0]
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d116      	bne.n	8015cf4 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8015cc6:	4b17      	ldr	r3, [pc, #92]	; (8015d24 <_tx_timer_thread_entry+0x1f4>)
 8015cc8:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8015cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015ccc:	2203      	movs	r2, #3
 8015cce:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8015cd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015cd2:	2201      	movs	r2, #1
 8015cd4:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8015cd6:	4b14      	ldr	r3, [pc, #80]	; (8015d28 <_tx_timer_thread_entry+0x1f8>)
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	3301      	adds	r3, #1
 8015cdc:	4a12      	ldr	r2, [pc, #72]	; (8015d28 <_tx_timer_thread_entry+0x1f8>)
 8015cde:	6013      	str	r3, [r2, #0]
 8015ce0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015ce2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015ce4:	697b      	ldr	r3, [r7, #20]
 8015ce6:	f383 8810 	msr	PRIMASK, r3
}
 8015cea:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8015cec:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8015cee:	f7ff fc41 	bl	8015574 <_tx_thread_system_suspend>
 8015cf2:	e728      	b.n	8015b46 <_tx_timer_thread_entry+0x16>
 8015cf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015cf6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015cf8:	693b      	ldr	r3, [r7, #16]
 8015cfa:	f383 8810 	msr	PRIMASK, r3
}
 8015cfe:	bf00      	nop
            TX_DISABLE
 8015d00:	e721      	b.n	8015b46 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8015d02:	bf00      	nop
 8015d04:	3760      	adds	r7, #96	; 0x60
 8015d06:	46bd      	mov	sp, r7
 8015d08:	bd80      	pop	{r7, pc}
 8015d0a:	bf00      	nop
 8015d0c:	4154494d 	.word	0x4154494d
 8015d10:	20197508 	.word	0x20197508
 8015d14:	20197504 	.word	0x20197504
 8015d18:	20197500 	.word	0x20197500
 8015d1c:	2019750c 	.word	0x2019750c
 8015d20:	20197518 	.word	0x20197518
 8015d24:	2019751c 	.word	0x2019751c
 8015d28:	2019746c 	.word	0x2019746c

08015d2c <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 8015d2c:	b580      	push	{r7, lr}
 8015d2e:	b08a      	sub	sp, #40	; 0x28
 8015d30:	af00      	add	r7, sp, #0
 8015d32:	60f8      	str	r0, [r7, #12]
 8015d34:	60b9      	str	r1, [r7, #8]
 8015d36:	607a      	str	r2, [r7, #4]
 8015d38:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8015d3a:	2300      	movs	r3, #0
 8015d3c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d102      	bne.n	8015d4a <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8015d44:	2302      	movs	r3, #2
 8015d46:	627b      	str	r3, [r7, #36]	; 0x24
 8015d48:	e029      	b.n	8015d9e <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	4a2d      	ldr	r2, [pc, #180]	; (8015e04 <_txe_byte_allocate+0xd8>)
 8015d50:	4293      	cmp	r3, r2
 8015d52:	d002      	beq.n	8015d5a <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8015d54:	2302      	movs	r3, #2
 8015d56:	627b      	str	r3, [r7, #36]	; 0x24
 8015d58:	e021      	b.n	8015d9e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8015d5a:	68bb      	ldr	r3, [r7, #8]
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d102      	bne.n	8015d66 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8015d60:	2303      	movs	r3, #3
 8015d62:	627b      	str	r3, [r7, #36]	; 0x24
 8015d64:	e01b      	b.n	8015d9e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d102      	bne.n	8015d72 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8015d6c:	2305      	movs	r3, #5
 8015d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8015d70:	e015      	b.n	8015d9e <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 8015d72:	68fb      	ldr	r3, [r7, #12]
 8015d74:	69db      	ldr	r3, [r3, #28]
 8015d76:	687a      	ldr	r2, [r7, #4]
 8015d78:	429a      	cmp	r2, r3
 8015d7a:	d902      	bls.n	8015d82 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8015d7c:	2305      	movs	r3, #5
 8015d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8015d80:	e00d      	b.n	8015d9e <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8015d82:	683b      	ldr	r3, [r7, #0]
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d00a      	beq.n	8015d9e <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015d88:	f3ef 8305 	mrs	r3, IPSR
 8015d8c:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8015d8e:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015d90:	4b1d      	ldr	r3, [pc, #116]	; (8015e08 <_txe_byte_allocate+0xdc>)
 8015d92:	681b      	ldr	r3, [r3, #0]
 8015d94:	4313      	orrs	r3, r2
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d001      	beq.n	8015d9e <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8015d9a:	2304      	movs	r3, #4
 8015d9c:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 8015d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d108      	bne.n	8015db6 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8015da4:	4b19      	ldr	r3, [pc, #100]	; (8015e0c <_txe_byte_allocate+0xe0>)
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8015daa:	6a3b      	ldr	r3, [r7, #32]
 8015dac:	4a18      	ldr	r2, [pc, #96]	; (8015e10 <_txe_byte_allocate+0xe4>)
 8015dae:	4293      	cmp	r3, r2
 8015db0:	d101      	bne.n	8015db6 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8015db2:	2313      	movs	r3, #19
 8015db4:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8015db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d114      	bne.n	8015de6 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015dbc:	f3ef 8305 	mrs	r3, IPSR
 8015dc0:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8015dc2:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015dc4:	4b10      	ldr	r3, [pc, #64]	; (8015e08 <_txe_byte_allocate+0xdc>)
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	4313      	orrs	r3, r2
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d00b      	beq.n	8015de6 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015dce:	f3ef 8305 	mrs	r3, IPSR
 8015dd2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8015dd4:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8015dd6:	4b0c      	ldr	r3, [pc, #48]	; (8015e08 <_txe_byte_allocate+0xdc>)
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	4313      	orrs	r3, r2
 8015ddc:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8015de0:	d201      	bcs.n	8015de6 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8015de2:	2313      	movs	r3, #19
 8015de4:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8015de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d106      	bne.n	8015dfa <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8015dec:	683b      	ldr	r3, [r7, #0]
 8015dee:	687a      	ldr	r2, [r7, #4]
 8015df0:	68b9      	ldr	r1, [r7, #8]
 8015df2:	68f8      	ldr	r0, [r7, #12]
 8015df4:	f7fe f80e 	bl	8013e14 <_tx_byte_allocate>
 8015df8:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 8015dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015dfc:	4618      	mov	r0, r3
 8015dfe:	3728      	adds	r7, #40	; 0x28
 8015e00:	46bd      	mov	sp, r7
 8015e02:	bd80      	pop	{r7, pc}
 8015e04:	42595445 	.word	0x42595445
 8015e08:	20000054 	.word	0x20000054
 8015e0c:	201973d4 	.word	0x201973d4
 8015e10:	2019751c 	.word	0x2019751c

08015e14 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8015e14:	b580      	push	{r7, lr}
 8015e16:	b092      	sub	sp, #72	; 0x48
 8015e18:	af00      	add	r7, sp, #0
 8015e1a:	60f8      	str	r0, [r7, #12]
 8015e1c:	60b9      	str	r1, [r7, #8]
 8015e1e:	607a      	str	r2, [r7, #4]
 8015e20:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8015e22:	2300      	movs	r3, #0
 8015e24:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8015e26:	68fb      	ldr	r3, [r7, #12]
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d102      	bne.n	8015e32 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8015e2c:	2302      	movs	r3, #2
 8015e2e:	647b      	str	r3, [r7, #68]	; 0x44
 8015e30:	e075      	b.n	8015f1e <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8015e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015e34:	2b34      	cmp	r3, #52	; 0x34
 8015e36:	d002      	beq.n	8015e3e <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8015e38:	2302      	movs	r3, #2
 8015e3a:	647b      	str	r3, [r7, #68]	; 0x44
 8015e3c:	e06f      	b.n	8015f1e <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8015e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8015e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8015e46:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8015e48:	b672      	cpsid	i
    return(int_posture);
 8015e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8015e4c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8015e4e:	4b3b      	ldr	r3, [pc, #236]	; (8015f3c <_txe_byte_pool_create+0x128>)
 8015e50:	681b      	ldr	r3, [r3, #0]
 8015e52:	3301      	adds	r3, #1
 8015e54:	4a39      	ldr	r2, [pc, #228]	; (8015f3c <_txe_byte_pool_create+0x128>)
 8015e56:	6013      	str	r3, [r2, #0]
 8015e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e5a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e5e:	f383 8810 	msr	PRIMASK, r3
}
 8015e62:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8015e64:	4b36      	ldr	r3, [pc, #216]	; (8015f40 <_txe_byte_pool_create+0x12c>)
 8015e66:	681b      	ldr	r3, [r3, #0]
 8015e68:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8015e6a:	2300      	movs	r3, #0
 8015e6c:	643b      	str	r3, [r7, #64]	; 0x40
 8015e6e:	e009      	b.n	8015e84 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8015e70:	68fa      	ldr	r2, [r7, #12]
 8015e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e74:	429a      	cmp	r2, r3
 8015e76:	d00b      	beq.n	8015e90 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8015e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8015e7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015e80:	3301      	adds	r3, #1
 8015e82:	643b      	str	r3, [r7, #64]	; 0x40
 8015e84:	4b2f      	ldr	r3, [pc, #188]	; (8015f44 <_txe_byte_pool_create+0x130>)
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015e8a:	429a      	cmp	r2, r3
 8015e8c:	d3f0      	bcc.n	8015e70 <_txe_byte_pool_create+0x5c>
 8015e8e:	e000      	b.n	8015e92 <_txe_byte_pool_create+0x7e>
                break;
 8015e90:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015e92:	f3ef 8310 	mrs	r3, PRIMASK
 8015e96:	623b      	str	r3, [r7, #32]
    return(posture);
 8015e98:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8015e9a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015e9c:	b672      	cpsid	i
    return(int_posture);
 8015e9e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8015ea0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8015ea2:	4b26      	ldr	r3, [pc, #152]	; (8015f3c <_txe_byte_pool_create+0x128>)
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	3b01      	subs	r3, #1
 8015ea8:	4a24      	ldr	r2, [pc, #144]	; (8015f3c <_txe_byte_pool_create+0x128>)
 8015eaa:	6013      	str	r3, [r2, #0]
 8015eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015eae:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eb2:	f383 8810 	msr	PRIMASK, r3
}
 8015eb6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8015eb8:	f7ff fa22 	bl	8015300 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8015ebc:	68fa      	ldr	r2, [r7, #12]
 8015ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ec0:	429a      	cmp	r2, r3
 8015ec2:	d102      	bne.n	8015eca <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8015ec4:	2302      	movs	r3, #2
 8015ec6:	647b      	str	r3, [r7, #68]	; 0x44
 8015ec8:	e029      	b.n	8015f1e <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d102      	bne.n	8015ed6 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8015ed0:	2303      	movs	r3, #3
 8015ed2:	647b      	str	r3, [r7, #68]	; 0x44
 8015ed4:	e023      	b.n	8015f1e <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8015ed6:	683b      	ldr	r3, [r7, #0]
 8015ed8:	2b63      	cmp	r3, #99	; 0x63
 8015eda:	d802      	bhi.n	8015ee2 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8015edc:	2305      	movs	r3, #5
 8015ede:	647b      	str	r3, [r7, #68]	; 0x44
 8015ee0:	e01d      	b.n	8015f1e <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8015ee2:	4b19      	ldr	r3, [pc, #100]	; (8015f48 <_txe_byte_pool_create+0x134>)
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8015ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015eea:	4a18      	ldr	r2, [pc, #96]	; (8015f4c <_txe_byte_pool_create+0x138>)
 8015eec:	4293      	cmp	r3, r2
 8015eee:	d101      	bne.n	8015ef4 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8015ef0:	2313      	movs	r3, #19
 8015ef2:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015ef4:	f3ef 8305 	mrs	r3, IPSR
 8015ef8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8015efa:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015efc:	4b14      	ldr	r3, [pc, #80]	; (8015f50 <_txe_byte_pool_create+0x13c>)
 8015efe:	681b      	ldr	r3, [r3, #0]
 8015f00:	4313      	orrs	r3, r2
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d00b      	beq.n	8015f1e <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015f06:	f3ef 8305 	mrs	r3, IPSR
 8015f0a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8015f0c:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8015f0e:	4b10      	ldr	r3, [pc, #64]	; (8015f50 <_txe_byte_pool_create+0x13c>)
 8015f10:	681b      	ldr	r3, [r3, #0]
 8015f12:	4313      	orrs	r3, r2
 8015f14:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8015f18:	d201      	bcs.n	8015f1e <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8015f1a:	2313      	movs	r3, #19
 8015f1c:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8015f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d106      	bne.n	8015f32 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8015f24:	683b      	ldr	r3, [r7, #0]
 8015f26:	687a      	ldr	r2, [r7, #4]
 8015f28:	68b9      	ldr	r1, [r7, #8]
 8015f2a:	68f8      	ldr	r0, [r7, #12]
 8015f2c:	f7fe f8b4 	bl	8014098 <_tx_byte_pool_create>
 8015f30:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8015f32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8015f34:	4618      	mov	r0, r3
 8015f36:	3748      	adds	r7, #72	; 0x48
 8015f38:	46bd      	mov	sp, r7
 8015f3a:	bd80      	pop	{r7, pc}
 8015f3c:	2019746c 	.word	0x2019746c
 8015f40:	201973c4 	.word	0x201973c4
 8015f44:	201973c8 	.word	0x201973c8
 8015f48:	201973d4 	.word	0x201973d4
 8015f4c:	2019751c 	.word	0x2019751c
 8015f50:	20000054 	.word	0x20000054

08015f54 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 8015f54:	b580      	push	{r7, lr}
 8015f56:	b094      	sub	sp, #80	; 0x50
 8015f58:	af02      	add	r7, sp, #8
 8015f5a:	60f8      	str	r0, [r7, #12]
 8015f5c:	60b9      	str	r1, [r7, #8]
 8015f5e:	607a      	str	r2, [r7, #4]
 8015f60:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8015f62:	2300      	movs	r3, #0
 8015f64:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d102      	bne.n	8015f72 <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8015f6c:	2309      	movs	r3, #9
 8015f6e:	647b      	str	r3, [r7, #68]	; 0x44
 8015f70:	e083      	b.n	801607a <_txe_queue_create+0x126>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 8015f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015f74:	2b38      	cmp	r3, #56	; 0x38
 8015f76:	d002      	beq.n	8015f7e <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8015f78:	2309      	movs	r3, #9
 8015f7a:	647b      	str	r3, [r7, #68]	; 0x44
 8015f7c:	e07d      	b.n	801607a <_txe_queue_create+0x126>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015f7e:	f3ef 8310 	mrs	r3, PRIMASK
 8015f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8015f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8015f86:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8015f88:	b672      	cpsid	i
    return(int_posture);
 8015f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8015f8c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8015f8e:	4b43      	ldr	r3, [pc, #268]	; (801609c <_txe_queue_create+0x148>)
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	3301      	adds	r3, #1
 8015f94:	4a41      	ldr	r2, [pc, #260]	; (801609c <_txe_queue_create+0x148>)
 8015f96:	6013      	str	r3, [r2, #0]
 8015f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f9a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f9e:	f383 8810 	msr	PRIMASK, r3
}
 8015fa2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 8015fa4:	4b3e      	ldr	r3, [pc, #248]	; (80160a0 <_txe_queue_create+0x14c>)
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 8015faa:	2300      	movs	r3, #0
 8015fac:	643b      	str	r3, [r7, #64]	; 0x40
 8015fae:	e009      	b.n	8015fc4 <_txe_queue_create+0x70>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 8015fb0:	68fa      	ldr	r2, [r7, #12]
 8015fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015fb4:	429a      	cmp	r2, r3
 8015fb6:	d00b      	beq.n	8015fd0 <_txe_queue_create+0x7c>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 8015fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 8015fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015fc0:	3301      	adds	r3, #1
 8015fc2:	643b      	str	r3, [r7, #64]	; 0x40
 8015fc4:	4b37      	ldr	r3, [pc, #220]	; (80160a4 <_txe_queue_create+0x150>)
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015fca:	429a      	cmp	r2, r3
 8015fcc:	d3f0      	bcc.n	8015fb0 <_txe_queue_create+0x5c>
 8015fce:	e000      	b.n	8015fd2 <_txe_queue_create+0x7e>
                break;
 8015fd0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8015fd6:	623b      	str	r3, [r7, #32]
    return(posture);
 8015fd8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8015fda:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015fdc:	b672      	cpsid	i
    return(int_posture);
 8015fde:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8015fe0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8015fe2:	4b2e      	ldr	r3, [pc, #184]	; (801609c <_txe_queue_create+0x148>)
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	3b01      	subs	r3, #1
 8015fe8:	4a2c      	ldr	r2, [pc, #176]	; (801609c <_txe_queue_create+0x148>)
 8015fea:	6013      	str	r3, [r2, #0]
 8015fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fee:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ff2:	f383 8810 	msr	PRIMASK, r3
}
 8015ff6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8015ff8:	f7ff f982 	bl	8015300 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 8015ffc:	68fa      	ldr	r2, [r7, #12]
 8015ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016000:	429a      	cmp	r2, r3
 8016002:	d102      	bne.n	801600a <_txe_queue_create+0xb6>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 8016004:	2309      	movs	r3, #9
 8016006:	647b      	str	r3, [r7, #68]	; 0x44
 8016008:	e037      	b.n	801607a <_txe_queue_create+0x126>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 801600a:	683b      	ldr	r3, [r7, #0]
 801600c:	2b00      	cmp	r3, #0
 801600e:	d102      	bne.n	8016016 <_txe_queue_create+0xc2>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 8016010:	2303      	movs	r3, #3
 8016012:	647b      	str	r3, [r7, #68]	; 0x44
 8016014:	e031      	b.n	801607a <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	2b00      	cmp	r3, #0
 801601a:	d102      	bne.n	8016022 <_txe_queue_create+0xce>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 801601c:	2305      	movs	r3, #5
 801601e:	647b      	str	r3, [r7, #68]	; 0x44
 8016020:	e02b      	b.n	801607a <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	2b10      	cmp	r3, #16
 8016026:	d902      	bls.n	801602e <_txe_queue_create+0xda>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 8016028:	2305      	movs	r3, #5
 801602a:	647b      	str	r3, [r7, #68]	; 0x44
 801602c:	e025      	b.n	801607a <_txe_queue_create+0x126>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 801602e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016030:	089b      	lsrs	r3, r3, #2
 8016032:	687a      	ldr	r2, [r7, #4]
 8016034:	429a      	cmp	r2, r3
 8016036:	d902      	bls.n	801603e <_txe_queue_create+0xea>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 8016038:	2305      	movs	r3, #5
 801603a:	647b      	str	r3, [r7, #68]	; 0x44
 801603c:	e01d      	b.n	801607a <_txe_queue_create+0x126>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801603e:	4b1a      	ldr	r3, [pc, #104]	; (80160a8 <_txe_queue_create+0x154>)
 8016040:	681b      	ldr	r3, [r3, #0]
 8016042:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8016044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016046:	4a19      	ldr	r2, [pc, #100]	; (80160ac <_txe_queue_create+0x158>)
 8016048:	4293      	cmp	r3, r2
 801604a:	d101      	bne.n	8016050 <_txe_queue_create+0xfc>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801604c:	2313      	movs	r3, #19
 801604e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016050:	f3ef 8305 	mrs	r3, IPSR
 8016054:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8016056:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8016058:	4b15      	ldr	r3, [pc, #84]	; (80160b0 <_txe_queue_create+0x15c>)
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	4313      	orrs	r3, r2
 801605e:	2b00      	cmp	r3, #0
 8016060:	d00b      	beq.n	801607a <_txe_queue_create+0x126>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016062:	f3ef 8305 	mrs	r3, IPSR
 8016066:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8016068:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801606a:	4b11      	ldr	r3, [pc, #68]	; (80160b0 <_txe_queue_create+0x15c>)
 801606c:	681b      	ldr	r3, [r3, #0]
 801606e:	4313      	orrs	r3, r2
 8016070:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8016074:	d201      	bcs.n	801607a <_txe_queue_create+0x126>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8016076:	2313      	movs	r3, #19
 8016078:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801607a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801607c:	2b00      	cmp	r3, #0
 801607e:	d108      	bne.n	8016092 <_txe_queue_create+0x13e>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 8016080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016082:	9300      	str	r3, [sp, #0]
 8016084:	683b      	ldr	r3, [r7, #0]
 8016086:	687a      	ldr	r2, [r7, #4]
 8016088:	68b9      	ldr	r1, [r7, #8]
 801608a:	68f8      	ldr	r0, [r7, #12]
 801608c:	f7fe fa9a 	bl	80145c4 <_tx_queue_create>
 8016090:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8016092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8016094:	4618      	mov	r0, r3
 8016096:	3748      	adds	r7, #72	; 0x48
 8016098:	46bd      	mov	sp, r7
 801609a:	bd80      	pop	{r7, pc}
 801609c:	2019746c 	.word	0x2019746c
 80160a0:	201973a4 	.word	0x201973a4
 80160a4:	201973a8 	.word	0x201973a8
 80160a8:	201973d4 	.word	0x201973d4
 80160ac:	2019751c 	.word	0x2019751c
 80160b0:	20000054 	.word	0x20000054

080160b4 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 80160b4:	b580      	push	{r7, lr}
 80160b6:	b088      	sub	sp, #32
 80160b8:	af00      	add	r7, sp, #0
 80160ba:	60f8      	str	r0, [r7, #12]
 80160bc:	60b9      	str	r1, [r7, #8]
 80160be:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80160c0:	2300      	movs	r3, #0
 80160c2:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d102      	bne.n	80160d0 <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80160ca:	2309      	movs	r3, #9
 80160cc:	61fb      	str	r3, [r7, #28]
 80160ce:	e025      	b.n	801611c <_txe_queue_receive+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	681b      	ldr	r3, [r3, #0]
 80160d4:	4a18      	ldr	r2, [pc, #96]	; (8016138 <_txe_queue_receive+0x84>)
 80160d6:	4293      	cmp	r3, r2
 80160d8:	d002      	beq.n	80160e0 <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80160da:	2309      	movs	r3, #9
 80160dc:	61fb      	str	r3, [r7, #28]
 80160de:	e01d      	b.n	801611c <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 80160e0:	68bb      	ldr	r3, [r7, #8]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d102      	bne.n	80160ec <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 80160e6:	2303      	movs	r3, #3
 80160e8:	61fb      	str	r3, [r7, #28]
 80160ea:	e017      	b.n	801611c <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d014      	beq.n	801611c <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80160f2:	f3ef 8305 	mrs	r3, IPSR
 80160f6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80160f8:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80160fa:	4b10      	ldr	r3, [pc, #64]	; (801613c <_txe_queue_receive+0x88>)
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	4313      	orrs	r3, r2
 8016100:	2b00      	cmp	r3, #0
 8016102:	d002      	beq.n	801610a <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8016104:	2304      	movs	r3, #4
 8016106:	61fb      	str	r3, [r7, #28]
 8016108:	e008      	b.n	801611c <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 801610a:	4b0d      	ldr	r3, [pc, #52]	; (8016140 <_txe_queue_receive+0x8c>)
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8016110:	69bb      	ldr	r3, [r7, #24]
 8016112:	4a0c      	ldr	r2, [pc, #48]	; (8016144 <_txe_queue_receive+0x90>)
 8016114:	4293      	cmp	r3, r2
 8016116:	d101      	bne.n	801611c <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8016118:	2304      	movs	r3, #4
 801611a:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801611c:	69fb      	ldr	r3, [r7, #28]
 801611e:	2b00      	cmp	r3, #0
 8016120:	d105      	bne.n	801612e <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 8016122:	687a      	ldr	r2, [r7, #4]
 8016124:	68b9      	ldr	r1, [r7, #8]
 8016126:	68f8      	ldr	r0, [r7, #12]
 8016128:	f7fe fac0 	bl	80146ac <_tx_queue_receive>
 801612c:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 801612e:	69fb      	ldr	r3, [r7, #28]
}
 8016130:	4618      	mov	r0, r3
 8016132:	3720      	adds	r7, #32
 8016134:	46bd      	mov	sp, r7
 8016136:	bd80      	pop	{r7, pc}
 8016138:	51554555 	.word	0x51554555
 801613c:	20000054 	.word	0x20000054
 8016140:	201973d4 	.word	0x201973d4
 8016144:	2019751c 	.word	0x2019751c

08016148 <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8016148:	b580      	push	{r7, lr}
 801614a:	b088      	sub	sp, #32
 801614c:	af00      	add	r7, sp, #0
 801614e:	60f8      	str	r0, [r7, #12]
 8016150:	60b9      	str	r1, [r7, #8]
 8016152:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8016154:	2300      	movs	r3, #0
 8016156:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	2b00      	cmp	r3, #0
 801615c:	d102      	bne.n	8016164 <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 801615e:	2309      	movs	r3, #9
 8016160:	61fb      	str	r3, [r7, #28]
 8016162:	e025      	b.n	80161b0 <_txe_queue_send+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	4a18      	ldr	r2, [pc, #96]	; (80161cc <_txe_queue_send+0x84>)
 801616a:	4293      	cmp	r3, r2
 801616c:	d002      	beq.n	8016174 <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 801616e:	2309      	movs	r3, #9
 8016170:	61fb      	str	r3, [r7, #28]
 8016172:	e01d      	b.n	80161b0 <_txe_queue_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 8016174:	68bb      	ldr	r3, [r7, #8]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d102      	bne.n	8016180 <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 801617a:	2303      	movs	r3, #3
 801617c:	61fb      	str	r3, [r7, #28]
 801617e:	e017      	b.n	80161b0 <_txe_queue_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	2b00      	cmp	r3, #0
 8016184:	d014      	beq.n	80161b0 <_txe_queue_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016186:	f3ef 8305 	mrs	r3, IPSR
 801618a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801618c:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801618e:	4b10      	ldr	r3, [pc, #64]	; (80161d0 <_txe_queue_send+0x88>)
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	4313      	orrs	r3, r2
 8016194:	2b00      	cmp	r3, #0
 8016196:	d002      	beq.n	801619e <_txe_queue_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8016198:	2304      	movs	r3, #4
 801619a:	61fb      	str	r3, [r7, #28]
 801619c:	e008      	b.n	80161b0 <_txe_queue_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 801619e:	4b0d      	ldr	r3, [pc, #52]	; (80161d4 <_txe_queue_send+0x8c>)
 80161a0:	681b      	ldr	r3, [r3, #0]
 80161a2:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 80161a4:	69bb      	ldr	r3, [r7, #24]
 80161a6:	4a0c      	ldr	r2, [pc, #48]	; (80161d8 <_txe_queue_send+0x90>)
 80161a8:	4293      	cmp	r3, r2
 80161aa:	d101      	bne.n	80161b0 <_txe_queue_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 80161ac:	2304      	movs	r3, #4
 80161ae:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80161b0:	69fb      	ldr	r3, [r7, #28]
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d105      	bne.n	80161c2 <_txe_queue_send+0x7a>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 80161b6:	687a      	ldr	r2, [r7, #4]
 80161b8:	68b9      	ldr	r1, [r7, #8]
 80161ba:	68f8      	ldr	r0, [r7, #12]
 80161bc:	f7fe fc3e 	bl	8014a3c <_tx_queue_send>
 80161c0:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 80161c2:	69fb      	ldr	r3, [r7, #28]
}
 80161c4:	4618      	mov	r0, r3
 80161c6:	3720      	adds	r7, #32
 80161c8:	46bd      	mov	sp, r7
 80161ca:	bd80      	pop	{r7, pc}
 80161cc:	51554555 	.word	0x51554555
 80161d0:	20000054 	.word	0x20000054
 80161d4:	201973d4 	.word	0x201973d4
 80161d8:	2019751c 	.word	0x2019751c

080161dc <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 80161dc:	b580      	push	{r7, lr}
 80161de:	b092      	sub	sp, #72	; 0x48
 80161e0:	af00      	add	r7, sp, #0
 80161e2:	60f8      	str	r0, [r7, #12]
 80161e4:	60b9      	str	r1, [r7, #8]
 80161e6:	607a      	str	r2, [r7, #4]
 80161e8:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80161ea:	2300      	movs	r3, #0
 80161ec:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80161ee:	68fb      	ldr	r3, [r7, #12]
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d102      	bne.n	80161fa <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80161f4:	230c      	movs	r3, #12
 80161f6:	647b      	str	r3, [r7, #68]	; 0x44
 80161f8:	e054      	b.n	80162a4 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 80161fa:	683b      	ldr	r3, [r7, #0]
 80161fc:	2b1c      	cmp	r3, #28
 80161fe:	d002      	beq.n	8016206 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8016200:	230c      	movs	r3, #12
 8016202:	647b      	str	r3, [r7, #68]	; 0x44
 8016204:	e04e      	b.n	80162a4 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8016206:	f3ef 8310 	mrs	r3, PRIMASK
 801620a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 801620c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801620e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8016210:	b672      	cpsid	i
    return(int_posture);
 8016212:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8016214:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8016216:	4b36      	ldr	r3, [pc, #216]	; (80162f0 <_txe_semaphore_create+0x114>)
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	3301      	adds	r3, #1
 801621c:	4a34      	ldr	r2, [pc, #208]	; (80162f0 <_txe_semaphore_create+0x114>)
 801621e:	6013      	str	r3, [r2, #0]
 8016220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016222:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016226:	f383 8810 	msr	PRIMASK, r3
}
 801622a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 801622c:	4b31      	ldr	r3, [pc, #196]	; (80162f4 <_txe_semaphore_create+0x118>)
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8016232:	2300      	movs	r3, #0
 8016234:	643b      	str	r3, [r7, #64]	; 0x40
 8016236:	e009      	b.n	801624c <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 8016238:	68fa      	ldr	r2, [r7, #12]
 801623a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801623c:	429a      	cmp	r2, r3
 801623e:	d00b      	beq.n	8016258 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 8016240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016242:	695b      	ldr	r3, [r3, #20]
 8016244:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8016246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016248:	3301      	adds	r3, #1
 801624a:	643b      	str	r3, [r7, #64]	; 0x40
 801624c:	4b2a      	ldr	r3, [pc, #168]	; (80162f8 <_txe_semaphore_create+0x11c>)
 801624e:	681b      	ldr	r3, [r3, #0]
 8016250:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016252:	429a      	cmp	r2, r3
 8016254:	d3f0      	bcc.n	8016238 <_txe_semaphore_create+0x5c>
 8016256:	e000      	b.n	801625a <_txe_semaphore_create+0x7e>
                break;
 8016258:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801625a:	f3ef 8310 	mrs	r3, PRIMASK
 801625e:	623b      	str	r3, [r7, #32]
    return(posture);
 8016260:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8016262:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8016264:	b672      	cpsid	i
    return(int_posture);
 8016266:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8016268:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801626a:	4b21      	ldr	r3, [pc, #132]	; (80162f0 <_txe_semaphore_create+0x114>)
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	3b01      	subs	r3, #1
 8016270:	4a1f      	ldr	r2, [pc, #124]	; (80162f0 <_txe_semaphore_create+0x114>)
 8016272:	6013      	str	r3, [r2, #0]
 8016274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016276:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801627a:	f383 8810 	msr	PRIMASK, r3
}
 801627e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8016280:	f7ff f83e 	bl	8015300 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 8016284:	68fa      	ldr	r2, [r7, #12]
 8016286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016288:	429a      	cmp	r2, r3
 801628a:	d102      	bne.n	8016292 <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 801628c:	230c      	movs	r3, #12
 801628e:	647b      	str	r3, [r7, #68]	; 0x44
 8016290:	e008      	b.n	80162a4 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8016292:	4b1a      	ldr	r3, [pc, #104]	; (80162fc <_txe_semaphore_create+0x120>)
 8016294:	681b      	ldr	r3, [r3, #0]
 8016296:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8016298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801629a:	4a19      	ldr	r2, [pc, #100]	; (8016300 <_txe_semaphore_create+0x124>)
 801629c:	4293      	cmp	r3, r2
 801629e:	d101      	bne.n	80162a4 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80162a0:	2313      	movs	r3, #19
 80162a2:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80162a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d114      	bne.n	80162d4 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80162aa:	f3ef 8305 	mrs	r3, IPSR
 80162ae:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80162b0:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80162b2:	4b14      	ldr	r3, [pc, #80]	; (8016304 <_txe_semaphore_create+0x128>)
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	4313      	orrs	r3, r2
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d00b      	beq.n	80162d4 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80162bc:	f3ef 8305 	mrs	r3, IPSR
 80162c0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80162c2:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80162c4:	4b0f      	ldr	r3, [pc, #60]	; (8016304 <_txe_semaphore_create+0x128>)
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	4313      	orrs	r3, r2
 80162ca:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80162ce:	d201      	bcs.n	80162d4 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80162d0:	2313      	movs	r3, #19
 80162d2:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80162d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d105      	bne.n	80162e6 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 80162da:	687a      	ldr	r2, [r7, #4]
 80162dc:	68b9      	ldr	r1, [r7, #8]
 80162de:	68f8      	ldr	r0, [r7, #12]
 80162e0:	f7fe fd54 	bl	8014d8c <_tx_semaphore_create>
 80162e4:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 80162e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80162e8:	4618      	mov	r0, r3
 80162ea:	3748      	adds	r7, #72	; 0x48
 80162ec:	46bd      	mov	sp, r7
 80162ee:	bd80      	pop	{r7, pc}
 80162f0:	2019746c 	.word	0x2019746c
 80162f4:	2019739c 	.word	0x2019739c
 80162f8:	201973a0 	.word	0x201973a0
 80162fc:	201973d4 	.word	0x201973d4
 8016300:	2019751c 	.word	0x2019751c
 8016304:	20000054 	.word	0x20000054

08016308 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8016308:	b580      	push	{r7, lr}
 801630a:	b086      	sub	sp, #24
 801630c:	af00      	add	r7, sp, #0
 801630e:	6078      	str	r0, [r7, #4]
 8016310:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8016312:	2300      	movs	r3, #0
 8016314:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	2b00      	cmp	r3, #0
 801631a:	d102      	bne.n	8016322 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801631c:	230c      	movs	r3, #12
 801631e:	617b      	str	r3, [r7, #20]
 8016320:	e01f      	b.n	8016362 <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	681b      	ldr	r3, [r3, #0]
 8016326:	4a15      	ldr	r2, [pc, #84]	; (801637c <_txe_semaphore_get+0x74>)
 8016328:	4293      	cmp	r3, r2
 801632a:	d002      	beq.n	8016332 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801632c:	230c      	movs	r3, #12
 801632e:	617b      	str	r3, [r7, #20]
 8016330:	e017      	b.n	8016362 <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8016332:	683b      	ldr	r3, [r7, #0]
 8016334:	2b00      	cmp	r3, #0
 8016336:	d014      	beq.n	8016362 <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016338:	f3ef 8305 	mrs	r3, IPSR
 801633c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 801633e:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8016340:	4b0f      	ldr	r3, [pc, #60]	; (8016380 <_txe_semaphore_get+0x78>)
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	4313      	orrs	r3, r2
 8016346:	2b00      	cmp	r3, #0
 8016348:	d002      	beq.n	8016350 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 801634a:	2304      	movs	r3, #4
 801634c:	617b      	str	r3, [r7, #20]
 801634e:	e008      	b.n	8016362 <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8016350:	4b0c      	ldr	r3, [pc, #48]	; (8016384 <_txe_semaphore_get+0x7c>)
 8016352:	681b      	ldr	r3, [r3, #0]
 8016354:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8016356:	693b      	ldr	r3, [r7, #16]
 8016358:	4a0b      	ldr	r2, [pc, #44]	; (8016388 <_txe_semaphore_get+0x80>)
 801635a:	4293      	cmp	r3, r2
 801635c:	d101      	bne.n	8016362 <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 801635e:	2304      	movs	r3, #4
 8016360:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8016362:	697b      	ldr	r3, [r7, #20]
 8016364:	2b00      	cmp	r3, #0
 8016366:	d104      	bne.n	8016372 <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 8016368:	6839      	ldr	r1, [r7, #0]
 801636a:	6878      	ldr	r0, [r7, #4]
 801636c:	f7fe fd60 	bl	8014e30 <_tx_semaphore_get>
 8016370:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8016372:	697b      	ldr	r3, [r7, #20]
}
 8016374:	4618      	mov	r0, r3
 8016376:	3718      	adds	r7, #24
 8016378:	46bd      	mov	sp, r7
 801637a:	bd80      	pop	{r7, pc}
 801637c:	53454d41 	.word	0x53454d41
 8016380:	20000054 	.word	0x20000054
 8016384:	201973d4 	.word	0x201973d4
 8016388:	2019751c 	.word	0x2019751c

0801638c <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 801638c:	b580      	push	{r7, lr}
 801638e:	b084      	sub	sp, #16
 8016390:	af00      	add	r7, sp, #0
 8016392:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	2b00      	cmp	r3, #0
 8016398:	d102      	bne.n	80163a0 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801639a:	230c      	movs	r3, #12
 801639c:	60fb      	str	r3, [r7, #12]
 801639e:	e00b      	b.n	80163b8 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	4a07      	ldr	r2, [pc, #28]	; (80163c4 <_txe_semaphore_put+0x38>)
 80163a6:	4293      	cmp	r3, r2
 80163a8:	d002      	beq.n	80163b0 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80163aa:	230c      	movs	r3, #12
 80163ac:	60fb      	str	r3, [r7, #12]
 80163ae:	e003      	b.n	80163b8 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 80163b0:	6878      	ldr	r0, [r7, #4]
 80163b2:	f7fe fdcf 	bl	8014f54 <_tx_semaphore_put>
 80163b6:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 80163b8:	68fb      	ldr	r3, [r7, #12]
}
 80163ba:	4618      	mov	r0, r3
 80163bc:	3710      	adds	r7, #16
 80163be:	46bd      	mov	sp, r7
 80163c0:	bd80      	pop	{r7, pc}
 80163c2:	bf00      	nop
 80163c4:	53454d41 	.word	0x53454d41

080163c8 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 80163c8:	b580      	push	{r7, lr}
 80163ca:	b09a      	sub	sp, #104	; 0x68
 80163cc:	af06      	add	r7, sp, #24
 80163ce:	60f8      	str	r0, [r7, #12]
 80163d0:	60b9      	str	r1, [r7, #8]
 80163d2:	607a      	str	r2, [r7, #4]
 80163d4:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80163d6:	2300      	movs	r3, #0
 80163d8:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d102      	bne.n	80163e6 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80163e0:	230e      	movs	r3, #14
 80163e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80163e4:	e0bb      	b.n	801655e <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 80163e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80163e8:	2bb0      	cmp	r3, #176	; 0xb0
 80163ea:	d002      	beq.n	80163f2 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80163ec:	230e      	movs	r3, #14
 80163ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80163f0:	e0b5      	b.n	801655e <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80163f2:	f3ef 8310 	mrs	r3, PRIMASK
 80163f6:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80163f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80163fa:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80163fc:	b672      	cpsid	i
    return(int_posture);
 80163fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8016400:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8016402:	4b64      	ldr	r3, [pc, #400]	; (8016594 <_txe_thread_create+0x1cc>)
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	3301      	adds	r3, #1
 8016408:	4a62      	ldr	r2, [pc, #392]	; (8016594 <_txe_thread_create+0x1cc>)
 801640a:	6013      	str	r3, [r2, #0]
 801640c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801640e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016412:	f383 8810 	msr	PRIMASK, r3
}
 8016416:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8016418:	2300      	movs	r3, #0
 801641a:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 801641c:	4b5e      	ldr	r3, [pc, #376]	; (8016598 <_txe_thread_create+0x1d0>)
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8016422:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016424:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8016426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016428:	3b01      	subs	r3, #1
 801642a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801642c:	4413      	add	r3, r2
 801642e:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8016430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016432:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8016434:	2300      	movs	r3, #0
 8016436:	647b      	str	r3, [r7, #68]	; 0x44
 8016438:	e02b      	b.n	8016492 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 801643a:	68fa      	ldr	r2, [r7, #12]
 801643c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801643e:	429a      	cmp	r2, r3
 8016440:	d101      	bne.n	8016446 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8016442:	2301      	movs	r3, #1
 8016444:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8016446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016448:	2b01      	cmp	r3, #1
 801644a:	d028      	beq.n	801649e <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 801644c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801644e:	68db      	ldr	r3, [r3, #12]
 8016450:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016452:	429a      	cmp	r2, r3
 8016454:	d308      	bcc.n	8016468 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8016456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016458:	691b      	ldr	r3, [r3, #16]
 801645a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801645c:	429a      	cmp	r2, r3
 801645e:	d203      	bcs.n	8016468 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8016460:	2300      	movs	r3, #0
 8016462:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8016464:	2301      	movs	r3, #1
 8016466:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8016468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801646a:	68db      	ldr	r3, [r3, #12]
 801646c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801646e:	429a      	cmp	r2, r3
 8016470:	d308      	bcc.n	8016484 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8016472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016474:	691b      	ldr	r3, [r3, #16]
 8016476:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016478:	429a      	cmp	r2, r3
 801647a:	d203      	bcs.n	8016484 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 801647c:	2300      	movs	r3, #0
 801647e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8016480:	2301      	movs	r3, #1
 8016482:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8016484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801648a:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 801648c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801648e:	3301      	adds	r3, #1
 8016490:	647b      	str	r3, [r7, #68]	; 0x44
 8016492:	4b42      	ldr	r3, [pc, #264]	; (801659c <_txe_thread_create+0x1d4>)
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016498:	429a      	cmp	r2, r3
 801649a:	d3ce      	bcc.n	801643a <_txe_thread_create+0x72>
 801649c:	e000      	b.n	80164a0 <_txe_thread_create+0xd8>
                break;
 801649e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80164a0:	f3ef 8310 	mrs	r3, PRIMASK
 80164a4:	61fb      	str	r3, [r7, #28]
    return(posture);
 80164a6:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80164a8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80164aa:	b672      	cpsid	i
    return(int_posture);
 80164ac:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80164ae:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80164b0:	4b38      	ldr	r3, [pc, #224]	; (8016594 <_txe_thread_create+0x1cc>)
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	3b01      	subs	r3, #1
 80164b6:	4a37      	ldr	r2, [pc, #220]	; (8016594 <_txe_thread_create+0x1cc>)
 80164b8:	6013      	str	r3, [r2, #0]
 80164ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80164bc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80164be:	6a3b      	ldr	r3, [r7, #32]
 80164c0:	f383 8810 	msr	PRIMASK, r3
}
 80164c4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80164c6:	f7fe ff1b 	bl	8015300 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 80164ca:	68fa      	ldr	r2, [r7, #12]
 80164cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80164ce:	429a      	cmp	r2, r3
 80164d0:	d102      	bne.n	80164d8 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 80164d2:	230e      	movs	r3, #14
 80164d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80164d6:	e042      	b.n	801655e <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 80164d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d102      	bne.n	80164e4 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80164de:	2303      	movs	r3, #3
 80164e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80164e2:	e03c      	b.n	801655e <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d102      	bne.n	80164f0 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80164ea:	2303      	movs	r3, #3
 80164ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80164ee:	e036      	b.n	801655e <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 80164f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80164f2:	2bc7      	cmp	r3, #199	; 0xc7
 80164f4:	d802      	bhi.n	80164fc <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 80164f6:	2305      	movs	r3, #5
 80164f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80164fa:	e030      	b.n	801655e <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 80164fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80164fe:	2b1f      	cmp	r3, #31
 8016500:	d902      	bls.n	8016508 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8016502:	230f      	movs	r3, #15
 8016504:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016506:	e02a      	b.n	801655e <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8016508:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801650a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801650c:	429a      	cmp	r2, r3
 801650e:	d902      	bls.n	8016516 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8016510:	2318      	movs	r3, #24
 8016512:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016514:	e023      	b.n	801655e <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8016516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016518:	2b01      	cmp	r3, #1
 801651a:	d902      	bls.n	8016522 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 801651c:	2310      	movs	r3, #16
 801651e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016520:	e01d      	b.n	801655e <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8016522:	4b1f      	ldr	r3, [pc, #124]	; (80165a0 <_txe_thread_create+0x1d8>)
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8016528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801652a:	4a1e      	ldr	r2, [pc, #120]	; (80165a4 <_txe_thread_create+0x1dc>)
 801652c:	4293      	cmp	r3, r2
 801652e:	d101      	bne.n	8016534 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8016530:	2313      	movs	r3, #19
 8016532:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016534:	f3ef 8305 	mrs	r3, IPSR
 8016538:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801653a:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801653c:	4b1a      	ldr	r3, [pc, #104]	; (80165a8 <_txe_thread_create+0x1e0>)
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	4313      	orrs	r3, r2
 8016542:	2b00      	cmp	r3, #0
 8016544:	d00b      	beq.n	801655e <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016546:	f3ef 8305 	mrs	r3, IPSR
 801654a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 801654c:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801654e:	4b16      	ldr	r3, [pc, #88]	; (80165a8 <_txe_thread_create+0x1e0>)
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	4313      	orrs	r3, r2
 8016554:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8016558:	d201      	bcs.n	801655e <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 801655a:	2313      	movs	r3, #19
 801655c:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801655e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016560:	2b00      	cmp	r3, #0
 8016562:	d112      	bne.n	801658a <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8016564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016566:	9305      	str	r3, [sp, #20]
 8016568:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801656a:	9304      	str	r3, [sp, #16]
 801656c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801656e:	9303      	str	r3, [sp, #12]
 8016570:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016572:	9302      	str	r3, [sp, #8]
 8016574:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016576:	9301      	str	r3, [sp, #4]
 8016578:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801657a:	9300      	str	r3, [sp, #0]
 801657c:	683b      	ldr	r3, [r7, #0]
 801657e:	687a      	ldr	r2, [r7, #4]
 8016580:	68b9      	ldr	r1, [r7, #8]
 8016582:	68f8      	ldr	r0, [r7, #12]
 8016584:	f7fe fd3e 	bl	8015004 <_tx_thread_create>
 8016588:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 801658a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 801658c:	4618      	mov	r0, r3
 801658e:	3750      	adds	r7, #80	; 0x50
 8016590:	46bd      	mov	sp, r7
 8016592:	bd80      	pop	{r7, pc}
 8016594:	2019746c 	.word	0x2019746c
 8016598:	201973dc 	.word	0x201973dc
 801659c:	201973e0 	.word	0x201973e0
 80165a0:	201973d4 	.word	0x201973d4
 80165a4:	2019751c 	.word	0x2019751c
 80165a8:	20000054 	.word	0x20000054

080165ac <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80165ac:	8880      	ldrh	r0, [r0, #4]
 80165ae:	4770      	bx	lr

080165b0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80165b0:	b570      	push	{r4, r5, r6, lr}
 80165b2:	6803      	ldr	r3, [r0, #0]
 80165b4:	4605      	mov	r5, r0
 80165b6:	460c      	mov	r4, r1
 80165b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165ba:	2100      	movs	r1, #0
 80165bc:	4798      	blx	r3
 80165be:	682b      	ldr	r3, [r5, #0]
 80165c0:	4606      	mov	r6, r0
 80165c2:	6a1b      	ldr	r3, [r3, #32]
 80165c4:	4628      	mov	r0, r5
 80165c6:	4798      	blx	r3
 80165c8:	1ba4      	subs	r4, r4, r6
 80165ca:	b2a4      	uxth	r4, r4
 80165cc:	fbb4 f0f0 	udiv	r0, r4, r0
 80165d0:	bd70      	pop	{r4, r5, r6, pc}

080165d2 <_ZN8touchgfx17AbstractPartition5clearEv>:
 80165d2:	2300      	movs	r3, #0
 80165d4:	8083      	strh	r3, [r0, #4]
 80165d6:	4770      	bx	lr

080165d8 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80165d8:	b510      	push	{r4, lr}
 80165da:	4604      	mov	r4, r0
 80165dc:	6803      	ldr	r3, [r0, #0]
 80165de:	8881      	ldrh	r1, [r0, #4]
 80165e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165e2:	4798      	blx	r3
 80165e4:	88a3      	ldrh	r3, [r4, #4]
 80165e6:	3301      	adds	r3, #1
 80165e8:	80a3      	strh	r3, [r4, #4]
 80165ea:	bd10      	pop	{r4, pc}

080165ec <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80165ec:	6803      	ldr	r3, [r0, #0]
 80165ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165f0:	4718      	bx	r3

080165f2 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80165f2:	4770      	bx	lr

080165f4 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80165f4:	4a02      	ldr	r2, [pc, #8]	; (8016600 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80165f6:	6002      	str	r2, [r0, #0]
 80165f8:	2200      	movs	r2, #0
 80165fa:	8082      	strh	r2, [r0, #4]
 80165fc:	4770      	bx	lr
 80165fe:	bf00      	nop
 8016600:	0802b900 	.word	0x0802b900

08016604 <_ZN8touchgfx9Container13getFirstChildEv>:
 8016604:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016606:	4770      	bx	lr

08016608 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8016608:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801660a:	2000      	movs	r0, #0
 801660c:	b12b      	cbz	r3, 801661a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801660e:	b920      	cbnz	r0, 801661a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8016610:	1a5a      	subs	r2, r3, r1
 8016612:	4250      	negs	r0, r2
 8016614:	4150      	adcs	r0, r2
 8016616:	699b      	ldr	r3, [r3, #24]
 8016618:	e7f8      	b.n	801660c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801661a:	4770      	bx	lr

0801661c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 801661c:	2300      	movs	r3, #0
 801661e:	6148      	str	r0, [r1, #20]
 8016620:	618b      	str	r3, [r1, #24]
 8016622:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016624:	b913      	cbnz	r3, 801662c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8016626:	6281      	str	r1, [r0, #40]	; 0x28
 8016628:	4770      	bx	lr
 801662a:	4613      	mov	r3, r2
 801662c:	699a      	ldr	r2, [r3, #24]
 801662e:	2a00      	cmp	r2, #0
 8016630:	d1fb      	bne.n	801662a <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8016632:	6199      	str	r1, [r3, #24]
 8016634:	4770      	bx	lr

08016636 <_ZN8touchgfx9Container9removeAllEv>:
 8016636:	2200      	movs	r2, #0
 8016638:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801663a:	b123      	cbz	r3, 8016646 <_ZN8touchgfx9Container9removeAllEv+0x10>
 801663c:	6999      	ldr	r1, [r3, #24]
 801663e:	6281      	str	r1, [r0, #40]	; 0x28
 8016640:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8016644:	e7f8      	b.n	8016638 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8016646:	4770      	bx	lr

08016648 <_ZN8touchgfx9Container6unlinkEv>:
 8016648:	2300      	movs	r3, #0
 801664a:	6283      	str	r3, [r0, #40]	; 0x28
 801664c:	4770      	bx	lr

0801664e <_ZNK8touchgfx9Container12getSolidRectEv>:
 801664e:	2200      	movs	r2, #0
 8016650:	8002      	strh	r2, [r0, #0]
 8016652:	8042      	strh	r2, [r0, #2]
 8016654:	8082      	strh	r2, [r0, #4]
 8016656:	80c2      	strh	r2, [r0, #6]
 8016658:	4770      	bx	lr

0801665a <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 801665a:	b570      	push	{r4, r5, r6, lr}
 801665c:	460d      	mov	r5, r1
 801665e:	4616      	mov	r6, r2
 8016660:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016662:	b13c      	cbz	r4, 8016674 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8016664:	6823      	ldr	r3, [r4, #0]
 8016666:	4620      	mov	r0, r4
 8016668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801666a:	4632      	mov	r2, r6
 801666c:	4629      	mov	r1, r5
 801666e:	4798      	blx	r3
 8016670:	69a4      	ldr	r4, [r4, #24]
 8016672:	e7f6      	b.n	8016662 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8016674:	bd70      	pop	{r4, r5, r6, pc}

08016676 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8016676:	b538      	push	{r3, r4, r5, lr}
 8016678:	460d      	mov	r5, r1
 801667a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801667c:	b134      	cbz	r4, 801668c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 801667e:	682b      	ldr	r3, [r5, #0]
 8016680:	4621      	mov	r1, r4
 8016682:	689b      	ldr	r3, [r3, #8]
 8016684:	4628      	mov	r0, r5
 8016686:	4798      	blx	r3
 8016688:	69a4      	ldr	r4, [r4, #24]
 801668a:	e7f7      	b.n	801667c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 801668c:	bd38      	pop	{r3, r4, r5, pc}

0801668e <_ZN8touchgfx9ContainerD1Ev>:
 801668e:	4770      	bx	lr

08016690 <_ZN8touchgfx9ContainerD0Ev>:
 8016690:	b510      	push	{r4, lr}
 8016692:	4604      	mov	r4, r0
 8016694:	212c      	movs	r1, #44	; 0x2c
 8016696:	f012 fce4 	bl	8029062 <_ZdlPvj>
 801669a:	4620      	mov	r0, r4
 801669c:	bd10      	pop	{r4, pc}

0801669e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 801669e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80166a0:	b19b      	cbz	r3, 80166ca <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80166a2:	428b      	cmp	r3, r1
 80166a4:	d109      	bne.n	80166ba <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 80166a6:	2100      	movs	r1, #0
 80166a8:	699a      	ldr	r2, [r3, #24]
 80166aa:	6159      	str	r1, [r3, #20]
 80166ac:	6282      	str	r2, [r0, #40]	; 0x28
 80166ae:	b902      	cbnz	r2, 80166b2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 80166b0:	4770      	bx	lr
 80166b2:	6199      	str	r1, [r3, #24]
 80166b4:	4770      	bx	lr
 80166b6:	4613      	mov	r3, r2
 80166b8:	b13a      	cbz	r2, 80166ca <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80166ba:	699a      	ldr	r2, [r3, #24]
 80166bc:	428a      	cmp	r2, r1
 80166be:	d1fa      	bne.n	80166b6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80166c0:	698a      	ldr	r2, [r1, #24]
 80166c2:	619a      	str	r2, [r3, #24]
 80166c4:	2300      	movs	r3, #0
 80166c6:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80166ca:	4770      	bx	lr

080166cc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80166cc:	b410      	push	{r4}
 80166ce:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80166d0:	4604      	mov	r4, r0
 80166d2:	b92b      	cbnz	r3, 80166e0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80166d4:	6803      	ldr	r3, [r0, #0]
 80166d6:	4611      	mov	r1, r2
 80166d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80166da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80166de:	4718      	bx	r3
 80166e0:	b941      	cbnz	r1, 80166f4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80166e2:	6193      	str	r3, [r2, #24]
 80166e4:	6282      	str	r2, [r0, #40]	; 0x28
 80166e6:	6154      	str	r4, [r2, #20]
 80166e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80166ec:	4770      	bx	lr
 80166ee:	4603      	mov	r3, r0
 80166f0:	2800      	cmp	r0, #0
 80166f2:	d0f9      	beq.n	80166e8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80166f4:	4299      	cmp	r1, r3
 80166f6:	6998      	ldr	r0, [r3, #24]
 80166f8:	d1f9      	bne.n	80166ee <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80166fa:	6190      	str	r0, [r2, #24]
 80166fc:	618a      	str	r2, [r1, #24]
 80166fe:	e7f2      	b.n	80166e6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08016700 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8016700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016704:	461f      	mov	r7, r3
 8016706:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801670a:	460d      	mov	r5, r1
 801670c:	4616      	mov	r6, r2
 801670e:	b103      	cbz	r3, 8016712 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8016710:	6038      	str	r0, [r7, #0]
 8016712:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016714:	b314      	cbz	r4, 801675c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8016716:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801671a:	b1eb      	cbz	r3, 8016758 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801671c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8016720:	428d      	cmp	r5, r1
 8016722:	db19      	blt.n	8016758 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016724:	8923      	ldrh	r3, [r4, #8]
 8016726:	b289      	uxth	r1, r1
 8016728:	440b      	add	r3, r1
 801672a:	b21b      	sxth	r3, r3
 801672c:	429d      	cmp	r5, r3
 801672e:	da13      	bge.n	8016758 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016730:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8016734:	4296      	cmp	r6, r2
 8016736:	db0f      	blt.n	8016758 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016738:	8963      	ldrh	r3, [r4, #10]
 801673a:	b292      	uxth	r2, r2
 801673c:	4413      	add	r3, r2
 801673e:	b21b      	sxth	r3, r3
 8016740:	429e      	cmp	r6, r3
 8016742:	da09      	bge.n	8016758 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016744:	6823      	ldr	r3, [r4, #0]
 8016746:	1ab2      	subs	r2, r6, r2
 8016748:	1a69      	subs	r1, r5, r1
 801674a:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 801674e:	b212      	sxth	r2, r2
 8016750:	463b      	mov	r3, r7
 8016752:	b209      	sxth	r1, r1
 8016754:	4620      	mov	r0, r4
 8016756:	47c0      	blx	r8
 8016758:	69a4      	ldr	r4, [r4, #24]
 801675a:	e7db      	b.n	8016714 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 801675c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016760 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8016760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016764:	4c6c      	ldr	r4, [pc, #432]	; (8016918 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>)
 8016766:	b0a1      	sub	sp, #132	; 0x84
 8016768:	6824      	ldr	r4, [r4, #0]
 801676a:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801676c:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8016770:	2400      	movs	r4, #0
 8016772:	802c      	strh	r4, [r5, #0]
 8016774:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8016776:	4606      	mov	r6, r0
 8016778:	802c      	strh	r4, [r5, #0]
 801677a:	601c      	str	r4, [r3, #0]
 801677c:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8016780:	9303      	str	r3, [sp, #12]
 8016782:	f7ff ffbd 	bl	8016700 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8016786:	f1b9 0f03 	cmp.w	r9, #3
 801678a:	f340 80bf 	ble.w	801690c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1ac>
 801678e:	4631      	mov	r1, r6
 8016790:	a80c      	add	r0, sp, #48	; 0x30
 8016792:	f003 fa2b 	bl	8019bec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016796:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801679a:	9306      	str	r3, [sp, #24]
 801679c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80167a0:	9307      	str	r3, [sp, #28]
 80167a2:	9b03      	ldr	r3, [sp, #12]
 80167a4:	f8d3 a000 	ldr.w	sl, [r3]
 80167a8:	f1ba 0f00 	cmp.w	sl, #0
 80167ac:	f000 80b1 	beq.w	8016912 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 80167b0:	4651      	mov	r1, sl
 80167b2:	a810      	add	r0, sp, #64	; 0x40
 80167b4:	f003 fa1a 	bl	8019bec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80167b8:	2002      	movs	r0, #2
 80167ba:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 80167be:	9b01      	ldr	r3, [sp, #4]
 80167c0:	fb91 f1f0 	sdiv	r1, r1, r0
 80167c4:	9a06      	ldr	r2, [sp, #24]
 80167c6:	189d      	adds	r5, r3, r2
 80167c8:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 80167cc:	9a07      	ldr	r2, [sp, #28]
 80167ce:	4419      	add	r1, r3
 80167d0:	9b02      	ldr	r3, [sp, #8]
 80167d2:	1a6d      	subs	r5, r5, r1
 80167d4:	4413      	add	r3, r2
 80167d6:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 80167da:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80167de:	fb92 f2f0 	sdiv	r2, r2, r0
 80167e2:	440a      	add	r2, r1
 80167e4:	1a9b      	subs	r3, r3, r2
 80167e6:	435b      	muls	r3, r3
 80167e8:	fb05 3505 	mla	r5, r5, r5, r3
 80167ec:	4f4b      	ldr	r7, [pc, #300]	; (801691c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 80167ee:	ac10      	add	r4, sp, #64	; 0x40
 80167f0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80167f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80167f4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80167f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80167f8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80167fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80167fc:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8016800:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016804:	2303      	movs	r3, #3
 8016806:	f1b9 0f0c 	cmp.w	r9, #12
 801680a:	bfda      	itte	le
 801680c:	f109 32ff 	addle.w	r2, r9, #4294967295
 8016810:	fb92 f8f3 	sdivle	r8, r2, r3
 8016814:	4698      	movgt	r8, r3
 8016816:	2400      	movs	r4, #0
 8016818:	f8cd 9000 	str.w	r9, [sp]
 801681c:	1c63      	adds	r3, r4, #1
 801681e:	9308      	str	r3, [sp, #32]
 8016820:	9b00      	ldr	r3, [sp, #0]
 8016822:	f04f 0b00 	mov.w	fp, #0
 8016826:	fb93 f3f8 	sdiv	r3, r3, r8
 801682a:	f004 0401 	and.w	r4, r4, #1
 801682e:	aa10      	add	r2, sp, #64	; 0x40
 8016830:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8016834:	b29b      	uxth	r3, r3
 8016836:	3404      	adds	r4, #4
 8016838:	9304      	str	r3, [sp, #16]
 801683a:	9a04      	ldr	r2, [sp, #16]
 801683c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016840:	fb13 f302 	smulbb	r3, r3, r2
 8016844:	9a01      	ldr	r2, [sp, #4]
 8016846:	b29b      	uxth	r3, r3
 8016848:	1899      	adds	r1, r3, r2
 801684a:	9305      	str	r3, [sp, #20]
 801684c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8016850:	b209      	sxth	r1, r1
 8016852:	4299      	cmp	r1, r3
 8016854:	db4d      	blt.n	80168f2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8016856:	8932      	ldrh	r2, [r6, #8]
 8016858:	4413      	add	r3, r2
 801685a:	b21b      	sxth	r3, r3
 801685c:	4299      	cmp	r1, r3
 801685e:	da48      	bge.n	80168f2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8016860:	9b04      	ldr	r3, [sp, #16]
 8016862:	6827      	ldr	r7, [r4, #0]
 8016864:	fb17 f703 	smulbb	r7, r7, r3
 8016868:	9b02      	ldr	r3, [sp, #8]
 801686a:	b2bf      	uxth	r7, r7
 801686c:	18fa      	adds	r2, r7, r3
 801686e:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8016872:	b212      	sxth	r2, r2
 8016874:	429a      	cmp	r2, r3
 8016876:	db3c      	blt.n	80168f2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8016878:	8970      	ldrh	r0, [r6, #10]
 801687a:	4403      	add	r3, r0
 801687c:	b21b      	sxth	r3, r3
 801687e:	429a      	cmp	r2, r3
 8016880:	da37      	bge.n	80168f2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8016882:	2300      	movs	r3, #0
 8016884:	4630      	mov	r0, r6
 8016886:	930b      	str	r3, [sp, #44]	; 0x2c
 8016888:	ab0b      	add	r3, sp, #44	; 0x2c
 801688a:	f7ff ff39 	bl	8016700 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801688e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016890:	b37a      	cbz	r2, 80168f2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8016892:	4552      	cmp	r2, sl
 8016894:	d02d      	beq.n	80168f2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8016896:	4611      	mov	r1, r2
 8016898:	a80e      	add	r0, sp, #56	; 0x38
 801689a:	9209      	str	r2, [sp, #36]	; 0x24
 801689c:	f003 f9a6 	bl	8019bec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80168a0:	f04f 0e02 	mov.w	lr, #2
 80168a4:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 80168a8:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 80168ac:	fb91 f1fe 	sdiv	r1, r1, lr
 80168b0:	fb9c fcfe 	sdiv	ip, ip, lr
 80168b4:	9a06      	ldr	r2, [sp, #24]
 80168b6:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 80168ba:	9b01      	ldr	r3, [sp, #4]
 80168bc:	4401      	add	r1, r0
 80168be:	4413      	add	r3, r2
 80168c0:	1a58      	subs	r0, r3, r1
 80168c2:	9a07      	ldr	r2, [sp, #28]
 80168c4:	9b02      	ldr	r3, [sp, #8]
 80168c6:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 80168ca:	4413      	add	r3, r2
 80168cc:	448c      	add	ip, r1
 80168ce:	eba3 030c 	sub.w	r3, r3, ip
 80168d2:	435b      	muls	r3, r3
 80168d4:	fb00 3300 	mla	r3, r0, r0, r3
 80168d8:	42ab      	cmp	r3, r5
 80168da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80168dc:	d208      	bcs.n	80168f0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x190>
 80168de:	461d      	mov	r5, r3
 80168e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80168e2:	9803      	ldr	r0, [sp, #12]
 80168e4:	6001      	str	r1, [r0, #0]
 80168e6:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80168e8:	9805      	ldr	r0, [sp, #20]
 80168ea:	8008      	strh	r0, [r1, #0]
 80168ec:	992b      	ldr	r1, [sp, #172]	; 0xac
 80168ee:	800f      	strh	r7, [r1, #0]
 80168f0:	4692      	mov	sl, r2
 80168f2:	f10b 0b01 	add.w	fp, fp, #1
 80168f6:	f1bb 0f04 	cmp.w	fp, #4
 80168fa:	f104 0408 	add.w	r4, r4, #8
 80168fe:	d19c      	bne.n	801683a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xda>
 8016900:	9b00      	ldr	r3, [sp, #0]
 8016902:	9c08      	ldr	r4, [sp, #32]
 8016904:	444b      	add	r3, r9
 8016906:	4544      	cmp	r4, r8
 8016908:	9300      	str	r3, [sp, #0]
 801690a:	d187      	bne.n	801681c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xbc>
 801690c:	b021      	add	sp, #132	; 0x84
 801690e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016912:	f04f 35ff 	mov.w	r5, #4294967295
 8016916:	e769      	b.n	80167ec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8016918:	201979e8 	.word	0x201979e8
 801691c:	0802a734 	.word	0x0802a734

08016920 <_ZN8touchgfx4RectaNERKS0_>:
 8016920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016924:	f9b1 7000 	ldrsh.w	r7, [r1]
 8016928:	888c      	ldrh	r4, [r1, #4]
 801692a:	f9b0 9000 	ldrsh.w	r9, [r0]
 801692e:	443c      	add	r4, r7
 8016930:	b2a4      	uxth	r4, r4
 8016932:	fa0f f884 	sxth.w	r8, r4
 8016936:	45c1      	cmp	r9, r8
 8016938:	da2f      	bge.n	801699a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801693a:	8882      	ldrh	r2, [r0, #4]
 801693c:	444a      	add	r2, r9
 801693e:	b292      	uxth	r2, r2
 8016940:	fa0f fe82 	sxth.w	lr, r2
 8016944:	4577      	cmp	r7, lr
 8016946:	da28      	bge.n	801699a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016948:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801694c:	88cb      	ldrh	r3, [r1, #6]
 801694e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8016952:	442b      	add	r3, r5
 8016954:	b21b      	sxth	r3, r3
 8016956:	429e      	cmp	r6, r3
 8016958:	da1f      	bge.n	801699a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801695a:	88c3      	ldrh	r3, [r0, #6]
 801695c:	4433      	add	r3, r6
 801695e:	b29b      	uxth	r3, r3
 8016960:	fa0f fc83 	sxth.w	ip, r3
 8016964:	4565      	cmp	r5, ip
 8016966:	da18      	bge.n	801699a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016968:	454f      	cmp	r7, r9
 801696a:	bfb8      	it	lt
 801696c:	464f      	movlt	r7, r9
 801696e:	42b5      	cmp	r5, r6
 8016970:	bfb8      	it	lt
 8016972:	4635      	movlt	r5, r6
 8016974:	45f0      	cmp	r8, lr
 8016976:	bfd8      	it	le
 8016978:	4622      	movle	r2, r4
 801697a:	1bd2      	subs	r2, r2, r7
 801697c:	8082      	strh	r2, [r0, #4]
 801697e:	884a      	ldrh	r2, [r1, #2]
 8016980:	88c9      	ldrh	r1, [r1, #6]
 8016982:	8007      	strh	r7, [r0, #0]
 8016984:	440a      	add	r2, r1
 8016986:	b292      	uxth	r2, r2
 8016988:	b211      	sxth	r1, r2
 801698a:	458c      	cmp	ip, r1
 801698c:	bfa8      	it	ge
 801698e:	4613      	movge	r3, r2
 8016990:	1b5b      	subs	r3, r3, r5
 8016992:	80c3      	strh	r3, [r0, #6]
 8016994:	8045      	strh	r5, [r0, #2]
 8016996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801699a:	2300      	movs	r3, #0
 801699c:	8003      	strh	r3, [r0, #0]
 801699e:	8043      	strh	r3, [r0, #2]
 80169a0:	8083      	strh	r3, [r0, #4]
 80169a2:	80c3      	strh	r3, [r0, #6]
 80169a4:	e7f7      	b.n	8016996 <_ZN8touchgfx4RectaNERKS0_+0x76>

080169a6 <_ZNK8touchgfx4Rect7isEmptyEv>:
 80169a6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	dd06      	ble.n	80169bc <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80169ae:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80169b2:	2800      	cmp	r0, #0
 80169b4:	bfcc      	ite	gt
 80169b6:	2000      	movgt	r0, #0
 80169b8:	2001      	movle	r0, #1
 80169ba:	4770      	bx	lr
 80169bc:	2001      	movs	r0, #1
 80169be:	4770      	bx	lr

080169c0 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80169c0:	2300      	movs	r3, #0
 80169c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169c6:	4604      	mov	r4, r0
 80169c8:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80169ca:	8003      	strh	r3, [r0, #0]
 80169cc:	8043      	strh	r3, [r0, #2]
 80169ce:	8083      	strh	r3, [r0, #4]
 80169d0:	80c3      	strh	r3, [r0, #6]
 80169d2:	2d00      	cmp	r5, #0
 80169d4:	d040      	beq.n	8016a58 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80169d6:	1d28      	adds	r0, r5, #4
 80169d8:	f7ff ffe5 	bl	80169a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80169dc:	b988      	cbnz	r0, 8016a02 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80169de:	4620      	mov	r0, r4
 80169e0:	f7ff ffe1 	bl	80169a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80169e4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80169e8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80169ec:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80169f0:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80169f4:	b138      	cbz	r0, 8016a06 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80169f6:	8022      	strh	r2, [r4, #0]
 80169f8:	8063      	strh	r3, [r4, #2]
 80169fa:	f8a4 e004 	strh.w	lr, [r4, #4]
 80169fe:	f8a4 c006 	strh.w	ip, [r4, #6]
 8016a02:	69ad      	ldr	r5, [r5, #24]
 8016a04:	e7e5      	b.n	80169d2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8016a06:	f9b4 0000 	ldrsh.w	r0, [r4]
 8016a0a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016a0e:	4290      	cmp	r0, r2
 8016a10:	4607      	mov	r7, r0
 8016a12:	bfa8      	it	ge
 8016a14:	4617      	movge	r7, r2
 8016a16:	4299      	cmp	r1, r3
 8016a18:	460e      	mov	r6, r1
 8016a1a:	bfa8      	it	ge
 8016a1c:	461e      	movge	r6, r3
 8016a1e:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8016a22:	4472      	add	r2, lr
 8016a24:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8016a28:	4440      	add	r0, r8
 8016a2a:	4471      	add	r1, lr
 8016a2c:	4463      	add	r3, ip
 8016a2e:	b200      	sxth	r0, r0
 8016a30:	b212      	sxth	r2, r2
 8016a32:	b209      	sxth	r1, r1
 8016a34:	b21b      	sxth	r3, r3
 8016a36:	4290      	cmp	r0, r2
 8016a38:	bfac      	ite	ge
 8016a3a:	ebc7 0200 	rsbge	r2, r7, r0
 8016a3e:	ebc7 0202 	rsblt	r2, r7, r2
 8016a42:	4299      	cmp	r1, r3
 8016a44:	bfac      	ite	ge
 8016a46:	ebc6 0301 	rsbge	r3, r6, r1
 8016a4a:	ebc6 0303 	rsblt	r3, r6, r3
 8016a4e:	8027      	strh	r7, [r4, #0]
 8016a50:	8066      	strh	r6, [r4, #2]
 8016a52:	80a2      	strh	r2, [r4, #4]
 8016a54:	80e3      	strh	r3, [r4, #6]
 8016a56:	e7d4      	b.n	8016a02 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8016a58:	4620      	mov	r0, r4
 8016a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016a5e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8016a5e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016a62:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8016a66:	b383      	cbz	r3, 8016aca <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8016a68:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016a6a:	b374      	cbz	r4, 8016aca <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8016a6c:	f9b1 5000 	ldrsh.w	r5, [r1]
 8016a70:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8016a74:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8016a78:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8016a7c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016a80:	b303      	cbz	r3, 8016ac4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8016a82:	4668      	mov	r0, sp
 8016a84:	1d21      	adds	r1, r4, #4
 8016a86:	f8ad 5000 	strh.w	r5, [sp]
 8016a8a:	f8ad 6002 	strh.w	r6, [sp, #2]
 8016a8e:	f8ad 7004 	strh.w	r7, [sp, #4]
 8016a92:	f8ad 8006 	strh.w	r8, [sp, #6]
 8016a96:	f7ff ff43 	bl	8016920 <_ZN8touchgfx4RectaNERKS0_>
 8016a9a:	4668      	mov	r0, sp
 8016a9c:	f7ff ff83 	bl	80169a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016aa0:	b980      	cbnz	r0, 8016ac4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8016aa2:	f8bd 3000 	ldrh.w	r3, [sp]
 8016aa6:	88a2      	ldrh	r2, [r4, #4]
 8016aa8:	4669      	mov	r1, sp
 8016aaa:	1a9b      	subs	r3, r3, r2
 8016aac:	f8ad 3000 	strh.w	r3, [sp]
 8016ab0:	88e2      	ldrh	r2, [r4, #6]
 8016ab2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016ab6:	4620      	mov	r0, r4
 8016ab8:	1a9b      	subs	r3, r3, r2
 8016aba:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016abe:	6823      	ldr	r3, [r4, #0]
 8016ac0:	689b      	ldr	r3, [r3, #8]
 8016ac2:	4798      	blx	r3
 8016ac4:	69a4      	ldr	r4, [r4, #24]
 8016ac6:	2c00      	cmp	r4, #0
 8016ac8:	d1d8      	bne.n	8016a7c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8016aca:	b002      	add	sp, #8
 8016acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016ad0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8016ad0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016ad2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8016ad6:	460d      	mov	r5, r1
 8016ad8:	4616      	mov	r6, r2
 8016ada:	b323      	cbz	r3, 8016b26 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8016adc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016ade:	b314      	cbz	r4, 8016b26 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8016ae0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016ae4:	b1eb      	cbz	r3, 8016b22 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8016ae6:	466b      	mov	r3, sp
 8016ae8:	6828      	ldr	r0, [r5, #0]
 8016aea:	6869      	ldr	r1, [r5, #4]
 8016aec:	c303      	stmia	r3!, {r0, r1}
 8016aee:	4668      	mov	r0, sp
 8016af0:	1d21      	adds	r1, r4, #4
 8016af2:	f7ff ff15 	bl	8016920 <_ZN8touchgfx4RectaNERKS0_>
 8016af6:	4668      	mov	r0, sp
 8016af8:	f7ff ff55 	bl	80169a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016afc:	b988      	cbnz	r0, 8016b22 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8016afe:	f8bd 3000 	ldrh.w	r3, [sp]
 8016b02:	88a2      	ldrh	r2, [r4, #4]
 8016b04:	4669      	mov	r1, sp
 8016b06:	1a9b      	subs	r3, r3, r2
 8016b08:	f8ad 3000 	strh.w	r3, [sp]
 8016b0c:	88e2      	ldrh	r2, [r4, #6]
 8016b0e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016b12:	4620      	mov	r0, r4
 8016b14:	1a9b      	subs	r3, r3, r2
 8016b16:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016b1a:	6823      	ldr	r3, [r4, #0]
 8016b1c:	4632      	mov	r2, r6
 8016b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016b20:	4798      	blx	r3
 8016b22:	69a4      	ldr	r4, [r4, #24]
 8016b24:	e7db      	b.n	8016ade <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8016b26:	b002      	add	sp, #8
 8016b28:	bd70      	pop	{r4, r5, r6, pc}

08016b2a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8016b2a:	b513      	push	{r0, r1, r4, lr}
 8016b2c:	6803      	ldr	r3, [r0, #0]
 8016b2e:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8016b32:	2300      	movs	r3, #0
 8016b34:	e9cd 3300 	strd	r3, r3, [sp]
 8016b38:	466b      	mov	r3, sp
 8016b3a:	47a0      	blx	r4
 8016b3c:	b002      	add	sp, #8
 8016b3e:	bd10      	pop	{r4, pc}

08016b40 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8016b40:	2301      	movs	r3, #1
 8016b42:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8016b46:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8016b4a:	4770      	bx	lr

08016b4c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8016b4c:	2301      	movs	r3, #1
 8016b4e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8016b52:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8016b56:	4770      	bx	lr

08016b58 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8016b58:	2201      	movs	r2, #1
 8016b5a:	6843      	ldr	r3, [r0, #4]
 8016b5c:	725a      	strb	r2, [r3, #9]
 8016b5e:	6840      	ldr	r0, [r0, #4]
 8016b60:	6803      	ldr	r3, [r0, #0]
 8016b62:	691b      	ldr	r3, [r3, #16]
 8016b64:	4718      	bx	r3

08016b66 <_ZN8touchgfx3HAL8flushDMAEv>:
 8016b66:	6840      	ldr	r0, [r0, #4]
 8016b68:	6803      	ldr	r3, [r0, #0]
 8016b6a:	689b      	ldr	r3, [r3, #8]
 8016b6c:	4718      	bx	r3

08016b6e <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8016b6e:	b530      	push	{r4, r5, lr}
 8016b70:	b08b      	sub	sp, #44	; 0x2c
 8016b72:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8016b76:	6804      	ldr	r4, [r0, #0]
 8016b78:	9509      	str	r5, [sp, #36]	; 0x24
 8016b7a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8016b7e:	9508      	str	r5, [sp, #32]
 8016b80:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8016b84:	9507      	str	r5, [sp, #28]
 8016b86:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8016b8a:	9506      	str	r5, [sp, #24]
 8016b8c:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8016b90:	9505      	str	r5, [sp, #20]
 8016b92:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8016b96:	9504      	str	r5, [sp, #16]
 8016b98:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8016b9c:	9503      	str	r5, [sp, #12]
 8016b9e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8016ba2:	9502      	str	r5, [sp, #8]
 8016ba4:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8016ba8:	e9cd 3500 	strd	r3, r5, [sp]
 8016bac:	4613      	mov	r3, r2
 8016bae:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8016bb0:	2200      	movs	r2, #0
 8016bb2:	47a0      	blx	r4
 8016bb4:	b00b      	add	sp, #44	; 0x2c
 8016bb6:	bd30      	pop	{r4, r5, pc}

08016bb8 <_ZN8touchgfx3HAL10beginFrameEv>:
 8016bb8:	4b04      	ldr	r3, [pc, #16]	; (8016bcc <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8016bba:	781b      	ldrb	r3, [r3, #0]
 8016bbc:	b123      	cbz	r3, 8016bc8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8016bbe:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8016bc2:	f080 0001 	eor.w	r0, r0, #1
 8016bc6:	4770      	bx	lr
 8016bc8:	2001      	movs	r0, #1
 8016bca:	4770      	bx	lr
 8016bcc:	201979e6 	.word	0x201979e6

08016bd0 <_ZN8touchgfx3HAL8endFrameEv>:
 8016bd0:	b510      	push	{r4, lr}
 8016bd2:	4604      	mov	r4, r0
 8016bd4:	6840      	ldr	r0, [r0, #4]
 8016bd6:	6803      	ldr	r3, [r0, #0]
 8016bd8:	689b      	ldr	r3, [r3, #8]
 8016bda:	4798      	blx	r3
 8016bdc:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8016be0:	b113      	cbz	r3, 8016be8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8016be2:	2301      	movs	r3, #1
 8016be4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8016be8:	bd10      	pop	{r4, pc}

08016bea <_ZN8touchgfx3HAL10initializeEv>:
 8016bea:	b510      	push	{r4, lr}
 8016bec:	4604      	mov	r4, r0
 8016bee:	f7eb fd51 	bl	8002694 <_ZN8touchgfx10OSWrappers10initializeEv>
 8016bf2:	f7eb fb83 	bl	80022fc <_ZN8touchgfx4GPIO4initEv>
 8016bf6:	6860      	ldr	r0, [r4, #4]
 8016bf8:	6803      	ldr	r3, [r0, #0]
 8016bfa:	68db      	ldr	r3, [r3, #12]
 8016bfc:	4798      	blx	r3
 8016bfe:	68e0      	ldr	r0, [r4, #12]
 8016c00:	6803      	ldr	r3, [r0, #0]
 8016c02:	689b      	ldr	r3, [r3, #8]
 8016c04:	4798      	blx	r3
 8016c06:	6823      	ldr	r3, [r4, #0]
 8016c08:	4620      	mov	r0, r4
 8016c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016c10:	4718      	bx	r3

08016c12 <_ZN8touchgfx3HAL9taskEntryEv>:
 8016c12:	4604      	mov	r4, r0
 8016c14:	b508      	push	{r3, lr}
 8016c16:	6803      	ldr	r3, [r0, #0]
 8016c18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016c1c:	4798      	blx	r3
 8016c1e:	6823      	ldr	r3, [r4, #0]
 8016c20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016c22:	4620      	mov	r0, r4
 8016c24:	4798      	blx	r3
 8016c26:	f7eb fdfb 	bl	8002820 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8016c2a:	6823      	ldr	r3, [r4, #0]
 8016c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c2e:	e7f8      	b.n	8016c22 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08016c30 <_ZN8touchgfx3HAL4tickEv>:
 8016c30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016c32:	6803      	ldr	r3, [r0, #0]
 8016c34:	4604      	mov	r4, r0
 8016c36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8016c3a:	4798      	blx	r3
 8016c3c:	4d59      	ldr	r5, [pc, #356]	; (8016da4 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8016c3e:	2800      	cmp	r0, #0
 8016c40:	f000 8095 	beq.w	8016d6e <_ZN8touchgfx3HAL4tickEv+0x13e>
 8016c44:	2600      	movs	r6, #0
 8016c46:	2001      	movs	r0, #1
 8016c48:	f7eb fb5a 	bl	8002300 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8016c4c:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8016c50:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8016c54:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8016c58:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8016c5c:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8016c60:	b133      	cbz	r3, 8016c70 <_ZN8touchgfx3HAL4tickEv+0x40>
 8016c62:	6823      	ldr	r3, [r4, #0]
 8016c64:	4620      	mov	r0, r4
 8016c66:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8016c6a:	4798      	blx	r3
 8016c6c:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8016c70:	2601      	movs	r6, #1
 8016c72:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8016c76:	6862      	ldr	r2, [r4, #4]
 8016c78:	f083 0301 	eor.w	r3, r3, #1
 8016c7c:	7253      	strb	r3, [r2, #9]
 8016c7e:	702e      	strb	r6, [r5, #0]
 8016c80:	f001 fed4 	bl	8018a2c <_ZN8touchgfx11Application11getInstanceEv>
 8016c84:	6803      	ldr	r3, [r0, #0]
 8016c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016c88:	4798      	blx	r3
 8016c8a:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8016c8e:	b90b      	cbnz	r3, 8016c94 <_ZN8touchgfx3HAL4tickEv+0x64>
 8016c90:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8016c94:	f001 feca 	bl	8018a2c <_ZN8touchgfx11Application11getInstanceEv>
 8016c98:	6803      	ldr	r3, [r0, #0]
 8016c9a:	695b      	ldr	r3, [r3, #20]
 8016c9c:	4798      	blx	r3
 8016c9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016ca0:	6803      	ldr	r3, [r0, #0]
 8016ca2:	691b      	ldr	r3, [r3, #16]
 8016ca4:	4798      	blx	r3
 8016ca6:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8016caa:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8016cae:	3b01      	subs	r3, #1
 8016cb0:	b2db      	uxtb	r3, r3
 8016cb2:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8016cb6:	b10a      	cbz	r2, 8016cbc <_ZN8touchgfx3HAL4tickEv+0x8c>
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d1eb      	bne.n	8016c94 <_ZN8touchgfx3HAL4tickEv+0x64>
 8016cbc:	4a3a      	ldr	r2, [pc, #232]	; (8016da8 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8016cbe:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8016cc2:	7813      	ldrb	r3, [r2, #0]
 8016cc4:	3301      	adds	r3, #1
 8016cc6:	b25b      	sxtb	r3, r3
 8016cc8:	4299      	cmp	r1, r3
 8016cca:	7013      	strb	r3, [r2, #0]
 8016ccc:	dc10      	bgt.n	8016cf0 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8016cce:	2300      	movs	r3, #0
 8016cd0:	68e0      	ldr	r0, [r4, #12]
 8016cd2:	7013      	strb	r3, [r2, #0]
 8016cd4:	6803      	ldr	r3, [r0, #0]
 8016cd6:	aa03      	add	r2, sp, #12
 8016cd8:	68db      	ldr	r3, [r3, #12]
 8016cda:	a902      	add	r1, sp, #8
 8016cdc:	4798      	blx	r3
 8016cde:	6823      	ldr	r3, [r4, #0]
 8016ce0:	2800      	cmp	r0, #0
 8016ce2:	d050      	beq.n	8016d86 <_ZN8touchgfx3HAL4tickEv+0x156>
 8016ce4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8016ce8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8016cec:	4620      	mov	r0, r4
 8016cee:	4798      	blx	r3
 8016cf0:	2300      	movs	r3, #0
 8016cf2:	6960      	ldr	r0, [r4, #20]
 8016cf4:	f88d 3007 	strb.w	r3, [sp, #7]
 8016cf8:	b158      	cbz	r0, 8016d12 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8016cfa:	6803      	ldr	r3, [r0, #0]
 8016cfc:	f10d 0107 	add.w	r1, sp, #7
 8016d00:	68db      	ldr	r3, [r3, #12]
 8016d02:	4798      	blx	r3
 8016d04:	b128      	cbz	r0, 8016d12 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8016d06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016d08:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8016d0c:	6803      	ldr	r3, [r0, #0]
 8016d0e:	68db      	ldr	r3, [r3, #12]
 8016d10:	4798      	blx	r3
 8016d12:	f104 001c 	add.w	r0, r4, #28
 8016d16:	f004 fc49 	bl	801b5ac <_ZN8touchgfx8Gestures4tickEv>
 8016d1a:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8016d1e:	b30b      	cbz	r3, 8016d64 <_ZN8touchgfx3HAL4tickEv+0x134>
 8016d20:	6920      	ldr	r0, [r4, #16]
 8016d22:	6803      	ldr	r3, [r0, #0]
 8016d24:	691b      	ldr	r3, [r3, #16]
 8016d26:	4798      	blx	r3
 8016d28:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016d2a:	4606      	mov	r6, r0
 8016d2c:	b903      	cbnz	r3, 8016d30 <_ZN8touchgfx3HAL4tickEv+0x100>
 8016d2e:	6720      	str	r0, [r4, #112]	; 0x70
 8016d30:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016d32:	4a1e      	ldr	r2, [pc, #120]	; (8016dac <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8016d34:	1af3      	subs	r3, r6, r3
 8016d36:	4293      	cmp	r3, r2
 8016d38:	d914      	bls.n	8016d64 <_ZN8touchgfx3HAL4tickEv+0x134>
 8016d3a:	6920      	ldr	r0, [r4, #16]
 8016d3c:	6803      	ldr	r3, [r0, #0]
 8016d3e:	699b      	ldr	r3, [r3, #24]
 8016d40:	4798      	blx	r3
 8016d42:	2264      	movs	r2, #100	; 0x64
 8016d44:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016d46:	1af3      	subs	r3, r6, r3
 8016d48:	fbb3 f3f2 	udiv	r3, r3, r2
 8016d4c:	fbb0 f0f3 	udiv	r0, r0, r3
 8016d50:	2800      	cmp	r0, #0
 8016d52:	dc1d      	bgt.n	8016d90 <_ZN8touchgfx3HAL4tickEv+0x160>
 8016d54:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8016d58:	6920      	ldr	r0, [r4, #16]
 8016d5a:	2100      	movs	r1, #0
 8016d5c:	6803      	ldr	r3, [r0, #0]
 8016d5e:	69db      	ldr	r3, [r3, #28]
 8016d60:	4798      	blx	r3
 8016d62:	6726      	str	r6, [r4, #112]	; 0x70
 8016d64:	f001 fe62 	bl	8018a2c <_ZN8touchgfx11Application11getInstanceEv>
 8016d68:	6803      	ldr	r3, [r0, #0]
 8016d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016d6c:	4798      	blx	r3
 8016d6e:	6823      	ldr	r3, [r4, #0]
 8016d70:	4620      	mov	r0, r4
 8016d72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016d76:	4798      	blx	r3
 8016d78:	2001      	movs	r0, #1
 8016d7a:	f7eb fadd 	bl	8002338 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8016d7e:	2300      	movs	r3, #0
 8016d80:	702b      	strb	r3, [r5, #0]
 8016d82:	b004      	add	sp, #16
 8016d84:	bd70      	pop	{r4, r5, r6, pc}
 8016d86:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8016d8a:	4620      	mov	r0, r4
 8016d8c:	4798      	blx	r3
 8016d8e:	e7af      	b.n	8016cf0 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8016d90:	2863      	cmp	r0, #99	; 0x63
 8016d92:	bfcb      	itete	gt
 8016d94:	2300      	movgt	r3, #0
 8016d96:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8016d9a:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8016d9e:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8016da2:	e7d9      	b.n	8016d58 <_ZN8touchgfx3HAL4tickEv+0x128>
 8016da4:	201979ec 	.word	0x201979ec
 8016da8:	201979ed 	.word	0x201979ed
 8016dac:	05f5e100 	.word	0x05f5e100

08016db0 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8016db0:	f7eb bcd8 	b.w	8002764 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08016db4 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8016db4:	6581      	str	r1, [r0, #88]	; 0x58
 8016db6:	301c      	adds	r0, #28
 8016db8:	f004 bbf6 	b.w	801b5a8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08016dbc <_ZN8touchgfx3HAL5touchEll>:
 8016dbc:	b530      	push	{r4, r5, lr}
 8016dbe:	4604      	mov	r4, r0
 8016dc0:	b087      	sub	sp, #28
 8016dc2:	a804      	add	r0, sp, #16
 8016dc4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8016dc8:	f001 fc30 	bl	801862c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8016dcc:	9b04      	ldr	r3, [sp, #16]
 8016dce:	a906      	add	r1, sp, #24
 8016dd0:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016dd4:	9b05      	ldr	r3, [sp, #20]
 8016dd6:	a803      	add	r0, sp, #12
 8016dd8:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8016ddc:	f001 fc78 	bl	80186d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8016de0:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8016de4:	f104 001c 	add.w	r0, r4, #28
 8016de8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8016dec:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8016df0:	b189      	cbz	r1, 8016e16 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8016df2:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8016df6:	9300      	str	r3, [sp, #0]
 8016df8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8016dfc:	4613      	mov	r3, r2
 8016dfe:	462a      	mov	r2, r5
 8016e00:	f004 fbe2 	bl	801b5c8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8016e04:	b128      	cbz	r0, 8016e12 <_ZN8touchgfx3HAL5touchEll+0x56>
 8016e06:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8016e0a:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016e0c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8016e10:	6623      	str	r3, [r4, #96]	; 0x60
 8016e12:	b007      	add	sp, #28
 8016e14:	bd30      	pop	{r4, r5, pc}
 8016e16:	f004 fc17 	bl	801b648 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8016e1a:	2301      	movs	r3, #1
 8016e1c:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8016e20:	e7f1      	b.n	8016e06 <_ZN8touchgfx3HAL5touchEll+0x4a>

08016e22 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8016e22:	b510      	push	{r4, lr}
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d046      	beq.n	8016eb6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8016e28:	ea81 0002 	eor.w	r0, r1, r2
 8016e2c:	07c4      	lsls	r4, r0, #31
 8016e2e:	d508      	bpl.n	8016e42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8016e30:	440b      	add	r3, r1
 8016e32:	3a01      	subs	r2, #1
 8016e34:	428b      	cmp	r3, r1
 8016e36:	d93e      	bls.n	8016eb6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8016e38:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8016e3c:	f801 0b01 	strb.w	r0, [r1], #1
 8016e40:	e7f8      	b.n	8016e34 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8016e42:	07d0      	lsls	r0, r2, #31
 8016e44:	bf42      	ittt	mi
 8016e46:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8016e4a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8016e4e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8016e52:	2b01      	cmp	r3, #1
 8016e54:	d911      	bls.n	8016e7a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8016e56:	ea81 0402 	eor.w	r4, r1, r2
 8016e5a:	07a4      	lsls	r4, r4, #30
 8016e5c:	4610      	mov	r0, r2
 8016e5e:	d022      	beq.n	8016ea6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8016e60:	f023 0401 	bic.w	r4, r3, #1
 8016e64:	440c      	add	r4, r1
 8016e66:	428c      	cmp	r4, r1
 8016e68:	4602      	mov	r2, r0
 8016e6a:	d904      	bls.n	8016e76 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8016e6c:	8812      	ldrh	r2, [r2, #0]
 8016e6e:	3002      	adds	r0, #2
 8016e70:	f821 2b02 	strh.w	r2, [r1], #2
 8016e74:	e7f7      	b.n	8016e66 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8016e76:	f003 0301 	and.w	r3, r3, #1
 8016e7a:	f023 0003 	bic.w	r0, r3, #3
 8016e7e:	4408      	add	r0, r1
 8016e80:	4288      	cmp	r0, r1
 8016e82:	4614      	mov	r4, r2
 8016e84:	d904      	bls.n	8016e90 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8016e86:	6824      	ldr	r4, [r4, #0]
 8016e88:	3204      	adds	r2, #4
 8016e8a:	f841 4b04 	str.w	r4, [r1], #4
 8016e8e:	e7f7      	b.n	8016e80 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8016e90:	f003 0303 	and.w	r3, r3, #3
 8016e94:	440b      	add	r3, r1
 8016e96:	3a01      	subs	r2, #1
 8016e98:	428b      	cmp	r3, r1
 8016e9a:	d90c      	bls.n	8016eb6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8016e9c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8016ea0:	f801 0b01 	strb.w	r0, [r1], #1
 8016ea4:	e7f8      	b.n	8016e98 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8016ea6:	0790      	lsls	r0, r2, #30
 8016ea8:	d0e7      	beq.n	8016e7a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8016eaa:	f832 0b02 	ldrh.w	r0, [r2], #2
 8016eae:	3b02      	subs	r3, #2
 8016eb0:	f821 0b02 	strh.w	r0, [r1], #2
 8016eb4:	e7e1      	b.n	8016e7a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8016eb6:	2001      	movs	r0, #1
 8016eb8:	bd10      	pop	{r4, pc}

08016eba <_ZN8touchgfx3HAL7noTouchEv>:
 8016eba:	b510      	push	{r4, lr}
 8016ebc:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8016ec0:	4604      	mov	r4, r0
 8016ec2:	b153      	cbz	r3, 8016eda <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8016ec4:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8016ec8:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8016ecc:	2101      	movs	r1, #1
 8016ece:	301c      	adds	r0, #28
 8016ed0:	f004 fbba 	bl	801b648 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8016ed4:	2300      	movs	r3, #0
 8016ed6:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8016eda:	bd10      	pop	{r4, pc}

08016edc <_ZN8touchgfx8Drawable5setXYEss>:
 8016edc:	b570      	push	{r4, r5, r6, lr}
 8016ede:	4604      	mov	r4, r0
 8016ee0:	4615      	mov	r5, r2
 8016ee2:	6803      	ldr	r3, [r0, #0]
 8016ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016ee6:	4798      	blx	r3
 8016ee8:	6823      	ldr	r3, [r4, #0]
 8016eea:	4629      	mov	r1, r5
 8016eec:	4620      	mov	r0, r4
 8016eee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016ef4:	4718      	bx	r3
	...

08016ef8 <_ZN8touchgfx3HAL3lcdEv>:
 8016ef8:	4b04      	ldr	r3, [pc, #16]	; (8016f0c <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8016efa:	681b      	ldr	r3, [r3, #0]
 8016efc:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8016f00:	b10a      	cbz	r2, 8016f06 <_ZN8touchgfx3HAL3lcdEv+0xe>
 8016f02:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8016f04:	b900      	cbnz	r0, 8016f08 <_ZN8touchgfx3HAL3lcdEv+0x10>
 8016f06:	6898      	ldr	r0, [r3, #8]
 8016f08:	4770      	bx	lr
 8016f0a:	bf00      	nop
 8016f0c:	201979e8 	.word	0x201979e8

08016f10 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8016f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016f14:	4604      	mov	r4, r0
 8016f16:	2000      	movs	r0, #0
 8016f18:	b085      	sub	sp, #20
 8016f1a:	ad04      	add	r5, sp, #16
 8016f1c:	f845 0d04 	str.w	r0, [r5, #-4]!
 8016f20:	69a0      	ldr	r0, [r4, #24]
 8016f22:	4699      	mov	r9, r3
 8016f24:	6806      	ldr	r6, [r0, #0]
 8016f26:	9501      	str	r5, [sp, #4]
 8016f28:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8016f2c:	460f      	mov	r7, r1
 8016f2e:	9500      	str	r5, [sp, #0]
 8016f30:	6835      	ldr	r5, [r6, #0]
 8016f32:	4690      	mov	r8, r2
 8016f34:	47a8      	blx	r5
 8016f36:	4d10      	ldr	r5, [pc, #64]	; (8016f78 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8016f38:	4606      	mov	r6, r0
 8016f3a:	f8a5 9000 	strh.w	r9, [r5]
 8016f3e:	f7ff ffdb 	bl	8016ef8 <_ZN8touchgfx3HAL3lcdEv>
 8016f42:	6803      	ldr	r3, [r0, #0]
 8016f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f46:	4798      	blx	r3
 8016f48:	b128      	cbz	r0, 8016f56 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8016f4a:	2801      	cmp	r0, #1
 8016f4c:	d00b      	beq.n	8016f66 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8016f4e:	4630      	mov	r0, r6
 8016f50:	b005      	add	sp, #20
 8016f52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016f56:	882b      	ldrh	r3, [r5, #0]
 8016f58:	fb08 7203 	mla	r2, r8, r3, r7
 8016f5c:	9b03      	ldr	r3, [sp, #12]
 8016f5e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8016f62:	63e3      	str	r3, [r4, #60]	; 0x3c
 8016f64:	e7f3      	b.n	8016f4e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8016f66:	882a      	ldrh	r2, [r5, #0]
 8016f68:	9b03      	ldr	r3, [sp, #12]
 8016f6a:	fb08 7202 	mla	r2, r8, r2, r7
 8016f6e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016f72:	1a9a      	subs	r2, r3, r2
 8016f74:	63e2      	str	r2, [r4, #60]	; 0x3c
 8016f76:	e7ea      	b.n	8016f4e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8016f78:	201979e2 	.word	0x201979e2

08016f7c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8016f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f7e:	b08b      	sub	sp, #44	; 0x2c
 8016f80:	4617      	mov	r7, r2
 8016f82:	4604      	mov	r4, r0
 8016f84:	460e      	mov	r6, r1
 8016f86:	461d      	mov	r5, r3
 8016f88:	f7ff ffb6 	bl	8016ef8 <_ZN8touchgfx3HAL3lcdEv>
 8016f8c:	6803      	ldr	r3, [r0, #0]
 8016f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f90:	4798      	blx	r3
 8016f92:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8016f96:	9007      	str	r0, [sp, #28]
 8016f98:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8016f9c:	4b0d      	ldr	r3, [pc, #52]	; (8016fd4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8016f9e:	6822      	ldr	r2, [r4, #0]
 8016fa0:	881b      	ldrh	r3, [r3, #0]
 8016fa2:	4631      	mov	r1, r6
 8016fa4:	9306      	str	r3, [sp, #24]
 8016fa6:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8016faa:	4620      	mov	r0, r4
 8016fac:	9305      	str	r3, [sp, #20]
 8016fae:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8016fb2:	9304      	str	r3, [sp, #16]
 8016fb4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016fb8:	9303      	str	r3, [sp, #12]
 8016fba:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016fbe:	9302      	str	r3, [sp, #8]
 8016fc0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016fc4:	e9cd 5300 	strd	r5, r3, [sp]
 8016fc8:	463b      	mov	r3, r7
 8016fca:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8016fcc:	2200      	movs	r2, #0
 8016fce:	47a8      	blx	r5
 8016fd0:	b00b      	add	sp, #44	; 0x2c
 8016fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016fd4:	201979e2 	.word	0x201979e2

08016fd8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8016fd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016fdc:	4698      	mov	r8, r3
 8016fde:	6803      	ldr	r3, [r0, #0]
 8016fe0:	b08b      	sub	sp, #44	; 0x2c
 8016fe2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8016fe4:	4b14      	ldr	r3, [pc, #80]	; (8017038 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8016fe6:	4617      	mov	r7, r2
 8016fe8:	f8b3 9000 	ldrh.w	r9, [r3]
 8016fec:	460e      	mov	r6, r1
 8016fee:	4604      	mov	r4, r0
 8016ff0:	f7ff ff82 	bl	8016ef8 <_ZN8touchgfx3HAL3lcdEv>
 8016ff4:	6803      	ldr	r3, [r0, #0]
 8016ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ff8:	4798      	blx	r3
 8016ffa:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8016ffe:	2200      	movs	r2, #0
 8017000:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8017004:	2302      	movs	r3, #2
 8017006:	e9cd 9306 	strd	r9, r3, [sp, #24]
 801700a:	2301      	movs	r3, #1
 801700c:	9305      	str	r3, [sp, #20]
 801700e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8017012:	4631      	mov	r1, r6
 8017014:	9304      	str	r3, [sp, #16]
 8017016:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801701a:	4620      	mov	r0, r4
 801701c:	9303      	str	r3, [sp, #12]
 801701e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8017022:	9302      	str	r3, [sp, #8]
 8017024:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017028:	e9cd 8300 	strd	r8, r3, [sp]
 801702c:	463b      	mov	r3, r7
 801702e:	47a8      	blx	r5
 8017030:	b00b      	add	sp, #44	; 0x2c
 8017032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017036:	bf00      	nop
 8017038:	201979e2 	.word	0x201979e2

0801703c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 801703c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017040:	4698      	mov	r8, r3
 8017042:	6803      	ldr	r3, [r0, #0]
 8017044:	b087      	sub	sp, #28
 8017046:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8017048:	4b10      	ldr	r3, [pc, #64]	; (801708c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 801704a:	460e      	mov	r6, r1
 801704c:	f8b3 9000 	ldrh.w	r9, [r3]
 8017050:	4617      	mov	r7, r2
 8017052:	4604      	mov	r4, r0
 8017054:	f7ff ff50 	bl	8016ef8 <_ZN8touchgfx3HAL3lcdEv>
 8017058:	6803      	ldr	r3, [r0, #0]
 801705a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801705c:	4798      	blx	r3
 801705e:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8017062:	f8cd 900c 	str.w	r9, [sp, #12]
 8017066:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801706a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801706e:	463a      	mov	r2, r7
 8017070:	9302      	str	r3, [sp, #8]
 8017072:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8017076:	4631      	mov	r1, r6
 8017078:	9301      	str	r3, [sp, #4]
 801707a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801707e:	4620      	mov	r0, r4
 8017080:	9300      	str	r3, [sp, #0]
 8017082:	4643      	mov	r3, r8
 8017084:	47a8      	blx	r5
 8017086:	b007      	add	sp, #28
 8017088:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801708c:	201979e2 	.word	0x201979e2

08017090 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8017090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017094:	4604      	mov	r4, r0
 8017096:	b08f      	sub	sp, #60	; 0x3c
 8017098:	4610      	mov	r0, r2
 801709a:	460d      	mov	r5, r1
 801709c:	4691      	mov	r9, r2
 801709e:	461e      	mov	r6, r3
 80170a0:	f004 f878 	bl	801b194 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80170a4:	2800      	cmp	r0, #0
 80170a6:	f000 809d 	beq.w	80171e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 80170aa:	6823      	ldr	r3, [r4, #0]
 80170ac:	4620      	mov	r0, r4
 80170ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80170b0:	4798      	blx	r3
 80170b2:	6823      	ldr	r3, [r4, #0]
 80170b4:	f8df b190 	ldr.w	fp, [pc, #400]	; 8017248 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 80170b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170ba:	4620      	mov	r0, r4
 80170bc:	4798      	blx	r3
 80170be:	f8df a18c 	ldr.w	sl, [pc, #396]	; 801724c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 80170c2:	f8bb 3000 	ldrh.w	r3, [fp]
 80170c6:	4f5d      	ldr	r7, [pc, #372]	; (801723c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80170c8:	9301      	str	r3, [sp, #4]
 80170ca:	f8ba 3000 	ldrh.w	r3, [sl]
 80170ce:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80170d2:	9302      	str	r3, [sp, #8]
 80170d4:	883b      	ldrh	r3, [r7, #0]
 80170d6:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80170da:	9303      	str	r3, [sp, #12]
 80170dc:	4b58      	ldr	r3, [pc, #352]	; (8017240 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80170de:	4640      	mov	r0, r8
 80170e0:	881a      	ldrh	r2, [r3, #0]
 80170e2:	9305      	str	r3, [sp, #20]
 80170e4:	9204      	str	r2, [sp, #16]
 80170e6:	f004 f8e9 	bl	801b2bc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80170ea:	8038      	strh	r0, [r7, #0]
 80170ec:	4640      	mov	r0, r8
 80170ee:	f004 f919 	bl	801b324 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80170f2:	9b05      	ldr	r3, [sp, #20]
 80170f4:	b280      	uxth	r0, r0
 80170f6:	8018      	strh	r0, [r3, #0]
 80170f8:	4b52      	ldr	r3, [pc, #328]	; (8017244 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80170fa:	781b      	ldrb	r3, [r3, #0]
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d174      	bne.n	80171ea <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8017100:	883b      	ldrh	r3, [r7, #0]
 8017102:	f8aa 0000 	strh.w	r0, [sl]
 8017106:	f8ab 3000 	strh.w	r3, [fp]
 801710a:	4648      	mov	r0, r9
 801710c:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8017110:	f004 f840 	bl	801b194 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8017114:	2200      	movs	r2, #0
 8017116:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 801711a:	4611      	mov	r1, r2
 801711c:	4628      	mov	r0, r5
 801711e:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8017122:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8017126:	f7ff fed9 	bl	8016edc <_ZN8touchgfx8Drawable5setXYEss>
 801712a:	2301      	movs	r3, #1
 801712c:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8017130:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8017134:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8017138:	2b00      	cmp	r3, #0
 801713a:	dd5c      	ble.n	80171f6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 801713c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8017140:	2b00      	cmp	r3, #0
 8017142:	dd58      	ble.n	80171f6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8017144:	462a      	mov	r2, r5
 8017146:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801714a:	ab0a      	add	r3, sp, #40	; 0x28
 801714c:	6851      	ldr	r1, [r2, #4]
 801714e:	c303      	stmia	r3!, {r0, r1}
 8017150:	4631      	mov	r1, r6
 8017152:	a80a      	add	r0, sp, #40	; 0x28
 8017154:	f7ff fbe4 	bl	8016920 <_ZN8touchgfx4RectaNERKS0_>
 8017158:	2100      	movs	r1, #0
 801715a:	4b38      	ldr	r3, [pc, #224]	; (801723c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801715c:	910c      	str	r1, [sp, #48]	; 0x30
 801715e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017162:	4b37      	ldr	r3, [pc, #220]	; (8017240 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8017164:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8017168:	f9b3 3000 	ldrsh.w	r3, [r3]
 801716c:	aa0a      	add	r2, sp, #40	; 0x28
 801716e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8017172:	ab08      	add	r3, sp, #32
 8017174:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017178:	e883 0003 	stmia.w	r3, {r0, r1}
 801717c:	4618      	mov	r0, r3
 801717e:	a90c      	add	r1, sp, #48	; 0x30
 8017180:	f7ff fbce 	bl	8016920 <_ZN8touchgfx4RectaNERKS0_>
 8017184:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8017186:	2b00      	cmp	r3, #0
 8017188:	d13c      	bne.n	8017204 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 801718a:	2000      	movs	r0, #0
 801718c:	2600      	movs	r6, #0
 801718e:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8017192:	696b      	ldr	r3, [r5, #20]
 8017194:	682a      	ldr	r2, [r5, #0]
 8017196:	616e      	str	r6, [r5, #20]
 8017198:	9305      	str	r3, [sp, #20]
 801719a:	6892      	ldr	r2, [r2, #8]
 801719c:	a908      	add	r1, sp, #32
 801719e:	4628      	mov	r0, r5
 80171a0:	4790      	blx	r2
 80171a2:	9b05      	ldr	r3, [sp, #20]
 80171a4:	4652      	mov	r2, sl
 80171a6:	616b      	str	r3, [r5, #20]
 80171a8:	4649      	mov	r1, r9
 80171aa:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 80171ae:	4628      	mov	r0, r5
 80171b0:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 80171b4:	f7ff fe92 	bl	8016edc <_ZN8touchgfx8Drawable5setXYEss>
 80171b8:	9a01      	ldr	r2, [sp, #4]
 80171ba:	4b23      	ldr	r3, [pc, #140]	; (8017248 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 80171bc:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 80171c0:	801a      	strh	r2, [r3, #0]
 80171c2:	9a02      	ldr	r2, [sp, #8]
 80171c4:	4b21      	ldr	r3, [pc, #132]	; (801724c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 80171c6:	4620      	mov	r0, r4
 80171c8:	801a      	strh	r2, [r3, #0]
 80171ca:	9a03      	ldr	r2, [sp, #12]
 80171cc:	4b1b      	ldr	r3, [pc, #108]	; (801723c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80171ce:	801a      	strh	r2, [r3, #0]
 80171d0:	4b1b      	ldr	r3, [pc, #108]	; (8017240 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80171d2:	9a04      	ldr	r2, [sp, #16]
 80171d4:	801a      	strh	r2, [r3, #0]
 80171d6:	6823      	ldr	r3, [r4, #0]
 80171d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80171da:	4798      	blx	r3
 80171dc:	6823      	ldr	r3, [r4, #0]
 80171de:	4620      	mov	r0, r4
 80171e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171e2:	4798      	blx	r3
 80171e4:	b00f      	add	sp, #60	; 0x3c
 80171e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171ea:	883b      	ldrh	r3, [r7, #0]
 80171ec:	f8ab 0000 	strh.w	r0, [fp]
 80171f0:	f8aa 3000 	strh.w	r3, [sl]
 80171f4:	e789      	b.n	801710a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80171f6:	462a      	mov	r2, r5
 80171f8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80171fc:	ab0a      	add	r3, sp, #40	; 0x28
 80171fe:	6851      	ldr	r1, [r2, #4]
 8017200:	c303      	stmia	r3!, {r0, r1}
 8017202:	e7a9      	b.n	8017158 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8017204:	a807      	add	r0, sp, #28
 8017206:	f004 f945 	bl	801b494 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801720a:	4606      	mov	r6, r0
 801720c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801720e:	6803      	ldr	r3, [r0, #0]
 8017210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017212:	4798      	blx	r3
 8017214:	4286      	cmp	r6, r0
 8017216:	d1b8      	bne.n	801718a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8017218:	f7ff fe6e 	bl	8016ef8 <_ZN8touchgfx3HAL3lcdEv>
 801721c:	6803      	ldr	r3, [r0, #0]
 801721e:	4606      	mov	r6, r0
 8017220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017222:	a807      	add	r0, sp, #28
 8017224:	9305      	str	r3, [sp, #20]
 8017226:	f004 f935 	bl	801b494 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801722a:	9b05      	ldr	r3, [sp, #20]
 801722c:	4601      	mov	r1, r0
 801722e:	4630      	mov	r0, r6
 8017230:	4798      	blx	r3
 8017232:	f080 0001 	eor.w	r0, r0, #1
 8017236:	b2c0      	uxtb	r0, r0
 8017238:	e7a8      	b.n	801718c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 801723a:	bf00      	nop
 801723c:	201979dc 	.word	0x201979dc
 8017240:	201979de 	.word	0x201979de
 8017244:	201979e0 	.word	0x201979e0
 8017248:	201979e2 	.word	0x201979e2
 801724c:	201979e4 	.word	0x201979e4

08017250 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8017250:	b510      	push	{r4, lr}
 8017252:	4b07      	ldr	r3, [pc, #28]	; (8017270 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8017254:	4604      	mov	r4, r0
 8017256:	781b      	ldrb	r3, [r3, #0]
 8017258:	b13b      	cbz	r3, 801726a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801725a:	6803      	ldr	r3, [r0, #0]
 801725c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801725e:	4798      	blx	r3
 8017260:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017262:	4283      	cmp	r3, r0
 8017264:	d101      	bne.n	801726a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8017266:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8017268:	bd10      	pop	{r4, pc}
 801726a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801726c:	e7fc      	b.n	8017268 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801726e:	bf00      	nop
 8017270:	201979e6 	.word	0x201979e6

08017274 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8017274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017278:	461d      	mov	r5, r3
 801727a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801727e:	2400      	movs	r4, #0
 8017280:	b08a      	sub	sp, #40	; 0x28
 8017282:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8017286:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801728a:	4690      	mov	r8, r2
 801728c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017290:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017294:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8017298:	f8ad 301a 	strh.w	r3, [sp, #26]
 801729c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80172a0:	4607      	mov	r7, r0
 80172a2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80172a6:	9404      	str	r4, [sp, #16]
 80172a8:	f88d 4020 	strb.w	r4, [sp, #32]
 80172ac:	f7ff ffd0 	bl	8017250 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80172b0:	fb06 8505 	mla	r5, r6, r5, r8
 80172b4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80172b8:	6878      	ldr	r0, [r7, #4]
 80172ba:	9505      	str	r5, [sp, #20]
 80172bc:	f8ad 601e 	strh.w	r6, [sp, #30]
 80172c0:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80172c4:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80172c8:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 80172cc:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 80172d0:	6803      	ldr	r3, [r0, #0]
 80172d2:	a901      	add	r1, sp, #4
 80172d4:	685b      	ldr	r3, [r3, #4]
 80172d6:	4798      	blx	r3
 80172d8:	b00a      	add	sp, #40	; 0x28
 80172da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080172de <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 80172de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80172e2:	2400      	movs	r4, #0
 80172e4:	461d      	mov	r5, r3
 80172e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80172ea:	4691      	mov	r9, r2
 80172ec:	b08b      	sub	sp, #44	; 0x2c
 80172ee:	4688      	mov	r8, r1
 80172f0:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 80172f4:	4607      	mov	r7, r0
 80172f6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80172fa:	9404      	str	r4, [sp, #16]
 80172fc:	f7ff ffa8 	bl	8017250 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017300:	fb06 9505 	mla	r5, r6, r5, r9
 8017304:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017308:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801730c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017310:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8017314:	6878      	ldr	r0, [r7, #4]
 8017316:	9505      	str	r5, [sp, #20]
 8017318:	f8ad 301a 	strh.w	r3, [sp, #26]
 801731c:	f8ad 401c 	strh.w	r4, [sp, #28]
 8017320:	f8ad 601e 	strh.w	r6, [sp, #30]
 8017324:	f8cd 8010 	str.w	r8, [sp, #16]
 8017328:	f8ad 4020 	strh.w	r4, [sp, #32]
 801732c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8017330:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8017334:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8017338:	6803      	ldr	r3, [r0, #0]
 801733a:	a901      	add	r1, sp, #4
 801733c:	685b      	ldr	r3, [r3, #4]
 801733e:	4798      	blx	r3
 8017340:	b00b      	add	sp, #44	; 0x2c
 8017342:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08017348 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8017348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801734c:	4698      	mov	r8, r3
 801734e:	2300      	movs	r3, #0
 8017350:	b08a      	sub	sp, #40	; 0x28
 8017352:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8017356:	4606      	mov	r6, r0
 8017358:	2d0b      	cmp	r5, #11
 801735a:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801735e:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8017362:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8017366:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 801736a:	9304      	str	r3, [sp, #16]
 801736c:	d137      	bne.n	80173de <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 801736e:	2380      	movs	r3, #128	; 0x80
 8017370:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8017374:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017378:	f88d 0020 	strb.w	r0, [sp, #32]
 801737c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017380:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017384:	4630      	mov	r0, r6
 8017386:	f8ad 301a 	strh.w	r3, [sp, #26]
 801738a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801738e:	9203      	str	r2, [sp, #12]
 8017390:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017394:	f7ff ff5c 	bl	8017250 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017398:	2c0b      	cmp	r4, #11
 801739a:	bf8c      	ite	hi
 801739c:	2100      	movhi	r1, #0
 801739e:	4b1b      	ldrls	r3, [pc, #108]	; (801740c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 80173a0:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80173a4:	bf98      	it	ls
 80173a6:	5d19      	ldrbls	r1, [r3, r4]
 80173a8:	fb02 8307 	mla	r3, r2, r7, r8
 80173ac:	10c9      	asrs	r1, r1, #3
 80173ae:	fb01 0003 	mla	r0, r1, r3, r0
 80173b2:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 80173b6:	9005      	str	r0, [sp, #20]
 80173b8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80173bc:	2300      	movs	r3, #0
 80173be:	6870      	ldr	r0, [r6, #4]
 80173c0:	f8ad 701e 	strh.w	r7, [sp, #30]
 80173c4:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 80173c8:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80173cc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80173d0:	6803      	ldr	r3, [r0, #0]
 80173d2:	a901      	add	r1, sp, #4
 80173d4:	685b      	ldr	r3, [r3, #4]
 80173d6:	4798      	blx	r3
 80173d8:	b00a      	add	sp, #40	; 0x28
 80173da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173de:	2d02      	cmp	r5, #2
 80173e0:	d109      	bne.n	80173f6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 80173e2:	28ff      	cmp	r0, #255	; 0xff
 80173e4:	d105      	bne.n	80173f2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 80173e6:	f1bc 0f00 	cmp.w	ip, #0
 80173ea:	bf14      	ite	ne
 80173ec:	2340      	movne	r3, #64	; 0x40
 80173ee:	2320      	moveq	r3, #32
 80173f0:	e7be      	b.n	8017370 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80173f2:	2340      	movs	r3, #64	; 0x40
 80173f4:	e7bc      	b.n	8017370 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80173f6:	28ff      	cmp	r0, #255	; 0xff
 80173f8:	d105      	bne.n	8017406 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 80173fa:	f1bc 0f00 	cmp.w	ip, #0
 80173fe:	bf14      	ite	ne
 8017400:	2304      	movne	r3, #4
 8017402:	2301      	moveq	r3, #1
 8017404:	e7b4      	b.n	8017370 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8017406:	2304      	movs	r3, #4
 8017408:	e7b2      	b.n	8017370 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801740a:	bf00      	nop
 801740c:	0802b9bc 	.word	0x0802b9bc

08017410 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8017410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017414:	b08b      	sub	sp, #44	; 0x2c
 8017416:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 801741a:	461d      	mov	r5, r3
 801741c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8017420:	bf14      	ite	ne
 8017422:	2308      	movne	r3, #8
 8017424:	2302      	moveq	r3, #2
 8017426:	2400      	movs	r4, #0
 8017428:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 801742c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017430:	4688      	mov	r8, r1
 8017432:	4693      	mov	fp, r2
 8017434:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8017438:	9404      	str	r4, [sp, #16]
 801743a:	4607      	mov	r7, r0
 801743c:	f7ff ff08 	bl	8017250 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017440:	2e0b      	cmp	r6, #11
 8017442:	bf98      	it	ls
 8017444:	4b15      	ldrls	r3, [pc, #84]	; (801749c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8017446:	fb05 b50a 	mla	r5, r5, sl, fp
 801744a:	bf98      	it	ls
 801744c:	5d9c      	ldrbls	r4, [r3, r6]
 801744e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8017452:	10e4      	asrs	r4, r4, #3
 8017454:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017458:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801745c:	fb04 0405 	mla	r4, r4, r5, r0
 8017460:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017464:	2300      	movs	r3, #0
 8017466:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801746a:	6878      	ldr	r0, [r7, #4]
 801746c:	9405      	str	r4, [sp, #20]
 801746e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017472:	f8ad a01e 	strh.w	sl, [sp, #30]
 8017476:	f8cd 8010 	str.w	r8, [sp, #16]
 801747a:	f88d 9020 	strb.w	r9, [sp, #32]
 801747e:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8017482:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017486:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 801748a:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 801748e:	6803      	ldr	r3, [r0, #0]
 8017490:	a901      	add	r1, sp, #4
 8017492:	685b      	ldr	r3, [r3, #4]
 8017494:	4798      	blx	r3
 8017496:	b00b      	add	sp, #44	; 0x2c
 8017498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801749c:	0802b9bc 	.word	0x0802b9bc

080174a0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80174a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174a4:	461e      	mov	r6, r3
 80174a6:	4b0a      	ldr	r3, [pc, #40]	; (80174d0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 80174a8:	460f      	mov	r7, r1
 80174aa:	881d      	ldrh	r5, [r3, #0]
 80174ac:	4690      	mov	r8, r2
 80174ae:	f7ff fd23 	bl	8016ef8 <_ZN8touchgfx3HAL3lcdEv>
 80174b2:	6803      	ldr	r3, [r0, #0]
 80174b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174b6:	4798      	blx	r3
 80174b8:	280b      	cmp	r0, #11
 80174ba:	bf8e      	itee	hi
 80174bc:	2400      	movhi	r4, #0
 80174be:	4b05      	ldrls	r3, [pc, #20]	; (80174d4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80174c0:	5c1c      	ldrbls	r4, [r3, r0]
 80174c2:	fb08 7005 	mla	r0, r8, r5, r7
 80174c6:	10e4      	asrs	r4, r4, #3
 80174c8:	fb04 6000 	mla	r0, r4, r0, r6
 80174cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174d0:	201979e2 	.word	0x201979e2
 80174d4:	0802b9bc 	.word	0x0802b9bc

080174d8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 80174d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80174da:	2500      	movs	r5, #0
 80174dc:	b08b      	sub	sp, #44	; 0x2c
 80174de:	461f      	mov	r7, r3
 80174e0:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80174e4:	4604      	mov	r4, r0
 80174e6:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80174ea:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80174ee:	4616      	mov	r6, r2
 80174f0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80174f4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80174f8:	9504      	str	r5, [sp, #16]
 80174fa:	f8ad 301a 	strh.w	r3, [sp, #26]
 80174fe:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017502:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017506:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801750a:	f88d 3020 	strb.w	r3, [sp, #32]
 801750e:	f7ff fe9f 	bl	8017250 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017512:	463a      	mov	r2, r7
 8017514:	4631      	mov	r1, r6
 8017516:	4603      	mov	r3, r0
 8017518:	4620      	mov	r0, r4
 801751a:	f7ff ffc1 	bl	80174a0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801751e:	4b0e      	ldr	r3, [pc, #56]	; (8017558 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8017520:	9005      	str	r0, [sp, #20]
 8017522:	881b      	ldrh	r3, [r3, #0]
 8017524:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017528:	f7ff fce6 	bl	8016ef8 <_ZN8touchgfx3HAL3lcdEv>
 801752c:	6803      	ldr	r3, [r0, #0]
 801752e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017530:	4798      	blx	r3
 8017532:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017534:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8017538:	9304      	str	r3, [sp, #16]
 801753a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801753e:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8017542:	6860      	ldr	r0, [r4, #4]
 8017544:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8017548:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 801754c:	6803      	ldr	r3, [r0, #0]
 801754e:	a901      	add	r1, sp, #4
 8017550:	685b      	ldr	r3, [r3, #4]
 8017552:	4798      	blx	r3
 8017554:	b00b      	add	sp, #44	; 0x2c
 8017556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017558:	201979e2 	.word	0x201979e2

0801755c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801755c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801755e:	b08d      	sub	sp, #52	; 0x34
 8017560:	466b      	mov	r3, sp
 8017562:	e883 0006 	stmia.w	r3, {r1, r2}
 8017566:	2300      	movs	r3, #0
 8017568:	2501      	movs	r5, #1
 801756a:	9306      	str	r3, [sp, #24]
 801756c:	6803      	ldr	r3, [r0, #0]
 801756e:	9503      	str	r5, [sp, #12]
 8017570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017572:	4604      	mov	r4, r0
 8017574:	f8bd 6000 	ldrh.w	r6, [sp]
 8017578:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801757c:	4798      	blx	r3
 801757e:	463a      	mov	r2, r7
 8017580:	4631      	mov	r1, r6
 8017582:	4603      	mov	r3, r0
 8017584:	4620      	mov	r0, r4
 8017586:	f7ff ff8b 	bl	80174a0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801758a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801758c:	9004      	str	r0, [sp, #16]
 801758e:	9307      	str	r3, [sp, #28]
 8017590:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017594:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017598:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801759c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80175a0:	4b0e      	ldr	r3, [pc, #56]	; (80175dc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 80175a2:	881b      	ldrh	r3, [r3, #0]
 80175a4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80175a8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80175ac:	f7ff fca4 	bl	8016ef8 <_ZN8touchgfx3HAL3lcdEv>
 80175b0:	6803      	ldr	r3, [r0, #0]
 80175b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175b4:	4798      	blx	r3
 80175b6:	23ff      	movs	r3, #255	; 0xff
 80175b8:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 80175bc:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80175c0:	6860      	ldr	r0, [r4, #4]
 80175c2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80175c6:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80175ca:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 80175ce:	6803      	ldr	r3, [r0, #0]
 80175d0:	a903      	add	r1, sp, #12
 80175d2:	685b      	ldr	r3, [r3, #4]
 80175d4:	4798      	blx	r3
 80175d6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80175d8:	b00d      	add	sp, #52	; 0x34
 80175da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80175dc:	201979e2 	.word	0x201979e2

080175e0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80175e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175e4:	b08c      	sub	sp, #48	; 0x30
 80175e6:	466d      	mov	r5, sp
 80175e8:	461e      	mov	r6, r3
 80175ea:	2300      	movs	r3, #0
 80175ec:	e885 0006 	stmia.w	r5, {r1, r2}
 80175f0:	2501      	movs	r5, #1
 80175f2:	9306      	str	r3, [sp, #24]
 80175f4:	6803      	ldr	r3, [r0, #0]
 80175f6:	9503      	str	r5, [sp, #12]
 80175f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80175fa:	4604      	mov	r4, r0
 80175fc:	f8bd 7000 	ldrh.w	r7, [sp]
 8017600:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8017604:	4798      	blx	r3
 8017606:	4642      	mov	r2, r8
 8017608:	4639      	mov	r1, r7
 801760a:	4603      	mov	r3, r0
 801760c:	4620      	mov	r0, r4
 801760e:	f7ff ff47 	bl	80174a0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017612:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017616:	9004      	str	r0, [sp, #16]
 8017618:	f8ad 3020 	strh.w	r3, [sp, #32]
 801761c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017620:	9607      	str	r6, [sp, #28]
 8017622:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8017626:	4b10      	ldr	r3, [pc, #64]	; (8017668 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8017628:	881b      	ldrh	r3, [r3, #0]
 801762a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801762e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017630:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8017634:	f7ff fc60 	bl	8016ef8 <_ZN8touchgfx3HAL3lcdEv>
 8017638:	6803      	ldr	r3, [r0, #0]
 801763a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801763c:	4798      	blx	r3
 801763e:	23ff      	movs	r3, #255	; 0xff
 8017640:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8017644:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8017648:	6860      	ldr	r0, [r4, #4]
 801764a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801764e:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8017652:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8017656:	6803      	ldr	r3, [r0, #0]
 8017658:	a903      	add	r1, sp, #12
 801765a:	685b      	ldr	r3, [r3, #4]
 801765c:	4798      	blx	r3
 801765e:	4630      	mov	r0, r6
 8017660:	b00c      	add	sp, #48	; 0x30
 8017662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017666:	bf00      	nop
 8017668:	201979e2 	.word	0x201979e2

0801766c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 801766c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801766e:	b085      	sub	sp, #20
 8017670:	ac02      	add	r4, sp, #8
 8017672:	e884 0006 	stmia.w	r4, {r1, r2}
 8017676:	4605      	mov	r5, r0
 8017678:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 801767c:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8017680:	f7ff fde6 	bl	8017250 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017684:	463a      	mov	r2, r7
 8017686:	4603      	mov	r3, r0
 8017688:	4631      	mov	r1, r6
 801768a:	4628      	mov	r0, r5
 801768c:	f7ff ff08 	bl	80174a0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017690:	4a05      	ldr	r2, [pc, #20]	; (80176a8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8017692:	682b      	ldr	r3, [r5, #0]
 8017694:	8812      	ldrh	r2, [r2, #0]
 8017696:	9200      	str	r2, [sp, #0]
 8017698:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801769a:	e894 0006 	ldmia.w	r4, {r1, r2}
 801769e:	4603      	mov	r3, r0
 80176a0:	4628      	mov	r0, r5
 80176a2:	47b0      	blx	r6
 80176a4:	b005      	add	sp, #20
 80176a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176a8:	201979e2 	.word	0x201979e2

080176ac <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80176ac:	b570      	push	{r4, r5, r6, lr}
 80176ae:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80176b2:	4604      	mov	r4, r0
 80176b4:	b19b      	cbz	r3, 80176de <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80176b6:	2002      	movs	r0, #2
 80176b8:	f7ea fe5a 	bl	8002370 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80176bc:	2300      	movs	r3, #0
 80176be:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80176c2:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80176c6:	6823      	ldr	r3, [r4, #0]
 80176c8:	4620      	mov	r0, r4
 80176ca:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 80176ce:	f7ff fdbf 	bl	8017250 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80176d2:	462b      	mov	r3, r5
 80176d4:	4601      	mov	r1, r0
 80176d6:	4620      	mov	r0, r4
 80176d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80176dc:	4718      	bx	r3
 80176de:	bd70      	pop	{r4, r5, r6, pc}

080176e0 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 80176e0:	b570      	push	{r4, r5, r6, lr}
 80176e2:	4605      	mov	r5, r0
 80176e4:	460c      	mov	r4, r1
 80176e6:	2003      	movs	r0, #3
 80176e8:	b149      	cbz	r1, 80176fe <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 80176ea:	f7ea fe09 	bl	8002300 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80176ee:	6928      	ldr	r0, [r5, #16]
 80176f0:	b168      	cbz	r0, 801770e <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 80176f2:	2101      	movs	r1, #1
 80176f4:	6803      	ldr	r3, [r0, #0]
 80176f6:	695b      	ldr	r3, [r3, #20]
 80176f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80176fc:	4718      	bx	r3
 80176fe:	f7ea fe1b 	bl	8002338 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8017702:	6928      	ldr	r0, [r5, #16]
 8017704:	b118      	cbz	r0, 801770e <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8017706:	6803      	ldr	r3, [r0, #0]
 8017708:	4621      	mov	r1, r4
 801770a:	695b      	ldr	r3, [r3, #20]
 801770c:	e7f4      	b.n	80176f8 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 801770e:	bd70      	pop	{r4, r5, r6, pc}

08017710 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8017710:	b538      	push	{r3, r4, r5, lr}
 8017712:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8017716:	4604      	mov	r4, r0
 8017718:	428b      	cmp	r3, r1
 801771a:	460d      	mov	r5, r1
 801771c:	d006      	beq.n	801772c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801771e:	6803      	ldr	r3, [r0, #0]
 8017720:	b929      	cbnz	r1, 801772e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8017722:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8017726:	4798      	blx	r3
 8017728:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 801772c:	bd38      	pop	{r3, r4, r5, pc}
 801772e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8017732:	e7f8      	b.n	8017726 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08017734 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8017734:	b510      	push	{r4, lr}
 8017736:	4b0d      	ldr	r3, [pc, #52]	; (801776c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8017738:	4604      	mov	r4, r0
 801773a:	781b      	ldrb	r3, [r3, #0]
 801773c:	b95b      	cbnz	r3, 8017756 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801773e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8017742:	2b02      	cmp	r3, #2
 8017744:	d007      	beq.n	8017756 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017746:	6840      	ldr	r0, [r0, #4]
 8017748:	f000 f914 	bl	8017974 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801774c:	b118      	cbz	r0, 8017756 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801774e:	6862      	ldr	r2, [r4, #4]
 8017750:	7a53      	ldrb	r3, [r2, #9]
 8017752:	2b00      	cmp	r3, #0
 8017754:	d0fc      	beq.n	8017750 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8017756:	f7ea ffef 	bl	8002738 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801775a:	4620      	mov	r0, r4
 801775c:	2100      	movs	r1, #0
 801775e:	f7ff ffd7 	bl	8017710 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8017762:	4620      	mov	r0, r4
 8017764:	f7ff fd74 	bl	8017250 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017768:	bd10      	pop	{r4, pc}
 801776a:	bf00      	nop
 801776c:	201979e6 	.word	0x201979e6

08017770 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8017770:	2000      	movs	r0, #0
 8017772:	4770      	bx	lr

08017774 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8017774:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8017778:	1a13      	subs	r3, r2, r0
 801777a:	4258      	negs	r0, r3
 801777c:	4158      	adcs	r0, r3
 801777e:	4770      	bx	lr

08017780 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8017780:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8017784:	1a9b      	subs	r3, r3, r2
 8017786:	2b00      	cmp	r3, #0
 8017788:	bfdc      	itt	le
 801778a:	6882      	ldrle	r2, [r0, #8]
 801778c:	189b      	addle	r3, r3, r2
 801778e:	2b01      	cmp	r3, #1
 8017790:	bfcc      	ite	gt
 8017792:	2000      	movgt	r0, #0
 8017794:	2001      	movle	r0, #1
 8017796:	4770      	bx	lr

08017798 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8017798:	6902      	ldr	r2, [r0, #16]
 801779a:	6843      	ldr	r3, [r0, #4]
 801779c:	2024      	movs	r0, #36	; 0x24
 801779e:	fb00 3002 	mla	r0, r0, r2, r3
 80177a2:	4770      	bx	lr

080177a4 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80177a4:	6803      	ldr	r3, [r0, #0]
 80177a6:	691b      	ldr	r3, [r3, #16]
 80177a8:	4718      	bx	r3

080177aa <_ZN8touchgfx13DMA_Interface7executeEv>:
 80177aa:	2301      	movs	r3, #1
 80177ac:	b570      	push	{r4, r5, r6, lr}
 80177ae:	7203      	strb	r3, [r0, #8]
 80177b0:	4604      	mov	r4, r0
 80177b2:	6840      	ldr	r0, [r0, #4]
 80177b4:	6803      	ldr	r3, [r0, #0]
 80177b6:	699b      	ldr	r3, [r3, #24]
 80177b8:	4798      	blx	r3
 80177ba:	6803      	ldr	r3, [r0, #0]
 80177bc:	4605      	mov	r5, r0
 80177be:	2b40      	cmp	r3, #64	; 0x40
 80177c0:	d00c      	beq.n	80177dc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80177c2:	d810      	bhi.n	80177e6 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80177c4:	2b04      	cmp	r3, #4
 80177c6:	d01d      	beq.n	8017804 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 80177c8:	d804      	bhi.n	80177d4 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 80177ca:	2b01      	cmp	r3, #1
 80177cc:	d006      	beq.n	80177dc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80177ce:	2b02      	cmp	r3, #2
 80177d0:	d02c      	beq.n	801782c <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 80177d2:	bd70      	pop	{r4, r5, r6, pc}
 80177d4:	2b08      	cmp	r3, #8
 80177d6:	d01d      	beq.n	8017814 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 80177d8:	2b20      	cmp	r3, #32
 80177da:	d1fa      	bne.n	80177d2 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 80177dc:	6823      	ldr	r3, [r4, #0]
 80177de:	4620      	mov	r0, r4
 80177e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80177e2:	4798      	blx	r3
 80177e4:	e013      	b.n	801780e <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80177e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80177ea:	d0f7      	beq.n	80177dc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80177ec:	d804      	bhi.n	80177f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 80177ee:	2b80      	cmp	r3, #128	; 0x80
 80177f0:	d0f4      	beq.n	80177dc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80177f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80177f6:	e7f0      	b.n	80177da <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 80177f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80177fc:	d0ee      	beq.n	80177dc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80177fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017802:	e7e5      	b.n	80177d0 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8017804:	6823      	ldr	r3, [r4, #0]
 8017806:	7f01      	ldrb	r1, [r0, #28]
 8017808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801780a:	4620      	mov	r0, r4
 801780c:	4798      	blx	r3
 801780e:	6823      	ldr	r3, [r4, #0]
 8017810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017812:	e006      	b.n	8017822 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8017814:	6823      	ldr	r3, [r4, #0]
 8017816:	7f01      	ldrb	r1, [r0, #28]
 8017818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801781a:	4620      	mov	r0, r4
 801781c:	4798      	blx	r3
 801781e:	6823      	ldr	r3, [r4, #0]
 8017820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017822:	4629      	mov	r1, r5
 8017824:	4620      	mov	r0, r4
 8017826:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801782a:	4718      	bx	r3
 801782c:	6823      	ldr	r3, [r4, #0]
 801782e:	4620      	mov	r0, r4
 8017830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017832:	4798      	blx	r3
 8017834:	e7f3      	b.n	801781e <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08017836 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8017836:	4770      	bx	lr

08017838 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8017838:	4770      	bx	lr

0801783a <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 801783a:	4770      	bx	lr

0801783c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801783c:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8017840:	1ad2      	subs	r2, r2, r3
 8017842:	2a00      	cmp	r2, #0
 8017844:	b510      	push	{r4, lr}
 8017846:	bfdc      	itt	le
 8017848:	6884      	ldrle	r4, [r0, #8]
 801784a:	1912      	addle	r2, r2, r4
 801784c:	2a01      	cmp	r2, #1
 801784e:	dd16      	ble.n	801787e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8017850:	2424      	movs	r4, #36	; 0x24
 8017852:	6842      	ldr	r2, [r0, #4]
 8017854:	fb04 2303 	mla	r3, r4, r3, r2
 8017858:	f101 0220 	add.w	r2, r1, #32
 801785c:	f851 4b04 	ldr.w	r4, [r1], #4
 8017860:	4291      	cmp	r1, r2
 8017862:	f843 4b04 	str.w	r4, [r3], #4
 8017866:	d1f9      	bne.n	801785c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8017868:	780a      	ldrb	r2, [r1, #0]
 801786a:	701a      	strb	r2, [r3, #0]
 801786c:	68c3      	ldr	r3, [r0, #12]
 801786e:	6882      	ldr	r2, [r0, #8]
 8017870:	3301      	adds	r3, #1
 8017872:	429a      	cmp	r2, r3
 8017874:	bfd8      	it	le
 8017876:	1a9b      	suble	r3, r3, r2
 8017878:	f3bf 8f5b 	dmb	ish
 801787c:	60c3      	str	r3, [r0, #12]
 801787e:	bd10      	pop	{r4, pc}

08017880 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8017880:	6903      	ldr	r3, [r0, #16]
 8017882:	6882      	ldr	r2, [r0, #8]
 8017884:	3301      	adds	r3, #1
 8017886:	429a      	cmp	r2, r3
 8017888:	bfd8      	it	le
 801788a:	1a9b      	suble	r3, r3, r2
 801788c:	f3bf 8f5b 	dmb	ish
 8017890:	6103      	str	r3, [r0, #16]
 8017892:	4770      	bx	lr

08017894 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8017894:	b570      	push	{r4, r5, r6, lr}
 8017896:	4604      	mov	r4, r0
 8017898:	460e      	mov	r6, r1
 801789a:	6860      	ldr	r0, [r4, #4]
 801789c:	6803      	ldr	r3, [r0, #0]
 801789e:	685b      	ldr	r3, [r3, #4]
 80178a0:	4798      	blx	r3
 80178a2:	2800      	cmp	r0, #0
 80178a4:	d1f9      	bne.n	801789a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80178a6:	4d0d      	ldr	r5, [pc, #52]	; (80178dc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80178a8:	6828      	ldr	r0, [r5, #0]
 80178aa:	6803      	ldr	r3, [r0, #0]
 80178ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80178ae:	4798      	blx	r3
 80178b0:	f7ea ff6e 	bl	8002790 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80178b4:	6828      	ldr	r0, [r5, #0]
 80178b6:	2101      	movs	r1, #1
 80178b8:	f7ff ff2a 	bl	8017710 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80178bc:	6860      	ldr	r0, [r4, #4]
 80178be:	4631      	mov	r1, r6
 80178c0:	6803      	ldr	r3, [r0, #0]
 80178c2:	689b      	ldr	r3, [r3, #8]
 80178c4:	4798      	blx	r3
 80178c6:	6823      	ldr	r3, [r4, #0]
 80178c8:	4620      	mov	r0, r4
 80178ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80178cc:	4798      	blx	r3
 80178ce:	6828      	ldr	r0, [r5, #0]
 80178d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80178d4:	6803      	ldr	r3, [r0, #0]
 80178d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80178d8:	4718      	bx	r3
 80178da:	bf00      	nop
 80178dc:	201979e8 	.word	0x201979e8

080178e0 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80178e0:	b508      	push	{r3, lr}
 80178e2:	f7ea ff29 	bl	8002738 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80178e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80178ea:	f7ea bf3b 	b.w	8002764 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080178ee <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80178ee:	b510      	push	{r4, lr}
 80178f0:	4604      	mov	r4, r0
 80178f2:	2114      	movs	r1, #20
 80178f4:	f011 fbb5 	bl	8029062 <_ZdlPvj>
 80178f8:	4620      	mov	r0, r4
 80178fa:	bd10      	pop	{r4, pc}

080178fc <_ZN8touchgfx13DMA_Interface5startEv>:
 80178fc:	b510      	push	{r4, lr}
 80178fe:	4604      	mov	r4, r0
 8017900:	6840      	ldr	r0, [r0, #4]
 8017902:	6803      	ldr	r3, [r0, #0]
 8017904:	681b      	ldr	r3, [r3, #0]
 8017906:	4798      	blx	r3
 8017908:	b948      	cbnz	r0, 801791e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801790a:	7a63      	ldrb	r3, [r4, #9]
 801790c:	b13b      	cbz	r3, 801791e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801790e:	7a23      	ldrb	r3, [r4, #8]
 8017910:	b92b      	cbnz	r3, 801791e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8017912:	6823      	ldr	r3, [r4, #0]
 8017914:	4620      	mov	r0, r4
 8017916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801791a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801791c:	4718      	bx	r3
 801791e:	bd10      	pop	{r4, pc}

08017920 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8017920:	b570      	push	{r4, r5, r6, lr}
 8017922:	4604      	mov	r4, r0
 8017924:	6840      	ldr	r0, [r0, #4]
 8017926:	6803      	ldr	r3, [r0, #0]
 8017928:	681b      	ldr	r3, [r3, #0]
 801792a:	4798      	blx	r3
 801792c:	4605      	mov	r5, r0
 801792e:	b930      	cbnz	r0, 801793e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8017930:	7a23      	ldrb	r3, [r4, #8]
 8017932:	b123      	cbz	r3, 801793e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8017934:	6860      	ldr	r0, [r4, #4]
 8017936:	6803      	ldr	r3, [r0, #0]
 8017938:	695b      	ldr	r3, [r3, #20]
 801793a:	4798      	blx	r3
 801793c:	7225      	strb	r5, [r4, #8]
 801793e:	6860      	ldr	r0, [r4, #4]
 8017940:	6803      	ldr	r3, [r0, #0]
 8017942:	681b      	ldr	r3, [r3, #0]
 8017944:	4798      	blx	r3
 8017946:	b928      	cbnz	r0, 8017954 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8017948:	6823      	ldr	r3, [r4, #0]
 801794a:	4620      	mov	r0, r4
 801794c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017952:	4718      	bx	r3
 8017954:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017958:	f7ea bf20 	b.w	800279c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0801795c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801795c:	6082      	str	r2, [r0, #8]
 801795e:	2200      	movs	r2, #0
 8017960:	b510      	push	{r4, lr}
 8017962:	4c03      	ldr	r4, [pc, #12]	; (8017970 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8017964:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8017968:	e9c0 4100 	strd	r4, r1, [r0]
 801796c:	bd10      	pop	{r4, pc}
 801796e:	bf00      	nop
 8017970:	0802b9d0 	.word	0x0802b9d0

08017974 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8017974:	6840      	ldr	r0, [r0, #4]
 8017976:	6803      	ldr	r3, [r0, #0]
 8017978:	681b      	ldr	r3, [r3, #0]
 801797a:	4718      	bx	r3

0801797c <_ZNK8touchgfx3Box12getSolidRectEv>:
 801797c:	2300      	movs	r3, #0
 801797e:	8083      	strh	r3, [r0, #4]
 8017980:	80c3      	strh	r3, [r0, #6]
 8017982:	8003      	strh	r3, [r0, #0]
 8017984:	8043      	strh	r3, [r0, #2]
 8017986:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801798a:	2bff      	cmp	r3, #255	; 0xff
 801798c:	bf01      	itttt	eq
 801798e:	890b      	ldrheq	r3, [r1, #8]
 8017990:	8083      	strheq	r3, [r0, #4]
 8017992:	894b      	ldrheq	r3, [r1, #10]
 8017994:	80c3      	strheq	r3, [r0, #6]
 8017996:	4770      	bx	lr

08017998 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8017998:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801799a:	4604      	mov	r4, r0
 801799c:	466b      	mov	r3, sp
 801799e:	6808      	ldr	r0, [r1, #0]
 80179a0:	6849      	ldr	r1, [r1, #4]
 80179a2:	c303      	stmia	r3!, {r0, r1}
 80179a4:	6823      	ldr	r3, [r4, #0]
 80179a6:	4669      	mov	r1, sp
 80179a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179aa:	4620      	mov	r0, r4
 80179ac:	4798      	blx	r3
 80179ae:	4b08      	ldr	r3, [pc, #32]	; (80179d0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80179b0:	681b      	ldr	r3, [r3, #0]
 80179b2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80179b6:	b10a      	cbz	r2, 80179bc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80179b8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80179ba:	b900      	cbnz	r0, 80179be <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80179bc:	6898      	ldr	r0, [r3, #8]
 80179be:	6803      	ldr	r3, [r0, #0]
 80179c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80179c2:	6a1d      	ldr	r5, [r3, #32]
 80179c4:	4669      	mov	r1, sp
 80179c6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80179ca:	47a8      	blx	r5
 80179cc:	b003      	add	sp, #12
 80179ce:	bd30      	pop	{r4, r5, pc}
 80179d0:	201979e8 	.word	0x201979e8

080179d4 <_ZN8touchgfx3BoxD1Ev>:
 80179d4:	4770      	bx	lr

080179d6 <_ZN8touchgfx3BoxD0Ev>:
 80179d6:	b510      	push	{r4, lr}
 80179d8:	4604      	mov	r4, r0
 80179da:	212c      	movs	r1, #44	; 0x2c
 80179dc:	f011 fb41 	bl	8029062 <_ZdlPvj>
 80179e0:	4620      	mov	r0, r4
 80179e2:	bd10      	pop	{r4, pc}

080179e4 <_ZNK8touchgfx3Box17invalidateContentEv>:
 80179e4:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 80179e8:	b12a      	cbz	r2, 80179f6 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80179ea:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80179ee:	b112      	cbz	r2, 80179f6 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80179f0:	6803      	ldr	r3, [r0, #0]
 80179f2:	695b      	ldr	r3, [r3, #20]
 80179f4:	4718      	bx	r3
 80179f6:	4770      	bx	lr

080179f8 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 80179f8:	b510      	push	{r4, lr}
 80179fa:	6803      	ldr	r3, [r0, #0]
 80179fc:	460c      	mov	r4, r1
 80179fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a00:	4798      	blx	r3
 8017a02:	1b03      	subs	r3, r0, r4
 8017a04:	4258      	negs	r0, r3
 8017a06:	4158      	adcs	r0, r3
 8017a08:	bd10      	pop	{r4, pc}
	...

08017a0c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8017a0c:	4b01      	ldr	r3, [pc, #4]	; (8017a14 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8017a0e:	6019      	str	r1, [r3, #0]
 8017a10:	4770      	bx	lr
 8017a12:	bf00      	nop
 8017a14:	201979f0 	.word	0x201979f0

08017a18 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8017a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a1c:	4696      	mov	lr, r2
 8017a1e:	4614      	mov	r4, r2
 8017a20:	4605      	mov	r5, r0
 8017a22:	460e      	mov	r6, r1
 8017a24:	461f      	mov	r7, r3
 8017a26:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017a2a:	b097      	sub	sp, #92	; 0x5c
 8017a2c:	f10d 0c1c 	add.w	ip, sp, #28
 8017a30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017a34:	f8de 3000 	ldr.w	r3, [lr]
 8017a38:	f104 0e14 	add.w	lr, r4, #20
 8017a3c:	f8cc 3000 	str.w	r3, [ip]
 8017a40:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8017a44:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017a48:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017a4c:	f8de 3000 	ldr.w	r3, [lr]
 8017a50:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8017a54:	f8cc 3000 	str.w	r3, [ip]
 8017a58:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8017a5c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017a60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017a64:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8017a68:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8017a6c:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8017a70:	f8de 3000 	ldr.w	r3, [lr]
 8017a74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017a76:	f8cc 3000 	str.w	r3, [ip]
 8017a7a:	9201      	str	r2, [sp, #4]
 8017a7c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8017a80:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017a82:	682b      	ldr	r3, [r5, #0]
 8017a84:	9200      	str	r2, [sp, #0]
 8017a86:	f8cd 8008 	str.w	r8, [sp, #8]
 8017a8a:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8017a8e:	aa07      	add	r2, sp, #28
 8017a90:	463b      	mov	r3, r7
 8017a92:	4631      	mov	r1, r6
 8017a94:	4628      	mov	r0, r5
 8017a96:	47d8      	blx	fp
 8017a98:	46a6      	mov	lr, r4
 8017a9a:	f10d 0c1c 	add.w	ip, sp, #28
 8017a9e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017aa2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017aa6:	f8de 3000 	ldr.w	r3, [lr]
 8017aaa:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8017aae:	f8cc 3000 	str.w	r3, [ip]
 8017ab2:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8017ab6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017aba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017abe:	f8de 3000 	ldr.w	r3, [lr]
 8017ac2:	343c      	adds	r4, #60	; 0x3c
 8017ac4:	f8cc 3000 	str.w	r3, [ip]
 8017ac8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8017acc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017ace:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017ad2:	6823      	ldr	r3, [r4, #0]
 8017ad4:	4631      	mov	r1, r6
 8017ad6:	f8cc 3000 	str.w	r3, [ip]
 8017ada:	682b      	ldr	r3, [r5, #0]
 8017adc:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8017ae0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017ae2:	f8cd 8008 	str.w	r8, [sp, #8]
 8017ae6:	9201      	str	r2, [sp, #4]
 8017ae8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017aea:	4628      	mov	r0, r5
 8017aec:	9200      	str	r2, [sp, #0]
 8017aee:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8017af0:	aa07      	add	r2, sp, #28
 8017af2:	463b      	mov	r3, r7
 8017af4:	47a0      	blx	r4
 8017af6:	b017      	add	sp, #92	; 0x5c
 8017af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017afc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8017afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b00:	b08d      	sub	sp, #52	; 0x34
 8017b02:	4688      	mov	r8, r1
 8017b04:	9916      	ldr	r1, [sp, #88]	; 0x58
 8017b06:	f8d3 c000 	ldr.w	ip, [r3]
 8017b0a:	680f      	ldr	r7, [r1, #0]
 8017b0c:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8017b10:	eba7 070c 	sub.w	r7, r7, ip
 8017b14:	42bc      	cmp	r4, r7
 8017b16:	bfa8      	it	ge
 8017b18:	463c      	movge	r4, r7
 8017b1a:	ee07 4a90 	vmov	s15, r4
 8017b1e:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8017b22:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8017b26:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8017b2a:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8017b2e:	edd3 6a07 	vldr	s13, [r3, #28]
 8017b32:	ee25 4a04 	vmul.f32	s8, s10, s8
 8017b36:	ee65 4a24 	vmul.f32	s9, s10, s9
 8017b3a:	ee25 5a27 	vmul.f32	s10, s10, s15
 8017b3e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017b42:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8017b46:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8017b4a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8017b4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017b50:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8017b54:	f9b1 9000 	ldrsh.w	r9, [r1]
 8017b58:	f9ba 1000 	ldrsh.w	r1, [sl]
 8017b5c:	eb09 0e0c 	add.w	lr, r9, ip
 8017b60:	4571      	cmp	r1, lr
 8017b62:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8017b66:	ee32 1a05 	vadd.f32	s2, s4, s10
 8017b6a:	ee36 0a84 	vadd.f32	s0, s13, s8
 8017b6e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8017b72:	ee22 2a07 	vmul.f32	s4, s4, s14
 8017b76:	f340 808c 	ble.w	8017c92 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8017b7a:	eba1 060e 	sub.w	r6, r1, lr
 8017b7e:	fb96 f5f4 	sdiv	r5, r6, r4
 8017b82:	ee07 5a10 	vmov	s14, r5
 8017b86:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017b8a:	2d00      	cmp	r5, #0
 8017b8c:	fb04 6615 	mls	r6, r4, r5, r6
 8017b90:	eea7 0a04 	vfma.f32	s0, s14, s8
 8017b94:	eee7 0a24 	vfma.f32	s1, s14, s9
 8017b98:	eea7 1a05 	vfma.f32	s2, s14, s10
 8017b9c:	dd12      	ble.n	8017bc4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8017b9e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8017ba2:	eef5 6a40 	vcmp.f32	s13, #0.0
 8017ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017baa:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8017bae:	bf14      	ite	ne
 8017bb0:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8017bb4:	eeb0 7a67 	vmoveq.f32	s14, s15
 8017bb8:	ee31 2a45 	vsub.f32	s4, s2, s10
 8017bbc:	ee61 1a87 	vmul.f32	s3, s3, s14
 8017bc0:	ee22 2a07 	vmul.f32	s4, s4, s14
 8017bc4:	fb05 f204 	mul.w	r2, r5, r4
 8017bc8:	1abf      	subs	r7, r7, r2
 8017bca:	4494      	add	ip, r2
 8017bcc:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8017bd0:	4411      	add	r1, r2
 8017bd2:	eb09 020c 	add.w	r2, r9, ip
 8017bd6:	443a      	add	r2, r7
 8017bd8:	b209      	sxth	r1, r1
 8017bda:	428a      	cmp	r2, r1
 8017bdc:	bfc4      	itt	gt
 8017bde:	eba1 0209 	subgt.w	r2, r1, r9
 8017be2:	eba2 070c 	subgt.w	r7, r2, ip
 8017be6:	2f00      	cmp	r7, #0
 8017be8:	dd50      	ble.n	8017c8c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8017bea:	fb97 f1f4 	sdiv	r1, r7, r4
 8017bee:	fb04 7211 	mls	r2, r4, r1, r7
 8017bf2:	b90a      	cbnz	r2, 8017bf8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8017bf4:	4622      	mov	r2, r4
 8017bf6:	3901      	subs	r1, #1
 8017bf8:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8017bfc:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8017c00:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8017c04:	ee21 3a23 	vmul.f32	s6, s2, s7
 8017c08:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8017c0c:	ee17 7a90 	vmov	r7, s15
 8017c10:	ee73 7a42 	vsub.f32	s15, s6, s4
 8017c14:	eef0 6a42 	vmov.f32	s13, s4
 8017c18:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8017c1c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017c20:	ee17 ca90 	vmov	ip, s15
 8017c24:	eeb0 7a61 	vmov.f32	s14, s3
 8017c28:	6840      	ldr	r0, [r0, #4]
 8017c2a:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8017c2e:	f8d0 a000 	ldr.w	sl, [r0]
 8017c32:	900b      	str	r0, [sp, #44]	; 0x2c
 8017c34:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8017c36:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8017c3a:	9008      	str	r0, [sp, #32]
 8017c3c:	9818      	ldr	r0, [sp, #96]	; 0x60
 8017c3e:	695b      	ldr	r3, [r3, #20]
 8017c40:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8017c44:	fb9c fcf4 	sdiv	ip, ip, r4
 8017c48:	445b      	add	r3, fp
 8017c4a:	9307      	str	r3, [sp, #28]
 8017c4c:	ee16 3a90 	vmov	r3, s13
 8017c50:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8017c54:	fb0c 3306 	mla	r3, ip, r6, r3
 8017c58:	fb97 f7f4 	sdiv	r7, r7, r4
 8017c5c:	9302      	str	r3, [sp, #8]
 8017c5e:	ee17 3a10 	vmov	r3, s14
 8017c62:	2900      	cmp	r1, #0
 8017c64:	bfcc      	ite	gt
 8017c66:	46a1      	movgt	r9, r4
 8017c68:	4691      	movle	r9, r2
 8017c6a:	44b6      	add	lr, r6
 8017c6c:	fb04 e505 	mla	r5, r4, r5, lr
 8017c70:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8017c74:	fb07 3706 	mla	r7, r7, r6, r3
 8017c78:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8017c7c:	e9cd 4700 	strd	r4, r7, [sp]
 8017c80:	eba9 0306 	sub.w	r3, r9, r6
 8017c84:	f8da 4008 	ldr.w	r4, [sl, #8]
 8017c88:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8017c8a:	47a0      	blx	r4
 8017c8c:	b00d      	add	sp, #52	; 0x34
 8017c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c92:	2500      	movs	r5, #0
 8017c94:	462e      	mov	r6, r5
 8017c96:	e799      	b.n	8017bcc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08017c98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8017c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c9c:	461d      	mov	r5, r3
 8017c9e:	b0db      	sub	sp, #364	; 0x16c
 8017ca0:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8017ca4:	910f      	str	r1, [sp, #60]	; 0x3c
 8017ca6:	930a      	str	r3, [sp, #40]	; 0x28
 8017ca8:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8017cac:	9009      	str	r0, [sp, #36]	; 0x24
 8017cae:	930b      	str	r3, [sp, #44]	; 0x2c
 8017cb0:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8017cb4:	4614      	mov	r4, r2
 8017cb6:	9310      	str	r3, [sp, #64]	; 0x40
 8017cb8:	6803      	ldr	r3, [r0, #0]
 8017cba:	4629      	mov	r1, r5
 8017cbc:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8017cbe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017cc2:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8017cc6:	47b8      	blx	r7
 8017cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017cca:	6058      	str	r0, [r3, #4]
 8017ccc:	2800      	cmp	r0, #0
 8017cce:	f000 83a1 	beq.w	8018414 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017cd2:	ed94 7a02 	vldr	s14, [r4, #8]
 8017cd6:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8017cda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017cde:	682b      	ldr	r3, [r5, #0]
 8017ce0:	9314      	str	r3, [sp, #80]	; 0x50
 8017ce2:	686b      	ldr	r3, [r5, #4]
 8017ce4:	9315      	str	r3, [sp, #84]	; 0x54
 8017ce6:	4bc1      	ldr	r3, [pc, #772]	; (8017fec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8017ce8:	7819      	ldrb	r1, [r3, #0]
 8017cea:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8017cee:	2900      	cmp	r1, #0
 8017cf0:	bf16      	itet	ne
 8017cf2:	4619      	movne	r1, r3
 8017cf4:	4611      	moveq	r1, r2
 8017cf6:	4613      	movne	r3, r2
 8017cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cfc:	9116      	str	r1, [sp, #88]	; 0x58
 8017cfe:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8017d02:	f240 8387 	bls.w	8018414 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017d06:	ed94 7a07 	vldr	s14, [r4, #28]
 8017d0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d12:	f240 837f 	bls.w	8018414 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017d16:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8017d1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d22:	f240 8377 	bls.w	8018414 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017d26:	6822      	ldr	r2, [r4, #0]
 8017d28:	4bb1      	ldr	r3, [pc, #708]	; (8017ff0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8017d2a:	429a      	cmp	r2, r3
 8017d2c:	f2c0 8372 	blt.w	8018414 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017d30:	49b0      	ldr	r1, [pc, #704]	; (8017ff4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8017d32:	6963      	ldr	r3, [r4, #20]
 8017d34:	428a      	cmp	r2, r1
 8017d36:	f300 836d 	bgt.w	8018414 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017d3a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8017d3e:	48ae      	ldr	r0, [pc, #696]	; (8017ff8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8017d40:	33ff      	adds	r3, #255	; 0xff
 8017d42:	4283      	cmp	r3, r0
 8017d44:	f200 8366 	bhi.w	8018414 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017d48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017d4a:	4dac      	ldr	r5, [pc, #688]	; (8017ffc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8017d4c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8017d50:	33ff      	adds	r3, #255	; 0xff
 8017d52:	42ab      	cmp	r3, r5
 8017d54:	f200 835e 	bhi.w	8018414 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017d58:	6862      	ldr	r2, [r4, #4]
 8017d5a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8017d5e:	33ff      	adds	r3, #255	; 0xff
 8017d60:	4283      	cmp	r3, r0
 8017d62:	f200 8357 	bhi.w	8018414 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017d66:	69a1      	ldr	r1, [r4, #24]
 8017d68:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8017d6c:	33ff      	adds	r3, #255	; 0xff
 8017d6e:	4283      	cmp	r3, r0
 8017d70:	f200 8350 	bhi.w	8018414 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017d74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8017d76:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8017d7a:	30ff      	adds	r0, #255	; 0xff
 8017d7c:	42a8      	cmp	r0, r5
 8017d7e:	f200 8349 	bhi.w	8018414 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017d82:	428a      	cmp	r2, r1
 8017d84:	f280 8110 	bge.w	8017fa8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8017d88:	429a      	cmp	r2, r3
 8017d8a:	f300 8119 	bgt.w	8017fc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8017d8e:	4299      	cmp	r1, r3
 8017d90:	f280 811d 	bge.w	8017fce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8017d94:	2502      	movs	r5, #2
 8017d96:	2701      	movs	r7, #1
 8017d98:	46a9      	mov	r9, r5
 8017d9a:	46b8      	mov	r8, r7
 8017d9c:	f04f 0a00 	mov.w	sl, #0
 8017da0:	4621      	mov	r1, r4
 8017da2:	a849      	add	r0, sp, #292	; 0x124
 8017da4:	f002 ffc0 	bl	801ad28 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8017da8:	4622      	mov	r2, r4
 8017daa:	4653      	mov	r3, sl
 8017dac:	a949      	add	r1, sp, #292	; 0x124
 8017dae:	f8cd 9000 	str.w	r9, [sp]
 8017db2:	a819      	add	r0, sp, #100	; 0x64
 8017db4:	f003 f8ea 	bl	801af8c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017db8:	4622      	mov	r2, r4
 8017dba:	4653      	mov	r3, sl
 8017dbc:	a949      	add	r1, sp, #292	; 0x124
 8017dbe:	f8cd 8000 	str.w	r8, [sp]
 8017dc2:	a829      	add	r0, sp, #164	; 0xa4
 8017dc4:	f003 f8e2 	bl	801af8c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017dc8:	4643      	mov	r3, r8
 8017dca:	4622      	mov	r2, r4
 8017dcc:	a949      	add	r1, sp, #292	; 0x124
 8017dce:	f8cd 9000 	str.w	r9, [sp]
 8017dd2:	a839      	add	r0, sp, #228	; 0xe4
 8017dd4:	f003 f8da 	bl	801af8c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017dd8:	42af      	cmp	r7, r5
 8017dda:	bfb5      	itete	lt
 8017ddc:	2300      	movlt	r3, #0
 8017dde:	2301      	movge	r3, #1
 8017de0:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017de2:	930e      	strge	r3, [sp, #56]	; 0x38
 8017de4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017de6:	af12      	add	r7, sp, #72	; 0x48
 8017de8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017dec:	bfb9      	ittee	lt
 8017dee:	ad29      	addlt	r5, sp, #164	; 0xa4
 8017df0:	ac19      	addlt	r4, sp, #100	; 0x64
 8017df2:	ad19      	addge	r5, sp, #100	; 0x64
 8017df4:	ac29      	addge	r4, sp, #164	; 0xa4
 8017df6:	e887 0003 	stmia.w	r7, {r0, r1}
 8017dfa:	b928      	cbnz	r0, 8017e08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8017dfc:	4b80      	ldr	r3, [pc, #512]	; (8018000 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8017dfe:	6818      	ldr	r0, [r3, #0]
 8017e00:	6803      	ldr	r3, [r0, #0]
 8017e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017e04:	4798      	blx	r3
 8017e06:	6038      	str	r0, [r7, #0]
 8017e08:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8017e0a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8017e0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017e12:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8017e14:	930c      	str	r3, [sp, #48]	; 0x30
 8017e16:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017e18:	6963      	ldr	r3, [r4, #20]
 8017e1a:	440b      	add	r3, r1
 8017e1c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8017e20:	4408      	add	r0, r1
 8017e22:	b200      	sxth	r0, r0
 8017e24:	4283      	cmp	r3, r0
 8017e26:	900d      	str	r0, [sp, #52]	; 0x34
 8017e28:	f280 80dd 	bge.w	8017fe6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8017e2c:	428b      	cmp	r3, r1
 8017e2e:	da08      	bge.n	8017e42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017e30:	2a00      	cmp	r2, #0
 8017e32:	dd06      	ble.n	8017e42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017e34:	1acb      	subs	r3, r1, r3
 8017e36:	429a      	cmp	r2, r3
 8017e38:	f2c0 80e4 	blt.w	8018004 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	f300 80e2 	bgt.w	8018006 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8017e42:	6967      	ldr	r7, [r4, #20]
 8017e44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017e46:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8017e4a:	443b      	add	r3, r7
 8017e4c:	461f      	mov	r7, r3
 8017e4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017e50:	1bdf      	subs	r7, r3, r7
 8017e52:	4297      	cmp	r7, r2
 8017e54:	bfa8      	it	ge
 8017e56:	4617      	movge	r7, r2
 8017e58:	2f00      	cmp	r7, #0
 8017e5a:	f340 8166 	ble.w	801812a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8017e5e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8017e60:	6829      	ldr	r1, [r5, #0]
 8017e62:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017e66:	f9bb 3000 	ldrsh.w	r3, [fp]
 8017e6a:	4411      	add	r1, r2
 8017e6c:	4299      	cmp	r1, r3
 8017e6e:	6820      	ldr	r0, [r4, #0]
 8017e70:	dd1a      	ble.n	8017ea8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8017e72:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8017e76:	4402      	add	r2, r0
 8017e78:	440b      	add	r3, r1
 8017e7a:	b21b      	sxth	r3, r3
 8017e7c:	429a      	cmp	r2, r3
 8017e7e:	dc13      	bgt.n	8017ea8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8017e80:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e84:	a912      	add	r1, sp, #72	; 0x48
 8017e86:	681b      	ldr	r3, [r3, #0]
 8017e88:	9206      	str	r2, [sp, #24]
 8017e8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017e8c:	9500      	str	r5, [sp, #0]
 8017e8e:	9205      	str	r2, [sp, #20]
 8017e90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017e92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017e94:	e9cd b203 	strd	fp, r2, [sp, #12]
 8017e98:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8017e9a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8017e9e:	aa49      	add	r2, sp, #292	; 0x124
 8017ea0:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8017ea4:	4623      	mov	r3, r4
 8017ea6:	47c8      	blx	r9
 8017ea8:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017eac:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8017eb0:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8017eb4:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8017eb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017ebc:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8017ec0:	ed94 6a08 	vldr	s12, [r4, #32]
 8017ec4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017ec8:	edd4 6a07 	vldr	s13, [r4, #28]
 8017ecc:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017ed0:	441a      	add	r2, r3
 8017ed2:	6963      	ldr	r3, [r4, #20]
 8017ed4:	68a1      	ldr	r1, [r4, #8]
 8017ed6:	3301      	adds	r3, #1
 8017ed8:	6163      	str	r3, [r4, #20]
 8017eda:	69a3      	ldr	r3, [r4, #24]
 8017edc:	6022      	str	r2, [r4, #0]
 8017ede:	3b01      	subs	r3, #1
 8017ee0:	61a3      	str	r3, [r4, #24]
 8017ee2:	6923      	ldr	r3, [r4, #16]
 8017ee4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8017ee8:	440b      	add	r3, r1
 8017eea:	68e1      	ldr	r1, [r4, #12]
 8017eec:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017ef0:	428b      	cmp	r3, r1
 8017ef2:	edc4 6a07 	vstr	s13, [r4, #28]
 8017ef6:	6123      	str	r3, [r4, #16]
 8017ef8:	db15      	blt.n	8017f26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8017efa:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8017efe:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017f02:	edc4 6a07 	vstr	s13, [r4, #28]
 8017f06:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8017f0a:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017f0e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8017f12:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8017f16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017f1a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017f1e:	3201      	adds	r2, #1
 8017f20:	1a5b      	subs	r3, r3, r1
 8017f22:	6022      	str	r2, [r4, #0]
 8017f24:	6123      	str	r3, [r4, #16]
 8017f26:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8017f2a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017f2e:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8017f32:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8017f36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017f3a:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8017f3e:	ed95 6a08 	vldr	s12, [r5, #32]
 8017f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017f46:	edd5 6a07 	vldr	s13, [r5, #28]
 8017f4a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017f4e:	441a      	add	r2, r3
 8017f50:	696b      	ldr	r3, [r5, #20]
 8017f52:	68a9      	ldr	r1, [r5, #8]
 8017f54:	3301      	adds	r3, #1
 8017f56:	616b      	str	r3, [r5, #20]
 8017f58:	69ab      	ldr	r3, [r5, #24]
 8017f5a:	602a      	str	r2, [r5, #0]
 8017f5c:	3b01      	subs	r3, #1
 8017f5e:	61ab      	str	r3, [r5, #24]
 8017f60:	692b      	ldr	r3, [r5, #16]
 8017f62:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017f66:	440b      	add	r3, r1
 8017f68:	68e9      	ldr	r1, [r5, #12]
 8017f6a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017f6e:	428b      	cmp	r3, r1
 8017f70:	edc5 6a07 	vstr	s13, [r5, #28]
 8017f74:	612b      	str	r3, [r5, #16]
 8017f76:	db15      	blt.n	8017fa4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8017f78:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8017f7c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017f80:	edc5 6a07 	vstr	s13, [r5, #28]
 8017f84:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8017f88:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017f8c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017f90:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8017f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017f98:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017f9c:	3201      	adds	r2, #1
 8017f9e:	1a5b      	subs	r3, r3, r1
 8017fa0:	602a      	str	r2, [r5, #0]
 8017fa2:	612b      	str	r3, [r5, #16]
 8017fa4:	3f01      	subs	r7, #1
 8017fa6:	e757      	b.n	8017e58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8017fa8:	4299      	cmp	r1, r3
 8017faa:	dc13      	bgt.n	8017fd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8017fac:	429a      	cmp	r2, r3
 8017fae:	da14      	bge.n	8017fda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8017fb0:	2502      	movs	r5, #2
 8017fb2:	2703      	movs	r7, #3
 8017fb4:	46a9      	mov	r9, r5
 8017fb6:	f04f 0800 	mov.w	r8, #0
 8017fba:	f04f 0a01 	mov.w	sl, #1
 8017fbe:	e6ef      	b.n	8017da0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8017fc0:	2501      	movs	r5, #1
 8017fc2:	2700      	movs	r7, #0
 8017fc4:	46a9      	mov	r9, r5
 8017fc6:	46b8      	mov	r8, r7
 8017fc8:	f04f 0a02 	mov.w	sl, #2
 8017fcc:	e6e8      	b.n	8017da0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8017fce:	2501      	movs	r5, #1
 8017fd0:	2702      	movs	r7, #2
 8017fd2:	e6e1      	b.n	8017d98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8017fd4:	2500      	movs	r5, #0
 8017fd6:	2701      	movs	r7, #1
 8017fd8:	e7f4      	b.n	8017fc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8017fda:	2702      	movs	r7, #2
 8017fdc:	2503      	movs	r5, #3
 8017fde:	f04f 0900 	mov.w	r9, #0
 8017fe2:	46b8      	mov	r8, r7
 8017fe4:	e7e9      	b.n	8017fba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8017fe6:	4613      	mov	r3, r2
 8017fe8:	e728      	b.n	8017e3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8017fea:	bf00      	nop
 8017fec:	201979e0 	.word	0x201979e0
 8017ff0:	fffd8f01 	.word	0xfffd8f01
 8017ff4:	00027100 	.word	0x00027100
 8017ff8:	0004e1ff 	.word	0x0004e1ff
 8017ffc:	0004e1fe 	.word	0x0004e1fe
 8018000:	201979e8 	.word	0x201979e8
 8018004:	4613      	mov	r3, r2
 8018006:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801800a:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801800e:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8018012:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8018016:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801801a:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801801e:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8018022:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8018026:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801802a:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801802e:	469e      	mov	lr, r3
 8018030:	469c      	mov	ip, r3
 8018032:	f04f 0900 	mov.w	r9, #0
 8018036:	992b      	ldr	r1, [sp, #172]	; 0xac
 8018038:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801803a:	9111      	str	r1, [sp, #68]	; 0x44
 801803c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8018040:	f1bc 0f00 	cmp.w	ip, #0
 8018044:	d147      	bne.n	80180d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8018046:	eb03 0c07 	add.w	ip, r3, r7
 801804a:	1ad7      	subs	r7, r2, r3
 801804c:	f1b9 0f00 	cmp.w	r9, #0
 8018050:	d009      	beq.n	8018066 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8018052:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8018056:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801805a:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801805e:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8018062:	9029      	str	r0, [sp, #164]	; 0xa4
 8018064:	912d      	str	r1, [sp, #180]	; 0xb4
 8018066:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801806a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801806e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8018072:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8018076:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801807a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801807e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8018082:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8018086:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801808a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801808e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8018092:	f04f 0800 	mov.w	r8, #0
 8018096:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8018098:	9111      	str	r1, [sp, #68]	; 0x44
 801809a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801809e:	f1be 0f00 	cmp.w	lr, #0
 80180a2:	d031      	beq.n	8018108 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 80180a4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80180a6:	4450      	add	r0, sl
 80180a8:	4431      	add	r1, r6
 80180aa:	4549      	cmp	r1, r9
 80180ac:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80180b0:	ee37 7a04 	vadd.f32	s14, s14, s8
 80180b4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80180b8:	db08      	blt.n	80180cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 80180ba:	ee77 7a85 	vadd.f32	s15, s15, s10
 80180be:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80180c2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80180c6:	3001      	adds	r0, #1
 80180c8:	eba1 0109 	sub.w	r1, r1, r9
 80180cc:	f10e 3eff 	add.w	lr, lr, #4294967295
 80180d0:	f04f 0801 	mov.w	r8, #1
 80180d4:	e7e3      	b.n	801809e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80180d6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80180d8:	4450      	add	r0, sl
 80180da:	4431      	add	r1, r6
 80180dc:	4541      	cmp	r1, r8
 80180de:	ee37 7a24 	vadd.f32	s14, s14, s9
 80180e2:	ee77 7a84 	vadd.f32	s15, s15, s8
 80180e6:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80180ea:	db08      	blt.n	80180fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80180ec:	ee76 6a85 	vadd.f32	s13, s13, s10
 80180f0:	ee37 7a25 	vadd.f32	s14, s14, s11
 80180f4:	ee77 7a86 	vadd.f32	s15, s15, s12
 80180f8:	3001      	adds	r0, #1
 80180fa:	eba1 0108 	sub.w	r1, r1, r8
 80180fe:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018102:	f04f 0901 	mov.w	r9, #1
 8018106:	e79b      	b.n	8018040 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8018108:	449c      	add	ip, r3
 801810a:	1aff      	subs	r7, r7, r3
 801810c:	f1b8 0f00 	cmp.w	r8, #0
 8018110:	d009      	beq.n	8018126 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8018112:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8018116:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801811a:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801811e:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8018122:	9019      	str	r0, [sp, #100]	; 0x64
 8018124:	911d      	str	r1, [sp, #116]	; 0x74
 8018126:	1ad2      	subs	r2, r2, r3
 8018128:	e68b      	b.n	8017e42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801812a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801812c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801812e:	2b00      	cmp	r3, #0
 8018130:	f000 80d1 	beq.w	80182d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8018134:	ad19      	add	r5, sp, #100	; 0x64
 8018136:	ac39      	add	r4, sp, #228	; 0xe4
 8018138:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801813a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801813e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018142:	930c      	str	r3, [sp, #48]	; 0x30
 8018144:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018146:	6963      	ldr	r3, [r4, #20]
 8018148:	440b      	add	r3, r1
 801814a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801814e:	4408      	add	r0, r1
 8018150:	b200      	sxth	r0, r0
 8018152:	4283      	cmp	r3, r0
 8018154:	900d      	str	r0, [sp, #52]	; 0x34
 8018156:	f280 80c1 	bge.w	80182dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801815a:	428b      	cmp	r3, r1
 801815c:	da08      	bge.n	8018170 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801815e:	2a00      	cmp	r2, #0
 8018160:	dd06      	ble.n	8018170 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018162:	1acb      	subs	r3, r1, r3
 8018164:	429a      	cmp	r2, r3
 8018166:	f2c0 80bb 	blt.w	80182e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801816a:	2b00      	cmp	r3, #0
 801816c:	f300 80b9 	bgt.w	80182e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8018170:	6967      	ldr	r7, [r4, #20]
 8018172:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018174:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8018178:	443b      	add	r3, r7
 801817a:	461f      	mov	r7, r3
 801817c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801817e:	1bdf      	subs	r7, r3, r7
 8018180:	4297      	cmp	r7, r2
 8018182:	bfa8      	it	ge
 8018184:	4617      	movge	r7, r2
 8018186:	2f00      	cmp	r7, #0
 8018188:	f340 813c 	ble.w	8018404 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801818c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801818e:	6829      	ldr	r1, [r5, #0]
 8018190:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018194:	f9bb 3000 	ldrsh.w	r3, [fp]
 8018198:	4411      	add	r1, r2
 801819a:	4299      	cmp	r1, r3
 801819c:	6820      	ldr	r0, [r4, #0]
 801819e:	dd1a      	ble.n	80181d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80181a0:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80181a4:	4402      	add	r2, r0
 80181a6:	440b      	add	r3, r1
 80181a8:	b21b      	sxth	r3, r3
 80181aa:	429a      	cmp	r2, r3
 80181ac:	dc13      	bgt.n	80181d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80181ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80181b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181b2:	a912      	add	r1, sp, #72	; 0x48
 80181b4:	681b      	ldr	r3, [r3, #0]
 80181b6:	9206      	str	r2, [sp, #24]
 80181b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80181ba:	9500      	str	r5, [sp, #0]
 80181bc:	9205      	str	r2, [sp, #20]
 80181be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80181c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80181c2:	e9cd b203 	strd	fp, r2, [sp, #12]
 80181c6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80181c8:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80181cc:	aa49      	add	r2, sp, #292	; 0x124
 80181ce:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80181d2:	4623      	mov	r3, r4
 80181d4:	47c8      	blx	r9
 80181d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80181da:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80181de:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80181e2:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80181e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80181ea:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80181ee:	ed94 6a08 	vldr	s12, [r4, #32]
 80181f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80181f6:	edd4 6a07 	vldr	s13, [r4, #28]
 80181fa:	ee76 6a86 	vadd.f32	s13, s13, s12
 80181fe:	441a      	add	r2, r3
 8018200:	6963      	ldr	r3, [r4, #20]
 8018202:	68a1      	ldr	r1, [r4, #8]
 8018204:	3301      	adds	r3, #1
 8018206:	6163      	str	r3, [r4, #20]
 8018208:	69a3      	ldr	r3, [r4, #24]
 801820a:	6022      	str	r2, [r4, #0]
 801820c:	3b01      	subs	r3, #1
 801820e:	61a3      	str	r3, [r4, #24]
 8018210:	6923      	ldr	r3, [r4, #16]
 8018212:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018216:	440b      	add	r3, r1
 8018218:	68e1      	ldr	r1, [r4, #12]
 801821a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801821e:	428b      	cmp	r3, r1
 8018220:	edc4 6a07 	vstr	s13, [r4, #28]
 8018224:	6123      	str	r3, [r4, #16]
 8018226:	db15      	blt.n	8018254 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8018228:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801822c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018230:	edc4 6a07 	vstr	s13, [r4, #28]
 8018234:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8018238:	ee36 7a87 	vadd.f32	s14, s13, s14
 801823c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018240:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8018244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018248:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801824c:	3201      	adds	r2, #1
 801824e:	1a5b      	subs	r3, r3, r1
 8018250:	6022      	str	r2, [r4, #0]
 8018252:	6123      	str	r3, [r4, #16]
 8018254:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8018258:	e9d5 2300 	ldrd	r2, r3, [r5]
 801825c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8018260:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8018264:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018268:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801826c:	ed95 6a08 	vldr	s12, [r5, #32]
 8018270:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018274:	edd5 6a07 	vldr	s13, [r5, #28]
 8018278:	ee76 6a86 	vadd.f32	s13, s13, s12
 801827c:	441a      	add	r2, r3
 801827e:	696b      	ldr	r3, [r5, #20]
 8018280:	68a9      	ldr	r1, [r5, #8]
 8018282:	3301      	adds	r3, #1
 8018284:	616b      	str	r3, [r5, #20]
 8018286:	69ab      	ldr	r3, [r5, #24]
 8018288:	602a      	str	r2, [r5, #0]
 801828a:	3b01      	subs	r3, #1
 801828c:	61ab      	str	r3, [r5, #24]
 801828e:	692b      	ldr	r3, [r5, #16]
 8018290:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8018294:	440b      	add	r3, r1
 8018296:	68e9      	ldr	r1, [r5, #12]
 8018298:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801829c:	428b      	cmp	r3, r1
 801829e:	edc5 6a07 	vstr	s13, [r5, #28]
 80182a2:	612b      	str	r3, [r5, #16]
 80182a4:	db15      	blt.n	80182d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 80182a6:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80182aa:	ee76 6a26 	vadd.f32	s13, s12, s13
 80182ae:	edc5 6a07 	vstr	s13, [r5, #28]
 80182b2:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80182b6:	ee36 7a87 	vadd.f32	s14, s13, s14
 80182ba:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80182be:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80182c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80182c6:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80182ca:	3201      	adds	r2, #1
 80182cc:	1a5b      	subs	r3, r3, r1
 80182ce:	602a      	str	r2, [r5, #0]
 80182d0:	612b      	str	r3, [r5, #16]
 80182d2:	3f01      	subs	r7, #1
 80182d4:	e757      	b.n	8018186 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80182d6:	ad39      	add	r5, sp, #228	; 0xe4
 80182d8:	ac19      	add	r4, sp, #100	; 0x64
 80182da:	e72d      	b.n	8018138 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80182dc:	4613      	mov	r3, r2
 80182de:	e744      	b.n	801816a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80182e0:	4613      	mov	r3, r2
 80182e2:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 80182e6:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 80182ea:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 80182ee:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 80182f2:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 80182f6:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 80182fa:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 80182fe:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8018302:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8018306:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801830a:	469e      	mov	lr, r3
 801830c:	461f      	mov	r7, r3
 801830e:	f04f 0900 	mov.w	r9, #0
 8018312:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8018314:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8018318:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801831a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801831e:	960e      	str	r6, [sp, #56]	; 0x38
 8018320:	2f00      	cmp	r7, #0
 8018322:	d146      	bne.n	80183b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8018324:	449c      	add	ip, r3
 8018326:	1ad7      	subs	r7, r2, r3
 8018328:	f1b9 0f00 	cmp.w	r9, #0
 801832c:	d009      	beq.n	8018342 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801832e:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8018332:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8018336:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801833a:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801833e:	9039      	str	r0, [sp, #228]	; 0xe4
 8018340:	913d      	str	r1, [sp, #244]	; 0xf4
 8018342:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8018346:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801834a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801834e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8018352:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8018356:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801835a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801835e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8018362:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8018366:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801836a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801836e:	f04f 0800 	mov.w	r8, #0
 8018372:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8018374:	910e      	str	r1, [sp, #56]	; 0x38
 8018376:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801837a:	f1be 0f00 	cmp.w	lr, #0
 801837e:	d030      	beq.n	80183e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8018380:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8018382:	4450      	add	r0, sl
 8018384:	4431      	add	r1, r6
 8018386:	4549      	cmp	r1, r9
 8018388:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801838c:	ee37 7a04 	vadd.f32	s14, s14, s8
 8018390:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8018394:	db08      	blt.n	80183a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8018396:	ee77 7a85 	vadd.f32	s15, s15, s10
 801839a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801839e:	ee37 7a06 	vadd.f32	s14, s14, s12
 80183a2:	3001      	adds	r0, #1
 80183a4:	eba1 0109 	sub.w	r1, r1, r9
 80183a8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80183ac:	f04f 0801 	mov.w	r8, #1
 80183b0:	e7e3      	b.n	801837a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80183b2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80183b4:	4450      	add	r0, sl
 80183b6:	4431      	add	r1, r6
 80183b8:	4541      	cmp	r1, r8
 80183ba:	ee37 7a24 	vadd.f32	s14, s14, s9
 80183be:	ee77 7a84 	vadd.f32	s15, s15, s8
 80183c2:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80183c6:	db08      	blt.n	80183da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80183c8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80183cc:	ee37 7a25 	vadd.f32	s14, s14, s11
 80183d0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80183d4:	3001      	adds	r0, #1
 80183d6:	eba1 0108 	sub.w	r1, r1, r8
 80183da:	3f01      	subs	r7, #1
 80183dc:	f04f 0901 	mov.w	r9, #1
 80183e0:	e79e      	b.n	8018320 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80183e2:	449c      	add	ip, r3
 80183e4:	1aff      	subs	r7, r7, r3
 80183e6:	f1b8 0f00 	cmp.w	r8, #0
 80183ea:	d009      	beq.n	8018400 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80183ec:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80183f0:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80183f4:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80183f8:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80183fc:	9019      	str	r0, [sp, #100]	; 0x64
 80183fe:	911d      	str	r1, [sp, #116]	; 0x74
 8018400:	1ad2      	subs	r2, r2, r3
 8018402:	e6b5      	b.n	8018170 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018404:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	b923      	cbnz	r3, 8018414 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801840a:	4b04      	ldr	r3, [pc, #16]	; (801841c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801840c:	6818      	ldr	r0, [r3, #0]
 801840e:	6803      	ldr	r3, [r0, #0]
 8018410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018412:	4798      	blx	r3
 8018414:	b05b      	add	sp, #364	; 0x16c
 8018416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801841a:	bf00      	nop
 801841c:	201979e8 	.word	0x201979e8

08018420 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8018420:	2b03      	cmp	r3, #3
 8018422:	d818      	bhi.n	8018456 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8018424:	e8df f003 	tbb	[pc, r3]
 8018428:	130d0602 	.word	0x130d0602
 801842c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018430:	1850      	adds	r0, r2, r1
 8018432:	4770      	bx	lr
 8018434:	8803      	ldrh	r3, [r0, #0]
 8018436:	8880      	ldrh	r0, [r0, #4]
 8018438:	4418      	add	r0, r3
 801843a:	b200      	sxth	r0, r0
 801843c:	1a80      	subs	r0, r0, r2
 801843e:	3801      	subs	r0, #1
 8018440:	4770      	bx	lr
 8018442:	8803      	ldrh	r3, [r0, #0]
 8018444:	8880      	ldrh	r0, [r0, #4]
 8018446:	4418      	add	r0, r3
 8018448:	b200      	sxth	r0, r0
 801844a:	1a40      	subs	r0, r0, r1
 801844c:	e7f7      	b.n	801843e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801844e:	f9b0 0000 	ldrsh.w	r0, [r0]
 8018452:	4410      	add	r0, r2
 8018454:	4770      	bx	lr
 8018456:	2000      	movs	r0, #0
 8018458:	4770      	bx	lr

0801845a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801845a:	2b03      	cmp	r3, #3
 801845c:	d817      	bhi.n	801848e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801845e:	e8df f003 	tbb	[pc, r3]
 8018462:	0602      	.short	0x0602
 8018464:	1009      	.short	0x1009
 8018466:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801846a:	1850      	adds	r0, r2, r1
 801846c:	4770      	bx	lr
 801846e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8018472:	e7fa      	b.n	801846a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8018474:	8843      	ldrh	r3, [r0, #2]
 8018476:	88c0      	ldrh	r0, [r0, #6]
 8018478:	4418      	add	r0, r3
 801847a:	b200      	sxth	r0, r0
 801847c:	1a80      	subs	r0, r0, r2
 801847e:	3801      	subs	r0, #1
 8018480:	4770      	bx	lr
 8018482:	8843      	ldrh	r3, [r0, #2]
 8018484:	88c0      	ldrh	r0, [r0, #6]
 8018486:	4418      	add	r0, r3
 8018488:	b200      	sxth	r0, r0
 801848a:	1a40      	subs	r0, r0, r1
 801848c:	e7f7      	b.n	801847e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801848e:	2000      	movs	r0, #0
 8018490:	4770      	bx	lr
	...

08018494 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8018494:	2200      	movs	r2, #0
 8018496:	4b01      	ldr	r3, [pc, #4]	; (801849c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8018498:	601a      	str	r2, [r3, #0]
 801849a:	4770      	bx	lr
 801849c:	201979f0 	.word	0x201979f0

080184a0 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80184a0:	4603      	mov	r3, r0
 80184a2:	b1c8      	cbz	r0, 80184d8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80184a4:	0c02      	lsrs	r2, r0, #16
 80184a6:	0412      	lsls	r2, r2, #16
 80184a8:	b9a2      	cbnz	r2, 80184d4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80184aa:	0403      	lsls	r3, r0, #16
 80184ac:	2010      	movs	r0, #16
 80184ae:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80184b2:	bf04      	itt	eq
 80184b4:	021b      	lsleq	r3, r3, #8
 80184b6:	3008      	addeq	r0, #8
 80184b8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80184bc:	bf04      	itt	eq
 80184be:	011b      	lsleq	r3, r3, #4
 80184c0:	3004      	addeq	r0, #4
 80184c2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80184c6:	bf04      	itt	eq
 80184c8:	009b      	lsleq	r3, r3, #2
 80184ca:	3002      	addeq	r0, #2
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	db04      	blt.n	80184da <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 80184d0:	3001      	adds	r0, #1
 80184d2:	4770      	bx	lr
 80184d4:	2000      	movs	r0, #0
 80184d6:	e7ea      	b.n	80184ae <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80184d8:	2020      	movs	r0, #32
 80184da:	4770      	bx	lr

080184dc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 80184dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184e0:	b087      	sub	sp, #28
 80184e2:	4681      	mov	r9, r0
 80184e4:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 80184e8:	4610      	mov	r0, r2
 80184ea:	4698      	mov	r8, r3
 80184ec:	460d      	mov	r5, r1
 80184ee:	b981      	cbnz	r1, 8018512 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 80184f0:	b14b      	cbz	r3, 8018506 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 80184f2:	460b      	mov	r3, r1
 80184f4:	e9cd 4700 	strd	r4, r7, [sp]
 80184f8:	464a      	mov	r2, r9
 80184fa:	4641      	mov	r1, r8
 80184fc:	f7ff ffee 	bl	80184dc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018500:	b007      	add	sp, #28
 8018502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018506:	f04f 33ff 	mov.w	r3, #4294967295
 801850a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801850e:	603b      	str	r3, [r7, #0]
 8018510:	e7f6      	b.n	8018500 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8018512:	fa32 fa01 	lsrs.w	sl, r2, r1
 8018516:	d107      	bne.n	8018528 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8018518:	fb09 f602 	mul.w	r6, r9, r2
 801851c:	fbb6 f0f4 	udiv	r0, r6, r4
 8018520:	fb04 6610 	mls	r6, r4, r0, r6
 8018524:	603e      	str	r6, [r7, #0]
 8018526:	e7eb      	b.n	8018500 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8018528:	fa09 fb01 	lsl.w	fp, r9, r1
 801852c:	fbbb f3f4 	udiv	r3, fp, r4
 8018530:	2601      	movs	r6, #1
 8018532:	9302      	str	r3, [sp, #8]
 8018534:	408e      	lsls	r6, r1
 8018536:	fb0a f303 	mul.w	r3, sl, r3
 801853a:	3e01      	subs	r6, #1
 801853c:	4016      	ands	r6, r2
 801853e:	4630      	mov	r0, r6
 8018540:	9303      	str	r3, [sp, #12]
 8018542:	f7ff ffad 	bl	80184a0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8018546:	464a      	mov	r2, r9
 8018548:	460b      	mov	r3, r1
 801854a:	e9cd 4700 	strd	r4, r7, [sp]
 801854e:	4601      	mov	r1, r0
 8018550:	4630      	mov	r0, r6
 8018552:	f7ff ffc3 	bl	80184dc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018556:	9b02      	ldr	r3, [sp, #8]
 8018558:	4606      	mov	r6, r0
 801855a:	fb04 bb13 	mls	fp, r4, r3, fp
 801855e:	4658      	mov	r0, fp
 8018560:	eb05 0108 	add.w	r1, r5, r8
 8018564:	f7ff ff9c 	bl	80184a0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8018568:	ab05      	add	r3, sp, #20
 801856a:	e9cd 4300 	strd	r4, r3, [sp]
 801856e:	465a      	mov	r2, fp
 8018570:	4603      	mov	r3, r0
 8018572:	4650      	mov	r0, sl
 8018574:	f7ff ffb2 	bl	80184dc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018578:	6839      	ldr	r1, [r7, #0]
 801857a:	9a05      	ldr	r2, [sp, #20]
 801857c:	9b03      	ldr	r3, [sp, #12]
 801857e:	4411      	add	r1, r2
 8018580:	fbb1 f2f4 	udiv	r2, r1, r4
 8018584:	fb04 1412 	mls	r4, r4, r2, r1
 8018588:	18d3      	adds	r3, r2, r3
 801858a:	441e      	add	r6, r3
 801858c:	4430      	add	r0, r6
 801858e:	603c      	str	r4, [r7, #0]
 8018590:	e7b6      	b.n	8018500 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08018592 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8018592:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018596:	b085      	sub	sp, #20
 8018598:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801859a:	f1b0 0900 	subs.w	r9, r0, #0
 801859e:	461d      	mov	r5, r3
 80185a0:	bfbf      	itttt	lt
 80185a2:	6823      	ldrlt	r3, [r4, #0]
 80185a4:	f1c9 0900 	rsblt	r9, r9, #0
 80185a8:	425b      	neglt	r3, r3
 80185aa:	6023      	strlt	r3, [r4, #0]
 80185ac:	bfb4      	ite	lt
 80185ae:	f04f 36ff 	movlt.w	r6, #4294967295
 80185b2:	2601      	movge	r6, #1
 80185b4:	2a00      	cmp	r2, #0
 80185b6:	4617      	mov	r7, r2
 80185b8:	da04      	bge.n	80185c4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80185ba:	6823      	ldr	r3, [r4, #0]
 80185bc:	4257      	negs	r7, r2
 80185be:	425b      	negs	r3, r3
 80185c0:	4276      	negs	r6, r6
 80185c2:	6023      	str	r3, [r4, #0]
 80185c4:	2d00      	cmp	r5, #0
 80185c6:	4638      	mov	r0, r7
 80185c8:	bfba      	itte	lt
 80185ca:	426d      	neglt	r5, r5
 80185cc:	f04f 38ff 	movlt.w	r8, #4294967295
 80185d0:	f04f 0801 	movge.w	r8, #1
 80185d4:	f7ff ff64 	bl	80184a0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80185d8:	ab03      	add	r3, sp, #12
 80185da:	e9cd 5300 	strd	r5, r3, [sp]
 80185de:	463a      	mov	r2, r7
 80185e0:	4603      	mov	r3, r0
 80185e2:	4648      	mov	r0, r9
 80185e4:	f7ff ff7a 	bl	80184dc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80185e8:	6823      	ldr	r3, [r4, #0]
 80185ea:	9a03      	ldr	r2, [sp, #12]
 80185ec:	4546      	cmp	r6, r8
 80185ee:	441a      	add	r2, r3
 80185f0:	fb92 f3f5 	sdiv	r3, r2, r5
 80185f4:	4418      	add	r0, r3
 80185f6:	fb05 2313 	mls	r3, r5, r3, r2
 80185fa:	bf18      	it	ne
 80185fc:	4240      	negne	r0, r0
 80185fe:	1c72      	adds	r2, r6, #1
 8018600:	6023      	str	r3, [r4, #0]
 8018602:	d105      	bne.n	8018610 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8018604:	2b00      	cmp	r3, #0
 8018606:	f1c3 0200 	rsb	r2, r3, #0
 801860a:	db0b      	blt.n	8018624 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801860c:	6022      	str	r2, [r4, #0]
 801860e:	e006      	b.n	801861e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018610:	2e01      	cmp	r6, #1
 8018612:	d104      	bne.n	801861e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018614:	2b00      	cmp	r3, #0
 8018616:	da02      	bge.n	801861e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018618:	442b      	add	r3, r5
 801861a:	3801      	subs	r0, #1
 801861c:	6023      	str	r3, [r4, #0]
 801861e:	b005      	add	sp, #20
 8018620:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018624:	3801      	subs	r0, #1
 8018626:	1b52      	subs	r2, r2, r5
 8018628:	e7f0      	b.n	801860c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801862c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801862c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8018630:	4c1c      	ldr	r4, [pc, #112]	; (80186a4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8018632:	4605      	mov	r5, r0
 8018634:	69a3      	ldr	r3, [r4, #24]
 8018636:	6807      	ldr	r7, [r0, #0]
 8018638:	b92b      	cbnz	r3, 8018646 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801863a:	6840      	ldr	r0, [r0, #4]
 801863c:	e9c5 7000 	strd	r7, r0, [r5]
 8018640:	b004      	add	sp, #16
 8018642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018646:	f04f 0802 	mov.w	r8, #2
 801864a:	fb93 f1f8 	sdiv	r1, r3, r8
 801864e:	68a2      	ldr	r2, [r4, #8]
 8018650:	ae04      	add	r6, sp, #16
 8018652:	440a      	add	r2, r1
 8018654:	f846 2d04 	str.w	r2, [r6, #-4]!
 8018658:	69e1      	ldr	r1, [r4, #28]
 801865a:	463a      	mov	r2, r7
 801865c:	9600      	str	r6, [sp, #0]
 801865e:	6820      	ldr	r0, [r4, #0]
 8018660:	f7ff ff97 	bl	8018592 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018664:	69a3      	ldr	r3, [r4, #24]
 8018666:	4607      	mov	r7, r0
 8018668:	686a      	ldr	r2, [r5, #4]
 801866a:	6a21      	ldr	r1, [r4, #32]
 801866c:	9600      	str	r6, [sp, #0]
 801866e:	6860      	ldr	r0, [r4, #4]
 8018670:	f7ff ff8f 	bl	8018592 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018674:	69a3      	ldr	r3, [r4, #24]
 8018676:	6962      	ldr	r2, [r4, #20]
 8018678:	fb93 f8f8 	sdiv	r8, r3, r8
 801867c:	4442      	add	r2, r8
 801867e:	9203      	str	r2, [sp, #12]
 8018680:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018682:	682a      	ldr	r2, [r5, #0]
 8018684:	4407      	add	r7, r0
 8018686:	9600      	str	r6, [sp, #0]
 8018688:	68e0      	ldr	r0, [r4, #12]
 801868a:	f7ff ff82 	bl	8018592 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801868e:	9600      	str	r6, [sp, #0]
 8018690:	4680      	mov	r8, r0
 8018692:	69a3      	ldr	r3, [r4, #24]
 8018694:	686a      	ldr	r2, [r5, #4]
 8018696:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8018698:	6920      	ldr	r0, [r4, #16]
 801869a:	f7ff ff7a 	bl	8018592 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801869e:	4440      	add	r0, r8
 80186a0:	e7cc      	b.n	801863c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80186a2:	bf00      	nop
 80186a4:	201979f4 	.word	0x201979f4

080186a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 80186a8:	4b07      	ldr	r3, [pc, #28]	; (80186c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 80186aa:	781b      	ldrb	r3, [r3, #0]
 80186ac:	2b01      	cmp	r3, #1
 80186ae:	d109      	bne.n	80186c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 80186b0:	f9b1 3000 	ldrsh.w	r3, [r1]
 80186b4:	f9b0 2000 	ldrsh.w	r2, [r0]
 80186b8:	8003      	strh	r3, [r0, #0]
 80186ba:	4b04      	ldr	r3, [pc, #16]	; (80186cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 80186bc:	881b      	ldrh	r3, [r3, #0]
 80186be:	3b01      	subs	r3, #1
 80186c0:	1a9b      	subs	r3, r3, r2
 80186c2:	800b      	strh	r3, [r1, #0]
 80186c4:	4770      	bx	lr
 80186c6:	bf00      	nop
 80186c8:	201979e0 	.word	0x201979e0
 80186cc:	201979dc 	.word	0x201979dc

080186d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80186d0:	b510      	push	{r4, lr}
 80186d2:	4b07      	ldr	r3, [pc, #28]	; (80186f0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80186d4:	781b      	ldrb	r3, [r3, #0]
 80186d6:	2b01      	cmp	r3, #1
 80186d8:	d108      	bne.n	80186ec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80186da:	4b06      	ldr	r3, [pc, #24]	; (80186f4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80186dc:	880c      	ldrh	r4, [r1, #0]
 80186de:	881b      	ldrh	r3, [r3, #0]
 80186e0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80186e4:	3b01      	subs	r3, #1
 80186e6:	1b1b      	subs	r3, r3, r4
 80186e8:	8003      	strh	r3, [r0, #0]
 80186ea:	800a      	strh	r2, [r1, #0]
 80186ec:	bd10      	pop	{r4, pc}
 80186ee:	bf00      	nop
 80186f0:	201979e0 	.word	0x201979e0
 80186f4:	201979dc 	.word	0x201979dc

080186f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80186f8:	b510      	push	{r4, lr}
 80186fa:	4b0a      	ldr	r3, [pc, #40]	; (8018724 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80186fc:	781b      	ldrb	r3, [r3, #0]
 80186fe:	2b01      	cmp	r3, #1
 8018700:	d10e      	bne.n	8018720 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8018702:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8018706:	8843      	ldrh	r3, [r0, #2]
 8018708:	f9b0 4000 	ldrsh.w	r4, [r0]
 801870c:	18ca      	adds	r2, r1, r3
 801870e:	4b06      	ldr	r3, [pc, #24]	; (8018728 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8018710:	8044      	strh	r4, [r0, #2]
 8018712:	881b      	ldrh	r3, [r3, #0]
 8018714:	1a9b      	subs	r3, r3, r2
 8018716:	8003      	strh	r3, [r0, #0]
 8018718:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801871c:	8081      	strh	r1, [r0, #4]
 801871e:	80c3      	strh	r3, [r0, #6]
 8018720:	bd10      	pop	{r4, pc}
 8018722:	bf00      	nop
 8018724:	201979e0 	.word	0x201979e0
 8018728:	201979dc 	.word	0x201979dc

0801872c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801872c:	4b08      	ldr	r3, [pc, #32]	; (8018750 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801872e:	781b      	ldrb	r3, [r3, #0]
 8018730:	2b01      	cmp	r3, #1
 8018732:	d10c      	bne.n	801874e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8018734:	8803      	ldrh	r3, [r0, #0]
 8018736:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801873a:	8842      	ldrh	r2, [r0, #2]
 801873c:	8002      	strh	r2, [r0, #0]
 801873e:	185a      	adds	r2, r3, r1
 8018740:	4b04      	ldr	r3, [pc, #16]	; (8018754 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8018742:	881b      	ldrh	r3, [r3, #0]
 8018744:	1a9b      	subs	r3, r3, r2
 8018746:	8043      	strh	r3, [r0, #2]
 8018748:	88c3      	ldrh	r3, [r0, #6]
 801874a:	80c1      	strh	r1, [r0, #6]
 801874c:	8083      	strh	r3, [r0, #4]
 801874e:	4770      	bx	lr
 8018750:	201979e0 	.word	0x201979e0
 8018754:	201979dc 	.word	0x201979dc

08018758 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8018758:	b510      	push	{r4, lr}
 801875a:	4b07      	ldr	r3, [pc, #28]	; (8018778 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801875c:	781b      	ldrb	r3, [r3, #0]
 801875e:	2b01      	cmp	r3, #1
 8018760:	d108      	bne.n	8018774 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8018762:	f9b1 3000 	ldrsh.w	r3, [r1]
 8018766:	f9b0 4000 	ldrsh.w	r4, [r0]
 801876a:	8003      	strh	r3, [r0, #0]
 801876c:	8893      	ldrh	r3, [r2, #4]
 801876e:	3b01      	subs	r3, #1
 8018770:	1b1b      	subs	r3, r3, r4
 8018772:	800b      	strh	r3, [r1, #0]
 8018774:	bd10      	pop	{r4, pc}
 8018776:	bf00      	nop
 8018778:	201979e0 	.word	0x201979e0

0801877c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801877c:	b510      	push	{r4, lr}
 801877e:	4b0a      	ldr	r3, [pc, #40]	; (80187a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8018780:	460a      	mov	r2, r1
 8018782:	781b      	ldrb	r3, [r3, #0]
 8018784:	2b01      	cmp	r3, #1
 8018786:	d10d      	bne.n	80187a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8018788:	8881      	ldrh	r1, [r0, #4]
 801878a:	8803      	ldrh	r3, [r0, #0]
 801878c:	440b      	add	r3, r1
 801878e:	4601      	mov	r1, r0
 8018790:	3b01      	subs	r3, #1
 8018792:	f821 3b02 	strh.w	r3, [r1], #2
 8018796:	f7ff ffdf 	bl	8018758 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801879a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801879e:	88c2      	ldrh	r2, [r0, #6]
 80187a0:	80c3      	strh	r3, [r0, #6]
 80187a2:	8082      	strh	r2, [r0, #4]
 80187a4:	bd10      	pop	{r4, pc}
 80187a6:	bf00      	nop
 80187a8:	201979e0 	.word	0x201979e0

080187ac <_ZN8touchgfx11Application13requestRedrawEv>:
 80187ac:	2100      	movs	r1, #0
 80187ae:	4b06      	ldr	r3, [pc, #24]	; (80187c8 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 80187b0:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 80187b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80187b8:	4b04      	ldr	r3, [pc, #16]	; (80187cc <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80187ba:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 80187be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80187c2:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 80187c6:	4770      	bx	lr
 80187c8:	201979dc 	.word	0x201979dc
 80187cc:	201979de 	.word	0x201979de

080187d0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80187d0:	4b03      	ldr	r3, [pc, #12]	; (80187e0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80187d2:	6818      	ldr	r0, [r3, #0]
 80187d4:	b110      	cbz	r0, 80187dc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80187d6:	6803      	ldr	r3, [r0, #0]
 80187d8:	699b      	ldr	r3, [r3, #24]
 80187da:	4718      	bx	r3
 80187dc:	4770      	bx	lr
 80187de:	bf00      	nop
 80187e0:	20197a24 	.word	0x20197a24

080187e4 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80187e4:	4770      	bx	lr
	...

080187e8 <_ZN8touchgfx11Application4drawEv>:
 80187e8:	b507      	push	{r0, r1, r2, lr}
 80187ea:	2100      	movs	r1, #0
 80187ec:	4b08      	ldr	r3, [pc, #32]	; (8018810 <_ZN8touchgfx11Application4drawEv+0x28>)
 80187ee:	9100      	str	r1, [sp, #0]
 80187f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80187f4:	4b07      	ldr	r3, [pc, #28]	; (8018814 <_ZN8touchgfx11Application4drawEv+0x2c>)
 80187f6:	f8ad 2004 	strh.w	r2, [sp, #4]
 80187fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80187fe:	4669      	mov	r1, sp
 8018800:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018804:	6803      	ldr	r3, [r0, #0]
 8018806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018808:	4798      	blx	r3
 801880a:	b003      	add	sp, #12
 801880c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018810:	201979dc 	.word	0x201979dc
 8018814:	201979de 	.word	0x201979de

08018818 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8018818:	4b03      	ldr	r3, [pc, #12]	; (8018828 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801881a:	6818      	ldr	r0, [r3, #0]
 801881c:	b110      	cbz	r0, 8018824 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801881e:	6803      	ldr	r3, [r0, #0]
 8018820:	69db      	ldr	r3, [r3, #28]
 8018822:	4718      	bx	r3
 8018824:	4770      	bx	lr
 8018826:	bf00      	nop
 8018828:	20197a24 	.word	0x20197a24

0801882c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801882c:	4b03      	ldr	r3, [pc, #12]	; (801883c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801882e:	6818      	ldr	r0, [r3, #0]
 8018830:	b110      	cbz	r0, 8018838 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8018832:	6803      	ldr	r3, [r0, #0]
 8018834:	6a1b      	ldr	r3, [r3, #32]
 8018836:	4718      	bx	r3
 8018838:	4770      	bx	lr
 801883a:	bf00      	nop
 801883c:	20197a24 	.word	0x20197a24

08018840 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8018840:	2300      	movs	r3, #0
 8018842:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 8018846:	4770      	bx	lr

08018848 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8018848:	4b03      	ldr	r3, [pc, #12]	; (8018858 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801884a:	6818      	ldr	r0, [r3, #0]
 801884c:	b110      	cbz	r0, 8018854 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801884e:	6803      	ldr	r3, [r0, #0]
 8018850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018852:	4718      	bx	r3
 8018854:	4770      	bx	lr
 8018856:	bf00      	nop
 8018858:	20197a24 	.word	0x20197a24

0801885c <_ZN8touchgfx11ApplicationD1Ev>:
 801885c:	4770      	bx	lr

0801885e <_ZN8touchgfx11ApplicationD0Ev>:
 801885e:	b510      	push	{r4, lr}
 8018860:	4604      	mov	r4, r0
 8018862:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8018866:	f010 fbfc 	bl	8029062 <_ZdlPvj>
 801886a:	4620      	mov	r0, r4
 801886c:	bd10      	pop	{r4, pc}

0801886e <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801886e:	b510      	push	{r4, lr}
 8018870:	f9b1 4000 	ldrsh.w	r4, [r1]
 8018874:	888a      	ldrh	r2, [r1, #4]
 8018876:	f9b0 3000 	ldrsh.w	r3, [r0]
 801887a:	4422      	add	r2, r4
 801887c:	b212      	sxth	r2, r2
 801887e:	4293      	cmp	r3, r2
 8018880:	da15      	bge.n	80188ae <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018882:	8882      	ldrh	r2, [r0, #4]
 8018884:	4413      	add	r3, r2
 8018886:	b21b      	sxth	r3, r3
 8018888:	429c      	cmp	r4, r3
 801888a:	da10      	bge.n	80188ae <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801888c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8018890:	88c9      	ldrh	r1, [r1, #6]
 8018892:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8018896:	4419      	add	r1, r3
 8018898:	b209      	sxth	r1, r1
 801889a:	428a      	cmp	r2, r1
 801889c:	da07      	bge.n	80188ae <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801889e:	88c0      	ldrh	r0, [r0, #6]
 80188a0:	4410      	add	r0, r2
 80188a2:	b200      	sxth	r0, r0
 80188a4:	4283      	cmp	r3, r0
 80188a6:	bfac      	ite	ge
 80188a8:	2000      	movge	r0, #0
 80188aa:	2001      	movlt	r0, #1
 80188ac:	bd10      	pop	{r4, pc}
 80188ae:	2000      	movs	r0, #0
 80188b0:	e7fc      	b.n	80188ac <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080188b2 <_ZN8touchgfx4Rect10restrictToEss>:
 80188b2:	f9b0 3000 	ldrsh.w	r3, [r0]
 80188b6:	b510      	push	{r4, lr}
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	da04      	bge.n	80188c6 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 80188bc:	8884      	ldrh	r4, [r0, #4]
 80188be:	4423      	add	r3, r4
 80188c0:	8083      	strh	r3, [r0, #4]
 80188c2:	2300      	movs	r3, #0
 80188c4:	8003      	strh	r3, [r0, #0]
 80188c6:	f9b0 4000 	ldrsh.w	r4, [r0]
 80188ca:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80188ce:	1b09      	subs	r1, r1, r4
 80188d0:	428b      	cmp	r3, r1
 80188d2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80188d6:	bfc8      	it	gt
 80188d8:	8081      	strhgt	r1, [r0, #4]
 80188da:	2b00      	cmp	r3, #0
 80188dc:	da04      	bge.n	80188e8 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 80188de:	88c1      	ldrh	r1, [r0, #6]
 80188e0:	440b      	add	r3, r1
 80188e2:	80c3      	strh	r3, [r0, #6]
 80188e4:	2300      	movs	r3, #0
 80188e6:	8043      	strh	r3, [r0, #2]
 80188e8:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80188ec:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80188f0:	1a52      	subs	r2, r2, r1
 80188f2:	4293      	cmp	r3, r2
 80188f4:	bfc8      	it	gt
 80188f6:	80c2      	strhgt	r2, [r0, #6]
 80188f8:	bd10      	pop	{r4, pc}
	...

080188fc <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80188fc:	b510      	push	{r4, lr}
 80188fe:	460c      	mov	r4, r1
 8018900:	4b0f      	ldr	r3, [pc, #60]	; (8018940 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8018902:	4620      	mov	r0, r4
 8018904:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018908:	4b0e      	ldr	r3, [pc, #56]	; (8018944 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801890a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801890e:	f7ff ffd0 	bl	80188b2 <_ZN8touchgfx4Rect10restrictToEss>
 8018912:	4b0d      	ldr	r3, [pc, #52]	; (8018948 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8018914:	6818      	ldr	r0, [r3, #0]
 8018916:	b190      	cbz	r0, 801893e <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8018918:	6803      	ldr	r3, [r0, #0]
 801891a:	4621      	mov	r1, r4
 801891c:	689b      	ldr	r3, [r3, #8]
 801891e:	4798      	blx	r3
 8018920:	4b0a      	ldr	r3, [pc, #40]	; (801894c <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8018922:	6818      	ldr	r0, [r3, #0]
 8018924:	b118      	cbz	r0, 801892e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8018926:	6803      	ldr	r3, [r0, #0]
 8018928:	4621      	mov	r1, r4
 801892a:	689b      	ldr	r3, [r3, #8]
 801892c:	4798      	blx	r3
 801892e:	4b08      	ldr	r3, [pc, #32]	; (8018950 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8018930:	4621      	mov	r1, r4
 8018932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018936:	6818      	ldr	r0, [r3, #0]
 8018938:	6803      	ldr	r3, [r0, #0]
 801893a:	69db      	ldr	r3, [r3, #28]
 801893c:	4718      	bx	r3
 801893e:	bd10      	pop	{r4, pc}
 8018940:	201979de 	.word	0x201979de
 8018944:	201979dc 	.word	0x201979dc
 8018948:	20197a24 	.word	0x20197a24
 801894c:	20197a20 	.word	0x20197a20
 8018950:	201979e8 	.word	0x201979e8

08018954 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8018954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018956:	4606      	mov	r6, r0
 8018958:	4608      	mov	r0, r1
 801895a:	460f      	mov	r7, r1
 801895c:	f7fe f823 	bl	80169a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018960:	b9e8      	cbnz	r0, 801899e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8018962:	f9b7 5000 	ldrsh.w	r5, [r7]
 8018966:	f9b6 4000 	ldrsh.w	r4, [r6]
 801896a:	42a5      	cmp	r5, r4
 801896c:	db17      	blt.n	801899e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801896e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8018972:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8018976:	429a      	cmp	r2, r3
 8018978:	db11      	blt.n	801899e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801897a:	88b9      	ldrh	r1, [r7, #4]
 801897c:	440d      	add	r5, r1
 801897e:	88b1      	ldrh	r1, [r6, #4]
 8018980:	b22d      	sxth	r5, r5
 8018982:	440c      	add	r4, r1
 8018984:	b224      	sxth	r4, r4
 8018986:	42a5      	cmp	r5, r4
 8018988:	dc09      	bgt.n	801899e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801898a:	88f8      	ldrh	r0, [r7, #6]
 801898c:	4410      	add	r0, r2
 801898e:	88f2      	ldrh	r2, [r6, #6]
 8018990:	b200      	sxth	r0, r0
 8018992:	4413      	add	r3, r2
 8018994:	b21b      	sxth	r3, r3
 8018996:	4298      	cmp	r0, r3
 8018998:	bfcc      	ite	gt
 801899a:	2000      	movgt	r0, #0
 801899c:	2001      	movle	r0, #1
 801899e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080189a0 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80189a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189a2:	4604      	mov	r4, r0
 80189a4:	4608      	mov	r0, r1
 80189a6:	460d      	mov	r5, r1
 80189a8:	f7fd fffd 	bl	80169a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80189ac:	b978      	cbnz	r0, 80189ce <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 80189ae:	4620      	mov	r0, r4
 80189b0:	f7fd fff9 	bl	80169a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80189b4:	f9b5 6000 	ldrsh.w	r6, [r5]
 80189b8:	b150      	cbz	r0, 80189d0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 80189ba:	8026      	strh	r6, [r4, #0]
 80189bc:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80189c0:	8063      	strh	r3, [r4, #2]
 80189c2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80189c6:	80a3      	strh	r3, [r4, #4]
 80189c8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80189cc:	80e3      	strh	r3, [r4, #6]
 80189ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80189d0:	f9b4 1000 	ldrsh.w	r1, [r4]
 80189d4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80189d8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80189dc:	42b1      	cmp	r1, r6
 80189de:	460f      	mov	r7, r1
 80189e0:	bfa8      	it	ge
 80189e2:	4637      	movge	r7, r6
 80189e4:	4293      	cmp	r3, r2
 80189e6:	4618      	mov	r0, r3
 80189e8:	bfa8      	it	ge
 80189ea:	4610      	movge	r0, r2
 80189ec:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80189f0:	88ed      	ldrh	r5, [r5, #6]
 80189f2:	4466      	add	r6, ip
 80189f4:	442a      	add	r2, r5
 80189f6:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80189fa:	88e5      	ldrh	r5, [r4, #6]
 80189fc:	4461      	add	r1, ip
 80189fe:	442b      	add	r3, r5
 8018a00:	b236      	sxth	r6, r6
 8018a02:	b209      	sxth	r1, r1
 8018a04:	b212      	sxth	r2, r2
 8018a06:	b21b      	sxth	r3, r3
 8018a08:	428e      	cmp	r6, r1
 8018a0a:	bfac      	ite	ge
 8018a0c:	ebc7 0106 	rsbge	r1, r7, r6
 8018a10:	ebc7 0101 	rsblt	r1, r7, r1
 8018a14:	429a      	cmp	r2, r3
 8018a16:	bfac      	ite	ge
 8018a18:	ebc0 0202 	rsbge	r2, r0, r2
 8018a1c:	ebc0 0203 	rsblt	r2, r0, r3
 8018a20:	8027      	strh	r7, [r4, #0]
 8018a22:	8060      	strh	r0, [r4, #2]
 8018a24:	80a1      	strh	r1, [r4, #4]
 8018a26:	80e2      	strh	r2, [r4, #6]
 8018a28:	e7d1      	b.n	80189ce <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08018a2c <_ZN8touchgfx11Application11getInstanceEv>:
 8018a2c:	4b01      	ldr	r3, [pc, #4]	; (8018a34 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8018a2e:	6818      	ldr	r0, [r3, #0]
 8018a30:	4770      	bx	lr
 8018a32:	bf00      	nop
 8018a34:	20197a34 	.word	0x20197a34

08018a38 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8018a38:	2300      	movs	r3, #0
 8018a3a:	b510      	push	{r4, lr}
 8018a3c:	4604      	mov	r4, r0
 8018a3e:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 8018a42:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8018a46:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8018a4a:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8018a4e:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 8018a52:	429a      	cmp	r2, r3
 8018a54:	d90e      	bls.n	8018a74 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8018a56:	18e2      	adds	r2, r4, r3
 8018a58:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 8018a5c:	b122      	cbz	r2, 8018a68 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8018a5e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8018a62:	6803      	ldr	r3, [r0, #0]
 8018a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018a66:	4798      	blx	r3
 8018a68:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8018a6c:	3301      	adds	r3, #1
 8018a6e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8018a72:	e7ea      	b.n	8018a4a <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8018a74:	bd10      	pop	{r4, pc}

08018a76 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8018a76:	2300      	movs	r3, #0
 8018a78:	f100 0284 	add.w	r2, r0, #132	; 0x84
 8018a7c:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8018a80:	30a4      	adds	r0, #164	; 0xa4
 8018a82:	f802 3b01 	strb.w	r3, [r2], #1
 8018a86:	4282      	cmp	r2, r0
 8018a88:	d1fb      	bne.n	8018a82 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8018a8a:	4770      	bx	lr

08018a8c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8018a8c:	b570      	push	{r4, r5, r6, lr}
 8018a8e:	4c0b      	ldr	r4, [pc, #44]	; (8018abc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8018a90:	4605      	mov	r5, r0
 8018a92:	6820      	ldr	r0, [r4, #0]
 8018a94:	460e      	mov	r6, r1
 8018a96:	b110      	cbz	r0, 8018a9e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8018a98:	6803      	ldr	r3, [r0, #0]
 8018a9a:	695b      	ldr	r3, [r3, #20]
 8018a9c:	4798      	blx	r3
 8018a9e:	1d28      	adds	r0, r5, #4
 8018aa0:	f7ff ffe9 	bl	8018a76 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8018aa4:	6026      	str	r6, [r4, #0]
 8018aa6:	6833      	ldr	r3, [r6, #0]
 8018aa8:	4630      	mov	r0, r6
 8018aaa:	68db      	ldr	r3, [r3, #12]
 8018aac:	4798      	blx	r3
 8018aae:	682b      	ldr	r3, [r5, #0]
 8018ab0:	4628      	mov	r0, r5
 8018ab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018ab8:	4718      	bx	r3
 8018aba:	bf00      	nop
 8018abc:	20197a24 	.word	0x20197a24

08018ac0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8018ac0:	2300      	movs	r3, #0
 8018ac2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018ac4:	461a      	mov	r2, r3
 8018ac6:	461c      	mov	r4, r3
 8018ac8:	461d      	mov	r5, r3
 8018aca:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 8018ace:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 8018ad2:	459c      	cmp	ip, r3
 8018ad4:	dd1a      	ble.n	8018b0c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8018ad6:	18c6      	adds	r6, r0, r3
 8018ad8:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 8018adc:	b16e      	cbz	r6, 8018afa <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8018ade:	429a      	cmp	r2, r3
 8018ae0:	d008      	beq.n	8018af4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8018ae2:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8018ae6:	fa1f fe82 	uxth.w	lr, r2
 8018aea:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8018aee:	1887      	adds	r7, r0, r2
 8018af0:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 8018af4:	3201      	adds	r2, #1
 8018af6:	3301      	adds	r3, #1
 8018af8:	e7eb      	b.n	8018ad2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8018afa:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 8018afe:	4299      	cmp	r1, r3
 8018b00:	bfa8      	it	ge
 8018b02:	3501      	addge	r5, #1
 8018b04:	429e      	cmp	r6, r3
 8018b06:	bfc8      	it	gt
 8018b08:	3401      	addgt	r4, #1
 8018b0a:	e7f4      	b.n	8018af6 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8018b0c:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 8018b10:	1b49      	subs	r1, r1, r5
 8018b12:	1b1b      	subs	r3, r3, r4
 8018b14:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 8018b18:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8018b1c:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8018b20:	4293      	cmp	r3, r2
 8018b22:	dd03      	ble.n	8018b2c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8018b24:	3b01      	subs	r3, #1
 8018b26:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8018b2a:	e7f7      	b.n	8018b1c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8018b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08018b30 <_ZN8touchgfx11Application15handleTickEventEv>:
 8018b30:	b570      	push	{r4, r5, r6, lr}
 8018b32:	4d16      	ldr	r5, [pc, #88]	; (8018b8c <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8018b34:	4604      	mov	r4, r0
 8018b36:	6828      	ldr	r0, [r5, #0]
 8018b38:	b140      	cbz	r0, 8018b4c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8018b3a:	7a03      	ldrb	r3, [r0, #8]
 8018b3c:	b933      	cbnz	r3, 8018b4c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8018b3e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8018b42:	6803      	ldr	r3, [r0, #0]
 8018b44:	689b      	ldr	r3, [r3, #8]
 8018b46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b4a:	4718      	bx	r3
 8018b4c:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 8018b50:	4e0f      	ldr	r6, [pc, #60]	; (8018b90 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8018b52:	b973      	cbnz	r3, 8018b72 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8018b54:	b168      	cbz	r0, 8018b72 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8018b56:	7a03      	ldrb	r3, [r0, #8]
 8018b58:	b15b      	cbz	r3, 8018b72 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8018b5a:	6830      	ldr	r0, [r6, #0]
 8018b5c:	b110      	cbz	r0, 8018b64 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8018b5e:	6803      	ldr	r3, [r0, #0]
 8018b60:	691b      	ldr	r3, [r3, #16]
 8018b62:	4798      	blx	r3
 8018b64:	6828      	ldr	r0, [r5, #0]
 8018b66:	6803      	ldr	r3, [r0, #0]
 8018b68:	68db      	ldr	r3, [r3, #12]
 8018b6a:	4798      	blx	r3
 8018b6c:	2301      	movs	r3, #1
 8018b6e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8018b72:	3404      	adds	r4, #4
 8018b74:	4620      	mov	r0, r4
 8018b76:	f7ff ff5f 	bl	8018a38 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8018b7a:	4620      	mov	r0, r4
 8018b7c:	f7ff ffa0 	bl	8018ac0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8018b80:	6830      	ldr	r0, [r6, #0]
 8018b82:	b110      	cbz	r0, 8018b8a <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8018b84:	6803      	ldr	r3, [r0, #0]
 8018b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b88:	e7dd      	b.n	8018b46 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8018b8a:	bd70      	pop	{r4, r5, r6, pc}
 8018b8c:	20197a28 	.word	0x20197a28
 8018b90:	20197a24 	.word	0x20197a24

08018b94 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8018b94:	4603      	mov	r3, r0
 8018b96:	2200      	movs	r2, #0
 8018b98:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8018b9c:	801a      	strh	r2, [r3, #0]
 8018b9e:	805a      	strh	r2, [r3, #2]
 8018ba0:	809a      	strh	r2, [r3, #4]
 8018ba2:	80da      	strh	r2, [r3, #6]
 8018ba4:	3308      	adds	r3, #8
 8018ba6:	428b      	cmp	r3, r1
 8018ba8:	d1f8      	bne.n	8018b9c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8018baa:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8018bae:	4770      	bx	lr

08018bb0 <_ZN8touchgfx11ApplicationC1Ev>:
 8018bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018bb2:	4606      	mov	r6, r0
 8018bb4:	4604      	mov	r4, r0
 8018bb6:	2500      	movs	r5, #0
 8018bb8:	4b1b      	ldr	r3, [pc, #108]	; (8018c28 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8018bba:	22a8      	movs	r2, #168	; 0xa8
 8018bbc:	f846 3b04 	str.w	r3, [r6], #4
 8018bc0:	2100      	movs	r1, #0
 8018bc2:	4630      	mov	r0, r6
 8018bc4:	f010 faf8 	bl	80291b8 <memset>
 8018bc8:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 8018bcc:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8018bd0:	f7ff ffe0 	bl	8018b94 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018bd4:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8018bd8:	f7ff ffdc 	bl	8018b94 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018bdc:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8018be0:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8018be4:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 8018be8:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 8018bec:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 8018bf0:	490e      	ldr	r1, [pc, #56]	; (8018c2c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8018bf2:	480f      	ldr	r0, [pc, #60]	; (8018c30 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8018bf4:	f002 fc86 	bl	801b504 <CRC_Lock>
 8018bf8:	4f0e      	ldr	r7, [pc, #56]	; (8018c34 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8018bfa:	4b0f      	ldr	r3, [pc, #60]	; (8018c38 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8018bfc:	b158      	cbz	r0, 8018c16 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8018bfe:	801d      	strh	r5, [r3, #0]
 8018c00:	2300      	movs	r3, #0
 8018c02:	4a0e      	ldr	r2, [pc, #56]	; (8018c3c <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8018c04:	4630      	mov	r0, r6
 8018c06:	6013      	str	r3, [r2, #0]
 8018c08:	4a0d      	ldr	r2, [pc, #52]	; (8018c40 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8018c0a:	603b      	str	r3, [r7, #0]
 8018c0c:	6013      	str	r3, [r2, #0]
 8018c0e:	f7ff ff32 	bl	8018a76 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8018c12:	4620      	mov	r0, r4
 8018c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018c1a:	2002      	movs	r0, #2
 8018c1c:	801a      	strh	r2, [r3, #0]
 8018c1e:	6038      	str	r0, [r7, #0]
 8018c20:	f001 fa28 	bl	801a074 <_ZN8touchgfx6Screen4drawEv>
 8018c24:	e7ec      	b.n	8018c00 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8018c26:	bf00      	nop
 8018c28:	0802ba5c 	.word	0x0802ba5c
 8018c2c:	b5e8b5cd 	.word	0xb5e8b5cd
 8018c30:	f407a5c2 	.word	0xf407a5c2
 8018c34:	20197a24 	.word	0x20197a24
 8018c38:	20000058 	.word	0x20000058
 8018c3c:	20197a34 	.word	0x20197a34
 8018c40:	20197a28 	.word	0x20197a28

08018c44 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8018c44:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8018c48:	b510      	push	{r4, lr}
 8018c4a:	3b01      	subs	r3, #1
 8018c4c:	b29b      	uxth	r3, r3
 8018c4e:	428b      	cmp	r3, r1
 8018c50:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8018c54:	d908      	bls.n	8018c68 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8018c56:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8018c5a:	681a      	ldr	r2, [r3, #0]
 8018c5c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8018c60:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8018c64:	685a      	ldr	r2, [r3, #4]
 8018c66:	6062      	str	r2, [r4, #4]
 8018c68:	bd10      	pop	{r4, pc}
	...

08018c6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8018c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c70:	4b8f      	ldr	r3, [pc, #572]	; (8018eb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8018c72:	b08f      	sub	sp, #60	; 0x3c
 8018c74:	ac0a      	add	r4, sp, #40	; 0x28
 8018c76:	e884 0006 	stmia.w	r4, {r1, r2}
 8018c7a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018c7e:	4b8d      	ldr	r3, [pc, #564]	; (8018eb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8018c80:	4683      	mov	fp, r0
 8018c82:	f9b3 1000 	ldrsh.w	r1, [r3]
 8018c86:	4620      	mov	r0, r4
 8018c88:	f7ff fe13 	bl	80188b2 <_ZN8touchgfx4Rect10restrictToEss>
 8018c8c:	4620      	mov	r0, r4
 8018c8e:	f7fd fe8a 	bl	80169a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018c92:	2800      	cmp	r0, #0
 8018c94:	d16a      	bne.n	8018d6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8018c96:	9403      	str	r4, [sp, #12]
 8018c98:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 8018c9c:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8018ca0:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8018ca4:	35a4      	adds	r5, #164	; 0xa4
 8018ca6:	9301      	str	r3, [sp, #4]
 8018ca8:	b15c      	cbz	r4, 8018cc2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8018caa:	4629      	mov	r1, r5
 8018cac:	9803      	ldr	r0, [sp, #12]
 8018cae:	f7ff fe51 	bl	8018954 <_ZNK8touchgfx4Rect8includesERKS0_>
 8018cb2:	3c01      	subs	r4, #1
 8018cb4:	b118      	cbz	r0, 8018cbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8018cb6:	b2a1      	uxth	r1, r4
 8018cb8:	9801      	ldr	r0, [sp, #4]
 8018cba:	f7ff ffc3 	bl	8018c44 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018cbe:	3d08      	subs	r5, #8
 8018cc0:	e7f2      	b.n	8018ca8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8018cc2:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
 8018cc6:	f108 33ff 	add.w	r3, r8, #4294967295
 8018cca:	9302      	str	r3, [sp, #8]
 8018ccc:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8018cd0:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8018cd4:	f8cd 8010 	str.w	r8, [sp, #16]
 8018cd8:	9306      	str	r3, [sp, #24]
 8018cda:	445c      	add	r4, fp
 8018cdc:	2500      	movs	r5, #0
 8018cde:	4626      	mov	r6, r4
 8018ce0:	462f      	mov	r7, r5
 8018ce2:	f8cd 8014 	str.w	r8, [sp, #20]
 8018ce6:	9b05      	ldr	r3, [sp, #20]
 8018ce8:	2b00      	cmp	r3, #0
 8018cea:	d073      	beq.n	8018dd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8018cec:	9903      	ldr	r1, [sp, #12]
 8018cee:	4630      	mov	r0, r6
 8018cf0:	f7ff fdbd 	bl	801886e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018cf4:	b350      	cbz	r0, 8018d4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8018cf6:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8018cfa:	f9b6 c000 	ldrsh.w	ip, [r6]
 8018cfe:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 8018d02:	45e6      	cmp	lr, ip
 8018d04:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8018d08:	db33      	blt.n	8018d72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8018d0a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8018d0e:	88b3      	ldrh	r3, [r6, #4]
 8018d10:	4472      	add	r2, lr
 8018d12:	4463      	add	r3, ip
 8018d14:	b212      	sxth	r2, r2
 8018d16:	b21b      	sxth	r3, r3
 8018d18:	429a      	cmp	r2, r3
 8018d1a:	dc2a      	bgt.n	8018d72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8018d1c:	88f3      	ldrh	r3, [r6, #6]
 8018d1e:	fa1f f289 	uxth.w	r2, r9
 8018d22:	4413      	add	r3, r2
 8018d24:	b29b      	uxth	r3, r3
 8018d26:	45ca      	cmp	sl, r9
 8018d28:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8018d2c:	fa0f fe83 	sxth.w	lr, r3
 8018d30:	fa1f fc8a 	uxth.w	ip, sl
 8018d34:	db0f      	blt.n	8018d56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8018d36:	eba3 030c 	sub.w	r3, r3, ip
 8018d3a:	1ac9      	subs	r1, r1, r3
 8018d3c:	b209      	sxth	r1, r1
 8018d3e:	2900      	cmp	r1, #0
 8018d40:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8018d44:	dd12      	ble.n	8018d6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8018d46:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8018d4a:	4605      	mov	r5, r0
 8018d4c:	9b05      	ldr	r3, [sp, #20]
 8018d4e:	3e08      	subs	r6, #8
 8018d50:	3b01      	subs	r3, #1
 8018d52:	9305      	str	r3, [sp, #20]
 8018d54:	e7c7      	b.n	8018ce6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8018d56:	4461      	add	r1, ip
 8018d58:	b209      	sxth	r1, r1
 8018d5a:	4571      	cmp	r1, lr
 8018d5c:	dc38      	bgt.n	8018dd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8018d5e:	eba2 020c 	sub.w	r2, r2, ip
 8018d62:	b212      	sxth	r2, r2
 8018d64:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8018d68:	2a00      	cmp	r2, #0
 8018d6a:	dcee      	bgt.n	8018d4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8018d6c:	b00f      	add	sp, #60	; 0x3c
 8018d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d72:	45ca      	cmp	sl, r9
 8018d74:	db2c      	blt.n	8018dd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8018d76:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8018d7a:	449a      	add	sl, r3
 8018d7c:	88f3      	ldrh	r3, [r6, #6]
 8018d7e:	fa0f fa8a 	sxth.w	sl, sl
 8018d82:	4499      	add	r9, r3
 8018d84:	fa0f f989 	sxth.w	r9, r9
 8018d88:	45ca      	cmp	sl, r9
 8018d8a:	dc21      	bgt.n	8018dd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8018d8c:	88b3      	ldrh	r3, [r6, #4]
 8018d8e:	fa1f f28c 	uxth.w	r2, ip
 8018d92:	4413      	add	r3, r2
 8018d94:	b29b      	uxth	r3, r3
 8018d96:	45e6      	cmp	lr, ip
 8018d98:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8018d9c:	fa1f f98e 	uxth.w	r9, lr
 8018da0:	fa0f fa83 	sxth.w	sl, r3
 8018da4:	db0a      	blt.n	8018dbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8018da6:	eba3 0309 	sub.w	r3, r3, r9
 8018daa:	1ac9      	subs	r1, r1, r3
 8018dac:	b209      	sxth	r1, r1
 8018dae:	2900      	cmp	r1, #0
 8018db0:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8018db4:	ddda      	ble.n	8018d6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8018db6:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8018dba:	e7c6      	b.n	8018d4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8018dbc:	4449      	add	r1, r9
 8018dbe:	b209      	sxth	r1, r1
 8018dc0:	4551      	cmp	r1, sl
 8018dc2:	dc05      	bgt.n	8018dd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8018dc4:	eba2 0209 	sub.w	r2, r2, r9
 8018dc8:	b212      	sxth	r2, r2
 8018dca:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8018dce:	e7cb      	b.n	8018d68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8018dd0:	4607      	mov	r7, r0
 8018dd2:	e7bb      	b.n	8018d4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8018dd4:	2d00      	cmp	r5, #0
 8018dd6:	d181      	bne.n	8018cdc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8018dd8:	2f00      	cmp	r7, #0
 8018dda:	f000 81de 	beq.w	801919a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 8018dde:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8018de2:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8018de6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8018dea:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 8018dee:	b2b9      	uxth	r1, r7
 8018df0:	b2b3      	uxth	r3, r6
 8018df2:	441a      	add	r2, r3
 8018df4:	448a      	add	sl, r1
 8018df6:	b292      	uxth	r2, r2
 8018df8:	fa1f fa8a 	uxth.w	sl, sl
 8018dfc:	fa0f f882 	sxth.w	r8, r2
 8018e00:	9105      	str	r1, [sp, #20]
 8018e02:	fa0f f98a 	sxth.w	r9, sl
 8018e06:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8018e0a:	9b04      	ldr	r3, [sp, #16]
 8018e0c:	2b00      	cmp	r3, #0
 8018e0e:	d053      	beq.n	8018eb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8018e10:	9903      	ldr	r1, [sp, #12]
 8018e12:	4620      	mov	r0, r4
 8018e14:	f7ff fd2b 	bl	801886e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018e18:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8018e1c:	b1c0      	cbz	r0, 8018e50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8018e1e:	f9b4 e000 	ldrsh.w	lr, [r4]
 8018e22:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8018e26:	4576      	cmp	r6, lr
 8018e28:	dc23      	bgt.n	8018e72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8018e2a:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8018e2e:	44f4      	add	ip, lr
 8018e30:	fa0f fc8c 	sxth.w	ip, ip
 8018e34:	45e0      	cmp	r8, ip
 8018e36:	db1c      	blt.n	8018e72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8018e38:	428f      	cmp	r7, r1
 8018e3a:	fa1f fc81 	uxth.w	ip, r1
 8018e3e:	88e1      	ldrh	r1, [r4, #6]
 8018e40:	dc0d      	bgt.n	8018e5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8018e42:	ebaa 0c0c 	sub.w	ip, sl, ip
 8018e46:	eba1 010c 	sub.w	r1, r1, ip
 8018e4a:	f8a4 9002 	strh.w	r9, [r4, #2]
 8018e4e:	80e1      	strh	r1, [r4, #6]
 8018e50:	4628      	mov	r0, r5
 8018e52:	9904      	ldr	r1, [sp, #16]
 8018e54:	3c08      	subs	r4, #8
 8018e56:	3901      	subs	r1, #1
 8018e58:	9104      	str	r1, [sp, #16]
 8018e5a:	4605      	mov	r5, r0
 8018e5c:	e7d3      	b.n	8018e06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 8018e5e:	4461      	add	r1, ip
 8018e60:	b209      	sxth	r1, r1
 8018e62:	4549      	cmp	r1, r9
 8018e64:	dcf5      	bgt.n	8018e52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018e66:	9905      	ldr	r1, [sp, #20]
 8018e68:	eba1 0c0c 	sub.w	ip, r1, ip
 8018e6c:	f8a4 c006 	strh.w	ip, [r4, #6]
 8018e70:	e7ee      	b.n	8018e50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8018e72:	428f      	cmp	r7, r1
 8018e74:	dced      	bgt.n	8018e52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018e76:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8018e7a:	4461      	add	r1, ip
 8018e7c:	b209      	sxth	r1, r1
 8018e7e:	4589      	cmp	r9, r1
 8018e80:	dbe7      	blt.n	8018e52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018e82:	4576      	cmp	r6, lr
 8018e84:	fa1f fc8e 	uxth.w	ip, lr
 8018e88:	88a1      	ldrh	r1, [r4, #4]
 8018e8a:	dc07      	bgt.n	8018e9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8018e8c:	eba2 0c0c 	sub.w	ip, r2, ip
 8018e90:	eba1 010c 	sub.w	r1, r1, ip
 8018e94:	f8a4 8000 	strh.w	r8, [r4]
 8018e98:	80a1      	strh	r1, [r4, #4]
 8018e9a:	e7d9      	b.n	8018e50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8018e9c:	4461      	add	r1, ip
 8018e9e:	b209      	sxth	r1, r1
 8018ea0:	4588      	cmp	r8, r1
 8018ea2:	dbd6      	blt.n	8018e52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018ea4:	eba3 0c0c 	sub.w	ip, r3, ip
 8018ea8:	f8a4 c004 	strh.w	ip, [r4, #4]
 8018eac:	e7d0      	b.n	8018e50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8018eae:	bf00      	nop
 8018eb0:	201979de 	.word	0x201979de
 8018eb4:	201979dc 	.word	0x201979dc
 8018eb8:	2d00      	cmp	r5, #0
 8018eba:	f000 816e 	beq.w	801919a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 8018ebe:	9b06      	ldr	r3, [sp, #24]
 8018ec0:	445b      	add	r3, fp
 8018ec2:	461c      	mov	r4, r3
 8018ec4:	9b02      	ldr	r3, [sp, #8]
 8018ec6:	3301      	adds	r3, #1
 8018ec8:	f000 8167 	beq.w	801919a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 8018ecc:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 8018ed0:	4629      	mov	r1, r5
 8018ed2:	9803      	ldr	r0, [sp, #12]
 8018ed4:	f7ff fd3e 	bl	8018954 <_ZNK8touchgfx4Rect8includesERKS0_>
 8018ed8:	b120      	cbz	r0, 8018ee4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8018eda:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8018ede:	9801      	ldr	r0, [sp, #4]
 8018ee0:	f7ff feb0 	bl	8018c44 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018ee4:	9903      	ldr	r1, [sp, #12]
 8018ee6:	4628      	mov	r0, r5
 8018ee8:	f7ff fcc1 	bl	801886e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018eec:	2800      	cmp	r0, #0
 8018eee:	f000 809c 	beq.w	801902a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8018ef2:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 8018ef6:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8018efa:	fa1f f189 	uxth.w	r1, r9
 8018efe:	eb01 0c03 	add.w	ip, r1, r3
 8018f02:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8018f06:	fa1f fa8c 	uxth.w	sl, ip
 8018f0a:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8018f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8018f10:	b283      	uxth	r3, r0
 8018f12:	eb03 050c 	add.w	r5, r3, ip
 8018f16:	b2ad      	uxth	r5, r5
 8018f18:	9505      	str	r5, [sp, #20]
 8018f1a:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8018f1e:	4548      	cmp	r0, r9
 8018f20:	9504      	str	r5, [sp, #16]
 8018f22:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8018f26:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 8018f2a:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 8018f2e:	f340 8099 	ble.w	8019064 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8018f32:	1a5b      	subs	r3, r3, r1
 8018f34:	b29b      	uxth	r3, r3
 8018f36:	4596      	cmp	lr, r2
 8018f38:	fa0f f08a 	sxth.w	r0, sl
 8018f3c:	b21e      	sxth	r6, r3
 8018f3e:	dd2e      	ble.n	8018f9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8018f40:	9f02      	ldr	r7, [sp, #8]
 8018f42:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8018f46:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8018f4a:	9f04      	ldr	r7, [sp, #16]
 8018f4c:	fa1f fe8e 	uxth.w	lr, lr
 8018f50:	1a3f      	subs	r7, r7, r0
 8018f52:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 8018f56:	b292      	uxth	r2, r2
 8018f58:	ebae 0102 	sub.w	r1, lr, r2
 8018f5c:	44a6      	add	lr, r4
 8018f5e:	4402      	add	r2, r0
 8018f60:	b289      	uxth	r1, r1
 8018f62:	fa0f fe8e 	sxth.w	lr, lr
 8018f66:	b212      	sxth	r2, r2
 8018f68:	b20d      	sxth	r5, r1
 8018f6a:	ebae 0202 	sub.w	r2, lr, r2
 8018f6e:	436f      	muls	r7, r5
 8018f70:	4372      	muls	r2, r6
 8018f72:	4297      	cmp	r7, r2
 8018f74:	db09      	blt.n	8018f8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8018f76:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 8018f7a:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 8018f7e:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8018f82:	449c      	add	ip, r3
 8018f84:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8018f88:	e686      	b.n	8018c98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018f8a:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 8018f8e:	4421      	add	r1, r4
 8018f90:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 8018f94:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8018f98:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8018f9c:	e67c      	b.n	8018c98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018f9e:	9f04      	ldr	r7, [sp, #16]
 8018fa0:	42b8      	cmp	r0, r7
 8018fa2:	da27      	bge.n	8018ff4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8018fa4:	9902      	ldr	r1, [sp, #8]
 8018fa6:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 8018faa:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8018fae:	eb05 010e 	add.w	r1, r5, lr
 8018fb2:	fa1f f881 	uxth.w	r8, r1
 8018fb6:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 8018fba:	fa0f f988 	sxth.w	r9, r8
 8018fbe:	4411      	add	r1, r2
 8018fc0:	eba1 0108 	sub.w	r1, r1, r8
 8018fc4:	b289      	uxth	r1, r1
 8018fc6:	fa0f f881 	sxth.w	r8, r1
 8018fca:	eba2 020e 	sub.w	r2, r2, lr
 8018fce:	1a3f      	subs	r7, r7, r0
 8018fd0:	4372      	muls	r2, r6
 8018fd2:	fb08 f707 	mul.w	r7, r8, r7
 8018fd6:	42ba      	cmp	r2, r7
 8018fd8:	dc06      	bgt.n	8018fe8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8018fda:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 8018fde:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 8018fe2:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 8018fe6:	e7ca      	b.n	8018f7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8018fe8:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 8018fec:	4429      	add	r1, r5
 8018fee:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8018ff2:	e651      	b.n	8018c98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018ff4:	9805      	ldr	r0, [sp, #20]
 8018ff6:	2d06      	cmp	r5, #6
 8018ff8:	ebaa 0000 	sub.w	r0, sl, r0
 8018ffc:	b280      	uxth	r0, r0
 8018ffe:	fa0f fe80 	sxth.w	lr, r0
 8019002:	d817      	bhi.n	8019034 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8019004:	9b04      	ldr	r3, [sp, #16]
 8019006:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 801900a:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801900e:	1c6b      	adds	r3, r5, #1
 8019010:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 8019014:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8019018:	9b01      	ldr	r3, [sp, #4]
 801901a:	9801      	ldr	r0, [sp, #4]
 801901c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019020:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8019024:	805a      	strh	r2, [r3, #2]
 8019026:	809e      	strh	r6, [r3, #4]
 8019028:	80d9      	strh	r1, [r3, #6]
 801902a:	9b02      	ldr	r3, [sp, #8]
 801902c:	3c08      	subs	r4, #8
 801902e:	3b01      	subs	r3, #1
 8019030:	9302      	str	r3, [sp, #8]
 8019032:	e747      	b.n	8018ec4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8019034:	9a02      	ldr	r2, [sp, #8]
 8019036:	45b6      	cmp	lr, r6
 8019038:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801903c:	db0d      	blt.n	801905a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801903e:	449c      	add	ip, r3
 8019040:	fa1f fc8c 	uxth.w	ip, ip
 8019044:	445a      	add	r2, fp
 8019046:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801904a:	448c      	add	ip, r1
 801904c:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8019050:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 8019054:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 8019058:	e61e      	b.n	8018c98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801905a:	445a      	add	r2, fp
 801905c:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 8019060:	4484      	add	ip, r0
 8019062:	e78f      	b.n	8018f84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8019064:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8019068:	fa1f f18e 	uxth.w	r1, lr
 801906c:	eb01 0806 	add.w	r8, r1, r6
 8019070:	b293      	uxth	r3, r2
 8019072:	fa1f f888 	uxth.w	r8, r8
 8019076:	9306      	str	r3, [sp, #24]
 8019078:	fa0f f388 	sxth.w	r3, r8
 801907c:	9307      	str	r3, [sp, #28]
 801907e:	9f06      	ldr	r7, [sp, #24]
 8019080:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 8019084:	4596      	cmp	lr, r2
 8019086:	443b      	add	r3, r7
 8019088:	b29b      	uxth	r3, r3
 801908a:	9308      	str	r3, [sp, #32]
 801908c:	da24      	bge.n	80190d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801908e:	9905      	ldr	r1, [sp, #20]
 8019090:	eba3 0308 	sub.w	r3, r3, r8
 8019094:	ebaa 0401 	sub.w	r4, sl, r1
 8019098:	b2a4      	uxth	r4, r4
 801909a:	b29b      	uxth	r3, r3
 801909c:	b225      	sxth	r5, r4
 801909e:	b219      	sxth	r1, r3
 80190a0:	eba2 020e 	sub.w	r2, r2, lr
 80190a4:	eba9 0000 	sub.w	r0, r9, r0
 80190a8:	436a      	muls	r2, r5
 80190aa:	4348      	muls	r0, r1
 80190ac:	4282      	cmp	r2, r0
 80190ae:	9a02      	ldr	r2, [sp, #8]
 80190b0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80190b4:	445a      	add	r2, fp
 80190b6:	dc06      	bgt.n	80190c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 80190b8:	9b07      	ldr	r3, [sp, #28]
 80190ba:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 80190be:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 80190c2:	44a4      	add	ip, r4
 80190c4:	e75e      	b.n	8018f84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80190c6:	9904      	ldr	r1, [sp, #16]
 80190c8:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 80190cc:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 80190d0:	4433      	add	r3, r6
 80190d2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80190d6:	e5df      	b.n	8018c98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80190d8:	9f06      	ldr	r7, [sp, #24]
 80190da:	9b04      	ldr	r3, [sp, #16]
 80190dc:	1bc9      	subs	r1, r1, r7
 80190de:	fa0f f78a 	sxth.w	r7, sl
 80190e2:	b289      	uxth	r1, r1
 80190e4:	429f      	cmp	r7, r3
 80190e6:	fa0f fe81 	sxth.w	lr, r1
 80190ea:	dd24      	ble.n	8019136 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4ca>
 80190ec:	9a05      	ldr	r2, [sp, #20]
 80190ee:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80190f2:	ebaa 0202 	sub.w	r2, sl, r2
 80190f6:	9d07      	ldr	r5, [sp, #28]
 80190f8:	b292      	uxth	r2, r2
 80190fa:	eba5 0a03 	sub.w	sl, r5, r3
 80190fe:	b214      	sxth	r4, r2
 8019100:	eba9 0000 	sub.w	r0, r9, r0
 8019104:	fb0e f000 	mul.w	r0, lr, r0
 8019108:	fb04 fa0a 	mul.w	sl, r4, sl
 801910c:	9b02      	ldr	r3, [sp, #8]
 801910e:	4550      	cmp	r0, sl
 8019110:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8019114:	445b      	add	r3, fp
 8019116:	db03      	blt.n	8019120 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b4>
 8019118:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 801911c:	4494      	add	ip, r2
 801911e:	e731      	b.n	8018f84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8019120:	9a04      	ldr	r2, [sp, #16]
 8019122:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 8019126:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 801912a:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 801912e:	4431      	add	r1, r6
 8019130:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8019134:	e75b      	b.n	8018fee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8019136:	9b08      	ldr	r3, [sp, #32]
 8019138:	2d06      	cmp	r5, #6
 801913a:	eba3 0308 	sub.w	r3, r3, r8
 801913e:	b29b      	uxth	r3, r3
 8019140:	b218      	sxth	r0, r3
 8019142:	d813      	bhi.n	801916c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x500>
 8019144:	9b07      	ldr	r3, [sp, #28]
 8019146:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 801914a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 801914e:	1c6b      	adds	r3, r5, #1
 8019150:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8019154:	9b01      	ldr	r3, [sp, #4]
 8019156:	9901      	ldr	r1, [sp, #4]
 8019158:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801915c:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8019160:	805a      	strh	r2, [r3, #2]
 8019162:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019164:	f8a3 e006 	strh.w	lr, [r3, #6]
 8019168:	809a      	strh	r2, [r3, #4]
 801916a:	e75e      	b.n	801902a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801916c:	9c02      	ldr	r4, [sp, #8]
 801916e:	4570      	cmp	r0, lr
 8019170:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8019174:	db0d      	blt.n	8019192 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x526>
 8019176:	4431      	add	r1, r6
 8019178:	9b06      	ldr	r3, [sp, #24]
 801917a:	b289      	uxth	r1, r1
 801917c:	445c      	add	r4, fp
 801917e:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8019182:	4419      	add	r1, r3
 8019184:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8019188:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 801918c:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 8019190:	e582      	b.n	8018c98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019192:	445c      	add	r4, fp
 8019194:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 8019198:	e79a      	b.n	80190d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801919a:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 801919e:	2e07      	cmp	r6, #7
 80191a0:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 80191a4:	d812      	bhi.n	80191cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x560>
 80191a6:	1c75      	adds	r5, r6, #1
 80191a8:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 80191ac:	9d01      	ldr	r5, [sp, #4]
 80191ae:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 80191b2:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 80191b6:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80191ba:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80191be:	442c      	add	r4, r5
 80191c0:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 80191c4:	8061      	strh	r1, [r4, #2]
 80191c6:	80a2      	strh	r2, [r4, #4]
 80191c8:	80e3      	strh	r3, [r4, #6]
 80191ca:	e5cf      	b.n	8018d6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80191cc:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80191d0:	f04f 37ff 	mov.w	r7, #4294967295
 80191d4:	2500      	movs	r5, #0
 80191d6:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 80191da:	3e01      	subs	r6, #1
 80191dc:	445c      	add	r4, fp
 80191de:	9305      	str	r3, [sp, #20]
 80191e0:	1e72      	subs	r2, r6, #1
 80191e2:	4691      	mov	r9, r2
 80191e4:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 80191e8:	9302      	str	r3, [sp, #8]
 80191ea:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 80191ee:	9304      	str	r3, [sp, #16]
 80191f0:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 80191f4:	f1b9 3fff 	cmp.w	r9, #4294967295
 80191f8:	bf16      	itet	ne
 80191fa:	9905      	ldrne	r1, [sp, #20]
 80191fc:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8019200:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8019204:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8019208:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801920c:	6818      	ldr	r0, [r3, #0]
 801920e:	fb18 f801 	smulbb	r8, r8, r1
 8019212:	6859      	ldr	r1, [r3, #4]
 8019214:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8019218:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801921c:	4671      	mov	r1, lr
 801921e:	a80c      	add	r0, sp, #48	; 0x30
 8019220:	9207      	str	r2, [sp, #28]
 8019222:	9306      	str	r3, [sp, #24]
 8019224:	f7ff fbbc 	bl	80189a0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019228:	f04f 0c08 	mov.w	ip, #8
 801922c:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8019230:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8019234:	9b04      	ldr	r3, [sp, #16]
 8019236:	9a02      	ldr	r2, [sp, #8]
 8019238:	fb10 f001 	smulbb	r0, r0, r1
 801923c:	fb02 8803 	mla	r8, r2, r3, r8
 8019240:	eba0 0108 	sub.w	r1, r0, r8
 8019244:	fb90 f0fc 	sdiv	r0, r0, ip
 8019248:	4288      	cmp	r0, r1
 801924a:	dc20      	bgt.n	801928e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x622>
 801924c:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8019250:	4551      	cmp	r1, sl
 8019252:	da03      	bge.n	801925c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
 8019254:	b1d9      	cbz	r1, 801928e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x622>
 8019256:	468a      	mov	sl, r1
 8019258:	464f      	mov	r7, r9
 801925a:	4635      	mov	r5, r6
 801925c:	f109 39ff 	add.w	r9, r9, #4294967295
 8019260:	f119 0f02 	cmn.w	r9, #2
 8019264:	d1c6      	bne.n	80191f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x588>
 8019266:	4616      	mov	r6, r2
 8019268:	3201      	adds	r2, #1
 801926a:	f1a4 0408 	sub.w	r4, r4, #8
 801926e:	d1b7      	bne.n	80191e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 8019270:	9b01      	ldr	r3, [sp, #4]
 8019272:	b2ac      	uxth	r4, r5
 8019274:	00ed      	lsls	r5, r5, #3
 8019276:	1958      	adds	r0, r3, r5
 8019278:	1c7b      	adds	r3, r7, #1
 801927a:	d10b      	bne.n	8019294 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x628>
 801927c:	4601      	mov	r1, r0
 801927e:	9803      	ldr	r0, [sp, #12]
 8019280:	f7ff fb8e 	bl	80189a0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019284:	4621      	mov	r1, r4
 8019286:	9801      	ldr	r0, [sp, #4]
 8019288:	f7ff fcdc 	bl	8018c44 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801928c:	e504      	b.n	8018c98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801928e:	464f      	mov	r7, r9
 8019290:	4635      	mov	r5, r6
 8019292:	e7ed      	b.n	8019270 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x604>
 8019294:	9b01      	ldr	r3, [sp, #4]
 8019296:	00ff      	lsls	r7, r7, #3
 8019298:	19d9      	adds	r1, r3, r7
 801929a:	f7ff fb81 	bl	80189a0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801929e:	9b03      	ldr	r3, [sp, #12]
 80192a0:	445f      	add	r7, fp
 80192a2:	cb03      	ldmia	r3!, {r0, r1}
 80192a4:	445d      	add	r5, fp
 80192a6:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 80192aa:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80192ae:	f855 0fac 	ldr.w	r0, [r5, #172]!
 80192b2:	9b03      	ldr	r3, [sp, #12]
 80192b4:	6869      	ldr	r1, [r5, #4]
 80192b6:	c303      	stmia	r3!, {r0, r1}
 80192b8:	e7e4      	b.n	8019284 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x618>
 80192ba:	bf00      	nop

080192bc <_ZN8touchgfx11Application10invalidateEv>:
 80192bc:	2100      	movs	r1, #0
 80192be:	4b09      	ldr	r3, [pc, #36]	; (80192e4 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 80192c0:	b082      	sub	sp, #8
 80192c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80192c6:	4b08      	ldr	r3, [pc, #32]	; (80192e8 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 80192c8:	9100      	str	r1, [sp, #0]
 80192ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80192ce:	f8ad 2004 	strh.w	r2, [sp, #4]
 80192d2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80192d6:	ab02      	add	r3, sp, #8
 80192d8:	e913 0006 	ldmdb	r3, {r1, r2}
 80192dc:	b002      	add	sp, #8
 80192de:	f7ff bcc5 	b.w	8018c6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80192e2:	bf00      	nop
 80192e4:	201979dc 	.word	0x201979dc
 80192e8:	201979de 	.word	0x201979de

080192ec <_ZN8touchgfx11Application15drawCachedAreasEv>:
 80192ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192f0:	f500 7698 	add.w	r6, r0, #304	; 0x130
 80192f4:	b09b      	sub	sp, #108	; 0x6c
 80192f6:	4604      	mov	r4, r0
 80192f8:	4630      	mov	r0, r6
 80192fa:	f7fd fb54 	bl	80169a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80192fe:	4605      	mov	r5, r0
 8019300:	b940      	cbnz	r0, 8019314 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 8019302:	e896 0006 	ldmia.w	r6, {r1, r2}
 8019306:	4620      	mov	r0, r4
 8019308:	f7ff fcb0 	bl	8018c6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801930c:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8019310:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 8019314:	4bc9      	ldr	r3, [pc, #804]	; (801963c <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8019316:	681b      	ldr	r3, [r3, #0]
 8019318:	2b00      	cmp	r3, #0
 801931a:	d03e      	beq.n	801939a <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801931c:	4dc8      	ldr	r5, [pc, #800]	; (8019640 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801931e:	4628      	mov	r0, r5
 8019320:	f7fd fb41 	bl	80169a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019324:	4606      	mov	r6, r0
 8019326:	2800      	cmp	r0, #0
 8019328:	d137      	bne.n	801939a <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801932a:	4628      	mov	r0, r5
 801932c:	f7ff f9e4 	bl	80186f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8019330:	6829      	ldr	r1, [r5, #0]
 8019332:	686a      	ldr	r2, [r5, #4]
 8019334:	4620      	mov	r0, r4
 8019336:	f7ff fc99 	bl	8018c6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801933a:	802e      	strh	r6, [r5, #0]
 801933c:	806e      	strh	r6, [r5, #2]
 801933e:	80ae      	strh	r6, [r5, #4]
 8019340:	80ee      	strh	r6, [r5, #6]
 8019342:	ae09      	add	r6, sp, #36	; 0x24
 8019344:	4630      	mov	r0, r6
 8019346:	f7ff fc25 	bl	8018b94 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801934a:	4abe      	ldr	r2, [pc, #760]	; (8019644 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801934c:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8019350:	8815      	ldrh	r5, [r2, #0]
 8019352:	9202      	str	r2, [sp, #8]
 8019354:	462b      	mov	r3, r5
 8019356:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801935a:	429f      	cmp	r7, r3
 801935c:	d924      	bls.n	80193a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 801935e:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8019362:	2907      	cmp	r1, #7
 8019364:	d816      	bhi.n	8019394 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 8019366:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801936a:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 801936e:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8019372:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8019376:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801937a:	1c4a      	adds	r2, r1, #1
 801937c:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8019380:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 8019384:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 8019388:	f8a2 9002 	strh.w	r9, [r2, #2]
 801938c:	f8a2 e004 	strh.w	lr, [r2, #4]
 8019390:	f8a2 c006 	strh.w	ip, [r2, #6]
 8019394:	3301      	adds	r3, #1
 8019396:	b29b      	uxth	r3, r3
 8019398:	e7df      	b.n	801935a <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 801939a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801939e:	2b00      	cmp	r3, #0
 80193a0:	d1cf      	bne.n	8019342 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 80193a2:	b01b      	add	sp, #108	; 0x6c
 80193a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193a8:	462f      	mov	r7, r5
 80193aa:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 80193ae:	42bb      	cmp	r3, r7
 80193b0:	d90b      	bls.n	80193ca <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 80193b2:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 80193b6:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 80193ba:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 80193be:	4620      	mov	r0, r4
 80193c0:	3701      	adds	r7, #1
 80193c2:	f7ff fc53 	bl	8018c6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80193c6:	b2bf      	uxth	r7, r7
 80193c8:	e7ef      	b.n	80193aa <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 80193ca:	4a9f      	ldr	r2, [pc, #636]	; (8019648 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 80193cc:	6813      	ldr	r3, [r2, #0]
 80193ce:	4690      	mov	r8, r2
 80193d0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80193d4:	2b01      	cmp	r3, #1
 80193d6:	f040 80e6 	bne.w	80195a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ba>
 80193da:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 80193de:	4629      	mov	r1, r5
 80193e0:	2500      	movs	r5, #0
 80193e2:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 80193e6:	33ae      	adds	r3, #174	; 0xae
 80193e8:	428f      	cmp	r7, r1
 80193ea:	f103 0308 	add.w	r3, r3, #8
 80193ee:	dd0a      	ble.n	8019406 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 80193f0:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80193f4:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 80193f8:	3101      	adds	r1, #1
 80193fa:	4402      	add	r2, r0
 80193fc:	b212      	sxth	r2, r2
 80193fe:	4295      	cmp	r5, r2
 8019400:	bfb8      	it	lt
 8019402:	4615      	movlt	r5, r2
 8019404:	e7f0      	b.n	80193e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 8019406:	4b91      	ldr	r3, [pc, #580]	; (801964c <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 8019408:	f8df b23c 	ldr.w	fp, [pc, #572]	; 8019648 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>
 801940c:	881b      	ldrh	r3, [r3, #0]
 801940e:	46d8      	mov	r8, fp
 8019410:	2b0f      	cmp	r3, #15
 8019412:	bf88      	it	hi
 8019414:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 8019418:	f04f 0300 	mov.w	r3, #0
 801941c:	bf98      	it	ls
 801941e:	f04f 0a01 	movls.w	sl, #1
 8019422:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8019426:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 801942a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801942e:	4438      	add	r0, r7
 8019430:	b207      	sxth	r7, r0
 8019432:	f8db 0000 	ldr.w	r0, [fp]
 8019436:	42bd      	cmp	r5, r7
 8019438:	6803      	ldr	r3, [r0, #0]
 801943a:	f340 8084 	ble.w	8019546 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801943e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019442:	4798      	blx	r3
 8019444:	eb07 030a 	add.w	r3, r7, sl
 8019448:	4298      	cmp	r0, r3
 801944a:	da07      	bge.n	801945c <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 801944c:	4285      	cmp	r5, r0
 801944e:	dd05      	ble.n	801945c <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 8019450:	4287      	cmp	r7, r0
 8019452:	dd6d      	ble.n	8019530 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 8019454:	2f00      	cmp	r7, #0
 8019456:	dd6b      	ble.n	8019530 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 8019458:	4628      	mov	r0, r5
 801945a:	e004      	b.n	8019466 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17a>
 801945c:	4287      	cmp	r7, r0
 801945e:	dcfb      	bgt.n	8019458 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8019460:	42a8      	cmp	r0, r5
 8019462:	bfa8      	it	ge
 8019464:	4628      	movge	r0, r5
 8019466:	2200      	movs	r2, #0
 8019468:	4b79      	ldr	r3, [pc, #484]	; (8019650 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 801946a:	1bc0      	subs	r0, r0, r7
 801946c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019470:	f8ad 7016 	strh.w	r7, [sp, #22]
 8019474:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019478:	9b02      	ldr	r3, [sp, #8]
 801947a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801947e:	881f      	ldrh	r7, [r3, #0]
 8019480:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019484:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8019488:	42bb      	cmp	r3, r7
 801948a:	d9cc      	bls.n	8019426 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 801948c:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8019490:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8019494:	ab07      	add	r3, sp, #28
 8019496:	6851      	ldr	r1, [r2, #4]
 8019498:	c303      	stmia	r3!, {r0, r1}
 801949a:	a905      	add	r1, sp, #20
 801949c:	a807      	add	r0, sp, #28
 801949e:	f7ff f9e6 	bl	801886e <_ZNK8touchgfx4Rect9intersectERKS0_>
 80194a2:	2800      	cmp	r0, #0
 80194a4:	d04c      	beq.n	8019540 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 80194a6:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80194aa:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80194ae:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 80194b2:	4686      	mov	lr, r0
 80194b4:	4290      	cmp	r0, r2
 80194b6:	4448      	add	r0, r9
 80194b8:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 80194bc:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 80194c0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80194c4:	bfb8      	it	lt
 80194c6:	4696      	movlt	lr, r2
 80194c8:	444a      	add	r2, r9
 80194ca:	4299      	cmp	r1, r3
 80194cc:	b280      	uxth	r0, r0
 80194ce:	b292      	uxth	r2, r2
 80194d0:	468c      	mov	ip, r1
 80194d2:	9303      	str	r3, [sp, #12]
 80194d4:	bfb8      	it	lt
 80194d6:	469c      	movlt	ip, r3
 80194d8:	fa0f f982 	sxth.w	r9, r2
 80194dc:	b203      	sxth	r3, r0
 80194de:	454b      	cmp	r3, r9
 80194e0:	bfb8      	it	lt
 80194e2:	4602      	movlt	r2, r0
 80194e4:	eba2 020e 	sub.w	r2, r2, lr
 80194e8:	f8ad 2020 	strh.w	r2, [sp, #32]
 80194ec:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80194f0:	9b03      	ldr	r3, [sp, #12]
 80194f2:	4411      	add	r1, r2
 80194f4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80194f8:	b289      	uxth	r1, r1
 80194fa:	4413      	add	r3, r2
 80194fc:	b29b      	uxth	r3, r3
 80194fe:	b208      	sxth	r0, r1
 8019500:	b21a      	sxth	r2, r3
 8019502:	4290      	cmp	r0, r2
 8019504:	bfb8      	it	lt
 8019506:	460b      	movlt	r3, r1
 8019508:	eba3 030c 	sub.w	r3, r3, ip
 801950c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8019510:	f8ad e01c 	strh.w	lr, [sp, #28]
 8019514:	f8ad c01e 	strh.w	ip, [sp, #30]
 8019518:	a807      	add	r0, sp, #28
 801951a:	f7fd fa44 	bl	80169a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801951e:	b920      	cbnz	r0, 801952a <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 8019520:	6823      	ldr	r3, [r4, #0]
 8019522:	a907      	add	r1, sp, #28
 8019524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019526:	4620      	mov	r0, r4
 8019528:	4798      	blx	r3
 801952a:	3701      	adds	r7, #1
 801952c:	b2bf      	uxth	r7, r7
 801952e:	e7a9      	b.n	8019484 <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 8019530:	f8d8 0000 	ldr.w	r0, [r8]
 8019534:	2101      	movs	r1, #1
 8019536:	6803      	ldr	r3, [r0, #0]
 8019538:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801953c:	4798      	blx	r3
 801953e:	e772      	b.n	8019426 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 8019540:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8019544:	e7e8      	b.n	8019518 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 8019546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019548:	4798      	blx	r3
 801954a:	4b42      	ldr	r3, [pc, #264]	; (8019654 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 801954c:	781b      	ldrb	r3, [r3, #0]
 801954e:	2b00      	cmp	r3, #0
 8019550:	f43f af27 	beq.w	80193a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8019554:	2300      	movs	r3, #0
 8019556:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 801955a:	9b02      	ldr	r3, [sp, #8]
 801955c:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8019560:	881b      	ldrh	r3, [r3, #0]
 8019562:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8019566:	429d      	cmp	r5, r3
 8019568:	f67f af1b 	bls.w	80193a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801956c:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 8019570:	2907      	cmp	r1, #7
 8019572:	d815      	bhi.n	80195a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b4>
 8019574:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8019578:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801957c:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8019580:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8019584:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 8019588:	1c4a      	adds	r2, r1, #1
 801958a:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 801958e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8019592:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 8019596:	f8a2 e002 	strh.w	lr, [r2, #2]
 801959a:	f8a2 c004 	strh.w	ip, [r2, #4]
 801959e:	80d7      	strh	r7, [r2, #6]
 80195a0:	3301      	adds	r3, #1
 80195a2:	b29b      	uxth	r3, r3
 80195a4:	e7df      	b.n	8019566 <_ZN8touchgfx11Application15drawCachedAreasEv+0x27a>
 80195a6:	2b02      	cmp	r3, #2
 80195a8:	f040 8136 	bne.w	8019818 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 80195ac:	4b2a      	ldr	r3, [pc, #168]	; (8019658 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>)
 80195ae:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 80195b2:	781b      	ldrb	r3, [r3, #0]
 80195b4:	2b01      	cmp	r3, #1
 80195b6:	f000 809c 	beq.w	80196f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 80195ba:	9b02      	ldr	r3, [sp, #8]
 80195bc:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
 80195c0:	f8b3 b000 	ldrh.w	fp, [r3]
 80195c4:	f10b 0b01 	add.w	fp, fp, #1
 80195c8:	fa1f fb8b 	uxth.w	fp, fp
 80195cc:	2a00      	cmp	r2, #0
 80195ce:	d0bc      	beq.n	801954a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 80195d0:	4659      	mov	r1, fp
 80195d2:	f04f 0800 	mov.w	r8, #0
 80195d6:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
 80195da:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 80195de:	441d      	add	r5, r3
 80195e0:	b22d      	sxth	r5, r5
 80195e2:	b28b      	uxth	r3, r1
 80195e4:	429a      	cmp	r2, r3
 80195e6:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 80195ea:	f240 80c1 	bls.w	8019770 <_ZN8touchgfx11Application15drawCachedAreasEv+0x484>
 80195ee:	4427      	add	r7, r4
 80195f0:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 80195f4:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 80195f8:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
 80195fc:	4608      	mov	r0, r1
 80195fe:	4563      	cmp	r3, ip
 8019600:	f340 80a3 	ble.w	801974a <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 8019604:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
 8019608:	4465      	add	r5, ip
 801960a:	b22d      	sxth	r5, r5
 801960c:	429d      	cmp	r5, r3
 801960e:	bfa8      	it	ge
 8019610:	461d      	movge	r5, r3
 8019612:	3101      	adds	r1, #1
 8019614:	4680      	mov	r8, r0
 8019616:	e7e4      	b.n	80195e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8019618:	d10b      	bne.n	8019632 <_ZN8touchgfx11Application15drawCachedAreasEv+0x346>
 801961a:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
 801961e:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
 8019622:	458c      	cmp	ip, r1
 8019624:	bfb4      	ite	lt
 8019626:	469c      	movlt	ip, r3
 8019628:	46bc      	movge	ip, r7
 801962a:	4572      	cmp	r2, lr
 801962c:	bfb8      	it	lt
 801962e:	4672      	movlt	r2, lr
 8019630:	e088      	b.n	8019744 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 8019632:	428a      	cmp	r2, r1
 8019634:	bfb8      	it	lt
 8019636:	460a      	movlt	r2, r1
 8019638:	46bc      	mov	ip, r7
 801963a:	e083      	b.n	8019744 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 801963c:	20197a20 	.word	0x20197a20
 8019640:	20197a2c 	.word	0x20197a2c
 8019644:	20000058 	.word	0x20000058
 8019648:	201979e8 	.word	0x201979e8
 801964c:	201979de 	.word	0x201979de
 8019650:	201979dc 	.word	0x201979dc
 8019654:	201979e6 	.word	0x201979e6
 8019658:	201979e0 	.word	0x201979e0
 801965c:	1961      	adds	r1, r4, r5
 801965e:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8019662:	ab07      	add	r3, sp, #28
 8019664:	6849      	ldr	r1, [r1, #4]
 8019666:	c303      	stmia	r3!, {r0, r1}
 8019668:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801966c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8019670:	2b13      	cmp	r3, #19
 8019672:	bfd8      	it	le
 8019674:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8019678:	440b      	add	r3, r1
 801967a:	1a9b      	subs	r3, r3, r2
 801967c:	a807      	add	r0, sp, #28
 801967e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019682:	f8ad 201c 	strh.w	r2, [sp, #28]
 8019686:	f7ff f851 	bl	801872c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801968a:	a807      	add	r0, sp, #28
 801968c:	f7fd f98b 	bl	80169a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019690:	bb78      	cbnz	r0, 80196f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 8019692:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8019696:	f8d8 0000 	ldr.w	r0, [r8]
 801969a:	f1bc 0f14 	cmp.w	ip, #20
 801969e:	bfa8      	it	ge
 80196a0:	f04f 0c14 	movge.w	ip, #20
 80196a4:	f8d0 e000 	ldr.w	lr, [r0]
 80196a8:	fa1f fc8c 	uxth.w	ip, ip
 80196ac:	f8cd c000 	str.w	ip, [sp]
 80196b0:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 80196b4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80196b8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80196bc:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80196c0:	47d0      	blx	sl
 80196c2:	4682      	mov	sl, r0
 80196c4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80196c8:	a807      	add	r0, sp, #28
 80196ca:	f7ff f815 	bl	80186f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80196ce:	6823      	ldr	r3, [r4, #0]
 80196d0:	4620      	mov	r0, r4
 80196d2:	4425      	add	r5, r4
 80196d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80196d6:	a907      	add	r1, sp, #28
 80196d8:	4798      	blx	r3
 80196da:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
 80196de:	eba0 000a 	sub.w	r0, r0, sl
 80196e2:	b200      	sxth	r0, r0
 80196e4:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 80196e8:	b918      	cbnz	r0, 80196f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 80196ea:	b2b9      	uxth	r1, r7
 80196ec:	4648      	mov	r0, r9
 80196ee:	f7ff faa9 	bl	8018c44 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80196f2:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 80196f6:	f1bb 0f00 	cmp.w	fp, #0
 80196fa:	f43f af26 	beq.w	801954a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 80196fe:	2700      	movs	r7, #0
 8019700:	9b02      	ldr	r3, [sp, #8]
 8019702:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 8019706:	881b      	ldrh	r3, [r3, #0]
 8019708:	3301      	adds	r3, #1
 801970a:	b29b      	uxth	r3, r3
 801970c:	b299      	uxth	r1, r3
 801970e:	458b      	cmp	fp, r1
 8019710:	ea4f 05c7 	mov.w	r5, r7, lsl #3
 8019714:	d9a2      	bls.n	801965c <_ZN8touchgfx11Application15drawCachedAreasEv+0x370>
 8019716:	4425      	add	r5, r4
 8019718:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
 801971c:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8019720:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8019724:	4408      	add	r0, r1
 8019726:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
 801972a:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
 801972e:	b200      	sxth	r0, r0
 8019730:	4471      	add	r1, lr
 8019732:	b209      	sxth	r1, r1
 8019734:	4288      	cmp	r0, r1
 8019736:	469c      	mov	ip, r3
 8019738:	f6bf af6e 	bge.w	8019618 <_ZN8touchgfx11Application15drawCachedAreasEv+0x32c>
 801973c:	4586      	cmp	lr, r0
 801973e:	4672      	mov	r2, lr
 8019740:	bfb8      	it	lt
 8019742:	4602      	movlt	r2, r0
 8019744:	3301      	adds	r3, #1
 8019746:	4667      	mov	r7, ip
 8019748:	e7e0      	b.n	801970c <_ZN8touchgfx11Application15drawCachedAreasEv+0x420>
 801974a:	d10c      	bne.n	8019766 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47a>
 801974c:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 8019750:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 8019754:	4287      	cmp	r7, r0
 8019756:	bfb4      	ite	lt
 8019758:	4608      	movlt	r0, r1
 801975a:	4640      	movge	r0, r8
 801975c:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
 8019760:	443b      	add	r3, r7
 8019762:	b21b      	sxth	r3, r3
 8019764:	e752      	b.n	801960c <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8019766:	4565      	cmp	r5, ip
 8019768:	bfa8      	it	ge
 801976a:	4665      	movge	r5, ip
 801976c:	4640      	mov	r0, r8
 801976e:	e750      	b.n	8019612 <_ZN8touchgfx11Application15drawCachedAreasEv+0x326>
 8019770:	eb09 0007 	add.w	r0, r9, r7
 8019774:	4427      	add	r7, r4
 8019776:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
 801977a:	9203      	str	r2, [sp, #12]
 801977c:	f1ba 0f13 	cmp.w	sl, #19
 8019780:	bfde      	ittt	le
 8019782:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
 8019786:	4455      	addle	r5, sl
 8019788:	b22d      	sxthle	r5, r5
 801978a:	f7fd f90c 	bl	80169a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801978e:	9a03      	ldr	r2, [sp, #12]
 8019790:	2800      	cmp	r0, #0
 8019792:	f47f af1b 	bne.w	80195cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e0>
 8019796:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 801979a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801979e:	1aad      	subs	r5, r5, r2
 80197a0:	2d14      	cmp	r5, #20
 80197a2:	bfa8      	it	ge
 80197a4:	2514      	movge	r5, #20
 80197a6:	4828      	ldr	r0, [pc, #160]	; (8019848 <_ZN8touchgfx11Application15drawCachedAreasEv+0x55c>)
 80197a8:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 80197ac:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 80197b0:	6800      	ldr	r0, [r0, #0]
 80197b2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80197b6:	f8ad 201e 	strh.w	r2, [sp, #30]
 80197ba:	f8ad 3020 	strh.w	r3, [sp, #32]
 80197be:	f8d0 c000 	ldr.w	ip, [r0]
 80197c2:	b2ad      	uxth	r5, r5
 80197c4:	fa1f fa8a 	uxth.w	sl, sl
 80197c8:	4555      	cmp	r5, sl
 80197ca:	bf94      	ite	ls
 80197cc:	9500      	strls	r5, [sp, #0]
 80197ce:	f8cd a000 	strhi.w	sl, [sp]
 80197d2:	b292      	uxth	r2, r2
 80197d4:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 80197d8:	b29b      	uxth	r3, r3
 80197da:	b289      	uxth	r1, r1
 80197dc:	47a8      	blx	r5
 80197de:	6823      	ldr	r3, [r4, #0]
 80197e0:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80197e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80197e6:	a907      	add	r1, sp, #28
 80197e8:	4620      	mov	r0, r4
 80197ea:	4798      	blx	r3
 80197ec:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80197f0:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80197f4:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 80197f8:	1a5b      	subs	r3, r3, r1
 80197fa:	440a      	add	r2, r1
 80197fc:	b21b      	sxth	r3, r3
 80197fe:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 8019802:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8019806:	2b00      	cmp	r3, #0
 8019808:	f47f aed7 	bne.w	80195ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 801980c:	fa1f f188 	uxth.w	r1, r8
 8019810:	4648      	mov	r0, r9
 8019812:	f7ff fa17 	bl	8018c44 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019816:	e6d0      	b.n	80195ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 8019818:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801981c:	42ab      	cmp	r3, r5
 801981e:	f67f ae94 	bls.w	801954a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 8019822:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8019826:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801982a:	ab07      	add	r3, sp, #28
 801982c:	6851      	ldr	r1, [r2, #4]
 801982e:	c303      	stmia	r3!, {r0, r1}
 8019830:	a807      	add	r0, sp, #28
 8019832:	f7fd f8b8 	bl	80169a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019836:	b920      	cbnz	r0, 8019842 <_ZN8touchgfx11Application15drawCachedAreasEv+0x556>
 8019838:	6823      	ldr	r3, [r4, #0]
 801983a:	a907      	add	r1, sp, #28
 801983c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801983e:	4620      	mov	r0, r4
 8019840:	4798      	blx	r3
 8019842:	3501      	adds	r5, #1
 8019844:	b2ad      	uxth	r5, r5
 8019846:	e7e7      	b.n	8019818 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 8019848:	201979e8 	.word	0x201979e8

0801984c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801984c:	2200      	movs	r2, #0
 801984e:	4b03      	ldr	r3, [pc, #12]	; (801985c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8019850:	801a      	strh	r2, [r3, #0]
 8019852:	805a      	strh	r2, [r3, #2]
 8019854:	809a      	strh	r2, [r3, #4]
 8019856:	80da      	strh	r2, [r3, #6]
 8019858:	4770      	bx	lr
 801985a:	bf00      	nop
 801985c:	20197a2c 	.word	0x20197a2c

08019860 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8019860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019864:	4606      	mov	r6, r0
 8019866:	b09d      	sub	sp, #116	; 0x74
 8019868:	a803      	add	r0, sp, #12
 801986a:	4614      	mov	r4, r2
 801986c:	468a      	mov	sl, r1
 801986e:	461d      	mov	r5, r3
 8019870:	f000 fd7a 	bl	801a368 <_ZN8touchgfx12TextProviderC1Ev>
 8019874:	6833      	ldr	r3, [r6, #0]
 8019876:	4630      	mov	r0, r6
 8019878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801987a:	4798      	blx	r3
 801987c:	6833      	ldr	r3, [r6, #0]
 801987e:	4607      	mov	r7, r0
 8019880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019882:	4630      	mov	r0, r6
 8019884:	4798      	blx	r3
 8019886:	462a      	mov	r2, r5
 8019888:	2500      	movs	r5, #0
 801988a:	9000      	str	r0, [sp, #0]
 801988c:	4621      	mov	r1, r4
 801988e:	463b      	mov	r3, r7
 8019890:	a803      	add	r0, sp, #12
 8019892:	f000 fdbc 	bl	801a40e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019896:	462c      	mov	r4, r5
 8019898:	46a9      	mov	r9, r5
 801989a:	46a8      	mov	r8, r5
 801989c:	f242 0b0b 	movw	fp, #8203	; 0x200b
 80198a0:	2300      	movs	r3, #0
 80198a2:	9302      	str	r3, [sp, #8]
 80198a4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80198a8:	429c      	cmp	r4, r3
 80198aa:	d002      	beq.n	80198b2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 80198ac:	455c      	cmp	r4, fp
 80198ae:	bf18      	it	ne
 80198b0:	4625      	movne	r5, r4
 80198b2:	ab02      	add	r3, sp, #8
 80198b4:	4632      	mov	r2, r6
 80198b6:	4651      	mov	r1, sl
 80198b8:	a803      	add	r0, sp, #12
 80198ba:	f001 f897 	bl	801a9ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80198be:	4604      	mov	r4, r0
 80198c0:	b108      	cbz	r0, 80198c6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 80198c2:	280a      	cmp	r0, #10
 80198c4:	d10a      	bne.n	80198dc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 80198c6:	45c1      	cmp	r9, r8
 80198c8:	bf38      	it	cc
 80198ca:	46c1      	movcc	r9, r8
 80198cc:	f04f 0800 	mov.w	r8, #0
 80198d0:	2c00      	cmp	r4, #0
 80198d2:	d1e5      	bne.n	80198a0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80198d4:	4648      	mov	r0, r9
 80198d6:	b01d      	add	sp, #116	; 0x74
 80198d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198dc:	9a02      	ldr	r2, [sp, #8]
 80198de:	2a00      	cmp	r2, #0
 80198e0:	d0de      	beq.n	80198a0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80198e2:	7b57      	ldrb	r7, [r2, #13]
 80198e4:	6833      	ldr	r3, [r6, #0]
 80198e6:	007f      	lsls	r7, r7, #1
 80198e8:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80198ec:	7a97      	ldrb	r7, [r2, #10]
 80198ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80198f0:	4307      	orrs	r7, r0
 80198f2:	4629      	mov	r1, r5
 80198f4:	4630      	mov	r0, r6
 80198f6:	8894      	ldrh	r4, [r2, #4]
 80198f8:	4798      	blx	r3
 80198fa:	4438      	add	r0, r7
 80198fc:	4480      	add	r8, r0
 80198fe:	fa1f f888 	uxth.w	r8, r8
 8019902:	e7e5      	b.n	80198d0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08019904 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8019904:	b508      	push	{r3, lr}
 8019906:	6803      	ldr	r3, [r0, #0]
 8019908:	68db      	ldr	r3, [r3, #12]
 801990a:	4798      	blx	r3
 801990c:	b128      	cbz	r0, 801991a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801990e:	7b43      	ldrb	r3, [r0, #13]
 8019910:	7a80      	ldrb	r0, [r0, #10]
 8019912:	005b      	lsls	r3, r3, #1
 8019914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019918:	4318      	orrs	r0, r3
 801991a:	bd08      	pop	{r3, pc}

0801991c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801991c:	b40e      	push	{r1, r2, r3}
 801991e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019920:	4605      	mov	r5, r0
 8019922:	b09e      	sub	sp, #120	; 0x78
 8019924:	ab23      	add	r3, sp, #140	; 0x8c
 8019926:	f853 4b04 	ldr.w	r4, [r3], #4
 801992a:	a805      	add	r0, sp, #20
 801992c:	9303      	str	r3, [sp, #12]
 801992e:	f000 fd1b 	bl	801a368 <_ZN8touchgfx12TextProviderC1Ev>
 8019932:	682b      	ldr	r3, [r5, #0]
 8019934:	4628      	mov	r0, r5
 8019936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019938:	4798      	blx	r3
 801993a:	682b      	ldr	r3, [r5, #0]
 801993c:	4606      	mov	r6, r0
 801993e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019940:	4628      	mov	r0, r5
 8019942:	4798      	blx	r3
 8019944:	4621      	mov	r1, r4
 8019946:	2400      	movs	r4, #0
 8019948:	4633      	mov	r3, r6
 801994a:	9000      	str	r0, [sp, #0]
 801994c:	9a03      	ldr	r2, [sp, #12]
 801994e:	ae1e      	add	r6, sp, #120	; 0x78
 8019950:	a805      	add	r0, sp, #20
 8019952:	f000 fd5c 	bl	801a40e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019956:	f846 4d68 	str.w	r4, [r6, #-104]!
 801995a:	4633      	mov	r3, r6
 801995c:	462a      	mov	r2, r5
 801995e:	4621      	mov	r1, r4
 8019960:	a805      	add	r0, sp, #20
 8019962:	f001 f843 	bl	801a9ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019966:	b1f0      	cbz	r0, 80199a6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 8019968:	280a      	cmp	r0, #10
 801996a:	d018      	beq.n	801999e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801996c:	9f04      	ldr	r7, [sp, #16]
 801996e:	b1b7      	cbz	r7, 801999e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8019970:	7b78      	ldrb	r0, [r7, #13]
 8019972:	7a3b      	ldrb	r3, [r7, #8]
 8019974:	00c1      	lsls	r1, r0, #3
 8019976:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801997a:	4319      	orrs	r1, r3
 801997c:	0643      	lsls	r3, r0, #25
 801997e:	bf44      	itt	mi
 8019980:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8019984:	b219      	sxthmi	r1, r3
 8019986:	0100      	lsls	r0, r0, #4
 8019988:	79fb      	ldrb	r3, [r7, #7]
 801998a:	88ea      	ldrh	r2, [r5, #6]
 801998c:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8019990:	4303      	orrs	r3, r0
 8019992:	4413      	add	r3, r2
 8019994:	1a5b      	subs	r3, r3, r1
 8019996:	b21b      	sxth	r3, r3
 8019998:	429c      	cmp	r4, r3
 801999a:	bfb8      	it	lt
 801999c:	461c      	movlt	r4, r3
 801999e:	4633      	mov	r3, r6
 80199a0:	462a      	mov	r2, r5
 80199a2:	2100      	movs	r1, #0
 80199a4:	e7dc      	b.n	8019960 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 80199a6:	b2a0      	uxth	r0, r4
 80199a8:	b01e      	add	sp, #120	; 0x78
 80199aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80199ae:	b003      	add	sp, #12
 80199b0:	4770      	bx	lr

080199b2 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 80199b2:	7a43      	ldrb	r3, [r0, #9]
 80199b4:	8880      	ldrh	r0, [r0, #4]
 80199b6:	4418      	add	r0, r3
 80199b8:	b280      	uxth	r0, r0
 80199ba:	4770      	bx	lr

080199bc <_ZNK8touchgfx4Font13getFontHeightEv>:
 80199bc:	6803      	ldr	r3, [r0, #0]
 80199be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80199c0:	4718      	bx	r3

080199c2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80199c2:	b40e      	push	{r1, r2, r3}
 80199c4:	b570      	push	{r4, r5, r6, lr}
 80199c6:	4604      	mov	r4, r0
 80199c8:	b09d      	sub	sp, #116	; 0x74
 80199ca:	ab21      	add	r3, sp, #132	; 0x84
 80199cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80199d0:	a803      	add	r0, sp, #12
 80199d2:	9302      	str	r3, [sp, #8]
 80199d4:	f000 fcc8 	bl	801a368 <_ZN8touchgfx12TextProviderC1Ev>
 80199d8:	6823      	ldr	r3, [r4, #0]
 80199da:	4620      	mov	r0, r4
 80199dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80199de:	4798      	blx	r3
 80199e0:	6823      	ldr	r3, [r4, #0]
 80199e2:	4606      	mov	r6, r0
 80199e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80199e6:	4620      	mov	r0, r4
 80199e8:	4798      	blx	r3
 80199ea:	4633      	mov	r3, r6
 80199ec:	9000      	str	r0, [sp, #0]
 80199ee:	9a02      	ldr	r2, [sp, #8]
 80199f0:	4629      	mov	r1, r5
 80199f2:	a803      	add	r0, sp, #12
 80199f4:	f000 fd0b 	bl	801a40e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80199f8:	a803      	add	r0, sp, #12
 80199fa:	f001 f879 	bl	801aaf0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80199fe:	2401      	movs	r4, #1
 8019a00:	b2a3      	uxth	r3, r4
 8019a02:	b140      	cbz	r0, 8019a16 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 8019a04:	280a      	cmp	r0, #10
 8019a06:	bf08      	it	eq
 8019a08:	3301      	addeq	r3, #1
 8019a0a:	a803      	add	r0, sp, #12
 8019a0c:	bf08      	it	eq
 8019a0e:	b21c      	sxtheq	r4, r3
 8019a10:	f001 f86e 	bl	801aaf0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019a14:	e7f4      	b.n	8019a00 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8019a16:	4618      	mov	r0, r3
 8019a18:	b01d      	add	sp, #116	; 0x74
 8019a1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019a1e:	b003      	add	sp, #12
 8019a20:	4770      	bx	lr

08019a22 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8019a22:	b40e      	push	{r1, r2, r3}
 8019a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a26:	4604      	mov	r4, r0
 8019a28:	b09e      	sub	sp, #120	; 0x78
 8019a2a:	ab23      	add	r3, sp, #140	; 0x8c
 8019a2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8019a30:	a805      	add	r0, sp, #20
 8019a32:	9303      	str	r3, [sp, #12]
 8019a34:	f000 fc98 	bl	801a368 <_ZN8touchgfx12TextProviderC1Ev>
 8019a38:	6823      	ldr	r3, [r4, #0]
 8019a3a:	4620      	mov	r0, r4
 8019a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019a3e:	4798      	blx	r3
 8019a40:	6823      	ldr	r3, [r4, #0]
 8019a42:	4606      	mov	r6, r0
 8019a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019a46:	4620      	mov	r0, r4
 8019a48:	4798      	blx	r3
 8019a4a:	4633      	mov	r3, r6
 8019a4c:	4629      	mov	r1, r5
 8019a4e:	9000      	str	r0, [sp, #0]
 8019a50:	9a03      	ldr	r2, [sp, #12]
 8019a52:	a805      	add	r0, sp, #20
 8019a54:	f000 fcdb 	bl	801a40e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019a58:	2100      	movs	r1, #0
 8019a5a:	ad1e      	add	r5, sp, #120	; 0x78
 8019a5c:	f845 1d68 	str.w	r1, [r5, #-104]!
 8019a60:	462b      	mov	r3, r5
 8019a62:	4622      	mov	r2, r4
 8019a64:	a805      	add	r0, sp, #20
 8019a66:	f000 ffc1 	bl	801a9ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019a6a:	f647 76ff 	movw	r6, #32767	; 0x7fff
 8019a6e:	b1d8      	cbz	r0, 8019aa8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8019a70:	280a      	cmp	r0, #10
 8019a72:	d012      	beq.n	8019a9a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8019a74:	9804      	ldr	r0, [sp, #16]
 8019a76:	b180      	cbz	r0, 8019a9a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8019a78:	7b47      	ldrb	r7, [r0, #13]
 8019a7a:	88e2      	ldrh	r2, [r4, #6]
 8019a7c:	00fb      	lsls	r3, r7, #3
 8019a7e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019a82:	7a03      	ldrb	r3, [r0, #8]
 8019a84:	430b      	orrs	r3, r1
 8019a86:	0679      	lsls	r1, r7, #25
 8019a88:	bf44      	itt	mi
 8019a8a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019a8e:	b21b      	sxthmi	r3, r3
 8019a90:	1ad3      	subs	r3, r2, r3
 8019a92:	b21b      	sxth	r3, r3
 8019a94:	429e      	cmp	r6, r3
 8019a96:	bfa8      	it	ge
 8019a98:	461e      	movge	r6, r3
 8019a9a:	462b      	mov	r3, r5
 8019a9c:	4622      	mov	r2, r4
 8019a9e:	2100      	movs	r1, #0
 8019aa0:	a805      	add	r0, sp, #20
 8019aa2:	f000 ffa3 	bl	801a9ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019aa6:	e7e2      	b.n	8019a6e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8019aa8:	4630      	mov	r0, r6
 8019aaa:	b01e      	add	sp, #120	; 0x78
 8019aac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019ab0:	b003      	add	sp, #12
 8019ab2:	4770      	bx	lr

08019ab4 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8019ab4:	b513      	push	{r0, r1, r4, lr}
 8019ab6:	2400      	movs	r4, #0
 8019ab8:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8019abc:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019ac0:	6803      	ldr	r3, [r0, #0]
 8019ac2:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019ac6:	9400      	str	r4, [sp, #0]
 8019ac8:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019acc:	691b      	ldr	r3, [r3, #16]
 8019ace:	4669      	mov	r1, sp
 8019ad0:	4798      	blx	r3
 8019ad2:	b002      	add	sp, #8
 8019ad4:	bd10      	pop	{r4, pc}

08019ad6 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8019ad6:	b538      	push	{r3, r4, r5, lr}
 8019ad8:	460c      	mov	r4, r1
 8019ada:	4605      	mov	r5, r0
 8019adc:	680b      	ldr	r3, [r1, #0]
 8019ade:	68db      	ldr	r3, [r3, #12]
 8019ae0:	4798      	blx	r3
 8019ae2:	6823      	ldr	r3, [r4, #0]
 8019ae4:	4620      	mov	r0, r4
 8019ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ae8:	4629      	mov	r1, r5
 8019aea:	4798      	blx	r3
 8019aec:	4628      	mov	r0, r5
 8019aee:	bd38      	pop	{r3, r4, r5, pc}

08019af0 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8019af0:	b410      	push	{r4}
 8019af2:	880a      	ldrh	r2, [r1, #0]
 8019af4:	8884      	ldrh	r4, [r0, #4]
 8019af6:	4422      	add	r2, r4
 8019af8:	800a      	strh	r2, [r1, #0]
 8019afa:	88c4      	ldrh	r4, [r0, #6]
 8019afc:	884a      	ldrh	r2, [r1, #2]
 8019afe:	4422      	add	r2, r4
 8019b00:	804a      	strh	r2, [r1, #2]
 8019b02:	6940      	ldr	r0, [r0, #20]
 8019b04:	b120      	cbz	r0, 8019b10 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8019b06:	6803      	ldr	r3, [r0, #0]
 8019b08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b0e:	4718      	bx	r3
 8019b10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019b14:	4770      	bx	lr

08019b16 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8019b16:	b570      	push	{r4, r5, r6, lr}
 8019b18:	460c      	mov	r4, r1
 8019b1a:	8882      	ldrh	r2, [r0, #4]
 8019b1c:	880b      	ldrh	r3, [r1, #0]
 8019b1e:	4605      	mov	r5, r0
 8019b20:	4413      	add	r3, r2
 8019b22:	800b      	strh	r3, [r1, #0]
 8019b24:	88c2      	ldrh	r2, [r0, #6]
 8019b26:	884b      	ldrh	r3, [r1, #2]
 8019b28:	4413      	add	r3, r2
 8019b2a:	804b      	strh	r3, [r1, #2]
 8019b2c:	1d01      	adds	r1, r0, #4
 8019b2e:	4620      	mov	r0, r4
 8019b30:	f7fc fef6 	bl	8016920 <_ZN8touchgfx4RectaNERKS0_>
 8019b34:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019b38:	2b00      	cmp	r3, #0
 8019b3a:	dd0b      	ble.n	8019b54 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019b3c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	dd07      	ble.n	8019b54 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019b44:	6968      	ldr	r0, [r5, #20]
 8019b46:	b128      	cbz	r0, 8019b54 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019b48:	6803      	ldr	r3, [r0, #0]
 8019b4a:	4621      	mov	r1, r4
 8019b4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019b52:	4718      	bx	r3
 8019b54:	bd70      	pop	{r4, r5, r6, pc}
	...

08019b58 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8019b58:	b570      	push	{r4, r5, r6, lr}
 8019b5a:	460c      	mov	r4, r1
 8019b5c:	8882      	ldrh	r2, [r0, #4]
 8019b5e:	880b      	ldrh	r3, [r1, #0]
 8019b60:	4605      	mov	r5, r0
 8019b62:	4413      	add	r3, r2
 8019b64:	800b      	strh	r3, [r1, #0]
 8019b66:	88c2      	ldrh	r2, [r0, #6]
 8019b68:	884b      	ldrh	r3, [r1, #2]
 8019b6a:	4413      	add	r3, r2
 8019b6c:	804b      	strh	r3, [r1, #2]
 8019b6e:	1d01      	adds	r1, r0, #4
 8019b70:	4620      	mov	r0, r4
 8019b72:	f7fc fed5 	bl	8016920 <_ZN8touchgfx4RectaNERKS0_>
 8019b76:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019b7a:	2b00      	cmp	r3, #0
 8019b7c:	dd18      	ble.n	8019bb0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8019b7e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019b82:	2b00      	cmp	r3, #0
 8019b84:	dd14      	ble.n	8019bb0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8019b86:	6968      	ldr	r0, [r5, #20]
 8019b88:	b128      	cbz	r0, 8019b96 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8019b8a:	6803      	ldr	r3, [r0, #0]
 8019b8c:	4621      	mov	r1, r4
 8019b8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019b92:	691b      	ldr	r3, [r3, #16]
 8019b94:	4718      	bx	r3
 8019b96:	4b07      	ldr	r3, [pc, #28]	; (8019bb4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8019b98:	681b      	ldr	r3, [r3, #0]
 8019b9a:	3304      	adds	r3, #4
 8019b9c:	429d      	cmp	r5, r3
 8019b9e:	d107      	bne.n	8019bb0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8019ba0:	f7fe ff44 	bl	8018a2c <_ZN8touchgfx11Application11getInstanceEv>
 8019ba4:	6821      	ldr	r1, [r4, #0]
 8019ba6:	6862      	ldr	r2, [r4, #4]
 8019ba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019bac:	f7ff b85e 	b.w	8018c6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019bb0:	bd70      	pop	{r4, r5, r6, pc}
 8019bb2:	bf00      	nop
 8019bb4:	20197a24 	.word	0x20197a24

08019bb8 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8019bb8:	b570      	push	{r4, r5, r6, lr}
 8019bba:	4604      	mov	r4, r0
 8019bbc:	4616      	mov	r6, r2
 8019bbe:	460d      	mov	r5, r1
 8019bc0:	b901      	cbnz	r1, 8019bc4 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8019bc2:	b192      	cbz	r2, 8019bea <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8019bc4:	6823      	ldr	r3, [r4, #0]
 8019bc6:	4620      	mov	r0, r4
 8019bc8:	699b      	ldr	r3, [r3, #24]
 8019bca:	4798      	blx	r3
 8019bcc:	88e2      	ldrh	r2, [r4, #6]
 8019bce:	88a1      	ldrh	r1, [r4, #4]
 8019bd0:	4432      	add	r2, r6
 8019bd2:	4429      	add	r1, r5
 8019bd4:	4620      	mov	r0, r4
 8019bd6:	b212      	sxth	r2, r2
 8019bd8:	b209      	sxth	r1, r1
 8019bda:	f7fd f97f 	bl	8016edc <_ZN8touchgfx8Drawable5setXYEss>
 8019bde:	6823      	ldr	r3, [r4, #0]
 8019be0:	4620      	mov	r0, r4
 8019be2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019be6:	699b      	ldr	r3, [r3, #24]
 8019be8:	4718      	bx	r3
 8019bea:	bd70      	pop	{r4, r5, r6, pc}

08019bec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8019bec:	b510      	push	{r4, lr}
 8019bee:	2300      	movs	r3, #0
 8019bf0:	4604      	mov	r4, r0
 8019bf2:	4608      	mov	r0, r1
 8019bf4:	8023      	strh	r3, [r4, #0]
 8019bf6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019bfa:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8019bfe:	8063      	strh	r3, [r4, #2]
 8019c00:	6803      	ldr	r3, [r0, #0]
 8019c02:	80a1      	strh	r1, [r4, #4]
 8019c04:	80e2      	strh	r2, [r4, #6]
 8019c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019c08:	4621      	mov	r1, r4
 8019c0a:	4798      	blx	r3
 8019c0c:	4620      	mov	r0, r4
 8019c0e:	bd10      	pop	{r4, pc}

08019c10 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8019c10:	b530      	push	{r4, r5, lr}
 8019c12:	8083      	strh	r3, [r0, #4]
 8019c14:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8019c18:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8019c1c:	80c3      	strh	r3, [r0, #6]
 8019c1e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8019c22:	6141      	str	r1, [r0, #20]
 8019c24:	7203      	strb	r3, [r0, #8]
 8019c26:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8019c2a:	8302      	strh	r2, [r0, #24]
 8019c2c:	7243      	strb	r3, [r0, #9]
 8019c2e:	7a83      	ldrb	r3, [r0, #10]
 8019c30:	f365 0306 	bfi	r3, r5, #0, #7
 8019c34:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8019c38:	f365 13c7 	bfi	r3, r5, #7, #1
 8019c3c:	7283      	strb	r3, [r0, #10]
 8019c3e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8019c42:	72c3      	strb	r3, [r0, #11]
 8019c44:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8019c48:	7303      	strb	r3, [r0, #12]
 8019c4a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8019c4e:	81c3      	strh	r3, [r0, #14]
 8019c50:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8019c54:	8203      	strh	r3, [r0, #16]
 8019c56:	4b01      	ldr	r3, [pc, #4]	; (8019c5c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8019c58:	6003      	str	r3, [r0, #0]
 8019c5a:	bd30      	pop	{r4, r5, pc}
 8019c5c:	0802baa8 	.word	0x0802baa8

08019c60 <_ZNK8touchgfx9ConstFont4findEt>:
 8019c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c62:	6944      	ldr	r4, [r0, #20]
 8019c64:	b3bc      	cbz	r4, 8019cd6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019c66:	88a3      	ldrh	r3, [r4, #4]
 8019c68:	8b02      	ldrh	r2, [r0, #24]
 8019c6a:	1acb      	subs	r3, r1, r3
 8019c6c:	f102 32ff 	add.w	r2, r2, #4294967295
 8019c70:	d431      	bmi.n	8019cd6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019c72:	4293      	cmp	r3, r2
 8019c74:	dd0c      	ble.n	8019c90 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8019c76:	230e      	movs	r3, #14
 8019c78:	fb03 4302 	mla	r3, r3, r2, r4
 8019c7c:	889b      	ldrh	r3, [r3, #4]
 8019c7e:	1a5b      	subs	r3, r3, r1
 8019c80:	1ad3      	subs	r3, r2, r3
 8019c82:	429a      	cmp	r2, r3
 8019c84:	db27      	blt.n	8019cd6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019c86:	2b00      	cmp	r3, #0
 8019c88:	bfbc      	itt	lt
 8019c8a:	2302      	movlt	r3, #2
 8019c8c:	fb92 f3f3 	sdivlt	r3, r2, r3
 8019c90:	2500      	movs	r5, #0
 8019c92:	260e      	movs	r6, #14
 8019c94:	4295      	cmp	r5, r2
 8019c96:	dc1e      	bgt.n	8019cd6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019c98:	fb06 4003 	mla	r0, r6, r3, r4
 8019c9c:	8887      	ldrh	r7, [r0, #4]
 8019c9e:	42b9      	cmp	r1, r7
 8019ca0:	d01a      	beq.n	8019cd8 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8019ca2:	d20d      	bcs.n	8019cc0 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8019ca4:	1e5a      	subs	r2, r3, #1
 8019ca6:	4295      	cmp	r5, r2
 8019ca8:	dc15      	bgt.n	8019cd6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019caa:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8019cae:	1a5b      	subs	r3, r3, r1
 8019cb0:	1ad3      	subs	r3, r2, r3
 8019cb2:	429a      	cmp	r2, r3
 8019cb4:	db0f      	blt.n	8019cd6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019cb6:	429d      	cmp	r5, r3
 8019cb8:	ddec      	ble.n	8019c94 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019cba:	1953      	adds	r3, r2, r5
 8019cbc:	105b      	asrs	r3, r3, #1
 8019cbe:	e7e9      	b.n	8019c94 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019cc0:	1c5d      	adds	r5, r3, #1
 8019cc2:	42aa      	cmp	r2, r5
 8019cc4:	db07      	blt.n	8019cd6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019cc6:	8a43      	ldrh	r3, [r0, #18]
 8019cc8:	1acb      	subs	r3, r1, r3
 8019cca:	442b      	add	r3, r5
 8019ccc:	429d      	cmp	r5, r3
 8019cce:	dc02      	bgt.n	8019cd6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019cd0:	429a      	cmp	r2, r3
 8019cd2:	dadf      	bge.n	8019c94 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019cd4:	e7f1      	b.n	8019cba <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8019cd6:	2000      	movs	r0, #0
 8019cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019cda <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8019cda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019cdc:	4604      	mov	r4, r0
 8019cde:	4617      	mov	r7, r2
 8019ce0:	461e      	mov	r6, r3
 8019ce2:	b911      	cbnz	r1, 8019cea <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8019ce4:	2500      	movs	r5, #0
 8019ce6:	4628      	mov	r0, r5
 8019ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019cea:	290a      	cmp	r1, #10
 8019cec:	d0fa      	beq.n	8019ce4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019cee:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8019cf2:	4291      	cmp	r1, r2
 8019cf4:	d0f6      	beq.n	8019ce4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019cf6:	f242 020b 	movw	r2, #8203	; 0x200b
 8019cfa:	4291      	cmp	r1, r2
 8019cfc:	d0f2      	beq.n	8019ce4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019cfe:	f7ff ffaf 	bl	8019c60 <_ZNK8touchgfx9ConstFont4findEt>
 8019d02:	4605      	mov	r5, r0
 8019d04:	b950      	cbnz	r0, 8019d1c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8019d06:	6823      	ldr	r3, [r4, #0]
 8019d08:	4620      	mov	r0, r4
 8019d0a:	691b      	ldr	r3, [r3, #16]
 8019d0c:	4798      	blx	r3
 8019d0e:	4601      	mov	r1, r0
 8019d10:	4620      	mov	r0, r4
 8019d12:	f7ff ffa5 	bl	8019c60 <_ZNK8touchgfx9ConstFont4findEt>
 8019d16:	4605      	mov	r5, r0
 8019d18:	2800      	cmp	r0, #0
 8019d1a:	d0e3      	beq.n	8019ce4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019d1c:	6823      	ldr	r3, [r4, #0]
 8019d1e:	4629      	mov	r1, r5
 8019d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019d22:	4620      	mov	r0, r4
 8019d24:	4798      	blx	r3
 8019d26:	6038      	str	r0, [r7, #0]
 8019d28:	6823      	ldr	r3, [r4, #0]
 8019d2a:	4620      	mov	r0, r4
 8019d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019d2e:	4798      	blx	r3
 8019d30:	7030      	strb	r0, [r6, #0]
 8019d32:	e7d8      	b.n	8019ce6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08019d34 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8019d34:	2000      	movs	r0, #0
 8019d36:	4770      	bx	lr

08019d38 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8019d38:	2001      	movs	r0, #1
 8019d3a:	4770      	bx	lr

08019d3c <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8019d3c:	2002      	movs	r0, #2
 8019d3e:	4770      	bx	lr

08019d40 <_ZN8touchgfx6ScreenD1Ev>:
 8019d40:	4770      	bx	lr

08019d42 <_ZN8touchgfx12GestureEventD1Ev>:
 8019d42:	4770      	bx	lr

08019d44 <_ZN8touchgfx9DragEventD1Ev>:
 8019d44:	4770      	bx	lr

08019d46 <_ZN8touchgfx10ClickEventD1Ev>:
 8019d46:	4770      	bx	lr

08019d48 <_ZN8touchgfx10ClickEventD0Ev>:
 8019d48:	b510      	push	{r4, lr}
 8019d4a:	4604      	mov	r4, r0
 8019d4c:	210c      	movs	r1, #12
 8019d4e:	f00f f988 	bl	8029062 <_ZdlPvj>
 8019d52:	4620      	mov	r0, r4
 8019d54:	bd10      	pop	{r4, pc}

08019d56 <_ZN8touchgfx9DragEventD0Ev>:
 8019d56:	b510      	push	{r4, lr}
 8019d58:	4604      	mov	r4, r0
 8019d5a:	2110      	movs	r1, #16
 8019d5c:	f00f f981 	bl	8029062 <_ZdlPvj>
 8019d60:	4620      	mov	r0, r4
 8019d62:	bd10      	pop	{r4, pc}

08019d64 <_ZN8touchgfx12GestureEventD0Ev>:
 8019d64:	b510      	push	{r4, lr}
 8019d66:	4604      	mov	r4, r0
 8019d68:	210c      	movs	r1, #12
 8019d6a:	f00f f97a 	bl	8029062 <_ZdlPvj>
 8019d6e:	4620      	mov	r0, r4
 8019d70:	bd10      	pop	{r4, pc}

08019d72 <_ZN8touchgfx6ScreenD0Ev>:
 8019d72:	b510      	push	{r4, lr}
 8019d74:	4604      	mov	r4, r0
 8019d76:	213c      	movs	r1, #60	; 0x3c
 8019d78:	f00f f973 	bl	8029062 <_ZdlPvj>
 8019d7c:	4620      	mov	r0, r4
 8019d7e:	bd10      	pop	{r4, pc}

08019d80 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8019d80:	b530      	push	{r4, r5, lr}
 8019d82:	460d      	mov	r5, r1
 8019d84:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8019d86:	b087      	sub	sp, #28
 8019d88:	4604      	mov	r4, r0
 8019d8a:	b301      	cbz	r1, 8019dce <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8019d8c:	a801      	add	r0, sp, #4
 8019d8e:	f7ff ff2d 	bl	8019bec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019d92:	892a      	ldrh	r2, [r5, #8]
 8019d94:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019d98:	7928      	ldrb	r0, [r5, #4]
 8019d9a:	1ad2      	subs	r2, r2, r3
 8019d9c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019d9e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8019da2:	441a      	add	r2, r3
 8019da4:	896b      	ldrh	r3, [r5, #10]
 8019da6:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8019daa:	f88d 0010 	strb.w	r0, [sp, #16]
 8019dae:	1b5b      	subs	r3, r3, r5
 8019db0:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8019db2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8019db4:	442b      	add	r3, r5
 8019db6:	4d07      	ldr	r5, [pc, #28]	; (8019dd4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8019db8:	f8ad 1012 	strh.w	r1, [sp, #18]
 8019dbc:	9503      	str	r5, [sp, #12]
 8019dbe:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019dc2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019dc6:	6803      	ldr	r3, [r0, #0]
 8019dc8:	a903      	add	r1, sp, #12
 8019dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019dcc:	4798      	blx	r3
 8019dce:	b007      	add	sp, #28
 8019dd0:	bd30      	pop	{r4, r5, pc}
 8019dd2:	bf00      	nop
 8019dd4:	0802bb30 	.word	0x0802bb30

08019dd8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8019dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ddc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8019dde:	b08a      	sub	sp, #40	; 0x28
 8019de0:	4604      	mov	r4, r0
 8019de2:	460d      	mov	r5, r1
 8019de4:	b113      	cbz	r3, 8019dec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8019de6:	790b      	ldrb	r3, [r1, #4]
 8019de8:	2b00      	cmp	r3, #0
 8019dea:	d044      	beq.n	8019e76 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8019dec:	f104 0804 	add.w	r8, r4, #4
 8019df0:	4641      	mov	r1, r8
 8019df2:	a803      	add	r0, sp, #12
 8019df4:	f7ff fefa 	bl	8019bec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019df8:	792b      	ldrb	r3, [r5, #4]
 8019dfa:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8019dfe:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8019e02:	b983      	cbnz	r3, 8019e26 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8019e04:	892a      	ldrh	r2, [r5, #8]
 8019e06:	88e9      	ldrh	r1, [r5, #6]
 8019e08:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8019e0c:	1b92      	subs	r2, r2, r6
 8019e0e:	1bc9      	subs	r1, r1, r7
 8019e10:	9301      	str	r3, [sp, #4]
 8019e12:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8019e16:	9300      	str	r3, [sp, #0]
 8019e18:	b212      	sxth	r2, r2
 8019e1a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8019e1e:	b209      	sxth	r1, r1
 8019e20:	4640      	mov	r0, r8
 8019e22:	f7fc fc9d 	bl	8016760 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8019e26:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019e28:	b329      	cbz	r1, 8019e76 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8019e2a:	a805      	add	r0, sp, #20
 8019e2c:	f7ff fede 	bl	8019bec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019e30:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8019e34:	792b      	ldrb	r3, [r5, #4]
 8019e36:	1abf      	subs	r7, r7, r2
 8019e38:	88ea      	ldrh	r2, [r5, #6]
 8019e3a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8019e3c:	4417      	add	r7, r2
 8019e3e:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8019e40:	f88d 3020 	strb.w	r3, [sp, #32]
 8019e44:	4417      	add	r7, r2
 8019e46:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019e4a:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8019e4e:	1ab6      	subs	r6, r6, r2
 8019e50:	892a      	ldrh	r2, [r5, #8]
 8019e52:	a907      	add	r1, sp, #28
 8019e54:	4416      	add	r6, r2
 8019e56:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8019e58:	4416      	add	r6, r2
 8019e5a:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8019e5e:	2600      	movs	r6, #0
 8019e60:	4a06      	ldr	r2, [pc, #24]	; (8019e7c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8019e62:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8019e66:	9207      	str	r2, [sp, #28]
 8019e68:	6803      	ldr	r3, [r0, #0]
 8019e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019e6c:	4798      	blx	r3
 8019e6e:	792b      	ldrb	r3, [r5, #4]
 8019e70:	b10b      	cbz	r3, 8019e76 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8019e72:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8019e76:	b00a      	add	sp, #40	; 0x28
 8019e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e7c:	0802bb08 	.word	0x0802bb08

08019e80 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8019e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e84:	460c      	mov	r4, r1
 8019e86:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8019e88:	b088      	sub	sp, #32
 8019e8a:	4605      	mov	r5, r0
 8019e8c:	2900      	cmp	r1, #0
 8019e8e:	d06d      	beq.n	8019f6c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8019e90:	4668      	mov	r0, sp
 8019e92:	f7ff feab 	bl	8019bec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019e96:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8019e98:	88e3      	ldrh	r3, [r4, #6]
 8019e9a:	f9bd 8000 	ldrsh.w	r8, [sp]
 8019e9e:	440b      	add	r3, r1
 8019ea0:	b21b      	sxth	r3, r3
 8019ea2:	4543      	cmp	r3, r8
 8019ea4:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8019ea8:	db31      	blt.n	8019f0e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019eaa:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8019eae:	44c4      	add	ip, r8
 8019eb0:	fa0f fc8c 	sxth.w	ip, ip
 8019eb4:	4563      	cmp	r3, ip
 8019eb6:	da2a      	bge.n	8019f0e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019eb8:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8019eba:	8926      	ldrh	r6, [r4, #8]
 8019ebc:	4416      	add	r6, r2
 8019ebe:	b236      	sxth	r6, r6
 8019ec0:	42be      	cmp	r6, r7
 8019ec2:	db24      	blt.n	8019f0e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019ec4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8019ec8:	4438      	add	r0, r7
 8019eca:	b200      	sxth	r0, r0
 8019ecc:	4286      	cmp	r6, r0
 8019ece:	da1e      	bge.n	8019f0e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019ed0:	8963      	ldrh	r3, [r4, #10]
 8019ed2:	4419      	add	r1, r3
 8019ed4:	b209      	sxth	r1, r1
 8019ed6:	4541      	cmp	r1, r8
 8019ed8:	db08      	blt.n	8019eec <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8019eda:	4561      	cmp	r1, ip
 8019edc:	da06      	bge.n	8019eec <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8019ede:	89a3      	ldrh	r3, [r4, #12]
 8019ee0:	441a      	add	r2, r3
 8019ee2:	b212      	sxth	r2, r2
 8019ee4:	42ba      	cmp	r2, r7
 8019ee6:	db01      	blt.n	8019eec <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8019ee8:	4282      	cmp	r2, r0
 8019eea:	db10      	blt.n	8019f0e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019eec:	4b21      	ldr	r3, [pc, #132]	; (8019f74 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8019eee:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8019ef0:	9304      	str	r3, [sp, #16]
 8019ef2:	2302      	movs	r3, #2
 8019ef4:	f88d 3014 	strb.w	r3, [sp, #20]
 8019ef8:	2300      	movs	r3, #0
 8019efa:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019efe:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019f02:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019f06:	6803      	ldr	r3, [r0, #0]
 8019f08:	a904      	add	r1, sp, #16
 8019f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019f0c:	4798      	blx	r3
 8019f0e:	1d29      	adds	r1, r5, #4
 8019f10:	a802      	add	r0, sp, #8
 8019f12:	f7ff fe6b 	bl	8019bec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019f16:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019f1a:	88e0      	ldrh	r0, [r4, #6]
 8019f1c:	eba3 0808 	sub.w	r8, r3, r8
 8019f20:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019f24:	7921      	ldrb	r1, [r4, #4]
 8019f26:	1bdf      	subs	r7, r3, r7
 8019f28:	b2bb      	uxth	r3, r7
 8019f2a:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8019f2e:	fa1f f888 	uxth.w	r8, r8
 8019f32:	8922      	ldrh	r2, [r4, #8]
 8019f34:	8967      	ldrh	r7, [r4, #10]
 8019f36:	89a4      	ldrh	r4, [r4, #12]
 8019f38:	4440      	add	r0, r8
 8019f3a:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8019f3c:	4460      	add	r0, ip
 8019f3e:	441a      	add	r2, r3
 8019f40:	44b8      	add	r8, r7
 8019f42:	4423      	add	r3, r4
 8019f44:	4c0c      	ldr	r4, [pc, #48]	; (8019f78 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8019f46:	f8ad 0016 	strh.w	r0, [sp, #22]
 8019f4a:	4433      	add	r3, r6
 8019f4c:	4432      	add	r2, r6
 8019f4e:	44e0      	add	r8, ip
 8019f50:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8019f52:	f88d 1014 	strb.w	r1, [sp, #20]
 8019f56:	9404      	str	r4, [sp, #16]
 8019f58:	f8ad 2018 	strh.w	r2, [sp, #24]
 8019f5c:	f8ad 801a 	strh.w	r8, [sp, #26]
 8019f60:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019f64:	6803      	ldr	r3, [r0, #0]
 8019f66:	a904      	add	r1, sp, #16
 8019f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019f6a:	4798      	blx	r3
 8019f6c:	b008      	add	sp, #32
 8019f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f72:	bf00      	nop
 8019f74:	0802bb08 	.word	0x0802bb08
 8019f78:	0802bb1c 	.word	0x0802bb1c

08019f7c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8019f7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019f7e:	4604      	mov	r4, r0
 8019f80:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8019f84:	3201      	adds	r2, #1
 8019f86:	d112      	bne.n	8019fae <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8019f88:	2500      	movs	r5, #0
 8019f8a:	9500      	str	r5, [sp, #0]
 8019f8c:	466d      	mov	r5, sp
 8019f8e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8019f92:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019f96:	6803      	ldr	r3, [r0, #0]
 8019f98:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019f9c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019fa0:	4629      	mov	r1, r5
 8019fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019fa4:	4798      	blx	r3
 8019fa6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019faa:	e884 0003 	stmia.w	r4, {r0, r1}
 8019fae:	4620      	mov	r0, r4
 8019fb0:	b003      	add	sp, #12
 8019fb2:	bd30      	pop	{r4, r5, pc}

08019fb4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8019fb4:	b513      	push	{r0, r1, r4, lr}
 8019fb6:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8019fba:	4604      	mov	r4, r0
 8019fbc:	3301      	adds	r3, #1
 8019fbe:	d109      	bne.n	8019fd4 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8019fc0:	4601      	mov	r1, r0
 8019fc2:	4668      	mov	r0, sp
 8019fc4:	f7ff fe12 	bl	8019bec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019fc8:	f8bd 3000 	ldrh.w	r3, [sp]
 8019fcc:	8423      	strh	r3, [r4, #32]
 8019fce:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019fd2:	8463      	strh	r3, [r4, #34]	; 0x22
 8019fd4:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8019fd8:	b002      	add	sp, #8
 8019fda:	bd10      	pop	{r4, pc}

08019fdc <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8019fdc:	b513      	push	{r0, r1, r4, lr}
 8019fde:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8019fe2:	4604      	mov	r4, r0
 8019fe4:	3301      	adds	r3, #1
 8019fe6:	d109      	bne.n	8019ffc <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8019fe8:	4601      	mov	r1, r0
 8019fea:	4668      	mov	r0, sp
 8019fec:	f7ff fdfe 	bl	8019bec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019ff0:	f8bd 3000 	ldrh.w	r3, [sp]
 8019ff4:	8423      	strh	r3, [r4, #32]
 8019ff6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019ffa:	8463      	strh	r3, [r4, #34]	; 0x22
 8019ffc:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801a000:	b002      	add	sp, #8
 801a002:	bd10      	pop	{r4, pc}

0801a004 <_ZN8touchgfx6ScreenC1Ev>:
 801a004:	b570      	push	{r4, r5, r6, lr}
 801a006:	4605      	mov	r5, r0
 801a008:	4b16      	ldr	r3, [pc, #88]	; (801a064 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801a00a:	2101      	movs	r1, #1
 801a00c:	f845 3b04 	str.w	r3, [r5], #4
 801a010:	2300      	movs	r3, #0
 801a012:	4604      	mov	r4, r0
 801a014:	8103      	strh	r3, [r0, #8]
 801a016:	8143      	strh	r3, [r0, #10]
 801a018:	8183      	strh	r3, [r0, #12]
 801a01a:	81c3      	strh	r3, [r0, #14]
 801a01c:	8203      	strh	r3, [r0, #16]
 801a01e:	8243      	strh	r3, [r0, #18]
 801a020:	8283      	strh	r3, [r0, #20]
 801a022:	82c3      	strh	r3, [r0, #22]
 801a024:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801a028:	6203      	str	r3, [r0, #32]
 801a02a:	8483      	strh	r3, [r0, #36]	; 0x24
 801a02c:	84c3      	strh	r3, [r0, #38]	; 0x26
 801a02e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801a032:	4a0d      	ldr	r2, [pc, #52]	; (801a068 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801a034:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801a038:	6343      	str	r3, [r0, #52]	; 0x34
 801a03a:	4b0c      	ldr	r3, [pc, #48]	; (801a06c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801a03c:	6042      	str	r2, [r0, #4]
 801a03e:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a042:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801a044:	4a0a      	ldr	r2, [pc, #40]	; (801a070 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801a046:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801a04a:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801a04e:	f9b2 1000 	ldrsh.w	r1, [r2]
 801a052:	4628      	mov	r0, r5
 801a054:	4798      	blx	r3
 801a056:	6863      	ldr	r3, [r4, #4]
 801a058:	4628      	mov	r0, r5
 801a05a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a05c:	4631      	mov	r1, r6
 801a05e:	4798      	blx	r3
 801a060:	4620      	mov	r0, r4
 801a062:	bd70      	pop	{r4, r5, r6, pc}
 801a064:	0802bb44 	.word	0x0802bb44
 801a068:	0802b934 	.word	0x0802b934
 801a06c:	201979de 	.word	0x201979de
 801a070:	201979dc 	.word	0x201979dc

0801a074 <_ZN8touchgfx6Screen4drawEv>:
 801a074:	b507      	push	{r0, r1, r2, lr}
 801a076:	2100      	movs	r1, #0
 801a078:	4b08      	ldr	r3, [pc, #32]	; (801a09c <_ZN8touchgfx6Screen4drawEv+0x28>)
 801a07a:	9100      	str	r1, [sp, #0]
 801a07c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a080:	4b07      	ldr	r3, [pc, #28]	; (801a0a0 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801a082:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a086:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a08a:	4669      	mov	r1, sp
 801a08c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a090:	6803      	ldr	r3, [r0, #0]
 801a092:	689b      	ldr	r3, [r3, #8]
 801a094:	4798      	blx	r3
 801a096:	b003      	add	sp, #12
 801a098:	f85d fb04 	ldr.w	pc, [sp], #4
 801a09c:	201979dc 	.word	0x201979dc
 801a0a0:	201979de 	.word	0x201979de

0801a0a4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801a0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0a8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801a0ac:	b089      	sub	sp, #36	; 0x24
 801a0ae:	2b00      	cmp	r3, #0
 801a0b0:	4680      	mov	r8, r0
 801a0b2:	460c      	mov	r4, r1
 801a0b4:	4615      	mov	r5, r2
 801a0b6:	dd0e      	ble.n	801a0d6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a0b8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	dd0a      	ble.n	801a0d6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a0c0:	4628      	mov	r0, r5
 801a0c2:	f7ff ff5b 	bl	8019f7c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a0c6:	4621      	mov	r1, r4
 801a0c8:	f7fe fbd1 	bl	801886e <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a0cc:	69eb      	ldr	r3, [r5, #28]
 801a0ce:	b928      	cbnz	r0, 801a0dc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801a0d0:	461d      	mov	r5, r3
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	d1f4      	bne.n	801a0c0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801a0d6:	b009      	add	sp, #36	; 0x24
 801a0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0dc:	ae04      	add	r6, sp, #16
 801a0de:	2b00      	cmp	r3, #0
 801a0e0:	f000 80b5 	beq.w	801a24e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a0e4:	682b      	ldr	r3, [r5, #0]
 801a0e6:	4629      	mov	r1, r5
 801a0e8:	68db      	ldr	r3, [r3, #12]
 801a0ea:	a802      	add	r0, sp, #8
 801a0ec:	4798      	blx	r3
 801a0ee:	4628      	mov	r0, r5
 801a0f0:	f7ff ff60 	bl	8019fb4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a0f4:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801a0f8:	4407      	add	r7, r0
 801a0fa:	4628      	mov	r0, r5
 801a0fc:	f7ff ff6e 	bl	8019fdc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a100:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a104:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801a108:	4418      	add	r0, r3
 801a10a:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801a10e:	4621      	mov	r1, r4
 801a110:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a114:	b23f      	sxth	r7, r7
 801a116:	4630      	mov	r0, r6
 801a118:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a11c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a120:	f8ad 7010 	strh.w	r7, [sp, #16]
 801a124:	f7fc fbfc 	bl	8016920 <_ZN8touchgfx4RectaNERKS0_>
 801a128:	4628      	mov	r0, r5
 801a12a:	f7ff ff27 	bl	8019f7c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a12e:	4602      	mov	r2, r0
 801a130:	e896 0003 	ldmia.w	r6, {r0, r1}
 801a134:	ab06      	add	r3, sp, #24
 801a136:	e883 0003 	stmia.w	r3, {r0, r1}
 801a13a:	4611      	mov	r1, r2
 801a13c:	4618      	mov	r0, r3
 801a13e:	f7fc fbef 	bl	8016920 <_ZN8touchgfx4RectaNERKS0_>
 801a142:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801a146:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a14a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801a14e:	4299      	cmp	r1, r3
 801a150:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801a154:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801a158:	d10b      	bne.n	801a172 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a15a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a15e:	4552      	cmp	r2, sl
 801a160:	d107      	bne.n	801a172 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a162:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a166:	455a      	cmp	r2, fp
 801a168:	d103      	bne.n	801a172 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a16a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801a16e:	454a      	cmp	r2, r9
 801a170:	d06d      	beq.n	801a24e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a172:	f1bb 0f00 	cmp.w	fp, #0
 801a176:	dd65      	ble.n	801a244 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801a178:	f1b9 0f00 	cmp.w	r9, #0
 801a17c:	dd62      	ble.n	801a244 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801a17e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a182:	fa1f f08a 	uxth.w	r0, sl
 801a186:	4552      	cmp	r2, sl
 801a188:	9000      	str	r0, [sp, #0]
 801a18a:	da12      	bge.n	801a1b2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801a18c:	9301      	str	r3, [sp, #4]
 801a18e:	9b00      	ldr	r3, [sp, #0]
 801a190:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a194:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a198:	1a9a      	subs	r2, r3, r2
 801a19a:	f8ad 1010 	strh.w	r1, [sp, #16]
 801a19e:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a1a2:	f8ad 2016 	strh.w	r2, [sp, #22]
 801a1a6:	69ea      	ldr	r2, [r5, #28]
 801a1a8:	4631      	mov	r1, r6
 801a1aa:	4640      	mov	r0, r8
 801a1ac:	f7ff ff7a 	bl	801a0a4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a1b0:	9b01      	ldr	r3, [sp, #4]
 801a1b2:	f9b4 2000 	ldrsh.w	r2, [r4]
 801a1b6:	b29f      	uxth	r7, r3
 801a1b8:	429a      	cmp	r2, r3
 801a1ba:	da0d      	bge.n	801a1d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801a1bc:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a1c0:	1aba      	subs	r2, r7, r2
 801a1c2:	f8ad a012 	strh.w	sl, [sp, #18]
 801a1c6:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a1ca:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a1ce:	69ea      	ldr	r2, [r5, #28]
 801a1d0:	4631      	mov	r1, r6
 801a1d2:	4640      	mov	r0, r8
 801a1d4:	f7ff ff66 	bl	801a0a4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a1d8:	8822      	ldrh	r2, [r4, #0]
 801a1da:	88a3      	ldrh	r3, [r4, #4]
 801a1dc:	445f      	add	r7, fp
 801a1de:	4413      	add	r3, r2
 801a1e0:	b29b      	uxth	r3, r3
 801a1e2:	b2bf      	uxth	r7, r7
 801a1e4:	b23a      	sxth	r2, r7
 801a1e6:	b219      	sxth	r1, r3
 801a1e8:	4291      	cmp	r1, r2
 801a1ea:	dd0d      	ble.n	801a208 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801a1ec:	1bdb      	subs	r3, r3, r7
 801a1ee:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a1f2:	f8ad a012 	strh.w	sl, [sp, #18]
 801a1f6:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a1fa:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a1fe:	69ea      	ldr	r2, [r5, #28]
 801a200:	4631      	mov	r1, r6
 801a202:	4640      	mov	r0, r8
 801a204:	f7ff ff4e 	bl	801a0a4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a208:	88e2      	ldrh	r2, [r4, #6]
 801a20a:	8863      	ldrh	r3, [r4, #2]
 801a20c:	4413      	add	r3, r2
 801a20e:	9a00      	ldr	r2, [sp, #0]
 801a210:	b29b      	uxth	r3, r3
 801a212:	444a      	add	r2, r9
 801a214:	fa1f f982 	uxth.w	r9, r2
 801a218:	fa0f f289 	sxth.w	r2, r9
 801a21c:	b219      	sxth	r1, r3
 801a21e:	428a      	cmp	r2, r1
 801a220:	da15      	bge.n	801a24e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a222:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a226:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a22a:	eba3 0309 	sub.w	r3, r3, r9
 801a22e:	f8ad 1014 	strh.w	r1, [sp, #20]
 801a232:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a236:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a23a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a23e:	69ea      	ldr	r2, [r5, #28]
 801a240:	4631      	mov	r1, r6
 801a242:	e001      	b.n	801a248 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801a244:	4621      	mov	r1, r4
 801a246:	69ea      	ldr	r2, [r5, #28]
 801a248:	4640      	mov	r0, r8
 801a24a:	f7ff ff2b 	bl	801a0a4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a24e:	4628      	mov	r0, r5
 801a250:	f7ff fe94 	bl	8019f7c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a254:	4633      	mov	r3, r6
 801a256:	4602      	mov	r2, r0
 801a258:	6861      	ldr	r1, [r4, #4]
 801a25a:	6820      	ldr	r0, [r4, #0]
 801a25c:	c303      	stmia	r3!, {r0, r1}
 801a25e:	4611      	mov	r1, r2
 801a260:	4630      	mov	r0, r6
 801a262:	f7fc fb5d 	bl	8016920 <_ZN8touchgfx4RectaNERKS0_>
 801a266:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801a26a:	2b00      	cmp	r3, #0
 801a26c:	f77f af33 	ble.w	801a0d6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a270:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801a274:	2b00      	cmp	r3, #0
 801a276:	f77f af2e 	ble.w	801a0d6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a27a:	4628      	mov	r0, r5
 801a27c:	f7ff fe9a 	bl	8019fb4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a280:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801a284:	1a18      	subs	r0, r3, r0
 801a286:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a28a:	4628      	mov	r0, r5
 801a28c:	f7ff fea6 	bl	8019fdc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a290:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801a294:	4631      	mov	r1, r6
 801a296:	1a18      	subs	r0, r3, r0
 801a298:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a29c:	682b      	ldr	r3, [r5, #0]
 801a29e:	4628      	mov	r0, r5
 801a2a0:	689b      	ldr	r3, [r3, #8]
 801a2a2:	4798      	blx	r3
 801a2a4:	e717      	b.n	801a0d6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801a2a6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801a2a6:	b570      	push	{r4, r5, r6, lr}
 801a2a8:	2300      	movs	r3, #0
 801a2aa:	460c      	mov	r4, r1
 801a2ac:	b086      	sub	sp, #24
 801a2ae:	1d06      	adds	r6, r0, #4
 801a2b0:	4631      	mov	r1, r6
 801a2b2:	4605      	mov	r5, r0
 801a2b4:	a802      	add	r0, sp, #8
 801a2b6:	9301      	str	r3, [sp, #4]
 801a2b8:	f7ff fc98 	bl	8019bec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a2bc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a2c0:	8822      	ldrh	r2, [r4, #0]
 801a2c2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801a2c6:	1ad2      	subs	r2, r2, r3
 801a2c8:	8863      	ldrh	r3, [r4, #2]
 801a2ca:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a2ce:	1a5b      	subs	r3, r3, r1
 801a2d0:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801a2d4:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a2d8:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a2dc:	f8ad 1016 	strh.w	r1, [sp, #22]
 801a2e0:	aa01      	add	r2, sp, #4
 801a2e2:	a904      	add	r1, sp, #16
 801a2e4:	4630      	mov	r0, r6
 801a2e6:	f8ad 3012 	strh.w	r3, [sp, #18]
 801a2ea:	f7fc fbf1 	bl	8016ad0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801a2ee:	9a01      	ldr	r2, [sp, #4]
 801a2f0:	b11a      	cbz	r2, 801a2fa <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801a2f2:	4621      	mov	r1, r4
 801a2f4:	4628      	mov	r0, r5
 801a2f6:	f7ff fed5 	bl	801a0a4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a2fa:	b006      	add	sp, #24
 801a2fc:	bd70      	pop	{r4, r5, r6, pc}

0801a2fe <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801a2fe:	b530      	push	{r4, r5, lr}
 801a300:	4602      	mov	r2, r0
 801a302:	b085      	sub	sp, #20
 801a304:	460d      	mov	r5, r1
 801a306:	466b      	mov	r3, sp
 801a308:	4604      	mov	r4, r0
 801a30a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801a30e:	6851      	ldr	r1, [r2, #4]
 801a310:	c303      	stmia	r3!, {r0, r1}
 801a312:	4629      	mov	r1, r5
 801a314:	4668      	mov	r0, sp
 801a316:	f7fc fb03 	bl	8016920 <_ZN8touchgfx4RectaNERKS0_>
 801a31a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a31e:	b12b      	cbz	r3, 801a32c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801a320:	4669      	mov	r1, sp
 801a322:	4620      	mov	r0, r4
 801a324:	f7ff ffbf 	bl	801a2a6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801a328:	b005      	add	sp, #20
 801a32a:	bd30      	pop	{r4, r5, pc}
 801a32c:	3404      	adds	r4, #4
 801a32e:	4621      	mov	r1, r4
 801a330:	a802      	add	r0, sp, #8
 801a332:	f7ff fc5b 	bl	8019bec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a336:	f8bd 3000 	ldrh.w	r3, [sp]
 801a33a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801a33e:	4669      	mov	r1, sp
 801a340:	1a9b      	subs	r3, r3, r2
 801a342:	f8ad 3000 	strh.w	r3, [sp]
 801a346:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801a34a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a34e:	4620      	mov	r0, r4
 801a350:	1a9b      	subs	r3, r3, r2
 801a352:	f8ad 3002 	strh.w	r3, [sp, #2]
 801a356:	f7fc fb82 	bl	8016a5e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801a35a:	e7e5      	b.n	801a328 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801a35c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801a35c:	460b      	mov	r3, r1
 801a35e:	680a      	ldr	r2, [r1, #0]
 801a360:	1d01      	adds	r1, r0, #4
 801a362:	6992      	ldr	r2, [r2, #24]
 801a364:	4618      	mov	r0, r3
 801a366:	4710      	bx	r2

0801a368 <_ZN8touchgfx12TextProviderC1Ev>:
 801a368:	b538      	push	{r3, r4, r5, lr}
 801a36a:	2500      	movs	r5, #0
 801a36c:	2302      	movs	r3, #2
 801a36e:	4604      	mov	r4, r0
 801a370:	e9c0 5500 	strd	r5, r5, [r0]
 801a374:	7403      	strb	r3, [r0, #16]
 801a376:	6145      	str	r5, [r0, #20]
 801a378:	7605      	strb	r5, [r0, #24]
 801a37a:	83c5      	strh	r5, [r0, #30]
 801a37c:	8405      	strh	r5, [r0, #32]
 801a37e:	86c5      	strh	r5, [r0, #54]	; 0x36
 801a380:	8705      	strh	r5, [r0, #56]	; 0x38
 801a382:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801a384:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801a388:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801a38c:	220e      	movs	r2, #14
 801a38e:	4629      	mov	r1, r5
 801a390:	304c      	adds	r0, #76	; 0x4c
 801a392:	f00e ff11 	bl	80291b8 <memset>
 801a396:	2301      	movs	r3, #1
 801a398:	4620      	mov	r0, r4
 801a39a:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801a39e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801a3a2:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801a3a6:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801a3aa:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801a3ae:	f7e9 faed 	bl	800398c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801a3b2:	4620      	mov	r0, r4
 801a3b4:	bd38      	pop	{r3, r4, r5, pc}

0801a3b6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801a3b6:	b530      	push	{r4, r5, lr}
 801a3b8:	2500      	movs	r5, #0
 801a3ba:	2401      	movs	r4, #1
 801a3bc:	6843      	ldr	r3, [r0, #4]
 801a3be:	b913      	cbnz	r3, 801a3c6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801a3c0:	6803      	ldr	r3, [r0, #0]
 801a3c2:	b313      	cbz	r3, 801a40a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801a3c4:	6043      	str	r3, [r0, #4]
 801a3c6:	7e03      	ldrb	r3, [r0, #24]
 801a3c8:	b143      	cbz	r3, 801a3dc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801a3ca:	6943      	ldr	r3, [r0, #20]
 801a3cc:	b12b      	cbz	r3, 801a3da <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a3ce:	881a      	ldrh	r2, [r3, #0]
 801a3d0:	b11a      	cbz	r2, 801a3da <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a3d2:	1c9a      	adds	r2, r3, #2
 801a3d4:	6142      	str	r2, [r0, #20]
 801a3d6:	8818      	ldrh	r0, [r3, #0]
 801a3d8:	bd30      	pop	{r4, r5, pc}
 801a3da:	7605      	strb	r5, [r0, #24]
 801a3dc:	6843      	ldr	r3, [r0, #4]
 801a3de:	8819      	ldrh	r1, [r3, #0]
 801a3e0:	b199      	cbz	r1, 801a40a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801a3e2:	1c9a      	adds	r2, r3, #2
 801a3e4:	2902      	cmp	r1, #2
 801a3e6:	6042      	str	r2, [r0, #4]
 801a3e8:	d1f5      	bne.n	801a3d6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801a3ea:	7c03      	ldrb	r3, [r0, #16]
 801a3ec:	2b01      	cmp	r3, #1
 801a3ee:	d8e5      	bhi.n	801a3bc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a3f0:	1c5a      	adds	r2, r3, #1
 801a3f2:	7402      	strb	r2, [r0, #16]
 801a3f4:	3302      	adds	r3, #2
 801a3f6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801a3fa:	6143      	str	r3, [r0, #20]
 801a3fc:	2b00      	cmp	r3, #0
 801a3fe:	d0dd      	beq.n	801a3bc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a400:	881b      	ldrh	r3, [r3, #0]
 801a402:	2b00      	cmp	r3, #0
 801a404:	d0da      	beq.n	801a3bc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a406:	7604      	strb	r4, [r0, #24]
 801a408:	e7d8      	b.n	801a3bc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a40a:	2000      	movs	r0, #0
 801a40c:	e7e4      	b.n	801a3d8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801a40e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801a40e:	6001      	str	r1, [r0, #0]
 801a410:	2100      	movs	r1, #0
 801a412:	b430      	push	{r4, r5}
 801a414:	6041      	str	r1, [r0, #4]
 801a416:	6815      	ldr	r5, [r2, #0]
 801a418:	6085      	str	r5, [r0, #8]
 801a41a:	6852      	ldr	r2, [r2, #4]
 801a41c:	6443      	str	r3, [r0, #68]	; 0x44
 801a41e:	9b02      	ldr	r3, [sp, #8]
 801a420:	60c2      	str	r2, [r0, #12]
 801a422:	7401      	strb	r1, [r0, #16]
 801a424:	6141      	str	r1, [r0, #20]
 801a426:	7601      	strb	r1, [r0, #24]
 801a428:	8701      	strh	r1, [r0, #56]	; 0x38
 801a42a:	8401      	strh	r1, [r0, #32]
 801a42c:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801a430:	6483      	str	r3, [r0, #72]	; 0x48
 801a432:	bc30      	pop	{r4, r5}
 801a434:	f7e9 baaa 	b.w	800398c <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801a438 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801a438:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a43a:	4605      	mov	r5, r0
 801a43c:	4608      	mov	r0, r1
 801a43e:	b1e9      	cbz	r1, 801a47c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 801a440:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801a444:	460b      	mov	r3, r1
 801a446:	4622      	mov	r2, r4
 801a448:	f101 0708 	add.w	r7, r1, #8
 801a44c:	4626      	mov	r6, r4
 801a44e:	6818      	ldr	r0, [r3, #0]
 801a450:	6859      	ldr	r1, [r3, #4]
 801a452:	3308      	adds	r3, #8
 801a454:	c603      	stmia	r6!, {r0, r1}
 801a456:	42bb      	cmp	r3, r7
 801a458:	4634      	mov	r4, r6
 801a45a:	d1f7      	bne.n	801a44c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801a45c:	6818      	ldr	r0, [r3, #0]
 801a45e:	6030      	str	r0, [r6, #0]
 801a460:	4610      	mov	r0, r2
 801a462:	889b      	ldrh	r3, [r3, #4]
 801a464:	80b3      	strh	r3, [r6, #4]
 801a466:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801a46a:	015b      	lsls	r3, r3, #5
 801a46c:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801a470:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801a474:	430b      	orrs	r3, r1
 801a476:	425b      	negs	r3, r3
 801a478:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801a47c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a47e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801a47e:	b538      	push	{r3, r4, r5, lr}
 801a480:	460c      	mov	r4, r1
 801a482:	6811      	ldr	r1, [r2, #0]
 801a484:	4610      	mov	r0, r2
 801a486:	68cd      	ldr	r5, [r1, #12]
 801a488:	4619      	mov	r1, r3
 801a48a:	47a8      	blx	r5
 801a48c:	2800      	cmp	r0, #0
 801a48e:	bf08      	it	eq
 801a490:	4620      	moveq	r0, r4
 801a492:	bd38      	pop	{r3, r4, r5, pc}

0801a494 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801a494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a496:	4604      	mov	r4, r0
 801a498:	4615      	mov	r5, r2
 801a49a:	4608      	mov	r0, r1
 801a49c:	b93a      	cbnz	r2, 801a4ae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a49e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801a4a2:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801a4a6:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801a4aa:	4628      	mov	r0, r5
 801a4ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a4ae:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801a4b2:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801a4b6:	8893      	ldrh	r3, [r2, #4]
 801a4b8:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801a4bc:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801a4c0:	79ee      	ldrb	r6, [r5, #7]
 801a4c2:	4316      	orrs	r6, r2
 801a4c4:	19da      	adds	r2, r3, r7
 801a4c6:	b291      	uxth	r1, r2
 801a4c8:	291d      	cmp	r1, #29
 801a4ca:	b2b7      	uxth	r7, r6
 801a4cc:	d879      	bhi.n	801a5c2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 801a4ce:	2201      	movs	r2, #1
 801a4d0:	408a      	lsls	r2, r1
 801a4d2:	4974      	ldr	r1, [pc, #464]	; (801a6a4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x210>)
 801a4d4:	10f6      	asrs	r6, r6, #3
 801a4d6:	420a      	tst	r2, r1
 801a4d8:	d12d      	bne.n	801a536 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa2>
 801a4da:	f412 7f60 	tst.w	r2, #896	; 0x380
 801a4de:	d070      	beq.n	801a5c2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 801a4e0:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801a4e4:	462b      	mov	r3, r5
 801a4e6:	f105 0e08 	add.w	lr, r5, #8
 801a4ea:	4615      	mov	r5, r2
 801a4ec:	4694      	mov	ip, r2
 801a4ee:	6818      	ldr	r0, [r3, #0]
 801a4f0:	6859      	ldr	r1, [r3, #4]
 801a4f2:	3308      	adds	r3, #8
 801a4f4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801a4f8:	4573      	cmp	r3, lr
 801a4fa:	4662      	mov	r2, ip
 801a4fc:	d1f6      	bne.n	801a4ec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801a4fe:	6818      	ldr	r0, [r3, #0]
 801a500:	f8cc 0000 	str.w	r0, [ip]
 801a504:	889b      	ldrh	r3, [r3, #4]
 801a506:	f8ac 3004 	strh.w	r3, [ip, #4]
 801a50a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801a50e:	b2b3      	uxth	r3, r6
 801a510:	1aca      	subs	r2, r1, r3
 801a512:	b292      	uxth	r2, r2
 801a514:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801a518:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801a51c:	10d2      	asrs	r2, r2, #3
 801a51e:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801a522:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801a526:	4302      	orrs	r2, r0
 801a528:	1bcf      	subs	r7, r1, r7
 801a52a:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801a52e:	1afb      	subs	r3, r7, r3
 801a530:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801a534:	e7b9      	b.n	801a4aa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801a536:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801a538:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a53c:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801a53e:	f640 6333 	movw	r3, #3635	; 0xe33
 801a542:	4299      	cmp	r1, r3
 801a544:	d110      	bne.n	801a568 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd4>
 801a546:	6803      	ldr	r3, [r0, #0]
 801a548:	68db      	ldr	r3, [r3, #12]
 801a54a:	4798      	blx	r3
 801a54c:	7b41      	ldrb	r1, [r0, #13]
 801a54e:	00cb      	lsls	r3, r1, #3
 801a550:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a554:	7a03      	ldrb	r3, [r0, #8]
 801a556:	0648      	lsls	r0, r1, #25
 801a558:	ea43 0302 	orr.w	r3, r3, r2
 801a55c:	bf44      	itt	mi
 801a55e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a562:	b21b      	sxthmi	r3, r3
 801a564:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a568:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801a56c:	462a      	mov	r2, r5
 801a56e:	443b      	add	r3, r7
 801a570:	4433      	add	r3, r6
 801a572:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801a576:	f105 0c08 	add.w	ip, r5, #8
 801a57a:	4635      	mov	r5, r6
 801a57c:	b29b      	uxth	r3, r3
 801a57e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a582:	4637      	mov	r7, r6
 801a584:	6810      	ldr	r0, [r2, #0]
 801a586:	6851      	ldr	r1, [r2, #4]
 801a588:	3208      	adds	r2, #8
 801a58a:	c703      	stmia	r7!, {r0, r1}
 801a58c:	4562      	cmp	r2, ip
 801a58e:	463e      	mov	r6, r7
 801a590:	d1f7      	bne.n	801a582 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xee>
 801a592:	6810      	ldr	r0, [r2, #0]
 801a594:	6038      	str	r0, [r7, #0]
 801a596:	8892      	ldrh	r2, [r2, #4]
 801a598:	80ba      	strh	r2, [r7, #4]
 801a59a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801a59e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801a5a2:	10db      	asrs	r3, r3, #3
 801a5a4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801a5a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a5ac:	4313      	orrs	r3, r2
 801a5ae:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801a5b2:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801a5b6:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801a5ba:	1a9b      	subs	r3, r3, r2
 801a5bc:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801a5c0:	e773      	b.n	801a4aa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801a5c2:	f640 611b 	movw	r1, #3611	; 0xe1b
 801a5c6:	f023 0204 	bic.w	r2, r3, #4
 801a5ca:	428a      	cmp	r2, r1
 801a5cc:	d003      	beq.n	801a5d6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 801a5ce:	f640 621d 	movw	r2, #3613	; 0xe1d
 801a5d2:	4293      	cmp	r3, r2
 801a5d4:	d120      	bne.n	801a618 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x184>
 801a5d6:	3b01      	subs	r3, #1
 801a5d8:	4602      	mov	r2, r0
 801a5da:	b29b      	uxth	r3, r3
 801a5dc:	4629      	mov	r1, r5
 801a5de:	4620      	mov	r0, r4
 801a5e0:	f7ff ff4d 	bl	801a47e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a5e4:	7b41      	ldrb	r1, [r0, #13]
 801a5e6:	00cb      	lsls	r3, r1, #3
 801a5e8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a5ec:	7a03      	ldrb	r3, [r0, #8]
 801a5ee:	0649      	lsls	r1, r1, #25
 801a5f0:	ea43 0302 	orr.w	r3, r3, r2
 801a5f4:	bf44      	itt	mi
 801a5f6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a5fa:	b21b      	sxthmi	r3, r3
 801a5fc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a600:	7b6b      	ldrb	r3, [r5, #13]
 801a602:	7aaa      	ldrb	r2, [r5, #10]
 801a604:	005b      	lsls	r3, r3, #1
 801a606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a60a:	4313      	orrs	r3, r2
 801a60c:	115a      	asrs	r2, r3, #5
 801a60e:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801a612:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801a616:	e036      	b.n	801a686 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f2>
 801a618:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801a61c:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801a620:	7a2a      	ldrb	r2, [r5, #8]
 801a622:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801a626:	ea42 0201 	orr.w	r2, r2, r1
 801a62a:	f640 6109 	movw	r1, #3593	; 0xe09
 801a62e:	bf1c      	itt	ne
 801a630:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801a634:	b212      	sxthne	r2, r2
 801a636:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801a63a:	f023 0210 	bic.w	r2, r3, #16
 801a63e:	428a      	cmp	r2, r1
 801a640:	d003      	beq.n	801a64a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b6>
 801a642:	f640 6213 	movw	r2, #3603	; 0xe13
 801a646:	4293      	cmp	r3, r2
 801a648:	d12a      	bne.n	801a6a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20c>
 801a64a:	7b6e      	ldrb	r6, [r5, #13]
 801a64c:	4629      	mov	r1, r5
 801a64e:	0076      	lsls	r6, r6, #1
 801a650:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801a654:	7aae      	ldrb	r6, [r5, #10]
 801a656:	4316      	orrs	r6, r2
 801a658:	f640 6213 	movw	r2, #3603	; 0xe13
 801a65c:	4293      	cmp	r3, r2
 801a65e:	bf18      	it	ne
 801a660:	f103 33ff 	addne.w	r3, r3, #4294967295
 801a664:	4602      	mov	r2, r0
 801a666:	bf14      	ite	ne
 801a668:	b29b      	uxthne	r3, r3
 801a66a:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801a66e:	4620      	mov	r0, r4
 801a670:	f7ff ff05 	bl	801a47e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a674:	7b43      	ldrb	r3, [r0, #13]
 801a676:	7a82      	ldrb	r2, [r0, #10]
 801a678:	005b      	lsls	r3, r3, #1
 801a67a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a67e:	4313      	orrs	r3, r2
 801a680:	1af6      	subs	r6, r6, r3
 801a682:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801a686:	7b69      	ldrb	r1, [r5, #13]
 801a688:	00cb      	lsls	r3, r1, #3
 801a68a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a68e:	7a2b      	ldrb	r3, [r5, #8]
 801a690:	4313      	orrs	r3, r2
 801a692:	064a      	lsls	r2, r1, #25
 801a694:	bf44      	itt	mi
 801a696:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a69a:	b21b      	sxthmi	r3, r3
 801a69c:	1bdb      	subs	r3, r3, r7
 801a69e:	e747      	b.n	801a530 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9c>
 801a6a0:	2300      	movs	r3, #0
 801a6a2:	e7b6      	b.n	801a612 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x17e>
 801a6a4:	3fc00079 	.word	0x3fc00079

0801a6a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801a6a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a6ac:	4604      	mov	r4, r0
 801a6ae:	b942      	cbnz	r2, 801a6c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801a6b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a6b4:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801a6b8:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801a6bc:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801a6c0:	e047      	b.n	801a752 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801a6c2:	7b51      	ldrb	r1, [r2, #13]
 801a6c4:	8893      	ldrh	r3, [r2, #4]
 801a6c6:	010d      	lsls	r5, r1, #4
 801a6c8:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801a6cc:	79d5      	ldrb	r5, [r2, #7]
 801a6ce:	4305      	orrs	r5, r0
 801a6d0:	2d04      	cmp	r5, #4
 801a6d2:	bfcc      	ite	gt
 801a6d4:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801a6d8:	f04f 0e01 	movle.w	lr, #1
 801a6dc:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801a6e0:	f200 80ab 	bhi.w	801a83a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801a6e4:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801a6e8:	4283      	cmp	r3, r0
 801a6ea:	d216      	bcs.n	801a71a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a6ec:	f240 605b 	movw	r0, #1627	; 0x65b
 801a6f0:	4283      	cmp	r3, r0
 801a6f2:	d859      	bhi.n	801a7a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801a6f4:	f240 6057 	movw	r0, #1623	; 0x657
 801a6f8:	4283      	cmp	r3, r0
 801a6fa:	d20e      	bcs.n	801a71a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a6fc:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801a700:	d24a      	bcs.n	801a798 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801a702:	f240 604e 	movw	r0, #1614	; 0x64e
 801a706:	4283      	cmp	r3, r0
 801a708:	d207      	bcs.n	801a71a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a70a:	f240 601a 	movw	r0, #1562	; 0x61a
 801a70e:	4283      	cmp	r3, r0
 801a710:	d02a      	beq.n	801a768 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a712:	d821      	bhi.n	801a758 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801a714:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801a718:	d35b      	bcc.n	801a7d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801a71a:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801a71e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801a722:	f040 80d0 	bne.w	801a8c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801a726:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801a72a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801a72e:	f040 80ca 	bne.w	801a8c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801a732:	00cb      	lsls	r3, r1, #3
 801a734:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801a738:	7a13      	ldrb	r3, [r2, #8]
 801a73a:	0649      	lsls	r1, r1, #25
 801a73c:	ea43 0300 	orr.w	r3, r3, r0
 801a740:	bf44      	itt	mi
 801a742:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a746:	b21b      	sxthmi	r3, r3
 801a748:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a74c:	1b5d      	subs	r5, r3, r5
 801a74e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801a752:	4610      	mov	r0, r2
 801a754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a758:	f240 604b 	movw	r0, #1611	; 0x64b
 801a75c:	4283      	cmp	r3, r0
 801a75e:	d338      	bcc.n	801a7d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801a760:	f240 604c 	movw	r0, #1612	; 0x64c
 801a764:	4283      	cmp	r3, r0
 801a766:	d9d8      	bls.n	801a71a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a768:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801a76c:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801a770:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801a774:	f040 80f2 	bne.w	801a95c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801a778:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801a77c:	f040 80ee 	bne.w	801a95c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801a780:	00cb      	lsls	r3, r1, #3
 801a782:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801a786:	7a13      	ldrb	r3, [r2, #8]
 801a788:	064e      	lsls	r6, r1, #25
 801a78a:	ea43 0300 	orr.w	r3, r3, r0
 801a78e:	bf44      	itt	mi
 801a790:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a794:	b21b      	sxthmi	r3, r3
 801a796:	e7d9      	b.n	801a74c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801a798:	f240 6054 	movw	r0, #1620	; 0x654
 801a79c:	4283      	cmp	r3, r0
 801a79e:	d8e3      	bhi.n	801a768 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a7a0:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801a7a4:	d9e0      	bls.n	801a768 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a7a6:	e7b8      	b.n	801a71a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a7a8:	f240 6074 	movw	r0, #1652	; 0x674
 801a7ac:	4283      	cmp	r3, r0
 801a7ae:	d0b4      	beq.n	801a71a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a7b0:	d82d      	bhi.n	801a80e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801a7b2:	f240 605e 	movw	r0, #1630	; 0x65e
 801a7b6:	4283      	cmp	r3, r0
 801a7b8:	d804      	bhi.n	801a7c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801a7ba:	f240 605d 	movw	r0, #1629	; 0x65d
 801a7be:	4283      	cmp	r3, r0
 801a7c0:	d3d2      	bcc.n	801a768 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a7c2:	e7aa      	b.n	801a71a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a7c4:	f240 605f 	movw	r0, #1631	; 0x65f
 801a7c8:	4283      	cmp	r3, r0
 801a7ca:	d0cd      	beq.n	801a768 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a7cc:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801a7d0:	d0a3      	beq.n	801a71a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a7d2:	00cb      	lsls	r3, r1, #3
 801a7d4:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801a7d8:	7a13      	ldrb	r3, [r2, #8]
 801a7da:	0649      	lsls	r1, r1, #25
 801a7dc:	ea43 0300 	orr.w	r3, r3, r0
 801a7e0:	bf44      	itt	mi
 801a7e2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a7e6:	b21b      	sxthmi	r3, r3
 801a7e8:	1b5d      	subs	r5, r3, r5
 801a7ea:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a7ee:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801a7f2:	7b53      	ldrb	r3, [r2, #13]
 801a7f4:	015b      	lsls	r3, r3, #5
 801a7f6:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801a7fa:	7993      	ldrb	r3, [r2, #6]
 801a7fc:	430b      	orrs	r3, r1
 801a7fe:	2105      	movs	r1, #5
 801a800:	005b      	lsls	r3, r3, #1
 801a802:	fb93 f3f1 	sdiv	r3, r3, r1
 801a806:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801a80a:	440b      	add	r3, r1
 801a80c:	e756      	b.n	801a6bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801a80e:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801a812:	4283      	cmp	r3, r0
 801a814:	d809      	bhi.n	801a82a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801a816:	f240 60df 	movw	r0, #1759	; 0x6df
 801a81a:	4283      	cmp	r3, r0
 801a81c:	f4bf af7d 	bcs.w	801a71a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a820:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801a824:	2b05      	cmp	r3, #5
 801a826:	d8d4      	bhi.n	801a7d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801a828:	e777      	b.n	801a71a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a82a:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801a82e:	4283      	cmp	r3, r0
 801a830:	d09a      	beq.n	801a768 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a832:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801a836:	4283      	cmp	r3, r0
 801a838:	e7ca      	b.n	801a7d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801a83a:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801a83e:	d22b      	bcs.n	801a898 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801a840:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801a844:	4283      	cmp	r3, r0
 801a846:	d28f      	bcs.n	801a768 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a848:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801a84c:	4283      	cmp	r3, r0
 801a84e:	d816      	bhi.n	801a87e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801a850:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801a854:	4283      	cmp	r3, r0
 801a856:	f4bf af60 	bcs.w	801a71a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a85a:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801a85e:	4283      	cmp	r3, r0
 801a860:	d80a      	bhi.n	801a878 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801a862:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801a866:	4283      	cmp	r3, r0
 801a868:	f4bf af57 	bcs.w	801a71a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a86c:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801a870:	4283      	cmp	r3, r0
 801a872:	f43f af79 	beq.w	801a768 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a876:	e7ac      	b.n	801a7d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801a878:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801a87c:	e7f8      	b.n	801a870 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801a87e:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801a882:	4283      	cmp	r3, r0
 801a884:	d802      	bhi.n	801a88c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801a886:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801a88a:	e798      	b.n	801a7be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801a88c:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801a890:	4283      	cmp	r3, r0
 801a892:	f47f af42 	bne.w	801a71a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a896:	e767      	b.n	801a768 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a898:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801a89c:	4283      	cmp	r3, r0
 801a89e:	f43f af63 	beq.w	801a768 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a8a2:	d802      	bhi.n	801a8aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801a8a4:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801a8a8:	e7f2      	b.n	801a890 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801a8aa:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801a8ae:	4283      	cmp	r3, r0
 801a8b0:	d805      	bhi.n	801a8be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801a8b2:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801a8b6:	4283      	cmp	r3, r0
 801a8b8:	f4ff af2f 	bcc.w	801a71a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a8bc:	e754      	b.n	801a768 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a8be:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801a8c2:	4283      	cmp	r3, r0
 801a8c4:	e7af      	b.n	801a826 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801a8c6:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801a8ca:	4617      	mov	r7, r2
 801a8cc:	4666      	mov	r6, ip
 801a8ce:	f102 0808 	add.w	r8, r2, #8
 801a8d2:	46e6      	mov	lr, ip
 801a8d4:	6838      	ldr	r0, [r7, #0]
 801a8d6:	6879      	ldr	r1, [r7, #4]
 801a8d8:	3708      	adds	r7, #8
 801a8da:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801a8de:	4547      	cmp	r7, r8
 801a8e0:	46f4      	mov	ip, lr
 801a8e2:	d1f6      	bne.n	801a8d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801a8e4:	6838      	ldr	r0, [r7, #0]
 801a8e6:	f8ce 0000 	str.w	r0, [lr]
 801a8ea:	88b9      	ldrh	r1, [r7, #4]
 801a8ec:	f8ae 1004 	strh.w	r1, [lr, #4]
 801a8f0:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801a8f4:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801a8f8:	d009      	beq.n	801a90e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801a8fa:	7b51      	ldrb	r1, [r2, #13]
 801a8fc:	7992      	ldrb	r2, [r2, #6]
 801a8fe:	0149      	lsls	r1, r1, #5
 801a900:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801a904:	4311      	orrs	r1, r2
 801a906:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801a90a:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801a90e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801a912:	b2ad      	uxth	r5, r5
 801a914:	d00d      	beq.n	801a932 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 801a916:	442b      	add	r3, r5
 801a918:	b29b      	uxth	r3, r3
 801a91a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801a91e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801a922:	10db      	asrs	r3, r3, #3
 801a924:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801a928:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a92c:	4313      	orrs	r3, r2
 801a92e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801a932:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801a936:	00cb      	lsls	r3, r1, #3
 801a938:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a93c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801a940:	064f      	lsls	r7, r1, #25
 801a942:	ea43 0302 	orr.w	r3, r3, r2
 801a946:	bf44      	itt	mi
 801a948:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a94c:	b21b      	sxthmi	r3, r3
 801a94e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a952:	1b5b      	subs	r3, r3, r5
 801a954:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801a958:	4632      	mov	r2, r6
 801a95a:	e6fa      	b.n	801a752 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801a95c:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801a960:	4617      	mov	r7, r2
 801a962:	4666      	mov	r6, ip
 801a964:	f102 0908 	add.w	r9, r2, #8
 801a968:	46e0      	mov	r8, ip
 801a96a:	6838      	ldr	r0, [r7, #0]
 801a96c:	6879      	ldr	r1, [r7, #4]
 801a96e:	3708      	adds	r7, #8
 801a970:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801a974:	454f      	cmp	r7, r9
 801a976:	46c4      	mov	ip, r8
 801a978:	d1f6      	bne.n	801a968 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 801a97a:	6838      	ldr	r0, [r7, #0]
 801a97c:	f8c8 0000 	str.w	r0, [r8]
 801a980:	88b9      	ldrh	r1, [r7, #4]
 801a982:	f8a8 1004 	strh.w	r1, [r8, #4]
 801a986:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801a98a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801a98e:	d009      	beq.n	801a9a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 801a990:	7b51      	ldrb	r1, [r2, #13]
 801a992:	7992      	ldrb	r2, [r2, #6]
 801a994:	0149      	lsls	r1, r1, #5
 801a996:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801a99a:	4311      	orrs	r1, r2
 801a99c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801a9a0:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801a9a4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801a9a8:	d00e      	beq.n	801a9c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 801a9aa:	eba3 030e 	sub.w	r3, r3, lr
 801a9ae:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801a9b2:	b29b      	uxth	r3, r3
 801a9b4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801a9b8:	10db      	asrs	r3, r3, #3
 801a9ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a9be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801a9c2:	4313      	orrs	r3, r2
 801a9c4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801a9c8:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801a9cc:	00cb      	lsls	r3, r1, #3
 801a9ce:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a9d2:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801a9d6:	0648      	lsls	r0, r1, #25
 801a9d8:	ea43 0302 	orr.w	r3, r3, r2
 801a9dc:	bf44      	itt	mi
 801a9de:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a9e2:	b21b      	sxthmi	r3, r3
 801a9e4:	1b5d      	subs	r5, r3, r5
 801a9e6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801a9ea:	e7b5      	b.n	801a958 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

0801a9ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801a9ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9f0:	461e      	mov	r6, r3
 801a9f2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801a9f4:	4604      	mov	r4, r0
 801a9f6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801a9fa:	4617      	mov	r7, r2
 801a9fc:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801aa00:	f7e8 ff82 	bl	8003908 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801aa04:	4605      	mov	r5, r0
 801aa06:	b918      	cbnz	r0, 801aa10 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801aa08:	6030      	str	r0, [r6, #0]
 801aa0a:	4628      	mov	r0, r5
 801aa0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa10:	683b      	ldr	r3, [r7, #0]
 801aa12:	4601      	mov	r1, r0
 801aa14:	68db      	ldr	r3, [r3, #12]
 801aa16:	4638      	mov	r0, r7
 801aa18:	4798      	blx	r3
 801aa1a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801aa1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801aa22:	4602      	mov	r2, r0
 801aa24:	6030      	str	r0, [r6, #0]
 801aa26:	d213      	bcs.n	801aa50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801aa28:	4643      	mov	r3, r8
 801aa2a:	4639      	mov	r1, r7
 801aa2c:	4620      	mov	r0, r4
 801aa2e:	f7ff fe3b 	bl	801a6a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801aa32:	6030      	str	r0, [r6, #0]
 801aa34:	6833      	ldr	r3, [r6, #0]
 801aa36:	b143      	cbz	r3, 801aa4a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801aa38:	7b5a      	ldrb	r2, [r3, #13]
 801aa3a:	7a9b      	ldrb	r3, [r3, #10]
 801aa3c:	0052      	lsls	r2, r2, #1
 801aa3e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801aa42:	4313      	orrs	r3, r2
 801aa44:	bf0c      	ite	eq
 801aa46:	2301      	moveq	r3, #1
 801aa48:	2300      	movne	r3, #0
 801aa4a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801aa4e:	e7dc      	b.n	801aa0a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801aa50:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801aa54:	b29b      	uxth	r3, r3
 801aa56:	2b7f      	cmp	r3, #127	; 0x7f
 801aa58:	d804      	bhi.n	801aa64 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801aa5a:	4639      	mov	r1, r7
 801aa5c:	4620      	mov	r0, r4
 801aa5e:	f7ff fd19 	bl	801a494 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801aa62:	e7e6      	b.n	801aa32 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801aa64:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801aa68:	2b00      	cmp	r3, #0
 801aa6a:	d0e3      	beq.n	801aa34 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801aa6c:	f640 1302 	movw	r3, #2306	; 0x902
 801aa70:	429d      	cmp	r5, r3
 801aa72:	d1df      	bne.n	801aa34 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801aa74:	4601      	mov	r1, r0
 801aa76:	4620      	mov	r0, r4
 801aa78:	f7ff fcde 	bl	801a438 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801aa7c:	e7d9      	b.n	801aa32 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801aa7e <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801aa7e:	b510      	push	{r4, lr}
 801aa80:	4604      	mov	r4, r0
 801aa82:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801aa86:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801aa88:	b1f1      	cbz	r1, 801aac8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801aa8a:	2b0a      	cmp	r3, #10
 801aa8c:	d02f      	beq.n	801aaee <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801aa8e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801aa90:	3901      	subs	r1, #1
 801aa92:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801aa96:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801aa98:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801aa9c:	1c51      	adds	r1, r2, #1
 801aa9e:	b289      	uxth	r1, r1
 801aaa0:	2901      	cmp	r1, #1
 801aaa2:	bf84      	itt	hi
 801aaa4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801aaa8:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801aaaa:	f103 0201 	add.w	r2, r3, #1
 801aaae:	8722      	strh	r2, [r4, #56]	; 0x38
 801aab0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801aab2:	bf98      	it	ls
 801aab4:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801aab6:	4413      	add	r3, r2
 801aab8:	b29b      	uxth	r3, r3
 801aaba:	2b09      	cmp	r3, #9
 801aabc:	bf88      	it	hi
 801aabe:	3b0a      	subhi	r3, #10
 801aac0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801aac4:	8458      	strh	r0, [r3, #34]	; 0x22
 801aac6:	e7dc      	b.n	801aa82 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801aac8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801aaca:	2b0a      	cmp	r3, #10
 801aacc:	d00f      	beq.n	801aaee <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801aace:	4620      	mov	r0, r4
 801aad0:	f7ff fc71 	bl	801a3b6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801aad4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801aad6:	1c5a      	adds	r2, r3, #1
 801aad8:	8722      	strh	r2, [r4, #56]	; 0x38
 801aada:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801aadc:	4413      	add	r3, r2
 801aade:	b29b      	uxth	r3, r3
 801aae0:	2b09      	cmp	r3, #9
 801aae2:	bf88      	it	hi
 801aae4:	3b0a      	subhi	r3, #10
 801aae6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801aaea:	8458      	strh	r0, [r3, #34]	; 0x22
 801aaec:	e7ec      	b.n	801aac8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801aaee:	bd10      	pop	{r4, pc}

0801aaf0 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801aaf0:	b538      	push	{r3, r4, r5, lr}
 801aaf2:	4604      	mov	r4, r0
 801aaf4:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801aaf6:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801aafa:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801aafc:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801aafe:	3a01      	subs	r2, #1
 801ab00:	8702      	strh	r2, [r0, #56]	; 0x38
 801ab02:	1c5a      	adds	r2, r3, #1
 801ab04:	b292      	uxth	r2, r2
 801ab06:	2a09      	cmp	r2, #9
 801ab08:	bf86      	itte	hi
 801ab0a:	3b09      	subhi	r3, #9
 801ab0c:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801ab0e:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801ab10:	f7ff ffb5 	bl	801aa7e <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801ab14:	8c23      	ldrh	r3, [r4, #32]
 801ab16:	2b01      	cmp	r3, #1
 801ab18:	bf9c      	itt	ls
 801ab1a:	3301      	addls	r3, #1
 801ab1c:	8423      	strhls	r3, [r4, #32]
 801ab1e:	8be3      	ldrh	r3, [r4, #30]
 801ab20:	b90b      	cbnz	r3, 801ab26 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801ab22:	2302      	movs	r3, #2
 801ab24:	83e3      	strh	r3, [r4, #30]
 801ab26:	8be3      	ldrh	r3, [r4, #30]
 801ab28:	4628      	mov	r0, r5
 801ab2a:	3b01      	subs	r3, #1
 801ab2c:	b29b      	uxth	r3, r3
 801ab2e:	83e3      	strh	r3, [r4, #30]
 801ab30:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ab34:	8365      	strh	r5, [r4, #26]
 801ab36:	bd38      	pop	{r3, r4, r5, pc}

0801ab38 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801ab38:	428a      	cmp	r2, r1
 801ab3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab3e:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801ab40:	d931      	bls.n	801aba6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 801ab42:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801ab44:	1a54      	subs	r4, r2, r1
 801ab46:	19ee      	adds	r6, r5, r7
 801ab48:	3e01      	subs	r6, #1
 801ab4a:	fa1f fe84 	uxth.w	lr, r4
 801ab4e:	b2b4      	uxth	r4, r6
 801ab50:	eba4 090e 	sub.w	r9, r4, lr
 801ab54:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801ab58:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801ab5c:	fa1f f989 	uxth.w	r9, r9
 801ab60:	2c09      	cmp	r4, #9
 801ab62:	4626      	mov	r6, r4
 801ab64:	bf88      	it	hi
 801ab66:	f1a4 060a 	subhi.w	r6, r4, #10
 801ab6a:	f1bc 0f00 	cmp.w	ip, #0
 801ab6e:	bf08      	it	eq
 801ab70:	f04f 0c02 	moveq.w	ip, #2
 801ab74:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801ab78:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ab7c:	3c01      	subs	r4, #1
 801ab7e:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801ab82:	fa1f fc8c 	uxth.w	ip, ip
 801ab86:	b2a4      	uxth	r4, r4
 801ab88:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801ab8c:	454c      	cmp	r4, r9
 801ab8e:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801ab92:	d1e5      	bne.n	801ab60 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801ab94:	eba5 050e 	sub.w	r5, r5, lr
 801ab98:	eb0e 0408 	add.w	r4, lr, r8
 801ab9c:	8705      	strh	r5, [r0, #56]	; 0x38
 801ab9e:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801aba2:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801aba6:	250a      	movs	r5, #10
 801aba8:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801abaa:	1a64      	subs	r4, r4, r1
 801abac:	4439      	add	r1, r7
 801abae:	b289      	uxth	r1, r1
 801abb0:	2909      	cmp	r1, #9
 801abb2:	bf88      	it	hi
 801abb4:	390a      	subhi	r1, #10
 801abb6:	8704      	strh	r4, [r0, #56]	; 0x38
 801abb8:	86c1      	strh	r1, [r0, #54]	; 0x36
 801abba:	b18a      	cbz	r2, 801abe0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 801abbc:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801abbe:	3a01      	subs	r2, #1
 801abc0:	3101      	adds	r1, #1
 801abc2:	b292      	uxth	r2, r2
 801abc4:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801abc8:	8701      	strh	r1, [r0, #56]	; 0x38
 801abca:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801abcc:	b901      	cbnz	r1, 801abd0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 801abce:	86c5      	strh	r5, [r0, #54]	; 0x36
 801abd0:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801abd2:	3901      	subs	r1, #1
 801abd4:	b289      	uxth	r1, r1
 801abd6:	86c1      	strh	r1, [r0, #54]	; 0x36
 801abd8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801abdc:	844c      	strh	r4, [r1, #34]	; 0x22
 801abde:	e7ec      	b.n	801abba <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 801abe0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801abe4:	f7ff bf4b 	b.w	801aa7e <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801abe8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801abe8:	b570      	push	{r4, r5, r6, lr}
 801abea:	2500      	movs	r5, #0
 801abec:	4295      	cmp	r5, r2
 801abee:	d011      	beq.n	801ac14 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801abf0:	8bc4      	ldrh	r4, [r0, #30]
 801abf2:	f831 6b02 	ldrh.w	r6, [r1], #2
 801abf6:	4414      	add	r4, r2
 801abf8:	3c01      	subs	r4, #1
 801abfa:	1b64      	subs	r4, r4, r5
 801abfc:	b2a4      	uxth	r4, r4
 801abfe:	2c01      	cmp	r4, #1
 801ac00:	bf88      	it	hi
 801ac02:	3c02      	subhi	r4, #2
 801ac04:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801ac08:	8b64      	ldrh	r4, [r4, #26]
 801ac0a:	42b4      	cmp	r4, r6
 801ac0c:	d117      	bne.n	801ac3e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801ac0e:	3501      	adds	r5, #1
 801ac10:	b2ad      	uxth	r5, r5
 801ac12:	e7eb      	b.n	801abec <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801ac14:	2400      	movs	r4, #0
 801ac16:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801ac1a:	4413      	add	r3, r2
 801ac1c:	b2a2      	uxth	r2, r4
 801ac1e:	429a      	cmp	r2, r3
 801ac20:	da0f      	bge.n	801ac42 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801ac22:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801ac24:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801ac28:	4432      	add	r2, r6
 801ac2a:	b292      	uxth	r2, r2
 801ac2c:	2a09      	cmp	r2, #9
 801ac2e:	bf88      	it	hi
 801ac30:	3a0a      	subhi	r2, #10
 801ac32:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801ac36:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801ac38:	3401      	adds	r4, #1
 801ac3a:	42aa      	cmp	r2, r5
 801ac3c:	d0ee      	beq.n	801ac1c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801ac3e:	2000      	movs	r0, #0
 801ac40:	bd70      	pop	{r4, r5, r6, pc}
 801ac42:	2001      	movs	r0, #1
 801ac44:	e7fc      	b.n	801ac40 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801ac46 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801ac46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac4a:	4605      	mov	r5, r0
 801ac4c:	4616      	mov	r6, r2
 801ac4e:	1c8c      	adds	r4, r1, #2
 801ac50:	8809      	ldrh	r1, [r1, #0]
 801ac52:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801ac56:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801ac5a:	42b3      	cmp	r3, r6
 801ac5c:	d124      	bne.n	801aca8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801ac5e:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801ac62:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801ac66:	f001 070f 	and.w	r7, r1, #15
 801ac6a:	f8cd 8000 	str.w	r8, [sp]
 801ac6e:	464b      	mov	r3, r9
 801ac70:	4652      	mov	r2, sl
 801ac72:	4621      	mov	r1, r4
 801ac74:	4628      	mov	r0, r5
 801ac76:	f7ff ffb7 	bl	801abe8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801ac7a:	4683      	mov	fp, r0
 801ac7c:	b168      	cbz	r0, 801ac9a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801ac7e:	eb0a 0109 	add.w	r1, sl, r9
 801ac82:	4441      	add	r1, r8
 801ac84:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801ac88:	463a      	mov	r2, r7
 801ac8a:	4649      	mov	r1, r9
 801ac8c:	4628      	mov	r0, r5
 801ac8e:	f7ff ff53 	bl	801ab38 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801ac92:	4658      	mov	r0, fp
 801ac94:	b003      	add	sp, #12
 801ac96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac9a:	eb07 010a 	add.w	r1, r7, sl
 801ac9e:	4449      	add	r1, r9
 801aca0:	4441      	add	r1, r8
 801aca2:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801aca6:	e7d2      	b.n	801ac4e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801aca8:	f04f 0b00 	mov.w	fp, #0
 801acac:	e7f1      	b.n	801ac92 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801acae <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801acae:	b570      	push	{r4, r5, r6, lr}
 801acb0:	8810      	ldrh	r0, [r2, #0]
 801acb2:	4298      	cmp	r0, r3
 801acb4:	d817      	bhi.n	801ace6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801acb6:	1e48      	subs	r0, r1, #1
 801acb8:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801acbc:	4298      	cmp	r0, r3
 801acbe:	d312      	bcc.n	801ace6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801acc0:	2400      	movs	r4, #0
 801acc2:	428c      	cmp	r4, r1
 801acc4:	d20f      	bcs.n	801ace6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801acc6:	1860      	adds	r0, r4, r1
 801acc8:	1040      	asrs	r0, r0, #1
 801acca:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801acce:	0085      	lsls	r5, r0, #2
 801acd0:	42b3      	cmp	r3, r6
 801acd2:	d902      	bls.n	801acda <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801acd4:	3001      	adds	r0, #1
 801acd6:	b284      	uxth	r4, r0
 801acd8:	e7f3      	b.n	801acc2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801acda:	d201      	bcs.n	801ace0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801acdc:	b281      	uxth	r1, r0
 801acde:	e7f0      	b.n	801acc2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801ace0:	442a      	add	r2, r5
 801ace2:	8850      	ldrh	r0, [r2, #2]
 801ace4:	bd70      	pop	{r4, r5, r6, pc}
 801ace6:	2000      	movs	r0, #0
 801ace8:	e7fc      	b.n	801ace4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801acea <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801acea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801acee:	4604      	mov	r4, r0
 801acf0:	260b      	movs	r6, #11
 801acf2:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801acf4:	886f      	ldrh	r7, [r5, #2]
 801acf6:	087f      	lsrs	r7, r7, #1
 801acf8:	3e01      	subs	r6, #1
 801acfa:	d013      	beq.n	801ad24 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801acfc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801acfe:	462a      	mov	r2, r5
 801ad00:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ad04:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801ad08:	4639      	mov	r1, r7
 801ad0a:	4643      	mov	r3, r8
 801ad0c:	4620      	mov	r0, r4
 801ad0e:	f7ff ffce 	bl	801acae <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801ad12:	b138      	cbz	r0, 801ad24 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801ad14:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801ad18:	4642      	mov	r2, r8
 801ad1a:	4620      	mov	r0, r4
 801ad1c:	f7ff ff93 	bl	801ac46 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801ad20:	2800      	cmp	r0, #0
 801ad22:	d1e9      	bne.n	801acf8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801ad24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ad28 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801ad28:	b570      	push	{r4, r5, r6, lr}
 801ad2a:	694a      	ldr	r2, [r1, #20]
 801ad2c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801ad2e:	684b      	ldr	r3, [r1, #4]
 801ad30:	1b54      	subs	r4, r2, r5
 801ad32:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801ad34:	f000 8107 	beq.w	801af46 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21e>
 801ad38:	1b9b      	subs	r3, r3, r6
 801ad3a:	d003      	beq.n	801ad44 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801ad3c:	2210      	movs	r2, #16
 801ad3e:	4363      	muls	r3, r4
 801ad40:	fb93 f3f2 	sdiv	r3, r3, r2
 801ad44:	680c      	ldr	r4, [r1, #0]
 801ad46:	698a      	ldr	r2, [r1, #24]
 801ad48:	1b65      	subs	r5, r4, r5
 801ad4a:	f000 80fe 	beq.w	801af4a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x222>
 801ad4e:	1b92      	subs	r2, r2, r6
 801ad50:	d003      	beq.n	801ad5a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801ad52:	2410      	movs	r4, #16
 801ad54:	436a      	muls	r2, r5
 801ad56:	fb92 f2f4 	sdiv	r2, r2, r4
 801ad5a:	1a9b      	subs	r3, r3, r2
 801ad5c:	ee07 3a90 	vmov	s15, r3
 801ad60:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801af88 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x260>
 801ad64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ad68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ad6c:	ee67 7a84 	vmul.f32	s15, s15, s8
 801ad70:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801ad74:	460a      	mov	r2, r1
 801ad76:	eeb1 6a43 	vneg.f32	s12, s6
 801ad7a:	4603      	mov	r3, r0
 801ad7c:	f100 040c 	add.w	r4, r0, #12
 801ad80:	edd2 7a02 	vldr	s15, [r2, #8]
 801ad84:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801ad88:	ece3 6a01 	vstmia	r3!, {s13}
 801ad8c:	edd2 7a03 	vldr	s15, [r2, #12]
 801ad90:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ad94:	edc3 7a02 	vstr	s15, [r3, #8]
 801ad98:	edd2 7a04 	vldr	s15, [r2, #16]
 801ad9c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ada0:	429c      	cmp	r4, r3
 801ada2:	edc3 7a05 	vstr	s15, [r3, #20]
 801ada6:	f102 0214 	add.w	r2, r2, #20
 801adaa:	d1e9      	bne.n	801ad80 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801adac:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801adae:	698b      	ldr	r3, [r1, #24]
 801adb0:	edd0 4a02 	vldr	s9, [r0, #8]
 801adb4:	1a9b      	subs	r3, r3, r2
 801adb6:	ee07 3a90 	vmov	s15, r3
 801adba:	684b      	ldr	r3, [r1, #4]
 801adbc:	edd0 3a00 	vldr	s7, [r0]
 801adc0:	1a9b      	subs	r3, r3, r2
 801adc2:	edd0 6a01 	vldr	s13, [r0, #4]
 801adc6:	ee07 3a10 	vmov	s14, r3
 801adca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801adce:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801add2:	ee67 7a84 	vmul.f32	s15, s15, s8
 801add6:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801adda:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801adde:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801ade2:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ade6:	eee6 7a87 	vfma.f32	s15, s13, s14
 801adea:	ee67 7a83 	vmul.f32	s15, s15, s6
 801adee:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801adf2:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801adf4:	694a      	ldr	r2, [r1, #20]
 801adf6:	ed90 5a05 	vldr	s10, [r0, #20]
 801adfa:	1b13      	subs	r3, r2, r4
 801adfc:	ee07 3a10 	vmov	s14, r3
 801ae00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ae04:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ae08:	680b      	ldr	r3, [r1, #0]
 801ae0a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801ae0e:	1b1b      	subs	r3, r3, r4
 801ae10:	ee07 3a10 	vmov	s14, r3
 801ae14:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ae18:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ae1c:	eee6 4a87 	vfma.f32	s9, s13, s14
 801ae20:	ee64 4a86 	vmul.f32	s9, s9, s12
 801ae24:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801ae28:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801ae2a:	698b      	ldr	r3, [r1, #24]
 801ae2c:	ed90 2a03 	vldr	s4, [r0, #12]
 801ae30:	1a9b      	subs	r3, r3, r2
 801ae32:	ee06 3a90 	vmov	s13, r3
 801ae36:	684b      	ldr	r3, [r1, #4]
 801ae38:	edd0 5a04 	vldr	s11, [r0, #16]
 801ae3c:	1a9b      	subs	r3, r3, r2
 801ae3e:	ee07 3a10 	vmov	s14, r3
 801ae42:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801ae46:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801ae4a:	ee66 6a84 	vmul.f32	s13, s13, s8
 801ae4e:	ee32 5a45 	vsub.f32	s10, s4, s10
 801ae52:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ae56:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801ae5a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ae5e:	eee5 6a87 	vfma.f32	s13, s11, s14
 801ae62:	ee66 6a83 	vmul.f32	s13, s13, s6
 801ae66:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801ae6a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801ae6c:	694a      	ldr	r2, [r1, #20]
 801ae6e:	ed90 1a07 	vldr	s2, [r0, #28]
 801ae72:	1b13      	subs	r3, r2, r4
 801ae74:	ee07 3a10 	vmov	s14, r3
 801ae78:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ae7c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ae80:	680b      	ldr	r3, [r1, #0]
 801ae82:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801ae86:	1b1b      	subs	r3, r3, r4
 801ae88:	ee07 3a10 	vmov	s14, r3
 801ae8c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ae90:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ae94:	eea5 5a87 	vfma.f32	s10, s11, s14
 801ae98:	ee25 5a06 	vmul.f32	s10, s10, s12
 801ae9c:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801aea0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801aea2:	698b      	ldr	r3, [r1, #24]
 801aea4:	edd0 5a08 	vldr	s11, [r0, #32]
 801aea8:	1a9b      	subs	r3, r3, r2
 801aeaa:	ee07 3a10 	vmov	s14, r3
 801aeae:	684b      	ldr	r3, [r1, #4]
 801aeb0:	edd0 2a06 	vldr	s5, [r0, #24]
 801aeb4:	1a9b      	subs	r3, r3, r2
 801aeb6:	ee01 3a90 	vmov	s3, r3
 801aeba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801aebe:	ee31 1a65 	vsub.f32	s2, s2, s11
 801aec2:	ee27 7a04 	vmul.f32	s14, s14, s8
 801aec6:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801aeca:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801aece:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801aed2:	ee61 1a84 	vmul.f32	s3, s3, s8
 801aed6:	eea1 7a21 	vfma.f32	s14, s2, s3
 801aeda:	ee27 7a03 	vmul.f32	s14, s14, s6
 801aede:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801aee2:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801aee4:	694a      	ldr	r2, [r1, #20]
 801aee6:	1b13      	subs	r3, r2, r4
 801aee8:	ee03 3a10 	vmov	s6, r3
 801aeec:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801aef0:	ee23 3a04 	vmul.f32	s6, s6, s8
 801aef4:	680b      	ldr	r3, [r1, #0]
 801aef6:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801aefa:	1b1b      	subs	r3, r3, r4
 801aefc:	ee03 3a10 	vmov	s6, r3
 801af00:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801af04:	ee23 4a04 	vmul.f32	s8, s6, s8
 801af08:	eee1 5a04 	vfma.f32	s11, s2, s8
 801af0c:	ee25 6a86 	vmul.f32	s12, s11, s12
 801af10:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801af14:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801af18:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801af1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af20:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801af24:	dd13      	ble.n	801af4e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801af26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801af2a:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801af2e:	eee3 7a87 	vfma.f32	s15, s7, s14
 801af32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801af36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af3a:	63c3      	str	r3, [r0, #60]	; 0x3c
 801af3c:	dd15      	ble.n	801af6a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801af3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801af42:	6403      	str	r3, [r0, #64]	; 0x40
 801af44:	bd70      	pop	{r4, r5, r6, pc}
 801af46:	4623      	mov	r3, r4
 801af48:	e6fc      	b.n	801ad44 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801af4a:	462a      	mov	r2, r5
 801af4c:	e705      	b.n	801ad5a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801af4e:	d502      	bpl.n	801af56 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22e>
 801af50:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801af54:	e7e9      	b.n	801af2a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x202>
 801af56:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801af5a:	eea3 2a85 	vfma.f32	s4, s7, s10
 801af5e:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801af62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af66:	dade      	bge.n	801af26 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fe>
 801af68:	e7f2      	b.n	801af50 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x228>
 801af6a:	d502      	bpl.n	801af72 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x24a>
 801af6c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801af70:	e7e7      	b.n	801af42 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21a>
 801af72:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801af76:	eee3 4a86 	vfma.f32	s9, s7, s12
 801af7a:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801af7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af82:	dadc      	bge.n	801af3e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x216>
 801af84:	e7f2      	b.n	801af6c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x244>
 801af86:	bf00      	nop
 801af88:	3d800000 	.word	0x3d800000

0801af8c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801af8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801af90:	2714      	movs	r7, #20
 801af92:	435f      	muls	r7, r3
 801af94:	eb02 0c07 	add.w	ip, r2, r7
 801af98:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801af9c:	f115 0e0f 	adds.w	lr, r5, #15
 801afa0:	f100 80a2 	bmi.w	801b0e8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801afa4:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801afa8:	2614      	movs	r6, #20
 801afaa:	9c08      	ldr	r4, [sp, #32]
 801afac:	f8c0 e014 	str.w	lr, [r0, #20]
 801afb0:	4366      	muls	r6, r4
 801afb2:	eb02 0806 	add.w	r8, r2, r6
 801afb6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801afba:	f115 040f 	adds.w	r4, r5, #15
 801afbe:	f100 809f 	bmi.w	801b100 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801afc2:	1124      	asrs	r4, r4, #4
 801afc4:	eba4 040e 	sub.w	r4, r4, lr
 801afc8:	6184      	str	r4, [r0, #24]
 801afca:	2c00      	cmp	r4, #0
 801afcc:	f000 808a 	beq.w	801b0e4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801afd0:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801afd4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801afd8:	5995      	ldr	r5, [r2, r6]
 801afda:	eba4 0809 	sub.w	r8, r4, r9
 801afde:	59d4      	ldr	r4, [r2, r7]
 801afe0:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801afe4:	eba5 0a04 	sub.w	sl, r5, r4
 801afe8:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801afec:	fb0e fe05 	mul.w	lr, lr, r5
 801aff0:	fb0a ee19 	mls	lr, sl, r9, lr
 801aff4:	fb08 e404 	mla	r4, r8, r4, lr
 801aff8:	3c01      	subs	r4, #1
 801affa:	19a4      	adds	r4, r4, r6
 801affc:	f100 808c 	bmi.w	801b118 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801b000:	fb94 fef6 	sdiv	lr, r4, r6
 801b004:	fb06 441e 	mls	r4, r6, lr, r4
 801b008:	f8c0 e000 	str.w	lr, [r0]
 801b00c:	6104      	str	r4, [r0, #16]
 801b00e:	2d00      	cmp	r5, #0
 801b010:	f2c0 8095 	blt.w	801b13e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801b014:	fb95 f4f6 	sdiv	r4, r5, r6
 801b018:	fb06 5514 	mls	r5, r6, r4, r5
 801b01c:	6044      	str	r4, [r0, #4]
 801b01e:	6085      	str	r5, [r0, #8]
 801b020:	60c6      	str	r6, [r0, #12]
 801b022:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801b026:	6945      	ldr	r5, [r0, #20]
 801b028:	59d2      	ldr	r2, [r2, r7]
 801b02a:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801b02e:	ee07 4a10 	vmov	s14, r4
 801b032:	6804      	ldr	r4, [r0, #0]
 801b034:	eddf 6a4a 	vldr	s13, [pc, #296]	; 801b160 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801b038:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801b03c:	ee07 2a90 	vmov	s15, r2
 801b040:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b044:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b048:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801b04c:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801b050:	ee27 7a26 	vmul.f32	s14, s14, s13
 801b054:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b058:	edd3 6a00 	vldr	s13, [r3]
 801b05c:	eee6 6a07 	vfma.f32	s13, s12, s14
 801b060:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801b064:	eee6 6a27 	vfma.f32	s13, s12, s15
 801b068:	edc0 6a07 	vstr	s13, [r0, #28]
 801b06c:	edd0 6a01 	vldr	s13, [r0, #4]
 801b070:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801b074:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801b078:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b07c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801b080:	ed80 6a08 	vstr	s12, [r0, #32]
 801b084:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801b086:	6242      	str	r2, [r0, #36]	; 0x24
 801b088:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801b08c:	ed93 6a03 	vldr	s12, [r3, #12]
 801b090:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b094:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801b098:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801b09c:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801b0a0:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801b0a4:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801b0a8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801b0ac:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801b0b0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b0b2:	6302      	str	r2, [r0, #48]	; 0x30
 801b0b4:	ed93 6a06 	vldr	s12, [r3, #24]
 801b0b8:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801b0bc:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b0c0:	eeb0 7a46 	vmov.f32	s14, s12
 801b0c4:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801b0c8:	eea6 7a27 	vfma.f32	s14, s12, s15
 801b0cc:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801b0d0:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801b0d4:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801b0d8:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b0dc:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801b0e0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801b0e2:	63c3      	str	r3, [r0, #60]	; 0x3c
 801b0e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b0e8:	2410      	movs	r4, #16
 801b0ea:	f1c5 0501 	rsb	r5, r5, #1
 801b0ee:	f015 050f 	ands.w	r5, r5, #15
 801b0f2:	fb9e fef4 	sdiv	lr, lr, r4
 801b0f6:	bf18      	it	ne
 801b0f8:	2501      	movne	r5, #1
 801b0fa:	ebae 0e05 	sub.w	lr, lr, r5
 801b0fe:	e753      	b.n	801afa8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801b100:	f04f 0910 	mov.w	r9, #16
 801b104:	f1c5 0501 	rsb	r5, r5, #1
 801b108:	f015 050f 	ands.w	r5, r5, #15
 801b10c:	fb94 f4f9 	sdiv	r4, r4, r9
 801b110:	bf18      	it	ne
 801b112:	2501      	movne	r5, #1
 801b114:	1b64      	subs	r4, r4, r5
 801b116:	e755      	b.n	801afc4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801b118:	4264      	negs	r4, r4
 801b11a:	fb94 fef6 	sdiv	lr, r4, r6
 801b11e:	fb06 441e 	mls	r4, r6, lr, r4
 801b122:	f1ce 0800 	rsb	r8, lr, #0
 801b126:	f8c0 8000 	str.w	r8, [r0]
 801b12a:	6104      	str	r4, [r0, #16]
 801b12c:	2c00      	cmp	r4, #0
 801b12e:	f43f af6e 	beq.w	801b00e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801b132:	ea6f 0e0e 	mvn.w	lr, lr
 801b136:	1b34      	subs	r4, r6, r4
 801b138:	f8c0 e000 	str.w	lr, [r0]
 801b13c:	e766      	b.n	801b00c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801b13e:	426d      	negs	r5, r5
 801b140:	fb95 f4f6 	sdiv	r4, r5, r6
 801b144:	fb06 5514 	mls	r5, r6, r4, r5
 801b148:	f1c4 0e00 	rsb	lr, r4, #0
 801b14c:	f8c0 e004 	str.w	lr, [r0, #4]
 801b150:	6085      	str	r5, [r0, #8]
 801b152:	2d00      	cmp	r5, #0
 801b154:	f43f af64 	beq.w	801b020 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801b158:	43e4      	mvns	r4, r4
 801b15a:	1b75      	subs	r5, r6, r5
 801b15c:	6044      	str	r4, [r0, #4]
 801b15e:	e75e      	b.n	801b01e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801b160:	3d800000 	.word	0x3d800000

0801b164 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801b164:	4b01      	ldr	r3, [pc, #4]	; (801b16c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801b166:	6018      	str	r0, [r3, #0]
 801b168:	4770      	bx	lr
 801b16a:	bf00      	nop
 801b16c:	20197a48 	.word	0x20197a48

0801b170 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801b170:	4b06      	ldr	r3, [pc, #24]	; (801b18c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801b172:	881a      	ldrh	r2, [r3, #0]
 801b174:	4282      	cmp	r2, r0
 801b176:	d807      	bhi.n	801b188 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801b178:	4b05      	ldr	r3, [pc, #20]	; (801b190 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801b17a:	881b      	ldrh	r3, [r3, #0]
 801b17c:	4413      	add	r3, r2
 801b17e:	4298      	cmp	r0, r3
 801b180:	bfac      	ite	ge
 801b182:	2000      	movge	r0, #0
 801b184:	2001      	movlt	r0, #1
 801b186:	4770      	bx	lr
 801b188:	2000      	movs	r0, #0
 801b18a:	4770      	bx	lr
 801b18c:	20197a68 	.word	0x20197a68
 801b190:	20197a6c 	.word	0x20197a6c

0801b194 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801b194:	b508      	push	{r3, lr}
 801b196:	4601      	mov	r1, r0
 801b198:	f7ff ffea 	bl	801b170 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801b19c:	b118      	cbz	r0, 801b1a6 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801b19e:	4b02      	ldr	r3, [pc, #8]	; (801b1a8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801b1a0:	681b      	ldr	r3, [r3, #0]
 801b1a2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801b1a6:	bd08      	pop	{r3, pc}
 801b1a8:	20197a4c 	.word	0x20197a4c

0801b1ac <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801b1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b1ae:	4c24      	ldr	r4, [pc, #144]	; (801b240 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801b1b0:	6823      	ldr	r3, [r4, #0]
 801b1b2:	2b00      	cmp	r3, #0
 801b1b4:	d042      	beq.n	801b23c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801b1b6:	4a23      	ldr	r2, [pc, #140]	; (801b244 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801b1b8:	4d23      	ldr	r5, [pc, #140]	; (801b248 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801b1ba:	8811      	ldrh	r1, [r2, #0]
 801b1bc:	f8b5 c000 	ldrh.w	ip, [r5]
 801b1c0:	4822      	ldr	r0, [pc, #136]	; (801b24c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801b1c2:	4461      	add	r1, ip
 801b1c4:	1c4a      	adds	r2, r1, #1
 801b1c6:	f022 0201 	bic.w	r2, r2, #1
 801b1ca:	008f      	lsls	r7, r1, #2
 801b1cc:	0412      	lsls	r2, r2, #16
 801b1ce:	19de      	adds	r6, r3, r7
 801b1d0:	0c12      	lsrs	r2, r2, #16
 801b1d2:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801b1d6:	6006      	str	r6, [r0, #0]
 801b1d8:	4e1d      	ldr	r6, [pc, #116]	; (801b250 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801b1da:	19da      	adds	r2, r3, r7
 801b1dc:	6032      	str	r2, [r6, #0]
 801b1de:	220e      	movs	r2, #14
 801b1e0:	fb02 f20c 	mul.w	r2, r2, ip
 801b1e4:	3203      	adds	r2, #3
 801b1e6:	f022 0203 	bic.w	r2, r2, #3
 801b1ea:	443a      	add	r2, r7
 801b1ec:	4f19      	ldr	r7, [pc, #100]	; (801b254 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801b1ee:	4413      	add	r3, r2
 801b1f0:	603b      	str	r3, [r7, #0]
 801b1f2:	2300      	movs	r3, #0
 801b1f4:	4f18      	ldr	r7, [pc, #96]	; (801b258 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801b1f6:	469c      	mov	ip, r3
 801b1f8:	803b      	strh	r3, [r7, #0]
 801b1fa:	4f18      	ldr	r7, [pc, #96]	; (801b25c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801b1fc:	683f      	ldr	r7, [r7, #0]
 801b1fe:	1aba      	subs	r2, r7, r2
 801b200:	4f17      	ldr	r7, [pc, #92]	; (801b260 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801b202:	603a      	str	r2, [r7, #0]
 801b204:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801b208:	4a16      	ldr	r2, [pc, #88]	; (801b264 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801b20a:	8013      	strh	r3, [r2, #0]
 801b20c:	428b      	cmp	r3, r1
 801b20e:	d10d      	bne.n	801b22c <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801b210:	2300      	movs	r3, #0
 801b212:	240e      	movs	r4, #14
 801b214:	882d      	ldrh	r5, [r5, #0]
 801b216:	6830      	ldr	r0, [r6, #0]
 801b218:	429d      	cmp	r5, r3
 801b21a:	d90f      	bls.n	801b23c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801b21c:	fb04 0203 	mla	r2, r4, r3, r0
 801b220:	7b11      	ldrb	r1, [r2, #12]
 801b222:	3301      	adds	r3, #1
 801b224:	f36f 1145 	bfc	r1, #5, #1
 801b228:	7311      	strb	r1, [r2, #12]
 801b22a:	e7f5      	b.n	801b218 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801b22c:	6822      	ldr	r2, [r4, #0]
 801b22e:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801b232:	6802      	ldr	r2, [r0, #0]
 801b234:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801b238:	3301      	adds	r3, #1
 801b23a:	e7e7      	b.n	801b20c <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801b23c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b23e:	bf00      	nop
 801b240:	20197a4c 	.word	0x20197a4c
 801b244:	20197a68 	.word	0x20197a68
 801b248:	20197a6c 	.word	0x20197a6c
 801b24c:	20197a60 	.word	0x20197a60
 801b250:	20197a50 	.word	0x20197a50
 801b254:	20197a58 	.word	0x20197a58
 801b258:	20197a6a 	.word	0x20197a6a
 801b25c:	20197a54 	.word	0x20197a54
 801b260:	20197a64 	.word	0x20197a64
 801b264:	20197a5c 	.word	0x20197a5c

0801b268 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801b268:	4b06      	ldr	r3, [pc, #24]	; (801b284 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801b26a:	681b      	ldr	r3, [r3, #0]
 801b26c:	b943      	cbnz	r3, 801b280 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801b26e:	b139      	cbz	r1, 801b280 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801b270:	4b05      	ldr	r3, [pc, #20]	; (801b288 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801b272:	801a      	strh	r2, [r3, #0]
 801b274:	4b05      	ldr	r3, [pc, #20]	; (801b28c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801b276:	6019      	str	r1, [r3, #0]
 801b278:	4b05      	ldr	r3, [pc, #20]	; (801b290 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801b27a:	6018      	str	r0, [r3, #0]
 801b27c:	f7ff bf96 	b.w	801b1ac <_ZN8touchgfx6Bitmap10clearCacheEv>
 801b280:	4770      	bx	lr
 801b282:	bf00      	nop
 801b284:	20197a58 	.word	0x20197a58
 801b288:	20197a6c 	.word	0x20197a6c
 801b28c:	20197a54 	.word	0x20197a54
 801b290:	20197a4c 	.word	0x20197a4c

0801b294 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801b294:	b470      	push	{r4, r5, r6}
 801b296:	4c07      	ldr	r4, [pc, #28]	; (801b2b4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801b298:	4605      	mov	r5, r0
 801b29a:	6826      	ldr	r6, [r4, #0]
 801b29c:	4610      	mov	r0, r2
 801b29e:	9a03      	ldr	r2, [sp, #12]
 801b2a0:	b936      	cbnz	r6, 801b2b0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801b2a2:	6025      	str	r5, [r4, #0]
 801b2a4:	4c04      	ldr	r4, [pc, #16]	; (801b2b8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801b2a6:	8021      	strh	r1, [r4, #0]
 801b2a8:	bc70      	pop	{r4, r5, r6}
 801b2aa:	4619      	mov	r1, r3
 801b2ac:	f7ff bfdc 	b.w	801b268 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801b2b0:	bc70      	pop	{r4, r5, r6}
 801b2b2:	4770      	bx	lr
 801b2b4:	20197a70 	.word	0x20197a70
 801b2b8:	20197a68 	.word	0x20197a68

0801b2bc <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801b2bc:	4a12      	ldr	r2, [pc, #72]	; (801b308 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801b2be:	8803      	ldrh	r3, [r0, #0]
 801b2c0:	8812      	ldrh	r2, [r2, #0]
 801b2c2:	4293      	cmp	r3, r2
 801b2c4:	d207      	bcs.n	801b2d6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801b2c6:	2114      	movs	r1, #20
 801b2c8:	4a10      	ldr	r2, [pc, #64]	; (801b30c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801b2ca:	6812      	ldr	r2, [r2, #0]
 801b2cc:	fb01 2303 	mla	r3, r1, r3, r2
 801b2d0:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801b2d4:	4770      	bx	lr
 801b2d6:	490e      	ldr	r1, [pc, #56]	; (801b310 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801b2d8:	8809      	ldrh	r1, [r1, #0]
 801b2da:	4411      	add	r1, r2
 801b2dc:	428b      	cmp	r3, r1
 801b2de:	da04      	bge.n	801b2ea <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801b2e0:	1a9b      	subs	r3, r3, r2
 801b2e2:	4a0c      	ldr	r2, [pc, #48]	; (801b314 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801b2e4:	210e      	movs	r1, #14
 801b2e6:	6812      	ldr	r2, [r2, #0]
 801b2e8:	e7f0      	b.n	801b2cc <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801b2ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b2ee:	4293      	cmp	r3, r2
 801b2f0:	d108      	bne.n	801b304 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801b2f2:	4b09      	ldr	r3, [pc, #36]	; (801b318 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801b2f4:	781b      	ldrb	r3, [r3, #0]
 801b2f6:	b91b      	cbnz	r3, 801b300 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801b2f8:	4b08      	ldr	r3, [pc, #32]	; (801b31c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801b2fa:	f9b3 0000 	ldrsh.w	r0, [r3]
 801b2fe:	4770      	bx	lr
 801b300:	4b07      	ldr	r3, [pc, #28]	; (801b320 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801b302:	e7fa      	b.n	801b2fa <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801b304:	2000      	movs	r0, #0
 801b306:	4770      	bx	lr
 801b308:	20197a68 	.word	0x20197a68
 801b30c:	20197a70 	.word	0x20197a70
 801b310:	20197a6c 	.word	0x20197a6c
 801b314:	20197a50 	.word	0x20197a50
 801b318:	201979e0 	.word	0x201979e0
 801b31c:	201979e2 	.word	0x201979e2
 801b320:	201979e4 	.word	0x201979e4

0801b324 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801b324:	4a12      	ldr	r2, [pc, #72]	; (801b370 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801b326:	8803      	ldrh	r3, [r0, #0]
 801b328:	8812      	ldrh	r2, [r2, #0]
 801b32a:	4293      	cmp	r3, r2
 801b32c:	d207      	bcs.n	801b33e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801b32e:	2114      	movs	r1, #20
 801b330:	4a10      	ldr	r2, [pc, #64]	; (801b374 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801b332:	6812      	ldr	r2, [r2, #0]
 801b334:	fb01 2303 	mla	r3, r1, r3, r2
 801b338:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801b33c:	4770      	bx	lr
 801b33e:	490e      	ldr	r1, [pc, #56]	; (801b378 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801b340:	8809      	ldrh	r1, [r1, #0]
 801b342:	4411      	add	r1, r2
 801b344:	428b      	cmp	r3, r1
 801b346:	da04      	bge.n	801b352 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801b348:	1a9b      	subs	r3, r3, r2
 801b34a:	4a0c      	ldr	r2, [pc, #48]	; (801b37c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801b34c:	210e      	movs	r1, #14
 801b34e:	6812      	ldr	r2, [r2, #0]
 801b350:	e7f0      	b.n	801b334 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801b352:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b356:	4293      	cmp	r3, r2
 801b358:	d108      	bne.n	801b36c <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801b35a:	4b09      	ldr	r3, [pc, #36]	; (801b380 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801b35c:	781b      	ldrb	r3, [r3, #0]
 801b35e:	b91b      	cbnz	r3, 801b368 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801b360:	4b08      	ldr	r3, [pc, #32]	; (801b384 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801b362:	f9b3 0000 	ldrsh.w	r0, [r3]
 801b366:	4770      	bx	lr
 801b368:	4b07      	ldr	r3, [pc, #28]	; (801b388 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801b36a:	e7fa      	b.n	801b362 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801b36c:	2000      	movs	r0, #0
 801b36e:	4770      	bx	lr
 801b370:	20197a68 	.word	0x20197a68
 801b374:	20197a70 	.word	0x20197a70
 801b378:	20197a6c 	.word	0x20197a6c
 801b37c:	20197a50 	.word	0x20197a50
 801b380:	201979e0 	.word	0x201979e0
 801b384:	201979e4 	.word	0x201979e4
 801b388:	201979e2 	.word	0x201979e2

0801b38c <_ZNK8touchgfx6Bitmap7getDataEv>:
 801b38c:	4a12      	ldr	r2, [pc, #72]	; (801b3d8 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801b38e:	8803      	ldrh	r3, [r0, #0]
 801b390:	8811      	ldrh	r1, [r2, #0]
 801b392:	428b      	cmp	r3, r1
 801b394:	d20b      	bcs.n	801b3ae <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801b396:	4a11      	ldr	r2, [pc, #68]	; (801b3dc <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801b398:	6812      	ldr	r2, [r2, #0]
 801b39a:	b112      	cbz	r2, 801b3a2 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801b39c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b3a0:	b9c0      	cbnz	r0, 801b3d4 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801b3a2:	4a0f      	ldr	r2, [pc, #60]	; (801b3e0 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801b3a4:	6811      	ldr	r1, [r2, #0]
 801b3a6:	2214      	movs	r2, #20
 801b3a8:	4353      	muls	r3, r2
 801b3aa:	58c8      	ldr	r0, [r1, r3]
 801b3ac:	4770      	bx	lr
 801b3ae:	4a0d      	ldr	r2, [pc, #52]	; (801b3e4 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801b3b0:	8812      	ldrh	r2, [r2, #0]
 801b3b2:	440a      	add	r2, r1
 801b3b4:	4293      	cmp	r3, r2
 801b3b6:	da04      	bge.n	801b3c2 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801b3b8:	4a08      	ldr	r2, [pc, #32]	; (801b3dc <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801b3ba:	6812      	ldr	r2, [r2, #0]
 801b3bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b3c0:	4770      	bx	lr
 801b3c2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b3c6:	4293      	cmp	r3, r2
 801b3c8:	d103      	bne.n	801b3d2 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801b3ca:	4b07      	ldr	r3, [pc, #28]	; (801b3e8 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801b3cc:	681b      	ldr	r3, [r3, #0]
 801b3ce:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801b3d0:	4770      	bx	lr
 801b3d2:	2000      	movs	r0, #0
 801b3d4:	4770      	bx	lr
 801b3d6:	bf00      	nop
 801b3d8:	20197a68 	.word	0x20197a68
 801b3dc:	20197a4c 	.word	0x20197a4c
 801b3e0:	20197a70 	.word	0x20197a70
 801b3e4:	20197a6c 	.word	0x20197a6c
 801b3e8:	201979e8 	.word	0x201979e8

0801b3ec <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801b3ec:	4b24      	ldr	r3, [pc, #144]	; (801b480 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801b3ee:	8802      	ldrh	r2, [r0, #0]
 801b3f0:	8818      	ldrh	r0, [r3, #0]
 801b3f2:	4282      	cmp	r2, r0
 801b3f4:	d221      	bcs.n	801b43a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801b3f6:	4b23      	ldr	r3, [pc, #140]	; (801b484 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801b3f8:	6819      	ldr	r1, [r3, #0]
 801b3fa:	2314      	movs	r3, #20
 801b3fc:	fb03 1302 	mla	r3, r3, r2, r1
 801b400:	6858      	ldr	r0, [r3, #4]
 801b402:	2800      	cmp	r0, #0
 801b404:	d03a      	beq.n	801b47c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801b406:	4920      	ldr	r1, [pc, #128]	; (801b488 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801b408:	6809      	ldr	r1, [r1, #0]
 801b40a:	2900      	cmp	r1, #0
 801b40c:	d036      	beq.n	801b47c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801b40e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801b412:	2900      	cmp	r1, #0
 801b414:	d032      	beq.n	801b47c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801b416:	891a      	ldrh	r2, [r3, #8]
 801b418:	8958      	ldrh	r0, [r3, #10]
 801b41a:	4350      	muls	r0, r2
 801b41c:	7c5a      	ldrb	r2, [r3, #17]
 801b41e:	7cdb      	ldrb	r3, [r3, #19]
 801b420:	0952      	lsrs	r2, r2, #5
 801b422:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801b426:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801b42a:	2b0b      	cmp	r3, #11
 801b42c:	bf18      	it	ne
 801b42e:	0040      	lslne	r0, r0, #1
 801b430:	3003      	adds	r0, #3
 801b432:	f020 0003 	bic.w	r0, r0, #3
 801b436:	4408      	add	r0, r1
 801b438:	4770      	bx	lr
 801b43a:	4b14      	ldr	r3, [pc, #80]	; (801b48c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801b43c:	881b      	ldrh	r3, [r3, #0]
 801b43e:	4403      	add	r3, r0
 801b440:	429a      	cmp	r2, r3
 801b442:	da1a      	bge.n	801b47a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b444:	210e      	movs	r1, #14
 801b446:	4b12      	ldr	r3, [pc, #72]	; (801b490 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801b448:	1a10      	subs	r0, r2, r0
 801b44a:	681b      	ldr	r3, [r3, #0]
 801b44c:	fb01 3000 	mla	r0, r1, r0, r3
 801b450:	7b03      	ldrb	r3, [r0, #12]
 801b452:	f003 031f 	and.w	r3, r3, #31
 801b456:	2b0b      	cmp	r3, #11
 801b458:	d10b      	bne.n	801b472 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801b45a:	8903      	ldrh	r3, [r0, #8]
 801b45c:	8940      	ldrh	r0, [r0, #10]
 801b45e:	4358      	muls	r0, r3
 801b460:	4b09      	ldr	r3, [pc, #36]	; (801b488 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801b462:	3003      	adds	r0, #3
 801b464:	6819      	ldr	r1, [r3, #0]
 801b466:	f020 0303 	bic.w	r3, r0, #3
 801b46a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801b46e:	4418      	add	r0, r3
 801b470:	4770      	bx	lr
 801b472:	2b0d      	cmp	r3, #13
 801b474:	d101      	bne.n	801b47a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b476:	300d      	adds	r0, #13
 801b478:	4770      	bx	lr
 801b47a:	2000      	movs	r0, #0
 801b47c:	4770      	bx	lr
 801b47e:	bf00      	nop
 801b480:	20197a68 	.word	0x20197a68
 801b484:	20197a70 	.word	0x20197a70
 801b488:	20197a4c 	.word	0x20197a4c
 801b48c:	20197a6c 	.word	0x20197a6c
 801b490:	20197a50 	.word	0x20197a50

0801b494 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801b494:	b510      	push	{r4, lr}
 801b496:	4a17      	ldr	r2, [pc, #92]	; (801b4f4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801b498:	8803      	ldrh	r3, [r0, #0]
 801b49a:	8812      	ldrh	r2, [r2, #0]
 801b49c:	4293      	cmp	r3, r2
 801b49e:	d20c      	bcs.n	801b4ba <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801b4a0:	2114      	movs	r1, #20
 801b4a2:	4a15      	ldr	r2, [pc, #84]	; (801b4f8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801b4a4:	6812      	ldr	r2, [r2, #0]
 801b4a6:	fb01 2303 	mla	r3, r1, r3, r2
 801b4aa:	7c58      	ldrb	r0, [r3, #17]
 801b4ac:	0942      	lsrs	r2, r0, #5
 801b4ae:	7cd8      	ldrb	r0, [r3, #19]
 801b4b0:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801b4b4:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801b4b8:	bd10      	pop	{r4, pc}
 801b4ba:	4910      	ldr	r1, [pc, #64]	; (801b4fc <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801b4bc:	8809      	ldrh	r1, [r1, #0]
 801b4be:	4411      	add	r1, r2
 801b4c0:	428b      	cmp	r3, r1
 801b4c2:	da09      	bge.n	801b4d8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801b4c4:	210e      	movs	r1, #14
 801b4c6:	1a9b      	subs	r3, r3, r2
 801b4c8:	4a0d      	ldr	r2, [pc, #52]	; (801b500 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801b4ca:	6812      	ldr	r2, [r2, #0]
 801b4cc:	fb01 2303 	mla	r3, r1, r3, r2
 801b4d0:	7b18      	ldrb	r0, [r3, #12]
 801b4d2:	f000 001f 	and.w	r0, r0, #31
 801b4d6:	e7ef      	b.n	801b4b8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801b4d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b4dc:	4293      	cmp	r3, r2
 801b4de:	d106      	bne.n	801b4ee <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801b4e0:	f7fb fd0a 	bl	8016ef8 <_ZN8touchgfx3HAL3lcdEv>
 801b4e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b4e8:	6803      	ldr	r3, [r0, #0]
 801b4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b4ec:	4718      	bx	r3
 801b4ee:	2000      	movs	r0, #0
 801b4f0:	e7e2      	b.n	801b4b8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801b4f2:	bf00      	nop
 801b4f4:	20197a68 	.word	0x20197a68
 801b4f8:	20197a70 	.word	0x20197a70
 801b4fc:	20197a6c 	.word	0x20197a6c
 801b500:	20197a50 	.word	0x20197a50

0801b504 <CRC_Lock>:
 801b504:	b530      	push	{r4, r5, lr}
 801b506:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801b50a:	f24c 2540 	movw	r5, #49728	; 0xc240
 801b50e:	4a1e      	ldr	r2, [pc, #120]	; (801b588 <CRC_Lock+0x84>)
 801b510:	6813      	ldr	r3, [r2, #0]
 801b512:	f023 0301 	bic.w	r3, r3, #1
 801b516:	6013      	str	r3, [r2, #0]
 801b518:	4b1c      	ldr	r3, [pc, #112]	; (801b58c <CRC_Lock+0x88>)
 801b51a:	681a      	ldr	r2, [r3, #0]
 801b51c:	4022      	ands	r2, r4
 801b51e:	42aa      	cmp	r2, r5
 801b520:	d005      	beq.n	801b52e <CRC_Lock+0x2a>
 801b522:	f24c 2270 	movw	r2, #49776	; 0xc270
 801b526:	681b      	ldr	r3, [r3, #0]
 801b528:	4023      	ands	r3, r4
 801b52a:	4293      	cmp	r3, r2
 801b52c:	d124      	bne.n	801b578 <CRC_Lock+0x74>
 801b52e:	4b18      	ldr	r3, [pc, #96]	; (801b590 <CRC_Lock+0x8c>)
 801b530:	681b      	ldr	r3, [r3, #0]
 801b532:	bb0b      	cbnz	r3, 801b578 <CRC_Lock+0x74>
 801b534:	4b17      	ldr	r3, [pc, #92]	; (801b594 <CRC_Lock+0x90>)
 801b536:	681a      	ldr	r2, [r3, #0]
 801b538:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801b53c:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801b540:	d00d      	beq.n	801b55e <CRC_Lock+0x5a>
 801b542:	f240 4483 	movw	r4, #1155	; 0x483
 801b546:	681a      	ldr	r2, [r3, #0]
 801b548:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801b54c:	42a2      	cmp	r2, r4
 801b54e:	d006      	beq.n	801b55e <CRC_Lock+0x5a>
 801b550:	f240 4285 	movw	r2, #1157	; 0x485
 801b554:	681b      	ldr	r3, [r3, #0]
 801b556:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b55a:	4293      	cmp	r3, r2
 801b55c:	d10c      	bne.n	801b578 <CRC_Lock+0x74>
 801b55e:	2201      	movs	r2, #1
 801b560:	4b0d      	ldr	r3, [pc, #52]	; (801b598 <CRC_Lock+0x94>)
 801b562:	601a      	str	r2, [r3, #0]
 801b564:	681a      	ldr	r2, [r3, #0]
 801b566:	2a00      	cmp	r2, #0
 801b568:	d1fc      	bne.n	801b564 <CRC_Lock+0x60>
 801b56a:	4b0c      	ldr	r3, [pc, #48]	; (801b59c <CRC_Lock+0x98>)
 801b56c:	6018      	str	r0, [r3, #0]
 801b56e:	6818      	ldr	r0, [r3, #0]
 801b570:	1a43      	subs	r3, r0, r1
 801b572:	4258      	negs	r0, r3
 801b574:	4158      	adcs	r0, r3
 801b576:	bd30      	pop	{r4, r5, pc}
 801b578:	2201      	movs	r2, #1
 801b57a:	4b09      	ldr	r3, [pc, #36]	; (801b5a0 <CRC_Lock+0x9c>)
 801b57c:	601a      	str	r2, [r3, #0]
 801b57e:	681a      	ldr	r2, [r3, #0]
 801b580:	2a00      	cmp	r2, #0
 801b582:	d1fc      	bne.n	801b57e <CRC_Lock+0x7a>
 801b584:	4b07      	ldr	r3, [pc, #28]	; (801b5a4 <CRC_Lock+0xa0>)
 801b586:	e7f1      	b.n	801b56c <CRC_Lock+0x68>
 801b588:	e0002000 	.word	0xe0002000
 801b58c:	e000ed00 	.word	0xe000ed00
 801b590:	e0042000 	.word	0xe0042000
 801b594:	5c001000 	.word	0x5c001000
 801b598:	58024c08 	.word	0x58024c08
 801b59c:	58024c00 	.word	0x58024c00
 801b5a0:	40023008 	.word	0x40023008
 801b5a4:	40023000 	.word	0x40023000

0801b5a8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801b5a8:	6101      	str	r1, [r0, #16]
 801b5aa:	4770      	bx	lr

0801b5ac <_ZN8touchgfx8Gestures4tickEv>:
 801b5ac:	7b83      	ldrb	r3, [r0, #14]
 801b5ae:	b14b      	cbz	r3, 801b5c4 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801b5b0:	8903      	ldrh	r3, [r0, #8]
 801b5b2:	3301      	adds	r3, #1
 801b5b4:	b29b      	uxth	r3, r3
 801b5b6:	2b07      	cmp	r3, #7
 801b5b8:	8103      	strh	r3, [r0, #8]
 801b5ba:	bf81      	itttt	hi
 801b5bc:	2300      	movhi	r3, #0
 801b5be:	8143      	strhhi	r3, [r0, #10]
 801b5c0:	8183      	strhhi	r3, [r0, #12]
 801b5c2:	7383      	strbhi	r3, [r0, #14]
 801b5c4:	4770      	bx	lr
	...

0801b5c8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801b5c8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801b5cc:	4698      	mov	r8, r3
 801b5ce:	4604      	mov	r4, r0
 801b5d0:	8883      	ldrh	r3, [r0, #4]
 801b5d2:	460e      	mov	r6, r1
 801b5d4:	88c1      	ldrh	r1, [r0, #6]
 801b5d6:	2000      	movs	r0, #0
 801b5d8:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b5dc:	eba8 0303 	sub.w	r3, r8, r3
 801b5e0:	b21b      	sxth	r3, r3
 801b5e2:	4617      	mov	r7, r2
 801b5e4:	4a17      	ldr	r2, [pc, #92]	; (801b644 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 801b5e6:	2b00      	cmp	r3, #0
 801b5e8:	bfb8      	it	lt
 801b5ea:	425b      	neglt	r3, r3
 801b5ec:	9200      	str	r2, [sp, #0]
 801b5ee:	8aa2      	ldrh	r2, [r4, #20]
 801b5f0:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801b5f4:	b21b      	sxth	r3, r3
 801b5f6:	4293      	cmp	r3, r2
 801b5f8:	f88d 0004 	strb.w	r0, [sp, #4]
 801b5fc:	f8ad 1008 	strh.w	r1, [sp, #8]
 801b600:	f8ad 800a 	strh.w	r8, [sp, #10]
 801b604:	f8ad 500c 	strh.w	r5, [sp, #12]
 801b608:	dc07      	bgt.n	801b61a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 801b60a:	1a69      	subs	r1, r5, r1
 801b60c:	b209      	sxth	r1, r1
 801b60e:	2900      	cmp	r1, #0
 801b610:	bfb8      	it	lt
 801b612:	4249      	neglt	r1, r1
 801b614:	b209      	sxth	r1, r1
 801b616:	428a      	cmp	r2, r1
 801b618:	da10      	bge.n	801b63c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 801b61a:	6920      	ldr	r0, [r4, #16]
 801b61c:	4669      	mov	r1, sp
 801b61e:	6803      	ldr	r3, [r0, #0]
 801b620:	eba8 0606 	sub.w	r6, r8, r6
 801b624:	685b      	ldr	r3, [r3, #4]
 801b626:	4798      	blx	r3
 801b628:	2300      	movs	r3, #0
 801b62a:	2001      	movs	r0, #1
 801b62c:	1bef      	subs	r7, r5, r7
 801b62e:	8123      	strh	r3, [r4, #8]
 801b630:	8166      	strh	r6, [r4, #10]
 801b632:	81a7      	strh	r7, [r4, #12]
 801b634:	f8a4 8004 	strh.w	r8, [r4, #4]
 801b638:	80e5      	strh	r5, [r4, #6]
 801b63a:	73a0      	strb	r0, [r4, #14]
 801b63c:	b004      	add	sp, #16
 801b63e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b642:	bf00      	nop
 801b644:	0802bb1c 	.word	0x0802bb1c

0801b648 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801b648:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b64a:	461e      	mov	r6, r3
 801b64c:	1e4b      	subs	r3, r1, #1
 801b64e:	2b01      	cmp	r3, #1
 801b650:	b085      	sub	sp, #20
 801b652:	4604      	mov	r4, r0
 801b654:	460d      	mov	r5, r1
 801b656:	4617      	mov	r7, r2
 801b658:	d84b      	bhi.n	801b6f2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801b65a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b65e:	1cd3      	adds	r3, r2, #3
 801b660:	b29b      	uxth	r3, r3
 801b662:	2b06      	cmp	r3, #6
 801b664:	d916      	bls.n	801b694 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801b666:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801b708 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801b66a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b66e:	f8cd c004 	str.w	ip, [sp, #4]
 801b672:	f04f 0c00 	mov.w	ip, #0
 801b676:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801b67a:	6900      	ldr	r0, [r0, #16]
 801b67c:	f8ad 100c 	strh.w	r1, [sp, #12]
 801b680:	f88d c008 	strb.w	ip, [sp, #8]
 801b684:	f8ad 200a 	strh.w	r2, [sp, #10]
 801b688:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b68c:	6803      	ldr	r3, [r0, #0]
 801b68e:	a901      	add	r1, sp, #4
 801b690:	689b      	ldr	r3, [r3, #8]
 801b692:	4798      	blx	r3
 801b694:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b698:	1cd3      	adds	r3, r2, #3
 801b69a:	b29b      	uxth	r3, r3
 801b69c:	2b06      	cmp	r3, #6
 801b69e:	d916      	bls.n	801b6ce <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801b6a0:	f8df c064 	ldr.w	ip, [pc, #100]	; 801b708 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801b6a4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b6a8:	f8cd c004 	str.w	ip, [sp, #4]
 801b6ac:	f04f 0c01 	mov.w	ip, #1
 801b6b0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801b6b4:	6920      	ldr	r0, [r4, #16]
 801b6b6:	f8ad 100c 	strh.w	r1, [sp, #12]
 801b6ba:	f88d c008 	strb.w	ip, [sp, #8]
 801b6be:	f8ad 200a 	strh.w	r2, [sp, #10]
 801b6c2:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b6c6:	6803      	ldr	r3, [r0, #0]
 801b6c8:	a901      	add	r1, sp, #4
 801b6ca:	689b      	ldr	r3, [r3, #8]
 801b6cc:	4798      	blx	r3
 801b6ce:	4b0d      	ldr	r3, [pc, #52]	; (801b704 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801b6d0:	6920      	ldr	r0, [r4, #16]
 801b6d2:	9301      	str	r3, [sp, #4]
 801b6d4:	2300      	movs	r3, #0
 801b6d6:	f88d 5008 	strb.w	r5, [sp, #8]
 801b6da:	f8ad 700a 	strh.w	r7, [sp, #10]
 801b6de:	f8ad 600c 	strh.w	r6, [sp, #12]
 801b6e2:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b6e6:	6803      	ldr	r3, [r0, #0]
 801b6e8:	a901      	add	r1, sp, #4
 801b6ea:	681b      	ldr	r3, [r3, #0]
 801b6ec:	4798      	blx	r3
 801b6ee:	b005      	add	sp, #20
 801b6f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b6f2:	2900      	cmp	r1, #0
 801b6f4:	d1eb      	bne.n	801b6ce <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801b6f6:	80a2      	strh	r2, [r4, #4]
 801b6f8:	80c6      	strh	r6, [r0, #6]
 801b6fa:	60a1      	str	r1, [r4, #8]
 801b6fc:	81a1      	strh	r1, [r4, #12]
 801b6fe:	73a1      	strb	r1, [r4, #14]
 801b700:	e7e5      	b.n	801b6ce <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801b702:	bf00      	nop
 801b704:	0802bb08 	.word	0x0802bb08
 801b708:	0802bb30 	.word	0x0802bb30

0801b70c <nema_rb_init>:
 801b70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b710:	6805      	ldr	r5, [r0, #0]
 801b712:	4f23      	ldr	r7, [pc, #140]	; (801b7a0 <nema_rb_init+0x94>)
 801b714:	2d00      	cmp	r5, #0
 801b716:	603d      	str	r5, [r7, #0]
 801b718:	dd3c      	ble.n	801b794 <nema_rb_init+0x88>
 801b71a:	f8df c090 	ldr.w	ip, [pc, #144]	; 801b7ac <nema_rb_init+0xa0>
 801b71e:	10ab      	asrs	r3, r5, #2
 801b720:	3b04      	subs	r3, #4
 801b722:	f8df e08c 	ldr.w	lr, [pc, #140]	; 801b7b0 <nema_rb_init+0xa4>
 801b726:	6886      	ldr	r6, [r0, #8]
 801b728:	4c1e      	ldr	r4, [pc, #120]	; (801b7a4 <nema_rb_init+0x98>)
 801b72a:	f8cc 3000 	str.w	r3, [ip]
 801b72e:	f8df 8084 	ldr.w	r8, [pc, #132]	; 801b7b4 <nema_rb_init+0xa8>
 801b732:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801b736:	f8ce 0000 	str.w	r0, [lr]
 801b73a:	6026      	str	r6, [r4, #0]
 801b73c:	f8c8 c000 	str.w	ip, [r8]
 801b740:	b329      	cbz	r1, 801b78e <nema_rb_init+0x82>
 801b742:	2400      	movs	r4, #0
 801b744:	f8df e070 	ldr.w	lr, [pc, #112]	; 801b7b8 <nema_rb_init+0xac>
 801b748:	4917      	ldr	r1, [pc, #92]	; (801b7a8 <nema_rb_init+0x9c>)
 801b74a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801b74e:	f846 e023 	str.w	lr, [r6, r3, lsl #2]
 801b752:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801b756:	e9c3 1502 	strd	r1, r5, [r3, #8]
 801b75a:	f8c3 c004 	str.w	ip, [r3, #4]
 801b75e:	f7e7 fd78 	bl	8003252 <nema_buffer_flush>
 801b762:	4621      	mov	r1, r4
 801b764:	f44f 70a4 	mov.w	r0, #328	; 0x148
 801b768:	f7e7 fcbe 	bl	80030e8 <nema_reg_write>
 801b76c:	f8d8 1000 	ldr.w	r1, [r8]
 801b770:	20ec      	movs	r0, #236	; 0xec
 801b772:	f041 0106 	orr.w	r1, r1, #6
 801b776:	f7e7 fcb7 	bl	80030e8 <nema_reg_write>
 801b77a:	f8d8 1000 	ldr.w	r1, [r8]
 801b77e:	20f0      	movs	r0, #240	; 0xf0
 801b780:	f7e7 fcb2 	bl	80030e8 <nema_reg_write>
 801b784:	6839      	ldr	r1, [r7, #0]
 801b786:	20f4      	movs	r0, #244	; 0xf4
 801b788:	f7e7 fcae 	bl	80030e8 <nema_reg_write>
 801b78c:	4621      	mov	r1, r4
 801b78e:	4608      	mov	r0, r1
 801b790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b794:	2004      	movs	r0, #4
 801b796:	f000 fa25 	bl	801bbe4 <nema_set_error>
 801b79a:	f04f 31ff 	mov.w	r1, #4294967295
 801b79e:	e7f6      	b.n	801b78e <nema_rb_init+0x82>
 801b7a0:	20197a84 	.word	0x20197a84
 801b7a4:	20197a7c 	.word	0x20197a7c
 801b7a8:	ff0000f4 	.word	0xff0000f4
 801b7ac:	20197a80 	.word	0x20197a80
 801b7b0:	20197a74 	.word	0x20197a74
 801b7b4:	20197a78 	.word	0x20197a78
 801b7b8:	ff0000f0 	.word	0xff0000f0

0801b7bc <nema_rb_submit_cmdlist2>:
 801b7bc:	2900      	cmp	r1, #0
 801b7be:	d074      	beq.n	801b8aa <nema_rb_submit_cmdlist2+0xee>
 801b7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b7c4:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 801b8c0 <nema_rb_submit_cmdlist2+0x104>
 801b7c8:	4b39      	ldr	r3, [pc, #228]	; (801b8b0 <nema_rb_submit_cmdlist2+0xf4>)
 801b7ca:	f8d8 2000 	ldr.w	r2, [r8]
 801b7ce:	681d      	ldr	r5, [r3, #0]
 801b7d0:	6913      	ldr	r3, [r2, #16]
 801b7d2:	468c      	mov	ip, r1
 801b7d4:	4c37      	ldr	r4, [pc, #220]	; (801b8b4 <nema_rb_submit_cmdlist2+0xf8>)
 801b7d6:	1d19      	adds	r1, r3, #4
 801b7d8:	42a9      	cmp	r1, r5
 801b7da:	6824      	ldr	r4, [r4, #0]
 801b7dc:	db0a      	blt.n	801b7f4 <nema_rb_submit_cmdlist2+0x38>
 801b7de:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 801b7e2:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 801b7e6:	6913      	ldr	r3, [r2, #16]
 801b7e8:	3301      	adds	r3, #1
 801b7ea:	429d      	cmp	r5, r3
 801b7ec:	6113      	str	r3, [r2, #16]
 801b7ee:	dc59      	bgt.n	801b8a4 <nema_rb_submit_cmdlist2+0xe8>
 801b7f0:	2300      	movs	r3, #0
 801b7f2:	6113      	str	r3, [r2, #16]
 801b7f4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 801b7f8:	f04f 0e00 	mov.w	lr, #0
 801b7fc:	e009      	b.n	801b812 <nema_rb_submit_cmdlist2+0x56>
 801b7fe:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 801b802:	6913      	ldr	r3, [r2, #16]
 801b804:	3301      	adds	r3, #1
 801b806:	429d      	cmp	r5, r3
 801b808:	6113      	str	r3, [r2, #16]
 801b80a:	bfdc      	itt	le
 801b80c:	2300      	movle	r3, #0
 801b80e:	f8c2 e010 	strle.w	lr, [r2, #16]
 801b812:	f013 0703 	ands.w	r7, r3, #3
 801b816:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801b81a:	d1f0      	bne.n	801b7fe <nema_rb_submit_cmdlist2+0x42>
 801b81c:	23f0      	movs	r3, #240	; 0xf0
 801b81e:	6033      	str	r3, [r6, #0]
 801b820:	6913      	ldr	r3, [r2, #16]
 801b822:	3301      	adds	r3, #1
 801b824:	429d      	cmp	r5, r3
 801b826:	bfd3      	iteet	le
 801b828:	4623      	movle	r3, r4
 801b82a:	6113      	strgt	r3, [r2, #16]
 801b82c:	eb04 0383 	addgt.w	r3, r4, r3, lsl #2
 801b830:	6117      	strle	r7, [r2, #16]
 801b832:	6018      	str	r0, [r3, #0]
 801b834:	6913      	ldr	r3, [r2, #16]
 801b836:	3301      	adds	r3, #1
 801b838:	429d      	cmp	r5, r3
 801b83a:	dd2f      	ble.n	801b89c <nema_rb_submit_cmdlist2+0xe0>
 801b83c:	6113      	str	r3, [r2, #16]
 801b83e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b842:	491d      	ldr	r1, [pc, #116]	; (801b8b8 <nema_rb_submit_cmdlist2+0xfc>)
 801b844:	4610      	mov	r0, r2
 801b846:	6019      	str	r1, [r3, #0]
 801b848:	6913      	ldr	r3, [r2, #16]
 801b84a:	3301      	adds	r3, #1
 801b84c:	429d      	cmp	r5, r3
 801b84e:	bfd3      	iteet	le
 801b850:	2300      	movle	r3, #0
 801b852:	eb04 0483 	addgt.w	r4, r4, r3, lsl #2
 801b856:	6113      	strgt	r3, [r2, #16]
 801b858:	6113      	strle	r3, [r2, #16]
 801b85a:	f8c4 c000 	str.w	ip, [r4]
 801b85e:	6913      	ldr	r3, [r2, #16]
 801b860:	3301      	adds	r3, #1
 801b862:	429d      	cmp	r5, r3
 801b864:	bfd8      	it	le
 801b866:	2300      	movle	r3, #0
 801b868:	6113      	str	r3, [r2, #16]
 801b86a:	f7e7 fcf2 	bl	8003252 <nema_buffer_flush>
 801b86e:	4a13      	ldr	r2, [pc, #76]	; (801b8bc <nema_rb_submit_cmdlist2+0x100>)
 801b870:	f8d8 3000 	ldr.w	r3, [r8]
 801b874:	6811      	ldr	r1, [r2, #0]
 801b876:	691b      	ldr	r3, [r3, #16]
 801b878:	20ec      	movs	r0, #236	; 0xec
 801b87a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801b87e:	f041 0104 	orr.w	r1, r1, #4
 801b882:	f7e7 fc31 	bl	80030e8 <nema_reg_write>
 801b886:	f8d8 3000 	ldr.w	r3, [r8]
 801b88a:	6958      	ldr	r0, [r3, #20]
 801b88c:	3001      	adds	r0, #1
 801b88e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 801b892:	bfa8      	it	ge
 801b894:	2000      	movge	r0, #0
 801b896:	6158      	str	r0, [r3, #20]
 801b898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b89c:	2100      	movs	r1, #0
 801b89e:	4623      	mov	r3, r4
 801b8a0:	6111      	str	r1, [r2, #16]
 801b8a2:	e7ce      	b.n	801b842 <nema_rb_submit_cmdlist2+0x86>
 801b8a4:	2b00      	cmp	r3, #0
 801b8a6:	d19c      	bne.n	801b7e2 <nema_rb_submit_cmdlist2+0x26>
 801b8a8:	e7a4      	b.n	801b7f4 <nema_rb_submit_cmdlist2+0x38>
 801b8aa:	f04f 30ff 	mov.w	r0, #4294967295
 801b8ae:	4770      	bx	lr
 801b8b0:	20197a80 	.word	0x20197a80
 801b8b4:	20197a7c 	.word	0x20197a7c
 801b8b8:	000200f4 	.word	0x000200f4
 801b8bc:	20197a78 	.word	0x20197a78
 801b8c0:	20197a74 	.word	0x20197a74

0801b8c4 <nema_rb_submit_cmdlist>:
 801b8c4:	68c0      	ldr	r0, [r0, #12]
 801b8c6:	f7ff bf79 	b.w	801b7bc <nema_rb_submit_cmdlist2>
 801b8ca:	bf00      	nop

0801b8cc <nema_rb_inline_cmd>:
 801b8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b8ce:	4e21      	ldr	r6, [pc, #132]	; (801b954 <nema_rb_inline_cmd+0x88>)
 801b8d0:	4b21      	ldr	r3, [pc, #132]	; (801b958 <nema_rb_inline_cmd+0x8c>)
 801b8d2:	6832      	ldr	r2, [r6, #0]
 801b8d4:	681d      	ldr	r5, [r3, #0]
 801b8d6:	6913      	ldr	r3, [r2, #16]
 801b8d8:	4c20      	ldr	r4, [pc, #128]	; (801b95c <nema_rb_inline_cmd+0x90>)
 801b8da:	1c5f      	adds	r7, r3, #1
 801b8dc:	42af      	cmp	r7, r5
 801b8de:	6824      	ldr	r4, [r4, #0]
 801b8e0:	db24      	blt.n	801b92c <nema_rb_inline_cmd+0x60>
 801b8e2:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 801b8e6:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
 801b8ea:	6913      	ldr	r3, [r2, #16]
 801b8ec:	3301      	adds	r3, #1
 801b8ee:	429d      	cmp	r5, r3
 801b8f0:	6113      	str	r3, [r2, #16]
 801b8f2:	dc17      	bgt.n	801b924 <nema_rb_inline_cmd+0x58>
 801b8f4:	2700      	movs	r7, #0
 801b8f6:	4623      	mov	r3, r4
 801b8f8:	6117      	str	r7, [r2, #16]
 801b8fa:	6018      	str	r0, [r3, #0]
 801b8fc:	6913      	ldr	r3, [r2, #16]
 801b8fe:	3301      	adds	r3, #1
 801b900:	429d      	cmp	r5, r3
 801b902:	bfd3      	iteet	le
 801b904:	2300      	movle	r3, #0
 801b906:	eb04 0483 	addgt.w	r4, r4, r3, lsl #2
 801b90a:	6113      	strgt	r3, [r2, #16]
 801b90c:	6113      	strle	r3, [r2, #16]
 801b90e:	6021      	str	r1, [r4, #0]
 801b910:	6913      	ldr	r3, [r2, #16]
 801b912:	3301      	adds	r3, #1
 801b914:	429d      	cmp	r5, r3
 801b916:	bfd8      	it	le
 801b918:	2300      	movle	r3, #0
 801b91a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801b91e:	6113      	str	r3, [r2, #16]
 801b920:	d107      	bne.n	801b932 <nema_rb_inline_cmd+0x66>
 801b922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b924:	2b00      	cmp	r3, #0
 801b926:	d1de      	bne.n	801b8e6 <nema_rb_inline_cmd+0x1a>
 801b928:	4623      	mov	r3, r4
 801b92a:	e7e6      	b.n	801b8fa <nema_rb_inline_cmd+0x2e>
 801b92c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b930:	e7e3      	b.n	801b8fa <nema_rb_inline_cmd+0x2e>
 801b932:	4610      	mov	r0, r2
 801b934:	f7e7 fc8d 	bl	8003252 <nema_buffer_flush>
 801b938:	6833      	ldr	r3, [r6, #0]
 801b93a:	4a09      	ldr	r2, [pc, #36]	; (801b960 <nema_rb_inline_cmd+0x94>)
 801b93c:	691b      	ldr	r3, [r3, #16]
 801b93e:	6811      	ldr	r1, [r2, #0]
 801b940:	20ec      	movs	r0, #236	; 0xec
 801b942:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801b946:	f041 0104 	orr.w	r1, r1, #4
 801b94a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801b94e:	f7e7 bbcb 	b.w	80030e8 <nema_reg_write>
 801b952:	bf00      	nop
 801b954:	20197a74 	.word	0x20197a74
 801b958:	20197a80 	.word	0x20197a80
 801b95c:	20197a7c 	.word	0x20197a7c
 801b960:	20197a78 	.word	0x20197a78

0801b964 <nema_rb_force_flush>:
 801b964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b966:	4e36      	ldr	r6, [pc, #216]	; (801ba40 <nema_rb_force_flush+0xdc>)
 801b968:	4b36      	ldr	r3, [pc, #216]	; (801ba44 <nema_rb_force_flush+0xe0>)
 801b96a:	6830      	ldr	r0, [r6, #0]
 801b96c:	6819      	ldr	r1, [r3, #0]
 801b96e:	6903      	ldr	r3, [r0, #16]
 801b970:	4a35      	ldr	r2, [pc, #212]	; (801ba48 <nema_rb_force_flush+0xe4>)
 801b972:	1d1c      	adds	r4, r3, #4
 801b974:	428c      	cmp	r4, r1
 801b976:	6812      	ldr	r2, [r2, #0]
 801b978:	db0a      	blt.n	801b990 <nema_rb_force_flush+0x2c>
 801b97a:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 801b97e:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 801b982:	6903      	ldr	r3, [r0, #16]
 801b984:	3301      	adds	r3, #1
 801b986:	4299      	cmp	r1, r3
 801b988:	6103      	str	r3, [r0, #16]
 801b98a:	dc51      	bgt.n	801ba30 <nema_rb_force_flush+0xcc>
 801b98c:	2300      	movs	r3, #0
 801b98e:	6103      	str	r3, [r0, #16]
 801b990:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 801b994:	2700      	movs	r7, #0
 801b996:	e008      	b.n	801b9aa <nema_rb_force_flush+0x46>
 801b998:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 801b99c:	6903      	ldr	r3, [r0, #16]
 801b99e:	3301      	adds	r3, #1
 801b9a0:	4299      	cmp	r1, r3
 801b9a2:	6103      	str	r3, [r0, #16]
 801b9a4:	bfdc      	itt	le
 801b9a6:	2300      	movle	r3, #0
 801b9a8:	6107      	strle	r7, [r0, #16]
 801b9aa:	f013 0c03 	ands.w	ip, r3, #3
 801b9ae:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 801b9b2:	d1f1      	bne.n	801b998 <nema_rb_force_flush+0x34>
 801b9b4:	4d25      	ldr	r5, [pc, #148]	; (801ba4c <nema_rb_force_flush+0xe8>)
 801b9b6:	4f26      	ldr	r7, [pc, #152]	; (801ba50 <nema_rb_force_flush+0xec>)
 801b9b8:	6025      	str	r5, [r4, #0]
 801b9ba:	6904      	ldr	r4, [r0, #16]
 801b9bc:	683d      	ldr	r5, [r7, #0]
 801b9be:	3401      	adds	r4, #1
 801b9c0:	42a1      	cmp	r1, r4
 801b9c2:	bfd8      	it	le
 801b9c4:	4614      	movle	r4, r2
 801b9c6:	f103 0304 	add.w	r3, r3, #4
 801b9ca:	bfc8      	it	gt
 801b9cc:	6104      	strgt	r4, [r0, #16]
 801b9ce:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801b9d2:	bfcc      	ite	gt
 801b9d4:	eb02 0484 	addgt.w	r4, r2, r4, lsl #2
 801b9d8:	f8c0 c010 	strle.w	ip, [r0, #16]
 801b9dc:	6023      	str	r3, [r4, #0]
 801b9de:	6903      	ldr	r3, [r0, #16]
 801b9e0:	3301      	adds	r3, #1
 801b9e2:	4299      	cmp	r1, r3
 801b9e4:	dd27      	ble.n	801ba36 <nema_rb_force_flush+0xd2>
 801b9e6:	6103      	str	r3, [r0, #16]
 801b9e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b9ec:	4c19      	ldr	r4, [pc, #100]	; (801ba54 <nema_rb_force_flush+0xf0>)
 801b9ee:	601c      	str	r4, [r3, #0]
 801b9f0:	6903      	ldr	r3, [r0, #16]
 801b9f2:	3301      	adds	r3, #1
 801b9f4:	4299      	cmp	r1, r3
 801b9f6:	bfd5      	itete	le
 801b9f8:	2300      	movle	r3, #0
 801b9fa:	6103      	strgt	r3, [r0, #16]
 801b9fc:	6103      	strle	r3, [r0, #16]
 801b9fe:	eb02 0283 	addgt.w	r2, r2, r3, lsl #2
 801ba02:	4b15      	ldr	r3, [pc, #84]	; (801ba58 <nema_rb_force_flush+0xf4>)
 801ba04:	681b      	ldr	r3, [r3, #0]
 801ba06:	6013      	str	r3, [r2, #0]
 801ba08:	6903      	ldr	r3, [r0, #16]
 801ba0a:	3301      	adds	r3, #1
 801ba0c:	4299      	cmp	r1, r3
 801ba0e:	bfd8      	it	le
 801ba10:	2300      	movle	r3, #0
 801ba12:	6103      	str	r3, [r0, #16]
 801ba14:	f7e7 fc1d 	bl	8003252 <nema_buffer_flush>
 801ba18:	6833      	ldr	r3, [r6, #0]
 801ba1a:	6839      	ldr	r1, [r7, #0]
 801ba1c:	691b      	ldr	r3, [r3, #16]
 801ba1e:	20ec      	movs	r0, #236	; 0xec
 801ba20:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801ba24:	f041 0104 	orr.w	r1, r1, #4
 801ba28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801ba2c:	f7e7 bb5c 	b.w	80030e8 <nema_reg_write>
 801ba30:	2b00      	cmp	r3, #0
 801ba32:	d1a4      	bne.n	801b97e <nema_rb_force_flush+0x1a>
 801ba34:	e7ac      	b.n	801b990 <nema_rb_force_flush+0x2c>
 801ba36:	2400      	movs	r4, #0
 801ba38:	4613      	mov	r3, r2
 801ba3a:	6104      	str	r4, [r0, #16]
 801ba3c:	e7d6      	b.n	801b9ec <nema_rb_force_flush+0x88>
 801ba3e:	bf00      	nop
 801ba40:	20197a74 	.word	0x20197a74
 801ba44:	20197a80 	.word	0x20197a80
 801ba48:	20197a7c 	.word	0x20197a7c
 801ba4c:	ff0000f0 	.word	0xff0000f0
 801ba50:	20197a78 	.word	0x20197a78
 801ba54:	ff0000f4 	.word	0xff0000f4
 801ba58:	20197a84 	.word	0x20197a84

0801ba5c <nema_rb_submit_cl_id>:
 801ba5c:	b510      	push	{r4, lr}
 801ba5e:	1e04      	subs	r4, r0, #0
 801ba60:	dd40      	ble.n	801bae4 <nema_rb_submit_cl_id+0x88>
 801ba62:	2000      	movs	r0, #0
 801ba64:	f7e7 fbff 	bl	8003266 <nema_mutex_lock>
 801ba68:	4621      	mov	r1, r4
 801ba6a:	f44f 70a4 	mov.w	r0, #328	; 0x148
 801ba6e:	f7ff ff2d 	bl	801b8cc <nema_rb_inline_cmd>
 801ba72:	4a1d      	ldr	r2, [pc, #116]	; (801bae8 <nema_rb_submit_cl_id+0x8c>)
 801ba74:	4b1d      	ldr	r3, [pc, #116]	; (801baec <nema_rb_submit_cl_id+0x90>)
 801ba76:	6812      	ldr	r2, [r2, #0]
 801ba78:	6818      	ldr	r0, [r3, #0]
 801ba7a:	6913      	ldr	r3, [r2, #16]
 801ba7c:	1c59      	adds	r1, r3, #1
 801ba7e:	4281      	cmp	r1, r0
 801ba80:	db0e      	blt.n	801baa0 <nema_rb_submit_cl_id+0x44>
 801ba82:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 801ba86:	491a      	ldr	r1, [pc, #104]	; (801baf0 <nema_rb_submit_cl_id+0x94>)
 801ba88:	6809      	ldr	r1, [r1, #0]
 801ba8a:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
 801ba8e:	6913      	ldr	r3, [r2, #16]
 801ba90:	3301      	adds	r3, #1
 801ba92:	4298      	cmp	r0, r3
 801ba94:	6113      	str	r3, [r2, #16]
 801ba96:	dc21      	bgt.n	801badc <nema_rb_submit_cl_id+0x80>
 801ba98:	2400      	movs	r4, #0
 801ba9a:	460b      	mov	r3, r1
 801ba9c:	6114      	str	r4, [r2, #16]
 801ba9e:	e003      	b.n	801baa8 <nema_rb_submit_cl_id+0x4c>
 801baa0:	4913      	ldr	r1, [pc, #76]	; (801baf0 <nema_rb_submit_cl_id+0x94>)
 801baa2:	6809      	ldr	r1, [r1, #0]
 801baa4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801baa8:	24f8      	movs	r4, #248	; 0xf8
 801baaa:	601c      	str	r4, [r3, #0]
 801baac:	6913      	ldr	r3, [r2, #16]
 801baae:	3301      	adds	r3, #1
 801bab0:	4298      	cmp	r0, r3
 801bab2:	bfd5      	itete	le
 801bab4:	2300      	movle	r3, #0
 801bab6:	6113      	strgt	r3, [r2, #16]
 801bab8:	6113      	strle	r3, [r2, #16]
 801baba:	eb01 0183 	addgt.w	r1, r1, r3, lsl #2
 801babe:	2301      	movs	r3, #1
 801bac0:	600b      	str	r3, [r1, #0]
 801bac2:	6913      	ldr	r3, [r2, #16]
 801bac4:	3301      	adds	r3, #1
 801bac6:	4298      	cmp	r0, r3
 801bac8:	bfd8      	it	le
 801baca:	2300      	movle	r3, #0
 801bacc:	6113      	str	r3, [r2, #16]
 801bace:	f7ff ff49 	bl	801b964 <nema_rb_force_flush>
 801bad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bad6:	2000      	movs	r0, #0
 801bad8:	f7e7 bbd2 	b.w	8003280 <nema_mutex_unlock>
 801badc:	2b00      	cmp	r3, #0
 801bade:	d1d4      	bne.n	801ba8a <nema_rb_submit_cl_id+0x2e>
 801bae0:	460b      	mov	r3, r1
 801bae2:	e7e1      	b.n	801baa8 <nema_rb_submit_cl_id+0x4c>
 801bae4:	bd10      	pop	{r4, pc}
 801bae6:	bf00      	nop
 801bae8:	20197a74 	.word	0x20197a74
 801baec:	20197a80 	.word	0x20197a80
 801baf0:	20197a7c 	.word	0x20197a7c

0801baf4 <init_nema_regs>:
 801baf4:	b538      	push	{r3, r4, r5, lr}
 801baf6:	2100      	movs	r1, #0
 801baf8:	20e8      	movs	r0, #232	; 0xe8
 801bafa:	f7e7 faf5 	bl	80030e8 <nema_reg_write>
 801bafe:	2100      	movs	r1, #0
 801bb00:	20fc      	movs	r0, #252	; 0xfc
 801bb02:	f7e7 faf1 	bl	80030e8 <nema_reg_write>
 801bb06:	2101      	movs	r1, #1
 801bb08:	f44f 7062 	mov.w	r0, #904	; 0x388
 801bb0c:	f7e7 faec 	bl	80030e8 <nema_reg_write>
 801bb10:	2000      	movs	r0, #0
 801bb12:	f001 f8f7 	bl	801cd04 <nema_set_interrupt_ctrl>
 801bb16:	f001 fe93 	bl	801d840 <nema_blender_init>
 801bb1a:	2100      	movs	r1, #0
 801bb1c:	f44f 7000 	mov.w	r0, #512	; 0x200
 801bb20:	f001 fda0 	bl	801d664 <nema_cl_add_cmd>
 801bb24:	f04f 31ff 	mov.w	r1, #4294967295
 801bb28:	f44f 7001 	mov.w	r0, #516	; 0x204
 801bb2c:	f001 fd9a 	bl	801d664 <nema_cl_add_cmd>
 801bb30:	f000 fec6 	bl	801c8c0 <nema_readHwConfig>
 801bb34:	f410 2080 	ands.w	r0, r0, #262144	; 0x40000
 801bb38:	d015      	beq.n	801bb66 <init_nema_regs+0x72>
 801bb3a:	2007      	movs	r0, #7
 801bb3c:	f001 f82e 	bl	801cb9c <nema_set_depth_ctrl>
 801bb40:	2300      	movs	r3, #0
 801bb42:	4c10      	ldr	r4, [pc, #64]	; (801bb84 <init_nema_regs+0x90>)
 801bb44:	7820      	ldrb	r0, [r4, #0]
 801bb46:	7063      	strb	r3, [r4, #1]
 801bb48:	f000 fecc 	bl	801c8e4 <nema_enable_tiling>
 801bb4c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 801bb50:	2500      	movs	r5, #0
 801bb52:	6962      	ldr	r2, [r4, #20]
 801bb54:	430b      	orrs	r3, r1
 801bb56:	4313      	orrs	r3, r2
 801bb58:	e9c4 5303 	strd	r5, r3, [r4, #12]
 801bb5c:	f000 febe 	bl	801c8dc <nema_readHwConfigH>
 801bb60:	0583      	lsls	r3, r0, #22
 801bb62:	d403      	bmi.n	801bb6c <init_nema_regs+0x78>
 801bb64:	bd38      	pop	{r3, r4, r5, pc}
 801bb66:	4c07      	ldr	r4, [pc, #28]	; (801bb84 <init_nema_regs+0x90>)
 801bb68:	70a0      	strb	r0, [r4, #2]
 801bb6a:	e7ef      	b.n	801bb4c <init_nema_regs+0x58>
 801bb6c:	4629      	mov	r1, r5
 801bb6e:	f44f 705d 	mov.w	r0, #884	; 0x374
 801bb72:	f7e7 fab9 	bl	80030e8 <nema_reg_write>
 801bb76:	4629      	mov	r1, r5
 801bb78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bb7c:	f44f 705a 	mov.w	r0, #872	; 0x368
 801bb80:	f7e7 bab2 	b.w	80030e8 <nema_reg_write>
 801bb84:	20197e24 	.word	0x20197e24

0801bb88 <nema_init>:
 801bb88:	b510      	push	{r4, lr}
 801bb8a:	f7e7 fa37 	bl	8002ffc <nema_sys_init>
 801bb8e:	1e04      	subs	r4, r0, #0
 801bb90:	db11      	blt.n	801bbb6 <nema_init+0x2e>
 801bb92:	f44f 70f6 	mov.w	r0, #492	; 0x1ec
 801bb96:	f7e7 fa97 	bl	80030c8 <nema_reg_read>
 801bb9a:	4b10      	ldr	r3, [pc, #64]	; (801bbdc <nema_init+0x54>)
 801bb9c:	4298      	cmp	r0, r3
 801bb9e:	d114      	bne.n	801bbca <nema_init+0x42>
 801bba0:	f001 fc7e 	bl	801d4a0 <nema_cl_unbind>
 801bba4:	22d0      	movs	r2, #208	; 0xd0
 801bba6:	2100      	movs	r1, #0
 801bba8:	480d      	ldr	r0, [pc, #52]	; (801bbe0 <nema_init+0x58>)
 801bbaa:	f00d fb05 	bl	80291b8 <memset>
 801bbae:	b14c      	cbz	r4, 801bbc4 <nema_init+0x3c>
 801bbb0:	2400      	movs	r4, #0
 801bbb2:	4620      	mov	r0, r4
 801bbb4:	bd10      	pop	{r4, pc}
 801bbb6:	4a0a      	ldr	r2, [pc, #40]	; (801bbe0 <nema_init+0x58>)
 801bbb8:	4620      	mov	r0, r4
 801bbba:	6993      	ldr	r3, [r2, #24]
 801bbbc:	f043 0301 	orr.w	r3, r3, #1
 801bbc0:	6193      	str	r3, [r2, #24]
 801bbc2:	bd10      	pop	{r4, pc}
 801bbc4:	f7ff ff96 	bl	801baf4 <init_nema_regs>
 801bbc8:	e7f3      	b.n	801bbb2 <nema_init+0x2a>
 801bbca:	4a05      	ldr	r2, [pc, #20]	; (801bbe0 <nema_init+0x58>)
 801bbcc:	f04f 34ff 	mov.w	r4, #4294967295
 801bbd0:	6993      	ldr	r3, [r2, #24]
 801bbd2:	f043 0302 	orr.w	r3, r3, #2
 801bbd6:	6193      	str	r3, [r2, #24]
 801bbd8:	e7eb      	b.n	801bbb2 <nema_init+0x2a>
 801bbda:	bf00      	nop
 801bbdc:	86362000 	.word	0x86362000
 801bbe0:	20197e24 	.word	0x20197e24

0801bbe4 <nema_set_error>:
 801bbe4:	4a02      	ldr	r2, [pc, #8]	; (801bbf0 <nema_set_error+0xc>)
 801bbe6:	6993      	ldr	r3, [r2, #24]
 801bbe8:	4318      	orrs	r0, r3
 801bbea:	6190      	str	r0, [r2, #24]
 801bbec:	4770      	bx	lr
 801bbee:	bf00      	nop
 801bbf0:	20197e24 	.word	0x20197e24

0801bbf4 <nema_set_tex_color>:
 801bbf4:	4601      	mov	r1, r0
 801bbf6:	201c      	movs	r0, #28
 801bbf8:	f001 bd34 	b.w	801d664 <nema_cl_add_cmd>

0801bbfc <nema_set_const_reg>:
 801bbfc:	3080      	adds	r0, #128	; 0x80
 801bbfe:	0080      	lsls	r0, r0, #2
 801bc00:	f5b0 7f03 	cmp.w	r0, #524	; 0x20c
 801bc04:	d900      	bls.n	801bc08 <nema_set_const_reg+0xc>
 801bc06:	4770      	bx	lr
 801bc08:	f001 bd2c 	b.w	801d664 <nema_cl_add_cmd>

0801bc0c <nema_set_clip>:
 801bc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc0e:	460c      	mov	r4, r1
 801bc10:	4607      	mov	r7, r0
 801bc12:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
 801bc16:	4d0c      	ldr	r5, [pc, #48]	; (801bc48 <nema_set_clip+0x3c>)
 801bc18:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 801bc1c:	b289      	uxth	r1, r1
 801bc1e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801bc22:	19d6      	adds	r6, r2, r7
 801bc24:	f44f 7088 	mov.w	r0, #272	; 0x110
 801bc28:	e9c5 7407 	strd	r7, r4, [r5, #28]
 801bc2c:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
 801bc30:	441c      	add	r4, r3
 801bc32:	f001 fd17 	bl	801d664 <nema_cl_add_cmd>
 801bc36:	b2b1      	uxth	r1, r6
 801bc38:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801bc3c:	f44f 708a 	mov.w	r0, #276	; 0x114
 801bc40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801bc44:	f001 bd0e 	b.w	801d664 <nema_cl_add_cmd>
 801bc48:	20197e24 	.word	0x20197e24

0801bc4c <nema_enable_gradient>:
 801bc4c:	2800      	cmp	r0, #0
 801bc4e:	bf14      	ite	ne
 801bc50:	f04f 6100 	movne.w	r1, #134217728	; 0x8000000
 801bc54:	2100      	moveq	r1, #0
 801bc56:	b410      	push	{r4}
 801bc58:	4a05      	ldr	r2, [pc, #20]	; (801bc70 <nema_enable_gradient+0x24>)
 801bc5a:	6950      	ldr	r0, [r2, #20]
 801bc5c:	e9d2 3401 	ldrd	r3, r4, [r2, #4]
 801bc60:	4323      	orrs	r3, r4
 801bc62:	4303      	orrs	r3, r0
 801bc64:	430b      	orrs	r3, r1
 801bc66:	e9c2 1303 	strd	r1, r3, [r2, #12]
 801bc6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bc6e:	4770      	bx	lr
 801bc70:	20197e24 	.word	0x20197e24

0801bc74 <nema_rgba>:
 801bc74:	061b      	lsls	r3, r3, #24
 801bc76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bc7a:	4318      	orrs	r0, r3
 801bc7c:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801bc80:	4770      	bx	lr
 801bc82:	bf00      	nop

0801bc84 <nema_bind_src_tex>:
 801bc84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc88:	9c06      	ldr	r4, [sp, #24]
 801bc8a:	460e      	mov	r6, r1
 801bc8c:	1c61      	adds	r1, r4, #1
 801bc8e:	4605      	mov	r5, r0
 801bc90:	4617      	mov	r7, r2
 801bc92:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801bc96:	d022      	beq.n	801bcde <nema_bind_src_tex+0x5a>
 801bc98:	2201      	movs	r2, #1
 801bc9a:	0400      	lsls	r0, r0, #16
 801bc9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801bd70 <nema_bind_src_tex+0xec>
 801bca0:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
 801bca4:	b2a4      	uxth	r4, r4
 801bca6:	4323      	orrs	r3, r4
 801bca8:	2003      	movs	r0, #3
 801bcaa:	f8c8 3050 	str.w	r3, [r8, #80]	; 0x50
 801bcae:	e9c8 5611 	strd	r5, r6, [r8, #68]	; 0x44
 801bcb2:	f8c8 704c 	str.w	r7, [r8, #76]	; 0x4c
 801bcb6:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 801bcba:	f001 fc75 	bl	801d5a8 <nema_cl_get_space>
 801bcbe:	b160      	cbz	r0, 801bcda <nema_bind_src_tex+0x56>
 801bcc0:	2110      	movs	r1, #16
 801bcc2:	2214      	movs	r2, #20
 801bcc4:	2318      	movs	r3, #24
 801bcc6:	e9c0 1500 	strd	r1, r5, [r0]
 801bcca:	6082      	str	r2, [r0, #8]
 801bccc:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 801bcd0:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 801bcd4:	e9c0 2303 	strd	r2, r3, [r0, #12]
 801bcd8:	6146      	str	r6, [r0, #20]
 801bcda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bcde:	06c2      	lsls	r2, r0, #27
 801bce0:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 801bce4:	d41c      	bmi.n	801bd20 <nema_bind_src_tex+0x9c>
 801bce6:	4634      	mov	r4, r6
 801bce8:	f1a1 020b 	sub.w	r2, r1, #11
 801bcec:	2a2a      	cmp	r2, #42	; 0x2a
 801bcee:	d833      	bhi.n	801bd58 <nema_bind_src_tex+0xd4>
 801bcf0:	e8df f002 	tbb	[pc, r2]
 801bcf4:	32322a2a 	.word	0x32322a2a
 801bcf8:	30323232 	.word	0x30323232
 801bcfc:	1c323232 	.word	0x1c323232
 801bd00:	3232321c 	.word	0x3232321c
 801bd04:	32323232 	.word	0x32323232
 801bd08:	32323232 	.word	0x32323232
 801bd0c:	32323232 	.word	0x32323232
 801bd10:	2a241f2a 	.word	0x2a241f2a
 801bd14:	3232241f 	.word	0x3232241f
 801bd18:	321f1f32 	.word	0x321f1f32
 801bd1c:	2432      	.short	0x2432
 801bd1e:	24          	.byte	0x24
 801bd1f:	00          	.byte	0x00
 801bd20:	1cf4      	adds	r4, r6, #3
 801bd22:	bf48      	it	mi
 801bd24:	1db4      	addmi	r4, r6, #6
 801bd26:	f024 0403 	bic.w	r4, r4, #3
 801bd2a:	e7dd      	b.n	801bce8 <nema_bind_src_tex+0x64>
 801bd2c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bd30:	e7b2      	b.n	801bc98 <nema_bind_src_tex+0x14>
 801bd32:	0062      	lsls	r2, r4, #1
 801bd34:	1dd4      	adds	r4, r2, #7
 801bd36:	d404      	bmi.n	801bd42 <nema_bind_src_tex+0xbe>
 801bd38:	10e4      	asrs	r4, r4, #3
 801bd3a:	e7ad      	b.n	801bc98 <nema_bind_src_tex+0x14>
 801bd3c:	00a2      	lsls	r2, r4, #2
 801bd3e:	1dd4      	adds	r4, r2, #7
 801bd40:	d5fa      	bpl.n	801bd38 <nema_bind_src_tex+0xb4>
 801bd42:	f102 040e 	add.w	r4, r2, #14
 801bd46:	e7f7      	b.n	801bd38 <nema_bind_src_tex+0xb4>
 801bd48:	1de2      	adds	r2, r4, #7
 801bd4a:	bf48      	it	mi
 801bd4c:	f104 020e 	addmi.w	r2, r4, #14
 801bd50:	10d4      	asrs	r4, r2, #3
 801bd52:	e7a1      	b.n	801bc98 <nema_bind_src_tex+0x14>
 801bd54:	0064      	lsls	r4, r4, #1
 801bd56:	e79f      	b.n	801bc98 <nema_bind_src_tex+0x14>
 801bd58:	3904      	subs	r1, #4
 801bd5a:	2947      	cmp	r1, #71	; 0x47
 801bd5c:	bf8e      	itee	hi
 801bd5e:	2204      	movhi	r2, #4
 801bd60:	4a02      	ldrls	r2, [pc, #8]	; (801bd6c <nema_bind_src_tex+0xe8>)
 801bd62:	5652      	ldrsbls	r2, [r2, r1]
 801bd64:	fb02 f404 	mul.w	r4, r2, r4
 801bd68:	e796      	b.n	801bc98 <nema_bind_src_tex+0x14>
 801bd6a:	bf00      	nop
 801bd6c:	0802bb70 	.word	0x0802bb70
 801bd70:	20197e24 	.word	0x20197e24

0801bd74 <nema_bind_dst_tex>:
 801bd74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bd78:	9c08      	ldr	r4, [sp, #32]
 801bd7a:	4699      	mov	r9, r3
 801bd7c:	4617      	mov	r7, r2
 801bd7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801bd82:	1c63      	adds	r3, r4, #1
 801bd84:	4680      	mov	r8, r0
 801bd86:	460e      	mov	r6, r1
 801bd88:	d02c      	beq.n	801bde4 <nema_bind_dst_tex+0x70>
 801bd8a:	2a12      	cmp	r2, #18
 801bd8c:	d009      	beq.n	801bda2 <nema_bind_dst_tex+0x2e>
 801bd8e:	3a16      	subs	r2, #22
 801bd90:	2a01      	cmp	r2, #1
 801bd92:	d906      	bls.n	801bda2 <nema_bind_dst_tex+0x2e>
 801bd94:	4d50      	ldr	r5, [pc, #320]	; (801bed8 <nema_bind_dst_tex+0x164>)
 801bd96:	7868      	ldrb	r0, [r5, #1]
 801bd98:	f000 fda4 	bl	801c8e4 <nema_enable_tiling>
 801bd9c:	e007      	b.n	801bdae <nema_bind_dst_tex+0x3a>
 801bd9e:	eb06 0446 	add.w	r4, r6, r6, lsl #1
 801bda2:	2301      	movs	r3, #1
 801bda4:	4d4c      	ldr	r5, [pc, #304]	; (801bed8 <nema_bind_dst_tex+0x164>)
 801bda6:	4618      	mov	r0, r3
 801bda8:	702b      	strb	r3, [r5, #0]
 801bdaa:	f000 fd9b 	bl	801c8e4 <nema_enable_tiling>
 801bdae:	2201      	movs	r2, #1
 801bdb0:	b2a4      	uxth	r4, r4
 801bdb2:	ea44 6409 	orr.w	r4, r4, r9, lsl #24
 801bdb6:	2003      	movs	r0, #3
 801bdb8:	63ec      	str	r4, [r5, #60]	; 0x3c
 801bdba:	e9c5 860c 	strd	r8, r6, [r5, #48]	; 0x30
 801bdbe:	63af      	str	r7, [r5, #56]	; 0x38
 801bdc0:	642a      	str	r2, [r5, #64]	; 0x40
 801bdc2:	f001 fbf1 	bl	801d5a8 <nema_cl_get_space>
 801bdc6:	b158      	cbz	r0, 801bde0 <nema_bind_dst_tex+0x6c>
 801bdc8:	2100      	movs	r1, #0
 801bdca:	2204      	movs	r2, #4
 801bdcc:	2308      	movs	r3, #8
 801bdce:	e9c0 1800 	strd	r1, r8, [r0]
 801bdd2:	6082      	str	r2, [r0, #8]
 801bdd4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 801bdd6:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 801bdda:	e9c0 2303 	strd	r2, r3, [r0, #12]
 801bdde:	6146      	str	r6, [r0, #20]
 801bde0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bde4:	f1a2 030b 	sub.w	r3, r2, #11
 801bde8:	2b2a      	cmp	r3, #42	; 0x2a
 801bdea:	d86b      	bhi.n	801bec4 <nema_bind_dst_tex+0x150>
 801bdec:	a101      	add	r1, pc, #4	; (adr r1, 801bdf4 <nema_bind_dst_tex+0x80>)
 801bdee:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801bdf2:	bf00      	nop
 801bdf4:	0801beb7 	.word	0x0801beb7
 801bdf8:	0801beb7 	.word	0x0801beb7
 801bdfc:	0801bec5 	.word	0x0801bec5
 801be00:	0801bec5 	.word	0x0801bec5
 801be04:	0801bec5 	.word	0x0801bec5
 801be08:	0801bec5 	.word	0x0801bec5
 801be0c:	0801bec5 	.word	0x0801bec5
 801be10:	0801bec1 	.word	0x0801bec1
 801be14:	0801bec5 	.word	0x0801bec5
 801be18:	0801bec5 	.word	0x0801bec5
 801be1c:	0801bec5 	.word	0x0801bec5
 801be20:	0801bd9f 	.word	0x0801bd9f
 801be24:	0801bd9f 	.word	0x0801bd9f
 801be28:	0801bec5 	.word	0x0801bec5
 801be2c:	0801bec5 	.word	0x0801bec5
 801be30:	0801bec5 	.word	0x0801bec5
 801be34:	0801bec5 	.word	0x0801bec5
 801be38:	0801bec5 	.word	0x0801bec5
 801be3c:	0801bec5 	.word	0x0801bec5
 801be40:	0801bec5 	.word	0x0801bec5
 801be44:	0801bec5 	.word	0x0801bec5
 801be48:	0801bec5 	.word	0x0801bec5
 801be4c:	0801bec5 	.word	0x0801bec5
 801be50:	0801bec5 	.word	0x0801bec5
 801be54:	0801bec5 	.word	0x0801bec5
 801be58:	0801bec5 	.word	0x0801bec5
 801be5c:	0801bec5 	.word	0x0801bec5
 801be60:	0801bec5 	.word	0x0801bec5
 801be64:	0801beb7 	.word	0x0801beb7
 801be68:	0801beab 	.word	0x0801beab
 801be6c:	0801bea1 	.word	0x0801bea1
 801be70:	0801beb7 	.word	0x0801beb7
 801be74:	0801beab 	.word	0x0801beab
 801be78:	0801bea1 	.word	0x0801bea1
 801be7c:	0801bec5 	.word	0x0801bec5
 801be80:	0801bec5 	.word	0x0801bec5
 801be84:	0801bec5 	.word	0x0801bec5
 801be88:	0801beab 	.word	0x0801beab
 801be8c:	0801beab 	.word	0x0801beab
 801be90:	0801bec5 	.word	0x0801bec5
 801be94:	0801bec5 	.word	0x0801bec5
 801be98:	0801bea1 	.word	0x0801bea1
 801be9c:	0801bea1 	.word	0x0801bea1
 801bea0:	00b3      	lsls	r3, r6, #2
 801bea2:	1ddc      	adds	r4, r3, #7
 801bea4:	d404      	bmi.n	801beb0 <nema_bind_dst_tex+0x13c>
 801bea6:	10e4      	asrs	r4, r4, #3
 801bea8:	e76f      	b.n	801bd8a <nema_bind_dst_tex+0x16>
 801beaa:	0073      	lsls	r3, r6, #1
 801beac:	1ddc      	adds	r4, r3, #7
 801beae:	d5fa      	bpl.n	801bea6 <nema_bind_dst_tex+0x132>
 801beb0:	f103 040e 	add.w	r4, r3, #14
 801beb4:	e7f7      	b.n	801bea6 <nema_bind_dst_tex+0x132>
 801beb6:	1df4      	adds	r4, r6, #7
 801beb8:	d5f5      	bpl.n	801bea6 <nema_bind_dst_tex+0x132>
 801beba:	f106 040e 	add.w	r4, r6, #14
 801bebe:	e7f2      	b.n	801bea6 <nema_bind_dst_tex+0x132>
 801bec0:	0074      	lsls	r4, r6, #1
 801bec2:	e76e      	b.n	801bda2 <nema_bind_dst_tex+0x2e>
 801bec4:	1f13      	subs	r3, r2, #4
 801bec6:	2b47      	cmp	r3, #71	; 0x47
 801bec8:	bf8e      	itee	hi
 801beca:	2404      	movhi	r4, #4
 801becc:	4903      	ldrls	r1, [pc, #12]	; (801bedc <nema_bind_dst_tex+0x168>)
 801bece:	56cc      	ldrsbls	r4, [r1, r3]
 801bed0:	fb06 f404 	mul.w	r4, r6, r4
 801bed4:	e759      	b.n	801bd8a <nema_bind_dst_tex+0x16>
 801bed6:	bf00      	nop
 801bed8:	20197e24 	.word	0x20197e24
 801bedc:	0802bb70 	.word	0x0802bb70

0801bee0 <nema_fill_rect>:
 801bee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bee4:	4604      	mov	r4, r0
 801bee6:	460d      	mov	r5, r1
 801bee8:	4616      	mov	r6, r2
 801beea:	461f      	mov	r7, r3
 801beec:	9806      	ldr	r0, [sp, #24]
 801beee:	f000 fe5b 	bl	801cba8 <nema_set_raster_color>
 801bef2:	463b      	mov	r3, r7
 801bef4:	4632      	mov	r2, r6
 801bef6:	4629      	mov	r1, r5
 801bef8:	4620      	mov	r0, r4
 801befa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801befe:	f000 be95 	b.w	801cc2c <nema_raster_rect>
 801bf02:	bf00      	nop

0801bf04 <nema_blit>:
 801bf04:	ee07 0a90 	vmov	s15, r0
 801bf08:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801bf0c:	ee07 1a90 	vmov	s15, r1
 801bf10:	b500      	push	{lr}
 801bf12:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801bf16:	b083      	sub	sp, #12
 801bf18:	e9cd 0100 	strd	r0, r1, [sp]
 801bf1c:	f000 fdde 	bl	801cadc <nema_set_matrix_translate>
 801bf20:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bf24:	4a03      	ldr	r2, [pc, #12]	; (801bf34 <nema_blit+0x30>)
 801bf26:	e9d2 2312 	ldrd	r2, r3, [r2, #72]	; 0x48
 801bf2a:	b003      	add	sp, #12
 801bf2c:	f85d eb04 	ldr.w	lr, [sp], #4
 801bf30:	f000 be7c 	b.w	801cc2c <nema_raster_rect>
 801bf34:	20197e24 	.word	0x20197e24

0801bf38 <nema_blit_rotate>:
 801bf38:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bf3a:	2600      	movs	r6, #0
 801bf3c:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 801bf40:	4b68      	ldr	r3, [pc, #416]	; (801c0e4 <nema_blit_rotate+0x1ac>)
 801bf42:	b08b      	sub	sp, #44	; 0x2c
 801bf44:	3a01      	subs	r2, #1
 801bf46:	9607      	str	r6, [sp, #28]
 801bf48:	9608      	str	r6, [sp, #32]
 801bf4a:	9709      	str	r7, [sp, #36]	; 0x24
 801bf4c:	4604      	mov	r4, r0
 801bf4e:	e9d3 6712 	ldrd	r6, r7, [r3, #72]	; 0x48
 801bf52:	460d      	mov	r5, r1
 801bf54:	2a0e      	cmp	r2, #14
 801bf56:	f200 80b0 	bhi.w	801c0ba <nema_blit_rotate+0x182>
 801bf5a:	e8df f002 	tbb	[pc, r2]
 801bf5e:	4730      	.short	0x4730
 801bf60:	9a836f58 	.word	0x9a836f58
 801bf64:	6f089a08 	.word	0x6f089a08
 801bf68:	ae584783 	.word	0xae584783
 801bf6c:	30          	.byte	0x30
 801bf6d:	00          	.byte	0x00
 801bf6e:	1970      	adds	r0, r6, r5
 801bf70:	ee07 0a10 	vmov	s14, r0
 801bf74:	1938      	adds	r0, r7, r4
 801bf76:	4631      	mov	r1, r6
 801bf78:	ee07 0a90 	vmov	s15, r0
 801bf7c:	2200      	movs	r2, #0
 801bf7e:	463e      	mov	r6, r7
 801bf80:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bf84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bf88:	460f      	mov	r7, r1
 801bf8a:	4b57      	ldr	r3, [pc, #348]	; (801c0e8 <nema_blit_rotate+0x1b0>)
 801bf8c:	9201      	str	r2, [sp, #4]
 801bf8e:	9205      	str	r2, [sp, #20]
 801bf90:	9302      	str	r3, [sp, #8]
 801bf92:	9304      	str	r3, [sp, #16]
 801bf94:	eddf 6a55 	vldr	s13, [pc, #340]	; 801c0ec <nema_blit_rotate+0x1b4>
 801bf98:	ee37 7a26 	vadd.f32	s14, s14, s13
 801bf9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bfa0:	a801      	add	r0, sp, #4
 801bfa2:	ed8d 7a03 	vstr	s14, [sp, #12]
 801bfa6:	edcd 7a06 	vstr	s15, [sp, #24]
 801bfaa:	f000 fcdd 	bl	801c968 <nema_set_matrix>
 801bfae:	463b      	mov	r3, r7
 801bfb0:	4632      	mov	r2, r6
 801bfb2:	4629      	mov	r1, r5
 801bfb4:	4620      	mov	r0, r4
 801bfb6:	f000 fe39 	bl	801cc2c <nema_raster_rect>
 801bfba:	b00b      	add	sp, #44	; 0x2c
 801bfbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bfbe:	ee07 4a90 	vmov	s15, r4
 801bfc2:	4630      	mov	r0, r6
 801bfc4:	442e      	add	r6, r5
 801bfc6:	2300      	movs	r3, #0
 801bfc8:	ee07 6a10 	vmov	s14, r6
 801bfcc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801bfd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bfd4:	4944      	ldr	r1, [pc, #272]	; (801c0e8 <nema_blit_rotate+0x1b0>)
 801bfd6:	463e      	mov	r6, r7
 801bfd8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bfdc:	9301      	str	r3, [sp, #4]
 801bfde:	4607      	mov	r7, r0
 801bfe0:	9305      	str	r3, [sp, #20]
 801bfe2:	9102      	str	r1, [sp, #8]
 801bfe4:	9204      	str	r2, [sp, #16]
 801bfe6:	eef1 7a67 	vneg.f32	s15, s15
 801bfea:	e7d3      	b.n	801bf94 <nema_blit_rotate+0x5c>
 801bfec:	4b3e      	ldr	r3, [pc, #248]	; (801c0e8 <nema_blit_rotate+0x1b0>)
 801bfee:	2200      	movs	r2, #0
 801bff0:	9301      	str	r3, [sp, #4]
 801bff2:	9305      	str	r3, [sp, #20]
 801bff4:	1833      	adds	r3, r6, r0
 801bff6:	ee07 3a90 	vmov	s15, r3
 801bffa:	1878      	adds	r0, r7, r1
 801bffc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801c000:	ee07 0a90 	vmov	s15, r0
 801c004:	9202      	str	r2, [sp, #8]
 801c006:	9204      	str	r2, [sp, #16]
 801c008:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c00c:	e7c2      	b.n	801bf94 <nema_blit_rotate+0x5c>
 801c00e:	ee07 5a10 	vmov	s14, r5
 801c012:	4630      	mov	r0, r6
 801c014:	193e      	adds	r6, r7, r4
 801c016:	2300      	movs	r3, #0
 801c018:	ee07 6a90 	vmov	s15, r6
 801c01c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801c020:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c024:	4a30      	ldr	r2, [pc, #192]	; (801c0e8 <nema_blit_rotate+0x1b0>)
 801c026:	463e      	mov	r6, r7
 801c028:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c02c:	4607      	mov	r7, r0
 801c02e:	9301      	str	r3, [sp, #4]
 801c030:	9305      	str	r3, [sp, #20]
 801c032:	9102      	str	r1, [sp, #8]
 801c034:	eeb1 7a47 	vneg.f32	s14, s14
 801c038:	9204      	str	r2, [sp, #16]
 801c03a:	e7ab      	b.n	801bf94 <nema_blit_rotate+0x5c>
 801c03c:	ee07 4a90 	vmov	s15, r4
 801c040:	1978      	adds	r0, r7, r5
 801c042:	2300      	movs	r3, #0
 801c044:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801c048:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801c04c:	ee07 0a90 	vmov	s15, r0
 801c050:	4a25      	ldr	r2, [pc, #148]	; (801c0e8 <nema_blit_rotate+0x1b0>)
 801c052:	9101      	str	r1, [sp, #4]
 801c054:	9302      	str	r3, [sp, #8]
 801c056:	9304      	str	r3, [sp, #16]
 801c058:	eeb1 7a47 	vneg.f32	s14, s14
 801c05c:	9205      	str	r2, [sp, #20]
 801c05e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c062:	e797      	b.n	801bf94 <nema_blit_rotate+0x5c>
 801c064:	ee07 5a90 	vmov	s15, r5
 801c068:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801c06c:	ee07 0a90 	vmov	s15, r0
 801c070:	4631      	mov	r1, r6
 801c072:	2200      	movs	r2, #0
 801c074:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801c078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c07c:	463e      	mov	r6, r7
 801c07e:	eeb1 7a47 	vneg.f32	s14, s14
 801c082:	460f      	mov	r7, r1
 801c084:	eef1 7a67 	vneg.f32	s15, s15
 801c088:	9201      	str	r2, [sp, #4]
 801c08a:	9205      	str	r2, [sp, #20]
 801c08c:	9302      	str	r3, [sp, #8]
 801c08e:	9304      	str	r3, [sp, #16]
 801c090:	e780      	b.n	801bf94 <nema_blit_rotate+0x5c>
 801c092:	ee07 5a90 	vmov	s15, r5
 801c096:	1830      	adds	r0, r6, r0
 801c098:	2300      	movs	r3, #0
 801c09a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801c09e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c0a2:	ee07 0a10 	vmov	s14, r0
 801c0a6:	4910      	ldr	r1, [pc, #64]	; (801c0e8 <nema_blit_rotate+0x1b0>)
 801c0a8:	9302      	str	r3, [sp, #8]
 801c0aa:	9101      	str	r1, [sp, #4]
 801c0ac:	9304      	str	r3, [sp, #16]
 801c0ae:	9205      	str	r2, [sp, #20]
 801c0b0:	eef1 7a67 	vneg.f32	s15, s15
 801c0b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c0b8:	e76c      	b.n	801bf94 <nema_blit_rotate+0x5c>
 801c0ba:	ee07 0a90 	vmov	s15, r0
 801c0be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801c0c2:	ee07 1a90 	vmov	s15, r1
 801c0c6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801c0ca:	2300      	movs	r3, #0
 801c0cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c0d0:	9201      	str	r2, [sp, #4]
 801c0d2:	9205      	str	r2, [sp, #20]
 801c0d4:	9302      	str	r3, [sp, #8]
 801c0d6:	9304      	str	r3, [sp, #16]
 801c0d8:	eeb1 7a47 	vneg.f32	s14, s14
 801c0dc:	eef1 7a67 	vneg.f32	s15, s15
 801c0e0:	e758      	b.n	801bf94 <nema_blit_rotate+0x5c>
 801c0e2:	bf00      	nop
 801c0e4:	20197e24 	.word	0x20197e24
 801c0e8:	bf800000 	.word	0xbf800000
 801c0ec:	00000000 	.word	0x00000000

0801c0f0 <nema_blit_tri_fit>:
 801c0f0:	2803      	cmp	r0, #3
 801c0f2:	d801      	bhi.n	801c0f8 <nema_blit_tri_fit+0x8>
 801c0f4:	2903      	cmp	r1, #3
 801c0f6:	d900      	bls.n	801c0fa <nema_blit_tri_fit+0xa>
 801c0f8:	4770      	bx	lr
 801c0fa:	2a03      	cmp	r2, #3
 801c0fc:	d8fc      	bhi.n	801c0f8 <nema_blit_tri_fit+0x8>
 801c0fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c102:	460c      	mov	r4, r1
 801c104:	493b      	ldr	r1, [pc, #236]	; (801c1f4 <nema_blit_tri_fit+0x104>)
 801c106:	4603      	mov	r3, r0
 801c108:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
 801c10c:	ee07 0a90 	vmov	s15, r0
 801c110:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801c114:	ee07 1a90 	vmov	s15, r1
 801c118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c11c:	b08a      	sub	sp, #40	; 0x28
 801c11e:	f04f 0c00 	mov.w	ip, #0
 801c122:	edcd 7a08 	vstr	s15, [sp, #32]
 801c126:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 801c12a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801c12e:	ed8d 7a03 	vstr	s14, [sp, #12]
 801c132:	ed8d 7a04 	vstr	s14, [sp, #16]
 801c136:	ee12 8a10 	vmov	r8, s4
 801c13a:	ee11 9a90 	vmov	r9, s3
 801c13e:	ee11 aa10 	vmov	sl, s2
 801c142:	ee10 6a10 	vmov	r6, s0
 801c146:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 801c14a:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 801c14e:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
 801c152:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 801c156:	f8cd c008 	str.w	ip, [sp, #8]
 801c15a:	f8cd c014 	str.w	ip, [sp, #20]
 801c15e:	f8cd c018 	str.w	ip, [sp, #24]
 801c162:	f8cd c01c 	str.w	ip, [sp, #28]
 801c166:	ed52 6a08 	vldr	s13, [r2, #-32]	; 0xffffffe0
 801c16a:	ed14 4a08 	vldr	s8, [r4, #-32]	; 0xffffffe0
 801c16e:	ed53 1a08 	vldr	s3, [r3, #-32]	; 0xffffffe0
 801c172:	ed12 7a04 	vldr	s14, [r2, #-16]
 801c176:	ed54 4a04 	vldr	s9, [r4, #-16]
 801c17a:	ed13 2a04 	vldr	s4, [r3, #-16]
 801c17e:	eef0 5a62 	vmov.f32	s11, s5
 801c182:	ee05 8a10 	vmov	s10, r8
 801c186:	ee03 9a10 	vmov	s6, r9
 801c18a:	eef0 3a46 	vmov.f32	s7, s12
 801c18e:	eeb0 1a46 	vmov.f32	s2, s12
 801c192:	ee12 7a90 	vmov	r7, s5
 801c196:	ee02 aa90 	vmov	s5, sl
 801c19a:	ee10 5a90 	vmov	r5, s1
 801c19e:	f000 f889 	bl	801c2b4 <nema_interpolate_tx_ty>
 801c1a2:	ee00 6a10 	vmov	s0, r6
 801c1a6:	f000 f90f 	bl	801c3c8 <nema_f2fx>
 801c1aa:	ee00 5a10 	vmov	s0, r5
 801c1ae:	4604      	mov	r4, r0
 801c1b0:	f000 f90a 	bl	801c3c8 <nema_f2fx>
 801c1b4:	ee00 aa10 	vmov	s0, sl
 801c1b8:	4605      	mov	r5, r0
 801c1ba:	f000 f905 	bl	801c3c8 <nema_f2fx>
 801c1be:	ee00 9a10 	vmov	s0, r9
 801c1c2:	4606      	mov	r6, r0
 801c1c4:	f000 f900 	bl	801c3c8 <nema_f2fx>
 801c1c8:	ee00 8a10 	vmov	s0, r8
 801c1cc:	4681      	mov	r9, r0
 801c1ce:	f000 f8fb 	bl	801c3c8 <nema_f2fx>
 801c1d2:	ee00 7a10 	vmov	s0, r7
 801c1d6:	4680      	mov	r8, r0
 801c1d8:	f000 f8f6 	bl	801c3c8 <nema_f2fx>
 801c1dc:	464b      	mov	r3, r9
 801c1de:	e9cd 8000 	strd	r8, r0, [sp]
 801c1e2:	4632      	mov	r2, r6
 801c1e4:	4629      	mov	r1, r5
 801c1e6:	4620      	mov	r0, r4
 801c1e8:	f000 fce4 	bl	801cbb4 <nema_raster_triangle_fx>
 801c1ec:	b00a      	add	sp, #40	; 0x28
 801c1ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c1f2:	bf00      	nop
 801c1f4:	20197e24 	.word	0x20197e24

0801c1f8 <nema_blit_quad_fit>:
 801c1f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c1fc:	ed2d 8b08 	vpush	{d8-d11}
 801c200:	4b2b      	ldr	r3, [pc, #172]	; (801c2b0 <nema_blit_quad_fit+0xb8>)
 801c202:	b08e      	sub	sp, #56	; 0x38
 801c204:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 801c208:	aa05      	add	r2, sp, #20
 801c20a:	eef0 ba40 	vmov.f32	s23, s0
 801c20e:	eeb0 ba60 	vmov.f32	s22, s1
 801c212:	eef0 aa41 	vmov.f32	s21, s2
 801c216:	eeb0 aa61 	vmov.f32	s20, s3
 801c21a:	eef0 9a42 	vmov.f32	s19, s4
 801c21e:	eeb0 9a62 	vmov.f32	s18, s5
 801c222:	eef0 8a43 	vmov.f32	s17, s6
 801c226:	eeb0 8a63 	vmov.f32	s16, s7
 801c22a:	f000 f9e1 	bl	801c5f0 <nema_mat3x3_quad_to_rect>
 801c22e:	b120      	cbz	r0, 801c23a <nema_blit_quad_fit+0x42>
 801c230:	b00e      	add	sp, #56	; 0x38
 801c232:	ecbd 8b08 	vpop	{d8-d11}
 801c236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c23a:	a805      	add	r0, sp, #20
 801c23c:	f000 fb94 	bl	801c968 <nema_set_matrix>
 801c240:	eeb0 0a6b 	vmov.f32	s0, s23
 801c244:	f000 f8c0 	bl	801c3c8 <nema_f2fx>
 801c248:	eeb0 0a4b 	vmov.f32	s0, s22
 801c24c:	4604      	mov	r4, r0
 801c24e:	f000 f8bb 	bl	801c3c8 <nema_f2fx>
 801c252:	eeb0 0a6a 	vmov.f32	s0, s21
 801c256:	4605      	mov	r5, r0
 801c258:	f000 f8b6 	bl	801c3c8 <nema_f2fx>
 801c25c:	eeb0 0a4a 	vmov.f32	s0, s20
 801c260:	4606      	mov	r6, r0
 801c262:	f000 f8b1 	bl	801c3c8 <nema_f2fx>
 801c266:	eeb0 0a69 	vmov.f32	s0, s19
 801c26a:	4607      	mov	r7, r0
 801c26c:	f000 f8ac 	bl	801c3c8 <nema_f2fx>
 801c270:	eeb0 0a49 	vmov.f32	s0, s18
 801c274:	4682      	mov	sl, r0
 801c276:	f000 f8a7 	bl	801c3c8 <nema_f2fx>
 801c27a:	eeb0 0a68 	vmov.f32	s0, s17
 801c27e:	4680      	mov	r8, r0
 801c280:	f000 f8a2 	bl	801c3c8 <nema_f2fx>
 801c284:	eeb0 0a48 	vmov.f32	s0, s16
 801c288:	4681      	mov	r9, r0
 801c28a:	f000 f89d 	bl	801c3c8 <nema_f2fx>
 801c28e:	f8cd a000 	str.w	sl, [sp]
 801c292:	e9cd 9002 	strd	r9, r0, [sp, #8]
 801c296:	f8cd 8004 	str.w	r8, [sp, #4]
 801c29a:	463b      	mov	r3, r7
 801c29c:	4632      	mov	r2, r6
 801c29e:	4629      	mov	r1, r5
 801c2a0:	4620      	mov	r0, r4
 801c2a2:	f000 fced 	bl	801cc80 <nema_raster_quad_fx>
 801c2a6:	b00e      	add	sp, #56	; 0x38
 801c2a8:	ecbd 8b08 	vpop	{d8-d11}
 801c2ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c2b0:	20197e24 	.word	0x20197e24

0801c2b4 <nema_interpolate_tx_ty>:
 801c2b4:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 801c2b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c2bc:	d407      	bmi.n	801c2ce <nema_interpolate_tx_ty+0x1a>
 801c2be:	eddf 7a40 	vldr	s15, [pc, #256]	; 801c3c0 <nema_interpolate_tx_ty+0x10c>
 801c2c2:	eeb4 1ae7 	vcmpe.f32	s2, s15
 801c2c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c2ca:	d807      	bhi.n	801c2dc <nema_interpolate_tx_ty+0x28>
 801c2cc:	4770      	bx	lr
 801c2ce:	eddf 7a3d 	vldr	s15, [pc, #244]	; 801c3c4 <nema_interpolate_tx_ty+0x110>
 801c2d2:	eeb4 1ae7 	vcmpe.f32	s2, s15
 801c2d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c2da:	daf7      	bge.n	801c2cc <nema_interpolate_tx_ty+0x18>
 801c2dc:	eef5 3ac0 	vcmpe.f32	s7, #0.0
 801c2e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c2e4:	d45b      	bmi.n	801c39e <nema_interpolate_tx_ty+0xea>
 801c2e6:	eddf 7a36 	vldr	s15, [pc, #216]	; 801c3c0 <nema_interpolate_tx_ty+0x10c>
 801c2ea:	eef4 3ae7 	vcmpe.f32	s7, s15
 801c2ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c2f2:	d9eb      	bls.n	801c2cc <nema_interpolate_tx_ty+0x18>
 801c2f4:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801c2f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c2fc:	d457      	bmi.n	801c3ae <nema_interpolate_tx_ty+0xfa>
 801c2fe:	eddf 7a30 	vldr	s15, [pc, #192]	; 801c3c0 <nema_interpolate_tx_ty+0x10c>
 801c302:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801c306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c30a:	d9df      	bls.n	801c2cc <nema_interpolate_tx_ty+0x18>
 801c30c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801c310:	b570      	push	{r4, r5, r6, lr}
 801c312:	ee15 3a90 	vmov	r3, s11
 801c316:	ee13 2a10 	vmov	r2, s6
 801c31a:	eec7 5a86 	vdiv.f32	s11, s15, s12
 801c31e:	ee87 3a81 	vdiv.f32	s6, s15, s2
 801c322:	ee15 4a10 	vmov	r4, s10
 801c326:	ee87 5aa3 	vdiv.f32	s10, s15, s7
 801c32a:	ee63 1a21 	vmul.f32	s3, s6, s3
 801c32e:	ee23 2a02 	vmul.f32	s4, s6, s4
 801c332:	ee25 4a04 	vmul.f32	s8, s10, s8
 801c336:	ee65 4a24 	vmul.f32	s9, s10, s9
 801c33a:	ee65 6aa6 	vmul.f32	s13, s11, s13
 801c33e:	ee25 7a87 	vmul.f32	s14, s11, s14
 801c342:	b092      	sub	sp, #72	; 0x48
 801c344:	a809      	add	r0, sp, #36	; 0x24
 801c346:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
 801c34a:	edcd 2a0a 	vstr	s5, [sp, #40]	; 0x28
 801c34e:	edcd 0a0c 	vstr	s1, [sp, #48]	; 0x30
 801c352:	920d      	str	r2, [sp, #52]	; 0x34
 801c354:	930e      	str	r3, [sp, #56]	; 0x38
 801c356:	edcd 1a00 	vstr	s3, [sp]
 801c35a:	ed8d 2a03 	vstr	s4, [sp, #12]
 801c35e:	ed8d 4a01 	vstr	s8, [sp, #4]
 801c362:	edcd 4a04 	vstr	s9, [sp, #16]
 801c366:	edcd 6a02 	vstr	s13, [sp, #8]
 801c36a:	ed8d 7a05 	vstr	s14, [sp, #20]
 801c36e:	ed8d 3a06 	vstr	s6, [sp, #24]
 801c372:	ed8d 5a07 	vstr	s10, [sp, #28]
 801c376:	edcd 5a08 	vstr	s11, [sp, #32]
 801c37a:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 801c37e:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 801c382:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
 801c386:	940b      	str	r4, [sp, #44]	; 0x2c
 801c388:	f000 f8d2 	bl	801c530 <nema_mat3x3_adj>
 801c38c:	a909      	add	r1, sp, #36	; 0x24
 801c38e:	4668      	mov	r0, sp
 801c390:	f000 f838 	bl	801c404 <nema_mat3x3_mul>
 801c394:	4668      	mov	r0, sp
 801c396:	f000 fae7 	bl	801c968 <nema_set_matrix>
 801c39a:	b012      	add	sp, #72	; 0x48
 801c39c:	bd70      	pop	{r4, r5, r6, pc}
 801c39e:	eddf 7a09 	vldr	s15, [pc, #36]	; 801c3c4 <nema_interpolate_tx_ty+0x110>
 801c3a2:	eef4 3ae7 	vcmpe.f32	s7, s15
 801c3a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c3aa:	da8f      	bge.n	801c2cc <nema_interpolate_tx_ty+0x18>
 801c3ac:	e7a2      	b.n	801c2f4 <nema_interpolate_tx_ty+0x40>
 801c3ae:	eddf 7a05 	vldr	s15, [pc, #20]	; 801c3c4 <nema_interpolate_tx_ty+0x110>
 801c3b2:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801c3b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c3ba:	da87      	bge.n	801c2cc <nema_interpolate_tx_ty+0x18>
 801c3bc:	e7a6      	b.n	801c30c <nema_interpolate_tx_ty+0x58>
 801c3be:	bf00      	nop
 801c3c0:	3727c5ac 	.word	0x3727c5ac
 801c3c4:	b727c5ac 	.word	0xb727c5ac

0801c3c8 <nema_f2fx>:
 801c3c8:	eddf 7a06 	vldr	s15, [pc, #24]	; 801c3e4 <nema_f2fx+0x1c>
 801c3cc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801c3d0:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c3d4:	ee30 0a07 	vadd.f32	s0, s0, s14
 801c3d8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801c3dc:	ee17 0a90 	vmov	r0, s15
 801c3e0:	4770      	bx	lr
 801c3e2:	bf00      	nop
 801c3e4:	47800000 	.word	0x47800000

0801c3e8 <nema_mat3x3_load_identity>:
 801c3e8:	2300      	movs	r3, #0
 801c3ea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801c3ee:	61c3      	str	r3, [r0, #28]
 801c3f0:	6202      	str	r2, [r0, #32]
 801c3f2:	6102      	str	r2, [r0, #16]
 801c3f4:	6002      	str	r2, [r0, #0]
 801c3f6:	6183      	str	r3, [r0, #24]
 801c3f8:	6143      	str	r3, [r0, #20]
 801c3fa:	60c3      	str	r3, [r0, #12]
 801c3fc:	6083      	str	r3, [r0, #8]
 801c3fe:	6043      	str	r3, [r0, #4]
 801c400:	4770      	bx	lr
 801c402:	bf00      	nop

0801c404 <nema_mat3x3_mul>:
 801c404:	edd1 4a01 	vldr	s9, [r1, #4]
 801c408:	ed91 0a04 	vldr	s0, [r1, #16]
 801c40c:	edd1 0a05 	vldr	s1, [r1, #20]
 801c410:	ed2d 8b0c 	vpush	{d8-d13}
 801c414:	ed91 6a00 	vldr	s12, [r1]
 801c418:	ed91 4a03 	vldr	s8, [r1, #12]
 801c41c:	ed91 aa02 	vldr	s20, [r1, #8]
 801c420:	edd0 3a03 	vldr	s7, [r0, #12]
 801c424:	ed90 8a04 	vldr	s16, [r0, #16]
 801c428:	ed90 9a00 	vldr	s18, [r0]
 801c42c:	edd0 8a01 	vldr	s17, [r0, #4]
 801c430:	edd0 9a06 	vldr	s19, [r0, #24]
 801c434:	ed90 1a07 	vldr	s2, [r0, #28]
 801c438:	edd1 aa06 	vldr	s21, [r1, #24]
 801c43c:	edd1 6a07 	vldr	s13, [r1, #28]
 801c440:	ed91 7a08 	vldr	s14, [r1, #32]
 801c444:	ed90 5a02 	vldr	s10, [r0, #8]
 801c448:	edd0 5a05 	vldr	s11, [r0, #20]
 801c44c:	ee69 da06 	vmul.f32	s27, s18, s12
 801c450:	ee29 da24 	vmul.f32	s26, s18, s9
 801c454:	ee66 ca23 	vmul.f32	s25, s12, s7
 801c458:	ee24 caa3 	vmul.f32	s24, s9, s7
 801c45c:	ee68 1a84 	vmul.f32	s3, s17, s8
 801c460:	ee29 9a0a 	vmul.f32	s18, s18, s20
 801c464:	ee28 2a80 	vmul.f32	s4, s17, s0
 801c468:	ee26 6a29 	vmul.f32	s12, s12, s19
 801c46c:	ee64 2a08 	vmul.f32	s5, s8, s16
 801c470:	ee6a ba23 	vmul.f32	s23, s20, s7
 801c474:	ee24 baa9 	vmul.f32	s22, s9, s19
 801c478:	ee20 3a08 	vmul.f32	s6, s0, s16
 801c47c:	ee60 3a88 	vmul.f32	s7, s1, s16
 801c480:	ee60 4a01 	vmul.f32	s9, s0, s2
 801c484:	ee68 8aa0 	vmul.f32	s17, s17, s1
 801c488:	ee24 4a01 	vmul.f32	s8, s8, s2
 801c48c:	ee6a 7a29 	vmul.f32	s15, s20, s19
 801c490:	ee20 1a81 	vmul.f32	s2, s1, s2
 801c494:	edd0 0a08 	vldr	s1, [r0, #32]
 801c498:	ee25 0a2a 	vmul.f32	s0, s10, s21
 801c49c:	ee79 8a28 	vadd.f32	s17, s18, s17
 801c4a0:	ee2a 8aa5 	vmul.f32	s16, s21, s11
 801c4a4:	ee25 9a26 	vmul.f32	s18, s10, s13
 801c4a8:	ee7d 1aa1 	vadd.f32	s3, s27, s3
 801c4ac:	ee3d 2a02 	vadd.f32	s4, s26, s4
 801c4b0:	ee7c 2aa2 	vadd.f32	s5, s25, s5
 801c4b4:	ee3c 3a03 	vadd.f32	s6, s24, s6
 801c4b8:	ee7b 3aa3 	vadd.f32	s7, s23, s7
 801c4bc:	ee36 4a04 	vadd.f32	s8, s12, s8
 801c4c0:	ee7b 4a24 	vadd.f32	s9, s22, s9
 801c4c4:	ee77 7a81 	vadd.f32	s15, s15, s2
 801c4c8:	ee25 5a07 	vmul.f32	s10, s10, s14
 801c4cc:	ee26 1aa5 	vmul.f32	s2, s13, s11
 801c4d0:	ee2a 6aa0 	vmul.f32	s12, s21, s1
 801c4d4:	ee67 5a25 	vmul.f32	s11, s14, s11
 801c4d8:	ee66 6aa0 	vmul.f32	s13, s13, s1
 801c4dc:	ee27 7a20 	vmul.f32	s14, s14, s1
 801c4e0:	ee32 2a09 	vadd.f32	s4, s4, s18
 801c4e4:	ee38 5a85 	vadd.f32	s10, s17, s10
 801c4e8:	ee72 2a88 	vadd.f32	s5, s5, s16
 801c4ec:	ee71 1a80 	vadd.f32	s3, s3, s0
 801c4f0:	ee33 3a01 	vadd.f32	s6, s6, s2
 801c4f4:	ee73 5aa5 	vadd.f32	s11, s7, s11
 801c4f8:	ee34 6a06 	vadd.f32	s12, s8, s12
 801c4fc:	ee74 6aa6 	vadd.f32	s13, s9, s13
 801c500:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c504:	edc0 1a00 	vstr	s3, [r0]
 801c508:	ed80 2a01 	vstr	s4, [r0, #4]
 801c50c:	ed80 5a02 	vstr	s10, [r0, #8]
 801c510:	edc0 2a03 	vstr	s5, [r0, #12]
 801c514:	ed80 3a04 	vstr	s6, [r0, #16]
 801c518:	edc0 5a05 	vstr	s11, [r0, #20]
 801c51c:	ed80 6a06 	vstr	s12, [r0, #24]
 801c520:	edc0 6a07 	vstr	s13, [r0, #28]
 801c524:	edc0 7a08 	vstr	s15, [r0, #32]
 801c528:	ecbd 8b0c 	vpop	{d8-d13}
 801c52c:	4770      	bx	lr
 801c52e:	bf00      	nop

0801c530 <nema_mat3x3_adj>:
 801c530:	edd0 3a03 	vldr	s7, [r0, #12]
 801c534:	edd0 4a04 	vldr	s9, [r0, #16]
 801c538:	ed90 6a08 	vldr	s12, [r0, #32]
 801c53c:	ed90 5a07 	vldr	s10, [r0, #28]
 801c540:	ed90 4a05 	vldr	s8, [r0, #20]
 801c544:	edd0 7a00 	vldr	s15, [r0]
 801c548:	edd0 6a02 	vldr	s13, [r0, #8]
 801c54c:	edd0 5a01 	vldr	s11, [r0, #4]
 801c550:	ed90 7a06 	vldr	s14, [r0, #24]
 801c554:	ed2d 8b04 	vpush	{d8-d9}
 801c558:	ee24 1a86 	vmul.f32	s2, s9, s12
 801c55c:	ee25 9a04 	vmul.f32	s18, s10, s8
 801c560:	ee66 8a25 	vmul.f32	s17, s12, s11
 801c564:	ee24 8aa6 	vmul.f32	s16, s9, s13
 801c568:	ee65 1a26 	vmul.f32	s3, s10, s13
 801c56c:	ee24 2a25 	vmul.f32	s4, s8, s11
 801c570:	ee64 2a07 	vmul.f32	s5, s8, s14
 801c574:	ee66 0a87 	vmul.f32	s1, s13, s14
 801c578:	ee25 3a23 	vmul.f32	s6, s10, s7
 801c57c:	ee24 4a27 	vmul.f32	s8, s8, s15
 801c580:	ee26 0a23 	vmul.f32	s0, s12, s7
 801c584:	ee66 6aa3 	vmul.f32	s13, s13, s7
 801c588:	ee26 6a27 	vmul.f32	s12, s12, s15
 801c58c:	ee25 5a27 	vmul.f32	s10, s10, s15
 801c590:	ee64 7aa7 	vmul.f32	s15, s9, s15
 801c594:	ee64 4a87 	vmul.f32	s9, s9, s14
 801c598:	ee25 7a87 	vmul.f32	s14, s11, s14
 801c59c:	ee65 5aa3 	vmul.f32	s11, s11, s7
 801c5a0:	ee31 1a49 	vsub.f32	s2, s2, s18
 801c5a4:	ee71 1ae8 	vsub.f32	s3, s3, s17
 801c5a8:	ee32 2a48 	vsub.f32	s4, s4, s16
 801c5ac:	ecbd 8b04 	vpop	{d8-d9}
 801c5b0:	ee72 3ac0 	vsub.f32	s7, s5, s0
 801c5b4:	ee36 6a60 	vsub.f32	s12, s12, s1
 801c5b8:	ee76 6ac4 	vsub.f32	s13, s13, s8
 801c5bc:	ee73 4a64 	vsub.f32	s9, s6, s9
 801c5c0:	ee37 7a45 	vsub.f32	s14, s14, s10
 801c5c4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801c5c8:	ed80 1a00 	vstr	s2, [r0]
 801c5cc:	edc0 1a01 	vstr	s3, [r0, #4]
 801c5d0:	ed80 2a02 	vstr	s4, [r0, #8]
 801c5d4:	edc0 3a03 	vstr	s7, [r0, #12]
 801c5d8:	ed80 6a04 	vstr	s12, [r0, #16]
 801c5dc:	edc0 6a05 	vstr	s13, [r0, #20]
 801c5e0:	edc0 4a06 	vstr	s9, [r0, #24]
 801c5e4:	ed80 7a07 	vstr	s14, [r0, #28]
 801c5e8:	edc0 7a08 	vstr	s15, [r0, #32]
 801c5ec:	4770      	bx	lr
 801c5ee:	bf00      	nop

0801c5f0 <nema_mat3x3_quad_to_rect>:
 801c5f0:	ee70 6a41 	vsub.f32	s13, s0, s2
 801c5f4:	ee76 6a82 	vadd.f32	s13, s13, s4
 801c5f8:	ee76 6ac3 	vsub.f32	s13, s13, s6
 801c5fc:	ee30 6ae1 	vsub.f32	s12, s1, s3
 801c600:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801c604:	ee36 6a22 	vadd.f32	s12, s12, s5
 801c608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c60c:	ed2d 8b06 	vpush	{d8-d10}
 801c610:	ee36 6a63 	vsub.f32	s12, s12, s7
 801c614:	ee09 0a10 	vmov	s18, r0
 801c618:	ee08 1a90 	vmov	s17, r1
 801c61c:	f100 812e 	bmi.w	801c87c <nema_mat3x3_quad_to_rect+0x28c>
 801c620:	eddf 7aa4 	vldr	s15, [pc, #656]	; 801c8b4 <nema_mat3x3_quad_to_rect+0x2c4>
 801c624:	eef4 6ae7 	vcmpe.f32	s13, s15
 801c628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c62c:	d80d      	bhi.n	801c64a <nema_mat3x3_quad_to_rect+0x5a>
 801c62e:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801c632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c636:	f100 80f7 	bmi.w	801c828 <nema_mat3x3_quad_to_rect+0x238>
 801c63a:	eddf 7a9e 	vldr	s15, [pc, #632]	; 801c8b4 <nema_mat3x3_quad_to_rect+0x2c4>
 801c63e:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801c642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c646:	f240 80f7 	bls.w	801c838 <nema_mat3x3_quad_to_rect+0x248>
 801c64a:	ee31 7a42 	vsub.f32	s14, s2, s4
 801c64e:	ee73 7ae2 	vsub.f32	s15, s7, s5
 801c652:	ee33 2a42 	vsub.f32	s4, s6, s4
 801c656:	ee71 2ae2 	vsub.f32	s5, s3, s5
 801c65a:	ee67 5a27 	vmul.f32	s11, s14, s15
 801c65e:	ee22 5a22 	vmul.f32	s10, s4, s5
 801c662:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801c666:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801c66a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801c66e:	ee26 7a07 	vmul.f32	s14, s12, s14
 801c672:	ee66 6aa2 	vmul.f32	s13, s13, s5
 801c676:	ee26 6a02 	vmul.f32	s12, s12, s4
 801c67a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c67e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801c682:	ee77 6a66 	vsub.f32	s13, s14, s13
 801c686:	f100 80c5 	bmi.w	801c814 <nema_mat3x3_quad_to_rect+0x224>
 801c68a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 801c8b4 <nema_mat3x3_quad_to_rect+0x2c4>
 801c68e:	eef4 5ac7 	vcmpe.f32	s11, s14
 801c692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c696:	bf94      	ite	ls
 801c698:	2301      	movls	r3, #1
 801c69a:	2300      	movhi	r3, #0
 801c69c:	2b00      	cmp	r3, #0
 801c69e:	f040 8106 	bne.w	801c8ae <nema_mat3x3_quad_to_rect+0x2be>
 801c6a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c6a6:	ee87 6a25 	vdiv.f32	s12, s14, s11
 801c6aa:	ee67 7a86 	vmul.f32	s15, s15, s12
 801c6ae:	ee66 6a86 	vmul.f32	s13, s13, s12
 801c6b2:	ee21 5a27 	vmul.f32	s10, s2, s15
 801c6b6:	ee61 5aa7 	vmul.f32	s11, s3, s15
 801c6ba:	ee63 2aa6 	vmul.f32	s5, s7, s13
 801c6be:	ee31 1a40 	vsub.f32	s2, s2, s0
 801c6c2:	ee23 6a26 	vmul.f32	s12, s6, s13
 801c6c6:	ee33 2a40 	vsub.f32	s4, s6, s0
 801c6ca:	ee71 1ae0 	vsub.f32	s3, s3, s1
 801c6ce:	ee73 3ae0 	vsub.f32	s7, s7, s1
 801c6d2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c6d6:	ee32 2a06 	vadd.f32	s4, s4, s12
 801c6da:	ee71 1aa5 	vadd.f32	s3, s3, s11
 801c6de:	ee73 2aa2 	vadd.f32	s5, s7, s5
 801c6e2:	ed82 0a02 	vstr	s0, [r2, #8]
 801c6e6:	edc2 0a05 	vstr	s1, [r2, #20]
 801c6ea:	edc2 7a06 	vstr	s15, [r2, #24]
 801c6ee:	edc2 6a07 	vstr	s13, [r2, #28]
 801c6f2:	ed82 7a08 	vstr	s14, [r2, #32]
 801c6f6:	ed82 1a00 	vstr	s2, [r2]
 801c6fa:	ed82 2a01 	vstr	s4, [r2, #4]
 801c6fe:	edc2 1a03 	vstr	s3, [r2, #12]
 801c702:	edc2 2a04 	vstr	s5, [r2, #16]
 801c706:	ee20 4aa6 	vmul.f32	s8, s1, s13
 801c70a:	ee60 5aa7 	vmul.f32	s11, s1, s15
 801c70e:	ee32 3ac4 	vsub.f32	s6, s5, s8
 801c712:	ee31 7ae5 	vsub.f32	s14, s3, s11
 801c716:	ee21 8aa6 	vmul.f32	s16, s3, s13
 801c71a:	ee22 6aa7 	vmul.f32	s12, s5, s15
 801c71e:	ee27 7a02 	vmul.f32	s14, s14, s4
 801c722:	ee23 4a01 	vmul.f32	s8, s6, s2
 801c726:	ee38 8a46 	vsub.f32	s16, s16, s12
 801c72a:	ee34 4a47 	vsub.f32	s8, s8, s14
 801c72e:	ee20 7a08 	vmul.f32	s14, s0, s16
 801c732:	ee34 4a07 	vadd.f32	s8, s8, s14
 801c736:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
 801c73a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c73e:	f100 80ac 	bmi.w	801c89a <nema_mat3x3_quad_to_rect+0x2aa>
 801c742:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 801c8b4 <nema_mat3x3_quad_to_rect+0x2c4>
 801c746:	eeb4 4ac7 	vcmpe.f32	s8, s14
 801c74a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c74e:	bf94      	ite	ls
 801c750:	2001      	movls	r0, #1
 801c752:	2000      	movhi	r0, #0
 801c754:	2800      	cmp	r0, #0
 801c756:	f040 80aa 	bne.w	801c8ae <nema_mat3x3_quad_to_rect+0x2be>
 801c75a:	ee20 5a82 	vmul.f32	s10, s1, s4
 801c75e:	ee60 4a26 	vmul.f32	s9, s0, s13
 801c762:	ee20 6a27 	vmul.f32	s12, s0, s15
 801c766:	ee60 9a22 	vmul.f32	s19, s0, s5
 801c76a:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
 801c76e:	ee60 0a81 	vmul.f32	s1, s1, s2
 801c772:	ee20 7a21 	vmul.f32	s14, s0, s3
 801c776:	eeca 3a04 	vdiv.f32	s7, s20, s8
 801c77a:	ee74 4ac2 	vsub.f32	s9, s9, s4
 801c77e:	ee61 6a26 	vmul.f32	s13, s2, s13
 801c782:	ee67 7a82 	vmul.f32	s15, s15, s4
 801c786:	ee35 5a69 	vsub.f32	s10, s10, s19
 801c78a:	ee75 5ae1 	vsub.f32	s11, s11, s3
 801c78e:	ee31 6a46 	vsub.f32	s12, s2, s12
 801c792:	ee62 2a81 	vmul.f32	s5, s5, s2
 801c796:	ee37 7a60 	vsub.f32	s14, s14, s1
 801c79a:	ee21 2a82 	vmul.f32	s4, s3, s4
 801c79e:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 801c7a2:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 801c7a6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c7aa:	ee23 4a23 	vmul.f32	s8, s6, s7
 801c7ae:	ee65 6a23 	vmul.f32	s13, s10, s7
 801c7b2:	ee65 5aa3 	vmul.f32	s11, s11, s7
 801c7b6:	ee64 4aa3 	vmul.f32	s9, s9, s7
 801c7ba:	ee26 6a23 	vmul.f32	s12, s12, s7
 801c7be:	ee27 7a23 	vmul.f32	s14, s14, s7
 801c7c2:	ee72 2ac2 	vsub.f32	s5, s5, s4
 801c7c6:	ee24 4a09 	vmul.f32	s8, s8, s18
 801c7ca:	ee65 5aa8 	vmul.f32	s11, s11, s17
 801c7ce:	ee28 8a23 	vmul.f32	s16, s16, s7
 801c7d2:	ee24 5a89 	vmul.f32	s10, s9, s18
 801c7d6:	ee26 6a28 	vmul.f32	s12, s12, s17
 801c7da:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801c7de:	ee66 6a89 	vmul.f32	s13, s13, s18
 801c7e2:	ee27 7a28 	vmul.f32	s14, s14, s17
 801c7e6:	ee62 2aa3 	vmul.f32	s5, s5, s7
 801c7ea:	ed82 4a00 	vstr	s8, [r2]
 801c7ee:	edc2 5a03 	vstr	s11, [r2, #12]
 801c7f2:	ed82 8a06 	vstr	s16, [r2, #24]
 801c7f6:	ed82 5a01 	vstr	s10, [r2, #4]
 801c7fa:	ed82 6a04 	vstr	s12, [r2, #16]
 801c7fe:	edc2 7a07 	vstr	s15, [r2, #28]
 801c802:	edc2 6a02 	vstr	s13, [r2, #8]
 801c806:	ed82 7a05 	vstr	s14, [r2, #20]
 801c80a:	edc2 2a08 	vstr	s5, [r2, #32]
 801c80e:	ecbd 8b06 	vpop	{d8-d10}
 801c812:	4770      	bx	lr
 801c814:	ed9f 7a28 	vldr	s14, [pc, #160]	; 801c8b8 <nema_mat3x3_quad_to_rect+0x2c8>
 801c818:	eef4 5ac7 	vcmpe.f32	s11, s14
 801c81c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c820:	bfac      	ite	ge
 801c822:	2301      	movge	r3, #1
 801c824:	2300      	movlt	r3, #0
 801c826:	e739      	b.n	801c69c <nema_mat3x3_quad_to_rect+0xac>
 801c828:	eddf 7a23 	vldr	s15, [pc, #140]	; 801c8b8 <nema_mat3x3_quad_to_rect+0x2c8>
 801c82c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801c830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c834:	f6ff af09 	blt.w	801c64a <nema_mat3x3_quad_to_rect+0x5a>
 801c838:	ed9f 7a20 	vldr	s14, [pc, #128]	; 801c8bc <nema_mat3x3_quad_to_rect+0x2cc>
 801c83c:	ee32 2a41 	vsub.f32	s4, s4, s2
 801c840:	ee72 2ae1 	vsub.f32	s5, s5, s3
 801c844:	ee31 1a40 	vsub.f32	s2, s2, s0
 801c848:	ee71 1ae0 	vsub.f32	s3, s3, s1
 801c84c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801c850:	eef0 7a47 	vmov.f32	s15, s14
 801c854:	ed82 2a01 	vstr	s4, [r2, #4]
 801c858:	ed82 1a00 	vstr	s2, [r2]
 801c85c:	edc2 2a04 	vstr	s5, [r2, #16]
 801c860:	edc2 1a03 	vstr	s3, [r2, #12]
 801c864:	ed82 0a02 	vstr	s0, [r2, #8]
 801c868:	edc2 0a05 	vstr	s1, [r2, #20]
 801c86c:	ed82 7a06 	vstr	s14, [r2, #24]
 801c870:	ed82 7a07 	vstr	s14, [r2, #28]
 801c874:	eef0 6a47 	vmov.f32	s13, s14
 801c878:	6213      	str	r3, [r2, #32]
 801c87a:	e744      	b.n	801c706 <nema_mat3x3_quad_to_rect+0x116>
 801c87c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801c8b8 <nema_mat3x3_quad_to_rect+0x2c8>
 801c880:	eef4 6ae7 	vcmpe.f32	s13, s15
 801c884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c888:	f6ff aedf 	blt.w	801c64a <nema_mat3x3_quad_to_rect+0x5a>
 801c88c:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801c890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c894:	f57f aed1 	bpl.w	801c63a <nema_mat3x3_quad_to_rect+0x4a>
 801c898:	e7c6      	b.n	801c828 <nema_mat3x3_quad_to_rect+0x238>
 801c89a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 801c8b8 <nema_mat3x3_quad_to_rect+0x2c8>
 801c89e:	eeb4 4ac7 	vcmpe.f32	s8, s14
 801c8a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c8a6:	bfac      	ite	ge
 801c8a8:	2001      	movge	r0, #1
 801c8aa:	2000      	movlt	r0, #0
 801c8ac:	e752      	b.n	801c754 <nema_mat3x3_quad_to_rect+0x164>
 801c8ae:	f04f 30ff 	mov.w	r0, #4294967295
 801c8b2:	e7ac      	b.n	801c80e <nema_mat3x3_quad_to_rect+0x21e>
 801c8b4:	3727c5ac 	.word	0x3727c5ac
 801c8b8:	b727c5ac 	.word	0xb727c5ac
 801c8bc:	00000000 	.word	0x00000000

0801c8c0 <nema_readHwConfig>:
 801c8c0:	b510      	push	{r4, lr}
 801c8c2:	4c05      	ldr	r4, [pc, #20]	; (801c8d8 <nema_readHwConfig+0x18>)
 801c8c4:	6820      	ldr	r0, [r4, #0]
 801c8c6:	b100      	cbz	r0, 801c8ca <nema_readHwConfig+0xa>
 801c8c8:	bd10      	pop	{r4, pc}
 801c8ca:	f44f 70f8 	mov.w	r0, #496	; 0x1f0
 801c8ce:	f7e6 fbfb 	bl	80030c8 <nema_reg_read>
 801c8d2:	6020      	str	r0, [r4, #0]
 801c8d4:	bd10      	pop	{r4, pc}
 801c8d6:	bf00      	nop
 801c8d8:	20197a88 	.word	0x20197a88

0801c8dc <nema_readHwConfigH>:
 801c8dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801c8e0:	f7e6 bbf2 	b.w	80030c8 <nema_reg_read>

0801c8e4 <nema_enable_tiling>:
 801c8e4:	2800      	cmp	r0, #0
 801c8e6:	bf14      	ite	ne
 801c8e8:	f04f 4080 	movne.w	r0, #1073741824	; 0x40000000
 801c8ec:	2000      	moveq	r0, #0
 801c8ee:	b410      	push	{r4}
 801c8f0:	4a05      	ldr	r2, [pc, #20]	; (801c908 <nema_enable_tiling+0x24>)
 801c8f2:	6951      	ldr	r1, [r2, #20]
 801c8f4:	e9d2 4302 	ldrd	r4, r3, [r2, #8]
 801c8f8:	4323      	orrs	r3, r4
 801c8fa:	430b      	orrs	r3, r1
 801c8fc:	4303      	orrs	r3, r0
 801c8fe:	6050      	str	r0, [r2, #4]
 801c900:	6113      	str	r3, [r2, #16]
 801c902:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c906:	4770      	bx	lr
 801c908:	20197e24 	.word	0x20197e24

0801c90c <nema_enable_aa>:
 801c90c:	2800      	cmp	r0, #0
 801c90e:	b410      	push	{r4}
 801c910:	bf19      	ittee	ne
 801c912:	f04f 6080 	movne.w	r0, #67108864	; 0x4000000
 801c916:	f04f 64c0 	movne.w	r4, #100663296	; 0x6000000
 801c91a:	f04f 7400 	moveq.w	r4, #33554432	; 0x2000000
 801c91e:	2000      	moveq	r0, #0
 801c920:	2900      	cmp	r1, #0
 801c922:	bf08      	it	eq
 801c924:	4604      	moveq	r4, r0
 801c926:	b10a      	cbz	r2, 801c92c <nema_enable_aa+0x20>
 801c928:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 801c92c:	b10b      	cbz	r3, 801c932 <nema_enable_aa+0x26>
 801c92e:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 801c932:	4a06      	ldr	r2, [pc, #24]	; (801c94c <nema_enable_aa+0x40>)
 801c934:	6853      	ldr	r3, [r2, #4]
 801c936:	e9d2 1002 	ldrd	r1, r0, [r2, #8]
 801c93a:	4303      	orrs	r3, r0
 801c93c:	430b      	orrs	r3, r1
 801c93e:	4323      	orrs	r3, r4
 801c940:	6950      	ldr	r0, [r2, #20]
 801c942:	e9c2 3404 	strd	r3, r4, [r2, #16]
 801c946:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c94a:	4770      	bx	lr
 801c94c:	20197e24 	.word	0x20197e24

0801c950 <nema_matmul_bypass>:
 801c950:	b920      	cbnz	r0, 801c95c <nema_matmul_bypass+0xc>
 801c952:	4601      	mov	r1, r0
 801c954:	f44f 708c 	mov.w	r0, #280	; 0x118
 801c958:	f000 be84 	b.w	801d664 <nema_cl_add_cmd>
 801c95c:	f04f 4110 	mov.w	r1, #2415919104	; 0x90000000
 801c960:	f44f 708c 	mov.w	r0, #280	; 0x118
 801c964:	f000 be7e 	b.w	801d664 <nema_cl_add_cmd>

0801c968 <nema_set_matrix>:
 801c968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c96c:	ed9f 7a59 	vldr	s14, [pc, #356]	; 801cad4 <nema_set_matrix+0x16c>
 801c970:	edd0 7a06 	vldr	s15, [r0, #24]
 801c974:	eef4 7ac7 	vcmpe.f32	s15, s14
 801c978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c97c:	4604      	mov	r4, r0
 801c97e:	d506      	bpl.n	801c98e <nema_set_matrix+0x26>
 801c980:	eddf 6a55 	vldr	s13, [pc, #340]	; 801cad8 <nema_set_matrix+0x170>
 801c984:	eef4 7ae6 	vcmpe.f32	s15, s13
 801c988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c98c:	dc47      	bgt.n	801ca1e <nema_set_matrix+0xb6>
 801c98e:	2009      	movs	r0, #9
 801c990:	f000 fe0a 	bl	801d5a8 <nema_cl_get_space>
 801c994:	2800      	cmp	r0, #0
 801c996:	d040      	beq.n	801ca1a <nema_set_matrix+0xb2>
 801c998:	f44f 73ba 	mov.w	r3, #372	; 0x174
 801c99c:	6003      	str	r3, [r0, #0]
 801c99e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 801c9a2:	6962      	ldr	r2, [r4, #20]
 801c9a4:	6083      	str	r3, [r0, #8]
 801c9a6:	f44f 73bc 	mov.w	r3, #376	; 0x178
 801c9aa:	6042      	str	r2, [r0, #4]
 801c9ac:	68a2      	ldr	r2, [r4, #8]
 801c9ae:	6103      	str	r3, [r0, #16]
 801c9b0:	f44f 73be 	mov.w	r3, #380	; 0x17c
 801c9b4:	60c2      	str	r2, [r0, #12]
 801c9b6:	69a2      	ldr	r2, [r4, #24]
 801c9b8:	6183      	str	r3, [r0, #24]
 801c9ba:	f44f 73c0 	mov.w	r3, #384	; 0x180
 801c9be:	6142      	str	r2, [r0, #20]
 801c9c0:	69e2      	ldr	r2, [r4, #28]
 801c9c2:	6203      	str	r3, [r0, #32]
 801c9c4:	61c2      	str	r2, [r0, #28]
 801c9c6:	6a23      	ldr	r3, [r4, #32]
 801c9c8:	2544      	movs	r5, #68	; 0x44
 801c9ca:	6243      	str	r3, [r0, #36]	; 0x24
 801c9cc:	2640      	movs	r6, #64	; 0x40
 801c9ce:	233c      	movs	r3, #60	; 0x3c
 801c9d0:	2738      	movs	r7, #56	; 0x38
 801c9d2:	2234      	movs	r2, #52	; 0x34
 801c9d4:	f04f 0c30 	mov.w	ip, #48	; 0x30
 801c9d8:	212c      	movs	r1, #44	; 0x2c
 801c9da:	f04f 0e28 	mov.w	lr, #40	; 0x28
 801c9de:	f44f 78b0 	mov.w	r8, #352	; 0x160
 801c9e2:	f840 800e 	str.w	r8, [r0, lr]
 801c9e6:	f44f 7eb2 	mov.w	lr, #356	; 0x164
 801c9ea:	f8d4 8000 	ldr.w	r8, [r4]
 801c9ee:	4401      	add	r1, r0
 801c9f0:	f8c1 8000 	str.w	r8, [r1]
 801c9f4:	f840 e00c 	str.w	lr, [r0, ip]
 801c9f8:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 801c9fc:	f8d4 c004 	ldr.w	ip, [r4, #4]
 801ca00:	4402      	add	r2, r0
 801ca02:	f8c2 c000 	str.w	ip, [r2]
 801ca06:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801ca0a:	51c1      	str	r1, [r0, r7]
 801ca0c:	68e1      	ldr	r1, [r4, #12]
 801ca0e:	4403      	add	r3, r0
 801ca10:	6019      	str	r1, [r3, #0]
 801ca12:	5182      	str	r2, [r0, r6]
 801ca14:	6923      	ldr	r3, [r4, #16]
 801ca16:	4428      	add	r0, r5
 801ca18:	6003      	str	r3, [r0, #0]
 801ca1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ca1e:	ed90 6a07 	vldr	s12, [r0, #28]
 801ca22:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801ca26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca2a:	d5b0      	bpl.n	801c98e <nema_set_matrix+0x26>
 801ca2c:	eeb4 6ae6 	vcmpe.f32	s12, s13
 801ca30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca34:	ddab      	ble.n	801c98e <nema_set_matrix+0x26>
 801ca36:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801ca3a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801ca3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ca42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca46:	d43f      	bmi.n	801cac8 <nema_set_matrix+0x160>
 801ca48:	edd4 7a08 	vldr	s15, [r4, #32]
 801ca4c:	ed94 5a00 	vldr	s10, [r4]
 801ca50:	edd4 5a01 	vldr	s11, [r4, #4]
 801ca54:	ed94 6a02 	vldr	s12, [r4, #8]
 801ca58:	edd4 6a03 	vldr	s13, [r4, #12]
 801ca5c:	ed94 7a04 	vldr	s14, [r4, #16]
 801ca60:	ed94 4a05 	vldr	s8, [r4, #20]
 801ca64:	eec5 4a27 	vdiv.f32	s9, s10, s15
 801ca68:	ee85 5aa7 	vdiv.f32	s10, s11, s15
 801ca6c:	eec6 5a27 	vdiv.f32	s11, s12, s15
 801ca70:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 801ca74:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801ca78:	ee84 7a27 	vdiv.f32	s14, s8, s15
 801ca7c:	edc4 4a00 	vstr	s9, [r4]
 801ca80:	ed84 5a01 	vstr	s10, [r4, #4]
 801ca84:	edc4 5a02 	vstr	s11, [r4, #8]
 801ca88:	ed84 6a03 	vstr	s12, [r4, #12]
 801ca8c:	edc4 6a04 	vstr	s13, [r4, #16]
 801ca90:	ed84 7a05 	vstr	s14, [r4, #20]
 801ca94:	2006      	movs	r0, #6
 801ca96:	f000 fd87 	bl	801d5a8 <nema_cl_get_space>
 801ca9a:	2800      	cmp	r0, #0
 801ca9c:	d0bd      	beq.n	801ca1a <nema_set_matrix+0xb2>
 801ca9e:	f44f 73ba 	mov.w	r3, #372	; 0x174
 801caa2:	6003      	str	r3, [r0, #0]
 801caa4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 801caa8:	6962      	ldr	r2, [r4, #20]
 801caaa:	6083      	str	r3, [r0, #8]
 801caac:	6042      	str	r2, [r0, #4]
 801caae:	68a3      	ldr	r3, [r4, #8]
 801cab0:	252c      	movs	r5, #44	; 0x2c
 801cab2:	60c3      	str	r3, [r0, #12]
 801cab4:	2628      	movs	r6, #40	; 0x28
 801cab6:	2324      	movs	r3, #36	; 0x24
 801cab8:	2720      	movs	r7, #32
 801caba:	221c      	movs	r2, #28
 801cabc:	f04f 0c18 	mov.w	ip, #24
 801cac0:	2114      	movs	r1, #20
 801cac2:	f04f 0e10 	mov.w	lr, #16
 801cac6:	e78a      	b.n	801c9de <nema_set_matrix+0x76>
 801cac8:	eef4 7ae6 	vcmpe.f32	s15, s13
 801cacc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cad0:	dce0      	bgt.n	801ca94 <nema_set_matrix+0x12c>
 801cad2:	e7b9      	b.n	801ca48 <nema_set_matrix+0xe0>
 801cad4:	33d6bf95 	.word	0x33d6bf95
 801cad8:	b3d6bf95 	.word	0xb3d6bf95

0801cadc <nema_set_matrix_translate>:
 801cadc:	b508      	push	{r3, lr}
 801cade:	2002      	movs	r0, #2
 801cae0:	ed2d 8b02 	vpush	{d8}
 801cae4:	eeb0 8a40 	vmov.f32	s16, s0
 801cae8:	eef0 8a60 	vmov.f32	s17, s1
 801caec:	f000 fd5c 	bl	801d5a8 <nema_cl_get_space>
 801caf0:	b1c8      	cbz	r0, 801cb26 <nema_set_matrix_translate+0x4a>
 801caf2:	eddf 7a13 	vldr	s15, [pc, #76]	; 801cb40 <nema_set_matrix_translate+0x64>
 801caf6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801cafa:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801cafe:	eef1 6a68 	vneg.f32	s13, s17
 801cb02:	f44f 73b4 	mov.w	r3, #360	; 0x168
 801cb06:	eeb1 7a48 	vneg.f32	s14, s16
 801cb0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb0e:	6002      	str	r2, [r0, #0]
 801cb10:	edc0 6a01 	vstr	s13, [r0, #4]
 801cb14:	6083      	str	r3, [r0, #8]
 801cb16:	ed80 7a03 	vstr	s14, [r0, #12]
 801cb1a:	dc07      	bgt.n	801cb2c <nema_set_matrix_translate+0x50>
 801cb1c:	eef4 8ae7 	vcmpe.f32	s17, s15
 801cb20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb24:	dc02      	bgt.n	801cb2c <nema_set_matrix_translate+0x50>
 801cb26:	ecbd 8b02 	vpop	{d8}
 801cb2a:	bd08      	pop	{r3, pc}
 801cb2c:	ecbd 8b02 	vpop	{d8}
 801cb30:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801cb34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801cb38:	f44f 708c 	mov.w	r0, #280	; 0x118
 801cb3c:	f000 bd92 	b.w	801d664 <nema_cl_add_cmd>
 801cb40:	45000000 	.word	0x45000000

0801cb44 <nema_load_frag_shader>:
 801cb44:	b570      	push	{r4, r5, r6, lr}
 801cb46:	460e      	mov	r6, r1
 801cb48:	4604      	mov	r4, r0
 801cb4a:	4611      	mov	r1, r2
 801cb4c:	20c4      	movs	r0, #196	; 0xc4
 801cb4e:	f000 fd89 	bl	801d664 <nema_cl_add_cmd>
 801cb52:	b186      	cbz	r6, 801cb76 <nema_load_frag_shader+0x32>
 801cb54:	2500      	movs	r5, #0
 801cb56:	3408      	adds	r4, #8
 801cb58:	f854 1c08 	ldr.w	r1, [r4, #-8]
 801cb5c:	20c8      	movs	r0, #200	; 0xc8
 801cb5e:	f000 fd81 	bl	801d664 <nema_cl_add_cmd>
 801cb62:	3501      	adds	r5, #1
 801cb64:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801cb68:	20cc      	movs	r0, #204	; 0xcc
 801cb6a:	f000 fd7b 	bl	801d664 <nema_cl_add_cmd>
 801cb6e:	42ae      	cmp	r6, r5
 801cb70:	f104 0408 	add.w	r4, r4, #8
 801cb74:	d1f0      	bne.n	801cb58 <nema_load_frag_shader+0x14>
 801cb76:	bd70      	pop	{r4, r5, r6, pc}

0801cb78 <nema_set_frag_ptr>:
 801cb78:	4601      	mov	r1, r0
 801cb7a:	f44f 708e 	mov.w	r0, #284	; 0x11c
 801cb7e:	f000 bd71 	b.w	801d664 <nema_cl_add_cmd>
 801cb82:	bf00      	nop

0801cb84 <nema_set_rop_blend_mode>:
 801cb84:	4601      	mov	r1, r0
 801cb86:	f44f 70e8 	mov.w	r0, #464	; 0x1d0
 801cb8a:	f000 bd6b 	b.w	801d664 <nema_cl_add_cmd>
 801cb8e:	bf00      	nop

0801cb90 <nema_set_rop_const_color>:
 801cb90:	4601      	mov	r1, r0
 801cb92:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 801cb96:	f000 bd65 	b.w	801d664 <nema_cl_add_cmd>
 801cb9a:	bf00      	nop

0801cb9c <nema_set_depth_ctrl>:
 801cb9c:	4601      	mov	r1, r0
 801cb9e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 801cba2:	f000 bd5f 	b.w	801d664 <nema_cl_add_cmd>
 801cba6:	bf00      	nop

0801cba8 <nema_set_raster_color>:
 801cba8:	4601      	mov	r1, r0
 801cbaa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 801cbae:	f000 bd59 	b.w	801d664 <nema_cl_add_cmd>
 801cbb2:	bf00      	nop

0801cbb4 <nema_raster_triangle_fx>:
 801cbb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cbb8:	4607      	mov	r7, r0
 801cbba:	2007      	movs	r0, #7
 801cbbc:	460e      	mov	r6, r1
 801cbbe:	4615      	mov	r5, r2
 801cbc0:	461c      	mov	r4, r3
 801cbc2:	f000 fcf1 	bl	801d5a8 <nema_cl_get_space>
 801cbc6:	b350      	cbz	r0, 801cc1e <nema_raster_triangle_fx+0x6a>
 801cbc8:	f44f 7398 	mov.w	r3, #304	; 0x130
 801cbcc:	f44f 7292 	mov.w	r2, #292	; 0x124
 801cbd0:	f44f 7890 	mov.w	r8, #288	; 0x120
 801cbd4:	f44f 7e9a 	mov.w	lr, #308	; 0x134
 801cbd8:	f44f 7ca0 	mov.w	ip, #320	; 0x140
 801cbdc:	f44f 71a2 	mov.w	r1, #324	; 0x144
 801cbe0:	6103      	str	r3, [r0, #16]
 801cbe2:	4b10      	ldr	r3, [pc, #64]	; (801cc24 <nema_raster_triangle_fx+0x70>)
 801cbe4:	6047      	str	r7, [r0, #4]
 801cbe6:	60c6      	str	r6, [r0, #12]
 801cbe8:	f8c0 8000 	str.w	r8, [r0]
 801cbec:	6082      	str	r2, [r0, #8]
 801cbee:	691a      	ldr	r2, [r3, #16]
 801cbf0:	4b0d      	ldr	r3, [pc, #52]	; (801cc28 <nema_raster_triangle_fx+0x74>)
 801cbf2:	61c4      	str	r4, [r0, #28]
 801cbf4:	9c06      	ldr	r4, [sp, #24]
 801cbf6:	6303      	str	r3, [r0, #48]	; 0x30
 801cbf8:	01d3      	lsls	r3, r2, #7
 801cbfa:	6244      	str	r4, [r0, #36]	; 0x24
 801cbfc:	bf48      	it	mi
 801cbfe:	f442 0200 	orrmi.w	r2, r2, #8388608	; 0x800000
 801cc02:	9c07      	ldr	r4, [sp, #28]
 801cc04:	bf58      	it	pl
 801cc06:	f422 0200 	bicpl.w	r2, r2, #8388608	; 0x800000
 801cc0a:	f042 0204 	orr.w	r2, r2, #4
 801cc0e:	6145      	str	r5, [r0, #20]
 801cc10:	62c4      	str	r4, [r0, #44]	; 0x2c
 801cc12:	f8c0 e018 	str.w	lr, [r0, #24]
 801cc16:	f8c0 c020 	str.w	ip, [r0, #32]
 801cc1a:	6281      	str	r1, [r0, #40]	; 0x28
 801cc1c:	6342      	str	r2, [r0, #52]	; 0x34
 801cc1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc22:	bf00      	nop
 801cc24:	20197e24 	.word	0x20197e24
 801cc28:	ff000100 	.word	0xff000100

0801cc2c <nema_raster_rect>:
 801cc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc2e:	1e17      	subs	r7, r2, #0
 801cc30:	dd20      	ble.n	801cc74 <nema_raster_rect+0x48>
 801cc32:	2b00      	cmp	r3, #0
 801cc34:	dd1e      	ble.n	801cc74 <nema_raster_rect+0x48>
 801cc36:	4604      	mov	r4, r0
 801cc38:	2003      	movs	r0, #3
 801cc3a:	461d      	mov	r5, r3
 801cc3c:	460e      	mov	r6, r1
 801cc3e:	f000 fcb3 	bl	801d5a8 <nema_cl_get_space>
 801cc42:	b1b8      	cbz	r0, 801cc74 <nema_raster_rect+0x48>
 801cc44:	f44f 7c82 	mov.w	ip, #260	; 0x104
 801cc48:	f44f 7184 	mov.w	r1, #264	; 0x108
 801cc4c:	193a      	adds	r2, r7, r4
 801cc4e:	b292      	uxth	r2, r2
 801cc50:	19ab      	adds	r3, r5, r6
 801cc52:	b2a4      	uxth	r4, r4
 801cc54:	4d08      	ldr	r5, [pc, #32]	; (801cc78 <nema_raster_rect+0x4c>)
 801cc56:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 801cc5a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 801cc5e:	4a07      	ldr	r2, [pc, #28]	; (801cc7c <nema_raster_rect+0x50>)
 801cc60:	6044      	str	r4, [r0, #4]
 801cc62:	60c3      	str	r3, [r0, #12]
 801cc64:	f8c0 c000 	str.w	ip, [r0]
 801cc68:	6081      	str	r1, [r0, #8]
 801cc6a:	6105      	str	r5, [r0, #16]
 801cc6c:	6913      	ldr	r3, [r2, #16]
 801cc6e:	f043 0302 	orr.w	r3, r3, #2
 801cc72:	6143      	str	r3, [r0, #20]
 801cc74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cc76:	bf00      	nop
 801cc78:	ff000100 	.word	0xff000100
 801cc7c:	20197e24 	.word	0x20197e24

0801cc80 <nema_raster_quad_fx>:
 801cc80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cc84:	4607      	mov	r7, r0
 801cc86:	2009      	movs	r0, #9
 801cc88:	460e      	mov	r6, r1
 801cc8a:	4615      	mov	r5, r2
 801cc8c:	461c      	mov	r4, r3
 801cc8e:	f000 fc8b 	bl	801d5a8 <nema_cl_get_space>
 801cc92:	2800      	cmp	r0, #0
 801cc94:	d02f      	beq.n	801ccf6 <nema_raster_quad_fx+0x76>
 801cc96:	f44f 7398 	mov.w	r3, #304	; 0x130
 801cc9a:	f44f 7292 	mov.w	r2, #292	; 0x124
 801cc9e:	f44f 7a90 	mov.w	sl, #288	; 0x120
 801cca2:	f44f 799a 	mov.w	r9, #308	; 0x134
 801cca6:	f44f 78a0 	mov.w	r8, #320	; 0x140
 801ccaa:	f44f 7ea2 	mov.w	lr, #324	; 0x144
 801ccae:	f44f 7ca8 	mov.w	ip, #336	; 0x150
 801ccb2:	f44f 71aa 	mov.w	r1, #340	; 0x154
 801ccb6:	6103      	str	r3, [r0, #16]
 801ccb8:	4b10      	ldr	r3, [pc, #64]	; (801ccfc <nema_raster_quad_fx+0x7c>)
 801ccba:	6047      	str	r7, [r0, #4]
 801ccbc:	60c6      	str	r6, [r0, #12]
 801ccbe:	f8c0 a000 	str.w	sl, [r0]
 801ccc2:	6082      	str	r2, [r0, #8]
 801ccc4:	691a      	ldr	r2, [r3, #16]
 801ccc6:	9b08      	ldr	r3, [sp, #32]
 801ccc8:	f042 0205 	orr.w	r2, r2, #5
 801cccc:	6243      	str	r3, [r0, #36]	; 0x24
 801ccce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ccd0:	6145      	str	r5, [r0, #20]
 801ccd2:	62c3      	str	r3, [r0, #44]	; 0x2c
 801ccd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ccd6:	61c4      	str	r4, [r0, #28]
 801ccd8:	6343      	str	r3, [r0, #52]	; 0x34
 801ccda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ccdc:	6442      	str	r2, [r0, #68]	; 0x44
 801ccde:	63c3      	str	r3, [r0, #60]	; 0x3c
 801cce0:	4b07      	ldr	r3, [pc, #28]	; (801cd00 <nema_raster_quad_fx+0x80>)
 801cce2:	f8c0 9018 	str.w	r9, [r0, #24]
 801cce6:	f8c0 8020 	str.w	r8, [r0, #32]
 801ccea:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
 801ccee:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
 801ccf2:	6381      	str	r1, [r0, #56]	; 0x38
 801ccf4:	6403      	str	r3, [r0, #64]	; 0x40
 801ccf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ccfa:	bf00      	nop
 801ccfc:	20197e24 	.word	0x20197e24
 801cd00:	ff000100 	.word	0xff000100

0801cd04 <nema_set_interrupt_ctrl>:
 801cd04:	4601      	mov	r1, r0
 801cd06:	20f8      	movs	r0, #248	; 0xf8
 801cd08:	f000 bcac 	b.w	801d664 <nema_cl_add_cmd>

0801cd0c <nema_vg_init>:
 801cd0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cd0e:	4606      	mov	r6, r0
 801cd10:	460f      	mov	r7, r1
 801cd12:	b08f      	sub	sp, #60	; 0x3c
 801cd14:	ac02      	add	r4, sp, #8
 801cd16:	460a      	mov	r2, r1
 801cd18:	2300      	movs	r3, #0
 801cd1a:	4601      	mov	r1, r0
 801cd1c:	4620      	mov	r0, r4
 801cd1e:	f000 f889 	bl	801ce34 <stencil_buffer_create>
 801cd22:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801cd26:	ad0a      	add	r5, sp, #40	; 0x28
 801cd28:	ac06      	add	r4, sp, #24
 801cd2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801cd2e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801cd32:	f000 f827 	bl	801cd84 <context_reset>
 801cd36:	ab0e      	add	r3, sp, #56	; 0x38
 801cd38:	e913 0003 	ldmdb	r3, {r0, r1}
 801cd3c:	e895 000c 	ldmia.w	r5, {r2, r3}
 801cd40:	e88d 0003 	stmia.w	sp, {r0, r1}
 801cd44:	4639      	mov	r1, r7
 801cd46:	4630      	mov	r0, r6
 801cd48:	f000 f888 	bl	801ce5c <stencil_buffer_set>
 801cd4c:	f000 f8c2 	bl	801ced4 <lut_buffer_create>
 801cd50:	f000 f94e 	bl	801cff0 <tsvg_init>
 801cd54:	4639      	mov	r1, r7
 801cd56:	4630      	mov	r0, r6
 801cd58:	f000 f940 	bl	801cfdc <set_tsvg_text_max_size>
 801cd5c:	f000 f866 	bl	801ce2c <nema_vg_get_context>
 801cd60:	4c06      	ldr	r4, [pc, #24]	; (801cd7c <nema_vg_init+0x70>)
 801cd62:	6020      	str	r0, [r4, #0]
 801cd64:	f000 f8b0 	bl	801cec8 <nema_vg_get_stencil>
 801cd68:	6822      	ldr	r2, [r4, #0]
 801cd6a:	4905      	ldr	r1, [pc, #20]	; (801cd80 <nema_vg_init+0x74>)
 801cd6c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801cd6e:	6008      	str	r0, [r1, #0]
 801cd70:	f043 0320 	orr.w	r3, r3, #32
 801cd74:	6313      	str	r3, [r2, #48]	; 0x30
 801cd76:	b00f      	add	sp, #60	; 0x3c
 801cd78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cd7a:	bf00      	nop
 801cd7c:	20197a8c 	.word	0x20197a8c
 801cd80:	20197a90 	.word	0x20197a90

0801cd84 <context_reset>:
 801cd84:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
 801cd88:	4c26      	ldr	r4, [pc, #152]	; (801ce24 <context_reset+0xa0>)
 801cd8a:	6820      	ldr	r0, [r4, #0]
 801cd8c:	b110      	cbz	r0, 801cd94 <context_reset+0x10>
 801cd8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801cd90:	069b      	lsls	r3, r3, #26
 801cd92:	d440      	bmi.n	801ce16 <context_reset+0x92>
 801cd94:	2300      	movs	r3, #0
 801cd96:	6962      	ldr	r2, [r4, #20]
 801cd98:	e9c4 3300 	strd	r3, r3, [r4]
 801cd9c:	60a3      	str	r3, [r4, #8]
 801cd9e:	b112      	cbz	r2, 801cda6 <context_reset+0x22>
 801cda0:	4821      	ldr	r0, [pc, #132]	; (801ce28 <context_reset+0xa4>)
 801cda2:	f7e6 fa36 	bl	8003212 <nema_buffer_destroy>
 801cda6:	2300      	movs	r3, #0
 801cda8:	f04f 0800 	mov.w	r8, #0
 801cdac:	f240 5901 	movw	r9, #1281	; 0x501
 801cdb0:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 801cdb4:	f04f 67f0 	mov.w	r7, #125829120	; 0x7800000
 801cdb8:	2000      	movs	r0, #0
 801cdba:	2100      	movs	r1, #0
 801cdbc:	6423      	str	r3, [r4, #64]	; 0x40
 801cdbe:	6463      	str	r3, [r4, #68]	; 0x44
 801cdc0:	64e3      	str	r3, [r4, #76]	; 0x4c
 801cdc2:	6723      	str	r3, [r4, #112]	; 0x70
 801cdc4:	6523      	str	r3, [r4, #80]	; 0x50
 801cdc6:	6763      	str	r3, [r4, #116]	; 0x74
 801cdc8:	6563      	str	r3, [r4, #84]	; 0x54
 801cdca:	67a3      	str	r3, [r4, #120]	; 0x78
 801cdcc:	65a3      	str	r3, [r4, #88]	; 0x58
 801cdce:	67e3      	str	r3, [r4, #124]	; 0x7c
 801cdd0:	65e3      	str	r3, [r4, #92]	; 0x5c
 801cdd2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 801cdd6:	6623      	str	r3, [r4, #96]	; 0x60
 801cdd8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 801cddc:	6663      	str	r3, [r4, #100]	; 0x64
 801cdde:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801cde2:	66a3      	str	r3, [r4, #104]	; 0x68
 801cde4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 801cde8:	66e3      	str	r3, [r4, #108]	; 0x6c
 801cdea:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 801cdee:	2202      	movs	r2, #2
 801cdf0:	2300      	movs	r3, #0
 801cdf2:	e9c4 8908 	strd	r8, r9, [r4, #32]
 801cdf6:	e9c4 670a 	strd	r6, r7, [r4, #40]	; 0x28
 801cdfa:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
 801cdfe:	e9c4 3303 	strd	r3, r3, [r4, #12]
 801ce02:	e9c4 3305 	strd	r3, r3, [r4, #20]
 801ce06:	77a3      	strb	r3, [r4, #30]
 801ce08:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 801ce0c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801ce10:	83a2      	strh	r2, [r4, #28]
 801ce12:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 801ce16:	6883      	ldr	r3, [r0, #8]
 801ce18:	2b00      	cmp	r3, #0
 801ce1a:	d0bb      	beq.n	801cd94 <context_reset+0x10>
 801ce1c:	f7e6 f9f9 	bl	8003212 <nema_buffer_destroy>
 801ce20:	e7b8      	b.n	801cd94 <context_reset+0x10>
 801ce22:	bf00      	nop
 801ce24:	20197a98 	.word	0x20197a98
 801ce28:	20197aa4 	.word	0x20197aa4

0801ce2c <nema_vg_get_context>:
 801ce2c:	4800      	ldr	r0, [pc, #0]	; (801ce30 <nema_vg_get_context+0x4>)
 801ce2e:	4770      	bx	lr
 801ce30:	20197a98 	.word	0x20197a98

0801ce34 <stencil_buffer_create>:
 801ce34:	b538      	push	{r3, r4, r5, lr}
 801ce36:	4605      	mov	r5, r0
 801ce38:	1cc8      	adds	r0, r1, #3
 801ce3a:	bf48      	it	mi
 801ce3c:	1d88      	addmi	r0, r1, #6
 801ce3e:	1cd4      	adds	r4, r2, #3
 801ce40:	bf48      	it	mi
 801ce42:	1d94      	addmi	r4, r2, #6
 801ce44:	1080      	asrs	r0, r0, #2
 801ce46:	0080      	lsls	r0, r0, #2
 801ce48:	f024 0203 	bic.w	r2, r4, #3
 801ce4c:	fb02 f200 	mul.w	r2, r2, r0
 801ce50:	4619      	mov	r1, r3
 801ce52:	4628      	mov	r0, r5
 801ce54:	f7e6 f9c2 	bl	80031dc <nema_buffer_create_pool>
 801ce58:	4628      	mov	r0, r5
 801ce5a:	bd38      	pop	{r3, r4, r5, pc}

0801ce5c <stencil_buffer_set>:
 801ce5c:	b082      	sub	sp, #8
 801ce5e:	b470      	push	{r4, r5, r6}
 801ce60:	4606      	mov	r6, r0
 801ce62:	460d      	mov	r5, r1
 801ce64:	a803      	add	r0, sp, #12
 801ce66:	e880 000c 	stmia.w	r0, {r2, r3}
 801ce6a:	4c15      	ldr	r4, [pc, #84]	; (801cec0 <stencil_buffer_set+0x64>)
 801ce6c:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 801ce6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801ce72:	1cf3      	adds	r3, r6, #3
 801ce74:	bf48      	it	mi
 801ce76:	1db3      	addmi	r3, r6, #6
 801ce78:	1cea      	adds	r2, r5, #3
 801ce7a:	bf48      	it	mi
 801ce7c:	1daa      	addmi	r2, r5, #6
 801ce7e:	f022 0203 	bic.w	r2, r2, #3
 801ce82:	ee07 2a90 	vmov	s15, r2
 801ce86:	f023 0303 	bic.w	r3, r3, #3
 801ce8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801ce8e:	ee07 3a90 	vmov	s15, r3
 801ce92:	2100      	movs	r1, #0
 801ce94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ce98:	61a1      	str	r1, [r4, #24]
 801ce9a:	61e1      	str	r1, [r4, #28]
 801ce9c:	6261      	str	r1, [r4, #36]	; 0x24
 801ce9e:	6321      	str	r1, [r4, #48]	; 0x30
 801cea0:	4908      	ldr	r1, [pc, #32]	; (801cec4 <stencil_buffer_set+0x68>)
 801cea2:	ed84 7a0b 	vstr	s14, [r4, #44]	; 0x2c
 801cea6:	600c      	str	r4, [r1, #0]
 801cea8:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801ceac:	edc4 7a08 	vstr	s15, [r4, #32]
 801ceb0:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 801ceb4:	e9c4 3204 	strd	r3, r2, [r4, #16]
 801ceb8:	bc70      	pop	{r4, r5, r6}
 801ceba:	b002      	add	sp, #8
 801cebc:	4770      	bx	lr
 801cebe:	bf00      	nop
 801cec0:	20197b2c 	.word	0x20197b2c
 801cec4:	20197a98 	.word	0x20197a98

0801cec8 <nema_vg_get_stencil>:
 801cec8:	4b01      	ldr	r3, [pc, #4]	; (801ced0 <nema_vg_get_stencil+0x8>)
 801ceca:	6818      	ldr	r0, [r3, #0]
 801cecc:	4770      	bx	lr
 801cece:	bf00      	nop
 801ced0:	20197a98 	.word	0x20197a98

0801ced4 <lut_buffer_create>:
 801ced4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ced6:	4d1a      	ldr	r5, [pc, #104]	; (801cf40 <lut_buffer_create+0x6c>)
 801ced8:	b085      	sub	sp, #20
 801ceda:	69ac      	ldr	r4, [r5, #24]
 801cedc:	b10c      	cbz	r4, 801cee2 <lut_buffer_create+0xe>
 801cede:	b005      	add	sp, #20
 801cee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cee2:	466e      	mov	r6, sp
 801cee4:	f44f 7280 	mov.w	r2, #256	; 0x100
 801cee8:	4630      	mov	r0, r6
 801ceea:	4621      	mov	r1, r4
 801ceec:	f7e6 f976 	bl	80031dc <nema_buffer_create_pool>
 801cef0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801cef4:	f105 060c 	add.w	r6, r5, #12
 801cef8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 801cefc:	4627      	mov	r7, r4
 801cefe:	4623      	mov	r3, r4
 801cf00:	696d      	ldr	r5, [r5, #20]
 801cf02:	26ff      	movs	r6, #255	; 0xff
 801cf04:	e008      	b.n	801cf18 <lut_buffer_create+0x44>
 801cf06:	2880      	cmp	r0, #128	; 0x80
 801cf08:	f1c4 0100 	rsb	r1, r4, #0
 801cf0c:	d016      	beq.n	801cf3c <lut_buffer_create+0x68>
 801cf0e:	bfcc      	ite	gt
 801cf10:	b2e1      	uxtbgt	r1, r4
 801cf12:	b2c9      	uxtble	r1, r1
 801cf14:	54a9      	strb	r1, [r5, r2]
 801cf16:	3410      	adds	r4, #16
 801cf18:	ea44 1213 	orr.w	r2, r4, r3, lsr #4
 801cf1c:	3301      	adds	r3, #1
 801cf1e:	f1a3 0172 	sub.w	r1, r3, #114	; 0x72
 801cf22:	291e      	cmp	r1, #30
 801cf24:	f103 30ff 	add.w	r0, r3, #4294967295
 801cf28:	b2d2      	uxtb	r2, r2
 801cf2a:	d9ec      	bls.n	801cf06 <lut_buffer_create+0x32>
 801cf2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cf30:	54ae      	strb	r6, [r5, r2]
 801cf32:	d1f0      	bne.n	801cf16 <lut_buffer_create+0x42>
 801cf34:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
 801cf38:	b005      	add	sp, #20
 801cf3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cf3c:	54af      	strb	r7, [r5, r2]
 801cf3e:	e7ea      	b.n	801cf16 <lut_buffer_create+0x42>
 801cf40:	20197a98 	.word	0x20197a98

0801cf44 <nema_vg_set_error>:
 801cf44:	4b01      	ldr	r3, [pc, #4]	; (801cf4c <nema_vg_set_error+0x8>)
 801cf46:	6218      	str	r0, [r3, #32]
 801cf48:	4770      	bx	lr
 801cf4a:	bf00      	nop
 801cf4c:	20197a98 	.word	0x20197a98

0801cf50 <nema_vg_paint_create>:
 801cf50:	b538      	push	{r3, r4, r5, lr}
 801cf52:	20e0      	movs	r0, #224	; 0xe0
 801cf54:	f7e6 f903 	bl	800315e <nema_host_malloc>
 801cf58:	4604      	mov	r4, r0
 801cf5a:	b1e8      	cbz	r0, 801cf98 <nema_vg_paint_create+0x48>
 801cf5c:	2500      	movs	r5, #0
 801cf5e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801cf62:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 801cf66:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
 801cf6a:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
 801cf6e:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
 801cf72:	f880 50dd 	strb.w	r5, [r0, #221]	; 0xdd
 801cf76:	f880 50d0 	strb.w	r5, [r0, #208]	; 0xd0
 801cf7a:	e9c0 250c 	strd	r2, r5, [r0, #48]	; 0x30
 801cf7e:	e9c0 5500 	strd	r5, r5, [r0]
 801cf82:	3038      	adds	r0, #56	; 0x38
 801cf84:	f7ff fa30 	bl	801c3e8 <nema_mat3x3_load_identity>
 801cf88:	f104 0008 	add.w	r0, r4, #8
 801cf8c:	f7ff fa2c 	bl	801c3e8 <nema_mat3x3_load_identity>
 801cf90:	f884 50dc 	strb.w	r5, [r4, #220]	; 0xdc
 801cf94:	4620      	mov	r0, r4
 801cf96:	bd38      	pop	{r3, r4, r5, pc}
 801cf98:	2001      	movs	r0, #1
 801cf9a:	f7ff ffd3 	bl	801cf44 <nema_vg_set_error>
 801cf9e:	4620      	mov	r0, r4
 801cfa0:	bd38      	pop	{r3, r4, r5, pc}
 801cfa2:	bf00      	nop

0801cfa4 <nema_vg_grad_create>:
 801cfa4:	b530      	push	{r4, r5, lr}
 801cfa6:	2010      	movs	r0, #16
 801cfa8:	b085      	sub	sp, #20
 801cfaa:	f7e6 f8d8 	bl	800315e <nema_host_malloc>
 801cfae:	466d      	mov	r5, sp
 801cfb0:	4604      	mov	r4, r0
 801cfb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 801cfb6:	4628      	mov	r0, r5
 801cfb8:	2100      	movs	r1, #0
 801cfba:	f7e6 f90f 	bl	80031dc <nema_buffer_create_pool>
 801cfbe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801cfc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801cfc6:	4620      	mov	r0, r4
 801cfc8:	b005      	add	sp, #20
 801cfca:	bd30      	pop	{r4, r5, pc}

0801cfcc <nema_vg_path_create>:
 801cfcc:	b508      	push	{r3, lr}
 801cfce:	2088      	movs	r0, #136	; 0x88
 801cfd0:	f7e6 f8c5 	bl	800315e <nema_host_malloc>
 801cfd4:	2200      	movs	r2, #0
 801cfd6:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 801cfda:	bd08      	pop	{r3, pc}

0801cfdc <set_tsvg_text_max_size>:
 801cfdc:	4a02      	ldr	r2, [pc, #8]	; (801cfe8 <set_tsvg_text_max_size+0xc>)
 801cfde:	4b03      	ldr	r3, [pc, #12]	; (801cfec <set_tsvg_text_max_size+0x10>)
 801cfe0:	6010      	str	r0, [r2, #0]
 801cfe2:	6019      	str	r1, [r3, #0]
 801cfe4:	4770      	bx	lr
 801cfe6:	bf00      	nop
 801cfe8:	2000005c 	.word	0x2000005c
 801cfec:	20000060 	.word	0x20000060

0801cff0 <tsvg_init>:
 801cff0:	b508      	push	{r3, lr}
 801cff2:	f7ff ffad 	bl	801cf50 <nema_vg_paint_create>
 801cff6:	4b05      	ldr	r3, [pc, #20]	; (801d00c <tsvg_init+0x1c>)
 801cff8:	6018      	str	r0, [r3, #0]
 801cffa:	f7ff ffe7 	bl	801cfcc <nema_vg_path_create>
 801cffe:	4b04      	ldr	r3, [pc, #16]	; (801d010 <tsvg_init+0x20>)
 801d000:	6018      	str	r0, [r3, #0]
 801d002:	f7ff ffcf 	bl	801cfa4 <nema_vg_grad_create>
 801d006:	4b03      	ldr	r3, [pc, #12]	; (801d014 <tsvg_init+0x24>)
 801d008:	6018      	str	r0, [r3, #0]
 801d00a:	bd08      	pop	{r3, pc}
 801d00c:	20197b68 	.word	0x20197b68
 801d010:	20197b6c 	.word	0x20197b6c
 801d014:	20197b64 	.word	0x20197b64

0801d018 <tsi_malloc_init_pool>:
 801d018:	b4f0      	push	{r4, r5, r6, r7}
 801d01a:	2807      	cmp	r0, #7
 801d01c:	9e04      	ldr	r6, [sp, #16]
 801d01e:	d81c      	bhi.n	801d05a <tsi_malloc_init_pool+0x42>
 801d020:	4f0f      	ldr	r7, [pc, #60]	; (801d060 <tsi_malloc_init_pool+0x48>)
 801d022:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d026:	0084      	lsls	r4, r0, #2
 801d028:	193d      	adds	r5, r7, r4
 801d02a:	513a      	str	r2, [r7, r4]
 801d02c:	185a      	adds	r2, r3, r1
 801d02e:	60e9      	str	r1, [r5, #12]
 801d030:	6069      	str	r1, [r5, #4]
 801d032:	612b      	str	r3, [r5, #16]
 801d034:	60aa      	str	r2, [r5, #8]
 801d036:	b16e      	cbz	r6, 801d054 <tsi_malloc_init_pool+0x3c>
 801d038:	2200      	movs	r2, #0
 801d03a:	2010      	movs	r0, #16
 801d03c:	4d09      	ldr	r5, [pc, #36]	; (801d064 <tsi_malloc_init_pool+0x4c>)
 801d03e:	180c      	adds	r4, r1, r0
 801d040:	e9c1 5001 	strd	r5, r0, [r1, #4]
 801d044:	4610      	mov	r0, r2
 801d046:	3b20      	subs	r3, #32
 801d048:	610b      	str	r3, [r1, #16]
 801d04a:	600a      	str	r2, [r1, #0]
 801d04c:	e9c4 5201 	strd	r5, r2, [r4, #4]
 801d050:	bcf0      	pop	{r4, r5, r6, r7}
 801d052:	4770      	bx	lr
 801d054:	4630      	mov	r0, r6
 801d056:	bcf0      	pop	{r4, r5, r6, r7}
 801d058:	4770      	bx	lr
 801d05a:	f04f 30ff 	mov.w	r0, #4294967295
 801d05e:	e7f7      	b.n	801d050 <tsi_malloc_init_pool+0x38>
 801d060:	20197b70 	.word	0x20197b70
 801d064:	000f1fa1 	.word	0x000f1fa1

0801d068 <tsi_malloc_pool>:
 801d068:	2807      	cmp	r0, #7
 801d06a:	d832      	bhi.n	801d0d2 <tsi_malloc_pool+0x6a>
 801d06c:	4b1b      	ldr	r3, [pc, #108]	; (801d0dc <tsi_malloc_pool+0x74>)
 801d06e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d072:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801d076:	68c2      	ldr	r2, [r0, #12]
 801d078:	b35a      	cbz	r2, 801d0d2 <tsi_malloc_pool+0x6a>
 801d07a:	2910      	cmp	r1, #16
 801d07c:	bfb8      	it	lt
 801d07e:	2110      	movlt	r1, #16
 801d080:	b470      	push	{r4, r5, r6}
 801d082:	310f      	adds	r1, #15
 801d084:	6814      	ldr	r4, [r2, #0]
 801d086:	f021 010f 	bic.w	r1, r1, #15
 801d08a:	42a1      	cmp	r1, r4
 801d08c:	dd23      	ble.n	801d0d6 <tsi_malloc_pool+0x6e>
 801d08e:	6890      	ldr	r0, [r2, #8]
 801d090:	b1d0      	cbz	r0, 801d0c8 <tsi_malloc_pool+0x60>
 801d092:	4615      	mov	r5, r2
 801d094:	e002      	b.n	801d09c <tsi_malloc_pool+0x34>
 801d096:	6898      	ldr	r0, [r3, #8]
 801d098:	461d      	mov	r5, r3
 801d09a:	b1a8      	cbz	r0, 801d0c8 <tsi_malloc_pool+0x60>
 801d09c:	5814      	ldr	r4, [r2, r0]
 801d09e:	1813      	adds	r3, r2, r0
 801d0a0:	428c      	cmp	r4, r1
 801d0a2:	dbf8      	blt.n	801d096 <tsi_malloc_pool+0x2e>
 801d0a4:	f101 0010 	add.w	r0, r1, #16
 801d0a8:	42a0      	cmp	r0, r4
 801d0aa:	da0f      	bge.n	801d0cc <tsi_malloc_pool+0x64>
 801d0ac:	4e0c      	ldr	r6, [pc, #48]	; (801d0e0 <tsi_malloc_pool+0x78>)
 801d0ae:	1a24      	subs	r4, r4, r0
 801d0b0:	50c4      	str	r4, [r0, r3]
 801d0b2:	18c4      	adds	r4, r0, r3
 801d0b4:	6066      	str	r6, [r4, #4]
 801d0b6:	689e      	ldr	r6, [r3, #8]
 801d0b8:	1aa2      	subs	r2, r4, r2
 801d0ba:	60a6      	str	r6, [r4, #8]
 801d0bc:	60aa      	str	r2, [r5, #8]
 801d0be:	6019      	str	r1, [r3, #0]
 801d0c0:	4a08      	ldr	r2, [pc, #32]	; (801d0e4 <tsi_malloc_pool+0x7c>)
 801d0c2:	f103 0010 	add.w	r0, r3, #16
 801d0c6:	605a      	str	r2, [r3, #4]
 801d0c8:	bc70      	pop	{r4, r5, r6}
 801d0ca:	4770      	bx	lr
 801d0cc:	689a      	ldr	r2, [r3, #8]
 801d0ce:	60aa      	str	r2, [r5, #8]
 801d0d0:	e7f6      	b.n	801d0c0 <tsi_malloc_pool+0x58>
 801d0d2:	2000      	movs	r0, #0
 801d0d4:	4770      	bx	lr
 801d0d6:	4615      	mov	r5, r2
 801d0d8:	4613      	mov	r3, r2
 801d0da:	e7e3      	b.n	801d0a4 <tsi_malloc_pool+0x3c>
 801d0dc:	20197b70 	.word	0x20197b70
 801d0e0:	000f1fa1 	.word	0x000f1fa1
 801d0e4:	000f1fa2 	.word	0x000f1fa2

0801d0e8 <tsi_free>:
 801d0e8:	2800      	cmp	r0, #0
 801d0ea:	d045      	beq.n	801d178 <tsi_free+0x90>
 801d0ec:	4a45      	ldr	r2, [pc, #276]	; (801d204 <tsi_free+0x11c>)
 801d0ee:	68d3      	ldr	r3, [r2, #12]
 801d0f0:	b12b      	cbz	r3, 801d0fe <tsi_free+0x16>
 801d0f2:	6851      	ldr	r1, [r2, #4]
 801d0f4:	4281      	cmp	r1, r0
 801d0f6:	d802      	bhi.n	801d0fe <tsi_free+0x16>
 801d0f8:	6891      	ldr	r1, [r2, #8]
 801d0fa:	4288      	cmp	r0, r1
 801d0fc:	d33d      	bcc.n	801d17a <tsi_free+0x92>
 801d0fe:	6a13      	ldr	r3, [r2, #32]
 801d100:	b12b      	cbz	r3, 801d10e <tsi_free+0x26>
 801d102:	6991      	ldr	r1, [r2, #24]
 801d104:	4288      	cmp	r0, r1
 801d106:	d302      	bcc.n	801d10e <tsi_free+0x26>
 801d108:	69d1      	ldr	r1, [r2, #28]
 801d10a:	4288      	cmp	r0, r1
 801d10c:	d335      	bcc.n	801d17a <tsi_free+0x92>
 801d10e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801d110:	b12b      	cbz	r3, 801d11e <tsi_free+0x36>
 801d112:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 801d114:	4281      	cmp	r1, r0
 801d116:	d802      	bhi.n	801d11e <tsi_free+0x36>
 801d118:	6b11      	ldr	r1, [r2, #48]	; 0x30
 801d11a:	4281      	cmp	r1, r0
 801d11c:	d82d      	bhi.n	801d17a <tsi_free+0x92>
 801d11e:	6c93      	ldr	r3, [r2, #72]	; 0x48
 801d120:	b12b      	cbz	r3, 801d12e <tsi_free+0x46>
 801d122:	6c11      	ldr	r1, [r2, #64]	; 0x40
 801d124:	4288      	cmp	r0, r1
 801d126:	d302      	bcc.n	801d12e <tsi_free+0x46>
 801d128:	6c51      	ldr	r1, [r2, #68]	; 0x44
 801d12a:	4288      	cmp	r0, r1
 801d12c:	d325      	bcc.n	801d17a <tsi_free+0x92>
 801d12e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 801d130:	b12b      	cbz	r3, 801d13e <tsi_free+0x56>
 801d132:	6d51      	ldr	r1, [r2, #84]	; 0x54
 801d134:	4288      	cmp	r0, r1
 801d136:	d302      	bcc.n	801d13e <tsi_free+0x56>
 801d138:	6d91      	ldr	r1, [r2, #88]	; 0x58
 801d13a:	4288      	cmp	r0, r1
 801d13c:	d31d      	bcc.n	801d17a <tsi_free+0x92>
 801d13e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 801d140:	b12b      	cbz	r3, 801d14e <tsi_free+0x66>
 801d142:	6e91      	ldr	r1, [r2, #104]	; 0x68
 801d144:	4288      	cmp	r0, r1
 801d146:	d302      	bcc.n	801d14e <tsi_free+0x66>
 801d148:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
 801d14a:	4288      	cmp	r0, r1
 801d14c:	d315      	bcc.n	801d17a <tsi_free+0x92>
 801d14e:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 801d152:	b133      	cbz	r3, 801d162 <tsi_free+0x7a>
 801d154:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
 801d156:	4288      	cmp	r0, r1
 801d158:	d303      	bcc.n	801d162 <tsi_free+0x7a>
 801d15a:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
 801d15e:	4288      	cmp	r0, r1
 801d160:	d30b      	bcc.n	801d17a <tsi_free+0x92>
 801d162:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 801d166:	b13b      	cbz	r3, 801d178 <tsi_free+0x90>
 801d168:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 801d16c:	4281      	cmp	r1, r0
 801d16e:	d803      	bhi.n	801d178 <tsi_free+0x90>
 801d170:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 801d174:	4282      	cmp	r2, r0
 801d176:	d800      	bhi.n	801d17a <tsi_free+0x92>
 801d178:	4770      	bx	lr
 801d17a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d17c:	f1a0 0410 	sub.w	r4, r0, #16
 801d180:	6861      	ldr	r1, [r4, #4]
 801d182:	4a21      	ldr	r2, [pc, #132]	; (801d208 <tsi_free+0x120>)
 801d184:	4291      	cmp	r1, r2
 801d186:	d000      	beq.n	801d18a <tsi_free+0xa2>
 801d188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d18a:	4a20      	ldr	r2, [pc, #128]	; (801d20c <tsi_free+0x124>)
 801d18c:	6062      	str	r2, [r4, #4]
 801d18e:	6899      	ldr	r1, [r3, #8]
 801d190:	18ca      	adds	r2, r1, r3
 801d192:	4294      	cmp	r4, r2
 801d194:	d929      	bls.n	801d1ea <tsi_free+0x102>
 801d196:	b909      	cbnz	r1, 801d19c <tsi_free+0xb4>
 801d198:	e027      	b.n	801d1ea <tsi_free+0x102>
 801d19a:	b129      	cbz	r1, 801d1a8 <tsi_free+0xc0>
 801d19c:	6891      	ldr	r1, [r2, #8]
 801d19e:	4615      	mov	r5, r2
 801d1a0:	4616      	mov	r6, r2
 801d1a2:	185a      	adds	r2, r3, r1
 801d1a4:	4294      	cmp	r4, r2
 801d1a6:	d8f8      	bhi.n	801d19a <tsi_free+0xb2>
 801d1a8:	f850 7c10 	ldr.w	r7, [r0, #-16]
 801d1ac:	42ab      	cmp	r3, r5
 801d1ae:	eba4 0e03 	sub.w	lr, r4, r3
 801d1b2:	4407      	add	r7, r0
 801d1b4:	d01e      	beq.n	801d1f4 <tsi_free+0x10c>
 801d1b6:	682b      	ldr	r3, [r5, #0]
 801d1b8:	f105 0c10 	add.w	ip, r5, #16
 801d1bc:	4463      	add	r3, ip
 801d1be:	429c      	cmp	r4, r3
 801d1c0:	f8c5 e008 	str.w	lr, [r5, #8]
 801d1c4:	60a1      	str	r1, [r4, #8]
 801d1c6:	d11a      	bne.n	801d1fe <tsi_free+0x116>
 801d1c8:	f850 0c10 	ldr.w	r0, [r0, #-16]
 801d1cc:	682b      	ldr	r3, [r5, #0]
 801d1ce:	3010      	adds	r0, #16
 801d1d0:	4403      	add	r3, r0
 801d1d2:	60a9      	str	r1, [r5, #8]
 801d1d4:	602b      	str	r3, [r5, #0]
 801d1d6:	4297      	cmp	r7, r2
 801d1d8:	d1d6      	bne.n	801d188 <tsi_free+0xa0>
 801d1da:	683a      	ldr	r2, [r7, #0]
 801d1dc:	6833      	ldr	r3, [r6, #0]
 801d1de:	3210      	adds	r2, #16
 801d1e0:	4413      	add	r3, r2
 801d1e2:	6033      	str	r3, [r6, #0]
 801d1e4:	68bb      	ldr	r3, [r7, #8]
 801d1e6:	60b3      	str	r3, [r6, #8]
 801d1e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d1ea:	f850 7c10 	ldr.w	r7, [r0, #-16]
 801d1ee:	eba4 0e03 	sub.w	lr, r4, r3
 801d1f2:	4407      	add	r7, r0
 801d1f4:	f8c3 e008 	str.w	lr, [r3, #8]
 801d1f8:	4626      	mov	r6, r4
 801d1fa:	60a1      	str	r1, [r4, #8]
 801d1fc:	e7eb      	b.n	801d1d6 <tsi_free+0xee>
 801d1fe:	4626      	mov	r6, r4
 801d200:	e7e9      	b.n	801d1d6 <tsi_free+0xee>
 801d202:	bf00      	nop
 801d204:	20197b70 	.word	0x20197b70
 801d208:	000f1fa2 	.word	0x000f1fa2
 801d20c:	000f1fa1 	.word	0x000f1fa1

0801d210 <nema_cl_create_sized>:
 801d210:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d212:	b093      	sub	sp, #76	; 0x4c
 801d214:	466d      	mov	r5, sp
 801d216:	4606      	mov	r6, r0
 801d218:	460a      	mov	r2, r1
 801d21a:	4628      	mov	r0, r5
 801d21c:	2100      	movs	r1, #0
 801d21e:	f7e5 ffdd 	bl	80031dc <nema_buffer_create_pool>
 801d222:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801d226:	2500      	movs	r5, #0
 801d228:	ac04      	add	r4, sp, #16
 801d22a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801d22e:	4620      	mov	r0, r4
 801d230:	f7e5 ffe3 	bl	80031fa <nema_buffer_map>
 801d234:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801d238:	ac08      	add	r4, sp, #32
 801d23a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801d23e:	2110      	movs	r1, #16
 801d240:	f04f 32ff 	mov.w	r2, #4294967295
 801d244:	9b04      	ldr	r3, [sp, #16]
 801d246:	950d      	str	r5, [sp, #52]	; 0x34
 801d248:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
 801d24c:	42ab      	cmp	r3, r5
 801d24e:	4635      	mov	r5, r6
 801d250:	bfb8      	it	lt
 801d252:	3307      	addlt	r3, #7
 801d254:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 801d258:	10db      	asrs	r3, r3, #3
 801d25a:	005b      	lsls	r3, r3, #1
 801d25c:	930c      	str	r3, [sp, #48]	; 0x30
 801d25e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d260:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d262:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d264:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d266:	e894 0003 	ldmia.w	r4, {r0, r1}
 801d26a:	2700      	movs	r7, #0
 801d26c:	e885 0003 	stmia.w	r5, {r0, r1}
 801d270:	4630      	mov	r0, r6
 801d272:	61b7      	str	r7, [r6, #24]
 801d274:	b013      	add	sp, #76	; 0x4c
 801d276:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d278 <nema_extend_bound_cl>:
 801d278:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d27a:	4d6e      	ldr	r5, [pc, #440]	; (801d434 <nema_extend_bound_cl+0x1bc>)
 801d27c:	b09f      	sub	sp, #124	; 0x7c
 801d27e:	682b      	ldr	r3, [r5, #0]
 801d280:	2b00      	cmp	r3, #0
 801d282:	f000 80c1 	beq.w	801d408 <nema_extend_bound_cl+0x190>
 801d286:	4606      	mov	r6, r0
 801d288:	6998      	ldr	r0, [r3, #24]
 801d28a:	0784      	lsls	r4, r0, #30
 801d28c:	f140 80b6 	bpl.w	801d3fc <nema_extend_bound_cl+0x184>
 801d290:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 801d294:	0680      	lsls	r0, r0, #26
 801d296:	d44e      	bmi.n	801d336 <nema_extend_bound_cl+0xbe>
 801d298:	1a89      	subs	r1, r1, r2
 801d29a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 801d29e:	1049      	asrs	r1, r1, #1
 801d2a0:	2902      	cmp	r1, #2
 801d2a2:	dd13      	ble.n	801d2cc <nema_extend_bound_cl+0x54>
 801d2a4:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 801d2a8:	2700      	movs	r7, #0
 801d2aa:	1e94      	subs	r4, r2, #2
 801d2ac:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801d2b0:	1c91      	adds	r1, r2, #2
 801d2b2:	0092      	lsls	r2, r2, #2
 801d2b4:	6898      	ldr	r0, [r3, #8]
 801d2b6:	f840 c002 	str.w	ip, [r0, r2]
 801d2ba:	6898      	ldr	r0, [r3, #8]
 801d2bc:	4410      	add	r0, r2
 801d2be:	6047      	str	r7, [r0, #4]
 801d2c0:	6159      	str	r1, [r3, #20]
 801d2c2:	3102      	adds	r1, #2
 801d2c4:	428c      	cmp	r4, r1
 801d2c6:	f102 0208 	add.w	r2, r2, #8
 801d2ca:	d1f3      	bne.n	801d2b4 <nema_extend_bound_cl+0x3c>
 801d2cc:	6a1c      	ldr	r4, [r3, #32]
 801d2ce:	2c00      	cmp	r4, #0
 801d2d0:	d050      	beq.n	801d374 <nema_extend_bound_cl+0xfc>
 801d2d2:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
 801d2d6:	26f0      	movs	r6, #240	; 0xf0
 801d2d8:	27f4      	movs	r7, #244	; 0xf4
 801d2da:	6898      	ldr	r0, [r3, #8]
 801d2dc:	f041 0104 	orr.w	r1, r1, #4
 801d2e0:	6199      	str	r1, [r3, #24]
 801d2e2:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
 801d2e6:	6899      	ldr	r1, [r3, #8]
 801d2e8:	68e6      	ldr	r6, [r4, #12]
 801d2ea:	0090      	lsls	r0, r2, #2
 801d2ec:	4401      	add	r1, r0
 801d2ee:	604e      	str	r6, [r1, #4]
 801d2f0:	6899      	ldr	r1, [r3, #8]
 801d2f2:	1c96      	adds	r6, r2, #2
 801d2f4:	4401      	add	r1, r0
 801d2f6:	615e      	str	r6, [r3, #20]
 801d2f8:	608f      	str	r7, [r1, #8]
 801d2fa:	6899      	ldr	r1, [r3, #8]
 801d2fc:	6926      	ldr	r6, [r4, #16]
 801d2fe:	4401      	add	r1, r0
 801d300:	1d17      	adds	r7, r2, #4
 801d302:	60ce      	str	r6, [r1, #12]
 801d304:	621c      	str	r4, [r3, #32]
 801d306:	615f      	str	r7, [r3, #20]
 801d308:	68e1      	ldr	r1, [r4, #12]
 801d30a:	f011 0107 	ands.w	r1, r1, #7
 801d30e:	d120      	bne.n	801d352 <nema_extend_bound_cl+0xda>
 801d310:	691e      	ldr	r6, [r3, #16]
 801d312:	3205      	adds	r2, #5
 801d314:	42b2      	cmp	r2, r6
 801d316:	db23      	blt.n	801d360 <nema_extend_bound_cl+0xe8>
 801d318:	699a      	ldr	r2, [r3, #24]
 801d31a:	f022 0220 	bic.w	r2, r2, #32
 801d31e:	619a      	str	r2, [r3, #24]
 801d320:	69a3      	ldr	r3, [r4, #24]
 801d322:	075a      	lsls	r2, r3, #29
 801d324:	d503      	bpl.n	801d32e <nema_extend_bound_cl+0xb6>
 801d326:	6a24      	ldr	r4, [r4, #32]
 801d328:	69a3      	ldr	r3, [r4, #24]
 801d32a:	075b      	lsls	r3, r3, #29
 801d32c:	d4fb      	bmi.n	801d326 <nema_extend_bound_cl+0xae>
 801d32e:	2000      	movs	r0, #0
 801d330:	602c      	str	r4, [r5, #0]
 801d332:	b01f      	add	sp, #124	; 0x7c
 801d334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d336:	2900      	cmp	r1, #0
 801d338:	bfb8      	it	lt
 801d33a:	3103      	addlt	r1, #3
 801d33c:	1089      	asrs	r1, r1, #2
 801d33e:	0049      	lsls	r1, r1, #1
 801d340:	4291      	cmp	r1, r2
 801d342:	bfcc      	ite	gt
 801d344:	4610      	movgt	r0, r2
 801d346:	1a50      	suble	r0, r2, r1
 801d348:	1a09      	subs	r1, r1, r0
 801d34a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 801d34e:	1049      	asrs	r1, r1, #1
 801d350:	e7a6      	b.n	801d2a0 <nema_extend_bound_cl+0x28>
 801d352:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801d356:	f7fe fc45 	bl	801bbe4 <nema_set_error>
 801d35a:	2000      	movs	r0, #0
 801d35c:	b01f      	add	sp, #124	; 0x7c
 801d35e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d360:	f44f 26a0 	mov.w	r6, #327680	; 0x50000
 801d364:	689a      	ldr	r2, [r3, #8]
 801d366:	4410      	add	r0, r2
 801d368:	e9c0 6104 	strd	r6, r1, [r0, #16]
 801d36c:	699a      	ldr	r2, [r3, #24]
 801d36e:	f022 0208 	bic.w	r2, r2, #8
 801d372:	e7d2      	b.n	801d31a <nema_extend_bound_cl+0xa2>
 801d374:	2028      	movs	r0, #40	; 0x28
 801d376:	f7e5 fef2 	bl	800315e <nema_host_malloc>
 801d37a:	4604      	mov	r4, r0
 801d37c:	2800      	cmp	r0, #0
 801d37e:	d052      	beq.n	801d426 <nema_extend_bound_cl+0x1ae>
 801d380:	1cb1      	adds	r1, r6, #2
 801d382:	00c9      	lsls	r1, r1, #3
 801d384:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801d388:	dd1a      	ble.n	801d3c0 <nema_extend_bound_cl+0x148>
 801d38a:	466e      	mov	r6, sp
 801d38c:	4627      	mov	r7, r4
 801d38e:	4668      	mov	r0, sp
 801d390:	f7ff ff3e 	bl	801d210 <nema_cl_create_sized>
 801d394:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d396:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801d398:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d39a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801d39c:	e896 0003 	ldmia.w	r6, {r0, r1}
 801d3a0:	e887 0003 	stmia.w	r7, {r0, r1}
 801d3a4:	68a3      	ldr	r3, [r4, #8]
 801d3a6:	2b00      	cmp	r3, #0
 801d3a8:	d034      	beq.n	801d414 <nema_extend_bound_cl+0x19c>
 801d3aa:	682b      	ldr	r3, [r5, #0]
 801d3ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d3ae:	2a00      	cmp	r2, #0
 801d3b0:	bf08      	it	eq
 801d3b2:	461a      	moveq	r2, r3
 801d3b4:	6262      	str	r2, [r4, #36]	; 0x24
 801d3b6:	699a      	ldr	r2, [r3, #24]
 801d3b8:	f022 020c 	bic.w	r2, r2, #12
 801d3bc:	61a2      	str	r2, [r4, #24]
 801d3be:	e788      	b.n	801d2d2 <nema_extend_bound_cl+0x5a>
 801d3c0:	a80a      	add	r0, sp, #40	; 0x28
 801d3c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801d3c6:	f7ff ff23 	bl	801d210 <nema_cl_create_sized>
 801d3ca:	2302      	movs	r3, #2
 801d3cc:	46a4      	mov	ip, r4
 801d3ce:	9310      	str	r3, [sp, #64]	; 0x40
 801d3d0:	ae0a      	add	r6, sp, #40	; 0x28
 801d3d2:	af14      	add	r7, sp, #80	; 0x50
 801d3d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d3d6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801d3d8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d3da:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801d3dc:	e896 0003 	ldmia.w	r6, {r0, r1}
 801d3e0:	ae14      	add	r6, sp, #80	; 0x50
 801d3e2:	e887 0003 	stmia.w	r7, {r0, r1}
 801d3e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d3e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d3ec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d3ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d3f2:	e897 0003 	ldmia.w	r7, {r0, r1}
 801d3f6:	e88c 0003 	stmia.w	ip, {r0, r1}
 801d3fa:	e7d3      	b.n	801d3a4 <nema_extend_bound_cl+0x12c>
 801d3fc:	2008      	movs	r0, #8
 801d3fe:	f7fe fbf1 	bl	801bbe4 <nema_set_error>
 801d402:	f04f 30ff 	mov.w	r0, #4294967295
 801d406:	e7a9      	b.n	801d35c <nema_extend_bound_cl+0xe4>
 801d408:	2080      	movs	r0, #128	; 0x80
 801d40a:	f7fe fbeb 	bl	801bbe4 <nema_set_error>
 801d40e:	f04f 30ff 	mov.w	r0, #4294967295
 801d412:	e7a3      	b.n	801d35c <nema_extend_bound_cl+0xe4>
 801d414:	2010      	movs	r0, #16
 801d416:	f7fe fbe5 	bl	801bbe4 <nema_set_error>
 801d41a:	4620      	mov	r0, r4
 801d41c:	f7e5 fe94 	bl	8003148 <nema_host_free>
 801d420:	f04f 30ff 	mov.w	r0, #4294967295
 801d424:	e79a      	b.n	801d35c <nema_extend_bound_cl+0xe4>
 801d426:	2010      	movs	r0, #16
 801d428:	f7fe fbdc 	bl	801bbe4 <nema_set_error>
 801d42c:	f04f 30ff 	mov.w	r0, #4294967295
 801d430:	e794      	b.n	801d35c <nema_extend_bound_cl+0xe4>
 801d432:	bf00      	nop
 801d434:	20197c10 	.word	0x20197c10

0801d438 <nema_cl_bind_circular>:
 801d438:	b358      	cbz	r0, 801d492 <nema_cl_bind_circular+0x5a>
 801d43a:	68c3      	ldr	r3, [r0, #12]
 801d43c:	f013 0207 	ands.w	r2, r3, #7
 801d440:	d117      	bne.n	801d472 <nema_cl_bind_circular+0x3a>
 801d442:	b4f0      	push	{r4, r5, r6, r7}
 801d444:	4c15      	ldr	r4, [pc, #84]	; (801d49c <nema_cl_bind_circular+0x64>)
 801d446:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801d448:	6821      	ldr	r1, [r4, #0]
 801d44a:	2b00      	cmp	r3, #0
 801d44c:	bf08      	it	eq
 801d44e:	4603      	moveq	r3, r0
 801d450:	b141      	cbz	r1, 801d464 <nema_cl_bind_circular+0x2c>
 801d452:	e9d1 5004 	ldrd	r5, r0, [r1, #16]
 801d456:	1c46      	adds	r6, r0, #1
 801d458:	42ae      	cmp	r6, r5
 801d45a:	db0e      	blt.n	801d47a <nema_cl_bind_circular+0x42>
 801d45c:	698a      	ldr	r2, [r1, #24]
 801d45e:	f022 0220 	bic.w	r2, r2, #32
 801d462:	618a      	str	r2, [r1, #24]
 801d464:	699a      	ldr	r2, [r3, #24]
 801d466:	6023      	str	r3, [r4, #0]
 801d468:	f042 0220 	orr.w	r2, r2, #32
 801d46c:	619a      	str	r2, [r3, #24]
 801d46e:	bcf0      	pop	{r4, r5, r6, r7}
 801d470:	4770      	bx	lr
 801d472:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801d476:	f7fe bbb5 	b.w	801bbe4 <nema_set_error>
 801d47a:	f44f 27a0 	mov.w	r7, #327680	; 0x50000
 801d47e:	688d      	ldr	r5, [r1, #8]
 801d480:	eb05 0680 	add.w	r6, r5, r0, lsl #2
 801d484:	f845 7020 	str.w	r7, [r5, r0, lsl #2]
 801d488:	6072      	str	r2, [r6, #4]
 801d48a:	698a      	ldr	r2, [r1, #24]
 801d48c:	f022 0208 	bic.w	r2, r2, #8
 801d490:	e7e5      	b.n	801d45e <nema_cl_bind_circular+0x26>
 801d492:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801d496:	f7fe bba5 	b.w	801bbe4 <nema_set_error>
 801d49a:	bf00      	nop
 801d49c:	20197c10 	.word	0x20197c10

0801d4a0 <nema_cl_unbind>:
 801d4a0:	4910      	ldr	r1, [pc, #64]	; (801d4e4 <nema_cl_unbind+0x44>)
 801d4a2:	680b      	ldr	r3, [r1, #0]
 801d4a4:	b1d3      	cbz	r3, 801d4dc <nema_cl_unbind+0x3c>
 801d4a6:	b430      	push	{r4, r5}
 801d4a8:	e9d3 0204 	ldrd	r0, r2, [r3, #16]
 801d4ac:	1c54      	adds	r4, r2, #1
 801d4ae:	4284      	cmp	r4, r0
 801d4b0:	db07      	blt.n	801d4c2 <nema_cl_unbind+0x22>
 801d4b2:	699a      	ldr	r2, [r3, #24]
 801d4b4:	f022 0220 	bic.w	r2, r2, #32
 801d4b8:	619a      	str	r2, [r3, #24]
 801d4ba:	2300      	movs	r3, #0
 801d4bc:	600b      	str	r3, [r1, #0]
 801d4be:	bc30      	pop	{r4, r5}
 801d4c0:	4770      	bx	lr
 801d4c2:	f44f 25a0 	mov.w	r5, #327680	; 0x50000
 801d4c6:	2400      	movs	r4, #0
 801d4c8:	6898      	ldr	r0, [r3, #8]
 801d4ca:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
 801d4ce:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801d4d2:	6054      	str	r4, [r2, #4]
 801d4d4:	699a      	ldr	r2, [r3, #24]
 801d4d6:	f022 0208 	bic.w	r2, r2, #8
 801d4da:	e7eb      	b.n	801d4b4 <nema_cl_unbind+0x14>
 801d4dc:	2300      	movs	r3, #0
 801d4de:	600b      	str	r3, [r1, #0]
 801d4e0:	4770      	bx	lr
 801d4e2:	bf00      	nop
 801d4e4:	20197c10 	.word	0x20197c10

0801d4e8 <nema_cl_submit_no_irq>:
 801d4e8:	2800      	cmp	r0, #0
 801d4ea:	d059      	beq.n	801d5a0 <nema_cl_submit_no_irq+0xb8>
 801d4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d4ee:	6983      	ldr	r3, [r0, #24]
 801d4f0:	4605      	mov	r5, r0
 801d4f2:	069c      	lsls	r4, r3, #26
 801d4f4:	d429      	bmi.n	801d54a <nema_cl_submit_no_irq+0x62>
 801d4f6:	4604      	mov	r4, r0
 801d4f8:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 801d4fc:	e012      	b.n	801d524 <nema_cl_submit_no_irq+0x3c>
 801d4fe:	6923      	ldr	r3, [r4, #16]
 801d500:	6949      	ldr	r1, [r1, #20]
 801d502:	4433      	add	r3, r6
 801d504:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801d508:	69a3      	ldr	r3, [r4, #24]
 801d50a:	4620      	mov	r0, r4
 801d50c:	f023 0308 	bic.w	r3, r3, #8
 801d510:	61a3      	str	r3, [r4, #24]
 801d512:	f7e5 fe9e 	bl	8003252 <nema_buffer_flush>
 801d516:	69a3      	ldr	r3, [r4, #24]
 801d518:	f043 0308 	orr.w	r3, r3, #8
 801d51c:	61a3      	str	r3, [r4, #24]
 801d51e:	6a24      	ldr	r4, [r4, #32]
 801d520:	b134      	cbz	r4, 801d530 <nema_cl_submit_no_irq+0x48>
 801d522:	69a3      	ldr	r3, [r4, #24]
 801d524:	0758      	lsls	r0, r3, #29
 801d526:	68a2      	ldr	r2, [r4, #8]
 801d528:	6a21      	ldr	r1, [r4, #32]
 801d52a:	d4e8      	bmi.n	801d4fe <nema_cl_submit_no_irq+0x16>
 801d52c:	071b      	lsls	r3, r3, #28
 801d52e:	d52a      	bpl.n	801d586 <nema_cl_submit_no_irq+0x9e>
 801d530:	2000      	movs	r0, #0
 801d532:	f7e5 fe98 	bl	8003266 <nema_mutex_lock>
 801d536:	6969      	ldr	r1, [r5, #20]
 801d538:	4628      	mov	r0, r5
 801d53a:	f7fe f9c3 	bl	801b8c4 <nema_rb_submit_cmdlist>
 801d53e:	61e8      	str	r0, [r5, #28]
 801d540:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801d544:	2000      	movs	r0, #0
 801d546:	f7e5 be9b 	b.w	8003280 <nema_mutex_unlock>
 801d54a:	6903      	ldr	r3, [r0, #16]
 801d54c:	6946      	ldr	r6, [r0, #20]
 801d54e:	2b00      	cmp	r3, #0
 801d550:	bfb8      	it	lt
 801d552:	3303      	addlt	r3, #3
 801d554:	109b      	asrs	r3, r3, #2
 801d556:	005c      	lsls	r4, r3, #1
 801d558:	68c7      	ldr	r7, [r0, #12]
 801d55a:	69c0      	ldr	r0, [r0, #28]
 801d55c:	42a6      	cmp	r6, r4
 801d55e:	bfa4      	itt	ge
 801d560:	1b36      	subge	r6, r6, r4
 801d562:	eb07 07c3 	addge.w	r7, r7, r3, lsl #3
 801d566:	2800      	cmp	r0, #0
 801d568:	da15      	bge.n	801d596 <nema_cl_submit_no_irq+0xae>
 801d56a:	f04f 33ff 	mov.w	r3, #4294967295
 801d56e:	61eb      	str	r3, [r5, #28]
 801d570:	4631      	mov	r1, r6
 801d572:	4638      	mov	r0, r7
 801d574:	f7fe f922 	bl	801b7bc <nema_rb_submit_cmdlist2>
 801d578:	696b      	ldr	r3, [r5, #20]
 801d57a:	61e8      	str	r0, [r5, #28]
 801d57c:	42a3      	cmp	r3, r4
 801d57e:	bfa8      	it	ge
 801d580:	2400      	movge	r4, #0
 801d582:	616c      	str	r4, [r5, #20]
 801d584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d586:	4620      	mov	r0, r4
 801d588:	f7e5 fe63 	bl	8003252 <nema_buffer_flush>
 801d58c:	69a3      	ldr	r3, [r4, #24]
 801d58e:	f043 0308 	orr.w	r3, r3, #8
 801d592:	61a3      	str	r3, [r4, #24]
 801d594:	e7cc      	b.n	801d530 <nema_cl_submit_no_irq+0x48>
 801d596:	f7e5 fdc3 	bl	8003120 <nema_wait_irq_cl>
 801d59a:	2800      	cmp	r0, #0
 801d59c:	dae5      	bge.n	801d56a <nema_cl_submit_no_irq+0x82>
 801d59e:	e7e7      	b.n	801d570 <nema_cl_submit_no_irq+0x88>
 801d5a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801d5a4:	f7fe bb1e 	b.w	801bbe4 <nema_set_error>

0801d5a8 <nema_cl_get_space>:
 801d5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d5aa:	4e2d      	ldr	r6, [pc, #180]	; (801d660 <nema_cl_get_space+0xb8>)
 801d5ac:	6834      	ldr	r4, [r6, #0]
 801d5ae:	2c00      	cmp	r4, #0
 801d5b0:	d039      	beq.n	801d626 <nema_cl_get_space+0x7e>
 801d5b2:	69a7      	ldr	r7, [r4, #24]
 801d5b4:	4605      	mov	r5, r0
 801d5b6:	f027 0208 	bic.w	r2, r7, #8
 801d5ba:	f017 0720 	ands.w	r7, r7, #32
 801d5be:	61a2      	str	r2, [r4, #24]
 801d5c0:	6923      	ldr	r3, [r4, #16]
 801d5c2:	6962      	ldr	r2, [r4, #20]
 801d5c4:	d016      	beq.n	801d5f4 <nema_cl_get_space+0x4c>
 801d5c6:	2b00      	cmp	r3, #0
 801d5c8:	bfb8      	it	lt
 801d5ca:	3303      	addlt	r3, #3
 801d5cc:	109b      	asrs	r3, r3, #2
 801d5ce:	005b      	lsls	r3, r3, #1
 801d5d0:	4293      	cmp	r3, r2
 801d5d2:	bfcc      	ite	gt
 801d5d4:	4611      	movgt	r1, r2
 801d5d6:	1ad1      	suble	r1, r2, r3
 801d5d8:	1a5b      	subs	r3, r3, r1
 801d5da:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801d5de:	1c41      	adds	r1, r0, #1
 801d5e0:	ebb1 0f63 	cmp.w	r1, r3, asr #1
 801d5e4:	da1a      	bge.n	801d61c <nema_cl_get_space+0x74>
 801d5e6:	68a0      	ldr	r0, [r4, #8]
 801d5e8:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801d5ec:	6165      	str	r5, [r4, #20]
 801d5ee:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801d5f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d5f4:	1a9b      	subs	r3, r3, r2
 801d5f6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801d5fa:	105b      	asrs	r3, r3, #1
 801d5fc:	3b01      	subs	r3, #1
 801d5fe:	4283      	cmp	r3, r0
 801d600:	dcf1      	bgt.n	801d5e6 <nema_cl_get_space+0x3e>
 801d602:	f7ff fe39 	bl	801d278 <nema_extend_bound_cl>
 801d606:	2800      	cmp	r0, #0
 801d608:	db27      	blt.n	801d65a <nema_cl_get_space+0xb2>
 801d60a:	6834      	ldr	r4, [r6, #0]
 801d60c:	6962      	ldr	r2, [r4, #20]
 801d60e:	68a0      	ldr	r0, [r4, #8]
 801d610:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801d614:	6165      	str	r5, [r4, #20]
 801d616:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801d61a:	e7ea      	b.n	801d5f2 <nema_cl_get_space+0x4a>
 801d61c:	b942      	cbnz	r2, 801d630 <nema_cl_get_space+0x88>
 801d61e:	f04f 33ff 	mov.w	r3, #4294967295
 801d622:	61e3      	str	r3, [r4, #28]
 801d624:	e7df      	b.n	801d5e6 <nema_cl_get_space+0x3e>
 801d626:	2080      	movs	r0, #128	; 0x80
 801d628:	f7fe fadc 	bl	801bbe4 <nema_set_error>
 801d62c:	4620      	mov	r0, r4
 801d62e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d630:	4620      	mov	r0, r4
 801d632:	f7ff ff59 	bl	801d4e8 <nema_cl_submit_no_irq>
 801d636:	69e0      	ldr	r0, [r4, #28]
 801d638:	f7fe fa10 	bl	801ba5c <nema_rb_submit_cl_id>
 801d63c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801d640:	69e0      	ldr	r0, [r4, #28]
 801d642:	4298      	cmp	r0, r3
 801d644:	d1e1      	bne.n	801d60a <nema_cl_get_space+0x62>
 801d646:	f7e5 fd6b 	bl	8003120 <nema_wait_irq_cl>
 801d64a:	2800      	cmp	r0, #0
 801d64c:	dbdd      	blt.n	801d60a <nema_cl_get_space+0x62>
 801d64e:	f04f 33ff 	mov.w	r3, #4294967295
 801d652:	61e3      	str	r3, [r4, #28]
 801d654:	6834      	ldr	r4, [r6, #0]
 801d656:	6962      	ldr	r2, [r4, #20]
 801d658:	e7c5      	b.n	801d5e6 <nema_cl_get_space+0x3e>
 801d65a:	4638      	mov	r0, r7
 801d65c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d65e:	bf00      	nop
 801d660:	20197c10 	.word	0x20197c10

0801d664 <nema_cl_add_cmd>:
 801d664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d668:	4e30      	ldr	r6, [pc, #192]	; (801d72c <nema_cl_add_cmd+0xc8>)
 801d66a:	4607      	mov	r7, r0
 801d66c:	6834      	ldr	r4, [r6, #0]
 801d66e:	4688      	mov	r8, r1
 801d670:	b35c      	cbz	r4, 801d6ca <nema_cl_add_cmd+0x66>
 801d672:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
 801d676:	f025 0308 	bic.w	r3, r5, #8
 801d67a:	f015 0020 	ands.w	r0, r5, #32
 801d67e:	61a3      	str	r3, [r4, #24]
 801d680:	6923      	ldr	r3, [r4, #16]
 801d682:	d016      	beq.n	801d6b2 <nema_cl_add_cmd+0x4e>
 801d684:	2b00      	cmp	r3, #0
 801d686:	bfb8      	it	lt
 801d688:	3303      	addlt	r3, #3
 801d68a:	109b      	asrs	r3, r3, #2
 801d68c:	005b      	lsls	r3, r3, #1
 801d68e:	4293      	cmp	r3, r2
 801d690:	bfcc      	ite	gt
 801d692:	4611      	movgt	r1, r2
 801d694:	1ad1      	suble	r1, r2, r3
 801d696:	1a5b      	subs	r3, r3, r1
 801d698:	2b03      	cmp	r3, #3
 801d69a:	dd2a      	ble.n	801d6f2 <nema_cl_add_cmd+0x8e>
 801d69c:	1c51      	adds	r1, r2, #1
 801d69e:	68a0      	ldr	r0, [r4, #8]
 801d6a0:	1c93      	adds	r3, r2, #2
 801d6a2:	f840 7022 	str.w	r7, [r0, r2, lsl #2]
 801d6a6:	68a2      	ldr	r2, [r4, #8]
 801d6a8:	f842 8021 	str.w	r8, [r2, r1, lsl #2]
 801d6ac:	6163      	str	r3, [r4, #20]
 801d6ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d6b2:	07a9      	lsls	r1, r5, #30
 801d6b4:	d515      	bpl.n	801d6e2 <nema_cl_add_cmd+0x7e>
 801d6b6:	1d11      	adds	r1, r2, #4
 801d6b8:	4299      	cmp	r1, r3
 801d6ba:	dbef      	blt.n	801d69c <nema_cl_add_cmd+0x38>
 801d6bc:	f7ff fddc 	bl	801d278 <nema_extend_bound_cl>
 801d6c0:	2800      	cmp	r0, #0
 801d6c2:	dbf4      	blt.n	801d6ae <nema_cl_add_cmd+0x4a>
 801d6c4:	6834      	ldr	r4, [r6, #0]
 801d6c6:	6962      	ldr	r2, [r4, #20]
 801d6c8:	e7e8      	b.n	801d69c <nema_cl_add_cmd+0x38>
 801d6ca:	4620      	mov	r0, r4
 801d6cc:	f7e5 fdcb 	bl	8003266 <nema_mutex_lock>
 801d6d0:	4638      	mov	r0, r7
 801d6d2:	4641      	mov	r1, r8
 801d6d4:	f7fe f8fa 	bl	801b8cc <nema_rb_inline_cmd>
 801d6d8:	4620      	mov	r0, r4
 801d6da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d6de:	f7e5 bdcf 	b.w	8003280 <nema_mutex_unlock>
 801d6e2:	1c51      	adds	r1, r2, #1
 801d6e4:	4299      	cmp	r1, r3
 801d6e6:	dbda      	blt.n	801d69e <nema_cl_add_cmd+0x3a>
 801d6e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d6ec:	2008      	movs	r0, #8
 801d6ee:	f7fe ba79 	b.w	801bbe4 <nema_set_error>
 801d6f2:	b922      	cbnz	r2, 801d6fe <nema_cl_add_cmd+0x9a>
 801d6f4:	f04f 33ff 	mov.w	r3, #4294967295
 801d6f8:	2101      	movs	r1, #1
 801d6fa:	61e3      	str	r3, [r4, #28]
 801d6fc:	e7cf      	b.n	801d69e <nema_cl_add_cmd+0x3a>
 801d6fe:	4620      	mov	r0, r4
 801d700:	f7ff fef2 	bl	801d4e8 <nema_cl_submit_no_irq>
 801d704:	69e0      	ldr	r0, [r4, #28]
 801d706:	f7fe f9a9 	bl	801ba5c <nema_rb_submit_cl_id>
 801d70a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801d70e:	69e0      	ldr	r0, [r4, #28]
 801d710:	4298      	cmp	r0, r3
 801d712:	d1d7      	bne.n	801d6c4 <nema_cl_add_cmd+0x60>
 801d714:	f7e5 fd04 	bl	8003120 <nema_wait_irq_cl>
 801d718:	2800      	cmp	r0, #0
 801d71a:	dbd3      	blt.n	801d6c4 <nema_cl_add_cmd+0x60>
 801d71c:	f04f 33ff 	mov.w	r3, #4294967295
 801d720:	61e3      	str	r3, [r4, #28]
 801d722:	6834      	ldr	r4, [r6, #0]
 801d724:	6962      	ldr	r2, [r4, #20]
 801d726:	1c51      	adds	r1, r2, #1
 801d728:	e7b9      	b.n	801d69e <nema_cl_add_cmd+0x3a>
 801d72a:	bf00      	nop
 801d72c:	20197c10 	.word	0x20197c10

0801d730 <nema_cl_submit>:
 801d730:	2800      	cmp	r0, #0
 801d732:	d05c      	beq.n	801d7ee <nema_cl_submit+0xbe>
 801d734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d736:	6944      	ldr	r4, [r0, #20]
 801d738:	4605      	mov	r5, r0
 801d73a:	b91c      	cbnz	r4, 801d744 <nema_cl_submit+0x14>
 801d73c:	f04f 33ff 	mov.w	r3, #4294967295
 801d740:	61eb      	str	r3, [r5, #28]
 801d742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d744:	6983      	ldr	r3, [r0, #24]
 801d746:	069e      	lsls	r6, r3, #26
 801d748:	d527      	bpl.n	801d79a <nema_cl_submit+0x6a>
 801d74a:	6903      	ldr	r3, [r0, #16]
 801d74c:	68c7      	ldr	r7, [r0, #12]
 801d74e:	2b00      	cmp	r3, #0
 801d750:	bfb8      	it	lt
 801d752:	3303      	addlt	r3, #3
 801d754:	109b      	asrs	r3, r3, #2
 801d756:	005e      	lsls	r6, r3, #1
 801d758:	69c0      	ldr	r0, [r0, #28]
 801d75a:	42b4      	cmp	r4, r6
 801d75c:	bfa4      	itt	ge
 801d75e:	1ba4      	subge	r4, r4, r6
 801d760:	eb07 07c3 	addge.w	r7, r7, r3, lsl #3
 801d764:	2800      	cmp	r0, #0
 801d766:	da46      	bge.n	801d7f6 <nema_cl_submit+0xc6>
 801d768:	f04f 33ff 	mov.w	r3, #4294967295
 801d76c:	61eb      	str	r3, [r5, #28]
 801d76e:	4621      	mov	r1, r4
 801d770:	4638      	mov	r0, r7
 801d772:	f7fe f823 	bl	801b7bc <nema_rb_submit_cmdlist2>
 801d776:	696b      	ldr	r3, [r5, #20]
 801d778:	61e8      	str	r0, [r5, #28]
 801d77a:	429e      	cmp	r6, r3
 801d77c:	bfd8      	it	le
 801d77e:	2600      	movle	r6, #0
 801d780:	616e      	str	r6, [r5, #20]
 801d782:	f7fe f96b 	bl	801ba5c <nema_rb_submit_cl_id>
 801d786:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801d78a:	69e8      	ldr	r0, [r5, #28]
 801d78c:	4298      	cmp	r0, r3
 801d78e:	d1d8      	bne.n	801d742 <nema_cl_submit+0x12>
 801d790:	f7e5 fcc6 	bl	8003120 <nema_wait_irq_cl>
 801d794:	2800      	cmp	r0, #0
 801d796:	dad1      	bge.n	801d73c <nema_cl_submit+0xc>
 801d798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d79a:	4604      	mov	r4, r0
 801d79c:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 801d7a0:	e012      	b.n	801d7c8 <nema_cl_submit+0x98>
 801d7a2:	6923      	ldr	r3, [r4, #16]
 801d7a4:	6949      	ldr	r1, [r1, #20]
 801d7a6:	4433      	add	r3, r6
 801d7a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801d7ac:	69a3      	ldr	r3, [r4, #24]
 801d7ae:	4620      	mov	r0, r4
 801d7b0:	f023 0308 	bic.w	r3, r3, #8
 801d7b4:	61a3      	str	r3, [r4, #24]
 801d7b6:	f7e5 fd4c 	bl	8003252 <nema_buffer_flush>
 801d7ba:	69a3      	ldr	r3, [r4, #24]
 801d7bc:	f043 0308 	orr.w	r3, r3, #8
 801d7c0:	61a3      	str	r3, [r4, #24]
 801d7c2:	6a24      	ldr	r4, [r4, #32]
 801d7c4:	b134      	cbz	r4, 801d7d4 <nema_cl_submit+0xa4>
 801d7c6:	69a3      	ldr	r3, [r4, #24]
 801d7c8:	0758      	lsls	r0, r3, #29
 801d7ca:	68a2      	ldr	r2, [r4, #8]
 801d7cc:	6a21      	ldr	r1, [r4, #32]
 801d7ce:	d4e8      	bmi.n	801d7a2 <nema_cl_submit+0x72>
 801d7d0:	071b      	lsls	r3, r3, #28
 801d7d2:	d515      	bpl.n	801d800 <nema_cl_submit+0xd0>
 801d7d4:	2000      	movs	r0, #0
 801d7d6:	f7e5 fd46 	bl	8003266 <nema_mutex_lock>
 801d7da:	6969      	ldr	r1, [r5, #20]
 801d7dc:	4628      	mov	r0, r5
 801d7de:	f7fe f871 	bl	801b8c4 <nema_rb_submit_cmdlist>
 801d7e2:	61e8      	str	r0, [r5, #28]
 801d7e4:	2000      	movs	r0, #0
 801d7e6:	f7e5 fd4b 	bl	8003280 <nema_mutex_unlock>
 801d7ea:	69e8      	ldr	r0, [r5, #28]
 801d7ec:	e7c9      	b.n	801d782 <nema_cl_submit+0x52>
 801d7ee:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801d7f2:	f7fe b9f7 	b.w	801bbe4 <nema_set_error>
 801d7f6:	f7e5 fc93 	bl	8003120 <nema_wait_irq_cl>
 801d7fa:	2800      	cmp	r0, #0
 801d7fc:	dab4      	bge.n	801d768 <nema_cl_submit+0x38>
 801d7fe:	e7b6      	b.n	801d76e <nema_cl_submit+0x3e>
 801d800:	4620      	mov	r0, r4
 801d802:	f7e5 fd26 	bl	8003252 <nema_buffer_flush>
 801d806:	69a3      	ldr	r3, [r4, #24]
 801d808:	f043 0308 	orr.w	r3, r3, #8
 801d80c:	61a3      	str	r3, [r4, #24]
 801d80e:	e7e1      	b.n	801d7d4 <nema_cl_submit+0xa4>

0801d810 <nema_cl_wait>:
 801d810:	b510      	push	{r4, lr}
 801d812:	b170      	cbz	r0, 801d832 <nema_cl_wait+0x22>
 801d814:	4604      	mov	r4, r0
 801d816:	69c0      	ldr	r0, [r0, #28]
 801d818:	2800      	cmp	r0, #0
 801d81a:	da04      	bge.n	801d826 <nema_cl_wait+0x16>
 801d81c:	f04f 33ff 	mov.w	r3, #4294967295
 801d820:	61e3      	str	r3, [r4, #28]
 801d822:	2000      	movs	r0, #0
 801d824:	bd10      	pop	{r4, pc}
 801d826:	f7e5 fc7b 	bl	8003120 <nema_wait_irq_cl>
 801d82a:	2800      	cmp	r0, #0
 801d82c:	daf6      	bge.n	801d81c <nema_cl_wait+0xc>
 801d82e:	2000      	movs	r0, #0
 801d830:	bd10      	pop	{r4, pc}
 801d832:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801d836:	f7fe f9d5 	bl	801bbe4 <nema_set_error>
 801d83a:	f04f 30ff 	mov.w	r0, #4294967295
 801d83e:	bd10      	pop	{r4, pc}

0801d840 <nema_blender_init>:
 801d840:	b530      	push	{r4, r5, lr}
 801d842:	b085      	sub	sp, #20
 801d844:	466d      	mov	r5, sp
 801d846:	2418      	movs	r4, #24
 801d848:	4b11      	ldr	r3, [pc, #68]	; (801d890 <nema_blender_init+0x50>)
 801d84a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801d84c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801d850:	2101      	movs	r1, #1
 801d852:	4622      	mov	r2, r4
 801d854:	4628      	mov	r0, r5
 801d856:	440c      	add	r4, r1
 801d858:	f7ff f974 	bl	801cb44 <nema_load_frag_shader>
 801d85c:	2c1f      	cmp	r4, #31
 801d85e:	d1f7      	bne.n	801d850 <nema_blender_init+0x10>
 801d860:	4622      	mov	r2, r4
 801d862:	2101      	movs	r1, #1
 801d864:	a802      	add	r0, sp, #8
 801d866:	f7ff f96d 	bl	801cb44 <nema_load_frag_shader>
 801d86a:	f7ff f829 	bl	801c8c0 <nema_readHwConfig>
 801d86e:	f000 5080 	and.w	r0, r0, #268435456	; 0x10000000
 801d872:	2800      	cmp	r0, #0
 801d874:	bf14      	ite	ne
 801d876:	2201      	movne	r2, #1
 801d878:	2200      	moveq	r2, #0
 801d87a:	4b06      	ldr	r3, [pc, #24]	; (801d894 <nema_blender_init+0x54>)
 801d87c:	701a      	strb	r2, [r3, #0]
 801d87e:	d005      	beq.n	801d88c <nema_blender_init+0x4c>
 801d880:	2200      	movs	r2, #0
 801d882:	4b05      	ldr	r3, [pc, #20]	; (801d898 <nema_blender_init+0x58>)
 801d884:	2001      	movs	r0, #1
 801d886:	601a      	str	r2, [r3, #0]
 801d888:	f7ff f97c 	bl	801cb84 <nema_set_rop_blend_mode>
 801d88c:	b005      	add	sp, #20
 801d88e:	bd30      	pop	{r4, r5, pc}
 801d890:	0802a774 	.word	0x0802a774
 801d894:	20197c15 	.word	0x20197c15
 801d898:	20000064 	.word	0x20000064

0801d89c <nema_set_blend>:
 801d89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8a0:	4ca5      	ldr	r4, [pc, #660]	; (801db38 <nema_set_blend+0x29c>)
 801d8a2:	4683      	mov	fp, r0
 801d8a4:	7820      	ldrb	r0, [r4, #0]
 801d8a6:	b0a7      	sub	sp, #156	; 0x9c
 801d8a8:	9102      	str	r1, [sp, #8]
 801d8aa:	9200      	str	r2, [sp, #0]
 801d8ac:	2800      	cmp	r0, #0
 801d8ae:	f040 8233 	bne.w	801dd18 <nema_set_blend+0x47c>
 801d8b2:	469a      	mov	sl, r3
 801d8b4:	465c      	mov	r4, fp
 801d8b6:	ea4f 535b 	mov.w	r3, fp, lsr #21
 801d8ba:	055b      	lsls	r3, r3, #21
 801d8bc:	930e      	str	r3, [sp, #56]	; 0x38
 801d8be:	f40b 0300 	and.w	r3, fp, #8388608	; 0x800000
 801d8c2:	930c      	str	r3, [sp, #48]	; 0x30
 801d8c4:	f40b 0380 	and.w	r3, fp, #4194304	; 0x400000
 801d8c8:	f00b 010f 	and.w	r1, fp, #15
 801d8cc:	930d      	str	r3, [sp, #52]	; 0x34
 801d8ce:	f40b 1300 	and.w	r3, fp, #2097152	; 0x200000
 801d8d2:	930b      	str	r3, [sp, #44]	; 0x2c
 801d8d4:	9101      	str	r1, [sp, #4]
 801d8d6:	b2d2      	uxtb	r2, r2
 801d8d8:	fa5f f38a 	uxtb.w	r3, sl
 801d8dc:	f3cb 2903 	ubfx	r9, fp, #8, #4
 801d8e0:	f00b 7100 	and.w	r1, fp, #33554432	; 0x2000000
 801d8e4:	f3cb 6840 	ubfx	r8, fp, #25, #1
 801d8e8:	9d02      	ldr	r5, [sp, #8]
 801d8ea:	b2e8      	uxtb	r0, r5
 801d8ec:	2804      	cmp	r0, #4
 801d8ee:	4628      	mov	r0, r5
 801d8f0:	bf28      	it	cs
 801d8f2:	2000      	movcs	r0, #0
 801d8f4:	2a04      	cmp	r2, #4
 801d8f6:	9a00      	ldr	r2, [sp, #0]
 801d8f8:	bf28      	it	cs
 801d8fa:	f04f 32ff 	movcs.w	r2, #4294967295
 801d8fe:	2b04      	cmp	r3, #4
 801d900:	9002      	str	r0, [sp, #8]
 801d902:	9200      	str	r2, [sp, #0]
 801d904:	bf28      	it	cs
 801d906:	4682      	movcs	sl, r0
 801d908:	4602      	mov	r2, r0
 801d90a:	bf34      	ite	cc
 801d90c:	4650      	movcc	r0, sl
 801d90e:	2002      	movcs	r0, #2
 801d910:	4b8a      	ldr	r3, [pc, #552]	; (801db3c <nema_set_blend+0x2a0>)
 801d912:	9010      	str	r0, [sp, #64]	; 0x40
 801d914:	781b      	ldrb	r3, [r3, #0]
 801d916:	b14b      	cbz	r3, 801d92c <nema_set_blend+0x90>
 801d918:	f01b 7380 	ands.w	r3, fp, #16777216	; 0x1000000
 801d91c:	9303      	str	r3, [sp, #12]
 801d91e:	d102      	bne.n	801d926 <nema_set_blend+0x8a>
 801d920:	4552      	cmp	r2, sl
 801d922:	f000 830c 	beq.w	801df3e <nema_set_blend+0x6a2>
 801d926:	2001      	movs	r0, #1
 801d928:	f7ff f92c 	bl	801cb84 <nema_set_rop_blend_mode>
 801d92c:	2c00      	cmp	r4, #0
 801d92e:	bfac      	ite	ge
 801d930:	4642      	movge	r2, r8
 801d932:	2201      	movlt	r2, #1
 801d934:	4b82      	ldr	r3, [pc, #520]	; (801db40 <nema_set_blend+0x2a4>)
 801d936:	f1bb 0f01 	cmp.w	fp, #1
 801d93a:	789b      	ldrb	r3, [r3, #2]
 801d93c:	9207      	str	r2, [sp, #28]
 801d93e:	9305      	str	r3, [sp, #20]
 801d940:	f000 80e0 	beq.w	801db04 <nema_set_blend+0x268>
 801d944:	f00b 4380 	and.w	r3, fp, #1073741824	; 0x40000000
 801d948:	9315      	str	r3, [sp, #84]	; 0x54
 801d94a:	f3cb 7380 	ubfx	r3, fp, #30, #1
 801d94e:	9306      	str	r3, [sp, #24]
 801d950:	f00b 5300 	and.w	r3, fp, #536870912	; 0x20000000
 801d954:	9309      	str	r3, [sp, #36]	; 0x24
 801d956:	9b01      	ldr	r3, [sp, #4]
 801d958:	f00b 5280 	and.w	r2, fp, #268435456	; 0x10000000
 801d95c:	2b05      	cmp	r3, #5
 801d95e:	f240 80df 	bls.w	801db20 <nema_set_blend+0x284>
 801d962:	2301      	movs	r3, #1
 801d964:	930a      	str	r3, [sp, #40]	; 0x28
 801d966:	9304      	str	r3, [sp, #16]
 801d968:	2303      	movs	r3, #3
 801d96a:	4976      	ldr	r1, [pc, #472]	; (801db44 <nema_set_blend+0x2a8>)
 801d96c:	9303      	str	r3, [sp, #12]
 801d96e:	9108      	str	r1, [sp, #32]
 801d970:	4d75      	ldr	r5, [pc, #468]	; (801db48 <nema_set_blend+0x2ac>)
 801d972:	2a00      	cmp	r2, #0
 801d974:	4b75      	ldr	r3, [pc, #468]	; (801db4c <nema_set_blend+0x2b0>)
 801d976:	bf18      	it	ne
 801d978:	462b      	movne	r3, r5
 801d97a:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 801d97e:	f105 0502 	add.w	r5, r5, #2
 801d982:	9312      	str	r3, [sp, #72]	; 0x48
 801d984:	4b72      	ldr	r3, [pc, #456]	; (801db50 <nema_set_blend+0x2b4>)
 801d986:	bf08      	it	eq
 801d988:	462b      	moveq	r3, r5
 801d98a:	f8df e20c 	ldr.w	lr, [pc, #524]	; 801db98 <nema_set_blend+0x2fc>
 801d98e:	f8df c20c 	ldr.w	ip, [pc, #524]	; 801db9c <nema_set_blend+0x300>
 801d992:	9311      	str	r3, [sp, #68]	; 0x44
 801d994:	bf14      	ite	ne
 801d996:	4673      	movne	r3, lr
 801d998:	4663      	moveq	r3, ip
 801d99a:	4f6e      	ldr	r7, [pc, #440]	; (801db54 <nema_set_blend+0x2b8>)
 801d99c:	9314      	str	r3, [sp, #80]	; 0x50
 801d99e:	4b6e      	ldr	r3, [pc, #440]	; (801db58 <nema_set_blend+0x2bc>)
 801d9a0:	bf18      	it	ne
 801d9a2:	463b      	movne	r3, r7
 801d9a4:	f5a5 25c8 	sub.w	r5, r5, #409600	; 0x64000
 801d9a8:	9313      	str	r3, [sp, #76]	; 0x4c
 801d9aa:	4b6c      	ldr	r3, [pc, #432]	; (801db5c <nema_set_blend+0x2c0>)
 801d9ac:	f1a5 0542 	sub.w	r5, r5, #66	; 0x42
 801d9b0:	496b      	ldr	r1, [pc, #428]	; (801db60 <nema_set_blend+0x2c4>)
 801d9b2:	bf18      	it	ne
 801d9b4:	4619      	movne	r1, r3
 801d9b6:	f1a3 033e 	sub.w	r3, r3, #62	; 0x3e
 801d9ba:	bf18      	it	ne
 801d9bc:	462b      	movne	r3, r5
 801d9be:	4e69      	ldr	r6, [pc, #420]	; (801db64 <nema_set_blend+0x2c8>)
 801d9c0:	4f69      	ldr	r7, [pc, #420]	; (801db68 <nema_set_blend+0x2cc>)
 801d9c2:	461d      	mov	r5, r3
 801d9c4:	4b69      	ldr	r3, [pc, #420]	; (801db6c <nema_set_blend+0x2d0>)
 801d9c6:	486a      	ldr	r0, [pc, #424]	; (801db70 <nema_set_blend+0x2d4>)
 801d9c8:	bf18      	it	ne
 801d9ca:	4630      	movne	r0, r6
 801d9cc:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 801d9d0:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 801dba0 <nema_set_blend+0x304>
 801d9d4:	f506 3650 	add.w	r6, r6, #212992	; 0x34000
 801d9d8:	bf04      	itt	eq
 801d9da:	46bc      	moveq	ip, r7
 801d9dc:	461e      	moveq	r6, r3
 801d9de:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 801d9e2:	f1a3 0340 	sub.w	r3, r3, #64	; 0x40
 801d9e6:	f1a7 0742 	sub.w	r7, r7, #66	; 0x42
 801d9ea:	bf08      	it	eq
 801d9ec:	461f      	moveq	r7, r3
 801d9ee:	4c61      	ldr	r4, [pc, #388]	; (801db74 <nema_set_blend+0x2d8>)
 801d9f0:	f8df e1b0 	ldr.w	lr, [pc, #432]	; 801dba4 <nema_set_blend+0x308>
 801d9f4:	4a60      	ldr	r2, [pc, #384]	; (801db78 <nema_set_blend+0x2dc>)
 801d9f6:	bf18      	it	ne
 801d9f8:	4622      	movne	r2, r4
 801d9fa:	f504 3450 	add.w	r4, r4, #212992	; 0x34000
 801d9fe:	bf08      	it	eq
 801da00:	4674      	moveq	r4, lr
 801da02:	f8dd e018 	ldr.w	lr, [sp, #24]
 801da06:	f1b8 0f00 	cmp.w	r8, #0
 801da0a:	f040 8109 	bne.w	801dc20 <nema_set_blend+0x384>
 801da0e:	9b07      	ldr	r3, [sp, #28]
 801da10:	2b00      	cmp	r3, #0
 801da12:	bf0c      	ite	eq
 801da14:	2300      	moveq	r3, #0
 801da16:	f44f 1300 	movne.w	r3, #2097152	; 0x200000
 801da1a:	930f      	str	r3, [sp, #60]	; 0x3c
 801da1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da1e:	2b00      	cmp	r3, #0
 801da20:	f040 8105 	bne.w	801dc2e <nema_set_blend+0x392>
 801da24:	f01b 6f80 	tst.w	fp, #67108864	; 0x4000000
 801da28:	f000 81b4 	beq.w	801dd94 <nema_set_blend+0x4f8>
 801da2c:	4684      	mov	ip, r0
 801da2e:	460e      	mov	r6, r1
 801da30:	4614      	mov	r4, r2
 801da32:	462f      	mov	r7, r5
 801da34:	f04f 0804 	mov.w	r8, #4
 801da38:	2200      	movs	r2, #0
 801da3a:	4850      	ldr	r0, [pc, #320]	; (801db7c <nema_set_blend+0x2e0>)
 801da3c:	f00b 53c0 	and.w	r3, fp, #402653184	; 0x18000000
 801da40:	4293      	cmp	r3, r2
 801da42:	f850 302a 	ldr.w	r3, [r0, sl, lsl #2]
 801da46:	bf18      	it	ne
 801da48:	463e      	movne	r6, r7
 801da4a:	9309      	str	r3, [sp, #36]	; 0x24
 801da4c:	9b05      	ldr	r3, [sp, #20]
 801da4e:	bf16      	itet	ne
 801da50:	46a4      	movne	ip, r4
 801da52:	270e      	moveq	r7, #14
 801da54:	270c      	movne	r7, #12
 801da56:	9216      	str	r2, [sp, #88]	; 0x58
 801da58:	2b00      	cmp	r3, #0
 801da5a:	f000 80eb 	beq.w	801dc34 <nema_set_blend+0x398>
 801da5e:	4b48      	ldr	r3, [pc, #288]	; (801db80 <nema_set_blend+0x2e4>)
 801da60:	4948      	ldr	r1, [pc, #288]	; (801db84 <nema_set_blend+0x2e8>)
 801da62:	9800      	ldr	r0, [sp, #0]
 801da64:	e9cd 1316 	strd	r1, r3, [sp, #88]	; 0x58
 801da68:	1c43      	adds	r3, r0, #1
 801da6a:	f000 8257 	beq.w	801df1c <nema_set_blend+0x680>
 801da6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801da72:	4b45      	ldr	r3, [pc, #276]	; (801db88 <nema_set_blend+0x2ec>)
 801da74:	9204      	str	r2, [sp, #16]
 801da76:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
 801da7a:	e9cd 3118 	strd	r3, r1, [sp, #96]	; 0x60
 801da7e:	2203      	movs	r2, #3
 801da80:	2102      	movs	r1, #2
 801da82:	4c42      	ldr	r4, [pc, #264]	; (801db8c <nema_set_blend+0x2f0>)
 801da84:	f1b9 0f01 	cmp.w	r9, #1
 801da88:	f240 8110 	bls.w	801dcac <nema_set_blend+0x410>
 801da8c:	9b01      	ldr	r3, [sp, #4]
 801da8e:	2b05      	cmp	r3, #5
 801da90:	d803      	bhi.n	801da9a <nema_set_blend+0x1fe>
 801da92:	f01b 5f70 	tst.w	fp, #1006632960	; 0x3c000000
 801da96:	f000 8087 	beq.w	801dba8 <nema_set_blend+0x30c>
 801da9a:	9b03      	ldr	r3, [sp, #12]
 801da9c:	b933      	cbnz	r3, 801daac <nema_set_blend+0x210>
 801da9e:	f1b9 0f00 	cmp.w	r9, #0
 801daa2:	d103      	bne.n	801daac <nema_set_blend+0x210>
 801daa4:	9b07      	ldr	r3, [sp, #28]
 801daa6:	2b00      	cmp	r3, #0
 801daa8:	f000 81ca 	beq.w	801de40 <nema_set_blend+0x5a4>
 801daac:	f1b8 0f1d 	cmp.w	r8, #29
 801dab0:	f000 8150 	beq.w	801dd54 <nema_set_blend+0x4b8>
 801dab4:	4b36      	ldr	r3, [pc, #216]	; (801db90 <nema_set_blend+0x2f4>)
 801dab6:	a826      	add	r0, sp, #152	; 0x98
 801dab8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801dabc:	ea43 13ca 	orr.w	r3, r3, sl, lsl #7
 801dac0:	9803      	ldr	r0, [sp, #12]
 801dac2:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
 801dac6:	4303      	orrs	r3, r0
 801dac8:	e941 3c10 	strd	r3, ip, [r1, #-64]	; 0x40
 801dacc:	1c55      	adds	r5, r2, #1
 801dace:	f1b9 0f00 	cmp.w	r9, #0
 801dad2:	f040 8150 	bne.w	801dd76 <nema_set_blend+0x4da>
 801dad6:	46ce      	mov	lr, r9
 801dad8:	4b2d      	ldr	r3, [pc, #180]	; (801db90 <nema_set_blend+0x2f4>)
 801dada:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801dade:	f8cd 9018 	str.w	r9, [sp, #24]
 801dae2:	9308      	str	r3, [sp, #32]
 801dae4:	9b07      	ldr	r3, [sp, #28]
 801dae6:	2b00      	cmp	r3, #0
 801dae8:	d163      	bne.n	801dbb2 <nema_set_blend+0x316>
 801daea:	4b2a      	ldr	r3, [pc, #168]	; (801db94 <nema_set_blend+0x2f8>)
 801daec:	f8dd a008 	ldr.w	sl, [sp, #8]
 801daf0:	9308      	str	r3, [sp, #32]
 801daf2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801daf6:	9f01      	ldr	r7, [sp, #4]
 801daf8:	e061      	b.n	801dbbe <nema_set_blend+0x322>
 801dafa:	f04f 0900 	mov.w	r9, #0
 801dafe:	46c8      	mov	r8, r9
 801db00:	f8cd 901c 	str.w	r9, [sp, #28]
 801db04:	2b00      	cmp	r3, #0
 801db06:	f000 8153 	beq.w	801ddb0 <nema_set_blend+0x514>
 801db0a:	9b01      	ldr	r3, [sp, #4]
 801db0c:	2b05      	cmp	r3, #5
 801db0e:	f200 8169 	bhi.w	801dde4 <nema_set_blend+0x548>
 801db12:	2300      	movs	r3, #0
 801db14:	f04f 0b01 	mov.w	fp, #1
 801db18:	461a      	mov	r2, r3
 801db1a:	9306      	str	r3, [sp, #24]
 801db1c:	9309      	str	r3, [sp, #36]	; 0x24
 801db1e:	9315      	str	r3, [sp, #84]	; 0x54
 801db20:	9b07      	ldr	r3, [sp, #28]
 801db22:	2b00      	cmp	r3, #0
 801db24:	f000 8200 	beq.w	801df28 <nema_set_blend+0x68c>
 801db28:	930a      	str	r3, [sp, #40]	; 0x28
 801db2a:	4b06      	ldr	r3, [pc, #24]	; (801db44 <nema_set_blend+0x2a8>)
 801db2c:	2001      	movs	r0, #1
 801db2e:	9308      	str	r3, [sp, #32]
 801db30:	2303      	movs	r3, #3
 801db32:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801db36:	e71b      	b.n	801d970 <nema_set_blend+0xd4>
 801db38:	20197c14 	.word	0x20197c14
 801db3c:	20197c15 	.word	0x20197c15
 801db40:	20197e24 	.word	0x20197e24
 801db44:	080c0003 	.word	0x080c0003
 801db48:	000761c5 	.word	0x000761c5
 801db4c:	000761c7 	.word	0x000761c7
 801db50:	800761c5 	.word	0x800761c5
 801db54:	80076185 	.word	0x80076185
 801db58:	80076187 	.word	0x80076187
 801db5c:	800121c5 	.word	0x800121c5
 801db60:	800121c7 	.word	0x800121c7
 801db64:	000121c5 	.word	0x000121c5
 801db68:	000461c7 	.word	0x000461c7
 801db6c:	800461c7 	.word	0x800461c7
 801db70:	000121c7 	.word	0x000121c7
 801db74:	00012185 	.word	0x00012185
 801db78:	00012187 	.word	0x00012187
 801db7c:	0802bbb8 	.word	0x0802bbb8
 801db80:	02009408 	.word	0x02009408
 801db84:	00f40182 	.word	0x00f40182
 801db88:	000c100b 	.word	0x000c100b
 801db8c:	1000fc00 	.word	0x1000fc00
 801db90:	080c0000 	.word	0x080c0000
 801db94:	080c0002 	.word	0x080c0002
 801db98:	00076185 	.word	0x00076185
 801db9c:	00076187 	.word	0x00076187
 801dba0:	000461c5 	.word	0x000461c5
 801dba4:	00046187 	.word	0x00046187
 801dba8:	4615      	mov	r5, r2
 801dbaa:	460a      	mov	r2, r1
 801dbac:	f1b9 0f00 	cmp.w	r9, #0
 801dbb0:	d098      	beq.n	801dae4 <nema_set_blend+0x248>
 801dbb2:	9b06      	ldr	r3, [sp, #24]
 801dbb4:	2b00      	cmp	r3, #0
 801dbb6:	f000 8202 	beq.w	801dfbe <nema_set_blend+0x722>
 801dbba:	2600      	movs	r6, #0
 801dbbc:	9f01      	ldr	r7, [sp, #4]
 801dbbe:	48c1      	ldr	r0, [pc, #772]	; (801dec4 <nema_set_blend+0x628>)
 801dbc0:	49c1      	ldr	r1, [pc, #772]	; (801dec8 <nema_set_blend+0x62c>)
 801dbc2:	f850 3027 	ldr.w	r3, [r0, r7, lsl #2]
 801dbc6:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 801dbca:	015b      	lsls	r3, r3, #5
 801dbcc:	ea43 3387 	orr.w	r3, r3, r7, lsl #14
 801dbd0:	9f08      	ldr	r7, [sp, #32]
 801dbd2:	ea47 5e0e 	orr.w	lr, r7, lr, lsl #20
 801dbd6:	4fbd      	ldr	r7, [pc, #756]	; (801decc <nema_set_blend+0x630>)
 801dbd8:	ea4e 1eca 	orr.w	lr, lr, sl, lsl #7
 801dbdc:	431f      	orrs	r7, r3
 801dbde:	ab26      	add	r3, sp, #152	; 0x98
 801dbe0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801dbe4:	4337      	orrs	r7, r6
 801dbe6:	e942 e710 	strd	lr, r7, [r2, #-64]	; 0x40
 801dbea:	2e00      	cmp	r6, #0
 801dbec:	f000 813f 	beq.w	801de6e <nema_set_blend+0x5d2>
 801dbf0:	9804      	ldr	r0, [sp, #16]
 801dbf2:	f7fe fead 	bl	801c950 <nema_matmul_bypass>
 801dbf6:	4629      	mov	r1, r5
 801dbf8:	2200      	movs	r2, #0
 801dbfa:	a816      	add	r0, sp, #88	; 0x58
 801dbfc:	f7fe ffa2 	bl	801cb44 <nema_load_frag_shader>
 801dc00:	4bb3      	ldr	r3, [pc, #716]	; (801ded0 <nema_set_blend+0x634>)
 801dc02:	f1c5 0520 	rsb	r5, r5, #32
 801dc06:	6818      	ldr	r0, [r3, #0]
 801dc08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dc0a:	ea43 0800 	orr.w	r8, r3, r0
 801dc0e:	ea48 0005 	orr.w	r0, r8, r5
 801dc12:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
 801dc16:	f7fe ffaf 	bl	801cb78 <nema_set_frag_ptr>
 801dc1a:	b027      	add	sp, #156	; 0x9c
 801dc1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc20:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801dc24:	930f      	str	r3, [sp, #60]	; 0x3c
 801dc26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dc28:	2b00      	cmp	r3, #0
 801dc2a:	f43f aefb 	beq.w	801da24 <nema_set_blend+0x188>
 801dc2e:	f04f 0811 	mov.w	r8, #17
 801dc32:	e701      	b.n	801da38 <nema_set_blend+0x19c>
 801dc34:	9b00      	ldr	r3, [sp, #0]
 801dc36:	1c5a      	adds	r2, r3, #1
 801dc38:	f000 8136 	beq.w	801dea8 <nema_set_blend+0x60c>
 801dc3c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801dc40:	9a05      	ldr	r2, [sp, #20]
 801dc42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801dc46:	9204      	str	r2, [sp, #16]
 801dc48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801dc4a:	2a00      	cmp	r2, #0
 801dc4c:	f000 80a9 	beq.w	801dda2 <nema_set_blend+0x506>
 801dc50:	f44f 2440 	mov.w	r4, #786432	; 0xc0000
 801dc54:	499f      	ldr	r1, [pc, #636]	; (801ded4 <nema_set_blend+0x638>)
 801dc56:	4aa0      	ldr	r2, [pc, #640]	; (801ded8 <nema_set_blend+0x63c>)
 801dc58:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 801dc5c:	9219      	str	r2, [sp, #100]	; 0x64
 801dc5e:	2204      	movs	r2, #4
 801dc60:	9116      	str	r1, [sp, #88]	; 0x58
 801dc62:	9205      	str	r2, [sp, #20]
 801dc64:	2102      	movs	r1, #2
 801dc66:	2203      	movs	r2, #3
 801dc68:	e9cd 5417 	strd	r5, r4, [sp, #92]	; 0x5c
 801dc6c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801dc6e:	2c00      	cmp	r4, #0
 801dc70:	d04f      	beq.n	801dd12 <nema_set_blend+0x476>
 801dc72:	9c00      	ldr	r4, [sp, #0]
 801dc74:	f1b4 3fff 	cmp.w	r4, #4294967295
 801dc78:	d04b      	beq.n	801dd12 <nema_set_blend+0x476>
 801dc7a:	f241 050b 	movw	r5, #4107	; 0x100b
 801dc7e:	2300      	movs	r3, #0
 801dc80:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 801dc84:	a826      	add	r0, sp, #152	; 0x98
 801dc86:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801dc8a:	9910      	ldr	r1, [sp, #64]	; 0x40
 801dc8c:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 801dc90:	ea45 11c1 	orr.w	r1, r5, r1, lsl #7
 801dc94:	f1b9 0f01 	cmp.w	r9, #1
 801dc98:	f840 1c40 	str.w	r1, [r0, #-64]
 801dc9c:	f444 4420 	orr.w	r4, r4, #40960	; 0xa000
 801dca0:	4611      	mov	r1, r2
 801dca2:	f840 3c3c 	str.w	r3, [r0, #-60]
 801dca6:	9a05      	ldr	r2, [sp, #20]
 801dca8:	f63f aef0 	bhi.w	801da8c <nema_set_blend+0x1f0>
 801dcac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dcae:	2b00      	cmp	r3, #0
 801dcb0:	f47f aeec 	bne.w	801da8c <nema_set_blend+0x1f0>
 801dcb4:	9b00      	ldr	r3, [sp, #0]
 801dcb6:	3301      	adds	r3, #1
 801dcb8:	f47f aee8 	bne.w	801da8c <nema_set_blend+0x1f0>
 801dcbc:	9b02      	ldr	r3, [sp, #8]
 801dcbe:	4553      	cmp	r3, sl
 801dcc0:	f47f aee4 	bne.w	801da8c <nema_set_blend+0x1f0>
 801dcc4:	f1b9 0f00 	cmp.w	r9, #0
 801dcc8:	bf15      	itete	ne
 801dcca:	f44f 6600 	movne.w	r6, #2048	; 0x800
 801dcce:	f44f 5600 	moveq.w	r6, #8192	; 0x2000
 801dcd2:	f44f 1500 	movne.w	r5, #2097152	; 0x200000
 801dcd6:	f44f 0500 	moveq.w	r5, #8388608	; 0x800000
 801dcda:	9f01      	ldr	r7, [sp, #4]
 801dcdc:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 801dec4 <nema_set_blend+0x628>
 801dce0:	4879      	ldr	r0, [pc, #484]	; (801dec8 <nema_set_blend+0x62c>)
 801dce2:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 801dce6:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
 801dcea:	015b      	lsls	r3, r3, #5
 801dcec:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 801dcf0:	f043 430a 	orr.w	r3, r3, #2315255808	; 0x8a000000
 801dcf4:	f043 0306 	orr.w	r3, r3, #6
 801dcf8:	4333      	orrs	r3, r6
 801dcfa:	432b      	orrs	r3, r5
 801dcfc:	4877      	ldr	r0, [pc, #476]	; (801dedc <nema_set_blend+0x640>)
 801dcfe:	9d02      	ldr	r5, [sp, #8]
 801dd00:	ae26      	add	r6, sp, #152	; 0x98
 801dd02:	ea40 10c5 	orr.w	r0, r0, r5, lsl #7
 801dd06:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 801dd0a:	4615      	mov	r5, r2
 801dd0c:	e941 0310 	strd	r0, r3, [r1, #-64]	; 0x40
 801dd10:	e76e      	b.n	801dbf0 <nema_set_blend+0x354>
 801dd12:	f043 5480 	orr.w	r4, r3, #268435456	; 0x10000000
 801dd16:	e6b5      	b.n	801da84 <nema_set_blend+0x1e8>
 801dd18:	f04f 3020 	mov.w	r0, #538976288	; 0x20202020
 801dd1c:	f7fe ff44 	bl	801cba8 <nema_set_raster_color>
 801dd20:	2000      	movs	r0, #0
 801dd22:	f7fd ff93 	bl	801bc4c <nema_enable_gradient>
 801dd26:	f04f 0800 	mov.w	r8, #0
 801dd2a:	f04f 0901 	mov.w	r9, #1
 801dd2e:	23ff      	movs	r3, #255	; 0xff
 801dd30:	f240 1401 	movw	r4, #257	; 0x101
 801dd34:	f04f 3aff 	mov.w	sl, #4294967295
 801dd38:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801dd3c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801dd40:	e9cd 880c 	strd	r8, r8, [sp, #48]	; 0x30
 801dd44:	4641      	mov	r1, r8
 801dd46:	f8cd 9004 	str.w	r9, [sp, #4]
 801dd4a:	461a      	mov	r2, r3
 801dd4c:	46a3      	mov	fp, r4
 801dd4e:	f8cd a000 	str.w	sl, [sp]
 801dd52:	e5c9      	b.n	801d8e8 <nema_set_blend+0x4c>
 801dd54:	2f0e      	cmp	r7, #14
 801dd56:	f47f aead 	bne.w	801dab4 <nema_set_blend+0x218>
 801dd5a:	9b03      	ldr	r3, [sp, #12]
 801dd5c:	2b00      	cmp	r3, #0
 801dd5e:	f47f aea9 	bne.w	801dab4 <nema_set_blend+0x218>
 801dd62:	9b06      	ldr	r3, [sp, #24]
 801dd64:	2b00      	cmp	r3, #0
 801dd66:	f47f aea5 	bne.w	801dab4 <nema_set_blend+0x218>
 801dd6a:	4615      	mov	r5, r2
 801dd6c:	460a      	mov	r2, r1
 801dd6e:	f1b9 0f00 	cmp.w	r9, #0
 801dd72:	f43f aeb0 	beq.w	801dad6 <nema_set_blend+0x23a>
 801dd76:	f04f 0e00 	mov.w	lr, #0
 801dd7a:	4b59      	ldr	r3, [pc, #356]	; (801dee0 <nema_set_blend+0x644>)
 801dd7c:	9308      	str	r3, [sp, #32]
 801dd7e:	9b01      	ldr	r3, [sp, #4]
 801dd80:	2b00      	cmp	r3, #0
 801dd82:	f000 8123 	beq.w	801dfcc <nema_set_blend+0x730>
 801dd86:	2b01      	cmp	r3, #1
 801dd88:	f04f 0600 	mov.w	r6, #0
 801dd8c:	f000 8137 	beq.w	801dffe <nema_set_blend+0x762>
 801dd90:	461f      	mov	r7, r3
 801dd92:	e714      	b.n	801dbbe <nema_set_blend+0x322>
 801dd94:	e9dd 6c11 	ldrd	r6, ip, [sp, #68]	; 0x44
 801dd98:	e9dd 7413 	ldrd	r7, r4, [sp, #76]	; 0x4c
 801dd9c:	f04f 081d 	mov.w	r8, #29
 801dda0:	e64a      	b.n	801da38 <nema_set_blend+0x19c>
 801dda2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dda4:	2a00      	cmp	r2, #0
 801dda6:	d046      	beq.n	801de36 <nema_set_blend+0x59a>
 801dda8:	f44f 2440 	mov.w	r4, #786432	; 0xc0000
 801ddac:	494d      	ldr	r1, [pc, #308]	; (801dee4 <nema_set_blend+0x648>)
 801ddae:	e752      	b.n	801dc56 <nema_set_blend+0x3ba>
 801ddb0:	9b02      	ldr	r3, [sp, #8]
 801ddb2:	2b00      	cmp	r3, #0
 801ddb4:	f47f aea9 	bne.w	801db0a <nema_set_blend+0x26e>
 801ddb8:	9b00      	ldr	r3, [sp, #0]
 801ddba:	3301      	adds	r3, #1
 801ddbc:	f000 8114 	beq.w	801dfe8 <nema_set_blend+0x74c>
 801ddc0:	9802      	ldr	r0, [sp, #8]
 801ddc2:	f7fe fdc5 	bl	801c950 <nema_matmul_bypass>
 801ddc6:	4b42      	ldr	r3, [pc, #264]	; (801ded0 <nema_set_blend+0x634>)
 801ddc8:	4947      	ldr	r1, [pc, #284]	; (801dee8 <nema_set_blend+0x64c>)
 801ddca:	9800      	ldr	r0, [sp, #0]
 801ddcc:	681a      	ldr	r2, [r3, #0]
 801ddce:	4b47      	ldr	r3, [pc, #284]	; (801deec <nema_set_blend+0x650>)
 801ddd0:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 801ddd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ddd8:	4318      	orrs	r0, r3
 801ddda:	f7fe fecd 	bl	801cb78 <nema_set_frag_ptr>
 801ddde:	b027      	add	sp, #156	; 0x9c
 801dde0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dde4:	2301      	movs	r3, #1
 801dde6:	930a      	str	r3, [sp, #40]	; 0x28
 801dde8:	9304      	str	r3, [sp, #16]
 801ddea:	469b      	mov	fp, r3
 801ddec:	2303      	movs	r3, #3
 801ddee:	f04f 0e00 	mov.w	lr, #0
 801ddf2:	9303      	str	r3, [sp, #12]
 801ddf4:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 801ddf8:	f503 2340 	add.w	r3, r3, #786432	; 0xc0000
 801ddfc:	9308      	str	r3, [sp, #32]
 801ddfe:	4b3c      	ldr	r3, [pc, #240]	; (801def0 <nema_set_blend+0x654>)
 801de00:	f8cd e018 	str.w	lr, [sp, #24]
 801de04:	9312      	str	r3, [sp, #72]	; 0x48
 801de06:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801de0a:	9311      	str	r3, [sp, #68]	; 0x44
 801de0c:	4b39      	ldr	r3, [pc, #228]	; (801def4 <nema_set_blend+0x658>)
 801de0e:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 801de12:	9314      	str	r3, [sp, #80]	; 0x50
 801de14:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801de18:	9313      	str	r3, [sp, #76]	; 0x4c
 801de1a:	f5a3 23c8 	sub.w	r3, r3, #409600	; 0x64000
 801de1e:	f8cd e054 	str.w	lr, [sp, #84]	; 0x54
 801de22:	4835      	ldr	r0, [pc, #212]	; (801def8 <nema_set_blend+0x65c>)
 801de24:	4935      	ldr	r1, [pc, #212]	; (801defc <nema_set_blend+0x660>)
 801de26:	4a36      	ldr	r2, [pc, #216]	; (801df00 <nema_set_blend+0x664>)
 801de28:	461d      	mov	r5, r3
 801de2a:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 801df18 <nema_set_blend+0x67c>
 801de2e:	4e35      	ldr	r6, [pc, #212]	; (801df04 <nema_set_blend+0x668>)
 801de30:	4c35      	ldr	r4, [pc, #212]	; (801df08 <nema_set_blend+0x66c>)
 801de32:	4f36      	ldr	r7, [pc, #216]	; (801df0c <nema_set_blend+0x670>)
 801de34:	e5e7      	b.n	801da06 <nema_set_blend+0x16a>
 801de36:	4611      	mov	r1, r2
 801de38:	2202      	movs	r2, #2
 801de3a:	9205      	str	r2, [sp, #20]
 801de3c:	2201      	movs	r2, #1
 801de3e:	e715      	b.n	801dc6c <nema_set_blend+0x3d0>
 801de40:	9b01      	ldr	r3, [sp, #4]
 801de42:	2b01      	cmp	r3, #1
 801de44:	f47f ae32 	bne.w	801daac <nema_set_blend+0x210>
 801de48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801de4a:	2b00      	cmp	r3, #0
 801de4c:	f47f ae2e 	bne.w	801daac <nema_set_blend+0x210>
 801de50:	a826      	add	r0, sp, #152	; 0x98
 801de52:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801de56:	4b21      	ldr	r3, [pc, #132]	; (801dedc <nema_set_blend+0x640>)
 801de58:	9802      	ldr	r0, [sp, #8]
 801de5a:	f841 6c3c 	str.w	r6, [r1, #-60]
 801de5e:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
 801de62:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
 801de66:	4615      	mov	r5, r2
 801de68:	f841 3c40 	str.w	r3, [r1, #-64]
 801de6c:	e6c0      	b.n	801dbf0 <nema_set_blend+0x354>
 801de6e:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
 801de72:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 801de76:	462a      	mov	r2, r5
 801de78:	3501      	adds	r5, #1
 801de7a:	f850 0029 	ldr.w	r0, [r0, r9, lsl #2]
 801de7e:	f851 1029 	ldr.w	r1, [r1, r9, lsl #2]
 801de82:	0140      	lsls	r0, r0, #5
 801de84:	4b22      	ldr	r3, [pc, #136]	; (801df10 <nema_set_blend+0x674>)
 801de86:	ea40 3081 	orr.w	r0, r0, r1, lsl #14
 801de8a:	4303      	orrs	r3, r0
 801de8c:	4921      	ldr	r1, [pc, #132]	; (801df14 <nema_set_blend+0x678>)
 801de8e:	9802      	ldr	r0, [sp, #8]
 801de90:	433b      	orrs	r3, r7
 801de92:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
 801de96:	a826      	add	r0, sp, #152	; 0x98
 801de98:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 801de9c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801de9e:	4333      	orrs	r3, r6
 801dea0:	4301      	orrs	r1, r0
 801dea2:	e942 1310 	strd	r1, r3, [r2, #-64]	; 0x40
 801dea6:	e6a3      	b.n	801dbf0 <nema_set_blend+0x354>
 801dea8:	9b04      	ldr	r3, [sp, #16]
 801deaa:	2b00      	cmp	r3, #0
 801deac:	f000 8082 	beq.w	801dfb4 <nema_set_blend+0x718>
 801deb0:	9a05      	ldr	r2, [sp, #20]
 801deb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801deb4:	9203      	str	r2, [sp, #12]
 801deb6:	920a      	str	r2, [sp, #40]	; 0x28
 801deb8:	4a09      	ldr	r2, [pc, #36]	; (801dee0 <nema_set_blend+0x644>)
 801deba:	f443 4330 	orr.w	r3, r3, #45056	; 0xb000
 801debe:	9208      	str	r2, [sp, #32]
 801dec0:	e6c2      	b.n	801dc48 <nema_set_blend+0x3ac>
 801dec2:	bf00      	nop
 801dec4:	0802bbc8 	.word	0x0802bbc8
 801dec8:	0802bbf8 	.word	0x0802bbf8
 801decc:	0a002007 	.word	0x0a002007
 801ded0:	20000064 	.word	0x20000064
 801ded4:	100c118b 	.word	0x100c118b
 801ded8:	0081a042 	.word	0x0081a042
 801dedc:	080c0002 	.word	0x080c0002
 801dee0:	080c0000 	.word	0x080c0000
 801dee4:	100c1183 	.word	0x100c1183
 801dee8:	0802bbb8 	.word	0x0802bbb8
 801deec:	141f801f 	.word	0x141f801f
 801def0:	000761c7 	.word	0x000761c7
 801def4:	00076187 	.word	0x00076187
 801def8:	000121c7 	.word	0x000121c7
 801defc:	800121c7 	.word	0x800121c7
 801df00:	00012187 	.word	0x00012187
 801df04:	800461c7 	.word	0x800461c7
 801df08:	00046187 	.word	0x00046187
 801df0c:	80046187 	.word	0x80046187
 801df10:	80080206 	.word	0x80080206
 801df14:	004e0002 	.word	0x004e0002
 801df18:	000461c7 	.word	0x000461c7
 801df1c:	2301      	movs	r3, #1
 801df1e:	2202      	movs	r2, #2
 801df20:	9304      	str	r3, [sp, #16]
 801df22:	4619      	mov	r1, r3
 801df24:	4c38      	ldr	r4, [pc, #224]	; (801e008 <nema_set_blend+0x76c>)
 801df26:	e5ad      	b.n	801da84 <nema_set_blend+0x1e8>
 801df28:	f1b9 0f00 	cmp.w	r9, #0
 801df2c:	d055      	beq.n	801dfda <nema_set_blend+0x73e>
 801df2e:	2301      	movs	r3, #1
 801df30:	2103      	movs	r1, #3
 801df32:	930a      	str	r3, [sp, #40]	; 0x28
 801df34:	e9cd 1303 	strd	r1, r3, [sp, #12]
 801df38:	4b34      	ldr	r3, [pc, #208]	; (801e00c <nema_set_blend+0x770>)
 801df3a:	9308      	str	r3, [sp, #32]
 801df3c:	e518      	b.n	801d970 <nema_set_blend+0xd4>
 801df3e:	2c00      	cmp	r4, #0
 801df40:	bfbd      	ittte	lt
 801df42:	f02b 4b00 	biclt.w	fp, fp, #2147483648	; 0x80000000
 801df46:	f04f 4202 	movlt.w	r2, #2181038080	; 0x82000000
 801df4a:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 801df4e:	f04f 7200 	movge.w	r2, #33554432	; 0x2000000
 801df52:	b111      	cbz	r1, 801df5a <nema_set_blend+0x6be>
 801df54:	4613      	mov	r3, r2
 801df56:	f02b 7b00 	bic.w	fp, fp, #33554432	; 0x2000000
 801df5a:	9a01      	ldr	r2, [sp, #4]
 801df5c:	ea42 2009 	orr.w	r0, r2, r9, lsl #8
 801df60:	4318      	orrs	r0, r3
 801df62:	f7fe fe0f 	bl	801cb84 <nema_set_rop_blend_mode>
 801df66:	ea4f 505b 	mov.w	r0, fp, lsr #21
 801df6a:	4b29      	ldr	r3, [pc, #164]	; (801e010 <nema_set_blend+0x774>)
 801df6c:	0540      	lsls	r0, r0, #21
 801df6e:	f040 0201 	orr.w	r2, r0, #1
 801df72:	789b      	ldrb	r3, [r3, #2]
 801df74:	2a01      	cmp	r2, #1
 801df76:	9201      	str	r2, [sp, #4]
 801df78:	9305      	str	r3, [sp, #20]
 801df7a:	f43f adbe 	beq.w	801dafa <nema_set_blend+0x25e>
 801df7e:	f00b 4380 	and.w	r3, fp, #1073741824	; 0x40000000
 801df82:	9315      	str	r3, [sp, #84]	; 0x54
 801df84:	f3cb 7380 	ubfx	r3, fp, #30, #1
 801df88:	9306      	str	r3, [sp, #24]
 801df8a:	f00b 5300 	and.w	r3, fp, #536870912	; 0x20000000
 801df8e:	9309      	str	r3, [sp, #36]	; 0x24
 801df90:	2301      	movs	r3, #1
 801df92:	f04f 0900 	mov.w	r9, #0
 801df96:	f00b 5280 	and.w	r2, fp, #268435456	; 0x10000000
 801df9a:	f8dd b004 	ldr.w	fp, [sp, #4]
 801df9e:	9301      	str	r3, [sp, #4]
 801dfa0:	4b1c      	ldr	r3, [pc, #112]	; (801e014 <nema_set_blend+0x778>)
 801dfa2:	46c8      	mov	r8, r9
 801dfa4:	f8cd 901c 	str.w	r9, [sp, #28]
 801dfa8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801dfac:	f8cd 9010 	str.w	r9, [sp, #16]
 801dfb0:	9308      	str	r3, [sp, #32]
 801dfb2:	e4dd      	b.n	801d970 <nema_set_blend+0xd4>
 801dfb4:	2201      	movs	r2, #1
 801dfb6:	9b05      	ldr	r3, [sp, #20]
 801dfb8:	9204      	str	r2, [sp, #16]
 801dfba:	930a      	str	r3, [sp, #40]	; 0x28
 801dfbc:	e644      	b.n	801dc48 <nema_set_blend+0x3ac>
 801dfbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dfc0:	2b00      	cmp	r3, #0
 801dfc2:	f43f aedc 	beq.w	801dd7e <nema_set_blend+0x4e2>
 801dfc6:	9e06      	ldr	r6, [sp, #24]
 801dfc8:	9f01      	ldr	r7, [sp, #4]
 801dfca:	e5f8      	b.n	801dbbe <nema_set_blend+0x322>
 801dfcc:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
 801dfd0:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 801dfd4:	4910      	ldr	r1, [pc, #64]	; (801e018 <nema_set_blend+0x77c>)
 801dfd6:	4811      	ldr	r0, [pc, #68]	; (801e01c <nema_set_blend+0x780>)
 801dfd8:	e74f      	b.n	801de7a <nema_set_blend+0x5de>
 801dfda:	4b0e      	ldr	r3, [pc, #56]	; (801e014 <nema_set_blend+0x778>)
 801dfdc:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801dfe0:	9308      	str	r3, [sp, #32]
 801dfe2:	e9cd 9903 	strd	r9, r9, [sp, #12]
 801dfe6:	e4c3      	b.n	801d970 <nema_set_blend+0xd4>
 801dfe8:	2001      	movs	r0, #1
 801dfea:	f7fe fcb1 	bl	801c950 <nema_matmul_bypass>
 801dfee:	4a0c      	ldr	r2, [pc, #48]	; (801e020 <nema_set_blend+0x784>)
 801dff0:	4b0c      	ldr	r3, [pc, #48]	; (801e024 <nema_set_blend+0x788>)
 801dff2:	6810      	ldr	r0, [r2, #0]
 801dff4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 801dff8:	f7fe fdbe 	bl	801cb78 <nema_set_frag_ptr>
 801dffc:	e6ef      	b.n	801ddde <nema_set_blend+0x542>
 801dffe:	4637      	mov	r7, r6
 801e000:	4905      	ldr	r1, [pc, #20]	; (801e018 <nema_set_blend+0x77c>)
 801e002:	4806      	ldr	r0, [pc, #24]	; (801e01c <nema_set_blend+0x780>)
 801e004:	e739      	b.n	801de7a <nema_set_blend+0x5de>
 801e006:	bf00      	nop
 801e008:	1000fc00 	.word	0x1000fc00
 801e00c:	080c0003 	.word	0x080c0003
 801e010:	20197e24 	.word	0x20197e24
 801e014:	080c0000 	.word	0x080c0000
 801e018:	0802bbf8 	.word	0x0802bbf8
 801e01c:	0802bbc8 	.word	0x0802bbc8
 801e020:	20000064 	.word	0x20000064
 801e024:	141f001f 	.word	0x141f001f

0801e028 <nema_set_const_color>:
 801e028:	b510      	push	{r4, lr}
 801e02a:	4604      	mov	r4, r0
 801e02c:	2001      	movs	r0, #1
 801e02e:	4621      	mov	r1, r4
 801e030:	f7fd fde4 	bl	801bbfc <nema_set_const_reg>
 801e034:	4b04      	ldr	r3, [pc, #16]	; (801e048 <nema_set_const_color+0x20>)
 801e036:	781b      	ldrb	r3, [r3, #0]
 801e038:	b903      	cbnz	r3, 801e03c <nema_set_const_color+0x14>
 801e03a:	bd10      	pop	{r4, pc}
 801e03c:	4620      	mov	r0, r4
 801e03e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e042:	f7fe bda5 	b.w	801cb90 <nema_set_rop_const_color>
 801e046:	bf00      	nop
 801e048:	20197c15 	.word	0x20197c15

0801e04c <_ZN8touchgfx8HALGPU2D17unlockFrameBufferEv>:
 801e04c:	f7f8 beb0 	b.w	8016db0 <_ZN8touchgfx3HAL17unlockFrameBufferEv>

0801e050 <_ZN8touchgfx8HALGPU2D10beginFrameEv>:
 801e050:	2200      	movs	r2, #0
 801e052:	f880 20a5 	strb.w	r2, [r0, #165]	; 0xa5
 801e056:	f7f8 bdaf 	b.w	8016bb8 <_ZN8touchgfx3HAL10beginFrameEv>
 801e05a:	bf00      	nop

0801e05c <_ZN8touchgfx8HALGPU2D15lockFrameBufferEv>:
 801e05c:	b510      	push	{r4, lr}
 801e05e:	4604      	mov	r4, r0
 801e060:	307c      	adds	r0, #124	; 0x7c
 801e062:	f7ff fbd5 	bl	801d810 <nema_cl_wait>
 801e066:	4620      	mov	r0, r4
 801e068:	f7f9 fb64 	bl	8017734 <_ZN8touchgfx3HAL15lockFrameBufferEv>
 801e06c:	2300      	movs	r3, #0
 801e06e:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 801e072:	bd10      	pop	{r4, pc}

0801e074 <_ZN8touchgfx8HALGPU2D8endFrameEv>:
 801e074:	b510      	push	{r4, lr}
 801e076:	4604      	mov	r4, r0
 801e078:	f7f8 fdaa 	bl	8016bd0 <_ZN8touchgfx3HAL8endFrameEv>
 801e07c:	2200      	movs	r2, #0
 801e07e:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 801e082:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
 801e086:	347c      	adds	r4, #124	; 0x7c
 801e088:	b113      	cbz	r3, 801e090 <_ZN8touchgfx8HALGPU2D8endFrameEv+0x1c>
 801e08a:	4620      	mov	r0, r4
 801e08c:	f7ff fb50 	bl	801d730 <nema_cl_submit>
 801e090:	4620      	mov	r0, r4
 801e092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e096:	f7ff bbbb 	b.w	801d810 <nema_cl_wait>
 801e09a:	bf00      	nop

0801e09c <_ZN8touchgfx8HALGPU2D10initializeEi.part.2>:
 801e09c:	b508      	push	{r3, lr}
 801e09e:	4a03      	ldr	r2, [pc, #12]	; (801e0ac <_ZN8touchgfx8HALGPU2D10initializeEi.part.2+0x10>)
 801e0a0:	4b03      	ldr	r3, [pc, #12]	; (801e0b0 <_ZN8touchgfx8HALGPU2D10initializeEi.part.2+0x14>)
 801e0a2:	2118      	movs	r1, #24
 801e0a4:	4803      	ldr	r0, [pc, #12]	; (801e0b4 <_ZN8touchgfx8HALGPU2D10initializeEi.part.2+0x18>)
 801e0a6:	f00b f809 	bl	80290bc <__assert_func>
 801e0aa:	bf00      	nop
 801e0ac:	0802bd7c 	.word	0x0802bd7c
 801e0b0:	0802bc28 	.word	0x0802bc28
 801e0b4:	0802bc80 	.word	0x0802bc80

0801e0b8 <_ZN8touchgfx8HALGPU2D10initializeEv>:
 801e0b8:	b570      	push	{r4, r5, r6, lr}
 801e0ba:	4606      	mov	r6, r0
 801e0bc:	b08a      	sub	sp, #40	; 0x28
 801e0be:	466c      	mov	r4, sp
 801e0c0:	f7f8 fd93 	bl	8016bea <_ZN8touchgfx3HAL10initializeEv>
 801e0c4:	f106 057c 	add.w	r5, r6, #124	; 0x7c
 801e0c8:	4668      	mov	r0, sp
 801e0ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801e0ce:	f7ff f89f 	bl	801d210 <nema_cl_create_sized>
 801e0d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e0d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e0d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e0d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e0da:	e894 0003 	ldmia.w	r4, {r0, r1}
 801e0de:	e885 0003 	stmia.w	r5, {r0, r1}
 801e0e2:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 801e0e6:	b10b      	cbz	r3, 801e0ec <_ZN8touchgfx8HALGPU2D10initializeEv+0x34>
 801e0e8:	b00a      	add	sp, #40	; 0x28
 801e0ea:	bd70      	pop	{r4, r5, r6, pc}
 801e0ec:	f7ff ffd6 	bl	801e09c <_ZN8touchgfx8HALGPU2D10initializeEi.part.2>

0801e0f0 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
 801e0f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e0f2:	f04f 0c01 	mov.w	ip, #1
 801e0f6:	2500      	movs	r5, #0
 801e0f8:	f8bd 7014 	ldrh.w	r7, [sp, #20]
 801e0fc:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 801e100:	60c3      	str	r3, [r0, #12]
 801e102:	42b7      	cmp	r7, r6
 801e104:	bf2c      	ite	cs
 801e106:	f04f 0e00 	movcs.w	lr, #0
 801e10a:	f04f 0e01 	movcc.w	lr, #1
 801e10e:	4b23      	ldr	r3, [pc, #140]	; (801e19c <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xac>)
 801e110:	e9c0 1201 	strd	r1, r2, [r0, #4]
 801e114:	6643      	str	r3, [r0, #100]	; 0x64
 801e116:	4b22      	ldr	r3, [pc, #136]	; (801e1a0 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xb0>)
 801e118:	6105      	str	r5, [r0, #16]
 801e11a:	e9c0 5505 	strd	r5, r5, [r0, #20]
 801e11e:	61c5      	str	r5, [r0, #28]
 801e120:	6205      	str	r5, [r0, #32]
 801e122:	8485      	strh	r5, [r0, #36]	; 0x24
 801e124:	f8c0 5026 	str.w	r5, [r0, #38]	; 0x26
 801e128:	f880 502a 	strb.w	r5, [r0, #42]	; 0x2a
 801e12c:	62c5      	str	r5, [r0, #44]	; 0x2c
 801e12e:	8605      	strh	r5, [r0, #48]	; 0x30
 801e130:	e9c0 550e 	strd	r5, r5, [r0, #56]	; 0x38
 801e134:	e9c0 5510 	strd	r5, r5, [r0, #64]	; 0x40
 801e138:	f880 5048 	strb.w	r5, [r0, #72]	; 0x48
 801e13c:	f880 504a 	strb.w	r5, [r0, #74]	; 0x4a
 801e140:	f880 504b 	strb.w	r5, [r0, #75]	; 0x4b
 801e144:	e9c0 5513 	strd	r5, r5, [r0, #76]	; 0x4c
 801e148:	e9c0 5515 	strd	r5, r5, [r0, #84]	; 0x54
 801e14c:	e9c0 5517 	strd	r5, r5, [r0, #92]	; 0x5c
 801e150:	6685      	str	r5, [r0, #104]	; 0x68
 801e152:	f880 506c 	strb.w	r5, [r0, #108]	; 0x6c
 801e156:	4a13      	ldr	r2, [pc, #76]	; (801e1a4 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xb4>)
 801e158:	f880 c049 	strb.w	ip, [r0, #73]	; 0x49
 801e15c:	6018      	str	r0, [r3, #0]
 801e15e:	4b12      	ldr	r3, [pc, #72]	; (801e1a8 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xb8>)
 801e160:	8017      	strh	r7, [r2, #0]
 801e162:	801f      	strh	r7, [r3, #0]
 801e164:	4a11      	ldr	r2, [pc, #68]	; (801e1ac <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xbc>)
 801e166:	4b12      	ldr	r3, [pc, #72]	; (801e1b0 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xc0>)
 801e168:	8016      	strh	r6, [r2, #0]
 801e16a:	801e      	strh	r6, [r3, #0]
 801e16c:	4911      	ldr	r1, [pc, #68]	; (801e1b4 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xc4>)
 801e16e:	4a12      	ldr	r2, [pc, #72]	; (801e1b8 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xc8>)
 801e170:	4b12      	ldr	r3, [pc, #72]	; (801e1bc <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xcc>)
 801e172:	700d      	strb	r5, [r1, #0]
 801e174:	6002      	str	r2, [r0, #0]
 801e176:	6018      	str	r0, [r3, #0]
 801e178:	6705      	str	r5, [r0, #112]	; 0x70
 801e17a:	f880 5074 	strb.w	r5, [r0, #116]	; 0x74
 801e17e:	f880 5075 	strb.w	r5, [r0, #117]	; 0x75
 801e182:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
 801e186:	f880 c077 	strb.w	ip, [r0, #119]	; 0x77
 801e18a:	f880 c078 	strb.w	ip, [r0, #120]	; 0x78
 801e18e:	f880 50a4 	strb.w	r5, [r0, #164]	; 0xa4
 801e192:	f880 50a5 	strb.w	r5, [r0, #165]	; 0xa5
 801e196:	f880 e034 	strb.w	lr, [r0, #52]	; 0x34
 801e19a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e19c:	01000001 	.word	0x01000001
 801e1a0:	201979e8 	.word	0x201979e8
 801e1a4:	201979dc 	.word	0x201979dc
 801e1a8:	201979e2 	.word	0x201979e2
 801e1ac:	201979de 	.word	0x201979de
 801e1b0:	201979e4 	.word	0x201979e4
 801e1b4:	201979e0 	.word	0x201979e0
 801e1b8:	0802bcac 	.word	0x0802bcac
 801e1bc:	20197c18 	.word	0x20197c18

0801e1c0 <_ZN8touchgfx8HALGPU2D10initializeEi>:
 801e1c0:	b570      	push	{r4, r5, r6, lr}
 801e1c2:	460c      	mov	r4, r1
 801e1c4:	b08a      	sub	sp, #40	; 0x28
 801e1c6:	4606      	mov	r6, r0
 801e1c8:	f7f8 fd0f 	bl	8016bea <_ZN8touchgfx3HAL10initializeEv>
 801e1cc:	4621      	mov	r1, r4
 801e1ce:	466c      	mov	r4, sp
 801e1d0:	4668      	mov	r0, sp
 801e1d2:	f106 057c 	add.w	r5, r6, #124	; 0x7c
 801e1d6:	f7ff f81b 	bl	801d210 <nema_cl_create_sized>
 801e1da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e1dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e1de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e1e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e1e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 801e1e6:	e885 0003 	stmia.w	r5, {r0, r1}
 801e1ea:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 801e1ee:	b10b      	cbz	r3, 801e1f4 <_ZN8touchgfx8HALGPU2D10initializeEi+0x34>
 801e1f0:	b00a      	add	sp, #40	; 0x28
 801e1f2:	bd70      	pop	{r4, r5, r6, pc}
 801e1f4:	f7ff ff52 	bl	801e09c <_ZN8touchgfx8HALGPU2D10initializeEi.part.2>

0801e1f8 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>:
 801e1f8:	b510      	push	{r4, lr}
 801e1fa:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 801e1fe:	4604      	mov	r4, r0
 801e200:	b94b      	cbnz	r3, 801e216 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0x1e>
 801e202:	4620      	mov	r0, r4
 801e204:	2101      	movs	r1, #1
 801e206:	f7f9 fa83 	bl	8017710 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801e20a:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 801e20e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e212:	f7ff b911 	b.w	801d438 <nema_cl_bind_circular>
 801e216:	6840      	ldr	r0, [r0, #4]
 801e218:	4906      	ldr	r1, [pc, #24]	; (801e234 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0x3c>)
 801e21a:	6803      	ldr	r3, [r0, #0]
 801e21c:	689a      	ldr	r2, [r3, #8]
 801e21e:	428a      	cmp	r2, r1
 801e220:	d105      	bne.n	801e22e <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0x36>
 801e222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e224:	4798      	blx	r3
 801e226:	2300      	movs	r3, #0
 801e228:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 801e22c:	e7e9      	b.n	801e202 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0xa>
 801e22e:	4790      	blx	r2
 801e230:	e7f9      	b.n	801e226 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0x2e>
 801e232:	bf00      	nop
 801e234:	08002865 	.word	0x08002865

0801e238 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>:
 801e238:	4603      	mov	r3, r0
 801e23a:	2200      	movs	r2, #0
 801e23c:	307c      	adds	r0, #124	; 0x7c
 801e23e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 801e242:	f7ff ba75 	b.w	801d730 <nema_cl_submit>
 801e246:	bf00      	nop

0801e248 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 801e248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e24c:	b091      	sub	sp, #68	; 0x44
 801e24e:	4604      	mov	r4, r0
 801e250:	461d      	mov	r5, r3
 801e252:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 801e256:	e9cd 210e 	strd	r2, r1, [sp, #56]	; 0x38
 801e25a:	930d      	str	r3, [sp, #52]	; 0x34
 801e25c:	f89d 2088 	ldrb.w	r2, [sp, #136]	; 0x88
 801e260:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 801e264:	307c      	adds	r0, #124	; 0x7c
 801e266:	f8bd 6068 	ldrh.w	r6, [sp, #104]	; 0x68
 801e26a:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801e26e:	f8bd 8070 	ldrh.w	r8, [sp, #112]	; 0x70
 801e272:	f8bd 9074 	ldrh.w	r9, [sp, #116]	; 0x74
 801e276:	f89d a078 	ldrb.w	sl, [sp, #120]	; 0x78
 801e27a:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 801e27e:	930b      	str	r3, [sp, #44]	; 0x2c
 801e280:	920c      	str	r2, [sp, #48]	; 0x30
 801e282:	f7ff fac5 	bl	801d810 <nema_cl_wait>
 801e286:	f04f 0e01 	mov.w	lr, #1
 801e28a:	2000      	movs	r0, #0
 801e28c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e28e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e290:	9208      	str	r2, [sp, #32]
 801e292:	f8d4 c000 	ldr.w	ip, [r4]
 801e296:	9307      	str	r3, [sp, #28]
 801e298:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e29a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801e29e:	e9dd 210e 	ldrd	r2, r1, [sp, #56]	; 0x38
 801e2a2:	e9cd b305 	strd	fp, r3, [sp, #20]
 801e2a6:	e9cd 7801 	strd	r7, r8, [sp, #4]
 801e2aa:	9600      	str	r6, [sp, #0]
 801e2ac:	f884 e0a4 	strb.w	lr, [r4, #164]	; 0xa4
 801e2b0:	9009      	str	r0, [sp, #36]	; 0x24
 801e2b2:	462b      	mov	r3, r5
 801e2b4:	4620      	mov	r0, r4
 801e2b6:	f8dc 403c 	ldr.w	r4, [ip, #60]	; 0x3c
 801e2ba:	47a0      	blx	r4
 801e2bc:	b011      	add	sp, #68	; 0x44
 801e2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e2c2:	bf00      	nop

0801e2c4 <_ZN8touchgfx8LCDGPU2DD1Ev>:
 801e2c4:	4770      	bx	lr
 801e2c6:	bf00      	nop

0801e2c8 <_ZNK8touchgfx8LCDGPU2D8bitDepthEv>:
 801e2c8:	7a03      	ldrb	r3, [r0, #8]
 801e2ca:	2b02      	cmp	r3, #2
 801e2cc:	d004      	beq.n	801e2d8 <_ZNK8touchgfx8LCDGPU2D8bitDepthEv+0x10>
 801e2ce:	2b01      	cmp	r3, #1
 801e2d0:	bf0c      	ite	eq
 801e2d2:	2018      	moveq	r0, #24
 801e2d4:	2010      	movne	r0, #16
 801e2d6:	4770      	bx	lr
 801e2d8:	2020      	movs	r0, #32
 801e2da:	4770      	bx	lr

0801e2dc <_ZNK8touchgfx8LCDGPU2D17framebufferFormatEv>:
 801e2dc:	7a00      	ldrb	r0, [r0, #8]
 801e2de:	4770      	bx	lr

0801e2e0 <_ZN8touchgfx8LCDGPU2D4initEv>:
 801e2e0:	4770      	bx	lr
 801e2e2:	bf00      	nop

0801e2e4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2e8:	b087      	sub	sp, #28
 801e2ea:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 801e2ee:	9102      	str	r1, [sp, #8]
 801e2f0:	ea6f 0c05 	mvn.w	ip, r5
 801e2f4:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	; 0x4c
 801e2f8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801e2fa:	9203      	str	r2, [sp, #12]
 801e2fc:	e9dd 4215 	ldrd	r4, r2, [sp, #84]	; 0x54
 801e300:	6860      	ldr	r0, [r4, #4]
 801e302:	fa5f fc8c 	uxtb.w	ip, ip
 801e306:	fb00 2e01 	mla	lr, r0, r1, r2
 801e30a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e30c:	6820      	ldr	r0, [r4, #0]
 801e30e:	e9d2 2400 	ldrd	r2, r4, [r2]
 801e312:	3404      	adds	r4, #4
 801e314:	eb00 004e 	add.w	r0, r0, lr, lsl #1
 801e318:	fa1f fb85 	uxth.w	fp, r5
 801e31c:	9405      	str	r4, [sp, #20]
 801e31e:	9200      	str	r2, [sp, #0]
 801e320:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801e324:	9c02      	ldr	r4, [sp, #8]
 801e326:	2c00      	cmp	r4, #0
 801e328:	dc03      	bgt.n	801e332 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801e32a:	9c03      	ldr	r4, [sp, #12]
 801e32c:	2c00      	cmp	r4, #0
 801e32e:	f340 80c2 	ble.w	801e4b6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801e332:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801e334:	2b00      	cmp	r3, #0
 801e336:	e9d4 ea02 	ldrd	lr, sl, [r4, #8]
 801e33a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e33e:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801e342:	fa0f f48e 	sxth.w	r4, lr
 801e346:	fa0f f88a 	sxth.w	r8, sl
 801e34a:	f340 80b7 	ble.w	801e4bc <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801e34e:	1415      	asrs	r5, r2, #16
 801e350:	d406      	bmi.n	801e360 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e352:	42a5      	cmp	r5, r4
 801e354:	da04      	bge.n	801e360 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e356:	ea5f 4921 	movs.w	r9, r1, asr #16
 801e35a:	d401      	bmi.n	801e360 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e35c:	45c1      	cmp	r9, r8
 801e35e:	db3e      	blt.n	801e3de <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801e360:	3b01      	subs	r3, #1
 801e362:	4432      	add	r2, r6
 801e364:	4439      	add	r1, r7
 801e366:	f100 0002 	add.w	r0, r0, #2
 801e36a:	d1f0      	bne.n	801e34e <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e36c:	9b02      	ldr	r3, [sp, #8]
 801e36e:	2b00      	cmp	r3, #0
 801e370:	f340 80a1 	ble.w	801e4b6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801e374:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e378:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e37c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e380:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e384:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e388:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801e38c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e390:	ee76 6a62 	vsub.f32	s13, s12, s5
 801e394:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801e398:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e39c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e3a0:	ee16 2a90 	vmov	r2, s13
 801e3a4:	3b01      	subs	r3, #1
 801e3a6:	9302      	str	r3, [sp, #8]
 801e3a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e3aa:	9c03      	ldr	r4, [sp, #12]
 801e3ac:	fb92 f6f3 	sdiv	r6, r2, r3
 801e3b0:	ee17 2a10 	vmov	r2, s14
 801e3b4:	eeb0 7a43 	vmov.f32	s14, s6
 801e3b8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e3bc:	ee17 1a10 	vmov	r1, s14
 801e3c0:	eeb0 7a62 	vmov.f32	s14, s5
 801e3c4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e3c8:	fb92 f7f3 	sdiv	r7, r2, r3
 801e3cc:	eeb0 3a67 	vmov.f32	s6, s15
 801e3d0:	ee17 2a10 	vmov	r2, s14
 801e3d4:	eef0 2a46 	vmov.f32	s5, s12
 801e3d8:	bf08      	it	eq
 801e3da:	4623      	moveq	r3, r4
 801e3dc:	e7a2      	b.n	801e324 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801e3de:	9501      	str	r5, [sp, #4]
 801e3e0:	1e5d      	subs	r5, r3, #1
 801e3e2:	fb05 2906 	mla	r9, r5, r6, r2
 801e3e6:	ea5f 4929 	movs.w	r9, r9, asr #16
 801e3ea:	9504      	str	r5, [sp, #16]
 801e3ec:	d570      	bpl.n	801e4d0 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801e3ee:	4680      	mov	r8, r0
 801e3f0:	9d01      	ldr	r5, [sp, #4]
 801e3f2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e3f6:	4654      	mov	r4, sl
 801e3f8:	4673      	mov	r3, lr
 801e3fa:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801e3fe:	e002      	b.n	801e406 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801e400:	1415      	asrs	r5, r2, #16
 801e402:	e9d9 3402 	ldrd	r3, r4, [r9, #8]
 801e406:	2d00      	cmp	r5, #0
 801e408:	4432      	add	r2, r6
 801e40a:	db4b      	blt.n	801e4a4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801e40c:	429d      	cmp	r5, r3
 801e40e:	da49      	bge.n	801e4a4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801e410:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801e414:	d446      	bmi.n	801e4a4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801e416:	45a6      	cmp	lr, r4
 801e418:	da44      	bge.n	801e4a4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801e41a:	9c00      	ldr	r4, [sp, #0]
 801e41c:	b21b      	sxth	r3, r3
 801e41e:	fb0e 4303 	mla	r3, lr, r3, r4
 801e422:	5d5b      	ldrb	r3, [r3, r5]
 801e424:	9d05      	ldr	r5, [sp, #20]
 801e426:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e42a:	441d      	add	r5, r3
 801e42c:	f895 a002 	ldrb.w	sl, [r5, #2]
 801e430:	786d      	ldrb	r5, [r5, #1]
 801e432:	f8b8 4000 	ldrh.w	r4, [r8]
 801e436:	fb15 f50b 	smulbb	r5, r5, fp
 801e43a:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
 801e43e:	fa5f fe8e 	uxtb.w	lr, lr
 801e442:	9501      	str	r5, [sp, #4]
 801e444:	fb1e fe0c 	smulbb	lr, lr, ip
 801e448:	9d05      	ldr	r5, [sp, #20]
 801e44a:	fb1a fa0b 	smulbb	sl, sl, fp
 801e44e:	5ced      	ldrb	r5, [r5, r3]
 801e450:	1223      	asrs	r3, r4, #8
 801e452:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801e456:	fb05 ee0b 	mla	lr, r5, fp, lr
 801e45a:	fb03 aa0c 	mla	sl, r3, ip, sl
 801e45e:	9d01      	ldr	r5, [sp, #4]
 801e460:	10e4      	asrs	r4, r4, #3
 801e462:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801e466:	fb04 540c 	mla	r4, r4, ip, r5
 801e46a:	fa1f fe8e 	uxth.w	lr, lr
 801e46e:	fa1f fa8a 	uxth.w	sl, sl
 801e472:	f10e 0301 	add.w	r3, lr, #1
 801e476:	f10a 0501 	add.w	r5, sl, #1
 801e47a:	9301      	str	r3, [sp, #4]
 801e47c:	b2a4      	uxth	r4, r4
 801e47e:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 801e482:	9d01      	ldr	r5, [sp, #4]
 801e484:	1c63      	adds	r3, r4, #1
 801e486:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801e48a:	eb05 251e 	add.w	r5, r5, lr, lsr #8
 801e48e:	f40a 4378 	and.w	r3, sl, #63488	; 0xf800
 801e492:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e496:	0964      	lsrs	r4, r4, #5
 801e498:	432b      	orrs	r3, r5
 801e49a:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801e49e:	4323      	orrs	r3, r4
 801e4a0:	f8a8 3000 	strh.w	r3, [r8]
 801e4a4:	f108 0802 	add.w	r8, r8, #2
 801e4a8:	4580      	cmp	r8, r0
 801e4aa:	4439      	add	r1, r7
 801e4ac:	d1a8      	bne.n	801e400 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e4ae:	9b02      	ldr	r3, [sp, #8]
 801e4b0:	2b00      	cmp	r3, #0
 801e4b2:	f73f af5f 	bgt.w	801e374 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e4b6:	b007      	add	sp, #28
 801e4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4bc:	f43f af56 	beq.w	801e36c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801e4c0:	1e5d      	subs	r5, r3, #1
 801e4c2:	fb05 2906 	mla	r9, r5, r6, r2
 801e4c6:	ea5f 4929 	movs.w	r9, r9, asr #16
 801e4ca:	9504      	str	r5, [sp, #16]
 801e4cc:	f53f af4e 	bmi.w	801e36c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801e4d0:	454c      	cmp	r4, r9
 801e4d2:	dd5b      	ble.n	801e58c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801e4d4:	9d04      	ldr	r5, [sp, #16]
 801e4d6:	fb05 1507 	mla	r5, r5, r7, r1
 801e4da:	142d      	asrs	r5, r5, #16
 801e4dc:	d456      	bmi.n	801e58c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801e4de:	4545      	cmp	r5, r8
 801e4e0:	da54      	bge.n	801e58c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801e4e2:	2b00      	cmp	r3, #0
 801e4e4:	f77f af42 	ble.w	801e36c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801e4e8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e4ec:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801e4f0:	9301      	str	r3, [sp, #4]
 801e4f2:	e002      	b.n	801e4fa <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801e4f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e4f6:	f9b3 4008 	ldrsh.w	r4, [r3, #8]
 801e4fa:	9d00      	ldr	r5, [sp, #0]
 801e4fc:	140b      	asrs	r3, r1, #16
 801e4fe:	fb04 5303 	mla	r3, r4, r3, r5
 801e502:	1414      	asrs	r4, r2, #16
 801e504:	5d1b      	ldrb	r3, [r3, r4]
 801e506:	8804      	ldrh	r4, [r0, #0]
 801e508:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e50c:	eb08 0503 	add.w	r5, r8, r3
 801e510:	f895 a002 	ldrb.w	sl, [r5, #2]
 801e514:	f895 9001 	ldrb.w	r9, [r5, #1]
 801e518:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
 801e51c:	fa5f fe8e 	uxtb.w	lr, lr
 801e520:	fb1e fe0c 	smulbb	lr, lr, ip
 801e524:	fb19 f90b 	smulbb	r9, r9, fp
 801e528:	fb1a fa0b 	smulbb	sl, sl, fp
 801e52c:	f818 5003 	ldrb.w	r5, [r8, r3]
 801e530:	1223      	asrs	r3, r4, #8
 801e532:	10e4      	asrs	r4, r4, #3
 801e534:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801e538:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801e53c:	fb05 e50b 	mla	r5, r5, fp, lr
 801e540:	fb03 aa0c 	mla	sl, r3, ip, sl
 801e544:	fb04 940c 	mla	r4, r4, ip, r9
 801e548:	b2ad      	uxth	r5, r5
 801e54a:	fa1f fa8a 	uxth.w	sl, sl
 801e54e:	b2a4      	uxth	r4, r4
 801e550:	f10a 0301 	add.w	r3, sl, #1
 801e554:	f105 0e01 	add.w	lr, r5, #1
 801e558:	f104 0901 	add.w	r9, r4, #1
 801e55c:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801e560:	eb0e 2e15 	add.w	lr, lr, r5, lsr #8
 801e564:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801e568:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801e56c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801e570:	0964      	lsrs	r4, r4, #5
 801e572:	ea43 030e 	orr.w	r3, r3, lr
 801e576:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801e57a:	4323      	orrs	r3, r4
 801e57c:	f820 3b02 	strh.w	r3, [r0], #2
 801e580:	9b01      	ldr	r3, [sp, #4]
 801e582:	4439      	add	r1, r7
 801e584:	4298      	cmp	r0, r3
 801e586:	4432      	add	r2, r6
 801e588:	d1b4      	bne.n	801e4f4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801e58a:	e6ef      	b.n	801e36c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801e58c:	2b00      	cmp	r3, #0
 801e58e:	f77f aeed 	ble.w	801e36c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801e592:	1414      	asrs	r4, r2, #16
 801e594:	4680      	mov	r8, r0
 801e596:	9401      	str	r4, [sp, #4]
 801e598:	4625      	mov	r5, r4
 801e59a:	e72a      	b.n	801e3f2 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>

0801e59c <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5a0:	4689      	mov	r9, r1
 801e5a2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801e5a6:	46ca      	mov	sl, r9
 801e5a8:	b087      	sub	sp, #28
 801e5aa:	9203      	str	r2, [sp, #12]
 801e5ac:	e9dd 2115 	ldrd	r2, r1, [sp, #84]	; 0x54
 801e5b0:	6854      	ldr	r4, [r2, #4]
 801e5b2:	e9dd 0c17 	ldrd	r0, ip, [sp, #92]	; 0x5c
 801e5b6:	fb04 1000 	mla	r0, r4, r0, r1
 801e5ba:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	; 0x4c
 801e5be:	6815      	ldr	r5, [r2, #0]
 801e5c0:	e9dc 2400 	ldrd	r2, r4, [ip]
 801e5c4:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 801e5c8:	f104 0b04 	add.w	fp, r4, #4
 801e5cc:	9205      	str	r2, [sp, #20]
 801e5ce:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801e5d2:	f1ba 0f00 	cmp.w	sl, #0
 801e5d6:	dc03      	bgt.n	801e5e0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801e5d8:	9c03      	ldr	r4, [sp, #12]
 801e5da:	2c00      	cmp	r4, #0
 801e5dc:	f340 8095 	ble.w	801e70a <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801e5e0:	e9dc e802 	ldrd	lr, r8, [ip, #8]
 801e5e4:	2b00      	cmp	r3, #0
 801e5e6:	fa0f f588 	sxth.w	r5, r8
 801e5ea:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e5ee:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801e5f2:	fa0f f48e 	sxth.w	r4, lr
 801e5f6:	9502      	str	r5, [sp, #8]
 801e5f8:	f340 808a 	ble.w	801e710 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e5fc:	46f1      	mov	r9, lr
 801e5fe:	9401      	str	r4, [sp, #4]
 801e600:	1415      	asrs	r5, r2, #16
 801e602:	d408      	bmi.n	801e616 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e604:	9c01      	ldr	r4, [sp, #4]
 801e606:	42a5      	cmp	r5, r4
 801e608:	da05      	bge.n	801e616 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e60a:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801e60e:	d402      	bmi.n	801e616 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e610:	9c02      	ldr	r4, [sp, #8]
 801e612:	45a6      	cmp	lr, r4
 801e614:	db3b      	blt.n	801e68e <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf2>
 801e616:	3b01      	subs	r3, #1
 801e618:	4432      	add	r2, r6
 801e61a:	4439      	add	r1, r7
 801e61c:	f100 0002 	add.w	r0, r0, #2
 801e620:	d1ee      	bne.n	801e600 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e622:	f1ba 0f00 	cmp.w	sl, #0
 801e626:	dd70      	ble.n	801e70a <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801e628:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e62c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e630:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801e634:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e638:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801e63c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e640:	ee76 6a62 	vsub.f32	s13, s12, s5
 801e644:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801e648:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e64c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e650:	ee16 2a90 	vmov	r2, s13
 801e654:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e656:	9c03      	ldr	r4, [sp, #12]
 801e658:	fb92 f6f3 	sdiv	r6, r2, r3
 801e65c:	ee17 2a10 	vmov	r2, s14
 801e660:	eeb0 7a43 	vmov.f32	s14, s6
 801e664:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e668:	ee17 1a10 	vmov	r1, s14
 801e66c:	eeb0 7a62 	vmov.f32	s14, s5
 801e670:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e674:	f1ba 0a01 	subs.w	sl, sl, #1
 801e678:	fb92 f7f3 	sdiv	r7, r2, r3
 801e67c:	eeb0 3a67 	vmov.f32	s6, s15
 801e680:	ee17 2a10 	vmov	r2, s14
 801e684:	eef0 2a46 	vmov.f32	s5, s12
 801e688:	bf08      	it	eq
 801e68a:	4623      	moveq	r3, r4
 801e68c:	e7a1      	b.n	801e5d2 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801e68e:	9c01      	ldr	r4, [sp, #4]
 801e690:	9501      	str	r5, [sp, #4]
 801e692:	1e5d      	subs	r5, r3, #1
 801e694:	46ce      	mov	lr, r9
 801e696:	fb05 2906 	mla	r9, r5, r6, r2
 801e69a:	ea5f 4929 	movs.w	r9, r9, asr #16
 801e69e:	9504      	str	r5, [sp, #16]
 801e6a0:	d53e      	bpl.n	801e720 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 801e6a2:	4604      	mov	r4, r0
 801e6a4:	9d01      	ldr	r5, [sp, #4]
 801e6a6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e6aa:	4673      	mov	r3, lr
 801e6ac:	46b6      	mov	lr, r6
 801e6ae:	4646      	mov	r6, r8
 801e6b0:	e002      	b.n	801e6b8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e6b2:	1415      	asrs	r5, r2, #16
 801e6b4:	e9dc 3602 	ldrd	r3, r6, [ip, #8]
 801e6b8:	2d00      	cmp	r5, #0
 801e6ba:	4472      	add	r2, lr
 801e6bc:	db1e      	blt.n	801e6fc <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801e6be:	429d      	cmp	r5, r3
 801e6c0:	da1c      	bge.n	801e6fc <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801e6c2:	ea5f 4821 	movs.w	r8, r1, asr #16
 801e6c6:	d419      	bmi.n	801e6fc <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801e6c8:	45b0      	cmp	r8, r6
 801e6ca:	da17      	bge.n	801e6fc <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801e6cc:	9e05      	ldr	r6, [sp, #20]
 801e6ce:	b21b      	sxth	r3, r3
 801e6d0:	fb08 6303 	mla	r3, r8, r3, r6
 801e6d4:	5d5e      	ldrb	r6, [r3, r5]
 801e6d6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e6da:	eb0b 0306 	add.w	r3, fp, r6
 801e6de:	785d      	ldrb	r5, [r3, #1]
 801e6e0:	789b      	ldrb	r3, [r3, #2]
 801e6e2:	00ed      	lsls	r5, r5, #3
 801e6e4:	f405 68fc 	and.w	r8, r5, #2016	; 0x7e0
 801e6e8:	4d2d      	ldr	r5, [pc, #180]	; (801e7a0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>)
 801e6ea:	f81b 6006 	ldrb.w	r6, [fp, r6]
 801e6ee:	ea05 2303 	and.w	r3, r5, r3, lsl #8
 801e6f2:	ea43 0308 	orr.w	r3, r3, r8
 801e6f6:	ea43 03d6 	orr.w	r3, r3, r6, lsr #3
 801e6fa:	8023      	strh	r3, [r4, #0]
 801e6fc:	3402      	adds	r4, #2
 801e6fe:	4284      	cmp	r4, r0
 801e700:	4439      	add	r1, r7
 801e702:	d1d6      	bne.n	801e6b2 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801e704:	f1ba 0f00 	cmp.w	sl, #0
 801e708:	dc8e      	bgt.n	801e628 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e70a:	b007      	add	sp, #28
 801e70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e710:	d087      	beq.n	801e622 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e712:	1e5d      	subs	r5, r3, #1
 801e714:	fb05 2906 	mla	r9, r5, r6, r2
 801e718:	ea5f 4929 	movs.w	r9, r9, asr #16
 801e71c:	9504      	str	r5, [sp, #16]
 801e71e:	d480      	bmi.n	801e622 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e720:	454c      	cmp	r4, r9
 801e722:	dd35      	ble.n	801e790 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801e724:	9d04      	ldr	r5, [sp, #16]
 801e726:	fb05 1507 	mla	r5, r5, r7, r1
 801e72a:	ea5f 4925 	movs.w	r9, r5, asr #16
 801e72e:	d42f      	bmi.n	801e790 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801e730:	9d02      	ldr	r5, [sp, #8]
 801e732:	45a9      	cmp	r9, r5
 801e734:	da2c      	bge.n	801e790 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801e736:	2b00      	cmp	r3, #0
 801e738:	f77f af73 	ble.w	801e622 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e73c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e740:	9d05      	ldr	r5, [sp, #20]
 801e742:	4699      	mov	r9, r3
 801e744:	46a6      	mov	lr, r4
 801e746:	e001      	b.n	801e74c <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 801e748:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801e74c:	140c      	asrs	r4, r1, #16
 801e74e:	fb0e 5404 	mla	r4, lr, r4, r5
 801e752:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801e756:	f814 e00e 	ldrb.w	lr, [r4, lr]
 801e75a:	4b11      	ldr	r3, [pc, #68]	; (801e7a0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>)
 801e75c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e760:	eb0b 040e 	add.w	r4, fp, lr
 801e764:	f894 8001 	ldrb.w	r8, [r4, #1]
 801e768:	78a4      	ldrb	r4, [r4, #2]
 801e76a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801e76e:	f81b e00e 	ldrb.w	lr, [fp, lr]
 801e772:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801e776:	ea03 2404 	and.w	r4, r3, r4, lsl #8
 801e77a:	ea44 0408 	orr.w	r4, r4, r8
 801e77e:	ea44 04de 	orr.w	r4, r4, lr, lsr #3
 801e782:	f820 4b02 	strh.w	r4, [r0], #2
 801e786:	4548      	cmp	r0, r9
 801e788:	4439      	add	r1, r7
 801e78a:	4432      	add	r2, r6
 801e78c:	d1dc      	bne.n	801e748 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801e78e:	e748      	b.n	801e622 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e790:	2b00      	cmp	r3, #0
 801e792:	f77f af46 	ble.w	801e622 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e796:	1415      	asrs	r5, r2, #16
 801e798:	4604      	mov	r4, r0
 801e79a:	9501      	str	r5, [sp, #4]
 801e79c:	e783      	b.n	801e6a6 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801e79e:	bf00      	nop
 801e7a0:	fffff800 	.word	0xfffff800

0801e7a4 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e7a4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801e7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7ac:	b087      	sub	sp, #28
 801e7ae:	e9cd 1203 	strd	r1, r2, [sp, #12]
 801e7b2:	e9dd 2115 	ldrd	r2, r1, [sp, #84]	; 0x54
 801e7b6:	e9dd 0b17 	ldrd	r0, fp, [sp, #92]	; 0x5c
 801e7ba:	6854      	ldr	r4, [r2, #4]
 801e7bc:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 801e7c0:	fb04 1100 	mla	r1, r4, r0, r1
 801e7c4:	e9dd 9a13 	ldrd	r9, sl, [sp, #76]	; 0x4c
 801e7c8:	6810      	ldr	r0, [r2, #0]
 801e7ca:	e9db 2400 	ldrd	r2, r4, [fp]
 801e7ce:	eb00 0e41 	add.w	lr, r0, r1, lsl #1
 801e7d2:	1d21      	adds	r1, r4, #4
 801e7d4:	9505      	str	r5, [sp, #20]
 801e7d6:	9102      	str	r1, [sp, #8]
 801e7d8:	9201      	str	r2, [sp, #4]
 801e7da:	e9dd 7211 	ldrd	r7, r2, [sp, #68]	; 0x44
 801e7de:	9903      	ldr	r1, [sp, #12]
 801e7e0:	2900      	cmp	r1, #0
 801e7e2:	dc03      	bgt.n	801e7ec <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e7e4:	9904      	ldr	r1, [sp, #16]
 801e7e6:	2900      	cmp	r1, #0
 801e7e8:	f340 80b6 	ble.w	801e958 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801e7ec:	e9db 4602 	ldrd	r4, r6, [fp, #8]
 801e7f0:	2b00      	cmp	r3, #0
 801e7f2:	f507 4700 	add.w	r7, r7, #32768	; 0x8000
 801e7f6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e7fa:	b221      	sxth	r1, r4
 801e7fc:	b235      	sxth	r5, r6
 801e7fe:	f340 80ae 	ble.w	801e95e <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801e802:	1438      	asrs	r0, r7, #16
 801e804:	d406      	bmi.n	801e814 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e806:	4288      	cmp	r0, r1
 801e808:	da04      	bge.n	801e814 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e80a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e80e:	d401      	bmi.n	801e814 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e810:	45ac      	cmp	ip, r5
 801e812:	db3c      	blt.n	801e88e <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 801e814:	3b01      	subs	r3, #1
 801e816:	444f      	add	r7, r9
 801e818:	4452      	add	r2, sl
 801e81a:	f10e 0e02 	add.w	lr, lr, #2
 801e81e:	d1f0      	bne.n	801e802 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801e820:	9b03      	ldr	r3, [sp, #12]
 801e822:	2b00      	cmp	r3, #0
 801e824:	f340 8098 	ble.w	801e958 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801e828:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e82c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e830:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801e834:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e838:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801e83c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e840:	ee76 6a62 	vsub.f32	s13, s12, s5
 801e844:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801e848:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e84c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e850:	ee16 2a90 	vmov	r2, s13
 801e854:	3b01      	subs	r3, #1
 801e856:	9303      	str	r3, [sp, #12]
 801e858:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e85a:	9904      	ldr	r1, [sp, #16]
 801e85c:	fb92 f9f3 	sdiv	r9, r2, r3
 801e860:	ee17 2a10 	vmov	r2, s14
 801e864:	eeb0 7a43 	vmov.f32	s14, s6
 801e868:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e86c:	fb92 faf3 	sdiv	sl, r2, r3
 801e870:	ee17 2a10 	vmov	r2, s14
 801e874:	eeb0 7a62 	vmov.f32	s14, s5
 801e878:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e87c:	eeb0 3a67 	vmov.f32	s6, s15
 801e880:	ee17 7a10 	vmov	r7, s14
 801e884:	eef0 2a46 	vmov.f32	s5, s12
 801e888:	bf08      	it	eq
 801e88a:	460b      	moveq	r3, r1
 801e88c:	e7a7      	b.n	801e7de <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e88e:	f103 38ff 	add.w	r8, r3, #4294967295
 801e892:	fb08 7c09 	mla	ip, r8, r9, r7
 801e896:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801e89a:	d56a      	bpl.n	801e972 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 801e89c:	4675      	mov	r5, lr
 801e89e:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
 801e8a2:	e002      	b.n	801e8aa <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801e8a4:	1438      	asrs	r0, r7, #16
 801e8a6:	e9db 4602 	ldrd	r4, r6, [fp, #8]
 801e8aa:	2800      	cmp	r0, #0
 801e8ac:	444f      	add	r7, r9
 801e8ae:	db4b      	blt.n	801e948 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e8b0:	42a0      	cmp	r0, r4
 801e8b2:	da49      	bge.n	801e948 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e8b4:	1413      	asrs	r3, r2, #16
 801e8b6:	d447      	bmi.n	801e948 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e8b8:	42b3      	cmp	r3, r6
 801e8ba:	b224      	sxth	r4, r4
 801e8bc:	da44      	bge.n	801e948 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e8be:	9901      	ldr	r1, [sp, #4]
 801e8c0:	fb03 1404 	mla	r4, r3, r4, r1
 801e8c4:	9902      	ldr	r1, [sp, #8]
 801e8c6:	5c23      	ldrb	r3, [r4, r0]
 801e8c8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801e8cc:	0e0b      	lsrs	r3, r1, #24
 801e8ce:	d03b      	beq.n	801e948 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e8d0:	9805      	ldr	r0, [sp, #20]
 801e8d2:	f3c1 4807 	ubfx	r8, r1, #16, #8
 801e8d6:	fb00 f003 	mul.w	r0, r0, r3
 801e8da:	1c43      	adds	r3, r0, #1
 801e8dc:	eb03 2320 	add.w	r3, r3, r0, asr #8
 801e8e0:	121b      	asrs	r3, r3, #8
 801e8e2:	43d8      	mvns	r0, r3
 801e8e4:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 801e8e8:	b29b      	uxth	r3, r3
 801e8ea:	b2c9      	uxtb	r1, r1
 801e8ec:	882e      	ldrh	r6, [r5, #0]
 801e8ee:	fb1c fc03 	smulbb	ip, ip, r3
 801e8f2:	fb18 f803 	smulbb	r8, r8, r3
 801e8f6:	fb11 f303 	smulbb	r3, r1, r3
 801e8fa:	10f4      	asrs	r4, r6, #3
 801e8fc:	1231      	asrs	r1, r6, #8
 801e8fe:	00f6      	lsls	r6, r6, #3
 801e900:	b2c0      	uxtb	r0, r0
 801e902:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801e906:	b2f6      	uxtb	r6, r6
 801e908:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801e90c:	fb01 8800 	mla	r8, r1, r0, r8
 801e910:	fb04 c400 	mla	r4, r4, r0, ip
 801e914:	fb06 3100 	mla	r1, r6, r0, r3
 801e918:	fa1f fc88 	uxth.w	ip, r8
 801e91c:	b289      	uxth	r1, r1
 801e91e:	b2a4      	uxth	r4, r4
 801e920:	1c4e      	adds	r6, r1, #1
 801e922:	1c60      	adds	r0, r4, #1
 801e924:	f10c 0301 	add.w	r3, ip, #1
 801e928:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 801e92c:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801e930:	eb00 2114 	add.w	r1, r0, r4, lsr #8
 801e934:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801e938:	f3c6 20c4 	ubfx	r0, r6, #11, #5
 801e93c:	0949      	lsrs	r1, r1, #5
 801e93e:	4303      	orrs	r3, r0
 801e940:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e944:	430b      	orrs	r3, r1
 801e946:	802b      	strh	r3, [r5, #0]
 801e948:	3502      	adds	r5, #2
 801e94a:	4575      	cmp	r5, lr
 801e94c:	4452      	add	r2, sl
 801e94e:	d1a9      	bne.n	801e8a4 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801e950:	9b03      	ldr	r3, [sp, #12]
 801e952:	2b00      	cmp	r3, #0
 801e954:	f73f af68 	bgt.w	801e828 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e958:	b007      	add	sp, #28
 801e95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e95e:	f43f af5f 	beq.w	801e820 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e962:	f103 38ff 	add.w	r8, r3, #4294967295
 801e966:	fb08 7c09 	mla	ip, r8, r9, r7
 801e96a:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801e96e:	f53f af57 	bmi.w	801e820 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e972:	4561      	cmp	r1, ip
 801e974:	dd5c      	ble.n	801ea30 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e976:	fb08 280a 	mla	r8, r8, sl, r2
 801e97a:	ea5f 4828 	movs.w	r8, r8, asr #16
 801e97e:	d457      	bmi.n	801ea30 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e980:	45a8      	cmp	r8, r5
 801e982:	da55      	bge.n	801ea30 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e984:	2b00      	cmp	r3, #0
 801e986:	f77f af4b 	ble.w	801e820 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e98a:	eb0e 0843 	add.w	r8, lr, r3, lsl #1
 801e98e:	e001      	b.n	801e994 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e990:	f9bb 1008 	ldrsh.w	r1, [fp, #8]
 801e994:	9801      	ldr	r0, [sp, #4]
 801e996:	1413      	asrs	r3, r2, #16
 801e998:	fb01 0303 	mla	r3, r1, r3, r0
 801e99c:	1439      	asrs	r1, r7, #16
 801e99e:	5c5b      	ldrb	r3, [r3, r1]
 801e9a0:	9902      	ldr	r1, [sp, #8]
 801e9a2:	444f      	add	r7, r9
 801e9a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801e9a8:	4452      	add	r2, sl
 801e9aa:	0e18      	lsrs	r0, r3, #24
 801e9ac:	d03b      	beq.n	801ea26 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801e9ae:	9905      	ldr	r1, [sp, #20]
 801e9b0:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 801e9b4:	fb01 f100 	mul.w	r1, r1, r0
 801e9b8:	1c48      	adds	r0, r1, #1
 801e9ba:	eb00 2021 	add.w	r0, r0, r1, asr #8
 801e9be:	1200      	asrs	r0, r0, #8
 801e9c0:	43c1      	mvns	r1, r0
 801e9c2:	f3c3 2607 	ubfx	r6, r3, #8, #8
 801e9c6:	b280      	uxth	r0, r0
 801e9c8:	b2db      	uxtb	r3, r3
 801e9ca:	f8be 5000 	ldrh.w	r5, [lr]
 801e9ce:	fb16 f600 	smulbb	r6, r6, r0
 801e9d2:	fb1c fc00 	smulbb	ip, ip, r0
 801e9d6:	fb13 f300 	smulbb	r3, r3, r0
 801e9da:	122c      	asrs	r4, r5, #8
 801e9dc:	10e8      	asrs	r0, r5, #3
 801e9de:	00ed      	lsls	r5, r5, #3
 801e9e0:	b2c9      	uxtb	r1, r1
 801e9e2:	b2ed      	uxtb	r5, r5
 801e9e4:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801e9e8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801e9ec:	fb00 6001 	mla	r0, r0, r1, r6
 801e9f0:	fb05 3301 	mla	r3, r5, r1, r3
 801e9f4:	fb04 c401 	mla	r4, r4, r1, ip
 801e9f8:	b280      	uxth	r0, r0
 801e9fa:	b2a4      	uxth	r4, r4
 801e9fc:	b29b      	uxth	r3, r3
 801e9fe:	1c65      	adds	r5, r4, #1
 801ea00:	1c5e      	adds	r6, r3, #1
 801ea02:	1c41      	adds	r1, r0, #1
 801ea04:	eb05 2414 	add.w	r4, r5, r4, lsr #8
 801ea08:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801ea0c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801ea10:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801ea14:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801ea18:	0949      	lsrs	r1, r1, #5
 801ea1a:	431c      	orrs	r4, r3
 801ea1c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ea20:	430c      	orrs	r4, r1
 801ea22:	f8ae 4000 	strh.w	r4, [lr]
 801ea26:	f10e 0e02 	add.w	lr, lr, #2
 801ea2a:	45c6      	cmp	lr, r8
 801ea2c:	d1b0      	bne.n	801e990 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801ea2e:	e6f7      	b.n	801e820 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ea30:	2b00      	cmp	r3, #0
 801ea32:	f77f aef5 	ble.w	801e820 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ea36:	4675      	mov	r5, lr
 801ea38:	1438      	asrs	r0, r7, #16
 801ea3a:	e730      	b.n	801e89e <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>

0801ea3c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ea3c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801ea40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea44:	b085      	sub	sp, #20
 801ea46:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801ea4a:	e9dd 2113 	ldrd	r2, r1, [sp, #76]	; 0x4c
 801ea4e:	e9dd 0b15 	ldrd	r0, fp, [sp, #84]	; 0x54
 801ea52:	6854      	ldr	r4, [r2, #4]
 801ea54:	e9dd 9a11 	ldrd	r9, sl, [sp, #68]	; 0x44
 801ea58:	fb04 1000 	mla	r0, r4, r0, r1
 801ea5c:	6814      	ldr	r4, [r2, #0]
 801ea5e:	e9db 2500 	ldrd	r2, r5, [fp]
 801ea62:	eb04 0e40 	add.w	lr, r4, r0, lsl #1
 801ea66:	1d28      	adds	r0, r5, #4
 801ea68:	9001      	str	r0, [sp, #4]
 801ea6a:	9200      	str	r2, [sp, #0]
 801ea6c:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
 801ea70:	9802      	ldr	r0, [sp, #8]
 801ea72:	2800      	cmp	r0, #0
 801ea74:	dc03      	bgt.n	801ea7e <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801ea76:	9803      	ldr	r0, [sp, #12]
 801ea78:	2800      	cmp	r0, #0
 801ea7a:	f340 80b8 	ble.w	801ebee <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 801ea7e:	e9db 5602 	ldrd	r5, r6, [fp, #8]
 801ea82:	2b00      	cmp	r3, #0
 801ea84:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801ea88:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ea8c:	b228      	sxth	r0, r5
 801ea8e:	b237      	sxth	r7, r6
 801ea90:	f340 80b0 	ble.w	801ebf4 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801ea94:	140c      	asrs	r4, r1, #16
 801ea96:	d406      	bmi.n	801eaa6 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ea98:	4284      	cmp	r4, r0
 801ea9a:	da04      	bge.n	801eaa6 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ea9c:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801eaa0:	d401      	bmi.n	801eaa6 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801eaa2:	45bc      	cmp	ip, r7
 801eaa4:	db3c      	blt.n	801eb20 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801eaa6:	3b01      	subs	r3, #1
 801eaa8:	4449      	add	r1, r9
 801eaaa:	4452      	add	r2, sl
 801eaac:	f10e 0e02 	add.w	lr, lr, #2
 801eab0:	d1f0      	bne.n	801ea94 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801eab2:	9b02      	ldr	r3, [sp, #8]
 801eab4:	2b00      	cmp	r3, #0
 801eab6:	f340 809a 	ble.w	801ebee <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 801eaba:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eabe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eac2:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801eac6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eaca:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801eace:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ead2:	ee76 6a62 	vsub.f32	s13, s12, s5
 801ead6:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801eada:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eade:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801eae2:	ee16 2a90 	vmov	r2, s13
 801eae6:	3b01      	subs	r3, #1
 801eae8:	9302      	str	r3, [sp, #8]
 801eaea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eaec:	9803      	ldr	r0, [sp, #12]
 801eaee:	fb92 f9f3 	sdiv	r9, r2, r3
 801eaf2:	ee17 2a10 	vmov	r2, s14
 801eaf6:	eeb0 7a43 	vmov.f32	s14, s6
 801eafa:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801eafe:	fb92 faf3 	sdiv	sl, r2, r3
 801eb02:	ee17 2a10 	vmov	r2, s14
 801eb06:	eeb0 7a62 	vmov.f32	s14, s5
 801eb0a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801eb0e:	eeb0 3a67 	vmov.f32	s6, s15
 801eb12:	ee17 1a10 	vmov	r1, s14
 801eb16:	eef0 2a46 	vmov.f32	s5, s12
 801eb1a:	bf08      	it	eq
 801eb1c:	4603      	moveq	r3, r0
 801eb1e:	e7a7      	b.n	801ea70 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801eb20:	f103 38ff 	add.w	r8, r3, #4294967295
 801eb24:	fb08 1c09 	mla	ip, r8, r9, r1
 801eb28:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801eb2c:	d56c      	bpl.n	801ec08 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1cc>
 801eb2e:	4677      	mov	r7, lr
 801eb30:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
 801eb34:	e002      	b.n	801eb3c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801eb36:	140c      	asrs	r4, r1, #16
 801eb38:	e9db 5602 	ldrd	r5, r6, [fp, #8]
 801eb3c:	2c00      	cmp	r4, #0
 801eb3e:	db4d      	blt.n	801ebdc <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801eb40:	42ac      	cmp	r4, r5
 801eb42:	da4b      	bge.n	801ebdc <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801eb44:	1413      	asrs	r3, r2, #16
 801eb46:	d449      	bmi.n	801ebdc <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801eb48:	42b3      	cmp	r3, r6
 801eb4a:	b22d      	sxth	r5, r5
 801eb4c:	da46      	bge.n	801ebdc <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801eb4e:	9800      	ldr	r0, [sp, #0]
 801eb50:	fb03 0505 	mla	r5, r3, r5, r0
 801eb54:	9801      	ldr	r0, [sp, #4]
 801eb56:	5d2b      	ldrb	r3, [r5, r4]
 801eb58:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801eb5c:	0e18      	lsrs	r0, r3, #24
 801eb5e:	28ff      	cmp	r0, #255	; 0xff
 801eb60:	f000 80c0 	beq.w	801ece4 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801eb64:	b2c4      	uxtb	r4, r0
 801eb66:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 801eb6a:	f3c3 2607 	ubfx	r6, r3, #8, #8
 801eb6e:	b2a5      	uxth	r5, r4
 801eb70:	b2db      	uxtb	r3, r3
 801eb72:	b398      	cbz	r0, 801ebdc <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801eb74:	43e4      	mvns	r4, r4
 801eb76:	f8b7 8000 	ldrh.w	r8, [r7]
 801eb7a:	fb16 f605 	smulbb	r6, r6, r5
 801eb7e:	fb1c fc05 	smulbb	ip, ip, r5
 801eb82:	fb13 f505 	smulbb	r5, r3, r5
 801eb86:	ea4f 2028 	mov.w	r0, r8, asr #8
 801eb8a:	b2e3      	uxtb	r3, r4
 801eb8c:	ea4f 04e8 	mov.w	r4, r8, asr #3
 801eb90:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801eb94:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801eb98:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801eb9c:	fa5f f888 	uxtb.w	r8, r8
 801eba0:	fb04 6403 	mla	r4, r4, r3, r6
 801eba4:	fb00 cc03 	mla	ip, r0, r3, ip
 801eba8:	fb08 5303 	mla	r3, r8, r3, r5
 801ebac:	fa1f fc8c 	uxth.w	ip, ip
 801ebb0:	b298      	uxth	r0, r3
 801ebb2:	b2a5      	uxth	r5, r4
 801ebb4:	f10c 0301 	add.w	r3, ip, #1
 801ebb8:	1c44      	adds	r4, r0, #1
 801ebba:	1c6e      	adds	r6, r5, #1
 801ebbc:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 801ebc0:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801ebc4:	eb06 2015 	add.w	r0, r6, r5, lsr #8
 801ebc8:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801ebcc:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801ebd0:	0940      	lsrs	r0, r0, #5
 801ebd2:	4323      	orrs	r3, r4
 801ebd4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ebd8:	4303      	orrs	r3, r0
 801ebda:	803b      	strh	r3, [r7, #0]
 801ebdc:	3702      	adds	r7, #2
 801ebde:	4577      	cmp	r7, lr
 801ebe0:	4449      	add	r1, r9
 801ebe2:	4452      	add	r2, sl
 801ebe4:	d1a7      	bne.n	801eb36 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801ebe6:	9b02      	ldr	r3, [sp, #8]
 801ebe8:	2b00      	cmp	r3, #0
 801ebea:	f73f af66 	bgt.w	801eaba <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ebee:	b005      	add	sp, #20
 801ebf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ebf4:	f43f af5d 	beq.w	801eab2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ebf8:	f103 38ff 	add.w	r8, r3, #4294967295
 801ebfc:	fb08 1c09 	mla	ip, r8, r9, r1
 801ec00:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801ec04:	f53f af55 	bmi.w	801eab2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ec08:	4560      	cmp	r0, ip
 801ec0a:	dd65      	ble.n	801ecd8 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801ec0c:	fb08 280a 	mla	r8, r8, sl, r2
 801ec10:	ea5f 4828 	movs.w	r8, r8, asr #16
 801ec14:	d460      	bmi.n	801ecd8 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801ec16:	45b8      	cmp	r8, r7
 801ec18:	da5e      	bge.n	801ecd8 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801ec1a:	2b00      	cmp	r3, #0
 801ec1c:	f77f af49 	ble.w	801eab2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ec20:	eb0e 0843 	add.w	r8, lr, r3, lsl #1
 801ec24:	e03f      	b.n	801eca6 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801ec26:	b2f0      	uxtb	r0, r6
 801ec28:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 801ec2c:	f3c3 2707 	ubfx	r7, r3, #8, #8
 801ec30:	b284      	uxth	r4, r0
 801ec32:	b2db      	uxtb	r3, r3
 801ec34:	b376      	cbz	r6, 801ec94 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801ec36:	43c0      	mvns	r0, r0
 801ec38:	f8be 6000 	ldrh.w	r6, [lr]
 801ec3c:	fb17 f704 	smulbb	r7, r7, r4
 801ec40:	fb1c fc04 	smulbb	ip, ip, r4
 801ec44:	fb13 f304 	smulbb	r3, r3, r4
 801ec48:	1235      	asrs	r5, r6, #8
 801ec4a:	10f4      	asrs	r4, r6, #3
 801ec4c:	00f6      	lsls	r6, r6, #3
 801ec4e:	b2c0      	uxtb	r0, r0
 801ec50:	b2f6      	uxtb	r6, r6
 801ec52:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801ec56:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801ec5a:	fb04 7400 	mla	r4, r4, r0, r7
 801ec5e:	fb06 3300 	mla	r3, r6, r0, r3
 801ec62:	fb05 c500 	mla	r5, r5, r0, ip
 801ec66:	b2a4      	uxth	r4, r4
 801ec68:	b2ad      	uxth	r5, r5
 801ec6a:	b29b      	uxth	r3, r3
 801ec6c:	1c6e      	adds	r6, r5, #1
 801ec6e:	1c5f      	adds	r7, r3, #1
 801ec70:	1c60      	adds	r0, r4, #1
 801ec72:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801ec76:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801ec7a:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801ec7e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801ec82:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801ec86:	0940      	lsrs	r0, r0, #5
 801ec88:	432b      	orrs	r3, r5
 801ec8a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ec8e:	4303      	orrs	r3, r0
 801ec90:	f8ae 3000 	strh.w	r3, [lr]
 801ec94:	f10e 0e02 	add.w	lr, lr, #2
 801ec98:	45c6      	cmp	lr, r8
 801ec9a:	4449      	add	r1, r9
 801ec9c:	4452      	add	r2, sl
 801ec9e:	f43f af08 	beq.w	801eab2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801eca2:	f9bb 0008 	ldrsh.w	r0, [fp, #8]
 801eca6:	9c00      	ldr	r4, [sp, #0]
 801eca8:	1413      	asrs	r3, r2, #16
 801ecaa:	fb00 4303 	mla	r3, r0, r3, r4
 801ecae:	1408      	asrs	r0, r1, #16
 801ecb0:	5c1b      	ldrb	r3, [r3, r0]
 801ecb2:	9801      	ldr	r0, [sp, #4]
 801ecb4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801ecb8:	0e1e      	lsrs	r6, r3, #24
 801ecba:	2eff      	cmp	r6, #255	; 0xff
 801ecbc:	d1b3      	bne.n	801ec26 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ecbe:	0958      	lsrs	r0, r3, #5
 801ecc0:	f400 64fc 	and.w	r4, r0, #2016	; 0x7e0
 801ecc4:	480d      	ldr	r0, [pc, #52]	; (801ecfc <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801ecc6:	ea00 2013 	and.w	r0, r0, r3, lsr #8
 801ecca:	4320      	orrs	r0, r4
 801eccc:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801ecd0:	4303      	orrs	r3, r0
 801ecd2:	f8ae 3000 	strh.w	r3, [lr]
 801ecd6:	e7dd      	b.n	801ec94 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801ecd8:	2b00      	cmp	r3, #0
 801ecda:	f77f aeea 	ble.w	801eab2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ecde:	4677      	mov	r7, lr
 801ece0:	140c      	asrs	r4, r1, #16
 801ece2:	e725      	b.n	801eb30 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801ece4:	0958      	lsrs	r0, r3, #5
 801ece6:	f400 64fc 	and.w	r4, r0, #2016	; 0x7e0
 801ecea:	4804      	ldr	r0, [pc, #16]	; (801ecfc <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801ecec:	ea00 2013 	and.w	r0, r0, r3, lsr #8
 801ecf0:	4320      	orrs	r0, r4
 801ecf2:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801ecf6:	4303      	orrs	r3, r0
 801ecf8:	803b      	strh	r3, [r7, #0]
 801ecfa:	e76f      	b.n	801ebdc <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801ecfc:	fffff800 	.word	0xfffff800

0801ed00 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ed00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed04:	b089      	sub	sp, #36	; 0x24
 801ed06:	f89d 506c 	ldrb.w	r5, [sp, #108]	; 0x6c
 801ed0a:	9104      	str	r1, [sp, #16]
 801ed0c:	ea6f 0c05 	mvn.w	ip, r5
 801ed10:	e9dd 4117 	ldrd	r4, r1, [sp, #92]	; 0x5c
 801ed14:	e9dd 6715 	ldrd	r6, r7, [sp, #84]	; 0x54
 801ed18:	6860      	ldr	r0, [r4, #4]
 801ed1a:	9205      	str	r2, [sp, #20]
 801ed1c:	e9dd 2b19 	ldrd	r2, fp, [sp, #100]	; 0x64
 801ed20:	fb00 1102 	mla	r1, r0, r2, r1
 801ed24:	6824      	ldr	r4, [r4, #0]
 801ed26:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ed2a:	4421      	add	r1, r4
 801ed2c:	f8db 4004 	ldr.w	r4, [fp, #4]
 801ed30:	f8db 2000 	ldr.w	r2, [fp]
 801ed34:	3404      	adds	r4, #4
 801ed36:	fa5f fc8c 	uxtb.w	ip, ip
 801ed3a:	fa1f f985 	uxth.w	r9, r5
 801ed3e:	9407      	str	r4, [sp, #28]
 801ed40:	9202      	str	r2, [sp, #8]
 801ed42:	e9dd 2013 	ldrd	r2, r0, [sp, #76]	; 0x4c
 801ed46:	9c04      	ldr	r4, [sp, #16]
 801ed48:	2c00      	cmp	r4, #0
 801ed4a:	dc03      	bgt.n	801ed54 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801ed4c:	9c05      	ldr	r4, [sp, #20]
 801ed4e:	2c00      	cmp	r4, #0
 801ed50:	f340 80b1 	ble.w	801eeb6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801ed54:	e9db e802 	ldrd	lr, r8, [fp, #8]
 801ed58:	2b00      	cmp	r3, #0
 801ed5a:	fa0f f588 	sxth.w	r5, r8
 801ed5e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ed62:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 801ed66:	fa0f f48e 	sxth.w	r4, lr
 801ed6a:	9503      	str	r5, [sp, #12]
 801ed6c:	f340 80a6 	ble.w	801eebc <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801ed70:	46f2      	mov	sl, lr
 801ed72:	9401      	str	r4, [sp, #4]
 801ed74:	1415      	asrs	r5, r2, #16
 801ed76:	d408      	bmi.n	801ed8a <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801ed78:	9c01      	ldr	r4, [sp, #4]
 801ed7a:	42a5      	cmp	r5, r4
 801ed7c:	da05      	bge.n	801ed8a <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801ed7e:	ea5f 4e20 	movs.w	lr, r0, asr #16
 801ed82:	d402      	bmi.n	801ed8a <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801ed84:	9c03      	ldr	r4, [sp, #12]
 801ed86:	45a6      	cmp	lr, r4
 801ed88:	db3e      	blt.n	801ee08 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801ed8a:	3b01      	subs	r3, #1
 801ed8c:	4432      	add	r2, r6
 801ed8e:	4438      	add	r0, r7
 801ed90:	f101 0103 	add.w	r1, r1, #3
 801ed94:	d1ee      	bne.n	801ed74 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801ed96:	9b04      	ldr	r3, [sp, #16]
 801ed98:	2b00      	cmp	r3, #0
 801ed9a:	f340 808c 	ble.w	801eeb6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801ed9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801eda2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eda6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801edaa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801edae:	ee31 1a05 	vadd.f32	s2, s2, s10
 801edb2:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801edb6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801edba:	ee76 6a62 	vsub.f32	s13, s12, s5
 801edbe:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801edc2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801edc6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801edca:	ee16 2a90 	vmov	r2, s13
 801edce:	3b01      	subs	r3, #1
 801edd0:	9304      	str	r3, [sp, #16]
 801edd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801edd4:	9c05      	ldr	r4, [sp, #20]
 801edd6:	fb92 f6f3 	sdiv	r6, r2, r3
 801edda:	ee17 2a10 	vmov	r2, s14
 801edde:	eeb0 7a43 	vmov.f32	s14, s6
 801ede2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ede6:	ee17 0a10 	vmov	r0, s14
 801edea:	eeb0 7a62 	vmov.f32	s14, s5
 801edee:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801edf2:	fb92 f7f3 	sdiv	r7, r2, r3
 801edf6:	eeb0 3a67 	vmov.f32	s6, s15
 801edfa:	ee17 2a10 	vmov	r2, s14
 801edfe:	eef0 2a46 	vmov.f32	s5, s12
 801ee02:	bf08      	it	eq
 801ee04:	4623      	moveq	r3, r4
 801ee06:	e79e      	b.n	801ed46 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801ee08:	9506      	str	r5, [sp, #24]
 801ee0a:	1e5d      	subs	r5, r3, #1
 801ee0c:	46d6      	mov	lr, sl
 801ee0e:	fb05 2a06 	mla	sl, r5, r6, r2
 801ee12:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801ee16:	9c01      	ldr	r4, [sp, #4]
 801ee18:	9501      	str	r5, [sp, #4]
 801ee1a:	d559      	bpl.n	801eed0 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801ee1c:	460c      	mov	r4, r1
 801ee1e:	9d06      	ldr	r5, [sp, #24]
 801ee20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ee24:	4419      	add	r1, r3
 801ee26:	4673      	mov	r3, lr
 801ee28:	46b6      	mov	lr, r6
 801ee2a:	4646      	mov	r6, r8
 801ee2c:	e002      	b.n	801ee34 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801ee2e:	1415      	asrs	r5, r2, #16
 801ee30:	e9db 3602 	ldrd	r3, r6, [fp, #8]
 801ee34:	2d00      	cmp	r5, #0
 801ee36:	4472      	add	r2, lr
 801ee38:	db35      	blt.n	801eea6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801ee3a:	429d      	cmp	r5, r3
 801ee3c:	da33      	bge.n	801eea6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801ee3e:	ea5f 4820 	movs.w	r8, r0, asr #16
 801ee42:	d430      	bmi.n	801eea6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801ee44:	45b0      	cmp	r8, r6
 801ee46:	b21b      	sxth	r3, r3
 801ee48:	da2d      	bge.n	801eea6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801ee4a:	9e02      	ldr	r6, [sp, #8]
 801ee4c:	fb08 6303 	mla	r3, r8, r3, r6
 801ee50:	7826      	ldrb	r6, [r4, #0]
 801ee52:	5d5b      	ldrb	r3, [r3, r5]
 801ee54:	fb16 f80c 	smulbb	r8, r6, ip
 801ee58:	9d07      	ldr	r5, [sp, #28]
 801ee5a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ee5e:	5cee      	ldrb	r6, [r5, r3]
 801ee60:	442b      	add	r3, r5
 801ee62:	fb06 8609 	mla	r6, r6, r9, r8
 801ee66:	b2b6      	uxth	r6, r6
 801ee68:	7865      	ldrb	r5, [r4, #1]
 801ee6a:	f106 0801 	add.w	r8, r6, #1
 801ee6e:	eb08 2616 	add.w	r6, r8, r6, lsr #8
 801ee72:	1236      	asrs	r6, r6, #8
 801ee74:	fb15 f80c 	smulbb	r8, r5, ip
 801ee78:	7026      	strb	r6, [r4, #0]
 801ee7a:	785d      	ldrb	r5, [r3, #1]
 801ee7c:	78a6      	ldrb	r6, [r4, #2]
 801ee7e:	fb05 8509 	mla	r5, r5, r9, r8
 801ee82:	b2ad      	uxth	r5, r5
 801ee84:	f105 0801 	add.w	r8, r5, #1
 801ee88:	eb08 2515 	add.w	r5, r8, r5, lsr #8
 801ee8c:	122d      	asrs	r5, r5, #8
 801ee8e:	fb16 f60c 	smulbb	r6, r6, ip
 801ee92:	7065      	strb	r5, [r4, #1]
 801ee94:	789b      	ldrb	r3, [r3, #2]
 801ee96:	fb03 6309 	mla	r3, r3, r9, r6
 801ee9a:	b29b      	uxth	r3, r3
 801ee9c:	1c5d      	adds	r5, r3, #1
 801ee9e:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801eea2:	121b      	asrs	r3, r3, #8
 801eea4:	70a3      	strb	r3, [r4, #2]
 801eea6:	3403      	adds	r4, #3
 801eea8:	428c      	cmp	r4, r1
 801eeaa:	4438      	add	r0, r7
 801eeac:	d1bf      	bne.n	801ee2e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
 801eeae:	9b04      	ldr	r3, [sp, #16]
 801eeb0:	2b00      	cmp	r3, #0
 801eeb2:	f73f af74 	bgt.w	801ed9e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801eeb6:	b009      	add	sp, #36	; 0x24
 801eeb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eebc:	f43f af6b 	beq.w	801ed96 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801eec0:	1e5d      	subs	r5, r3, #1
 801eec2:	fb05 2a06 	mla	sl, r5, r6, r2
 801eec6:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801eeca:	9501      	str	r5, [sp, #4]
 801eecc:	f53f af63 	bmi.w	801ed96 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801eed0:	4554      	cmp	r4, sl
 801eed2:	dd54      	ble.n	801ef7e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801eed4:	9d01      	ldr	r5, [sp, #4]
 801eed6:	fb05 0507 	mla	r5, r5, r7, r0
 801eeda:	ea5f 4a25 	movs.w	sl, r5, asr #16
 801eede:	d44e      	bmi.n	801ef7e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801eee0:	9d03      	ldr	r5, [sp, #12]
 801eee2:	45aa      	cmp	sl, r5
 801eee4:	da4b      	bge.n	801ef7e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801eee6:	2b00      	cmp	r3, #0
 801eee8:	f77f af55 	ble.w	801ed96 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801eeec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eef0:	eb01 0e03 	add.w	lr, r1, r3
 801eef4:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801eef8:	3103      	adds	r1, #3
 801eefa:	e002      	b.n	801ef02 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801eefc:	f9bb 4008 	ldrsh.w	r4, [fp, #8]
 801ef00:	3103      	adds	r1, #3
 801ef02:	9d02      	ldr	r5, [sp, #8]
 801ef04:	1403      	asrs	r3, r0, #16
 801ef06:	fb04 5303 	mla	r3, r4, r3, r5
 801ef0a:	1415      	asrs	r5, r2, #16
 801ef0c:	f811 4c03 	ldrb.w	r4, [r1, #-3]
 801ef10:	5d5b      	ldrb	r3, [r3, r5]
 801ef12:	fb14 f40c 	smulbb	r4, r4, ip
 801ef16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ef1a:	f818 5003 	ldrb.w	r5, [r8, r3]
 801ef1e:	4443      	add	r3, r8
 801ef20:	fb05 4509 	mla	r5, r5, r9, r4
 801ef24:	b2ad      	uxth	r5, r5
 801ef26:	f105 0a01 	add.w	sl, r5, #1
 801ef2a:	f811 4c02 	ldrb.w	r4, [r1, #-2]
 801ef2e:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801ef32:	122d      	asrs	r5, r5, #8
 801ef34:	fb14 f40c 	smulbb	r4, r4, ip
 801ef38:	f801 5c03 	strb.w	r5, [r1, #-3]
 801ef3c:	785d      	ldrb	r5, [r3, #1]
 801ef3e:	f811 ac01 	ldrb.w	sl, [r1, #-1]
 801ef42:	fb05 4409 	mla	r4, r5, r9, r4
 801ef46:	b2a4      	uxth	r4, r4
 801ef48:	1c65      	adds	r5, r4, #1
 801ef4a:	eb05 2414 	add.w	r4, r5, r4, lsr #8
 801ef4e:	1224      	asrs	r4, r4, #8
 801ef50:	fb1a fa0c 	smulbb	sl, sl, ip
 801ef54:	f801 4c02 	strb.w	r4, [r1, #-2]
 801ef58:	789b      	ldrb	r3, [r3, #2]
 801ef5a:	458e      	cmp	lr, r1
 801ef5c:	fb03 aa09 	mla	sl, r3, r9, sl
 801ef60:	fa1f fa8a 	uxth.w	sl, sl
 801ef64:	f10a 0301 	add.w	r3, sl, #1
 801ef68:	eb03 2a1a 	add.w	sl, r3, sl, lsr #8
 801ef6c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ef70:	4438      	add	r0, r7
 801ef72:	4432      	add	r2, r6
 801ef74:	f801 ac01 	strb.w	sl, [r1, #-1]
 801ef78:	d1c0      	bne.n	801eefc <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801ef7a:	4671      	mov	r1, lr
 801ef7c:	e70b      	b.n	801ed96 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ef7e:	2b00      	cmp	r3, #0
 801ef80:	f77f af09 	ble.w	801ed96 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ef84:	1415      	asrs	r5, r2, #16
 801ef86:	460c      	mov	r4, r1
 801ef88:	9506      	str	r5, [sp, #24]
 801ef8a:	e749      	b.n	801ee20 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>

0801ef8c <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ef8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef90:	4689      	mov	r9, r1
 801ef92:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801ef96:	46c8      	mov	r8, r9
 801ef98:	b087      	sub	sp, #28
 801ef9a:	e9dd 1015 	ldrd	r1, r0, [sp, #84]	; 0x54
 801ef9e:	684c      	ldr	r4, [r1, #4]
 801efa0:	9203      	str	r2, [sp, #12]
 801efa2:	e9dd 2c17 	ldrd	r2, ip, [sp, #92]	; 0x5c
 801efa6:	fb04 0202 	mla	r2, r4, r2, r0
 801efaa:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	; 0x4c
 801efae:	680d      	ldr	r5, [r1, #0]
 801efb0:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801efb4:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 801efb8:	f8dc 2000 	ldr.w	r2, [ip]
 801efbc:	4428      	add	r0, r5
 801efbe:	f104 0b04 	add.w	fp, r4, #4
 801efc2:	9205      	str	r2, [sp, #20]
 801efc4:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801efc8:	f1b8 0f00 	cmp.w	r8, #0
 801efcc:	dc03      	bgt.n	801efd6 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801efce:	9c03      	ldr	r4, [sp, #12]
 801efd0:	2c00      	cmp	r4, #0
 801efd2:	f340 808d 	ble.w	801f0f0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801efd6:	e9dc ea02 	ldrd	lr, sl, [ip, #8]
 801efda:	2b00      	cmp	r3, #0
 801efdc:	fa0f f58a 	sxth.w	r5, sl
 801efe0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801efe4:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801efe8:	fa0f f48e 	sxth.w	r4, lr
 801efec:	9502      	str	r5, [sp, #8]
 801efee:	f340 8082 	ble.w	801f0f6 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801eff2:	46f1      	mov	r9, lr
 801eff4:	9401      	str	r4, [sp, #4]
 801eff6:	1415      	asrs	r5, r2, #16
 801eff8:	d408      	bmi.n	801f00c <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801effa:	9c01      	ldr	r4, [sp, #4]
 801effc:	42a5      	cmp	r5, r4
 801effe:	da05      	bge.n	801f00c <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801f000:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801f004:	d402      	bmi.n	801f00c <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801f006:	9c02      	ldr	r4, [sp, #8]
 801f008:	45a6      	cmp	lr, r4
 801f00a:	db3b      	blt.n	801f084 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801f00c:	3b01      	subs	r3, #1
 801f00e:	4432      	add	r2, r6
 801f010:	4439      	add	r1, r7
 801f012:	f100 0003 	add.w	r0, r0, #3
 801f016:	d1ee      	bne.n	801eff6 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f018:	f1b8 0f00 	cmp.w	r8, #0
 801f01c:	dd68      	ble.n	801f0f0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f01e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f022:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f026:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801f02a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f02e:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801f032:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f036:	ee76 6a62 	vsub.f32	s13, s12, s5
 801f03a:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801f03e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f042:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f046:	ee16 2a90 	vmov	r2, s13
 801f04a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f04c:	9c03      	ldr	r4, [sp, #12]
 801f04e:	fb92 f6f3 	sdiv	r6, r2, r3
 801f052:	ee17 2a10 	vmov	r2, s14
 801f056:	eeb0 7a43 	vmov.f32	s14, s6
 801f05a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f05e:	ee17 1a10 	vmov	r1, s14
 801f062:	eeb0 7a62 	vmov.f32	s14, s5
 801f066:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f06a:	f1b8 0801 	subs.w	r8, r8, #1
 801f06e:	fb92 f7f3 	sdiv	r7, r2, r3
 801f072:	eeb0 3a67 	vmov.f32	s6, s15
 801f076:	ee17 2a10 	vmov	r2, s14
 801f07a:	eef0 2a46 	vmov.f32	s5, s12
 801f07e:	bf08      	it	eq
 801f080:	4623      	moveq	r3, r4
 801f082:	e7a1      	b.n	801efc8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f084:	9c01      	ldr	r4, [sp, #4]
 801f086:	9501      	str	r5, [sp, #4]
 801f088:	1e5d      	subs	r5, r3, #1
 801f08a:	46ce      	mov	lr, r9
 801f08c:	fb06 2905 	mla	r9, r6, r5, r2
 801f090:	ea5f 4929 	movs.w	r9, r9, asr #16
 801f094:	9504      	str	r5, [sp, #16]
 801f096:	d536      	bpl.n	801f106 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801f098:	4604      	mov	r4, r0
 801f09a:	9d01      	ldr	r5, [sp, #4]
 801f09c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f0a0:	4418      	add	r0, r3
 801f0a2:	4673      	mov	r3, lr
 801f0a4:	46b6      	mov	lr, r6
 801f0a6:	4656      	mov	r6, sl
 801f0a8:	e002      	b.n	801f0b0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801f0aa:	1415      	asrs	r5, r2, #16
 801f0ac:	e9dc 3602 	ldrd	r3, r6, [ip, #8]
 801f0b0:	2d00      	cmp	r5, #0
 801f0b2:	4472      	add	r2, lr
 801f0b4:	db15      	blt.n	801f0e2 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f0b6:	429d      	cmp	r5, r3
 801f0b8:	da13      	bge.n	801f0e2 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f0ba:	ea5f 4921 	movs.w	r9, r1, asr #16
 801f0be:	d410      	bmi.n	801f0e2 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f0c0:	45b1      	cmp	r9, r6
 801f0c2:	da0e      	bge.n	801f0e2 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f0c4:	9e05      	ldr	r6, [sp, #20]
 801f0c6:	b21b      	sxth	r3, r3
 801f0c8:	fb09 6303 	mla	r3, r9, r3, r6
 801f0cc:	5d5b      	ldrb	r3, [r3, r5]
 801f0ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f0d2:	f81b 5003 	ldrb.w	r5, [fp, r3]
 801f0d6:	445b      	add	r3, fp
 801f0d8:	7025      	strb	r5, [r4, #0]
 801f0da:	785d      	ldrb	r5, [r3, #1]
 801f0dc:	7065      	strb	r5, [r4, #1]
 801f0de:	789b      	ldrb	r3, [r3, #2]
 801f0e0:	70a3      	strb	r3, [r4, #2]
 801f0e2:	3403      	adds	r4, #3
 801f0e4:	4284      	cmp	r4, r0
 801f0e6:	4439      	add	r1, r7
 801f0e8:	d1df      	bne.n	801f0aa <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801f0ea:	f1b8 0f00 	cmp.w	r8, #0
 801f0ee:	dc96      	bgt.n	801f01e <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f0f0:	b007      	add	sp, #28
 801f0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0f6:	d08f      	beq.n	801f018 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f0f8:	1e5d      	subs	r5, r3, #1
 801f0fa:	fb06 2905 	mla	r9, r6, r5, r2
 801f0fe:	ea5f 4929 	movs.w	r9, r9, asr #16
 801f102:	9504      	str	r5, [sp, #16]
 801f104:	d488      	bmi.n	801f018 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f106:	45a1      	cmp	r9, r4
 801f108:	da2d      	bge.n	801f166 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801f10a:	9d04      	ldr	r5, [sp, #16]
 801f10c:	fb07 1505 	mla	r5, r7, r5, r1
 801f110:	ea5f 4925 	movs.w	r9, r5, asr #16
 801f114:	d427      	bmi.n	801f166 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801f116:	9d02      	ldr	r5, [sp, #8]
 801f118:	454d      	cmp	r5, r9
 801f11a:	dd24      	ble.n	801f166 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801f11c:	2b00      	cmp	r3, #0
 801f11e:	f77f af7b 	ble.w	801f018 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f122:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f126:	18c5      	adds	r5, r0, r3
 801f128:	f8dd e014 	ldr.w	lr, [sp, #20]
 801f12c:	3003      	adds	r0, #3
 801f12e:	e002      	b.n	801f136 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801f130:	f9bc 4008 	ldrsh.w	r4, [ip, #8]
 801f134:	3003      	adds	r0, #3
 801f136:	140b      	asrs	r3, r1, #16
 801f138:	fb04 e303 	mla	r3, r4, r3, lr
 801f13c:	1414      	asrs	r4, r2, #16
 801f13e:	5d1b      	ldrb	r3, [r3, r4]
 801f140:	4285      	cmp	r5, r0
 801f142:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f146:	f81b 4003 	ldrb.w	r4, [fp, r3]
 801f14a:	445b      	add	r3, fp
 801f14c:	f800 4c03 	strb.w	r4, [r0, #-3]
 801f150:	785c      	ldrb	r4, [r3, #1]
 801f152:	4439      	add	r1, r7
 801f154:	f800 4c02 	strb.w	r4, [r0, #-2]
 801f158:	789b      	ldrb	r3, [r3, #2]
 801f15a:	4432      	add	r2, r6
 801f15c:	f800 3c01 	strb.w	r3, [r0, #-1]
 801f160:	d1e6      	bne.n	801f130 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801f162:	4628      	mov	r0, r5
 801f164:	e758      	b.n	801f018 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f166:	2b00      	cmp	r3, #0
 801f168:	f77f af56 	ble.w	801f018 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f16c:	1415      	asrs	r5, r2, #16
 801f16e:	4604      	mov	r4, r0
 801f170:	9501      	str	r5, [sp, #4]
 801f172:	e793      	b.n	801f09c <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>

0801f174 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f178:	b087      	sub	sp, #28
 801f17a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801f17e:	e9dd 1015 	ldrd	r1, r0, [sp, #84]	; 0x54
 801f182:	e9dd 2c17 	ldrd	r2, ip, [sp, #92]	; 0x5c
 801f186:	684c      	ldr	r4, [r1, #4]
 801f188:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801f18c:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	; 0x4c
 801f190:	fb04 0202 	mla	r2, r4, r2, r0
 801f194:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 801f198:	f8dc 2000 	ldr.w	r2, [ip]
 801f19c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801f1a0:	9201      	str	r2, [sp, #4]
 801f1a2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f1a6:	6808      	ldr	r0, [r1, #0]
 801f1a8:	9204      	str	r2, [sp, #16]
 801f1aa:	1d22      	adds	r2, r4, #4
 801f1ac:	e9dd e111 	ldrd	lr, r1, [sp, #68]	; 0x44
 801f1b0:	9205      	str	r2, [sp, #20]
 801f1b2:	4672      	mov	r2, lr
 801f1b4:	4428      	add	r0, r5
 801f1b6:	9c02      	ldr	r4, [sp, #8]
 801f1b8:	2c00      	cmp	r4, #0
 801f1ba:	dc03      	bgt.n	801f1c4 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801f1bc:	9c03      	ldr	r4, [sp, #12]
 801f1be:	2c00      	cmp	r4, #0
 801f1c0:	f340 80ba 	ble.w	801f338 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801f1c4:	e9dc e802 	ldrd	lr, r8, [ip, #8]
 801f1c8:	2b00      	cmp	r3, #0
 801f1ca:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f1ce:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801f1d2:	fa0f f48e 	sxth.w	r4, lr
 801f1d6:	fa0f f988 	sxth.w	r9, r8
 801f1da:	f340 80b0 	ble.w	801f33e <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801f1de:	1415      	asrs	r5, r2, #16
 801f1e0:	d406      	bmi.n	801f1f0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f1e2:	42a5      	cmp	r5, r4
 801f1e4:	da04      	bge.n	801f1f0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f1e6:	ea5f 4a21 	movs.w	sl, r1, asr #16
 801f1ea:	d401      	bmi.n	801f1f0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f1ec:	45ca      	cmp	sl, r9
 801f1ee:	db3c      	blt.n	801f26a <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf6>
 801f1f0:	3b01      	subs	r3, #1
 801f1f2:	4432      	add	r2, r6
 801f1f4:	4439      	add	r1, r7
 801f1f6:	f100 0003 	add.w	r0, r0, #3
 801f1fa:	d1f0      	bne.n	801f1de <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f1fc:	9b02      	ldr	r3, [sp, #8]
 801f1fe:	2b00      	cmp	r3, #0
 801f200:	f340 809a 	ble.w	801f338 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801f204:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f208:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f20c:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801f210:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f214:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801f218:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f21c:	ee76 6a62 	vsub.f32	s13, s12, s5
 801f220:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801f224:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f228:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f22c:	ee16 2a90 	vmov	r2, s13
 801f230:	3b01      	subs	r3, #1
 801f232:	9302      	str	r3, [sp, #8]
 801f234:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f236:	9c03      	ldr	r4, [sp, #12]
 801f238:	fb92 f6f3 	sdiv	r6, r2, r3
 801f23c:	ee17 2a10 	vmov	r2, s14
 801f240:	eeb0 7a43 	vmov.f32	s14, s6
 801f244:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f248:	ee17 1a10 	vmov	r1, s14
 801f24c:	eeb0 7a62 	vmov.f32	s14, s5
 801f250:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f254:	fb92 f7f3 	sdiv	r7, r2, r3
 801f258:	eeb0 3a67 	vmov.f32	s6, s15
 801f25c:	ee17 2a10 	vmov	r2, s14
 801f260:	eef0 2a46 	vmov.f32	s5, s12
 801f264:	bf08      	it	eq
 801f266:	4623      	moveq	r3, r4
 801f268:	e7a5      	b.n	801f1b6 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801f26a:	f103 3bff 	add.w	fp, r3, #4294967295
 801f26e:	fb0b 2a06 	mla	sl, fp, r6, r2
 801f272:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801f276:	d56c      	bpl.n	801f352 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801f278:	4604      	mov	r4, r0
 801f27a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f27e:	4418      	add	r0, r3
 801f280:	4673      	mov	r3, lr
 801f282:	46b6      	mov	lr, r6
 801f284:	4646      	mov	r6, r8
 801f286:	e002      	b.n	801f28e <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 801f288:	1415      	asrs	r5, r2, #16
 801f28a:	e9dc 3602 	ldrd	r3, r6, [ip, #8]
 801f28e:	2d00      	cmp	r5, #0
 801f290:	4472      	add	r2, lr
 801f292:	db49      	blt.n	801f328 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801f294:	429d      	cmp	r5, r3
 801f296:	da47      	bge.n	801f328 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801f298:	ea5f 4821 	movs.w	r8, r1, asr #16
 801f29c:	d444      	bmi.n	801f328 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801f29e:	45b0      	cmp	r8, r6
 801f2a0:	b21b      	sxth	r3, r3
 801f2a2:	da41      	bge.n	801f328 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801f2a4:	9e01      	ldr	r6, [sp, #4]
 801f2a6:	fb08 6303 	mla	r3, r8, r3, r6
 801f2aa:	5d5b      	ldrb	r3, [r3, r5]
 801f2ac:	9d05      	ldr	r5, [sp, #20]
 801f2ae:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801f2b2:	0e1d      	lsrs	r5, r3, #24
 801f2b4:	d038      	beq.n	801f328 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801f2b6:	9e04      	ldr	r6, [sp, #16]
 801f2b8:	fa5f f983 	uxtb.w	r9, r3
 801f2bc:	fb06 f605 	mul.w	r6, r6, r5
 801f2c0:	1c75      	adds	r5, r6, #1
 801f2c2:	eb05 2526 	add.w	r5, r5, r6, asr #8
 801f2c6:	122d      	asrs	r5, r5, #8
 801f2c8:	43ee      	mvns	r6, r5
 801f2ca:	b2ad      	uxth	r5, r5
 801f2cc:	fb19 f905 	smulbb	r9, r9, r5
 801f2d0:	f3c3 2807 	ubfx	r8, r3, #8, #8
 801f2d4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801f2d8:	f894 a000 	ldrb.w	sl, [r4]
 801f2dc:	fb18 f805 	smulbb	r8, r8, r5
 801f2e0:	fb13 f305 	smulbb	r3, r3, r5
 801f2e4:	b2f5      	uxtb	r5, r6
 801f2e6:	fb0a 9605 	mla	r6, sl, r5, r9
 801f2ea:	f894 b001 	ldrb.w	fp, [r4, #1]
 801f2ee:	f894 9002 	ldrb.w	r9, [r4, #2]
 801f2f2:	fb0b 8805 	mla	r8, fp, r5, r8
 801f2f6:	fb09 3305 	mla	r3, r9, r5, r3
 801f2fa:	fa1f fa86 	uxth.w	sl, r6
 801f2fe:	fa1f f888 	uxth.w	r8, r8
 801f302:	b29b      	uxth	r3, r3
 801f304:	f10a 0601 	add.w	r6, sl, #1
 801f308:	f108 0501 	add.w	r5, r8, #1
 801f30c:	f103 0901 	add.w	r9, r3, #1
 801f310:	eb06 261a 	add.w	r6, r6, sl, lsr #8
 801f314:	eb05 2518 	add.w	r5, r5, r8, lsr #8
 801f318:	eb09 2313 	add.w	r3, r9, r3, lsr #8
 801f31c:	1236      	asrs	r6, r6, #8
 801f31e:	122d      	asrs	r5, r5, #8
 801f320:	121b      	asrs	r3, r3, #8
 801f322:	7026      	strb	r6, [r4, #0]
 801f324:	7065      	strb	r5, [r4, #1]
 801f326:	70a3      	strb	r3, [r4, #2]
 801f328:	3403      	adds	r4, #3
 801f32a:	4284      	cmp	r4, r0
 801f32c:	4439      	add	r1, r7
 801f32e:	d1ab      	bne.n	801f288 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801f330:	9b02      	ldr	r3, [sp, #8]
 801f332:	2b00      	cmp	r3, #0
 801f334:	f73f af66 	bgt.w	801f204 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f338:	b007      	add	sp, #28
 801f33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f33e:	f43f af5d 	beq.w	801f1fc <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801f342:	f103 3bff 	add.w	fp, r3, #4294967295
 801f346:	fb0b 2a06 	mla	sl, fp, r6, r2
 801f34a:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801f34e:	f53f af55 	bmi.w	801f1fc <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801f352:	4554      	cmp	r4, sl
 801f354:	dd64      	ble.n	801f420 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801f356:	fb0b 1b07 	mla	fp, fp, r7, r1
 801f35a:	ea5f 4b2b 	movs.w	fp, fp, asr #16
 801f35e:	d45f      	bmi.n	801f420 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801f360:	45cb      	cmp	fp, r9
 801f362:	da5d      	bge.n	801f420 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801f364:	2b00      	cmp	r3, #0
 801f366:	f77f af49 	ble.w	801f1fc <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801f36a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f36e:	eb00 0e03 	add.w	lr, r0, r3
 801f372:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801f376:	3003      	adds	r0, #3
 801f378:	e002      	b.n	801f380 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801f37a:	f9bc 4008 	ldrsh.w	r4, [ip, #8]
 801f37e:	3003      	adds	r0, #3
 801f380:	9d01      	ldr	r5, [sp, #4]
 801f382:	140b      	asrs	r3, r1, #16
 801f384:	fb04 5303 	mla	r3, r4, r3, r5
 801f388:	1414      	asrs	r4, r2, #16
 801f38a:	5d1b      	ldrb	r3, [r3, r4]
 801f38c:	4432      	add	r2, r6
 801f38e:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801f392:	4439      	add	r1, r7
 801f394:	ea5f 6a13 	movs.w	sl, r3, lsr #24
 801f398:	d03e      	beq.n	801f418 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801f39a:	9c04      	ldr	r4, [sp, #16]
 801f39c:	fa5f f983 	uxtb.w	r9, r3
 801f3a0:	fb04 f40a 	mul.w	r4, r4, sl
 801f3a4:	f104 0a01 	add.w	sl, r4, #1
 801f3a8:	eb0a 2a24 	add.w	sl, sl, r4, asr #8
 801f3ac:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f3b0:	ea6f 040a 	mvn.w	r4, sl
 801f3b4:	fa1f fa8a 	uxth.w	sl, sl
 801f3b8:	fb19 f90a 	smulbb	r9, r9, sl
 801f3bc:	f3c3 2507 	ubfx	r5, r3, #8, #8
 801f3c0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801f3c4:	fb15 fb0a 	smulbb	fp, r5, sl
 801f3c8:	fb13 f30a 	smulbb	r3, r3, sl
 801f3cc:	f810 ac03 	ldrb.w	sl, [r0, #-3]
 801f3d0:	b2e4      	uxtb	r4, r4
 801f3d2:	fb0a 9904 	mla	r9, sl, r4, r9
 801f3d6:	f810 5c02 	ldrb.w	r5, [r0, #-2]
 801f3da:	f810 ac01 	ldrb.w	sl, [r0, #-1]
 801f3de:	fb05 b504 	mla	r5, r5, r4, fp
 801f3e2:	fb0a 3304 	mla	r3, sl, r4, r3
 801f3e6:	fa1f f989 	uxth.w	r9, r9
 801f3ea:	b2ad      	uxth	r5, r5
 801f3ec:	b29b      	uxth	r3, r3
 801f3ee:	f109 0b01 	add.w	fp, r9, #1
 801f3f2:	f105 0a01 	add.w	sl, r5, #1
 801f3f6:	1c5c      	adds	r4, r3, #1
 801f3f8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f3fc:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801f400:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801f404:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f408:	122d      	asrs	r5, r5, #8
 801f40a:	121b      	asrs	r3, r3, #8
 801f40c:	f800 9c03 	strb.w	r9, [r0, #-3]
 801f410:	f800 5c02 	strb.w	r5, [r0, #-2]
 801f414:	f800 3c01 	strb.w	r3, [r0, #-1]
 801f418:	4586      	cmp	lr, r0
 801f41a:	d1ae      	bne.n	801f37a <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801f41c:	4670      	mov	r0, lr
 801f41e:	e6ed      	b.n	801f1fc <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801f420:	2b00      	cmp	r3, #0
 801f422:	f77f aeeb 	ble.w	801f1fc <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801f426:	4604      	mov	r4, r0
 801f428:	1415      	asrs	r5, r2, #16
 801f42a:	e726      	b.n	801f27a <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>

0801f42c <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f42c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801f430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f434:	b087      	sub	sp, #28
 801f436:	e9cd 1203 	strd	r1, r2, [sp, #12]
 801f43a:	e9dd 1015 	ldrd	r1, r0, [sp, #84]	; 0x54
 801f43e:	e9dd 2b17 	ldrd	r2, fp, [sp, #92]	; 0x5c
 801f442:	684c      	ldr	r4, [r1, #4]
 801f444:	680d      	ldr	r5, [r1, #0]
 801f446:	fb04 0202 	mla	r2, r4, r2, r0
 801f44a:	e9dd 8913 	ldrd	r8, r9, [sp, #76]	; 0x4c
 801f44e:	f8db 4004 	ldr.w	r4, [fp, #4]
 801f452:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 801f456:	3404      	adds	r4, #4
 801f458:	f8db 2000 	ldr.w	r2, [fp]
 801f45c:	4428      	add	r0, r5
 801f45e:	9402      	str	r4, [sp, #8]
 801f460:	9201      	str	r2, [sp, #4]
 801f462:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801f466:	9c03      	ldr	r4, [sp, #12]
 801f468:	2c00      	cmp	r4, #0
 801f46a:	dc03      	bgt.n	801f474 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f46c:	9c04      	ldr	r4, [sp, #16]
 801f46e:	2c00      	cmp	r4, #0
 801f470:	f340 80b7 	ble.w	801f5e2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801f474:	e9db 6702 	ldrd	r6, r7, [fp, #8]
 801f478:	2b00      	cmp	r3, #0
 801f47a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f47e:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801f482:	b234      	sxth	r4, r6
 801f484:	fa0f fc87 	sxth.w	ip, r7
 801f488:	f340 80ae 	ble.w	801f5e8 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801f48c:	1415      	asrs	r5, r2, #16
 801f48e:	d406      	bmi.n	801f49e <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f490:	42a5      	cmp	r5, r4
 801f492:	da04      	bge.n	801f49e <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f494:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801f498:	d401      	bmi.n	801f49e <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f49a:	45e6      	cmp	lr, ip
 801f49c:	db3c      	blt.n	801f518 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xec>
 801f49e:	3b01      	subs	r3, #1
 801f4a0:	4442      	add	r2, r8
 801f4a2:	4449      	add	r1, r9
 801f4a4:	f100 0003 	add.w	r0, r0, #3
 801f4a8:	d1f0      	bne.n	801f48c <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f4aa:	9b03      	ldr	r3, [sp, #12]
 801f4ac:	2b00      	cmp	r3, #0
 801f4ae:	f340 8098 	ble.w	801f5e2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801f4b2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f4b6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f4ba:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801f4be:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f4c2:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801f4c6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f4ca:	ee76 6a62 	vsub.f32	s13, s12, s5
 801f4ce:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801f4d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f4d6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f4da:	ee16 2a90 	vmov	r2, s13
 801f4de:	3b01      	subs	r3, #1
 801f4e0:	9303      	str	r3, [sp, #12]
 801f4e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f4e4:	9c04      	ldr	r4, [sp, #16]
 801f4e6:	fb92 f8f3 	sdiv	r8, r2, r3
 801f4ea:	ee17 2a10 	vmov	r2, s14
 801f4ee:	eeb0 7a43 	vmov.f32	s14, s6
 801f4f2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f4f6:	ee17 1a10 	vmov	r1, s14
 801f4fa:	eeb0 7a62 	vmov.f32	s14, s5
 801f4fe:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f502:	fb92 f9f3 	sdiv	r9, r2, r3
 801f506:	eeb0 3a67 	vmov.f32	s6, s15
 801f50a:	ee17 2a10 	vmov	r2, s14
 801f50e:	eef0 2a46 	vmov.f32	s5, s12
 801f512:	bf08      	it	eq
 801f514:	4623      	moveq	r3, r4
 801f516:	e7a6      	b.n	801f466 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f518:	f103 3aff 	add.w	sl, r3, #4294967295
 801f51c:	fb0a 2e08 	mla	lr, sl, r8, r2
 801f520:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801f524:	d56a      	bpl.n	801f5fc <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801f526:	4604      	mov	r4, r0
 801f528:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f52c:	4418      	add	r0, r3
 801f52e:	e002      	b.n	801f536 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801f530:	1415      	asrs	r5, r2, #16
 801f532:	e9db 6702 	ldrd	r6, r7, [fp, #8]
 801f536:	2d00      	cmp	r5, #0
 801f538:	db4a      	blt.n	801f5d0 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801f53a:	42b5      	cmp	r5, r6
 801f53c:	da48      	bge.n	801f5d0 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801f53e:	140b      	asrs	r3, r1, #16
 801f540:	d446      	bmi.n	801f5d0 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801f542:	42bb      	cmp	r3, r7
 801f544:	b236      	sxth	r6, r6
 801f546:	da43      	bge.n	801f5d0 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801f548:	9f01      	ldr	r7, [sp, #4]
 801f54a:	fb03 7606 	mla	r6, r3, r6, r7
 801f54e:	5d73      	ldrb	r3, [r6, r5]
 801f550:	9d02      	ldr	r5, [sp, #8]
 801f552:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801f556:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801f55a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801f55e:	f000 80be 	beq.w	801f6de <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 801f562:	b2df      	uxtb	r7, r3
 801f564:	f3c3 2607 	ubfx	r6, r3, #8, #8
 801f568:	f3c3 4a07 	ubfx	sl, r3, #16, #8
 801f56c:	fa5f f38c 	uxtb.w	r3, ip
 801f570:	b29d      	uxth	r5, r3
 801f572:	f1bc 0f00 	cmp.w	ip, #0
 801f576:	d02b      	beq.n	801f5d0 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801f578:	43db      	mvns	r3, r3
 801f57a:	b2db      	uxtb	r3, r3
 801f57c:	9305      	str	r3, [sp, #20]
 801f57e:	f894 e001 	ldrb.w	lr, [r4, #1]
 801f582:	fb17 f305 	smulbb	r3, r7, r5
 801f586:	9f05      	ldr	r7, [sp, #20]
 801f588:	f894 c002 	ldrb.w	ip, [r4, #2]
 801f58c:	fb1e fe07 	smulbb	lr, lr, r7
 801f590:	fb1c fc07 	smulbb	ip, ip, r7
 801f594:	fb06 ee05 	mla	lr, r6, r5, lr
 801f598:	7827      	ldrb	r7, [r4, #0]
 801f59a:	9e05      	ldr	r6, [sp, #20]
 801f59c:	fb0a c505 	mla	r5, sl, r5, ip
 801f5a0:	fb07 3706 	mla	r7, r7, r6, r3
 801f5a4:	b2ab      	uxth	r3, r5
 801f5a6:	b2bf      	uxth	r7, r7
 801f5a8:	fa1f f68e 	uxth.w	r6, lr
 801f5ac:	1c7d      	adds	r5, r7, #1
 801f5ae:	f106 0e01 	add.w	lr, r6, #1
 801f5b2:	f103 0c01 	add.w	ip, r3, #1
 801f5b6:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 801f5ba:	eb0c 2613 	add.w	r6, ip, r3, lsr #8
 801f5be:	eb05 2317 	add.w	r3, r5, r7, lsr #8
 801f5c2:	121b      	asrs	r3, r3, #8
 801f5c4:	ea4f 272e 	mov.w	r7, lr, asr #8
 801f5c8:	1235      	asrs	r5, r6, #8
 801f5ca:	7067      	strb	r7, [r4, #1]
 801f5cc:	70a5      	strb	r5, [r4, #2]
 801f5ce:	7023      	strb	r3, [r4, #0]
 801f5d0:	3403      	adds	r4, #3
 801f5d2:	4284      	cmp	r4, r0
 801f5d4:	4442      	add	r2, r8
 801f5d6:	4449      	add	r1, r9
 801f5d8:	d1aa      	bne.n	801f530 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801f5da:	9b03      	ldr	r3, [sp, #12]
 801f5dc:	2b00      	cmp	r3, #0
 801f5de:	f73f af68 	bgt.w	801f4b2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f5e2:	b007      	add	sp, #28
 801f5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f5e8:	f43f af5f 	beq.w	801f4aa <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f5ec:	f103 3aff 	add.w	sl, r3, #4294967295
 801f5f0:	fb0a 2e08 	mla	lr, sl, r8, r2
 801f5f4:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801f5f8:	f53f af57 	bmi.w	801f4aa <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f5fc:	4574      	cmp	r4, lr
 801f5fe:	dd68      	ble.n	801f6d2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f600:	fb0a 1a09 	mla	sl, sl, r9, r1
 801f604:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801f608:	d463      	bmi.n	801f6d2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f60a:	45e2      	cmp	sl, ip
 801f60c:	da61      	bge.n	801f6d2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f60e:	2b00      	cmp	r3, #0
 801f610:	f77f af4b 	ble.w	801f4aa <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f614:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f618:	eb00 0e03 	add.w	lr, r0, r3
 801f61c:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 801f620:	3003      	adds	r0, #3
 801f622:	e03b      	b.n	801f69c <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 801f624:	b2fc      	uxtb	r4, r7
 801f626:	fa5f fc83 	uxtb.w	ip, r3
 801f62a:	f3c3 2607 	ubfx	r6, r3, #8, #8
 801f62e:	b2a5      	uxth	r5, r4
 801f630:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801f634:	b357      	cbz	r7, 801f68c <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801f636:	43e4      	mvns	r4, r4
 801f638:	f810 ac02 	ldrb.w	sl, [r0, #-2]
 801f63c:	f810 8c01 	ldrb.w	r8, [r0, #-1]
 801f640:	b2e4      	uxtb	r4, r4
 801f642:	fb1c fc05 	smulbb	ip, ip, r5
 801f646:	fb18 f804 	smulbb	r8, r8, r4
 801f64a:	fb1a fa04 	smulbb	sl, sl, r4
 801f64e:	f810 7c03 	ldrb.w	r7, [r0, #-3]
 801f652:	fb03 8305 	mla	r3, r3, r5, r8
 801f656:	fb06 a605 	mla	r6, r6, r5, sl
 801f65a:	fb07 c404 	mla	r4, r7, r4, ip
 801f65e:	b2b6      	uxth	r6, r6
 801f660:	b2a4      	uxth	r4, r4
 801f662:	b29b      	uxth	r3, r3
 801f664:	f106 0c01 	add.w	ip, r6, #1
 801f668:	f103 0801 	add.w	r8, r3, #1
 801f66c:	1c65      	adds	r5, r4, #1
 801f66e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801f672:	eb08 2313 	add.w	r3, r8, r3, lsr #8
 801f676:	eb05 2514 	add.w	r5, r5, r4, lsr #8
 801f67a:	1236      	asrs	r6, r6, #8
 801f67c:	121b      	asrs	r3, r3, #8
 801f67e:	122d      	asrs	r5, r5, #8
 801f680:	f800 6c02 	strb.w	r6, [r0, #-2]
 801f684:	f800 3c01 	strb.w	r3, [r0, #-1]
 801f688:	f800 5c03 	strb.w	r5, [r0, #-3]
 801f68c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f68e:	4586      	cmp	lr, r0
 801f690:	441a      	add	r2, r3
 801f692:	4449      	add	r1, r9
 801f694:	d01b      	beq.n	801f6ce <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801f696:	f9bb 4008 	ldrsh.w	r4, [fp, #8]
 801f69a:	3003      	adds	r0, #3
 801f69c:	9d01      	ldr	r5, [sp, #4]
 801f69e:	140b      	asrs	r3, r1, #16
 801f6a0:	fb04 5303 	mla	r3, r4, r3, r5
 801f6a4:	1414      	asrs	r4, r2, #16
 801f6a6:	5d1b      	ldrb	r3, [r3, r4]
 801f6a8:	9c02      	ldr	r4, [sp, #8]
 801f6aa:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801f6ae:	0e1f      	lsrs	r7, r3, #24
 801f6b0:	2fff      	cmp	r7, #255	; 0xff
 801f6b2:	d1b7      	bne.n	801f624 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801f6b4:	0a1d      	lsrs	r5, r3, #8
 801f6b6:	0c1c      	lsrs	r4, r3, #16
 801f6b8:	f800 3c03 	strb.w	r3, [r0, #-3]
 801f6bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f6be:	4586      	cmp	lr, r0
 801f6c0:	f800 5c02 	strb.w	r5, [r0, #-2]
 801f6c4:	f800 4c01 	strb.w	r4, [r0, #-1]
 801f6c8:	441a      	add	r2, r3
 801f6ca:	4449      	add	r1, r9
 801f6cc:	d1e3      	bne.n	801f696 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801f6ce:	4670      	mov	r0, lr
 801f6d0:	e6eb      	b.n	801f4aa <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f6d2:	2b00      	cmp	r3, #0
 801f6d4:	f77f aee9 	ble.w	801f4aa <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f6d8:	4604      	mov	r4, r0
 801f6da:	1415      	asrs	r5, r2, #16
 801f6dc:	e724      	b.n	801f528 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 801f6de:	0a1e      	lsrs	r6, r3, #8
 801f6e0:	0c1d      	lsrs	r5, r3, #16
 801f6e2:	7023      	strb	r3, [r4, #0]
 801f6e4:	7066      	strb	r6, [r4, #1]
 801f6e6:	70a5      	strb	r5, [r4, #2]
 801f6e8:	e772      	b.n	801f5d0 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801f6ea:	bf00      	nop

0801f6ec <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6f0:	b089      	sub	sp, #36	; 0x24
 801f6f2:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
 801f6f6:	9101      	str	r1, [sp, #4]
 801f6f8:	ea6f 0a00 	mvn.w	sl, r0
 801f6fc:	e9dd e815 	ldrd	lr, r8, [sp, #84]	; 0x54
 801f700:	9919      	ldr	r1, [sp, #100]	; 0x64
 801f702:	9202      	str	r2, [sp, #8]
 801f704:	e9dd 5217 	ldrd	r5, r2, [sp, #92]	; 0x5c
 801f708:	686c      	ldr	r4, [r5, #4]
 801f70a:	682f      	ldr	r7, [r5, #0]
 801f70c:	fb04 2401 	mla	r4, r4, r1, r2
 801f710:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801f712:	b280      	uxth	r0, r0
 801f714:	e9d2 2100 	ldrd	r2, r1, [r2]
 801f718:	3104      	adds	r1, #4
 801f71a:	eb07 0784 	add.w	r7, r7, r4, lsl #2
 801f71e:	fa5f fa8a 	uxtb.w	sl, sl
 801f722:	9007      	str	r0, [sp, #28]
 801f724:	9105      	str	r1, [sp, #20]
 801f726:	9200      	str	r2, [sp, #0]
 801f728:	e9dd 2513 	ldrd	r2, r5, [sp, #76]	; 0x4c
 801f72c:	9901      	ldr	r1, [sp, #4]
 801f72e:	2900      	cmp	r1, #0
 801f730:	dc03      	bgt.n	801f73a <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801f732:	9902      	ldr	r1, [sp, #8]
 801f734:	2900      	cmp	r1, #0
 801f736:	f340 80b6 	ble.w	801f8a6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801f73a:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f73c:	2b00      	cmp	r3, #0
 801f73e:	e9d1 4602 	ldrd	r4, r6, [r1, #8]
 801f742:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f746:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
 801f74a:	b221      	sxth	r1, r4
 801f74c:	fa0f fc86 	sxth.w	ip, r6
 801f750:	f340 80ac 	ble.w	801f8ac <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801f754:	1410      	asrs	r0, r2, #16
 801f756:	d406      	bmi.n	801f766 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f758:	4288      	cmp	r0, r1
 801f75a:	da04      	bge.n	801f766 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f75c:	ea5f 4925 	movs.w	r9, r5, asr #16
 801f760:	d401      	bmi.n	801f766 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f762:	45e1      	cmp	r9, ip
 801f764:	db3e      	blt.n	801f7e4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801f766:	3b01      	subs	r3, #1
 801f768:	4472      	add	r2, lr
 801f76a:	4445      	add	r5, r8
 801f76c:	f107 0704 	add.w	r7, r7, #4
 801f770:	d1f0      	bne.n	801f754 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f772:	9b01      	ldr	r3, [sp, #4]
 801f774:	2b00      	cmp	r3, #0
 801f776:	f340 8096 	ble.w	801f8a6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801f77a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f77e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f782:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f786:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f78a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f78e:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801f792:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f796:	ee76 6a62 	vsub.f32	s13, s12, s5
 801f79a:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801f79e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f7a2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f7a6:	ee16 2a90 	vmov	r2, s13
 801f7aa:	3b01      	subs	r3, #1
 801f7ac:	9301      	str	r3, [sp, #4]
 801f7ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f7b0:	9902      	ldr	r1, [sp, #8]
 801f7b2:	fb92 fef3 	sdiv	lr, r2, r3
 801f7b6:	ee17 2a10 	vmov	r2, s14
 801f7ba:	eeb0 7a43 	vmov.f32	s14, s6
 801f7be:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f7c2:	ee17 5a10 	vmov	r5, s14
 801f7c6:	eeb0 7a62 	vmov.f32	s14, s5
 801f7ca:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f7ce:	fb92 f8f3 	sdiv	r8, r2, r3
 801f7d2:	eeb0 3a67 	vmov.f32	s6, s15
 801f7d6:	ee17 2a10 	vmov	r2, s14
 801f7da:	eef0 2a46 	vmov.f32	s5, s12
 801f7de:	bf08      	it	eq
 801f7e0:	460b      	moveq	r3, r1
 801f7e2:	e7a3      	b.n	801f72c <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801f7e4:	f103 39ff 	add.w	r9, r3, #4294967295
 801f7e8:	fb09 2b0e 	mla	fp, r9, lr, r2
 801f7ec:	ea5f 4b2b 	movs.w	fp, fp, asr #16
 801f7f0:	d566      	bpl.n	801f8c0 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801f7f2:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801f7f6:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f7f8:	e002      	b.n	801f800 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801f7fa:	1410      	asrs	r0, r2, #16
 801f7fc:	e9d1 4602 	ldrd	r4, r6, [r1, #8]
 801f800:	2800      	cmp	r0, #0
 801f802:	f109 39ff 	add.w	r9, r9, #4294967295
 801f806:	4472      	add	r2, lr
 801f808:	db3f      	blt.n	801f88a <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801f80a:	42a0      	cmp	r0, r4
 801f80c:	da3d      	bge.n	801f88a <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801f80e:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801f812:	d43a      	bmi.n	801f88a <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801f814:	45b4      	cmp	ip, r6
 801f816:	da38      	bge.n	801f88a <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801f818:	9e00      	ldr	r6, [sp, #0]
 801f81a:	b224      	sxth	r4, r4
 801f81c:	fb0c 6404 	mla	r4, ip, r4, r6
 801f820:	f814 b000 	ldrb.w	fp, [r4, r0]
 801f824:	7838      	ldrb	r0, [r7, #0]
 801f826:	9c05      	ldr	r4, [sp, #20]
 801f828:	fb10 f30a 	smulbb	r3, r0, sl
 801f82c:	9306      	str	r3, [sp, #24]
 801f82e:	9b07      	ldr	r3, [sp, #28]
 801f830:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801f834:	4618      	mov	r0, r3
 801f836:	eb04 060b 	add.w	r6, r4, fp
 801f83a:	78b4      	ldrb	r4, [r6, #2]
 801f83c:	7876      	ldrb	r6, [r6, #1]
 801f83e:	fb14 fc03 	smulbb	ip, r4, r3
 801f842:	9c05      	ldr	r4, [sp, #20]
 801f844:	fb16 f603 	smulbb	r6, r6, r3
 801f848:	f814 400b 	ldrb.w	r4, [r4, fp]
 801f84c:	9b06      	ldr	r3, [sp, #24]
 801f84e:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f852:	fb04 3000 	mla	r0, r4, r0, r3
 801f856:	78bc      	ldrb	r4, [r7, #2]
 801f858:	fb0b 660a 	mla	r6, fp, sl, r6
 801f85c:	fb04 c40a 	mla	r4, r4, sl, ip
 801f860:	b2b6      	uxth	r6, r6
 801f862:	b280      	uxth	r0, r0
 801f864:	b2a4      	uxth	r4, r4
 801f866:	f106 0c01 	add.w	ip, r6, #1
 801f86a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801f86e:	f104 0b01 	add.w	fp, r4, #1
 801f872:	f100 0c01 	add.w	ip, r0, #1
 801f876:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801f87a:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 801f87e:	1236      	asrs	r6, r6, #8
 801f880:	1224      	asrs	r4, r4, #8
 801f882:	1200      	asrs	r0, r0, #8
 801f884:	707e      	strb	r6, [r7, #1]
 801f886:	70bc      	strb	r4, [r7, #2]
 801f888:	7038      	strb	r0, [r7, #0]
 801f88a:	f1b9 3fff 	cmp.w	r9, #4294967295
 801f88e:	f107 0704 	add.w	r7, r7, #4
 801f892:	4445      	add	r5, r8
 801f894:	d1b1      	bne.n	801f7fa <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801f896:	e9dd b303 	ldrd	fp, r3, [sp, #12]
 801f89a:	eb0b 0783 	add.w	r7, fp, r3, lsl #2
 801f89e:	9b01      	ldr	r3, [sp, #4]
 801f8a0:	2b00      	cmp	r3, #0
 801f8a2:	f73f af6a 	bgt.w	801f77a <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801f8a6:	b009      	add	sp, #36	; 0x24
 801f8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f8ac:	f43f af61 	beq.w	801f772 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f8b0:	f103 39ff 	add.w	r9, r3, #4294967295
 801f8b4:	fb09 2b0e 	mla	fp, r9, lr, r2
 801f8b8:	ea5f 4b2b 	movs.w	fp, fp, asr #16
 801f8bc:	f53f af59 	bmi.w	801f772 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f8c0:	4559      	cmp	r1, fp
 801f8c2:	dd57      	ble.n	801f974 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801f8c4:	fb09 5008 	mla	r0, r9, r8, r5
 801f8c8:	1400      	asrs	r0, r0, #16
 801f8ca:	d453      	bmi.n	801f974 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801f8cc:	4560      	cmp	r0, ip
 801f8ce:	da51      	bge.n	801f974 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801f8d0:	2b00      	cmp	r3, #0
 801f8d2:	f77f af4e 	ble.w	801f772 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f8d6:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801f8da:	f107 0c04 	add.w	ip, r7, #4
 801f8de:	f8dd b014 	ldr.w	fp, [sp, #20]
 801f8e2:	460b      	mov	r3, r1
 801f8e4:	9f07      	ldr	r7, [sp, #28]
 801f8e6:	e002      	b.n	801f8ee <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801f8e8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f8ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801f8ee:	9800      	ldr	r0, [sp, #0]
 801f8f0:	1429      	asrs	r1, r5, #16
 801f8f2:	fb03 0301 	mla	r3, r3, r1, r0
 801f8f6:	1411      	asrs	r1, r2, #16
 801f8f8:	5c5e      	ldrb	r6, [r3, r1]
 801f8fa:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 801f8fe:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f902:	eb0b 0006 	add.w	r0, fp, r6
 801f906:	7881      	ldrb	r1, [r0, #2]
 801f908:	7840      	ldrb	r0, [r0, #1]
 801f90a:	fb13 f30a 	smulbb	r3, r3, sl
 801f90e:	fb10 f007 	smulbb	r0, r0, r7
 801f912:	fb11 f407 	smulbb	r4, r1, r7
 801f916:	f81b 1006 	ldrb.w	r1, [fp, r6]
 801f91a:	f81c 6c03 	ldrb.w	r6, [ip, #-3]
 801f91e:	fb01 3307 	mla	r3, r1, r7, r3
 801f922:	f81c 1c02 	ldrb.w	r1, [ip, #-2]
 801f926:	fb06 000a 	mla	r0, r6, sl, r0
 801f92a:	fb01 410a 	mla	r1, r1, sl, r4
 801f92e:	b280      	uxth	r0, r0
 801f930:	b29b      	uxth	r3, r3
 801f932:	b289      	uxth	r1, r1
 801f934:	1c44      	adds	r4, r0, #1
 801f936:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801f93a:	1c4e      	adds	r6, r1, #1
 801f93c:	1c5c      	adds	r4, r3, #1
 801f93e:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801f942:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801f946:	f109 39ff 	add.w	r9, r9, #4294967295
 801f94a:	1200      	asrs	r0, r0, #8
 801f94c:	1209      	asrs	r1, r1, #8
 801f94e:	121b      	asrs	r3, r3, #8
 801f950:	f1b9 3fff 	cmp.w	r9, #4294967295
 801f954:	f80c 0c03 	strb.w	r0, [ip, #-3]
 801f958:	f80c 1c02 	strb.w	r1, [ip, #-2]
 801f95c:	f80c 3c04 	strb.w	r3, [ip, #-4]
 801f960:	4445      	add	r5, r8
 801f962:	4472      	add	r2, lr
 801f964:	f10c 0c04 	add.w	ip, ip, #4
 801f968:	d1be      	bne.n	801f8e8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801f96a:	e9dd 7303 	ldrd	r7, r3, [sp, #12]
 801f96e:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 801f972:	e6fe      	b.n	801f772 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f974:	2b00      	cmp	r3, #0
 801f976:	f77f aefc 	ble.w	801f772 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f97a:	1410      	asrs	r0, r2, #16
 801f97c:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801f980:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f982:	e73d      	b.n	801f800 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>

0801f984 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f988:	468a      	mov	sl, r1
 801f98a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801f98e:	46d1      	mov	r9, sl
 801f990:	b087      	sub	sp, #28
 801f992:	e9dd 1415 	ldrd	r1, r4, [sp, #84]	; 0x54
 801f996:	684d      	ldr	r5, [r1, #4]
 801f998:	9203      	str	r2, [sp, #12]
 801f99a:	e9dd 2e17 	ldrd	r2, lr, [sp, #92]	; 0x5c
 801f99e:	fb05 4402 	mla	r4, r5, r2, r4
 801f9a2:	e9de 2000 	ldrd	r2, r0, [lr]
 801f9a6:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	; 0x4c
 801f9aa:	680d      	ldr	r5, [r1, #0]
 801f9ac:	f100 0b04 	add.w	fp, r0, #4
 801f9b0:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 801f9b4:	9205      	str	r2, [sp, #20]
 801f9b6:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801f9ba:	f1b9 0f00 	cmp.w	r9, #0
 801f9be:	dc03      	bgt.n	801f9c8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801f9c0:	9803      	ldr	r0, [sp, #12]
 801f9c2:	2800      	cmp	r0, #0
 801f9c4:	f340 8091 	ble.w	801faea <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801f9c8:	e9de 8a02 	ldrd	r8, sl, [lr, #8]
 801f9cc:	2b00      	cmp	r3, #0
 801f9ce:	fa0f f088 	sxth.w	r0, r8
 801f9d2:	fa0f f48a 	sxth.w	r4, sl
 801f9d6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f9da:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801f9de:	9001      	str	r0, [sp, #4]
 801f9e0:	9402      	str	r4, [sp, #8]
 801f9e2:	f340 8085 	ble.w	801faf0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801f9e6:	1414      	asrs	r4, r2, #16
 801f9e8:	d408      	bmi.n	801f9fc <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f9ea:	9801      	ldr	r0, [sp, #4]
 801f9ec:	4284      	cmp	r4, r0
 801f9ee:	da05      	bge.n	801f9fc <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f9f0:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801f9f4:	d402      	bmi.n	801f9fc <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f9f6:	9802      	ldr	r0, [sp, #8]
 801f9f8:	4584      	cmp	ip, r0
 801f9fa:	db3b      	blt.n	801fa74 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801f9fc:	3b01      	subs	r3, #1
 801f9fe:	4432      	add	r2, r6
 801fa00:	4439      	add	r1, r7
 801fa02:	f105 0504 	add.w	r5, r5, #4
 801fa06:	d1ee      	bne.n	801f9e6 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801fa08:	f1b9 0f00 	cmp.w	r9, #0
 801fa0c:	dd6d      	ble.n	801faea <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801fa0e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fa12:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fa16:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801fa1a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fa1e:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801fa22:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fa26:	ee76 6a62 	vsub.f32	s13, s12, s5
 801fa2a:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801fa2e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fa32:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801fa36:	ee16 2a90 	vmov	r2, s13
 801fa3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fa3c:	9803      	ldr	r0, [sp, #12]
 801fa3e:	fb92 f6f3 	sdiv	r6, r2, r3
 801fa42:	ee17 2a10 	vmov	r2, s14
 801fa46:	eeb0 7a43 	vmov.f32	s14, s6
 801fa4a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801fa4e:	ee17 1a10 	vmov	r1, s14
 801fa52:	eeb0 7a62 	vmov.f32	s14, s5
 801fa56:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801fa5a:	f1b9 0901 	subs.w	r9, r9, #1
 801fa5e:	fb92 f7f3 	sdiv	r7, r2, r3
 801fa62:	eeb0 3a67 	vmov.f32	s6, s15
 801fa66:	ee17 2a10 	vmov	r2, s14
 801fa6a:	eef0 2a46 	vmov.f32	s5, s12
 801fa6e:	bf08      	it	eq
 801fa70:	4603      	moveq	r3, r0
 801fa72:	e7a2      	b.n	801f9ba <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801fa74:	f103 3cff 	add.w	ip, r3, #4294967295
 801fa78:	9404      	str	r4, [sp, #16]
 801fa7a:	fb06 240c 	mla	r4, r6, ip, r2
 801fa7e:	1424      	asrs	r4, r4, #16
 801fa80:	d578      	bpl.n	801fb74 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801fa82:	9613      	str	r6, [sp, #76]	; 0x4c
 801fa84:	2000      	movs	r0, #0
 801fa86:	4646      	mov	r6, r8
 801fa88:	46d4      	mov	ip, sl
 801fa8a:	9c04      	ldr	r4, [sp, #16]
 801fa8c:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 801fa90:	e002      	b.n	801fa98 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801fa92:	1414      	asrs	r4, r2, #16
 801fa94:	e9de 6c02 	ldrd	r6, ip, [lr, #8]
 801fa98:	2c00      	cmp	r4, #0
 801fa9a:	4442      	add	r2, r8
 801fa9c:	db1c      	blt.n	801fad8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801fa9e:	42b4      	cmp	r4, r6
 801faa0:	da1a      	bge.n	801fad8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801faa2:	ea5f 4a21 	movs.w	sl, r1, asr #16
 801faa6:	d417      	bmi.n	801fad8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801faa8:	45e2      	cmp	sl, ip
 801faaa:	da15      	bge.n	801fad8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801faac:	fa0f fc86 	sxth.w	ip, r6
 801fab0:	9e05      	ldr	r6, [sp, #20]
 801fab2:	fb0a 6c0c 	mla	ip, sl, ip, r6
 801fab6:	f81c 4004 	ldrb.w	r4, [ip, r4]
 801faba:	eb05 0680 	add.w	r6, r5, r0, lsl #2
 801fabe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fac2:	f81b c004 	ldrb.w	ip, [fp, r4]
 801fac6:	445c      	add	r4, fp
 801fac8:	f805 c020 	strb.w	ip, [r5, r0, lsl #2]
 801facc:	f894 c001 	ldrb.w	ip, [r4, #1]
 801fad0:	f886 c001 	strb.w	ip, [r6, #1]
 801fad4:	78a4      	ldrb	r4, [r4, #2]
 801fad6:	70b4      	strb	r4, [r6, #2]
 801fad8:	3001      	adds	r0, #1
 801fada:	4283      	cmp	r3, r0
 801fadc:	4439      	add	r1, r7
 801fade:	d1d8      	bne.n	801fa92 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801fae0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801fae4:	f1b9 0f00 	cmp.w	r9, #0
 801fae8:	dc91      	bgt.n	801fa0e <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801faea:	b007      	add	sp, #28
 801faec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801faf0:	d08a      	beq.n	801fa08 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801faf2:	f103 3cff 	add.w	ip, r3, #4294967295
 801faf6:	fb0c 2406 	mla	r4, ip, r6, r2
 801fafa:	1424      	asrs	r4, r4, #16
 801fafc:	d484      	bmi.n	801fa08 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fafe:	42a0      	cmp	r0, r4
 801fb00:	dd32      	ble.n	801fb68 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 801fb02:	fb07 140c 	mla	r4, r7, ip, r1
 801fb06:	1420      	asrs	r0, r4, #16
 801fb08:	d42e      	bmi.n	801fb68 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 801fb0a:	9c02      	ldr	r4, [sp, #8]
 801fb0c:	4284      	cmp	r4, r0
 801fb0e:	dd2b      	ble.n	801fb68 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 801fb10:	2b00      	cmp	r3, #0
 801fb12:	f77f af79 	ble.w	801fa08 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fb16:	1d2c      	adds	r4, r5, #4
 801fb18:	f8dd a014 	ldr.w	sl, [sp, #20]
 801fb1c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801fb20:	e001      	b.n	801fb26 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801fb22:	f9be 8008 	ldrsh.w	r8, [lr, #8]
 801fb26:	1408      	asrs	r0, r1, #16
 801fb28:	fb08 a000 	mla	r0, r8, r0, sl
 801fb2c:	ea4f 4822 	mov.w	r8, r2, asr #16
 801fb30:	f810 0008 	ldrb.w	r0, [r0, r8]
 801fb34:	f10c 3cff 	add.w	ip, ip, #4294967295
 801fb38:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fb3c:	f81b 8000 	ldrb.w	r8, [fp, r0]
 801fb40:	4458      	add	r0, fp
 801fb42:	f804 8c04 	strb.w	r8, [r4, #-4]
 801fb46:	f890 8001 	ldrb.w	r8, [r0, #1]
 801fb4a:	f1bc 3fff 	cmp.w	ip, #4294967295
 801fb4e:	f804 8c03 	strb.w	r8, [r4, #-3]
 801fb52:	7880      	ldrb	r0, [r0, #2]
 801fb54:	4439      	add	r1, r7
 801fb56:	f804 0c02 	strb.w	r0, [r4, #-2]
 801fb5a:	4432      	add	r2, r6
 801fb5c:	f104 0404 	add.w	r4, r4, #4
 801fb60:	d1df      	bne.n	801fb22 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801fb62:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801fb66:	e7bd      	b.n	801fae4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801fb68:	2b00      	cmp	r3, #0
 801fb6a:	f77f af4d 	ble.w	801fa08 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fb6e:	1410      	asrs	r0, r2, #16
 801fb70:	9004      	str	r0, [sp, #16]
 801fb72:	e786      	b.n	801fa82 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfe>
 801fb74:	9801      	ldr	r0, [sp, #4]
 801fb76:	e7c2      	b.n	801fafe <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>

0801fb78 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fb78:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801fb7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb80:	b08b      	sub	sp, #44	; 0x2c
 801fb82:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801fb86:	e9dd 2119 	ldrd	r2, r1, [sp, #100]	; 0x64
 801fb8a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801fb8c:	6854      	ldr	r4, [r2, #4]
 801fb8e:	6816      	ldr	r6, [r2, #0]
 801fb90:	fb04 1000 	mla	r0, r4, r0, r1
 801fb94:	e9dd 4b17 	ldrd	r4, fp, [sp, #92]	; 0x5c
 801fb98:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801fb9a:	f89d 7074 	ldrb.w	r7, [sp, #116]	; 0x74
 801fb9e:	e9d2 2500 	ldrd	r2, r5, [r2]
 801fba2:	3504      	adds	r5, #4
 801fba4:	9703      	str	r7, [sp, #12]
 801fba6:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 801fbaa:	9507      	str	r5, [sp, #28]
 801fbac:	9206      	str	r2, [sp, #24]
 801fbae:	e9dd 2115 	ldrd	r2, r1, [sp, #84]	; 0x54
 801fbb2:	9d01      	ldr	r5, [sp, #4]
 801fbb4:	2d00      	cmp	r5, #0
 801fbb6:	dc03      	bgt.n	801fbc0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801fbb8:	9d02      	ldr	r5, [sp, #8]
 801fbba:	2d00      	cmp	r5, #0
 801fbbc:	f340 80d5 	ble.w	801fd6a <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 801fbc0:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801fbc2:	2b00      	cmp	r3, #0
 801fbc4:	e9d5 7c02 	ldrd	r7, ip, [r5, #8]
 801fbc8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fbcc:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801fbd0:	b23d      	sxth	r5, r7
 801fbd2:	fa0f fe8c 	sxth.w	lr, ip
 801fbd6:	f340 80cb 	ble.w	801fd70 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801fbda:	1416      	asrs	r6, r2, #16
 801fbdc:	d406      	bmi.n	801fbec <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fbde:	42ae      	cmp	r6, r5
 801fbe0:	da04      	bge.n	801fbec <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fbe2:	ea5f 4821 	movs.w	r8, r1, asr #16
 801fbe6:	d401      	bmi.n	801fbec <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fbe8:	45f0      	cmp	r8, lr
 801fbea:	db3c      	blt.n	801fc66 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xee>
 801fbec:	3b01      	subs	r3, #1
 801fbee:	4422      	add	r2, r4
 801fbf0:	4459      	add	r1, fp
 801fbf2:	f100 0004 	add.w	r0, r0, #4
 801fbf6:	d1f0      	bne.n	801fbda <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801fbf8:	9b01      	ldr	r3, [sp, #4]
 801fbfa:	2b00      	cmp	r3, #0
 801fbfc:	f340 80b5 	ble.w	801fd6a <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 801fc00:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fc04:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fc08:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801fc0c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fc10:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801fc14:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fc18:	ee76 6a62 	vsub.f32	s13, s12, s5
 801fc1c:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801fc20:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fc24:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801fc28:	ee16 2a90 	vmov	r2, s13
 801fc2c:	3b01      	subs	r3, #1
 801fc2e:	9301      	str	r3, [sp, #4]
 801fc30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fc32:	9d02      	ldr	r5, [sp, #8]
 801fc34:	fb92 f4f3 	sdiv	r4, r2, r3
 801fc38:	ee17 2a10 	vmov	r2, s14
 801fc3c:	eeb0 7a43 	vmov.f32	s14, s6
 801fc40:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801fc44:	ee17 1a10 	vmov	r1, s14
 801fc48:	eeb0 7a62 	vmov.f32	s14, s5
 801fc4c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801fc50:	fb92 fbf3 	sdiv	fp, r2, r3
 801fc54:	eeb0 3a67 	vmov.f32	s6, s15
 801fc58:	ee17 2a10 	vmov	r2, s14
 801fc5c:	eef0 2a46 	vmov.f32	s5, s12
 801fc60:	bf08      	it	eq
 801fc62:	462b      	moveq	r3, r5
 801fc64:	e7a5      	b.n	801fbb2 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801fc66:	f103 38ff 	add.w	r8, r3, #4294967295
 801fc6a:	fb08 2904 	mla	r9, r8, r4, r2
 801fc6e:	ea5f 4929 	movs.w	r9, r9, asr #16
 801fc72:	f140 8087 	bpl.w	801fd84 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801fc76:	f1c3 0900 	rsb	r9, r3, #0
 801fc7a:	4698      	mov	r8, r3
 801fc7c:	2500      	movs	r5, #0
 801fc7e:	9004      	str	r0, [sp, #16]
 801fc80:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801fc82:	e002      	b.n	801fc8a <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801fc84:	1416      	asrs	r6, r2, #16
 801fc86:	e9d3 7c02 	ldrd	r7, ip, [r3, #8]
 801fc8a:	2e00      	cmp	r6, #0
 801fc8c:	4422      	add	r2, r4
 801fc8e:	db61      	blt.n	801fd54 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801fc90:	42be      	cmp	r6, r7
 801fc92:	da5f      	bge.n	801fd54 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801fc94:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801fc98:	d45c      	bmi.n	801fd54 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801fc9a:	45e6      	cmp	lr, ip
 801fc9c:	b23f      	sxth	r7, r7
 801fc9e:	da59      	bge.n	801fd54 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801fca0:	9806      	ldr	r0, [sp, #24]
 801fca2:	fb0e 0707 	mla	r7, lr, r7, r0
 801fca6:	9807      	ldr	r0, [sp, #28]
 801fca8:	5dbe      	ldrb	r6, [r7, r6]
 801fcaa:	ebc5 7785 	rsb	r7, r5, r5, lsl #30
 801fcae:	f850 6026 	ldr.w	r6, [r0, r6, lsl #2]
 801fcb2:	9804      	ldr	r0, [sp, #16]
 801fcb4:	9705      	str	r7, [sp, #20]
 801fcb6:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 801fcba:	0e37      	lsrs	r7, r6, #24
 801fcbc:	9008      	str	r0, [sp, #32]
 801fcbe:	d049      	beq.n	801fd54 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801fcc0:	9803      	ldr	r0, [sp, #12]
 801fcc2:	fa5f fa86 	uxtb.w	sl, r6
 801fcc6:	fb00 f707 	mul.w	r7, r0, r7
 801fcca:	9805      	ldr	r0, [sp, #20]
 801fccc:	f107 0c01 	add.w	ip, r7, #1
 801fcd0:	eb0c 2c27 	add.w	ip, ip, r7, asr #8
 801fcd4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801fcd8:	4686      	mov	lr, r0
 801fcda:	ea6f 070c 	mvn.w	r7, ip
 801fcde:	fa1f fc8c 	uxth.w	ip, ip
 801fce2:	fb1a fa0c 	smulbb	sl, sl, ip
 801fce6:	9804      	ldr	r0, [sp, #16]
 801fce8:	b2ff      	uxtb	r7, r7
 801fcea:	f810 e02e 	ldrb.w	lr, [r0, lr, lsl #2]
 801fcee:	9805      	ldr	r0, [sp, #20]
 801fcf0:	fb0e ae07 	mla	lr, lr, r7, sl
 801fcf4:	fa1f fe8e 	uxth.w	lr, lr
 801fcf8:	f10e 0a01 	add.w	sl, lr, #1
 801fcfc:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801fd00:	f3c6 2a07 	ubfx	sl, r6, #8, #8
 801fd04:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801fd08:	fb16 f60c 	smulbb	r6, r6, ip
 801fd0c:	9609      	str	r6, [sp, #36]	; 0x24
 801fd0e:	4606      	mov	r6, r0
 801fd10:	9804      	ldr	r0, [sp, #16]
 801fd12:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fd16:	f800 e026 	strb.w	lr, [r0, r6, lsl #2]
 801fd1a:	fb1a fa0c 	smulbb	sl, sl, ip
 801fd1e:	9808      	ldr	r0, [sp, #32]
 801fd20:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801fd22:	f890 e002 	ldrb.w	lr, [r0, #2]
 801fd26:	f890 c001 	ldrb.w	ip, [r0, #1]
 801fd2a:	fb0e 6607 	mla	r6, lr, r7, r6
 801fd2e:	fb0c ac07 	mla	ip, ip, r7, sl
 801fd32:	b2b6      	uxth	r6, r6
 801fd34:	fa1f fe8c 	uxth.w	lr, ip
 801fd38:	1c77      	adds	r7, r6, #1
 801fd3a:	f10e 0c01 	add.w	ip, lr, #1
 801fd3e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801fd42:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801fd46:	ea4f 272c 	mov.w	r7, ip, asr #8
 801fd4a:	ea4f 2c26 	mov.w	ip, r6, asr #8
 801fd4e:	7047      	strb	r7, [r0, #1]
 801fd50:	f880 c002 	strb.w	ip, [r0, #2]
 801fd54:	3d01      	subs	r5, #1
 801fd56:	45a9      	cmp	r9, r5
 801fd58:	4459      	add	r1, fp
 801fd5a:	d193      	bne.n	801fc84 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801fd5c:	9b01      	ldr	r3, [sp, #4]
 801fd5e:	9804      	ldr	r0, [sp, #16]
 801fd60:	2b00      	cmp	r3, #0
 801fd62:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 801fd66:	f73f af4b 	bgt.w	801fc00 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801fd6a:	b00b      	add	sp, #44	; 0x2c
 801fd6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd70:	f43f af42 	beq.w	801fbf8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801fd74:	f103 38ff 	add.w	r8, r3, #4294967295
 801fd78:	fb08 2904 	mla	r9, r8, r4, r2
 801fd7c:	ea5f 4929 	movs.w	r9, r9, asr #16
 801fd80:	f53f af3a 	bmi.w	801fbf8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801fd84:	454d      	cmp	r5, r9
 801fd86:	dd68      	ble.n	801fe5a <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 801fd88:	fb08 160b 	mla	r6, r8, fp, r1
 801fd8c:	1436      	asrs	r6, r6, #16
 801fd8e:	d464      	bmi.n	801fe5a <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 801fd90:	4576      	cmp	r6, lr
 801fd92:	da62      	bge.n	801fe5a <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 801fd94:	2b00      	cmp	r3, #0
 801fd96:	f77f af2f 	ble.w	801fbf8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801fd9a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 801fd9e:	f100 0e04 	add.w	lr, r0, #4
 801fda2:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801fda6:	e002      	b.n	801fdae <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801fda8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801fdaa:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 801fdae:	140b      	asrs	r3, r1, #16
 801fdb0:	fb05 6303 	mla	r3, r5, r3, r6
 801fdb4:	1410      	asrs	r0, r2, #16
 801fdb6:	5c1b      	ldrb	r3, [r3, r0]
 801fdb8:	f108 38ff 	add.w	r8, r8, #4294967295
 801fdbc:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801fdc0:	4422      	add	r2, r4
 801fdc2:	0e18      	lsrs	r0, r3, #24
 801fdc4:	4459      	add	r1, fp
 801fdc6:	d03e      	beq.n	801fe46 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ce>
 801fdc8:	9d03      	ldr	r5, [sp, #12]
 801fdca:	fa5f fc83 	uxtb.w	ip, r3
 801fdce:	fb05 f000 	mul.w	r0, r5, r0
 801fdd2:	f100 0901 	add.w	r9, r0, #1
 801fdd6:	eb09 2920 	add.w	r9, r9, r0, asr #8
 801fdda:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fdde:	ea6f 0009 	mvn.w	r0, r9
 801fde2:	fa1f f989 	uxth.w	r9, r9
 801fde6:	fb1c fc09 	smulbb	ip, ip, r9
 801fdea:	f3c3 2507 	ubfx	r5, r3, #8, #8
 801fdee:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801fdf2:	fb15 fa09 	smulbb	sl, r5, r9
 801fdf6:	fb13 f309 	smulbb	r3, r3, r9
 801fdfa:	f81e 9c04 	ldrb.w	r9, [lr, #-4]
 801fdfe:	b2c0      	uxtb	r0, r0
 801fe00:	fb09 cc00 	mla	ip, r9, r0, ip
 801fe04:	f81e 5c03 	ldrb.w	r5, [lr, #-3]
 801fe08:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 801fe0c:	fb05 a500 	mla	r5, r5, r0, sl
 801fe10:	fb09 3300 	mla	r3, r9, r0, r3
 801fe14:	fa1f fc8c 	uxth.w	ip, ip
 801fe18:	b2ad      	uxth	r5, r5
 801fe1a:	b29b      	uxth	r3, r3
 801fe1c:	f10c 0a01 	add.w	sl, ip, #1
 801fe20:	f105 0901 	add.w	r9, r5, #1
 801fe24:	1c58      	adds	r0, r3, #1
 801fe26:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801fe2a:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801fe2e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801fe32:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801fe36:	122d      	asrs	r5, r5, #8
 801fe38:	121b      	asrs	r3, r3, #8
 801fe3a:	f80e cc04 	strb.w	ip, [lr, #-4]
 801fe3e:	f80e 5c03 	strb.w	r5, [lr, #-3]
 801fe42:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801fe46:	f1b8 3fff 	cmp.w	r8, #4294967295
 801fe4a:	f10e 0e04 	add.w	lr, lr, #4
 801fe4e:	d1ab      	bne.n	801fda8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801fe50:	e9dd 0304 	ldrd	r0, r3, [sp, #16]
 801fe54:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801fe58:	e6ce      	b.n	801fbf8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801fe5a:	2b00      	cmp	r3, #0
 801fe5c:	f77f aecc 	ble.w	801fbf8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801fe60:	1416      	asrs	r6, r2, #16
 801fe62:	e708      	b.n	801fc76 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfe>

0801fe64 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801fe64:	4770      	bx	lr
 801fe66:	bf00      	nop

0801fe68 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801fe68:	4770      	bx	lr
 801fe6a:	bf00      	nop

0801fe6c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801fe6c:	4770      	bx	lr
 801fe6e:	bf00      	nop

0801fe70 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801fe70:	4770      	bx	lr
 801fe72:	bf00      	nop

0801fe74 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801fe74:	4770      	bx	lr
 801fe76:	bf00      	nop

0801fe78 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801fe78:	4770      	bx	lr
 801fe7a:	bf00      	nop

0801fe7c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801fe7c:	4770      	bx	lr
 801fe7e:	bf00      	nop

0801fe80 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801fe80:	4770      	bx	lr
 801fe82:	bf00      	nop

0801fe84 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801fe84:	4770      	bx	lr
 801fe86:	bf00      	nop

0801fe88 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801fe88:	4770      	bx	lr
 801fe8a:	bf00      	nop

0801fe8c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801fe8c:	4770      	bx	lr
 801fe8e:	bf00      	nop

0801fe90 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801fe90:	4770      	bx	lr
 801fe92:	bf00      	nop

0801fe94 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801fe94:	4770      	bx	lr
 801fe96:	bf00      	nop

0801fe98 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801fe98:	4770      	bx	lr
 801fe9a:	bf00      	nop

0801fe9c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801fe9c:	4770      	bx	lr
 801fe9e:	bf00      	nop

0801fea0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801fea0:	4770      	bx	lr
 801fea2:	bf00      	nop

0801fea4 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801fea4:	4770      	bx	lr
 801fea6:	bf00      	nop

0801fea8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801fea8:	4770      	bx	lr
 801feaa:	bf00      	nop

0801feac <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801feac:	4770      	bx	lr
 801feae:	bf00      	nop

0801feb0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801feb0:	4770      	bx	lr
 801feb2:	bf00      	nop

0801feb4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801feb4:	4770      	bx	lr
 801feb6:	bf00      	nop

0801feb8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801feb8:	4770      	bx	lr
 801feba:	bf00      	nop

0801febc <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv>:
 801febc:	b508      	push	{r3, lr}
 801febe:	4b0d      	ldr	r3, [pc, #52]	; (801fef4 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x38>)
 801fec0:	881b      	ldrh	r3, [r3, #0]
 801fec2:	b17b      	cbz	r3, 801fee4 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x28>
 801fec4:	7a02      	ldrb	r2, [r0, #8]
 801fec6:	2a02      	cmp	r2, #2
 801fec8:	d007      	beq.n	801feda <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x1e>
 801feca:	2a01      	cmp	r2, #1
 801fecc:	bf0c      	ite	eq
 801fece:	2003      	moveq	r0, #3
 801fed0:	2002      	movne	r0, #2
 801fed2:	fb13 f000 	smulbb	r0, r3, r0
 801fed6:	b280      	uxth	r0, r0
 801fed8:	bd08      	pop	{r3, pc}
 801feda:	2004      	movs	r0, #4
 801fedc:	fb13 f000 	smulbb	r0, r3, r0
 801fee0:	b280      	uxth	r0, r0
 801fee2:	bd08      	pop	{r3, pc}
 801fee4:	4b04      	ldr	r3, [pc, #16]	; (801fef8 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x3c>)
 801fee6:	4a05      	ldr	r2, [pc, #20]	; (801fefc <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x40>)
 801fee8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 801feec:	4804      	ldr	r0, [pc, #16]	; (801ff00 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x44>)
 801feee:	f009 f8e5 	bl	80290bc <__assert_func>
 801fef2:	bf00      	nop
 801fef4:	201979e2 	.word	0x201979e2
 801fef8:	0802c4a0 	.word	0x0802c4a0
 801fefc:	0802d25c 	.word	0x0802d25c
 801ff00:	0802c4e4 	.word	0x0802c4e4

0801ff04 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv>:
 801ff04:	b530      	push	{r4, r5, lr}
 801ff06:	4b26      	ldr	r3, [pc, #152]	; (801ffa0 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x9c>)
 801ff08:	b083      	sub	sp, #12
 801ff0a:	681c      	ldr	r4, [r3, #0]
 801ff0c:	2c00      	cmp	r4, #0
 801ff0e:	d040      	beq.n	801ff92 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x8e>
 801ff10:	4b24      	ldr	r3, [pc, #144]	; (801ffa4 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa0>)
 801ff12:	4605      	mov	r5, r0
 801ff14:	781b      	ldrb	r3, [r3, #0]
 801ff16:	b9f3      	cbnz	r3, 801ff56 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x52>
 801ff18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801ff1a:	7a2a      	ldrb	r2, [r5, #8]
 801ff1c:	2a01      	cmp	r2, #1
 801ff1e:	d025      	beq.n	801ff6c <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x68>
 801ff20:	d30d      	bcc.n	801ff3e <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x3a>
 801ff22:	2a02      	cmp	r2, #2
 801ff24:	d12f      	bne.n	801ff86 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x82>
 801ff26:	4920      	ldr	r1, [pc, #128]	; (801ffa8 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa4>)
 801ff28:	4a20      	ldr	r2, [pc, #128]	; (801ffac <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa8>)
 801ff2a:	8809      	ldrh	r1, [r1, #0]
 801ff2c:	8812      	ldrh	r2, [r2, #0]
 801ff2e:	008c      	lsls	r4, r1, #2
 801ff30:	4618      	mov	r0, r3
 801ff32:	9400      	str	r4, [sp, #0]
 801ff34:	2310      	movs	r3, #16
 801ff36:	f7fb ff1d 	bl	801bd74 <nema_bind_dst_tex>
 801ff3a:	b003      	add	sp, #12
 801ff3c:	bd30      	pop	{r4, r5, pc}
 801ff3e:	491a      	ldr	r1, [pc, #104]	; (801ffa8 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa4>)
 801ff40:	4a1a      	ldr	r2, [pc, #104]	; (801ffac <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa8>)
 801ff42:	8809      	ldrh	r1, [r1, #0]
 801ff44:	8812      	ldrh	r2, [r2, #0]
 801ff46:	004c      	lsls	r4, r1, #1
 801ff48:	4618      	mov	r0, r3
 801ff4a:	9400      	str	r4, [sp, #0]
 801ff4c:	2304      	movs	r3, #4
 801ff4e:	f7fb ff11 	bl	801bd74 <nema_bind_dst_tex>
 801ff52:	b003      	add	sp, #12
 801ff54:	bd30      	pop	{r4, r5, pc}
 801ff56:	6823      	ldr	r3, [r4, #0]
 801ff58:	4620      	mov	r0, r4
 801ff5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ff5c:	4798      	blx	r3
 801ff5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801ff60:	4283      	cmp	r3, r0
 801ff62:	d1da      	bne.n	801ff1a <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x16>
 801ff64:	7a2a      	ldrb	r2, [r5, #8]
 801ff66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ff68:	2a01      	cmp	r2, #1
 801ff6a:	d1d9      	bne.n	801ff20 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x1c>
 801ff6c:	490e      	ldr	r1, [pc, #56]	; (801ffa8 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa4>)
 801ff6e:	4a0f      	ldr	r2, [pc, #60]	; (801ffac <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa8>)
 801ff70:	8809      	ldrh	r1, [r1, #0]
 801ff72:	8812      	ldrh	r2, [r2, #0]
 801ff74:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 801ff78:	4618      	mov	r0, r3
 801ff7a:	9400      	str	r4, [sp, #0]
 801ff7c:	2339      	movs	r3, #57	; 0x39
 801ff7e:	f7fb fef9 	bl	801bd74 <nema_bind_dst_tex>
 801ff82:	b003      	add	sp, #12
 801ff84:	bd30      	pop	{r4, r5, pc}
 801ff86:	4b0a      	ldr	r3, [pc, #40]	; (801ffb0 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xac>)
 801ff88:	4a0a      	ldr	r2, [pc, #40]	; (801ffb4 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xb0>)
 801ff8a:	2140      	movs	r1, #64	; 0x40
 801ff8c:	480a      	ldr	r0, [pc, #40]	; (801ffb8 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xb4>)
 801ff8e:	f009 f895 	bl	80290bc <__assert_func>
 801ff92:	4b0a      	ldr	r3, [pc, #40]	; (801ffbc <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xb8>)
 801ff94:	4a0a      	ldr	r2, [pc, #40]	; (801ffc0 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xbc>)
 801ff96:	217c      	movs	r1, #124	; 0x7c
 801ff98:	480a      	ldr	r0, [pc, #40]	; (801ffc4 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xc0>)
 801ff9a:	f009 f88f 	bl	80290bc <__assert_func>
 801ff9e:	bf00      	nop
 801ffa0:	20197c18 	.word	0x20197c18
 801ffa4:	201979e6 	.word	0x201979e6
 801ffa8:	201979e2 	.word	0x201979e2
 801ffac:	201979e4 	.word	0x201979e4
 801ffb0:	0802bf84 	.word	0x0802bf84
 801ffb4:	0802ca98 	.word	0x0802ca98
 801ffb8:	0802bfcc 	.word	0x0802bfcc
 801ffbc:	0802bf28 	.word	0x0802bf28
 801ffc0:	0802c730 	.word	0x0802c730
 801ffc4:	0802bf50 	.word	0x0802bf50

0801ffc8 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh>:
 801ffc8:	2b00      	cmp	r3, #0
 801ffca:	d058      	beq.n	802007e <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xb6>
 801ffcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ffd0:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 801ffd4:	b085      	sub	sp, #20
 801ffd6:	2c00      	cmp	r4, #0
 801ffd8:	dd4e      	ble.n	8020078 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xb0>
 801ffda:	f9b1 4006 	ldrsh.w	r4, [r1, #6]
 801ffde:	2c00      	cmp	r4, #0
 801ffe0:	dd4a      	ble.n	8020078 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xb0>
 801ffe2:	4616      	mov	r6, r2
 801ffe4:	4605      	mov	r5, r0
 801ffe6:	6808      	ldr	r0, [r1, #0]
 801ffe8:	6849      	ldr	r1, [r1, #4]
 801ffea:	461c      	mov	r4, r3
 801ffec:	4f27      	ldr	r7, [pc, #156]	; (802008c <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xc4>)
 801ffee:	ab02      	add	r3, sp, #8
 801fff0:	c303      	stmia	r3!, {r0, r1}
 801fff2:	a802      	add	r0, sp, #8
 801fff4:	f7f8 fb9a 	bl	801872c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fff8:	6838      	ldr	r0, [r7, #0]
 801fffa:	f3c6 4807 	ubfx	r8, r6, #16, #8
 801fffe:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8020002:	b2f6      	uxtb	r6, r6
 8020004:	2800      	cmp	r0, #0
 8020006:	d03b      	beq.n	8020080 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xb8>
 8020008:	f7fe f8f6 	bl	801e1f8 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 802000c:	682b      	ldr	r3, [r5, #0]
 802000e:	4628      	mov	r0, r5
 8020010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020012:	4798      	blx	r3
 8020014:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8020018:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 802001c:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 8020020:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8020024:	f7fb fdf2 	bl	801bc0c <nema_set_clip>
 8020028:	f04f 33ff 	mov.w	r3, #4294967295
 802002c:	2100      	movs	r1, #0
 802002e:	461a      	mov	r2, r3
 8020030:	4817      	ldr	r0, [pc, #92]	; (8020090 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xc8>)
 8020032:	f7fd fc33 	bl	801d89c <nema_set_blend>
 8020036:	2200      	movs	r2, #0
 8020038:	4623      	mov	r3, r4
 802003a:	4611      	mov	r1, r2
 802003c:	4610      	mov	r0, r2
 802003e:	f7fb fe19 	bl	801bc74 <nema_rgba>
 8020042:	f7fd fff1 	bl	801e028 <nema_set_const_color>
 8020046:	4632      	mov	r2, r6
 8020048:	4649      	mov	r1, r9
 802004a:	4640      	mov	r0, r8
 802004c:	23ff      	movs	r3, #255	; 0xff
 802004e:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 8020052:	f9bd 500a 	ldrsh.w	r5, [sp, #10]
 8020056:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 802005a:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 802005e:	f7fb fe09 	bl	801bc74 <nema_rgba>
 8020062:	4643      	mov	r3, r8
 8020064:	9000      	str	r0, [sp, #0]
 8020066:	4632      	mov	r2, r6
 8020068:	4620      	mov	r0, r4
 802006a:	4629      	mov	r1, r5
 802006c:	f7fb ff38 	bl	801bee0 <nema_fill_rect>
 8020070:	6838      	ldr	r0, [r7, #0]
 8020072:	b128      	cbz	r0, 8020080 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xb8>
 8020074:	f7fe f8e0 	bl	801e238 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 8020078:	b005      	add	sp, #20
 802007a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802007e:	4770      	bx	lr
 8020080:	4b04      	ldr	r3, [pc, #16]	; (8020094 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xcc>)
 8020082:	4a05      	ldr	r2, [pc, #20]	; (8020098 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xd0>)
 8020084:	217c      	movs	r1, #124	; 0x7c
 8020086:	4805      	ldr	r0, [pc, #20]	; (802009c <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xd4>)
 8020088:	f009 f818 	bl	80290bc <__assert_func>
 802008c:	20197c18 	.word	0x20197c18
 8020090:	08000504 	.word	0x08000504
 8020094:	0802bf28 	.word	0x0802bf28
 8020098:	0802c730 	.word	0x0802c730
 802009c:	0802bf50 	.word	0x0802bf50

080200a0 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 80200a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200a4:	b085      	sub	sp, #20
 80200a6:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 80200aa:	2c00      	cmp	r4, #0
 80200ac:	d063      	beq.n	8020176 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd6>
 80200ae:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 80200b2:	2d00      	cmp	r5, #0
 80200b4:	dd5f      	ble.n	8020176 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd6>
 80200b6:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 80200ba:	2d00      	cmp	r5, #0
 80200bc:	dd5b      	ble.n	8020176 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd6>
 80200be:	460f      	mov	r7, r1
 80200c0:	4606      	mov	r6, r0
 80200c2:	6859      	ldr	r1, [r3, #4]
 80200c4:	6818      	ldr	r0, [r3, #0]
 80200c6:	f8df 9124 	ldr.w	r9, [pc, #292]	; 80201ec <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14c>
 80200ca:	ab02      	add	r3, sp, #8
 80200cc:	c303      	stmia	r3!, {r0, r1}
 80200ce:	a802      	add	r0, sp, #8
 80200d0:	4690      	mov	r8, r2
 80200d2:	f7f8 fb2b 	bl	801872c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80200d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80200d8:	f8d9 0000 	ldr.w	r0, [r9]
 80200dc:	f3c3 4a07 	ubfx	sl, r3, #16, #8
 80200e0:	f3c3 2b07 	ubfx	fp, r3, #8, #8
 80200e4:	b2dd      	uxtb	r5, r3
 80200e6:	2800      	cmp	r0, #0
 80200e8:	d060      	beq.n	80201ac <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10c>
 80200ea:	f7fe f885 	bl	801e1f8 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 80200ee:	7a33      	ldrb	r3, [r6, #8]
 80200f0:	2b01      	cmp	r3, #1
 80200f2:	d043      	beq.n	802017c <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xdc>
 80200f4:	d34e      	bcc.n	8020194 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf4>
 80200f6:	2b02      	cmp	r3, #2
 80200f8:	d15e      	bne.n	80201b8 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 80200fa:	4b33      	ldr	r3, [pc, #204]	; (80201c8 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x128>)
 80200fc:	4a33      	ldr	r2, [pc, #204]	; (80201cc <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12c>)
 80200fe:	8819      	ldrh	r1, [r3, #0]
 8020100:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8020104:	8812      	ldrh	r2, [r2, #0]
 8020106:	4638      	mov	r0, r7
 8020108:	9300      	str	r3, [sp, #0]
 802010a:	2310      	movs	r3, #16
 802010c:	f7fb fe32 	bl	801bd74 <nema_bind_dst_tex>
 8020110:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8020114:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8020118:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 802011c:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8020120:	f7fb fd74 	bl	801bc0c <nema_set_clip>
 8020124:	f04f 33ff 	mov.w	r3, #4294967295
 8020128:	2100      	movs	r1, #0
 802012a:	461a      	mov	r2, r3
 802012c:	4828      	ldr	r0, [pc, #160]	; (80201d0 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x130>)
 802012e:	f7fd fbb5 	bl	801d89c <nema_set_blend>
 8020132:	2200      	movs	r2, #0
 8020134:	4623      	mov	r3, r4
 8020136:	4611      	mov	r1, r2
 8020138:	4610      	mov	r0, r2
 802013a:	f7fb fd9b 	bl	801bc74 <nema_rgba>
 802013e:	f7fd ff73 	bl	801e028 <nema_set_const_color>
 8020142:	462a      	mov	r2, r5
 8020144:	4659      	mov	r1, fp
 8020146:	23ff      	movs	r3, #255	; 0xff
 8020148:	4650      	mov	r0, sl
 802014a:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 802014e:	f9bd 500a 	ldrsh.w	r5, [sp, #10]
 8020152:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8020156:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 802015a:	f7fb fd8b 	bl	801bc74 <nema_rgba>
 802015e:	463b      	mov	r3, r7
 8020160:	9000      	str	r0, [sp, #0]
 8020162:	4632      	mov	r2, r6
 8020164:	4620      	mov	r0, r4
 8020166:	4629      	mov	r1, r5
 8020168:	f7fb feba 	bl	801bee0 <nema_fill_rect>
 802016c:	f8d9 0000 	ldr.w	r0, [r9]
 8020170:	b1e0      	cbz	r0, 80201ac <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10c>
 8020172:	f7fe f861 	bl	801e238 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 8020176:	b005      	add	sp, #20
 8020178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802017c:	4b12      	ldr	r3, [pc, #72]	; (80201c8 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x128>)
 802017e:	4a13      	ldr	r2, [pc, #76]	; (80201cc <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12c>)
 8020180:	8819      	ldrh	r1, [r3, #0]
 8020182:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8020186:	8812      	ldrh	r2, [r2, #0]
 8020188:	4638      	mov	r0, r7
 802018a:	9300      	str	r3, [sp, #0]
 802018c:	2339      	movs	r3, #57	; 0x39
 802018e:	f7fb fdf1 	bl	801bd74 <nema_bind_dst_tex>
 8020192:	e7bd      	b.n	8020110 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 8020194:	4b0c      	ldr	r3, [pc, #48]	; (80201c8 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x128>)
 8020196:	4a0d      	ldr	r2, [pc, #52]	; (80201cc <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12c>)
 8020198:	8819      	ldrh	r1, [r3, #0]
 802019a:	ea4f 0348 	mov.w	r3, r8, lsl #1
 802019e:	8812      	ldrh	r2, [r2, #0]
 80201a0:	4638      	mov	r0, r7
 80201a2:	9300      	str	r3, [sp, #0]
 80201a4:	2304      	movs	r3, #4
 80201a6:	f7fb fde5 	bl	801bd74 <nema_bind_dst_tex>
 80201aa:	e7b1      	b.n	8020110 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 80201ac:	4b09      	ldr	r3, [pc, #36]	; (80201d4 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x134>)
 80201ae:	4a0a      	ldr	r2, [pc, #40]	; (80201d8 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x138>)
 80201b0:	217c      	movs	r1, #124	; 0x7c
 80201b2:	480a      	ldr	r0, [pc, #40]	; (80201dc <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13c>)
 80201b4:	f008 ff82 	bl	80290bc <__assert_func>
 80201b8:	4b09      	ldr	r3, [pc, #36]	; (80201e0 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x140>)
 80201ba:	4a0a      	ldr	r2, [pc, #40]	; (80201e4 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>)
 80201bc:	f44f 71cb 	mov.w	r1, #406	; 0x196
 80201c0:	4809      	ldr	r0, [pc, #36]	; (80201e8 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>)
 80201c2:	f008 ff7b 	bl	80290bc <__assert_func>
 80201c6:	bf00      	nop
 80201c8:	201979e2 	.word	0x201979e2
 80201cc:	201979e4 	.word	0x201979e4
 80201d0:	08000504 	.word	0x08000504
 80201d4:	0802bf28 	.word	0x0802bf28
 80201d8:	0802c730 	.word	0x0802c730
 80201dc:	0802bf50 	.word	0x0802bf50
 80201e0:	0802bf84 	.word	0x0802bf84
 80201e4:	0802c7ec 	.word	0x0802c7ec
 80201e8:	0802bfcc 	.word	0x0802bfcc
 80201ec:	20197c18 	.word	0x20197c18

080201f0 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80201f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201f4:	b091      	sub	sp, #68	; 0x44
 80201f6:	f89d 108c 	ldrb.w	r1, [sp, #140]	; 0x8c
 80201fa:	ac0a      	add	r4, sp, #40	; 0x28
 80201fc:	e884 000c 	stmia.w	r4, {r2, r3}
 8020200:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8020204:	1e4f      	subs	r7, r1, #1
 8020206:	fa5f fc87 	uxtb.w	ip, r7
 802020a:	4682      	mov	sl, r0
 802020c:	9303      	str	r3, [sp, #12]
 802020e:	f89d 0090 	ldrb.w	r0, [sp, #144]	; 0x90
 8020212:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
 8020216:	f1bc 0f01 	cmp.w	ip, #1
 802021a:	9304      	str	r3, [sp, #16]
 802021c:	f9bd 8068 	ldrsh.w	r8, [sp, #104]	; 0x68
 8020220:	f9bd b06c 	ldrsh.w	fp, [sp, #108]	; 0x6c
 8020224:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8020226:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 802022a:	9005      	str	r0, [sp, #20]
 802022c:	f89d 6094 	ldrb.w	r6, [sp, #148]	; 0x94
 8020230:	d905      	bls.n	802023e <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x4e>
 8020232:	2904      	cmp	r1, #4
 8020234:	f000 80d0 	beq.w	80203d8 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e8>
 8020238:	2908      	cmp	r1, #8
 802023a:	f040 816f 	bne.w	802051c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x32c>
 802023e:	7b53      	ldrb	r3, [r2, #13]
 8020240:	7990      	ldrb	r0, [r2, #6]
 8020242:	0159      	lsls	r1, r3, #5
 8020244:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8020248:	ea50 0901 	orrs.w	r9, r0, r1
 802024c:	f000 80c1 	beq.w	80203d2 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 8020250:	011b      	lsls	r3, r3, #4
 8020252:	79d0      	ldrb	r0, [r2, #7]
 8020254:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8020258:	ea50 0301 	orrs.w	r3, r0, r1
 802025c:	9306      	str	r3, [sp, #24]
 802025e:	f000 80b8 	beq.w	80203d2 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 8020262:	f992 3009 	ldrsb.w	r3, [r2, #9]
 8020266:	9a03      	ldr	r2, [sp, #12]
 8020268:	b29b      	uxth	r3, r3
 802026a:	2a00      	cmp	r2, #0
 802026c:	f040 80be 	bne.w	80203ec <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fc>
 8020270:	4498      	add	r8, r3
 8020272:	fa0f f888 	sxth.w	r8, r8
 8020276:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020278:	f9b3 3000 	ldrsh.w	r3, [r3]
 802027c:	4543      	cmp	r3, r8
 802027e:	dd06      	ble.n	802028e <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x9e>
 8020280:	9a03      	ldr	r2, [sp, #12]
 8020282:	441a      	add	r2, r3
 8020284:	eba2 0508 	sub.w	r5, r2, r8
 8020288:	4698      	mov	r8, r3
 802028a:	b2ab      	uxth	r3, r5
 802028c:	9303      	str	r3, [sp, #12]
 802028e:	f8df c30c 	ldr.w	ip, [pc, #780]	; 802059c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 8020292:	465a      	mov	r2, fp
 8020294:	f89c 5000 	ldrb.w	r5, [ip]
 8020298:	4641      	mov	r1, r8
 802029a:	4633      	mov	r3, r6
 802029c:	4620      	mov	r0, r4
 802029e:	9507      	str	r5, [sp, #28]
 80202a0:	f7f8 f8be 	bl	8018420 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80202a4:	465a      	mov	r2, fp
 80202a6:	4641      	mov	r1, r8
 80202a8:	4633      	mov	r3, r6
 80202aa:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 80202ae:	4620      	mov	r0, r4
 80202b0:	f7f8 f8d3 	bl	801845a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80202b4:	a910      	add	r1, sp, #64	; 0x40
 80202b6:	f821 0d0a 	strh.w	r0, [r1, #-10]!
 80202ba:	a80d      	add	r0, sp, #52	; 0x34
 80202bc:	f7f8 f9f4 	bl	80186a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80202c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80202c2:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80202c6:	9308      	str	r3, [sp, #32]
 80202c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80202ca:	f3c3 2b07 	ubfx	fp, r3, #8, #8
 80202ce:	fa5f f883 	uxtb.w	r8, r3
 80202d2:	2f07      	cmp	r7, #7
 80202d4:	f200 811f 	bhi.w	8020516 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x326>
 80202d8:	e8df f017 	tbh	[pc, r7, lsl #1]
 80202dc:	009b00a1 	.word	0x009b00a1
 80202e0:	0095011d 	.word	0x0095011d
 80202e4:	011d011d 	.word	0x011d011d
 80202e8:	0008011d 	.word	0x0008011d
 80202ec:	2708      	movs	r7, #8
 80202ee:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80202f2:	4ca1      	ldr	r4, [pc, #644]	; (8020578 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 80202f4:	6820      	ldr	r0, [r4, #0]
 80202f6:	2800      	cmp	r0, #0
 80202f8:	f000 8137 	beq.w	802056a <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 80202fc:	f7fd ff7c 	bl	801e1f8 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 8020300:	f8da 3000 	ldr.w	r3, [sl]
 8020304:	4650      	mov	r0, sl
 8020306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020308:	4798      	blx	r3
 802030a:	2e02      	cmp	r6, #2
 802030c:	f000 80e6 	beq.w	80204dc <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ec>
 8020310:	2e03      	cmp	r6, #3
 8020312:	f000 80c7 	beq.w	80204a4 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2b4>
 8020316:	2e01      	cmp	r6, #1
 8020318:	f000 80a8 	beq.w	802046c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x27c>
 802031c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802031e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8020322:	8819      	ldrh	r1, [r3, #0]
 8020324:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8020328:	440a      	add	r2, r1
 802032a:	991e      	ldr	r1, [sp, #120]	; 0x78
 802032c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8020330:	8848      	ldrh	r0, [r1, #2]
 8020332:	6849      	ldr	r1, [r1, #4]
 8020334:	4403      	add	r3, r0
 8020336:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 802033a:	910f      	str	r1, [sp, #60]	; 0x3c
 802033c:	a80e      	add	r0, sp, #56	; 0x38
 802033e:	f7f8 f9f5 	bl	801872c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020342:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8020346:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 802034a:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 802034e:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8020352:	f7fb fc5b 	bl	801bc0c <nema_set_clip>
 8020356:	2200      	movs	r2, #0
 8020358:	9d05      	ldr	r5, [sp, #20]
 802035a:	4611      	mov	r1, r2
 802035c:	462b      	mov	r3, r5
 802035e:	4610      	mov	r0, r2
 8020360:	f7fb fc88 	bl	801bc74 <nema_rgba>
 8020364:	f7fd fe60 	bl	801e028 <nema_set_const_color>
 8020368:	462b      	mov	r3, r5
 802036a:	4642      	mov	r2, r8
 802036c:	4659      	mov	r1, fp
 802036e:	9808      	ldr	r0, [sp, #32]
 8020370:	f7fb fc80 	bl	801bc74 <nema_rgba>
 8020374:	f7fb fc3e 	bl	801bbf4 <nema_set_tex_color>
 8020378:	f04f 33ff 	mov.w	r3, #4294967295
 802037c:	2201      	movs	r2, #1
 802037e:	2100      	movs	r1, #0
 8020380:	487e      	ldr	r0, [pc, #504]	; (802057c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 8020382:	f7fd fa8b 	bl	801d89c <nema_set_blend>
 8020386:	2200      	movs	r2, #0
 8020388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802038a:	9201      	str	r2, [sp, #4]
 802038c:	9300      	str	r3, [sp, #0]
 802038e:	4649      	mov	r1, r9
 8020390:	463b      	mov	r3, r7
 8020392:	9820      	ldr	r0, [sp, #128]	; 0x80
 8020394:	9a06      	ldr	r2, [sp, #24]
 8020396:	f7fb fc75 	bl	801bc84 <nema_bind_src_tex>
 802039a:	9b07      	ldr	r3, [sp, #28]
 802039c:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 80203a0:	2b01      	cmp	r3, #1
 80203a2:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 80203a6:	d040      	beq.n	802042a <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x23a>
 80203a8:	2e02      	cmp	r6, #2
 80203aa:	d051      	beq.n	8020450 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x260>
 80203ac:	2e03      	cmp	r6, #3
 80203ae:	f000 80c7 	beq.w	8020540 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 80203b2:	2e01      	cmp	r6, #1
 80203b4:	9b04      	ldr	r3, [sp, #16]
 80203b6:	f000 80b8 	beq.w	802052a <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33a>
 80203ba:	1ac9      	subs	r1, r1, r3
 80203bc:	9b03      	ldr	r3, [sp, #12]
 80203be:	1ac0      	subs	r0, r0, r3
 80203c0:	f7fb fda0 	bl	801bf04 <nema_blit>
 80203c4:	6823      	ldr	r3, [r4, #0]
 80203c6:	2b00      	cmp	r3, #0
 80203c8:	f000 80cf 	beq.w	802056a <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 80203cc:	2201      	movs	r2, #1
 80203ce:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 80203d2:	b011      	add	sp, #68	; 0x44
 80203d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80203d8:	2b00      	cmp	r3, #0
 80203da:	f47f af30 	bne.w	802023e <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x4e>
 80203de:	4b68      	ldr	r3, [pc, #416]	; (8020580 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 80203e0:	4a68      	ldr	r2, [pc, #416]	; (8020584 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 80203e2:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80203e6:	4868      	ldr	r0, [pc, #416]	; (8020588 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>)
 80203e8:	f008 fe68 	bl	80290bc <__assert_func>
 80203ec:	1ad5      	subs	r5, r2, r3
 80203ee:	b2ab      	uxth	r3, r5
 80203f0:	041a      	lsls	r2, r3, #16
 80203f2:	9303      	str	r3, [sp, #12]
 80203f4:	f57f af3f 	bpl.w	8020276 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x86>
 80203f8:	eba8 0803 	sub.w	r8, r8, r3
 80203fc:	2300      	movs	r3, #0
 80203fe:	fa0f f888 	sxth.w	r8, r8
 8020402:	9303      	str	r3, [sp, #12]
 8020404:	e737      	b.n	8020276 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x86>
 8020406:	f109 0301 	add.w	r3, r9, #1
 802040a:	105b      	asrs	r3, r3, #1
 802040c:	9309      	str	r3, [sp, #36]	; 0x24
 802040e:	2729      	movs	r7, #41	; 0x29
 8020410:	e76f      	b.n	80202f2 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 8020412:	f109 0303 	add.w	r3, r9, #3
 8020416:	109b      	asrs	r3, r3, #2
 8020418:	9309      	str	r3, [sp, #36]	; 0x24
 802041a:	2728      	movs	r7, #40	; 0x28
 802041c:	e769      	b.n	80202f2 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 802041e:	f109 0307 	add.w	r3, r9, #7
 8020422:	10db      	asrs	r3, r3, #3
 8020424:	9309      	str	r3, [sp, #36]	; 0x24
 8020426:	2727      	movs	r7, #39	; 0x27
 8020428:	e763      	b.n	80202f2 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 802042a:	2e02      	cmp	r6, #2
 802042c:	f000 8093 	beq.w	8020556 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x366>
 8020430:	2e03      	cmp	r6, #3
 8020432:	d00d      	beq.n	8020450 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x260>
 8020434:	2e01      	cmp	r6, #1
 8020436:	f000 8091 	beq.w	802055c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 802043a:	461a      	mov	r2, r3
 802043c:	9b03      	ldr	r3, [sp, #12]
 802043e:	4419      	add	r1, r3
 8020440:	9b04      	ldr	r3, [sp, #16]
 8020442:	eba1 0109 	sub.w	r1, r1, r9
 8020446:	3101      	adds	r1, #1
 8020448:	1ac0      	subs	r0, r0, r3
 802044a:	f7fb fd75 	bl	801bf38 <nema_blit_rotate>
 802044e:	e7b9      	b.n	80203c4 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 8020450:	9b04      	ldr	r3, [sp, #16]
 8020452:	2202      	movs	r2, #2
 8020454:	4419      	add	r1, r3
 8020456:	9b03      	ldr	r3, [sp, #12]
 8020458:	4418      	add	r0, r3
 802045a:	9b06      	ldr	r3, [sp, #24]
 802045c:	eba0 0009 	sub.w	r0, r0, r9
 8020460:	1ac9      	subs	r1, r1, r3
 8020462:	3101      	adds	r1, #1
 8020464:	3001      	adds	r0, #1
 8020466:	f7fb fd67 	bl	801bf38 <nema_blit_rotate>
 802046a:	e7ab      	b.n	80203c4 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 802046c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8020470:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8020474:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8020476:	440b      	add	r3, r1
 8020478:	8852      	ldrh	r2, [r2, #2]
 802047a:	981e      	ldr	r0, [sp, #120]	; 0x78
 802047c:	991e      	ldr	r1, [sp, #120]	; 0x78
 802047e:	1a9b      	subs	r3, r3, r2
 8020480:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 8020484:	f8b0 c000 	ldrh.w	ip, [r0]
 8020488:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 802048c:	8880      	ldrh	r0, [r0, #4]
 802048e:	1a5b      	subs	r3, r3, r1
 8020490:	4462      	add	r2, ip
 8020492:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8020496:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c
 802049a:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 802049e:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
 80204a2:	e74b      	b.n	802033c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x14c>
 80204a4:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80204a8:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80204ac:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80204ae:	440b      	add	r3, r1
 80204b0:	8812      	ldrh	r2, [r2, #0]
 80204b2:	981e      	ldr	r0, [sp, #120]	; 0x78
 80204b4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80204b6:	1a9b      	subs	r3, r3, r2
 80204b8:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 80204bc:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 80204c0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80204c4:	88c0      	ldrh	r0, [r0, #6]
 80204c6:	1a5b      	subs	r3, r3, r1
 80204c8:	4462      	add	r2, ip
 80204ca:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80204ce:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
 80204d2:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80204d6:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 80204da:	e72f      	b.n	802033c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x14c>
 80204dc:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80204e0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80204e4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80204e8:	440a      	add	r2, r1
 80204ea:	991e      	ldr	r1, [sp, #120]	; 0x78
 80204ec:	8808      	ldrh	r0, [r1, #0]
 80204ee:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80204f2:	1a12      	subs	r2, r2, r0
 80204f4:	440b      	add	r3, r1
 80204f6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80204f8:	981e      	ldr	r0, [sp, #120]	; 0x78
 80204fa:	8849      	ldrh	r1, [r1, #2]
 80204fc:	8880      	ldrh	r0, [r0, #4]
 80204fe:	1a5b      	subs	r3, r3, r1
 8020500:	991e      	ldr	r1, [sp, #120]	; 0x78
 8020502:	1a12      	subs	r2, r2, r0
 8020504:	88c8      	ldrh	r0, [r1, #6]
 8020506:	6849      	ldr	r1, [r1, #4]
 8020508:	1a1b      	subs	r3, r3, r0
 802050a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 802050e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8020512:	910f      	str	r1, [sp, #60]	; 0x3c
 8020514:	e712      	b.n	802033c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x14c>
 8020516:	f64f 77ff 	movw	r7, #65535	; 0xffff
 802051a:	e6ea      	b.n	80202f2 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 802051c:	4b1b      	ldr	r3, [pc, #108]	; (802058c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 802051e:	4a19      	ldr	r2, [pc, #100]	; (8020584 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 8020520:	f240 11ab 	movw	r1, #427	; 0x1ab
 8020524:	4818      	ldr	r0, [pc, #96]	; (8020588 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>)
 8020526:	f008 fdc9 	bl	80290bc <__assert_func>
 802052a:	4403      	add	r3, r0
 802052c:	4618      	mov	r0, r3
 802052e:	9b06      	ldr	r3, [sp, #24]
 8020530:	2203      	movs	r2, #3
 8020532:	1ac0      	subs	r0, r0, r3
 8020534:	9b03      	ldr	r3, [sp, #12]
 8020536:	3001      	adds	r0, #1
 8020538:	1ac9      	subs	r1, r1, r3
 802053a:	f7fb fcfd 	bl	801bf38 <nema_blit_rotate>
 802053e:	e741      	b.n	80203c4 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 8020540:	9b03      	ldr	r3, [sp, #12]
 8020542:	2201      	movs	r2, #1
 8020544:	4419      	add	r1, r3
 8020546:	9b04      	ldr	r3, [sp, #16]
 8020548:	eba1 0109 	sub.w	r1, r1, r9
 802054c:	3101      	adds	r1, #1
 802054e:	1ac0      	subs	r0, r0, r3
 8020550:	f7fb fcf2 	bl	801bf38 <nema_blit_rotate>
 8020554:	e736      	b.n	80203c4 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 8020556:	9b04      	ldr	r3, [sp, #16]
 8020558:	4418      	add	r0, r3
 802055a:	e7e8      	b.n	802052e <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 802055c:	9b04      	ldr	r3, [sp, #16]
 802055e:	1ac9      	subs	r1, r1, r3
 8020560:	9b03      	ldr	r3, [sp, #12]
 8020562:	1ac0      	subs	r0, r0, r3
 8020564:	f7fb fcce 	bl	801bf04 <nema_blit>
 8020568:	e72c      	b.n	80203c4 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 802056a:	4b09      	ldr	r3, [pc, #36]	; (8020590 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 802056c:	4a09      	ldr	r2, [pc, #36]	; (8020594 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 802056e:	217c      	movs	r1, #124	; 0x7c
 8020570:	4809      	ldr	r0, [pc, #36]	; (8020598 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 8020572:	f008 fda3 	bl	80290bc <__assert_func>
 8020576:	bf00      	nop
 8020578:	20197c18 	.word	0x20197c18
 802057c:	08000504 	.word	0x08000504
 8020580:	0802c43c 	.word	0x0802c43c
 8020584:	0802d164 	.word	0x0802d164
 8020588:	0802bfcc 	.word	0x0802bfcc
 802058c:	0802c3ac 	.word	0x0802c3ac
 8020590:	0802bf28 	.word	0x0802bf28
 8020594:	0802c730 	.word	0x0802c730
 8020598:	0802bf50 	.word	0x0802bf50
 802059c:	201979e0 	.word	0x201979e0

080205a0 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80205a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205a4:	b087      	sub	sp, #28
 80205a6:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 80205aa:	e9dd 8410 	ldrd	r8, r4, [sp, #64]	; 0x40
 80205ae:	f8bd 7048 	ldrh.w	r7, [sp, #72]	; 0x48
 80205b2:	f8bd e050 	ldrh.w	lr, [sp, #80]	; 0x50
 80205b6:	2e00      	cmp	r6, #0
 80205b8:	d065      	beq.n	8020686 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xe6>
 80205ba:	f9b4 a004 	ldrsh.w	sl, [r4, #4]
 80205be:	f1ba 0f00 	cmp.w	sl, #0
 80205c2:	dd60      	ble.n	8020686 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xe6>
 80205c4:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 80205c8:	f1ba 0f00 	cmp.w	sl, #0
 80205cc:	dd5b      	ble.n	8020686 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xe6>
 80205ce:	f3c7 0a87 	ubfx	sl, r7, #2, #8
 80205d2:	f1ba 0f0b 	cmp.w	sl, #11
 80205d6:	d059      	beq.n	802068c <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xec>
 80205d8:	469c      	mov	ip, r3
 80205da:	4b7e      	ldr	r3, [pc, #504]	; (80207d4 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x234>)
 80205dc:	4615      	mov	r5, r2
 80205de:	f893 b000 	ldrb.w	fp, [r3]
 80205e2:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80205e6:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80205ea:	9303      	str	r3, [sp, #12]
 80205ec:	f1bb 0f01 	cmp.w	fp, #1
 80205f0:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80205f4:	9205      	str	r2, [sp, #20]
 80205f6:	bf08      	it	eq
 80205f8:	9a03      	ldreq	r2, [sp, #12]
 80205fa:	9302      	str	r3, [sp, #8]
 80205fc:	bf08      	it	eq
 80205fe:	e9cd 2302 	strdeq	r2, r3, [sp, #8]
 8020602:	f1ba 0f0d 	cmp.w	sl, #13
 8020606:	4681      	mov	r9, r0
 8020608:	d034      	beq.n	8020674 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd4>
 802060a:	4b73      	ldr	r3, [pc, #460]	; (80207d8 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x238>)
 802060c:	6818      	ldr	r0, [r3, #0]
 802060e:	2800      	cmp	r0, #0
 8020610:	f000 80d3 	beq.w	80207ba <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x21a>
 8020614:	f8dc 3000 	ldr.w	r3, [ip]
 8020618:	9304      	str	r3, [sp, #16]
 802061a:	f7fd fded 	bl	801e1f8 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 802061e:	f8d9 3000 	ldr.w	r3, [r9]
 8020622:	4648      	mov	r0, r9
 8020624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020626:	4798      	blx	r3
 8020628:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802062c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8020630:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8020634:	f9b4 0000 	ldrsh.w	r0, [r4]
 8020638:	f7fb fae8 	bl	801bc0c <nema_set_clip>
 802063c:	2200      	movs	r2, #0
 802063e:	4633      	mov	r3, r6
 8020640:	4611      	mov	r1, r2
 8020642:	4610      	mov	r0, r2
 8020644:	f7fb fb16 	bl	801bc74 <nema_rgba>
 8020648:	f7fd fcee 	bl	801e028 <nema_set_const_color>
 802064c:	f04f 33ff 	mov.w	r3, #4294967295
 8020650:	2201      	movs	r2, #1
 8020652:	2100      	movs	r1, #0
 8020654:	4861      	ldr	r0, [pc, #388]	; (80207dc <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x23c>)
 8020656:	f7fd f921 	bl	801d89c <nema_set_blend>
 802065a:	f1ba 0f0d 	cmp.w	sl, #13
 802065e:	f200 80b2 	bhi.w	80207c6 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x226>
 8020662:	e8df f00a 	tbb	[pc, sl]
 8020666:	8d1b      	.short	0x8d1b
 8020668:	b0b0b08b 	.word	0xb0b0b08b
 802066c:	b0b0b0b0 	.word	0xb0b0b0b0
 8020670:	888fb0b0 	.word	0x888fb0b0
 8020674:	9b05      	ldr	r3, [sp, #20]
 8020676:	b133      	cbz	r3, 8020686 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xe6>
 8020678:	781b      	ldrb	r3, [r3, #0]
 802067a:	f1a3 0216 	sub.w	r2, r3, #22
 802067e:	2a01      	cmp	r2, #1
 8020680:	d9c3      	bls.n	802060a <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6a>
 8020682:	2b12      	cmp	r3, #18
 8020684:	d0c1      	beq.n	802060a <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6a>
 8020686:	b007      	add	sp, #28
 8020688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802068c:	e9cd 6e13 	strd	r6, lr, [sp, #76]	; 0x4c
 8020690:	9712      	str	r7, [sp, #72]	; 0x48
 8020692:	b007      	add	sp, #28
 8020694:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020698:	f7f7 b9be 	b.w	8017a18 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>
 802069c:	2304      	movs	r3, #4
 802069e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80206a2:	f04f 34ff 	mov.w	r4, #4294967295
 80206a6:	f007 0701 	and.w	r7, r7, #1
 80206aa:	9804      	ldr	r0, [sp, #16]
 80206ac:	9701      	str	r7, [sp, #4]
 80206ae:	9400      	str	r4, [sp, #0]
 80206b0:	f7fb fae8 	bl	801bc84 <nema_bind_src_tex>
 80206b4:	2001      	movs	r0, #1
 80206b6:	f7fc f915 	bl	801c8e4 <nema_enable_tiling>
 80206ba:	2301      	movs	r3, #1
 80206bc:	461a      	mov	r2, r3
 80206be:	4619      	mov	r1, r3
 80206c0:	4618      	mov	r0, r3
 80206c2:	f7fc f923 	bl	801c90c <nema_enable_aa>
 80206c6:	f1bb 0f01 	cmp.w	fp, #1
 80206ca:	d069      	beq.n	80207a0 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x200>
 80206cc:	edd5 2a00 	vldr	s5, [r5]
 80206d0:	ed95 4a01 	vldr	s8, [r5, #4]
 80206d4:	edd5 4a05 	vldr	s9, [r5, #20]
 80206d8:	ed95 5a06 	vldr	s10, [r5, #24]
 80206dc:	edd5 5a0a 	vldr	s11, [r5, #40]	; 0x28
 80206e0:	ed95 6a0b 	vldr	s12, [r5, #44]	; 0x2c
 80206e4:	353c      	adds	r5, #60	; 0x3c
 80206e6:	f9b8 3000 	ldrsh.w	r3, [r8]
 80206ea:	eddf 7a3d 	vldr	s15, [pc, #244]	; 80207e0 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x240>
 80206ee:	ee00 3a10 	vmov	s0, r3
 80206f2:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 80206f6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80206fa:	ee03 3a90 	vmov	s7, r3
 80206fe:	edd5 6a00 	vldr	s13, [r5]
 8020702:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8020706:	ed95 7a01 	vldr	s14, [r5, #4]
 802070a:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 802070e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8020712:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8020716:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 802071a:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 802071e:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8020722:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8020726:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802072a:	eeb0 3a40 	vmov.f32	s6, s0
 802072e:	eeb0 2a40 	vmov.f32	s4, s0
 8020732:	eeb0 1a40 	vmov.f32	s2, s0
 8020736:	eef0 1a63 	vmov.f32	s3, s7
 802073a:	eea2 0aa7 	vfma.f32	s0, s5, s15
 802073e:	eef0 0a63 	vmov.f32	s1, s7
 8020742:	eef0 2a63 	vmov.f32	s5, s7
 8020746:	eea6 3aa7 	vfma.f32	s6, s13, s15
 802074a:	eea5 2aa7 	vfma.f32	s4, s11, s15
 802074e:	eea4 1aa7 	vfma.f32	s2, s9, s15
 8020752:	eee6 2a27 	vfma.f32	s5, s12, s15
 8020756:	eee5 1a27 	vfma.f32	s3, s10, s15
 802075a:	eee4 0a27 	vfma.f32	s1, s8, s15
 802075e:	eee7 3a27 	vfma.f32	s7, s14, s15
 8020762:	f7fb fd49 	bl	801c1f8 <nema_blit_quad_fit>
 8020766:	4b1c      	ldr	r3, [pc, #112]	; (80207d8 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x238>)
 8020768:	6818      	ldr	r0, [r3, #0]
 802076a:	b330      	cbz	r0, 80207ba <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x21a>
 802076c:	b007      	add	sp, #28
 802076e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020772:	f7fd bd61 	b.w	801e238 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 8020776:	9b05      	ldr	r3, [sp, #20]
 8020778:	781b      	ldrb	r3, [r3, #0]
 802077a:	e790      	b.n	802069e <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xfe>
 802077c:	2310      	movs	r3, #16
 802077e:	e78e      	b.n	802069e <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xfe>
 8020780:	2339      	movs	r3, #57	; 0x39
 8020782:	e78c      	b.n	802069e <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xfe>
 8020784:	4a17      	ldr	r2, [pc, #92]	; (80207e4 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x244>)
 8020786:	23ff      	movs	r3, #255	; 0xff
 8020788:	6810      	ldr	r0, [r2, #0]
 802078a:	b2c2      	uxtb	r2, r0
 802078c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8020790:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8020794:	f7fb fa6e 	bl	801bc74 <nema_rgba>
 8020798:	f7fb fa2c 	bl	801bbf4 <nema_set_tex_color>
 802079c:	2329      	movs	r3, #41	; 0x29
 802079e:	e77e      	b.n	802069e <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xfe>
 80207a0:	edd5 2a05 	vldr	s5, [r5, #20]
 80207a4:	ed95 4a06 	vldr	s8, [r5, #24]
 80207a8:	edd5 4a0a 	vldr	s9, [r5, #40]	; 0x28
 80207ac:	ed95 5a0b 	vldr	s10, [r5, #44]	; 0x2c
 80207b0:	edd5 5a0f 	vldr	s11, [r5, #60]	; 0x3c
 80207b4:	ed95 6a10 	vldr	s12, [r5, #64]	; 0x40
 80207b8:	e795      	b.n	80206e6 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x146>
 80207ba:	4b0b      	ldr	r3, [pc, #44]	; (80207e8 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x248>)
 80207bc:	4a0b      	ldr	r2, [pc, #44]	; (80207ec <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x24c>)
 80207be:	217c      	movs	r1, #124	; 0x7c
 80207c0:	480b      	ldr	r0, [pc, #44]	; (80207f0 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x250>)
 80207c2:	f008 fc7b 	bl	80290bc <__assert_func>
 80207c6:	4b0b      	ldr	r3, [pc, #44]	; (80207f4 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x254>)
 80207c8:	4a0b      	ldr	r2, [pc, #44]	; (80207f8 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x258>)
 80207ca:	f240 314f 	movw	r1, #847	; 0x34f
 80207ce:	480b      	ldr	r0, [pc, #44]	; (80207fc <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x25c>)
 80207d0:	f008 fc74 	bl	80290bc <__assert_func>
 80207d4:	201979e0 	.word	0x201979e0
 80207d8:	20197c18 	.word	0x20197c18
 80207dc:	08000504 	.word	0x08000504
 80207e0:	3d800000 	.word	0x3d800000
 80207e4:	201979f0 	.word	0x201979f0
 80207e8:	0802bf28 	.word	0x0802bf28
 80207ec:	0802c730 	.word	0x0802c730
 80207f0:	0802bf50 	.word	0x0802bf50
 80207f4:	0802be20 	.word	0x0802be20
 80207f8:	0802c8e8 	.word	0x0802c8e8
 80207fc:	0802bfcc 	.word	0x0802bfcc

08020800 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8020800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020804:	4680      	mov	r8, r0
 8020806:	460f      	mov	r7, r1
 8020808:	4614      	mov	r4, r2
 802080a:	461e      	mov	r6, r3
 802080c:	4db2      	ldr	r5, [pc, #712]	; (8020ad8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2d8>)
 802080e:	e8d5 3f8f 	ldab	r3, [r5]
 8020812:	07da      	lsls	r2, r3, #31
 8020814:	f140 823a 	bpl.w	8020c8c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x48c>
 8020818:	4db0      	ldr	r5, [pc, #704]	; (8020adc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2dc>)
 802081a:	e8d5 3f8f 	ldab	r3, [r5]
 802081e:	07db      	lsls	r3, r3, #31
 8020820:	f140 8225 	bpl.w	8020c6e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46e>
 8020824:	4dae      	ldr	r5, [pc, #696]	; (8020ae0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2e0>)
 8020826:	e8d5 3f8f 	ldab	r3, [r5]
 802082a:	07d8      	lsls	r0, r3, #31
 802082c:	f140 8210 	bpl.w	8020c50 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x450>
 8020830:	4dac      	ldr	r5, [pc, #688]	; (8020ae4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2e4>)
 8020832:	e8d5 3f8f 	ldab	r3, [r5]
 8020836:	07d9      	lsls	r1, r3, #31
 8020838:	f140 81fb 	bpl.w	8020c32 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x432>
 802083c:	4daa      	ldr	r5, [pc, #680]	; (8020ae8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2e8>)
 802083e:	e8d5 3f8f 	ldab	r3, [r5]
 8020842:	07da      	lsls	r2, r3, #31
 8020844:	f140 81e6 	bpl.w	8020c14 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x414>
 8020848:	4da8      	ldr	r5, [pc, #672]	; (8020aec <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2ec>)
 802084a:	e8d5 3f8f 	ldab	r3, [r5]
 802084e:	07db      	lsls	r3, r3, #31
 8020850:	f140 81d1 	bpl.w	8020bf6 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3f6>
 8020854:	4da6      	ldr	r5, [pc, #664]	; (8020af0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2f0>)
 8020856:	e8d5 3f8f 	ldab	r3, [r5]
 802085a:	07d8      	lsls	r0, r3, #31
 802085c:	f140 81bc 	bpl.w	8020bd8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3d8>
 8020860:	4da4      	ldr	r5, [pc, #656]	; (8020af4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2f4>)
 8020862:	e8d5 3f8f 	ldab	r3, [r5]
 8020866:	07d9      	lsls	r1, r3, #31
 8020868:	f140 81a7 	bpl.w	8020bba <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3ba>
 802086c:	4da2      	ldr	r5, [pc, #648]	; (8020af8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2f8>)
 802086e:	e8d5 3f8f 	ldab	r3, [r5]
 8020872:	07da      	lsls	r2, r3, #31
 8020874:	f140 8192 	bpl.w	8020b9c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x39c>
 8020878:	4da0      	ldr	r5, [pc, #640]	; (8020afc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2fc>)
 802087a:	e8d5 3f8f 	ldab	r3, [r5]
 802087e:	07db      	lsls	r3, r3, #31
 8020880:	f140 811a 	bpl.w	8020ab8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2b8>
 8020884:	4d9e      	ldr	r5, [pc, #632]	; (8020b00 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x300>)
 8020886:	e8d5 3f8f 	ldab	r3, [r5]
 802088a:	07d8      	lsls	r0, r3, #31
 802088c:	f140 8105 	bpl.w	8020a9a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x29a>
 8020890:	4d9c      	ldr	r5, [pc, #624]	; (8020b04 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x304>)
 8020892:	e8d5 3f8f 	ldab	r3, [r5]
 8020896:	07d9      	lsls	r1, r3, #31
 8020898:	f140 80f0 	bpl.w	8020a7c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x27c>
 802089c:	4d9a      	ldr	r5, [pc, #616]	; (8020b08 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x308>)
 802089e:	e8d5 3f8f 	ldab	r3, [r5]
 80208a2:	07da      	lsls	r2, r3, #31
 80208a4:	f140 80db 	bpl.w	8020a5e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x25e>
 80208a8:	4d98      	ldr	r5, [pc, #608]	; (8020b0c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x30c>)
 80208aa:	e8d5 3f8f 	ldab	r3, [r5]
 80208ae:	07db      	lsls	r3, r3, #31
 80208b0:	f140 80c6 	bpl.w	8020a40 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x240>
 80208b4:	4d96      	ldr	r5, [pc, #600]	; (8020b10 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x310>)
 80208b6:	e8d5 3f8f 	ldab	r3, [r5]
 80208ba:	07d8      	lsls	r0, r3, #31
 80208bc:	f140 80b1 	bpl.w	8020a22 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x222>
 80208c0:	4d94      	ldr	r5, [pc, #592]	; (8020b14 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x314>)
 80208c2:	e8d5 3f8f 	ldab	r3, [r5]
 80208c6:	07d9      	lsls	r1, r3, #31
 80208c8:	f140 809c 	bpl.w	8020a04 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x204>
 80208cc:	4d92      	ldr	r5, [pc, #584]	; (8020b18 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x318>)
 80208ce:	e8d5 3f8f 	ldab	r3, [r5]
 80208d2:	07da      	lsls	r2, r3, #31
 80208d4:	f140 8087 	bpl.w	80209e6 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e6>
 80208d8:	4d90      	ldr	r5, [pc, #576]	; (8020b1c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x31c>)
 80208da:	e8d5 3f8f 	ldab	r3, [r5]
 80208de:	07db      	lsls	r3, r3, #31
 80208e0:	d573      	bpl.n	80209ca <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1ca>
 80208e2:	4d8f      	ldr	r5, [pc, #572]	; (8020b20 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x320>)
 80208e4:	e8d5 3f8f 	ldab	r3, [r5]
 80208e8:	07d8      	lsls	r0, r3, #31
 80208ea:	d560      	bpl.n	80209ae <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1ae>
 80208ec:	4d8d      	ldr	r5, [pc, #564]	; (8020b24 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x324>)
 80208ee:	e8d5 3f8f 	ldab	r3, [r5]
 80208f2:	07d9      	lsls	r1, r3, #31
 80208f4:	d54d      	bpl.n	8020992 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x192>
 80208f6:	4d8c      	ldr	r5, [pc, #560]	; (8020b28 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x328>)
 80208f8:	e8d5 3f8f 	ldab	r3, [r5]
 80208fc:	07da      	lsls	r2, r3, #31
 80208fe:	d53a      	bpl.n	8020976 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 8020900:	4d8a      	ldr	r5, [pc, #552]	; (8020b2c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x32c>)
 8020902:	e8d5 3f8f 	ldab	r3, [r5]
 8020906:	07db      	lsls	r3, r3, #31
 8020908:	d517      	bpl.n	802093a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 802090a:	f898 3008 	ldrb.w	r3, [r8, #8]
 802090e:	2b01      	cmp	r3, #1
 8020910:	d024      	beq.n	802095c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15c>
 8020912:	f0c0 81ca 	bcc.w	8020caa <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4aa>
 8020916:	2b02      	cmp	r3, #2
 8020918:	d002      	beq.n	8020920 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 802091a:	2000      	movs	r0, #0
 802091c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020920:	2eff      	cmp	r6, #255	; 0xff
 8020922:	f1a4 042c 	sub.w	r4, r4, #44	; 0x2c
 8020926:	f000 81cb 	beq.w	8020cc0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c0>
 802092a:	2c03      	cmp	r4, #3
 802092c:	d8f5      	bhi.n	802091a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 802092e:	e8df f014 	tbh	[pc, r4, lsl #1]
 8020932:	01ff      	.short	0x01ff
 8020934:	01e701ee 	.word	0x01e701ee
 8020938:	01e0      	.short	0x01e0
 802093a:	4628      	mov	r0, r5
 802093c:	f008 fb93 	bl	8029066 <__cxa_guard_acquire>
 8020940:	2800      	cmp	r0, #0
 8020942:	d0e2      	beq.n	802090a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10a>
 8020944:	4628      	mov	r0, r5
 8020946:	f008 fb9a 	bl	802907e <__cxa_guard_release>
 802094a:	4a79      	ldr	r2, [pc, #484]	; (8020b30 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 802094c:	4979      	ldr	r1, [pc, #484]	; (8020b34 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x334>)
 802094e:	487a      	ldr	r0, [pc, #488]	; (8020b38 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x338>)
 8020950:	f008 fb82 	bl	8029058 <__aeabi_atexit>
 8020954:	f898 3008 	ldrb.w	r3, [r8, #8]
 8020958:	2b01      	cmp	r3, #1
 802095a:	d1da      	bne.n	8020912 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x112>
 802095c:	2eff      	cmp	r6, #255	; 0xff
 802095e:	f1a4 042c 	sub.w	r4, r4, #44	; 0x2c
 8020962:	f000 81b6 	beq.w	8020cd2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4d2>
 8020966:	2c03      	cmp	r4, #3
 8020968:	d8d7      	bhi.n	802091a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 802096a:	e8df f014 	tbh	[pc, r4, lsl #1]
 802096e:	0233      	.short	0x0233
 8020970:	021b0222 	.word	0x021b0222
 8020974:	0214      	.short	0x0214
 8020976:	4628      	mov	r0, r5
 8020978:	f008 fb75 	bl	8029066 <__cxa_guard_acquire>
 802097c:	2800      	cmp	r0, #0
 802097e:	d0bf      	beq.n	8020900 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8020980:	4628      	mov	r0, r5
 8020982:	f008 fb7c 	bl	802907e <__cxa_guard_release>
 8020986:	4a6a      	ldr	r2, [pc, #424]	; (8020b30 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 8020988:	496c      	ldr	r1, [pc, #432]	; (8020b3c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x33c>)
 802098a:	486d      	ldr	r0, [pc, #436]	; (8020b40 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x340>)
 802098c:	f008 fb64 	bl	8029058 <__aeabi_atexit>
 8020990:	e7b6      	b.n	8020900 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8020992:	4628      	mov	r0, r5
 8020994:	f008 fb67 	bl	8029066 <__cxa_guard_acquire>
 8020998:	2800      	cmp	r0, #0
 802099a:	d0ac      	beq.n	80208f6 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf6>
 802099c:	4628      	mov	r0, r5
 802099e:	f008 fb6e 	bl	802907e <__cxa_guard_release>
 80209a2:	4a63      	ldr	r2, [pc, #396]	; (8020b30 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 80209a4:	4967      	ldr	r1, [pc, #412]	; (8020b44 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x344>)
 80209a6:	4868      	ldr	r0, [pc, #416]	; (8020b48 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x348>)
 80209a8:	f008 fb56 	bl	8029058 <__aeabi_atexit>
 80209ac:	e7a3      	b.n	80208f6 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf6>
 80209ae:	4628      	mov	r0, r5
 80209b0:	f008 fb59 	bl	8029066 <__cxa_guard_acquire>
 80209b4:	2800      	cmp	r0, #0
 80209b6:	d099      	beq.n	80208ec <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 80209b8:	4628      	mov	r0, r5
 80209ba:	f008 fb60 	bl	802907e <__cxa_guard_release>
 80209be:	4a5c      	ldr	r2, [pc, #368]	; (8020b30 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 80209c0:	4962      	ldr	r1, [pc, #392]	; (8020b4c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x34c>)
 80209c2:	4863      	ldr	r0, [pc, #396]	; (8020b50 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x350>)
 80209c4:	f008 fb48 	bl	8029058 <__aeabi_atexit>
 80209c8:	e790      	b.n	80208ec <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 80209ca:	4628      	mov	r0, r5
 80209cc:	f008 fb4b 	bl	8029066 <__cxa_guard_acquire>
 80209d0:	2800      	cmp	r0, #0
 80209d2:	d086      	beq.n	80208e2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 80209d4:	4628      	mov	r0, r5
 80209d6:	f008 fb52 	bl	802907e <__cxa_guard_release>
 80209da:	4a55      	ldr	r2, [pc, #340]	; (8020b30 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 80209dc:	495d      	ldr	r1, [pc, #372]	; (8020b54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x354>)
 80209de:	485e      	ldr	r0, [pc, #376]	; (8020b58 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x358>)
 80209e0:	f008 fb3a 	bl	8029058 <__aeabi_atexit>
 80209e4:	e77d      	b.n	80208e2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 80209e6:	4628      	mov	r0, r5
 80209e8:	f008 fb3d 	bl	8029066 <__cxa_guard_acquire>
 80209ec:	2800      	cmp	r0, #0
 80209ee:	f43f af73 	beq.w	80208d8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 80209f2:	4628      	mov	r0, r5
 80209f4:	f008 fb43 	bl	802907e <__cxa_guard_release>
 80209f8:	4a4d      	ldr	r2, [pc, #308]	; (8020b30 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 80209fa:	4958      	ldr	r1, [pc, #352]	; (8020b5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x35c>)
 80209fc:	4858      	ldr	r0, [pc, #352]	; (8020b60 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x360>)
 80209fe:	f008 fb2b 	bl	8029058 <__aeabi_atexit>
 8020a02:	e769      	b.n	80208d8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 8020a04:	4628      	mov	r0, r5
 8020a06:	f008 fb2e 	bl	8029066 <__cxa_guard_acquire>
 8020a0a:	2800      	cmp	r0, #0
 8020a0c:	f43f af5e 	beq.w	80208cc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 8020a10:	4628      	mov	r0, r5
 8020a12:	f008 fb34 	bl	802907e <__cxa_guard_release>
 8020a16:	4a46      	ldr	r2, [pc, #280]	; (8020b30 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 8020a18:	4952      	ldr	r1, [pc, #328]	; (8020b64 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x364>)
 8020a1a:	4853      	ldr	r0, [pc, #332]	; (8020b68 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x368>)
 8020a1c:	f008 fb1c 	bl	8029058 <__aeabi_atexit>
 8020a20:	e754      	b.n	80208cc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 8020a22:	4628      	mov	r0, r5
 8020a24:	f008 fb1f 	bl	8029066 <__cxa_guard_acquire>
 8020a28:	2800      	cmp	r0, #0
 8020a2a:	f43f af49 	beq.w	80208c0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 8020a2e:	4628      	mov	r0, r5
 8020a30:	f008 fb25 	bl	802907e <__cxa_guard_release>
 8020a34:	4a3e      	ldr	r2, [pc, #248]	; (8020b30 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 8020a36:	494d      	ldr	r1, [pc, #308]	; (8020b6c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x36c>)
 8020a38:	484d      	ldr	r0, [pc, #308]	; (8020b70 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x370>)
 8020a3a:	f008 fb0d 	bl	8029058 <__aeabi_atexit>
 8020a3e:	e73f      	b.n	80208c0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 8020a40:	4628      	mov	r0, r5
 8020a42:	f008 fb10 	bl	8029066 <__cxa_guard_acquire>
 8020a46:	2800      	cmp	r0, #0
 8020a48:	f43f af34 	beq.w	80208b4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb4>
 8020a4c:	4628      	mov	r0, r5
 8020a4e:	f008 fb16 	bl	802907e <__cxa_guard_release>
 8020a52:	4a37      	ldr	r2, [pc, #220]	; (8020b30 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 8020a54:	4947      	ldr	r1, [pc, #284]	; (8020b74 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x374>)
 8020a56:	4848      	ldr	r0, [pc, #288]	; (8020b78 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x378>)
 8020a58:	f008 fafe 	bl	8029058 <__aeabi_atexit>
 8020a5c:	e72a      	b.n	80208b4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb4>
 8020a5e:	4628      	mov	r0, r5
 8020a60:	f008 fb01 	bl	8029066 <__cxa_guard_acquire>
 8020a64:	2800      	cmp	r0, #0
 8020a66:	f43f af1f 	beq.w	80208a8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 8020a6a:	4628      	mov	r0, r5
 8020a6c:	f008 fb07 	bl	802907e <__cxa_guard_release>
 8020a70:	4a2f      	ldr	r2, [pc, #188]	; (8020b30 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 8020a72:	4942      	ldr	r1, [pc, #264]	; (8020b7c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x37c>)
 8020a74:	4842      	ldr	r0, [pc, #264]	; (8020b80 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x380>)
 8020a76:	f008 faef 	bl	8029058 <__aeabi_atexit>
 8020a7a:	e715      	b.n	80208a8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 8020a7c:	4628      	mov	r0, r5
 8020a7e:	f008 faf2 	bl	8029066 <__cxa_guard_acquire>
 8020a82:	2800      	cmp	r0, #0
 8020a84:	f43f af0a 	beq.w	802089c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9c>
 8020a88:	4628      	mov	r0, r5
 8020a8a:	f008 faf8 	bl	802907e <__cxa_guard_release>
 8020a8e:	4a28      	ldr	r2, [pc, #160]	; (8020b30 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 8020a90:	493c      	ldr	r1, [pc, #240]	; (8020b84 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x384>)
 8020a92:	483d      	ldr	r0, [pc, #244]	; (8020b88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x388>)
 8020a94:	f008 fae0 	bl	8029058 <__aeabi_atexit>
 8020a98:	e700      	b.n	802089c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9c>
 8020a9a:	4628      	mov	r0, r5
 8020a9c:	f008 fae3 	bl	8029066 <__cxa_guard_acquire>
 8020aa0:	2800      	cmp	r0, #0
 8020aa2:	f43f aef5 	beq.w	8020890 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x90>
 8020aa6:	4628      	mov	r0, r5
 8020aa8:	f008 fae9 	bl	802907e <__cxa_guard_release>
 8020aac:	4a20      	ldr	r2, [pc, #128]	; (8020b30 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 8020aae:	4937      	ldr	r1, [pc, #220]	; (8020b8c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x38c>)
 8020ab0:	4837      	ldr	r0, [pc, #220]	; (8020b90 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x390>)
 8020ab2:	f008 fad1 	bl	8029058 <__aeabi_atexit>
 8020ab6:	e6eb      	b.n	8020890 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x90>
 8020ab8:	4628      	mov	r0, r5
 8020aba:	f008 fad4 	bl	8029066 <__cxa_guard_acquire>
 8020abe:	2800      	cmp	r0, #0
 8020ac0:	f43f aee0 	beq.w	8020884 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 8020ac4:	4628      	mov	r0, r5
 8020ac6:	f008 fada 	bl	802907e <__cxa_guard_release>
 8020aca:	4a19      	ldr	r2, [pc, #100]	; (8020b30 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 8020acc:	4931      	ldr	r1, [pc, #196]	; (8020b94 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x394>)
 8020ace:	4832      	ldr	r0, [pc, #200]	; (8020b98 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x398>)
 8020ad0:	f008 fac2 	bl	8029058 <__aeabi_atexit>
 8020ad4:	e6d6      	b.n	8020884 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 8020ad6:	bf00      	nop
 8020ad8:	20197c40 	.word	0x20197c40
 8020adc:	20197c54 	.word	0x20197c54
 8020ae0:	20197c1c 	.word	0x20197c1c
 8020ae4:	20197c28 	.word	0x20197c28
 8020ae8:	20197c60 	.word	0x20197c60
 8020aec:	20197c6c 	.word	0x20197c6c
 8020af0:	20197c34 	.word	0x20197c34
 8020af4:	20197c4c 	.word	0x20197c4c
 8020af8:	20197c44 	.word	0x20197c44
 8020afc:	20197c58 	.word	0x20197c58
 8020b00:	20197c20 	.word	0x20197c20
 8020b04:	20197c2c 	.word	0x20197c2c
 8020b08:	20197c64 	.word	0x20197c64
 8020b0c:	20197c70 	.word	0x20197c70
 8020b10:	20197c38 	.word	0x20197c38
 8020b14:	20197c50 	.word	0x20197c50
 8020b18:	20197c48 	.word	0x20197c48
 8020b1c:	20197c5c 	.word	0x20197c5c
 8020b20:	20197c24 	.word	0x20197c24
 8020b24:	20197c30 	.word	0x20197c30
 8020b28:	20197c68 	.word	0x20197c68
 8020b2c:	20197c3c 	.word	0x20197c3c
 8020b30:	20000000 	.word	0x20000000
 8020b34:	0801fe69 	.word	0x0801fe69
 8020b38:	20000088 	.word	0x20000088
 8020b3c:	0801fe65 	.word	0x0801fe65
 8020b40:	200000b4 	.word	0x200000b4
 8020b44:	0801fe75 	.word	0x0801fe75
 8020b48:	2000007c 	.word	0x2000007c
 8020b4c:	0801fe79 	.word	0x0801fe79
 8020b50:	20000070 	.word	0x20000070
 8020b54:	0801fe6d 	.word	0x0801fe6d
 8020b58:	200000a8 	.word	0x200000a8
 8020b5c:	0801fe71 	.word	0x0801fe71
 8020b60:	20000094 	.word	0x20000094
 8020b64:	0801fe85 	.word	0x0801fe85
 8020b68:	2000009c 	.word	0x2000009c
 8020b6c:	0801fe89 	.word	0x0801fe89
 8020b70:	20000084 	.word	0x20000084
 8020b74:	0801fe7d 	.word	0x0801fe7d
 8020b78:	200000bc 	.word	0x200000bc
 8020b7c:	0801fe81 	.word	0x0801fe81
 8020b80:	200000b0 	.word	0x200000b0
 8020b84:	0801fe95 	.word	0x0801fe95
 8020b88:	20000078 	.word	0x20000078
 8020b8c:	0801fe99 	.word	0x0801fe99
 8020b90:	2000006c 	.word	0x2000006c
 8020b94:	0801fe8d 	.word	0x0801fe8d
 8020b98:	200000a4 	.word	0x200000a4
 8020b9c:	4628      	mov	r0, r5
 8020b9e:	f008 fa62 	bl	8029066 <__cxa_guard_acquire>
 8020ba2:	2800      	cmp	r0, #0
 8020ba4:	f43f ae68 	beq.w	8020878 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78>
 8020ba8:	4628      	mov	r0, r5
 8020baa:	f008 fa68 	bl	802907e <__cxa_guard_release>
 8020bae:	4aa6      	ldr	r2, [pc, #664]	; (8020e48 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 8020bb0:	49a6      	ldr	r1, [pc, #664]	; (8020e4c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64c>)
 8020bb2:	48a7      	ldr	r0, [pc, #668]	; (8020e50 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x650>)
 8020bb4:	f008 fa50 	bl	8029058 <__aeabi_atexit>
 8020bb8:	e65e      	b.n	8020878 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78>
 8020bba:	4628      	mov	r0, r5
 8020bbc:	f008 fa53 	bl	8029066 <__cxa_guard_acquire>
 8020bc0:	2800      	cmp	r0, #0
 8020bc2:	f43f ae53 	beq.w	802086c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8020bc6:	4628      	mov	r0, r5
 8020bc8:	f008 fa59 	bl	802907e <__cxa_guard_release>
 8020bcc:	4a9e      	ldr	r2, [pc, #632]	; (8020e48 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 8020bce:	49a1      	ldr	r1, [pc, #644]	; (8020e54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x654>)
 8020bd0:	48a1      	ldr	r0, [pc, #644]	; (8020e58 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x658>)
 8020bd2:	f008 fa41 	bl	8029058 <__aeabi_atexit>
 8020bd6:	e649      	b.n	802086c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8020bd8:	4628      	mov	r0, r5
 8020bda:	f008 fa44 	bl	8029066 <__cxa_guard_acquire>
 8020bde:	2800      	cmp	r0, #0
 8020be0:	f43f ae3e 	beq.w	8020860 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 8020be4:	4628      	mov	r0, r5
 8020be6:	f008 fa4a 	bl	802907e <__cxa_guard_release>
 8020bea:	4a97      	ldr	r2, [pc, #604]	; (8020e48 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 8020bec:	499b      	ldr	r1, [pc, #620]	; (8020e5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x65c>)
 8020bee:	489c      	ldr	r0, [pc, #624]	; (8020e60 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x660>)
 8020bf0:	f008 fa32 	bl	8029058 <__aeabi_atexit>
 8020bf4:	e634      	b.n	8020860 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 8020bf6:	4628      	mov	r0, r5
 8020bf8:	f008 fa35 	bl	8029066 <__cxa_guard_acquire>
 8020bfc:	2800      	cmp	r0, #0
 8020bfe:	f43f ae29 	beq.w	8020854 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 8020c02:	4628      	mov	r0, r5
 8020c04:	f008 fa3b 	bl	802907e <__cxa_guard_release>
 8020c08:	4a8f      	ldr	r2, [pc, #572]	; (8020e48 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 8020c0a:	4996      	ldr	r1, [pc, #600]	; (8020e64 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x664>)
 8020c0c:	4896      	ldr	r0, [pc, #600]	; (8020e68 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x668>)
 8020c0e:	f008 fa23 	bl	8029058 <__aeabi_atexit>
 8020c12:	e61f      	b.n	8020854 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 8020c14:	4628      	mov	r0, r5
 8020c16:	f008 fa26 	bl	8029066 <__cxa_guard_acquire>
 8020c1a:	2800      	cmp	r0, #0
 8020c1c:	f43f ae14 	beq.w	8020848 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x48>
 8020c20:	4628      	mov	r0, r5
 8020c22:	f008 fa2c 	bl	802907e <__cxa_guard_release>
 8020c26:	4a88      	ldr	r2, [pc, #544]	; (8020e48 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 8020c28:	4990      	ldr	r1, [pc, #576]	; (8020e6c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66c>)
 8020c2a:	4891      	ldr	r0, [pc, #580]	; (8020e70 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x670>)
 8020c2c:	f008 fa14 	bl	8029058 <__aeabi_atexit>
 8020c30:	e60a      	b.n	8020848 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x48>
 8020c32:	4628      	mov	r0, r5
 8020c34:	f008 fa17 	bl	8029066 <__cxa_guard_acquire>
 8020c38:	2800      	cmp	r0, #0
 8020c3a:	f43f adff 	beq.w	802083c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3c>
 8020c3e:	4628      	mov	r0, r5
 8020c40:	f008 fa1d 	bl	802907e <__cxa_guard_release>
 8020c44:	4a80      	ldr	r2, [pc, #512]	; (8020e48 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 8020c46:	498b      	ldr	r1, [pc, #556]	; (8020e74 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x674>)
 8020c48:	488b      	ldr	r0, [pc, #556]	; (8020e78 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x678>)
 8020c4a:	f008 fa05 	bl	8029058 <__aeabi_atexit>
 8020c4e:	e5f5      	b.n	802083c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3c>
 8020c50:	4628      	mov	r0, r5
 8020c52:	f008 fa08 	bl	8029066 <__cxa_guard_acquire>
 8020c56:	2800      	cmp	r0, #0
 8020c58:	f43f adea 	beq.w	8020830 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x30>
 8020c5c:	4628      	mov	r0, r5
 8020c5e:	f008 fa0e 	bl	802907e <__cxa_guard_release>
 8020c62:	4a79      	ldr	r2, [pc, #484]	; (8020e48 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 8020c64:	4985      	ldr	r1, [pc, #532]	; (8020e7c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x67c>)
 8020c66:	4886      	ldr	r0, [pc, #536]	; (8020e80 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x680>)
 8020c68:	f008 f9f6 	bl	8029058 <__aeabi_atexit>
 8020c6c:	e5e0      	b.n	8020830 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x30>
 8020c6e:	4628      	mov	r0, r5
 8020c70:	f008 f9f9 	bl	8029066 <__cxa_guard_acquire>
 8020c74:	2800      	cmp	r0, #0
 8020c76:	f43f add5 	beq.w	8020824 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8020c7a:	4628      	mov	r0, r5
 8020c7c:	f008 f9ff 	bl	802907e <__cxa_guard_release>
 8020c80:	4a71      	ldr	r2, [pc, #452]	; (8020e48 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 8020c82:	4980      	ldr	r1, [pc, #512]	; (8020e84 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x684>)
 8020c84:	4880      	ldr	r0, [pc, #512]	; (8020e88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x688>)
 8020c86:	f008 f9e7 	bl	8029058 <__aeabi_atexit>
 8020c8a:	e5cb      	b.n	8020824 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8020c8c:	4628      	mov	r0, r5
 8020c8e:	f008 f9ea 	bl	8029066 <__cxa_guard_acquire>
 8020c92:	2800      	cmp	r0, #0
 8020c94:	f43f adc0 	beq.w	8020818 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8020c98:	4628      	mov	r0, r5
 8020c9a:	f008 f9f0 	bl	802907e <__cxa_guard_release>
 8020c9e:	4a6a      	ldr	r2, [pc, #424]	; (8020e48 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 8020ca0:	497a      	ldr	r1, [pc, #488]	; (8020e8c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x68c>)
 8020ca2:	487b      	ldr	r0, [pc, #492]	; (8020e90 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x690>)
 8020ca4:	f008 f9d8 	bl	8029058 <__aeabi_atexit>
 8020ca8:	e5b6      	b.n	8020818 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8020caa:	2eff      	cmp	r6, #255	; 0xff
 8020cac:	f1a4 042c 	sub.w	r4, r4, #44	; 0x2c
 8020cb0:	d018      	beq.n	8020ce4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e4>
 8020cb2:	2c03      	cmp	r4, #3
 8020cb4:	f63f ae31 	bhi.w	802091a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 8020cb8:	e8df f004 	tbb	[pc, r4]
 8020cbc:	4b525963 	.word	0x4b525963
 8020cc0:	2c03      	cmp	r4, #3
 8020cc2:	f63f ae2a 	bhi.w	802091a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 8020cc6:	e8df f014 	tbh	[pc, r4, lsl #1]
 8020cca:	012d      	.short	0x012d
 8020ccc:	001b011e 	.word	0x001b011e
 8020cd0:	0014      	.short	0x0014
 8020cd2:	2c03      	cmp	r4, #3
 8020cd4:	f63f ae21 	bhi.w	802091a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 8020cd8:	e8df f014 	tbh	[pc, r4, lsl #1]
 8020cdc:	00f000ff 	.word	0x00f000ff
 8020ce0:	00af010e 	.word	0x00af010e
 8020ce4:	2c03      	cmp	r4, #3
 8020ce6:	f63f ae18 	bhi.w	802091a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 8020cea:	e8df f004 	tbb	[pc, r4]
 8020cee:	929c      	.short	0x929c
 8020cf0:	848b      	.short	0x848b
 8020cf2:	687b      	ldr	r3, [r7, #4]
 8020cf4:	4867      	ldr	r0, [pc, #412]	; (8020e94 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x694>)
 8020cf6:	781b      	ldrb	r3, [r3, #0]
 8020cf8:	2b00      	cmp	r3, #0
 8020cfa:	bf18      	it	ne
 8020cfc:	2000      	movne	r0, #0
 8020cfe:	e60d      	b.n	802091c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020d00:	687b      	ldr	r3, [r7, #4]
 8020d02:	4865      	ldr	r0, [pc, #404]	; (8020e98 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x698>)
 8020d04:	781b      	ldrb	r3, [r3, #0]
 8020d06:	2b00      	cmp	r3, #0
 8020d08:	bf18      	it	ne
 8020d0a:	2000      	movne	r0, #0
 8020d0c:	e606      	b.n	802091c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020d0e:	687b      	ldr	r3, [r7, #4]
 8020d10:	781b      	ldrb	r3, [r3, #0]
 8020d12:	2b01      	cmp	r3, #1
 8020d14:	f000 811b 	beq.w	8020f4e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x74e>
 8020d18:	f0c0 8113 	bcc.w	8020f42 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x742>
 8020d1c:	2b02      	cmp	r3, #2
 8020d1e:	f47f adfc 	bne.w	802091a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 8020d22:	4b5e      	ldr	r3, [pc, #376]	; (8020e9c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x69c>)
 8020d24:	4a5e      	ldr	r2, [pc, #376]	; (8020ea0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a0>)
 8020d26:	f240 616e 	movw	r1, #1646	; 0x66e
 8020d2a:	485e      	ldr	r0, [pc, #376]	; (8020ea4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a4>)
 8020d2c:	f008 f9c6 	bl	80290bc <__assert_func>
 8020d30:	687b      	ldr	r3, [r7, #4]
 8020d32:	781b      	ldrb	r3, [r3, #0]
 8020d34:	2b01      	cmp	r3, #1
 8020d36:	f000 8108 	beq.w	8020f4a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x74a>
 8020d3a:	f0c0 8104 	bcc.w	8020f46 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x746>
 8020d3e:	2b02      	cmp	r3, #2
 8020d40:	f47f adeb 	bne.w	802091a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 8020d44:	4b55      	ldr	r3, [pc, #340]	; (8020e9c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x69c>)
 8020d46:	4a56      	ldr	r2, [pc, #344]	; (8020ea0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a0>)
 8020d48:	f240 617a 	movw	r1, #1658	; 0x67a
 8020d4c:	4855      	ldr	r0, [pc, #340]	; (8020ea4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a4>)
 8020d4e:	f008 f9b5 	bl	80290bc <__assert_func>
 8020d52:	687b      	ldr	r3, [r7, #4]
 8020d54:	4846      	ldr	r0, [pc, #280]	; (8020e70 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x670>)
 8020d56:	781b      	ldrb	r3, [r3, #0]
 8020d58:	2b00      	cmp	r3, #0
 8020d5a:	bf18      	it	ne
 8020d5c:	2000      	movne	r0, #0
 8020d5e:	e5dd      	b.n	802091c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020d60:	687b      	ldr	r3, [r7, #4]
 8020d62:	483f      	ldr	r0, [pc, #252]	; (8020e60 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x660>)
 8020d64:	781b      	ldrb	r3, [r3, #0]
 8020d66:	2b00      	cmp	r3, #0
 8020d68:	bf18      	it	ne
 8020d6a:	2000      	movne	r0, #0
 8020d6c:	e5d6      	b.n	802091c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020d6e:	687b      	ldr	r3, [r7, #4]
 8020d70:	781b      	ldrb	r3, [r3, #0]
 8020d72:	2b00      	cmp	r3, #0
 8020d74:	f000 80ed 	beq.w	8020f52 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x752>
 8020d78:	2b01      	cmp	r3, #1
 8020d7a:	4845      	ldr	r0, [pc, #276]	; (8020e90 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x690>)
 8020d7c:	bf18      	it	ne
 8020d7e:	2000      	movne	r0, #0
 8020d80:	e5cc      	b.n	802091c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020d82:	687b      	ldr	r3, [r7, #4]
 8020d84:	781b      	ldrb	r3, [r3, #0]
 8020d86:	2b00      	cmp	r3, #0
 8020d88:	f000 80e5 	beq.w	8020f56 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x756>
 8020d8c:	2b01      	cmp	r3, #1
 8020d8e:	483c      	ldr	r0, [pc, #240]	; (8020e80 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x680>)
 8020d90:	bf18      	it	ne
 8020d92:	2000      	movne	r0, #0
 8020d94:	e5c2      	b.n	802091c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020d96:	687b      	ldr	r3, [r7, #4]
 8020d98:	4843      	ldr	r0, [pc, #268]	; (8020ea8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a8>)
 8020d9a:	781b      	ldrb	r3, [r3, #0]
 8020d9c:	2b00      	cmp	r3, #0
 8020d9e:	bf18      	it	ne
 8020da0:	2000      	movne	r0, #0
 8020da2:	e5bb      	b.n	802091c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020da4:	687b      	ldr	r3, [r7, #4]
 8020da6:	4841      	ldr	r0, [pc, #260]	; (8020eac <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6ac>)
 8020da8:	781b      	ldrb	r3, [r3, #0]
 8020daa:	2b00      	cmp	r3, #0
 8020dac:	bf18      	it	ne
 8020dae:	2000      	movne	r0, #0
 8020db0:	e5b4      	b.n	802091c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020db2:	687b      	ldr	r3, [r7, #4]
 8020db4:	781b      	ldrb	r3, [r3, #0]
 8020db6:	2b01      	cmp	r3, #1
 8020db8:	f000 80d5 	beq.w	8020f66 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x766>
 8020dbc:	f0c0 80d1 	bcc.w	8020f62 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x762>
 8020dc0:	2b02      	cmp	r3, #2
 8020dc2:	f47f adaa 	bne.w	802091a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 8020dc6:	4b3a      	ldr	r3, [pc, #232]	; (8020eb0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6b0>)
 8020dc8:	4a35      	ldr	r2, [pc, #212]	; (8020ea0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a0>)
 8020dca:	f240 6113 	movw	r1, #1555	; 0x613
 8020dce:	4835      	ldr	r0, [pc, #212]	; (8020ea4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a4>)
 8020dd0:	f008 f974 	bl	80290bc <__assert_func>
 8020dd4:	687b      	ldr	r3, [r7, #4]
 8020dd6:	781b      	ldrb	r3, [r3, #0]
 8020dd8:	2b01      	cmp	r3, #1
 8020dda:	f000 80c0 	beq.w	8020f5e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x75e>
 8020dde:	f0c0 80bc 	bcc.w	8020f5a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x75a>
 8020de2:	2b02      	cmp	r3, #2
 8020de4:	f47f ad99 	bne.w	802091a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 8020de8:	4b32      	ldr	r3, [pc, #200]	; (8020eb4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6b4>)
 8020dea:	4a2d      	ldr	r2, [pc, #180]	; (8020ea0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a0>)
 8020dec:	f240 611f 	movw	r1, #1567	; 0x61f
 8020df0:	482c      	ldr	r0, [pc, #176]	; (8020ea4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a4>)
 8020df2:	f008 f963 	bl	80290bc <__assert_func>
 8020df6:	687b      	ldr	r3, [r7, #4]
 8020df8:	481b      	ldr	r0, [pc, #108]	; (8020e68 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x668>)
 8020dfa:	781b      	ldrb	r3, [r3, #0]
 8020dfc:	2b00      	cmp	r3, #0
 8020dfe:	bf18      	it	ne
 8020e00:	2000      	movne	r0, #0
 8020e02:	e58b      	b.n	802091c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020e04:	687b      	ldr	r3, [r7, #4]
 8020e06:	4814      	ldr	r0, [pc, #80]	; (8020e58 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x658>)
 8020e08:	781b      	ldrb	r3, [r3, #0]
 8020e0a:	2b00      	cmp	r3, #0
 8020e0c:	bf18      	it	ne
 8020e0e:	2000      	movne	r0, #0
 8020e10:	e584      	b.n	802091c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020e12:	687b      	ldr	r3, [r7, #4]
 8020e14:	781b      	ldrb	r3, [r3, #0]
 8020e16:	2b00      	cmp	r3, #0
 8020e18:	f000 80af 	beq.w	8020f7a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x77a>
 8020e1c:	2b01      	cmp	r3, #1
 8020e1e:	481a      	ldr	r0, [pc, #104]	; (8020e88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x688>)
 8020e20:	bf18      	it	ne
 8020e22:	2000      	movne	r0, #0
 8020e24:	e57a      	b.n	802091c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020e26:	687b      	ldr	r3, [r7, #4]
 8020e28:	781b      	ldrb	r3, [r3, #0]
 8020e2a:	2b00      	cmp	r3, #0
 8020e2c:	f000 80a7 	beq.w	8020f7e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x77e>
 8020e30:	2b01      	cmp	r3, #1
 8020e32:	4811      	ldr	r0, [pc, #68]	; (8020e78 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x678>)
 8020e34:	bf18      	it	ne
 8020e36:	2000      	movne	r0, #0
 8020e38:	e570      	b.n	802091c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020e3a:	687b      	ldr	r3, [r7, #4]
 8020e3c:	481e      	ldr	r0, [pc, #120]	; (8020eb8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6b8>)
 8020e3e:	781b      	ldrb	r3, [r3, #0]
 8020e40:	2b00      	cmp	r3, #0
 8020e42:	bf18      	it	ne
 8020e44:	2000      	movne	r0, #0
 8020e46:	e569      	b.n	802091c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020e48:	20000000 	.word	0x20000000
 8020e4c:	0801fe91 	.word	0x0801fe91
 8020e50:	20000090 	.word	0x20000090
 8020e54:	0801fea5 	.word	0x0801fea5
 8020e58:	20000098 	.word	0x20000098
 8020e5c:	0801fea9 	.word	0x0801fea9
 8020e60:	20000080 	.word	0x20000080
 8020e64:	0801fe9d 	.word	0x0801fe9d
 8020e68:	200000b8 	.word	0x200000b8
 8020e6c:	0801fea1 	.word	0x0801fea1
 8020e70:	200000ac 	.word	0x200000ac
 8020e74:	0801feb5 	.word	0x0801feb5
 8020e78:	20000074 	.word	0x20000074
 8020e7c:	0801feb9 	.word	0x0801feb9
 8020e80:	20000068 	.word	0x20000068
 8020e84:	0801fead 	.word	0x0801fead
 8020e88:	200000a0 	.word	0x200000a0
 8020e8c:	0801feb1 	.word	0x0801feb1
 8020e90:	2000008c 	.word	0x2000008c
 8020e94:	200000b4 	.word	0x200000b4
 8020e98:	20000088 	.word	0x20000088
 8020e9c:	0802c124 	.word	0x0802c124
 8020ea0:	0802cf04 	.word	0x0802cf04
 8020ea4:	0802bfcc 	.word	0x0802bfcc
 8020ea8:	200000b0 	.word	0x200000b0
 8020eac:	20000084 	.word	0x20000084
 8020eb0:	0802c090 	.word	0x0802c090
 8020eb4:	0802c0d8 	.word	0x0802c0d8
 8020eb8:	200000bc 	.word	0x200000bc
 8020ebc:	687b      	ldr	r3, [r7, #4]
 8020ebe:	781b      	ldrb	r3, [r3, #0]
 8020ec0:	2b01      	cmp	r3, #1
 8020ec2:	d060      	beq.n	8020f86 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x786>
 8020ec4:	d35d      	bcc.n	8020f82 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x782>
 8020ec6:	2b02      	cmp	r3, #2
 8020ec8:	f47f ad27 	bne.w	802091a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 8020ecc:	4b2f      	ldr	r3, [pc, #188]	; (8020f8c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78c>)
 8020ece:	4a30      	ldr	r2, [pc, #192]	; (8020f90 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x790>)
 8020ed0:	f240 613e 	movw	r1, #1598	; 0x63e
 8020ed4:	482f      	ldr	r0, [pc, #188]	; (8020f94 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x794>)
 8020ed6:	f008 f8f1 	bl	80290bc <__assert_func>
 8020eda:	687b      	ldr	r3, [r7, #4]
 8020edc:	781b      	ldrb	r3, [r3, #0]
 8020ede:	2b01      	cmp	r3, #1
 8020ee0:	d049      	beq.n	8020f76 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x776>
 8020ee2:	d346      	bcc.n	8020f72 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x772>
 8020ee4:	2b02      	cmp	r3, #2
 8020ee6:	f47f ad18 	bne.w	802091a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 8020eea:	4b28      	ldr	r3, [pc, #160]	; (8020f8c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78c>)
 8020eec:	4a28      	ldr	r2, [pc, #160]	; (8020f90 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x790>)
 8020eee:	f240 614a 	movw	r1, #1610	; 0x64a
 8020ef2:	4828      	ldr	r0, [pc, #160]	; (8020f94 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x794>)
 8020ef4:	f008 f8e2 	bl	80290bc <__assert_func>
 8020ef8:	687b      	ldr	r3, [r7, #4]
 8020efa:	4827      	ldr	r0, [pc, #156]	; (8020f98 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x798>)
 8020efc:	781b      	ldrb	r3, [r3, #0]
 8020efe:	2b00      	cmp	r3, #0
 8020f00:	bf18      	it	ne
 8020f02:	2000      	movne	r0, #0
 8020f04:	e50a      	b.n	802091c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020f06:	687b      	ldr	r3, [r7, #4]
 8020f08:	781b      	ldrb	r3, [r3, #0]
 8020f0a:	2b01      	cmp	r3, #1
 8020f0c:	d02d      	beq.n	8020f6a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76a>
 8020f0e:	d318      	bcc.n	8020f42 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x742>
 8020f10:	2b02      	cmp	r3, #2
 8020f12:	f47f ad02 	bne.w	802091a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 8020f16:	4b1d      	ldr	r3, [pc, #116]	; (8020f8c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78c>)
 8020f18:	4a1d      	ldr	r2, [pc, #116]	; (8020f90 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x790>)
 8020f1a:	f240 619b 	movw	r1, #1691	; 0x69b
 8020f1e:	481d      	ldr	r0, [pc, #116]	; (8020f94 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x794>)
 8020f20:	f008 f8cc 	bl	80290bc <__assert_func>
 8020f24:	687b      	ldr	r3, [r7, #4]
 8020f26:	781b      	ldrb	r3, [r3, #0]
 8020f28:	2b01      	cmp	r3, #1
 8020f2a:	d020      	beq.n	8020f6e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76e>
 8020f2c:	d30b      	bcc.n	8020f46 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x746>
 8020f2e:	2b02      	cmp	r3, #2
 8020f30:	f47f acf3 	bne.w	802091a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 8020f34:	4b15      	ldr	r3, [pc, #84]	; (8020f8c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78c>)
 8020f36:	4a16      	ldr	r2, [pc, #88]	; (8020f90 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x790>)
 8020f38:	f240 61a7 	movw	r1, #1703	; 0x6a7
 8020f3c:	4815      	ldr	r0, [pc, #84]	; (8020f94 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x794>)
 8020f3e:	f008 f8bd 	bl	80290bc <__assert_func>
 8020f42:	4816      	ldr	r0, [pc, #88]	; (8020f9c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x79c>)
 8020f44:	e4ea      	b.n	802091c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020f46:	4816      	ldr	r0, [pc, #88]	; (8020fa0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a0>)
 8020f48:	e4e8      	b.n	802091c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020f4a:	4816      	ldr	r0, [pc, #88]	; (8020fa4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a4>)
 8020f4c:	e4e6      	b.n	802091c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020f4e:	4816      	ldr	r0, [pc, #88]	; (8020fa8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a8>)
 8020f50:	e4e4      	b.n	802091c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020f52:	4816      	ldr	r0, [pc, #88]	; (8020fac <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7ac>)
 8020f54:	e4e2      	b.n	802091c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020f56:	4816      	ldr	r0, [pc, #88]	; (8020fb0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7b0>)
 8020f58:	e4e0      	b.n	802091c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020f5a:	4816      	ldr	r0, [pc, #88]	; (8020fb4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7b4>)
 8020f5c:	e4de      	b.n	802091c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020f5e:	4816      	ldr	r0, [pc, #88]	; (8020fb8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7b8>)
 8020f60:	e4dc      	b.n	802091c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020f62:	4816      	ldr	r0, [pc, #88]	; (8020fbc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7bc>)
 8020f64:	e4da      	b.n	802091c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020f66:	4816      	ldr	r0, [pc, #88]	; (8020fc0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c0>)
 8020f68:	e4d8      	b.n	802091c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020f6a:	4816      	ldr	r0, [pc, #88]	; (8020fc4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c4>)
 8020f6c:	e4d6      	b.n	802091c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020f6e:	4816      	ldr	r0, [pc, #88]	; (8020fc8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c8>)
 8020f70:	e4d4      	b.n	802091c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020f72:	4809      	ldr	r0, [pc, #36]	; (8020f98 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x798>)
 8020f74:	e4d2      	b.n	802091c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020f76:	4815      	ldr	r0, [pc, #84]	; (8020fcc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7cc>)
 8020f78:	e4d0      	b.n	802091c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020f7a:	4815      	ldr	r0, [pc, #84]	; (8020fd0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7d0>)
 8020f7c:	e4ce      	b.n	802091c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020f7e:	4815      	ldr	r0, [pc, #84]	; (8020fd4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7d4>)
 8020f80:	e4cc      	b.n	802091c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020f82:	4815      	ldr	r0, [pc, #84]	; (8020fd8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7d8>)
 8020f84:	e4ca      	b.n	802091c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020f86:	4815      	ldr	r0, [pc, #84]	; (8020fdc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7dc>)
 8020f88:	e4c8      	b.n	802091c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020f8a:	bf00      	nop
 8020f8c:	0802c0d8 	.word	0x0802c0d8
 8020f90:	0802cf04 	.word	0x0802cf04
 8020f94:	0802bfcc 	.word	0x0802bfcc
 8020f98:	2000009c 	.word	0x2000009c
 8020f9c:	200000b4 	.word	0x200000b4
 8020fa0:	20000088 	.word	0x20000088
 8020fa4:	20000070 	.word	0x20000070
 8020fa8:	20000094 	.word	0x20000094
 8020fac:	200000ac 	.word	0x200000ac
 8020fb0:	20000080 	.word	0x20000080
 8020fb4:	20000084 	.word	0x20000084
 8020fb8:	2000006c 	.word	0x2000006c
 8020fbc:	200000b0 	.word	0x200000b0
 8020fc0:	20000090 	.word	0x20000090
 8020fc4:	200000a8 	.word	0x200000a8
 8020fc8:	2000007c 	.word	0x2000007c
 8020fcc:	20000078 	.word	0x20000078
 8020fd0:	200000b8 	.word	0x200000b8
 8020fd4:	20000098 	.word	0x20000098
 8020fd8:	200000bc 	.word	0x200000bc
 8020fdc:	200000a4 	.word	0x200000a4

08020fe0 <_ZN8touchgfx8LCDGPU2DD0Ev>:
 8020fe0:	b510      	push	{r4, lr}
 8020fe2:	4604      	mov	r4, r0
 8020fe4:	210c      	movs	r1, #12
 8020fe6:	f008 f83c 	bl	8029062 <_ZdlPvj>
 8020fea:	4620      	mov	r0, r4
 8020fec:	bd10      	pop	{r4, pc}
 8020fee:	bf00      	nop

08020ff0 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020ff0:	b510      	push	{r4, lr}
 8020ff2:	4604      	mov	r4, r0
 8020ff4:	2104      	movs	r1, #4
 8020ff6:	f008 f834 	bl	8029062 <_ZdlPvj>
 8020ffa:	4620      	mov	r0, r4
 8020ffc:	bd10      	pop	{r4, pc}
 8020ffe:	bf00      	nop

08021000 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8021000:	b510      	push	{r4, lr}
 8021002:	4604      	mov	r4, r0
 8021004:	2104      	movs	r1, #4
 8021006:	f008 f82c 	bl	8029062 <_ZdlPvj>
 802100a:	4620      	mov	r0, r4
 802100c:	bd10      	pop	{r4, pc}
 802100e:	bf00      	nop

08021010 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021010:	b510      	push	{r4, lr}
 8021012:	4604      	mov	r4, r0
 8021014:	2104      	movs	r1, #4
 8021016:	f008 f824 	bl	8029062 <_ZdlPvj>
 802101a:	4620      	mov	r0, r4
 802101c:	bd10      	pop	{r4, pc}
 802101e:	bf00      	nop

08021020 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021020:	b510      	push	{r4, lr}
 8021022:	4604      	mov	r4, r0
 8021024:	2104      	movs	r1, #4
 8021026:	f008 f81c 	bl	8029062 <_ZdlPvj>
 802102a:	4620      	mov	r0, r4
 802102c:	bd10      	pop	{r4, pc}
 802102e:	bf00      	nop

08021030 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8021030:	b510      	push	{r4, lr}
 8021032:	4604      	mov	r4, r0
 8021034:	2104      	movs	r1, #4
 8021036:	f008 f814 	bl	8029062 <_ZdlPvj>
 802103a:	4620      	mov	r0, r4
 802103c:	bd10      	pop	{r4, pc}
 802103e:	bf00      	nop

08021040 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8021040:	b510      	push	{r4, lr}
 8021042:	4604      	mov	r4, r0
 8021044:	2104      	movs	r1, #4
 8021046:	f008 f80c 	bl	8029062 <_ZdlPvj>
 802104a:	4620      	mov	r0, r4
 802104c:	bd10      	pop	{r4, pc}
 802104e:	bf00      	nop

08021050 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8021050:	b510      	push	{r4, lr}
 8021052:	4604      	mov	r4, r0
 8021054:	2104      	movs	r1, #4
 8021056:	f008 f804 	bl	8029062 <_ZdlPvj>
 802105a:	4620      	mov	r0, r4
 802105c:	bd10      	pop	{r4, pc}
 802105e:	bf00      	nop

08021060 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8021060:	b510      	push	{r4, lr}
 8021062:	4604      	mov	r4, r0
 8021064:	2104      	movs	r1, #4
 8021066:	f007 fffc 	bl	8029062 <_ZdlPvj>
 802106a:	4620      	mov	r0, r4
 802106c:	bd10      	pop	{r4, pc}
 802106e:	bf00      	nop

08021070 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8021070:	b510      	push	{r4, lr}
 8021072:	4604      	mov	r4, r0
 8021074:	2104      	movs	r1, #4
 8021076:	f007 fff4 	bl	8029062 <_ZdlPvj>
 802107a:	4620      	mov	r0, r4
 802107c:	bd10      	pop	{r4, pc}
 802107e:	bf00      	nop

08021080 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8021080:	b510      	push	{r4, lr}
 8021082:	4604      	mov	r4, r0
 8021084:	2104      	movs	r1, #4
 8021086:	f007 ffec 	bl	8029062 <_ZdlPvj>
 802108a:	4620      	mov	r0, r4
 802108c:	bd10      	pop	{r4, pc}
 802108e:	bf00      	nop

08021090 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021090:	b510      	push	{r4, lr}
 8021092:	4604      	mov	r4, r0
 8021094:	2104      	movs	r1, #4
 8021096:	f007 ffe4 	bl	8029062 <_ZdlPvj>
 802109a:	4620      	mov	r0, r4
 802109c:	bd10      	pop	{r4, pc}
 802109e:	bf00      	nop

080210a0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80210a0:	b510      	push	{r4, lr}
 80210a2:	4604      	mov	r4, r0
 80210a4:	2104      	movs	r1, #4
 80210a6:	f007 ffdc 	bl	8029062 <_ZdlPvj>
 80210aa:	4620      	mov	r0, r4
 80210ac:	bd10      	pop	{r4, pc}
 80210ae:	bf00      	nop

080210b0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80210b0:	b510      	push	{r4, lr}
 80210b2:	4604      	mov	r4, r0
 80210b4:	2104      	movs	r1, #4
 80210b6:	f007 ffd4 	bl	8029062 <_ZdlPvj>
 80210ba:	4620      	mov	r0, r4
 80210bc:	bd10      	pop	{r4, pc}
 80210be:	bf00      	nop

080210c0 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80210c0:	b510      	push	{r4, lr}
 80210c2:	4604      	mov	r4, r0
 80210c4:	2104      	movs	r1, #4
 80210c6:	f007 ffcc 	bl	8029062 <_ZdlPvj>
 80210ca:	4620      	mov	r0, r4
 80210cc:	bd10      	pop	{r4, pc}
 80210ce:	bf00      	nop

080210d0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80210d0:	b510      	push	{r4, lr}
 80210d2:	4604      	mov	r4, r0
 80210d4:	2104      	movs	r1, #4
 80210d6:	f007 ffc4 	bl	8029062 <_ZdlPvj>
 80210da:	4620      	mov	r0, r4
 80210dc:	bd10      	pop	{r4, pc}
 80210de:	bf00      	nop

080210e0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80210e0:	b510      	push	{r4, lr}
 80210e2:	4604      	mov	r4, r0
 80210e4:	2104      	movs	r1, #4
 80210e6:	f007 ffbc 	bl	8029062 <_ZdlPvj>
 80210ea:	4620      	mov	r0, r4
 80210ec:	bd10      	pop	{r4, pc}
 80210ee:	bf00      	nop

080210f0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80210f0:	b510      	push	{r4, lr}
 80210f2:	4604      	mov	r4, r0
 80210f4:	2104      	movs	r1, #4
 80210f6:	f007 ffb4 	bl	8029062 <_ZdlPvj>
 80210fa:	4620      	mov	r0, r4
 80210fc:	bd10      	pop	{r4, pc}
 80210fe:	bf00      	nop

08021100 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021100:	b510      	push	{r4, lr}
 8021102:	4604      	mov	r4, r0
 8021104:	2104      	movs	r1, #4
 8021106:	f007 ffac 	bl	8029062 <_ZdlPvj>
 802110a:	4620      	mov	r0, r4
 802110c:	bd10      	pop	{r4, pc}
 802110e:	bf00      	nop

08021110 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8021110:	b510      	push	{r4, lr}
 8021112:	4604      	mov	r4, r0
 8021114:	2104      	movs	r1, #4
 8021116:	f007 ffa4 	bl	8029062 <_ZdlPvj>
 802111a:	4620      	mov	r0, r4
 802111c:	bd10      	pop	{r4, pc}
 802111e:	bf00      	nop

08021120 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8021120:	b510      	push	{r4, lr}
 8021122:	4604      	mov	r4, r0
 8021124:	2104      	movs	r1, #4
 8021126:	f007 ff9c 	bl	8029062 <_ZdlPvj>
 802112a:	4620      	mov	r0, r4
 802112c:	bd10      	pop	{r4, pc}
 802112e:	bf00      	nop

08021130 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8021130:	b510      	push	{r4, lr}
 8021132:	4604      	mov	r4, r0
 8021134:	2104      	movs	r1, #4
 8021136:	f007 ff94 	bl	8029062 <_ZdlPvj>
 802113a:	4620      	mov	r0, r4
 802113c:	bd10      	pop	{r4, pc}
 802113e:	bf00      	nop

08021140 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8021140:	b510      	push	{r4, lr}
 8021142:	4604      	mov	r4, r0
 8021144:	2104      	movs	r1, #4
 8021146:	f007 ff8c 	bl	8029062 <_ZdlPvj>
 802114a:	4620      	mov	r0, r4
 802114c:	bd10      	pop	{r4, pc}
 802114e:	bf00      	nop

08021150 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6>:
 8021150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021154:	461c      	mov	r4, r3
 8021156:	4617      	mov	r7, r2
 8021158:	b086      	sub	sp, #24
 802115a:	4606      	mov	r6, r0
 802115c:	4688      	mov	r8, r1
 802115e:	6818      	ldr	r0, [r3, #0]
 8021160:	6859      	ldr	r1, [r3, #4]
 8021162:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021164:	ad02      	add	r5, sp, #8
 8021166:	c503      	stmia	r5!, {r0, r1}
 8021168:	6818      	ldr	r0, [r3, #0]
 802116a:	6859      	ldr	r1, [r3, #4]
 802116c:	ad04      	add	r5, sp, #16
 802116e:	c503      	stmia	r5!, {r0, r1}
 8021170:	a802      	add	r0, sp, #8
 8021172:	f89d a03c 	ldrb.w	sl, [sp, #60]	; 0x3c
 8021176:	f7f7 fad9 	bl	801872c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802117a:	4621      	mov	r1, r4
 802117c:	a804      	add	r0, sp, #16
 802117e:	f7f7 fafd 	bl	801877c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021182:	2f01      	cmp	r7, #1
 8021184:	d05c      	beq.n	8021240 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0xf0>
 8021186:	d357      	bcc.n	8021238 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0xe8>
 8021188:	2f02      	cmp	r7, #2
 802118a:	d163      	bne.n	8021254 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x104>
 802118c:	f04f 0910 	mov.w	r9, #16
 8021190:	2504      	movs	r5, #4
 8021192:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021196:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802119a:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 802119e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80211a2:	fb14 2403 	smlabb	r4, r4, r3, r2
 80211a6:	4f2e      	ldr	r7, [pc, #184]	; (8021260 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x110>)
 80211a8:	440a      	add	r2, r1
 80211aa:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80211ae:	6838      	ldr	r0, [r7, #0]
 80211b0:	440b      	add	r3, r1
 80211b2:	fb05 8404 	mla	r4, r5, r4, r8
 80211b6:	f8ad 2010 	strh.w	r2, [sp, #16]
 80211ba:	f8ad 3012 	strh.w	r3, [sp, #18]
 80211be:	2800      	cmp	r0, #0
 80211c0:	d042      	beq.n	8021248 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0xf8>
 80211c2:	f7fd f819 	bl	801e1f8 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 80211c6:	6833      	ldr	r3, [r6, #0]
 80211c8:	4630      	mov	r0, r6
 80211ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80211cc:	4798      	blx	r3
 80211ce:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80211d2:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80211d6:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80211da:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80211de:	f7fa fd15 	bl	801bc0c <nema_set_clip>
 80211e2:	2200      	movs	r2, #0
 80211e4:	2600      	movs	r6, #0
 80211e6:	4611      	mov	r1, r2
 80211e8:	4653      	mov	r3, sl
 80211ea:	4610      	mov	r0, r2
 80211ec:	f7fa fd42 	bl	801bc74 <nema_rgba>
 80211f0:	f7fc ff1a 	bl	801e028 <nema_set_const_color>
 80211f4:	f04f 33ff 	mov.w	r3, #4294967295
 80211f8:	2201      	movs	r2, #1
 80211fa:	2100      	movs	r1, #0
 80211fc:	4819      	ldr	r0, [pc, #100]	; (8021264 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x114>)
 80211fe:	f7fc fb4d 	bl	801d89c <nema_set_blend>
 8021202:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8021206:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 802120a:	fb05 f503 	mul.w	r5, r5, r3
 802120e:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 8021212:	464b      	mov	r3, r9
 8021214:	4620      	mov	r0, r4
 8021216:	e9cd 5600 	strd	r5, r6, [sp]
 802121a:	f7fa fd33 	bl	801bc84 <nema_bind_src_tex>
 802121e:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8021222:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8021226:	f7fa fe6d 	bl	801bf04 <nema_blit>
 802122a:	6838      	ldr	r0, [r7, #0]
 802122c:	b160      	cbz	r0, 8021248 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0xf8>
 802122e:	f7fd f803 	bl	801e238 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 8021232:	b006      	add	sp, #24
 8021234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021238:	f04f 0904 	mov.w	r9, #4
 802123c:	2502      	movs	r5, #2
 802123e:	e7a8      	b.n	8021192 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x42>
 8021240:	f04f 0939 	mov.w	r9, #57	; 0x39
 8021244:	2503      	movs	r5, #3
 8021246:	e7a4      	b.n	8021192 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x42>
 8021248:	4b07      	ldr	r3, [pc, #28]	; (8021268 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x118>)
 802124a:	4a08      	ldr	r2, [pc, #32]	; (802126c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x11c>)
 802124c:	217c      	movs	r1, #124	; 0x7c
 802124e:	4808      	ldr	r0, [pc, #32]	; (8021270 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x120>)
 8021250:	f007 ff34 	bl	80290bc <__assert_func>
 8021254:	4b07      	ldr	r3, [pc, #28]	; (8021274 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x124>)
 8021256:	4a08      	ldr	r2, [pc, #32]	; (8021278 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x128>)
 8021258:	21c1      	movs	r1, #193	; 0xc1
 802125a:	4808      	ldr	r0, [pc, #32]	; (802127c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x12c>)
 802125c:	f007 ff2e 	bl	80290bc <__assert_func>
 8021260:	20197c18 	.word	0x20197c18
 8021264:	08000504 	.word	0x08000504
 8021268:	0802bf28 	.word	0x0802bf28
 802126c:	0802c730 	.word	0x0802c730
 8021270:	0802bf50 	.word	0x0802bf50
 8021274:	0802c374 	.word	0x0802c374
 8021278:	0802d0cc 	.word	0x0802d0cc
 802127c:	0802bfcc 	.word	0x0802bfcc

08021280 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb>:
 8021280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021284:	4c1e      	ldr	r4, [pc, #120]	; (8021300 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x80>)
 8021286:	6806      	ldr	r6, [r0, #0]
 8021288:	6824      	ldr	r4, [r4, #0]
 802128a:	4605      	mov	r5, r0
 802128c:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
 8021290:	b087      	sub	sp, #28
 8021292:	6937      	ldr	r7, [r6, #16]
 8021294:	4690      	mov	r8, r2
 8021296:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 802129a:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 802129e:	b170      	cbz	r0, 80212be <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x3e>
 80212a0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80212a2:	b160      	cbz	r0, 80212be <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x3e>
 80212a4:	6804      	ldr	r4, [r0, #0]
 80212a6:	4a17      	ldr	r2, [pc, #92]	; (8021304 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x84>)
 80212a8:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 80212aa:	4294      	cmp	r4, r2
 80212ac:	d10d      	bne.n	80212ca <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x4a>
 80212ae:	4c16      	ldr	r4, [pc, #88]	; (8021308 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x88>)
 80212b0:	7a02      	ldrb	r2, [r0, #8]
 80212b2:	42a7      	cmp	r7, r4
 80212b4:	d112      	bne.n	80212dc <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x5c>
 80212b6:	b9d6      	cbnz	r6, 80212ee <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x6e>
 80212b8:	b007      	add	sp, #28
 80212ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80212be:	68a0      	ldr	r0, [r4, #8]
 80212c0:	4a10      	ldr	r2, [pc, #64]	; (8021304 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x84>)
 80212c2:	6804      	ldr	r4, [r0, #0]
 80212c4:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 80212c6:	4294      	cmp	r4, r2
 80212c8:	d0f1      	beq.n	80212ae <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x2e>
 80212ca:	e9cd 1304 	strd	r1, r3, [sp, #16]
 80212ce:	47a0      	blx	r4
 80212d0:	e9dd 1304 	ldrd	r1, r3, [sp, #16]
 80212d4:	4c0c      	ldr	r4, [pc, #48]	; (8021308 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x88>)
 80212d6:	4602      	mov	r2, r0
 80212d8:	42a7      	cmp	r7, r4
 80212da:	d0ec      	beq.n	80212b6 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x36>
 80212dc:	9300      	str	r3, [sp, #0]
 80212de:	e9cd 6901 	strd	r6, r9, [sp, #4]
 80212e2:	4643      	mov	r3, r8
 80212e4:	4628      	mov	r0, r5
 80212e6:	47b8      	blx	r7
 80212e8:	b007      	add	sp, #28
 80212ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80212ee:	e9cd 360e 	strd	r3, r6, [sp, #56]	; 0x38
 80212f2:	4628      	mov	r0, r5
 80212f4:	4643      	mov	r3, r8
 80212f6:	b007      	add	sp, #28
 80212f8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80212fc:	f7ff bf28 	b.w	8021150 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6>
 8021300:	201979e8 	.word	0x201979e8
 8021304:	0801e2dd 	.word	0x0801e2dd
 8021308:	0802130d 	.word	0x0802130d

0802130c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 802130c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021310:	b087      	sub	sp, #28
 8021312:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8021316:	b915      	cbnz	r5, 802131e <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x12>
 8021318:	b007      	add	sp, #28
 802131a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802131e:	461c      	mov	r4, r3
 8021320:	4617      	mov	r7, r2
 8021322:	4688      	mov	r8, r1
 8021324:	4606      	mov	r6, r0
 8021326:	6859      	ldr	r1, [r3, #4]
 8021328:	6818      	ldr	r0, [r3, #0]
 802132a:	ab02      	add	r3, sp, #8
 802132c:	c303      	stmia	r3!, {r0, r1}
 802132e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021330:	6818      	ldr	r0, [r3, #0]
 8021332:	6859      	ldr	r1, [r3, #4]
 8021334:	ab04      	add	r3, sp, #16
 8021336:	c303      	stmia	r3!, {r0, r1}
 8021338:	a802      	add	r0, sp, #8
 802133a:	f7f7 f9f7 	bl	801872c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802133e:	4621      	mov	r1, r4
 8021340:	a804      	add	r0, sp, #16
 8021342:	f7f7 fa1b 	bl	801877c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021346:	2f01      	cmp	r7, #1
 8021348:	d05c      	beq.n	8021404 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0xf8>
 802134a:	d357      	bcc.n	80213fc <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0xf0>
 802134c:	2f02      	cmp	r7, #2
 802134e:	d163      	bne.n	8021418 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x10c>
 8021350:	f04f 0910 	mov.w	r9, #16
 8021354:	2404      	movs	r4, #4
 8021356:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802135a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802135e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8021362:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8021366:	fb11 2103 	smlabb	r1, r1, r3, r2
 802136a:	4f2e      	ldr	r7, [pc, #184]	; (8021424 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x118>)
 802136c:	fb04 8801 	mla	r8, r4, r1, r8
 8021370:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8021374:	4402      	add	r2, r0
 8021376:	6838      	ldr	r0, [r7, #0]
 8021378:	440b      	add	r3, r1
 802137a:	f8ad 2010 	strh.w	r2, [sp, #16]
 802137e:	f8ad 3012 	strh.w	r3, [sp, #18]
 8021382:	2800      	cmp	r0, #0
 8021384:	d042      	beq.n	802140c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x100>
 8021386:	f7fc ff37 	bl	801e1f8 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 802138a:	6833      	ldr	r3, [r6, #0]
 802138c:	4630      	mov	r0, r6
 802138e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021390:	4798      	blx	r3
 8021392:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8021396:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 802139a:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 802139e:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80213a2:	f7fa fc33 	bl	801bc0c <nema_set_clip>
 80213a6:	2200      	movs	r2, #0
 80213a8:	462b      	mov	r3, r5
 80213aa:	2500      	movs	r5, #0
 80213ac:	4611      	mov	r1, r2
 80213ae:	4610      	mov	r0, r2
 80213b0:	f7fa fc60 	bl	801bc74 <nema_rgba>
 80213b4:	f7fc fe38 	bl	801e028 <nema_set_const_color>
 80213b8:	f04f 33ff 	mov.w	r3, #4294967295
 80213bc:	2201      	movs	r2, #1
 80213be:	2100      	movs	r1, #0
 80213c0:	4819      	ldr	r0, [pc, #100]	; (8021428 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x11c>)
 80213c2:	f7fc fa6b 	bl	801d89c <nema_set_blend>
 80213c6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80213ca:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 80213ce:	fb04 f403 	mul.w	r4, r4, r3
 80213d2:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 80213d6:	464b      	mov	r3, r9
 80213d8:	4640      	mov	r0, r8
 80213da:	e9cd 4500 	strd	r4, r5, [sp]
 80213de:	f7fa fc51 	bl	801bc84 <nema_bind_src_tex>
 80213e2:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80213e6:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80213ea:	f7fa fd8b 	bl	801bf04 <nema_blit>
 80213ee:	6838      	ldr	r0, [r7, #0]
 80213f0:	b160      	cbz	r0, 802140c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x100>
 80213f2:	f7fc ff21 	bl	801e238 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 80213f6:	b007      	add	sp, #28
 80213f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80213fc:	f04f 0904 	mov.w	r9, #4
 8021400:	2402      	movs	r4, #2
 8021402:	e7a8      	b.n	8021356 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x4a>
 8021404:	f04f 0939 	mov.w	r9, #57	; 0x39
 8021408:	2403      	movs	r4, #3
 802140a:	e7a4      	b.n	8021356 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x4a>
 802140c:	4b07      	ldr	r3, [pc, #28]	; (802142c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x120>)
 802140e:	4a08      	ldr	r2, [pc, #32]	; (8021430 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x124>)
 8021410:	217c      	movs	r1, #124	; 0x7c
 8021412:	4808      	ldr	r0, [pc, #32]	; (8021434 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x128>)
 8021414:	f007 fe52 	bl	80290bc <__assert_func>
 8021418:	4b07      	ldr	r3, [pc, #28]	; (8021438 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x12c>)
 802141a:	4a08      	ldr	r2, [pc, #32]	; (802143c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x130>)
 802141c:	21c1      	movs	r1, #193	; 0xc1
 802141e:	4808      	ldr	r0, [pc, #32]	; (8021440 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x134>)
 8021420:	f007 fe4c 	bl	80290bc <__assert_func>
 8021424:	20197c18 	.word	0x20197c18
 8021428:	08000504 	.word	0x08000504
 802142c:	0802bf28 	.word	0x0802bf28
 8021430:	0802c730 	.word	0x0802c730
 8021434:	0802bf50 	.word	0x0802bf50
 8021438:	0802c374 	.word	0x0802c374
 802143c:	0802d0cc 	.word	0x0802d0cc
 8021440:	0802bfcc 	.word	0x0802bfcc

08021444 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8021444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021448:	4682      	mov	sl, r0
 802144a:	4851      	ldr	r0, [pc, #324]	; (8021590 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x14c>)
 802144c:	b08f      	sub	sp, #60	; 0x3c
 802144e:	6800      	ldr	r0, [r0, #0]
 8021450:	9104      	str	r1, [sp, #16]
 8021452:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 8021456:	f9bd 0064 	ldrsh.w	r0, [sp, #100]	; 0x64
 802145a:	2902      	cmp	r1, #2
 802145c:	9003      	str	r0, [sp, #12]
 802145e:	f9bd 0068 	ldrsh.w	r0, [sp, #104]	; 0x68
 8021462:	9006      	str	r0, [sp, #24]
 8021464:	f000 81cd 	beq.w	8021802 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3be>
 8021468:	9918      	ldr	r1, [sp, #96]	; 0x60
 802146a:	2900      	cmp	r1, #0
 802146c:	f000 81c3 	beq.w	80217f6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3b2>
 8021470:	f9b3 5000 	ldrsh.w	r5, [r3]
 8021474:	8899      	ldrh	r1, [r3, #4]
 8021476:	b2ae      	uxth	r6, r5
 8021478:	4431      	add	r1, r6
 802147a:	b289      	uxth	r1, r1
 802147c:	fa0f fc81 	sxth.w	ip, r1
 8021480:	4565      	cmp	r5, ip
 8021482:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 8021486:	da28      	bge.n	80214da <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x96>
 8021488:	9803      	ldr	r0, [sp, #12]
 802148a:	1830      	adds	r0, r6, r0
 802148c:	b280      	uxth	r0, r0
 802148e:	9005      	str	r0, [sp, #20]
 8021490:	f9bd e014 	ldrsh.w	lr, [sp, #20]
 8021494:	4575      	cmp	r5, lr
 8021496:	da20      	bge.n	80214da <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x96>
 8021498:	f8b3 8006 	ldrh.w	r8, [r3, #6]
 802149c:	b2a7      	uxth	r7, r4
 802149e:	4638      	mov	r0, r7
 80214a0:	4447      	add	r7, r8
 80214a2:	b2bf      	uxth	r7, r7
 80214a4:	fa0f f987 	sxth.w	r9, r7
 80214a8:	454c      	cmp	r4, r9
 80214aa:	da16      	bge.n	80214da <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x96>
 80214ac:	4680      	mov	r8, r0
 80214ae:	9007      	str	r0, [sp, #28]
 80214b0:	9806      	ldr	r0, [sp, #24]
 80214b2:	4480      	add	r8, r0
 80214b4:	fa1f f888 	uxth.w	r8, r8
 80214b8:	fa0f fb88 	sxth.w	fp, r8
 80214bc:	455c      	cmp	r4, fp
 80214be:	da0c      	bge.n	80214da <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x96>
 80214c0:	9805      	ldr	r0, [sp, #20]
 80214c2:	45d9      	cmp	r9, fp
 80214c4:	bfc8      	it	gt
 80214c6:	4647      	movgt	r7, r8
 80214c8:	45f4      	cmp	ip, lr
 80214ca:	bfc8      	it	gt
 80214cc:	4601      	movgt	r1, r0
 80214ce:	9807      	ldr	r0, [sp, #28]
 80214d0:	1b89      	subs	r1, r1, r6
 80214d2:	1a3f      	subs	r7, r7, r0
 80214d4:	b209      	sxth	r1, r1
 80214d6:	b23f      	sxth	r7, r7
 80214d8:	e005      	b.n	80214e6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xa2>
 80214da:	2700      	movs	r7, #0
 80214dc:	463c      	mov	r4, r7
 80214de:	4639      	mov	r1, r7
 80214e0:	463e      	mov	r6, r7
 80214e2:	463d      	mov	r5, r7
 80214e4:	9707      	str	r7, [sp, #28]
 80214e6:	f9b2 b000 	ldrsh.w	fp, [r2]
 80214ea:	8890      	ldrh	r0, [r2, #4]
 80214ec:	4458      	add	r0, fp
 80214ee:	b280      	uxth	r0, r0
 80214f0:	fa0f fc80 	sxth.w	ip, r0
 80214f4:	45ac      	cmp	ip, r5
 80214f6:	dd51      	ble.n	802159c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x158>
 80214f8:	4431      	add	r1, r6
 80214fa:	b289      	uxth	r1, r1
 80214fc:	fa0f fe81 	sxth.w	lr, r1
 8021500:	45f3      	cmp	fp, lr
 8021502:	da4b      	bge.n	802159c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x158>
 8021504:	f9b2 8002 	ldrsh.w	r8, [r2, #2]
 8021508:	88d6      	ldrh	r6, [r2, #6]
 802150a:	4446      	add	r6, r8
 802150c:	b2b6      	uxth	r6, r6
 802150e:	fa0f f986 	sxth.w	r9, r6
 8021512:	454c      	cmp	r4, r9
 8021514:	da42      	bge.n	802159c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x158>
 8021516:	9a07      	ldr	r2, [sp, #28]
 8021518:	443a      	add	r2, r7
 802151a:	b297      	uxth	r7, r2
 802151c:	b23a      	sxth	r2, r7
 802151e:	4590      	cmp	r8, r2
 8021520:	9205      	str	r2, [sp, #20]
 8021522:	da3b      	bge.n	802159c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x158>
 8021524:	45ab      	cmp	fp, r5
 8021526:	bfb8      	it	lt
 8021528:	46ab      	movlt	fp, r5
 802152a:	4544      	cmp	r4, r8
 802152c:	bfb8      	it	lt
 802152e:	4644      	movlt	r4, r8
 8021530:	45f4      	cmp	ip, lr
 8021532:	bfc8      	it	gt
 8021534:	4608      	movgt	r0, r1
 8021536:	9905      	ldr	r1, [sp, #20]
 8021538:	465a      	mov	r2, fp
 802153a:	4589      	cmp	r9, r1
 802153c:	bfc8      	it	gt
 802153e:	463e      	movgt	r6, r7
 8021540:	f8df c054 	ldr.w	ip, [pc, #84]	; 8021598 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x154>
 8021544:	4f13      	ldr	r7, [pc, #76]	; (8021594 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x150>)
 8021546:	fa1f f58b 	uxth.w	r5, fp
 802154a:	1b36      	subs	r6, r6, r4
 802154c:	1b41      	subs	r1, r0, r5
 802154e:	f8bc c000 	ldrh.w	ip, [ip]
 8021552:	883f      	ldrh	r7, [r7, #0]
 8021554:	fa0f fb86 	sxth.w	fp, r6
 8021558:	fa0f f981 	sxth.w	r9, r1
 802155c:	2a00      	cmp	r2, #0
 802155e:	f8ad b026 	strh.w	fp, [sp, #38]	; 0x26
 8021562:	f8ad 2020 	strh.w	r2, [sp, #32]
 8021566:	f8ad 4022 	strh.w	r4, [sp, #34]	; 0x22
 802156a:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
 802156e:	fa0f f68c 	sxth.w	r6, ip
 8021572:	b239      	sxth	r1, r7
 8021574:	f280 812b 	bge.w	80217ce <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x38a>
 8021578:	f04f 0e00 	mov.w	lr, #0
 802157c:	fa0f f980 	sxth.w	r9, r0
 8021580:	4675      	mov	r5, lr
 8021582:	4672      	mov	r2, lr
 8021584:	4648      	mov	r0, r9
 8021586:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
 802158a:	f8ad e020 	strh.w	lr, [sp, #32]
 802158e:	e015      	b.n	80215bc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x178>
 8021590:	201979e8 	.word	0x201979e8
 8021594:	201979de 	.word	0x201979de
 8021598:	201979dc 	.word	0x201979dc
 802159c:	2200      	movs	r2, #0
 802159e:	48a3      	ldr	r0, [pc, #652]	; (802182c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3e8>)
 80215a0:	4615      	mov	r5, r2
 80215a2:	f8b0 c000 	ldrh.w	ip, [r0]
 80215a6:	4693      	mov	fp, r2
 80215a8:	4614      	mov	r4, r2
 80215aa:	4610      	mov	r0, r2
 80215ac:	4691      	mov	r9, r2
 80215ae:	49a0      	ldr	r1, [pc, #640]	; (8021830 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3ec>)
 80215b0:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80215b4:	880f      	ldrh	r7, [r1, #0]
 80215b6:	fa0f f68c 	sxth.w	r6, ip
 80215ba:	b239      	sxth	r1, r7
 80215bc:	1ab2      	subs	r2, r6, r2
 80215be:	4282      	cmp	r2, r0
 80215c0:	da05      	bge.n	80215ce <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x18a>
 80215c2:	ebac 0c05 	sub.w	ip, ip, r5
 80215c6:	fa0f f98c 	sxth.w	r9, ip
 80215ca:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
 80215ce:	2c00      	cmp	r4, #0
 80215d0:	f2c0 80e8 	blt.w	80217a4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x360>
 80215d4:	4622      	mov	r2, r4
 80215d6:	1a89      	subs	r1, r1, r2
 80215d8:	458b      	cmp	fp, r1
 80215da:	dd04      	ble.n	80215e6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a2>
 80215dc:	1b3f      	subs	r7, r7, r4
 80215de:	fa0f fb87 	sxth.w	fp, r7
 80215e2:	f8ad b026 	strh.w	fp, [sp, #38]	; 0x26
 80215e6:	f1b9 0f00 	cmp.w	r9, #0
 80215ea:	f340 80d2 	ble.w	8021792 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x34e>
 80215ee:	f1bb 0f00 	cmp.w	fp, #0
 80215f2:	f340 80ce 	ble.w	8021792 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x34e>
 80215f6:	2200      	movs	r2, #0
 80215f8:	8819      	ldrh	r1, [r3, #0]
 80215fa:	f8b3 8002 	ldrh.w	r8, [r3, #2]
 80215fe:	9b03      	ldr	r3, [sp, #12]
 8021600:	1a6d      	subs	r5, r5, r1
 8021602:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8021606:	eba4 0408 	sub.w	r4, r4, r8
 802160a:	9b06      	ldr	r3, [sp, #24]
 802160c:	a90c      	add	r1, sp, #48	; 0x30
 802160e:	a80a      	add	r0, sp, #40	; 0x28
 8021610:	b22d      	sxth	r5, r5
 8021612:	b224      	sxth	r4, r4
 8021614:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8021618:	920c      	str	r2, [sp, #48]	; 0x30
 802161a:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 802161e:	f8ad b02e 	strh.w	fp, [sp, #46]	; 0x2e
 8021622:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 8021626:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
 802162a:	f7f7 f8a7 	bl	801877c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802162e:	a808      	add	r0, sp, #32
 8021630:	f7f7 f87c 	bl	801872c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021634:	a80c      	add	r0, sp, #48	; 0x30
 8021636:	f7f7 f879 	bl	801872c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802163a:	4b7e      	ldr	r3, [pc, #504]	; (8021834 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3f0>)
 802163c:	681b      	ldr	r3, [r3, #0]
 802163e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8021642:	2a00      	cmp	r2, #0
 8021644:	f040 80ba 	bne.w	80217bc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x378>
 8021648:	6898      	ldr	r0, [r3, #8]
 802164a:	6803      	ldr	r3, [r0, #0]
 802164c:	4a7a      	ldr	r2, [pc, #488]	; (8021838 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3f4>)
 802164e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021650:	4293      	cmp	r3, r2
 8021652:	f040 80c4 	bne.w	80217de <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x39a>
 8021656:	7a00      	ldrb	r0, [r0, #8]
 8021658:	2801      	cmp	r0, #1
 802165a:	f000 80ba 	beq.w	80217d2 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x38e>
 802165e:	f0c0 80b2 	bcc.w	80217c6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x382>
 8021662:	2802      	cmp	r0, #2
 8021664:	f040 80da 	bne.w	802181c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3d8>
 8021668:	2310      	movs	r3, #16
 802166a:	2604      	movs	r6, #4
 802166c:	9305      	str	r3, [sp, #20]
 802166e:	9b04      	ldr	r3, [sp, #16]
 8021670:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 8021674:	681b      	ldr	r3, [r3, #0]
 8021676:	fb06 f101 	mul.w	r1, r6, r1
 802167a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802167c:	4a6f      	ldr	r2, [pc, #444]	; (802183c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3f8>)
 802167e:	9103      	str	r1, [sp, #12]
 8021680:	4293      	cmp	r3, r2
 8021682:	f040 80ae 	bne.w	80217e2 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x39e>
 8021686:	4b6e      	ldr	r3, [pc, #440]	; (8021840 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3fc>)
 8021688:	881f      	ldrh	r7, [r3, #0]
 802168a:	2f00      	cmp	r7, #0
 802168c:	f000 80bf 	beq.w	802180e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3ca>
 8021690:	9b04      	ldr	r3, [sp, #16]
 8021692:	7a1b      	ldrb	r3, [r3, #8]
 8021694:	2b02      	cmp	r3, #2
 8021696:	f000 80a0 	beq.w	80217da <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x396>
 802169a:	2b01      	cmp	r3, #1
 802169c:	bf14      	ite	ne
 802169e:	2302      	movne	r3, #2
 80216a0:	2303      	moveq	r3, #3
 80216a2:	fb17 f703 	smulbb	r7, r7, r3
 80216a6:	b2bf      	uxth	r7, r7
 80216a8:	4a62      	ldr	r2, [pc, #392]	; (8021834 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3f0>)
 80216aa:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80216ae:	6810      	ldr	r0, [r2, #0]
 80216b0:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	; 0x2a
 80216b4:	9a03      	ldr	r2, [sp, #12]
 80216b6:	fb02 3808 	mla	r8, r2, r8, r3
 80216ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80216bc:	6803      	ldr	r3, [r0, #0]
 80216be:	4442      	add	r2, r8
 80216c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80216c2:	9204      	str	r2, [sp, #16]
 80216c4:	4798      	blx	r3
 80216c6:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 80216ca:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80216ce:	fb07 f202 	mul.w	r2, r7, r2
 80216d2:	fb06 2303 	mla	r3, r6, r3, r2
 80216d6:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8021870 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x42c>
 80216da:	18c3      	adds	r3, r0, r3
 80216dc:	f8d8 2000 	ldr.w	r2, [r8]
 80216e0:	9306      	str	r3, [sp, #24]
 80216e2:	2a00      	cmp	r2, #0
 80216e4:	f000 8081 	beq.w	80217ea <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3a6>
 80216e8:	2600      	movs	r6, #0
 80216ea:	4610      	mov	r0, r2
 80216ec:	f7fc fd84 	bl	801e1f8 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 80216f0:	9b03      	ldr	r3, [sp, #12]
 80216f2:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 80216f6:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
 80216fa:	9300      	str	r3, [sp, #0]
 80216fc:	e9dd 0304 	ldrd	r0, r3, [sp, #16]
 8021700:	f7fa fb38 	bl	801bd74 <nema_bind_dst_tex>
 8021704:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8021708:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 802170c:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8021710:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8021714:	f7fa fa7a 	bl	801bc0c <nema_set_clip>
 8021718:	f04f 33ff 	mov.w	r3, #4294967295
 802171c:	2201      	movs	r2, #1
 802171e:	4631      	mov	r1, r6
 8021720:	f240 5004 	movw	r0, #1284	; 0x504
 8021724:	f7fc f8ba 	bl	801d89c <nema_set_blend>
 8021728:	e9dd 3005 	ldrd	r3, r0, [sp, #20]
 802172c:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 8021730:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
 8021734:	9700      	str	r7, [sp, #0]
 8021736:	9601      	str	r6, [sp, #4]
 8021738:	f7fa faa4 	bl	801bc84 <nema_bind_src_tex>
 802173c:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8021740:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8021744:	f7fa fbde 	bl	801bf04 <nema_blit>
 8021748:	f8d8 0000 	ldr.w	r0, [r8]
 802174c:	2800      	cmp	r0, #0
 802174e:	d04c      	beq.n	80217ea <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3a6>
 8021750:	f7fc fd72 	bl	801e238 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 8021754:	f8d8 0000 	ldr.w	r0, [r8]
 8021758:	2800      	cmp	r0, #0
 802175a:	d046      	beq.n	80217ea <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3a6>
 802175c:	6803      	ldr	r3, [r0, #0]
 802175e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021760:	4798      	blx	r3
 8021762:	f8d8 0000 	ldr.w	r0, [r8]
 8021766:	2800      	cmp	r0, #0
 8021768:	d03f      	beq.n	80217ea <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3a6>
 802176a:	6803      	ldr	r3, [r0, #0]
 802176c:	4637      	mov	r7, r6
 802176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021770:	4798      	blx	r3
 8021772:	4650      	mov	r0, sl
 8021774:	f365 060f 	bfi	r6, r5, #0, #16
 8021778:	f369 070f 	bfi	r7, r9, #0, #16
 802177c:	f364 461f 	bfi	r6, r4, #16, #16
 8021780:	f36b 471f 	bfi	r7, fp, #16, #16
 8021784:	f8ca 6000 	str.w	r6, [sl]
 8021788:	f8ca 7004 	str.w	r7, [sl, #4]
 802178c:	b00f      	add	sp, #60	; 0x3c
 802178e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021792:	2300      	movs	r3, #0
 8021794:	4650      	mov	r0, sl
 8021796:	f8ca 3000 	str.w	r3, [sl]
 802179a:	f8ca 3004 	str.w	r3, [sl, #4]
 802179e:	b00f      	add	sp, #60	; 0x3c
 80217a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80217a4:	2000      	movs	r0, #0
 80217a6:	eb0b 0604 	add.w	r6, fp, r4
 80217aa:	fa0f fb86 	sxth.w	fp, r6
 80217ae:	4604      	mov	r4, r0
 80217b0:	4602      	mov	r2, r0
 80217b2:	f8ad b026 	strh.w	fp, [sp, #38]	; 0x26
 80217b6:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80217ba:	e70c      	b.n	80215d6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x192>
 80217bc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80217be:	2800      	cmp	r0, #0
 80217c0:	f47f af43 	bne.w	802164a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x206>
 80217c4:	e740      	b.n	8021648 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x204>
 80217c6:	2304      	movs	r3, #4
 80217c8:	2602      	movs	r6, #2
 80217ca:	9305      	str	r3, [sp, #20]
 80217cc:	e74f      	b.n	802166e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22a>
 80217ce:	4648      	mov	r0, r9
 80217d0:	e6f4      	b.n	80215bc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x178>
 80217d2:	2339      	movs	r3, #57	; 0x39
 80217d4:	2603      	movs	r6, #3
 80217d6:	9305      	str	r3, [sp, #20]
 80217d8:	e749      	b.n	802166e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22a>
 80217da:	2304      	movs	r3, #4
 80217dc:	e761      	b.n	80216a2 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x25e>
 80217de:	4798      	blx	r3
 80217e0:	e73a      	b.n	8021658 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>
 80217e2:	9804      	ldr	r0, [sp, #16]
 80217e4:	4798      	blx	r3
 80217e6:	4607      	mov	r7, r0
 80217e8:	e75e      	b.n	80216a8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x264>
 80217ea:	4b16      	ldr	r3, [pc, #88]	; (8021844 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x400>)
 80217ec:	4a16      	ldr	r2, [pc, #88]	; (8021848 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x404>)
 80217ee:	217c      	movs	r1, #124	; 0x7c
 80217f0:	4816      	ldr	r0, [pc, #88]	; (802184c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x408>)
 80217f2:	f007 fc63 	bl	80290bc <__assert_func>
 80217f6:	4b16      	ldr	r3, [pc, #88]	; (8021850 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x40c>)
 80217f8:	4a16      	ldr	r2, [pc, #88]	; (8021854 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x410>)
 80217fa:	21f1      	movs	r1, #241	; 0xf1
 80217fc:	4816      	ldr	r0, [pc, #88]	; (8021858 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x414>)
 80217fe:	f007 fc5d 	bl	80290bc <__assert_func>
 8021802:	4b16      	ldr	r3, [pc, #88]	; (802185c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x418>)
 8021804:	4a13      	ldr	r2, [pc, #76]	; (8021854 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x410>)
 8021806:	21f0      	movs	r1, #240	; 0xf0
 8021808:	4813      	ldr	r0, [pc, #76]	; (8021858 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x414>)
 802180a:	f007 fc57 	bl	80290bc <__assert_func>
 802180e:	4b14      	ldr	r3, [pc, #80]	; (8021860 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x41c>)
 8021810:	4a14      	ldr	r2, [pc, #80]	; (8021864 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x420>)
 8021812:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8021816:	4814      	ldr	r0, [pc, #80]	; (8021868 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x424>)
 8021818:	f007 fc50 	bl	80290bc <__assert_func>
 802181c:	4b13      	ldr	r3, [pc, #76]	; (802186c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x428>)
 802181e:	4a0d      	ldr	r2, [pc, #52]	; (8021854 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x410>)
 8021820:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8021824:	480c      	ldr	r0, [pc, #48]	; (8021858 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x414>)
 8021826:	f007 fc49 	bl	80290bc <__assert_func>
 802182a:	bf00      	nop
 802182c:	201979dc 	.word	0x201979dc
 8021830:	201979de 	.word	0x201979de
 8021834:	201979e8 	.word	0x201979e8
 8021838:	0801e2dd 	.word	0x0801e2dd
 802183c:	0801febd 	.word	0x0801febd
 8021840:	201979e2 	.word	0x201979e2
 8021844:	0802bf28 	.word	0x0802bf28
 8021848:	0802c730 	.word	0x0802c730
 802184c:	0802bf50 	.word	0x0802bf50
 8021850:	0802c224 	.word	0x0802c224
 8021854:	0802cfb0 	.word	0x0802cfb0
 8021858:	0802bfcc 	.word	0x0802bfcc
 802185c:	0802c170 	.word	0x0802c170
 8021860:	0802c4a0 	.word	0x0802c4a0
 8021864:	0802d25c 	.word	0x0802d25c
 8021868:	0802c4e4 	.word	0x0802c4e4
 802186c:	0802c274 	.word	0x0802c274
 8021870:	20197c18 	.word	0x20197c18

08021874 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8021874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021878:	b085      	sub	sp, #20
 802187a:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 802187e:	e9dd 950e 	ldrd	r9, r5, [sp, #56]	; 0x38
 8021882:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 8021886:	f8bd a048 	ldrh.w	sl, [sp, #72]	; 0x48
 802188a:	2e00      	cmp	r6, #0
 802188c:	d05b      	beq.n	8021946 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd2>
 802188e:	f9b5 e004 	ldrsh.w	lr, [r5, #4]
 8021892:	f1be 0f00 	cmp.w	lr, #0
 8021896:	dd56      	ble.n	8021946 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd2>
 8021898:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 802189c:	f1be 0f00 	cmp.w	lr, #0
 80218a0:	dd51      	ble.n	8021946 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd2>
 80218a2:	f3c8 0b87 	ubfx	fp, r8, #2, #8
 80218a6:	f1bb 0f0b 	cmp.w	fp, #11
 80218aa:	f000 8165 	beq.w	8021b78 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x304>
 80218ae:	f1bb 0f0d 	cmp.w	fp, #13
 80218b2:	4684      	mov	ip, r0
 80218b4:	4614      	mov	r4, r2
 80218b6:	461f      	mov	r7, r3
 80218b8:	d03c      	beq.n	8021934 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xc0>
 80218ba:	f8df a368 	ldr.w	sl, [pc, #872]	; 8021c24 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3b0>
 80218be:	f8da 0000 	ldr.w	r0, [sl]
 80218c2:	2800      	cmp	r0, #0
 80218c4:	f000 818d 	beq.w	8021be2 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80218c8:	f8cd c00c 	str.w	ip, [sp, #12]
 80218cc:	f7fc fc94 	bl	801e1f8 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 80218d0:	9b03      	ldr	r3, [sp, #12]
 80218d2:	681a      	ldr	r2, [r3, #0]
 80218d4:	4618      	mov	r0, r3
 80218d6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80218d8:	4798      	blx	r3
 80218da:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80218de:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80218e2:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80218e6:	f9b5 0000 	ldrsh.w	r0, [r5]
 80218ea:	f7fa f98f 	bl	801bc0c <nema_set_clip>
 80218ee:	2200      	movs	r2, #0
 80218f0:	4633      	mov	r3, r6
 80218f2:	4611      	mov	r1, r2
 80218f4:	4610      	mov	r0, r2
 80218f6:	f7fa f9bd 	bl	801bc74 <nema_rgba>
 80218fa:	f7fc fb95 	bl	801e028 <nema_set_const_color>
 80218fe:	f04f 33ff 	mov.w	r3, #4294967295
 8021902:	2201      	movs	r2, #1
 8021904:	2100      	movs	r1, #0
 8021906:	48bd      	ldr	r0, [pc, #756]	; (8021bfc <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x388>)
 8021908:	f7fb ffc8 	bl	801d89c <nema_set_blend>
 802190c:	f1bb 0f0d 	cmp.w	fp, #13
 8021910:	f200 816d 	bhi.w	8021bee <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x37a>
 8021914:	e8df f01b 	tbh	[pc, fp, lsl #1]
 8021918:	00c700d3 	.word	0x00c700d3
 802191c:	016b00dc 	.word	0x016b00dc
 8021920:	016b016b 	.word	0x016b016b
 8021924:	016b016b 	.word	0x016b016b
 8021928:	016b016b 	.word	0x016b016b
 802192c:	016b016b 	.word	0x016b016b
 8021930:	001a00b2 	.word	0x001a00b2
 8021934:	685b      	ldr	r3, [r3, #4]
 8021936:	b133      	cbz	r3, 8021946 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd2>
 8021938:	781b      	ldrb	r3, [r3, #0]
 802193a:	f1a3 0216 	sub.w	r2, r3, #22
 802193e:	2a01      	cmp	r2, #1
 8021940:	d9bb      	bls.n	80218ba <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x46>
 8021942:	2b12      	cmp	r3, #18
 8021944:	d0b9      	beq.n	80218ba <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x46>
 8021946:	b005      	add	sp, #20
 8021948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802194c:	f04f 36ff 	mov.w	r6, #4294967295
 8021950:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8021954:	687b      	ldr	r3, [r7, #4]
 8021956:	6838      	ldr	r0, [r7, #0]
 8021958:	781b      	ldrb	r3, [r3, #0]
 802195a:	f008 0501 	and.w	r5, r8, #1
 802195e:	e9cd 6500 	strd	r6, r5, [sp]
 8021962:	f7fa f98f 	bl	801bc84 <nema_bind_src_tex>
 8021966:	2001      	movs	r0, #1
 8021968:	f7fa ffbc 	bl	801c8e4 <nema_enable_tiling>
 802196c:	2300      	movs	r3, #0
 802196e:	461a      	mov	r2, r3
 8021970:	4619      	mov	r1, r3
 8021972:	4618      	mov	r0, r3
 8021974:	f7fa ffca 	bl	801c90c <nema_enable_aa>
 8021978:	f9b9 3000 	ldrsh.w	r3, [r9]
 802197c:	edd4 7a00 	vldr	s15, [r4]
 8021980:	ee02 3a10 	vmov	s4, r3
 8021984:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
 8021988:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 802198c:	ee02 3a90 	vmov	s5, r3
 8021990:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8021994:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8021c00 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x38c>
 8021998:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 802199c:	edd4 7a01 	vldr	s15, [r4, #4]
 80219a0:	eeb0 0a42 	vmov.f32	s0, s4
 80219a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80219a8:	eea7 0a26 	vfma.f32	s0, s14, s13
 80219ac:	eef0 0a62 	vmov.f32	s1, s5
 80219b0:	ed94 7a03 	vldr	s14, [r4, #12]
 80219b4:	4b93      	ldr	r3, [pc, #588]	; (8021c04 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x390>)
 80219b6:	eee7 0aa6 	vfma.f32	s1, s15, s13
 80219ba:	781b      	ldrb	r3, [r3, #0]
 80219bc:	edd4 7a04 	vldr	s15, [r4, #16]
 80219c0:	2b01      	cmp	r3, #1
 80219c2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80219c6:	f000 808c 	beq.w	8021ae2 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x26e>
 80219ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80219ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80219d2:	f240 80ea 	bls.w	8021baa <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80219d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80219da:	bf94      	ite	ls
 80219dc:	2001      	movls	r0, #1
 80219de:	2002      	movhi	r0, #2
 80219e0:	edd4 7a05 	vldr	s15, [r4, #20]
 80219e4:	ed94 6a08 	vldr	s12, [r4, #32]
 80219e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80219ec:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 80219f0:	edd4 7a06 	vldr	s15, [r4, #24]
 80219f4:	eddf 6a82 	vldr	s13, [pc, #520]	; 8021c00 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x38c>
 80219f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80219fc:	eeb0 1a42 	vmov.f32	s2, s4
 8021a00:	eef0 1a62 	vmov.f32	s3, s5
 8021a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a08:	eee7 1aa6 	vfma.f32	s3, s15, s13
 8021a0c:	eea7 1a26 	vfma.f32	s2, s14, s13
 8021a10:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8021a14:	f240 80c1 	bls.w	8021b9a <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x326>
 8021a18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a20:	bf94      	ite	ls
 8021a22:	2101      	movls	r1, #1
 8021a24:	2102      	movhi	r1, #2
 8021a26:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8021a2a:	ed94 6a0d 	vldr	s12, [r4, #52]	; 0x34
 8021a2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8021a32:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8021a36:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8021a3a:	eddf 6a71 	vldr	s13, [pc, #452]	; 8021c00 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x38c>
 8021a3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a46:	eee7 2aa6 	vfma.f32	s5, s15, s13
 8021a4a:	eea7 2a26 	vfma.f32	s4, s14, s13
 8021a4e:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8021a52:	f240 809a 	bls.w	8021b8a <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x316>
 8021a56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a5e:	bf94      	ite	ls
 8021a60:	2201      	movls	r2, #1
 8021a62:	2202      	movhi	r2, #2
 8021a64:	f7fa fb44 	bl	801c0f0 <nema_blit_tri_fit>
 8021a68:	f8da 0000 	ldr.w	r0, [sl]
 8021a6c:	2800      	cmp	r0, #0
 8021a6e:	f000 80b8 	beq.w	8021be2 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8021a72:	b005      	add	sp, #20
 8021a74:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a78:	f7fc bbde 	b.w	801e238 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 8021a7c:	4a62      	ldr	r2, [pc, #392]	; (8021c08 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x394>)
 8021a7e:	23ff      	movs	r3, #255	; 0xff
 8021a80:	6810      	ldr	r0, [r2, #0]
 8021a82:	f008 0501 	and.w	r5, r8, #1
 8021a86:	b2c2      	uxtb	r2, r0
 8021a88:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8021a8c:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8021a90:	f7fa f8f0 	bl	801bc74 <nema_rgba>
 8021a94:	f7fa f8ae 	bl	801bbf4 <nema_set_tex_color>
 8021a98:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8021a9c:	6838      	ldr	r0, [r7, #0]
 8021a9e:	2329      	movs	r3, #41	; 0x29
 8021aa0:	f04f 36ff 	mov.w	r6, #4294967295
 8021aa4:	e75b      	b.n	802195e <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xea>
 8021aa6:	2339      	movs	r3, #57	; 0x39
 8021aa8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8021aac:	f04f 0c03 	mov.w	ip, #3
 8021ab0:	6838      	ldr	r0, [r7, #0]
 8021ab2:	f008 0501 	and.w	r5, r8, #1
 8021ab6:	693e      	ldr	r6, [r7, #16]
 8021ab8:	fb06 f60c 	mul.w	r6, r6, ip
 8021abc:	e74f      	b.n	802195e <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xea>
 8021abe:	f008 0501 	and.w	r5, r8, #1
 8021ac2:	6838      	ldr	r0, [r7, #0]
 8021ac4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8021ac8:	2304      	movs	r3, #4
 8021aca:	f04f 0c02 	mov.w	ip, #2
 8021ace:	e7f2      	b.n	8021ab6 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x242>
 8021ad0:	2310      	movs	r3, #16
 8021ad2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8021ad6:	f04f 0c04 	mov.w	ip, #4
 8021ada:	6838      	ldr	r0, [r7, #0]
 8021adc:	f008 0501 	and.w	r5, r8, #1
 8021ae0:	e7e9      	b.n	8021ab6 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x242>
 8021ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021ae6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021aea:	d974      	bls.n	8021bd6 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x362>
 8021aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021af0:	bf94      	ite	ls
 8021af2:	2002      	movls	r0, #2
 8021af4:	2003      	movhi	r0, #3
 8021af6:	edd4 7a05 	vldr	s15, [r4, #20]
 8021afa:	ed94 6a08 	vldr	s12, [r4, #32]
 8021afe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8021b02:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8021b06:	edd4 7a06 	vldr	s15, [r4, #24]
 8021b0a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8021c00 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x38c>
 8021b0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021b12:	eeb0 1a42 	vmov.f32	s2, s4
 8021b16:	eef0 1a62 	vmov.f32	s3, s5
 8021b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b1e:	eee7 1aa6 	vfma.f32	s3, s15, s13
 8021b22:	eea7 1a26 	vfma.f32	s2, s14, s13
 8021b26:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8021b2a:	d94c      	bls.n	8021bc6 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x352>
 8021b2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b34:	bf94      	ite	ls
 8021b36:	2102      	movls	r1, #2
 8021b38:	2103      	movhi	r1, #3
 8021b3a:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8021b3e:	ed94 6a0d 	vldr	s12, [r4, #52]	; 0x34
 8021b42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8021b46:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8021b4a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8021b4e:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8021c00 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x38c>
 8021b52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b5a:	eee7 2aa6 	vfma.f32	s5, s15, s13
 8021b5e:	eea7 2a26 	vfma.f32	s4, s14, s13
 8021b62:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8021b66:	d926      	bls.n	8021bb6 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8021b68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b70:	bf94      	ite	ls
 8021b72:	2202      	movls	r2, #2
 8021b74:	2203      	movhi	r2, #3
 8021b76:	e775      	b.n	8021a64 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1f0>
 8021b78:	e9cd 6a11 	strd	r6, sl, [sp, #68]	; 0x44
 8021b7c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8021b80:	b005      	add	sp, #20
 8021b82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b86:	f7f6 b887 	b.w	8017c98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>
 8021b8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b92:	bf94      	ite	ls
 8021b94:	2200      	movls	r2, #0
 8021b96:	2203      	movhi	r2, #3
 8021b98:	e764      	b.n	8021a64 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1f0>
 8021b9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021ba2:	bf94      	ite	ls
 8021ba4:	2100      	movls	r1, #0
 8021ba6:	2103      	movhi	r1, #3
 8021ba8:	e73d      	b.n	8021a26 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1b2>
 8021baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021bae:	bf94      	ite	ls
 8021bb0:	2000      	movls	r0, #0
 8021bb2:	2003      	movhi	r0, #3
 8021bb4:	e714      	b.n	80219e0 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x16c>
 8021bb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021bbe:	bf94      	ite	ls
 8021bc0:	2201      	movls	r2, #1
 8021bc2:	2200      	movhi	r2, #0
 8021bc4:	e74e      	b.n	8021a64 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1f0>
 8021bc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021bce:	bf94      	ite	ls
 8021bd0:	2101      	movls	r1, #1
 8021bd2:	2100      	movhi	r1, #0
 8021bd4:	e7b1      	b.n	8021b3a <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2c6>
 8021bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021bda:	bf94      	ite	ls
 8021bdc:	2001      	movls	r0, #1
 8021bde:	2000      	movhi	r0, #0
 8021be0:	e789      	b.n	8021af6 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x282>
 8021be2:	4b0a      	ldr	r3, [pc, #40]	; (8021c0c <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x398>)
 8021be4:	4a0a      	ldr	r2, [pc, #40]	; (8021c10 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x39c>)
 8021be6:	217c      	movs	r1, #124	; 0x7c
 8021be8:	480a      	ldr	r0, [pc, #40]	; (8021c14 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a0>)
 8021bea:	f007 fa67 	bl	80290bc <__assert_func>
 8021bee:	4b0a      	ldr	r3, [pc, #40]	; (8021c18 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a4>)
 8021bf0:	4a0a      	ldr	r2, [pc, #40]	; (8021c1c <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>)
 8021bf2:	f240 21d3 	movw	r1, #723	; 0x2d3
 8021bf6:	480a      	ldr	r0, [pc, #40]	; (8021c20 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ac>)
 8021bf8:	f007 fa60 	bl	80290bc <__assert_func>
 8021bfc:	08000504 	.word	0x08000504
 8021c00:	3d800000 	.word	0x3d800000
 8021c04:	201979e0 	.word	0x201979e0
 8021c08:	201979f0 	.word	0x201979f0
 8021c0c:	0802bf28 	.word	0x0802bf28
 8021c10:	0802c730 	.word	0x0802c730
 8021c14:	0802bf50 	.word	0x0802bf50
 8021c18:	0802be20 	.word	0x0802be20
 8021c1c:	0802cad4 	.word	0x0802cad4
 8021c20:	0802bfcc 	.word	0x0802bfcc
 8021c24:	20197c18 	.word	0x20197c18

08021c28 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8021c28:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8021c2c:	2700      	movs	r7, #0
 8021c2e:	4a2b      	ldr	r2, [pc, #172]	; (8021cdc <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xb4>)
 8021c30:	4b2b      	ldr	r3, [pc, #172]	; (8021ce0 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xb8>)
 8021c32:	4d2c      	ldr	r5, [pc, #176]	; (8021ce4 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xbc>)
 8021c34:	8812      	ldrh	r2, [r2, #0]
 8021c36:	881b      	ldrh	r3, [r3, #0]
 8021c38:	b088      	sub	sp, #32
 8021c3a:	4604      	mov	r4, r0
 8021c3c:	6828      	ldr	r0, [r5, #0]
 8021c3e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8021c42:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021c46:	9706      	str	r7, [sp, #24]
 8021c48:	6803      	ldr	r3, [r0, #0]
 8021c4a:	4689      	mov	r9, r1
 8021c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021c4e:	4798      	blx	r3
 8021c50:	6823      	ldr	r3, [r4, #0]
 8021c52:	4a25      	ldr	r2, [pc, #148]	; (8021ce8 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc0>)
 8021c54:	68de      	ldr	r6, [r3, #12]
 8021c56:	4601      	mov	r1, r0
 8021c58:	4296      	cmp	r6, r2
 8021c5a:	d134      	bne.n	8021cc6 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x9e>
 8021c5c:	682a      	ldr	r2, [r5, #0]
 8021c5e:	691d      	ldr	r5, [r3, #16]
 8021c60:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 8021c64:	b9a3      	cbnz	r3, 8021c90 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x68>
 8021c66:	6890      	ldr	r0, [r2, #8]
 8021c68:	4a20      	ldr	r2, [pc, #128]	; (8021cec <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc4>)
 8021c6a:	6803      	ldr	r3, [r0, #0]
 8021c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021c6e:	4293      	cmp	r3, r2
 8021c70:	d116      	bne.n	8021ca0 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x78>
 8021c72:	4b1f      	ldr	r3, [pc, #124]	; (8021cf0 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc8>)
 8021c74:	7a02      	ldrb	r2, [r0, #8]
 8021c76:	429d      	cmp	r5, r3
 8021c78:	d119      	bne.n	8021cae <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 8021c7a:	23ff      	movs	r3, #255	; 0xff
 8021c7c:	f8cd 9000 	str.w	r9, [sp]
 8021c80:	9301      	str	r3, [sp, #4]
 8021c82:	4620      	mov	r0, r4
 8021c84:	ab06      	add	r3, sp, #24
 8021c86:	f7ff fa63 	bl	8021150 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6>
 8021c8a:	b008      	add	sp, #32
 8021c8c:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8021c90:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8021c92:	2800      	cmp	r0, #0
 8021c94:	d0e7      	beq.n	8021c66 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x3e>
 8021c96:	6803      	ldr	r3, [r0, #0]
 8021c98:	4a14      	ldr	r2, [pc, #80]	; (8021cec <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc4>)
 8021c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021c9c:	4293      	cmp	r3, r2
 8021c9e:	d0e8      	beq.n	8021c72 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x4a>
 8021ca0:	9105      	str	r1, [sp, #20]
 8021ca2:	4798      	blx	r3
 8021ca4:	4b12      	ldr	r3, [pc, #72]	; (8021cf0 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc8>)
 8021ca6:	4602      	mov	r2, r0
 8021ca8:	429d      	cmp	r5, r3
 8021caa:	9905      	ldr	r1, [sp, #20]
 8021cac:	d0e5      	beq.n	8021c7a <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x52>
 8021cae:	2600      	movs	r6, #0
 8021cb0:	23ff      	movs	r3, #255	; 0xff
 8021cb2:	f8cd 9000 	str.w	r9, [sp]
 8021cb6:	e9cd 3601 	strd	r3, r6, [sp, #4]
 8021cba:	4620      	mov	r0, r4
 8021cbc:	ab06      	add	r3, sp, #24
 8021cbe:	47a8      	blx	r5
 8021cc0:	b008      	add	sp, #32
 8021cc2:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8021cc6:	22ff      	movs	r2, #255	; 0xff
 8021cc8:	9701      	str	r7, [sp, #4]
 8021cca:	9200      	str	r2, [sp, #0]
 8021ccc:	464b      	mov	r3, r9
 8021cce:	4620      	mov	r0, r4
 8021cd0:	aa06      	add	r2, sp, #24
 8021cd2:	47b0      	blx	r6
 8021cd4:	b008      	add	sp, #32
 8021cd6:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8021cda:	bf00      	nop
 8021cdc:	201979e2 	.word	0x201979e2
 8021ce0:	201979e4 	.word	0x201979e4
 8021ce4:	201979e8 	.word	0x201979e8
 8021ce8:	08021281 	.word	0x08021281
 8021cec:	0801e2dd 	.word	0x0801e2dd
 8021cf0:	0802130d 	.word	0x0802130d

08021cf4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8021cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021cf8:	4604      	mov	r4, r0
 8021cfa:	4865      	ldr	r0, [pc, #404]	; (8021e90 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19c>)
 8021cfc:	460f      	mov	r7, r1
 8021cfe:	6800      	ldr	r0, [r0, #0]
 8021d00:	b093      	sub	sp, #76	; 0x4c
 8021d02:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 8021d06:	2902      	cmp	r1, #2
 8021d08:	f000 81f2 	beq.w	80220f0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3fc>
 8021d0c:	f10d 0948 	add.w	r9, sp, #72	; 0x48
 8021d10:	f829 3d1c 	strh.w	r3, [r9, #-28]!
 8021d14:	4648      	mov	r0, r9
 8021d16:	4615      	mov	r5, r2
 8021d18:	f7f9 fbbc 	bl	801b494 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021d1c:	6823      	ldr	r3, [r4, #0]
 8021d1e:	4a5d      	ldr	r2, [pc, #372]	; (8021e94 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1a0>)
 8021d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021d22:	4680      	mov	r8, r0
 8021d24:	4293      	cmp	r3, r2
 8021d26:	f040 81b5 	bne.w	8022094 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3a0>
 8021d2a:	7a20      	ldrb	r0, [r4, #8]
 8021d2c:	4580      	cmp	r8, r0
 8021d2e:	f040 81d9 	bne.w	80220e4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3f0>
 8021d32:	4648      	mov	r0, r9
 8021d34:	f7f9 fb2a 	bl	801b38c <_ZNK8touchgfx6Bitmap7getDataEv>
 8021d38:	4683      	mov	fp, r0
 8021d3a:	2800      	cmp	r0, #0
 8021d3c:	f000 81cc 	beq.w	80220d8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3e4>
 8021d40:	6823      	ldr	r3, [r4, #0]
 8021d42:	4648      	mov	r0, r9
 8021d44:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8021d48:	f7f9 fab8 	bl	801b2bc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8021d4c:	9005      	str	r0, [sp, #20]
 8021d4e:	4648      	mov	r0, r9
 8021d50:	f7f9 fae8 	bl	801b324 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8021d54:	4b50      	ldr	r3, [pc, #320]	; (8021e98 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1a4>)
 8021d56:	9006      	str	r0, [sp, #24]
 8021d58:	4598      	cmp	r8, r3
 8021d5a:	f040 818e 	bne.w	802207a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x386>
 8021d5e:	4b4c      	ldr	r3, [pc, #304]	; (8021e90 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19c>)
 8021d60:	681b      	ldr	r3, [r3, #0]
 8021d62:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8021d66:	2b02      	cmp	r3, #2
 8021d68:	f000 81c8 	beq.w	80220fc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x408>
 8021d6c:	f9b5 8000 	ldrsh.w	r8, [r5]
 8021d70:	88ab      	ldrh	r3, [r5, #4]
 8021d72:	fa1f fe88 	uxth.w	lr, r8
 8021d76:	4473      	add	r3, lr
 8021d78:	b29b      	uxth	r3, r3
 8021d7a:	b218      	sxth	r0, r3
 8021d7c:	4580      	cmp	r8, r0
 8021d7e:	f9b5 a002 	ldrsh.w	sl, [r5, #2]
 8021d82:	da2a      	bge.n	8021dda <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xe6>
 8021d84:	9a05      	ldr	r2, [sp, #20]
 8021d86:	eb0e 0102 	add.w	r1, lr, r2
 8021d8a:	b28a      	uxth	r2, r1
 8021d8c:	9207      	str	r2, [sp, #28]
 8021d8e:	f9bd c01c 	ldrsh.w	ip, [sp, #28]
 8021d92:	45e0      	cmp	r8, ip
 8021d94:	da21      	bge.n	8021dda <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xe6>
 8021d96:	88ea      	ldrh	r2, [r5, #6]
 8021d98:	fa1f f68a 	uxth.w	r6, sl
 8021d9c:	4432      	add	r2, r6
 8021d9e:	b292      	uxth	r2, r2
 8021da0:	b211      	sxth	r1, r2
 8021da2:	458a      	cmp	sl, r1
 8021da4:	9108      	str	r1, [sp, #32]
 8021da6:	da18      	bge.n	8021dda <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xe6>
 8021da8:	9906      	ldr	r1, [sp, #24]
 8021daa:	eb06 0901 	add.w	r9, r6, r1
 8021dae:	fa1f f989 	uxth.w	r9, r9
 8021db2:	fa0f f189 	sxth.w	r1, r9
 8021db6:	458a      	cmp	sl, r1
 8021db8:	9109      	str	r1, [sp, #36]	; 0x24
 8021dba:	da0e      	bge.n	8021dda <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xe6>
 8021dbc:	9907      	ldr	r1, [sp, #28]
 8021dbe:	4560      	cmp	r0, ip
 8021dc0:	bfc8      	it	gt
 8021dc2:	460b      	movgt	r3, r1
 8021dc4:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 8021dc8:	4281      	cmp	r1, r0
 8021dca:	bfc8      	it	gt
 8021dcc:	464a      	movgt	r2, r9
 8021dce:	eba3 030e 	sub.w	r3, r3, lr
 8021dd2:	1b92      	subs	r2, r2, r6
 8021dd4:	b21b      	sxth	r3, r3
 8021dd6:	b212      	sxth	r2, r2
 8021dd8:	e005      	b.n	8021de6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xf2>
 8021dda:	2200      	movs	r2, #0
 8021ddc:	4616      	mov	r6, r2
 8021dde:	4692      	mov	sl, r2
 8021de0:	4613      	mov	r3, r2
 8021de2:	4696      	mov	lr, r2
 8021de4:	4690      	mov	r8, r2
 8021de6:	f9b7 0000 	ldrsh.w	r0, [r7]
 8021dea:	88b9      	ldrh	r1, [r7, #4]
 8021dec:	4401      	add	r1, r0
 8021dee:	b289      	uxth	r1, r1
 8021df0:	fa0f f981 	sxth.w	r9, r1
 8021df4:	45c8      	cmp	r8, r9
 8021df6:	da55      	bge.n	8021ea4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b0>
 8021df8:	449e      	add	lr, r3
 8021dfa:	fa1f fe8e 	uxth.w	lr, lr
 8021dfe:	fa0f f38e 	sxth.w	r3, lr
 8021e02:	4298      	cmp	r0, r3
 8021e04:	9307      	str	r3, [sp, #28]
 8021e06:	da4d      	bge.n	8021ea4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b0>
 8021e08:	f9b7 c002 	ldrsh.w	ip, [r7, #2]
 8021e0c:	88fb      	ldrh	r3, [r7, #6]
 8021e0e:	4463      	add	r3, ip
 8021e10:	b29b      	uxth	r3, r3
 8021e12:	b21f      	sxth	r7, r3
 8021e14:	45ba      	cmp	sl, r7
 8021e16:	da45      	bge.n	8021ea4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b0>
 8021e18:	4416      	add	r6, r2
 8021e1a:	b2b2      	uxth	r2, r6
 8021e1c:	b216      	sxth	r6, r2
 8021e1e:	45b4      	cmp	ip, r6
 8021e20:	9608      	str	r6, [sp, #32]
 8021e22:	da3f      	bge.n	8021ea4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b0>
 8021e24:	4540      	cmp	r0, r8
 8021e26:	9e07      	ldr	r6, [sp, #28]
 8021e28:	bfb8      	it	lt
 8021e2a:	4640      	movlt	r0, r8
 8021e2c:	45d4      	cmp	ip, sl
 8021e2e:	bfb8      	it	lt
 8021e30:	46d4      	movlt	ip, sl
 8021e32:	45b1      	cmp	r9, r6
 8021e34:	bfc8      	it	gt
 8021e36:	4671      	movgt	r1, lr
 8021e38:	9e08      	ldr	r6, [sp, #32]
 8021e3a:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8021e9c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1a8>
 8021e3e:	42b7      	cmp	r7, r6
 8021e40:	bfc8      	it	gt
 8021e42:	4613      	movgt	r3, r2
 8021e44:	f8df e058 	ldr.w	lr, [pc, #88]	; 8021ea0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ac>
 8021e48:	b282      	uxth	r2, r0
 8021e4a:	eba3 030c 	sub.w	r3, r3, ip
 8021e4e:	1a8f      	subs	r7, r1, r2
 8021e50:	f8b8 a000 	ldrh.w	sl, [r8]
 8021e54:	f8be 9000 	ldrh.w	r9, [lr]
 8021e58:	b21b      	sxth	r3, r3
 8021e5a:	b23f      	sxth	r7, r7
 8021e5c:	2800      	cmp	r0, #0
 8021e5e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8021e62:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 8021e66:	f8ad c032 	strh.w	ip, [sp, #50]	; 0x32
 8021e6a:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
 8021e6e:	fa0f f88a 	sxth.w	r8, sl
 8021e72:	fa0f fe89 	sxth.w	lr, r9
 8021e76:	f280 8115 	bge.w	80220a4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3b0>
 8021e7a:	2200      	movs	r2, #0
 8021e7c:	f04f 0600 	mov.w	r6, #0
 8021e80:	b20f      	sxth	r7, r1
 8021e82:	4610      	mov	r0, r2
 8021e84:	4639      	mov	r1, r7
 8021e86:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
 8021e8a:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 8021e8e:	e01b      	b.n	8021ec8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d4>
 8021e90:	201979e8 	.word	0x201979e8
 8021e94:	0801e2dd 	.word	0x0801e2dd
 8021e98:	08021445 	.word	0x08021445
 8021e9c:	201979dc 	.word	0x201979dc
 8021ea0:	201979de 	.word	0x201979de
 8021ea4:	2300      	movs	r3, #0
 8021ea6:	489f      	ldr	r0, [pc, #636]	; (8022124 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x430>)
 8021ea8:	499f      	ldr	r1, [pc, #636]	; (8022128 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x434>)
 8021eaa:	f8b0 a000 	ldrh.w	sl, [r0]
 8021eae:	f8b1 9000 	ldrh.w	r9, [r1]
 8021eb2:	461a      	mov	r2, r3
 8021eb4:	469c      	mov	ip, r3
 8021eb6:	4618      	mov	r0, r3
 8021eb8:	4619      	mov	r1, r3
 8021eba:	461f      	mov	r7, r3
 8021ebc:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8021ec0:	fa0f f88a 	sxth.w	r8, sl
 8021ec4:	fa0f fe89 	sxth.w	lr, r9
 8021ec8:	eba8 0000 	sub.w	r0, r8, r0
 8021ecc:	4288      	cmp	r0, r1
 8021ece:	da04      	bge.n	8021eda <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1e6>
 8021ed0:	ebaa 0702 	sub.w	r7, sl, r2
 8021ed4:	b23f      	sxth	r7, r7
 8021ed6:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
 8021eda:	f1bc 0f00 	cmp.w	ip, #0
 8021ede:	f2c0 80c2 	blt.w	8022066 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x372>
 8021ee2:	4661      	mov	r1, ip
 8021ee4:	ebae 0e01 	sub.w	lr, lr, r1
 8021ee8:	4573      	cmp	r3, lr
 8021eea:	dd04      	ble.n	8021ef6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x202>
 8021eec:	eba9 030c 	sub.w	r3, r9, ip
 8021ef0:	b21b      	sxth	r3, r3
 8021ef2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8021ef6:	2f00      	cmp	r7, #0
 8021ef8:	f340 80b1 	ble.w	802205e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x36a>
 8021efc:	2b00      	cmp	r3, #0
 8021efe:	f340 80ae 	ble.w	802205e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x36a>
 8021f02:	f04f 0e00 	mov.w	lr, #0
 8021f06:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8021f0a:	9b05      	ldr	r3, [sp, #20]
 8021f0c:	8868      	ldrh	r0, [r5, #2]
 8021f0e:	8829      	ldrh	r1, [r5, #0]
 8021f10:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8021f14:	9b06      	ldr	r3, [sp, #24]
 8021f16:	1a52      	subs	r2, r2, r1
 8021f18:	ebac 0c00 	sub.w	ip, ip, r0
 8021f1c:	a910      	add	r1, sp, #64	; 0x40
 8021f1e:	a80e      	add	r0, sp, #56	; 0x38
 8021f20:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 8021f24:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8021f28:	f8ad c03a 	strh.w	ip, [sp, #58]	; 0x3a
 8021f2c:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
 8021f30:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 8021f34:	f7f6 fc22 	bl	801877c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021f38:	a80c      	add	r0, sp, #48	; 0x30
 8021f3a:	f7f6 fbf7 	bl	801872c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021f3e:	a810      	add	r0, sp, #64	; 0x40
 8021f40:	f7f6 fbf4 	bl	801872c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021f44:	4b79      	ldr	r3, [pc, #484]	; (802212c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x438>)
 8021f46:	681b      	ldr	r3, [r3, #0]
 8021f48:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8021f4c:	2a00      	cmp	r2, #0
 8021f4e:	f040 80a4 	bne.w	802209a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3a6>
 8021f52:	6898      	ldr	r0, [r3, #8]
 8021f54:	6803      	ldr	r3, [r0, #0]
 8021f56:	4a76      	ldr	r2, [pc, #472]	; (8022130 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x43c>)
 8021f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021f5a:	4293      	cmp	r3, r2
 8021f5c:	f040 80b0 	bne.w	80220c0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3cc>
 8021f60:	7a00      	ldrb	r0, [r0, #8]
 8021f62:	2801      	cmp	r0, #1
 8021f64:	f000 80a5 	beq.w	80220b2 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3be>
 8021f68:	f0c0 809e 	bcc.w	80220a8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3b4>
 8021f6c:	2802      	cmp	r0, #2
 8021f6e:	f040 80d2 	bne.w	8022116 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x422>
 8021f72:	f04f 0810 	mov.w	r8, #16
 8021f76:	f04f 0a04 	mov.w	sl, #4
 8021f7a:	6823      	ldr	r3, [r4, #0]
 8021f7c:	4a6d      	ldr	r2, [pc, #436]	; (8022134 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x440>)
 8021f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021f80:	f9bd 7044 	ldrsh.w	r7, [sp, #68]	; 0x44
 8021f84:	4293      	cmp	r3, r2
 8021f86:	fb0a f707 	mul.w	r7, sl, r7
 8021f8a:	f040 809b 	bne.w	80220c4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d0>
 8021f8e:	4b6a      	ldr	r3, [pc, #424]	; (8022138 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x444>)
 8021f90:	881b      	ldrh	r3, [r3, #0]
 8021f92:	2b00      	cmp	r3, #0
 8021f94:	f000 80b8 	beq.w	8022108 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x414>
 8021f98:	7a22      	ldrb	r2, [r4, #8]
 8021f9a:	2a02      	cmp	r2, #2
 8021f9c:	f000 808e 	beq.w	80220bc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3c8>
 8021fa0:	2a01      	cmp	r2, #1
 8021fa2:	bf14      	ite	ne
 8021fa4:	2402      	movne	r4, #2
 8021fa6:	2403      	moveq	r4, #3
 8021fa8:	fb13 f404 	smulbb	r4, r3, r4
 8021fac:	b2a4      	uxth	r4, r4
 8021fae:	4a5f      	ldr	r2, [pc, #380]	; (802212c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x438>)
 8021fb0:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 8021fb4:	f9bd 903a 	ldrsh.w	r9, [sp, #58]	; 0x3a
 8021fb8:	6810      	ldr	r0, [r2, #0]
 8021fba:	fb07 3909 	mla	r9, r7, r9, r3
 8021fbe:	6803      	ldr	r3, [r0, #0]
 8021fc0:	4e5e      	ldr	r6, [pc, #376]	; (802213c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x448>)
 8021fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021fc4:	4798      	blx	r3
 8021fc6:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8021fca:	f9bd 5030 	ldrsh.w	r5, [sp, #48]	; 0x30
 8021fce:	fb04 f303 	mul.w	r3, r4, r3
 8021fd2:	fb0a 3505 	mla	r5, sl, r5, r3
 8021fd6:	4405      	add	r5, r0
 8021fd8:	6830      	ldr	r0, [r6, #0]
 8021fda:	44d9      	add	r9, fp
 8021fdc:	2800      	cmp	r0, #0
 8021fde:	d075      	beq.n	80220cc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d8>
 8021fe0:	f7fc f90a 	bl	801e1f8 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 8021fe4:	9700      	str	r7, [sp, #0]
 8021fe6:	2700      	movs	r7, #0
 8021fe8:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
 8021fec:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8021ff0:	4648      	mov	r0, r9
 8021ff2:	4643      	mov	r3, r8
 8021ff4:	f7f9 febe 	bl	801bd74 <nema_bind_dst_tex>
 8021ff8:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8021ffc:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8022000:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8022004:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8022008:	f7f9 fe00 	bl	801bc0c <nema_set_clip>
 802200c:	f04f 33ff 	mov.w	r3, #4294967295
 8022010:	2201      	movs	r2, #1
 8022012:	2100      	movs	r1, #0
 8022014:	f240 5004 	movw	r0, #1284	; 0x504
 8022018:	f7fb fc40 	bl	801d89c <nema_set_blend>
 802201c:	f9bd 2036 	ldrsh.w	r2, [sp, #54]	; 0x36
 8022020:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 8022024:	4643      	mov	r3, r8
 8022026:	4628      	mov	r0, r5
 8022028:	9400      	str	r4, [sp, #0]
 802202a:	9701      	str	r7, [sp, #4]
 802202c:	f7f9 fe2a 	bl	801bc84 <nema_bind_src_tex>
 8022030:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8022034:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8022038:	f7f9 ff64 	bl	801bf04 <nema_blit>
 802203c:	6830      	ldr	r0, [r6, #0]
 802203e:	2800      	cmp	r0, #0
 8022040:	d044      	beq.n	80220cc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d8>
 8022042:	f7fc f8f9 	bl	801e238 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 8022046:	6830      	ldr	r0, [r6, #0]
 8022048:	2800      	cmp	r0, #0
 802204a:	d03f      	beq.n	80220cc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d8>
 802204c:	6803      	ldr	r3, [r0, #0]
 802204e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022050:	4798      	blx	r3
 8022052:	6830      	ldr	r0, [r6, #0]
 8022054:	2800      	cmp	r0, #0
 8022056:	d039      	beq.n	80220cc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d8>
 8022058:	6803      	ldr	r3, [r0, #0]
 802205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802205c:	4798      	blx	r3
 802205e:	4658      	mov	r0, fp
 8022060:	b013      	add	sp, #76	; 0x4c
 8022062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022066:	2000      	movs	r0, #0
 8022068:	4463      	add	r3, ip
 802206a:	b21b      	sxth	r3, r3
 802206c:	4684      	mov	ip, r0
 802206e:	4601      	mov	r1, r0
 8022070:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8022074:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 8022078:	e734      	b.n	8021ee4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f0>
 802207a:	9b05      	ldr	r3, [sp, #20]
 802207c:	9002      	str	r0, [sp, #8]
 802207e:	e9cd b300 	strd	fp, r3, [sp]
 8022082:	a810      	add	r0, sp, #64	; 0x40
 8022084:	462b      	mov	r3, r5
 8022086:	463a      	mov	r2, r7
 8022088:	4621      	mov	r1, r4
 802208a:	47c0      	blx	r8
 802208c:	4658      	mov	r0, fp
 802208e:	b013      	add	sp, #76	; 0x4c
 8022090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022094:	4620      	mov	r0, r4
 8022096:	4798      	blx	r3
 8022098:	e648      	b.n	8021d2c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x38>
 802209a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 802209c:	2800      	cmp	r0, #0
 802209e:	f47f af59 	bne.w	8021f54 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x260>
 80220a2:	e756      	b.n	8021f52 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 80220a4:	4639      	mov	r1, r7
 80220a6:	e70f      	b.n	8021ec8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d4>
 80220a8:	f04f 0804 	mov.w	r8, #4
 80220ac:	f04f 0a02 	mov.w	sl, #2
 80220b0:	e763      	b.n	8021f7a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x286>
 80220b2:	f04f 0839 	mov.w	r8, #57	; 0x39
 80220b6:	f04f 0a03 	mov.w	sl, #3
 80220ba:	e75e      	b.n	8021f7a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x286>
 80220bc:	2404      	movs	r4, #4
 80220be:	e773      	b.n	8021fa8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2b4>
 80220c0:	4798      	blx	r3
 80220c2:	e74e      	b.n	8021f62 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26e>
 80220c4:	4620      	mov	r0, r4
 80220c6:	4798      	blx	r3
 80220c8:	4604      	mov	r4, r0
 80220ca:	e770      	b.n	8021fae <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ba>
 80220cc:	4b1c      	ldr	r3, [pc, #112]	; (8022140 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x44c>)
 80220ce:	4a1d      	ldr	r2, [pc, #116]	; (8022144 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x450>)
 80220d0:	217c      	movs	r1, #124	; 0x7c
 80220d2:	481d      	ldr	r0, [pc, #116]	; (8022148 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x454>)
 80220d4:	f006 fff2 	bl	80290bc <__assert_func>
 80220d8:	4b1c      	ldr	r3, [pc, #112]	; (802214c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x458>)
 80220da:	4a1d      	ldr	r2, [pc, #116]	; (8022150 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x45c>)
 80220dc:	21e9      	movs	r1, #233	; 0xe9
 80220de:	481d      	ldr	r0, [pc, #116]	; (8022154 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 80220e0:	f006 ffec 	bl	80290bc <__assert_func>
 80220e4:	4b1c      	ldr	r3, [pc, #112]	; (8022158 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x464>)
 80220e6:	4a1a      	ldr	r2, [pc, #104]	; (8022150 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x45c>)
 80220e8:	21e7      	movs	r1, #231	; 0xe7
 80220ea:	481a      	ldr	r0, [pc, #104]	; (8022154 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 80220ec:	f006 ffe6 	bl	80290bc <__assert_func>
 80220f0:	4b1a      	ldr	r3, [pc, #104]	; (802215c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x468>)
 80220f2:	4a17      	ldr	r2, [pc, #92]	; (8022150 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x45c>)
 80220f4:	21e5      	movs	r1, #229	; 0xe5
 80220f6:	4817      	ldr	r0, [pc, #92]	; (8022154 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 80220f8:	f006 ffe0 	bl	80290bc <__assert_func>
 80220fc:	4b17      	ldr	r3, [pc, #92]	; (802215c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x468>)
 80220fe:	4a18      	ldr	r2, [pc, #96]	; (8022160 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x46c>)
 8022100:	21f0      	movs	r1, #240	; 0xf0
 8022102:	4814      	ldr	r0, [pc, #80]	; (8022154 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 8022104:	f006 ffda 	bl	80290bc <__assert_func>
 8022108:	4b16      	ldr	r3, [pc, #88]	; (8022164 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x470>)
 802210a:	4a17      	ldr	r2, [pc, #92]	; (8022168 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x474>)
 802210c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8022110:	4816      	ldr	r0, [pc, #88]	; (802216c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x478>)
 8022112:	f006 ffd3 	bl	80290bc <__assert_func>
 8022116:	4b16      	ldr	r3, [pc, #88]	; (8022170 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x47c>)
 8022118:	4a11      	ldr	r2, [pc, #68]	; (8022160 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x46c>)
 802211a:	f44f 718d 	mov.w	r1, #282	; 0x11a
 802211e:	480d      	ldr	r0, [pc, #52]	; (8022154 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 8022120:	f006 ffcc 	bl	80290bc <__assert_func>
 8022124:	201979dc 	.word	0x201979dc
 8022128:	201979de 	.word	0x201979de
 802212c:	201979e8 	.word	0x201979e8
 8022130:	0801e2dd 	.word	0x0801e2dd
 8022134:	0801febd 	.word	0x0801febd
 8022138:	201979e2 	.word	0x201979e2
 802213c:	20197c18 	.word	0x20197c18
 8022140:	0802bf28 	.word	0x0802bf28
 8022144:	0802c730 	.word	0x0802c730
 8022148:	0802bf50 	.word	0x0802bf50
 802214c:	0802c320 	.word	0x0802c320
 8022150:	0802d044 	.word	0x0802d044
 8022154:	0802bfcc 	.word	0x0802bfcc
 8022158:	0802c2c8 	.word	0x0802c2c8
 802215c:	0802c170 	.word	0x0802c170
 8022160:	0802cfb0 	.word	0x0802cfb0
 8022164:	0802c4a0 	.word	0x0802c4a0
 8022168:	0802d25c 	.word	0x0802d25c
 802216c:	0802c4e4 	.word	0x0802c4e4
 8022170:	0802c274 	.word	0x0802c274

08022174 <_ZN8touchgfx8LCDGPU2DC1Ev>:
 8022174:	b410      	push	{r4}
 8022176:	2400      	movs	r4, #0
 8022178:	220d      	movs	r2, #13
 802217a:	4903      	ldr	r1, [pc, #12]	; (8022188 <_ZN8touchgfx8LCDGPU2DC1Ev+0x14>)
 802217c:	7202      	strb	r2, [r0, #8]
 802217e:	e9c0 1400 	strd	r1, r4, [r0]
 8022182:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022186:	4770      	bx	lr
 8022188:	0802c6d8 	.word	0x0802c6d8

0802218c <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE>:
 802218c:	2902      	cmp	r1, #2
 802218e:	d906      	bls.n	802219e <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE+0x12>
 8022190:	b508      	push	{r3, lr}
 8022192:	4a04      	ldr	r2, [pc, #16]	; (80221a4 <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE+0x18>)
 8022194:	4b04      	ldr	r3, [pc, #16]	; (80221a8 <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE+0x1c>)
 8022196:	212a      	movs	r1, #42	; 0x2a
 8022198:	4804      	ldr	r0, [pc, #16]	; (80221ac <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE+0x20>)
 802219a:	f006 ff8f 	bl	80290bc <__assert_func>
 802219e:	7201      	strb	r1, [r0, #8]
 80221a0:	4770      	bx	lr
 80221a2:	bf00      	nop
 80221a4:	0802ca48 	.word	0x0802ca48
 80221a8:	0802be60 	.word	0x0802be60
 80221ac:	0802bfcc 	.word	0x0802bfcc

080221b0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h>:
 80221b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80221b4:	b093      	sub	sp, #76	; 0x4c
 80221b6:	4691      	mov	r9, r2
 80221b8:	468a      	mov	sl, r1
 80221ba:	8812      	ldrh	r2, [r2, #0]
 80221bc:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
 80221c0:	461c      	mov	r4, r3
 80221c2:	910a      	str	r1, [sp, #40]	; 0x28
 80221c4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80221c6:	2a00      	cmp	r2, #0
 80221c8:	f040 8109 	bne.w	80223de <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x22e>
 80221cc:	6820      	ldr	r0, [r4, #0]
 80221ce:	6861      	ldr	r1, [r4, #4]
 80221d0:	aa0e      	add	r2, sp, #56	; 0x38
 80221d2:	c203      	stmia	r2!, {r0, r1}
 80221d4:	6818      	ldr	r0, [r3, #0]
 80221d6:	6859      	ldr	r1, [r3, #4]
 80221d8:	aa10      	add	r2, sp, #64	; 0x40
 80221da:	c203      	stmia	r2!, {r0, r1}
 80221dc:	a80e      	add	r0, sp, #56	; 0x38
 80221de:	f7f6 faa5 	bl	801872c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80221e2:	4621      	mov	r1, r4
 80221e4:	a810      	add	r0, sp, #64	; 0x40
 80221e6:	f7f6 fac9 	bl	801877c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80221ea:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 80221ee:	f9bd 5042 	ldrsh.w	r5, [sp, #66]	; 0x42
 80221f2:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80221f6:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80221fa:	487c      	ldr	r0, [pc, #496]	; (80223ec <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 80221fc:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8022200:	4422      	add	r2, r4
 8022202:	442b      	add	r3, r5
 8022204:	6800      	ldr	r0, [r0, #0]
 8022206:	fb11 4105 	smlabb	r1, r1, r5, r4
 802220a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 802220e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8022212:	6802      	ldr	r2, [r0, #0]
 8022214:	4d76      	ldr	r5, [pc, #472]	; (80223f0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8022216:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 802221a:	448a      	add	sl, r1
 802221c:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8022220:	42ab      	cmp	r3, r5
 8022222:	910b      	str	r1, [sp, #44]	; 0x2c
 8022224:	f9bd 4046 	ldrsh.w	r4, [sp, #70]	; 0x46
 8022228:	f040 80a6 	bne.w	8022378 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1c8>
 802222c:	6841      	ldr	r1, [r0, #4]
 802222e:	4d71      	ldr	r5, [pc, #452]	; (80223f4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x244>)
 8022230:	680b      	ldr	r3, [r1, #0]
 8022232:	699b      	ldr	r3, [r3, #24]
 8022234:	42ab      	cmp	r3, r5
 8022236:	f040 80c4 	bne.w	80223c2 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x212>
 802223a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 802223c:	4798      	blx	r3
 802223e:	4b6e      	ldr	r3, [pc, #440]	; (80223f8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 8022240:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8022244:	881b      	ldrh	r3, [r3, #0]
 8022246:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 802224a:	fb03 f404 	mul.w	r4, r3, r4
 802224e:	fb03 1202 	mla	r2, r3, r2, r1
 8022252:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022256:	eb00 0244 	add.w	r2, r0, r4, lsl #1
 802225a:	4290      	cmp	r0, r2
 802225c:	920c      	str	r2, [sp, #48]	; 0x30
 802225e:	f080 8083 	bcs.w	8022368 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1b8>
 8022262:	f04f 0b04 	mov.w	fp, #4
 8022266:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022268:	0052      	lsls	r2, r2, #1
 802226a:	920d      	str	r2, [sp, #52]	; 0x34
 802226c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802226e:	eb00 0802 	add.w	r8, r0, r2
 8022272:	4580      	cmp	r8, r0
 8022274:	d96d      	bls.n	8022352 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1a2>
 8022276:	4684      	mov	ip, r0
 8022278:	f10a 3eff 	add.w	lr, sl, #4294967295
 802227c:	e03e      	b.n	80222fc <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x14c>
 802227e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022280:	f3c5 4707 	ubfx	r7, r5, #16, #8
 8022284:	fb02 f303 	mul.w	r3, r2, r3
 8022288:	1c59      	adds	r1, r3, #1
 802228a:	eb01 2323 	add.w	r3, r1, r3, asr #8
 802228e:	121b      	asrs	r3, r3, #8
 8022290:	43da      	mvns	r2, r3
 8022292:	b299      	uxth	r1, r3
 8022294:	b2f6      	uxtb	r6, r6
 8022296:	b2eb      	uxtb	r3, r5
 8022298:	fb17 f701 	smulbb	r7, r7, r1
 802229c:	f8bc 5000 	ldrh.w	r5, [ip]
 80222a0:	fb13 f301 	smulbb	r3, r3, r1
 80222a4:	fb16 f601 	smulbb	r6, r6, r1
 80222a8:	122c      	asrs	r4, r5, #8
 80222aa:	10e9      	asrs	r1, r5, #3
 80222ac:	00ed      	lsls	r5, r5, #3
 80222ae:	b2d2      	uxtb	r2, r2
 80222b0:	b2ed      	uxtb	r5, r5
 80222b2:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80222b6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80222ba:	fb04 7402 	mla	r4, r4, r2, r7
 80222be:	fb01 6102 	mla	r1, r1, r2, r6
 80222c2:	fb05 3202 	mla	r2, r5, r2, r3
 80222c6:	b2a4      	uxth	r4, r4
 80222c8:	b292      	uxth	r2, r2
 80222ca:	b289      	uxth	r1, r1
 80222cc:	1c55      	adds	r5, r2, #1
 80222ce:	1c67      	adds	r7, r4, #1
 80222d0:	1c4b      	adds	r3, r1, #1
 80222d2:	eb05 2512 	add.w	r5, r5, r2, lsr #8
 80222d6:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 80222da:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80222de:	f404 4278 	and.w	r2, r4, #63488	; 0xf800
 80222e2:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80222e6:	095b      	lsrs	r3, r3, #5
 80222e8:	432a      	orrs	r2, r5
 80222ea:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80222ee:	431a      	orrs	r2, r3
 80222f0:	f8ac 2000 	strh.w	r2, [ip]
 80222f4:	f10c 0c02 	add.w	ip, ip, #2
 80222f8:	45e0      	cmp	r8, ip
 80222fa:	d91f      	bls.n	802233c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x18c>
 80222fc:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 8022300:	fb1b b303 	smlabb	r3, fp, r3, fp
 8022304:	f859 5003 	ldr.w	r5, [r9, r3]
 8022308:	0e2b      	lsrs	r3, r5, #24
 802230a:	d0f3      	beq.n	80222f4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x144>
 802230c:	2bff      	cmp	r3, #255	; 0xff
 802230e:	ea4f 2615 	mov.w	r6, r5, lsr #8
 8022312:	d1b4      	bne.n	802227e <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0xce>
 8022314:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022316:	2aff      	cmp	r2, #255	; 0xff
 8022318:	d1b1      	bne.n	802227e <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0xce>
 802231a:	096b      	lsrs	r3, r5, #5
 802231c:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8022320:	f026 0607 	bic.w	r6, r6, #7
 8022324:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022328:	431e      	orrs	r6, r3
 802232a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 802232e:	4335      	orrs	r5, r6
 8022330:	f8ac 5000 	strh.w	r5, [ip]
 8022334:	f10c 0c02 	add.w	ip, ip, #2
 8022338:	45e0      	cmp	r8, ip
 802233a:	d8df      	bhi.n	80222fc <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x14c>
 802233c:	43c3      	mvns	r3, r0
 802233e:	4498      	add	r8, r3
 8022340:	4b2d      	ldr	r3, [pc, #180]	; (80223f8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 8022342:	ea4f 0858 	mov.w	r8, r8, lsr #1
 8022346:	f108 0801 	add.w	r8, r8, #1
 802234a:	881b      	ldrh	r3, [r3, #0]
 802234c:	eb00 0048 	add.w	r0, r0, r8, lsl #1
 8022350:	44c2      	add	sl, r8
 8022352:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022354:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8022358:	1b19      	subs	r1, r3, r4
 802235a:	1b12      	subs	r2, r2, r4
 802235c:	4492      	add	sl, r2
 802235e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022360:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8022364:	4282      	cmp	r2, r0
 8022366:	d881      	bhi.n	802226c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0xbc>
 8022368:	4b20      	ldr	r3, [pc, #128]	; (80223ec <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 802236a:	6818      	ldr	r0, [r3, #0]
 802236c:	6803      	ldr	r3, [r0, #0]
 802236e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022370:	4798      	blx	r3
 8022372:	b013      	add	sp, #76	; 0x4c
 8022374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022378:	4798      	blx	r3
 802237a:	4603      	mov	r3, r0
 802237c:	2b01      	cmp	r3, #1
 802237e:	d124      	bne.n	80223ca <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x21a>
 8022380:	4a1e      	ldr	r2, [pc, #120]	; (80223fc <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 8022382:	6810      	ldr	r0, [r2, #0]
 8022384:	b328      	cbz	r0, 80223d2 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x222>
 8022386:	2700      	movs	r7, #0
 8022388:	260b      	movs	r6, #11
 802238a:	4a1b      	ldr	r2, [pc, #108]	; (80223f8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 802238c:	b2a1      	uxth	r1, r4
 802238e:	8814      	ldrh	r4, [r2, #0]
 8022390:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8022394:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8022398:	e9cd 2101 	strd	r2, r1, [sp, #4]
 802239c:	9406      	str	r4, [sp, #24]
 802239e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80223a0:	f8bd 4042 	ldrh.w	r4, [sp, #66]	; 0x42
 80223a4:	9305      	str	r3, [sp, #20]
 80223a6:	9204      	str	r2, [sp, #16]
 80223a8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80223ac:	464a      	mov	r2, r9
 80223ae:	4651      	mov	r1, sl
 80223b0:	e9cd 6707 	strd	r6, r7, [sp, #28]
 80223b4:	9503      	str	r5, [sp, #12]
 80223b6:	9400      	str	r4, [sp, #0]
 80223b8:	f7fb ff46 	bl	801e248 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80223bc:	b013      	add	sp, #76	; 0x4c
 80223be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80223c2:	4608      	mov	r0, r1
 80223c4:	4798      	blx	r3
 80223c6:	4603      	mov	r3, r0
 80223c8:	e7d8      	b.n	802237c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1cc>
 80223ca:	4b08      	ldr	r3, [pc, #32]	; (80223ec <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 80223cc:	6818      	ldr	r0, [r3, #0]
 80223ce:	6802      	ldr	r2, [r0, #0]
 80223d0:	e733      	b.n	802223a <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 80223d2:	4b0b      	ldr	r3, [pc, #44]	; (8022400 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x250>)
 80223d4:	4a0b      	ldr	r2, [pc, #44]	; (8022404 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x254>)
 80223d6:	217c      	movs	r1, #124	; 0x7c
 80223d8:	480b      	ldr	r0, [pc, #44]	; (8022408 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 80223da:	f006 fe6f 	bl	80290bc <__assert_func>
 80223de:	4b0b      	ldr	r3, [pc, #44]	; (802240c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x25c>)
 80223e0:	4a0b      	ldr	r2, [pc, #44]	; (8022410 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x260>)
 80223e2:	f240 31c2 	movw	r1, #962	; 0x3c2
 80223e6:	480b      	ldr	r0, [pc, #44]	; (8022414 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x264>)
 80223e8:	f006 fe68 	bl	80290bc <__assert_func>
 80223ec:	201979e8 	.word	0x201979e8
 80223f0:	080023d9 	.word	0x080023d9
 80223f4:	08017771 	.word	0x08017771
 80223f8:	201979e2 	.word	0x201979e2
 80223fc:	20197c18 	.word	0x20197c18
 8022400:	0802bf28 	.word	0x0802bf28
 8022404:	0802c730 	.word	0x0802c730
 8022408:	0802bf50 	.word	0x0802bf50
 802240c:	0802c040 	.word	0x0802c040
 8022410:	0802cd60 	.word	0x0802cd60
 8022414:	0802bfcc 	.word	0x0802bfcc

08022418 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h>:
 8022418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802241c:	4691      	mov	r9, r2
 802241e:	8812      	ldrh	r2, [r2, #0]
 8022420:	b093      	sub	sp, #76	; 0x4c
 8022422:	2a01      	cmp	r2, #1
 8022424:	f89d 4074 	ldrb.w	r4, [sp, #116]	; 0x74
 8022428:	f040 8129 	bne.w	802267e <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x266>
 802242c:	b914      	cbnz	r4, 8022434 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1c>
 802242e:	b013      	add	sp, #76	; 0x4c
 8022430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022434:	461d      	mov	r5, r3
 8022436:	468a      	mov	sl, r1
 8022438:	6818      	ldr	r0, [r3, #0]
 802243a:	6859      	ldr	r1, [r3, #4]
 802243c:	ab0e      	add	r3, sp, #56	; 0x38
 802243e:	c303      	stmia	r3!, {r0, r1}
 8022440:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022442:	6818      	ldr	r0, [r3, #0]
 8022444:	6859      	ldr	r1, [r3, #4]
 8022446:	ab10      	add	r3, sp, #64	; 0x40
 8022448:	c303      	stmia	r3!, {r0, r1}
 802244a:	a80e      	add	r0, sp, #56	; 0x38
 802244c:	f7f6 f96e 	bl	801872c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022450:	4629      	mov	r1, r5
 8022452:	a810      	add	r0, sp, #64	; 0x40
 8022454:	f7f6 f992 	bl	801877c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022458:	f9bd 5040 	ldrsh.w	r5, [sp, #64]	; 0x40
 802245c:	f9bd 6042 	ldrsh.w	r6, [sp, #66]	; 0x42
 8022460:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8022464:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8022468:	488b      	ldr	r0, [pc, #556]	; (8022698 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x280>)
 802246a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 802246e:	442a      	add	r2, r5
 8022470:	4433      	add	r3, r6
 8022472:	6800      	ldr	r0, [r0, #0]
 8022474:	fb11 5106 	smlabb	r1, r1, r6, r5
 8022478:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 802247c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8022480:	6802      	ldr	r2, [r0, #0]
 8022482:	4e86      	ldr	r6, [pc, #536]	; (802269c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x284>)
 8022484:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 8022488:	448a      	add	sl, r1
 802248a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 802248e:	42b3      	cmp	r3, r6
 8022490:	910b      	str	r1, [sp, #44]	; 0x2c
 8022492:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 8022496:	f040 80c8 	bne.w	802262a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x212>
 802249a:	6841      	ldr	r1, [r0, #4]
 802249c:	4e80      	ldr	r6, [pc, #512]	; (80226a0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x288>)
 802249e:	680b      	ldr	r3, [r1, #0]
 80224a0:	699b      	ldr	r3, [r3, #24]
 80224a2:	42b3      	cmp	r3, r6
 80224a4:	f040 80e4 	bne.w	8022670 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x258>
 80224a8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80224aa:	4798      	blx	r3
 80224ac:	4b7d      	ldr	r3, [pc, #500]	; (80226a4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 80224ae:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 80224b2:	881b      	ldrh	r3, [r3, #0]
 80224b4:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 80224b8:	2cff      	cmp	r4, #255	; 0xff
 80224ba:	fb03 1202 	mla	r2, r3, r2, r1
 80224be:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80224c2:	d06f      	beq.n	80225a4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x18c>
 80224c4:	43e2      	mvns	r2, r4
 80224c6:	fb05 f503 	mul.w	r5, r5, r3
 80224ca:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 80224ce:	4288      	cmp	r0, r1
 80224d0:	910c      	str	r1, [sp, #48]	; 0x30
 80224d2:	b2d2      	uxtb	r2, r2
 80224d4:	d25e      	bcs.n	8022594 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x17c>
 80224d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80224d8:	fa1f f884 	uxth.w	r8, r4
 80224dc:	0049      	lsls	r1, r1, #1
 80224de:	b292      	uxth	r2, r2
 80224e0:	910d      	str	r1, [sp, #52]	; 0x34
 80224e2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80224e4:	eb00 0b01 	add.w	fp, r0, r1
 80224e8:	4583      	cmp	fp, r0
 80224ea:	d948      	bls.n	802257e <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x166>
 80224ec:	4684      	mov	ip, r0
 80224ee:	f10a 3eff 	add.w	lr, sl, #4294967295
 80224f2:	2103      	movs	r1, #3
 80224f4:	2404      	movs	r4, #4
 80224f6:	f81e 6f01 	ldrb.w	r6, [lr, #1]!
 80224fa:	f8bc 3000 	ldrh.w	r3, [ip]
 80224fe:	fb11 4606 	smlabb	r6, r1, r6, r4
 8022502:	eb09 0106 	add.w	r1, r9, r6
 8022506:	788d      	ldrb	r5, [r1, #2]
 8022508:	784f      	ldrb	r7, [r1, #1]
 802250a:	00dc      	lsls	r4, r3, #3
 802250c:	b2e4      	uxtb	r4, r4
 802250e:	fb14 f402 	smulbb	r4, r4, r2
 8022512:	fb15 f508 	smulbb	r5, r5, r8
 8022516:	fb17 f708 	smulbb	r7, r7, r8
 802251a:	f819 6006 	ldrb.w	r6, [r9, r6]
 802251e:	1219      	asrs	r1, r3, #8
 8022520:	10db      	asrs	r3, r3, #3
 8022522:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022526:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802252a:	fb06 4608 	mla	r6, r6, r8, r4
 802252e:	fb01 5102 	mla	r1, r1, r2, r5
 8022532:	fb03 7302 	mla	r3, r3, r2, r7
 8022536:	b2b6      	uxth	r6, r6
 8022538:	b29b      	uxth	r3, r3
 802253a:	b28d      	uxth	r5, r1
 802253c:	1c5c      	adds	r4, r3, #1
 802253e:	1c69      	adds	r1, r5, #1
 8022540:	1c77      	adds	r7, r6, #1
 8022542:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8022546:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 802254a:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 802254e:	f401 4378 	and.w	r3, r1, #63488	; 0xf800
 8022552:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8022556:	0961      	lsrs	r1, r4, #5
 8022558:	4333      	orrs	r3, r6
 802255a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802255e:	430b      	orrs	r3, r1
 8022560:	f82c 3b02 	strh.w	r3, [ip], #2
 8022564:	45e3      	cmp	fp, ip
 8022566:	d8c4      	bhi.n	80224f2 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0xda>
 8022568:	43c3      	mvns	r3, r0
 802256a:	449b      	add	fp, r3
 802256c:	4b4d      	ldr	r3, [pc, #308]	; (80226a4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 802256e:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 8022572:	f10b 0b01 	add.w	fp, fp, #1
 8022576:	881b      	ldrh	r3, [r3, #0]
 8022578:	eb00 004b 	add.w	r0, r0, fp, lsl #1
 802257c:	44da      	add	sl, fp
 802257e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8022580:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8022584:	1b5c      	subs	r4, r3, r5
 8022586:	1b49      	subs	r1, r1, r5
 8022588:	448a      	add	sl, r1
 802258a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802258c:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8022590:	4281      	cmp	r1, r0
 8022592:	d8a6      	bhi.n	80224e2 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0xca>
 8022594:	4b40      	ldr	r3, [pc, #256]	; (8022698 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x280>)
 8022596:	6818      	ldr	r0, [r3, #0]
 8022598:	6803      	ldr	r3, [r0, #0]
 802259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802259c:	4798      	blx	r3
 802259e:	b013      	add	sp, #76	; 0x4c
 80225a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225a4:	fb05 f503 	mul.w	r5, r5, r3
 80225a8:	eb00 0e45 	add.w	lr, r0, r5, lsl #1
 80225ac:	4570      	cmp	r0, lr
 80225ae:	d2f1      	bcs.n	8022594 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x17c>
 80225b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80225b2:	f04f 0c03 	mov.w	ip, #3
 80225b6:	2704      	movs	r7, #4
 80225b8:	4693      	mov	fp, r2
 80225ba:	0051      	lsls	r1, r2, #1
 80225bc:	4e3a      	ldr	r6, [pc, #232]	; (80226a8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x290>)
 80225be:	910b      	str	r1, [sp, #44]	; 0x2c
 80225c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80225c2:	eb00 0802 	add.w	r8, r0, r2
 80225c6:	4580      	cmp	r8, r0
 80225c8:	d923      	bls.n	8022612 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1fa>
 80225ca:	4604      	mov	r4, r0
 80225cc:	f10a 35ff 	add.w	r5, sl, #4294967295
 80225d0:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80225d4:	fb1c 7202 	smlabb	r2, ip, r2, r7
 80225d8:	eb09 0302 	add.w	r3, r9, r2
 80225dc:	7859      	ldrb	r1, [r3, #1]
 80225de:	789b      	ldrb	r3, [r3, #2]
 80225e0:	00c9      	lsls	r1, r1, #3
 80225e2:	f819 2002 	ldrb.w	r2, [r9, r2]
 80225e6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80225ea:	ea06 2303 	and.w	r3, r6, r3, lsl #8
 80225ee:	430b      	orrs	r3, r1
 80225f0:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 80225f4:	f824 3b02 	strh.w	r3, [r4], #2
 80225f8:	45a0      	cmp	r8, r4
 80225fa:	d8e9      	bhi.n	80225d0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1b8>
 80225fc:	43c3      	mvns	r3, r0
 80225fe:	4498      	add	r8, r3
 8022600:	4b28      	ldr	r3, [pc, #160]	; (80226a4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 8022602:	ea4f 0858 	mov.w	r8, r8, lsr #1
 8022606:	f108 0801 	add.w	r8, r8, #1
 802260a:	881b      	ldrh	r3, [r3, #0]
 802260c:	eb00 0048 	add.w	r0, r0, r8, lsl #1
 8022610:	44c2      	add	sl, r8
 8022612:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8022616:	eba3 010b 	sub.w	r1, r3, fp
 802261a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 802261e:	eba2 020b 	sub.w	r2, r2, fp
 8022622:	4586      	cmp	lr, r0
 8022624:	4492      	add	sl, r2
 8022626:	d8cb      	bhi.n	80225c0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1a8>
 8022628:	e7b4      	b.n	8022594 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x17c>
 802262a:	4798      	blx	r3
 802262c:	2801      	cmp	r0, #1
 802262e:	d122      	bne.n	8022676 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x25e>
 8022630:	4b1e      	ldr	r3, [pc, #120]	; (80226ac <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x294>)
 8022632:	6818      	ldr	r0, [r3, #0]
 8022634:	b350      	cbz	r0, 802268c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x274>
 8022636:	2600      	movs	r6, #0
 8022638:	270b      	movs	r7, #11
 802263a:	4b1a      	ldr	r3, [pc, #104]	; (80226a4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 802263c:	b2aa      	uxth	r2, r5
 802263e:	881d      	ldrh	r5, [r3, #0]
 8022640:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8022644:	9404      	str	r4, [sp, #16]
 8022646:	9506      	str	r5, [sp, #24]
 8022648:	f8bd 4042 	ldrh.w	r4, [sp, #66]	; 0x42
 802264c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8022650:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8022654:	4651      	mov	r1, sl
 8022656:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 802265a:	464a      	mov	r2, r9
 802265c:	9608      	str	r6, [sp, #32]
 802265e:	9605      	str	r6, [sp, #20]
 8022660:	9707      	str	r7, [sp, #28]
 8022662:	9503      	str	r5, [sp, #12]
 8022664:	9400      	str	r4, [sp, #0]
 8022666:	f7fb fdef 	bl	801e248 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 802266a:	b013      	add	sp, #76	; 0x4c
 802266c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022670:	4608      	mov	r0, r1
 8022672:	4798      	blx	r3
 8022674:	e7da      	b.n	802262c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x214>
 8022676:	4b08      	ldr	r3, [pc, #32]	; (8022698 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x280>)
 8022678:	6818      	ldr	r0, [r3, #0]
 802267a:	6802      	ldr	r2, [r0, #0]
 802267c:	e714      	b.n	80224a8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x90>
 802267e:	4b0c      	ldr	r3, [pc, #48]	; (80226b0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x298>)
 8022680:	4a0c      	ldr	r2, [pc, #48]	; (80226b4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x29c>)
 8022682:	f240 411b 	movw	r1, #1051	; 0x41b
 8022686:	480c      	ldr	r0, [pc, #48]	; (80226b8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2a0>)
 8022688:	f006 fd18 	bl	80290bc <__assert_func>
 802268c:	4b0b      	ldr	r3, [pc, #44]	; (80226bc <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2a4>)
 802268e:	4a0c      	ldr	r2, [pc, #48]	; (80226c0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2a8>)
 8022690:	217c      	movs	r1, #124	; 0x7c
 8022692:	480c      	ldr	r0, [pc, #48]	; (80226c4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2ac>)
 8022694:	f006 fd12 	bl	80290bc <__assert_func>
 8022698:	201979e8 	.word	0x201979e8
 802269c:	080023d9 	.word	0x080023d9
 80226a0:	08017771 	.word	0x08017771
 80226a4:	201979e2 	.word	0x201979e2
 80226a8:	fffff800 	.word	0xfffff800
 80226ac:	20197c18 	.word	0x20197c18
 80226b0:	0802bff0 	.word	0x0802bff0
 80226b4:	0802cbc8 	.word	0x0802cbc8
 80226b8:	0802bfcc 	.word	0x0802bfcc
 80226bc:	0802bf28 	.word	0x0802bf28
 80226c0:	0802c730 	.word	0x0802c730
 80226c4:	0802bf50 	.word	0x0802bf50

080226c8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h>:
 80226c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226cc:	4690      	mov	r8, r2
 80226ce:	8812      	ldrh	r2, [r2, #0]
 80226d0:	b093      	sub	sp, #76	; 0x4c
 80226d2:	461c      	mov	r4, r3
 80226d4:	f89d a074 	ldrb.w	sl, [sp, #116]	; 0x74
 80226d8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80226da:	2a00      	cmp	r2, #0
 80226dc:	f040 80fb 	bne.w	80228d6 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x20e>
 80226e0:	4689      	mov	r9, r1
 80226e2:	6820      	ldr	r0, [r4, #0]
 80226e4:	6861      	ldr	r1, [r4, #4]
 80226e6:	aa0e      	add	r2, sp, #56	; 0x38
 80226e8:	c203      	stmia	r2!, {r0, r1}
 80226ea:	6818      	ldr	r0, [r3, #0]
 80226ec:	6859      	ldr	r1, [r3, #4]
 80226ee:	aa10      	add	r2, sp, #64	; 0x40
 80226f0:	c203      	stmia	r2!, {r0, r1}
 80226f2:	a80e      	add	r0, sp, #56	; 0x38
 80226f4:	f7f6 f81a 	bl	801872c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80226f8:	4621      	mov	r1, r4
 80226fa:	a810      	add	r0, sp, #64	; 0x40
 80226fc:	f7f6 f83e 	bl	801877c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022700:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 8022704:	f9bd 5042 	ldrsh.w	r5, [sp, #66]	; 0x42
 8022708:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 802270c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8022710:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8022714:	4873      	ldr	r0, [pc, #460]	; (80228e4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x21c>)
 8022716:	fb11 4105 	smlabb	r1, r1, r5, r4
 802271a:	4422      	add	r2, r4
 802271c:	442b      	add	r3, r5
 802271e:	6800      	ldr	r0, [r0, #0]
 8022720:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8022724:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8022728:	6802      	ldr	r2, [r0, #0]
 802272a:	4489      	add	r9, r1
 802272c:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8022730:	4c6d      	ldr	r4, [pc, #436]	; (80228e8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x220>)
 8022732:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 8022736:	910a      	str	r1, [sp, #40]	; 0x28
 8022738:	f9bd 1046 	ldrsh.w	r1, [sp, #70]	; 0x46
 802273c:	42a3      	cmp	r3, r4
 802273e:	910c      	str	r1, [sp, #48]	; 0x30
 8022740:	f040 8096 	bne.w	8022870 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1a8>
 8022744:	6841      	ldr	r1, [r0, #4]
 8022746:	4c69      	ldr	r4, [pc, #420]	; (80228ec <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x224>)
 8022748:	680b      	ldr	r3, [r1, #0]
 802274a:	699b      	ldr	r3, [r3, #24]
 802274c:	42a3      	cmp	r3, r4
 802274e:	f040 80b4 	bne.w	80228ba <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1f2>
 8022752:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8022754:	4798      	blx	r3
 8022756:	4b66      	ldr	r3, [pc, #408]	; (80228f0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x228>)
 8022758:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 802275c:	881b      	ldrh	r3, [r3, #0]
 802275e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8022762:	fb01 2303 	mla	r3, r1, r3, r2
 8022766:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802276a:	4418      	add	r0, r3
 802276c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802276e:	2b00      	cmp	r3, #0
 8022770:	dd76      	ble.n	8022860 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x198>
 8022772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022774:	2b00      	cmp	r3, #0
 8022776:	dd73      	ble.n	8022860 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x198>
 8022778:	2200      	movs	r2, #0
 802277a:	2104      	movs	r1, #4
 802277c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022780:	920b      	str	r2, [sp, #44]	; 0x2c
 8022782:	930d      	str	r3, [sp, #52]	; 0x34
 8022784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022786:	464e      	mov	r6, r9
 8022788:	1cc5      	adds	r5, r0, #3
 802278a:	eb09 0c03 	add.w	ip, r9, r3
 802278e:	e039      	b.n	8022804 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x13c>
 8022790:	fb0a f303 	mul.w	r3, sl, r3
 8022794:	1c5a      	adds	r2, r3, #1
 8022796:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802279a:	121b      	asrs	r3, r3, #8
 802279c:	43df      	mvns	r7, r3
 802279e:	b29b      	uxth	r3, r3
 80227a0:	fb1e f203 	smulbb	r2, lr, r3
 80227a4:	f815 ec03 	ldrb.w	lr, [r5, #-3]
 80227a8:	b2ff      	uxtb	r7, r7
 80227aa:	fb0e 2e07 	mla	lr, lr, r7, r2
 80227ae:	fa1f fe8e 	uxth.w	lr, lr
 80227b2:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 80227b6:	f10e 0b01 	add.w	fp, lr, #1
 80227ba:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80227be:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80227c2:	fb12 fb07 	smulbb	fp, r2, r7
 80227c6:	f805 ec03 	strb.w	lr, [r5, #-3]
 80227ca:	7862      	ldrb	r2, [r4, #1]
 80227cc:	f815 ec01 	ldrb.w	lr, [r5, #-1]
 80227d0:	fb02 b203 	mla	r2, r2, r3, fp
 80227d4:	b292      	uxth	r2, r2
 80227d6:	f102 0b01 	add.w	fp, r2, #1
 80227da:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80227de:	1212      	asrs	r2, r2, #8
 80227e0:	fb1e f707 	smulbb	r7, lr, r7
 80227e4:	f805 2c02 	strb.w	r2, [r5, #-2]
 80227e8:	78a2      	ldrb	r2, [r4, #2]
 80227ea:	fb02 7303 	mla	r3, r2, r3, r7
 80227ee:	b29b      	uxth	r3, r3
 80227f0:	1c5a      	adds	r2, r3, #1
 80227f2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80227f6:	121b      	asrs	r3, r3, #8
 80227f8:	f805 3c01 	strb.w	r3, [r5, #-1]
 80227fc:	45b4      	cmp	ip, r6
 80227fe:	f105 0503 	add.w	r5, r5, #3
 8022802:	d01b      	beq.n	802283c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x174>
 8022804:	f816 2b01 	ldrb.w	r2, [r6], #1
 8022808:	fb11 1202 	smlabb	r2, r1, r2, r1
 802280c:	eb08 0402 	add.w	r4, r8, r2
 8022810:	78e3      	ldrb	r3, [r4, #3]
 8022812:	2b00      	cmp	r3, #0
 8022814:	d0f2      	beq.n	80227fc <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x134>
 8022816:	2bff      	cmp	r3, #255	; 0xff
 8022818:	f818 e002 	ldrb.w	lr, [r8, r2]
 802281c:	d1b8      	bne.n	8022790 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xc8>
 802281e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022822:	d1b5      	bne.n	8022790 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xc8>
 8022824:	f805 ec03 	strb.w	lr, [r5, #-3]
 8022828:	7863      	ldrb	r3, [r4, #1]
 802282a:	45b4      	cmp	ip, r6
 802282c:	f805 3c02 	strb.w	r3, [r5, #-2]
 8022830:	78a3      	ldrb	r3, [r4, #2]
 8022832:	f105 0503 	add.w	r5, r5, #3
 8022836:	f805 3c04 	strb.w	r3, [r5, #-4]
 802283a:	d1e3      	bne.n	8022804 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x13c>
 802283c:	4b2c      	ldr	r3, [pc, #176]	; (80228f0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x228>)
 802283e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022840:	881b      	ldrh	r3, [r3, #0]
 8022842:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022844:	1a9b      	subs	r3, r3, r2
 8022846:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802284a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802284c:	442b      	add	r3, r5
 802284e:	4418      	add	r0, r3
 8022850:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022852:	3401      	adds	r4, #1
 8022854:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8022858:	42a3      	cmp	r3, r4
 802285a:	940b      	str	r4, [sp, #44]	; 0x2c
 802285c:	4491      	add	r9, r2
 802285e:	d191      	bne.n	8022784 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xbc>
 8022860:	4b20      	ldr	r3, [pc, #128]	; (80228e4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x21c>)
 8022862:	6818      	ldr	r0, [r3, #0]
 8022864:	6803      	ldr	r3, [r0, #0]
 8022866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022868:	4798      	blx	r3
 802286a:	b013      	add	sp, #76	; 0x4c
 802286c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022870:	4798      	blx	r3
 8022872:	4602      	mov	r2, r0
 8022874:	2a01      	cmp	r2, #1
 8022876:	d124      	bne.n	80228c2 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1fa>
 8022878:	4b1e      	ldr	r3, [pc, #120]	; (80228f4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x22c>)
 802287a:	6818      	ldr	r0, [r3, #0]
 802287c:	b328      	cbz	r0, 80228ca <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x202>
 802287e:	260b      	movs	r6, #11
 8022880:	4b1b      	ldr	r3, [pc, #108]	; (80228f0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x228>)
 8022882:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8022886:	881f      	ldrh	r7, [r3, #0]
 8022888:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 802288c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8022890:	f8bd 4042 	ldrh.w	r4, [sp, #66]	; 0x42
 8022894:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8022898:	9208      	str	r2, [sp, #32]
 802289a:	9205      	str	r2, [sp, #20]
 802289c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80228a0:	f8cd a010 	str.w	sl, [sp, #16]
 80228a4:	4642      	mov	r2, r8
 80228a6:	4649      	mov	r1, r9
 80228a8:	e9cd 7606 	strd	r7, r6, [sp, #24]
 80228ac:	9503      	str	r5, [sp, #12]
 80228ae:	9400      	str	r4, [sp, #0]
 80228b0:	f7fb fcca 	bl	801e248 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80228b4:	b013      	add	sp, #76	; 0x4c
 80228b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80228ba:	4608      	mov	r0, r1
 80228bc:	4798      	blx	r3
 80228be:	4602      	mov	r2, r0
 80228c0:	e7d8      	b.n	8022874 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1ac>
 80228c2:	4b08      	ldr	r3, [pc, #32]	; (80228e4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x21c>)
 80228c4:	6818      	ldr	r0, [r3, #0]
 80228c6:	6802      	ldr	r2, [r0, #0]
 80228c8:	e743      	b.n	8022752 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 80228ca:	4b0b      	ldr	r3, [pc, #44]	; (80228f8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x230>)
 80228cc:	4a0b      	ldr	r2, [pc, #44]	; (80228fc <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 80228ce:	217c      	movs	r1, #124	; 0x7c
 80228d0:	480b      	ldr	r0, [pc, #44]	; (8022900 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x238>)
 80228d2:	f006 fbf3 	bl	80290bc <__assert_func>
 80228d6:	4b0b      	ldr	r3, [pc, #44]	; (8022904 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 80228d8:	4a0b      	ldr	r2, [pc, #44]	; (8022908 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 80228da:	f240 417d 	movw	r1, #1149	; 0x47d
 80228de:	480b      	ldr	r0, [pc, #44]	; (802290c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x244>)
 80228e0:	f006 fbec 	bl	80290bc <__assert_func>
 80228e4:	201979e8 	.word	0x201979e8
 80228e8:	080023d9 	.word	0x080023d9
 80228ec:	08017771 	.word	0x08017771
 80228f0:	201979e2 	.word	0x201979e2
 80228f4:	20197c18 	.word	0x20197c18
 80228f8:	0802bf28 	.word	0x0802bf28
 80228fc:	0802c730 	.word	0x0802c730
 8022900:	0802bf50 	.word	0x0802bf50
 8022904:	0802c040 	.word	0x0802c040
 8022908:	0802cdec 	.word	0x0802cdec
 802290c:	0802bfcc 	.word	0x0802bfcc

08022910 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h>:
 8022910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022914:	4617      	mov	r7, r2
 8022916:	b095      	sub	sp, #84	; 0x54
 8022918:	8812      	ldrh	r2, [r2, #0]
 802291a:	4688      	mov	r8, r1
 802291c:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
 8022920:	2a01      	cmp	r2, #1
 8022922:	461c      	mov	r4, r3
 8022924:	910d      	str	r1, [sp, #52]	; 0x34
 8022926:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022928:	f040 8105 	bne.w	8022b36 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x226>
 802292c:	6820      	ldr	r0, [r4, #0]
 802292e:	6861      	ldr	r1, [r4, #4]
 8022930:	aa10      	add	r2, sp, #64	; 0x40
 8022932:	c203      	stmia	r2!, {r0, r1}
 8022934:	6818      	ldr	r0, [r3, #0]
 8022936:	6859      	ldr	r1, [r3, #4]
 8022938:	aa12      	add	r2, sp, #72	; 0x48
 802293a:	c203      	stmia	r2!, {r0, r1}
 802293c:	a810      	add	r0, sp, #64	; 0x40
 802293e:	f7f5 fef5 	bl	801872c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022942:	4621      	mov	r1, r4
 8022944:	a812      	add	r0, sp, #72	; 0x48
 8022946:	f7f5 ff19 	bl	801877c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802294a:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
 802294e:	f9bd 504a 	ldrsh.w	r5, [sp, #74]	; 0x4a
 8022952:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8022956:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 802295a:	487a      	ldr	r0, [pc, #488]	; (8022b44 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 802295c:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8022960:	4422      	add	r2, r4
 8022962:	442b      	add	r3, r5
 8022964:	6800      	ldr	r0, [r0, #0]
 8022966:	fb11 4105 	smlabb	r1, r1, r5, r4
 802296a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 802296e:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 8022972:	6802      	ldr	r2, [r0, #0]
 8022974:	4c74      	ldr	r4, [pc, #464]	; (8022b48 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x238>)
 8022976:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 802297a:	4488      	add	r8, r1
 802297c:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 8022980:	42a3      	cmp	r3, r4
 8022982:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 8022986:	910c      	str	r1, [sp, #48]	; 0x30
 8022988:	f040 809f 	bne.w	8022aca <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x1ba>
 802298c:	6841      	ldr	r1, [r0, #4]
 802298e:	4c6f      	ldr	r4, [pc, #444]	; (8022b4c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 8022990:	680b      	ldr	r3, [r1, #0]
 8022992:	699b      	ldr	r3, [r3, #24]
 8022994:	42a3      	cmp	r3, r4
 8022996:	f040 80c0 	bne.w	8022b1a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x20a>
 802299a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 802299c:	4798      	blx	r3
 802299e:	4a6c      	ldr	r2, [pc, #432]	; (8022b50 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 80229a0:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 80229a4:	8814      	ldrh	r4, [r2, #0]
 80229a6:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 80229aa:	fb04 2303 	mla	r3, r4, r3, r2
 80229ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80229b2:	4418      	add	r0, r3
 80229b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80229b6:	2b00      	cmp	r3, #0
 80229b8:	dd67      	ble.n	8022a8a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x17a>
 80229ba:	2300      	movs	r3, #0
 80229bc:	f04f 0903 	mov.w	r9, #3
 80229c0:	2104      	movs	r1, #4
 80229c2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80229c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80229c6:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
 80229ca:	930e      	str	r3, [sp, #56]	; 0x38
 80229cc:	f1c5 02ff 	rsb	r2, r5, #255	; 0xff
 80229d0:	444b      	add	r3, r9
 80229d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80229d4:	b292      	uxth	r2, r2
 80229d6:	fa1f fc85 	uxth.w	ip, r5
 80229da:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80229de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80229e0:	2b00      	cmp	r3, #0
 80229e2:	dd43      	ble.n	8022a6c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x15c>
 80229e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80229e6:	2bff      	cmp	r3, #255	; 0xff
 80229e8:	d057      	beq.n	8022a9a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x18a>
 80229ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80229ec:	1cc5      	adds	r5, r0, #3
 80229ee:	f108 3eff 	add.w	lr, r8, #4294967295
 80229f2:	eb00 0a03 	add.w	sl, r0, r3
 80229f6:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 80229fa:	f815 6c03 	ldrb.w	r6, [r5, #-3]
 80229fe:	fb19 1303 	smlabb	r3, r9, r3, r1
 8022a02:	fb16 f402 	smulbb	r4, r6, r2
 8022a06:	5cfe      	ldrb	r6, [r7, r3]
 8022a08:	443b      	add	r3, r7
 8022a0a:	fb06 460c 	mla	r6, r6, ip, r4
 8022a0e:	b2b6      	uxth	r6, r6
 8022a10:	f815 4c02 	ldrb.w	r4, [r5, #-2]
 8022a14:	f106 0b01 	add.w	fp, r6, #1
 8022a18:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 8022a1c:	1236      	asrs	r6, r6, #8
 8022a1e:	fb14 fb02 	smulbb	fp, r4, r2
 8022a22:	f805 6c03 	strb.w	r6, [r5, #-3]
 8022a26:	785c      	ldrb	r4, [r3, #1]
 8022a28:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8022a2c:	fb04 b40c 	mla	r4, r4, ip, fp
 8022a30:	b2a4      	uxth	r4, r4
 8022a32:	f104 0b01 	add.w	fp, r4, #1
 8022a36:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8022a3a:	1224      	asrs	r4, r4, #8
 8022a3c:	fb16 f602 	smulbb	r6, r6, r2
 8022a40:	f805 4c02 	strb.w	r4, [r5, #-2]
 8022a44:	789b      	ldrb	r3, [r3, #2]
 8022a46:	3503      	adds	r5, #3
 8022a48:	fb03 630c 	mla	r3, r3, ip, r6
 8022a4c:	b29b      	uxth	r3, r3
 8022a4e:	1c5c      	adds	r4, r3, #1
 8022a50:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8022a54:	121b      	asrs	r3, r3, #8
 8022a56:	f805 3c04 	strb.w	r3, [r5, #-4]
 8022a5a:	45aa      	cmp	sl, r5
 8022a5c:	d1cb      	bne.n	80229f6 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0xe6>
 8022a5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022a60:	4418      	add	r0, r3
 8022a62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022a64:	4498      	add	r8, r3
 8022a66:	4b3a      	ldr	r3, [pc, #232]	; (8022b50 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8022a68:	881c      	ldrh	r4, [r3, #0]
 8022a6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022a6c:	f9bd 5044 	ldrsh.w	r5, [sp, #68]	; 0x44
 8022a70:	eba4 0e03 	sub.w	lr, r4, r3
 8022a74:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8022a76:	1aed      	subs	r5, r5, r3
 8022a78:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
 8022a7c:	4418      	add	r0, r3
 8022a7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022a80:	3601      	adds	r6, #1
 8022a82:	42b3      	cmp	r3, r6
 8022a84:	960b      	str	r6, [sp, #44]	; 0x2c
 8022a86:	44a8      	add	r8, r5
 8022a88:	d1a9      	bne.n	80229de <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0xce>
 8022a8a:	4b2e      	ldr	r3, [pc, #184]	; (8022b44 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8022a8c:	6818      	ldr	r0, [r3, #0]
 8022a8e:	6803      	ldr	r3, [r0, #0]
 8022a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022a92:	4798      	blx	r3
 8022a94:	b015      	add	sp, #84	; 0x54
 8022a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022a9c:	1cc4      	adds	r4, r0, #3
 8022a9e:	f108 35ff 	add.w	r5, r8, #4294967295
 8022aa2:	eb00 0e03 	add.w	lr, r0, r3
 8022aa6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8022aaa:	3403      	adds	r4, #3
 8022aac:	fb19 1303 	smlabb	r3, r9, r3, r1
 8022ab0:	5cfe      	ldrb	r6, [r7, r3]
 8022ab2:	443b      	add	r3, r7
 8022ab4:	f804 6c06 	strb.w	r6, [r4, #-6]
 8022ab8:	785e      	ldrb	r6, [r3, #1]
 8022aba:	f804 6c05 	strb.w	r6, [r4, #-5]
 8022abe:	789b      	ldrb	r3, [r3, #2]
 8022ac0:	f804 3c04 	strb.w	r3, [r4, #-4]
 8022ac4:	45a6      	cmp	lr, r4
 8022ac6:	d1ee      	bne.n	8022aa6 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x196>
 8022ac8:	e7c9      	b.n	8022a5e <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x14e>
 8022aca:	4798      	blx	r3
 8022acc:	4603      	mov	r3, r0
 8022ace:	2b01      	cmp	r3, #1
 8022ad0:	d127      	bne.n	8022b22 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x212>
 8022ad2:	4a20      	ldr	r2, [pc, #128]	; (8022b54 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x244>)
 8022ad4:	6810      	ldr	r0, [r2, #0]
 8022ad6:	b340      	cbz	r0, 8022b2a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x21a>
 8022ad8:	f04f 0c0b 	mov.w	ip, #11
 8022adc:	2600      	movs	r6, #0
 8022ade:	4a1c      	ldr	r2, [pc, #112]	; (8022b50 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8022ae0:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8022ae4:	8814      	ldrh	r4, [r2, #0]
 8022ae6:	fa1f f28a 	uxth.w	r2, sl
 8022aea:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8022aee:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 8022af2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022af4:	9406      	str	r4, [sp, #24]
 8022af6:	f8bd 404a 	ldrh.w	r4, [sp, #74]	; 0x4a
 8022afa:	9308      	str	r3, [sp, #32]
 8022afc:	9204      	str	r2, [sp, #16]
 8022afe:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8022b02:	463a      	mov	r2, r7
 8022b04:	4641      	mov	r1, r8
 8022b06:	f8cd c01c 	str.w	ip, [sp, #28]
 8022b0a:	9605      	str	r6, [sp, #20]
 8022b0c:	9503      	str	r5, [sp, #12]
 8022b0e:	9400      	str	r4, [sp, #0]
 8022b10:	f7fb fb9a 	bl	801e248 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8022b14:	b015      	add	sp, #84	; 0x54
 8022b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b1a:	4608      	mov	r0, r1
 8022b1c:	4798      	blx	r3
 8022b1e:	4603      	mov	r3, r0
 8022b20:	e7d5      	b.n	8022ace <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x1be>
 8022b22:	4b08      	ldr	r3, [pc, #32]	; (8022b44 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8022b24:	6818      	ldr	r0, [r3, #0]
 8022b26:	6802      	ldr	r2, [r0, #0]
 8022b28:	e737      	b.n	802299a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 8022b2a:	4b0b      	ldr	r3, [pc, #44]	; (8022b58 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 8022b2c:	4a0b      	ldr	r2, [pc, #44]	; (8022b5c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 8022b2e:	217c      	movs	r1, #124	; 0x7c
 8022b30:	480b      	ldr	r0, [pc, #44]	; (8022b60 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x250>)
 8022b32:	f006 fac3 	bl	80290bc <__assert_func>
 8022b36:	4b0b      	ldr	r3, [pc, #44]	; (8022b64 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x254>)
 8022b38:	4a0b      	ldr	r2, [pc, #44]	; (8022b68 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8022b3a:	f240 41c7 	movw	r1, #1223	; 0x4c7
 8022b3e:	480b      	ldr	r0, [pc, #44]	; (8022b6c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x25c>)
 8022b40:	f006 fabc 	bl	80290bc <__assert_func>
 8022b44:	201979e8 	.word	0x201979e8
 8022b48:	080023d9 	.word	0x080023d9
 8022b4c:	08017771 	.word	0x08017771
 8022b50:	201979e2 	.word	0x201979e2
 8022b54:	20197c18 	.word	0x20197c18
 8022b58:	0802bf28 	.word	0x0802bf28
 8022b5c:	0802c730 	.word	0x0802c730
 8022b60:	0802bf50 	.word	0x0802bf50
 8022b64:	0802bff0 	.word	0x0802bff0
 8022b68:	0802cc50 	.word	0x0802cc50
 8022b6c:	0802bfcc 	.word	0x0802bfcc

08022b70 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h>:
 8022b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b74:	4690      	mov	r8, r2
 8022b76:	8812      	ldrh	r2, [r2, #0]
 8022b78:	b095      	sub	sp, #84	; 0x54
 8022b7a:	2a01      	cmp	r2, #1
 8022b7c:	461c      	mov	r4, r3
 8022b7e:	f89d 907c 	ldrb.w	r9, [sp, #124]	; 0x7c
 8022b82:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022b84:	f040 8107 	bne.w	8022d96 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x226>
 8022b88:	468a      	mov	sl, r1
 8022b8a:	6820      	ldr	r0, [r4, #0]
 8022b8c:	6861      	ldr	r1, [r4, #4]
 8022b8e:	aa10      	add	r2, sp, #64	; 0x40
 8022b90:	c203      	stmia	r2!, {r0, r1}
 8022b92:	6818      	ldr	r0, [r3, #0]
 8022b94:	6859      	ldr	r1, [r3, #4]
 8022b96:	aa12      	add	r2, sp, #72	; 0x48
 8022b98:	c203      	stmia	r2!, {r0, r1}
 8022b9a:	a810      	add	r0, sp, #64	; 0x40
 8022b9c:	f7f5 fdc6 	bl	801872c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022ba0:	4621      	mov	r1, r4
 8022ba2:	a812      	add	r0, sp, #72	; 0x48
 8022ba4:	f7f5 fdea 	bl	801877c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022ba8:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
 8022bac:	f9bd 504a 	ldrsh.w	r5, [sp, #74]	; 0x4a
 8022bb0:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8022bb4:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8022bb8:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8022bbc:	4879      	ldr	r0, [pc, #484]	; (8022da4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8022bbe:	fb11 4105 	smlabb	r1, r1, r5, r4
 8022bc2:	4422      	add	r2, r4
 8022bc4:	442b      	add	r3, r5
 8022bc6:	6800      	ldr	r0, [r0, #0]
 8022bc8:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8022bcc:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 8022bd0:	6802      	ldr	r2, [r0, #0]
 8022bd2:	448a      	add	sl, r1
 8022bd4:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 8022bd8:	4c73      	ldr	r4, [pc, #460]	; (8022da8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x238>)
 8022bda:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 8022bde:	910c      	str	r1, [sp, #48]	; 0x30
 8022be0:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 8022be4:	42a3      	cmp	r3, r4
 8022be6:	910e      	str	r1, [sp, #56]	; 0x38
 8022be8:	f040 80a2 	bne.w	8022d30 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1c0>
 8022bec:	6841      	ldr	r1, [r0, #4]
 8022bee:	4c6f      	ldr	r4, [pc, #444]	; (8022dac <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 8022bf0:	680b      	ldr	r3, [r1, #0]
 8022bf2:	699b      	ldr	r3, [r3, #24]
 8022bf4:	42a3      	cmp	r3, r4
 8022bf6:	f040 80c1 	bne.w	8022d7c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x20c>
 8022bfa:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8022bfc:	4798      	blx	r3
 8022bfe:	4b6c      	ldr	r3, [pc, #432]	; (8022db0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8022c00:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	; 0x4a
 8022c04:	881b      	ldrh	r3, [r3, #0]
 8022c06:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 8022c0a:	fb01 2303 	mla	r3, r1, r3, r2
 8022c0e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8022c12:	930b      	str	r3, [sp, #44]	; 0x2c
 8022c14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022c16:	2b00      	cmp	r3, #0
 8022c18:	f340 8082 	ble.w	8022d20 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1b0>
 8022c1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022c1e:	2b00      	cmp	r3, #0
 8022c20:	dd7e      	ble.n	8022d20 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1b0>
 8022c22:	2200      	movs	r2, #0
 8022c24:	f04f 0e03 	mov.w	lr, #3
 8022c28:	f04f 0c04 	mov.w	ip, #4
 8022c2c:	f1c9 07ff 	rsb	r7, r9, #255	; 0xff
 8022c30:	009b      	lsls	r3, r3, #2
 8022c32:	920d      	str	r2, [sp, #52]	; 0x34
 8022c34:	b2bf      	uxth	r7, r7
 8022c36:	930f      	str	r3, [sp, #60]	; 0x3c
 8022c38:	fa1f f289 	uxth.w	r2, r9
 8022c3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022c3e:	4655      	mov	r5, sl
 8022c40:	1d18      	adds	r0, r3, #4
 8022c42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022c44:	eb0a 0603 	add.w	r6, sl, r3
 8022c48:	e03e      	b.n	8022cc8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x158>
 8022c4a:	f810 3c04 	ldrb.w	r3, [r0, #-4]
 8022c4e:	f810 4c03 	ldrb.w	r4, [r0, #-3]
 8022c52:	fb13 f307 	smulbb	r3, r3, r7
 8022c56:	fb0b 3302 	mla	r3, fp, r2, r3
 8022c5a:	b29b      	uxth	r3, r3
 8022c5c:	f103 0b01 	add.w	fp, r3, #1
 8022c60:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 8022c64:	121b      	asrs	r3, r3, #8
 8022c66:	fb14 f407 	smulbb	r4, r4, r7
 8022c6a:	f800 3c04 	strb.w	r3, [r0, #-4]
 8022c6e:	784b      	ldrb	r3, [r1, #1]
 8022c70:	f810 bc02 	ldrb.w	fp, [r0, #-2]
 8022c74:	fb03 4302 	mla	r3, r3, r2, r4
 8022c78:	b29b      	uxth	r3, r3
 8022c7a:	1c5c      	adds	r4, r3, #1
 8022c7c:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8022c80:	121b      	asrs	r3, r3, #8
 8022c82:	fb1b fb07 	smulbb	fp, fp, r7
 8022c86:	f800 3c03 	strb.w	r3, [r0, #-3]
 8022c8a:	788c      	ldrb	r4, [r1, #2]
 8022c8c:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8022c90:	fb04 b402 	mla	r4, r4, r2, fp
 8022c94:	b2a4      	uxth	r4, r4
 8022c96:	f104 0b01 	add.w	fp, r4, #1
 8022c9a:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8022c9e:	1224      	asrs	r4, r4, #8
 8022ca0:	fb13 fb07 	smulbb	fp, r3, r7
 8022ca4:	f800 4c02 	strb.w	r4, [r0, #-2]
 8022ca8:	78cb      	ldrb	r3, [r1, #3]
 8022caa:	42ae      	cmp	r6, r5
 8022cac:	fb03 b302 	mla	r3, r3, r2, fp
 8022cb0:	b29b      	uxth	r3, r3
 8022cb2:	f103 0101 	add.w	r1, r3, #1
 8022cb6:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022cba:	ea4f 2323 	mov.w	r3, r3, asr #8
 8022cbe:	f800 3c01 	strb.w	r3, [r0, #-1]
 8022cc2:	f100 0004 	add.w	r0, r0, #4
 8022cc6:	d018      	beq.n	8022cfa <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x18a>
 8022cc8:	f815 3b01 	ldrb.w	r3, [r5], #1
 8022ccc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022cd0:	fb1e c303 	smlabb	r3, lr, r3, ip
 8022cd4:	eb08 0103 	add.w	r1, r8, r3
 8022cd8:	f818 b003 	ldrb.w	fp, [r8, r3]
 8022cdc:	d1b5      	bne.n	8022c4a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0xda>
 8022cde:	f800 bc04 	strb.w	fp, [r0, #-4]
 8022ce2:	784b      	ldrb	r3, [r1, #1]
 8022ce4:	42ae      	cmp	r6, r5
 8022ce6:	f800 3c03 	strb.w	r3, [r0, #-3]
 8022cea:	788b      	ldrb	r3, [r1, #2]
 8022cec:	f100 0004 	add.w	r0, r0, #4
 8022cf0:	f800 9c05 	strb.w	r9, [r0, #-5]
 8022cf4:	f800 3c06 	strb.w	r3, [r0, #-6]
 8022cf8:	d1e6      	bne.n	8022cc8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x158>
 8022cfa:	4b2d      	ldr	r3, [pc, #180]	; (8022db0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8022cfc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8022cfe:	881b      	ldrh	r3, [r3, #0]
 8022d00:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022d02:	1a1b      	subs	r3, r3, r0
 8022d04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8022d08:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022d0a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022d0c:	441c      	add	r4, r3
 8022d0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022d10:	3001      	adds	r0, #1
 8022d12:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8022d16:	4283      	cmp	r3, r0
 8022d18:	900d      	str	r0, [sp, #52]	; 0x34
 8022d1a:	940b      	str	r4, [sp, #44]	; 0x2c
 8022d1c:	448a      	add	sl, r1
 8022d1e:	d18d      	bne.n	8022c3c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0xcc>
 8022d20:	4b20      	ldr	r3, [pc, #128]	; (8022da4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8022d22:	6818      	ldr	r0, [r3, #0]
 8022d24:	6803      	ldr	r3, [r0, #0]
 8022d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022d28:	4798      	blx	r3
 8022d2a:	b015      	add	sp, #84	; 0x54
 8022d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d30:	4798      	blx	r3
 8022d32:	2801      	cmp	r0, #1
 8022d34:	d125      	bne.n	8022d82 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x212>
 8022d36:	4b1f      	ldr	r3, [pc, #124]	; (8022db4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x244>)
 8022d38:	6818      	ldr	r0, [r3, #0]
 8022d3a:	b330      	cbz	r0, 8022d8a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x21a>
 8022d3c:	2502      	movs	r5, #2
 8022d3e:	240b      	movs	r4, #11
 8022d40:	2600      	movs	r6, #0
 8022d42:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8022d46:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8022d4a:	9302      	str	r3, [sp, #8]
 8022d4c:	4b18      	ldr	r3, [pc, #96]	; (8022db0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8022d4e:	9201      	str	r2, [sp, #4]
 8022d50:	881b      	ldrh	r3, [r3, #0]
 8022d52:	9508      	str	r5, [sp, #32]
 8022d54:	9407      	str	r4, [sp, #28]
 8022d56:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 8022d5a:	f8bd 404a 	ldrh.w	r4, [sp, #74]	; 0x4a
 8022d5e:	9306      	str	r3, [sp, #24]
 8022d60:	f8cd 9010 	str.w	r9, [sp, #16]
 8022d64:	4642      	mov	r2, r8
 8022d66:	4651      	mov	r1, sl
 8022d68:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8022d6c:	9605      	str	r6, [sp, #20]
 8022d6e:	9503      	str	r5, [sp, #12]
 8022d70:	9400      	str	r4, [sp, #0]
 8022d72:	f7fb fa69 	bl	801e248 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8022d76:	b015      	add	sp, #84	; 0x54
 8022d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d7c:	4608      	mov	r0, r1
 8022d7e:	4798      	blx	r3
 8022d80:	e7d7      	b.n	8022d32 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1c2>
 8022d82:	4b08      	ldr	r3, [pc, #32]	; (8022da4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8022d84:	6818      	ldr	r0, [r3, #0]
 8022d86:	6802      	ldr	r2, [r0, #0]
 8022d88:	e737      	b.n	8022bfa <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 8022d8a:	4b0b      	ldr	r3, [pc, #44]	; (8022db8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 8022d8c:	4a0b      	ldr	r2, [pc, #44]	; (8022dbc <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 8022d8e:	217c      	movs	r1, #124	; 0x7c
 8022d90:	480b      	ldr	r0, [pc, #44]	; (8022dc0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x250>)
 8022d92:	f006 f993 	bl	80290bc <__assert_func>
 8022d96:	4b0b      	ldr	r3, [pc, #44]	; (8022dc4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x254>)
 8022d98:	4a0b      	ldr	r2, [pc, #44]	; (8022dc8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8022d9a:	f240 5109 	movw	r1, #1289	; 0x509
 8022d9e:	480b      	ldr	r0, [pc, #44]	; (8022dcc <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x25c>)
 8022da0:	f006 f98c 	bl	80290bc <__assert_func>
 8022da4:	201979e8 	.word	0x201979e8
 8022da8:	080023d9 	.word	0x080023d9
 8022dac:	08017771 	.word	0x08017771
 8022db0:	201979e2 	.word	0x201979e2
 8022db4:	20197c18 	.word	0x20197c18
 8022db8:	0802bf28 	.word	0x0802bf28
 8022dbc:	0802c730 	.word	0x0802c730
 8022dc0:	0802bf50 	.word	0x0802bf50
 8022dc4:	0802bff0 	.word	0x0802bff0
 8022dc8:	0802ccd8 	.word	0x0802ccd8
 8022dcc:	0802bfcc 	.word	0x0802bfcc

08022dd0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h>:
 8022dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022dd4:	4617      	mov	r7, r2
 8022dd6:	8812      	ldrh	r2, [r2, #0]
 8022dd8:	b095      	sub	sp, #84	; 0x54
 8022dda:	461c      	mov	r4, r3
 8022ddc:	f89d 907c 	ldrb.w	r9, [sp, #124]	; 0x7c
 8022de0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022de2:	2a00      	cmp	r2, #0
 8022de4:	f040 8112 	bne.w	802300c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x23c>
 8022de8:	4688      	mov	r8, r1
 8022dea:	6820      	ldr	r0, [r4, #0]
 8022dec:	6861      	ldr	r1, [r4, #4]
 8022dee:	aa10      	add	r2, sp, #64	; 0x40
 8022df0:	c203      	stmia	r2!, {r0, r1}
 8022df2:	6818      	ldr	r0, [r3, #0]
 8022df4:	6859      	ldr	r1, [r3, #4]
 8022df6:	aa12      	add	r2, sp, #72	; 0x48
 8022df8:	c203      	stmia	r2!, {r0, r1}
 8022dfa:	a810      	add	r0, sp, #64	; 0x40
 8022dfc:	f7f5 fc96 	bl	801872c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022e00:	4621      	mov	r1, r4
 8022e02:	a812      	add	r0, sp, #72	; 0x48
 8022e04:	f7f5 fcba 	bl	801877c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022e08:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
 8022e0c:	f9bd 504a 	ldrsh.w	r5, [sp, #74]	; 0x4a
 8022e10:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8022e14:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8022e18:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8022e1c:	487f      	ldr	r0, [pc, #508]	; (802301c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 8022e1e:	fb11 4105 	smlabb	r1, r1, r5, r4
 8022e22:	4422      	add	r2, r4
 8022e24:	442b      	add	r3, r5
 8022e26:	6800      	ldr	r0, [r0, #0]
 8022e28:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8022e2c:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 8022e30:	6802      	ldr	r2, [r0, #0]
 8022e32:	4488      	add	r8, r1
 8022e34:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 8022e38:	4c79      	ldr	r4, [pc, #484]	; (8023020 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x250>)
 8022e3a:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 8022e3e:	910c      	str	r1, [sp, #48]	; 0x30
 8022e40:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 8022e44:	42a3      	cmp	r3, r4
 8022e46:	910e      	str	r1, [sp, #56]	; 0x38
 8022e48:	f040 80ab 	bne.w	8022fa2 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1d2>
 8022e4c:	6841      	ldr	r1, [r0, #4]
 8022e4e:	4c75      	ldr	r4, [pc, #468]	; (8023024 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x254>)
 8022e50:	680b      	ldr	r3, [r1, #0]
 8022e52:	699b      	ldr	r3, [r3, #24]
 8022e54:	42a3      	cmp	r3, r4
 8022e56:	f040 80cb 	bne.w	8022ff0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x220>
 8022e5a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8022e5c:	4798      	blx	r3
 8022e5e:	4b72      	ldr	r3, [pc, #456]	; (8023028 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8022e60:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	; 0x4a
 8022e64:	881b      	ldrh	r3, [r3, #0]
 8022e66:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 8022e6a:	fb01 2303 	mla	r3, r1, r3, r2
 8022e6e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8022e72:	930b      	str	r3, [sp, #44]	; 0x2c
 8022e74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022e76:	2b00      	cmp	r3, #0
 8022e78:	f340 808b 	ble.w	8022f92 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1c2>
 8022e7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022e7e:	2b00      	cmp	r3, #0
 8022e80:	f340 8087 	ble.w	8022f92 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1c2>
 8022e84:	2200      	movs	r2, #0
 8022e86:	f04f 0c04 	mov.w	ip, #4
 8022e8a:	009b      	lsls	r3, r3, #2
 8022e8c:	920d      	str	r2, [sp, #52]	; 0x34
 8022e8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8022e90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022e92:	4645      	mov	r5, r8
 8022e94:	1d1c      	adds	r4, r3, #4
 8022e96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022e98:	eb08 0e03 	add.w	lr, r8, r3
 8022e9c:	e048      	b.n	8022f30 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x160>
 8022e9e:	fb09 f303 	mul.w	r3, r9, r3
 8022ea2:	1c5a      	adds	r2, r3, #1
 8022ea4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022ea8:	121b      	asrs	r3, r3, #8
 8022eaa:	b2d8      	uxtb	r0, r3
 8022eac:	43c1      	mvns	r1, r0
 8022eae:	b29b      	uxth	r3, r3
 8022eb0:	fb1a f203 	smulbb	r2, sl, r3
 8022eb4:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8022eb8:	b2c9      	uxtb	r1, r1
 8022eba:	fb0a 2a01 	mla	sl, sl, r1, r2
 8022ebe:	fa1f fa8a 	uxth.w	sl, sl
 8022ec2:	f814 2c03 	ldrb.w	r2, [r4, #-3]
 8022ec6:	f10a 0b01 	add.w	fp, sl, #1
 8022eca:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8022ece:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022ed2:	fb12 fb01 	smulbb	fp, r2, r1
 8022ed6:	f804 ac04 	strb.w	sl, [r4, #-4]
 8022eda:	7872      	ldrb	r2, [r6, #1]
 8022edc:	f814 ac02 	ldrb.w	sl, [r4, #-2]
 8022ee0:	fb02 b203 	mla	r2, r2, r3, fp
 8022ee4:	b292      	uxth	r2, r2
 8022ee6:	f102 0b01 	add.w	fp, r2, #1
 8022eea:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8022eee:	fb1a fa01 	smulbb	sl, sl, r1
 8022ef2:	1212      	asrs	r2, r2, #8
 8022ef4:	f804 2c03 	strb.w	r2, [r4, #-3]
 8022ef8:	78b1      	ldrb	r1, [r6, #2]
 8022efa:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8022efe:	fb01 a103 	mla	r1, r1, r3, sl
 8022f02:	fb12 f303 	smulbb	r3, r2, r3
 8022f06:	b289      	uxth	r1, r1
 8022f08:	b29b      	uxth	r3, r3
 8022f0a:	f101 0a01 	add.w	sl, r1, #1
 8022f0e:	1c5e      	adds	r6, r3, #1
 8022f10:	eb0a 2111 	add.w	r1, sl, r1, lsr #8
 8022f14:	4402      	add	r2, r0
 8022f16:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8022f1a:	1209      	asrs	r1, r1, #8
 8022f1c:	eba2 2313 	sub.w	r3, r2, r3, lsr #8
 8022f20:	f804 1c02 	strb.w	r1, [r4, #-2]
 8022f24:	f804 3c01 	strb.w	r3, [r4, #-1]
 8022f28:	45ae      	cmp	lr, r5
 8022f2a:	f104 0404 	add.w	r4, r4, #4
 8022f2e:	d01c      	beq.n	8022f6a <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x19a>
 8022f30:	f815 2b01 	ldrb.w	r2, [r5], #1
 8022f34:	fb1c c202 	smlabb	r2, ip, r2, ip
 8022f38:	18be      	adds	r6, r7, r2
 8022f3a:	78f3      	ldrb	r3, [r6, #3]
 8022f3c:	2b00      	cmp	r3, #0
 8022f3e:	d0f3      	beq.n	8022f28 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x158>
 8022f40:	2bff      	cmp	r3, #255	; 0xff
 8022f42:	f817 a002 	ldrb.w	sl, [r7, r2]
 8022f46:	d1aa      	bne.n	8022e9e <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0xce>
 8022f48:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022f4c:	d1a7      	bne.n	8022e9e <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0xce>
 8022f4e:	f804 ac04 	strb.w	sl, [r4, #-4]
 8022f52:	7873      	ldrb	r3, [r6, #1]
 8022f54:	45ae      	cmp	lr, r5
 8022f56:	f804 3c03 	strb.w	r3, [r4, #-3]
 8022f5a:	78b3      	ldrb	r3, [r6, #2]
 8022f5c:	f104 0404 	add.w	r4, r4, #4
 8022f60:	f804 9c05 	strb.w	r9, [r4, #-5]
 8022f64:	f804 3c06 	strb.w	r3, [r4, #-6]
 8022f68:	d1e2      	bne.n	8022f30 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x160>
 8022f6a:	4b2f      	ldr	r3, [pc, #188]	; (8023028 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8022f6c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022f6e:	881b      	ldrh	r3, [r3, #0]
 8022f70:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022f72:	1a5b      	subs	r3, r3, r1
 8022f74:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8022f78:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8022f7a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8022f7c:	4418      	add	r0, r3
 8022f7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022f80:	3101      	adds	r1, #1
 8022f82:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	; 0x44
 8022f86:	428b      	cmp	r3, r1
 8022f88:	910d      	str	r1, [sp, #52]	; 0x34
 8022f8a:	900b      	str	r0, [sp, #44]	; 0x2c
 8022f8c:	4490      	add	r8, r2
 8022f8e:	f47f af7f 	bne.w	8022e90 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0xc0>
 8022f92:	4b22      	ldr	r3, [pc, #136]	; (802301c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 8022f94:	6818      	ldr	r0, [r3, #0]
 8022f96:	6803      	ldr	r3, [r0, #0]
 8022f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022f9a:	4798      	blx	r3
 8022f9c:	b015      	add	sp, #84	; 0x54
 8022f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022fa2:	4798      	blx	r3
 8022fa4:	4603      	mov	r3, r0
 8022fa6:	2b01      	cmp	r3, #1
 8022fa8:	d126      	bne.n	8022ff8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x228>
 8022faa:	4a20      	ldr	r2, [pc, #128]	; (802302c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x25c>)
 8022fac:	6810      	ldr	r0, [r2, #0]
 8022fae:	b338      	cbz	r0, 8023000 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x230>
 8022fb0:	f04f 0c02 	mov.w	ip, #2
 8022fb4:	260b      	movs	r6, #11
 8022fb6:	4a1c      	ldr	r2, [pc, #112]	; (8023028 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8022fb8:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8022fbc:	8814      	ldrh	r4, [r2, #0]
 8022fbe:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 8022fc2:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8022fc6:	9406      	str	r4, [sp, #24]
 8022fc8:	f8bd 404a 	ldrh.w	r4, [sp, #74]	; 0x4a
 8022fcc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8022fd0:	9305      	str	r3, [sp, #20]
 8022fd2:	f8cd 9010 	str.w	r9, [sp, #16]
 8022fd6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8022fda:	463a      	mov	r2, r7
 8022fdc:	4641      	mov	r1, r8
 8022fde:	e9cd 6c07 	strd	r6, ip, [sp, #28]
 8022fe2:	9503      	str	r5, [sp, #12]
 8022fe4:	9400      	str	r4, [sp, #0]
 8022fe6:	f7fb f92f 	bl	801e248 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8022fea:	b015      	add	sp, #84	; 0x54
 8022fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ff0:	4608      	mov	r0, r1
 8022ff2:	4798      	blx	r3
 8022ff4:	4603      	mov	r3, r0
 8022ff6:	e7d6      	b.n	8022fa6 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1d6>
 8022ff8:	4b08      	ldr	r3, [pc, #32]	; (802301c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 8022ffa:	6818      	ldr	r0, [r3, #0]
 8022ffc:	6802      	ldr	r2, [r0, #0]
 8022ffe:	e72c      	b.n	8022e5a <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 8023000:	4b0b      	ldr	r3, [pc, #44]	; (8023030 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x260>)
 8023002:	4a0c      	ldr	r2, [pc, #48]	; (8023034 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x264>)
 8023004:	217c      	movs	r1, #124	; 0x7c
 8023006:	480c      	ldr	r0, [pc, #48]	; (8023038 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x268>)
 8023008:	f006 f858 	bl	80290bc <__assert_func>
 802300c:	4b0b      	ldr	r3, [pc, #44]	; (802303c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x26c>)
 802300e:	4a0c      	ldr	r2, [pc, #48]	; (8023040 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x270>)
 8023010:	f240 514d 	movw	r1, #1357	; 0x54d
 8023014:	480b      	ldr	r0, [pc, #44]	; (8023044 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x274>)
 8023016:	f006 f851 	bl	80290bc <__assert_func>
 802301a:	bf00      	nop
 802301c:	201979e8 	.word	0x201979e8
 8023020:	080023d9 	.word	0x080023d9
 8023024:	08017771 	.word	0x08017771
 8023028:	201979e2 	.word	0x201979e2
 802302c:	20197c18 	.word	0x20197c18
 8023030:	0802bf28 	.word	0x0802bf28
 8023034:	0802c730 	.word	0x0802c730
 8023038:	0802bf50 	.word	0x0802bf50
 802303c:	0802c040 	.word	0x0802c040
 8023040:	0802ce78 	.word	0x0802ce78
 8023044:	0802bfcc 	.word	0x0802bfcc

08023048 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8023048:	b570      	push	{r4, r5, r6, lr}
 802304a:	7814      	ldrb	r4, [r2, #0]
 802304c:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8023050:	2c01      	cmp	r4, #1
 8023052:	d00e      	beq.n	8023072 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8023054:	d302      	bcc.n	802305c <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x14>
 8023056:	2c02      	cmp	r4, #2
 8023058:	d02a      	beq.n	80230b0 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x68>
 802305a:	bd70      	pop	{r4, r5, r6, pc}
 802305c:	7a04      	ldrb	r4, [r0, #8]
 802305e:	2c01      	cmp	r4, #1
 8023060:	d021      	beq.n	80230a6 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x5e>
 8023062:	d311      	bcc.n	8023088 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8023064:	2c02      	cmp	r4, #2
 8023066:	d12a      	bne.n	80230be <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x76>
 8023068:	9505      	str	r5, [sp, #20]
 802306a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802306e:	f7ff beaf 	b.w	8022dd0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h>
 8023072:	7a04      	ldrb	r4, [r0, #8]
 8023074:	2c01      	cmp	r4, #1
 8023076:	d011      	beq.n	802309c <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 8023078:	d30b      	bcc.n	8023092 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x4a>
 802307a:	2c02      	cmp	r4, #2
 802307c:	d126      	bne.n	80230cc <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x84>
 802307e:	9505      	str	r5, [sp, #20]
 8023080:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023084:	f7ff bd74 	b.w	8022b70 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h>
 8023088:	9505      	str	r5, [sp, #20]
 802308a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802308e:	f7ff b88f 	b.w	80221b0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h>
 8023092:	9505      	str	r5, [sp, #20]
 8023094:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023098:	f7ff b9be 	b.w	8022418 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h>
 802309c:	9505      	str	r5, [sp, #20]
 802309e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80230a2:	f7ff bc35 	b.w	8022910 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h>
 80230a6:	9505      	str	r5, [sp, #20]
 80230a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80230ac:	f7ff bb0c 	b.w	80226c8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h>
 80230b0:	4b0a      	ldr	r3, [pc, #40]	; (80230dc <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x94>)
 80230b2:	4a0b      	ldr	r2, [pc, #44]	; (80230e0 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x98>)
 80230b4:	f240 3199 	movw	r1, #921	; 0x399
 80230b8:	480a      	ldr	r0, [pc, #40]	; (80230e4 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>)
 80230ba:	f005 ffff 	bl	80290bc <__assert_func>
 80230be:	4b0a      	ldr	r3, [pc, #40]	; (80230e8 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>)
 80230c0:	4a07      	ldr	r2, [pc, #28]	; (80230e0 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x98>)
 80230c2:	f44f 716a 	mov.w	r1, #936	; 0x3a8
 80230c6:	4807      	ldr	r0, [pc, #28]	; (80230e4 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>)
 80230c8:	f005 fff8 	bl	80290bc <__assert_func>
 80230cc:	4b06      	ldr	r3, [pc, #24]	; (80230e8 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>)
 80230ce:	4a04      	ldr	r2, [pc, #16]	; (80230e0 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x98>)
 80230d0:	f240 31b9 	movw	r1, #953	; 0x3b9
 80230d4:	4803      	ldr	r0, [pc, #12]	; (80230e4 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>)
 80230d6:	f005 fff1 	bl	80290bc <__assert_func>
 80230da:	bf00      	nop
 80230dc:	0802bda8 	.word	0x0802bda8
 80230e0:	0802c770 	.word	0x0802c770
 80230e4:	0802bfcc 	.word	0x0802bfcc
 80230e8:	0802bde4 	.word	0x0802bde4

080230ec <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80230ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80230f0:	b089      	sub	sp, #36	; 0x24
 80230f2:	f89d 4044 	ldrb.w	r4, [sp, #68]	; 0x44
 80230f6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80230f8:	b13c      	cbz	r4, 802310a <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1e>
 80230fa:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 80230fe:	2e00      	cmp	r6, #0
 8023100:	dd03      	ble.n	802310a <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1e>
 8023102:	f9b5 6006 	ldrsh.w	r6, [r5, #6]
 8023106:	2e00      	cmp	r6, #0
 8023108:	dc02      	bgt.n	8023110 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x24>
 802310a:	b009      	add	sp, #36	; 0x24
 802310c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023110:	f04f 0800 	mov.w	r8, #0
 8023114:	4606      	mov	r6, r0
 8023116:	f362 080f 	bfi	r8, r2, #0, #16
 802311a:	4608      	mov	r0, r1
 802311c:	460f      	mov	r7, r1
 802311e:	f363 481f 	bfi	r8, r3, #16, #16
 8023122:	f7f8 f8cb 	bl	801b2bc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8023126:	4681      	mov	r9, r0
 8023128:	4638      	mov	r0, r7
 802312a:	f7f8 f8fb 	bl	801b324 <_ZNK8touchgfx6Bitmap9getHeightEv>
 802312e:	2300      	movs	r3, #0
 8023130:	f369 030f 	bfi	r3, r9, #0, #16
 8023134:	f360 431f 	bfi	r3, r0, #16, #16
 8023138:	4638      	mov	r0, r7
 802313a:	e9cd 8302 	strd	r8, r3, [sp, #8]
 802313e:	f7f8 f9a9 	bl	801b494 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8023142:	280b      	cmp	r0, #11
 8023144:	d023      	beq.n	802318e <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 8023146:	aa04      	add	r2, sp, #16
 8023148:	f10d 0808 	add.w	r8, sp, #8
 802314c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8023150:	e882 0003 	stmia.w	r2, {r0, r1}
 8023154:	6828      	ldr	r0, [r5, #0]
 8023156:	6869      	ldr	r1, [r5, #4]
 8023158:	ab06      	add	r3, sp, #24
 802315a:	c303      	stmia	r3!, {r0, r1}
 802315c:	4610      	mov	r0, r2
 802315e:	f7f5 fae5 	bl	801872c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023162:	4641      	mov	r1, r8
 8023164:	a806      	add	r0, sp, #24
 8023166:	f7f5 fb09 	bl	801877c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802316a:	4638      	mov	r0, r7
 802316c:	f7f8 f90e 	bl	801b38c <_ZNK8touchgfx6Bitmap7getDataEv>
 8023170:	4680      	mov	r8, r0
 8023172:	4638      	mov	r0, r7
 8023174:	f7f8 f98e 	bl	801b494 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8023178:	280d      	cmp	r0, #13
 802317a:	d871      	bhi.n	8023260 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 802317c:	e8df f000 	tbb	[pc, r0]
 8023180:	70176163 	.word	0x70176163
 8023184:	70707070 	.word	0x70707070
 8023188:	70707070 	.word	0x70707070
 802318c:	6570      	.short	0x6570
 802318e:	4638      	mov	r0, r7
 8023190:	f7f8 f8fc 	bl	801b38c <_ZNK8touchgfx6Bitmap7getDataEv>
 8023194:	4680      	mov	r8, r0
 8023196:	4638      	mov	r0, r7
 8023198:	f7f8 f928 	bl	801b3ec <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 802319c:	4641      	mov	r1, r8
 802319e:	4602      	mov	r2, r0
 80231a0:	e9cd 5400 	strd	r5, r4, [sp]
 80231a4:	4630      	mov	r0, r6
 80231a6:	ab02      	add	r3, sp, #8
 80231a8:	f7ff ff4e 	bl	8023048 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80231ac:	e7ad      	b.n	802310a <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1e>
 80231ae:	2710      	movs	r7, #16
 80231b0:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 80231b4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80231b8:	4d2c      	ldr	r5, [pc, #176]	; (802326c <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x180>)
 80231ba:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80231be:	440a      	add	r2, r1
 80231c0:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 80231c4:	6828      	ldr	r0, [r5, #0]
 80231c6:	440b      	add	r3, r1
 80231c8:	f8ad 2018 	strh.w	r2, [sp, #24]
 80231cc:	f8ad 301a 	strh.w	r3, [sp, #26]
 80231d0:	2800      	cmp	r0, #0
 80231d2:	d03f      	beq.n	8023254 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x168>
 80231d4:	f7fb f810 	bl	801e1f8 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 80231d8:	6833      	ldr	r3, [r6, #0]
 80231da:	4630      	mov	r0, r6
 80231dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80231de:	4798      	blx	r3
 80231e0:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80231e4:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 80231e8:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 80231ec:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 80231f0:	f7f8 fd0c 	bl	801bc0c <nema_set_clip>
 80231f4:	2200      	movs	r2, #0
 80231f6:	4623      	mov	r3, r4
 80231f8:	2600      	movs	r6, #0
 80231fa:	f04f 34ff 	mov.w	r4, #4294967295
 80231fe:	4611      	mov	r1, r2
 8023200:	4610      	mov	r0, r2
 8023202:	f7f8 fd37 	bl	801bc74 <nema_rgba>
 8023206:	f7fa ff0f 	bl	801e028 <nema_set_const_color>
 802320a:	f04f 33ff 	mov.w	r3, #4294967295
 802320e:	2201      	movs	r2, #1
 8023210:	2100      	movs	r1, #0
 8023212:	4817      	ldr	r0, [pc, #92]	; (8023270 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x184>)
 8023214:	f7fa fb42 	bl	801d89c <nema_set_blend>
 8023218:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 802321c:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 8023220:	463b      	mov	r3, r7
 8023222:	4640      	mov	r0, r8
 8023224:	e9cd 4600 	strd	r4, r6, [sp]
 8023228:	f7f8 fd2c 	bl	801bc84 <nema_bind_src_tex>
 802322c:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8023230:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8023234:	f7f8 fe66 	bl	801bf04 <nema_blit>
 8023238:	6828      	ldr	r0, [r5, #0]
 802323a:	b158      	cbz	r0, 8023254 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x168>
 802323c:	f7fa fffc 	bl	801e238 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 8023240:	e763      	b.n	802310a <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1e>
 8023242:	2739      	movs	r7, #57	; 0x39
 8023244:	e7b4      	b.n	80231b0 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 8023246:	2704      	movs	r7, #4
 8023248:	e7b2      	b.n	80231b0 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 802324a:	4638      	mov	r0, r7
 802324c:	f7f8 f8ce 	bl	801b3ec <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8023250:	7807      	ldrb	r7, [r0, #0]
 8023252:	e7ad      	b.n	80231b0 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 8023254:	4b07      	ldr	r3, [pc, #28]	; (8023274 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x188>)
 8023256:	4a08      	ldr	r2, [pc, #32]	; (8023278 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x18c>)
 8023258:	217c      	movs	r1, #124	; 0x7c
 802325a:	4808      	ldr	r0, [pc, #32]	; (802327c <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x190>)
 802325c:	f005 ff2e 	bl	80290bc <__assert_func>
 8023260:	4b07      	ldr	r3, [pc, #28]	; (8023280 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x194>)
 8023262:	4a08      	ldr	r2, [pc, #32]	; (8023284 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x198>)
 8023264:	2174      	movs	r1, #116	; 0x74
 8023266:	4808      	ldr	r0, [pc, #32]	; (8023288 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x19c>)
 8023268:	f005 ff28 	bl	80290bc <__assert_func>
 802326c:	20197c18 	.word	0x20197c18
 8023270:	08000504 	.word	0x08000504
 8023274:	0802bf28 	.word	0x0802bf28
 8023278:	0802c730 	.word	0x0802c730
 802327c:	0802bf50 	.word	0x0802bf50
 8023280:	0802be20 	.word	0x0802be20
 8023284:	0802c864 	.word	0x0802c864
 8023288:	0802bfcc 	.word	0x0802bfcc

0802328c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 802328c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023290:	b089      	sub	sp, #36	; 0x24
 8023292:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8023294:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8023296:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
 802329a:	9104      	str	r1, [sp, #16]
 802329c:	8809      	ldrh	r1, [r1, #0]
 802329e:	fb07 6c04 	mla	ip, r7, r4, r6
 80232a2:	10c8      	asrs	r0, r1, #3
 80232a4:	120d      	asrs	r5, r1, #8
 80232a6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80232aa:	f005 0af8 	and.w	sl, r5, #248	; 0xf8
 80232ae:	9002      	str	r0, [sp, #8]
 80232b0:	00c9      	lsls	r1, r1, #3
 80232b2:	0200      	lsls	r0, r0, #8
 80232b4:	b2c9      	uxtb	r1, r1
 80232b6:	4690      	mov	r8, r2
 80232b8:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 80232bc:	469e      	mov	lr, r3
 80232be:	eb02 030c 	add.w	r3, r2, ip
 80232c2:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 80232c6:	4308      	orrs	r0, r1
 80232c8:	2f00      	cmp	r7, #0
 80232ca:	9103      	str	r1, [sp, #12]
 80232cc:	9305      	str	r3, [sp, #20]
 80232ce:	9007      	str	r0, [sp, #28]
 80232d0:	f107 0501 	add.w	r5, r7, #1
 80232d4:	f9bd 604c 	ldrsh.w	r6, [sp, #76]	; 0x4c
 80232d8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80232dc:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
 80232e0:	9200      	str	r2, [sp, #0]
 80232e2:	db02      	blt.n	80232ea <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x5e>
 80232e4:	42be      	cmp	r6, r7
 80232e6:	f300 80a3 	bgt.w	8023430 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1a4>
 80232ea:	fa5f fb80 	uxtb.w	fp, r0
 80232ee:	af07      	add	r7, sp, #28
 80232f0:	465a      	mov	r2, fp
 80232f2:	46b8      	mov	r8, r7
 80232f4:	2d00      	cmp	r5, #0
 80232f6:	db01      	blt.n	80232fc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x70>
 80232f8:	42ae      	cmp	r6, r5
 80232fa:	dc79      	bgt.n	80233f0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x164>
 80232fc:	f10d 0e1c 	add.w	lr, sp, #28
 8023300:	46f1      	mov	r9, lr
 8023302:	b2c0      	uxtb	r0, r0
 8023304:	9001      	str	r0, [sp, #4]
 8023306:	2b0f      	cmp	r3, #15
 8023308:	f200 80ce 	bhi.w	80234a8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x21c>
 802330c:	290f      	cmp	r1, #15
 802330e:	f200 80cb 	bhi.w	80234a8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x21c>
 8023312:	9c00      	ldr	r4, [sp, #0]
 8023314:	b29b      	uxth	r3, r3
 8023316:	43e4      	mvns	r4, r4
 8023318:	b289      	uxth	r1, r1
 802331a:	fb03 f501 	mul.w	r5, r3, r1
 802331e:	011b      	lsls	r3, r3, #4
 8023320:	1b5e      	subs	r6, r3, r5
 8023322:	b2b6      	uxth	r6, r6
 8023324:	f897 c002 	ldrb.w	ip, [r7, #2]
 8023328:	ebc5 1101 	rsb	r1, r5, r1, lsl #4
 802332c:	787f      	ldrb	r7, [r7, #1]
 802332e:	fb06 f202 	mul.w	r2, r6, r2
 8023332:	b289      	uxth	r1, r1
 8023334:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8023338:	fb06 fc0c 	mul.w	ip, r6, ip
 802333c:	1a5b      	subs	r3, r3, r1
 802333e:	fb06 f607 	mul.w	r6, r6, r7
 8023342:	b29b      	uxth	r3, r3
 8023344:	f898 7001 	ldrb.w	r7, [r8, #1]
 8023348:	fb03 220b 	mla	r2, r3, fp, r2
 802334c:	f898 b002 	ldrb.w	fp, [r8, #2]
 8023350:	fb03 6607 	mla	r6, r3, r7, r6
 8023354:	fb03 cc0b 	mla	ip, r3, fp, ip
 8023358:	f899 8002 	ldrb.w	r8, [r9, #2]
 802335c:	f899 7001 	ldrb.w	r7, [r9, #1]
 8023360:	9b01      	ldr	r3, [sp, #4]
 8023362:	fb01 cc08 	mla	ip, r1, r8, ip
 8023366:	fb01 2203 	mla	r2, r1, r3, r2
 802336a:	fb01 6607 	mla	r6, r1, r7, r6
 802336e:	f89e 8002 	ldrb.w	r8, [lr, #2]
 8023372:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8023376:	9b03      	ldr	r3, [sp, #12]
 8023378:	9902      	ldr	r1, [sp, #8]
 802337a:	fb05 2200 	mla	r2, r5, r0, r2
 802337e:	b2e4      	uxtb	r4, r4
 8023380:	fb05 cc08 	mla	ip, r5, r8, ip
 8023384:	fb05 6607 	mla	r6, r5, r7, r6
 8023388:	fb13 f004 	smulbb	r0, r3, r4
 802338c:	fb1a f304 	smulbb	r3, sl, r4
 8023390:	fb11 f404 	smulbb	r4, r1, r4
 8023394:	f8bd e000 	ldrh.w	lr, [sp]
 8023398:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802339c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80233a0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80233a4:	fb02 020e 	mla	r2, r2, lr, r0
 80233a8:	fb0c 330e 	mla	r3, ip, lr, r3
 80233ac:	fb06 4e0e 	mla	lr, r6, lr, r4
 80233b0:	fa1f fc83 	uxth.w	ip, r3
 80233b4:	b292      	uxth	r2, r2
 80233b6:	fa1f fe8e 	uxth.w	lr, lr
 80233ba:	f10c 0301 	add.w	r3, ip, #1
 80233be:	1c50      	adds	r0, r2, #1
 80233c0:	f10e 0101 	add.w	r1, lr, #1
 80233c4:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80233c8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80233cc:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 80233d0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80233d4:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80233d8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80233dc:	4313      	orrs	r3, r2
 80233de:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80233e2:	9a04      	ldr	r2, [sp, #16]
 80233e4:	ea43 030e 	orr.w	r3, r3, lr
 80233e8:	8013      	strh	r3, [r2, #0]
 80233ea:	b009      	add	sp, #36	; 0x24
 80233ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80233f0:	2900      	cmp	r1, #0
 80233f2:	d036      	beq.n	8023462 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d6>
 80233f4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80233f6:	2d00      	cmp	r5, #0
 80233f8:	db45      	blt.n	8023486 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1fa>
 80233fa:	42ac      	cmp	r4, r5
 80233fc:	dd43      	ble.n	8023486 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1fa>
 80233fe:	9d05      	ldr	r5, [sp, #20]
 8023400:	f815 9004 	ldrb.w	r9, [r5, r4]
 8023404:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8023408:	44f1      	add	r9, lr
 802340a:	f899 5000 	ldrb.w	r5, [r9]
 802340e:	9501      	str	r5, [sp, #4]
 8023410:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023412:	3501      	adds	r5, #1
 8023414:	d433      	bmi.n	802347e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1f2>
 8023416:	42ac      	cmp	r4, r5
 8023418:	dd31      	ble.n	802347e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1f2>
 802341a:	2b00      	cmp	r3, #0
 802341c:	d040      	beq.n	80234a0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x214>
 802341e:	9805      	ldr	r0, [sp, #20]
 8023420:	4420      	add	r0, r4
 8023422:	7840      	ldrb	r0, [r0, #1]
 8023424:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8023428:	f81e 0004 	ldrb.w	r0, [lr, r4]
 802342c:	44a6      	add	lr, r4
 802342e:	e76a      	b.n	8023306 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x7a>
 8023430:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023432:	2a00      	cmp	r2, #0
 8023434:	db01      	blt.n	802343a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ae>
 8023436:	4294      	cmp	r4, r2
 8023438:	dc1b      	bgt.n	8023472 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1e6>
 802343a:	f10d 081c 	add.w	r8, sp, #28
 802343e:	3201      	adds	r2, #1
 8023440:	f898 b000 	ldrb.w	fp, [r8]
 8023444:	d40a      	bmi.n	802345c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>
 8023446:	4294      	cmp	r4, r2
 8023448:	dd08      	ble.n	802345c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>
 802344a:	b1fb      	cbz	r3, 802348c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x200>
 802344c:	9a05      	ldr	r2, [sp, #20]
 802344e:	7857      	ldrb	r7, [r2, #1]
 8023450:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023454:	f81e 2007 	ldrb.w	r2, [lr, r7]
 8023458:	4477      	add	r7, lr
 802345a:	e74b      	b.n	80232f4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x68>
 802345c:	b2c2      	uxtb	r2, r0
 802345e:	af07      	add	r7, sp, #28
 8023460:	e748      	b.n	80232f4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x68>
 8023462:	b2c0      	uxtb	r0, r0
 8023464:	2b0f      	cmp	r3, #15
 8023466:	9001      	str	r0, [sp, #4]
 8023468:	d81e      	bhi.n	80234a8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x21c>
 802346a:	f10d 0e1c 	add.w	lr, sp, #28
 802346e:	46f1      	mov	r9, lr
 8023470:	e74f      	b.n	8023312 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x86>
 8023472:	f818 800c 	ldrb.w	r8, [r8, ip]
 8023476:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802347a:	44f0      	add	r8, lr
 802347c:	e7df      	b.n	802343e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1b2>
 802347e:	b2c0      	uxtb	r0, r0
 8023480:	f10d 0e1c 	add.w	lr, sp, #28
 8023484:	e73f      	b.n	8023306 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x7a>
 8023486:	f10d 091c 	add.w	r9, sp, #28
 802348a:	e7be      	b.n	802340a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x17e>
 802348c:	2d00      	cmp	r5, #0
 802348e:	b2c2      	uxtb	r2, r0
 8023490:	af07      	add	r7, sp, #28
 8023492:	f6bf af31 	bge.w	80232f8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6c>
 8023496:	46be      	mov	lr, r7
 8023498:	46b9      	mov	r9, r7
 802349a:	4610      	mov	r0, r2
 802349c:	9201      	str	r2, [sp, #4]
 802349e:	e735      	b.n	802330c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 80234a0:	b2c0      	uxtb	r0, r0
 80234a2:	f10d 0e1c 	add.w	lr, sp, #28
 80234a6:	e731      	b.n	802330c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 80234a8:	4b03      	ldr	r3, [pc, #12]	; (80234b8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x22c>)
 80234aa:	4a04      	ldr	r2, [pc, #16]	; (80234bc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x230>)
 80234ac:	f44f 710f 	mov.w	r1, #572	; 0x23c
 80234b0:	4803      	ldr	r0, [pc, #12]	; (80234c0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x234>)
 80234b2:	f005 fe03 	bl	80290bc <__assert_func>
 80234b6:	bf00      	nop
 80234b8:	0802c360 	.word	0x0802c360
 80234bc:	0802c9d8 	.word	0x0802c9d8
 80234c0:	0802c4e4 	.word	0x0802c4e4

080234c4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80234c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80234c8:	ed2d 8b08 	vpush	{d8-d11}
 80234cc:	b095      	sub	sp, #84	; 0x54
 80234ce:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 80234d2:	e9dd 512b 	ldrd	r5, r1, [sp, #172]	; 0xac
 80234d6:	e9dd b827 	ldrd	fp, r8, [sp, #156]	; 0x9c
 80234da:	686c      	ldr	r4, [r5, #4]
 80234dc:	461a      	mov	r2, r3
 80234de:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80234e0:	f89d 60bc 	ldrb.w	r6, [sp, #188]	; 0xbc
 80234e4:	fb04 1303 	mla	r3, r4, r3, r1
 80234e8:	682c      	ldr	r4, [r5, #0]
 80234ea:	e9cd 0612 	strd	r0, r6, [sp, #72]	; 0x48
 80234ee:	43f0      	mvns	r0, r6
 80234f0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80234f4:	eeb0 aa40 	vmov.f32	s20, s0
 80234f8:	eef0 9a60 	vmov.f32	s19, s1
 80234fc:	eeb0 9a41 	vmov.f32	s18, s2
 8023500:	eef0 8a62 	vmov.f32	s17, s5
 8023504:	eeb0 8a43 	vmov.f32	s16, s6
 8023508:	eef0 ba44 	vmov.f32	s23, s8
 802350c:	eeb0 ba64 	vmov.f32	s22, s9
 8023510:	eef0 aa45 	vmov.f32	s21, s10
 8023514:	469a      	mov	sl, r3
 8023516:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8023518:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 802351a:	6849      	ldr	r1, [r1, #4]
 802351c:	682d      	ldr	r5, [r5, #0]
 802351e:	3104      	adds	r1, #4
 8023520:	b2c0      	uxtb	r0, r0
 8023522:	9108      	str	r1, [sp, #32]
 8023524:	b2b1      	uxth	r1, r6
 8023526:	950b      	str	r5, [sp, #44]	; 0x2c
 8023528:	900c      	str	r0, [sp, #48]	; 0x30
 802352a:	910d      	str	r1, [sp, #52]	; 0x34
 802352c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802352e:	2b00      	cmp	r3, #0
 8023530:	dc02      	bgt.n	8023538 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023532:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023534:	2b00      	cmp	r3, #0
 8023536:	dd65      	ble.n	8023604 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8023538:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802353a:	2a00      	cmp	r2, #0
 802353c:	e9d3 4e02 	ldrd	r4, lr, [r3, #8]
 8023540:	b225      	sxth	r5, r4
 8023542:	fa0f f78e 	sxth.w	r7, lr
 8023546:	f340 8233 	ble.w	80239b0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 802354a:	1e6e      	subs	r6, r5, #1
 802354c:	f107 3cff 	add.w	ip, r7, #4294967295
 8023550:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8023554:	e9dd e929 	ldrd	lr, r9, [sp, #164]	; 0xa4
 8023558:	ea5f 432b 	movs.w	r3, fp, asr #16
 802355c:	ea4f 4128 	mov.w	r1, r8, asr #16
 8023560:	d405      	bmi.n	802356e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8023562:	42b3      	cmp	r3, r6
 8023564:	da03      	bge.n	802356e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8023566:	2900      	cmp	r1, #0
 8023568:	db01      	blt.n	802356e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802356a:	4561      	cmp	r1, ip
 802356c:	db4f      	blt.n	802360e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802356e:	1c58      	adds	r0, r3, #1
 8023570:	d406      	bmi.n	8023580 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8023572:	42a8      	cmp	r0, r5
 8023574:	dc04      	bgt.n	8023580 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8023576:	1c48      	adds	r0, r1, #1
 8023578:	d402      	bmi.n	8023580 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 802357a:	42b8      	cmp	r0, r7
 802357c:	f340 817e 	ble.w	802387c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 8023580:	3a01      	subs	r2, #1
 8023582:	44f3      	add	fp, lr
 8023584:	44c8      	add	r8, r9
 8023586:	f10a 0a02 	add.w	sl, sl, #2
 802358a:	d1e5      	bne.n	8023558 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802358c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802358e:	2b00      	cmp	r3, #0
 8023590:	dd38      	ble.n	8023604 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8023592:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023596:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802359a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802359e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80235a2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80235a6:	ee29 6aa7 	vmul.f32	s12, s19, s15
 80235aa:	ee69 7a27 	vmul.f32	s15, s18, s15
 80235ae:	ee76 6a68 	vsub.f32	s13, s12, s17
 80235b2:	ee37 7ac8 	vsub.f32	s14, s15, s16
 80235b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80235ba:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80235be:	ee16 2a90 	vmov	r2, s13
 80235c2:	3b01      	subs	r3, #1
 80235c4:	930e      	str	r3, [sp, #56]	; 0x38
 80235c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80235c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80235cc:	ee17 2a10 	vmov	r2, s14
 80235d0:	eeb0 7a48 	vmov.f32	s14, s16
 80235d4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80235d8:	ee17 8a10 	vmov	r8, s14
 80235dc:	eeb0 7a68 	vmov.f32	s14, s17
 80235e0:	9329      	str	r3, [sp, #164]	; 0xa4
 80235e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80235e4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80235e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80235ec:	932a      	str	r3, [sp, #168]	; 0xa8
 80235ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80235f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80235f2:	ee17 ba10 	vmov	fp, s14
 80235f6:	eeb0 8a67 	vmov.f32	s16, s15
 80235fa:	eef0 8a46 	vmov.f32	s17, s12
 80235fe:	bf18      	it	ne
 8023600:	461a      	movne	r2, r3
 8023602:	e793      	b.n	802352c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8023604:	b015      	add	sp, #84	; 0x54
 8023606:	ecbd 8b08 	vpop	{d8-d11}
 802360a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802360e:	46d4      	mov	ip, sl
 8023610:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8023614:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8023616:	1e51      	subs	r1, r2, #1
 8023618:	fb00 b301 	mla	r3, r0, r1, fp
 802361c:	141b      	asrs	r3, r3, #16
 802361e:	910a      	str	r1, [sp, #40]	; 0x28
 8023620:	f100 80cc 	bmi.w	80237bc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8023624:	42b3      	cmp	r3, r6
 8023626:	f280 80c9 	bge.w	80237bc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 802362a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802362c:	fb03 8301 	mla	r3, r3, r1, r8
 8023630:	141b      	asrs	r3, r3, #16
 8023632:	f100 80c3 	bmi.w	80237bc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8023636:	3f01      	subs	r7, #1
 8023638:	42bb      	cmp	r3, r7
 802363a:	f280 80bf 	bge.w	80237bc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 802363e:	2a00      	cmp	r2, #0
 8023640:	dda4      	ble.n	802358c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8023642:	eb0a 0a42 	add.w	sl, sl, r2, lsl #1
 8023646:	e9cd ca09 	strd	ip, sl, [sp, #36]	; 0x24
 802364a:	e08e      	b.n	802376a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 802364c:	f891 c001 	ldrb.w	ip, [r1, #1]
 8023650:	194c      	adds	r4, r1, r5
 8023652:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8023656:	44bc      	add	ip, r7
 8023658:	2a00      	cmp	r2, #0
 802365a:	f000 80a6 	beq.w	80237aa <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 802365e:	5d48      	ldrb	r0, [r1, r5]
 8023660:	7865      	ldrb	r5, [r4, #1]
 8023662:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023666:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802366a:	4438      	add	r0, r7
 802366c:	443d      	add	r5, r7
 802366e:	b29b      	uxth	r3, r3
 8023670:	b292      	uxth	r2, r2
 8023672:	fb03 f402 	mul.w	r4, r3, r2
 8023676:	011b      	lsls	r3, r3, #4
 8023678:	1b19      	subs	r1, r3, r4
 802367a:	f89c 9000 	ldrb.w	r9, [ip]
 802367e:	f89c e002 	ldrb.w	lr, [ip, #2]
 8023682:	b289      	uxth	r1, r1
 8023684:	f89c c001 	ldrb.w	ip, [ip, #1]
 8023688:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 802368c:	fb01 f909 	mul.w	r9, r1, r9
 8023690:	b292      	uxth	r2, r2
 8023692:	fb01 fe0e 	mul.w	lr, r1, lr
 8023696:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 802369a:	fb01 f10c 	mul.w	r1, r1, ip
 802369e:	f817 a00a 	ldrb.w	sl, [r7, sl]
 80236a2:	1a9b      	subs	r3, r3, r2
 80236a4:	f896 c002 	ldrb.w	ip, [r6, #2]
 80236a8:	b29b      	uxth	r3, r3
 80236aa:	7876      	ldrb	r6, [r6, #1]
 80236ac:	fb03 990a 	mla	r9, r3, sl, r9
 80236b0:	fb03 ec0c 	mla	ip, r3, ip, lr
 80236b4:	fb03 1306 	mla	r3, r3, r6, r1
 80236b8:	7801      	ldrb	r1, [r0, #0]
 80236ba:	f890 e002 	ldrb.w	lr, [r0, #2]
 80236be:	fb02 9901 	mla	r9, r2, r1, r9
 80236c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80236c4:	fb02 ce0e 	mla	lr, r2, lr, ip
 80236c8:	7829      	ldrb	r1, [r5, #0]
 80236ca:	f8b7 c000 	ldrh.w	ip, [r7]
 80236ce:	7840      	ldrb	r0, [r0, #1]
 80236d0:	78ae      	ldrb	r6, [r5, #2]
 80236d2:	fb02 3200 	mla	r2, r2, r0, r3
 80236d6:	fb04 9901 	mla	r9, r4, r1, r9
 80236da:	7868      	ldrb	r0, [r5, #1]
 80236dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80236de:	ea4f 252c 	mov.w	r5, ip, asr #8
 80236e2:	fb04 ee06 	mla	lr, r4, r6, lr
 80236e6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80236ea:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80236ee:	fb15 f501 	smulbb	r5, r5, r1
 80236f2:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80236f6:	b2db      	uxtb	r3, r3
 80236f8:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80236fc:	fb13 f301 	smulbb	r3, r3, r1
 8023700:	fb1c fc01 	smulbb	ip, ip, r1
 8023704:	990d      	ldr	r1, [sp, #52]	; 0x34
 8023706:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 802370a:	fb04 2200 	mla	r2, r4, r0, r2
 802370e:	fb0e 5501 	mla	r5, lr, r1, r5
 8023712:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023716:	b2ad      	uxth	r5, r5
 8023718:	fb02 cc01 	mla	ip, r2, r1, ip
 802371c:	1c6a      	adds	r2, r5, #1
 802371e:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8023722:	463a      	mov	r2, r7
 8023724:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8023728:	fb09 3301 	mla	r3, r9, r1, r3
 802372c:	fa1f f18c 	uxth.w	r1, ip
 8023730:	b29b      	uxth	r3, r3
 8023732:	1c5c      	adds	r4, r3, #1
 8023734:	1c48      	adds	r0, r1, #1
 8023736:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 802373a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802373e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8023742:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023746:	0949      	lsrs	r1, r1, #5
 8023748:	432b      	orrs	r3, r5
 802374a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802374e:	430b      	orrs	r3, r1
 8023750:	f822 3b02 	strh.w	r3, [r2], #2
 8023754:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023756:	9209      	str	r2, [sp, #36]	; 0x24
 8023758:	449b      	add	fp, r3
 802375a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802375c:	4498      	add	r8, r3
 802375e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023760:	429a      	cmp	r2, r3
 8023762:	d029      	beq.n	80237b8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023764:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023766:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 802376a:	ea4f 432b 	mov.w	r3, fp, asr #16
 802376e:	ea4f 4128 	mov.w	r1, r8, asr #16
 8023772:	fb05 3101 	mla	r1, r5, r1, r3
 8023776:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023778:	9f08      	ldr	r7, [sp, #32]
 802377a:	f812 a001 	ldrb.w	sl, [r2, r1]
 802377e:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8023782:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8023786:	4411      	add	r1, r2
 8023788:	eb07 060a 	add.w	r6, r7, sl
 802378c:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8023790:	2b00      	cmp	r3, #0
 8023792:	f47f af5b 	bne.w	802364c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8023796:	b15a      	cbz	r2, 80237b0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>
 8023798:	5d48      	ldrb	r0, [r1, r5]
 802379a:	9908      	ldr	r1, [sp, #32]
 802379c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80237a0:	4635      	mov	r5, r6
 80237a2:	4408      	add	r0, r1
 80237a4:	46b4      	mov	ip, r6
 80237a6:	460f      	mov	r7, r1
 80237a8:	e761      	b.n	802366e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80237aa:	4635      	mov	r5, r6
 80237ac:	4630      	mov	r0, r6
 80237ae:	e75e      	b.n	802366e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80237b0:	4635      	mov	r5, r6
 80237b2:	4630      	mov	r0, r6
 80237b4:	46b4      	mov	ip, r6
 80237b6:	e75a      	b.n	802366e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80237b8:	469a      	mov	sl, r3
 80237ba:	e6e7      	b.n	802358c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80237bc:	2a00      	cmp	r2, #0
 80237be:	f77f aee5 	ble.w	802358c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80237c2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80237c4:	ea4f 432b 	mov.w	r3, fp, asr #16
 80237c8:	ea4f 4128 	mov.w	r1, r8, asr #16
 80237cc:	4675      	mov	r5, lr
 80237ce:	46d1      	mov	r9, sl
 80237d0:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80237d4:	f8dd a0b8 	ldr.w	sl, [sp, #184]	; 0xb8
 80237d8:	9609      	str	r6, [sp, #36]	; 0x24
 80237da:	2b00      	cmp	r3, #0
 80237dc:	f3cb 3703 	ubfx	r7, fp, #12, #4
 80237e0:	f3c8 3203 	ubfx	r2, r8, #12, #4
 80237e4:	db27      	blt.n	8023836 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 80237e6:	1e60      	subs	r0, r4, #1
 80237e8:	4283      	cmp	r3, r0
 80237ea:	da24      	bge.n	8023836 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 80237ec:	2900      	cmp	r1, #0
 80237ee:	db22      	blt.n	8023836 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 80237f0:	1e68      	subs	r0, r5, #1
 80237f2:	4281      	cmp	r1, r0
 80237f4:	da1f      	bge.n	8023836 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 80237f6:	b220      	sxth	r0, r4
 80237f8:	fb01 3300 	mla	r3, r1, r0, r3
 80237fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80237fe:	5ccd      	ldrb	r5, [r1, r3]
 8023800:	440b      	add	r3, r1
 8023802:	9908      	ldr	r1, [sp, #32]
 8023804:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023808:	460e      	mov	r6, r1
 802380a:	eb01 0c05 	add.w	ip, r1, r5
 802380e:	2f00      	cmp	r7, #0
 8023810:	d04b      	beq.n	80238aa <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8023812:	785c      	ldrb	r4, [r3, #1]
 8023814:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023818:	440c      	add	r4, r1
 802381a:	2a00      	cmp	r2, #0
 802381c:	f000 80c4 	beq.w	80239a8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8023820:	1819      	adds	r1, r3, r0
 8023822:	7849      	ldrb	r1, [r1, #1]
 8023824:	5c18      	ldrb	r0, [r3, r0]
 8023826:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802382a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802382e:	1873      	adds	r3, r6, r1
 8023830:	9311      	str	r3, [sp, #68]	; 0x44
 8023832:	4430      	add	r0, r6
 8023834:	e03f      	b.n	80238b6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8023836:	1c58      	adds	r0, r3, #1
 8023838:	d405      	bmi.n	8023846 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 802383a:	42a0      	cmp	r0, r4
 802383c:	dc03      	bgt.n	8023846 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 802383e:	1c48      	adds	r0, r1, #1
 8023840:	d401      	bmi.n	8023846 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8023842:	42a8      	cmp	r0, r5
 8023844:	dd20      	ble.n	8023888 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c4>
 8023846:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023848:	f109 0902 	add.w	r9, r9, #2
 802384c:	449b      	add	fp, r3
 802384e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023850:	4498      	add	r8, r3
 8023852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023854:	2b00      	cmp	r3, #0
 8023856:	dd08      	ble.n	802386a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8023858:	e9da 4502 	ldrd	r4, r5, [sl, #8]
 802385c:	3b01      	subs	r3, #1
 802385e:	9309      	str	r3, [sp, #36]	; 0x24
 8023860:	ea4f 4128 	mov.w	r1, r8, asr #16
 8023864:	ea4f 432b 	mov.w	r3, fp, asr #16
 8023868:	e7b7      	b.n	80237da <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 802386a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802386c:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8023870:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023874:	3301      	adds	r3, #1
 8023876:	eb0a 0a43 	add.w	sl, sl, r3, lsl #1
 802387a:	e687      	b.n	802358c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 802387c:	3a01      	subs	r2, #1
 802387e:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8023882:	920a      	str	r2, [sp, #40]	; 0x28
 8023884:	4616      	mov	r6, r2
 8023886:	e7a1      	b.n	80237cc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8023888:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802388a:	b22d      	sxth	r5, r5
 802388c:	b224      	sxth	r4, r4
 802388e:	e9cd 2005 	strd	r2, r0, [sp, #20]
 8023892:	e9cd 1703 	strd	r1, r7, [sp, #12]
 8023896:	9302      	str	r3, [sp, #8]
 8023898:	e9cd 4500 	strd	r4, r5, [sp]
 802389c:	9b08      	ldr	r3, [sp, #32]
 802389e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80238a0:	4649      	mov	r1, r9
 80238a2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80238a4:	f7ff fcf2 	bl	802328c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 80238a8:	e7cd      	b.n	8023846 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 80238aa:	2a00      	cmp	r2, #0
 80238ac:	d173      	bne.n	8023996 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d2>
 80238ae:	4660      	mov	r0, ip
 80238b0:	4664      	mov	r4, ip
 80238b2:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 80238b6:	b2bb      	uxth	r3, r7
 80238b8:	b292      	uxth	r2, r2
 80238ba:	fb03 f702 	mul.w	r7, r3, r2
 80238be:	011b      	lsls	r3, r3, #4
 80238c0:	1bd9      	subs	r1, r3, r7
 80238c2:	7826      	ldrb	r6, [r4, #0]
 80238c4:	f894 e002 	ldrb.w	lr, [r4, #2]
 80238c8:	7864      	ldrb	r4, [r4, #1]
 80238ca:	b289      	uxth	r1, r1
 80238cc:	fb01 f606 	mul.w	r6, r1, r6
 80238d0:	fb01 fe0e 	mul.w	lr, r1, lr
 80238d4:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 80238d8:	fb01 f104 	mul.w	r1, r1, r4
 80238dc:	9c08      	ldr	r4, [sp, #32]
 80238de:	b292      	uxth	r2, r2
 80238e0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80238e4:	5d65      	ldrb	r5, [r4, r5]
 80238e6:	1a9b      	subs	r3, r3, r2
 80238e8:	f89c 4002 	ldrb.w	r4, [ip, #2]
 80238ec:	f89c c001 	ldrb.w	ip, [ip, #1]
 80238f0:	b29b      	uxth	r3, r3
 80238f2:	fb03 e404 	mla	r4, r3, r4, lr
 80238f6:	fb03 6505 	mla	r5, r3, r5, r6
 80238fa:	fb03 130c 	mla	r3, r3, ip, r1
 80238fe:	f890 c001 	ldrb.w	ip, [r0, #1]
 8023902:	7801      	ldrb	r1, [r0, #0]
 8023904:	f890 e002 	ldrb.w	lr, [r0, #2]
 8023908:	fb02 3c0c 	mla	ip, r2, ip, r3
 802390c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802390e:	fb02 5601 	mla	r6, r2, r1, r5
 8023912:	fb02 4e0e 	mla	lr, r2, lr, r4
 8023916:	7899      	ldrb	r1, [r3, #2]
 8023918:	781a      	ldrb	r2, [r3, #0]
 802391a:	785b      	ldrb	r3, [r3, #1]
 802391c:	f8b9 0000 	ldrh.w	r0, [r9]
 8023920:	fb07 c303 	mla	r3, r7, r3, ip
 8023924:	fb07 6202 	mla	r2, r7, r2, r6
 8023928:	00c5      	lsls	r5, r0, #3
 802392a:	1204      	asrs	r4, r0, #8
 802392c:	fb07 e101 	mla	r1, r7, r1, lr
 8023930:	10c0      	asrs	r0, r0, #3
 8023932:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8023934:	b2ed      	uxtb	r5, r5
 8023936:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802393a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802393e:	fb15 f507 	smulbb	r5, r5, r7
 8023942:	fb14 f407 	smulbb	r4, r4, r7
 8023946:	fb10 f007 	smulbb	r0, r0, r7
 802394a:	f3c3 2707 	ubfx	r7, r3, #8, #8
 802394e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023950:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023954:	461e      	mov	r6, r3
 8023956:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802395a:	fb02 5203 	mla	r2, r2, r3, r5
 802395e:	fb07 0006 	mla	r0, r7, r6, r0
 8023962:	fb01 4303 	mla	r3, r1, r3, r4
 8023966:	b281      	uxth	r1, r0
 8023968:	b294      	uxth	r4, r2
 802396a:	b29b      	uxth	r3, r3
 802396c:	1c4a      	adds	r2, r1, #1
 802396e:	1c5d      	adds	r5, r3, #1
 8023970:	1c60      	adds	r0, r4, #1
 8023972:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8023976:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 802397a:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 802397e:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8023982:	f3c0 21c4 	ubfx	r1, r0, #11, #5
 8023986:	0952      	lsrs	r2, r2, #5
 8023988:	430b      	orrs	r3, r1
 802398a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802398e:	4313      	orrs	r3, r2
 8023990:	f8a9 3000 	strh.w	r3, [r9]
 8023994:	e757      	b.n	8023846 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8023996:	5c18      	ldrb	r0, [r3, r0]
 8023998:	9b08      	ldr	r3, [sp, #32]
 802399a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802399e:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 80239a2:	4418      	add	r0, r3
 80239a4:	4664      	mov	r4, ip
 80239a6:	e786      	b.n	80238b6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80239a8:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 80239ac:	4660      	mov	r0, ip
 80239ae:	e782      	b.n	80238b6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80239b0:	f43f adec 	beq.w	802358c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80239b4:	1e6e      	subs	r6, r5, #1
 80239b6:	46d4      	mov	ip, sl
 80239b8:	e62c      	b.n	8023614 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 80239ba:	bf00      	nop

080239bc <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 80239bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80239c0:	4692      	mov	sl, r2
 80239c2:	b083      	sub	sp, #12
 80239c4:	880a      	ldrh	r2, [r1, #0]
 80239c6:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80239ca:	e9dd 740e 	ldrd	r7, r4, [sp, #56]	; 0x38
 80239ce:	0215      	lsls	r5, r2, #8
 80239d0:	0150      	lsls	r0, r2, #5
 80239d2:	fb04 7e0c 	mla	lr, r4, ip, r7
 80239d6:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 80239da:	f405 0578 	and.w	r5, r5, #16252928	; 0xf80000
 80239de:	00d2      	lsls	r2, r2, #3
 80239e0:	4305      	orrs	r5, r0
 80239e2:	b2d2      	uxtb	r2, r2
 80239e4:	4315      	orrs	r5, r2
 80239e6:	2c00      	cmp	r4, #0
 80239e8:	9501      	str	r5, [sp, #4]
 80239ea:	eb0a 020e 	add.w	r2, sl, lr
 80239ee:	f104 0801 	add.w	r8, r4, #1
 80239f2:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 80239f6:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 80239fa:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80239fe:	db01      	blt.n	8023a04 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x48>
 8023a00:	45a1      	cmp	r9, r4
 8023a02:	dc71      	bgt.n	8023ae8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x12c>
 8023a04:	fa5f fa85 	uxtb.w	sl, r5
 8023a08:	f10d 0b04 	add.w	fp, sp, #4
 8023a0c:	4654      	mov	r4, sl
 8023a0e:	46de      	mov	lr, fp
 8023a10:	f1b8 0f00 	cmp.w	r8, #0
 8023a14:	db01      	blt.n	8023a1a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5e>
 8023a16:	45c1      	cmp	r9, r8
 8023a18:	dc4c      	bgt.n	8023ab4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xf8>
 8023a1a:	fa5f f985 	uxtb.w	r9, r5
 8023a1e:	ab01      	add	r3, sp, #4
 8023a20:	464d      	mov	r5, r9
 8023a22:	4698      	mov	r8, r3
 8023a24:	2e0f      	cmp	r6, #15
 8023a26:	f200 809b 	bhi.w	8023b60 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1a4>
 8023a2a:	280f      	cmp	r0, #15
 8023a2c:	f200 8098 	bhi.w	8023b60 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1a4>
 8023a30:	b2b2      	uxth	r2, r6
 8023a32:	b280      	uxth	r0, r0
 8023a34:	fb02 f700 	mul.w	r7, r2, r0
 8023a38:	0112      	lsls	r2, r2, #4
 8023a3a:	f89b c002 	ldrb.w	ip, [fp, #2]
 8023a3e:	1bd6      	subs	r6, r2, r7
 8023a40:	f89b b001 	ldrb.w	fp, [fp, #1]
 8023a44:	b2b6      	uxth	r6, r6
 8023a46:	ebc7 1000 	rsb	r0, r7, r0, lsl #4
 8023a4a:	fb06 f404 	mul.w	r4, r6, r4
 8023a4e:	fb06 fc0c 	mul.w	ip, r6, ip
 8023a52:	fb06 f60b 	mul.w	r6, r6, fp
 8023a56:	b280      	uxth	r0, r0
 8023a58:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8023a5c:	f89e b002 	ldrb.w	fp, [lr, #2]
 8023a60:	1a12      	subs	r2, r2, r0
 8023a62:	f89e e001 	ldrb.w	lr, [lr, #1]
 8023a66:	b292      	uxth	r2, r2
 8023a68:	fb02 440a 	mla	r4, r2, sl, r4
 8023a6c:	fb02 660e 	mla	r6, r2, lr, r6
 8023a70:	fb02 cc0b 	mla	ip, r2, fp, ip
 8023a74:	f898 a002 	ldrb.w	sl, [r8, #2]
 8023a78:	f898 8001 	ldrb.w	r8, [r8, #1]
 8023a7c:	fb00 4909 	mla	r9, r0, r9, r4
 8023a80:	fb00 cc0a 	mla	ip, r0, sl, ip
 8023a84:	fb00 6008 	mla	r0, r0, r8, r6
 8023a88:	789e      	ldrb	r6, [r3, #2]
 8023a8a:	785b      	ldrb	r3, [r3, #1]
 8023a8c:	fb07 9905 	mla	r9, r7, r5, r9
 8023a90:	fb07 c506 	mla	r5, r7, r6, ip
 8023a94:	fb07 0703 	mla	r7, r7, r3, r0
 8023a98:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8023a9c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8023aa0:	097f      	lsrs	r7, r7, #5
 8023aa2:	ea45 0509 	orr.w	r5, r5, r9
 8023aa6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8023aaa:	433d      	orrs	r5, r7
 8023aac:	800d      	strh	r5, [r1, #0]
 8023aae:	b003      	add	sp, #12
 8023ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023ab4:	b388      	cbz	r0, 8023b1a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x15e>
 8023ab6:	2f00      	cmp	r7, #0
 8023ab8:	db40      	blt.n	8023b3c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x180>
 8023aba:	45bc      	cmp	ip, r7
 8023abc:	dd3e      	ble.n	8023b3c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x180>
 8023abe:	f812 800c 	ldrb.w	r8, [r2, ip]
 8023ac2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8023ac6:	4498      	add	r8, r3
 8023ac8:	3701      	adds	r7, #1
 8023aca:	f898 9000 	ldrb.w	r9, [r8]
 8023ace:	d432      	bmi.n	8023b36 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x17a>
 8023ad0:	45bc      	cmp	ip, r7
 8023ad2:	dd30      	ble.n	8023b36 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x17a>
 8023ad4:	2e00      	cmp	r6, #0
 8023ad6:	d040      	beq.n	8023b5a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x19e>
 8023ad8:	4494      	add	ip, r2
 8023ada:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8023ade:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023ae2:	5c9d      	ldrb	r5, [r3, r2]
 8023ae4:	4413      	add	r3, r2
 8023ae6:	e79d      	b.n	8023a24 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x68>
 8023ae8:	2f00      	cmp	r7, #0
 8023aea:	db01      	blt.n	8023af0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x134>
 8023aec:	45bc      	cmp	ip, r7
 8023aee:	dc1c      	bgt.n	8023b2a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16e>
 8023af0:	f10d 0e04 	add.w	lr, sp, #4
 8023af4:	1c7c      	adds	r4, r7, #1
 8023af6:	f89e a000 	ldrb.w	sl, [lr]
 8023afa:	d40a      	bmi.n	8023b12 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x156>
 8023afc:	45a4      	cmp	ip, r4
 8023afe:	dd08      	ble.n	8023b12 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x156>
 8023b00:	b1fe      	cbz	r6, 8023b42 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x186>
 8023b02:	f892 b001 	ldrb.w	fp, [r2, #1]
 8023b06:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8023b0a:	f813 400b 	ldrb.w	r4, [r3, fp]
 8023b0e:	449b      	add	fp, r3
 8023b10:	e77e      	b.n	8023a10 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x54>
 8023b12:	b2ec      	uxtb	r4, r5
 8023b14:	f10d 0b04 	add.w	fp, sp, #4
 8023b18:	e77a      	b.n	8023a10 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x54>
 8023b1a:	2e0f      	cmp	r6, #15
 8023b1c:	fa5f f985 	uxtb.w	r9, r5
 8023b20:	d81e      	bhi.n	8023b60 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1a4>
 8023b22:	ab01      	add	r3, sp, #4
 8023b24:	4698      	mov	r8, r3
 8023b26:	464d      	mov	r5, r9
 8023b28:	e782      	b.n	8023a30 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x74>
 8023b2a:	f81a e00e 	ldrb.w	lr, [sl, lr]
 8023b2e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8023b32:	449e      	add	lr, r3
 8023b34:	e7de      	b.n	8023af4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8023b36:	b2ed      	uxtb	r5, r5
 8023b38:	ab01      	add	r3, sp, #4
 8023b3a:	e773      	b.n	8023a24 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x68>
 8023b3c:	f10d 0804 	add.w	r8, sp, #4
 8023b40:	e7c2      	b.n	8023ac8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x10c>
 8023b42:	f1b8 0f00 	cmp.w	r8, #0
 8023b46:	b2ec      	uxtb	r4, r5
 8023b48:	f10d 0b04 	add.w	fp, sp, #4
 8023b4c:	f6bf af63 	bge.w	8023a16 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5a>
 8023b50:	465b      	mov	r3, fp
 8023b52:	46d8      	mov	r8, fp
 8023b54:	4625      	mov	r5, r4
 8023b56:	46a1      	mov	r9, r4
 8023b58:	e767      	b.n	8023a2a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8023b5a:	b2ed      	uxtb	r5, r5
 8023b5c:	ab01      	add	r3, sp, #4
 8023b5e:	e764      	b.n	8023a2a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8023b60:	4b03      	ldr	r3, [pc, #12]	; (8023b70 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1b4>)
 8023b62:	4a04      	ldr	r2, [pc, #16]	; (8023b74 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1b8>)
 8023b64:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8023b68:	4803      	ldr	r0, [pc, #12]	; (8023b78 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1bc>)
 8023b6a:	f005 faa7 	bl	80290bc <__assert_func>
 8023b6e:	bf00      	nop
 8023b70:	0802c360 	.word	0x0802c360
 8023b74:	0802c9d8 	.word	0x0802c9d8
 8023b78:	0802c4e4 	.word	0x0802c4e4

08023b7c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b80:	ed2d 8b0a 	vpush	{d8-d12}
 8023b84:	eeb0 aa40 	vmov.f32	s20, s0
 8023b88:	eef0 9a60 	vmov.f32	s19, s1
 8023b8c:	eeb0 9a41 	vmov.f32	s18, s2
 8023b90:	eef0 8a62 	vmov.f32	s17, s5
 8023b94:	eeb0 8a43 	vmov.f32	s16, s6
 8023b98:	eeb0 ca44 	vmov.f32	s24, s8
 8023b9c:	eef0 ba64 	vmov.f32	s23, s9
 8023ba0:	eeb0 ba45 	vmov.f32	s22, s10
 8023ba4:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8023ba8:	b093      	sub	sp, #76	; 0x4c
 8023baa:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8023bae:	e9dd 412b 	ldrd	r4, r1, [sp, #172]	; 0xac
 8023bb2:	e9dd 9827 	ldrd	r9, r8, [sp, #156]	; 0x9c
 8023bb6:	9011      	str	r0, [sp, #68]	; 0x44
 8023bb8:	461a      	mov	r2, r3
 8023bba:	6860      	ldr	r0, [r4, #4]
 8023bbc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023bbe:	f8dd a0a4 	ldr.w	sl, [sp, #164]	; 0xa4
 8023bc2:	fb00 1303 	mla	r3, r0, r3, r1
 8023bc6:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8023bc8:	6820      	ldr	r0, [r4, #0]
 8023bca:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8023bcc:	6849      	ldr	r1, [r1, #4]
 8023bce:	6824      	ldr	r4, [r4, #0]
 8023bd0:	eb00 0b43 	add.w	fp, r0, r3, lsl #1
 8023bd4:	1d0b      	adds	r3, r1, #4
 8023bd6:	9409      	str	r4, [sp, #36]	; 0x24
 8023bd8:	930c      	str	r3, [sp, #48]	; 0x30
 8023bda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023bdc:	2b00      	cmp	r3, #0
 8023bde:	dc02      	bgt.n	8023be6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8023be0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023be2:	2b00      	cmp	r3, #0
 8023be4:	dd61      	ble.n	8023caa <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
 8023be6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023be8:	2a00      	cmp	r2, #0
 8023bea:	e9d3 4e02 	ldrd	r4, lr, [r3, #8]
 8023bee:	b225      	sxth	r5, r4
 8023bf0:	fa0f f78e 	sxth.w	r7, lr
 8023bf4:	f340 81d9 	ble.w	8023faa <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8023bf8:	f8cd e01c 	str.w	lr, [sp, #28]
 8023bfc:	f8dd e0a8 	ldr.w	lr, [sp, #168]	; 0xa8
 8023c00:	1e6e      	subs	r6, r5, #1
 8023c02:	f107 3cff 	add.w	ip, r7, #4294967295
 8023c06:	ea5f 4329 	movs.w	r3, r9, asr #16
 8023c0a:	ea4f 4128 	mov.w	r1, r8, asr #16
 8023c0e:	d405      	bmi.n	8023c1c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8023c10:	42b3      	cmp	r3, r6
 8023c12:	da03      	bge.n	8023c1c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8023c14:	2900      	cmp	r1, #0
 8023c16:	db01      	blt.n	8023c1c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8023c18:	4561      	cmp	r1, ip
 8023c1a:	db4b      	blt.n	8023cb4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8023c1c:	1c58      	adds	r0, r3, #1
 8023c1e:	d406      	bmi.n	8023c2e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8023c20:	42a8      	cmp	r0, r5
 8023c22:	dc04      	bgt.n	8023c2e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8023c24:	1c48      	adds	r0, r1, #1
 8023c26:	d402      	bmi.n	8023c2e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8023c28:	42b8      	cmp	r0, r7
 8023c2a:	f340 8149 	ble.w	8023ec0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8023c2e:	3a01      	subs	r2, #1
 8023c30:	44d1      	add	r9, sl
 8023c32:	44f0      	add	r8, lr
 8023c34:	f10b 0b02 	add.w	fp, fp, #2
 8023c38:	d1e5      	bne.n	8023c06 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8023c3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023c3c:	2b00      	cmp	r3, #0
 8023c3e:	dd34      	ble.n	8023caa <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
 8023c40:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8023c44:	ee79 9aab 	vadd.f32	s19, s19, s23
 8023c48:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8023c4c:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8023c50:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8023c54:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023c58:	ee76 6a68 	vsub.f32	s13, s12, s17
 8023c5c:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8023c60:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023c64:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8023c68:	ee16 2a90 	vmov	r2, s13
 8023c6c:	3b01      	subs	r3, #1
 8023c6e:	930a      	str	r3, [sp, #40]	; 0x28
 8023c70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023c72:	fb92 faf3 	sdiv	sl, r2, r3
 8023c76:	ee17 2a10 	vmov	r2, s14
 8023c7a:	eeb0 7a48 	vmov.f32	s14, s16
 8023c7e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8023c82:	ee17 8a10 	vmov	r8, s14
 8023c86:	eeb0 7a68 	vmov.f32	s14, s17
 8023c8a:	fb92 f3f3 	sdiv	r3, r2, r3
 8023c8e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8023c92:	932a      	str	r3, [sp, #168]	; 0xa8
 8023c94:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023c96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023c98:	ee17 9a10 	vmov	r9, s14
 8023c9c:	eeb0 8a67 	vmov.f32	s16, s15
 8023ca0:	eef0 8a46 	vmov.f32	s17, s12
 8023ca4:	bf18      	it	ne
 8023ca6:	461a      	movne	r2, r3
 8023ca8:	e797      	b.n	8023bda <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8023caa:	b013      	add	sp, #76	; 0x4c
 8023cac:	ecbd 8b0a 	vpop	{d8-d12}
 8023cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023cb4:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8023cb8:	f8cd b01c 	str.w	fp, [sp, #28]
 8023cbc:	1e51      	subs	r1, r2, #1
 8023cbe:	fb0a 9301 	mla	r3, sl, r1, r9
 8023cc2:	141b      	asrs	r3, r3, #16
 8023cc4:	9108      	str	r1, [sp, #32]
 8023cc6:	f100 809e 	bmi.w	8023e06 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8023cca:	42b3      	cmp	r3, r6
 8023ccc:	f280 809b 	bge.w	8023e06 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8023cd0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023cd2:	fb03 8301 	mla	r3, r3, r1, r8
 8023cd6:	141b      	asrs	r3, r3, #16
 8023cd8:	f100 8095 	bmi.w	8023e06 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8023cdc:	3f01      	subs	r7, #1
 8023cde:	42bb      	cmp	r3, r7
 8023ce0:	f280 8091 	bge.w	8023e06 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8023ce4:	2a00      	cmp	r2, #0
 8023ce6:	dda8      	ble.n	8023c3a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8023ce8:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 8023cec:	f8cd a0a4 	str.w	sl, [sp, #164]	; 0xa4
 8023cf0:	f8cd b020 	str.w	fp, [sp, #32]
 8023cf4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8023cf8:	e060      	b.n	8023dbc <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8023cfa:	784f      	ldrb	r7, [r1, #1]
 8023cfc:	194c      	adds	r4, r1, r5
 8023cfe:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023d02:	4457      	add	r7, sl
 8023d04:	2a00      	cmp	r2, #0
 8023d06:	d075      	beq.n	8023df4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8023d08:	5d48      	ldrb	r0, [r1, r5]
 8023d0a:	7865      	ldrb	r5, [r4, #1]
 8023d0c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023d10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023d14:	4450      	add	r0, sl
 8023d16:	4455      	add	r5, sl
 8023d18:	b29b      	uxth	r3, r3
 8023d1a:	b292      	uxth	r2, r2
 8023d1c:	fb03 f402 	mul.w	r4, r3, r2
 8023d20:	011b      	lsls	r3, r3, #4
 8023d22:	f897 e000 	ldrb.w	lr, [r7]
 8023d26:	f897 c002 	ldrb.w	ip, [r7, #2]
 8023d2a:	1b19      	subs	r1, r3, r4
 8023d2c:	787f      	ldrb	r7, [r7, #1]
 8023d2e:	b289      	uxth	r1, r1
 8023d30:	fb01 fc0c 	mul.w	ip, r1, ip
 8023d34:	fb01 fe0e 	mul.w	lr, r1, lr
 8023d38:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8023d3c:	fb01 f107 	mul.w	r1, r1, r7
 8023d40:	b292      	uxth	r2, r2
 8023d42:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8023d46:	f81a b00b 	ldrb.w	fp, [sl, fp]
 8023d4a:	78b7      	ldrb	r7, [r6, #2]
 8023d4c:	1a9b      	subs	r3, r3, r2
 8023d4e:	7876      	ldrb	r6, [r6, #1]
 8023d50:	b29b      	uxth	r3, r3
 8023d52:	fb03 ee0b 	mla	lr, r3, fp, lr
 8023d56:	fb03 c707 	mla	r7, r3, r7, ip
 8023d5a:	fb03 1306 	mla	r3, r3, r6, r1
 8023d5e:	f890 b000 	ldrb.w	fp, [r0]
 8023d62:	f890 c002 	ldrb.w	ip, [r0, #2]
 8023d66:	7841      	ldrb	r1, [r0, #1]
 8023d68:	fb02 ee0b 	mla	lr, r2, fp, lr
 8023d6c:	fb02 3301 	mla	r3, r2, r1, r3
 8023d70:	fb02 770c 	mla	r7, r2, ip, r7
 8023d74:	f895 b000 	ldrb.w	fp, [r5]
 8023d78:	f895 c002 	ldrb.w	ip, [r5, #2]
 8023d7c:	7869      	ldrb	r1, [r5, #1]
 8023d7e:	fb04 ee0b 	mla	lr, r4, fp, lr
 8023d82:	fb04 3101 	mla	r1, r4, r1, r3
 8023d86:	fb04 7c0c 	mla	ip, r4, ip, r7
 8023d8a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023d8c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8023d90:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8023d94:	0949      	lsrs	r1, r1, #5
 8023d96:	4491      	add	r9, r2
 8023d98:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8023d9a:	9b07      	ldr	r3, [sp, #28]
 8023d9c:	ea4c 0e0e 	orr.w	lr, ip, lr
 8023da0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023da4:	ea4e 0e01 	orr.w	lr, lr, r1
 8023da8:	4490      	add	r8, r2
 8023daa:	9a08      	ldr	r2, [sp, #32]
 8023dac:	f823 eb02 	strh.w	lr, [r3], #2
 8023db0:	4293      	cmp	r3, r2
 8023db2:	9307      	str	r3, [sp, #28]
 8023db4:	d025      	beq.n	8023e02 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 8023db6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023db8:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8023dbc:	ea4f 4329 	mov.w	r3, r9, asr #16
 8023dc0:	ea4f 4128 	mov.w	r1, r8, asr #16
 8023dc4:	fb05 3101 	mla	r1, r5, r1, r3
 8023dc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023dca:	f3c9 3303 	ubfx	r3, r9, #12, #4
 8023dce:	f812 b001 	ldrb.w	fp, [r2, r1]
 8023dd2:	4411      	add	r1, r2
 8023dd4:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8023dd8:	eb0a 060b 	add.w	r6, sl, fp
 8023ddc:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8023de0:	2b00      	cmp	r3, #0
 8023de2:	d18a      	bne.n	8023cfa <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8023de4:	b14a      	cbz	r2, 8023dfa <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8023de6:	5d48      	ldrb	r0, [r1, r5]
 8023de8:	4637      	mov	r7, r6
 8023dea:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023dee:	4635      	mov	r5, r6
 8023df0:	4450      	add	r0, sl
 8023df2:	e791      	b.n	8023d18 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8023df4:	4635      	mov	r5, r6
 8023df6:	4630      	mov	r0, r6
 8023df8:	e78e      	b.n	8023d18 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8023dfa:	4635      	mov	r5, r6
 8023dfc:	4630      	mov	r0, r6
 8023dfe:	4637      	mov	r7, r6
 8023e00:	e78a      	b.n	8023d18 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8023e02:	4693      	mov	fp, r2
 8023e04:	e719      	b.n	8023c3a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8023e06:	2a00      	cmp	r2, #0
 8023e08:	f77f af17 	ble.w	8023c3a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8023e0c:	9e08      	ldr	r6, [sp, #32]
 8023e0e:	ea4f 4329 	mov.w	r3, r9, asr #16
 8023e12:	ea4f 4128 	mov.w	r1, r8, asr #16
 8023e16:	465f      	mov	r7, fp
 8023e18:	f8cd b01c 	str.w	fp, [sp, #28]
 8023e1c:	f8dd b0b8 	ldr.w	fp, [sp, #184]	; 0xb8
 8023e20:	2b00      	cmp	r3, #0
 8023e22:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8023e26:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8023e2a:	db2a      	blt.n	8023e82 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8023e2c:	1e65      	subs	r5, r4, #1
 8023e2e:	42ab      	cmp	r3, r5
 8023e30:	da27      	bge.n	8023e82 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8023e32:	2900      	cmp	r1, #0
 8023e34:	db25      	blt.n	8023e82 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8023e36:	f10e 35ff 	add.w	r5, lr, #4294967295
 8023e3a:	42a9      	cmp	r1, r5
 8023e3c:	da21      	bge.n	8023e82 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8023e3e:	b224      	sxth	r4, r4
 8023e40:	fb01 3304 	mla	r3, r1, r4, r3
 8023e44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023e46:	f811 c003 	ldrb.w	ip, [r1, r3]
 8023e4a:	440b      	add	r3, r1
 8023e4c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023e4e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8023e52:	eb01 0e0c 	add.w	lr, r1, ip
 8023e56:	2800      	cmp	r0, #0
 8023e58:	d048      	beq.n	8023eec <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8023e5a:	785d      	ldrb	r5, [r3, #1]
 8023e5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023e60:	440d      	add	r5, r1
 8023e62:	2a00      	cmp	r2, #0
 8023e64:	f000 809e 	beq.w	8023fa4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8023e68:	1919      	adds	r1, r3, r4
 8023e6a:	7849      	ldrb	r1, [r1, #1]
 8023e6c:	5d1c      	ldrb	r4, [r3, r4]
 8023e6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023e70:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023e74:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023e78:	1859      	adds	r1, r3, r1
 8023e7a:	18e3      	adds	r3, r4, r3
 8023e7c:	910f      	str	r1, [sp, #60]	; 0x3c
 8023e7e:	9310      	str	r3, [sp, #64]	; 0x40
 8023e80:	e039      	b.n	8023ef6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8023e82:	1c5d      	adds	r5, r3, #1
 8023e84:	d405      	bmi.n	8023e92 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8023e86:	42a5      	cmp	r5, r4
 8023e88:	dc03      	bgt.n	8023e92 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8023e8a:	1c4d      	adds	r5, r1, #1
 8023e8c:	d401      	bmi.n	8023e92 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8023e8e:	4575      	cmp	r5, lr
 8023e90:	dd1c      	ble.n	8023ecc <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8023e92:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023e94:	2e00      	cmp	r6, #0
 8023e96:	f107 0702 	add.w	r7, r7, #2
 8023e9a:	44d1      	add	r9, sl
 8023e9c:	4498      	add	r8, r3
 8023e9e:	dd07      	ble.n	8023eb0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 8023ea0:	e9db 4e02 	ldrd	r4, lr, [fp, #8]
 8023ea4:	3e01      	subs	r6, #1
 8023ea6:	ea4f 4329 	mov.w	r3, r9, asr #16
 8023eaa:	ea4f 4128 	mov.w	r1, r8, asr #16
 8023eae:	e7b7      	b.n	8023e20 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8023eb0:	e9dd b307 	ldrd	fp, r3, [sp, #28]
 8023eb4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023eb8:	3301      	adds	r3, #1
 8023eba:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 8023ebe:	e6bc      	b.n	8023c3a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8023ec0:	3a01      	subs	r2, #1
 8023ec2:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8023ec6:	9208      	str	r2, [sp, #32]
 8023ec8:	4616      	mov	r6, r2
 8023eca:	e7a4      	b.n	8023e16 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8023ecc:	fa0f f58e 	sxth.w	r5, lr
 8023ed0:	b224      	sxth	r4, r4
 8023ed2:	e9cd 0204 	strd	r0, r2, [sp, #16]
 8023ed6:	e9cd 3102 	strd	r3, r1, [sp, #8]
 8023eda:	e9cd 4500 	strd	r4, r5, [sp]
 8023ede:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023ee0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023ee2:	4639      	mov	r1, r7
 8023ee4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8023ee6:	f7ff fd69 	bl	80239bc <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8023eea:	e7d2      	b.n	8023e92 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8023eec:	2a00      	cmp	r2, #0
 8023eee:	d14f      	bne.n	8023f90 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 8023ef0:	4675      	mov	r5, lr
 8023ef2:	e9cd ee0f 	strd	lr, lr, [sp, #60]	; 0x3c
 8023ef6:	b283      	uxth	r3, r0
 8023ef8:	b292      	uxth	r2, r2
 8023efa:	fb03 f002 	mul.w	r0, r3, r2
 8023efe:	782c      	ldrb	r4, [r5, #0]
 8023f00:	011b      	lsls	r3, r3, #4
 8023f02:	940e      	str	r4, [sp, #56]	; 0x38
 8023f04:	78ac      	ldrb	r4, [r5, #2]
 8023f06:	1a19      	subs	r1, r3, r0
 8023f08:	940d      	str	r4, [sp, #52]	; 0x34
 8023f0a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023f0c:	b289      	uxth	r1, r1
 8023f0e:	fb01 f404 	mul.w	r4, r1, r4
 8023f12:	940e      	str	r4, [sp, #56]	; 0x38
 8023f14:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023f16:	786d      	ldrb	r5, [r5, #1]
 8023f18:	fb01 f404 	mul.w	r4, r1, r4
 8023f1c:	ebc0 1202 	rsb	r2, r0, r2, lsl #4
 8023f20:	fb01 f105 	mul.w	r1, r1, r5
 8023f24:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023f26:	b292      	uxth	r2, r2
 8023f28:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8023f2c:	f815 c00c 	ldrb.w	ip, [r5, ip]
 8023f30:	940d      	str	r4, [sp, #52]	; 0x34
 8023f32:	1a9b      	subs	r3, r3, r2
 8023f34:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023f36:	b29b      	uxth	r3, r3
 8023f38:	f89e 5002 	ldrb.w	r5, [lr, #2]
 8023f3c:	fb03 4c0c 	mla	ip, r3, ip, r4
 8023f40:	f89e e001 	ldrb.w	lr, [lr, #1]
 8023f44:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023f46:	fb03 4505 	mla	r5, r3, r5, r4
 8023f4a:	fb03 130e 	mla	r3, r3, lr, r1
 8023f4e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023f50:	78a1      	ldrb	r1, [r4, #2]
 8023f52:	f894 e000 	ldrb.w	lr, [r4]
 8023f56:	7864      	ldrb	r4, [r4, #1]
 8023f58:	fb02 5501 	mla	r5, r2, r1, r5
 8023f5c:	fb02 cc0e 	mla	ip, r2, lr, ip
 8023f60:	fb02 3104 	mla	r1, r2, r4, r3
 8023f64:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023f66:	7822      	ldrb	r2, [r4, #0]
 8023f68:	78a3      	ldrb	r3, [r4, #2]
 8023f6a:	7864      	ldrb	r4, [r4, #1]
 8023f6c:	fb00 cc02 	mla	ip, r0, r2, ip
 8023f70:	fb00 5303 	mla	r3, r0, r3, r5
 8023f74:	fb00 1204 	mla	r2, r0, r4, r1
 8023f78:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8023f7c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8023f80:	0952      	lsrs	r2, r2, #5
 8023f82:	ea43 030c 	orr.w	r3, r3, ip
 8023f86:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023f8a:	4313      	orrs	r3, r2
 8023f8c:	803b      	strh	r3, [r7, #0]
 8023f8e:	e780      	b.n	8023e92 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8023f90:	5d1c      	ldrb	r4, [r3, r4]
 8023f92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023f94:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023f98:	18e3      	adds	r3, r4, r3
 8023f9a:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 8023f9e:	9310      	str	r3, [sp, #64]	; 0x40
 8023fa0:	4675      	mov	r5, lr
 8023fa2:	e7a8      	b.n	8023ef6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8023fa4:	e9cd ee0f 	strd	lr, lr, [sp, #60]	; 0x3c
 8023fa8:	e7a5      	b.n	8023ef6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8023faa:	f43f ae46 	beq.w	8023c3a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8023fae:	1e6e      	subs	r6, r5, #1
 8023fb0:	f8cd b01c 	str.w	fp, [sp, #28]
 8023fb4:	e682      	b.n	8023cbc <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8023fb6:	bf00      	nop

08023fb8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8023fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023fbc:	b08b      	sub	sp, #44	; 0x2c
 8023fbe:	f9bd 7050 	ldrsh.w	r7, [sp, #80]	; 0x50
 8023fc2:	f8b1 c000 	ldrh.w	ip, [r1]
 8023fc6:	e9dd 6416 	ldrd	r6, r4, [sp, #88]	; 0x58
 8023fca:	fb04 6507 	mla	r5, r4, r7, r6
 8023fce:	9107      	str	r1, [sp, #28]
 8023fd0:	ea4f 01ec 	mov.w	r1, ip, asr #3
 8023fd4:	ea4f 202c 	mov.w	r0, ip, asr #8
 8023fd8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023fdc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8023fe0:	469a      	mov	sl, r3
 8023fe2:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8023fe6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023fea:	9105      	str	r1, [sp, #20]
 8023fec:	2c00      	cmp	r4, #0
 8023fee:	fa5f f18c 	uxtb.w	r1, ip
 8023ff2:	9004      	str	r0, [sp, #16]
 8023ff4:	9106      	str	r1, [sp, #24]
 8023ff6:	eb02 0e05 	add.w	lr, r2, r5
 8023ffa:	f104 0801 	add.w	r8, r4, #1
 8023ffe:	f9bd 9054 	ldrsh.w	r9, [sp, #84]	; 0x54
 8024002:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
 8024006:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
 802400a:	9308      	str	r3, [sp, #32]
 802400c:	db02      	blt.n	8024014 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 802400e:	45a1      	cmp	r9, r4
 8024010:	f300 8119 	bgt.w	8024246 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28e>
 8024014:	f04f 0c00 	mov.w	ip, #0
 8024018:	4665      	mov	r5, ip
 802401a:	4662      	mov	r2, ip
 802401c:	4664      	mov	r4, ip
 802401e:	f1b8 0f00 	cmp.w	r8, #0
 8024022:	db02      	blt.n	802402a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x72>
 8024024:	45c1      	cmp	r9, r8
 8024026:	f300 8127 	bgt.w	8024278 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c0>
 802402a:	f04f 0e00 	mov.w	lr, #0
 802402e:	46f0      	mov	r8, lr
 8024030:	4676      	mov	r6, lr
 8024032:	46f1      	mov	r9, lr
 8024034:	290f      	cmp	r1, #15
 8024036:	f200 815e 	bhi.w	80242f6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x33e>
 802403a:	280f      	cmp	r0, #15
 802403c:	f200 815b 	bhi.w	80242f6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x33e>
 8024040:	b280      	uxth	r0, r0
 8024042:	b289      	uxth	r1, r1
 8024044:	fb00 fa01 	mul.w	sl, r0, r1
 8024048:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 802404c:	b280      	uxth	r0, r0
 802404e:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 8024052:	fb00 fb08 	mul.w	fp, r0, r8
 8024056:	fb0a f70e 	mul.w	r7, sl, lr
 802405a:	9301      	str	r3, [sp, #4]
 802405c:	f009 13ff 	and.w	r3, r9, #16711935	; 0xff00ff
 8024060:	9302      	str	r3, [sp, #8]
 8024062:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 8024066:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802406a:	9303      	str	r3, [sp, #12]
 802406c:	0109      	lsls	r1, r1, #4
 802406e:	eba1 090a 	sub.w	r9, r1, sl
 8024072:	fa1f f989 	uxth.w	r9, r9
 8024076:	fb09 f30c 	mul.w	r3, r9, ip
 802407a:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 802407e:	1a09      	subs	r1, r1, r0
 8024080:	b289      	uxth	r1, r1
 8024082:	fb01 3305 	mla	r3, r1, r5, r3
 8024086:	445b      	add	r3, fp
 8024088:	443b      	add	r3, r7
 802408a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802408e:	2dff      	cmp	r5, #255	; 0xff
 8024090:	9309      	str	r3, [sp, #36]	; 0x24
 8024092:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8024096:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802409a:	d019      	beq.n	80240d0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x118>
 802409c:	fb03 f305 	mul.w	r3, r3, r5
 80240a0:	fb04 f405 	mul.w	r4, r4, r5
 80240a4:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 80240a8:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80240ac:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80240b0:	f504 7780 	add.w	r7, r4, #256	; 0x100
 80240b4:	445b      	add	r3, fp
 80240b6:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 80240ba:	0a1b      	lsrs	r3, r3, #8
 80240bc:	0a24      	lsrs	r4, r4, #8
 80240be:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80240c2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80240c6:	431c      	orrs	r4, r3
 80240c8:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80240cc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80240d0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80240d4:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 80240d8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80240dc:	d018      	beq.n	8024110 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x158>
 80240de:	fb05 f50c 	mul.w	r5, r5, ip
 80240e2:	fb02 f20c 	mul.w	r2, r2, ip
 80240e6:	0a2f      	lsrs	r7, r5, #8
 80240e8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80240ec:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 80240f0:	f502 7c80 	add.w	ip, r2, #256	; 0x100
 80240f4:	443d      	add	r5, r7
 80240f6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80240fa:	0a2d      	lsrs	r5, r5, #8
 80240fc:	0a12      	lsrs	r2, r2, #8
 80240fe:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024102:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024106:	432a      	orrs	r2, r5
 8024108:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 802410c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024110:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024114:	d01f      	beq.n	8024156 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x19e>
 8024116:	9f02      	ldr	r7, [sp, #8]
 8024118:	fb07 fb08 	mul.w	fp, r7, r8
 802411c:	9f03      	ldr	r7, [sp, #12]
 802411e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8024122:	fb07 f808 	mul.w	r8, r7, r8
 8024126:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802412a:	f508 7780 	add.w	r7, r8, #256	; 0x100
 802412e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024132:	eb07 2718 	add.w	r7, r7, r8, lsr #8
 8024136:	44dc      	add	ip, fp
 8024138:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802413c:	0a3f      	lsrs	r7, r7, #8
 802413e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024142:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024146:	ea4c 0807 	orr.w	r8, ip, r7
 802414a:	f008 17ff 	and.w	r7, r8, #16711935	; 0xff00ff
 802414e:	9702      	str	r7, [sp, #8]
 8024150:	f408 477f 	and.w	r7, r8, #65280	; 0xff00
 8024154:	9703      	str	r7, [sp, #12]
 8024156:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802415a:	d01d      	beq.n	8024198 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1e0>
 802415c:	9f01      	ldr	r7, [sp, #4]
 802415e:	fb06 f60e 	mul.w	r6, r6, lr
 8024162:	fb07 f80e 	mul.w	r8, r7, lr
 8024166:	ea4f 2c18 	mov.w	ip, r8, lsr #8
 802416a:	f506 7780 	add.w	r7, r6, #256	; 0x100
 802416e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024172:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8024176:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 802417a:	44e0      	add	r8, ip
 802417c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024180:	0a36      	lsrs	r6, r6, #8
 8024182:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8024186:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802418a:	ea48 0606 	orr.w	r6, r8, r6
 802418e:	f006 17ff 	and.w	r7, r6, #16711935	; 0xff00ff
 8024192:	9701      	str	r7, [sp, #4]
 8024194:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024198:	f8bd e020 	ldrh.w	lr, [sp, #32]
 802419c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802419e:	fb05 f509 	mul.w	r5, r5, r9
 80241a2:	fb07 f70e 	mul.w	r7, r7, lr
 80241a6:	f107 0c01 	add.w	ip, r7, #1
 80241aa:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 80241ae:	ea6f 2c1c 	mvn.w	ip, ip, lsr #8
 80241b2:	fb02 f209 	mul.w	r2, r2, r9
 80241b6:	fb03 5501 	mla	r5, r3, r1, r5
 80241ba:	fb04 2201 	mla	r2, r4, r1, r2
 80241be:	9b02      	ldr	r3, [sp, #8]
 80241c0:	fa5f fc8c 	uxtb.w	ip, ip
 80241c4:	fb03 5500 	mla	r5, r3, r0, r5
 80241c8:	9b03      	ldr	r3, [sp, #12]
 80241ca:	fb03 2200 	mla	r2, r3, r0, r2
 80241ce:	9b01      	ldr	r3, [sp, #4]
 80241d0:	fb03 550a 	mla	r5, r3, sl, r5
 80241d4:	fb06 2a0a 	mla	sl, r6, sl, r2
 80241d8:	9a05      	ldr	r2, [sp, #20]
 80241da:	9b04      	ldr	r3, [sp, #16]
 80241dc:	fb12 f10c 	smulbb	r1, r2, ip
 80241e0:	9a06      	ldr	r2, [sp, #24]
 80241e2:	0a2e      	lsrs	r6, r5, #8
 80241e4:	fb13 f30c 	smulbb	r3, r3, ip
 80241e8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80241ec:	fb12 fc0c 	smulbb	ip, r2, ip
 80241f0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80241f4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80241f8:	ea46 060a 	orr.w	r6, r6, sl
 80241fc:	0c30      	lsrs	r0, r6, #16
 80241fe:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8024202:	b2f6      	uxtb	r6, r6
 8024204:	fb00 330e 	mla	r3, r0, lr, r3
 8024208:	fb02 120e 	mla	r2, r2, lr, r1
 802420c:	fb06 c60e 	mla	r6, r6, lr, ip
 8024210:	b298      	uxth	r0, r3
 8024212:	b291      	uxth	r1, r2
 8024214:	b2b6      	uxth	r6, r6
 8024216:	1c43      	adds	r3, r0, #1
 8024218:	f106 0e01 	add.w	lr, r6, #1
 802421c:	1c4a      	adds	r2, r1, #1
 802421e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8024222:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8024226:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 802422a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 802422e:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8024232:	0952      	lsrs	r2, r2, #5
 8024234:	4333      	orrs	r3, r6
 8024236:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802423a:	4313      	orrs	r3, r2
 802423c:	9a07      	ldr	r2, [sp, #28]
 802423e:	8013      	strh	r3, [r2, #0]
 8024240:	b00b      	add	sp, #44	; 0x2c
 8024242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024246:	2e00      	cmp	r6, #0
 8024248:	db01      	blt.n	802424e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x296>
 802424a:	42b7      	cmp	r7, r6
 802424c:	dc3c      	bgt.n	80242c8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x310>
 802424e:	2500      	movs	r5, #0
 8024250:	462c      	mov	r4, r5
 8024252:	1c72      	adds	r2, r6, #1
 8024254:	d427      	bmi.n	80242a6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2ee>
 8024256:	4297      	cmp	r7, r2
 8024258:	dd25      	ble.n	80242a6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2ee>
 802425a:	b131      	cbz	r1, 802426a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2b2>
 802425c:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8024260:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8024264:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8024268:	e6d9      	b.n	802401e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x66>
 802426a:	f1b8 0f00 	cmp.w	r8, #0
 802426e:	db3b      	blt.n	80242e8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x330>
 8024270:	45c1      	cmp	r9, r8
 8024272:	dd39      	ble.n	80242e8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x330>
 8024274:	468c      	mov	ip, r1
 8024276:	460a      	mov	r2, r1
 8024278:	b1c8      	cbz	r0, 80242ae <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2f6>
 802427a:	2e00      	cmp	r6, #0
 802427c:	db2d      	blt.n	80242da <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x322>
 802427e:	42b7      	cmp	r7, r6
 8024280:	dd2b      	ble.n	80242da <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x322>
 8024282:	f81e 8007 	ldrb.w	r8, [lr, r7]
 8024286:	f85a 9028 	ldr.w	r9, [sl, r8, lsl #2]
 802428a:	ea4f 6819 	mov.w	r8, r9, lsr #24
 802428e:	3601      	adds	r6, #1
 8024290:	d41f      	bmi.n	80242d2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x31a>
 8024292:	42b7      	cmp	r7, r6
 8024294:	dd1d      	ble.n	80242d2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x31a>
 8024296:	b321      	cbz	r1, 80242e2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x32a>
 8024298:	4477      	add	r7, lr
 802429a:	787e      	ldrb	r6, [r7, #1]
 802429c:	f85a 6026 	ldr.w	r6, [sl, r6, lsl #2]
 80242a0:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 80242a4:	e6c6      	b.n	8024034 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x7c>
 80242a6:	f04f 0c00 	mov.w	ip, #0
 80242aa:	4662      	mov	r2, ip
 80242ac:	e6b7      	b.n	802401e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x66>
 80242ae:	290f      	cmp	r1, #15
 80242b0:	d821      	bhi.n	80242f6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x33e>
 80242b2:	b289      	uxth	r1, r1
 80242b4:	4682      	mov	sl, r0
 80242b6:	4607      	mov	r7, r0
 80242b8:	4683      	mov	fp, r0
 80242ba:	e9cd 0002 	strd	r0, r0, [sp, #8]
 80242be:	4606      	mov	r6, r0
 80242c0:	9001      	str	r0, [sp, #4]
 80242c2:	4686      	mov	lr, r0
 80242c4:	4680      	mov	r8, r0
 80242c6:	e6d1      	b.n	802406c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb4>
 80242c8:	5d52      	ldrb	r2, [r2, r5]
 80242ca:	f85a 4022 	ldr.w	r4, [sl, r2, lsl #2]
 80242ce:	0e25      	lsrs	r5, r4, #24
 80242d0:	e7bf      	b.n	8024252 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x29a>
 80242d2:	f04f 0e00 	mov.w	lr, #0
 80242d6:	4676      	mov	r6, lr
 80242d8:	e6ac      	b.n	8024034 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x7c>
 80242da:	f04f 0800 	mov.w	r8, #0
 80242de:	46c1      	mov	r9, r8
 80242e0:	e7d5      	b.n	802428e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2d6>
 80242e2:	460e      	mov	r6, r1
 80242e4:	468e      	mov	lr, r1
 80242e6:	e6a8      	b.n	802403a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 80242e8:	460a      	mov	r2, r1
 80242ea:	460e      	mov	r6, r1
 80242ec:	4689      	mov	r9, r1
 80242ee:	468e      	mov	lr, r1
 80242f0:	4688      	mov	r8, r1
 80242f2:	468c      	mov	ip, r1
 80242f4:	e6a1      	b.n	802403a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 80242f6:	4b03      	ldr	r3, [pc, #12]	; (8024304 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x34c>)
 80242f8:	4a03      	ldr	r2, [pc, #12]	; (8024308 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x350>)
 80242fa:	f44f 710f 	mov.w	r1, #572	; 0x23c
 80242fe:	4803      	ldr	r0, [pc, #12]	; (802430c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x354>)
 8024300:	f004 fedc 	bl	80290bc <__assert_func>
 8024304:	0802c360 	.word	0x0802c360
 8024308:	0802c9d8 	.word	0x0802c9d8
 802430c:	0802c4e4 	.word	0x0802c4e4

08024310 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024314:	ed2d 8b08 	vpush	{d8-d11}
 8024318:	b0a9      	sub	sp, #164	; 0xa4
 802431a:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 802431c:	9022      	str	r0, [sp, #136]	; 0x88
 802431e:	9115      	str	r1, [sp, #84]	; 0x54
 8024320:	6860      	ldr	r0, [r4, #4]
 8024322:	9940      	ldr	r1, [sp, #256]	; 0x100
 8024324:	9219      	str	r2, [sp, #100]	; 0x64
 8024326:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8024328:	e9dd ba3b 	ldrd	fp, sl, [sp, #236]	; 0xec
 802432c:	fb00 1202 	mla	r2, r0, r2, r1
 8024330:	6820      	ldr	r0, [r4, #0]
 8024332:	46d1      	mov	r9, sl
 8024334:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8024338:	46da      	mov	sl, fp
 802433a:	eeb0 aa40 	vmov.f32	s20, s0
 802433e:	eef0 9a60 	vmov.f32	s19, s1
 8024342:	eeb0 9a41 	vmov.f32	s18, s2
 8024346:	eef0 8a62 	vmov.f32	s17, s5
 802434a:	eeb0 8a43 	vmov.f32	s16, s6
 802434e:	eef0 ba44 	vmov.f32	s23, s8
 8024352:	eeb0 ba64 	vmov.f32	s22, s9
 8024356:	eef0 aa45 	vmov.f32	s21, s10
 802435a:	4693      	mov	fp, r2
 802435c:	9942      	ldr	r1, [sp, #264]	; 0x108
 802435e:	9d42      	ldr	r5, [sp, #264]	; 0x108
 8024360:	6849      	ldr	r1, [r1, #4]
 8024362:	f89d 410c 	ldrb.w	r4, [sp, #268]	; 0x10c
 8024366:	3104      	adds	r1, #4
 8024368:	682d      	ldr	r5, [r5, #0]
 802436a:	910e      	str	r1, [sp, #56]	; 0x38
 802436c:	b2a1      	uxth	r1, r4
 802436e:	9423      	str	r4, [sp, #140]	; 0x8c
 8024370:	9511      	str	r5, [sp, #68]	; 0x44
 8024372:	9112      	str	r1, [sp, #72]	; 0x48
 8024374:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8024376:	2a00      	cmp	r2, #0
 8024378:	dc02      	bgt.n	8024380 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802437a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802437c:	2a00      	cmp	r2, #0
 802437e:	dd65      	ble.n	802444c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8024380:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8024382:	2b00      	cmp	r3, #0
 8024384:	e9d2 6c02 	ldrd	r6, ip, [r2, #8]
 8024388:	b234      	sxth	r4, r6
 802438a:	fa0f f78c 	sxth.w	r7, ip
 802438e:	f340 8396 	ble.w	8024abe <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ae>
 8024392:	1e65      	subs	r5, r4, #1
 8024394:	f107 3eff 	add.w	lr, r7, #4294967295
 8024398:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 802439c:	e9dd c83d 	ldrd	ip, r8, [sp, #244]	; 0xf4
 80243a0:	ea5f 422a 	movs.w	r2, sl, asr #16
 80243a4:	ea4f 4129 	mov.w	r1, r9, asr #16
 80243a8:	d405      	bmi.n	80243b6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80243aa:	42aa      	cmp	r2, r5
 80243ac:	da03      	bge.n	80243b6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80243ae:	2900      	cmp	r1, #0
 80243b0:	db01      	blt.n	80243b6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80243b2:	4571      	cmp	r1, lr
 80243b4:	db4f      	blt.n	8024456 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80243b6:	1c50      	adds	r0, r2, #1
 80243b8:	d406      	bmi.n	80243c8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80243ba:	42a0      	cmp	r0, r4
 80243bc:	dc04      	bgt.n	80243c8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80243be:	1c48      	adds	r0, r1, #1
 80243c0:	d402      	bmi.n	80243c8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80243c2:	42b8      	cmp	r0, r7
 80243c4:	f340 834f 	ble.w	8024a66 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x756>
 80243c8:	3b01      	subs	r3, #1
 80243ca:	44e2      	add	sl, ip
 80243cc:	44c1      	add	r9, r8
 80243ce:	f10b 0b02 	add.w	fp, fp, #2
 80243d2:	d1e5      	bne.n	80243a0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80243d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80243d6:	2b00      	cmp	r3, #0
 80243d8:	dd38      	ble.n	802444c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 80243da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80243de:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80243e2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80243e6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80243ea:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80243ee:	ee29 6aa7 	vmul.f32	s12, s19, s15
 80243f2:	ee69 7a27 	vmul.f32	s15, s18, s15
 80243f6:	ee76 6a68 	vsub.f32	s13, s12, s17
 80243fa:	ee37 7ac8 	vsub.f32	s14, s15, s16
 80243fe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024402:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8024406:	ee16 2a90 	vmov	r2, s13
 802440a:	3b01      	subs	r3, #1
 802440c:	9315      	str	r3, [sp, #84]	; 0x54
 802440e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8024410:	fb92 f3f3 	sdiv	r3, r2, r3
 8024414:	ee17 2a10 	vmov	r2, s14
 8024418:	eeb0 7a48 	vmov.f32	s14, s16
 802441c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8024420:	ee17 9a10 	vmov	r9, s14
 8024424:	eeb0 7a68 	vmov.f32	s14, s17
 8024428:	933d      	str	r3, [sp, #244]	; 0xf4
 802442a:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 802442c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8024430:	fb92 f3f3 	sdiv	r3, r2, r3
 8024434:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8024436:	933e      	str	r3, [sp, #248]	; 0xf8
 8024438:	ee17 aa10 	vmov	sl, s14
 802443c:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 802443e:	eeb0 8a67 	vmov.f32	s16, s15
 8024442:	eef0 8a46 	vmov.f32	s17, s12
 8024446:	bf08      	it	eq
 8024448:	4613      	moveq	r3, r2
 802444a:	e793      	b.n	8024374 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 802444c:	b029      	add	sp, #164	; 0xa4
 802444e:	ecbd 8b08 	vpop	{d8-d11}
 8024452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024456:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 802445a:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 802445e:	983d      	ldr	r0, [sp, #244]	; 0xf4
 8024460:	1e59      	subs	r1, r3, #1
 8024462:	fb00 a201 	mla	r2, r0, r1, sl
 8024466:	1412      	asrs	r2, r2, #16
 8024468:	910d      	str	r1, [sp, #52]	; 0x34
 802446a:	f100 8161 	bmi.w	8024730 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 802446e:	42aa      	cmp	r2, r5
 8024470:	f280 815e 	bge.w	8024730 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8024474:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8024476:	fb02 9201 	mla	r2, r2, r1, r9
 802447a:	1412      	asrs	r2, r2, #16
 802447c:	f100 8158 	bmi.w	8024730 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8024480:	3f01      	subs	r7, #1
 8024482:	42ba      	cmp	r2, r7
 8024484:	f280 8154 	bge.w	8024730 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8024488:	2b00      	cmp	r3, #0
 802448a:	dda3      	ble.n	80243d4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 802448c:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 8024490:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 8024494:	46d0      	mov	r8, sl
 8024496:	4621      	mov	r1, r4
 8024498:	e129      	b.n	80246ee <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 802449a:	f893 c001 	ldrb.w	ip, [r3, #1]
 802449e:	f856 502c 	ldr.w	r5, [r6, ip, lsl #2]
 80244a2:	9513      	str	r5, [sp, #76]	; 0x4c
 80244a4:	0e2d      	lsrs	r5, r5, #24
 80244a6:	950a      	str	r5, [sp, #40]	; 0x28
 80244a8:	b162      	cbz	r2, 80244c4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80244aa:	185d      	adds	r5, r3, r1
 80244ac:	786d      	ldrb	r5, [r5, #1]
 80244ae:	5c5b      	ldrb	r3, [r3, r1]
 80244b0:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 80244b4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80244b8:	9116      	str	r1, [sp, #88]	; 0x58
 80244ba:	9314      	str	r3, [sp, #80]	; 0x50
 80244bc:	0e09      	lsrs	r1, r1, #24
 80244be:	0e1b      	lsrs	r3, r3, #24
 80244c0:	910c      	str	r1, [sp, #48]	; 0x30
 80244c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80244c4:	b2a4      	uxth	r4, r4
 80244c6:	b292      	uxth	r2, r2
 80244c8:	fb04 f502 	mul.w	r5, r4, r2
 80244cc:	0124      	lsls	r4, r4, #4
 80244ce:	1b66      	subs	r6, r4, r5
 80244d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80244d2:	b2b6      	uxth	r6, r6
 80244d4:	fb06 f103 	mul.w	r1, r6, r3
 80244d8:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 80244dc:	b292      	uxth	r2, r2
 80244de:	f5c4 7380 	rsb	r3, r4, #256	; 0x100
 80244e2:	1a9b      	subs	r3, r3, r2
 80244e4:	b29b      	uxth	r3, r3
 80244e6:	fb03 1100 	mla	r1, r3, r0, r1
 80244ea:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80244ec:	fb02 1104 	mla	r1, r2, r4, r1
 80244f0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80244f2:	fb05 1104 	mla	r1, r5, r4, r1
 80244f6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80244fa:	2900      	cmp	r1, #0
 80244fc:	f000 80ea 	beq.w	80246d4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c4>
 8024500:	f007 14ff 	and.w	r4, r7, #16711935	; 0xff00ff
 8024504:	28ff      	cmp	r0, #255	; 0xff
 8024506:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802450a:	940f      	str	r4, [sp, #60]	; 0x3c
 802450c:	970d      	str	r7, [sp, #52]	; 0x34
 802450e:	d01c      	beq.n	802454a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8024510:	fb04 f400 	mul.w	r4, r4, r0
 8024514:	4627      	mov	r7, r4
 8024516:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024518:	fb04 fe00 	mul.w	lr, r4, r0
 802451c:	0a3c      	lsrs	r4, r7, #8
 802451e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024522:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024526:	f50e 7080 	add.w	r0, lr, #256	; 0x100
 802452a:	4427      	add	r7, r4
 802452c:	eb00 201e 	add.w	r0, r0, lr, lsr #8
 8024530:	0a3f      	lsrs	r7, r7, #8
 8024532:	0a00      	lsrs	r0, r0, #8
 8024534:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024538:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802453c:	4307      	orrs	r7, r0
 802453e:	f007 10ff 	and.w	r0, r7, #16711935	; 0xff00ff
 8024542:	900f      	str	r0, [sp, #60]	; 0x3c
 8024544:	f407 407f 	and.w	r0, r7, #65280	; 0xff00
 8024548:	900d      	str	r0, [sp, #52]	; 0x34
 802454a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802454c:	f000 1cff 	and.w	ip, r0, #16711935	; 0xff00ff
 8024550:	f400 4e7f 	and.w	lr, r0, #65280	; 0xff00
 8024554:	980a      	ldr	r0, [sp, #40]	; 0x28
 8024556:	28ff      	cmp	r0, #255	; 0xff
 8024558:	d01c      	beq.n	8024594 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 802455a:	fb0c fc00 	mul.w	ip, ip, r0
 802455e:	fb0e fe00 	mul.w	lr, lr, r0
 8024562:	ea4f 241c 	mov.w	r4, ip, lsr #8
 8024566:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802456a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802456e:	f50e 7080 	add.w	r0, lr, #256	; 0x100
 8024572:	44a4      	add	ip, r4
 8024574:	eb00 2e1e 	add.w	lr, r0, lr, lsr #8
 8024578:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802457c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024580:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024584:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8024588:	ea4c 0e0e 	orr.w	lr, ip, lr
 802458c:	f00e 1cff 	and.w	ip, lr, #16711935	; 0xff00ff
 8024590:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8024594:	9814      	ldr	r0, [sp, #80]	; 0x50
 8024596:	f000 17ff 	and.w	r7, r0, #16711935	; 0xff00ff
 802459a:	f400 4a7f 	and.w	sl, r0, #65280	; 0xff00
 802459e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80245a0:	28ff      	cmp	r0, #255	; 0xff
 80245a2:	d01a      	beq.n	80245da <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80245a4:	fb07 f700 	mul.w	r7, r7, r0
 80245a8:	fb0a fa00 	mul.w	sl, sl, r0
 80245ac:	0a3c      	lsrs	r4, r7, #8
 80245ae:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80245b2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80245b6:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80245ba:	4427      	add	r7, r4
 80245bc:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80245c0:	0a3f      	lsrs	r7, r7, #8
 80245c2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80245c6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80245ca:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80245ce:	ea47 0a0a 	orr.w	sl, r7, sl
 80245d2:	f00a 17ff 	and.w	r7, sl, #16711935	; 0xff00ff
 80245d6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80245da:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80245dc:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80245e0:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80245e4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80245e6:	2cff      	cmp	r4, #255	; 0xff
 80245e8:	d01d      	beq.n	8024626 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 80245ea:	fb00 f004 	mul.w	r0, r0, r4
 80245ee:	fb0b fb04 	mul.w	fp, fp, r4
 80245f2:	0a04      	lsrs	r4, r0, #8
 80245f4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80245f8:	9418      	str	r4, [sp, #96]	; 0x60
 80245fa:	f50b 7480 	add.w	r4, fp, #256	; 0x100
 80245fe:	9417      	str	r4, [sp, #92]	; 0x5c
 8024600:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024602:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8024606:	4420      	add	r0, r4
 8024608:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802460a:	0a00      	lsrs	r0, r0, #8
 802460c:	eb04 241b 	add.w	r4, r4, fp, lsr #8
 8024610:	0a24      	lsrs	r4, r4, #8
 8024612:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024616:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 802461a:	ea40 0b0b 	orr.w	fp, r0, fp
 802461e:	f00b 10ff 	and.w	r0, fp, #16711935	; 0xff00ff
 8024622:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8024626:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024628:	fb0c fc06 	mul.w	ip, ip, r6
 802462c:	fb01 f104 	mul.w	r1, r1, r4
 8024630:	1c4c      	adds	r4, r1, #1
 8024632:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 8024636:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802463a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802463c:	fb0e f606 	mul.w	r6, lr, r6
 8024640:	fb04 cc03 	mla	ip, r4, r3, ip
 8024644:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024646:	fb07 cc02 	mla	ip, r7, r2, ip
 802464a:	fb04 6603 	mla	r6, r4, r3, r6
 802464e:	fb0a 6602 	mla	r6, sl, r2, r6
 8024652:	fb00 cc05 	mla	ip, r0, r5, ip
 8024656:	fb0b 6605 	mla	r6, fp, r5, r6
 802465a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802465e:	0a36      	lsrs	r6, r6, #8
 8024660:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024664:	f406 437f 	and.w	r3, r6, #65280	; 0xff00
 8024668:	ea4c 0303 	orr.w	r3, ip, r3
 802466c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802466e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024670:	0c1f      	lsrs	r7, r3, #16
 8024672:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8024676:	b2db      	uxtb	r3, r3
 8024678:	8805      	ldrh	r5, [r0, #0]
 802467a:	fb13 f302 	smulbb	r3, r3, r2
 802467e:	fb17 f702 	smulbb	r7, r7, r2
 8024682:	fb16 f602 	smulbb	r6, r6, r2
 8024686:	1228      	asrs	r0, r5, #8
 8024688:	10ea      	asrs	r2, r5, #3
 802468a:	00ed      	lsls	r5, r5, #3
 802468c:	b2c9      	uxtb	r1, r1
 802468e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024692:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024696:	b2ed      	uxtb	r5, r5
 8024698:	fb00 7001 	mla	r0, r0, r1, r7
 802469c:	fb02 6201 	mla	r2, r2, r1, r6
 80246a0:	fb05 3101 	mla	r1, r5, r1, r3
 80246a4:	b280      	uxth	r0, r0
 80246a6:	b292      	uxth	r2, r2
 80246a8:	b289      	uxth	r1, r1
 80246aa:	1c43      	adds	r3, r0, #1
 80246ac:	1c4c      	adds	r4, r1, #1
 80246ae:	f102 0c01 	add.w	ip, r2, #1
 80246b2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80246b6:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 80246ba:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80246be:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80246c2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80246c6:	0952      	lsrs	r2, r2, #5
 80246c8:	4308      	orrs	r0, r1
 80246ca:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80246ce:	4302      	orrs	r2, r0
 80246d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80246d2:	8002      	strh	r2, [r0, #0]
 80246d4:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 80246d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80246d8:	4490      	add	r8, r2
 80246da:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 80246dc:	3302      	adds	r3, #2
 80246de:	4491      	add	r9, r2
 80246e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80246e2:	9309      	str	r3, [sp, #36]	; 0x24
 80246e4:	4293      	cmp	r3, r2
 80246e6:	d021      	beq.n	802472c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 80246e8:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80246ea:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80246ee:	ea4f 4228 	mov.w	r2, r8, asr #16
 80246f2:	ea4f 4329 	mov.w	r3, r9, asr #16
 80246f6:	fb01 2303 	mla	r3, r1, r3, r2
 80246fa:	9811      	ldr	r0, [sp, #68]	; 0x44
 80246fc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80246fe:	5cc2      	ldrb	r2, [r0, r3]
 8024700:	f3c8 3403 	ubfx	r4, r8, #12, #4
 8024704:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8024708:	4403      	add	r3, r0
 802470a:	f3c9 3203 	ubfx	r2, r9, #12, #4
 802470e:	0e38      	lsrs	r0, r7, #24
 8024710:	2c00      	cmp	r4, #0
 8024712:	f47f aec2 	bne.w	802449a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8024716:	2a00      	cmp	r2, #0
 8024718:	f43f aed4 	beq.w	80244c4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 802471c:	5c5b      	ldrb	r3, [r3, r1]
 802471e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024720:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8024724:	9314      	str	r3, [sp, #80]	; 0x50
 8024726:	0e1b      	lsrs	r3, r3, #24
 8024728:	930b      	str	r3, [sp, #44]	; 0x2c
 802472a:	e6cb      	b.n	80244c4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 802472c:	4693      	mov	fp, r2
 802472e:	e651      	b.n	80243d4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 8024730:	2b00      	cmp	r3, #0
 8024732:	f77f ae4f 	ble.w	80243d4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 8024736:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 802473a:	ea4f 422a 	mov.w	r2, sl, asr #16
 802473e:	ea4f 4129 	mov.w	r1, r9, asr #16
 8024742:	2a00      	cmp	r2, #0
 8024744:	465f      	mov	r7, fp
 8024746:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 802474a:	9c42      	ldr	r4, [sp, #264]	; 0x108
 802474c:	e9dd 5b3d 	ldrd	r5, fp, [sp, #244]	; 0xf4
 8024750:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8024754:	f3c9 3e03 	ubfx	lr, r9, #12, #4
 8024758:	f2c0 815c 	blt.w	8024a14 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 802475c:	1e73      	subs	r3, r6, #1
 802475e:	429a      	cmp	r2, r3
 8024760:	f280 8158 	bge.w	8024a14 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8024764:	2900      	cmp	r1, #0
 8024766:	f2c0 8155 	blt.w	8024a14 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 802476a:	f10c 33ff 	add.w	r3, ip, #4294967295
 802476e:	4299      	cmp	r1, r3
 8024770:	f280 8150 	bge.w	8024a14 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8024774:	b233      	sxth	r3, r6
 8024776:	fb01 2203 	mla	r2, r1, r3, r2
 802477a:	9911      	ldr	r1, [sp, #68]	; 0x44
 802477c:	930f      	str	r3, [sp, #60]	; 0x3c
 802477e:	5c8b      	ldrb	r3, [r1, r2]
 8024780:	440a      	add	r2, r1
 8024782:	4616      	mov	r6, r2
 8024784:	9210      	str	r2, [sp, #64]	; 0x40
 8024786:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024788:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 802478c:	0e0b      	lsrs	r3, r1, #24
 802478e:	2800      	cmp	r0, #0
 8024790:	f000 816f 	beq.w	8024a72 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x762>
 8024794:	f896 c001 	ldrb.w	ip, [r6, #1]
 8024798:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 802479c:	9224      	str	r2, [sp, #144]	; 0x90
 802479e:	0e12      	lsrs	r2, r2, #24
 80247a0:	921a      	str	r2, [sp, #104]	; 0x68
 80247a2:	f1be 0f00 	cmp.w	lr, #0
 80247a6:	f040 8172 	bne.w	8024a8e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
 80247aa:	b280      	uxth	r0, r0
 80247ac:	fa1f fc8e 	uxth.w	ip, lr
 80247b0:	fb00 f20c 	mul.w	r2, r0, ip
 80247b4:	0106      	lsls	r6, r0, #4
 80247b6:	1ab0      	subs	r0, r6, r2
 80247b8:	b280      	uxth	r0, r0
 80247ba:	4686      	mov	lr, r0
 80247bc:	900f      	str	r0, [sp, #60]	; 0x3c
 80247be:	981a      	ldr	r0, [sp, #104]	; 0x68
 80247c0:	ebc2 1c0c 	rsb	ip, r2, ip, lsl #4
 80247c4:	fb0e f000 	mul.w	r0, lr, r0
 80247c8:	f5c6 7680 	rsb	r6, r6, #256	; 0x100
 80247cc:	fa1f fe8c 	uxth.w	lr, ip
 80247d0:	eba6 060e 	sub.w	r6, r6, lr
 80247d4:	b2b6      	uxth	r6, r6
 80247d6:	fb06 0003 	mla	r0, r6, r3, r0
 80247da:	9610      	str	r6, [sp, #64]	; 0x40
 80247dc:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80247de:	fb0e 0006 	mla	r0, lr, r6, r0
 80247e2:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80247e4:	fb02 0006 	mla	r0, r2, r6, r0
 80247e8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80247ec:	9017      	str	r0, [sp, #92]	; 0x5c
 80247ee:	2800      	cmp	r0, #0
 80247f0:	f000 80fa 	beq.w	80249e8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 80247f4:	f001 10ff 	and.w	r0, r1, #16711935	; 0xff00ff
 80247f8:	2bff      	cmp	r3, #255	; 0xff
 80247fa:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80247fe:	9018      	str	r0, [sp, #96]	; 0x60
 8024800:	911d      	str	r1, [sp, #116]	; 0x74
 8024802:	d01b      	beq.n	802483c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52c>
 8024804:	fb01 f103 	mul.w	r1, r1, r3
 8024808:	fb00 f003 	mul.w	r0, r0, r3
 802480c:	460b      	mov	r3, r1
 802480e:	0a01      	lsrs	r1, r0, #8
 8024810:	f100 1601 	add.w	r6, r0, #65537	; 0x10001
 8024814:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8024818:	f503 7080 	add.w	r0, r3, #256	; 0x100
 802481c:	4431      	add	r1, r6
 802481e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8024822:	0a09      	lsrs	r1, r1, #8
 8024824:	0a1b      	lsrs	r3, r3, #8
 8024826:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802482a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802482e:	430b      	orrs	r3, r1
 8024830:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 8024834:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024838:	9118      	str	r1, [sp, #96]	; 0x60
 802483a:	931d      	str	r3, [sp, #116]	; 0x74
 802483c:	9924      	ldr	r1, [sp, #144]	; 0x90
 802483e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8024840:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8024844:	2eff      	cmp	r6, #255	; 0xff
 8024846:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802484a:	931e      	str	r3, [sp, #120]	; 0x78
 802484c:	911f      	str	r1, [sp, #124]	; 0x7c
 802484e:	d01b      	beq.n	8024888 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x578>
 8024850:	fb01 f106 	mul.w	r1, r1, r6
 8024854:	fb03 f306 	mul.w	r3, r3, r6
 8024858:	460e      	mov	r6, r1
 802485a:	0a19      	lsrs	r1, r3, #8
 802485c:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 8024860:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8024864:	f506 7380 	add.w	r3, r6, #256	; 0x100
 8024868:	4401      	add	r1, r0
 802486a:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 802486e:	0a09      	lsrs	r1, r1, #8
 8024870:	0a1b      	lsrs	r3, r3, #8
 8024872:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024876:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802487a:	4319      	orrs	r1, r3
 802487c:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8024880:	931e      	str	r3, [sp, #120]	; 0x78
 8024882:	f401 437f 	and.w	r3, r1, #65280	; 0xff00
 8024886:	931f      	str	r3, [sp, #124]	; 0x7c
 8024888:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802488a:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 802488e:	f403 4c7f 	and.w	ip, r3, #65280	; 0xff00
 8024892:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8024894:	9120      	str	r1, [sp, #128]	; 0x80
 8024896:	2bff      	cmp	r3, #255	; 0xff
 8024898:	d01c      	beq.n	80248d4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 802489a:	fb01 f103 	mul.w	r1, r1, r3
 802489e:	4608      	mov	r0, r1
 80248a0:	fb0c fc03 	mul.w	ip, ip, r3
 80248a4:	0a09      	lsrs	r1, r1, #8
 80248a6:	f50c 7380 	add.w	r3, ip, #256	; 0x100
 80248aa:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80248ae:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80248b2:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80248b6:	4408      	add	r0, r1
 80248b8:	0a00      	lsrs	r0, r0, #8
 80248ba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80248be:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80248c2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80248c6:	ea40 0c0c 	orr.w	ip, r0, ip
 80248ca:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 80248ce:	9320      	str	r3, [sp, #128]	; 0x80
 80248d0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80248d4:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80248d6:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 80248da:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
 80248de:	991c      	ldr	r1, [sp, #112]	; 0x70
 80248e0:	9321      	str	r3, [sp, #132]	; 0x84
 80248e2:	29ff      	cmp	r1, #255	; 0xff
 80248e4:	d019      	beq.n	802491a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60a>
 80248e6:	fb03 f301 	mul.w	r3, r3, r1
 80248ea:	fb06 f601 	mul.w	r6, r6, r1
 80248ee:	0a19      	lsrs	r1, r3, #8
 80248f0:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80248f4:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80248f8:	f506 7080 	add.w	r0, r6, #256	; 0x100
 80248fc:	4419      	add	r1, r3
 80248fe:	eb00 2616 	add.w	r6, r0, r6, lsr #8
 8024902:	0a09      	lsrs	r1, r1, #8
 8024904:	0a36      	lsrs	r6, r6, #8
 8024906:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802490a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802490e:	430e      	orrs	r6, r1
 8024910:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 8024914:	9321      	str	r3, [sp, #132]	; 0x84
 8024916:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802491a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802491c:	9912      	ldr	r1, [sp, #72]	; 0x48
 802491e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024920:	fb00 f001 	mul.w	r0, r0, r1
 8024924:	4601      	mov	r1, r0
 8024926:	3001      	adds	r0, #1
 8024928:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802492c:	ea6f 2011 	mvn.w	r0, r1, lsr #8
 8024930:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024932:	9025      	str	r0, [sp, #148]	; 0x94
 8024934:	981e      	ldr	r0, [sp, #120]	; 0x78
 8024936:	fb00 f001 	mul.w	r0, r0, r1
 802493a:	900f      	str	r0, [sp, #60]	; 0x3c
 802493c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802493e:	fb00 f001 	mul.w	r0, r0, r1
 8024942:	9017      	str	r0, [sp, #92]	; 0x5c
 8024944:	9818      	ldr	r0, [sp, #96]	; 0x60
 8024946:	4601      	mov	r1, r0
 8024948:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802494a:	fb01 0003 	mla	r0, r1, r3, r0
 802494e:	900f      	str	r0, [sp, #60]	; 0x3c
 8024950:	981d      	ldr	r0, [sp, #116]	; 0x74
 8024952:	4601      	mov	r1, r0
 8024954:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8024956:	fb01 0103 	mla	r1, r1, r3, r0
 802495a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802495c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802495e:	fb0c 110e 	mla	r1, ip, lr, r1
 8024962:	fb03 000e 	mla	r0, r3, lr, r0
 8024966:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024968:	f89d e094 	ldrb.w	lr, [sp, #148]	; 0x94
 802496c:	fb03 0002 	mla	r0, r3, r2, r0
 8024970:	fb06 1302 	mla	r3, r6, r2, r1
 8024974:	0a02      	lsrs	r2, r0, #8
 8024976:	0a1b      	lsrs	r3, r3, #8
 8024978:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802497c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024980:	4313      	orrs	r3, r2
 8024982:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8024984:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8024988:	f3c3 2607 	ubfx	r6, r3, #8, #8
 802498c:	b2db      	uxtb	r3, r3
 802498e:	8838      	ldrh	r0, [r7, #0]
 8024990:	fb16 f602 	smulbb	r6, r6, r2
 8024994:	fb1c fc02 	smulbb	ip, ip, r2
 8024998:	fb13 f302 	smulbb	r3, r3, r2
 802499c:	1201      	asrs	r1, r0, #8
 802499e:	10c2      	asrs	r2, r0, #3
 80249a0:	00c0      	lsls	r0, r0, #3
 80249a2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80249a6:	b2c0      	uxtb	r0, r0
 80249a8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80249ac:	fb01 cc0e 	mla	ip, r1, lr, ip
 80249b0:	fb02 620e 	mla	r2, r2, lr, r6
 80249b4:	fb00 330e 	mla	r3, r0, lr, r3
 80249b8:	b296      	uxth	r6, r2
 80249ba:	b29b      	uxth	r3, r3
 80249bc:	fa1f fc8c 	uxth.w	ip, ip
 80249c0:	1c58      	adds	r0, r3, #1
 80249c2:	f10c 0201 	add.w	r2, ip, #1
 80249c6:	1c71      	adds	r1, r6, #1
 80249c8:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 80249cc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80249d0:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 80249d4:	f402 4378 	and.w	r3, r2, #63488	; 0xf800
 80249d8:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80249dc:	094a      	lsrs	r2, r1, #5
 80249de:	4303      	orrs	r3, r0
 80249e0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80249e4:	4313      	orrs	r3, r2
 80249e6:	803b      	strh	r3, [r7, #0]
 80249e8:	f1b8 0f00 	cmp.w	r8, #0
 80249ec:	f107 0702 	add.w	r7, r7, #2
 80249f0:	44aa      	add	sl, r5
 80249f2:	44d9      	add	r9, fp
 80249f4:	dd2e      	ble.n	8024a54 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 80249f6:	e9d4 6c02 	ldrd	r6, ip, [r4, #8]
 80249fa:	ea4f 422a 	mov.w	r2, sl, asr #16
 80249fe:	2a00      	cmp	r2, #0
 8024a00:	f108 38ff 	add.w	r8, r8, #4294967295
 8024a04:	ea4f 4129 	mov.w	r1, r9, asr #16
 8024a08:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8024a0c:	f3c9 3e03 	ubfx	lr, r9, #12, #4
 8024a10:	f6bf aea4 	bge.w	802475c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8024a14:	1c53      	adds	r3, r2, #1
 8024a16:	d4e7      	bmi.n	80249e8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 8024a18:	42b3      	cmp	r3, r6
 8024a1a:	dce5      	bgt.n	80249e8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 8024a1c:	1c4b      	adds	r3, r1, #1
 8024a1e:	d4e3      	bmi.n	80249e8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 8024a20:	4563      	cmp	r3, ip
 8024a22:	dce1      	bgt.n	80249e8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 8024a24:	fa0f f38c 	sxth.w	r3, ip
 8024a28:	b236      	sxth	r6, r6
 8024a2a:	e9cd 6300 	strd	r6, r3, [sp]
 8024a2e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024a30:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8024a34:	e9cd e305 	strd	lr, r3, [sp, #20]
 8024a38:	9202      	str	r2, [sp, #8]
 8024a3a:	4639      	mov	r1, r7
 8024a3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024a3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024a40:	9822      	ldr	r0, [sp, #136]	; 0x88
 8024a42:	f7ff fab9 	bl	8023fb8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8024a46:	f1b8 0f00 	cmp.w	r8, #0
 8024a4a:	f107 0702 	add.w	r7, r7, #2
 8024a4e:	44aa      	add	sl, r5
 8024a50:	44d9      	add	r9, fp
 8024a52:	dcd0      	bgt.n	80249f6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e6>
 8024a54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024a56:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8024a5a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024a5e:	3301      	adds	r3, #1
 8024a60:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 8024a64:	e4b6      	b.n	80243d4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 8024a66:	3b01      	subs	r3, #1
 8024a68:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8024a6c:	930d      	str	r3, [sp, #52]	; 0x34
 8024a6e:	4698      	mov	r8, r3
 8024a70:	e667      	b.n	8024742 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 8024a72:	f1be 0f00 	cmp.w	lr, #0
 8024a76:	f43f ae98 	beq.w	80247aa <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8024a7a:	4632      	mov	r2, r6
 8024a7c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8024a7e:	5d92      	ldrb	r2, [r2, r6]
 8024a80:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8024a82:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8024a86:	9226      	str	r2, [sp, #152]	; 0x98
 8024a88:	0e12      	lsrs	r2, r2, #24
 8024a8a:	921b      	str	r2, [sp, #108]	; 0x6c
 8024a8c:	e68d      	b.n	80247aa <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8024a8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024a90:	eb06 0c02 	add.w	ip, r6, r2
 8024a94:	4632      	mov	r2, r6
 8024a96:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8024a98:	f89c c001 	ldrb.w	ip, [ip, #1]
 8024a9c:	5d92      	ldrb	r2, [r2, r6]
 8024a9e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8024aa0:	9210      	str	r2, [sp, #64]	; 0x40
 8024aa2:	f856 202c 	ldr.w	r2, [r6, ip, lsl #2]
 8024aa6:	920f      	str	r2, [sp, #60]	; 0x3c
 8024aa8:	9227      	str	r2, [sp, #156]	; 0x9c
 8024aaa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024aac:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8024ab0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024ab2:	9626      	str	r6, [sp, #152]	; 0x98
 8024ab4:	0e12      	lsrs	r2, r2, #24
 8024ab6:	921c      	str	r2, [sp, #112]	; 0x70
 8024ab8:	0e32      	lsrs	r2, r6, #24
 8024aba:	921b      	str	r2, [sp, #108]	; 0x6c
 8024abc:	e675      	b.n	80247aa <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8024abe:	f43f ac89 	beq.w	80243d4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 8024ac2:	1e65      	subs	r5, r4, #1
 8024ac4:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8024ac8:	e4c9      	b.n	802445e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8024aca:	bf00      	nop

08024acc <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8024acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ad0:	b089      	sub	sp, #36	; 0x24
 8024ad2:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
 8024ad6:	880f      	ldrh	r7, [r1, #0]
 8024ad8:	e9dd 5014 	ldrd	r5, r0, [sp, #80]	; 0x50
 8024adc:	fb00 5408 	mla	r4, r0, r8, r5
 8024ae0:	9106      	str	r1, [sp, #24]
 8024ae2:	10f9      	asrs	r1, r7, #3
 8024ae4:	123e      	asrs	r6, r7, #8
 8024ae6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024aea:	00ff      	lsls	r7, r7, #3
 8024aec:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8024af0:	9104      	str	r1, [sp, #16]
 8024af2:	2800      	cmp	r0, #0
 8024af4:	b2f9      	uxtb	r1, r7
 8024af6:	9105      	str	r1, [sp, #20]
 8024af8:	9603      	str	r6, [sp, #12]
 8024afa:	eb02 0704 	add.w	r7, r2, r4
 8024afe:	f100 0c01 	add.w	ip, r0, #1
 8024b02:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 8024b06:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 8024b0a:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
 8024b0e:	db02      	blt.n	8024b16 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x4a>
 8024b10:	4582      	cmp	sl, r0
 8024b12:	f300 8113 	bgt.w	8024d3c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8024b16:	2600      	movs	r6, #0
 8024b18:	46b1      	mov	r9, r6
 8024b1a:	4630      	mov	r0, r6
 8024b1c:	4634      	mov	r4, r6
 8024b1e:	f1bc 0f00 	cmp.w	ip, #0
 8024b22:	db02      	blt.n	8024b2a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5e>
 8024b24:	45e2      	cmp	sl, ip
 8024b26:	f300 8123 	bgt.w	8024d70 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a4>
 8024b2a:	2700      	movs	r7, #0
 8024b2c:	46bc      	mov	ip, r7
 8024b2e:	463d      	mov	r5, r7
 8024b30:	9702      	str	r7, [sp, #8]
 8024b32:	f1be 0f0f 	cmp.w	lr, #15
 8024b36:	f200 8160 	bhi.w	8024dfa <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x32e>
 8024b3a:	290f      	cmp	r1, #15
 8024b3c:	f200 815d 	bhi.w	8024dfa <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x32e>
 8024b40:	b289      	uxth	r1, r1
 8024b42:	fa1f f38e 	uxth.w	r3, lr
 8024b46:	fb01 f803 	mul.w	r8, r1, r3
 8024b4a:	f005 12ff 	and.w	r2, r5, #16711935	; 0xff00ff
 8024b4e:	9200      	str	r2, [sp, #0]
 8024b50:	9a02      	ldr	r2, [sp, #8]
 8024b52:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8024b56:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024b5a:	b289      	uxth	r1, r1
 8024b5c:	9201      	str	r2, [sp, #4]
 8024b5e:	fb01 fa0c 	mul.w	sl, r1, ip
 8024b62:	9a02      	ldr	r2, [sp, #8]
 8024b64:	fb08 fb07 	mul.w	fp, r8, r7
 8024b68:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024b6c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8024b70:	9202      	str	r2, [sp, #8]
 8024b72:	011b      	lsls	r3, r3, #4
 8024b74:	eba3 0e08 	sub.w	lr, r3, r8
 8024b78:	fa1f fe8e 	uxth.w	lr, lr
 8024b7c:	fb0e f206 	mul.w	r2, lr, r6
 8024b80:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8024b84:	1a5b      	subs	r3, r3, r1
 8024b86:	b29b      	uxth	r3, r3
 8024b88:	fb03 2209 	mla	r2, r3, r9, r2
 8024b8c:	4452      	add	r2, sl
 8024b8e:	445a      	add	r2, fp
 8024b90:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8024b94:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024b98:	9207      	str	r2, [sp, #28]
 8024b9a:	f004 12ff 	and.w	r2, r4, #16711935	; 0xff00ff
 8024b9e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024ba2:	d019      	beq.n	8024bd8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x10c>
 8024ba4:	fb02 f209 	mul.w	r2, r2, r9
 8024ba8:	fb04 f409 	mul.w	r4, r4, r9
 8024bac:	ea4f 2b12 	mov.w	fp, r2, lsr #8
 8024bb0:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8024bb4:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 8024bb8:	f504 7a80 	add.w	sl, r4, #256	; 0x100
 8024bbc:	445a      	add	r2, fp
 8024bbe:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8024bc2:	0a12      	lsrs	r2, r2, #8
 8024bc4:	0a24      	lsrs	r4, r4, #8
 8024bc6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024bca:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024bce:	4314      	orrs	r4, r2
 8024bd0:	f004 12ff 	and.w	r2, r4, #16711935	; 0xff00ff
 8024bd4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024bd8:	2eff      	cmp	r6, #255	; 0xff
 8024bda:	f000 1aff 	and.w	sl, r0, #16711935	; 0xff00ff
 8024bde:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024be2:	d01b      	beq.n	8024c1c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x150>
 8024be4:	fb0a fa06 	mul.w	sl, sl, r6
 8024be8:	fb00 f006 	mul.w	r0, r0, r6
 8024bec:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 8024bf0:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8024bf4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024bf8:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8024bfc:	44da      	add	sl, fp
 8024bfe:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8024c02:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024c06:	0a00      	lsrs	r0, r0, #8
 8024c08:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8024c0c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024c10:	ea4a 0000 	orr.w	r0, sl, r0
 8024c14:	f000 1aff 	and.w	sl, r0, #16711935	; 0xff00ff
 8024c18:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024c1c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024c20:	d020      	beq.n	8024c64 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x198>
 8024c22:	9e01      	ldr	r6, [sp, #4]
 8024c24:	fb06 fb0c 	mul.w	fp, r6, ip
 8024c28:	9e02      	ldr	r6, [sp, #8]
 8024c2a:	ea4f 291b 	mov.w	r9, fp, lsr #8
 8024c2e:	fb06 fc0c 	mul.w	ip, r6, ip
 8024c32:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 8024c36:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8024c3a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024c3e:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8024c42:	44cb      	add	fp, r9
 8024c44:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8024c48:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024c4c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8024c50:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024c54:	ea4b 0c0c 	orr.w	ip, fp, ip
 8024c58:	f00c 16ff 	and.w	r6, ip, #16711935	; 0xff00ff
 8024c5c:	9601      	str	r6, [sp, #4]
 8024c5e:	f40c 467f 	and.w	r6, ip, #65280	; 0xff00
 8024c62:	9602      	str	r6, [sp, #8]
 8024c64:	2fff      	cmp	r7, #255	; 0xff
 8024c66:	d01d      	beq.n	8024ca4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1d8>
 8024c68:	9e00      	ldr	r6, [sp, #0]
 8024c6a:	fb05 f507 	mul.w	r5, r5, r7
 8024c6e:	fb06 fb07 	mul.w	fp, r6, r7
 8024c72:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8024c76:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8024c7a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024c7e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024c82:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8024c86:	44e3      	add	fp, ip
 8024c88:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8024c8c:	0a2d      	lsrs	r5, r5, #8
 8024c8e:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8024c92:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8024c96:	ea4b 0505 	orr.w	r5, fp, r5
 8024c9a:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 8024c9e:	9600      	str	r6, [sp, #0]
 8024ca0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8024ca4:	9e07      	ldr	r6, [sp, #28]
 8024ca6:	fb0a fa0e 	mul.w	sl, sl, lr
 8024caa:	43f7      	mvns	r7, r6
 8024cac:	fb00 f00e 	mul.w	r0, r0, lr
 8024cb0:	fb02 aa03 	mla	sl, r2, r3, sl
 8024cb4:	fb04 0003 	mla	r0, r4, r3, r0
 8024cb8:	9b01      	ldr	r3, [sp, #4]
 8024cba:	b2ff      	uxtb	r7, r7
 8024cbc:	fb03 aa01 	mla	sl, r3, r1, sl
 8024cc0:	9b02      	ldr	r3, [sp, #8]
 8024cc2:	fb03 0c01 	mla	ip, r3, r1, r0
 8024cc6:	9b00      	ldr	r3, [sp, #0]
 8024cc8:	9803      	ldr	r0, [sp, #12]
 8024cca:	fb03 aa08 	mla	sl, r3, r8, sl
 8024cce:	9b05      	ldr	r3, [sp, #20]
 8024cd0:	9904      	ldr	r1, [sp, #16]
 8024cd2:	fb03 f307 	mul.w	r3, r3, r7
 8024cd6:	fb00 f007 	mul.w	r0, r0, r7
 8024cda:	fb01 f107 	mul.w	r1, r1, r7
 8024cde:	461f      	mov	r7, r3
 8024ce0:	fb05 c808 	mla	r8, r5, r8, ip
 8024ce4:	ea4f 251a 	mov.w	r5, sl, lsr #8
 8024ce8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024cec:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8024cf0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024cf4:	ea45 0508 	orr.w	r5, r5, r8
 8024cf8:	f100 0c01 	add.w	ip, r0, #1
 8024cfc:	1c4e      	adds	r6, r1, #1
 8024cfe:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8024d02:	0c2c      	lsrs	r4, r5, #16
 8024d04:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8024d08:	1c78      	adds	r0, r7, #1
 8024d0a:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 8024d0e:	4b3e      	ldr	r3, [pc, #248]	; (8024e08 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x33c>)
 8024d10:	eb04 241c 	add.w	r4, r4, ip, lsr #8
 8024d14:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8024d18:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8024d1c:	b2ed      	uxtb	r5, r5
 8024d1e:	ea03 2304 	and.w	r3, r3, r4, lsl #8
 8024d22:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 8024d26:	00d2      	lsls	r2, r2, #3
 8024d28:	ea43 05d5 	orr.w	r5, r3, r5, lsr #3
 8024d2c:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 8024d30:	431d      	orrs	r5, r3
 8024d32:	9b06      	ldr	r3, [sp, #24]
 8024d34:	801d      	strh	r5, [r3, #0]
 8024d36:	b009      	add	sp, #36	; 0x24
 8024d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024d3c:	2d00      	cmp	r5, #0
 8024d3e:	db01      	blt.n	8024d44 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x278>
 8024d40:	45a8      	cmp	r8, r5
 8024d42:	dc41      	bgt.n	8024dc8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2fc>
 8024d44:	f04f 0900 	mov.w	r9, #0
 8024d48:	464c      	mov	r4, r9
 8024d4a:	1c6a      	adds	r2, r5, #1
 8024d4c:	d42a      	bmi.n	8024da4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2d8>
 8024d4e:	4590      	cmp	r8, r2
 8024d50:	dd28      	ble.n	8024da4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2d8>
 8024d52:	f1be 0f00 	cmp.w	lr, #0
 8024d56:	d004      	beq.n	8024d62 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x296>
 8024d58:	787a      	ldrb	r2, [r7, #1]
 8024d5a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8024d5e:	0e06      	lsrs	r6, r0, #24
 8024d60:	e6dd      	b.n	8024b1e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x52>
 8024d62:	f1bc 0f00 	cmp.w	ip, #0
 8024d66:	db40      	blt.n	8024dea <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x31e>
 8024d68:	45e2      	cmp	sl, ip
 8024d6a:	dd3e      	ble.n	8024dea <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x31e>
 8024d6c:	4676      	mov	r6, lr
 8024d6e:	4670      	mov	r0, lr
 8024d70:	b1d9      	cbz	r1, 8024daa <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2de>
 8024d72:	2d00      	cmp	r5, #0
 8024d74:	db31      	blt.n	8024dda <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x30e>
 8024d76:	45a8      	cmp	r8, r5
 8024d78:	dd2f      	ble.n	8024dda <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x30e>
 8024d7a:	f817 2008 	ldrb.w	r2, [r7, r8]
 8024d7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8024d82:	9202      	str	r2, [sp, #8]
 8024d84:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8024d88:	3501      	adds	r5, #1
 8024d8a:	d423      	bmi.n	8024dd4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x308>
 8024d8c:	45a8      	cmp	r8, r5
 8024d8e:	dd21      	ble.n	8024dd4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x308>
 8024d90:	f1be 0f00 	cmp.w	lr, #0
 8024d94:	d026      	beq.n	8024de4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x318>
 8024d96:	44b8      	add	r8, r7
 8024d98:	f898 5001 	ldrb.w	r5, [r8, #1]
 8024d9c:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8024da0:	0e2f      	lsrs	r7, r5, #24
 8024da2:	e6c6      	b.n	8024b32 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x66>
 8024da4:	2600      	movs	r6, #0
 8024da6:	4630      	mov	r0, r6
 8024da8:	e6b9      	b.n	8024b1e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x52>
 8024daa:	f1be 0f0f 	cmp.w	lr, #15
 8024dae:	d824      	bhi.n	8024dfa <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x32e>
 8024db0:	fa1f f38e 	uxth.w	r3, lr
 8024db4:	4688      	mov	r8, r1
 8024db6:	468b      	mov	fp, r1
 8024db8:	468a      	mov	sl, r1
 8024dba:	e9cd 1101 	strd	r1, r1, [sp, #4]
 8024dbe:	460d      	mov	r5, r1
 8024dc0:	9100      	str	r1, [sp, #0]
 8024dc2:	460f      	mov	r7, r1
 8024dc4:	468c      	mov	ip, r1
 8024dc6:	e6d4      	b.n	8024b72 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 8024dc8:	5d12      	ldrb	r2, [r2, r4]
 8024dca:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8024dce:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8024dd2:	e7ba      	b.n	8024d4a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27e>
 8024dd4:	2700      	movs	r7, #0
 8024dd6:	463d      	mov	r5, r7
 8024dd8:	e6ab      	b.n	8024b32 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x66>
 8024dda:	f04f 0c00 	mov.w	ip, #0
 8024dde:	f8cd c008 	str.w	ip, [sp, #8]
 8024de2:	e7d1      	b.n	8024d88 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2bc>
 8024de4:	4675      	mov	r5, lr
 8024de6:	4677      	mov	r7, lr
 8024de8:	e6a7      	b.n	8024b3a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6e>
 8024dea:	4670      	mov	r0, lr
 8024dec:	4675      	mov	r5, lr
 8024dee:	f8cd e008 	str.w	lr, [sp, #8]
 8024df2:	4677      	mov	r7, lr
 8024df4:	46f4      	mov	ip, lr
 8024df6:	4676      	mov	r6, lr
 8024df8:	e69f      	b.n	8024b3a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6e>
 8024dfa:	4b04      	ldr	r3, [pc, #16]	; (8024e0c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x340>)
 8024dfc:	4a04      	ldr	r2, [pc, #16]	; (8024e10 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x344>)
 8024dfe:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8024e02:	4804      	ldr	r0, [pc, #16]	; (8024e14 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x348>)
 8024e04:	f004 f95a 	bl	80290bc <__assert_func>
 8024e08:	fffff800 	.word	0xfffff800
 8024e0c:	0802c360 	.word	0x0802c360
 8024e10:	0802c9d8 	.word	0x0802c9d8
 8024e14:	0802c4e4 	.word	0x0802c4e4

08024e18 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e1c:	ed2d 8b08 	vpush	{d8-d11}
 8024e20:	b0a3      	sub	sp, #140	; 0x8c
 8024e22:	901e      	str	r0, [sp, #120]	; 0x78
 8024e24:	9111      	str	r1, [sp, #68]	; 0x44
 8024e26:	9215      	str	r2, [sp, #84]	; 0x54
 8024e28:	e9dd 4139 	ldrd	r4, r1, [sp, #228]	; 0xe4
 8024e2c:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8024e2e:	6860      	ldr	r0, [r4, #4]
 8024e30:	e9dd 8b35 	ldrd	r8, fp, [sp, #212]	; 0xd4
 8024e34:	fb00 1202 	mla	r2, r0, r2, r1
 8024e38:	6820      	ldr	r0, [r4, #0]
 8024e3a:	46c1      	mov	r9, r8
 8024e3c:	eb00 0a42 	add.w	sl, r0, r2, lsl #1
 8024e40:	46d8      	mov	r8, fp
 8024e42:	eeb0 aa40 	vmov.f32	s20, s0
 8024e46:	eef0 9a60 	vmov.f32	s19, s1
 8024e4a:	eeb0 9a41 	vmov.f32	s18, s2
 8024e4e:	eef0 8a62 	vmov.f32	s17, s5
 8024e52:	eeb0 8a43 	vmov.f32	s16, s6
 8024e56:	eef0 ba44 	vmov.f32	s23, s8
 8024e5a:	eeb0 ba64 	vmov.f32	s22, s9
 8024e5e:	eef0 aa45 	vmov.f32	s21, s10
 8024e62:	46d3      	mov	fp, sl
 8024e64:	993c      	ldr	r1, [sp, #240]	; 0xf0
 8024e66:	9c3c      	ldr	r4, [sp, #240]	; 0xf0
 8024e68:	6849      	ldr	r1, [r1, #4]
 8024e6a:	6824      	ldr	r4, [r4, #0]
 8024e6c:	1d0a      	adds	r2, r1, #4
 8024e6e:	940e      	str	r4, [sp, #56]	; 0x38
 8024e70:	920b      	str	r2, [sp, #44]	; 0x2c
 8024e72:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024e74:	2a00      	cmp	r2, #0
 8024e76:	dc02      	bgt.n	8024e7e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8024e78:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8024e7a:	2a00      	cmp	r2, #0
 8024e7c:	dd65      	ble.n	8024f4a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8024e7e:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8024e80:	2b00      	cmp	r3, #0
 8024e82:	e9d2 6c02 	ldrd	r6, ip, [r2, #8]
 8024e86:	b234      	sxth	r4, r6
 8024e88:	fa0f f78c 	sxth.w	r7, ip
 8024e8c:	f340 836d 	ble.w	802556a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x752>
 8024e90:	1e65      	subs	r5, r4, #1
 8024e92:	f107 3eff 	add.w	lr, r7, #4294967295
 8024e96:	f8cd c01c 	str.w	ip, [sp, #28]
 8024e9a:	e9dd ca37 	ldrd	ip, sl, [sp, #220]	; 0xdc
 8024e9e:	ea5f 4229 	movs.w	r2, r9, asr #16
 8024ea2:	ea4f 4128 	mov.w	r1, r8, asr #16
 8024ea6:	d405      	bmi.n	8024eb4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8024ea8:	42aa      	cmp	r2, r5
 8024eaa:	da03      	bge.n	8024eb4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8024eac:	2900      	cmp	r1, #0
 8024eae:	db01      	blt.n	8024eb4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8024eb0:	4571      	cmp	r1, lr
 8024eb2:	db4f      	blt.n	8024f54 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8024eb4:	1c50      	adds	r0, r2, #1
 8024eb6:	d406      	bmi.n	8024ec6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8024eb8:	42a0      	cmp	r0, r4
 8024eba:	dc04      	bgt.n	8024ec6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8024ebc:	1c48      	adds	r0, r1, #1
 8024ebe:	d402      	bmi.n	8024ec6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8024ec0:	42b8      	cmp	r0, r7
 8024ec2:	f340 832f 	ble.w	8025524 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8024ec6:	3b01      	subs	r3, #1
 8024ec8:	44e1      	add	r9, ip
 8024eca:	44d0      	add	r8, sl
 8024ecc:	f10b 0b02 	add.w	fp, fp, #2
 8024ed0:	d1e5      	bne.n	8024e9e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8024ed2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024ed4:	2b00      	cmp	r3, #0
 8024ed6:	dd38      	ble.n	8024f4a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8024ed8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024edc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024ee0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024ee4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024ee8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024eec:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8024ef0:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024ef4:	ee76 6a68 	vsub.f32	s13, s12, s17
 8024ef8:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8024efc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024f00:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8024f04:	ee16 2a90 	vmov	r2, s13
 8024f08:	3b01      	subs	r3, #1
 8024f0a:	9311      	str	r3, [sp, #68]	; 0x44
 8024f0c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8024f0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024f12:	ee17 2a10 	vmov	r2, s14
 8024f16:	eeb0 7a48 	vmov.f32	s14, s16
 8024f1a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8024f1e:	ee17 8a10 	vmov	r8, s14
 8024f22:	eeb0 7a68 	vmov.f32	s14, s17
 8024f26:	9337      	str	r3, [sp, #220]	; 0xdc
 8024f28:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8024f2a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8024f2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024f32:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8024f34:	9338      	str	r3, [sp, #224]	; 0xe0
 8024f36:	ee17 9a10 	vmov	r9, s14
 8024f3a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8024f3c:	eeb0 8a67 	vmov.f32	s16, s15
 8024f40:	eef0 8a46 	vmov.f32	s17, s12
 8024f44:	bf08      	it	eq
 8024f46:	4613      	moveq	r3, r2
 8024f48:	e793      	b.n	8024e72 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8024f4a:	b023      	add	sp, #140	; 0x8c
 8024f4c:	ecbd 8b08 	vpop	{d8-d11}
 8024f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024f54:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8024f58:	f8cd b01c 	str.w	fp, [sp, #28]
 8024f5c:	9837      	ldr	r0, [sp, #220]	; 0xdc
 8024f5e:	1e59      	subs	r1, r3, #1
 8024f60:	fb00 9201 	mla	r2, r0, r1, r9
 8024f64:	1412      	asrs	r2, r2, #16
 8024f66:	910c      	str	r1, [sp, #48]	; 0x30
 8024f68:	f100 815e 	bmi.w	8025228 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8024f6c:	42aa      	cmp	r2, r5
 8024f6e:	f280 815b 	bge.w	8025228 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8024f72:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8024f74:	fb02 8201 	mla	r2, r2, r1, r8
 8024f78:	1412      	asrs	r2, r2, #16
 8024f7a:	f100 8155 	bmi.w	8025228 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8024f7e:	3f01      	subs	r7, #1
 8024f80:	42ba      	cmp	r2, r7
 8024f82:	f280 8151 	bge.w	8025228 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8024f86:	2b00      	cmp	r3, #0
 8024f88:	dda3      	ble.n	8024ed2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8024f8a:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 8024f8e:	4621      	mov	r1, r4
 8024f90:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8024f94:	f8cd 90d4 	str.w	r9, [sp, #212]	; 0xd4
 8024f98:	464a      	mov	r2, r9
 8024f9a:	464c      	mov	r4, r9
 8024f9c:	e122      	b.n	80251e4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8024f9e:	f893 c001 	ldrb.w	ip, [r3, #1]
 8024fa2:	f856 502c 	ldr.w	r5, [r6, ip, lsl #2]
 8024fa6:	950f      	str	r5, [sp, #60]	; 0x3c
 8024fa8:	0e2d      	lsrs	r5, r5, #24
 8024faa:	9508      	str	r5, [sp, #32]
 8024fac:	b162      	cbz	r2, 8024fc8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8024fae:	185d      	adds	r5, r3, r1
 8024fb0:	786d      	ldrb	r5, [r5, #1]
 8024fb2:	5c5b      	ldrb	r3, [r3, r1]
 8024fb4:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 8024fb8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024fbc:	9112      	str	r1, [sp, #72]	; 0x48
 8024fbe:	9310      	str	r3, [sp, #64]	; 0x40
 8024fc0:	0e09      	lsrs	r1, r1, #24
 8024fc2:	0e1b      	lsrs	r3, r3, #24
 8024fc4:	910a      	str	r1, [sp, #40]	; 0x28
 8024fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8024fc8:	b2a4      	uxth	r4, r4
 8024fca:	b292      	uxth	r2, r2
 8024fcc:	fb04 f502 	mul.w	r5, r4, r2
 8024fd0:	0124      	lsls	r4, r4, #4
 8024fd2:	1b66      	subs	r6, r4, r5
 8024fd4:	9b08      	ldr	r3, [sp, #32]
 8024fd6:	b2b6      	uxth	r6, r6
 8024fd8:	fb06 f103 	mul.w	r1, r6, r3
 8024fdc:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8024fe0:	b292      	uxth	r2, r2
 8024fe2:	f5c4 7380 	rsb	r3, r4, #256	; 0x100
 8024fe6:	1a9b      	subs	r3, r3, r2
 8024fe8:	b29b      	uxth	r3, r3
 8024fea:	fb03 1100 	mla	r1, r3, r0, r1
 8024fee:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8024ff0:	fb02 1104 	mla	r1, r2, r4, r1
 8024ff4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024ff6:	fb05 1104 	mla	r1, r5, r4, r1
 8024ffa:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024ffe:	2900      	cmp	r1, #0
 8025000:	f000 80df 	beq.w	80251c2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8025004:	f007 14ff 	and.w	r4, r7, #16711935	; 0xff00ff
 8025008:	28ff      	cmp	r0, #255	; 0xff
 802500a:	940c      	str	r4, [sp, #48]	; 0x30
 802500c:	f407 497f 	and.w	r9, r7, #65280	; 0xff00
 8025010:	d01a      	beq.n	8025048 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8025012:	fb04 f400 	mul.w	r4, r4, r0
 8025016:	4627      	mov	r7, r4
 8025018:	fb09 fc00 	mul.w	ip, r9, r0
 802501c:	0a24      	lsrs	r4, r4, #8
 802501e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025022:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025026:	f50c 7080 	add.w	r0, ip, #256	; 0x100
 802502a:	4427      	add	r7, r4
 802502c:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 8025030:	0a3f      	lsrs	r7, r7, #8
 8025032:	0a00      	lsrs	r0, r0, #8
 8025034:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025038:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802503c:	4307      	orrs	r7, r0
 802503e:	f007 10ff 	and.w	r0, r7, #16711935	; 0xff00ff
 8025042:	900c      	str	r0, [sp, #48]	; 0x30
 8025044:	f407 497f 	and.w	r9, r7, #65280	; 0xff00
 8025048:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802504a:	f000 17ff 	and.w	r7, r0, #16711935	; 0xff00ff
 802504e:	f400 4c7f 	and.w	ip, r0, #65280	; 0xff00
 8025052:	9808      	ldr	r0, [sp, #32]
 8025054:	28ff      	cmp	r0, #255	; 0xff
 8025056:	d01a      	beq.n	802508e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8025058:	fb07 f700 	mul.w	r7, r7, r0
 802505c:	fb0c fc00 	mul.w	ip, ip, r0
 8025060:	0a3c      	lsrs	r4, r7, #8
 8025062:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025066:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802506a:	f50c 7080 	add.w	r0, ip, #256	; 0x100
 802506e:	4427      	add	r7, r4
 8025070:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 8025074:	0a3f      	lsrs	r7, r7, #8
 8025076:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802507a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802507e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025082:	ea47 0c0c 	orr.w	ip, r7, ip
 8025086:	f00c 17ff 	and.w	r7, ip, #16711935	; 0xff00ff
 802508a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802508e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8025090:	f000 1eff 	and.w	lr, r0, #16711935	; 0xff00ff
 8025094:	f400 4a7f 	and.w	sl, r0, #65280	; 0xff00
 8025098:	9809      	ldr	r0, [sp, #36]	; 0x24
 802509a:	28ff      	cmp	r0, #255	; 0xff
 802509c:	d01c      	beq.n	80250d8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>
 802509e:	fb0e fe00 	mul.w	lr, lr, r0
 80250a2:	fb0a fa00 	mul.w	sl, sl, r0
 80250a6:	ea4f 241e 	mov.w	r4, lr, lsr #8
 80250aa:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80250ae:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80250b2:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80250b6:	44a6      	add	lr, r4
 80250b8:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80250bc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80250c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80250c4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80250c8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80250cc:	ea4e 0a0a 	orr.w	sl, lr, sl
 80250d0:	f00a 1eff 	and.w	lr, sl, #16711935	; 0xff00ff
 80250d4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80250d8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80250da:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80250de:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80250e2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80250e4:	2cff      	cmp	r4, #255	; 0xff
 80250e6:	d01d      	beq.n	8025124 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80250e8:	fb00 f004 	mul.w	r0, r0, r4
 80250ec:	fb0b fb04 	mul.w	fp, fp, r4
 80250f0:	0a04      	lsrs	r4, r0, #8
 80250f2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80250f6:	9414      	str	r4, [sp, #80]	; 0x50
 80250f8:	f50b 7480 	add.w	r4, fp, #256	; 0x100
 80250fc:	9413      	str	r4, [sp, #76]	; 0x4c
 80250fe:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025100:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8025104:	4420      	add	r0, r4
 8025106:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025108:	0a00      	lsrs	r0, r0, #8
 802510a:	eb04 241b 	add.w	r4, r4, fp, lsr #8
 802510e:	0a24      	lsrs	r4, r4, #8
 8025110:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025114:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8025118:	ea40 0b0b 	orr.w	fp, r0, fp
 802511c:	f00b 10ff 	and.w	r0, fp, #16711935	; 0xff00ff
 8025120:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8025124:	43c9      	mvns	r1, r1
 8025126:	fb07 f706 	mul.w	r7, r7, r6
 802512a:	fb0c f606 	mul.w	r6, ip, r6
 802512e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025130:	fb09 6603 	mla	r6, r9, r3, r6
 8025134:	fb04 7703 	mla	r7, r4, r3, r7
 8025138:	9b07      	ldr	r3, [sp, #28]
 802513a:	fb0e 7702 	mla	r7, lr, r2, r7
 802513e:	fb0a 6602 	mla	r6, sl, r2, r6
 8025142:	f8b3 e000 	ldrh.w	lr, [r3]
 8025146:	b2c9      	uxtb	r1, r1
 8025148:	ea4f 242e 	mov.w	r4, lr, asr #8
 802514c:	fb00 7005 	mla	r0, r0, r5, r7
 8025150:	fb0b 6605 	mla	r6, fp, r5, r6
 8025154:	ea4f 09ee 	mov.w	r9, lr, asr #3
 8025158:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802515c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8025160:	fb04 f401 	mul.w	r4, r4, r1
 8025164:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8025168:	fa5f fe8e 	uxtb.w	lr, lr
 802516c:	fb09 f901 	mul.w	r9, r9, r1
 8025170:	fb0e f101 	mul.w	r1, lr, r1
 8025174:	0a00      	lsrs	r0, r0, #8
 8025176:	0a36      	lsrs	r6, r6, #8
 8025178:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802517c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025180:	1c62      	adds	r2, r4, #1
 8025182:	ea40 0306 	orr.w	r3, r0, r6
 8025186:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802518a:	f109 0001 	add.w	r0, r9, #1
 802518e:	1c4a      	adds	r2, r1, #1
 8025190:	0c1e      	lsrs	r6, r3, #16
 8025192:	f3c3 2507 	ubfx	r5, r3, #8, #8
 8025196:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802519a:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 802519e:	4a21      	ldr	r2, [pc, #132]	; (8025224 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40c>)
 80251a0:	eb06 2414 	add.w	r4, r6, r4, lsr #8
 80251a4:	b2db      	uxtb	r3, r3
 80251a6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80251aa:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80251ae:	ea02 2404 	and.w	r4, r2, r4, lsl #8
 80251b2:	00c0      	lsls	r0, r0, #3
 80251b4:	ea44 04d3 	orr.w	r4, r4, r3, lsr #3
 80251b8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80251bc:	9b07      	ldr	r3, [sp, #28]
 80251be:	4320      	orrs	r0, r4
 80251c0:	8018      	strh	r0, [r3, #0]
 80251c2:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80251c4:	9937      	ldr	r1, [sp, #220]	; 0xdc
 80251c6:	9b07      	ldr	r3, [sp, #28]
 80251c8:	440a      	add	r2, r1
 80251ca:	9235      	str	r2, [sp, #212]	; 0xd4
 80251cc:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 80251ce:	3302      	adds	r3, #2
 80251d0:	4490      	add	r8, r2
 80251d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80251d4:	9307      	str	r3, [sp, #28]
 80251d6:	4293      	cmp	r3, r2
 80251d8:	d022      	beq.n	8025220 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x408>
 80251da:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 80251dc:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80251de:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80251e2:	9c35      	ldr	r4, [sp, #212]	; 0xd4
 80251e4:	1412      	asrs	r2, r2, #16
 80251e6:	ea4f 4328 	mov.w	r3, r8, asr #16
 80251ea:	fb01 2303 	mla	r3, r1, r3, r2
 80251ee:	980e      	ldr	r0, [sp, #56]	; 0x38
 80251f0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80251f2:	5cc2      	ldrb	r2, [r0, r3]
 80251f4:	f3c4 3403 	ubfx	r4, r4, #12, #4
 80251f8:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 80251fc:	4403      	add	r3, r0
 80251fe:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8025202:	0e38      	lsrs	r0, r7, #24
 8025204:	2c00      	cmp	r4, #0
 8025206:	f47f aeca 	bne.w	8024f9e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802520a:	2a00      	cmp	r2, #0
 802520c:	f43f aedc 	beq.w	8024fc8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8025210:	5c5b      	ldrb	r3, [r3, r1]
 8025212:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8025214:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8025218:	9310      	str	r3, [sp, #64]	; 0x40
 802521a:	0e1b      	lsrs	r3, r3, #24
 802521c:	9309      	str	r3, [sp, #36]	; 0x24
 802521e:	e6d3      	b.n	8024fc8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8025220:	4693      	mov	fp, r2
 8025222:	e656      	b.n	8024ed2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8025224:	fffff800 	.word	0xfffff800
 8025228:	2b00      	cmp	r3, #0
 802522a:	f77f ae52 	ble.w	8024ed2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 802522e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8025232:	ea4f 4229 	mov.w	r2, r9, asr #16
 8025236:	ea4f 4128 	mov.w	r1, r8, asr #16
 802523a:	2a00      	cmp	r2, #0
 802523c:	465f      	mov	r7, fp
 802523e:	f8cd b01c 	str.w	fp, [sp, #28]
 8025242:	9c3c      	ldr	r4, [sp, #240]	; 0xf0
 8025244:	e9dd b337 	ldrd	fp, r3, [sp, #220]	; 0xdc
 8025248:	f3c9 3003 	ubfx	r0, r9, #12, #4
 802524c:	f3c8 3e03 	ubfx	lr, r8, #12, #4
 8025250:	f2c0 8147 	blt.w	80254e2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8025254:	1e73      	subs	r3, r6, #1
 8025256:	429a      	cmp	r2, r3
 8025258:	f280 8143 	bge.w	80254e2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 802525c:	2900      	cmp	r1, #0
 802525e:	f2c0 8140 	blt.w	80254e2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8025262:	f10c 33ff 	add.w	r3, ip, #4294967295
 8025266:	4299      	cmp	r1, r3
 8025268:	f280 813b 	bge.w	80254e2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 802526c:	b236      	sxth	r6, r6
 802526e:	fb01 2106 	mla	r1, r1, r6, r2
 8025272:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025274:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8025276:	5c53      	ldrb	r3, [r2, r1]
 8025278:	4411      	add	r1, r2
 802527a:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 802527e:	910d      	str	r1, [sp, #52]	; 0x34
 8025280:	0e13      	lsrs	r3, r2, #24
 8025282:	2800      	cmp	r0, #0
 8025284:	f000 8154 	beq.w	8025530 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8025288:	f891 c001 	ldrb.w	ip, [r1, #1]
 802528c:	9513      	str	r5, [sp, #76]	; 0x4c
 802528e:	f855 102c 	ldr.w	r1, [r5, ip, lsl #2]
 8025292:	911f      	str	r1, [sp, #124]	; 0x7c
 8025294:	0e09      	lsrs	r1, r1, #24
 8025296:	9116      	str	r1, [sp, #88]	; 0x58
 8025298:	f1be 0f00 	cmp.w	lr, #0
 802529c:	f040 8153 	bne.w	8025546 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 80252a0:	b286      	uxth	r6, r0
 80252a2:	fa1f fc8e 	uxth.w	ip, lr
 80252a6:	fb06 f00c 	mul.w	r0, r6, ip
 80252aa:	0136      	lsls	r6, r6, #4
 80252ac:	1a31      	subs	r1, r6, r0
 80252ae:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80252b0:	b289      	uxth	r1, r1
 80252b2:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80252b6:	9113      	str	r1, [sp, #76]	; 0x4c
 80252b8:	fb01 f105 	mul.w	r1, r1, r5
 80252bc:	f5c6 7680 	rsb	r6, r6, #256	; 0x100
 80252c0:	fa1f f58c 	uxth.w	r5, ip
 80252c4:	1b76      	subs	r6, r6, r5
 80252c6:	b2b6      	uxth	r6, r6
 80252c8:	fb06 1c03 	mla	ip, r6, r3, r1
 80252cc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80252ce:	9514      	str	r5, [sp, #80]	; 0x50
 80252d0:	fb05 cc01 	mla	ip, r5, r1, ip
 80252d4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80252d6:	9619      	str	r6, [sp, #100]	; 0x64
 80252d8:	fb00 cc01 	mla	ip, r0, r1, ip
 80252dc:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80252e0:	f1bc 0f00 	cmp.w	ip, #0
 80252e4:	f000 80e6 	beq.w	80254b4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 80252e8:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 80252ec:	2bff      	cmp	r3, #255	; 0xff
 80252ee:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80252f2:	911a      	str	r1, [sp, #104]	; 0x68
 80252f4:	921b      	str	r2, [sp, #108]	; 0x6c
 80252f6:	d01b      	beq.n	8025330 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 80252f8:	fb02 f203 	mul.w	r2, r2, r3
 80252fc:	fb01 f103 	mul.w	r1, r1, r3
 8025300:	4613      	mov	r3, r2
 8025302:	0a0a      	lsrs	r2, r1, #8
 8025304:	f101 1601 	add.w	r6, r1, #65537	; 0x10001
 8025308:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802530c:	f503 7180 	add.w	r1, r3, #256	; 0x100
 8025310:	4432      	add	r2, r6
 8025312:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8025316:	0a12      	lsrs	r2, r2, #8
 8025318:	0a1b      	lsrs	r3, r3, #8
 802531a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802531e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025322:	4313      	orrs	r3, r2
 8025324:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 8025328:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802532c:	921a      	str	r2, [sp, #104]	; 0x68
 802532e:	931b      	str	r3, [sp, #108]	; 0x6c
 8025330:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8025332:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8025334:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 8025338:	2aff      	cmp	r2, #255	; 0xff
 802533a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802533e:	931c      	str	r3, [sp, #112]	; 0x70
 8025340:	d01b      	beq.n	802537a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x562>
 8025342:	fb03 f302 	mul.w	r3, r3, r2
 8025346:	461e      	mov	r6, r3
 8025348:	fb01 f102 	mul.w	r1, r1, r2
 802534c:	0a0a      	lsrs	r2, r1, #8
 802534e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025352:	f101 1101 	add.w	r1, r1, #65537	; 0x10001
 8025356:	f503 7380 	add.w	r3, r3, #256	; 0x100
 802535a:	440a      	add	r2, r1
 802535c:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8025360:	0a12      	lsrs	r2, r2, #8
 8025362:	0a1b      	lsrs	r3, r3, #8
 8025364:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025368:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802536c:	ea42 0603 	orr.w	r6, r2, r3
 8025370:	f406 437f 	and.w	r3, r6, #65280	; 0xff00
 8025374:	f006 11ff 	and.w	r1, r6, #16711935	; 0xff00ff
 8025378:	931c      	str	r3, [sp, #112]	; 0x70
 802537a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802537c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 802537e:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8025382:	2aff      	cmp	r2, #255	; 0xff
 8025384:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025388:	931d      	str	r3, [sp, #116]	; 0x74
 802538a:	d01b      	beq.n	80253c4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ac>
 802538c:	fb03 f302 	mul.w	r3, r3, r2
 8025390:	fb06 f602 	mul.w	r6, r6, r2
 8025394:	461a      	mov	r2, r3
 8025396:	0a33      	lsrs	r3, r6, #8
 8025398:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802539c:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80253a0:	f502 7380 	add.w	r3, r2, #256	; 0x100
 80253a4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80253a8:	4476      	add	r6, lr
 80253aa:	0a36      	lsrs	r6, r6, #8
 80253ac:	0a1b      	lsrs	r3, r3, #8
 80253ae:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80253b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80253b6:	ea46 0203 	orr.w	r2, r6, r3
 80253ba:	f402 437f 	and.w	r3, r2, #65280	; 0xff00
 80253be:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 80253c2:	931d      	str	r3, [sp, #116]	; 0x74
 80253c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80253c6:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80253ca:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80253ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80253d0:	930d      	str	r3, [sp, #52]	; 0x34
 80253d2:	2aff      	cmp	r2, #255	; 0xff
 80253d4:	d01b      	beq.n	802540e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 80253d6:	fb03 f302 	mul.w	r3, r3, r2
 80253da:	fb0e fe02 	mul.w	lr, lr, r2
 80253de:	0a1a      	lsrs	r2, r3, #8
 80253e0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80253e4:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80253e8:	f50e 7580 	add.w	r5, lr, #256	; 0x100
 80253ec:	441a      	add	r2, r3
 80253ee:	eb05 2e1e 	add.w	lr, r5, lr, lsr #8
 80253f2:	0a12      	lsrs	r2, r2, #8
 80253f4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80253f8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80253fc:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025400:	ea42 0e0e 	orr.w	lr, r2, lr
 8025404:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 8025408:	930d      	str	r3, [sp, #52]	; 0x34
 802540a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802540e:	ea6f 0c0c 	mvn.w	ip, ip
 8025412:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8025414:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8025416:	fb01 f305 	mul.w	r3, r1, r5
 802541a:	991c      	ldr	r1, [sp, #112]	; 0x70
 802541c:	fa5f fc8c 	uxtb.w	ip, ip
 8025420:	fb01 f105 	mul.w	r1, r1, r5
 8025424:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8025426:	fb02 3305 	mla	r3, r2, r5, r3
 802542a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 802542c:	fb02 1105 	mla	r1, r2, r5, r1
 8025430:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8025432:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8025434:	fb06 3605 	mla	r6, r6, r5, r3
 8025438:	fb02 1205 	mla	r2, r2, r5, r1
 802543c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802543e:	8839      	ldrh	r1, [r7, #0]
 8025440:	fb03 6300 	mla	r3, r3, r0, r6
 8025444:	fb0e 2e00 	mla	lr, lr, r0, r2
 8025448:	10c8      	asrs	r0, r1, #3
 802544a:	120a      	asrs	r2, r1, #8
 802544c:	f000 06fc 	and.w	r6, r0, #252	; 0xfc
 8025450:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8025454:	00c9      	lsls	r1, r1, #3
 8025456:	fb02 f20c 	mul.w	r2, r2, ip
 802545a:	fb06 f60c 	mul.w	r6, r6, ip
 802545e:	b2c9      	uxtb	r1, r1
 8025460:	fb01 f00c 	mul.w	r0, r1, ip
 8025464:	0a1b      	lsrs	r3, r3, #8
 8025466:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802546a:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 802546e:	f40e 437f 	and.w	r3, lr, #65280	; 0xff00
 8025472:	430b      	orrs	r3, r1
 8025474:	f106 0e01 	add.w	lr, r6, #1
 8025478:	1c51      	adds	r1, r2, #1
 802547a:	0c1d      	lsrs	r5, r3, #16
 802547c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8025480:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8025484:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8025488:	fa5f fe83 	uxtb.w	lr, r3
 802548c:	f100 0c01 	add.w	ip, r0, #1
 8025490:	4b39      	ldr	r3, [pc, #228]	; (8025578 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>)
 8025492:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8025496:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 802549a:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 802549e:	ea03 2202 	and.w	r2, r3, r2, lsl #8
 80254a2:	00c9      	lsls	r1, r1, #3
 80254a4:	eb0e 2310 	add.w	r3, lr, r0, lsr #8
 80254a8:	ea42 03d3 	orr.w	r3, r2, r3, lsr #3
 80254ac:	f401 62fc 	and.w	r2, r1, #2016	; 0x7e0
 80254b0:	4313      	orrs	r3, r2
 80254b2:	803b      	strh	r3, [r7, #0]
 80254b4:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80254b6:	f1ba 0f00 	cmp.w	sl, #0
 80254ba:	f107 0702 	add.w	r7, r7, #2
 80254be:	44d9      	add	r9, fp
 80254c0:	4498      	add	r8, r3
 80254c2:	dd26      	ble.n	8025512 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 80254c4:	e9d4 6c02 	ldrd	r6, ip, [r4, #8]
 80254c8:	ea4f 4229 	mov.w	r2, r9, asr #16
 80254cc:	2a00      	cmp	r2, #0
 80254ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80254d2:	ea4f 4128 	mov.w	r1, r8, asr #16
 80254d6:	f3c9 3003 	ubfx	r0, r9, #12, #4
 80254da:	f3c8 3e03 	ubfx	lr, r8, #12, #4
 80254de:	f6bf aeb9 	bge.w	8025254 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 80254e2:	1c53      	adds	r3, r2, #1
 80254e4:	d4e6      	bmi.n	80254b4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 80254e6:	42b3      	cmp	r3, r6
 80254e8:	dce4      	bgt.n	80254b4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 80254ea:	1c4b      	adds	r3, r1, #1
 80254ec:	d4e2      	bmi.n	80254b4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 80254ee:	4563      	cmp	r3, ip
 80254f0:	dce0      	bgt.n	80254b4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 80254f2:	fa0f f38c 	sxth.w	r3, ip
 80254f6:	b236      	sxth	r6, r6
 80254f8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80254fc:	e9cd 6300 	strd	r6, r3, [sp]
 8025500:	e9cd 0e04 	strd	r0, lr, [sp, #16]
 8025504:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025506:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025508:	4639      	mov	r1, r7
 802550a:	981e      	ldr	r0, [sp, #120]	; 0x78
 802550c:	f7ff fade 	bl	8024acc <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8025510:	e7d0      	b.n	80254b4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 8025512:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025514:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8025518:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802551c:	3301      	adds	r3, #1
 802551e:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 8025522:	e4d6      	b.n	8024ed2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8025524:	3b01      	subs	r3, #1
 8025526:	f8dd c01c 	ldr.w	ip, [sp, #28]
 802552a:	930c      	str	r3, [sp, #48]	; 0x30
 802552c:	469a      	mov	sl, r3
 802552e:	e684      	b.n	802523a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x422>
 8025530:	f1be 0f00 	cmp.w	lr, #0
 8025534:	f43f aeb4 	beq.w	80252a0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8025538:	5d89      	ldrb	r1, [r1, r6]
 802553a:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 802553e:	9120      	str	r1, [sp, #128]	; 0x80
 8025540:	0e09      	lsrs	r1, r1, #24
 8025542:	9117      	str	r1, [sp, #92]	; 0x5c
 8025544:	e6ac      	b.n	80252a0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8025546:	990d      	ldr	r1, [sp, #52]	; 0x34
 8025548:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802554a:	eb01 0c06 	add.w	ip, r1, r6
 802554e:	f89c c001 	ldrb.w	ip, [ip, #1]
 8025552:	5d89      	ldrb	r1, [r1, r6]
 8025554:	f855 602c 	ldr.w	r6, [r5, ip, lsl #2]
 8025558:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 802555c:	0e35      	lsrs	r5, r6, #24
 802555e:	9120      	str	r1, [sp, #128]	; 0x80
 8025560:	0e09      	lsrs	r1, r1, #24
 8025562:	9621      	str	r6, [sp, #132]	; 0x84
 8025564:	9518      	str	r5, [sp, #96]	; 0x60
 8025566:	9117      	str	r1, [sp, #92]	; 0x5c
 8025568:	e69a      	b.n	80252a0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 802556a:	f43f acb2 	beq.w	8024ed2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 802556e:	1e65      	subs	r5, r4, #1
 8025570:	f8cd b01c 	str.w	fp, [sp, #28]
 8025574:	e4f2      	b.n	8024f5c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8025576:	bf00      	nop
 8025578:	fffff800 	.word	0xfffff800

0802557c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 802557c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025580:	b08b      	sub	sp, #44	; 0x2c
 8025582:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
 8025586:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
 802558a:	ea6f 0b00 	mvn.w	fp, r0
 802558e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025590:	f9bd 5050 	ldrsh.w	r5, [sp, #80]	; 0x50
 8025594:	9005      	str	r0, [sp, #20]
 8025596:	fb0c 4805 	mla	r8, ip, r5, r4
 802559a:	7848      	ldrb	r0, [r1, #1]
 802559c:	788e      	ldrb	r6, [r1, #2]
 802559e:	0204      	lsls	r4, r0, #8
 80255a0:	780f      	ldrb	r7, [r1, #0]
 80255a2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80255a6:	9306      	str	r3, [sp, #24]
 80255a8:	fa5f f38b 	uxtb.w	r3, fp
 80255ac:	433c      	orrs	r4, r7
 80255ae:	9304      	str	r3, [sp, #16]
 80255b0:	f1bc 0f00 	cmp.w	ip, #0
 80255b4:	eb02 0308 	add.w	r3, r2, r8
 80255b8:	9003      	str	r0, [sp, #12]
 80255ba:	9602      	str	r6, [sp, #8]
 80255bc:	9307      	str	r3, [sp, #28]
 80255be:	9409      	str	r4, [sp, #36]	; 0x24
 80255c0:	f10c 0601 	add.w	r6, ip, #1
 80255c4:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 80255c8:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 80255cc:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
 80255d0:	db02      	blt.n	80255d8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x5c>
 80255d2:	45e6      	cmp	lr, ip
 80255d4:	f300 80a0 	bgt.w	8025718 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x19c>
 80255d8:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 80255dc:	46e0      	mov	r8, ip
 80255de:	fa5f fb84 	uxtb.w	fp, r4
 80255e2:	f8cd b004 	str.w	fp, [sp, #4]
 80255e6:	2e00      	cmp	r6, #0
 80255e8:	db01      	blt.n	80255ee <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x72>
 80255ea:	45b6      	cmp	lr, r6
 80255ec:	dc73      	bgt.n	80256d6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x15a>
 80255ee:	fa5f fa84 	uxtb.w	sl, r4
 80255f2:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 80255f6:	4654      	mov	r4, sl
 80255f8:	46f1      	mov	r9, lr
 80255fa:	2b0f      	cmp	r3, #15
 80255fc:	f200 80cb 	bhi.w	8025796 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x21a>
 8025600:	280f      	cmp	r0, #15
 8025602:	f200 80c8 	bhi.w	8025796 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x21a>
 8025606:	b29b      	uxth	r3, r3
 8025608:	b280      	uxth	r0, r0
 802560a:	fb03 f600 	mul.w	r6, r3, r0
 802560e:	011b      	lsls	r3, r3, #4
 8025610:	1b9d      	subs	r5, r3, r6
 8025612:	9a01      	ldr	r2, [sp, #4]
 8025614:	b2ad      	uxth	r5, r5
 8025616:	ebc6 1000 	rsb	r0, r6, r0, lsl #4
 802561a:	fb05 f202 	mul.w	r2, r5, r2
 802561e:	b280      	uxth	r0, r0
 8025620:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8025624:	1a1b      	subs	r3, r3, r0
 8025626:	b29b      	uxth	r3, r3
 8025628:	fb03 220b 	mla	r2, r3, fp, r2
 802562c:	fb00 2a0a 	mla	sl, r0, sl, r2
 8025630:	f8bd b010 	ldrh.w	fp, [sp, #16]
 8025634:	fb06 a404 	mla	r4, r6, r4, sl
 8025638:	fb17 f70b 	smulbb	r7, r7, fp
 802563c:	f8bd a014 	ldrh.w	sl, [sp, #20]
 8025640:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8025644:	fb04 770a 	mla	r7, r4, sl, r7
 8025648:	b2bf      	uxth	r7, r7
 802564a:	1c7a      	adds	r2, r7, #1
 802564c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8025650:	123f      	asrs	r7, r7, #8
 8025652:	700f      	strb	r7, [r1, #0]
 8025654:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8025658:	f898 7001 	ldrb.w	r7, [r8, #1]
 802565c:	fb05 f204 	mul.w	r2, r5, r4
 8025660:	fb03 2407 	mla	r4, r3, r7, r2
 8025664:	f899 2001 	ldrb.w	r2, [r9, #1]
 8025668:	f89e 7001 	ldrb.w	r7, [lr, #1]
 802566c:	fb00 4202 	mla	r2, r0, r2, r4
 8025670:	9c03      	ldr	r4, [sp, #12]
 8025672:	fb06 2207 	mla	r2, r6, r7, r2
 8025676:	fb14 f40b 	smulbb	r4, r4, fp
 802567a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802567e:	fb02 420a 	mla	r2, r2, sl, r4
 8025682:	b292      	uxth	r2, r2
 8025684:	1c54      	adds	r4, r2, #1
 8025686:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 802568a:	1212      	asrs	r2, r2, #8
 802568c:	704a      	strb	r2, [r1, #1]
 802568e:	f89c 4002 	ldrb.w	r4, [ip, #2]
 8025692:	f898 2002 	ldrb.w	r2, [r8, #2]
 8025696:	fb05 f504 	mul.w	r5, r5, r4
 802569a:	fb03 5502 	mla	r5, r3, r2, r5
 802569e:	f899 4002 	ldrb.w	r4, [r9, #2]
 80256a2:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80256a6:	fb00 5004 	mla	r0, r0, r4, r5
 80256aa:	9b02      	ldr	r3, [sp, #8]
 80256ac:	fb06 0602 	mla	r6, r6, r2, r0
 80256b0:	fb13 fb0b 	smulbb	fp, r3, fp
 80256b4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80256b8:	fb06 ba0a 	mla	sl, r6, sl, fp
 80256bc:	fa1f fa8a 	uxth.w	sl, sl
 80256c0:	f10a 0b01 	add.w	fp, sl, #1
 80256c4:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80256c8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80256cc:	f881 a002 	strb.w	sl, [r1, #2]
 80256d0:	b00b      	add	sp, #44	; 0x2c
 80256d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80256d6:	2800      	cmp	r0, #0
 80256d8:	d089      	beq.n	80255ee <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x72>
 80256da:	9e16      	ldr	r6, [sp, #88]	; 0x58
 80256dc:	2e00      	cmp	r6, #0
 80256de:	db47      	blt.n	8025770 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1f4>
 80256e0:	42b5      	cmp	r5, r6
 80256e2:	dd45      	ble.n	8025770 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1f4>
 80256e4:	9a07      	ldr	r2, [sp, #28]
 80256e6:	f812 9005 	ldrb.w	r9, [r2, r5]
 80256ea:	9a06      	ldr	r2, [sp, #24]
 80256ec:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80256f0:	4491      	add	r9, r2
 80256f2:	3601      	adds	r6, #1
 80256f4:	f899 a000 	ldrb.w	sl, [r9]
 80256f8:	d436      	bmi.n	8025768 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ec>
 80256fa:	42b5      	cmp	r5, r6
 80256fc:	dd34      	ble.n	8025768 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ec>
 80256fe:	2b00      	cmp	r3, #0
 8025700:	d045      	beq.n	802578e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x212>
 8025702:	9a07      	ldr	r2, [sp, #28]
 8025704:	442a      	add	r2, r5
 8025706:	f892 e001 	ldrb.w	lr, [r2, #1]
 802570a:	9a06      	ldr	r2, [sp, #24]
 802570c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8025710:	f812 400e 	ldrb.w	r4, [r2, lr]
 8025714:	4496      	add	lr, r2
 8025716:	e770      	b.n	80255fa <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7e>
 8025718:	4691      	mov	r9, r2
 802571a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802571c:	2a00      	cmp	r2, #0
 802571e:	db01      	blt.n	8025724 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1a8>
 8025720:	4295      	cmp	r5, r2
 8025722:	dc19      	bgt.n	8025758 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>
 8025724:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 8025728:	3201      	adds	r2, #1
 802572a:	f898 b000 	ldrb.w	fp, [r8]
 802572e:	d40e      	bmi.n	802574e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d2>
 8025730:	4295      	cmp	r5, r2
 8025732:	dd0c      	ble.n	802574e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d2>
 8025734:	b1fb      	cbz	r3, 8025776 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1fa>
 8025736:	9a07      	ldr	r2, [sp, #28]
 8025738:	f892 c001 	ldrb.w	ip, [r2, #1]
 802573c:	9a06      	ldr	r2, [sp, #24]
 802573e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8025742:	f812 200c 	ldrb.w	r2, [r2, ip]
 8025746:	9201      	str	r2, [sp, #4]
 8025748:	9a06      	ldr	r2, [sp, #24]
 802574a:	4494      	add	ip, r2
 802574c:	e74b      	b.n	80255e6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x6a>
 802574e:	b2e2      	uxtb	r2, r4
 8025750:	9201      	str	r2, [sp, #4]
 8025752:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 8025756:	e746      	b.n	80255e6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x6a>
 8025758:	f819 8008 	ldrb.w	r8, [r9, r8]
 802575c:	9a06      	ldr	r2, [sp, #24]
 802575e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8025762:	4490      	add	r8, r2
 8025764:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8025766:	e7df      	b.n	8025728 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ac>
 8025768:	b2e4      	uxtb	r4, r4
 802576a:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 802576e:	e744      	b.n	80255fa <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7e>
 8025770:	f10d 0924 	add.w	r9, sp, #36	; 0x24
 8025774:	e7bd      	b.n	80256f2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x176>
 8025776:	b2e2      	uxtb	r2, r4
 8025778:	2e00      	cmp	r6, #0
 802577a:	9201      	str	r2, [sp, #4]
 802577c:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 8025780:	f6bf af33 	bge.w	80255ea <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x6e>
 8025784:	46e6      	mov	lr, ip
 8025786:	46e1      	mov	r9, ip
 8025788:	4692      	mov	sl, r2
 802578a:	4614      	mov	r4, r2
 802578c:	e738      	b.n	8025600 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x84>
 802578e:	b2e4      	uxtb	r4, r4
 8025790:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 8025794:	e734      	b.n	8025600 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x84>
 8025796:	4b03      	ldr	r3, [pc, #12]	; (80257a4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x228>)
 8025798:	4a03      	ldr	r2, [pc, #12]	; (80257a8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x22c>)
 802579a:	f44f 710f 	mov.w	r1, #572	; 0x23c
 802579e:	4803      	ldr	r0, [pc, #12]	; (80257ac <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x230>)
 80257a0:	f003 fc8c 	bl	80290bc <__assert_func>
 80257a4:	0802c360 	.word	0x0802c360
 80257a8:	0802c9d8 	.word	0x0802c9d8
 80257ac:	0802c4e4 	.word	0x0802c4e4

080257b0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80257b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80257b4:	ed2d 8b08 	vpush	{d8-d11}
 80257b8:	b097      	sub	sp, #92	; 0x5c
 80257ba:	f89d 60c4 	ldrb.w	r6, [sp, #196]	; 0xc4
 80257be:	eeb0 aa40 	vmov.f32	s20, s0
 80257c2:	e9dd b729 	ldrd	fp, r7, [sp, #164]	; 0xa4
 80257c6:	e9cd 0614 	strd	r0, r6, [sp, #80]	; 0x50
 80257ca:	43f0      	mvns	r0, r6
 80257cc:	eef0 9a60 	vmov.f32	s19, s1
 80257d0:	eeb0 9a41 	vmov.f32	s18, s2
 80257d4:	eef0 8a62 	vmov.f32	s17, s5
 80257d8:	eeb0 8a43 	vmov.f32	s16, s6
 80257dc:	eef0 ba44 	vmov.f32	s23, s8
 80257e0:	eeb0 ba64 	vmov.f32	s22, s9
 80257e4:	eef0 aa45 	vmov.f32	s21, s10
 80257e8:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 80257ec:	e9dd 512d 	ldrd	r5, r1, [sp, #180]	; 0xb4
 80257f0:	461a      	mov	r2, r3
 80257f2:	686c      	ldr	r4, [r5, #4]
 80257f4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80257f6:	f8dd 90ac 	ldr.w	r9, [sp, #172]	; 0xac
 80257fa:	fb04 1303 	mla	r3, r4, r3, r1
 80257fe:	9c30      	ldr	r4, [sp, #192]	; 0xc0
 8025800:	6829      	ldr	r1, [r5, #0]
 8025802:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025806:	6865      	ldr	r5, [r4, #4]
 8025808:	eb01 0a03 	add.w	sl, r1, r3
 802580c:	b2c3      	uxtb	r3, r0
 802580e:	6824      	ldr	r4, [r4, #0]
 8025810:	9309      	str	r3, [sp, #36]	; 0x24
 8025812:	1d2b      	adds	r3, r5, #4
 8025814:	930a      	str	r3, [sp, #40]	; 0x28
 8025816:	b2b3      	uxth	r3, r6
 8025818:	940d      	str	r4, [sp, #52]	; 0x34
 802581a:	930b      	str	r3, [sp, #44]	; 0x2c
 802581c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802581e:	2b00      	cmp	r3, #0
 8025820:	dc02      	bgt.n	8025828 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025822:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025824:	2b00      	cmp	r3, #0
 8025826:	dd63      	ble.n	80258f0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8025828:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802582a:	2a00      	cmp	r2, #0
 802582c:	e9d3 6e02 	ldrd	r6, lr, [r3, #8]
 8025830:	b234      	sxth	r4, r6
 8025832:	fa0f fc8e 	sxth.w	ip, lr
 8025836:	f340 825b 	ble.w	8025cf0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>
 802583a:	f8cd e020 	str.w	lr, [sp, #32]
 802583e:	f8dd e0b0 	ldr.w	lr, [sp, #176]	; 0xb0
 8025842:	1e65      	subs	r5, r4, #1
 8025844:	f10c 38ff 	add.w	r8, ip, #4294967295
 8025848:	ea5f 432b 	movs.w	r3, fp, asr #16
 802584c:	ea4f 4127 	mov.w	r1, r7, asr #16
 8025850:	d405      	bmi.n	802585e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8025852:	42ab      	cmp	r3, r5
 8025854:	da03      	bge.n	802585e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8025856:	2900      	cmp	r1, #0
 8025858:	db01      	blt.n	802585e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802585a:	4541      	cmp	r1, r8
 802585c:	db4d      	blt.n	80258fa <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802585e:	1c58      	adds	r0, r3, #1
 8025860:	d406      	bmi.n	8025870 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8025862:	42a0      	cmp	r0, r4
 8025864:	dc04      	bgt.n	8025870 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8025866:	1c48      	adds	r0, r1, #1
 8025868:	d402      	bmi.n	8025870 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 802586a:	4560      	cmp	r0, ip
 802586c:	f340 819b 	ble.w	8025ba6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8025870:	3a01      	subs	r2, #1
 8025872:	44cb      	add	fp, r9
 8025874:	4477      	add	r7, lr
 8025876:	f10a 0a03 	add.w	sl, sl, #3
 802587a:	d1e5      	bne.n	8025848 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802587c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802587e:	2b00      	cmp	r3, #0
 8025880:	dd36      	ble.n	80258f0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8025882:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025886:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802588a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802588e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025892:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025896:	ee29 6aa7 	vmul.f32	s12, s19, s15
 802589a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802589e:	ee76 6a68 	vsub.f32	s13, s12, s17
 80258a2:	ee37 7ac8 	vsub.f32	s14, s15, s16
 80258a6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80258aa:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80258ae:	ee16 2a90 	vmov	r2, s13
 80258b2:	3b01      	subs	r3, #1
 80258b4:	930e      	str	r3, [sp, #56]	; 0x38
 80258b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80258b8:	fb92 f9f3 	sdiv	r9, r2, r3
 80258bc:	ee17 2a10 	vmov	r2, s14
 80258c0:	eeb0 7a48 	vmov.f32	s14, s16
 80258c4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80258c8:	ee17 7a10 	vmov	r7, s14
 80258cc:	eeb0 7a68 	vmov.f32	s14, s17
 80258d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80258d4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80258d8:	932c      	str	r3, [sp, #176]	; 0xb0
 80258da:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80258dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80258de:	ee17 ba10 	vmov	fp, s14
 80258e2:	eeb0 8a67 	vmov.f32	s16, s15
 80258e6:	eef0 8a46 	vmov.f32	s17, s12
 80258ea:	bf18      	it	ne
 80258ec:	461a      	movne	r2, r3
 80258ee:	e795      	b.n	802581c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80258f0:	b017      	add	sp, #92	; 0x5c
 80258f2:	ecbd 8b08 	vpop	{d8-d11}
 80258f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80258fa:	f8dd e020 	ldr.w	lr, [sp, #32]
 80258fe:	1e51      	subs	r1, r2, #1
 8025900:	fb09 b301 	mla	r3, r9, r1, fp
 8025904:	141b      	asrs	r3, r3, #16
 8025906:	9108      	str	r1, [sp, #32]
 8025908:	f100 80e7 	bmi.w	8025ada <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802590c:	42ab      	cmp	r3, r5
 802590e:	f280 80e4 	bge.w	8025ada <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8025912:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025914:	fb03 7301 	mla	r3, r3, r1, r7
 8025918:	141b      	asrs	r3, r3, #16
 802591a:	f100 80de 	bmi.w	8025ada <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802591e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8025922:	4563      	cmp	r3, ip
 8025924:	f280 80d9 	bge.w	8025ada <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8025928:	2a00      	cmp	r2, #0
 802592a:	dda7      	ble.n	802587c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 802592c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025930:	eb0a 0302 	add.w	r3, sl, r2
 8025934:	930c      	str	r3, [sp, #48]	; 0x30
 8025936:	f10a 0c03 	add.w	ip, sl, #3
 802593a:	e9cd 792a 	strd	r7, r9, [sp, #168]	; 0xa8
 802593e:	463b      	mov	r3, r7
 8025940:	e09a      	b.n	8025a78 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8025942:	784d      	ldrb	r5, [r1, #1]
 8025944:	1908      	adds	r0, r1, r4
 8025946:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802594a:	4435      	add	r5, r6
 802594c:	2a00      	cmp	r2, #0
 802594e:	f000 80b5 	beq.w	8025abc <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8025952:	5d0c      	ldrb	r4, [r1, r4]
 8025954:	f890 e001 	ldrb.w	lr, [r0, #1]
 8025958:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802595c:	19a1      	adds	r1, r4, r6
 802595e:	9108      	str	r1, [sp, #32]
 8025960:	4631      	mov	r1, r6
 8025962:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8025966:	9f08      	ldr	r7, [sp, #32]
 8025968:	44b6      	add	lr, r6
 802596a:	b29b      	uxth	r3, r3
 802596c:	b292      	uxth	r2, r2
 802596e:	fb03 f602 	mul.w	r6, r3, r2
 8025972:	011b      	lsls	r3, r3, #4
 8025974:	f895 9000 	ldrb.w	r9, [r5]
 8025978:	1b98      	subs	r0, r3, r6
 802597a:	b280      	uxth	r0, r0
 802597c:	fb00 f909 	mul.w	r9, r0, r9
 8025980:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8025984:	b292      	uxth	r2, r2
 8025986:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 802598a:	f811 100a 	ldrb.w	r1, [r1, sl]
 802598e:	1a9b      	subs	r3, r3, r2
 8025990:	b29b      	uxth	r3, r3
 8025992:	fb03 9101 	mla	r1, r3, r1, r9
 8025996:	f897 9000 	ldrb.w	r9, [r7]
 802599a:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 802599c:	fb02 1109 	mla	r1, r2, r9, r1
 80259a0:	f89e a000 	ldrb.w	sl, [lr]
 80259a4:	f81c 9c03 	ldrb.w	r9, [ip, #-3]
 80259a8:	44a3      	add	fp, r4
 80259aa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80259ac:	fb06 110a 	mla	r1, r6, sl, r1
 80259b0:	fb19 f904 	smulbb	r9, r9, r4
 80259b4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80259b6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80259ba:	fb01 9904 	mla	r9, r1, r4, r9
 80259be:	fa1f f989 	uxth.w	r9, r9
 80259c2:	f109 0101 	add.w	r1, r9, #1
 80259c6:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 80259ca:	ea4f 2929 	mov.w	r9, r9, asr #8
 80259ce:	f80c 9c03 	strb.w	r9, [ip, #-3]
 80259d2:	7869      	ldrb	r1, [r5, #1]
 80259d4:	f898 9001 	ldrb.w	r9, [r8, #1]
 80259d8:	fb00 f101 	mul.w	r1, r0, r1
 80259dc:	9c08      	ldr	r4, [sp, #32]
 80259de:	fb03 1109 	mla	r1, r3, r9, r1
 80259e2:	f894 9001 	ldrb.w	r9, [r4, #1]
 80259e6:	9f2c      	ldr	r7, [sp, #176]	; 0xb0
 80259e8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80259ea:	fb02 1109 	mla	r1, r2, r9, r1
 80259ee:	f89e a001 	ldrb.w	sl, [lr, #1]
 80259f2:	443c      	add	r4, r7
 80259f4:	f81c 9c02 	ldrb.w	r9, [ip, #-2]
 80259f8:	942a      	str	r4, [sp, #168]	; 0xa8
 80259fa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80259fc:	fb06 110a 	mla	r1, r6, sl, r1
 8025a00:	fb19 f904 	smulbb	r9, r9, r4
 8025a04:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8025a06:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025a0a:	fb01 9907 	mla	r9, r1, r7, r9
 8025a0e:	fa1f f989 	uxth.w	r9, r9
 8025a12:	f109 0101 	add.w	r1, r9, #1
 8025a16:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8025a1a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8025a1e:	f80c 9c02 	strb.w	r9, [ip, #-2]
 8025a22:	78a9      	ldrb	r1, [r5, #2]
 8025a24:	f898 5002 	ldrb.w	r5, [r8, #2]
 8025a28:	fb00 f001 	mul.w	r0, r0, r1
 8025a2c:	fb03 0005 	mla	r0, r3, r5, r0
 8025a30:	9b08      	ldr	r3, [sp, #32]
 8025a32:	f89e 4002 	ldrb.w	r4, [lr, #2]
 8025a36:	789b      	ldrb	r3, [r3, #2]
 8025a38:	f81c ec01 	ldrb.w	lr, [ip, #-1]
 8025a3c:	fb02 0003 	mla	r0, r2, r3, r0
 8025a40:	fb06 0004 	mla	r0, r6, r4, r0
 8025a44:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025a46:	fb1e f404 	smulbb	r4, lr, r4
 8025a4a:	f3c0 2e07 	ubfx	lr, r0, #8, #8
 8025a4e:	fb0e 4e07 	mla	lr, lr, r7, r4
 8025a52:	fa1f fe8e 	uxth.w	lr, lr
 8025a56:	f10e 0301 	add.w	r3, lr, #1
 8025a5a:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8025a5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025a60:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8025a64:	4563      	cmp	r3, ip
 8025a66:	f80c ec01 	strb.w	lr, [ip, #-1]
 8025a6a:	d034      	beq.n	8025ad6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8025a6c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025a6e:	f10c 0c03 	add.w	ip, ip, #3
 8025a72:	f9b3 4008 	ldrsh.w	r4, [r3, #8]
 8025a76:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025a78:	1419      	asrs	r1, r3, #16
 8025a7a:	ea4f 432b 	mov.w	r3, fp, asr #16
 8025a7e:	fb04 3101 	mla	r1, r4, r1, r3
 8025a82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8025a84:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8025a86:	f812 a001 	ldrb.w	sl, [r2, r1]
 8025a8a:	4411      	add	r1, r2
 8025a8c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8025a8e:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8025a92:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8025a96:	eb06 080a 	add.w	r8, r6, sl
 8025a9a:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8025a9e:	2b00      	cmp	r3, #0
 8025aa0:	f47f af4f 	bne.w	8025942 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8025aa4:	b182      	cbz	r2, 8025ac8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8025aa6:	5d0c      	ldrb	r4, [r1, r4]
 8025aa8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8025aaa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025aae:	1861      	adds	r1, r4, r1
 8025ab0:	9108      	str	r1, [sp, #32]
 8025ab2:	46c6      	mov	lr, r8
 8025ab4:	4645      	mov	r5, r8
 8025ab6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8025ab8:	9f08      	ldr	r7, [sp, #32]
 8025aba:	e756      	b.n	802596a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025abc:	46c6      	mov	lr, r8
 8025abe:	f8cd 8020 	str.w	r8, [sp, #32]
 8025ac2:	4631      	mov	r1, r6
 8025ac4:	4647      	mov	r7, r8
 8025ac6:	e750      	b.n	802596a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025ac8:	46c6      	mov	lr, r8
 8025aca:	f8cd 8020 	str.w	r8, [sp, #32]
 8025ace:	4645      	mov	r5, r8
 8025ad0:	4631      	mov	r1, r6
 8025ad2:	4647      	mov	r7, r8
 8025ad4:	e749      	b.n	802596a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025ad6:	469a      	mov	sl, r3
 8025ad8:	e6d0      	b.n	802587c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 8025ada:	2a00      	cmp	r2, #0
 8025adc:	f77f aece 	ble.w	802587c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 8025ae0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8025ae4:	ea4f 432b 	mov.w	r3, fp, asr #16
 8025ae8:	1439      	asrs	r1, r7, #16
 8025aea:	4654      	mov	r4, sl
 8025aec:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 8025aee:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 8025af2:	2b00      	cmp	r3, #0
 8025af4:	f3cb 3003 	ubfx	r0, fp, #12, #4
 8025af8:	f3c7 3203 	ubfx	r2, r7, #12, #4
 8025afc:	db2f      	blt.n	8025b5e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8025afe:	f106 3cff 	add.w	ip, r6, #4294967295
 8025b02:	4563      	cmp	r3, ip
 8025b04:	da2b      	bge.n	8025b5e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8025b06:	2900      	cmp	r1, #0
 8025b08:	db29      	blt.n	8025b5e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8025b0a:	f10e 3cff 	add.w	ip, lr, #4294967295
 8025b0e:	4561      	cmp	r1, ip
 8025b10:	da25      	bge.n	8025b5e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8025b12:	fa0f fa86 	sxth.w	sl, r6
 8025b16:	fb01 330a 	mla	r3, r1, sl, r3
 8025b1a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8025b1c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8025b1e:	f811 e003 	ldrb.w	lr, [r1, r3]
 8025b22:	440b      	add	r3, r1
 8025b24:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8025b28:	eb06 0c0e 	add.w	ip, r6, lr
 8025b2c:	2800      	cmp	r0, #0
 8025b2e:	d052      	beq.n	8025bd6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x426>
 8025b30:	7859      	ldrb	r1, [r3, #1]
 8025b32:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8025b36:	1871      	adds	r1, r6, r1
 8025b38:	910c      	str	r1, [sp, #48]	; 0x30
 8025b3a:	2a00      	cmp	r2, #0
 8025b3c:	f000 80d5 	beq.w	8025cea <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53a>
 8025b40:	eb03 010a 	add.w	r1, r3, sl
 8025b44:	7849      	ldrb	r1, [r1, #1]
 8025b46:	f813 300a 	ldrb.w	r3, [r3, sl]
 8025b4a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8025b4e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025b52:	1871      	adds	r1, r6, r1
 8025b54:	18f3      	adds	r3, r6, r3
 8025b56:	9110      	str	r1, [sp, #64]	; 0x40
 8025b58:	9311      	str	r3, [sp, #68]	; 0x44
 8025b5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025b5c:	e042      	b.n	8025be4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8025b5e:	f113 0c01 	adds.w	ip, r3, #1
 8025b62:	d406      	bmi.n	8025b72 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8025b64:	45b4      	cmp	ip, r6
 8025b66:	dc04      	bgt.n	8025b72 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8025b68:	f111 0c01 	adds.w	ip, r1, #1
 8025b6c:	d401      	bmi.n	8025b72 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8025b6e:	45f4      	cmp	ip, lr
 8025b70:	dd1f      	ble.n	8025bb2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 8025b72:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025b74:	f1b8 0f00 	cmp.w	r8, #0
 8025b78:	f104 0403 	add.w	r4, r4, #3
 8025b7c:	44cb      	add	fp, r9
 8025b7e:	441f      	add	r7, r3
 8025b80:	dd07      	ble.n	8025b92 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8025b82:	e9d5 6e02 	ldrd	r6, lr, [r5, #8]
 8025b86:	f108 38ff 	add.w	r8, r8, #4294967295
 8025b8a:	ea4f 432b 	mov.w	r3, fp, asr #16
 8025b8e:	1439      	asrs	r1, r7, #16
 8025b90:	e7af      	b.n	8025af2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8025b92:	9b08      	ldr	r3, [sp, #32]
 8025b94:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8025b98:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025b9c:	3301      	adds	r3, #1
 8025b9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025ba2:	449a      	add	sl, r3
 8025ba4:	e66a      	b.n	802587c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 8025ba6:	3a01      	subs	r2, #1
 8025ba8:	f8dd e020 	ldr.w	lr, [sp, #32]
 8025bac:	4690      	mov	r8, r2
 8025bae:	9208      	str	r2, [sp, #32]
 8025bb0:	e79b      	b.n	8025aea <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8025bb2:	fa0f fe8e 	sxth.w	lr, lr
 8025bb6:	b236      	sxth	r6, r6
 8025bb8:	e9cd 6e00 	strd	r6, lr, [sp]
 8025bbc:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8025bbe:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8025bc2:	e9cd 2605 	strd	r2, r6, [sp, #20]
 8025bc6:	9302      	str	r3, [sp, #8]
 8025bc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8025bca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025bcc:	4621      	mov	r1, r4
 8025bce:	9814      	ldr	r0, [sp, #80]	; 0x50
 8025bd0:	f7ff fcd4 	bl	802557c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8025bd4:	e7cd      	b.n	8025b72 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8025bd6:	2a00      	cmp	r2, #0
 8025bd8:	d17b      	bne.n	8025cd2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x522>
 8025bda:	4661      	mov	r1, ip
 8025bdc:	e9cd cc10 	strd	ip, ip, [sp, #64]	; 0x40
 8025be0:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8025be4:	b283      	uxth	r3, r0
 8025be6:	b292      	uxth	r2, r2
 8025be8:	fb03 f602 	mul.w	r6, r3, r2
 8025bec:	011b      	lsls	r3, r3, #4
 8025bee:	7809      	ldrb	r1, [r1, #0]
 8025bf0:	1b98      	subs	r0, r3, r6
 8025bf2:	b280      	uxth	r0, r0
 8025bf4:	9012      	str	r0, [sp, #72]	; 0x48
 8025bf6:	fb00 f101 	mul.w	r1, r0, r1
 8025bfa:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8025bfe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8025c00:	b292      	uxth	r2, r2
 8025c02:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8025c06:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8025c0a:	1a9b      	subs	r3, r3, r2
 8025c0c:	b29b      	uxth	r3, r3
 8025c0e:	fb03 110e 	mla	r1, r3, lr, r1
 8025c12:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025c14:	f890 a000 	ldrb.w	sl, [r0]
 8025c18:	9810      	ldr	r0, [sp, #64]	; 0x40
 8025c1a:	fb02 110a 	mla	r1, r2, sl, r1
 8025c1e:	f890 e000 	ldrb.w	lr, [r0]
 8025c22:	f894 a000 	ldrb.w	sl, [r4]
 8025c26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025c28:	fb06 110e 	mla	r1, r6, lr, r1
 8025c2c:	fb1a fa00 	smulbb	sl, sl, r0
 8025c30:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8025c32:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025c36:	fb01 a100 	mla	r1, r1, r0, sl
 8025c3a:	b289      	uxth	r1, r1
 8025c3c:	f101 0e01 	add.w	lr, r1, #1
 8025c40:	eb0e 2111 	add.w	r1, lr, r1, lsr #8
 8025c44:	1209      	asrs	r1, r1, #8
 8025c46:	7021      	strb	r1, [r4, #0]
 8025c48:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025c4a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8025c4c:	7849      	ldrb	r1, [r1, #1]
 8025c4e:	f89c e001 	ldrb.w	lr, [ip, #1]
 8025c52:	fb00 f101 	mul.w	r1, r0, r1
 8025c56:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025c58:	fb03 110e 	mla	r1, r3, lr, r1
 8025c5c:	f890 a001 	ldrb.w	sl, [r0, #1]
 8025c60:	9810      	ldr	r0, [sp, #64]	; 0x40
 8025c62:	fb02 110a 	mla	r1, r2, sl, r1
 8025c66:	f890 e001 	ldrb.w	lr, [r0, #1]
 8025c6a:	f894 a001 	ldrb.w	sl, [r4, #1]
 8025c6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025c70:	fb06 110e 	mla	r1, r6, lr, r1
 8025c74:	fb1a fa00 	smulbb	sl, sl, r0
 8025c78:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8025c7a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025c7e:	fb01 a100 	mla	r1, r1, r0, sl
 8025c82:	b289      	uxth	r1, r1
 8025c84:	f101 0e01 	add.w	lr, r1, #1
 8025c88:	eb0e 2111 	add.w	r1, lr, r1, lsr #8
 8025c8c:	1209      	asrs	r1, r1, #8
 8025c8e:	7061      	strb	r1, [r4, #1]
 8025c90:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025c92:	9812      	ldr	r0, [sp, #72]	; 0x48
 8025c94:	7889      	ldrb	r1, [r1, #2]
 8025c96:	f89c c002 	ldrb.w	ip, [ip, #2]
 8025c9a:	fb00 f001 	mul.w	r0, r0, r1
 8025c9e:	fb03 010c 	mla	r1, r3, ip, r0
 8025ca2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025ca4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025ca6:	7880      	ldrb	r0, [r0, #2]
 8025ca8:	789b      	ldrb	r3, [r3, #2]
 8025caa:	fb02 1100 	mla	r1, r2, r0, r1
 8025cae:	78a2      	ldrb	r2, [r4, #2]
 8025cb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025cb2:	fb06 1303 	mla	r3, r6, r3, r1
 8025cb6:	fb12 f200 	smulbb	r2, r2, r0
 8025cba:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8025cbc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025cc0:	fb03 2300 	mla	r3, r3, r0, r2
 8025cc4:	b29b      	uxth	r3, r3
 8025cc6:	1c5a      	adds	r2, r3, #1
 8025cc8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025ccc:	121b      	asrs	r3, r3, #8
 8025cce:	70a3      	strb	r3, [r4, #2]
 8025cd0:	e74f      	b.n	8025b72 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8025cd2:	f813 300a 	ldrb.w	r3, [r3, sl]
 8025cd6:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8025cda:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025cde:	18f3      	adds	r3, r6, r3
 8025ce0:	9311      	str	r3, [sp, #68]	; 0x44
 8025ce2:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8025ce6:	4661      	mov	r1, ip
 8025ce8:	e77c      	b.n	8025be4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8025cea:	e9cd cc10 	strd	ip, ip, [sp, #64]	; 0x40
 8025cee:	e779      	b.n	8025be4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8025cf0:	f43f adc4 	beq.w	802587c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 8025cf4:	1e65      	subs	r5, r4, #1
 8025cf6:	e602      	b.n	80258fe <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>

08025cf8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8025cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025cfc:	b083      	sub	sp, #12
 8025cfe:	f9bd 8030 	ldrsh.w	r8, [sp, #48]	; 0x30
 8025d02:	f891 9001 	ldrb.w	r9, [r1, #1]
 8025d06:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8025d0a:	7888      	ldrb	r0, [r1, #2]
 8025d0c:	fb07 6c08 	mla	ip, r7, r8, r6
 8025d10:	ea4f 2909 	mov.w	r9, r9, lsl #8
 8025d14:	780c      	ldrb	r4, [r1, #0]
 8025d16:	ea49 4900 	orr.w	r9, r9, r0, lsl #16
 8025d1a:	ea49 0404 	orr.w	r4, r9, r4
 8025d1e:	2f00      	cmp	r7, #0
 8025d20:	9401      	str	r4, [sp, #4]
 8025d22:	eb02 090c 	add.w	r9, r2, ip
 8025d26:	f107 0e01 	add.w	lr, r7, #1
 8025d2a:	f9bd a034 	ldrsh.w	sl, [sp, #52]	; 0x34
 8025d2e:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8025d32:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8025d36:	db01      	blt.n	8025d3c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x44>
 8025d38:	45ba      	cmp	sl, r7
 8025d3a:	dc6e      	bgt.n	8025e1a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x122>
 8025d3c:	fa5f fb84 	uxtb.w	fp, r4
 8025d40:	af01      	add	r7, sp, #4
 8025d42:	465a      	mov	r2, fp
 8025d44:	46bc      	mov	ip, r7
 8025d46:	f1be 0f00 	cmp.w	lr, #0
 8025d4a:	db01      	blt.n	8025d50 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x58>
 8025d4c:	45f2      	cmp	sl, lr
 8025d4e:	dc49      	bgt.n	8025de4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xec>
 8025d50:	fa5f fa84 	uxtb.w	sl, r4
 8025d54:	ab01      	add	r3, sp, #4
 8025d56:	46d1      	mov	r9, sl
 8025d58:	469e      	mov	lr, r3
 8025d5a:	280f      	cmp	r0, #15
 8025d5c:	f200 8098 	bhi.w	8025e90 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x198>
 8025d60:	2d0f      	cmp	r5, #15
 8025d62:	f200 8095 	bhi.w	8025e90 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x198>
 8025d66:	b280      	uxth	r0, r0
 8025d68:	b2ad      	uxth	r5, r5
 8025d6a:	fb00 f805 	mul.w	r8, r0, r5
 8025d6e:	0104      	lsls	r4, r0, #4
 8025d70:	eba4 0608 	sub.w	r6, r4, r8
 8025d74:	b2b6      	uxth	r6, r6
 8025d76:	fb06 f002 	mul.w	r0, r6, r2
 8025d7a:	ebc8 1505 	rsb	r5, r8, r5, lsl #4
 8025d7e:	b2ad      	uxth	r5, r5
 8025d80:	f5c4 7280 	rsb	r2, r4, #256	; 0x100
 8025d84:	1b52      	subs	r2, r2, r5
 8025d86:	b292      	uxth	r2, r2
 8025d88:	fb02 000b 	mla	r0, r2, fp, r0
 8025d8c:	fb05 000a 	mla	r0, r5, sl, r0
 8025d90:	fb08 0009 	mla	r0, r8, r9, r0
 8025d94:	1200      	asrs	r0, r0, #8
 8025d96:	7008      	strb	r0, [r1, #0]
 8025d98:	f897 9001 	ldrb.w	r9, [r7, #1]
 8025d9c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8025da0:	fb06 f909 	mul.w	r9, r6, r9
 8025da4:	fb02 9904 	mla	r9, r2, r4, r9
 8025da8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8025dac:	7858      	ldrb	r0, [r3, #1]
 8025dae:	fb05 9404 	mla	r4, r5, r4, r9
 8025db2:	fb08 4000 	mla	r0, r8, r0, r4
 8025db6:	1200      	asrs	r0, r0, #8
 8025db8:	7048      	strb	r0, [r1, #1]
 8025dba:	78bc      	ldrb	r4, [r7, #2]
 8025dbc:	f89c 0002 	ldrb.w	r0, [ip, #2]
 8025dc0:	fb06 f604 	mul.w	r6, r6, r4
 8025dc4:	fb02 6600 	mla	r6, r2, r0, r6
 8025dc8:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8025dcc:	789b      	ldrb	r3, [r3, #2]
 8025dce:	fb05 6500 	mla	r5, r5, r0, r6
 8025dd2:	fb08 5803 	mla	r8, r8, r3, r5
 8025dd6:	ea4f 2828 	mov.w	r8, r8, asr #8
 8025dda:	f881 8002 	strb.w	r8, [r1, #2]
 8025dde:	b003      	add	sp, #12
 8025de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025de4:	b385      	cbz	r5, 8025e48 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x150>
 8025de6:	2e00      	cmp	r6, #0
 8025de8:	db40      	blt.n	8025e6c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x174>
 8025dea:	45b0      	cmp	r8, r6
 8025dec:	dd3e      	ble.n	8025e6c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x174>
 8025dee:	f819 e008 	ldrb.w	lr, [r9, r8]
 8025df2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8025df6:	449e      	add	lr, r3
 8025df8:	3601      	adds	r6, #1
 8025dfa:	f89e a000 	ldrb.w	sl, [lr]
 8025dfe:	d431      	bmi.n	8025e64 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x16c>
 8025e00:	45b0      	cmp	r8, r6
 8025e02:	dd2f      	ble.n	8025e64 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x16c>
 8025e04:	2800      	cmp	r0, #0
 8025e06:	d03f      	beq.n	8025e88 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x190>
 8025e08:	44c8      	add	r8, r9
 8025e0a:	f898 4001 	ldrb.w	r4, [r8, #1]
 8025e0e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025e12:	f813 9004 	ldrb.w	r9, [r3, r4]
 8025e16:	4423      	add	r3, r4
 8025e18:	e79f      	b.n	8025d5a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x62>
 8025e1a:	2e00      	cmp	r6, #0
 8025e1c:	db01      	blt.n	8025e22 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8025e1e:	45b0      	cmp	r8, r6
 8025e20:	dc1a      	bgt.n	8025e58 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>
 8025e22:	f10d 0c04 	add.w	ip, sp, #4
 8025e26:	1c72      	adds	r2, r6, #1
 8025e28:	f89c b000 	ldrb.w	fp, [ip]
 8025e2c:	d409      	bmi.n	8025e42 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x14a>
 8025e2e:	4590      	cmp	r8, r2
 8025e30:	dd07      	ble.n	8025e42 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x14a>
 8025e32:	b1f0      	cbz	r0, 8025e72 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x17a>
 8025e34:	f899 7001 	ldrb.w	r7, [r9, #1]
 8025e38:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8025e3c:	5dda      	ldrb	r2, [r3, r7]
 8025e3e:	441f      	add	r7, r3
 8025e40:	e781      	b.n	8025d46 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 8025e42:	b2e2      	uxtb	r2, r4
 8025e44:	af01      	add	r7, sp, #4
 8025e46:	e77e      	b.n	8025d46 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 8025e48:	280f      	cmp	r0, #15
 8025e4a:	fa5f fa84 	uxtb.w	sl, r4
 8025e4e:	d81f      	bhi.n	8025e90 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x198>
 8025e50:	ab01      	add	r3, sp, #4
 8025e52:	469e      	mov	lr, r3
 8025e54:	46d1      	mov	r9, sl
 8025e56:	e786      	b.n	8025d66 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x6e>
 8025e58:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8025e5c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8025e60:	449c      	add	ip, r3
 8025e62:	e7e0      	b.n	8025e26 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8025e64:	fa5f f984 	uxtb.w	r9, r4
 8025e68:	ab01      	add	r3, sp, #4
 8025e6a:	e776      	b.n	8025d5a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x62>
 8025e6c:	f10d 0e04 	add.w	lr, sp, #4
 8025e70:	e7c2      	b.n	8025df8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x100>
 8025e72:	f1be 0f00 	cmp.w	lr, #0
 8025e76:	b2e2      	uxtb	r2, r4
 8025e78:	af01      	add	r7, sp, #4
 8025e7a:	f6bf af67 	bge.w	8025d4c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x54>
 8025e7e:	463b      	mov	r3, r7
 8025e80:	46be      	mov	lr, r7
 8025e82:	4691      	mov	r9, r2
 8025e84:	4692      	mov	sl, r2
 8025e86:	e76b      	b.n	8025d60 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8025e88:	fa5f f984 	uxtb.w	r9, r4
 8025e8c:	ab01      	add	r3, sp, #4
 8025e8e:	e767      	b.n	8025d60 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8025e90:	4b03      	ldr	r3, [pc, #12]	; (8025ea0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x1a8>)
 8025e92:	4a04      	ldr	r2, [pc, #16]	; (8025ea4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x1ac>)
 8025e94:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8025e98:	4803      	ldr	r0, [pc, #12]	; (8025ea8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x1b0>)
 8025e9a:	f003 f90f 	bl	80290bc <__assert_func>
 8025e9e:	bf00      	nop
 8025ea0:	0802c360 	.word	0x0802c360
 8025ea4:	0802c9d8 	.word	0x0802c9d8
 8025ea8:	0802c4e4 	.word	0x0802c4e4

08025eac <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025eb0:	ed2d 8b0a 	vpush	{d8-d12}
 8025eb4:	eeb0 aa40 	vmov.f32	s20, s0
 8025eb8:	eef0 9a60 	vmov.f32	s19, s1
 8025ebc:	eeb0 9a41 	vmov.f32	s18, s2
 8025ec0:	eef0 8a62 	vmov.f32	s17, s5
 8025ec4:	eeb0 8a43 	vmov.f32	s16, s6
 8025ec8:	eeb0 ca44 	vmov.f32	s24, s8
 8025ecc:	eef0 ba64 	vmov.f32	s23, s9
 8025ed0:	eeb0 ba45 	vmov.f32	s22, s10
 8025ed4:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8025ed8:	b093      	sub	sp, #76	; 0x4c
 8025eda:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8025ede:	e9dd 412b 	ldrd	r4, r1, [sp, #172]	; 0xac
 8025ee2:	e9dd 9b27 	ldrd	r9, fp, [sp, #156]	; 0x9c
 8025ee6:	9011      	str	r0, [sp, #68]	; 0x44
 8025ee8:	461a      	mov	r2, r3
 8025eea:	6860      	ldr	r0, [r4, #4]
 8025eec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8025eee:	fb00 1803 	mla	r8, r0, r3, r1
 8025ef2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025ef4:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8025ef6:	6821      	ldr	r1, [r4, #0]
 8025ef8:	685b      	ldr	r3, [r3, #4]
 8025efa:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8025efe:	6800      	ldr	r0, [r0, #0]
 8025f00:	eb01 0a08 	add.w	sl, r1, r8
 8025f04:	3304      	adds	r3, #4
 8025f06:	f8dd 80a4 	ldr.w	r8, [sp, #164]	; 0xa4
 8025f0a:	9009      	str	r0, [sp, #36]	; 0x24
 8025f0c:	9307      	str	r3, [sp, #28]
 8025f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025f10:	2b00      	cmp	r3, #0
 8025f12:	dc02      	bgt.n	8025f1a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8025f14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025f16:	2b00      	cmp	r3, #0
 8025f18:	dd61      	ble.n	8025fde <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8025f1a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025f1c:	2a00      	cmp	r2, #0
 8025f1e:	e9d3 6e02 	ldrd	r6, lr, [r3, #8]
 8025f22:	b230      	sxth	r0, r6
 8025f24:	fa0f f78e 	sxth.w	r7, lr
 8025f28:	f340 81fe 	ble.w	8026328 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47c>
 8025f2c:	f8cd e018 	str.w	lr, [sp, #24]
 8025f30:	f8dd e0a8 	ldr.w	lr, [sp, #168]	; 0xa8
 8025f34:	1e45      	subs	r5, r0, #1
 8025f36:	f107 3cff 	add.w	ip, r7, #4294967295
 8025f3a:	ea5f 4329 	movs.w	r3, r9, asr #16
 8025f3e:	ea4f 412b 	mov.w	r1, fp, asr #16
 8025f42:	d405      	bmi.n	8025f50 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8025f44:	42ab      	cmp	r3, r5
 8025f46:	da03      	bge.n	8025f50 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8025f48:	2900      	cmp	r1, #0
 8025f4a:	db01      	blt.n	8025f50 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8025f4c:	4561      	cmp	r1, ip
 8025f4e:	db4b      	blt.n	8025fe8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8025f50:	1c5c      	adds	r4, r3, #1
 8025f52:	d406      	bmi.n	8025f62 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025f54:	4284      	cmp	r4, r0
 8025f56:	dc04      	bgt.n	8025f62 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025f58:	1c4c      	adds	r4, r1, #1
 8025f5a:	d402      	bmi.n	8025f62 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025f5c:	42bc      	cmp	r4, r7
 8025f5e:	f340 815e 	ble.w	802621e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8025f62:	3a01      	subs	r2, #1
 8025f64:	44c1      	add	r9, r8
 8025f66:	44f3      	add	fp, lr
 8025f68:	f10a 0a03 	add.w	sl, sl, #3
 8025f6c:	d1e5      	bne.n	8025f3a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8025f6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025f70:	2b00      	cmp	r3, #0
 8025f72:	dd34      	ble.n	8025fde <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8025f74:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8025f78:	ee79 9aab 	vadd.f32	s19, s19, s23
 8025f7c:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8025f80:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8025f84:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8025f88:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025f8c:	ee76 6a68 	vsub.f32	s13, s12, s17
 8025f90:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8025f94:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025f98:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8025f9c:	ee16 2a90 	vmov	r2, s13
 8025fa0:	3b01      	subs	r3, #1
 8025fa2:	930a      	str	r3, [sp, #40]	; 0x28
 8025fa4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025fa6:	fb92 f8f3 	sdiv	r8, r2, r3
 8025faa:	ee17 2a10 	vmov	r2, s14
 8025fae:	eeb0 7a48 	vmov.f32	s14, s16
 8025fb2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8025fb6:	ee17 ba10 	vmov	fp, s14
 8025fba:	eeb0 7a68 	vmov.f32	s14, s17
 8025fbe:	fb92 f3f3 	sdiv	r3, r2, r3
 8025fc2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8025fc6:	932a      	str	r3, [sp, #168]	; 0xa8
 8025fc8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025fca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8025fcc:	ee17 9a10 	vmov	r9, s14
 8025fd0:	eeb0 8a67 	vmov.f32	s16, s15
 8025fd4:	eef0 8a46 	vmov.f32	s17, s12
 8025fd8:	bf18      	it	ne
 8025fda:	461a      	movne	r2, r3
 8025fdc:	e797      	b.n	8025f0e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8025fde:	b013      	add	sp, #76	; 0x4c
 8025fe0:	ecbd 8b0a 	vpop	{d8-d12}
 8025fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025fe8:	f8dd e018 	ldr.w	lr, [sp, #24]
 8025fec:	1e51      	subs	r1, r2, #1
 8025fee:	fb08 9301 	mla	r3, r8, r1, r9
 8025ff2:	141b      	asrs	r3, r3, #16
 8025ff4:	9106      	str	r1, [sp, #24]
 8025ff6:	f100 80aa 	bmi.w	802614e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8025ffa:	42ab      	cmp	r3, r5
 8025ffc:	f280 80a7 	bge.w	802614e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8026000:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026002:	fb03 b301 	mla	r3, r3, r1, fp
 8026006:	141b      	asrs	r3, r3, #16
 8026008:	f100 80a1 	bmi.w	802614e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 802600c:	3f01      	subs	r7, #1
 802600e:	42bb      	cmp	r3, r7
 8026010:	f280 809d 	bge.w	802614e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8026014:	2a00      	cmp	r2, #0
 8026016:	ddaa      	ble.n	8025f6e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8026018:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802601c:	eb0a 0302 	add.w	r3, sl, r2
 8026020:	9308      	str	r3, [sp, #32]
 8026022:	f10a 0a03 	add.w	sl, sl, #3
 8026026:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
 802602a:	e062      	b.n	80260f2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 802602c:	784c      	ldrb	r4, [r1, #1]
 802602e:	180d      	adds	r5, r1, r0
 8026030:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026034:	4434      	add	r4, r6
 8026036:	2a00      	cmp	r2, #0
 8026038:	d07c      	beq.n	8026134 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 802603a:	5c08      	ldrb	r0, [r1, r0]
 802603c:	786f      	ldrb	r7, [r5, #1]
 802603e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026042:	1981      	adds	r1, r0, r6
 8026044:	4608      	mov	r0, r1
 8026046:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802604a:	9106      	str	r1, [sp, #24]
 802604c:	4437      	add	r7, r6
 802604e:	b29b      	uxth	r3, r3
 8026050:	b292      	uxth	r2, r2
 8026052:	fb03 f502 	mul.w	r5, r3, r2
 8026056:	011b      	lsls	r3, r3, #4
 8026058:	f894 e000 	ldrb.w	lr, [r4]
 802605c:	1b59      	subs	r1, r3, r5
 802605e:	b289      	uxth	r1, r1
 8026060:	fb01 fe0e 	mul.w	lr, r1, lr
 8026064:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8026068:	b292      	uxth	r2, r2
 802606a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 802606e:	f816 6008 	ldrb.w	r6, [r6, r8]
 8026072:	1a9b      	subs	r3, r3, r2
 8026074:	b29b      	uxth	r3, r3
 8026076:	fb03 e606 	mla	r6, r3, r6, lr
 802607a:	f890 e000 	ldrb.w	lr, [r0]
 802607e:	f897 8000 	ldrb.w	r8, [r7]
 8026082:	fb02 660e 	mla	r6, r2, lr, r6
 8026086:	fb05 6808 	mla	r8, r5, r8, r6
 802608a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802608e:	f80a 8c03 	strb.w	r8, [sl, #-3]
 8026092:	f894 8001 	ldrb.w	r8, [r4, #1]
 8026096:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8026098:	fb01 f608 	mul.w	r6, r1, r8
 802609c:	f89c e001 	ldrb.w	lr, [ip, #1]
 80260a0:	4481      	add	r9, r0
 80260a2:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80260a4:	fb03 680e 	mla	r8, r3, lr, r6
 80260a8:	4483      	add	fp, r0
 80260aa:	9806      	ldr	r0, [sp, #24]
 80260ac:	787e      	ldrb	r6, [r7, #1]
 80260ae:	f890 e001 	ldrb.w	lr, [r0, #1]
 80260b2:	fb02 8e0e 	mla	lr, r2, lr, r8
 80260b6:	fb05 ee06 	mla	lr, r5, r6, lr
 80260ba:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80260be:	f80a ec02 	strb.w	lr, [sl, #-2]
 80260c2:	78a4      	ldrb	r4, [r4, #2]
 80260c4:	f89c 6002 	ldrb.w	r6, [ip, #2]
 80260c8:	fb01 f104 	mul.w	r1, r1, r4
 80260cc:	fb03 1106 	mla	r1, r3, r6, r1
 80260d0:	7883      	ldrb	r3, [r0, #2]
 80260d2:	78b8      	ldrb	r0, [r7, #2]
 80260d4:	fb02 1103 	mla	r1, r2, r3, r1
 80260d8:	fb05 1500 	mla	r5, r5, r0, r1
 80260dc:	9b08      	ldr	r3, [sp, #32]
 80260de:	122d      	asrs	r5, r5, #8
 80260e0:	4553      	cmp	r3, sl
 80260e2:	f80a 5c01 	strb.w	r5, [sl, #-1]
 80260e6:	d030      	beq.n	802614a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80260e8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80260ea:	f10a 0a03 	add.w	sl, sl, #3
 80260ee:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80260f2:	ea4f 4329 	mov.w	r3, r9, asr #16
 80260f6:	ea4f 412b 	mov.w	r1, fp, asr #16
 80260fa:	fb00 3101 	mla	r1, r0, r1, r3
 80260fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026100:	9e07      	ldr	r6, [sp, #28]
 8026102:	f812 8001 	ldrb.w	r8, [r2, r1]
 8026106:	f3c9 3303 	ubfx	r3, r9, #12, #4
 802610a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802610e:	4411      	add	r1, r2
 8026110:	eb06 0c08 	add.w	ip, r6, r8
 8026114:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8026118:	2b00      	cmp	r3, #0
 802611a:	d187      	bne.n	802602c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x180>
 802611c:	b17a      	cbz	r2, 802613e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 802611e:	5c08      	ldrb	r0, [r1, r0]
 8026120:	9907      	ldr	r1, [sp, #28]
 8026122:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026126:	1841      	adds	r1, r0, r1
 8026128:	4667      	mov	r7, ip
 802612a:	9106      	str	r1, [sp, #24]
 802612c:	4664      	mov	r4, ip
 802612e:	9e07      	ldr	r6, [sp, #28]
 8026130:	4608      	mov	r0, r1
 8026132:	e78c      	b.n	802604e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8026134:	4667      	mov	r7, ip
 8026136:	f8cd c018 	str.w	ip, [sp, #24]
 802613a:	4660      	mov	r0, ip
 802613c:	e787      	b.n	802604e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802613e:	4667      	mov	r7, ip
 8026140:	f8cd c018 	str.w	ip, [sp, #24]
 8026144:	4664      	mov	r4, ip
 8026146:	4660      	mov	r0, ip
 8026148:	e781      	b.n	802604e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802614a:	469a      	mov	sl, r3
 802614c:	e70f      	b.n	8025f6e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 802614e:	2a00      	cmp	r2, #0
 8026150:	f77f af0d 	ble.w	8025f6e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8026154:	9d06      	ldr	r5, [sp, #24]
 8026156:	ea4f 4329 	mov.w	r3, r9, asr #16
 802615a:	ea4f 412b 	mov.w	r1, fp, asr #16
 802615e:	4657      	mov	r7, sl
 8026160:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8026164:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8026166:	f8dd a0a8 	ldr.w	sl, [sp, #168]	; 0xa8
 802616a:	2b00      	cmp	r3, #0
 802616c:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8026170:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8026174:	db31      	blt.n	80261da <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8026176:	f106 3cff 	add.w	ip, r6, #4294967295
 802617a:	4563      	cmp	r3, ip
 802617c:	da2d      	bge.n	80261da <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802617e:	2900      	cmp	r1, #0
 8026180:	db2b      	blt.n	80261da <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8026182:	f10e 3cff 	add.w	ip, lr, #4294967295
 8026186:	4561      	cmp	r1, ip
 8026188:	da27      	bge.n	80261da <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802618a:	fa0f fc86 	sxth.w	ip, r6
 802618e:	fb01 330c 	mla	r3, r1, ip, r3
 8026192:	9e07      	ldr	r6, [sp, #28]
 8026194:	9909      	ldr	r1, [sp, #36]	; 0x24
 8026196:	f811 e003 	ldrb.w	lr, [r1, r3]
 802619a:	440b      	add	r3, r1
 802619c:	4631      	mov	r1, r6
 802619e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80261a2:	4471      	add	r1, lr
 80261a4:	910e      	str	r1, [sp, #56]	; 0x38
 80261a6:	2800      	cmp	r0, #0
 80261a8:	d04f      	beq.n	802624a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 80261aa:	7859      	ldrb	r1, [r3, #1]
 80261ac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80261b0:	1871      	adds	r1, r6, r1
 80261b2:	9108      	str	r1, [sp, #32]
 80261b4:	2a00      	cmp	r2, #0
 80261b6:	f000 80b2 	beq.w	802631e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 80261ba:	eb03 010c 	add.w	r1, r3, ip
 80261be:	f813 600c 	ldrb.w	r6, [r3, ip]
 80261c2:	7849      	ldrb	r1, [r1, #1]
 80261c4:	9b07      	ldr	r3, [sp, #28]
 80261c6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80261ca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80261ce:	1859      	adds	r1, r3, r1
 80261d0:	18f3      	adds	r3, r6, r3
 80261d2:	910c      	str	r1, [sp, #48]	; 0x30
 80261d4:	930d      	str	r3, [sp, #52]	; 0x34
 80261d6:	9e08      	ldr	r6, [sp, #32]
 80261d8:	e03d      	b.n	8026256 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80261da:	f113 0c01 	adds.w	ip, r3, #1
 80261de:	d406      	bmi.n	80261ee <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80261e0:	45b4      	cmp	ip, r6
 80261e2:	dc04      	bgt.n	80261ee <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80261e4:	f111 0c01 	adds.w	ip, r1, #1
 80261e8:	d401      	bmi.n	80261ee <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80261ea:	45f4      	cmp	ip, lr
 80261ec:	dd1d      	ble.n	802622a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 80261ee:	2d00      	cmp	r5, #0
 80261f0:	f107 0703 	add.w	r7, r7, #3
 80261f4:	44c1      	add	r9, r8
 80261f6:	44d3      	add	fp, sl
 80261f8:	dd07      	ble.n	802620a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 80261fa:	e9d4 6e02 	ldrd	r6, lr, [r4, #8]
 80261fe:	3d01      	subs	r5, #1
 8026200:	ea4f 4329 	mov.w	r3, r9, asr #16
 8026204:	ea4f 412b 	mov.w	r1, fp, asr #16
 8026208:	e7af      	b.n	802616a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 802620a:	9b06      	ldr	r3, [sp, #24]
 802620c:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8026210:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8026214:	3301      	adds	r3, #1
 8026216:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802621a:	449a      	add	sl, r3
 802621c:	e6a7      	b.n	8025f6e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 802621e:	3a01      	subs	r2, #1
 8026220:	f8dd e018 	ldr.w	lr, [sp, #24]
 8026224:	4615      	mov	r5, r2
 8026226:	9206      	str	r2, [sp, #24]
 8026228:	e799      	b.n	802615e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 802622a:	fa0f fe8e 	sxth.w	lr, lr
 802622e:	b236      	sxth	r6, r6
 8026230:	e9cd 0204 	strd	r0, r2, [sp, #16]
 8026234:	e9cd 3102 	strd	r3, r1, [sp, #8]
 8026238:	e9cd 6e00 	strd	r6, lr, [sp]
 802623c:	9b07      	ldr	r3, [sp, #28]
 802623e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026240:	4639      	mov	r1, r7
 8026242:	9811      	ldr	r0, [sp, #68]	; 0x44
 8026244:	f7ff fd58 	bl	8025cf8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8026248:	e7d1      	b.n	80261ee <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802624a:	2a00      	cmp	r2, #0
 802624c:	d15b      	bne.n	8026306 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45a>
 802624e:	460e      	mov	r6, r1
 8026250:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
 8026254:	9108      	str	r1, [sp, #32]
 8026256:	b283      	uxth	r3, r0
 8026258:	b292      	uxth	r2, r2
 802625a:	fb03 f002 	mul.w	r0, r3, r2
 802625e:	011b      	lsls	r3, r3, #4
 8026260:	f896 c000 	ldrb.w	ip, [r6]
 8026264:	1a19      	subs	r1, r3, r0
 8026266:	b289      	uxth	r1, r1
 8026268:	fb01 fc0c 	mul.w	ip, r1, ip
 802626c:	9e07      	ldr	r6, [sp, #28]
 802626e:	ebc0 1202 	rsb	r2, r0, r2, lsl #4
 8026272:	b292      	uxth	r2, r2
 8026274:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8026278:	f816 e00e 	ldrb.w	lr, [r6, lr]
 802627c:	1a9b      	subs	r3, r3, r2
 802627e:	b29b      	uxth	r3, r3
 8026280:	fb03 cc0e 	mla	ip, r3, lr, ip
 8026284:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8026286:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 802628a:	f896 e000 	ldrb.w	lr, [r6]
 802628e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8026290:	f896 c000 	ldrb.w	ip, [r6]
 8026294:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8026296:	fb02 6e0e 	mla	lr, r2, lr, r6
 802629a:	fb00 ec0c 	mla	ip, r0, ip, lr
 802629e:	9e08      	ldr	r6, [sp, #32]
 80262a0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80262a4:	f887 c000 	strb.w	ip, [r7]
 80262a8:	f896 c001 	ldrb.w	ip, [r6, #1]
 80262ac:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80262ae:	fb01 fc0c 	mul.w	ip, r1, ip
 80262b2:	f896 e001 	ldrb.w	lr, [r6, #1]
 80262b6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80262b8:	fb03 ce0e 	mla	lr, r3, lr, ip
 80262bc:	f896 c001 	ldrb.w	ip, [r6, #1]
 80262c0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80262c2:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 80262c6:	f896 c001 	ldrb.w	ip, [r6, #1]
 80262ca:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80262cc:	fb02 ee06 	mla	lr, r2, r6, lr
 80262d0:	fb00 ec0c 	mla	ip, r0, ip, lr
 80262d4:	9e08      	ldr	r6, [sp, #32]
 80262d6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80262da:	f887 c001 	strb.w	ip, [r7, #1]
 80262de:	f896 c002 	ldrb.w	ip, [r6, #2]
 80262e2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80262e4:	fb01 f10c 	mul.w	r1, r1, ip
 80262e8:	f896 e002 	ldrb.w	lr, [r6, #2]
 80262ec:	fb03 110e 	mla	r1, r3, lr, r1
 80262f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80262f2:	789e      	ldrb	r6, [r3, #2]
 80262f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80262f6:	fb02 1206 	mla	r2, r2, r6, r1
 80262fa:	789b      	ldrb	r3, [r3, #2]
 80262fc:	fb00 2303 	mla	r3, r0, r3, r2
 8026300:	121b      	asrs	r3, r3, #8
 8026302:	70bb      	strb	r3, [r7, #2]
 8026304:	e773      	b.n	80261ee <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8026306:	4631      	mov	r1, r6
 8026308:	f813 600c 	ldrb.w	r6, [r3, ip]
 802630c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802630e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8026312:	1871      	adds	r1, r6, r1
 8026314:	930c      	str	r3, [sp, #48]	; 0x30
 8026316:	910d      	str	r1, [sp, #52]	; 0x34
 8026318:	9308      	str	r3, [sp, #32]
 802631a:	461e      	mov	r6, r3
 802631c:	e79b      	b.n	8026256 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 802631e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8026320:	e9cd 660c 	strd	r6, r6, [sp, #48]	; 0x30
 8026324:	460e      	mov	r6, r1
 8026326:	e796      	b.n	8026256 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8026328:	f43f ae21 	beq.w	8025f6e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 802632c:	1e45      	subs	r5, r0, #1
 802632e:	e65d      	b.n	8025fec <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>

08026330 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8026330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026334:	b087      	sub	sp, #28
 8026336:	f9bd c040 	ldrsh.w	ip, [sp, #64]	; 0x40
 802633a:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 802633e:	fb06 080c 	mla	r8, r6, ip, r0
 8026342:	2e00      	cmp	r6, #0
 8026344:	4696      	mov	lr, r2
 8026346:	eb02 0a08 	add.w	sl, r2, r8
 802634a:	f106 0b01 	add.w	fp, r6, #1
 802634e:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	; 0x44
 8026352:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
 8026356:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 802635a:	f89d 4058 	ldrb.w	r4, [sp, #88]	; 0x58
 802635e:	db02      	blt.n	8026366 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x36>
 8026360:	42b2      	cmp	r2, r6
 8026362:	f300 80f1 	bgt.w	8026548 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x218>
 8026366:	2600      	movs	r6, #0
 8026368:	46b1      	mov	r9, r6
 802636a:	46b0      	mov	r8, r6
 802636c:	46b6      	mov	lr, r6
 802636e:	f1bb 0f00 	cmp.w	fp, #0
 8026372:	db02      	blt.n	802637a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x4a>
 8026374:	455a      	cmp	r2, fp
 8026376:	f300 8101 	bgt.w	802657c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 802637a:	f04f 0c00 	mov.w	ip, #0
 802637e:	e9cd cc02 	strd	ip, ip, [sp, #8]
 8026382:	f8cd c004 	str.w	ip, [sp, #4]
 8026386:	2f0f      	cmp	r7, #15
 8026388:	f200 813a 	bhi.w	8026600 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2d0>
 802638c:	2d0f      	cmp	r5, #15
 802638e:	f200 8137 	bhi.w	8026600 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2d0>
 8026392:	b2a8      	uxth	r0, r5
 8026394:	b2bb      	uxth	r3, r7
 8026396:	fb00 f503 	mul.w	r5, r0, r3
 802639a:	9a01      	ldr	r2, [sp, #4]
 802639c:	ebc5 1000 	rsb	r0, r5, r0, lsl #4
 80263a0:	b280      	uxth	r0, r0
 80263a2:	fb00 fa02 	mul.w	sl, r0, r2
 80263a6:	fb05 fb0c 	mul.w	fp, r5, ip
 80263aa:	011b      	lsls	r3, r3, #4
 80263ac:	1b5f      	subs	r7, r3, r5
 80263ae:	b2bf      	uxth	r7, r7
 80263b0:	fb07 f206 	mul.w	r2, r7, r6
 80263b4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80263b8:	1a1b      	subs	r3, r3, r0
 80263ba:	b29b      	uxth	r3, r3
 80263bc:	fb03 2209 	mla	r2, r3, r9, r2
 80263c0:	4452      	add	r2, sl
 80263c2:	445a      	add	r2, fp
 80263c4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80263c8:	2a00      	cmp	r2, #0
 80263ca:	f000 80ba 	beq.w	8026542 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x212>
 80263ce:	b2a4      	uxth	r4, r4
 80263d0:	fb02 f204 	mul.w	r2, r2, r4
 80263d4:	f102 0a01 	add.w	sl, r2, #1
 80263d8:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 80263dc:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 80263e0:	9205      	str	r2, [sp, #20]
 80263e2:	f008 12ff 	and.w	r2, r8, #16711935	; 0xff00ff
 80263e6:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80263ea:	fb06 f202 	mul.w	r2, r6, r2
 80263ee:	fb06 f608 	mul.w	r6, r6, r8
 80263f2:	f00e 1bff 	and.w	fp, lr, #16711935	; 0xff00ff
 80263f6:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80263fa:	fb09 fb0b 	mul.w	fp, r9, fp
 80263fe:	fb09 fe0e 	mul.w	lr, r9, lr
 8026402:	f506 7980 	add.w	r9, r6, #256	; 0x100
 8026406:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 802640a:	0a36      	lsrs	r6, r6, #8
 802640c:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8026410:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026414:	fb07 f606 	mul.w	r6, r7, r6
 8026418:	9404      	str	r4, [sp, #16]
 802641a:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 802641e:	9c03      	ldr	r4, [sp, #12]
 8026420:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8026424:	4490      	add	r8, r2
 8026426:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802642a:	f004 12ff 	and.w	r2, r4, #16711935	; 0xff00ff
 802642e:	fb0c f202 	mul.w	r2, ip, r2
 8026432:	f404 497f 	and.w	r9, r4, #65280	; 0xff00
 8026436:	ea4f 2a1b 	mov.w	sl, fp, lsr #8
 802643a:	9c02      	ldr	r4, [sp, #8]
 802643c:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8026440:	fb0c fc09 	mul.w	ip, ip, r9
 8026444:	fb08 f807 	mul.w	r8, r8, r7
 8026448:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 802644c:	9603      	str	r6, [sp, #12]
 802644e:	f50e 7980 	add.w	r9, lr, #256	; 0x100
 8026452:	9e01      	ldr	r6, [sp, #4]
 8026454:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026458:	44d3      	add	fp, sl
 802645a:	eb09 2e1e 	add.w	lr, r9, lr, lsr #8
 802645e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026462:	f404 497f 	and.w	r9, r4, #65280	; 0xff00
 8026466:	fb06 f707 	mul.w	r7, r6, r7
 802646a:	fb06 f909 	mul.w	r9, r6, r9
 802646e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8026472:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026476:	9e03      	ldr	r6, [sp, #12]
 8026478:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 802647c:	ea4f 2a12 	mov.w	sl, r2, lsr #8
 8026480:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8026484:	fb0b 8803 	mla	r8, fp, r3, r8
 8026488:	fb03 660e 	mla	r6, r3, lr, r6
 802648c:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 8026490:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8026494:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8026498:	4492      	add	sl, r2
 802649a:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 802649e:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 80264a2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80264a6:	0a3a      	lsrs	r2, r7, #8
 80264a8:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80264ac:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80264b0:	fb0b 8b05 	mla	fp, fp, r5, r8
 80264b4:	fb05 660e 	mla	r6, r5, lr, r6
 80264b8:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 80264bc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80264c0:	f509 7580 	add.w	r5, r9, #256	; 0x100
 80264c4:	44b8      	add	r8, r7
 80264c6:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 80264ca:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80264ce:	0a2d      	lsrs	r5, r5, #8
 80264d0:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80264d4:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80264d8:	fb00 6505 	mla	r5, r0, r5, r6
 80264dc:	fb08 b800 	mla	r8, r8, r0, fp
 80264e0:	0a2d      	lsrs	r5, r5, #8
 80264e2:	ea4f 2018 	mov.w	r0, r8, lsr #8
 80264e6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80264ea:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80264ee:	4328      	orrs	r0, r5
 80264f0:	784b      	ldrb	r3, [r1, #1]
 80264f2:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80264f6:	9c04      	ldr	r4, [sp, #16]
 80264f8:	788d      	ldrb	r5, [r1, #2]
 80264fa:	fa5f fa80 	uxtb.w	sl, r0
 80264fe:	fb13 f602 	smulbb	r6, r3, r2
 8026502:	fb15 f502 	smulbb	r5, r5, r2
 8026506:	fb1a fa04 	smulbb	sl, sl, r4
 802650a:	780f      	ldrb	r7, [r1, #0]
 802650c:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8026510:	0c00      	lsrs	r0, r0, #16
 8026512:	fb0c 6304 	mla	r3, ip, r4, r6
 8026516:	fb07 a202 	mla	r2, r7, r2, sl
 802651a:	fb00 5404 	mla	r4, r0, r4, r5
 802651e:	b29b      	uxth	r3, r3
 8026520:	b292      	uxth	r2, r2
 8026522:	b2a4      	uxth	r4, r4
 8026524:	1c56      	adds	r6, r2, #1
 8026526:	1c5d      	adds	r5, r3, #1
 8026528:	1c60      	adds	r0, r4, #1
 802652a:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 802652e:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8026532:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8026536:	1212      	asrs	r2, r2, #8
 8026538:	121b      	asrs	r3, r3, #8
 802653a:	1224      	asrs	r4, r4, #8
 802653c:	700a      	strb	r2, [r1, #0]
 802653e:	704b      	strb	r3, [r1, #1]
 8026540:	708c      	strb	r4, [r1, #2]
 8026542:	b007      	add	sp, #28
 8026544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026548:	2800      	cmp	r0, #0
 802654a:	db01      	blt.n	8026550 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x220>
 802654c:	4584      	cmp	ip, r0
 802654e:	dc3d      	bgt.n	80265cc <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>
 8026550:	f04f 0900 	mov.w	r9, #0
 8026554:	46ce      	mov	lr, r9
 8026556:	1c46      	adds	r6, r0, #1
 8026558:	d42a      	bmi.n	80265b0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x280>
 802655a:	45b4      	cmp	ip, r6
 802655c:	dd28      	ble.n	80265b0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x280>
 802655e:	b137      	cbz	r7, 802656e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x23e>
 8026560:	f89a 6001 	ldrb.w	r6, [sl, #1]
 8026564:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
 8026568:	ea4f 6618 	mov.w	r6, r8, lsr #24
 802656c:	e6ff      	b.n	802636e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 802656e:	f1bb 0f00 	cmp.w	fp, #0
 8026572:	db3e      	blt.n	80265f2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2c2>
 8026574:	455a      	cmp	r2, fp
 8026576:	dd3c      	ble.n	80265f2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2c2>
 8026578:	463e      	mov	r6, r7
 802657a:	46b8      	mov	r8, r7
 802657c:	b1dd      	cbz	r5, 80265b6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x286>
 802657e:	2800      	cmp	r0, #0
 8026580:	db30      	blt.n	80265e4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2b4>
 8026582:	4584      	cmp	ip, r0
 8026584:	dd2e      	ble.n	80265e4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2b4>
 8026586:	f81a 200c 	ldrb.w	r2, [sl, ip]
 802658a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802658e:	9202      	str	r2, [sp, #8]
 8026590:	0e12      	lsrs	r2, r2, #24
 8026592:	9201      	str	r2, [sp, #4]
 8026594:	3001      	adds	r0, #1
 8026596:	d420      	bmi.n	80265da <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2aa>
 8026598:	4584      	cmp	ip, r0
 802659a:	dd1e      	ble.n	80265da <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2aa>
 802659c:	b337      	cbz	r7, 80265ec <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2bc>
 802659e:	44d4      	add	ip, sl
 80265a0:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80265a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80265a8:	9303      	str	r3, [sp, #12]
 80265aa:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80265ae:	e6ea      	b.n	8026386 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x56>
 80265b0:	2600      	movs	r6, #0
 80265b2:	46b0      	mov	r8, r6
 80265b4:	e6db      	b.n	802636e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 80265b6:	2f0f      	cmp	r7, #15
 80265b8:	d822      	bhi.n	8026600 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2d0>
 80265ba:	b2bb      	uxth	r3, r7
 80265bc:	4628      	mov	r0, r5
 80265be:	46ab      	mov	fp, r5
 80265c0:	46aa      	mov	sl, r5
 80265c2:	e9cd 5502 	strd	r5, r5, [sp, #8]
 80265c6:	46ac      	mov	ip, r5
 80265c8:	9501      	str	r5, [sp, #4]
 80265ca:	e6ee      	b.n	80263aa <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 80265cc:	f81e 6008 	ldrb.w	r6, [lr, r8]
 80265d0:	f853 e026 	ldr.w	lr, [r3, r6, lsl #2]
 80265d4:	ea4f 691e 	mov.w	r9, lr, lsr #24
 80265d8:	e7bd      	b.n	8026556 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x226>
 80265da:	f04f 0c00 	mov.w	ip, #0
 80265de:	f8cd c00c 	str.w	ip, [sp, #12]
 80265e2:	e6d0      	b.n	8026386 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x56>
 80265e4:	2200      	movs	r2, #0
 80265e6:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80265ea:	e7d3      	b.n	8026594 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 80265ec:	9703      	str	r7, [sp, #12]
 80265ee:	46bc      	mov	ip, r7
 80265f0:	e6cc      	b.n	802638c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x5c>
 80265f2:	46b8      	mov	r8, r7
 80265f4:	e9cd 7702 	strd	r7, r7, [sp, #8]
 80265f8:	46bc      	mov	ip, r7
 80265fa:	9701      	str	r7, [sp, #4]
 80265fc:	463e      	mov	r6, r7
 80265fe:	e6c5      	b.n	802638c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x5c>
 8026600:	4b03      	ldr	r3, [pc, #12]	; (8026610 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2e0>)
 8026602:	4a04      	ldr	r2, [pc, #16]	; (8026614 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2e4>)
 8026604:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8026608:	4803      	ldr	r0, [pc, #12]	; (8026618 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2e8>)
 802660a:	f002 fd57 	bl	80290bc <__assert_func>
 802660e:	bf00      	nop
 8026610:	0802c360 	.word	0x0802c360
 8026614:	0802c9d8 	.word	0x0802c9d8
 8026618:	0802c4e4 	.word	0x0802c4e4

0802661c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802661c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026620:	ed2d 8b08 	vpush	{d8-d11}
 8026624:	b0a9      	sub	sp, #164	; 0xa4
 8026626:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 8026628:	9022      	str	r0, [sp, #136]	; 0x88
 802662a:	9114      	str	r1, [sp, #80]	; 0x50
 802662c:	6860      	ldr	r0, [r4, #4]
 802662e:	9940      	ldr	r1, [sp, #256]	; 0x100
 8026630:	9217      	str	r2, [sp, #92]	; 0x5c
 8026632:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8026634:	eeb0 aa40 	vmov.f32	s20, s0
 8026638:	fb00 1b02 	mla	fp, r0, r2, r1
 802663c:	6821      	ldr	r1, [r4, #0]
 802663e:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
 8026642:	eb01 0800 	add.w	r8, r1, r0
 8026646:	e9dd ab3b 	ldrd	sl, fp, [sp, #236]	; 0xec
 802664a:	eef0 9a60 	vmov.f32	s19, s1
 802664e:	eeb0 9a41 	vmov.f32	s18, s2
 8026652:	eef0 8a62 	vmov.f32	s17, s5
 8026656:	eeb0 8a43 	vmov.f32	s16, s6
 802665a:	eef0 ba44 	vmov.f32	s23, s8
 802665e:	eeb0 ba64 	vmov.f32	s22, s9
 8026662:	eef0 aa45 	vmov.f32	s21, s10
 8026666:	46c1      	mov	r9, r8
 8026668:	465f      	mov	r7, fp
 802666a:	9a42      	ldr	r2, [sp, #264]	; 0x108
 802666c:	9d42      	ldr	r5, [sp, #264]	; 0x108
 802666e:	6852      	ldr	r2, [r2, #4]
 8026670:	f89d 410c 	ldrb.w	r4, [sp, #268]	; 0x10c
 8026674:	3204      	adds	r2, #4
 8026676:	682d      	ldr	r5, [r5, #0]
 8026678:	920a      	str	r2, [sp, #40]	; 0x28
 802667a:	b2a2      	uxth	r2, r4
 802667c:	9423      	str	r4, [sp, #140]	; 0x8c
 802667e:	9511      	str	r5, [sp, #68]	; 0x44
 8026680:	9216      	str	r2, [sp, #88]	; 0x58
 8026682:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8026684:	2a00      	cmp	r2, #0
 8026686:	dc02      	bgt.n	802668e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8026688:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 802668a:	2a00      	cmp	r2, #0
 802668c:	dd65      	ble.n	802675a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 802668e:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8026690:	2b00      	cmp	r3, #0
 8026692:	e9d2 6c02 	ldrd	r6, ip, [r2, #8]
 8026696:	b235      	sxth	r5, r6
 8026698:	fa0f f88c 	sxth.w	r8, ip
 802669c:	f340 838b 	ble.w	8026db6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x79a>
 80266a0:	1e6c      	subs	r4, r5, #1
 80266a2:	f108 3eff 	add.w	lr, r8, #4294967295
 80266a6:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 80266aa:	e9dd cb3d 	ldrd	ip, fp, [sp, #244]	; 0xf4
 80266ae:	ea5f 422a 	movs.w	r2, sl, asr #16
 80266b2:	ea4f 4127 	mov.w	r1, r7, asr #16
 80266b6:	d405      	bmi.n	80266c4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80266b8:	42a2      	cmp	r2, r4
 80266ba:	da03      	bge.n	80266c4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80266bc:	2900      	cmp	r1, #0
 80266be:	db01      	blt.n	80266c4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80266c0:	4571      	cmp	r1, lr
 80266c2:	db4f      	blt.n	8026764 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80266c4:	1c50      	adds	r0, r2, #1
 80266c6:	d406      	bmi.n	80266d6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80266c8:	42a8      	cmp	r0, r5
 80266ca:	dc04      	bgt.n	80266d6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80266cc:	1c48      	adds	r0, r1, #1
 80266ce:	d402      	bmi.n	80266d6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80266d0:	4540      	cmp	r0, r8
 80266d2:	f340 834c 	ble.w	8026d6e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x752>
 80266d6:	3b01      	subs	r3, #1
 80266d8:	44e2      	add	sl, ip
 80266da:	445f      	add	r7, fp
 80266dc:	f109 0903 	add.w	r9, r9, #3
 80266e0:	d1e5      	bne.n	80266ae <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80266e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80266e4:	2b00      	cmp	r3, #0
 80266e6:	dd38      	ble.n	802675a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80266e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80266ec:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80266f0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80266f4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80266f8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80266fc:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8026700:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026704:	ee76 6a68 	vsub.f32	s13, s12, s17
 8026708:	ee37 7ac8 	vsub.f32	s14, s15, s16
 802670c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026710:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8026714:	ee16 2a90 	vmov	r2, s13
 8026718:	3b01      	subs	r3, #1
 802671a:	9314      	str	r3, [sp, #80]	; 0x50
 802671c:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 802671e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026722:	ee17 2a10 	vmov	r2, s14
 8026726:	eeb0 7a48 	vmov.f32	s14, s16
 802672a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802672e:	ee17 7a10 	vmov	r7, s14
 8026732:	eeb0 7a68 	vmov.f32	s14, s17
 8026736:	933d      	str	r3, [sp, #244]	; 0xf4
 8026738:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 802673a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802673e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026742:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8026744:	933e      	str	r3, [sp, #248]	; 0xf8
 8026746:	ee17 aa10 	vmov	sl, s14
 802674a:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 802674c:	eeb0 8a67 	vmov.f32	s16, s15
 8026750:	eef0 8a46 	vmov.f32	s17, s12
 8026754:	bf08      	it	eq
 8026756:	4613      	moveq	r3, r2
 8026758:	e793      	b.n	8026682 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802675a:	b029      	add	sp, #164	; 0xa4
 802675c:	ecbd 8b08 	vpop	{d8-d11}
 8026760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026764:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8026768:	983d      	ldr	r0, [sp, #244]	; 0xf4
 802676a:	1e59      	subs	r1, r3, #1
 802676c:	fb00 a201 	mla	r2, r0, r1, sl
 8026770:	1412      	asrs	r2, r2, #16
 8026772:	9109      	str	r1, [sp, #36]	; 0x24
 8026774:	f100 8168 	bmi.w	8026a48 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42c>
 8026778:	42a2      	cmp	r2, r4
 802677a:	f280 8165 	bge.w	8026a48 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42c>
 802677e:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8026780:	fb02 7201 	mla	r2, r2, r1, r7
 8026784:	1412      	asrs	r2, r2, #16
 8026786:	f100 815f 	bmi.w	8026a48 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42c>
 802678a:	f108 31ff 	add.w	r1, r8, #4294967295
 802678e:	428a      	cmp	r2, r1
 8026790:	f280 815a 	bge.w	8026a48 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42c>
 8026794:	2b00      	cmp	r3, #0
 8026796:	dda4      	ble.n	80266e2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 8026798:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802679c:	444b      	add	r3, r9
 802679e:	9310      	str	r3, [sp, #64]	; 0x40
 80267a0:	f109 0303 	add.w	r3, r9, #3
 80267a4:	9309      	str	r3, [sp, #36]	; 0x24
 80267a6:	46d1      	mov	r9, sl
 80267a8:	973c      	str	r7, [sp, #240]	; 0xf0
 80267aa:	462e      	mov	r6, r5
 80267ac:	463b      	mov	r3, r7
 80267ae:	e12b      	b.n	8026a08 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 80267b0:	785f      	ldrb	r7, [r3, #1]
 80267b2:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 80267b6:	9712      	str	r7, [sp, #72]	; 0x48
 80267b8:	0e3f      	lsrs	r7, r7, #24
 80267ba:	970b      	str	r7, [sp, #44]	; 0x2c
 80267bc:	b16a      	cbz	r2, 80267da <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80267be:	199f      	adds	r7, r3, r6
 80267c0:	5d9b      	ldrb	r3, [r3, r6]
 80267c2:	4626      	mov	r6, r4
 80267c4:	787f      	ldrb	r7, [r7, #1]
 80267c6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80267ca:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
 80267ce:	9313      	str	r3, [sp, #76]	; 0x4c
 80267d0:	9415      	str	r4, [sp, #84]	; 0x54
 80267d2:	0e1b      	lsrs	r3, r3, #24
 80267d4:	0e24      	lsrs	r4, r4, #24
 80267d6:	940d      	str	r4, [sp, #52]	; 0x34
 80267d8:	930c      	str	r3, [sp, #48]	; 0x30
 80267da:	fa1f fc81 	uxth.w	ip, r1
 80267de:	b292      	uxth	r2, r2
 80267e0:	fb0c f602 	mul.w	r6, ip, r2
 80267e4:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80267e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80267ea:	ebac 0706 	sub.w	r7, ip, r6
 80267ee:	b2bf      	uxth	r7, r7
 80267f0:	fb07 f103 	mul.w	r1, r7, r3
 80267f4:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 80267f8:	b292      	uxth	r2, r2
 80267fa:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 80267fe:	1a9b      	subs	r3, r3, r2
 8026800:	b29b      	uxth	r3, r3
 8026802:	fb03 1100 	mla	r1, r3, r0, r1
 8026806:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026808:	fb02 1104 	mla	r1, r2, r4, r1
 802680c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802680e:	fb06 1104 	mla	r1, r6, r4, r1
 8026812:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026816:	2900      	cmp	r1, #0
 8026818:	f000 80e5 	beq.w	80269e6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 802681c:	f005 14ff 	and.w	r4, r5, #16711935	; 0xff00ff
 8026820:	28ff      	cmp	r0, #255	; 0xff
 8026822:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8026826:	940e      	str	r4, [sp, #56]	; 0x38
 8026828:	950f      	str	r5, [sp, #60]	; 0x3c
 802682a:	d01d      	beq.n	8026868 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24c>
 802682c:	fb04 fe00 	mul.w	lr, r4, r0
 8026830:	fb05 f800 	mul.w	r8, r5, r0
 8026834:	ea4f 251e 	mov.w	r5, lr, lsr #8
 8026838:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802683c:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8026840:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8026844:	44ae      	add	lr, r5
 8026846:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 802684a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802684e:	0a00      	lsrs	r0, r0, #8
 8026850:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026854:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026858:	ea4e 0e00 	orr.w	lr, lr, r0
 802685c:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8026860:	900e      	str	r0, [sp, #56]	; 0x38
 8026862:	f40e 407f 	and.w	r0, lr, #65280	; 0xff00
 8026866:	900f      	str	r0, [sp, #60]	; 0x3c
 8026868:	9812      	ldr	r0, [sp, #72]	; 0x48
 802686a:	f000 1eff 	and.w	lr, r0, #16711935	; 0xff00ff
 802686e:	f400 487f 	and.w	r8, r0, #65280	; 0xff00
 8026872:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8026874:	28ff      	cmp	r0, #255	; 0xff
 8026876:	d01c      	beq.n	80268b2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8026878:	fb0e fe00 	mul.w	lr, lr, r0
 802687c:	fb08 f800 	mul.w	r8, r8, r0
 8026880:	ea4f 251e 	mov.w	r5, lr, lsr #8
 8026884:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8026888:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802688c:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8026890:	44ae      	add	lr, r5
 8026892:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8026896:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802689a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802689e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80268a2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80268a6:	ea4e 0808 	orr.w	r8, lr, r8
 80268aa:	f008 1eff 	and.w	lr, r8, #16711935	; 0xff00ff
 80268ae:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80268b2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80268b4:	f000 1cff 	and.w	ip, r0, #16711935	; 0xff00ff
 80268b8:	f400 4a7f 	and.w	sl, r0, #65280	; 0xff00
 80268bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80268be:	28ff      	cmp	r0, #255	; 0xff
 80268c0:	d01c      	beq.n	80268fc <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80268c2:	fb0c fc00 	mul.w	ip, ip, r0
 80268c6:	fb0a fa00 	mul.w	sl, sl, r0
 80268ca:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80268ce:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80268d2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80268d6:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80268da:	44ac      	add	ip, r5
 80268dc:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80268e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80268e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80268e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80268ec:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80268f0:	ea4c 0a0a 	orr.w	sl, ip, sl
 80268f4:	f00a 1cff 	and.w	ip, sl, #16711935	; 0xff00ff
 80268f8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80268fc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80268fe:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8026902:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8026906:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026908:	2cff      	cmp	r4, #255	; 0xff
 802690a:	d019      	beq.n	8026940 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 802690c:	fb00 f004 	mul.w	r0, r0, r4
 8026910:	fb0b fb04 	mul.w	fp, fp, r4
 8026914:	0a05      	lsrs	r5, r0, #8
 8026916:	f005 14ff 	and.w	r4, r5, #16711935	; 0xff00ff
 802691a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802691e:	f50b 7580 	add.w	r5, fp, #256	; 0x100
 8026922:	eb05 251b 	add.w	r5, r5, fp, lsr #8
 8026926:	4420      	add	r0, r4
 8026928:	0a00      	lsrs	r0, r0, #8
 802692a:	0a2d      	lsrs	r5, r5, #8
 802692c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8026930:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 8026934:	ea40 0b0b 	orr.w	fp, r0, fp
 8026938:	f00b 10ff 	and.w	r0, fp, #16711935	; 0xff00ff
 802693c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8026940:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8026942:	fb0e fe07 	mul.w	lr, lr, r7
 8026946:	fb01 f104 	mul.w	r1, r1, r4
 802694a:	1c4d      	adds	r5, r1, #1
 802694c:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8026950:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8026954:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8026956:	fb08 f707 	mul.w	r7, r8, r7
 802695a:	fb05 ee03 	mla	lr, r5, r3, lr
 802695e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8026960:	fb0c ee02 	mla	lr, ip, r2, lr
 8026964:	fb05 7703 	mla	r7, r5, r3, r7
 8026968:	fb0a 7702 	mla	r7, sl, r2, r7
 802696c:	fb00 ee06 	mla	lr, r0, r6, lr
 8026970:	fb0b 7706 	mla	r7, fp, r6, r7
 8026974:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026976:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802697a:	0a3f      	lsrs	r7, r7, #8
 802697c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026980:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8026984:	ea4e 0307 	orr.w	r3, lr, r7
 8026988:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 802698c:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8026990:	b2c9      	uxtb	r1, r1
 8026992:	fa5f fc83 	uxtb.w	ip, r3
 8026996:	fb16 f601 	smulbb	r6, r6, r1
 802699a:	fb17 f701 	smulbb	r7, r7, r1
 802699e:	fb1c fc04 	smulbb	ip, ip, r4
 80269a2:	f810 0c03 	ldrb.w	r0, [r0, #-3]
 80269a6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80269aa:	0c1b      	lsrs	r3, r3, #16
 80269ac:	fb00 c101 	mla	r1, r0, r1, ip
 80269b0:	fb03 6304 	mla	r3, r3, r4, r6
 80269b4:	fb02 7204 	mla	r2, r2, r4, r7
 80269b8:	b289      	uxth	r1, r1
 80269ba:	b292      	uxth	r2, r2
 80269bc:	b29b      	uxth	r3, r3
 80269be:	f101 0e01 	add.w	lr, r1, #1
 80269c2:	1c56      	adds	r6, r2, #1
 80269c4:	1c5d      	adds	r5, r3, #1
 80269c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80269c8:	eb0e 2111 	add.w	r1, lr, r1, lsr #8
 80269cc:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 80269d0:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 80269d4:	1209      	asrs	r1, r1, #8
 80269d6:	1212      	asrs	r2, r2, #8
 80269d8:	121b      	asrs	r3, r3, #8
 80269da:	f800 1c03 	strb.w	r1, [r0, #-3]
 80269de:	f800 2c02 	strb.w	r2, [r0, #-2]
 80269e2:	f800 3c01 	strb.w	r3, [r0, #-1]
 80269e6:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 80269e8:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 80269ea:	4499      	add	r9, r3
 80269ec:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 80269ee:	4413      	add	r3, r2
 80269f0:	933c      	str	r3, [sp, #240]	; 0xf0
 80269f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80269f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80269f6:	4293      	cmp	r3, r2
 80269f8:	d024      	beq.n	8026a44 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 80269fa:	4613      	mov	r3, r2
 80269fc:	3303      	adds	r3, #3
 80269fe:	9309      	str	r3, [sp, #36]	; 0x24
 8026a00:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8026a02:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 8026a06:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8026a08:	ea4f 4229 	mov.w	r2, r9, asr #16
 8026a0c:	141b      	asrs	r3, r3, #16
 8026a0e:	fb06 2303 	mla	r3, r6, r3, r2
 8026a12:	9811      	ldr	r0, [sp, #68]	; 0x44
 8026a14:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026a16:	5cc2      	ldrb	r2, [r0, r3]
 8026a18:	f3c9 3103 	ubfx	r1, r9, #12, #4
 8026a1c:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
 8026a20:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8026a22:	4403      	add	r3, r0
 8026a24:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8026a28:	0e28      	lsrs	r0, r5, #24
 8026a2a:	2900      	cmp	r1, #0
 8026a2c:	f47f aec0 	bne.w	80267b0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x194>
 8026a30:	2a00      	cmp	r2, #0
 8026a32:	f43f aed2 	beq.w	80267da <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8026a36:	5d9b      	ldrb	r3, [r3, r6]
 8026a38:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8026a3c:	9313      	str	r3, [sp, #76]	; 0x4c
 8026a3e:	0e1b      	lsrs	r3, r3, #24
 8026a40:	930c      	str	r3, [sp, #48]	; 0x30
 8026a42:	e6ca      	b.n	80267da <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8026a44:	4699      	mov	r9, r3
 8026a46:	e64c      	b.n	80266e2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 8026a48:	2b00      	cmp	r3, #0
 8026a4a:	f77f ae4a 	ble.w	80266e2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 8026a4e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8026a52:	ea4f 422a 	mov.w	r2, sl, asr #16
 8026a56:	1439      	asrs	r1, r7, #16
 8026a58:	2a00      	cmp	r2, #0
 8026a5a:	46cb      	mov	fp, r9
 8026a5c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8026a60:	9c42      	ldr	r4, [sp, #264]	; 0x108
 8026a62:	e9dd 953d 	ldrd	r9, r5, [sp, #244]	; 0xf4
 8026a66:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8026a6a:	f3c7 3e03 	ubfx	lr, r7, #12, #4
 8026a6e:	f2c0 8154 	blt.w	8026d1a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 8026a72:	1e73      	subs	r3, r6, #1
 8026a74:	429a      	cmp	r2, r3
 8026a76:	f280 8150 	bge.w	8026d1a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 8026a7a:	2900      	cmp	r1, #0
 8026a7c:	f2c0 814d 	blt.w	8026d1a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 8026a80:	f10c 33ff 	add.w	r3, ip, #4294967295
 8026a84:	4299      	cmp	r1, r3
 8026a86:	f280 8148 	bge.w	8026d1a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 8026a8a:	b236      	sxth	r6, r6
 8026a8c:	fb01 2206 	mla	r2, r1, r6, r2
 8026a90:	9911      	ldr	r1, [sp, #68]	; 0x44
 8026a92:	5c8b      	ldrb	r3, [r1, r2]
 8026a94:	440a      	add	r2, r1
 8026a96:	9210      	str	r2, [sp, #64]	; 0x40
 8026a98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8026a9e:	930e      	str	r3, [sp, #56]	; 0x38
 8026aa0:	0e1b      	lsrs	r3, r3, #24
 8026aa2:	2800      	cmp	r0, #0
 8026aa4:	f000 8169 	beq.w	8026d7a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75e>
 8026aa8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8026aaa:	f891 c001 	ldrb.w	ip, [r1, #1]
 8026aae:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8026ab2:	9224      	str	r2, [sp, #144]	; 0x90
 8026ab4:	0e12      	lsrs	r2, r2, #24
 8026ab6:	9218      	str	r2, [sp, #96]	; 0x60
 8026ab8:	f1be 0f00 	cmp.w	lr, #0
 8026abc:	f040 816a 	bne.w	8026d94 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>
 8026ac0:	b280      	uxth	r0, r0
 8026ac2:	fa1f fc8e 	uxth.w	ip, lr
 8026ac6:	fb00 f20c 	mul.w	r2, r0, ip
 8026aca:	4611      	mov	r1, r2
 8026acc:	0106      	lsls	r6, r0, #4
 8026ace:	1ab0      	subs	r0, r6, r2
 8026ad0:	9210      	str	r2, [sp, #64]	; 0x40
 8026ad2:	b282      	uxth	r2, r0
 8026ad4:	9818      	ldr	r0, [sp, #96]	; 0x60
 8026ad6:	ebc1 1c0c 	rsb	ip, r1, ip, lsl #4
 8026ada:	fb02 f000 	mul.w	r0, r2, r0
 8026ade:	921b      	str	r2, [sp, #108]	; 0x6c
 8026ae0:	f5c6 7680 	rsb	r6, r6, #256	; 0x100
 8026ae4:	fa1f f28c 	uxth.w	r2, ip
 8026ae8:	1ab6      	subs	r6, r6, r2
 8026aea:	b2b6      	uxth	r6, r6
 8026aec:	fb06 0c03 	mla	ip, r6, r3, r0
 8026af0:	9819      	ldr	r0, [sp, #100]	; 0x64
 8026af2:	921c      	str	r2, [sp, #112]	; 0x70
 8026af4:	fb02 cc00 	mla	ip, r2, r0, ip
 8026af8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8026afa:	961d      	str	r6, [sp, #116]	; 0x74
 8026afc:	fb01 cc02 	mla	ip, r1, r2, ip
 8026b00:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8026b04:	f1bc 0f00 	cmp.w	ip, #0
 8026b08:	f000 80f1 	beq.w	8026cee <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 8026b0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026b0e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8026b10:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026b14:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8026b18:	2bff      	cmp	r3, #255	; 0xff
 8026b1a:	921e      	str	r2, [sp, #120]	; 0x78
 8026b1c:	910e      	str	r1, [sp, #56]	; 0x38
 8026b1e:	d01b      	beq.n	8026b58 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 8026b20:	fb01 f103 	mul.w	r1, r1, r3
 8026b24:	fb02 f203 	mul.w	r2, r2, r3
 8026b28:	460b      	mov	r3, r1
 8026b2a:	0a11      	lsrs	r1, r2, #8
 8026b2c:	f102 1601 	add.w	r6, r2, #65537	; 0x10001
 8026b30:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8026b34:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8026b38:	4431      	add	r1, r6
 8026b3a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8026b3e:	0a09      	lsrs	r1, r1, #8
 8026b40:	0a1b      	lsrs	r3, r3, #8
 8026b42:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8026b46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026b4a:	430b      	orrs	r3, r1
 8026b4c:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 8026b50:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026b54:	921e      	str	r2, [sp, #120]	; 0x78
 8026b56:	930e      	str	r3, [sp, #56]	; 0x38
 8026b58:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8026b5a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8026b5c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8026b60:	29ff      	cmp	r1, #255	; 0xff
 8026b62:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026b66:	931f      	str	r3, [sp, #124]	; 0x7c
 8026b68:	9220      	str	r2, [sp, #128]	; 0x80
 8026b6a:	d01b      	beq.n	8026ba4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8026b6c:	fb03 f301 	mul.w	r3, r3, r1
 8026b70:	fb02 f201 	mul.w	r2, r2, r1
 8026b74:	0a19      	lsrs	r1, r3, #8
 8026b76:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 8026b7a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8026b7e:	f502 7380 	add.w	r3, r2, #256	; 0x100
 8026b82:	4401      	add	r1, r0
 8026b84:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026b88:	0a09      	lsrs	r1, r1, #8
 8026b8a:	0a1b      	lsrs	r3, r3, #8
 8026b8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026b90:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8026b94:	ea41 0003 	orr.w	r0, r1, r3
 8026b98:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8026b9c:	931f      	str	r3, [sp, #124]	; 0x7c
 8026b9e:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8026ba2:	9320      	str	r3, [sp, #128]	; 0x80
 8026ba4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026ba6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8026ba8:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8026bac:	2aff      	cmp	r2, #255	; 0xff
 8026bae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026bb2:	9321      	str	r3, [sp, #132]	; 0x84
 8026bb4:	d01a      	beq.n	8026bec <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d0>
 8026bb6:	fb03 f302 	mul.w	r3, r3, r2
 8026bba:	4618      	mov	r0, r3
 8026bbc:	fb06 f602 	mul.w	r6, r6, r2
 8026bc0:	0a31      	lsrs	r1, r6, #8
 8026bc2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8026bc6:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8026bca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8026bce:	440e      	add	r6, r1
 8026bd0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026bd4:	0a36      	lsrs	r6, r6, #8
 8026bd6:	0a1b      	lsrs	r3, r3, #8
 8026bd8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026bdc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026be0:	4333      	orrs	r3, r6
 8026be2:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8026be6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026bea:	9321      	str	r3, [sp, #132]	; 0x84
 8026bec:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8026bee:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8026bf2:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8026bf6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8026bf8:	2aff      	cmp	r2, #255	; 0xff
 8026bfa:	d01a      	beq.n	8026c32 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x616>
 8026bfc:	fb03 f302 	mul.w	r3, r3, r2
 8026c00:	fb0e fe02 	mul.w	lr, lr, r2
 8026c04:	0a19      	lsrs	r1, r3, #8
 8026c06:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 8026c0a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8026c0e:	f50e 7380 	add.w	r3, lr, #256	; 0x100
 8026c12:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8026c16:	4401      	add	r1, r0
 8026c18:	0a09      	lsrs	r1, r1, #8
 8026c1a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026c1e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8026c22:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8026c26:	ea41 0e0e 	orr.w	lr, r1, lr
 8026c2a:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 8026c2e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8026c32:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8026c34:	fb0c f102 	mul.w	r1, ip, r2
 8026c38:	1c48      	adds	r0, r1, #1
 8026c3a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8026c3e:	ea6f 2211 	mvn.w	r2, r1, lsr #8
 8026c42:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8026c44:	9225      	str	r2, [sp, #148]	; 0x94
 8026c46:	4684      	mov	ip, r0
 8026c48:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8026c4a:	9820      	ldr	r0, [sp, #128]	; 0x80
 8026c4c:	fb0c fc02 	mul.w	ip, ip, r2
 8026c50:	fb00 f002 	mul.w	r0, r0, r2
 8026c54:	4601      	mov	r1, r0
 8026c56:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8026c58:	981e      	ldr	r0, [sp, #120]	; 0x78
 8026c5a:	fb00 cc02 	mla	ip, r0, r2, ip
 8026c5e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8026c60:	fb00 1102 	mla	r1, r0, r2, r1
 8026c64:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8026c66:	9821      	ldr	r0, [sp, #132]	; 0x84
 8026c68:	fb06 c602 	mla	r6, r6, r2, ip
 8026c6c:	fb00 1002 	mla	r0, r0, r2, r1
 8026c70:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026c72:	f89d 1094 	ldrb.w	r1, [sp, #148]	; 0x94
 8026c76:	fb03 6602 	mla	r6, r3, r2, r6
 8026c7a:	fb0e 0302 	mla	r3, lr, r2, r0
 8026c7e:	0a32      	lsrs	r2, r6, #8
 8026c80:	0a1b      	lsrs	r3, r3, #8
 8026c82:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8026c86:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026c8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026c8e:	4313      	orrs	r3, r2
 8026c90:	fb16 f001 	smulbb	r0, r6, r1
 8026c94:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8026c96:	fa5f fe83 	uxtb.w	lr, r3
 8026c9a:	fb1e fe02 	smulbb	lr, lr, r2
 8026c9e:	f89b c001 	ldrb.w	ip, [fp, #1]
 8026ca2:	900e      	str	r0, [sp, #56]	; 0x38
 8026ca4:	f89b 0000 	ldrb.w	r0, [fp]
 8026ca8:	fb1c fc01 	smulbb	ip, ip, r1
 8026cac:	fb00 e001 	mla	r0, r0, r1, lr
 8026cb0:	4611      	mov	r1, r2
 8026cb2:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8026cb6:	fb06 c202 	mla	r2, r6, r2, ip
 8026cba:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8026cbc:	0c1b      	lsrs	r3, r3, #16
 8026cbe:	fb03 6301 	mla	r3, r3, r1, r6
 8026cc2:	b280      	uxth	r0, r0
 8026cc4:	b296      	uxth	r6, r2
 8026cc6:	b29b      	uxth	r3, r3
 8026cc8:	1c5a      	adds	r2, r3, #1
 8026cca:	f100 0c01 	add.w	ip, r0, #1
 8026cce:	1c71      	adds	r1, r6, #1
 8026cd0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026cd4:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8026cd8:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8026cdc:	1200      	asrs	r0, r0, #8
 8026cde:	120a      	asrs	r2, r1, #8
 8026ce0:	121b      	asrs	r3, r3, #8
 8026ce2:	f88b 0000 	strb.w	r0, [fp]
 8026ce6:	f88b 2001 	strb.w	r2, [fp, #1]
 8026cea:	f88b 3002 	strb.w	r3, [fp, #2]
 8026cee:	f1b8 0f00 	cmp.w	r8, #0
 8026cf2:	f10b 0b03 	add.w	fp, fp, #3
 8026cf6:	44ca      	add	sl, r9
 8026cf8:	442f      	add	r7, r5
 8026cfa:	dd2e      	ble.n	8026d5a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73e>
 8026cfc:	e9d4 6c02 	ldrd	r6, ip, [r4, #8]
 8026d00:	ea4f 422a 	mov.w	r2, sl, asr #16
 8026d04:	2a00      	cmp	r2, #0
 8026d06:	f108 38ff 	add.w	r8, r8, #4294967295
 8026d0a:	ea4f 4127 	mov.w	r1, r7, asr #16
 8026d0e:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8026d12:	f3c7 3e03 	ubfx	lr, r7, #12, #4
 8026d16:	f6bf aeac 	bge.w	8026a72 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8026d1a:	1c53      	adds	r3, r2, #1
 8026d1c:	d4e7      	bmi.n	8026cee <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 8026d1e:	42b3      	cmp	r3, r6
 8026d20:	dce5      	bgt.n	8026cee <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 8026d22:	1c4b      	adds	r3, r1, #1
 8026d24:	d4e3      	bmi.n	8026cee <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 8026d26:	4563      	cmp	r3, ip
 8026d28:	dce1      	bgt.n	8026cee <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 8026d2a:	fa0f f38c 	sxth.w	r3, ip
 8026d2e:	b236      	sxth	r6, r6
 8026d30:	e9cd 6300 	strd	r6, r3, [sp]
 8026d34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8026d36:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8026d3a:	e9cd e305 	strd	lr, r3, [sp, #20]
 8026d3e:	9202      	str	r2, [sp, #8]
 8026d40:	4659      	mov	r1, fp
 8026d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026d44:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8026d46:	9822      	ldr	r0, [sp, #136]	; 0x88
 8026d48:	f7ff faf2 	bl	8026330 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8026d4c:	f1b8 0f00 	cmp.w	r8, #0
 8026d50:	f10b 0b03 	add.w	fp, fp, #3
 8026d54:	44ca      	add	sl, r9
 8026d56:	442f      	add	r7, r5
 8026d58:	dcd0      	bgt.n	8026cfc <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8026d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026d5c:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8026d60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8026d64:	3301      	adds	r3, #1
 8026d66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026d6a:	4499      	add	r9, r3
 8026d6c:	e4b9      	b.n	80266e2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 8026d6e:	3b01      	subs	r3, #1
 8026d70:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8026d74:	4698      	mov	r8, r3
 8026d76:	9309      	str	r3, [sp, #36]	; 0x24
 8026d78:	e66e      	b.n	8026a58 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 8026d7a:	f1be 0f00 	cmp.w	lr, #0
 8026d7e:	f43f ae9f 	beq.w	8026ac0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8026d82:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026d84:	5d92      	ldrb	r2, [r2, r6]
 8026d86:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8026d88:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8026d8c:	9226      	str	r2, [sp, #152]	; 0x98
 8026d8e:	0e12      	lsrs	r2, r2, #24
 8026d90:	9219      	str	r2, [sp, #100]	; 0x64
 8026d92:	e695      	b.n	8026ac0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8026d94:	eb01 0c06 	add.w	ip, r1, r6
 8026d98:	f89c c001 	ldrb.w	ip, [ip, #1]
 8026d9c:	5d89      	ldrb	r1, [r1, r6]
 8026d9e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8026da0:	f856 202c 	ldr.w	r2, [r6, ip, lsl #2]
 8026da4:	f856 6021 	ldr.w	r6, [r6, r1, lsl #2]
 8026da8:	9227      	str	r2, [sp, #156]	; 0x9c
 8026daa:	0e12      	lsrs	r2, r2, #24
 8026dac:	921a      	str	r2, [sp, #104]	; 0x68
 8026dae:	0e32      	lsrs	r2, r6, #24
 8026db0:	9626      	str	r6, [sp, #152]	; 0x98
 8026db2:	9219      	str	r2, [sp, #100]	; 0x64
 8026db4:	e684      	b.n	8026ac0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8026db6:	f43f ac94 	beq.w	80266e2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 8026dba:	1e6c      	subs	r4, r5, #1
 8026dbc:	e4d4      	b.n	8026768 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8026dbe:	bf00      	nop

08026dc0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8026dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026dc4:	b089      	sub	sp, #36	; 0x24
 8026dc6:	f9bd b048 	ldrsh.w	fp, [sp, #72]	; 0x48
 8026dca:	e9dd 4014 	ldrd	r4, r0, [sp, #80]	; 0x50
 8026dce:	fb00 450b 	mla	r5, r0, fp, r4
 8026dd2:	2800      	cmp	r0, #0
 8026dd4:	4694      	mov	ip, r2
 8026dd6:	f100 0601 	add.w	r6, r0, #1
 8026dda:	442a      	add	r2, r5
 8026ddc:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 8026de0:	f89d a058 	ldrb.w	sl, [sp, #88]	; 0x58
 8026de4:	f89d 705c 	ldrb.w	r7, [sp, #92]	; 0x5c
 8026de8:	db02      	blt.n	8026df0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x30>
 8026dea:	4580      	cmp	r8, r0
 8026dec:	f300 810a 	bgt.w	8027004 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x244>
 8026df0:	f04f 0c00 	mov.w	ip, #0
 8026df4:	46e6      	mov	lr, ip
 8026df6:	4665      	mov	r5, ip
 8026df8:	46e1      	mov	r9, ip
 8026dfa:	2e00      	cmp	r6, #0
 8026dfc:	db02      	blt.n	8026e04 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x44>
 8026dfe:	45b0      	cmp	r8, r6
 8026e00:	f300 811a 	bgt.w	8027038 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x278>
 8026e04:	2400      	movs	r4, #0
 8026e06:	46a0      	mov	r8, r4
 8026e08:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8026e0c:	f1ba 0f0f 	cmp.w	sl, #15
 8026e10:	f200 8158 	bhi.w	80270c4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x304>
 8026e14:	2f0f      	cmp	r7, #15
 8026e16:	f200 8155 	bhi.w	80270c4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x304>
 8026e1a:	b2ba      	uxth	r2, r7
 8026e1c:	fa1f f38a 	uxth.w	r3, sl
 8026e20:	fb02 f703 	mul.w	r7, r2, r3
 8026e24:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 8026e28:	b292      	uxth	r2, r2
 8026e2a:	fb02 fa08 	mul.w	sl, r2, r8
 8026e2e:	fb07 fb04 	mul.w	fp, r7, r4
 8026e32:	011b      	lsls	r3, r3, #4
 8026e34:	1bd8      	subs	r0, r3, r7
 8026e36:	b280      	uxth	r0, r0
 8026e38:	9001      	str	r0, [sp, #4]
 8026e3a:	fb00 f00c 	mul.w	r0, r0, ip
 8026e3e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8026e42:	1a9b      	subs	r3, r3, r2
 8026e44:	b29b      	uxth	r3, r3
 8026e46:	fb03 000e 	mla	r0, r3, lr, r0
 8026e4a:	4450      	add	r0, sl
 8026e4c:	4458      	add	r0, fp
 8026e4e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026e52:	9002      	str	r0, [sp, #8]
 8026e54:	2800      	cmp	r0, #0
 8026e56:	f000 80d2 	beq.w	8026ffe <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8026e5a:	f009 10ff 	and.w	r0, r9, #16711935	; 0xff00ff
 8026e5e:	f409 467f 	and.w	r6, r9, #65280	; 0xff00
 8026e62:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8026e66:	9005      	str	r0, [sp, #20]
 8026e68:	9606      	str	r6, [sp, #24]
 8026e6a:	d01e      	beq.n	8026eaa <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xea>
 8026e6c:	fb00 fb0e 	mul.w	fp, r0, lr
 8026e70:	fb06 fe0e 	mul.w	lr, r6, lr
 8026e74:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8026e78:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8026e7c:	f50e 7a80 	add.w	sl, lr, #256	; 0x100
 8026e80:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026e84:	4483      	add	fp, r0
 8026e86:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 8026e8a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8026e8e:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
 8026e92:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8026e96:	f40a 4e7f 	and.w	lr, sl, #65280	; 0xff00
 8026e9a:	ea4b 0e0e 	orr.w	lr, fp, lr
 8026e9e:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8026ea2:	9005      	str	r0, [sp, #20]
 8026ea4:	f40e 407f 	and.w	r0, lr, #65280	; 0xff00
 8026ea8:	9006      	str	r0, [sp, #24]
 8026eaa:	f405 407f 	and.w	r0, r5, #65280	; 0xff00
 8026eae:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8026eb2:	f005 1aff 	and.w	sl, r5, #16711935	; 0xff00ff
 8026eb6:	9007      	str	r0, [sp, #28]
 8026eb8:	d01d      	beq.n	8026ef6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x136>
 8026eba:	fb0a fa0c 	mul.w	sl, sl, ip
 8026ebe:	fb00 f50c 	mul.w	r5, r0, ip
 8026ec2:	ea4f 201a 	mov.w	r0, sl, lsr #8
 8026ec6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8026eca:	f505 7b80 	add.w	fp, r5, #256	; 0x100
 8026ece:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026ed2:	4482      	add	sl, r0
 8026ed4:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8026ed8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026edc:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8026ee0:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8026ee4:	f40b 457f 	and.w	r5, fp, #65280	; 0xff00
 8026ee8:	ea4a 0505 	orr.w	r5, sl, r5
 8026eec:	f405 407f 	and.w	r0, r5, #65280	; 0xff00
 8026ef0:	f005 1aff 	and.w	sl, r5, #16711935	; 0xff00ff
 8026ef4:	9007      	str	r0, [sp, #28]
 8026ef6:	9803      	ldr	r0, [sp, #12]
 8026ef8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026efc:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8026f00:	f400 467f 	and.w	r6, r0, #65280	; 0xff00
 8026f04:	d01b      	beq.n	8026f3e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x17e>
 8026f06:	fb09 f908 	mul.w	r9, r9, r8
 8026f0a:	fb06 f608 	mul.w	r6, r6, r8
 8026f0e:	ea4f 2c19 	mov.w	ip, r9, lsr #8
 8026f12:	f506 7080 	add.w	r0, r6, #256	; 0x100
 8026f16:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026f1a:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8026f1e:	eb00 2616 	add.w	r6, r0, r6, lsr #8
 8026f22:	44e1      	add	r9, ip
 8026f24:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026f28:	0a30      	lsrs	r0, r6, #8
 8026f2a:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 8026f2e:	f400 467f 	and.w	r6, r0, #65280	; 0xff00
 8026f32:	ea49 0606 	orr.w	r6, r9, r6
 8026f36:	f006 19ff 	and.w	r9, r6, #16711935	; 0xff00ff
 8026f3a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026f3e:	9d04      	ldr	r5, [sp, #16]
 8026f40:	2cff      	cmp	r4, #255	; 0xff
 8026f42:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 8026f46:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8026f4a:	d01a      	beq.n	8026f82 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1c2>
 8026f4c:	fb00 f004 	mul.w	r0, r0, r4
 8026f50:	fb0e f404 	mul.w	r4, lr, r4
 8026f54:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8026f58:	f504 7e80 	add.w	lr, r4, #256	; 0x100
 8026f5c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026f60:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8026f64:	eb0e 2414 	add.w	r4, lr, r4, lsr #8
 8026f68:	4460      	add	r0, ip
 8026f6a:	0a00      	lsrs	r0, r0, #8
 8026f6c:	0a24      	lsrs	r4, r4, #8
 8026f6e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8026f72:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8026f76:	ea40 0e0e 	orr.w	lr, r0, lr
 8026f7a:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8026f7e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8026f82:	9c02      	ldr	r4, [sp, #8]
 8026f84:	9d07      	ldr	r5, [sp, #28]
 8026f86:	ea6f 0c04 	mvn.w	ip, r4
 8026f8a:	9c01      	ldr	r4, [sp, #4]
 8026f8c:	fa5f fc8c 	uxtb.w	ip, ip
 8026f90:	fb0a fb04 	mul.w	fp, sl, r4
 8026f94:	fb05 f504 	mul.w	r5, r5, r4
 8026f98:	9c05      	ldr	r4, [sp, #20]
 8026f9a:	fb04 bb03 	mla	fp, r4, r3, fp
 8026f9e:	9c06      	ldr	r4, [sp, #24]
 8026fa0:	fb09 b902 	mla	r9, r9, r2, fp
 8026fa4:	fb04 5303 	mla	r3, r4, r3, r5
 8026fa8:	fb06 3602 	mla	r6, r6, r2, r3
 8026fac:	780c      	ldrb	r4, [r1, #0]
 8026fae:	fb00 9007 	mla	r0, r0, r7, r9
 8026fb2:	784a      	ldrb	r2, [r1, #1]
 8026fb4:	fb0e 6707 	mla	r7, lr, r7, r6
 8026fb8:	788b      	ldrb	r3, [r1, #2]
 8026fba:	fb02 f20c 	mul.w	r2, r2, ip
 8026fbe:	fb03 f30c 	mul.w	r3, r3, ip
 8026fc2:	fb04 fc0c 	mul.w	ip, r4, ip
 8026fc6:	0a00      	lsrs	r0, r0, #8
 8026fc8:	0a3f      	lsrs	r7, r7, #8
 8026fca:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8026fce:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8026fd2:	4338      	orrs	r0, r7
 8026fd4:	1c54      	adds	r4, r2, #1
 8026fd6:	1c5f      	adds	r7, r3, #1
 8026fd8:	f10c 0601 	add.w	r6, ip, #1
 8026fdc:	0a05      	lsrs	r5, r0, #8
 8026fde:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8026fe2:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8026fe6:	0c04      	lsrs	r4, r0, #16
 8026fe8:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8026fec:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8026ff0:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8026ff4:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 8026ff8:	704a      	strb	r2, [r1, #1]
 8026ffa:	708b      	strb	r3, [r1, #2]
 8026ffc:	7008      	strb	r0, [r1, #0]
 8026ffe:	b009      	add	sp, #36	; 0x24
 8027000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027004:	2c00      	cmp	r4, #0
 8027006:	db01      	blt.n	802700c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24c>
 8027008:	45a3      	cmp	fp, r4
 802700a:	dc41      	bgt.n	8027090 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2d0>
 802700c:	f04f 0e00 	mov.w	lr, #0
 8027010:	46f1      	mov	r9, lr
 8027012:	1c60      	adds	r0, r4, #1
 8027014:	d42b      	bmi.n	802706e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2ae>
 8027016:	4583      	cmp	fp, r0
 8027018:	dd29      	ble.n	802706e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2ae>
 802701a:	f1ba 0f00 	cmp.w	sl, #0
 802701e:	d005      	beq.n	802702c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x26c>
 8027020:	7850      	ldrb	r0, [r2, #1]
 8027022:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8027026:	ea4f 6c15 	mov.w	ip, r5, lsr #24
 802702a:	e6e6      	b.n	8026dfa <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3a>
 802702c:	2e00      	cmp	r6, #0
 802702e:	db42      	blt.n	80270b6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2f6>
 8027030:	45b0      	cmp	r8, r6
 8027032:	dd40      	ble.n	80270b6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2f6>
 8027034:	46d4      	mov	ip, sl
 8027036:	4655      	mov	r5, sl
 8027038:	b1ef      	cbz	r7, 8027076 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2b6>
 802703a:	2c00      	cmp	r4, #0
 802703c:	db32      	blt.n	80270a4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2e4>
 802703e:	45a3      	cmp	fp, r4
 8027040:	dd30      	ble.n	80270a4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2e4>
 8027042:	f812 000b 	ldrb.w	r0, [r2, fp]
 8027046:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 802704a:	9003      	str	r0, [sp, #12]
 802704c:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8027050:	3401      	adds	r4, #1
 8027052:	d424      	bmi.n	802709e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2de>
 8027054:	45a3      	cmp	fp, r4
 8027056:	dd22      	ble.n	802709e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2de>
 8027058:	f1ba 0f00 	cmp.w	sl, #0
 802705c:	d027      	beq.n	80270ae <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2ee>
 802705e:	4493      	add	fp, r2
 8027060:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8027064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8027068:	9304      	str	r3, [sp, #16]
 802706a:	0e1c      	lsrs	r4, r3, #24
 802706c:	e6ce      	b.n	8026e0c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x4c>
 802706e:	f04f 0c00 	mov.w	ip, #0
 8027072:	4665      	mov	r5, ip
 8027074:	e6c1      	b.n	8026dfa <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3a>
 8027076:	f1ba 0f0f 	cmp.w	sl, #15
 802707a:	d823      	bhi.n	80270c4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x304>
 802707c:	fa1f f38a 	uxth.w	r3, sl
 8027080:	463a      	mov	r2, r7
 8027082:	46bb      	mov	fp, r7
 8027084:	46ba      	mov	sl, r7
 8027086:	e9cd 7703 	strd	r7, r7, [sp, #12]
 802708a:	463c      	mov	r4, r7
 802708c:	46b8      	mov	r8, r7
 802708e:	e6d0      	b.n	8026e32 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x72>
 8027090:	f81c 0005 	ldrb.w	r0, [ip, r5]
 8027094:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 8027098:	ea4f 6e19 	mov.w	lr, r9, lsr #24
 802709c:	e7b9      	b.n	8027012 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 802709e:	2400      	movs	r4, #0
 80270a0:	9404      	str	r4, [sp, #16]
 80270a2:	e6b3      	b.n	8026e0c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x4c>
 80270a4:	f04f 0800 	mov.w	r8, #0
 80270a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80270ac:	e7d0      	b.n	8027050 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>
 80270ae:	f8cd a010 	str.w	sl, [sp, #16]
 80270b2:	4654      	mov	r4, sl
 80270b4:	e6ae      	b.n	8026e14 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x54>
 80270b6:	4655      	mov	r5, sl
 80270b8:	e9cd aa03 	strd	sl, sl, [sp, #12]
 80270bc:	4654      	mov	r4, sl
 80270be:	46d0      	mov	r8, sl
 80270c0:	46d4      	mov	ip, sl
 80270c2:	e6a7      	b.n	8026e14 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x54>
 80270c4:	4b03      	ldr	r3, [pc, #12]	; (80270d4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x314>)
 80270c6:	4a04      	ldr	r2, [pc, #16]	; (80270d8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x318>)
 80270c8:	f44f 710f 	mov.w	r1, #572	; 0x23c
 80270cc:	4803      	ldr	r0, [pc, #12]	; (80270dc <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x31c>)
 80270ce:	f001 fff5 	bl	80290bc <__assert_func>
 80270d2:	bf00      	nop
 80270d4:	0802c360 	.word	0x0802c360
 80270d8:	0802c9d8 	.word	0x0802c9d8
 80270dc:	0802c4e4 	.word	0x0802c4e4

080270e0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80270e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80270e4:	ed2d 8b0a 	vpush	{d8-d12}
 80270e8:	eeb0 aa40 	vmov.f32	s20, s0
 80270ec:	eef0 9a60 	vmov.f32	s19, s1
 80270f0:	eeb0 9a41 	vmov.f32	s18, s2
 80270f4:	eef0 8a62 	vmov.f32	s17, s5
 80270f8:	eeb0 8a43 	vmov.f32	s16, s6
 80270fc:	eeb0 ca44 	vmov.f32	s24, s8
 8027100:	eef0 ba64 	vmov.f32	s23, s9
 8027104:	eeb0 ba45 	vmov.f32	s22, s10
 8027108:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 802710c:	b0a3      	sub	sp, #140	; 0x8c
 802710e:	901e      	str	r0, [sp, #120]	; 0x78
 8027110:	9111      	str	r1, [sp, #68]	; 0x44
 8027112:	9213      	str	r2, [sp, #76]	; 0x4c
 8027114:	e9dd 413b 	ldrd	r4, r1, [sp, #236]	; 0xec
 8027118:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 802711a:	6860      	ldr	r0, [r4, #4]
 802711c:	fb00 1b02 	mla	fp, r0, r2, r1
 8027120:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8027122:	6821      	ldr	r1, [r4, #0]
 8027124:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8027126:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
 802712a:	6852      	ldr	r2, [r2, #4]
 802712c:	eb01 0800 	add.w	r8, r1, r0
 8027130:	6824      	ldr	r4, [r4, #0]
 8027132:	e9dd 7b37 	ldrd	r7, fp, [sp, #220]	; 0xdc
 8027136:	3204      	adds	r2, #4
 8027138:	46c3      	mov	fp, r8
 802713a:	46b8      	mov	r8, r7
 802713c:	9f38      	ldr	r7, [sp, #224]	; 0xe0
 802713e:	940e      	str	r4, [sp, #56]	; 0x38
 8027140:	920a      	str	r2, [sp, #40]	; 0x28
 8027142:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8027144:	2a00      	cmp	r2, #0
 8027146:	dc02      	bgt.n	802714e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8027148:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802714a:	2a00      	cmp	r2, #0
 802714c:	dd63      	ble.n	8027216 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 802714e:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8027150:	2b00      	cmp	r3, #0
 8027152:	e9d2 6c02 	ldrd	r6, ip, [r2, #8]
 8027156:	b234      	sxth	r4, r6
 8027158:	fa0f f98c 	sxth.w	r9, ip
 802715c:	f340 835f 	ble.w	802781e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73e>
 8027160:	1e65      	subs	r5, r4, #1
 8027162:	f109 3eff 	add.w	lr, r9, #4294967295
 8027166:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 802716a:	e9dd ca39 	ldrd	ip, sl, [sp, #228]	; 0xe4
 802716e:	ea5f 4228 	movs.w	r2, r8, asr #16
 8027172:	ea4f 4127 	mov.w	r1, r7, asr #16
 8027176:	d405      	bmi.n	8027184 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8027178:	42aa      	cmp	r2, r5
 802717a:	da03      	bge.n	8027184 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 802717c:	2900      	cmp	r1, #0
 802717e:	db01      	blt.n	8027184 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8027180:	4571      	cmp	r1, lr
 8027182:	db4d      	blt.n	8027220 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8027184:	1c50      	adds	r0, r2, #1
 8027186:	d406      	bmi.n	8027196 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8027188:	42a0      	cmp	r0, r4
 802718a:	dc04      	bgt.n	8027196 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802718c:	1c48      	adds	r0, r1, #1
 802718e:	d402      	bmi.n	8027196 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8027190:	4548      	cmp	r0, r9
 8027192:	f340 831e 	ble.w	80277d2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8027196:	3b01      	subs	r3, #1
 8027198:	44e0      	add	r8, ip
 802719a:	4457      	add	r7, sl
 802719c:	f10b 0b03 	add.w	fp, fp, #3
 80271a0:	d1e5      	bne.n	802716e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80271a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80271a4:	2b00      	cmp	r3, #0
 80271a6:	dd36      	ble.n	8027216 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80271a8:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80271ac:	ee79 9aab 	vadd.f32	s19, s19, s23
 80271b0:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80271b4:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80271b8:	ee29 6aa7 	vmul.f32	s12, s19, s15
 80271bc:	ee69 7a27 	vmul.f32	s15, s18, s15
 80271c0:	ee76 6a68 	vsub.f32	s13, s12, s17
 80271c4:	ee37 7ac8 	vsub.f32	s14, s15, s16
 80271c8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80271cc:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80271d0:	ee16 2a90 	vmov	r2, s13
 80271d4:	3b01      	subs	r3, #1
 80271d6:	9311      	str	r3, [sp, #68]	; 0x44
 80271d8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80271da:	fb92 f3f3 	sdiv	r3, r2, r3
 80271de:	ee17 2a10 	vmov	r2, s14
 80271e2:	eeb0 7a48 	vmov.f32	s14, s16
 80271e6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80271ea:	ee17 7a10 	vmov	r7, s14
 80271ee:	eeb0 7a68 	vmov.f32	s14, s17
 80271f2:	9339      	str	r3, [sp, #228]	; 0xe4
 80271f4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80271f6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80271fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80271fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8027200:	933a      	str	r3, [sp, #232]	; 0xe8
 8027202:	ee17 8a10 	vmov	r8, s14
 8027206:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8027208:	eeb0 8a67 	vmov.f32	s16, s15
 802720c:	eef0 8a46 	vmov.f32	s17, s12
 8027210:	bf08      	it	eq
 8027212:	4613      	moveq	r3, r2
 8027214:	e795      	b.n	8027142 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8027216:	b023      	add	sp, #140	; 0x8c
 8027218:	ecbd 8b0a 	vpop	{d8-d12}
 802721c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027220:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8027224:	9839      	ldr	r0, [sp, #228]	; 0xe4
 8027226:	1e59      	subs	r1, r3, #1
 8027228:	fb00 8201 	mla	r2, r0, r1, r8
 802722c:	1412      	asrs	r2, r2, #16
 802722e:	9109      	str	r1, [sp, #36]	; 0x24
 8027230:	f100 8151 	bmi.w	80274d6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8027234:	42aa      	cmp	r2, r5
 8027236:	f280 814e 	bge.w	80274d6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 802723a:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 802723c:	fb02 7201 	mla	r2, r2, r1, r7
 8027240:	1412      	asrs	r2, r2, #16
 8027242:	f100 8148 	bmi.w	80274d6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8027246:	f109 31ff 	add.w	r1, r9, #4294967295
 802724a:	428a      	cmp	r2, r1
 802724c:	f280 8143 	bge.w	80274d6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8027250:	2b00      	cmp	r3, #0
 8027252:	dda6      	ble.n	80271a2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8027254:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027258:	445b      	add	r3, fp
 802725a:	930d      	str	r3, [sp, #52]	; 0x34
 802725c:	f10b 0c03 	add.w	ip, fp, #3
 8027260:	46c1      	mov	r9, r8
 8027262:	9738      	str	r7, [sp, #224]	; 0xe0
 8027264:	4621      	mov	r1, r4
 8027266:	463b      	mov	r3, r7
 8027268:	e114      	b.n	8027494 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 802726a:	f893 e001 	ldrb.w	lr, [r3, #1]
 802726e:	f856 502e 	ldr.w	r5, [r6, lr, lsl #2]
 8027272:	950f      	str	r5, [sp, #60]	; 0x3c
 8027274:	0e2d      	lsrs	r5, r5, #24
 8027276:	9506      	str	r5, [sp, #24]
 8027278:	b162      	cbz	r2, 8027294 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 802727a:	185d      	adds	r5, r3, r1
 802727c:	786d      	ldrb	r5, [r5, #1]
 802727e:	5c5b      	ldrb	r3, [r3, r1]
 8027280:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 8027284:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8027288:	9112      	str	r1, [sp, #72]	; 0x48
 802728a:	9310      	str	r3, [sp, #64]	; 0x40
 802728c:	0e09      	lsrs	r1, r1, #24
 802728e:	0e1b      	lsrs	r3, r3, #24
 8027290:	9108      	str	r1, [sp, #32]
 8027292:	9307      	str	r3, [sp, #28]
 8027294:	b2a4      	uxth	r4, r4
 8027296:	b292      	uxth	r2, r2
 8027298:	fb04 f502 	mul.w	r5, r4, r2
 802729c:	0124      	lsls	r4, r4, #4
 802729e:	1b66      	subs	r6, r4, r5
 80272a0:	9b06      	ldr	r3, [sp, #24]
 80272a2:	b2b6      	uxth	r6, r6
 80272a4:	fb06 f103 	mul.w	r1, r6, r3
 80272a8:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 80272ac:	b292      	uxth	r2, r2
 80272ae:	f5c4 7380 	rsb	r3, r4, #256	; 0x100
 80272b2:	1a9b      	subs	r3, r3, r2
 80272b4:	b29b      	uxth	r3, r3
 80272b6:	fb03 1100 	mla	r1, r3, r0, r1
 80272ba:	9c07      	ldr	r4, [sp, #28]
 80272bc:	fb02 1104 	mla	r1, r2, r4, r1
 80272c0:	9c08      	ldr	r4, [sp, #32]
 80272c2:	fb05 1104 	mla	r1, r5, r4, r1
 80272c6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80272ca:	9109      	str	r1, [sp, #36]	; 0x24
 80272cc:	2900      	cmp	r1, #0
 80272ce:	f000 80d2 	beq.w	8027476 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 80272d2:	f007 14ff 	and.w	r4, r7, #16711935	; 0xff00ff
 80272d6:	f407 417f 	and.w	r1, r7, #65280	; 0xff00
 80272da:	28ff      	cmp	r0, #255	; 0xff
 80272dc:	940b      	str	r4, [sp, #44]	; 0x2c
 80272de:	910c      	str	r1, [sp, #48]	; 0x30
 80272e0:	d01b      	beq.n	802731a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80272e2:	fb04 f400 	mul.w	r4, r4, r0
 80272e6:	4627      	mov	r7, r4
 80272e8:	fb01 fe00 	mul.w	lr, r1, r0
 80272ec:	0a24      	lsrs	r4, r4, #8
 80272ee:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80272f2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80272f6:	f50e 7080 	add.w	r0, lr, #256	; 0x100
 80272fa:	4427      	add	r7, r4
 80272fc:	eb00 201e 	add.w	r0, r0, lr, lsr #8
 8027300:	0a3f      	lsrs	r7, r7, #8
 8027302:	0a00      	lsrs	r0, r0, #8
 8027304:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8027308:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802730c:	4307      	orrs	r7, r0
 802730e:	f007 11ff 	and.w	r1, r7, #16711935	; 0xff00ff
 8027312:	910b      	str	r1, [sp, #44]	; 0x2c
 8027314:	f407 417f 	and.w	r1, r7, #65280	; 0xff00
 8027318:	910c      	str	r1, [sp, #48]	; 0x30
 802731a:	9806      	ldr	r0, [sp, #24]
 802731c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802731e:	28ff      	cmp	r0, #255	; 0xff
 8027320:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 8027324:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8027328:	d01a      	beq.n	8027360 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 802732a:	fb07 f700 	mul.w	r7, r7, r0
 802732e:	fb0e fe00 	mul.w	lr, lr, r0
 8027332:	0a3c      	lsrs	r4, r7, #8
 8027334:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027338:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802733c:	f50e 7080 	add.w	r0, lr, #256	; 0x100
 8027340:	4427      	add	r7, r4
 8027342:	eb00 2e1e 	add.w	lr, r0, lr, lsr #8
 8027346:	0a3f      	lsrs	r7, r7, #8
 8027348:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802734c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8027350:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8027354:	ea47 0e0e 	orr.w	lr, r7, lr
 8027358:	f00e 17ff 	and.w	r7, lr, #16711935	; 0xff00ff
 802735c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8027360:	9c07      	ldr	r4, [sp, #28]
 8027362:	9910      	ldr	r1, [sp, #64]	; 0x40
 8027364:	2cff      	cmp	r4, #255	; 0xff
 8027366:	f001 10ff 	and.w	r0, r1, #16711935	; 0xff00ff
 802736a:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802736e:	d01b      	beq.n	80273a8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8027370:	fb00 f004 	mul.w	r0, r0, r4
 8027374:	fb0a fa04 	mul.w	sl, sl, r4
 8027378:	ea4f 2810 	mov.w	r8, r0, lsr #8
 802737c:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8027380:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8027384:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 8027388:	4440      	add	r0, r8
 802738a:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 802738e:	0a00      	lsrs	r0, r0, #8
 8027390:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027394:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8027398:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802739c:	ea40 0a0a 	orr.w	sl, r0, sl
 80273a0:	f00a 10ff 	and.w	r0, sl, #16711935	; 0xff00ff
 80273a4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80273a8:	9c08      	ldr	r4, [sp, #32]
 80273aa:	9912      	ldr	r1, [sp, #72]	; 0x48
 80273ac:	2cff      	cmp	r4, #255	; 0xff
 80273ae:	f001 18ff 	and.w	r8, r1, #16711935	; 0xff00ff
 80273b2:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 80273b6:	d01b      	beq.n	80273f0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 80273b8:	fb08 f804 	mul.w	r8, r8, r4
 80273bc:	fb0b fb04 	mul.w	fp, fp, r4
 80273c0:	ea4f 2418 	mov.w	r4, r8, lsr #8
 80273c4:	f004 11ff 	and.w	r1, r4, #16711935	; 0xff00ff
 80273c8:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 80273cc:	f50b 7480 	add.w	r4, fp, #256	; 0x100
 80273d0:	eb04 241b 	add.w	r4, r4, fp, lsr #8
 80273d4:	4488      	add	r8, r1
 80273d6:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80273da:	0a24      	lsrs	r4, r4, #8
 80273dc:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80273e0:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80273e4:	ea48 0b0b 	orr.w	fp, r8, fp
 80273e8:	f00b 18ff 	and.w	r8, fp, #16711935	; 0xff00ff
 80273ec:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80273f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80273f2:	fb07 f706 	mul.w	r7, r7, r6
 80273f6:	43c9      	mvns	r1, r1
 80273f8:	fb0e f606 	mul.w	r6, lr, r6
 80273fc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80273fe:	f81c ec02 	ldrb.w	lr, [ip, #-2]
 8027402:	fb04 7703 	mla	r7, r4, r3, r7
 8027406:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027408:	fb00 7702 	mla	r7, r0, r2, r7
 802740c:	fb04 6603 	mla	r6, r4, r3, r6
 8027410:	fb0a 6602 	mla	r6, sl, r2, r6
 8027414:	f81c 3c03 	ldrb.w	r3, [ip, #-3]
 8027418:	fb0b 6b05 	mla	fp, fp, r5, r6
 802741c:	fb08 7805 	mla	r8, r8, r5, r7
 8027420:	f81c 4c01 	ldrb.w	r4, [ip, #-1]
 8027424:	b2c9      	uxtb	r1, r1
 8027426:	fb0e fe01 	mul.w	lr, lr, r1
 802742a:	fb04 f401 	mul.w	r4, r4, r1
 802742e:	fb03 f101 	mul.w	r1, r3, r1
 8027432:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027436:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802743a:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 802743e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8027442:	ea48 030b 	orr.w	r3, r8, fp
 8027446:	f10e 0201 	add.w	r2, lr, #1
 802744a:	1c66      	adds	r6, r4, #1
 802744c:	1c4d      	adds	r5, r1, #1
 802744e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8027452:	0a18      	lsrs	r0, r3, #8
 8027454:	0c1a      	lsrs	r2, r3, #16
 8027456:	eb06 2414 	add.w	r4, r6, r4, lsr #8
 802745a:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 802745e:	eb00 2e1e 	add.w	lr, r0, lr, lsr #8
 8027462:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8027466:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802746a:	f80c ec02 	strb.w	lr, [ip, #-2]
 802746e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8027472:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8027476:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8027478:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 802747a:	4499      	add	r9, r3
 802747c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802747e:	4413      	add	r3, r2
 8027480:	9338      	str	r3, [sp, #224]	; 0xe0
 8027482:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027484:	4563      	cmp	r3, ip
 8027486:	d024      	beq.n	80274d2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8027488:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 802748a:	f10c 0c03 	add.w	ip, ip, #3
 802748e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027492:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8027494:	ea4f 4229 	mov.w	r2, r9, asr #16
 8027498:	141b      	asrs	r3, r3, #16
 802749a:	fb01 2303 	mla	r3, r1, r3, r2
 802749e:	980e      	ldr	r0, [sp, #56]	; 0x38
 80274a0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80274a2:	5cc2      	ldrb	r2, [r0, r3]
 80274a4:	f3c9 3403 	ubfx	r4, r9, #12, #4
 80274a8:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 80274ac:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 80274ae:	4403      	add	r3, r0
 80274b0:	f3c2 3203 	ubfx	r2, r2, #12, #4
 80274b4:	0e38      	lsrs	r0, r7, #24
 80274b6:	2c00      	cmp	r4, #0
 80274b8:	f47f aed7 	bne.w	802726a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80274bc:	2a00      	cmp	r2, #0
 80274be:	f43f aee9 	beq.w	8027294 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80274c2:	5c5b      	ldrb	r3, [r3, r1]
 80274c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80274c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80274ca:	9310      	str	r3, [sp, #64]	; 0x40
 80274cc:	0e1b      	lsrs	r3, r3, #24
 80274ce:	9307      	str	r3, [sp, #28]
 80274d0:	e6e0      	b.n	8027294 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80274d2:	469b      	mov	fp, r3
 80274d4:	e665      	b.n	80271a2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 80274d6:	2b00      	cmp	r3, #0
 80274d8:	f77f ae63 	ble.w	80271a2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 80274dc:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80274e0:	ea4f 4228 	mov.w	r2, r8, asr #16
 80274e4:	1439      	asrs	r1, r7, #16
 80274e6:	2a00      	cmp	r2, #0
 80274e8:	46d9      	mov	r9, fp
 80274ea:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80274ee:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 80274f0:	e9dd b539 	ldrd	fp, r5, [sp, #228]	; 0xe4
 80274f4:	f3c8 3003 	ubfx	r0, r8, #12, #4
 80274f8:	f3c7 3e03 	ubfx	lr, r7, #12, #4
 80274fc:	f2c0 8141 	blt.w	8027782 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a2>
 8027500:	1e73      	subs	r3, r6, #1
 8027502:	429a      	cmp	r2, r3
 8027504:	f280 813d 	bge.w	8027782 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a2>
 8027508:	2900      	cmp	r1, #0
 802750a:	f2c0 813a 	blt.w	8027782 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a2>
 802750e:	f10c 33ff 	add.w	r3, ip, #4294967295
 8027512:	4299      	cmp	r1, r3
 8027514:	f280 8135 	bge.w	8027782 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a2>
 8027518:	b233      	sxth	r3, r6
 802751a:	fb01 2203 	mla	r2, r1, r3, r2
 802751e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8027520:	930c      	str	r3, [sp, #48]	; 0x30
 8027522:	5c8b      	ldrb	r3, [r1, r2]
 8027524:	440a      	add	r2, r1
 8027526:	990a      	ldr	r1, [sp, #40]	; 0x28
 8027528:	4616      	mov	r6, r2
 802752a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802752e:	930d      	str	r3, [sp, #52]	; 0x34
 8027530:	0e1b      	lsrs	r3, r3, #24
 8027532:	2800      	cmp	r0, #0
 8027534:	f000 8153 	beq.w	80277de <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 8027538:	f896 c001 	ldrb.w	ip, [r6, #1]
 802753c:	f851 202c 	ldr.w	r2, [r1, ip, lsl #2]
 8027540:	921f      	str	r2, [sp, #124]	; 0x7c
 8027542:	0e12      	lsrs	r2, r2, #24
 8027544:	9214      	str	r2, [sp, #80]	; 0x50
 8027546:	f1be 0f00 	cmp.w	lr, #0
 802754a:	f040 8155 	bne.w	80277f8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 802754e:	b280      	uxth	r0, r0
 8027550:	fa1f fc8e 	uxth.w	ip, lr
 8027554:	fb00 f20c 	mul.w	r2, r0, ip
 8027558:	0106      	lsls	r6, r0, #4
 802755a:	1ab0      	subs	r0, r6, r2
 802755c:	b281      	uxth	r1, r0
 802755e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8027560:	ebc2 1c0c 	rsb	ip, r2, ip, lsl #4
 8027564:	fb01 f000 	mul.w	r0, r1, r0
 8027568:	9117      	str	r1, [sp, #92]	; 0x5c
 802756a:	f5c6 7680 	rsb	r6, r6, #256	; 0x100
 802756e:	fa1f f18c 	uxth.w	r1, ip
 8027572:	1a76      	subs	r6, r6, r1
 8027574:	b2b6      	uxth	r6, r6
 8027576:	9619      	str	r6, [sp, #100]	; 0x64
 8027578:	fb06 0603 	mla	r6, r6, r3, r0
 802757c:	9815      	ldr	r0, [sp, #84]	; 0x54
 802757e:	9118      	str	r1, [sp, #96]	; 0x60
 8027580:	fb01 6600 	mla	r6, r1, r0, r6
 8027584:	9916      	ldr	r1, [sp, #88]	; 0x58
 8027586:	fb02 6601 	mla	r6, r2, r1, r6
 802758a:	f3c6 2107 	ubfx	r1, r6, #8, #8
 802758e:	911a      	str	r1, [sp, #104]	; 0x68
 8027590:	2900      	cmp	r1, #0
 8027592:	f000 80e0 	beq.w	8027756 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 8027596:	980d      	ldr	r0, [sp, #52]	; 0x34
 8027598:	2bff      	cmp	r3, #255	; 0xff
 802759a:	f000 11ff 	and.w	r1, r0, #16711935	; 0xff00ff
 802759e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80275a2:	910d      	str	r1, [sp, #52]	; 0x34
 80275a4:	901b      	str	r0, [sp, #108]	; 0x6c
 80275a6:	d01c      	beq.n	80275e2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x502>
 80275a8:	fb01 f103 	mul.w	r1, r1, r3
 80275ac:	fb00 f003 	mul.w	r0, r0, r3
 80275b0:	460e      	mov	r6, r1
 80275b2:	4603      	mov	r3, r0
 80275b4:	0a09      	lsrs	r1, r1, #8
 80275b6:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80275ba:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80275be:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80275c2:	4431      	add	r1, r6
 80275c4:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80275c8:	0a09      	lsrs	r1, r1, #8
 80275ca:	0a1b      	lsrs	r3, r3, #8
 80275cc:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80275d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80275d4:	430b      	orrs	r3, r1
 80275d6:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 80275da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80275de:	910d      	str	r1, [sp, #52]	; 0x34
 80275e0:	931b      	str	r3, [sp, #108]	; 0x6c
 80275e2:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80275e4:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 80275e8:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
 80275ec:	9914      	ldr	r1, [sp, #80]	; 0x50
 80275ee:	931c      	str	r3, [sp, #112]	; 0x70
 80275f0:	29ff      	cmp	r1, #255	; 0xff
 80275f2:	d019      	beq.n	8027628 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 80275f4:	fb03 f301 	mul.w	r3, r3, r1
 80275f8:	fb06 f601 	mul.w	r6, r6, r1
 80275fc:	0a19      	lsrs	r1, r3, #8
 80275fe:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 8027602:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027606:	f506 7380 	add.w	r3, r6, #256	; 0x100
 802760a:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 802760e:	4401      	add	r1, r0
 8027610:	0a09      	lsrs	r1, r1, #8
 8027612:	0a1b      	lsrs	r3, r3, #8
 8027614:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027618:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802761c:	4319      	orrs	r1, r3
 802761e:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8027622:	931c      	str	r3, [sp, #112]	; 0x70
 8027624:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
 8027628:	9920      	ldr	r1, [sp, #128]	; 0x80
 802762a:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 802762e:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8027632:	9915      	ldr	r1, [sp, #84]	; 0x54
 8027634:	930c      	str	r3, [sp, #48]	; 0x30
 8027636:	29ff      	cmp	r1, #255	; 0xff
 8027638:	901d      	str	r0, [sp, #116]	; 0x74
 802763a:	d01a      	beq.n	8027672 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x592>
 802763c:	fb03 f301 	mul.w	r3, r3, r1
 8027640:	fb00 fc01 	mul.w	ip, r0, r1
 8027644:	0a19      	lsrs	r1, r3, #8
 8027646:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 802764a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802764e:	f50c 7380 	add.w	r3, ip, #256	; 0x100
 8027652:	4401      	add	r1, r0
 8027654:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8027658:	0a09      	lsrs	r1, r1, #8
 802765a:	0a1b      	lsrs	r3, r3, #8
 802765c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027660:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027664:	4319      	orrs	r1, r3
 8027666:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 802766a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802766e:	930c      	str	r3, [sp, #48]	; 0x30
 8027670:	911d      	str	r1, [sp, #116]	; 0x74
 8027672:	9921      	ldr	r1, [sp, #132]	; 0x84
 8027674:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8027678:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 802767c:	9916      	ldr	r1, [sp, #88]	; 0x58
 802767e:	29ff      	cmp	r1, #255	; 0xff
 8027680:	d01c      	beq.n	80276bc <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 8027682:	fb0c fc01 	mul.w	ip, ip, r1
 8027686:	fb0e fe01 	mul.w	lr, lr, r1
 802768a:	ea4f 201c 	mov.w	r0, ip, lsr #8
 802768e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8027692:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027696:	f50e 7180 	add.w	r1, lr, #256	; 0x100
 802769a:	4484      	add	ip, r0
 802769c:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 80276a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80276a4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80276a8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80276ac:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80276b0:	ea4c 0e0e 	orr.w	lr, ip, lr
 80276b4:	f00e 1cff 	and.w	ip, lr, #16711935	; 0xff00ff
 80276b8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80276bc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80276be:	981c      	ldr	r0, [sp, #112]	; 0x70
 80276c0:	43c9      	mvns	r1, r1
 80276c2:	911a      	str	r1, [sp, #104]	; 0x68
 80276c4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80276c6:	fb00 f001 	mul.w	r0, r0, r1
 80276ca:	fb06 f301 	mul.w	r3, r6, r1
 80276ce:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80276d0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80276d2:	fb01 0006 	mla	r0, r1, r6, r0
 80276d6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80276d8:	fb01 3106 	mla	r1, r1, r6, r3
 80276dc:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80276de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80276e0:	910d      	str	r1, [sp, #52]	; 0x34
 80276e2:	fb03 0306 	mla	r3, r3, r6, r0
 80276e6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80276e8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80276ea:	fb0c 3302 	mla	r3, ip, r2, r3
 80276ee:	fb00 1106 	mla	r1, r0, r6, r1
 80276f2:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
 80276f6:	f899 0002 	ldrb.w	r0, [r9, #2]
 80276fa:	fb0e 1e02 	mla	lr, lr, r2, r1
 80276fe:	f899 2001 	ldrb.w	r2, [r9, #1]
 8027702:	f899 1000 	ldrb.w	r1, [r9]
 8027706:	fb00 f006 	mul.w	r0, r0, r6
 802770a:	fb02 fc06 	mul.w	ip, r2, r6
 802770e:	fb01 f106 	mul.w	r1, r1, r6
 8027712:	0a1b      	lsrs	r3, r3, #8
 8027714:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027718:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 802771c:	1c46      	adds	r6, r0, #1
 802771e:	f40e 437f 	and.w	r3, lr, #65280	; 0xff00
 8027722:	4313      	orrs	r3, r2
 8027724:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8027728:	f10c 0201 	add.w	r2, ip, #1
 802772c:	1c4e      	adds	r6, r1, #1
 802772e:	ea4f 2e13 	mov.w	lr, r3, lsr #8
 8027732:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 8027736:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 802773a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 802773e:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8027742:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8027746:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802774a:	f889 2001 	strb.w	r2, [r9, #1]
 802774e:	f889 0002 	strb.w	r0, [r9, #2]
 8027752:	f889 3000 	strb.w	r3, [r9]
 8027756:	f1ba 0f00 	cmp.w	sl, #0
 802775a:	f109 0903 	add.w	r9, r9, #3
 802775e:	44d8      	add	r8, fp
 8027760:	442f      	add	r7, r5
 8027762:	dd2c      	ble.n	80277be <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6de>
 8027764:	e9d4 6c02 	ldrd	r6, ip, [r4, #8]
 8027768:	ea4f 4228 	mov.w	r2, r8, asr #16
 802776c:	2a00      	cmp	r2, #0
 802776e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8027772:	ea4f 4127 	mov.w	r1, r7, asr #16
 8027776:	f3c8 3003 	ubfx	r0, r8, #12, #4
 802777a:	f3c7 3e03 	ubfx	lr, r7, #12, #4
 802777e:	f6bf aebf 	bge.w	8027500 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8027782:	1c53      	adds	r3, r2, #1
 8027784:	d4e7      	bmi.n	8027756 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 8027786:	42b3      	cmp	r3, r6
 8027788:	dce5      	bgt.n	8027756 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 802778a:	1c4b      	adds	r3, r1, #1
 802778c:	d4e3      	bmi.n	8027756 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 802778e:	4563      	cmp	r3, ip
 8027790:	dce1      	bgt.n	8027756 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 8027792:	fa0f f38c 	sxth.w	r3, ip
 8027796:	b236      	sxth	r6, r6
 8027798:	e9cd 2102 	strd	r2, r1, [sp, #8]
 802779c:	e9cd 6300 	strd	r6, r3, [sp]
 80277a0:	e9cd 0e04 	strd	r0, lr, [sp, #16]
 80277a4:	4649      	mov	r1, r9
 80277a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80277a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80277aa:	981e      	ldr	r0, [sp, #120]	; 0x78
 80277ac:	f7ff fb08 	bl	8026dc0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 80277b0:	f1ba 0f00 	cmp.w	sl, #0
 80277b4:	f109 0903 	add.w	r9, r9, #3
 80277b8:	44d8      	add	r8, fp
 80277ba:	442f      	add	r7, r5
 80277bc:	dcd2      	bgt.n	8027764 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x684>
 80277be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80277c0:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 80277c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80277c8:	3301      	adds	r3, #1
 80277ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80277ce:	449b      	add	fp, r3
 80277d0:	e4e7      	b.n	80271a2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 80277d2:	3b01      	subs	r3, #1
 80277d4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80277d8:	469a      	mov	sl, r3
 80277da:	9309      	str	r3, [sp, #36]	; 0x24
 80277dc:	e683      	b.n	80274e6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x406>
 80277de:	f1be 0f00 	cmp.w	lr, #0
 80277e2:	f43f aeb4 	beq.w	802754e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46e>
 80277e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80277e8:	5c72      	ldrb	r2, [r6, r1]
 80277ea:	990a      	ldr	r1, [sp, #40]	; 0x28
 80277ec:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80277f0:	9220      	str	r2, [sp, #128]	; 0x80
 80277f2:	0e12      	lsrs	r2, r2, #24
 80277f4:	9215      	str	r2, [sp, #84]	; 0x54
 80277f6:	e6aa      	b.n	802754e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46e>
 80277f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80277fa:	eb06 0c02 	add.w	ip, r6, r2
 80277fe:	4632      	mov	r2, r6
 8027800:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8027802:	f89c c001 	ldrb.w	ip, [ip, #1]
 8027806:	5d92      	ldrb	r2, [r2, r6]
 8027808:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 802780c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8027810:	0e31      	lsrs	r1, r6, #24
 8027812:	9220      	str	r2, [sp, #128]	; 0x80
 8027814:	0e12      	lsrs	r2, r2, #24
 8027816:	9621      	str	r6, [sp, #132]	; 0x84
 8027818:	9116      	str	r1, [sp, #88]	; 0x58
 802781a:	9215      	str	r2, [sp, #84]	; 0x54
 802781c:	e697      	b.n	802754e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46e>
 802781e:	f43f acc0 	beq.w	80271a2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8027822:	1e65      	subs	r5, r4, #1
 8027824:	e4fe      	b.n	8027224 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8027826:	bf00      	nop

08027828 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh>:
 8027828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802782c:	b087      	sub	sp, #28
 802782e:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
 8027832:	f9bd 6040 	ldrsh.w	r6, [sp, #64]	; 0x40
 8027836:	ea6f 000b 	mvn.w	r0, fp
 802783a:	e9dd 4712 	ldrd	r4, r7, [sp, #72]	; 0x48
 802783e:	fb07 4c06 	mla	ip, r7, r6, r4
 8027842:	b2c0      	uxtb	r0, r0
 8027844:	2f00      	cmp	r7, #0
 8027846:	9002      	str	r0, [sp, #8]
 8027848:	eb02 0e0c 	add.w	lr, r2, ip
 802784c:	f107 0801 	add.w	r8, r7, #1
 8027850:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8027854:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8027858:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 802785c:	db02      	blt.n	8027864 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x3c>
 802785e:	45b9      	cmp	r9, r7
 8027860:	f300 80a0 	bgt.w	80279a4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x17c>
 8027864:	468c      	mov	ip, r1
 8027866:	460f      	mov	r7, r1
 8027868:	780a      	ldrb	r2, [r1, #0]
 802786a:	9203      	str	r2, [sp, #12]
 802786c:	9201      	str	r2, [sp, #4]
 802786e:	f1b8 0f00 	cmp.w	r8, #0
 8027872:	db01      	blt.n	8027878 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x50>
 8027874:	45c1      	cmp	r9, r8
 8027876:	dc7b      	bgt.n	8027970 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x148>
 8027878:	460b      	mov	r3, r1
 802787a:	4689      	mov	r9, r1
 802787c:	f891 a000 	ldrb.w	sl, [r1]
 8027880:	f8cd a014 	str.w	sl, [sp, #20]
 8027884:	2d0f      	cmp	r5, #15
 8027886:	f200 80cd 	bhi.w	8027a24 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1fc>
 802788a:	280f      	cmp	r0, #15
 802788c:	f200 80ca 	bhi.w	8027a24 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1fc>
 8027890:	780a      	ldrb	r2, [r1, #0]
 8027892:	9204      	str	r2, [sp, #16]
 8027894:	b2aa      	uxth	r2, r5
 8027896:	b280      	uxth	r0, r0
 8027898:	fb02 f500 	mul.w	r5, r2, r0
 802789c:	0112      	lsls	r2, r2, #4
 802789e:	f89c 8001 	ldrb.w	r8, [ip, #1]
 80278a2:	f89c e002 	ldrb.w	lr, [ip, #2]
 80278a6:	1b54      	subs	r4, r2, r5
 80278a8:	b2a4      	uxth	r4, r4
 80278aa:	fb04 f808 	mul.w	r8, r4, r8
 80278ae:	fb04 fe0e 	mul.w	lr, r4, lr
 80278b2:	ebc5 1000 	rsb	r0, r5, r0, lsl #4
 80278b6:	b280      	uxth	r0, r0
 80278b8:	9e01      	ldr	r6, [sp, #4]
 80278ba:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80278be:	f897 c001 	ldrb.w	ip, [r7, #1]
 80278c2:	1a12      	subs	r2, r2, r0
 80278c4:	78bf      	ldrb	r7, [r7, #2]
 80278c6:	b292      	uxth	r2, r2
 80278c8:	fb04 f406 	mul.w	r4, r4, r6
 80278cc:	fb02 8c0c 	mla	ip, r2, ip, r8
 80278d0:	fb02 e707 	mla	r7, r2, r7, lr
 80278d4:	9e03      	ldr	r6, [sp, #12]
 80278d6:	f899 8001 	ldrb.w	r8, [r9, #1]
 80278da:	f899 e002 	ldrb.w	lr, [r9, #2]
 80278de:	fb02 4206 	mla	r2, r2, r6, r4
 80278e2:	fb00 cc08 	mla	ip, r0, r8, ip
 80278e6:	fb00 770e 	mla	r7, r0, lr, r7
 80278ea:	f893 8001 	ldrb.w	r8, [r3, #1]
 80278ee:	f893 e002 	ldrb.w	lr, [r3, #2]
 80278f2:	fb00 220a 	mla	r2, r0, sl, r2
 80278f6:	fb05 c808 	mla	r8, r5, r8, ip
 80278fa:	fb05 7e0e 	mla	lr, r5, lr, r7
 80278fe:	9805      	ldr	r0, [sp, #20]
 8027900:	f8bd 9008 	ldrh.w	r9, [sp, #8]
 8027904:	fb05 2500 	mla	r5, r5, r0, r2
 8027908:	9a04      	ldr	r2, [sp, #16]
 802790a:	fa1f f38b 	uxth.w	r3, fp
 802790e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8027912:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8027916:	fb12 f609 	smulbb	r6, r2, r9
 802791a:	fb1e fe03 	smulbb	lr, lr, r3
 802791e:	fb18 f803 	smulbb	r8, r8, r3
 8027922:	784a      	ldrb	r2, [r1, #1]
 8027924:	7888      	ldrb	r0, [r1, #2]
 8027926:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802792a:	fb05 6503 	mla	r5, r5, r3, r6
 802792e:	fb02 8809 	mla	r8, r2, r9, r8
 8027932:	fb00 e909 	mla	r9, r0, r9, lr
 8027936:	b2ad      	uxth	r5, r5
 8027938:	fa1f f888 	uxth.w	r8, r8
 802793c:	fa1f f989 	uxth.w	r9, r9
 8027940:	f108 0001 	add.w	r0, r8, #1
 8027944:	f109 0201 	add.w	r2, r9, #1
 8027948:	1c6b      	adds	r3, r5, #1
 802794a:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 802794e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8027952:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027956:	ea4f 2828 	mov.w	r8, r8, asr #8
 802795a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802795e:	122d      	asrs	r5, r5, #8
 8027960:	f881 8001 	strb.w	r8, [r1, #1]
 8027964:	f881 9002 	strb.w	r9, [r1, #2]
 8027968:	700d      	strb	r5, [r1, #0]
 802796a:	b007      	add	sp, #28
 802796c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027970:	b388      	cbz	r0, 80279d6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1ae>
 8027972:	2c00      	cmp	r4, #0
 8027974:	db44      	blt.n	8027a00 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1d8>
 8027976:	42a6      	cmp	r6, r4
 8027978:	dd42      	ble.n	8027a00 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1d8>
 802797a:	f81e 9006 	ldrb.w	r9, [lr, r6]
 802797e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8027982:	4499      	add	r9, r3
 8027984:	3401      	adds	r4, #1
 8027986:	f899 a000 	ldrb.w	sl, [r9]
 802798a:	d435      	bmi.n	80279f8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1d0>
 802798c:	42a6      	cmp	r6, r4
 802798e:	dd33      	ble.n	80279f8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1d0>
 8027990:	2d00      	cmp	r5, #0
 8027992:	d043      	beq.n	8027a1c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1f4>
 8027994:	4476      	add	r6, lr
 8027996:	7872      	ldrb	r2, [r6, #1]
 8027998:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802799c:	5c9c      	ldrb	r4, [r3, r2]
 802799e:	4413      	add	r3, r2
 80279a0:	9405      	str	r4, [sp, #20]
 80279a2:	e76f      	b.n	8027884 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x5c>
 80279a4:	2c00      	cmp	r4, #0
 80279a6:	db01      	blt.n	80279ac <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x184>
 80279a8:	42a6      	cmp	r6, r4
 80279aa:	dc1f      	bgt.n	80279ec <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1c4>
 80279ac:	460f      	mov	r7, r1
 80279ae:	783a      	ldrb	r2, [r7, #0]
 80279b0:	9203      	str	r2, [sp, #12]
 80279b2:	1c62      	adds	r2, r4, #1
 80279b4:	d40b      	bmi.n	80279ce <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1a6>
 80279b6:	4296      	cmp	r6, r2
 80279b8:	dd09      	ble.n	80279ce <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1a6>
 80279ba:	b31d      	cbz	r5, 8027a04 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1dc>
 80279bc:	f89e c001 	ldrb.w	ip, [lr, #1]
 80279c0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80279c4:	f813 200c 	ldrb.w	r2, [r3, ip]
 80279c8:	449c      	add	ip, r3
 80279ca:	9201      	str	r2, [sp, #4]
 80279cc:	e74f      	b.n	802786e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x46>
 80279ce:	780a      	ldrb	r2, [r1, #0]
 80279d0:	468c      	mov	ip, r1
 80279d2:	9201      	str	r2, [sp, #4]
 80279d4:	e74b      	b.n	802786e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x46>
 80279d6:	2d0f      	cmp	r5, #15
 80279d8:	f891 a000 	ldrb.w	sl, [r1]
 80279dc:	d822      	bhi.n	8027a24 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1fc>
 80279de:	f8cd a010 	str.w	sl, [sp, #16]
 80279e2:	460b      	mov	r3, r1
 80279e4:	4689      	mov	r9, r1
 80279e6:	f8cd a014 	str.w	sl, [sp, #20]
 80279ea:	e753      	b.n	8027894 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x6c>
 80279ec:	f812 700c 	ldrb.w	r7, [r2, ip]
 80279f0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80279f4:	441f      	add	r7, r3
 80279f6:	e7da      	b.n	80279ae <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x186>
 80279f8:	780b      	ldrb	r3, [r1, #0]
 80279fa:	9305      	str	r3, [sp, #20]
 80279fc:	460b      	mov	r3, r1
 80279fe:	e741      	b.n	8027884 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x5c>
 8027a00:	4689      	mov	r9, r1
 8027a02:	e7bf      	b.n	8027984 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x15c>
 8027a04:	780a      	ldrb	r2, [r1, #0]
 8027a06:	f1b8 0f00 	cmp.w	r8, #0
 8027a0a:	9201      	str	r2, [sp, #4]
 8027a0c:	468c      	mov	ip, r1
 8027a0e:	f6bf af31 	bge.w	8027874 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x4c>
 8027a12:	460b      	mov	r3, r1
 8027a14:	4689      	mov	r9, r1
 8027a16:	9205      	str	r2, [sp, #20]
 8027a18:	4692      	mov	sl, r2
 8027a1a:	e736      	b.n	802788a <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x62>
 8027a1c:	780b      	ldrb	r3, [r1, #0]
 8027a1e:	9305      	str	r3, [sp, #20]
 8027a20:	460b      	mov	r3, r1
 8027a22:	e732      	b.n	802788a <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x62>
 8027a24:	4b03      	ldr	r3, [pc, #12]	; (8027a34 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x20c>)
 8027a26:	4a04      	ldr	r2, [pc, #16]	; (8027a38 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x210>)
 8027a28:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8027a2c:	4803      	ldr	r0, [pc, #12]	; (8027a3c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x214>)
 8027a2e:	f001 fb45 	bl	80290bc <__assert_func>
 8027a32:	bf00      	nop
 8027a34:	0802c360 	.word	0x0802c360
 8027a38:	0802c9d8 	.word	0x0802c9d8
 8027a3c:	0802c4e4 	.word	0x0802c4e4

08027a40 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027a44:	ed2d 8b08 	vpush	{d8-d11}
 8027a48:	b095      	sub	sp, #84	; 0x54
 8027a4a:	f89d 40bc 	ldrb.w	r4, [sp, #188]	; 0xbc
 8027a4e:	9013      	str	r0, [sp, #76]	; 0x4c
 8027a50:	43e0      	mvns	r0, r4
 8027a52:	e9dd a727 	ldrd	sl, r7, [sp, #156]	; 0x9c
 8027a56:	eeb0 aa40 	vmov.f32	s20, s0
 8027a5a:	eef0 9a60 	vmov.f32	s19, s1
 8027a5e:	eeb0 9a41 	vmov.f32	s18, s2
 8027a62:	eef0 8a62 	vmov.f32	s17, s5
 8027a66:	eeb0 8a43 	vmov.f32	s16, s6
 8027a6a:	eef0 ba44 	vmov.f32	s23, s8
 8027a6e:	eeb0 ba64 	vmov.f32	s22, s9
 8027a72:	eef0 aa45 	vmov.f32	s21, s10
 8027a76:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 8027a7a:	9411      	str	r4, [sp, #68]	; 0x44
 8027a7c:	469b      	mov	fp, r3
 8027a7e:	e9dd 422b 	ldrd	r4, r2, [sp, #172]	; 0xac
 8027a82:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8027a84:	6861      	ldr	r1, [r4, #4]
 8027a86:	fb01 2303 	mla	r3, r1, r3, r2
 8027a8a:	6821      	ldr	r1, [r4, #0]
 8027a8c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8027a8e:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8027a90:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8027a94:	6852      	ldr	r2, [r2, #4]
 8027a96:	6824      	ldr	r4, [r4, #0]
 8027a98:	930d      	str	r3, [sp, #52]	; 0x34
 8027a9a:	b2c3      	uxtb	r3, r0
 8027a9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8027a9e:	1d13      	adds	r3, r2, #4
 8027aa0:	940a      	str	r4, [sp, #40]	; 0x28
 8027aa2:	9308      	str	r3, [sp, #32]
 8027aa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027aa6:	2b00      	cmp	r3, #0
 8027aa8:	dc02      	bgt.n	8027ab0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8027aaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027aac:	2b00      	cmp	r3, #0
 8027aae:	dd6c      	ble.n	8027b8a <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8027ab0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027ab2:	f1bb 0f00 	cmp.w	fp, #0
 8027ab6:	e9d3 5e02 	ldrd	r5, lr, [r3, #8]
 8027aba:	b228      	sxth	r0, r5
 8027abc:	fa0f f68e 	sxth.w	r6, lr
 8027ac0:	f340 8245 	ble.w	8027f4e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50e>
 8027ac4:	e9dd 8929 	ldrd	r8, r9, [sp, #164]	; 0xa4
 8027ac8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8027aca:	1e44      	subs	r4, r0, #1
 8027acc:	f106 3cff 	add.w	ip, r6, #4294967295
 8027ad0:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8027ad4:	ea5f 432a 	movs.w	r3, sl, asr #16
 8027ad8:	ea4f 4127 	mov.w	r1, r7, asr #16
 8027adc:	d405      	bmi.n	8027aea <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8027ade:	42a3      	cmp	r3, r4
 8027ae0:	da03      	bge.n	8027aea <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8027ae2:	2900      	cmp	r1, #0
 8027ae4:	db01      	blt.n	8027aea <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8027ae6:	4561      	cmp	r1, ip
 8027ae8:	db54      	blt.n	8027b94 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8027aea:	f113 0e01 	adds.w	lr, r3, #1
 8027aee:	d407      	bmi.n	8027b00 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8027af0:	4586      	cmp	lr, r0
 8027af2:	dc05      	bgt.n	8027b00 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8027af4:	f111 0e01 	adds.w	lr, r1, #1
 8027af8:	d402      	bmi.n	8027b00 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8027afa:	45b6      	cmp	lr, r6
 8027afc:	f340 8189 	ble.w	8027e12 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d2>
 8027b00:	f1bb 0b01 	subs.w	fp, fp, #1
 8027b04:	44c2      	add	sl, r8
 8027b06:	444f      	add	r7, r9
 8027b08:	f102 0204 	add.w	r2, r2, #4
 8027b0c:	d1e2      	bne.n	8027ad4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8027b0e:	920d      	str	r2, [sp, #52]	; 0x34
 8027b10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027b12:	2b00      	cmp	r3, #0
 8027b14:	dd39      	ble.n	8027b8a <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8027b16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027b1a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027b1e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027b22:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027b26:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027b2a:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8027b2e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027b32:	ee76 6a68 	vsub.f32	s13, s12, s17
 8027b36:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8027b3a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027b3e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8027b42:	ee16 2a90 	vmov	r2, s13
 8027b46:	3b01      	subs	r3, #1
 8027b48:	930e      	str	r3, [sp, #56]	; 0x38
 8027b4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027b4c:	fb92 f3f3 	sdiv	r3, r2, r3
 8027b50:	ee17 2a10 	vmov	r2, s14
 8027b54:	eeb0 7a48 	vmov.f32	s14, s16
 8027b58:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8027b5c:	ee17 7a10 	vmov	r7, s14
 8027b60:	eeb0 7a68 	vmov.f32	s14, s17
 8027b64:	9329      	str	r3, [sp, #164]	; 0xa4
 8027b66:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027b68:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8027b6c:	fb92 f3f3 	sdiv	r3, r2, r3
 8027b70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8027b72:	932a      	str	r3, [sp, #168]	; 0xa8
 8027b74:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027b76:	ee17 aa10 	vmov	sl, s14
 8027b7a:	eeb0 8a67 	vmov.f32	s16, s15
 8027b7e:	eef0 8a46 	vmov.f32	s17, s12
 8027b82:	bf14      	ite	ne
 8027b84:	469b      	movne	fp, r3
 8027b86:	4693      	moveq	fp, r2
 8027b88:	e78c      	b.n	8027aa4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8027b8a:	b015      	add	sp, #84	; 0x54
 8027b8c:	ecbd 8b08 	vpop	{d8-d11}
 8027b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027b94:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8027b98:	920d      	str	r2, [sp, #52]	; 0x34
 8027b9a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8027b9c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8027ba0:	fb01 a302 	mla	r3, r1, r2, sl
 8027ba4:	141b      	asrs	r3, r3, #16
 8027ba6:	9209      	str	r2, [sp, #36]	; 0x24
 8027ba8:	f100 80d3 	bmi.w	8027d52 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8027bac:	42a3      	cmp	r3, r4
 8027bae:	f280 80d0 	bge.w	8027d52 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8027bb2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027bb4:	fb03 7302 	mla	r3, r3, r2, r7
 8027bb8:	141b      	asrs	r3, r3, #16
 8027bba:	f100 80ca 	bmi.w	8027d52 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8027bbe:	3e01      	subs	r6, #1
 8027bc0:	42b3      	cmp	r3, r6
 8027bc2:	f280 80c6 	bge.w	8027d52 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8027bc6:	f1bb 0f00 	cmp.w	fp, #0
 8027bca:	dda1      	ble.n	8027b10 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8027bcc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8027bd0:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 8027bd4:	930c      	str	r3, [sp, #48]	; 0x30
 8027bd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027bd8:	f103 0804 	add.w	r8, r3, #4
 8027bdc:	e08f      	b.n	8027cfe <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 8027bde:	7861      	ldrb	r1, [r4, #1]
 8027be0:	eb04 0c00 	add.w	ip, r4, r0
 8027be4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8027be8:	4431      	add	r1, r6
 8027bea:	2a00      	cmp	r2, #0
 8027bec:	f000 80a3 	beq.w	8027d36 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f6>
 8027bf0:	5c20      	ldrb	r0, [r4, r0]
 8027bf2:	f89c c001 	ldrb.w	ip, [ip, #1]
 8027bf6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8027bfa:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8027bfe:	4430      	add	r0, r6
 8027c00:	44b4      	add	ip, r6
 8027c02:	b29b      	uxth	r3, r3
 8027c04:	b292      	uxth	r2, r2
 8027c06:	fb03 f402 	mul.w	r4, r3, r2
 8027c0a:	011b      	lsls	r3, r3, #4
 8027c0c:	f891 b001 	ldrb.w	fp, [r1, #1]
 8027c10:	1b1e      	subs	r6, r3, r4
 8027c12:	f891 9002 	ldrb.w	r9, [r1, #2]
 8027c16:	b2b6      	uxth	r6, r6
 8027c18:	7809      	ldrb	r1, [r1, #0]
 8027c1a:	fb06 fb0b 	mul.w	fp, r6, fp
 8027c1e:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8027c22:	b292      	uxth	r2, r2
 8027c24:	fb06 f909 	mul.w	r9, r6, r9
 8027c28:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8027c2c:	fb06 f601 	mul.w	r6, r6, r1
 8027c30:	1a9b      	subs	r3, r3, r2
 8027c32:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8027c36:	b29b      	uxth	r3, r3
 8027c38:	f89e e002 	ldrb.w	lr, [lr, #2]
 8027c3c:	fb03 bb01 	mla	fp, r3, r1, fp
 8027c40:	9908      	ldr	r1, [sp, #32]
 8027c42:	fb03 990e 	mla	r9, r3, lr, r9
 8027c46:	5d49      	ldrb	r1, [r1, r5]
 8027c48:	7885      	ldrb	r5, [r0, #2]
 8027c4a:	fb03 6301 	mla	r3, r3, r1, r6
 8027c4e:	f890 e001 	ldrb.w	lr, [r0, #1]
 8027c52:	fb02 9905 	mla	r9, r2, r5, r9
 8027c56:	7801      	ldrb	r1, [r0, #0]
 8027c58:	fb02 bb0e 	mla	fp, r2, lr, fp
 8027c5c:	f89c 0002 	ldrb.w	r0, [ip, #2]
 8027c60:	fb02 3301 	mla	r3, r2, r1, r3
 8027c64:	f89c e001 	ldrb.w	lr, [ip, #1]
 8027c68:	fb04 9900 	mla	r9, r4, r0, r9
 8027c6c:	f89c 1000 	ldrb.w	r1, [ip]
 8027c70:	fb04 bb0e 	mla	fp, r4, lr, fp
 8027c74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027c76:	f818 cc04 	ldrb.w	ip, [r8, #-4]
 8027c7a:	fb04 3301 	mla	r3, r4, r1, r3
 8027c7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8027c80:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8027c84:	fb19 f902 	smulbb	r9, r9, r2
 8027c88:	fb1c fc01 	smulbb	ip, ip, r1
 8027c8c:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8027c90:	f818 5c02 	ldrb.w	r5, [r8, #-2]
 8027c94:	fb1b fb02 	smulbb	fp, fp, r2
 8027c98:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027c9c:	f818 6c03 	ldrb.w	r6, [r8, #-3]
 8027ca0:	fb05 9901 	mla	r9, r5, r1, r9
 8027ca4:	fb03 c302 	mla	r3, r3, r2, ip
 8027ca8:	fb06 bb01 	mla	fp, r6, r1, fp
 8027cac:	fa1f f989 	uxth.w	r9, r9
 8027cb0:	b29b      	uxth	r3, r3
 8027cb2:	f109 0101 	add.w	r1, r9, #1
 8027cb6:	1c5a      	adds	r2, r3, #1
 8027cb8:	fa1f fb8b 	uxth.w	fp, fp
 8027cbc:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8027cc0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027cc4:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8027cc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027cc8:	f10b 0001 	add.w	r0, fp, #1
 8027ccc:	3a01      	subs	r2, #1
 8027cce:	eb00 2b1b 	add.w	fp, r0, fp, lsr #8
 8027cd2:	448a      	add	sl, r1
 8027cd4:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8027cd6:	9209      	str	r2, [sp, #36]	; 0x24
 8027cd8:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8027cdc:	ea4f 2929 	mov.w	r9, r9, asr #8
 8027ce0:	121b      	asrs	r3, r3, #8
 8027ce2:	3201      	adds	r2, #1
 8027ce4:	f808 bc03 	strb.w	fp, [r8, #-3]
 8027ce8:	f808 9c02 	strb.w	r9, [r8, #-2]
 8027cec:	f808 3c04 	strb.w	r3, [r8, #-4]
 8027cf0:	440f      	add	r7, r1
 8027cf2:	f108 0804 	add.w	r8, r8, #4
 8027cf6:	d025      	beq.n	8027d44 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 8027cf8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027cfa:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8027cfe:	ea4f 432a 	mov.w	r3, sl, asr #16
 8027d02:	143c      	asrs	r4, r7, #16
 8027d04:	fb00 3404 	mla	r4, r0, r4, r3
 8027d08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027d0a:	9e08      	ldr	r6, [sp, #32]
 8027d0c:	5d15      	ldrb	r5, [r2, r4]
 8027d0e:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8027d12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8027d16:	4414      	add	r4, r2
 8027d18:	eb06 0e05 	add.w	lr, r6, r5
 8027d1c:	f3c7 3203 	ubfx	r2, r7, #12, #4
 8027d20:	2b00      	cmp	r3, #0
 8027d22:	f47f af5c 	bne.w	8027bde <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8027d26:	b14a      	cbz	r2, 8027d3c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8027d28:	5c20      	ldrb	r0, [r4, r0]
 8027d2a:	46f4      	mov	ip, lr
 8027d2c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8027d30:	4430      	add	r0, r6
 8027d32:	4671      	mov	r1, lr
 8027d34:	e765      	b.n	8027c02 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027d36:	46f4      	mov	ip, lr
 8027d38:	4670      	mov	r0, lr
 8027d3a:	e762      	b.n	8027c02 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027d3c:	46f4      	mov	ip, lr
 8027d3e:	4670      	mov	r0, lr
 8027d40:	4671      	mov	r1, lr
 8027d42:	e75e      	b.n	8027c02 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027d44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027d46:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8027d4a:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 8027d4e:	930d      	str	r3, [sp, #52]	; 0x34
 8027d50:	e6de      	b.n	8027b10 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8027d52:	f1bb 0f00 	cmp.w	fp, #0
 8027d56:	f77f aedb 	ble.w	8027b10 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8027d5a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8027d5e:	ea4f 432a 	mov.w	r3, sl, asr #16
 8027d62:	1439      	asrs	r1, r7, #16
 8027d64:	4676      	mov	r6, lr
 8027d66:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8027d6a:	f8dd 80b8 	ldr.w	r8, [sp, #184]	; 0xb8
 8027d6e:	2b00      	cmp	r3, #0
 8027d70:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8027d74:	f3c7 3203 	ubfx	r2, r7, #12, #4
 8027d78:	db29      	blt.n	8027dce <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8027d7a:	1e6c      	subs	r4, r5, #1
 8027d7c:	42a3      	cmp	r3, r4
 8027d7e:	da26      	bge.n	8027dce <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8027d80:	2900      	cmp	r1, #0
 8027d82:	db24      	blt.n	8027dce <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8027d84:	1e74      	subs	r4, r6, #1
 8027d86:	42a1      	cmp	r1, r4
 8027d88:	da21      	bge.n	8027dce <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8027d8a:	b22c      	sxth	r4, r5
 8027d8c:	fb01 3304 	mla	r3, r1, r4, r3
 8027d90:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8027d92:	5ce9      	ldrb	r1, [r5, r3]
 8027d94:	442b      	add	r3, r5
 8027d96:	9d08      	ldr	r5, [sp, #32]
 8027d98:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8027d9c:	9112      	str	r1, [sp, #72]	; 0x48
 8027d9e:	eb05 0c01 	add.w	ip, r5, r1
 8027da2:	2800      	cmp	r0, #0
 8027da4:	d04e      	beq.n	8027e44 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8027da6:	f893 e001 	ldrb.w	lr, [r3, #1]
 8027daa:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8027dae:	44ae      	add	lr, r5
 8027db0:	2a00      	cmp	r2, #0
 8027db2:	f000 80c7 	beq.w	8027f44 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8027db6:	1919      	adds	r1, r3, r4
 8027db8:	7849      	ldrb	r1, [r1, #1]
 8027dba:	5d1c      	ldrb	r4, [r3, r4]
 8027dbc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8027dc0:	186b      	adds	r3, r5, r1
 8027dc2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8027dc6:	930c      	str	r3, [sp, #48]	; 0x30
 8027dc8:	1963      	adds	r3, r4, r5
 8027dca:	9310      	str	r3, [sp, #64]	; 0x40
 8027dcc:	e041      	b.n	8027e52 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8027dce:	1c5c      	adds	r4, r3, #1
 8027dd0:	d405      	bmi.n	8027dde <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8027dd2:	42ac      	cmp	r4, r5
 8027dd4:	dc03      	bgt.n	8027dde <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8027dd6:	1c4c      	adds	r4, r1, #1
 8027dd8:	d401      	bmi.n	8027dde <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8027dda:	42b4      	cmp	r4, r6
 8027ddc:	dd21      	ble.n	8027e22 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8027dde:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027de0:	f1b9 0f00 	cmp.w	r9, #0
 8027de4:	449a      	add	sl, r3
 8027de6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027de8:	f10b 0b04 	add.w	fp, fp, #4
 8027dec:	441f      	add	r7, r3
 8027dee:	dd07      	ble.n	8027e00 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8027df0:	e9d8 5602 	ldrd	r5, r6, [r8, #8]
 8027df4:	f109 39ff 	add.w	r9, r9, #4294967295
 8027df8:	ea4f 432a 	mov.w	r3, sl, asr #16
 8027dfc:	1439      	asrs	r1, r7, #16
 8027dfe:	e7b6      	b.n	8027d6e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8027e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027e02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8027e04:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8027e08:	3301      	adds	r3, #1
 8027e0a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8027e0e:	930d      	str	r3, [sp, #52]	; 0x34
 8027e10:	e67e      	b.n	8027b10 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8027e12:	920d      	str	r2, [sp, #52]	; 0x34
 8027e14:	f10b 32ff 	add.w	r2, fp, #4294967295
 8027e18:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8027e1c:	4691      	mov	r9, r2
 8027e1e:	9209      	str	r2, [sp, #36]	; 0x24
 8027e20:	e7a0      	b.n	8027d64 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8027e22:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8027e24:	b236      	sxth	r6, r6
 8027e26:	b22d      	sxth	r5, r5
 8027e28:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8027e2c:	e9cd 2405 	strd	r2, r4, [sp, #20]
 8027e30:	9302      	str	r3, [sp, #8]
 8027e32:	e9cd 5600 	strd	r5, r6, [sp]
 8027e36:	9b08      	ldr	r3, [sp, #32]
 8027e38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027e3a:	4659      	mov	r1, fp
 8027e3c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8027e3e:	f7ff fcf3 	bl	8027828 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh>
 8027e42:	e7cc      	b.n	8027dde <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8027e44:	2a00      	cmp	r2, #0
 8027e46:	d173      	bne.n	8027f30 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8027e48:	46e6      	mov	lr, ip
 8027e4a:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8027e4e:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8027e52:	b283      	uxth	r3, r0
 8027e54:	b292      	uxth	r2, r2
 8027e56:	fb03 f002 	mul.w	r0, r3, r2
 8027e5a:	011b      	lsls	r3, r3, #4
 8027e5c:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8027e60:	f89e 5002 	ldrb.w	r5, [lr, #2]
 8027e64:	1a19      	subs	r1, r3, r0
 8027e66:	b289      	uxth	r1, r1
 8027e68:	f89e e000 	ldrb.w	lr, [lr]
 8027e6c:	fb01 f505 	mul.w	r5, r1, r5
 8027e70:	ebc0 1202 	rsb	r2, r0, r2, lsl #4
 8027e74:	fb01 f606 	mul.w	r6, r1, r6
 8027e78:	b292      	uxth	r2, r2
 8027e7a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8027e7e:	fb01 f40e 	mul.w	r4, r1, lr
 8027e82:	1a9b      	subs	r3, r3, r2
 8027e84:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8027e88:	f89c e002 	ldrb.w	lr, [ip, #2]
 8027e8c:	b29b      	uxth	r3, r3
 8027e8e:	fb03 6601 	mla	r6, r3, r1, r6
 8027e92:	fb03 5e0e 	mla	lr, r3, lr, r5
 8027e96:	9908      	ldr	r1, [sp, #32]
 8027e98:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027e9a:	5d49      	ldrb	r1, [r1, r5]
 8027e9c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027e9e:	fb03 4301 	mla	r3, r3, r1, r4
 8027ea2:	f895 c001 	ldrb.w	ip, [r5, #1]
 8027ea6:	78ad      	ldrb	r5, [r5, #2]
 8027ea8:	fb02 6c0c 	mla	ip, r2, ip, r6
 8027eac:	fb02 e505 	mla	r5, r2, r5, lr
 8027eb0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8027eb2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8027eb4:	784e      	ldrb	r6, [r1, #1]
 8027eb6:	7824      	ldrb	r4, [r4, #0]
 8027eb8:	7889      	ldrb	r1, [r1, #2]
 8027eba:	fb02 3204 	mla	r2, r2, r4, r3
 8027ebe:	fb00 cc06 	mla	ip, r0, r6, ip
 8027ec2:	fb00 5501 	mla	r5, r0, r1, r5
 8027ec6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8027ec8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8027eca:	780b      	ldrb	r3, [r1, #0]
 8027ecc:	f89b 4000 	ldrb.w	r4, [fp]
 8027ed0:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8027ed4:	fb00 2003 	mla	r0, r0, r3, r2
 8027ed8:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8027edc:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8027ee0:	fb15 f501 	smulbb	r5, r5, r1
 8027ee4:	fb14 f406 	smulbb	r4, r4, r6
 8027ee8:	fb1c fc01 	smulbb	ip, ip, r1
 8027eec:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8027ef0:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8027ef4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027ef8:	fb00 4001 	mla	r0, r0, r1, r4
 8027efc:	fb03 5306 	mla	r3, r3, r6, r5
 8027f00:	fb02 c106 	mla	r1, r2, r6, ip
 8027f04:	b29b      	uxth	r3, r3
 8027f06:	b280      	uxth	r0, r0
 8027f08:	b289      	uxth	r1, r1
 8027f0a:	1c5a      	adds	r2, r3, #1
 8027f0c:	1c4d      	adds	r5, r1, #1
 8027f0e:	1c44      	adds	r4, r0, #1
 8027f10:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027f14:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8027f18:	eb04 2310 	add.w	r3, r4, r0, lsr #8
 8027f1c:	1209      	asrs	r1, r1, #8
 8027f1e:	1212      	asrs	r2, r2, #8
 8027f20:	121b      	asrs	r3, r3, #8
 8027f22:	f88b 1001 	strb.w	r1, [fp, #1]
 8027f26:	f88b 2002 	strb.w	r2, [fp, #2]
 8027f2a:	f88b 3000 	strb.w	r3, [fp]
 8027f2e:	e756      	b.n	8027dde <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8027f30:	5d1c      	ldrb	r4, [r3, r4]
 8027f32:	9b08      	ldr	r3, [sp, #32]
 8027f34:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8027f38:	18e3      	adds	r3, r4, r3
 8027f3a:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8027f3e:	9310      	str	r3, [sp, #64]	; 0x40
 8027f40:	46e6      	mov	lr, ip
 8027f42:	e786      	b.n	8027e52 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8027f44:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8027f48:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8027f4c:	e781      	b.n	8027e52 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8027f4e:	f43f addf 	beq.w	8027b10 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8027f52:	1e44      	subs	r4, r0, #1
 8027f54:	e621      	b.n	8027b9a <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8027f56:	bf00      	nop

08027f58 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh>:
 8027f58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027f5c:	f9bd c028 	ldrsh.w	ip, [sp, #40]	; 0x28
 8027f60:	e9dd 640c 	ldrd	r6, r4, [sp, #48]	; 0x30
 8027f64:	fb04 6e0c 	mla	lr, r4, ip, r6
 8027f68:	2c00      	cmp	r4, #0
 8027f6a:	461f      	mov	r7, r3
 8027f6c:	eb02 0a0e 	add.w	sl, r2, lr
 8027f70:	f104 0801 	add.w	r8, r4, #1
 8027f74:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8027f78:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 8027f7c:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8027f80:	db01      	blt.n	8027f86 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x2e>
 8027f82:	45a1      	cmp	r9, r4
 8027f84:	dc6f      	bgt.n	8028066 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x10e>
 8027f86:	f891 b000 	ldrb.w	fp, [r1]
 8027f8a:	460b      	mov	r3, r1
 8027f8c:	465c      	mov	r4, fp
 8027f8e:	468e      	mov	lr, r1
 8027f90:	f1b8 0f00 	cmp.w	r8, #0
 8027f94:	db01      	blt.n	8027f9a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x42>
 8027f96:	45c1      	cmp	r9, r8
 8027f98:	dc4a      	bgt.n	8028030 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xd8>
 8027f9a:	f891 9000 	ldrb.w	r9, [r1]
 8027f9e:	460f      	mov	r7, r1
 8027fa0:	46ca      	mov	sl, r9
 8027fa2:	4688      	mov	r8, r1
 8027fa4:	2d0f      	cmp	r5, #15
 8027fa6:	f200 8097 	bhi.w	80280d8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x180>
 8027faa:	280f      	cmp	r0, #15
 8027fac:	f200 8094 	bhi.w	80280d8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x180>
 8027fb0:	b2aa      	uxth	r2, r5
 8027fb2:	b280      	uxth	r0, r0
 8027fb4:	fb02 f600 	mul.w	r6, r2, r0
 8027fb8:	0112      	lsls	r2, r2, #4
 8027fba:	1b95      	subs	r5, r2, r6
 8027fbc:	f893 c001 	ldrb.w	ip, [r3, #1]
 8027fc0:	789b      	ldrb	r3, [r3, #2]
 8027fc2:	b2ad      	uxth	r5, r5
 8027fc4:	ebc6 1000 	rsb	r0, r6, r0, lsl #4
 8027fc8:	fb05 f404 	mul.w	r4, r5, r4
 8027fcc:	fb05 fc0c 	mul.w	ip, r5, ip
 8027fd0:	fb05 f503 	mul.w	r5, r5, r3
 8027fd4:	b280      	uxth	r0, r0
 8027fd6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8027fda:	f89e 3001 	ldrb.w	r3, [lr, #1]
 8027fde:	1a12      	subs	r2, r2, r0
 8027fe0:	f89e e002 	ldrb.w	lr, [lr, #2]
 8027fe4:	b292      	uxth	r2, r2
 8027fe6:	fb02 cc03 	mla	ip, r2, r3, ip
 8027fea:	fb02 440b 	mla	r4, r2, fp, r4
 8027fee:	fb02 520e 	mla	r2, r2, lr, r5
 8027ff2:	f898 3001 	ldrb.w	r3, [r8, #1]
 8027ff6:	f898 8002 	ldrb.w	r8, [r8, #2]
 8027ffa:	fb00 cc03 	mla	ip, r0, r3, ip
 8027ffe:	fb00 4909 	mla	r9, r0, r9, r4
 8028002:	fb00 2008 	mla	r0, r0, r8, r2
 8028006:	787b      	ldrb	r3, [r7, #1]
 8028008:	78ba      	ldrb	r2, [r7, #2]
 802800a:	fb06 9a0a 	mla	sl, r6, sl, r9
 802800e:	fb06 c303 	mla	r3, r6, r3, ip
 8028012:	fb06 0602 	mla	r6, r6, r2, r0
 8028016:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 802801a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802801e:	0236      	lsls	r6, r6, #8
 8028020:	ea43 030a 	orr.w	r3, r3, sl
 8028024:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
 8028028:	4333      	orrs	r3, r6
 802802a:	600b      	str	r3, [r1, #0]
 802802c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028030:	b378      	cbz	r0, 8028092 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x13a>
 8028032:	2e00      	cmp	r6, #0
 8028034:	db3f      	blt.n	80280b6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x15e>
 8028036:	45b4      	cmp	ip, r6
 8028038:	dd3d      	ble.n	80280b6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x15e>
 802803a:	f81a 800c 	ldrb.w	r8, [sl, ip]
 802803e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8028042:	44b8      	add	r8, r7
 8028044:	3601      	adds	r6, #1
 8028046:	f898 9000 	ldrb.w	r9, [r8]
 802804a:	d430      	bmi.n	80280ae <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x156>
 802804c:	45b4      	cmp	ip, r6
 802804e:	dd2e      	ble.n	80280ae <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x156>
 8028050:	2d00      	cmp	r5, #0
 8028052:	d03d      	beq.n	80280d0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x178>
 8028054:	44d4      	add	ip, sl
 8028056:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802805a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802805e:	f817 a002 	ldrb.w	sl, [r7, r2]
 8028062:	4417      	add	r7, r2
 8028064:	e79e      	b.n	8027fa4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x4c>
 8028066:	2e00      	cmp	r6, #0
 8028068:	db01      	blt.n	802806e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x116>
 802806a:	45b4      	cmp	ip, r6
 802806c:	dc19      	bgt.n	80280a2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x14a>
 802806e:	468e      	mov	lr, r1
 8028070:	1c73      	adds	r3, r6, #1
 8028072:	f89e b000 	ldrb.w	fp, [lr]
 8028076:	d409      	bmi.n	802808c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x134>
 8028078:	459c      	cmp	ip, r3
 802807a:	dd07      	ble.n	802808c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x134>
 802807c:	b1ed      	cbz	r5, 80280ba <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x162>
 802807e:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8028082:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8028086:	5cfc      	ldrb	r4, [r7, r3]
 8028088:	443b      	add	r3, r7
 802808a:	e781      	b.n	8027f90 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x38>
 802808c:	780c      	ldrb	r4, [r1, #0]
 802808e:	460b      	mov	r3, r1
 8028090:	e77e      	b.n	8027f90 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x38>
 8028092:	2d0f      	cmp	r5, #15
 8028094:	f891 9000 	ldrb.w	r9, [r1]
 8028098:	d81e      	bhi.n	80280d8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x180>
 802809a:	460f      	mov	r7, r1
 802809c:	4688      	mov	r8, r1
 802809e:	46ca      	mov	sl, r9
 80280a0:	e786      	b.n	8027fb0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x58>
 80280a2:	f812 e00e 	ldrb.w	lr, [r2, lr]
 80280a6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80280aa:	449e      	add	lr, r3
 80280ac:	e7e0      	b.n	8028070 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x118>
 80280ae:	f891 a000 	ldrb.w	sl, [r1]
 80280b2:	460f      	mov	r7, r1
 80280b4:	e776      	b.n	8027fa4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x4c>
 80280b6:	4688      	mov	r8, r1
 80280b8:	e7c4      	b.n	8028044 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xec>
 80280ba:	f1b8 0f00 	cmp.w	r8, #0
 80280be:	780c      	ldrb	r4, [r1, #0]
 80280c0:	460b      	mov	r3, r1
 80280c2:	f6bf af68 	bge.w	8027f96 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x3e>
 80280c6:	460f      	mov	r7, r1
 80280c8:	4688      	mov	r8, r1
 80280ca:	46a2      	mov	sl, r4
 80280cc:	46a1      	mov	r9, r4
 80280ce:	e76c      	b.n	8027faa <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x52>
 80280d0:	f891 a000 	ldrb.w	sl, [r1]
 80280d4:	460f      	mov	r7, r1
 80280d6:	e768      	b.n	8027faa <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x52>
 80280d8:	4b03      	ldr	r3, [pc, #12]	; (80280e8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x190>)
 80280da:	4a04      	ldr	r2, [pc, #16]	; (80280ec <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x194>)
 80280dc:	f44f 710f 	mov.w	r1, #572	; 0x23c
 80280e0:	4803      	ldr	r0, [pc, #12]	; (80280f0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x198>)
 80280e2:	f000 ffeb 	bl	80290bc <__assert_func>
 80280e6:	bf00      	nop
 80280e8:	0802c360 	.word	0x0802c360
 80280ec:	0802c9d8 	.word	0x0802c9d8
 80280f0:	0802c4e4 	.word	0x0802c4e4

080280f4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80280f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80280f8:	ed2d 8b0a 	vpush	{d8-d12}
 80280fc:	eeb0 aa40 	vmov.f32	s20, s0
 8028100:	eef0 9a60 	vmov.f32	s19, s1
 8028104:	eeb0 9a41 	vmov.f32	s18, s2
 8028108:	eef0 8a62 	vmov.f32	s17, s5
 802810c:	eeb0 8a43 	vmov.f32	s16, s6
 8028110:	eeb0 ca44 	vmov.f32	s24, s8
 8028114:	eef0 ba64 	vmov.f32	s23, s9
 8028118:	eeb0 ba45 	vmov.f32	s22, s10
 802811c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8028120:	b091      	sub	sp, #68	; 0x44
 8028122:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8028126:	e9dd 9525 	ldrd	r9, r5, [sp, #148]	; 0x94
 802812a:	900f      	str	r0, [sp, #60]	; 0x3c
 802812c:	4698      	mov	r8, r3
 802812e:	e9dd 0229 	ldrd	r0, r2, [sp, #164]	; 0xa4
 8028132:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8028134:	6841      	ldr	r1, [r0, #4]
 8028136:	fb01 2303 	mla	r3, r1, r3, r2
 802813a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802813c:	6801      	ldr	r1, [r0, #0]
 802813e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8028140:	6852      	ldr	r2, [r2, #4]
 8028142:	6800      	ldr	r0, [r0, #0]
 8028144:	eb01 0a83 	add.w	sl, r1, r3, lsl #2
 8028148:	1d13      	adds	r3, r2, #4
 802814a:	9009      	str	r0, [sp, #36]	; 0x24
 802814c:	930c      	str	r3, [sp, #48]	; 0x30
 802814e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028150:	2b00      	cmp	r3, #0
 8028152:	dc02      	bgt.n	802815a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8028154:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028156:	2b00      	cmp	r3, #0
 8028158:	dd66      	ble.n	8028228 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 802815a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802815c:	f1b8 0f00 	cmp.w	r8, #0
 8028160:	e9d3 4e02 	ldrd	r4, lr, [r3, #8]
 8028164:	b221      	sxth	r1, r4
 8028166:	fa0f f78e 	sxth.w	r7, lr
 802816a:	f340 81df 	ble.w	802852c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 802816e:	1e4e      	subs	r6, r1, #1
 8028170:	f107 3cff 	add.w	ip, r7, #4294967295
 8028174:	f8cd e01c 	str.w	lr, [sp, #28]
 8028178:	e9dd eb27 	ldrd	lr, fp, [sp, #156]	; 0x9c
 802817c:	ea5f 4329 	movs.w	r3, r9, asr #16
 8028180:	ea4f 4025 	mov.w	r0, r5, asr #16
 8028184:	d405      	bmi.n	8028192 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8028186:	42b3      	cmp	r3, r6
 8028188:	da03      	bge.n	8028192 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802818a:	2800      	cmp	r0, #0
 802818c:	db01      	blt.n	8028192 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802818e:	4560      	cmp	r0, ip
 8028190:	db4f      	blt.n	8028232 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8028192:	1c5a      	adds	r2, r3, #1
 8028194:	d406      	bmi.n	80281a4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8028196:	428a      	cmp	r2, r1
 8028198:	dc04      	bgt.n	80281a4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802819a:	1c42      	adds	r2, r0, #1
 802819c:	d402      	bmi.n	80281a4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802819e:	42ba      	cmp	r2, r7
 80281a0:	f340 8157 	ble.w	8028452 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 80281a4:	f1b8 0801 	subs.w	r8, r8, #1
 80281a8:	44f1      	add	r9, lr
 80281aa:	445d      	add	r5, fp
 80281ac:	f10a 0a04 	add.w	sl, sl, #4
 80281b0:	d1e4      	bne.n	802817c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80281b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80281b4:	2b00      	cmp	r3, #0
 80281b6:	dd37      	ble.n	8028228 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80281b8:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80281bc:	ee79 9aab 	vadd.f32	s19, s19, s23
 80281c0:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80281c4:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80281c8:	ee29 6aa7 	vmul.f32	s12, s19, s15
 80281cc:	ee69 7a27 	vmul.f32	s15, s18, s15
 80281d0:	ee76 6a68 	vsub.f32	s13, s12, s17
 80281d4:	ee37 7ac8 	vsub.f32	s14, s15, s16
 80281d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80281dc:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80281e0:	ee16 2a90 	vmov	r2, s13
 80281e4:	3b01      	subs	r3, #1
 80281e6:	930a      	str	r3, [sp, #40]	; 0x28
 80281e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80281ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80281ee:	ee17 2a10 	vmov	r2, s14
 80281f2:	eeb0 7a48 	vmov.f32	s14, s16
 80281f6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80281fa:	ee17 5a10 	vmov	r5, s14
 80281fe:	eeb0 7a68 	vmov.f32	s14, s17
 8028202:	9327      	str	r3, [sp, #156]	; 0x9c
 8028204:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028206:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802820a:	fb92 f3f3 	sdiv	r3, r2, r3
 802820e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8028210:	9328      	str	r3, [sp, #160]	; 0xa0
 8028212:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028214:	ee17 9a10 	vmov	r9, s14
 8028218:	eeb0 8a67 	vmov.f32	s16, s15
 802821c:	eef0 8a46 	vmov.f32	s17, s12
 8028220:	bf14      	ite	ne
 8028222:	4698      	movne	r8, r3
 8028224:	4690      	moveq	r8, r2
 8028226:	e792      	b.n	802814e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8028228:	b011      	add	sp, #68	; 0x44
 802822a:	ecbd 8b0a 	vpop	{d8-d12}
 802822e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028232:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8028236:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8028238:	f108 32ff 	add.w	r2, r8, #4294967295
 802823c:	fb00 9302 	mla	r3, r0, r2, r9
 8028240:	141b      	asrs	r3, r3, #16
 8028242:	9207      	str	r2, [sp, #28]
 8028244:	f100 80a6 	bmi.w	8028394 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8028248:	42b3      	cmp	r3, r6
 802824a:	f280 80a3 	bge.w	8028394 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 802824e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028250:	fb03 5302 	mla	r3, r3, r2, r5
 8028254:	141b      	asrs	r3, r3, #16
 8028256:	f100 809d 	bmi.w	8028394 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 802825a:	3f01      	subs	r7, #1
 802825c:	42bb      	cmp	r3, r7
 802825e:	f280 8099 	bge.w	8028394 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8028262:	f1b8 0f00 	cmp.w	r8, #0
 8028266:	dda4      	ble.n	80281b2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8028268:	f8cd a020 	str.w	sl, [sp, #32]
 802826c:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8028270:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8028274:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8028278:	e065      	b.n	8028346 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 802827a:	f890 c001 	ldrb.w	ip, [r0, #1]
 802827e:	1844      	adds	r4, r0, r1
 8028280:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8028284:	44d4      	add	ip, sl
 8028286:	2a00      	cmp	r2, #0
 8028288:	d078      	beq.n	802837c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 802828a:	5c40      	ldrb	r0, [r0, r1]
 802828c:	7866      	ldrb	r6, [r4, #1]
 802828e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8028292:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8028296:	4450      	add	r0, sl
 8028298:	4456      	add	r6, sl
 802829a:	b29b      	uxth	r3, r3
 802829c:	b292      	uxth	r2, r2
 802829e:	fb03 f402 	mul.w	r4, r3, r2
 80282a2:	011b      	lsls	r3, r3, #4
 80282a4:	f89c 8000 	ldrb.w	r8, [ip]
 80282a8:	f89c e001 	ldrb.w	lr, [ip, #1]
 80282ac:	1b19      	subs	r1, r3, r4
 80282ae:	f89c c002 	ldrb.w	ip, [ip, #2]
 80282b2:	b289      	uxth	r1, r1
 80282b4:	fb01 fe0e 	mul.w	lr, r1, lr
 80282b8:	fb01 f808 	mul.w	r8, r1, r8
 80282bc:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 80282c0:	fb01 f10c 	mul.w	r1, r1, ip
 80282c4:	b292      	uxth	r2, r2
 80282c6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80282ca:	f81a b00b 	ldrb.w	fp, [sl, fp]
 80282ce:	f897 c001 	ldrb.w	ip, [r7, #1]
 80282d2:	1a9b      	subs	r3, r3, r2
 80282d4:	78bf      	ldrb	r7, [r7, #2]
 80282d6:	b29b      	uxth	r3, r3
 80282d8:	fb03 880b 	mla	r8, r3, fp, r8
 80282dc:	fb03 ec0c 	mla	ip, r3, ip, lr
 80282e0:	fb03 1307 	mla	r3, r3, r7, r1
 80282e4:	7881      	ldrb	r1, [r0, #2]
 80282e6:	f890 b000 	ldrb.w	fp, [r0]
 80282ea:	fb02 3301 	mla	r3, r2, r1, r3
 80282ee:	f890 e001 	ldrb.w	lr, [r0, #1]
 80282f2:	78b1      	ldrb	r1, [r6, #2]
 80282f4:	fb02 880b 	mla	r8, r2, fp, r8
 80282f8:	fb02 cc0e 	mla	ip, r2, lr, ip
 80282fc:	fb04 3301 	mla	r3, r4, r1, r3
 8028300:	f896 b000 	ldrb.w	fp, [r6]
 8028304:	f896 e001 	ldrb.w	lr, [r6, #1]
 8028308:	0219      	lsls	r1, r3, #8
 802830a:	fb04 880b 	mla	r8, r4, fp, r8
 802830e:	fb04 cc0e 	mla	ip, r4, lr, ip
 8028312:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
 8028316:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8028318:	9a07      	ldr	r2, [sp, #28]
 802831a:	4489      	add	r9, r1
 802831c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802831e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8028322:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028326:	ea48 080c 	orr.w	r8, r8, ip
 802832a:	440d      	add	r5, r1
 802832c:	9908      	ldr	r1, [sp, #32]
 802832e:	3a01      	subs	r2, #1
 8028330:	ea48 0303 	orr.w	r3, r8, r3
 8028334:	9207      	str	r2, [sp, #28]
 8028336:	f841 3b04 	str.w	r3, [r1], #4
 802833a:	3201      	adds	r2, #1
 802833c:	9108      	str	r1, [sp, #32]
 802833e:	d024      	beq.n	802838a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8028340:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028342:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028346:	ea4f 4329 	mov.w	r3, r9, asr #16
 802834a:	1428      	asrs	r0, r5, #16
 802834c:	fb01 3000 	mla	r0, r1, r0, r3
 8028350:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028352:	f3c9 3303 	ubfx	r3, r9, #12, #4
 8028356:	f812 b000 	ldrb.w	fp, [r2, r0]
 802835a:	4410      	add	r0, r2
 802835c:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8028360:	eb0a 070b 	add.w	r7, sl, fp
 8028364:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8028368:	2b00      	cmp	r3, #0
 802836a:	d186      	bne.n	802827a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802836c:	b14a      	cbz	r2, 8028382 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 802836e:	5c40      	ldrb	r0, [r0, r1]
 8028370:	463e      	mov	r6, r7
 8028372:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8028376:	4450      	add	r0, sl
 8028378:	46bc      	mov	ip, r7
 802837a:	e78e      	b.n	802829a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 802837c:	463e      	mov	r6, r7
 802837e:	4638      	mov	r0, r7
 8028380:	e78b      	b.n	802829a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8028382:	463e      	mov	r6, r7
 8028384:	4638      	mov	r0, r7
 8028386:	46bc      	mov	ip, r7
 8028388:	e787      	b.n	802829a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 802838a:	e9dd a80d 	ldrd	sl, r8, [sp, #52]	; 0x34
 802838e:	eb0a 0a88 	add.w	sl, sl, r8, lsl #2
 8028392:	e70e      	b.n	80281b2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8028394:	f1b8 0f00 	cmp.w	r8, #0
 8028398:	f77f af0b 	ble.w	80281b2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 802839c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80283a0:	ea4f 4329 	mov.w	r3, r9, asr #16
 80283a4:	1428      	asrs	r0, r5, #16
 80283a6:	4677      	mov	r7, lr
 80283a8:	46d0      	mov	r8, sl
 80283aa:	f8cd a020 	str.w	sl, [sp, #32]
 80283ae:	f8dd a0b0 	ldr.w	sl, [sp, #176]	; 0xb0
 80283b2:	2b00      	cmp	r3, #0
 80283b4:	f3c9 3103 	ubfx	r1, r9, #12, #4
 80283b8:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80283bc:	db28      	blt.n	8028410 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80283be:	1e66      	subs	r6, r4, #1
 80283c0:	42b3      	cmp	r3, r6
 80283c2:	da25      	bge.n	8028410 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80283c4:	2800      	cmp	r0, #0
 80283c6:	db23      	blt.n	8028410 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80283c8:	1e7e      	subs	r6, r7, #1
 80283ca:	42b0      	cmp	r0, r6
 80283cc:	da20      	bge.n	8028410 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80283ce:	b224      	sxth	r4, r4
 80283d0:	fb00 3304 	mla	r3, r0, r4, r3
 80283d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80283d6:	5cc7      	ldrb	r7, [r0, r3]
 80283d8:	4403      	add	r3, r0
 80283da:	980c      	ldr	r0, [sp, #48]	; 0x30
 80283dc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80283e0:	eb00 0c07 	add.w	ip, r0, r7
 80283e4:	2900      	cmp	r1, #0
 80283e6:	d04a      	beq.n	802847e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80283e8:	785e      	ldrb	r6, [r3, #1]
 80283ea:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80283ee:	4406      	add	r6, r0
 80283f0:	2a00      	cmp	r2, #0
 80283f2:	f000 8098 	beq.w	8028526 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 80283f6:	1918      	adds	r0, r3, r4
 80283f8:	7840      	ldrb	r0, [r0, #1]
 80283fa:	5d1c      	ldrb	r4, [r3, r4]
 80283fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80283fe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8028402:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8028406:	1818      	adds	r0, r3, r0
 8028408:	18e3      	adds	r3, r4, r3
 802840a:	900d      	str	r0, [sp, #52]	; 0x34
 802840c:	930e      	str	r3, [sp, #56]	; 0x38
 802840e:	e03b      	b.n	8028488 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8028410:	1c5e      	adds	r6, r3, #1
 8028412:	d405      	bmi.n	8028420 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8028414:	42a6      	cmp	r6, r4
 8028416:	dc03      	bgt.n	8028420 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8028418:	1c46      	adds	r6, r0, #1
 802841a:	d401      	bmi.n	8028420 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802841c:	42be      	cmp	r6, r7
 802841e:	dd1f      	ble.n	8028460 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8028420:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8028422:	f1bb 0f00 	cmp.w	fp, #0
 8028426:	4499      	add	r9, r3
 8028428:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802842a:	f108 0804 	add.w	r8, r8, #4
 802842e:	441d      	add	r5, r3
 8028430:	dd07      	ble.n	8028442 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8028432:	e9da 4702 	ldrd	r4, r7, [sl, #8]
 8028436:	f10b 3bff 	add.w	fp, fp, #4294967295
 802843a:	ea4f 4329 	mov.w	r3, r9, asr #16
 802843e:	1428      	asrs	r0, r5, #16
 8028440:	e7b7      	b.n	80283b2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 8028442:	e9dd 3a07 	ldrd	r3, sl, [sp, #28]
 8028446:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802844a:	3301      	adds	r3, #1
 802844c:	eb0a 0a83 	add.w	sl, sl, r3, lsl #2
 8028450:	e6af      	b.n	80281b2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8028452:	f108 32ff 	add.w	r2, r8, #4294967295
 8028456:	f8dd e01c 	ldr.w	lr, [sp, #28]
 802845a:	4693      	mov	fp, r2
 802845c:	9207      	str	r2, [sp, #28]
 802845e:	e7a2      	b.n	80283a6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 8028460:	b23f      	sxth	r7, r7
 8028462:	b224      	sxth	r4, r4
 8028464:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8028468:	e9cd 3002 	strd	r3, r0, [sp, #8]
 802846c:	e9cd 4700 	strd	r4, r7, [sp]
 8028470:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028472:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028474:	4641      	mov	r1, r8
 8028476:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8028478:	f7ff fd6e 	bl	8027f58 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh>
 802847c:	e7d0      	b.n	8028420 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802847e:	2a00      	cmp	r2, #0
 8028480:	d147      	bne.n	8028512 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41e>
 8028482:	4666      	mov	r6, ip
 8028484:	e9cd cc0d 	strd	ip, ip, [sp, #52]	; 0x34
 8028488:	b28b      	uxth	r3, r1
 802848a:	b292      	uxth	r2, r2
 802848c:	fb03 f002 	mul.w	r0, r3, r2
 8028490:	011b      	lsls	r3, r3, #4
 8028492:	f896 e000 	ldrb.w	lr, [r6]
 8028496:	7874      	ldrb	r4, [r6, #1]
 8028498:	1a19      	subs	r1, r3, r0
 802849a:	78b6      	ldrb	r6, [r6, #2]
 802849c:	b289      	uxth	r1, r1
 802849e:	fb01 f404 	mul.w	r4, r1, r4
 80284a2:	fb01 fe0e 	mul.w	lr, r1, lr
 80284a6:	ebc0 1202 	rsb	r2, r0, r2, lsl #4
 80284aa:	fb01 f106 	mul.w	r1, r1, r6
 80284ae:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80284b0:	b292      	uxth	r2, r2
 80284b2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80284b6:	5df7      	ldrb	r7, [r6, r7]
 80284b8:	1a9b      	subs	r3, r3, r2
 80284ba:	f89c 6001 	ldrb.w	r6, [ip, #1]
 80284be:	f89c c002 	ldrb.w	ip, [ip, #2]
 80284c2:	b29b      	uxth	r3, r3
 80284c4:	fb03 4606 	mla	r6, r3, r6, r4
 80284c8:	fb03 e707 	mla	r7, r3, r7, lr
 80284cc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80284ce:	fb03 130c 	mla	r3, r3, ip, r1
 80284d2:	7861      	ldrb	r1, [r4, #1]
 80284d4:	f894 c000 	ldrb.w	ip, [r4]
 80284d8:	78a4      	ldrb	r4, [r4, #2]
 80284da:	fb02 6601 	mla	r6, r2, r1, r6
 80284de:	fb02 770c 	mla	r7, r2, ip, r7
 80284e2:	fb02 3104 	mla	r1, r2, r4, r3
 80284e6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80284e8:	7862      	ldrb	r2, [r4, #1]
 80284ea:	7823      	ldrb	r3, [r4, #0]
 80284ec:	78a4      	ldrb	r4, [r4, #2]
 80284ee:	fb00 6602 	mla	r6, r0, r2, r6
 80284f2:	fb00 7303 	mla	r3, r0, r3, r7
 80284f6:	fb00 1204 	mla	r2, r0, r4, r1
 80284fa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80284fe:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8028502:	0212      	lsls	r2, r2, #8
 8028504:	4333      	orrs	r3, r6
 8028506:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 802850a:	4313      	orrs	r3, r2
 802850c:	f8c8 3000 	str.w	r3, [r8]
 8028510:	e786      	b.n	8028420 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8028512:	5d1c      	ldrb	r4, [r3, r4]
 8028514:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028516:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802851a:	18e3      	adds	r3, r4, r3
 802851c:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8028520:	930e      	str	r3, [sp, #56]	; 0x38
 8028522:	4666      	mov	r6, ip
 8028524:	e7b0      	b.n	8028488 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8028526:	e9cd cc0d 	strd	ip, ip, [sp, #52]	; 0x34
 802852a:	e7ad      	b.n	8028488 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802852c:	f43f ae41 	beq.w	80281b2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8028530:	1e4e      	subs	r6, r1, #1
 8028532:	e680      	b.n	8028236 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>

08028534 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh>:
 8028534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028538:	b087      	sub	sp, #28
 802853a:	f9bd c040 	ldrsh.w	ip, [sp, #64]	; 0x40
 802853e:	e9dd 0412 	ldrd	r0, r4, [sp, #72]	; 0x48
 8028542:	fb04 070c 	mla	r7, r4, ip, r0
 8028546:	9100      	str	r1, [sp, #0]
 8028548:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
 802854c:	2c00      	cmp	r4, #0
 802854e:	eb02 0b07 	add.w	fp, r2, r7
 8028552:	f104 0501 	add.w	r5, r4, #1
 8028556:	f9bd 8044 	ldrsh.w	r8, [sp, #68]	; 0x44
 802855a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
 802855e:	f89d 6054 	ldrb.w	r6, [sp, #84]	; 0x54
 8028562:	9101      	str	r1, [sp, #4]
 8028564:	db02      	blt.n	802856c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x38>
 8028566:	45a0      	cmp	r8, r4
 8028568:	f300 811a 	bgt.w	80287a0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x26c>
 802856c:	2700      	movs	r7, #0
 802856e:	46be      	mov	lr, r7
 8028570:	46b9      	mov	r9, r7
 8028572:	463c      	mov	r4, r7
 8028574:	2d00      	cmp	r5, #0
 8028576:	db02      	blt.n	802857e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x4a>
 8028578:	45a8      	cmp	r8, r5
 802857a:	f300 812b 	bgt.w	80287d4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2a0>
 802857e:	f04f 0c00 	mov.w	ip, #0
 8028582:	46e0      	mov	r8, ip
 8028584:	4665      	mov	r5, ip
 8028586:	f8cd c010 	str.w	ip, [sp, #16]
 802858a:	f1ba 0f0f 	cmp.w	sl, #15
 802858e:	f200 8167 	bhi.w	8028860 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x32c>
 8028592:	2e0f      	cmp	r6, #15
 8028594:	f200 8164 	bhi.w	8028860 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x32c>
 8028598:	b2b2      	uxth	r2, r6
 802859a:	fa1f f38a 	uxth.w	r3, sl
 802859e:	fb02 f603 	mul.w	r6, r2, r3
 80285a2:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 80285a6:	b292      	uxth	r2, r2
 80285a8:	fb02 fa08 	mul.w	sl, r2, r8
 80285ac:	fb06 fb0c 	mul.w	fp, r6, ip
 80285b0:	011b      	lsls	r3, r3, #4
 80285b2:	1b98      	subs	r0, r3, r6
 80285b4:	b280      	uxth	r0, r0
 80285b6:	9002      	str	r0, [sp, #8]
 80285b8:	fb00 f007 	mul.w	r0, r0, r7
 80285bc:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80285c0:	1a9b      	subs	r3, r3, r2
 80285c2:	b29b      	uxth	r3, r3
 80285c4:	fb03 000e 	mla	r0, r3, lr, r0
 80285c8:	4450      	add	r0, sl
 80285ca:	4458      	add	r0, fp
 80285cc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80285d0:	9003      	str	r0, [sp, #12]
 80285d2:	2800      	cmp	r0, #0
 80285d4:	f000 80e1 	beq.w	802879a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x266>
 80285d8:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80285dc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80285e0:	f009 1bff 	and.w	fp, r9, #16711935	; 0xff00ff
 80285e4:	9105      	str	r1, [sp, #20]
 80285e6:	d01d      	beq.n	8028624 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xf0>
 80285e8:	fb0b fb0e 	mul.w	fp, fp, lr
 80285ec:	fb01 fe0e 	mul.w	lr, r1, lr
 80285f0:	ea4f 2a1b 	mov.w	sl, fp, lsr #8
 80285f4:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 80285f8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80285fc:	f50e 7080 	add.w	r0, lr, #256	; 0x100
 8028600:	44d3      	add	fp, sl
 8028602:	eb00 2e1e 	add.w	lr, r0, lr, lsr #8
 8028606:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802860a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802860e:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8028612:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8028616:	ea4b 0e0e 	orr.w	lr, fp, lr
 802861a:	f40e 417f 	and.w	r1, lr, #65280	; 0xff00
 802861e:	f00e 1bff 	and.w	fp, lr, #16711935	; 0xff00ff
 8028622:	9105      	str	r1, [sp, #20]
 8028624:	2fff      	cmp	r7, #255	; 0xff
 8028626:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802862a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802862e:	d01b      	beq.n	8028668 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x134>
 8028630:	fb0e fe07 	mul.w	lr, lr, r7
 8028634:	fb04 f407 	mul.w	r4, r4, r7
 8028638:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
 802863c:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8028640:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8028644:	f504 7080 	add.w	r0, r4, #256	; 0x100
 8028648:	44d6      	add	lr, sl
 802864a:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 802864e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028652:	0a24      	lsrs	r4, r4, #8
 8028654:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028658:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802865c:	ea4e 0404 	orr.w	r4, lr, r4
 8028660:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8028664:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8028668:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802866c:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 8028670:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8028674:	d019      	beq.n	80286aa <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x176>
 8028676:	fb00 f008 	mul.w	r0, r0, r8
 802867a:	fb05 f508 	mul.w	r5, r5, r8
 802867e:	ea4f 2910 	mov.w	r9, r0, lsr #8
 8028682:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 8028686:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802868a:	f505 7780 	add.w	r7, r5, #256	; 0x100
 802868e:	4448      	add	r0, r9
 8028690:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8028694:	0a00      	lsrs	r0, r0, #8
 8028696:	0a2d      	lsrs	r5, r5, #8
 8028698:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802869c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80286a0:	4305      	orrs	r5, r0
 80286a2:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 80286a6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80286aa:	9904      	ldr	r1, [sp, #16]
 80286ac:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80286b0:	f001 1aff 	and.w	sl, r1, #16711935	; 0xff00ff
 80286b4:	f401 497f 	and.w	r9, r1, #65280	; 0xff00
 80286b8:	d01c      	beq.n	80286f4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x1c0>
 80286ba:	fb0a fa0c 	mul.w	sl, sl, ip
 80286be:	fb09 fc0c 	mul.w	ip, r9, ip
 80286c2:	ea4f 281a 	mov.w	r8, sl, lsr #8
 80286c6:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80286ca:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80286ce:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80286d2:	44c2      	add	sl, r8
 80286d4:	eb07 2c1c 	add.w	ip, r7, ip, lsr #8
 80286d8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80286dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80286e0:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 80286e4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80286e8:	ea4a 090c 	orr.w	r9, sl, ip
 80286ec:	f009 1aff 	and.w	sl, r9, #16711935	; 0xff00ff
 80286f0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80286f4:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 80286f8:	9903      	ldr	r1, [sp, #12]
 80286fa:	fb01 fc08 	mul.w	ip, r1, r8
 80286fe:	f10c 0701 	add.w	r7, ip, #1
 8028702:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8028706:	ea6f 2c17 	mvn.w	ip, r7, lsr #8
 802870a:	9902      	ldr	r1, [sp, #8]
 802870c:	fa5f f78c 	uxtb.w	r7, ip
 8028710:	fb04 f401 	mul.w	r4, r4, r1
 8028714:	fb0e fe01 	mul.w	lr, lr, r1
 8028718:	9905      	ldr	r1, [sp, #20]
 802871a:	fb0b ee03 	mla	lr, fp, r3, lr
 802871e:	fb01 4303 	mla	r3, r1, r3, r4
 8028722:	fb00 e002 	mla	r0, r0, r2, lr
 8028726:	fb05 3502 	mla	r5, r5, r2, r3
 802872a:	fb0a 0a06 	mla	sl, sl, r6, r0
 802872e:	fb09 5906 	mla	r9, r9, r6, r5
 8028732:	ea4f 261a 	mov.w	r6, sl, lsr #8
 8028736:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802873a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802873e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8028742:	ea46 0609 	orr.w	r6, r6, r9
 8028746:	b2f2      	uxtb	r2, r6
 8028748:	f3c6 2307 	ubfx	r3, r6, #8, #8
 802874c:	0c36      	lsrs	r6, r6, #16
 802874e:	9900      	ldr	r1, [sp, #0]
 8028750:	fb12 f408 	smulbb	r4, r2, r8
 8028754:	fb13 f008 	smulbb	r0, r3, r8
 8028758:	fb16 f808 	smulbb	r8, r6, r8
 802875c:	780a      	ldrb	r2, [r1, #0]
 802875e:	784b      	ldrb	r3, [r1, #1]
 8028760:	788e      	ldrb	r6, [r1, #2]
 8028762:	fb02 4207 	mla	r2, r2, r7, r4
 8028766:	fb03 0307 	mla	r3, r3, r7, r0
 802876a:	fb06 8807 	mla	r8, r6, r7, r8
 802876e:	b292      	uxth	r2, r2
 8028770:	b29b      	uxth	r3, r3
 8028772:	fa1f f888 	uxth.w	r8, r8
 8028776:	1c54      	adds	r4, r2, #1
 8028778:	1c58      	adds	r0, r3, #1
 802877a:	f108 0701 	add.w	r7, r8, #1
 802877e:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8028782:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8028786:	eb07 2818 	add.w	r8, r7, r8, lsr #8
 802878a:	1212      	asrs	r2, r2, #8
 802878c:	121b      	asrs	r3, r3, #8
 802878e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8028792:	700a      	strb	r2, [r1, #0]
 8028794:	704b      	strb	r3, [r1, #1]
 8028796:	f881 8002 	strb.w	r8, [r1, #2]
 802879a:	b007      	add	sp, #28
 802879c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80287a0:	2800      	cmp	r0, #0
 80287a2:	db01      	blt.n	80287a8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x274>
 80287a4:	4584      	cmp	ip, r0
 80287a6:	dc40      	bgt.n	802882a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2f6>
 80287a8:	f04f 0e00 	mov.w	lr, #0
 80287ac:	46f1      	mov	r9, lr
 80287ae:	1c42      	adds	r2, r0, #1
 80287b0:	d42b      	bmi.n	802880a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2d6>
 80287b2:	4594      	cmp	ip, r2
 80287b4:	dd29      	ble.n	802880a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2d6>
 80287b6:	f1ba 0f00 	cmp.w	sl, #0
 80287ba:	d005      	beq.n	80287c8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x294>
 80287bc:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80287c0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80287c4:	0e27      	lsrs	r7, r4, #24
 80287c6:	e6d5      	b.n	8028574 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x40>
 80287c8:	2d00      	cmp	r5, #0
 80287ca:	db41      	blt.n	8028850 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x31c>
 80287cc:	45a8      	cmp	r8, r5
 80287ce:	dd3f      	ble.n	8028850 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x31c>
 80287d0:	4657      	mov	r7, sl
 80287d2:	4654      	mov	r4, sl
 80287d4:	b1e6      	cbz	r6, 8028810 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2dc>
 80287d6:	2800      	cmp	r0, #0
 80287d8:	db32      	blt.n	8028840 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x30c>
 80287da:	4584      	cmp	ip, r0
 80287dc:	dd30      	ble.n	8028840 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x30c>
 80287de:	f81b 200c 	ldrb.w	r2, [fp, ip]
 80287e2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80287e6:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80287ea:	3001      	adds	r0, #1
 80287ec:	d423      	bmi.n	8028836 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x302>
 80287ee:	4584      	cmp	ip, r0
 80287f0:	dd21      	ble.n	8028836 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x302>
 80287f2:	f1ba 0f00 	cmp.w	sl, #0
 80287f6:	d027      	beq.n	8028848 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x314>
 80287f8:	44dc      	add	ip, fp
 80287fa:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80287fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8028802:	9304      	str	r3, [sp, #16]
 8028804:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8028808:	e6bf      	b.n	802858a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x56>
 802880a:	2700      	movs	r7, #0
 802880c:	463c      	mov	r4, r7
 802880e:	e6b1      	b.n	8028574 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x40>
 8028810:	f1ba 0f0f 	cmp.w	sl, #15
 8028814:	d824      	bhi.n	8028860 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x32c>
 8028816:	fa1f f38a 	uxth.w	r3, sl
 802881a:	4632      	mov	r2, r6
 802881c:	46b3      	mov	fp, r6
 802881e:	46b2      	mov	sl, r6
 8028820:	9604      	str	r6, [sp, #16]
 8028822:	4635      	mov	r5, r6
 8028824:	46b4      	mov	ip, r6
 8028826:	46b0      	mov	r8, r6
 8028828:	e6c2      	b.n	80285b0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x7c>
 802882a:	5dd2      	ldrb	r2, [r2, r7]
 802882c:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 8028830:	ea4f 6e19 	mov.w	lr, r9, lsr #24
 8028834:	e7bb      	b.n	80287ae <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x27a>
 8028836:	f04f 0c00 	mov.w	ip, #0
 802883a:	f8cd c010 	str.w	ip, [sp, #16]
 802883e:	e6a4      	b.n	802858a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x56>
 8028840:	f04f 0800 	mov.w	r8, #0
 8028844:	4645      	mov	r5, r8
 8028846:	e7d0      	b.n	80287ea <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2b6>
 8028848:	f8cd a010 	str.w	sl, [sp, #16]
 802884c:	46d4      	mov	ip, sl
 802884e:	e6a0      	b.n	8028592 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x5e>
 8028850:	4654      	mov	r4, sl
 8028852:	f8cd a010 	str.w	sl, [sp, #16]
 8028856:	4655      	mov	r5, sl
 8028858:	46d4      	mov	ip, sl
 802885a:	46d0      	mov	r8, sl
 802885c:	4657      	mov	r7, sl
 802885e:	e698      	b.n	8028592 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x5e>
 8028860:	4b03      	ldr	r3, [pc, #12]	; (8028870 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x33c>)
 8028862:	4a04      	ldr	r2, [pc, #16]	; (8028874 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x340>)
 8028864:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8028868:	4803      	ldr	r0, [pc, #12]	; (8028878 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x344>)
 802886a:	f000 fc27 	bl	80290bc <__assert_func>
 802886e:	bf00      	nop
 8028870:	0802c360 	.word	0x0802c360
 8028874:	0802c9d8 	.word	0x0802c9d8
 8028878:	0802c4e4 	.word	0x0802c4e4

0802887c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802887c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028880:	ed2d 8b08 	vpush	{d8-d11}
 8028884:	b0a9      	sub	sp, #164	; 0xa4
 8028886:	e9dd ba3b 	ldrd	fp, sl, [sp, #236]	; 0xec
 802888a:	eeb0 aa40 	vmov.f32	s20, s0
 802888e:	46d9      	mov	r9, fp
 8028890:	eef0 9a60 	vmov.f32	s19, s1
 8028894:	eeb0 9a41 	vmov.f32	s18, s2
 8028898:	eef0 8a62 	vmov.f32	s17, s5
 802889c:	eeb0 8a43 	vmov.f32	s16, s6
 80288a0:	eef0 ba44 	vmov.f32	s23, s8
 80288a4:	eeb0 ba64 	vmov.f32	s22, s9
 80288a8:	eef0 aa45 	vmov.f32	s21, s10
 80288ac:	46d3      	mov	fp, sl
 80288ae:	9022      	str	r0, [sp, #136]	; 0x88
 80288b0:	983f      	ldr	r0, [sp, #252]	; 0xfc
 80288b2:	9115      	str	r1, [sp, #84]	; 0x54
 80288b4:	9218      	str	r2, [sp, #96]	; 0x60
 80288b6:	6841      	ldr	r1, [r0, #4]
 80288b8:	9a40      	ldr	r2, [sp, #256]	; 0x100
 80288ba:	469e      	mov	lr, r3
 80288bc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80288be:	6807      	ldr	r7, [r0, #0]
 80288c0:	fb01 2303 	mla	r3, r1, r3, r2
 80288c4:	9a42      	ldr	r2, [sp, #264]	; 0x108
 80288c6:	9842      	ldr	r0, [sp, #264]	; 0x108
 80288c8:	6852      	ldr	r2, [r2, #4]
 80288ca:	f89d 110c 	ldrb.w	r1, [sp, #268]	; 0x10c
 80288ce:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 80288d2:	6800      	ldr	r0, [r0, #0]
 80288d4:	1d13      	adds	r3, r2, #4
 80288d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80288d8:	b28b      	uxth	r3, r1
 80288da:	9123      	str	r1, [sp, #140]	; 0x8c
 80288dc:	9011      	str	r0, [sp, #68]	; 0x44
 80288de:	9317      	str	r3, [sp, #92]	; 0x5c
 80288e0:	9712      	str	r7, [sp, #72]	; 0x48
 80288e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80288e4:	2b00      	cmp	r3, #0
 80288e6:	dc02      	bgt.n	80288ee <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80288e8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80288ea:	2b00      	cmp	r3, #0
 80288ec:	dd68      	ble.n	80289c0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 80288ee:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80288f0:	f1be 0f00 	cmp.w	lr, #0
 80288f4:	e9d3 5702 	ldrd	r5, r7, [r3, #8]
 80288f8:	b228      	sxth	r0, r5
 80288fa:	b23e      	sxth	r6, r7
 80288fc:	f340 83a0 	ble.w	8029040 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c4>
 8028900:	e9dd 8a3d 	ldrd	r8, sl, [sp, #244]	; 0xf4
 8028904:	9912      	ldr	r1, [sp, #72]	; 0x48
 8028906:	1e44      	subs	r4, r0, #1
 8028908:	f106 3cff 	add.w	ip, r6, #4294967295
 802890c:	9709      	str	r7, [sp, #36]	; 0x24
 802890e:	ea5f 4329 	movs.w	r3, r9, asr #16
 8028912:	ea4f 422b 	mov.w	r2, fp, asr #16
 8028916:	d405      	bmi.n	8028924 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8028918:	42a3      	cmp	r3, r4
 802891a:	da03      	bge.n	8028924 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802891c:	2a00      	cmp	r2, #0
 802891e:	db01      	blt.n	8028924 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8028920:	4562      	cmp	r2, ip
 8028922:	db52      	blt.n	80289ca <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8028924:	1c5f      	adds	r7, r3, #1
 8028926:	d406      	bmi.n	8028936 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8028928:	4287      	cmp	r7, r0
 802892a:	dc04      	bgt.n	8028936 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 802892c:	1c57      	adds	r7, r2, #1
 802892e:	d402      	bmi.n	8028936 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8028930:	42b7      	cmp	r7, r6
 8028932:	f340 835f 	ble.w	8028ff4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>
 8028936:	f1be 0e01 	subs.w	lr, lr, #1
 802893a:	44c1      	add	r9, r8
 802893c:	44d3      	add	fp, sl
 802893e:	f101 0104 	add.w	r1, r1, #4
 8028942:	d1e4      	bne.n	802890e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028944:	9112      	str	r1, [sp, #72]	; 0x48
 8028946:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8028948:	2b00      	cmp	r3, #0
 802894a:	dd39      	ble.n	80289c0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 802894c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028950:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8028954:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8028958:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802895c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8028960:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8028964:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028968:	ee76 6a68 	vsub.f32	s13, s12, s17
 802896c:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8028970:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028974:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8028978:	ee16 2a90 	vmov	r2, s13
 802897c:	3b01      	subs	r3, #1
 802897e:	9315      	str	r3, [sp, #84]	; 0x54
 8028980:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8028982:	fb92 f3f3 	sdiv	r3, r2, r3
 8028986:	ee17 2a10 	vmov	r2, s14
 802898a:	eeb0 7a48 	vmov.f32	s14, s16
 802898e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8028992:	ee17 ba10 	vmov	fp, s14
 8028996:	eeb0 7a68 	vmov.f32	s14, s17
 802899a:	933d      	str	r3, [sp, #244]	; 0xf4
 802899c:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 802899e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80289a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80289a6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80289a8:	933e      	str	r3, [sp, #248]	; 0xf8
 80289aa:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80289ac:	ee17 9a10 	vmov	r9, s14
 80289b0:	eeb0 8a67 	vmov.f32	s16, s15
 80289b4:	eef0 8a46 	vmov.f32	s17, s12
 80289b8:	bf14      	ite	ne
 80289ba:	469e      	movne	lr, r3
 80289bc:	4696      	moveq	lr, r2
 80289be:	e790      	b.n	80288e2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80289c0:	b029      	add	sp, #164	; 0xa4
 80289c2:	ecbd 8b08 	vpop	{d8-d11}
 80289c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80289ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80289cc:	9112      	str	r1, [sp, #72]	; 0x48
 80289ce:	993d      	ldr	r1, [sp, #244]	; 0xf4
 80289d0:	f10e 32ff 	add.w	r2, lr, #4294967295
 80289d4:	fb01 9302 	mla	r3, r1, r2, r9
 80289d8:	141b      	asrs	r3, r3, #16
 80289da:	920a      	str	r2, [sp, #40]	; 0x28
 80289dc:	f100 816a 	bmi.w	8028cb4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 80289e0:	42a3      	cmp	r3, r4
 80289e2:	f280 8167 	bge.w	8028cb4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 80289e6:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 80289e8:	fb03 b302 	mla	r3, r3, r2, fp
 80289ec:	141b      	asrs	r3, r3, #16
 80289ee:	f100 8161 	bmi.w	8028cb4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 80289f2:	3e01      	subs	r6, #1
 80289f4:	42b3      	cmp	r3, r6
 80289f6:	f280 815d 	bge.w	8028cb4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 80289fa:	f1be 0f00 	cmp.w	lr, #0
 80289fe:	dda2      	ble.n	8028946 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8028a00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8028a02:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
 8028a06:	3304      	adds	r3, #4
 8028a08:	9309      	str	r3, [sp, #36]	; 0x24
 8028a0a:	f8cd b0f0 	str.w	fp, [sp, #240]	; 0xf0
 8028a0e:	4606      	mov	r6, r0
 8028a10:	465b      	mov	r3, fp
 8028a12:	e12a      	b.n	8028c6a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8028a14:	785f      	ldrb	r7, [r3, #1]
 8028a16:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 8028a1a:	9713      	str	r7, [sp, #76]	; 0x4c
 8028a1c:	0e3f      	lsrs	r7, r7, #24
 8028a1e:	970c      	str	r7, [sp, #48]	; 0x30
 8028a20:	b16a      	cbz	r2, 8028a3e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028a22:	199f      	adds	r7, r3, r6
 8028a24:	5d9b      	ldrb	r3, [r3, r6]
 8028a26:	462e      	mov	r6, r5
 8028a28:	787f      	ldrb	r7, [r7, #1]
 8028a2a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8028a2e:	f855 5027 	ldr.w	r5, [r5, r7, lsl #2]
 8028a32:	9314      	str	r3, [sp, #80]	; 0x50
 8028a34:	9516      	str	r5, [sp, #88]	; 0x58
 8028a36:	0e1b      	lsrs	r3, r3, #24
 8028a38:	0e2d      	lsrs	r5, r5, #24
 8028a3a:	950e      	str	r5, [sp, #56]	; 0x38
 8028a3c:	930d      	str	r3, [sp, #52]	; 0x34
 8028a3e:	fa1f fc81 	uxth.w	ip, r1
 8028a42:	b292      	uxth	r2, r2
 8028a44:	fb0c f602 	mul.w	r6, ip, r2
 8028a48:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8028a4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028a4e:	ebac 0706 	sub.w	r7, ip, r6
 8028a52:	b2bf      	uxth	r7, r7
 8028a54:	fb07 f103 	mul.w	r1, r7, r3
 8028a58:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8028a5c:	b292      	uxth	r2, r2
 8028a5e:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8028a62:	1a9b      	subs	r3, r3, r2
 8028a64:	b29b      	uxth	r3, r3
 8028a66:	fb03 1104 	mla	r1, r3, r4, r1
 8028a6a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028a6c:	fb02 1105 	mla	r1, r2, r5, r1
 8028a70:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028a72:	fb06 1105 	mla	r1, r6, r5, r1
 8028a76:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8028a7a:	2900      	cmp	r1, #0
 8028a7c:	f000 80e3 	beq.w	8028c46 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8028a80:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8028a84:	2cff      	cmp	r4, #255	; 0xff
 8028a86:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8028a8a:	950f      	str	r5, [sp, #60]	; 0x3c
 8028a8c:	9010      	str	r0, [sp, #64]	; 0x40
 8028a8e:	d01e      	beq.n	8028ace <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8028a90:	fb00 f004 	mul.w	r0, r0, r4
 8028a94:	fb05 fe04 	mul.w	lr, r5, r4
 8028a98:	4604      	mov	r4, r0
 8028a9a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8028a9e:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8028aa2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028aa6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8028aaa:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8028aae:	44e6      	add	lr, ip
 8028ab0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028ab4:	0a24      	lsrs	r4, r4, #8
 8028ab6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028aba:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8028abe:	ea4e 0e04 	orr.w	lr, lr, r4
 8028ac2:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8028ac6:	900f      	str	r0, [sp, #60]	; 0x3c
 8028ac8:	f40e 407f 	and.w	r0, lr, #65280	; 0xff00
 8028acc:	9010      	str	r0, [sp, #64]	; 0x40
 8028ace:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8028ad0:	f000 1eff 	and.w	lr, r0, #16711935	; 0xff00ff
 8028ad4:	f400 487f 	and.w	r8, r0, #65280	; 0xff00
 8028ad8:	980c      	ldr	r0, [sp, #48]	; 0x30
 8028ada:	28ff      	cmp	r0, #255	; 0xff
 8028adc:	d01c      	beq.n	8028b18 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8028ade:	fb0e fe00 	mul.w	lr, lr, r0
 8028ae2:	fb08 f800 	mul.w	r8, r8, r0
 8028ae6:	ea4f 241e 	mov.w	r4, lr, lsr #8
 8028aea:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8028aee:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8028af2:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8028af6:	44a6      	add	lr, r4
 8028af8:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8028afc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028b00:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8028b04:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028b08:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8028b0c:	ea4e 0808 	orr.w	r8, lr, r8
 8028b10:	f008 1eff 	and.w	lr, r8, #16711935	; 0xff00ff
 8028b14:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8028b18:	9814      	ldr	r0, [sp, #80]	; 0x50
 8028b1a:	f000 1cff 	and.w	ip, r0, #16711935	; 0xff00ff
 8028b1e:	f400 4a7f 	and.w	sl, r0, #65280	; 0xff00
 8028b22:	980d      	ldr	r0, [sp, #52]	; 0x34
 8028b24:	28ff      	cmp	r0, #255	; 0xff
 8028b26:	d01c      	beq.n	8028b62 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8028b28:	fb0c fc00 	mul.w	ip, ip, r0
 8028b2c:	fb0a fa00 	mul.w	sl, sl, r0
 8028b30:	ea4f 241c 	mov.w	r4, ip, lsr #8
 8028b34:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8028b38:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8028b3c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8028b40:	44a4      	add	ip, r4
 8028b42:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8028b46:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028b4a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028b4e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028b52:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028b56:	ea4c 0a0a 	orr.w	sl, ip, sl
 8028b5a:	f00a 1cff 	and.w	ip, sl, #16711935	; 0xff00ff
 8028b5e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028b62:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8028b64:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8028b68:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8028b6c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8028b6e:	2cff      	cmp	r4, #255	; 0xff
 8028b70:	d019      	beq.n	8028ba6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8028b72:	fb00 f004 	mul.w	r0, r0, r4
 8028b76:	fb0b fb04 	mul.w	fp, fp, r4
 8028b7a:	0a04      	lsrs	r4, r0, #8
 8028b7c:	f004 15ff 	and.w	r5, r4, #16711935	; 0xff00ff
 8028b80:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8028b84:	f50b 7480 	add.w	r4, fp, #256	; 0x100
 8028b88:	eb04 241b 	add.w	r4, r4, fp, lsr #8
 8028b8c:	4428      	add	r0, r5
 8028b8e:	0a00      	lsrs	r0, r0, #8
 8028b90:	0a24      	lsrs	r4, r4, #8
 8028b92:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8028b96:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8028b9a:	ea40 0b0b 	orr.w	fp, r0, fp
 8028b9e:	f00b 10ff 	and.w	r0, fp, #16711935	; 0xff00ff
 8028ba2:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8028ba6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8028ba8:	fb0e fe07 	mul.w	lr, lr, r7
 8028bac:	fb01 f105 	mul.w	r1, r1, r5
 8028bb0:	1c4c      	adds	r4, r1, #1
 8028bb2:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 8028bb6:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8028bba:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8028bbc:	fb08 f707 	mul.w	r7, r8, r7
 8028bc0:	fb04 ee03 	mla	lr, r4, r3, lr
 8028bc4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8028bc6:	fb0c ee02 	mla	lr, ip, r2, lr
 8028bca:	fb04 7703 	mla	r7, r4, r3, r7
 8028bce:	fb0a 7702 	mla	r7, sl, r2, r7
 8028bd2:	fb00 ee06 	mla	lr, r0, r6, lr
 8028bd6:	fb0b 7706 	mla	r7, fp, r6, r7
 8028bda:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028bde:	0a3f      	lsrs	r7, r7, #8
 8028be0:	f407 437f 	and.w	r3, r7, #65280	; 0xff00
 8028be4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028be8:	ea4e 0303 	orr.w	r3, lr, r3
 8028bec:	b2df      	uxtb	r7, r3
 8028bee:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8028bf2:	0c1b      	lsrs	r3, r3, #16
 8028bf4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8028bf6:	fb17 f705 	smulbb	r7, r7, r5
 8028bfa:	fb16 f605 	smulbb	r6, r6, r5
 8028bfe:	fb13 f305 	smulbb	r3, r3, r5
 8028c02:	f814 0c04 	ldrb.w	r0, [r4, #-4]
 8028c06:	f814 2c03 	ldrb.w	r2, [r4, #-3]
 8028c0a:	f814 cc02 	ldrb.w	ip, [r4, #-2]
 8028c0e:	b2c9      	uxtb	r1, r1
 8028c10:	fb00 7001 	mla	r0, r0, r1, r7
 8028c14:	fb02 6201 	mla	r2, r2, r1, r6
 8028c18:	fb0c 3101 	mla	r1, ip, r1, r3
 8028c1c:	b280      	uxth	r0, r0
 8028c1e:	b292      	uxth	r2, r2
 8028c20:	b289      	uxth	r1, r1
 8028c22:	1c47      	adds	r7, r0, #1
 8028c24:	1c56      	adds	r6, r2, #1
 8028c26:	1c4b      	adds	r3, r1, #1
 8028c28:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8028c2c:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8028c30:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028c34:	1200      	asrs	r0, r0, #8
 8028c36:	1212      	asrs	r2, r2, #8
 8028c38:	1209      	asrs	r1, r1, #8
 8028c3a:	f804 0c04 	strb.w	r0, [r4, #-4]
 8028c3e:	f804 2c03 	strb.w	r2, [r4, #-3]
 8028c42:	f804 1c02 	strb.w	r1, [r4, #-2]
 8028c46:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8028c48:	993e      	ldr	r1, [sp, #248]	; 0xf8
 8028c4a:	4491      	add	r9, r2
 8028c4c:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8028c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028c50:	440a      	add	r2, r1
 8028c52:	923c      	str	r2, [sp, #240]	; 0xf0
 8028c54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028c56:	3b01      	subs	r3, #1
 8028c58:	930a      	str	r3, [sp, #40]	; 0x28
 8028c5a:	3204      	adds	r2, #4
 8028c5c:	3301      	adds	r3, #1
 8028c5e:	9209      	str	r2, [sp, #36]	; 0x24
 8028c60:	d021      	beq.n	8028ca6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8028c62:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8028c64:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 8028c68:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8028c6a:	ea4f 4229 	mov.w	r2, r9, asr #16
 8028c6e:	141b      	asrs	r3, r3, #16
 8028c70:	fb06 2303 	mla	r3, r6, r3, r2
 8028c74:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8028c76:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028c78:	5ce2      	ldrb	r2, [r4, r3]
 8028c7a:	f3c9 3103 	ubfx	r1, r9, #12, #4
 8028c7e:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 8028c82:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8028c84:	4423      	add	r3, r4
 8028c86:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8028c8a:	0e04      	lsrs	r4, r0, #24
 8028c8c:	2900      	cmp	r1, #0
 8028c8e:	f47f aec1 	bne.w	8028a14 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8028c92:	2a00      	cmp	r2, #0
 8028c94:	f43f aed3 	beq.w	8028a3e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028c98:	5d9b      	ldrb	r3, [r3, r6]
 8028c9a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8028c9e:	9314      	str	r3, [sp, #80]	; 0x50
 8028ca0:	0e1b      	lsrs	r3, r3, #24
 8028ca2:	930d      	str	r3, [sp, #52]	; 0x34
 8028ca4:	e6cb      	b.n	8028a3e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028ca6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8028ca8:	f8dd e064 	ldr.w	lr, [sp, #100]	; 0x64
 8028cac:	eb03 038e 	add.w	r3, r3, lr, lsl #2
 8028cb0:	9312      	str	r3, [sp, #72]	; 0x48
 8028cb2:	e648      	b.n	8028946 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8028cb4:	f1be 0f00 	cmp.w	lr, #0
 8028cb8:	f77f ae45 	ble.w	8028946 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8028cbc:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8028cc0:	ea4f 4329 	mov.w	r3, r9, asr #16
 8028cc4:	ea4f 422b 	mov.w	r2, fp, asr #16
 8028cc8:	2b00      	cmp	r3, #0
 8028cca:	46be      	mov	lr, r7
 8028ccc:	4629      	mov	r1, r5
 8028cce:	e9dd 653d 	ldrd	r6, r5, [sp, #244]	; 0xf4
 8028cd2:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 8028cd6:	9c42      	ldr	r4, [sp, #264]	; 0x108
 8028cd8:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8028cdc:	f3cb 3703 	ubfx	r7, fp, #12, #4
 8028ce0:	f2c0 815d 	blt.w	8028f9e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x722>
 8028ce4:	f101 3cff 	add.w	ip, r1, #4294967295
 8028ce8:	4563      	cmp	r3, ip
 8028cea:	f280 8158 	bge.w	8028f9e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x722>
 8028cee:	2a00      	cmp	r2, #0
 8028cf0:	f2c0 8155 	blt.w	8028f9e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x722>
 8028cf4:	f10e 3cff 	add.w	ip, lr, #4294967295
 8028cf8:	4562      	cmp	r2, ip
 8028cfa:	f280 8150 	bge.w	8028f9e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x722>
 8028cfe:	fa0f fc81 	sxth.w	ip, r1
 8028d02:	fb02 330c 	mla	r3, r2, ip, r3
 8028d06:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8028d08:	5cd1      	ldrb	r1, [r2, r3]
 8028d0a:	18d3      	adds	r3, r2, r3
 8028d0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8028d0e:	469e      	mov	lr, r3
 8028d10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8028d14:	0e19      	lsrs	r1, r3, #24
 8028d16:	9309      	str	r3, [sp, #36]	; 0x24
 8028d18:	910f      	str	r1, [sp, #60]	; 0x3c
 8028d1a:	2800      	cmp	r0, #0
 8028d1c:	f000 8171 	beq.w	8029002 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x786>
 8028d20:	4671      	mov	r1, lr
 8028d22:	f89e e001 	ldrb.w	lr, [lr, #1]
 8028d26:	4613      	mov	r3, r2
 8028d28:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8028d2c:	9224      	str	r2, [sp, #144]	; 0x90
 8028d2e:	0e12      	lsrs	r2, r2, #24
 8028d30:	921a      	str	r2, [sp, #104]	; 0x68
 8028d32:	2f00      	cmp	r7, #0
 8028d34:	f040 8171 	bne.w	802901a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x79e>
 8028d38:	b280      	uxth	r0, r0
 8028d3a:	b2bf      	uxth	r7, r7
 8028d3c:	fb00 f207 	mul.w	r2, r0, r7
 8028d40:	ea4f 1c00 	mov.w	ip, r0, lsl #4
 8028d44:	ebac 0002 	sub.w	r0, ip, r2
 8028d48:	b280      	uxth	r0, r0
 8028d4a:	4603      	mov	r3, r0
 8028d4c:	9010      	str	r0, [sp, #64]	; 0x40
 8028d4e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8028d50:	ebc2 1707 	rsb	r7, r2, r7, lsl #4
 8028d54:	fb03 f000 	mul.w	r0, r3, r0
 8028d58:	fa1f fe87 	uxth.w	lr, r7
 8028d5c:	f5cc 7780 	rsb	r7, ip, #256	; 0x100
 8028d60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028d62:	eba7 070e 	sub.w	r7, r7, lr
 8028d66:	b2bf      	uxth	r7, r7
 8028d68:	fb07 0003 	mla	r0, r7, r3, r0
 8028d6c:	9719      	str	r7, [sp, #100]	; 0x64
 8028d6e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8028d70:	fb0e 0007 	mla	r0, lr, r7, r0
 8028d74:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8028d76:	fb02 0007 	mla	r0, r2, r7, r0
 8028d7a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8028d7e:	900f      	str	r0, [sp, #60]	; 0x3c
 8028d80:	2800      	cmp	r0, #0
 8028d82:	f000 80f6 	beq.w	8028f72 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 8028d86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8028d88:	2bff      	cmp	r3, #255	; 0xff
 8028d8a:	f001 10ff 	and.w	r0, r1, #16711935	; 0xff00ff
 8028d8e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8028d92:	901d      	str	r0, [sp, #116]	; 0x74
 8028d94:	9109      	str	r1, [sp, #36]	; 0x24
 8028d96:	d01b      	beq.n	8028dd0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x554>
 8028d98:	fb01 f103 	mul.w	r1, r1, r3
 8028d9c:	fb00 f003 	mul.w	r0, r0, r3
 8028da0:	460b      	mov	r3, r1
 8028da2:	0a01      	lsrs	r1, r0, #8
 8028da4:	f100 1701 	add.w	r7, r0, #65537	; 0x10001
 8028da8:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8028dac:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8028db0:	4439      	add	r1, r7
 8028db2:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8028db6:	0a09      	lsrs	r1, r1, #8
 8028db8:	0a1b      	lsrs	r3, r3, #8
 8028dba:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8028dbe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028dc2:	430b      	orrs	r3, r1
 8028dc4:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 8028dc8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028dcc:	911d      	str	r1, [sp, #116]	; 0x74
 8028dce:	9309      	str	r3, [sp, #36]	; 0x24
 8028dd0:	9924      	ldr	r1, [sp, #144]	; 0x90
 8028dd2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8028dd4:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8028dd8:	2fff      	cmp	r7, #255	; 0xff
 8028dda:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8028dde:	931e      	str	r3, [sp, #120]	; 0x78
 8028de0:	911f      	str	r1, [sp, #124]	; 0x7c
 8028de2:	d01c      	beq.n	8028e1e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a2>
 8028de4:	fb01 f107 	mul.w	r1, r1, r7
 8028de8:	fb03 f307 	mul.w	r3, r3, r7
 8028dec:	460f      	mov	r7, r1
 8028dee:	0a19      	lsrs	r1, r3, #8
 8028df0:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 8028df4:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8028df8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8028dfc:	4401      	add	r1, r0
 8028dfe:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8028e02:	0a09      	lsrs	r1, r1, #8
 8028e04:	0a1b      	lsrs	r3, r3, #8
 8028e06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028e0a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8028e0e:	ea41 0003 	orr.w	r0, r1, r3
 8028e12:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8028e16:	931e      	str	r3, [sp, #120]	; 0x78
 8028e18:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8028e1c:	931f      	str	r3, [sp, #124]	; 0x7c
 8028e1e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8028e20:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 8028e24:	f403 4c7f 	and.w	ip, r3, #65280	; 0xff00
 8028e28:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8028e2a:	9120      	str	r1, [sp, #128]	; 0x80
 8028e2c:	2bff      	cmp	r3, #255	; 0xff
 8028e2e:	d01b      	beq.n	8028e68 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8028e30:	fb01 f103 	mul.w	r1, r1, r3
 8028e34:	fb0c fc03 	mul.w	ip, ip, r3
 8028e38:	0a08      	lsrs	r0, r1, #8
 8028e3a:	f50c 7380 	add.w	r3, ip, #256	; 0x100
 8028e3e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8028e42:	f101 1101 	add.w	r1, r1, #65537	; 0x10001
 8028e46:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8028e4a:	4401      	add	r1, r0
 8028e4c:	0a09      	lsrs	r1, r1, #8
 8028e4e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028e52:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8028e56:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028e5a:	ea41 0c0c 	orr.w	ip, r1, ip
 8028e5e:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8028e62:	9320      	str	r3, [sp, #128]	; 0x80
 8028e64:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028e68:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8028e6a:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8028e6e:	f400 477f 	and.w	r7, r0, #65280	; 0xff00
 8028e72:	981c      	ldr	r0, [sp, #112]	; 0x70
 8028e74:	9321      	str	r3, [sp, #132]	; 0x84
 8028e76:	28ff      	cmp	r0, #255	; 0xff
 8028e78:	d019      	beq.n	8028eae <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x632>
 8028e7a:	fb03 f300 	mul.w	r3, r3, r0
 8028e7e:	fb07 f700 	mul.w	r7, r7, r0
 8028e82:	0a18      	lsrs	r0, r3, #8
 8028e84:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8028e88:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8028e8c:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8028e90:	4418      	add	r0, r3
 8028e92:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8028e96:	0a00      	lsrs	r0, r0, #8
 8028e98:	0a3f      	lsrs	r7, r7, #8
 8028e9a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8028e9e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8028ea2:	4307      	orrs	r7, r0
 8028ea4:	f007 13ff 	and.w	r3, r7, #16711935	; 0xff00ff
 8028ea8:	9321      	str	r3, [sp, #132]	; 0x84
 8028eaa:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8028eae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8028eb0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8028eb2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8028eb4:	fb01 f100 	mul.w	r1, r1, r0
 8028eb8:	4608      	mov	r0, r1
 8028eba:	3101      	adds	r1, #1
 8028ebc:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8028ec0:	ea6f 2110 	mvn.w	r1, r0, lsr #8
 8028ec4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8028ec6:	9125      	str	r1, [sp, #148]	; 0x94
 8028ec8:	991e      	ldr	r1, [sp, #120]	; 0x78
 8028eca:	fb01 f100 	mul.w	r1, r1, r0
 8028ece:	910f      	str	r1, [sp, #60]	; 0x3c
 8028ed0:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8028ed2:	fb01 f100 	mul.w	r1, r1, r0
 8028ed6:	9110      	str	r1, [sp, #64]	; 0x40
 8028ed8:	991d      	ldr	r1, [sp, #116]	; 0x74
 8028eda:	4608      	mov	r0, r1
 8028edc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8028ede:	fb00 1103 	mla	r1, r0, r3, r1
 8028ee2:	910f      	str	r1, [sp, #60]	; 0x3c
 8028ee4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8028ee6:	4608      	mov	r0, r1
 8028ee8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8028eea:	fb00 1003 	mla	r0, r0, r3, r1
 8028eee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028ef0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8028ef2:	fb0c 000e 	mla	r0, ip, lr, r0
 8028ef6:	fb03 110e 	mla	r1, r3, lr, r1
 8028efa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8028efc:	f89a c002 	ldrb.w	ip, [sl, #2]
 8028f00:	fb03 1102 	mla	r1, r3, r2, r1
 8028f04:	fb07 0302 	mla	r3, r7, r2, r0
 8028f08:	0a0a      	lsrs	r2, r1, #8
 8028f0a:	0a1b      	lsrs	r3, r3, #8
 8028f0c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028f10:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028f14:	4313      	orrs	r3, r2
 8028f16:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8028f18:	b2df      	uxtb	r7, r3
 8028f1a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8028f1e:	0c1b      	lsrs	r3, r3, #16
 8028f20:	fb17 f702 	smulbb	r7, r7, r2
 8028f24:	fb10 f002 	smulbb	r0, r0, r2
 8028f28:	fb13 f302 	smulbb	r3, r3, r2
 8028f2c:	f89d e094 	ldrb.w	lr, [sp, #148]	; 0x94
 8028f30:	f89a 1000 	ldrb.w	r1, [sl]
 8028f34:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8028f38:	fb01 710e 	mla	r1, r1, lr, r7
 8028f3c:	fb02 020e 	mla	r2, r2, lr, r0
 8028f40:	fb0c 330e 	mla	r3, ip, lr, r3
 8028f44:	b297      	uxth	r7, r2
 8028f46:	fa1f fc81 	uxth.w	ip, r1
 8028f4a:	b298      	uxth	r0, r3
 8028f4c:	f10c 0101 	add.w	r1, ip, #1
 8028f50:	1c7a      	adds	r2, r7, #1
 8028f52:	1c43      	adds	r3, r0, #1
 8028f54:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 8028f58:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8028f5c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8028f60:	1209      	asrs	r1, r1, #8
 8028f62:	1212      	asrs	r2, r2, #8
 8028f64:	121b      	asrs	r3, r3, #8
 8028f66:	f88a 1000 	strb.w	r1, [sl]
 8028f6a:	f88a 2001 	strb.w	r2, [sl, #1]
 8028f6e:	f88a 3002 	strb.w	r3, [sl, #2]
 8028f72:	f1b8 0f00 	cmp.w	r8, #0
 8028f76:	f10a 0a04 	add.w	sl, sl, #4
 8028f7a:	44b1      	add	r9, r6
 8028f7c:	44ab      	add	fp, r5
 8028f7e:	dd30      	ble.n	8028fe2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x766>
 8028f80:	e9d4 1e02 	ldrd	r1, lr, [r4, #8]
 8028f84:	ea4f 4329 	mov.w	r3, r9, asr #16
 8028f88:	2b00      	cmp	r3, #0
 8028f8a:	f108 38ff 	add.w	r8, r8, #4294967295
 8028f8e:	ea4f 422b 	mov.w	r2, fp, asr #16
 8028f92:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8028f96:	f3cb 3703 	ubfx	r7, fp, #12, #4
 8028f9a:	f6bf aea3 	bge.w	8028ce4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8028f9e:	f113 0c01 	adds.w	ip, r3, #1
 8028fa2:	d4e6      	bmi.n	8028f72 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 8028fa4:	458c      	cmp	ip, r1
 8028fa6:	dce4      	bgt.n	8028f72 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 8028fa8:	f112 0c01 	adds.w	ip, r2, #1
 8028fac:	d4e1      	bmi.n	8028f72 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 8028fae:	45f4      	cmp	ip, lr
 8028fb0:	dcdf      	bgt.n	8028f72 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 8028fb2:	fa0f fe8e 	sxth.w	lr, lr
 8028fb6:	b209      	sxth	r1, r1
 8028fb8:	e9cd 1e00 	strd	r1, lr, [sp]
 8028fbc:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8028fbe:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8028fc2:	e9cd 7105 	strd	r7, r1, [sp, #20]
 8028fc6:	9302      	str	r3, [sp, #8]
 8028fc8:	4651      	mov	r1, sl
 8028fca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028fcc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8028fce:	9822      	ldr	r0, [sp, #136]	; 0x88
 8028fd0:	f7ff fab0 	bl	8028534 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh>
 8028fd4:	f1b8 0f00 	cmp.w	r8, #0
 8028fd8:	f10a 0a04 	add.w	sl, sl, #4
 8028fdc:	44b1      	add	r9, r6
 8028fde:	44ab      	add	fp, r5
 8028fe0:	dcce      	bgt.n	8028f80 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8028fe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028fe4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8028fe6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8028fea:	3301      	adds	r3, #1
 8028fec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8028ff0:	9312      	str	r3, [sp, #72]	; 0x48
 8028ff2:	e4a8      	b.n	8028946 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8028ff4:	9112      	str	r1, [sp, #72]	; 0x48
 8028ff6:	f10e 31ff 	add.w	r1, lr, #4294967295
 8028ffa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8028ffc:	910a      	str	r1, [sp, #40]	; 0x28
 8028ffe:	4688      	mov	r8, r1
 8029000:	e662      	b.n	8028cc8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8029002:	2f00      	cmp	r7, #0
 8029004:	f43f ae98 	beq.w	8028d38 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 8029008:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802900a:	f81e 200c 	ldrb.w	r2, [lr, ip]
 802900e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8029012:	0e13      	lsrs	r3, r2, #24
 8029014:	9226      	str	r2, [sp, #152]	; 0x98
 8029016:	931b      	str	r3, [sp, #108]	; 0x6c
 8029018:	e68e      	b.n	8028d38 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 802901a:	eb01 0e0c 	add.w	lr, r1, ip
 802901e:	f89e e001 	ldrb.w	lr, [lr, #1]
 8029022:	f811 c00c 	ldrb.w	ip, [r1, ip]
 8029026:	f853 202e 	ldr.w	r2, [r3, lr, lsl #2]
 802902a:	4611      	mov	r1, r2
 802902c:	9227      	str	r2, [sp, #156]	; 0x9c
 802902e:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8029032:	4613      	mov	r3, r2
 8029034:	9226      	str	r2, [sp, #152]	; 0x98
 8029036:	0e0a      	lsrs	r2, r1, #24
 8029038:	921c      	str	r2, [sp, #112]	; 0x70
 802903a:	0e1a      	lsrs	r2, r3, #24
 802903c:	921b      	str	r2, [sp, #108]	; 0x6c
 802903e:	e67b      	b.n	8028d38 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 8029040:	f43f ac81 	beq.w	8028946 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8029044:	1e44      	subs	r4, r0, #1
 8029046:	e4c2      	b.n	80289ce <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>

08029048 <_GLOBAL__sub_I__ZN8touchgfx19GPU2DVectorRenderer5setupERKNS_6WidgetERKNS_4RectE>:
 8029048:	2200      	movs	r2, #0
 802904a:	4b02      	ldr	r3, [pc, #8]	; (8029054 <_GLOBAL__sub_I__ZN8touchgfx19GPU2DVectorRenderer5setupERKNS_6WidgetERKNS_4RectE+0xc>)
 802904c:	e9c3 2200 	strd	r2, r2, [r3]
 8029050:	4770      	bx	lr
 8029052:	bf00      	nop
 8029054:	20197c74 	.word	0x20197c74

08029058 <__aeabi_atexit>:
 8029058:	460b      	mov	r3, r1
 802905a:	4601      	mov	r1, r0
 802905c:	4618      	mov	r0, r3
 802905e:	f000 b851 	b.w	8029104 <__cxa_atexit>

08029062 <_ZdlPvj>:
 8029062:	f000 b812 	b.w	802908a <_ZdlPv>

08029066 <__cxa_guard_acquire>:
 8029066:	6803      	ldr	r3, [r0, #0]
 8029068:	07db      	lsls	r3, r3, #31
 802906a:	d406      	bmi.n	802907a <__cxa_guard_acquire+0x14>
 802906c:	7843      	ldrb	r3, [r0, #1]
 802906e:	b103      	cbz	r3, 8029072 <__cxa_guard_acquire+0xc>
 8029070:	deff      	udf	#255	; 0xff
 8029072:	2301      	movs	r3, #1
 8029074:	7043      	strb	r3, [r0, #1]
 8029076:	4618      	mov	r0, r3
 8029078:	4770      	bx	lr
 802907a:	2000      	movs	r0, #0
 802907c:	4770      	bx	lr

0802907e <__cxa_guard_release>:
 802907e:	2301      	movs	r3, #1
 8029080:	6003      	str	r3, [r0, #0]
 8029082:	4770      	bx	lr

08029084 <__cxa_pure_virtual>:
 8029084:	b508      	push	{r3, lr}
 8029086:	f000 f80d 	bl	80290a4 <_ZSt9terminatev>

0802908a <_ZdlPv>:
 802908a:	f000 b88d 	b.w	80291a8 <free>

0802908e <_ZN10__cxxabiv111__terminateEPFvvE>:
 802908e:	b508      	push	{r3, lr}
 8029090:	4780      	blx	r0
 8029092:	f000 f80c 	bl	80290ae <abort>
	...

08029098 <_ZSt13get_terminatev>:
 8029098:	4b01      	ldr	r3, [pc, #4]	; (80290a0 <_ZSt13get_terminatev+0x8>)
 802909a:	e8d3 0faf 	lda	r0, [r3]
 802909e:	4770      	bx	lr
 80290a0:	200000c0 	.word	0x200000c0

080290a4 <_ZSt9terminatev>:
 80290a4:	b508      	push	{r3, lr}
 80290a6:	f7ff fff7 	bl	8029098 <_ZSt13get_terminatev>
 80290aa:	f7ff fff0 	bl	802908e <_ZN10__cxxabiv111__terminateEPFvvE>

080290ae <abort>:
 80290ae:	2006      	movs	r0, #6
 80290b0:	b508      	push	{r3, lr}
 80290b2:	f000 fd5d 	bl	8029b70 <raise>
 80290b6:	2001      	movs	r0, #1
 80290b8:	f7d8 ff2c 	bl	8001f14 <_exit>

080290bc <__assert_func>:
 80290bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80290be:	4614      	mov	r4, r2
 80290c0:	461a      	mov	r2, r3
 80290c2:	4b09      	ldr	r3, [pc, #36]	; (80290e8 <__assert_func+0x2c>)
 80290c4:	4605      	mov	r5, r0
 80290c6:	681b      	ldr	r3, [r3, #0]
 80290c8:	68d8      	ldr	r0, [r3, #12]
 80290ca:	b14c      	cbz	r4, 80290e0 <__assert_func+0x24>
 80290cc:	4b07      	ldr	r3, [pc, #28]	; (80290ec <__assert_func+0x30>)
 80290ce:	9100      	str	r1, [sp, #0]
 80290d0:	4907      	ldr	r1, [pc, #28]	; (80290f0 <__assert_func+0x34>)
 80290d2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80290d6:	462b      	mov	r3, r5
 80290d8:	f000 f828 	bl	802912c <fiprintf>
 80290dc:	f7ff ffe7 	bl	80290ae <abort>
 80290e0:	4b04      	ldr	r3, [pc, #16]	; (80290f4 <__assert_func+0x38>)
 80290e2:	461c      	mov	r4, r3
 80290e4:	e7f3      	b.n	80290ce <__assert_func+0x12>
 80290e6:	bf00      	nop
 80290e8:	200000c4 	.word	0x200000c4
 80290ec:	0802d296 	.word	0x0802d296
 80290f0:	0802d2a3 	.word	0x0802d2a3
 80290f4:	0802d2d1 	.word	0x0802d2d1

080290f8 <atexit>:
 80290f8:	2300      	movs	r3, #0
 80290fa:	4601      	mov	r1, r0
 80290fc:	461a      	mov	r2, r3
 80290fe:	4618      	mov	r0, r3
 8029100:	f000 be12 	b.w	8029d28 <__register_exitproc>

08029104 <__cxa_atexit>:
 8029104:	b510      	push	{r4, lr}
 8029106:	4c05      	ldr	r4, [pc, #20]	; (802911c <__cxa_atexit+0x18>)
 8029108:	4613      	mov	r3, r2
 802910a:	b12c      	cbz	r4, 8029118 <__cxa_atexit+0x14>
 802910c:	460a      	mov	r2, r1
 802910e:	4601      	mov	r1, r0
 8029110:	2002      	movs	r0, #2
 8029112:	f000 fe09 	bl	8029d28 <__register_exitproc>
 8029116:	bd10      	pop	{r4, pc}
 8029118:	4620      	mov	r0, r4
 802911a:	e7fc      	b.n	8029116 <__cxa_atexit+0x12>
 802911c:	08029d29 	.word	0x08029d29

08029120 <__errno>:
 8029120:	4b01      	ldr	r3, [pc, #4]	; (8029128 <__errno+0x8>)
 8029122:	6818      	ldr	r0, [r3, #0]
 8029124:	4770      	bx	lr
 8029126:	bf00      	nop
 8029128:	200000c4 	.word	0x200000c4

0802912c <fiprintf>:
 802912c:	b40e      	push	{r1, r2, r3}
 802912e:	b503      	push	{r0, r1, lr}
 8029130:	ab03      	add	r3, sp, #12
 8029132:	4601      	mov	r1, r0
 8029134:	4805      	ldr	r0, [pc, #20]	; (802914c <fiprintf+0x20>)
 8029136:	f853 2b04 	ldr.w	r2, [r3], #4
 802913a:	6800      	ldr	r0, [r0, #0]
 802913c:	9301      	str	r3, [sp, #4]
 802913e:	f000 f94d 	bl	80293dc <_vfiprintf_r>
 8029142:	b002      	add	sp, #8
 8029144:	f85d eb04 	ldr.w	lr, [sp], #4
 8029148:	b003      	add	sp, #12
 802914a:	4770      	bx	lr
 802914c:	200000c4 	.word	0x200000c4

08029150 <__libc_init_array>:
 8029150:	b570      	push	{r4, r5, r6, lr}
 8029152:	4d0d      	ldr	r5, [pc, #52]	; (8029188 <__libc_init_array+0x38>)
 8029154:	2600      	movs	r6, #0
 8029156:	4c0d      	ldr	r4, [pc, #52]	; (802918c <__libc_init_array+0x3c>)
 8029158:	1b64      	subs	r4, r4, r5
 802915a:	10a4      	asrs	r4, r4, #2
 802915c:	42a6      	cmp	r6, r4
 802915e:	d109      	bne.n	8029174 <__libc_init_array+0x24>
 8029160:	4d0b      	ldr	r5, [pc, #44]	; (8029190 <__libc_init_array+0x40>)
 8029162:	2600      	movs	r6, #0
 8029164:	4c0b      	ldr	r4, [pc, #44]	; (8029194 <__libc_init_array+0x44>)
 8029166:	f001 f927 	bl	802a3b8 <_init>
 802916a:	1b64      	subs	r4, r4, r5
 802916c:	10a4      	asrs	r4, r4, #2
 802916e:	42a6      	cmp	r6, r4
 8029170:	d105      	bne.n	802917e <__libc_init_array+0x2e>
 8029172:	bd70      	pop	{r4, r5, r6, pc}
 8029174:	f855 3b04 	ldr.w	r3, [r5], #4
 8029178:	3601      	adds	r6, #1
 802917a:	4798      	blx	r3
 802917c:	e7ee      	b.n	802915c <__libc_init_array+0xc>
 802917e:	f855 3b04 	ldr.w	r3, [r5], #4
 8029182:	3601      	adds	r6, #1
 8029184:	4798      	blx	r3
 8029186:	e7f2      	b.n	802916e <__libc_init_array+0x1e>
 8029188:	0802d404 	.word	0x0802d404
 802918c:	0802d404 	.word	0x0802d404
 8029190:	0802d404 	.word	0x0802d404
 8029194:	0802d420 	.word	0x0802d420

08029198 <malloc>:
 8029198:	4b02      	ldr	r3, [pc, #8]	; (80291a4 <malloc+0xc>)
 802919a:	4601      	mov	r1, r0
 802919c:	6818      	ldr	r0, [r3, #0]
 802919e:	f000 b87f 	b.w	80292a0 <_malloc_r>
 80291a2:	bf00      	nop
 80291a4:	200000c4 	.word	0x200000c4

080291a8 <free>:
 80291a8:	4b02      	ldr	r3, [pc, #8]	; (80291b4 <free+0xc>)
 80291aa:	4601      	mov	r1, r0
 80291ac:	6818      	ldr	r0, [r3, #0]
 80291ae:	f000 b80b 	b.w	80291c8 <_free_r>
 80291b2:	bf00      	nop
 80291b4:	200000c4 	.word	0x200000c4

080291b8 <memset>:
 80291b8:	4402      	add	r2, r0
 80291ba:	4603      	mov	r3, r0
 80291bc:	4293      	cmp	r3, r2
 80291be:	d100      	bne.n	80291c2 <memset+0xa>
 80291c0:	4770      	bx	lr
 80291c2:	f803 1b01 	strb.w	r1, [r3], #1
 80291c6:	e7f9      	b.n	80291bc <memset+0x4>

080291c8 <_free_r>:
 80291c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80291ca:	2900      	cmp	r1, #0
 80291cc:	d043      	beq.n	8029256 <_free_r+0x8e>
 80291ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80291d2:	1f0c      	subs	r4, r1, #4
 80291d4:	9001      	str	r0, [sp, #4]
 80291d6:	2b00      	cmp	r3, #0
 80291d8:	bfb8      	it	lt
 80291da:	18e4      	addlt	r4, r4, r3
 80291dc:	f001 f834 	bl	802a248 <__malloc_lock>
 80291e0:	4a1e      	ldr	r2, [pc, #120]	; (802925c <_free_r+0x94>)
 80291e2:	9801      	ldr	r0, [sp, #4]
 80291e4:	6813      	ldr	r3, [r2, #0]
 80291e6:	b933      	cbnz	r3, 80291f6 <_free_r+0x2e>
 80291e8:	6063      	str	r3, [r4, #4]
 80291ea:	6014      	str	r4, [r2, #0]
 80291ec:	b003      	add	sp, #12
 80291ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80291f2:	f001 b82f 	b.w	802a254 <__malloc_unlock>
 80291f6:	42a3      	cmp	r3, r4
 80291f8:	d908      	bls.n	802920c <_free_r+0x44>
 80291fa:	6825      	ldr	r5, [r4, #0]
 80291fc:	1961      	adds	r1, r4, r5
 80291fe:	428b      	cmp	r3, r1
 8029200:	bf01      	itttt	eq
 8029202:	6819      	ldreq	r1, [r3, #0]
 8029204:	685b      	ldreq	r3, [r3, #4]
 8029206:	1949      	addeq	r1, r1, r5
 8029208:	6021      	streq	r1, [r4, #0]
 802920a:	e7ed      	b.n	80291e8 <_free_r+0x20>
 802920c:	461a      	mov	r2, r3
 802920e:	685b      	ldr	r3, [r3, #4]
 8029210:	b10b      	cbz	r3, 8029216 <_free_r+0x4e>
 8029212:	42a3      	cmp	r3, r4
 8029214:	d9fa      	bls.n	802920c <_free_r+0x44>
 8029216:	6811      	ldr	r1, [r2, #0]
 8029218:	1855      	adds	r5, r2, r1
 802921a:	42a5      	cmp	r5, r4
 802921c:	d10b      	bne.n	8029236 <_free_r+0x6e>
 802921e:	6824      	ldr	r4, [r4, #0]
 8029220:	4421      	add	r1, r4
 8029222:	1854      	adds	r4, r2, r1
 8029224:	6011      	str	r1, [r2, #0]
 8029226:	42a3      	cmp	r3, r4
 8029228:	d1e0      	bne.n	80291ec <_free_r+0x24>
 802922a:	681c      	ldr	r4, [r3, #0]
 802922c:	685b      	ldr	r3, [r3, #4]
 802922e:	4421      	add	r1, r4
 8029230:	6053      	str	r3, [r2, #4]
 8029232:	6011      	str	r1, [r2, #0]
 8029234:	e7da      	b.n	80291ec <_free_r+0x24>
 8029236:	d902      	bls.n	802923e <_free_r+0x76>
 8029238:	230c      	movs	r3, #12
 802923a:	6003      	str	r3, [r0, #0]
 802923c:	e7d6      	b.n	80291ec <_free_r+0x24>
 802923e:	6825      	ldr	r5, [r4, #0]
 8029240:	1961      	adds	r1, r4, r5
 8029242:	428b      	cmp	r3, r1
 8029244:	bf02      	ittt	eq
 8029246:	6819      	ldreq	r1, [r3, #0]
 8029248:	685b      	ldreq	r3, [r3, #4]
 802924a:	1949      	addeq	r1, r1, r5
 802924c:	6063      	str	r3, [r4, #4]
 802924e:	bf08      	it	eq
 8029250:	6021      	streq	r1, [r4, #0]
 8029252:	6054      	str	r4, [r2, #4]
 8029254:	e7ca      	b.n	80291ec <_free_r+0x24>
 8029256:	b003      	add	sp, #12
 8029258:	bd30      	pop	{r4, r5, pc}
 802925a:	bf00      	nop
 802925c:	20197c7c 	.word	0x20197c7c

08029260 <sbrk_aligned>:
 8029260:	b570      	push	{r4, r5, r6, lr}
 8029262:	4e0e      	ldr	r6, [pc, #56]	; (802929c <sbrk_aligned+0x3c>)
 8029264:	460c      	mov	r4, r1
 8029266:	4605      	mov	r5, r0
 8029268:	6831      	ldr	r1, [r6, #0]
 802926a:	b911      	cbnz	r1, 8029272 <sbrk_aligned+0x12>
 802926c:	f000 fc48 	bl	8029b00 <_sbrk_r>
 8029270:	6030      	str	r0, [r6, #0]
 8029272:	4621      	mov	r1, r4
 8029274:	4628      	mov	r0, r5
 8029276:	f000 fc43 	bl	8029b00 <_sbrk_r>
 802927a:	1c43      	adds	r3, r0, #1
 802927c:	d00a      	beq.n	8029294 <sbrk_aligned+0x34>
 802927e:	1cc4      	adds	r4, r0, #3
 8029280:	f024 0403 	bic.w	r4, r4, #3
 8029284:	42a0      	cmp	r0, r4
 8029286:	d007      	beq.n	8029298 <sbrk_aligned+0x38>
 8029288:	1a21      	subs	r1, r4, r0
 802928a:	4628      	mov	r0, r5
 802928c:	f000 fc38 	bl	8029b00 <_sbrk_r>
 8029290:	3001      	adds	r0, #1
 8029292:	d101      	bne.n	8029298 <sbrk_aligned+0x38>
 8029294:	f04f 34ff 	mov.w	r4, #4294967295
 8029298:	4620      	mov	r0, r4
 802929a:	bd70      	pop	{r4, r5, r6, pc}
 802929c:	20197c80 	.word	0x20197c80

080292a0 <_malloc_r>:
 80292a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80292a4:	1ccd      	adds	r5, r1, #3
 80292a6:	4607      	mov	r7, r0
 80292a8:	f025 0503 	bic.w	r5, r5, #3
 80292ac:	3508      	adds	r5, #8
 80292ae:	2d0c      	cmp	r5, #12
 80292b0:	bf38      	it	cc
 80292b2:	250c      	movcc	r5, #12
 80292b4:	2d00      	cmp	r5, #0
 80292b6:	db01      	blt.n	80292bc <_malloc_r+0x1c>
 80292b8:	42a9      	cmp	r1, r5
 80292ba:	d905      	bls.n	80292c8 <_malloc_r+0x28>
 80292bc:	230c      	movs	r3, #12
 80292be:	2600      	movs	r6, #0
 80292c0:	603b      	str	r3, [r7, #0]
 80292c2:	4630      	mov	r0, r6
 80292c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80292c8:	4e2e      	ldr	r6, [pc, #184]	; (8029384 <_malloc_r+0xe4>)
 80292ca:	f000 ffbd 	bl	802a248 <__malloc_lock>
 80292ce:	6833      	ldr	r3, [r6, #0]
 80292d0:	461c      	mov	r4, r3
 80292d2:	bb34      	cbnz	r4, 8029322 <_malloc_r+0x82>
 80292d4:	4629      	mov	r1, r5
 80292d6:	4638      	mov	r0, r7
 80292d8:	f7ff ffc2 	bl	8029260 <sbrk_aligned>
 80292dc:	1c43      	adds	r3, r0, #1
 80292de:	4604      	mov	r4, r0
 80292e0:	d14d      	bne.n	802937e <_malloc_r+0xde>
 80292e2:	6834      	ldr	r4, [r6, #0]
 80292e4:	4626      	mov	r6, r4
 80292e6:	2e00      	cmp	r6, #0
 80292e8:	d140      	bne.n	802936c <_malloc_r+0xcc>
 80292ea:	6823      	ldr	r3, [r4, #0]
 80292ec:	4631      	mov	r1, r6
 80292ee:	4638      	mov	r0, r7
 80292f0:	eb04 0803 	add.w	r8, r4, r3
 80292f4:	f000 fc04 	bl	8029b00 <_sbrk_r>
 80292f8:	4580      	cmp	r8, r0
 80292fa:	d13a      	bne.n	8029372 <_malloc_r+0xd2>
 80292fc:	6821      	ldr	r1, [r4, #0]
 80292fe:	3503      	adds	r5, #3
 8029300:	4638      	mov	r0, r7
 8029302:	1a6d      	subs	r5, r5, r1
 8029304:	f025 0503 	bic.w	r5, r5, #3
 8029308:	3508      	adds	r5, #8
 802930a:	2d0c      	cmp	r5, #12
 802930c:	bf38      	it	cc
 802930e:	250c      	movcc	r5, #12
 8029310:	4629      	mov	r1, r5
 8029312:	f7ff ffa5 	bl	8029260 <sbrk_aligned>
 8029316:	3001      	adds	r0, #1
 8029318:	d02b      	beq.n	8029372 <_malloc_r+0xd2>
 802931a:	6823      	ldr	r3, [r4, #0]
 802931c:	442b      	add	r3, r5
 802931e:	6023      	str	r3, [r4, #0]
 8029320:	e00e      	b.n	8029340 <_malloc_r+0xa0>
 8029322:	6822      	ldr	r2, [r4, #0]
 8029324:	1b52      	subs	r2, r2, r5
 8029326:	d41e      	bmi.n	8029366 <_malloc_r+0xc6>
 8029328:	2a0b      	cmp	r2, #11
 802932a:	d916      	bls.n	802935a <_malloc_r+0xba>
 802932c:	1961      	adds	r1, r4, r5
 802932e:	42a3      	cmp	r3, r4
 8029330:	6025      	str	r5, [r4, #0]
 8029332:	bf18      	it	ne
 8029334:	6059      	strne	r1, [r3, #4]
 8029336:	6863      	ldr	r3, [r4, #4]
 8029338:	bf08      	it	eq
 802933a:	6031      	streq	r1, [r6, #0]
 802933c:	5162      	str	r2, [r4, r5]
 802933e:	604b      	str	r3, [r1, #4]
 8029340:	f104 060b 	add.w	r6, r4, #11
 8029344:	4638      	mov	r0, r7
 8029346:	f000 ff85 	bl	802a254 <__malloc_unlock>
 802934a:	1d23      	adds	r3, r4, #4
 802934c:	f026 0607 	bic.w	r6, r6, #7
 8029350:	1af2      	subs	r2, r6, r3
 8029352:	d0b6      	beq.n	80292c2 <_malloc_r+0x22>
 8029354:	1b9b      	subs	r3, r3, r6
 8029356:	50a3      	str	r3, [r4, r2]
 8029358:	e7b3      	b.n	80292c2 <_malloc_r+0x22>
 802935a:	6862      	ldr	r2, [r4, #4]
 802935c:	42a3      	cmp	r3, r4
 802935e:	bf0c      	ite	eq
 8029360:	6032      	streq	r2, [r6, #0]
 8029362:	605a      	strne	r2, [r3, #4]
 8029364:	e7ec      	b.n	8029340 <_malloc_r+0xa0>
 8029366:	4623      	mov	r3, r4
 8029368:	6864      	ldr	r4, [r4, #4]
 802936a:	e7b2      	b.n	80292d2 <_malloc_r+0x32>
 802936c:	4634      	mov	r4, r6
 802936e:	6876      	ldr	r6, [r6, #4]
 8029370:	e7b9      	b.n	80292e6 <_malloc_r+0x46>
 8029372:	230c      	movs	r3, #12
 8029374:	4638      	mov	r0, r7
 8029376:	603b      	str	r3, [r7, #0]
 8029378:	f000 ff6c 	bl	802a254 <__malloc_unlock>
 802937c:	e7a1      	b.n	80292c2 <_malloc_r+0x22>
 802937e:	6025      	str	r5, [r4, #0]
 8029380:	e7de      	b.n	8029340 <_malloc_r+0xa0>
 8029382:	bf00      	nop
 8029384:	20197c7c 	.word	0x20197c7c

08029388 <__sfputc_r>:
 8029388:	6893      	ldr	r3, [r2, #8]
 802938a:	3b01      	subs	r3, #1
 802938c:	2b00      	cmp	r3, #0
 802938e:	6093      	str	r3, [r2, #8]
 8029390:	b410      	push	{r4}
 8029392:	da08      	bge.n	80293a6 <__sfputc_r+0x1e>
 8029394:	6994      	ldr	r4, [r2, #24]
 8029396:	42a3      	cmp	r3, r4
 8029398:	db01      	blt.n	802939e <__sfputc_r+0x16>
 802939a:	290a      	cmp	r1, #10
 802939c:	d103      	bne.n	80293a6 <__sfputc_r+0x1e>
 802939e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80293a2:	f000 bc01 	b.w	8029ba8 <__swbuf_r>
 80293a6:	6813      	ldr	r3, [r2, #0]
 80293a8:	1c58      	adds	r0, r3, #1
 80293aa:	6010      	str	r0, [r2, #0]
 80293ac:	4608      	mov	r0, r1
 80293ae:	7019      	strb	r1, [r3, #0]
 80293b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80293b4:	4770      	bx	lr

080293b6 <__sfputs_r>:
 80293b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80293b8:	4606      	mov	r6, r0
 80293ba:	460f      	mov	r7, r1
 80293bc:	4614      	mov	r4, r2
 80293be:	18d5      	adds	r5, r2, r3
 80293c0:	42ac      	cmp	r4, r5
 80293c2:	d101      	bne.n	80293c8 <__sfputs_r+0x12>
 80293c4:	2000      	movs	r0, #0
 80293c6:	e007      	b.n	80293d8 <__sfputs_r+0x22>
 80293c8:	463a      	mov	r2, r7
 80293ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80293ce:	4630      	mov	r0, r6
 80293d0:	f7ff ffda 	bl	8029388 <__sfputc_r>
 80293d4:	1c43      	adds	r3, r0, #1
 80293d6:	d1f3      	bne.n	80293c0 <__sfputs_r+0xa>
 80293d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080293dc <_vfiprintf_r>:
 80293dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80293e0:	460d      	mov	r5, r1
 80293e2:	b09d      	sub	sp, #116	; 0x74
 80293e4:	4614      	mov	r4, r2
 80293e6:	4698      	mov	r8, r3
 80293e8:	4606      	mov	r6, r0
 80293ea:	b118      	cbz	r0, 80293f4 <_vfiprintf_r+0x18>
 80293ec:	6983      	ldr	r3, [r0, #24]
 80293ee:	b90b      	cbnz	r3, 80293f4 <_vfiprintf_r+0x18>
 80293f0:	f000 fe16 	bl	802a020 <__sinit>
 80293f4:	4b89      	ldr	r3, [pc, #548]	; (802961c <_vfiprintf_r+0x240>)
 80293f6:	429d      	cmp	r5, r3
 80293f8:	d11b      	bne.n	8029432 <_vfiprintf_r+0x56>
 80293fa:	6875      	ldr	r5, [r6, #4]
 80293fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80293fe:	07d9      	lsls	r1, r3, #31
 8029400:	d405      	bmi.n	802940e <_vfiprintf_r+0x32>
 8029402:	89ab      	ldrh	r3, [r5, #12]
 8029404:	059a      	lsls	r2, r3, #22
 8029406:	d402      	bmi.n	802940e <_vfiprintf_r+0x32>
 8029408:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802940a:	f000 fea7 	bl	802a15c <__retarget_lock_acquire_recursive>
 802940e:	89ab      	ldrh	r3, [r5, #12]
 8029410:	071b      	lsls	r3, r3, #28
 8029412:	d501      	bpl.n	8029418 <_vfiprintf_r+0x3c>
 8029414:	692b      	ldr	r3, [r5, #16]
 8029416:	b9eb      	cbnz	r3, 8029454 <_vfiprintf_r+0x78>
 8029418:	4629      	mov	r1, r5
 802941a:	4630      	mov	r0, r6
 802941c:	f000 fc16 	bl	8029c4c <__swsetup_r>
 8029420:	b1c0      	cbz	r0, 8029454 <_vfiprintf_r+0x78>
 8029422:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8029424:	07dc      	lsls	r4, r3, #31
 8029426:	d50e      	bpl.n	8029446 <_vfiprintf_r+0x6a>
 8029428:	f04f 30ff 	mov.w	r0, #4294967295
 802942c:	b01d      	add	sp, #116	; 0x74
 802942e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029432:	4b7b      	ldr	r3, [pc, #492]	; (8029620 <_vfiprintf_r+0x244>)
 8029434:	429d      	cmp	r5, r3
 8029436:	d101      	bne.n	802943c <_vfiprintf_r+0x60>
 8029438:	68b5      	ldr	r5, [r6, #8]
 802943a:	e7df      	b.n	80293fc <_vfiprintf_r+0x20>
 802943c:	4b79      	ldr	r3, [pc, #484]	; (8029624 <_vfiprintf_r+0x248>)
 802943e:	429d      	cmp	r5, r3
 8029440:	bf08      	it	eq
 8029442:	68f5      	ldreq	r5, [r6, #12]
 8029444:	e7da      	b.n	80293fc <_vfiprintf_r+0x20>
 8029446:	89ab      	ldrh	r3, [r5, #12]
 8029448:	0598      	lsls	r0, r3, #22
 802944a:	d4ed      	bmi.n	8029428 <_vfiprintf_r+0x4c>
 802944c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802944e:	f000 fe87 	bl	802a160 <__retarget_lock_release_recursive>
 8029452:	e7e9      	b.n	8029428 <_vfiprintf_r+0x4c>
 8029454:	2300      	movs	r3, #0
 8029456:	f8cd 800c 	str.w	r8, [sp, #12]
 802945a:	f04f 0901 	mov.w	r9, #1
 802945e:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8029628 <_vfiprintf_r+0x24c>
 8029462:	9309      	str	r3, [sp, #36]	; 0x24
 8029464:	2320      	movs	r3, #32
 8029466:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802946a:	2330      	movs	r3, #48	; 0x30
 802946c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8029470:	4623      	mov	r3, r4
 8029472:	469a      	mov	sl, r3
 8029474:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029478:	b10a      	cbz	r2, 802947e <_vfiprintf_r+0xa2>
 802947a:	2a25      	cmp	r2, #37	; 0x25
 802947c:	d1f9      	bne.n	8029472 <_vfiprintf_r+0x96>
 802947e:	ebba 0b04 	subs.w	fp, sl, r4
 8029482:	d00b      	beq.n	802949c <_vfiprintf_r+0xc0>
 8029484:	465b      	mov	r3, fp
 8029486:	4622      	mov	r2, r4
 8029488:	4629      	mov	r1, r5
 802948a:	4630      	mov	r0, r6
 802948c:	f7ff ff93 	bl	80293b6 <__sfputs_r>
 8029490:	3001      	adds	r0, #1
 8029492:	f000 80aa 	beq.w	80295ea <_vfiprintf_r+0x20e>
 8029496:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029498:	445a      	add	r2, fp
 802949a:	9209      	str	r2, [sp, #36]	; 0x24
 802949c:	f89a 3000 	ldrb.w	r3, [sl]
 80294a0:	2b00      	cmp	r3, #0
 80294a2:	f000 80a2 	beq.w	80295ea <_vfiprintf_r+0x20e>
 80294a6:	2300      	movs	r3, #0
 80294a8:	f04f 32ff 	mov.w	r2, #4294967295
 80294ac:	f10a 0a01 	add.w	sl, sl, #1
 80294b0:	9304      	str	r3, [sp, #16]
 80294b2:	9307      	str	r3, [sp, #28]
 80294b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80294b8:	931a      	str	r3, [sp, #104]	; 0x68
 80294ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80294be:	4654      	mov	r4, sl
 80294c0:	2205      	movs	r2, #5
 80294c2:	4859      	ldr	r0, [pc, #356]	; (8029628 <_vfiprintf_r+0x24c>)
 80294c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80294c8:	f000 feb0 	bl	802a22c <memchr>
 80294cc:	9a04      	ldr	r2, [sp, #16]
 80294ce:	b9d8      	cbnz	r0, 8029508 <_vfiprintf_r+0x12c>
 80294d0:	06d1      	lsls	r1, r2, #27
 80294d2:	bf44      	itt	mi
 80294d4:	2320      	movmi	r3, #32
 80294d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80294da:	0713      	lsls	r3, r2, #28
 80294dc:	bf44      	itt	mi
 80294de:	232b      	movmi	r3, #43	; 0x2b
 80294e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80294e4:	f89a 3000 	ldrb.w	r3, [sl]
 80294e8:	2b2a      	cmp	r3, #42	; 0x2a
 80294ea:	d015      	beq.n	8029518 <_vfiprintf_r+0x13c>
 80294ec:	9a07      	ldr	r2, [sp, #28]
 80294ee:	4654      	mov	r4, sl
 80294f0:	2000      	movs	r0, #0
 80294f2:	f04f 0c0a 	mov.w	ip, #10
 80294f6:	4621      	mov	r1, r4
 80294f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80294fc:	3b30      	subs	r3, #48	; 0x30
 80294fe:	2b09      	cmp	r3, #9
 8029500:	d94e      	bls.n	80295a0 <_vfiprintf_r+0x1c4>
 8029502:	b1b0      	cbz	r0, 8029532 <_vfiprintf_r+0x156>
 8029504:	9207      	str	r2, [sp, #28]
 8029506:	e014      	b.n	8029532 <_vfiprintf_r+0x156>
 8029508:	eba0 0308 	sub.w	r3, r0, r8
 802950c:	46a2      	mov	sl, r4
 802950e:	fa09 f303 	lsl.w	r3, r9, r3
 8029512:	4313      	orrs	r3, r2
 8029514:	9304      	str	r3, [sp, #16]
 8029516:	e7d2      	b.n	80294be <_vfiprintf_r+0xe2>
 8029518:	9b03      	ldr	r3, [sp, #12]
 802951a:	1d19      	adds	r1, r3, #4
 802951c:	681b      	ldr	r3, [r3, #0]
 802951e:	2b00      	cmp	r3, #0
 8029520:	9103      	str	r1, [sp, #12]
 8029522:	bfbb      	ittet	lt
 8029524:	425b      	neglt	r3, r3
 8029526:	f042 0202 	orrlt.w	r2, r2, #2
 802952a:	9307      	strge	r3, [sp, #28]
 802952c:	9307      	strlt	r3, [sp, #28]
 802952e:	bfb8      	it	lt
 8029530:	9204      	strlt	r2, [sp, #16]
 8029532:	7823      	ldrb	r3, [r4, #0]
 8029534:	2b2e      	cmp	r3, #46	; 0x2e
 8029536:	d10c      	bne.n	8029552 <_vfiprintf_r+0x176>
 8029538:	7863      	ldrb	r3, [r4, #1]
 802953a:	2b2a      	cmp	r3, #42	; 0x2a
 802953c:	d135      	bne.n	80295aa <_vfiprintf_r+0x1ce>
 802953e:	9b03      	ldr	r3, [sp, #12]
 8029540:	3402      	adds	r4, #2
 8029542:	1d1a      	adds	r2, r3, #4
 8029544:	681b      	ldr	r3, [r3, #0]
 8029546:	2b00      	cmp	r3, #0
 8029548:	9203      	str	r2, [sp, #12]
 802954a:	bfb8      	it	lt
 802954c:	f04f 33ff 	movlt.w	r3, #4294967295
 8029550:	9305      	str	r3, [sp, #20]
 8029552:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8029638 <_vfiprintf_r+0x25c>
 8029556:	2203      	movs	r2, #3
 8029558:	7821      	ldrb	r1, [r4, #0]
 802955a:	4650      	mov	r0, sl
 802955c:	f000 fe66 	bl	802a22c <memchr>
 8029560:	b140      	cbz	r0, 8029574 <_vfiprintf_r+0x198>
 8029562:	2340      	movs	r3, #64	; 0x40
 8029564:	eba0 000a 	sub.w	r0, r0, sl
 8029568:	3401      	adds	r4, #1
 802956a:	fa03 f000 	lsl.w	r0, r3, r0
 802956e:	9b04      	ldr	r3, [sp, #16]
 8029570:	4303      	orrs	r3, r0
 8029572:	9304      	str	r3, [sp, #16]
 8029574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029578:	2206      	movs	r2, #6
 802957a:	482c      	ldr	r0, [pc, #176]	; (802962c <_vfiprintf_r+0x250>)
 802957c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8029580:	f000 fe54 	bl	802a22c <memchr>
 8029584:	2800      	cmp	r0, #0
 8029586:	d03f      	beq.n	8029608 <_vfiprintf_r+0x22c>
 8029588:	4b29      	ldr	r3, [pc, #164]	; (8029630 <_vfiprintf_r+0x254>)
 802958a:	bb1b      	cbnz	r3, 80295d4 <_vfiprintf_r+0x1f8>
 802958c:	9b03      	ldr	r3, [sp, #12]
 802958e:	3307      	adds	r3, #7
 8029590:	f023 0307 	bic.w	r3, r3, #7
 8029594:	3308      	adds	r3, #8
 8029596:	9303      	str	r3, [sp, #12]
 8029598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802959a:	443b      	add	r3, r7
 802959c:	9309      	str	r3, [sp, #36]	; 0x24
 802959e:	e767      	b.n	8029470 <_vfiprintf_r+0x94>
 80295a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80295a4:	460c      	mov	r4, r1
 80295a6:	2001      	movs	r0, #1
 80295a8:	e7a5      	b.n	80294f6 <_vfiprintf_r+0x11a>
 80295aa:	2300      	movs	r3, #0
 80295ac:	3401      	adds	r4, #1
 80295ae:	f04f 0c0a 	mov.w	ip, #10
 80295b2:	4619      	mov	r1, r3
 80295b4:	9305      	str	r3, [sp, #20]
 80295b6:	4620      	mov	r0, r4
 80295b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80295bc:	3a30      	subs	r2, #48	; 0x30
 80295be:	2a09      	cmp	r2, #9
 80295c0:	d903      	bls.n	80295ca <_vfiprintf_r+0x1ee>
 80295c2:	2b00      	cmp	r3, #0
 80295c4:	d0c5      	beq.n	8029552 <_vfiprintf_r+0x176>
 80295c6:	9105      	str	r1, [sp, #20]
 80295c8:	e7c3      	b.n	8029552 <_vfiprintf_r+0x176>
 80295ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80295ce:	4604      	mov	r4, r0
 80295d0:	2301      	movs	r3, #1
 80295d2:	e7f0      	b.n	80295b6 <_vfiprintf_r+0x1da>
 80295d4:	ab03      	add	r3, sp, #12
 80295d6:	462a      	mov	r2, r5
 80295d8:	a904      	add	r1, sp, #16
 80295da:	4630      	mov	r0, r6
 80295dc:	9300      	str	r3, [sp, #0]
 80295de:	4b15      	ldr	r3, [pc, #84]	; (8029634 <_vfiprintf_r+0x258>)
 80295e0:	e000      	b.n	80295e4 <_vfiprintf_r+0x208>
 80295e2:	bf00      	nop
 80295e4:	4607      	mov	r7, r0
 80295e6:	1c78      	adds	r0, r7, #1
 80295e8:	d1d6      	bne.n	8029598 <_vfiprintf_r+0x1bc>
 80295ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80295ec:	07d9      	lsls	r1, r3, #31
 80295ee:	d405      	bmi.n	80295fc <_vfiprintf_r+0x220>
 80295f0:	89ab      	ldrh	r3, [r5, #12]
 80295f2:	059a      	lsls	r2, r3, #22
 80295f4:	d402      	bmi.n	80295fc <_vfiprintf_r+0x220>
 80295f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80295f8:	f000 fdb2 	bl	802a160 <__retarget_lock_release_recursive>
 80295fc:	89ab      	ldrh	r3, [r5, #12]
 80295fe:	065b      	lsls	r3, r3, #25
 8029600:	f53f af12 	bmi.w	8029428 <_vfiprintf_r+0x4c>
 8029604:	9809      	ldr	r0, [sp, #36]	; 0x24
 8029606:	e711      	b.n	802942c <_vfiprintf_r+0x50>
 8029608:	ab03      	add	r3, sp, #12
 802960a:	462a      	mov	r2, r5
 802960c:	a904      	add	r1, sp, #16
 802960e:	4630      	mov	r0, r6
 8029610:	9300      	str	r3, [sp, #0]
 8029612:	4b08      	ldr	r3, [pc, #32]	; (8029634 <_vfiprintf_r+0x258>)
 8029614:	f000 f882 	bl	802971c <_printf_i>
 8029618:	e7e4      	b.n	80295e4 <_vfiprintf_r+0x208>
 802961a:	bf00      	nop
 802961c:	0802d3a4 	.word	0x0802d3a4
 8029620:	0802d3c4 	.word	0x0802d3c4
 8029624:	0802d384 	.word	0x0802d384
 8029628:	0802d2d8 	.word	0x0802d2d8
 802962c:	0802d2e2 	.word	0x0802d2e2
 8029630:	00000000 	.word	0x00000000
 8029634:	080293b7 	.word	0x080293b7
 8029638:	0802d2de 	.word	0x0802d2de

0802963c <_printf_common>:
 802963c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029640:	4616      	mov	r6, r2
 8029642:	4699      	mov	r9, r3
 8029644:	688a      	ldr	r2, [r1, #8]
 8029646:	4607      	mov	r7, r0
 8029648:	690b      	ldr	r3, [r1, #16]
 802964a:	460c      	mov	r4, r1
 802964c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8029650:	4293      	cmp	r3, r2
 8029652:	bfb8      	it	lt
 8029654:	4613      	movlt	r3, r2
 8029656:	6033      	str	r3, [r6, #0]
 8029658:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802965c:	b10a      	cbz	r2, 8029662 <_printf_common+0x26>
 802965e:	3301      	adds	r3, #1
 8029660:	6033      	str	r3, [r6, #0]
 8029662:	6823      	ldr	r3, [r4, #0]
 8029664:	0699      	lsls	r1, r3, #26
 8029666:	bf42      	ittt	mi
 8029668:	6833      	ldrmi	r3, [r6, #0]
 802966a:	3302      	addmi	r3, #2
 802966c:	6033      	strmi	r3, [r6, #0]
 802966e:	6825      	ldr	r5, [r4, #0]
 8029670:	f015 0506 	ands.w	r5, r5, #6
 8029674:	d106      	bne.n	8029684 <_printf_common+0x48>
 8029676:	f104 0a19 	add.w	sl, r4, #25
 802967a:	68e3      	ldr	r3, [r4, #12]
 802967c:	6832      	ldr	r2, [r6, #0]
 802967e:	1a9b      	subs	r3, r3, r2
 8029680:	42ab      	cmp	r3, r5
 8029682:	dc29      	bgt.n	80296d8 <_printf_common+0x9c>
 8029684:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8029688:	1e13      	subs	r3, r2, #0
 802968a:	6822      	ldr	r2, [r4, #0]
 802968c:	bf18      	it	ne
 802968e:	2301      	movne	r3, #1
 8029690:	0692      	lsls	r2, r2, #26
 8029692:	d42e      	bmi.n	80296f2 <_printf_common+0xb6>
 8029694:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8029698:	4649      	mov	r1, r9
 802969a:	4638      	mov	r0, r7
 802969c:	47c0      	blx	r8
 802969e:	3001      	adds	r0, #1
 80296a0:	d021      	beq.n	80296e6 <_printf_common+0xaa>
 80296a2:	6823      	ldr	r3, [r4, #0]
 80296a4:	341a      	adds	r4, #26
 80296a6:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 80296aa:	f003 0306 	and.w	r3, r3, #6
 80296ae:	6832      	ldr	r2, [r6, #0]
 80296b0:	2600      	movs	r6, #0
 80296b2:	2b04      	cmp	r3, #4
 80296b4:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80296b8:	bf08      	it	eq
 80296ba:	1aad      	subeq	r5, r5, r2
 80296bc:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80296c0:	bf14      	ite	ne
 80296c2:	2500      	movne	r5, #0
 80296c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80296c8:	4293      	cmp	r3, r2
 80296ca:	bfc4      	itt	gt
 80296cc:	1a9b      	subgt	r3, r3, r2
 80296ce:	18ed      	addgt	r5, r5, r3
 80296d0:	42b5      	cmp	r5, r6
 80296d2:	d11a      	bne.n	802970a <_printf_common+0xce>
 80296d4:	2000      	movs	r0, #0
 80296d6:	e008      	b.n	80296ea <_printf_common+0xae>
 80296d8:	2301      	movs	r3, #1
 80296da:	4652      	mov	r2, sl
 80296dc:	4649      	mov	r1, r9
 80296de:	4638      	mov	r0, r7
 80296e0:	47c0      	blx	r8
 80296e2:	3001      	adds	r0, #1
 80296e4:	d103      	bne.n	80296ee <_printf_common+0xb2>
 80296e6:	f04f 30ff 	mov.w	r0, #4294967295
 80296ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80296ee:	3501      	adds	r5, #1
 80296f0:	e7c3      	b.n	802967a <_printf_common+0x3e>
 80296f2:	18e1      	adds	r1, r4, r3
 80296f4:	1c5a      	adds	r2, r3, #1
 80296f6:	2030      	movs	r0, #48	; 0x30
 80296f8:	3302      	adds	r3, #2
 80296fa:	4422      	add	r2, r4
 80296fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8029700:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8029704:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8029708:	e7c4      	b.n	8029694 <_printf_common+0x58>
 802970a:	2301      	movs	r3, #1
 802970c:	4622      	mov	r2, r4
 802970e:	4649      	mov	r1, r9
 8029710:	4638      	mov	r0, r7
 8029712:	47c0      	blx	r8
 8029714:	3001      	adds	r0, #1
 8029716:	d0e6      	beq.n	80296e6 <_printf_common+0xaa>
 8029718:	3601      	adds	r6, #1
 802971a:	e7d9      	b.n	80296d0 <_printf_common+0x94>

0802971c <_printf_i>:
 802971c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8029720:	7e0f      	ldrb	r7, [r1, #24]
 8029722:	4691      	mov	r9, r2
 8029724:	4680      	mov	r8, r0
 8029726:	460c      	mov	r4, r1
 8029728:	2f78      	cmp	r7, #120	; 0x78
 802972a:	469a      	mov	sl, r3
 802972c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802972e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8029732:	d807      	bhi.n	8029744 <_printf_i+0x28>
 8029734:	2f62      	cmp	r7, #98	; 0x62
 8029736:	d80a      	bhi.n	802974e <_printf_i+0x32>
 8029738:	2f00      	cmp	r7, #0
 802973a:	f000 80d8 	beq.w	80298ee <_printf_i+0x1d2>
 802973e:	2f58      	cmp	r7, #88	; 0x58
 8029740:	f000 80a3 	beq.w	802988a <_printf_i+0x16e>
 8029744:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8029748:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802974c:	e03a      	b.n	80297c4 <_printf_i+0xa8>
 802974e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8029752:	2b15      	cmp	r3, #21
 8029754:	d8f6      	bhi.n	8029744 <_printf_i+0x28>
 8029756:	a101      	add	r1, pc, #4	; (adr r1, 802975c <_printf_i+0x40>)
 8029758:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802975c:	080297b5 	.word	0x080297b5
 8029760:	080297c9 	.word	0x080297c9
 8029764:	08029745 	.word	0x08029745
 8029768:	08029745 	.word	0x08029745
 802976c:	08029745 	.word	0x08029745
 8029770:	08029745 	.word	0x08029745
 8029774:	080297c9 	.word	0x080297c9
 8029778:	08029745 	.word	0x08029745
 802977c:	08029745 	.word	0x08029745
 8029780:	08029745 	.word	0x08029745
 8029784:	08029745 	.word	0x08029745
 8029788:	080298d5 	.word	0x080298d5
 802978c:	080297f9 	.word	0x080297f9
 8029790:	080298b7 	.word	0x080298b7
 8029794:	08029745 	.word	0x08029745
 8029798:	08029745 	.word	0x08029745
 802979c:	080298f7 	.word	0x080298f7
 80297a0:	08029745 	.word	0x08029745
 80297a4:	080297f9 	.word	0x080297f9
 80297a8:	08029745 	.word	0x08029745
 80297ac:	08029745 	.word	0x08029745
 80297b0:	080298bf 	.word	0x080298bf
 80297b4:	682b      	ldr	r3, [r5, #0]
 80297b6:	1d1a      	adds	r2, r3, #4
 80297b8:	681b      	ldr	r3, [r3, #0]
 80297ba:	602a      	str	r2, [r5, #0]
 80297bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80297c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80297c4:	2301      	movs	r3, #1
 80297c6:	e0a3      	b.n	8029910 <_printf_i+0x1f4>
 80297c8:	6820      	ldr	r0, [r4, #0]
 80297ca:	6829      	ldr	r1, [r5, #0]
 80297cc:	0606      	lsls	r6, r0, #24
 80297ce:	f101 0304 	add.w	r3, r1, #4
 80297d2:	d50a      	bpl.n	80297ea <_printf_i+0xce>
 80297d4:	680e      	ldr	r6, [r1, #0]
 80297d6:	602b      	str	r3, [r5, #0]
 80297d8:	2e00      	cmp	r6, #0
 80297da:	da03      	bge.n	80297e4 <_printf_i+0xc8>
 80297dc:	232d      	movs	r3, #45	; 0x2d
 80297de:	4276      	negs	r6, r6
 80297e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80297e4:	485e      	ldr	r0, [pc, #376]	; (8029960 <_printf_i+0x244>)
 80297e6:	230a      	movs	r3, #10
 80297e8:	e019      	b.n	802981e <_printf_i+0x102>
 80297ea:	680e      	ldr	r6, [r1, #0]
 80297ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80297f0:	602b      	str	r3, [r5, #0]
 80297f2:	bf18      	it	ne
 80297f4:	b236      	sxthne	r6, r6
 80297f6:	e7ef      	b.n	80297d8 <_printf_i+0xbc>
 80297f8:	682b      	ldr	r3, [r5, #0]
 80297fa:	6820      	ldr	r0, [r4, #0]
 80297fc:	1d19      	adds	r1, r3, #4
 80297fe:	6029      	str	r1, [r5, #0]
 8029800:	0601      	lsls	r1, r0, #24
 8029802:	d501      	bpl.n	8029808 <_printf_i+0xec>
 8029804:	681e      	ldr	r6, [r3, #0]
 8029806:	e002      	b.n	802980e <_printf_i+0xf2>
 8029808:	0646      	lsls	r6, r0, #25
 802980a:	d5fb      	bpl.n	8029804 <_printf_i+0xe8>
 802980c:	881e      	ldrh	r6, [r3, #0]
 802980e:	2f6f      	cmp	r7, #111	; 0x6f
 8029810:	4853      	ldr	r0, [pc, #332]	; (8029960 <_printf_i+0x244>)
 8029812:	bf0c      	ite	eq
 8029814:	2308      	moveq	r3, #8
 8029816:	230a      	movne	r3, #10
 8029818:	2100      	movs	r1, #0
 802981a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802981e:	6865      	ldr	r5, [r4, #4]
 8029820:	2d00      	cmp	r5, #0
 8029822:	60a5      	str	r5, [r4, #8]
 8029824:	bfa2      	ittt	ge
 8029826:	6821      	ldrge	r1, [r4, #0]
 8029828:	f021 0104 	bicge.w	r1, r1, #4
 802982c:	6021      	strge	r1, [r4, #0]
 802982e:	b90e      	cbnz	r6, 8029834 <_printf_i+0x118>
 8029830:	2d00      	cmp	r5, #0
 8029832:	d04d      	beq.n	80298d0 <_printf_i+0x1b4>
 8029834:	4615      	mov	r5, r2
 8029836:	fbb6 f1f3 	udiv	r1, r6, r3
 802983a:	fb03 6711 	mls	r7, r3, r1, r6
 802983e:	5dc7      	ldrb	r7, [r0, r7]
 8029840:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8029844:	4637      	mov	r7, r6
 8029846:	460e      	mov	r6, r1
 8029848:	42bb      	cmp	r3, r7
 802984a:	d9f4      	bls.n	8029836 <_printf_i+0x11a>
 802984c:	2b08      	cmp	r3, #8
 802984e:	d10b      	bne.n	8029868 <_printf_i+0x14c>
 8029850:	6823      	ldr	r3, [r4, #0]
 8029852:	07de      	lsls	r6, r3, #31
 8029854:	d508      	bpl.n	8029868 <_printf_i+0x14c>
 8029856:	6923      	ldr	r3, [r4, #16]
 8029858:	6861      	ldr	r1, [r4, #4]
 802985a:	4299      	cmp	r1, r3
 802985c:	bfde      	ittt	le
 802985e:	2330      	movle	r3, #48	; 0x30
 8029860:	f805 3c01 	strble.w	r3, [r5, #-1]
 8029864:	f105 35ff 	addle.w	r5, r5, #4294967295
 8029868:	1b52      	subs	r2, r2, r5
 802986a:	6122      	str	r2, [r4, #16]
 802986c:	464b      	mov	r3, r9
 802986e:	aa03      	add	r2, sp, #12
 8029870:	4621      	mov	r1, r4
 8029872:	4640      	mov	r0, r8
 8029874:	f8cd a000 	str.w	sl, [sp]
 8029878:	f7ff fee0 	bl	802963c <_printf_common>
 802987c:	3001      	adds	r0, #1
 802987e:	d14c      	bne.n	802991a <_printf_i+0x1fe>
 8029880:	f04f 30ff 	mov.w	r0, #4294967295
 8029884:	b004      	add	sp, #16
 8029886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802988a:	4835      	ldr	r0, [pc, #212]	; (8029960 <_printf_i+0x244>)
 802988c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8029890:	6829      	ldr	r1, [r5, #0]
 8029892:	6823      	ldr	r3, [r4, #0]
 8029894:	f851 6b04 	ldr.w	r6, [r1], #4
 8029898:	6029      	str	r1, [r5, #0]
 802989a:	061d      	lsls	r5, r3, #24
 802989c:	d514      	bpl.n	80298c8 <_printf_i+0x1ac>
 802989e:	07df      	lsls	r7, r3, #31
 80298a0:	bf44      	itt	mi
 80298a2:	f043 0320 	orrmi.w	r3, r3, #32
 80298a6:	6023      	strmi	r3, [r4, #0]
 80298a8:	b91e      	cbnz	r6, 80298b2 <_printf_i+0x196>
 80298aa:	6823      	ldr	r3, [r4, #0]
 80298ac:	f023 0320 	bic.w	r3, r3, #32
 80298b0:	6023      	str	r3, [r4, #0]
 80298b2:	2310      	movs	r3, #16
 80298b4:	e7b0      	b.n	8029818 <_printf_i+0xfc>
 80298b6:	6823      	ldr	r3, [r4, #0]
 80298b8:	f043 0320 	orr.w	r3, r3, #32
 80298bc:	6023      	str	r3, [r4, #0]
 80298be:	2378      	movs	r3, #120	; 0x78
 80298c0:	4828      	ldr	r0, [pc, #160]	; (8029964 <_printf_i+0x248>)
 80298c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80298c6:	e7e3      	b.n	8029890 <_printf_i+0x174>
 80298c8:	0659      	lsls	r1, r3, #25
 80298ca:	bf48      	it	mi
 80298cc:	b2b6      	uxthmi	r6, r6
 80298ce:	e7e6      	b.n	802989e <_printf_i+0x182>
 80298d0:	4615      	mov	r5, r2
 80298d2:	e7bb      	b.n	802984c <_printf_i+0x130>
 80298d4:	682b      	ldr	r3, [r5, #0]
 80298d6:	6826      	ldr	r6, [r4, #0]
 80298d8:	1d18      	adds	r0, r3, #4
 80298da:	6961      	ldr	r1, [r4, #20]
 80298dc:	6028      	str	r0, [r5, #0]
 80298de:	0635      	lsls	r5, r6, #24
 80298e0:	681b      	ldr	r3, [r3, #0]
 80298e2:	d501      	bpl.n	80298e8 <_printf_i+0x1cc>
 80298e4:	6019      	str	r1, [r3, #0]
 80298e6:	e002      	b.n	80298ee <_printf_i+0x1d2>
 80298e8:	0670      	lsls	r0, r6, #25
 80298ea:	d5fb      	bpl.n	80298e4 <_printf_i+0x1c8>
 80298ec:	8019      	strh	r1, [r3, #0]
 80298ee:	2300      	movs	r3, #0
 80298f0:	4615      	mov	r5, r2
 80298f2:	6123      	str	r3, [r4, #16]
 80298f4:	e7ba      	b.n	802986c <_printf_i+0x150>
 80298f6:	682b      	ldr	r3, [r5, #0]
 80298f8:	2100      	movs	r1, #0
 80298fa:	1d1a      	adds	r2, r3, #4
 80298fc:	602a      	str	r2, [r5, #0]
 80298fe:	681d      	ldr	r5, [r3, #0]
 8029900:	6862      	ldr	r2, [r4, #4]
 8029902:	4628      	mov	r0, r5
 8029904:	f000 fc92 	bl	802a22c <memchr>
 8029908:	b108      	cbz	r0, 802990e <_printf_i+0x1f2>
 802990a:	1b40      	subs	r0, r0, r5
 802990c:	6060      	str	r0, [r4, #4]
 802990e:	6863      	ldr	r3, [r4, #4]
 8029910:	6123      	str	r3, [r4, #16]
 8029912:	2300      	movs	r3, #0
 8029914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8029918:	e7a8      	b.n	802986c <_printf_i+0x150>
 802991a:	6923      	ldr	r3, [r4, #16]
 802991c:	462a      	mov	r2, r5
 802991e:	4649      	mov	r1, r9
 8029920:	4640      	mov	r0, r8
 8029922:	47d0      	blx	sl
 8029924:	3001      	adds	r0, #1
 8029926:	d0ab      	beq.n	8029880 <_printf_i+0x164>
 8029928:	6823      	ldr	r3, [r4, #0]
 802992a:	079b      	lsls	r3, r3, #30
 802992c:	d413      	bmi.n	8029956 <_printf_i+0x23a>
 802992e:	68e0      	ldr	r0, [r4, #12]
 8029930:	9b03      	ldr	r3, [sp, #12]
 8029932:	4298      	cmp	r0, r3
 8029934:	bfb8      	it	lt
 8029936:	4618      	movlt	r0, r3
 8029938:	e7a4      	b.n	8029884 <_printf_i+0x168>
 802993a:	2301      	movs	r3, #1
 802993c:	4632      	mov	r2, r6
 802993e:	4649      	mov	r1, r9
 8029940:	4640      	mov	r0, r8
 8029942:	47d0      	blx	sl
 8029944:	3001      	adds	r0, #1
 8029946:	d09b      	beq.n	8029880 <_printf_i+0x164>
 8029948:	3501      	adds	r5, #1
 802994a:	68e3      	ldr	r3, [r4, #12]
 802994c:	9903      	ldr	r1, [sp, #12]
 802994e:	1a5b      	subs	r3, r3, r1
 8029950:	42ab      	cmp	r3, r5
 8029952:	dcf2      	bgt.n	802993a <_printf_i+0x21e>
 8029954:	e7eb      	b.n	802992e <_printf_i+0x212>
 8029956:	2500      	movs	r5, #0
 8029958:	f104 0619 	add.w	r6, r4, #25
 802995c:	e7f5      	b.n	802994a <_printf_i+0x22e>
 802995e:	bf00      	nop
 8029960:	0802d2e9 	.word	0x0802d2e9
 8029964:	0802d2fa 	.word	0x0802d2fa

08029968 <iprintf>:
 8029968:	b40f      	push	{r0, r1, r2, r3}
 802996a:	4b0a      	ldr	r3, [pc, #40]	; (8029994 <iprintf+0x2c>)
 802996c:	b513      	push	{r0, r1, r4, lr}
 802996e:	681c      	ldr	r4, [r3, #0]
 8029970:	b124      	cbz	r4, 802997c <iprintf+0x14>
 8029972:	69a3      	ldr	r3, [r4, #24]
 8029974:	b913      	cbnz	r3, 802997c <iprintf+0x14>
 8029976:	4620      	mov	r0, r4
 8029978:	f000 fb52 	bl	802a020 <__sinit>
 802997c:	ab05      	add	r3, sp, #20
 802997e:	9a04      	ldr	r2, [sp, #16]
 8029980:	68a1      	ldr	r1, [r4, #8]
 8029982:	4620      	mov	r0, r4
 8029984:	9301      	str	r3, [sp, #4]
 8029986:	f7ff fd29 	bl	80293dc <_vfiprintf_r>
 802998a:	b002      	add	sp, #8
 802998c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029990:	b004      	add	sp, #16
 8029992:	4770      	bx	lr
 8029994:	200000c4 	.word	0x200000c4

08029998 <_puts_r>:
 8029998:	b570      	push	{r4, r5, r6, lr}
 802999a:	460e      	mov	r6, r1
 802999c:	4605      	mov	r5, r0
 802999e:	b118      	cbz	r0, 80299a8 <_puts_r+0x10>
 80299a0:	6983      	ldr	r3, [r0, #24]
 80299a2:	b90b      	cbnz	r3, 80299a8 <_puts_r+0x10>
 80299a4:	f000 fb3c 	bl	802a020 <__sinit>
 80299a8:	69ab      	ldr	r3, [r5, #24]
 80299aa:	68ac      	ldr	r4, [r5, #8]
 80299ac:	b913      	cbnz	r3, 80299b4 <_puts_r+0x1c>
 80299ae:	4628      	mov	r0, r5
 80299b0:	f000 fb36 	bl	802a020 <__sinit>
 80299b4:	4b2c      	ldr	r3, [pc, #176]	; (8029a68 <_puts_r+0xd0>)
 80299b6:	429c      	cmp	r4, r3
 80299b8:	d120      	bne.n	80299fc <_puts_r+0x64>
 80299ba:	686c      	ldr	r4, [r5, #4]
 80299bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80299be:	07db      	lsls	r3, r3, #31
 80299c0:	d405      	bmi.n	80299ce <_puts_r+0x36>
 80299c2:	89a3      	ldrh	r3, [r4, #12]
 80299c4:	0598      	lsls	r0, r3, #22
 80299c6:	d402      	bmi.n	80299ce <_puts_r+0x36>
 80299c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80299ca:	f000 fbc7 	bl	802a15c <__retarget_lock_acquire_recursive>
 80299ce:	89a3      	ldrh	r3, [r4, #12]
 80299d0:	0719      	lsls	r1, r3, #28
 80299d2:	d51d      	bpl.n	8029a10 <_puts_r+0x78>
 80299d4:	6923      	ldr	r3, [r4, #16]
 80299d6:	b1db      	cbz	r3, 8029a10 <_puts_r+0x78>
 80299d8:	3e01      	subs	r6, #1
 80299da:	68a3      	ldr	r3, [r4, #8]
 80299dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80299e0:	3b01      	subs	r3, #1
 80299e2:	60a3      	str	r3, [r4, #8]
 80299e4:	bb39      	cbnz	r1, 8029a36 <_puts_r+0x9e>
 80299e6:	2b00      	cmp	r3, #0
 80299e8:	da38      	bge.n	8029a5c <_puts_r+0xc4>
 80299ea:	4622      	mov	r2, r4
 80299ec:	210a      	movs	r1, #10
 80299ee:	4628      	mov	r0, r5
 80299f0:	f000 f8da 	bl	8029ba8 <__swbuf_r>
 80299f4:	3001      	adds	r0, #1
 80299f6:	d011      	beq.n	8029a1c <_puts_r+0x84>
 80299f8:	250a      	movs	r5, #10
 80299fa:	e011      	b.n	8029a20 <_puts_r+0x88>
 80299fc:	4b1b      	ldr	r3, [pc, #108]	; (8029a6c <_puts_r+0xd4>)
 80299fe:	429c      	cmp	r4, r3
 8029a00:	d101      	bne.n	8029a06 <_puts_r+0x6e>
 8029a02:	68ac      	ldr	r4, [r5, #8]
 8029a04:	e7da      	b.n	80299bc <_puts_r+0x24>
 8029a06:	4b1a      	ldr	r3, [pc, #104]	; (8029a70 <_puts_r+0xd8>)
 8029a08:	429c      	cmp	r4, r3
 8029a0a:	bf08      	it	eq
 8029a0c:	68ec      	ldreq	r4, [r5, #12]
 8029a0e:	e7d5      	b.n	80299bc <_puts_r+0x24>
 8029a10:	4621      	mov	r1, r4
 8029a12:	4628      	mov	r0, r5
 8029a14:	f000 f91a 	bl	8029c4c <__swsetup_r>
 8029a18:	2800      	cmp	r0, #0
 8029a1a:	d0dd      	beq.n	80299d8 <_puts_r+0x40>
 8029a1c:	f04f 35ff 	mov.w	r5, #4294967295
 8029a20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8029a22:	07da      	lsls	r2, r3, #31
 8029a24:	d405      	bmi.n	8029a32 <_puts_r+0x9a>
 8029a26:	89a3      	ldrh	r3, [r4, #12]
 8029a28:	059b      	lsls	r3, r3, #22
 8029a2a:	d402      	bmi.n	8029a32 <_puts_r+0x9a>
 8029a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8029a2e:	f000 fb97 	bl	802a160 <__retarget_lock_release_recursive>
 8029a32:	4628      	mov	r0, r5
 8029a34:	bd70      	pop	{r4, r5, r6, pc}
 8029a36:	2b00      	cmp	r3, #0
 8029a38:	da04      	bge.n	8029a44 <_puts_r+0xac>
 8029a3a:	69a2      	ldr	r2, [r4, #24]
 8029a3c:	429a      	cmp	r2, r3
 8029a3e:	dc06      	bgt.n	8029a4e <_puts_r+0xb6>
 8029a40:	290a      	cmp	r1, #10
 8029a42:	d004      	beq.n	8029a4e <_puts_r+0xb6>
 8029a44:	6823      	ldr	r3, [r4, #0]
 8029a46:	1c5a      	adds	r2, r3, #1
 8029a48:	6022      	str	r2, [r4, #0]
 8029a4a:	7019      	strb	r1, [r3, #0]
 8029a4c:	e7c5      	b.n	80299da <_puts_r+0x42>
 8029a4e:	4622      	mov	r2, r4
 8029a50:	4628      	mov	r0, r5
 8029a52:	f000 f8a9 	bl	8029ba8 <__swbuf_r>
 8029a56:	3001      	adds	r0, #1
 8029a58:	d1bf      	bne.n	80299da <_puts_r+0x42>
 8029a5a:	e7df      	b.n	8029a1c <_puts_r+0x84>
 8029a5c:	6823      	ldr	r3, [r4, #0]
 8029a5e:	250a      	movs	r5, #10
 8029a60:	1c5a      	adds	r2, r3, #1
 8029a62:	6022      	str	r2, [r4, #0]
 8029a64:	701d      	strb	r5, [r3, #0]
 8029a66:	e7db      	b.n	8029a20 <_puts_r+0x88>
 8029a68:	0802d3a4 	.word	0x0802d3a4
 8029a6c:	0802d3c4 	.word	0x0802d3c4
 8029a70:	0802d384 	.word	0x0802d384

08029a74 <puts>:
 8029a74:	4b02      	ldr	r3, [pc, #8]	; (8029a80 <puts+0xc>)
 8029a76:	4601      	mov	r1, r0
 8029a78:	6818      	ldr	r0, [r3, #0]
 8029a7a:	f7ff bf8d 	b.w	8029998 <_puts_r>
 8029a7e:	bf00      	nop
 8029a80:	200000c4 	.word	0x200000c4

08029a84 <rand>:
 8029a84:	4b16      	ldr	r3, [pc, #88]	; (8029ae0 <rand+0x5c>)
 8029a86:	b510      	push	{r4, lr}
 8029a88:	681c      	ldr	r4, [r3, #0]
 8029a8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8029a8c:	b9b3      	cbnz	r3, 8029abc <rand+0x38>
 8029a8e:	2018      	movs	r0, #24
 8029a90:	f7ff fb82 	bl	8029198 <malloc>
 8029a94:	63a0      	str	r0, [r4, #56]	; 0x38
 8029a96:	b928      	cbnz	r0, 8029aa4 <rand+0x20>
 8029a98:	4602      	mov	r2, r0
 8029a9a:	4b12      	ldr	r3, [pc, #72]	; (8029ae4 <rand+0x60>)
 8029a9c:	214e      	movs	r1, #78	; 0x4e
 8029a9e:	4812      	ldr	r0, [pc, #72]	; (8029ae8 <rand+0x64>)
 8029aa0:	f7ff fb0c 	bl	80290bc <__assert_func>
 8029aa4:	4a11      	ldr	r2, [pc, #68]	; (8029aec <rand+0x68>)
 8029aa6:	4b12      	ldr	r3, [pc, #72]	; (8029af0 <rand+0x6c>)
 8029aa8:	e9c0 2300 	strd	r2, r3, [r0]
 8029aac:	4b11      	ldr	r3, [pc, #68]	; (8029af4 <rand+0x70>)
 8029aae:	2201      	movs	r2, #1
 8029ab0:	6083      	str	r3, [r0, #8]
 8029ab2:	230b      	movs	r3, #11
 8029ab4:	8183      	strh	r3, [r0, #12]
 8029ab6:	2300      	movs	r3, #0
 8029ab8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8029abc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8029abe:	4a0e      	ldr	r2, [pc, #56]	; (8029af8 <rand+0x74>)
 8029ac0:	6920      	ldr	r0, [r4, #16]
 8029ac2:	6963      	ldr	r3, [r4, #20]
 8029ac4:	490d      	ldr	r1, [pc, #52]	; (8029afc <rand+0x78>)
 8029ac6:	4342      	muls	r2, r0
 8029ac8:	fb01 2203 	mla	r2, r1, r3, r2
 8029acc:	fba0 0101 	umull	r0, r1, r0, r1
 8029ad0:	1c43      	adds	r3, r0, #1
 8029ad2:	eb42 0001 	adc.w	r0, r2, r1
 8029ad6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8029ada:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8029ade:	bd10      	pop	{r4, pc}
 8029ae0:	200000c4 	.word	0x200000c4
 8029ae4:	0802d310 	.word	0x0802d310
 8029ae8:	0802d327 	.word	0x0802d327
 8029aec:	abcd330e 	.word	0xabcd330e
 8029af0:	e66d1234 	.word	0xe66d1234
 8029af4:	0005deec 	.word	0x0005deec
 8029af8:	5851f42d 	.word	0x5851f42d
 8029afc:	4c957f2d 	.word	0x4c957f2d

08029b00 <_sbrk_r>:
 8029b00:	b538      	push	{r3, r4, r5, lr}
 8029b02:	2300      	movs	r3, #0
 8029b04:	4d05      	ldr	r5, [pc, #20]	; (8029b1c <_sbrk_r+0x1c>)
 8029b06:	4604      	mov	r4, r0
 8029b08:	4608      	mov	r0, r1
 8029b0a:	602b      	str	r3, [r5, #0]
 8029b0c:	f7d8 fa7a 	bl	8002004 <_sbrk>
 8029b10:	1c43      	adds	r3, r0, #1
 8029b12:	d102      	bne.n	8029b1a <_sbrk_r+0x1a>
 8029b14:	682b      	ldr	r3, [r5, #0]
 8029b16:	b103      	cbz	r3, 8029b1a <_sbrk_r+0x1a>
 8029b18:	6023      	str	r3, [r4, #0]
 8029b1a:	bd38      	pop	{r3, r4, r5, pc}
 8029b1c:	20197e20 	.word	0x20197e20

08029b20 <_raise_r>:
 8029b20:	291f      	cmp	r1, #31
 8029b22:	b538      	push	{r3, r4, r5, lr}
 8029b24:	4604      	mov	r4, r0
 8029b26:	460d      	mov	r5, r1
 8029b28:	d904      	bls.n	8029b34 <_raise_r+0x14>
 8029b2a:	2316      	movs	r3, #22
 8029b2c:	6003      	str	r3, [r0, #0]
 8029b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8029b32:	bd38      	pop	{r3, r4, r5, pc}
 8029b34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8029b36:	b112      	cbz	r2, 8029b3e <_raise_r+0x1e>
 8029b38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8029b3c:	b94b      	cbnz	r3, 8029b52 <_raise_r+0x32>
 8029b3e:	4620      	mov	r0, r4
 8029b40:	f000 f830 	bl	8029ba4 <_getpid_r>
 8029b44:	462a      	mov	r2, r5
 8029b46:	4601      	mov	r1, r0
 8029b48:	4620      	mov	r0, r4
 8029b4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029b4e:	f000 b817 	b.w	8029b80 <_kill_r>
 8029b52:	2b01      	cmp	r3, #1
 8029b54:	d00a      	beq.n	8029b6c <_raise_r+0x4c>
 8029b56:	1c59      	adds	r1, r3, #1
 8029b58:	d103      	bne.n	8029b62 <_raise_r+0x42>
 8029b5a:	2316      	movs	r3, #22
 8029b5c:	6003      	str	r3, [r0, #0]
 8029b5e:	2001      	movs	r0, #1
 8029b60:	e7e7      	b.n	8029b32 <_raise_r+0x12>
 8029b62:	2400      	movs	r4, #0
 8029b64:	4628      	mov	r0, r5
 8029b66:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8029b6a:	4798      	blx	r3
 8029b6c:	2000      	movs	r0, #0
 8029b6e:	e7e0      	b.n	8029b32 <_raise_r+0x12>

08029b70 <raise>:
 8029b70:	4b02      	ldr	r3, [pc, #8]	; (8029b7c <raise+0xc>)
 8029b72:	4601      	mov	r1, r0
 8029b74:	6818      	ldr	r0, [r3, #0]
 8029b76:	f7ff bfd3 	b.w	8029b20 <_raise_r>
 8029b7a:	bf00      	nop
 8029b7c:	200000c4 	.word	0x200000c4

08029b80 <_kill_r>:
 8029b80:	b538      	push	{r3, r4, r5, lr}
 8029b82:	2300      	movs	r3, #0
 8029b84:	4d06      	ldr	r5, [pc, #24]	; (8029ba0 <_kill_r+0x20>)
 8029b86:	4604      	mov	r4, r0
 8029b88:	4608      	mov	r0, r1
 8029b8a:	4611      	mov	r1, r2
 8029b8c:	602b      	str	r3, [r5, #0]
 8029b8e:	f7d8 f9b1 	bl	8001ef4 <_kill>
 8029b92:	1c43      	adds	r3, r0, #1
 8029b94:	d102      	bne.n	8029b9c <_kill_r+0x1c>
 8029b96:	682b      	ldr	r3, [r5, #0]
 8029b98:	b103      	cbz	r3, 8029b9c <_kill_r+0x1c>
 8029b9a:	6023      	str	r3, [r4, #0]
 8029b9c:	bd38      	pop	{r3, r4, r5, pc}
 8029b9e:	bf00      	nop
 8029ba0:	20197e20 	.word	0x20197e20

08029ba4 <_getpid_r>:
 8029ba4:	f7d8 b99e 	b.w	8001ee4 <_getpid>

08029ba8 <__swbuf_r>:
 8029ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029baa:	460e      	mov	r6, r1
 8029bac:	4614      	mov	r4, r2
 8029bae:	4605      	mov	r5, r0
 8029bb0:	b118      	cbz	r0, 8029bba <__swbuf_r+0x12>
 8029bb2:	6983      	ldr	r3, [r0, #24]
 8029bb4:	b90b      	cbnz	r3, 8029bba <__swbuf_r+0x12>
 8029bb6:	f000 fa33 	bl	802a020 <__sinit>
 8029bba:	4b21      	ldr	r3, [pc, #132]	; (8029c40 <__swbuf_r+0x98>)
 8029bbc:	429c      	cmp	r4, r3
 8029bbe:	d12b      	bne.n	8029c18 <__swbuf_r+0x70>
 8029bc0:	686c      	ldr	r4, [r5, #4]
 8029bc2:	69a3      	ldr	r3, [r4, #24]
 8029bc4:	60a3      	str	r3, [r4, #8]
 8029bc6:	89a3      	ldrh	r3, [r4, #12]
 8029bc8:	071a      	lsls	r2, r3, #28
 8029bca:	d52f      	bpl.n	8029c2c <__swbuf_r+0x84>
 8029bcc:	6923      	ldr	r3, [r4, #16]
 8029bce:	b36b      	cbz	r3, 8029c2c <__swbuf_r+0x84>
 8029bd0:	6923      	ldr	r3, [r4, #16]
 8029bd2:	b2f6      	uxtb	r6, r6
 8029bd4:	6820      	ldr	r0, [r4, #0]
 8029bd6:	4637      	mov	r7, r6
 8029bd8:	1ac0      	subs	r0, r0, r3
 8029bda:	6963      	ldr	r3, [r4, #20]
 8029bdc:	4283      	cmp	r3, r0
 8029bde:	dc04      	bgt.n	8029bea <__swbuf_r+0x42>
 8029be0:	4621      	mov	r1, r4
 8029be2:	4628      	mov	r0, r5
 8029be4:	f000 f988 	bl	8029ef8 <_fflush_r>
 8029be8:	bb30      	cbnz	r0, 8029c38 <__swbuf_r+0x90>
 8029bea:	68a3      	ldr	r3, [r4, #8]
 8029bec:	3001      	adds	r0, #1
 8029bee:	3b01      	subs	r3, #1
 8029bf0:	60a3      	str	r3, [r4, #8]
 8029bf2:	6823      	ldr	r3, [r4, #0]
 8029bf4:	1c5a      	adds	r2, r3, #1
 8029bf6:	6022      	str	r2, [r4, #0]
 8029bf8:	701e      	strb	r6, [r3, #0]
 8029bfa:	6963      	ldr	r3, [r4, #20]
 8029bfc:	4283      	cmp	r3, r0
 8029bfe:	d004      	beq.n	8029c0a <__swbuf_r+0x62>
 8029c00:	89a3      	ldrh	r3, [r4, #12]
 8029c02:	07db      	lsls	r3, r3, #31
 8029c04:	d506      	bpl.n	8029c14 <__swbuf_r+0x6c>
 8029c06:	2e0a      	cmp	r6, #10
 8029c08:	d104      	bne.n	8029c14 <__swbuf_r+0x6c>
 8029c0a:	4621      	mov	r1, r4
 8029c0c:	4628      	mov	r0, r5
 8029c0e:	f000 f973 	bl	8029ef8 <_fflush_r>
 8029c12:	b988      	cbnz	r0, 8029c38 <__swbuf_r+0x90>
 8029c14:	4638      	mov	r0, r7
 8029c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029c18:	4b0a      	ldr	r3, [pc, #40]	; (8029c44 <__swbuf_r+0x9c>)
 8029c1a:	429c      	cmp	r4, r3
 8029c1c:	d101      	bne.n	8029c22 <__swbuf_r+0x7a>
 8029c1e:	68ac      	ldr	r4, [r5, #8]
 8029c20:	e7cf      	b.n	8029bc2 <__swbuf_r+0x1a>
 8029c22:	4b09      	ldr	r3, [pc, #36]	; (8029c48 <__swbuf_r+0xa0>)
 8029c24:	429c      	cmp	r4, r3
 8029c26:	bf08      	it	eq
 8029c28:	68ec      	ldreq	r4, [r5, #12]
 8029c2a:	e7ca      	b.n	8029bc2 <__swbuf_r+0x1a>
 8029c2c:	4621      	mov	r1, r4
 8029c2e:	4628      	mov	r0, r5
 8029c30:	f000 f80c 	bl	8029c4c <__swsetup_r>
 8029c34:	2800      	cmp	r0, #0
 8029c36:	d0cb      	beq.n	8029bd0 <__swbuf_r+0x28>
 8029c38:	f04f 37ff 	mov.w	r7, #4294967295
 8029c3c:	e7ea      	b.n	8029c14 <__swbuf_r+0x6c>
 8029c3e:	bf00      	nop
 8029c40:	0802d3a4 	.word	0x0802d3a4
 8029c44:	0802d3c4 	.word	0x0802d3c4
 8029c48:	0802d384 	.word	0x0802d384

08029c4c <__swsetup_r>:
 8029c4c:	4b32      	ldr	r3, [pc, #200]	; (8029d18 <__swsetup_r+0xcc>)
 8029c4e:	b570      	push	{r4, r5, r6, lr}
 8029c50:	681d      	ldr	r5, [r3, #0]
 8029c52:	4606      	mov	r6, r0
 8029c54:	460c      	mov	r4, r1
 8029c56:	b125      	cbz	r5, 8029c62 <__swsetup_r+0x16>
 8029c58:	69ab      	ldr	r3, [r5, #24]
 8029c5a:	b913      	cbnz	r3, 8029c62 <__swsetup_r+0x16>
 8029c5c:	4628      	mov	r0, r5
 8029c5e:	f000 f9df 	bl	802a020 <__sinit>
 8029c62:	4b2e      	ldr	r3, [pc, #184]	; (8029d1c <__swsetup_r+0xd0>)
 8029c64:	429c      	cmp	r4, r3
 8029c66:	d10f      	bne.n	8029c88 <__swsetup_r+0x3c>
 8029c68:	686c      	ldr	r4, [r5, #4]
 8029c6a:	89a3      	ldrh	r3, [r4, #12]
 8029c6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029c70:	0719      	lsls	r1, r3, #28
 8029c72:	d42c      	bmi.n	8029cce <__swsetup_r+0x82>
 8029c74:	06dd      	lsls	r5, r3, #27
 8029c76:	d411      	bmi.n	8029c9c <__swsetup_r+0x50>
 8029c78:	2309      	movs	r3, #9
 8029c7a:	6033      	str	r3, [r6, #0]
 8029c7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8029c80:	f04f 30ff 	mov.w	r0, #4294967295
 8029c84:	81a3      	strh	r3, [r4, #12]
 8029c86:	e03e      	b.n	8029d06 <__swsetup_r+0xba>
 8029c88:	4b25      	ldr	r3, [pc, #148]	; (8029d20 <__swsetup_r+0xd4>)
 8029c8a:	429c      	cmp	r4, r3
 8029c8c:	d101      	bne.n	8029c92 <__swsetup_r+0x46>
 8029c8e:	68ac      	ldr	r4, [r5, #8]
 8029c90:	e7eb      	b.n	8029c6a <__swsetup_r+0x1e>
 8029c92:	4b24      	ldr	r3, [pc, #144]	; (8029d24 <__swsetup_r+0xd8>)
 8029c94:	429c      	cmp	r4, r3
 8029c96:	bf08      	it	eq
 8029c98:	68ec      	ldreq	r4, [r5, #12]
 8029c9a:	e7e6      	b.n	8029c6a <__swsetup_r+0x1e>
 8029c9c:	0758      	lsls	r0, r3, #29
 8029c9e:	d512      	bpl.n	8029cc6 <__swsetup_r+0x7a>
 8029ca0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8029ca2:	b141      	cbz	r1, 8029cb6 <__swsetup_r+0x6a>
 8029ca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029ca8:	4299      	cmp	r1, r3
 8029caa:	d002      	beq.n	8029cb2 <__swsetup_r+0x66>
 8029cac:	4630      	mov	r0, r6
 8029cae:	f7ff fa8b 	bl	80291c8 <_free_r>
 8029cb2:	2300      	movs	r3, #0
 8029cb4:	6363      	str	r3, [r4, #52]	; 0x34
 8029cb6:	89a3      	ldrh	r3, [r4, #12]
 8029cb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8029cbc:	81a3      	strh	r3, [r4, #12]
 8029cbe:	2300      	movs	r3, #0
 8029cc0:	6063      	str	r3, [r4, #4]
 8029cc2:	6923      	ldr	r3, [r4, #16]
 8029cc4:	6023      	str	r3, [r4, #0]
 8029cc6:	89a3      	ldrh	r3, [r4, #12]
 8029cc8:	f043 0308 	orr.w	r3, r3, #8
 8029ccc:	81a3      	strh	r3, [r4, #12]
 8029cce:	6923      	ldr	r3, [r4, #16]
 8029cd0:	b94b      	cbnz	r3, 8029ce6 <__swsetup_r+0x9a>
 8029cd2:	89a3      	ldrh	r3, [r4, #12]
 8029cd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8029cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8029cdc:	d003      	beq.n	8029ce6 <__swsetup_r+0x9a>
 8029cde:	4621      	mov	r1, r4
 8029ce0:	4630      	mov	r0, r6
 8029ce2:	f000 fa63 	bl	802a1ac <__smakebuf_r>
 8029ce6:	89a0      	ldrh	r0, [r4, #12]
 8029ce8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029cec:	f010 0301 	ands.w	r3, r0, #1
 8029cf0:	d00a      	beq.n	8029d08 <__swsetup_r+0xbc>
 8029cf2:	2300      	movs	r3, #0
 8029cf4:	60a3      	str	r3, [r4, #8]
 8029cf6:	6963      	ldr	r3, [r4, #20]
 8029cf8:	425b      	negs	r3, r3
 8029cfa:	61a3      	str	r3, [r4, #24]
 8029cfc:	6923      	ldr	r3, [r4, #16]
 8029cfe:	b943      	cbnz	r3, 8029d12 <__swsetup_r+0xc6>
 8029d00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8029d04:	d1ba      	bne.n	8029c7c <__swsetup_r+0x30>
 8029d06:	bd70      	pop	{r4, r5, r6, pc}
 8029d08:	0781      	lsls	r1, r0, #30
 8029d0a:	bf58      	it	pl
 8029d0c:	6963      	ldrpl	r3, [r4, #20]
 8029d0e:	60a3      	str	r3, [r4, #8]
 8029d10:	e7f4      	b.n	8029cfc <__swsetup_r+0xb0>
 8029d12:	2000      	movs	r0, #0
 8029d14:	e7f7      	b.n	8029d06 <__swsetup_r+0xba>
 8029d16:	bf00      	nop
 8029d18:	200000c4 	.word	0x200000c4
 8029d1c:	0802d3a4 	.word	0x0802d3a4
 8029d20:	0802d3c4 	.word	0x0802d3c4
 8029d24:	0802d384 	.word	0x0802d384

08029d28 <__register_exitproc>:
 8029d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029d2c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8029dec <__register_exitproc+0xc4>
 8029d30:	4606      	mov	r6, r0
 8029d32:	461f      	mov	r7, r3
 8029d34:	460d      	mov	r5, r1
 8029d36:	f8d8 0000 	ldr.w	r0, [r8]
 8029d3a:	4691      	mov	r9, r2
 8029d3c:	f000 fa0e 	bl	802a15c <__retarget_lock_acquire_recursive>
 8029d40:	4b26      	ldr	r3, [pc, #152]	; (8029ddc <__register_exitproc+0xb4>)
 8029d42:	681c      	ldr	r4, [r3, #0]
 8029d44:	b934      	cbnz	r4, 8029d54 <__register_exitproc+0x2c>
 8029d46:	4c26      	ldr	r4, [pc, #152]	; (8029de0 <__register_exitproc+0xb8>)
 8029d48:	601c      	str	r4, [r3, #0]
 8029d4a:	4b26      	ldr	r3, [pc, #152]	; (8029de4 <__register_exitproc+0xbc>)
 8029d4c:	b113      	cbz	r3, 8029d54 <__register_exitproc+0x2c>
 8029d4e:	681b      	ldr	r3, [r3, #0]
 8029d50:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8029d54:	6863      	ldr	r3, [r4, #4]
 8029d56:	2b1f      	cmp	r3, #31
 8029d58:	dd07      	ble.n	8029d6a <__register_exitproc+0x42>
 8029d5a:	f8d8 0000 	ldr.w	r0, [r8]
 8029d5e:	f000 f9ff 	bl	802a160 <__retarget_lock_release_recursive>
 8029d62:	f04f 30ff 	mov.w	r0, #4294967295
 8029d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029d6a:	b35e      	cbz	r6, 8029dc4 <__register_exitproc+0x9c>
 8029d6c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8029d70:	b988      	cbnz	r0, 8029d96 <__register_exitproc+0x6e>
 8029d72:	4b1d      	ldr	r3, [pc, #116]	; (8029de8 <__register_exitproc+0xc0>)
 8029d74:	b923      	cbnz	r3, 8029d80 <__register_exitproc+0x58>
 8029d76:	f8d8 0000 	ldr.w	r0, [r8]
 8029d7a:	f000 f9f0 	bl	802a15e <__retarget_lock_release>
 8029d7e:	e7f0      	b.n	8029d62 <__register_exitproc+0x3a>
 8029d80:	f44f 7084 	mov.w	r0, #264	; 0x108
 8029d84:	f7ff fa08 	bl	8029198 <malloc>
 8029d88:	2800      	cmp	r0, #0
 8029d8a:	d0f4      	beq.n	8029d76 <__register_exitproc+0x4e>
 8029d8c:	2300      	movs	r3, #0
 8029d8e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8029d92:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8029d96:	6863      	ldr	r3, [r4, #4]
 8029d98:	2201      	movs	r2, #1
 8029d9a:	2e02      	cmp	r6, #2
 8029d9c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8029da0:	fa02 f203 	lsl.w	r2, r2, r3
 8029da4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8029da8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8029dac:	ea43 0302 	orr.w	r3, r3, r2
 8029db0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8029db4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8029db8:	bf02      	ittt	eq
 8029dba:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8029dbe:	4313      	orreq	r3, r2
 8029dc0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8029dc4:	6863      	ldr	r3, [r4, #4]
 8029dc6:	f8d8 0000 	ldr.w	r0, [r8]
 8029dca:	1c5a      	adds	r2, r3, #1
 8029dcc:	3302      	adds	r3, #2
 8029dce:	6062      	str	r2, [r4, #4]
 8029dd0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8029dd4:	f000 f9c4 	bl	802a160 <__retarget_lock_release_recursive>
 8029dd8:	2000      	movs	r0, #0
 8029dda:	e7c4      	b.n	8029d66 <__register_exitproc+0x3e>
 8029ddc:	20197e18 	.word	0x20197e18
 8029de0:	20197d8c 	.word	0x20197d8c
 8029de4:	0802d30c 	.word	0x0802d30c
 8029de8:	08029199 	.word	0x08029199
 8029dec:	20000128 	.word	0x20000128

08029df0 <__sflush_r>:
 8029df0:	898a      	ldrh	r2, [r1, #12]
 8029df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029df6:	4605      	mov	r5, r0
 8029df8:	0710      	lsls	r0, r2, #28
 8029dfa:	460c      	mov	r4, r1
 8029dfc:	d458      	bmi.n	8029eb0 <__sflush_r+0xc0>
 8029dfe:	684b      	ldr	r3, [r1, #4]
 8029e00:	2b00      	cmp	r3, #0
 8029e02:	dc05      	bgt.n	8029e10 <__sflush_r+0x20>
 8029e04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8029e06:	2b00      	cmp	r3, #0
 8029e08:	dc02      	bgt.n	8029e10 <__sflush_r+0x20>
 8029e0a:	2000      	movs	r0, #0
 8029e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029e10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8029e12:	2e00      	cmp	r6, #0
 8029e14:	d0f9      	beq.n	8029e0a <__sflush_r+0x1a>
 8029e16:	2300      	movs	r3, #0
 8029e18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8029e1c:	682f      	ldr	r7, [r5, #0]
 8029e1e:	602b      	str	r3, [r5, #0]
 8029e20:	d032      	beq.n	8029e88 <__sflush_r+0x98>
 8029e22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8029e24:	89a3      	ldrh	r3, [r4, #12]
 8029e26:	075a      	lsls	r2, r3, #29
 8029e28:	d505      	bpl.n	8029e36 <__sflush_r+0x46>
 8029e2a:	6863      	ldr	r3, [r4, #4]
 8029e2c:	1ac0      	subs	r0, r0, r3
 8029e2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8029e30:	b10b      	cbz	r3, 8029e36 <__sflush_r+0x46>
 8029e32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8029e34:	1ac0      	subs	r0, r0, r3
 8029e36:	2300      	movs	r3, #0
 8029e38:	4602      	mov	r2, r0
 8029e3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8029e3c:	4628      	mov	r0, r5
 8029e3e:	6a21      	ldr	r1, [r4, #32]
 8029e40:	47b0      	blx	r6
 8029e42:	1c43      	adds	r3, r0, #1
 8029e44:	89a3      	ldrh	r3, [r4, #12]
 8029e46:	d106      	bne.n	8029e56 <__sflush_r+0x66>
 8029e48:	6829      	ldr	r1, [r5, #0]
 8029e4a:	291d      	cmp	r1, #29
 8029e4c:	d82c      	bhi.n	8029ea8 <__sflush_r+0xb8>
 8029e4e:	4a29      	ldr	r2, [pc, #164]	; (8029ef4 <__sflush_r+0x104>)
 8029e50:	40ca      	lsrs	r2, r1
 8029e52:	07d6      	lsls	r6, r2, #31
 8029e54:	d528      	bpl.n	8029ea8 <__sflush_r+0xb8>
 8029e56:	2200      	movs	r2, #0
 8029e58:	04d9      	lsls	r1, r3, #19
 8029e5a:	6062      	str	r2, [r4, #4]
 8029e5c:	6922      	ldr	r2, [r4, #16]
 8029e5e:	6022      	str	r2, [r4, #0]
 8029e60:	d504      	bpl.n	8029e6c <__sflush_r+0x7c>
 8029e62:	1c42      	adds	r2, r0, #1
 8029e64:	d101      	bne.n	8029e6a <__sflush_r+0x7a>
 8029e66:	682b      	ldr	r3, [r5, #0]
 8029e68:	b903      	cbnz	r3, 8029e6c <__sflush_r+0x7c>
 8029e6a:	6560      	str	r0, [r4, #84]	; 0x54
 8029e6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8029e6e:	602f      	str	r7, [r5, #0]
 8029e70:	2900      	cmp	r1, #0
 8029e72:	d0ca      	beq.n	8029e0a <__sflush_r+0x1a>
 8029e74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029e78:	4299      	cmp	r1, r3
 8029e7a:	d002      	beq.n	8029e82 <__sflush_r+0x92>
 8029e7c:	4628      	mov	r0, r5
 8029e7e:	f7ff f9a3 	bl	80291c8 <_free_r>
 8029e82:	2000      	movs	r0, #0
 8029e84:	6360      	str	r0, [r4, #52]	; 0x34
 8029e86:	e7c1      	b.n	8029e0c <__sflush_r+0x1c>
 8029e88:	6a21      	ldr	r1, [r4, #32]
 8029e8a:	2301      	movs	r3, #1
 8029e8c:	4628      	mov	r0, r5
 8029e8e:	47b0      	blx	r6
 8029e90:	1c41      	adds	r1, r0, #1
 8029e92:	d1c7      	bne.n	8029e24 <__sflush_r+0x34>
 8029e94:	682b      	ldr	r3, [r5, #0]
 8029e96:	2b00      	cmp	r3, #0
 8029e98:	d0c4      	beq.n	8029e24 <__sflush_r+0x34>
 8029e9a:	2b1d      	cmp	r3, #29
 8029e9c:	d001      	beq.n	8029ea2 <__sflush_r+0xb2>
 8029e9e:	2b16      	cmp	r3, #22
 8029ea0:	d101      	bne.n	8029ea6 <__sflush_r+0xb6>
 8029ea2:	602f      	str	r7, [r5, #0]
 8029ea4:	e7b1      	b.n	8029e0a <__sflush_r+0x1a>
 8029ea6:	89a3      	ldrh	r3, [r4, #12]
 8029ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029eac:	81a3      	strh	r3, [r4, #12]
 8029eae:	e7ad      	b.n	8029e0c <__sflush_r+0x1c>
 8029eb0:	690f      	ldr	r7, [r1, #16]
 8029eb2:	2f00      	cmp	r7, #0
 8029eb4:	d0a9      	beq.n	8029e0a <__sflush_r+0x1a>
 8029eb6:	0793      	lsls	r3, r2, #30
 8029eb8:	680e      	ldr	r6, [r1, #0]
 8029eba:	600f      	str	r7, [r1, #0]
 8029ebc:	bf0c      	ite	eq
 8029ebe:	694b      	ldreq	r3, [r1, #20]
 8029ec0:	2300      	movne	r3, #0
 8029ec2:	eba6 0807 	sub.w	r8, r6, r7
 8029ec6:	608b      	str	r3, [r1, #8]
 8029ec8:	f1b8 0f00 	cmp.w	r8, #0
 8029ecc:	dd9d      	ble.n	8029e0a <__sflush_r+0x1a>
 8029ece:	4643      	mov	r3, r8
 8029ed0:	463a      	mov	r2, r7
 8029ed2:	6a21      	ldr	r1, [r4, #32]
 8029ed4:	4628      	mov	r0, r5
 8029ed6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8029ed8:	47b0      	blx	r6
 8029eda:	2800      	cmp	r0, #0
 8029edc:	dc06      	bgt.n	8029eec <__sflush_r+0xfc>
 8029ede:	89a3      	ldrh	r3, [r4, #12]
 8029ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8029ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029ee8:	81a3      	strh	r3, [r4, #12]
 8029eea:	e78f      	b.n	8029e0c <__sflush_r+0x1c>
 8029eec:	4407      	add	r7, r0
 8029eee:	eba8 0800 	sub.w	r8, r8, r0
 8029ef2:	e7e9      	b.n	8029ec8 <__sflush_r+0xd8>
 8029ef4:	20400001 	.word	0x20400001

08029ef8 <_fflush_r>:
 8029ef8:	b538      	push	{r3, r4, r5, lr}
 8029efa:	690b      	ldr	r3, [r1, #16]
 8029efc:	4605      	mov	r5, r0
 8029efe:	460c      	mov	r4, r1
 8029f00:	b913      	cbnz	r3, 8029f08 <_fflush_r+0x10>
 8029f02:	2500      	movs	r5, #0
 8029f04:	4628      	mov	r0, r5
 8029f06:	bd38      	pop	{r3, r4, r5, pc}
 8029f08:	b118      	cbz	r0, 8029f12 <_fflush_r+0x1a>
 8029f0a:	6983      	ldr	r3, [r0, #24]
 8029f0c:	b90b      	cbnz	r3, 8029f12 <_fflush_r+0x1a>
 8029f0e:	f000 f887 	bl	802a020 <__sinit>
 8029f12:	4b14      	ldr	r3, [pc, #80]	; (8029f64 <_fflush_r+0x6c>)
 8029f14:	429c      	cmp	r4, r3
 8029f16:	d11b      	bne.n	8029f50 <_fflush_r+0x58>
 8029f18:	686c      	ldr	r4, [r5, #4]
 8029f1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029f1e:	2b00      	cmp	r3, #0
 8029f20:	d0ef      	beq.n	8029f02 <_fflush_r+0xa>
 8029f22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8029f24:	07d0      	lsls	r0, r2, #31
 8029f26:	d404      	bmi.n	8029f32 <_fflush_r+0x3a>
 8029f28:	0599      	lsls	r1, r3, #22
 8029f2a:	d402      	bmi.n	8029f32 <_fflush_r+0x3a>
 8029f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8029f2e:	f000 f915 	bl	802a15c <__retarget_lock_acquire_recursive>
 8029f32:	4628      	mov	r0, r5
 8029f34:	4621      	mov	r1, r4
 8029f36:	f7ff ff5b 	bl	8029df0 <__sflush_r>
 8029f3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8029f3c:	4605      	mov	r5, r0
 8029f3e:	07da      	lsls	r2, r3, #31
 8029f40:	d4e0      	bmi.n	8029f04 <_fflush_r+0xc>
 8029f42:	89a3      	ldrh	r3, [r4, #12]
 8029f44:	059b      	lsls	r3, r3, #22
 8029f46:	d4dd      	bmi.n	8029f04 <_fflush_r+0xc>
 8029f48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8029f4a:	f000 f909 	bl	802a160 <__retarget_lock_release_recursive>
 8029f4e:	e7d9      	b.n	8029f04 <_fflush_r+0xc>
 8029f50:	4b05      	ldr	r3, [pc, #20]	; (8029f68 <_fflush_r+0x70>)
 8029f52:	429c      	cmp	r4, r3
 8029f54:	d101      	bne.n	8029f5a <_fflush_r+0x62>
 8029f56:	68ac      	ldr	r4, [r5, #8]
 8029f58:	e7df      	b.n	8029f1a <_fflush_r+0x22>
 8029f5a:	4b04      	ldr	r3, [pc, #16]	; (8029f6c <_fflush_r+0x74>)
 8029f5c:	429c      	cmp	r4, r3
 8029f5e:	bf08      	it	eq
 8029f60:	68ec      	ldreq	r4, [r5, #12]
 8029f62:	e7da      	b.n	8029f1a <_fflush_r+0x22>
 8029f64:	0802d3a4 	.word	0x0802d3a4
 8029f68:	0802d3c4 	.word	0x0802d3c4
 8029f6c:	0802d384 	.word	0x0802d384

08029f70 <std>:
 8029f70:	2300      	movs	r3, #0
 8029f72:	b510      	push	{r4, lr}
 8029f74:	4604      	mov	r4, r0
 8029f76:	6083      	str	r3, [r0, #8]
 8029f78:	8181      	strh	r1, [r0, #12]
 8029f7a:	4619      	mov	r1, r3
 8029f7c:	6643      	str	r3, [r0, #100]	; 0x64
 8029f7e:	81c2      	strh	r2, [r0, #14]
 8029f80:	2208      	movs	r2, #8
 8029f82:	6183      	str	r3, [r0, #24]
 8029f84:	e9c0 3300 	strd	r3, r3, [r0]
 8029f88:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8029f8c:	305c      	adds	r0, #92	; 0x5c
 8029f8e:	f7ff f913 	bl	80291b8 <memset>
 8029f92:	4b05      	ldr	r3, [pc, #20]	; (8029fa8 <std+0x38>)
 8029f94:	6224      	str	r4, [r4, #32]
 8029f96:	6263      	str	r3, [r4, #36]	; 0x24
 8029f98:	4b04      	ldr	r3, [pc, #16]	; (8029fac <std+0x3c>)
 8029f9a:	62a3      	str	r3, [r4, #40]	; 0x28
 8029f9c:	4b04      	ldr	r3, [pc, #16]	; (8029fb0 <std+0x40>)
 8029f9e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8029fa0:	4b04      	ldr	r3, [pc, #16]	; (8029fb4 <std+0x44>)
 8029fa2:	6323      	str	r3, [r4, #48]	; 0x30
 8029fa4:	bd10      	pop	{r4, pc}
 8029fa6:	bf00      	nop
 8029fa8:	0802a261 	.word	0x0802a261
 8029fac:	0802a283 	.word	0x0802a283
 8029fb0:	0802a2bb 	.word	0x0802a2bb
 8029fb4:	0802a2df 	.word	0x0802a2df

08029fb8 <_cleanup_r>:
 8029fb8:	4901      	ldr	r1, [pc, #4]	; (8029fc0 <_cleanup_r+0x8>)
 8029fba:	f000 b8af 	b.w	802a11c <_fwalk_reent>
 8029fbe:	bf00      	nop
 8029fc0:	08029ef9 	.word	0x08029ef9

08029fc4 <__sfmoreglue>:
 8029fc4:	b570      	push	{r4, r5, r6, lr}
 8029fc6:	2268      	movs	r2, #104	; 0x68
 8029fc8:	1e4d      	subs	r5, r1, #1
 8029fca:	460e      	mov	r6, r1
 8029fcc:	4355      	muls	r5, r2
 8029fce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8029fd2:	f7ff f965 	bl	80292a0 <_malloc_r>
 8029fd6:	4604      	mov	r4, r0
 8029fd8:	b140      	cbz	r0, 8029fec <__sfmoreglue+0x28>
 8029fda:	2100      	movs	r1, #0
 8029fdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8029fe0:	e9c0 1600 	strd	r1, r6, [r0]
 8029fe4:	300c      	adds	r0, #12
 8029fe6:	60a0      	str	r0, [r4, #8]
 8029fe8:	f7ff f8e6 	bl	80291b8 <memset>
 8029fec:	4620      	mov	r0, r4
 8029fee:	bd70      	pop	{r4, r5, r6, pc}

08029ff0 <__sfp_lock_acquire>:
 8029ff0:	4801      	ldr	r0, [pc, #4]	; (8029ff8 <__sfp_lock_acquire+0x8>)
 8029ff2:	f000 b8b3 	b.w	802a15c <__retarget_lock_acquire_recursive>
 8029ff6:	bf00      	nop
 8029ff8:	20197e1e 	.word	0x20197e1e

08029ffc <__sfp_lock_release>:
 8029ffc:	4801      	ldr	r0, [pc, #4]	; (802a004 <__sfp_lock_release+0x8>)
 8029ffe:	f000 b8af 	b.w	802a160 <__retarget_lock_release_recursive>
 802a002:	bf00      	nop
 802a004:	20197e1e 	.word	0x20197e1e

0802a008 <__sinit_lock_acquire>:
 802a008:	4801      	ldr	r0, [pc, #4]	; (802a010 <__sinit_lock_acquire+0x8>)
 802a00a:	f000 b8a7 	b.w	802a15c <__retarget_lock_acquire_recursive>
 802a00e:	bf00      	nop
 802a010:	20197e1f 	.word	0x20197e1f

0802a014 <__sinit_lock_release>:
 802a014:	4801      	ldr	r0, [pc, #4]	; (802a01c <__sinit_lock_release+0x8>)
 802a016:	f000 b8a3 	b.w	802a160 <__retarget_lock_release_recursive>
 802a01a:	bf00      	nop
 802a01c:	20197e1f 	.word	0x20197e1f

0802a020 <__sinit>:
 802a020:	b510      	push	{r4, lr}
 802a022:	4604      	mov	r4, r0
 802a024:	f7ff fff0 	bl	802a008 <__sinit_lock_acquire>
 802a028:	69a3      	ldr	r3, [r4, #24]
 802a02a:	b11b      	cbz	r3, 802a034 <__sinit+0x14>
 802a02c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802a030:	f7ff bff0 	b.w	802a014 <__sinit_lock_release>
 802a034:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802a038:	6523      	str	r3, [r4, #80]	; 0x50
 802a03a:	4620      	mov	r0, r4
 802a03c:	4b12      	ldr	r3, [pc, #72]	; (802a088 <__sinit+0x68>)
 802a03e:	4a13      	ldr	r2, [pc, #76]	; (802a08c <__sinit+0x6c>)
 802a040:	681b      	ldr	r3, [r3, #0]
 802a042:	62a2      	str	r2, [r4, #40]	; 0x28
 802a044:	42a3      	cmp	r3, r4
 802a046:	bf04      	itt	eq
 802a048:	2301      	moveq	r3, #1
 802a04a:	61a3      	streq	r3, [r4, #24]
 802a04c:	f000 f820 	bl	802a090 <__sfp>
 802a050:	6060      	str	r0, [r4, #4]
 802a052:	4620      	mov	r0, r4
 802a054:	f000 f81c 	bl	802a090 <__sfp>
 802a058:	60a0      	str	r0, [r4, #8]
 802a05a:	4620      	mov	r0, r4
 802a05c:	f000 f818 	bl	802a090 <__sfp>
 802a060:	2200      	movs	r2, #0
 802a062:	2104      	movs	r1, #4
 802a064:	60e0      	str	r0, [r4, #12]
 802a066:	6860      	ldr	r0, [r4, #4]
 802a068:	f7ff ff82 	bl	8029f70 <std>
 802a06c:	2201      	movs	r2, #1
 802a06e:	2109      	movs	r1, #9
 802a070:	68a0      	ldr	r0, [r4, #8]
 802a072:	f7ff ff7d 	bl	8029f70 <std>
 802a076:	2202      	movs	r2, #2
 802a078:	2112      	movs	r1, #18
 802a07a:	68e0      	ldr	r0, [r4, #12]
 802a07c:	f7ff ff78 	bl	8029f70 <std>
 802a080:	2301      	movs	r3, #1
 802a082:	61a3      	str	r3, [r4, #24]
 802a084:	e7d2      	b.n	802a02c <__sinit+0xc>
 802a086:	bf00      	nop
 802a088:	0802d2d4 	.word	0x0802d2d4
 802a08c:	08029fb9 	.word	0x08029fb9

0802a090 <__sfp>:
 802a090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a092:	4607      	mov	r7, r0
 802a094:	f7ff ffac 	bl	8029ff0 <__sfp_lock_acquire>
 802a098:	4b1e      	ldr	r3, [pc, #120]	; (802a114 <__sfp+0x84>)
 802a09a:	681e      	ldr	r6, [r3, #0]
 802a09c:	69b3      	ldr	r3, [r6, #24]
 802a09e:	b913      	cbnz	r3, 802a0a6 <__sfp+0x16>
 802a0a0:	4630      	mov	r0, r6
 802a0a2:	f7ff ffbd 	bl	802a020 <__sinit>
 802a0a6:	3648      	adds	r6, #72	; 0x48
 802a0a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802a0ac:	3b01      	subs	r3, #1
 802a0ae:	d503      	bpl.n	802a0b8 <__sfp+0x28>
 802a0b0:	6833      	ldr	r3, [r6, #0]
 802a0b2:	b30b      	cbz	r3, 802a0f8 <__sfp+0x68>
 802a0b4:	6836      	ldr	r6, [r6, #0]
 802a0b6:	e7f7      	b.n	802a0a8 <__sfp+0x18>
 802a0b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802a0bc:	b9d5      	cbnz	r5, 802a0f4 <__sfp+0x64>
 802a0be:	4b16      	ldr	r3, [pc, #88]	; (802a118 <__sfp+0x88>)
 802a0c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802a0c4:	6665      	str	r5, [r4, #100]	; 0x64
 802a0c6:	60e3      	str	r3, [r4, #12]
 802a0c8:	f000 f847 	bl	802a15a <__retarget_lock_init_recursive>
 802a0cc:	f7ff ff96 	bl	8029ffc <__sfp_lock_release>
 802a0d0:	2208      	movs	r2, #8
 802a0d2:	4629      	mov	r1, r5
 802a0d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802a0d8:	6025      	str	r5, [r4, #0]
 802a0da:	61a5      	str	r5, [r4, #24]
 802a0dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802a0e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802a0e4:	f7ff f868 	bl	80291b8 <memset>
 802a0e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802a0ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802a0f0:	4620      	mov	r0, r4
 802a0f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a0f4:	3468      	adds	r4, #104	; 0x68
 802a0f6:	e7d9      	b.n	802a0ac <__sfp+0x1c>
 802a0f8:	2104      	movs	r1, #4
 802a0fa:	4638      	mov	r0, r7
 802a0fc:	f7ff ff62 	bl	8029fc4 <__sfmoreglue>
 802a100:	4604      	mov	r4, r0
 802a102:	6030      	str	r0, [r6, #0]
 802a104:	2800      	cmp	r0, #0
 802a106:	d1d5      	bne.n	802a0b4 <__sfp+0x24>
 802a108:	f7ff ff78 	bl	8029ffc <__sfp_lock_release>
 802a10c:	230c      	movs	r3, #12
 802a10e:	603b      	str	r3, [r7, #0]
 802a110:	e7ee      	b.n	802a0f0 <__sfp+0x60>
 802a112:	bf00      	nop
 802a114:	0802d2d4 	.word	0x0802d2d4
 802a118:	ffff0001 	.word	0xffff0001

0802a11c <_fwalk_reent>:
 802a11c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a120:	4606      	mov	r6, r0
 802a122:	4688      	mov	r8, r1
 802a124:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802a128:	2700      	movs	r7, #0
 802a12a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802a12e:	f1b9 0901 	subs.w	r9, r9, #1
 802a132:	d505      	bpl.n	802a140 <_fwalk_reent+0x24>
 802a134:	6824      	ldr	r4, [r4, #0]
 802a136:	2c00      	cmp	r4, #0
 802a138:	d1f7      	bne.n	802a12a <_fwalk_reent+0xe>
 802a13a:	4638      	mov	r0, r7
 802a13c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a140:	89ab      	ldrh	r3, [r5, #12]
 802a142:	2b01      	cmp	r3, #1
 802a144:	d907      	bls.n	802a156 <_fwalk_reent+0x3a>
 802a146:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802a14a:	3301      	adds	r3, #1
 802a14c:	d003      	beq.n	802a156 <_fwalk_reent+0x3a>
 802a14e:	4629      	mov	r1, r5
 802a150:	4630      	mov	r0, r6
 802a152:	47c0      	blx	r8
 802a154:	4307      	orrs	r7, r0
 802a156:	3568      	adds	r5, #104	; 0x68
 802a158:	e7e9      	b.n	802a12e <_fwalk_reent+0x12>

0802a15a <__retarget_lock_init_recursive>:
 802a15a:	4770      	bx	lr

0802a15c <__retarget_lock_acquire_recursive>:
 802a15c:	4770      	bx	lr

0802a15e <__retarget_lock_release>:
 802a15e:	4770      	bx	lr

0802a160 <__retarget_lock_release_recursive>:
 802a160:	4770      	bx	lr

0802a162 <__swhatbuf_r>:
 802a162:	b570      	push	{r4, r5, r6, lr}
 802a164:	460e      	mov	r6, r1
 802a166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a16a:	b096      	sub	sp, #88	; 0x58
 802a16c:	4614      	mov	r4, r2
 802a16e:	2900      	cmp	r1, #0
 802a170:	461d      	mov	r5, r3
 802a172:	da08      	bge.n	802a186 <__swhatbuf_r+0x24>
 802a174:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802a178:	2200      	movs	r2, #0
 802a17a:	602a      	str	r2, [r5, #0]
 802a17c:	061a      	lsls	r2, r3, #24
 802a17e:	d410      	bmi.n	802a1a2 <__swhatbuf_r+0x40>
 802a180:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802a184:	e00e      	b.n	802a1a4 <__swhatbuf_r+0x42>
 802a186:	466a      	mov	r2, sp
 802a188:	f000 f8d0 	bl	802a32c <_fstat_r>
 802a18c:	2800      	cmp	r0, #0
 802a18e:	dbf1      	blt.n	802a174 <__swhatbuf_r+0x12>
 802a190:	9a01      	ldr	r2, [sp, #4]
 802a192:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802a196:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802a19a:	425a      	negs	r2, r3
 802a19c:	415a      	adcs	r2, r3
 802a19e:	602a      	str	r2, [r5, #0]
 802a1a0:	e7ee      	b.n	802a180 <__swhatbuf_r+0x1e>
 802a1a2:	2340      	movs	r3, #64	; 0x40
 802a1a4:	2000      	movs	r0, #0
 802a1a6:	6023      	str	r3, [r4, #0]
 802a1a8:	b016      	add	sp, #88	; 0x58
 802a1aa:	bd70      	pop	{r4, r5, r6, pc}

0802a1ac <__smakebuf_r>:
 802a1ac:	898b      	ldrh	r3, [r1, #12]
 802a1ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802a1b0:	079d      	lsls	r5, r3, #30
 802a1b2:	4606      	mov	r6, r0
 802a1b4:	460c      	mov	r4, r1
 802a1b6:	d507      	bpl.n	802a1c8 <__smakebuf_r+0x1c>
 802a1b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802a1bc:	6023      	str	r3, [r4, #0]
 802a1be:	6123      	str	r3, [r4, #16]
 802a1c0:	2301      	movs	r3, #1
 802a1c2:	6163      	str	r3, [r4, #20]
 802a1c4:	b002      	add	sp, #8
 802a1c6:	bd70      	pop	{r4, r5, r6, pc}
 802a1c8:	ab01      	add	r3, sp, #4
 802a1ca:	466a      	mov	r2, sp
 802a1cc:	f7ff ffc9 	bl	802a162 <__swhatbuf_r>
 802a1d0:	9900      	ldr	r1, [sp, #0]
 802a1d2:	4605      	mov	r5, r0
 802a1d4:	4630      	mov	r0, r6
 802a1d6:	f7ff f863 	bl	80292a0 <_malloc_r>
 802a1da:	b948      	cbnz	r0, 802a1f0 <__smakebuf_r+0x44>
 802a1dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a1e0:	059a      	lsls	r2, r3, #22
 802a1e2:	d4ef      	bmi.n	802a1c4 <__smakebuf_r+0x18>
 802a1e4:	f023 0303 	bic.w	r3, r3, #3
 802a1e8:	f043 0302 	orr.w	r3, r3, #2
 802a1ec:	81a3      	strh	r3, [r4, #12]
 802a1ee:	e7e3      	b.n	802a1b8 <__smakebuf_r+0xc>
 802a1f0:	4b0d      	ldr	r3, [pc, #52]	; (802a228 <__smakebuf_r+0x7c>)
 802a1f2:	62b3      	str	r3, [r6, #40]	; 0x28
 802a1f4:	89a3      	ldrh	r3, [r4, #12]
 802a1f6:	6020      	str	r0, [r4, #0]
 802a1f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802a1fc:	6120      	str	r0, [r4, #16]
 802a1fe:	81a3      	strh	r3, [r4, #12]
 802a200:	9b00      	ldr	r3, [sp, #0]
 802a202:	6163      	str	r3, [r4, #20]
 802a204:	9b01      	ldr	r3, [sp, #4]
 802a206:	b15b      	cbz	r3, 802a220 <__smakebuf_r+0x74>
 802a208:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802a20c:	4630      	mov	r0, r6
 802a20e:	f000 f89f 	bl	802a350 <_isatty_r>
 802a212:	b128      	cbz	r0, 802a220 <__smakebuf_r+0x74>
 802a214:	89a3      	ldrh	r3, [r4, #12]
 802a216:	f023 0303 	bic.w	r3, r3, #3
 802a21a:	f043 0301 	orr.w	r3, r3, #1
 802a21e:	81a3      	strh	r3, [r4, #12]
 802a220:	89a0      	ldrh	r0, [r4, #12]
 802a222:	4305      	orrs	r5, r0
 802a224:	81a5      	strh	r5, [r4, #12]
 802a226:	e7cd      	b.n	802a1c4 <__smakebuf_r+0x18>
 802a228:	08029fb9 	.word	0x08029fb9

0802a22c <memchr>:
 802a22c:	b2c9      	uxtb	r1, r1
 802a22e:	4402      	add	r2, r0
 802a230:	b510      	push	{r4, lr}
 802a232:	4290      	cmp	r0, r2
 802a234:	4603      	mov	r3, r0
 802a236:	d101      	bne.n	802a23c <memchr+0x10>
 802a238:	2300      	movs	r3, #0
 802a23a:	e003      	b.n	802a244 <memchr+0x18>
 802a23c:	781c      	ldrb	r4, [r3, #0]
 802a23e:	3001      	adds	r0, #1
 802a240:	428c      	cmp	r4, r1
 802a242:	d1f6      	bne.n	802a232 <memchr+0x6>
 802a244:	4618      	mov	r0, r3
 802a246:	bd10      	pop	{r4, pc}

0802a248 <__malloc_lock>:
 802a248:	4801      	ldr	r0, [pc, #4]	; (802a250 <__malloc_lock+0x8>)
 802a24a:	f7ff bf87 	b.w	802a15c <__retarget_lock_acquire_recursive>
 802a24e:	bf00      	nop
 802a250:	20197e1d 	.word	0x20197e1d

0802a254 <__malloc_unlock>:
 802a254:	4801      	ldr	r0, [pc, #4]	; (802a25c <__malloc_unlock+0x8>)
 802a256:	f7ff bf83 	b.w	802a160 <__retarget_lock_release_recursive>
 802a25a:	bf00      	nop
 802a25c:	20197e1d 	.word	0x20197e1d

0802a260 <__sread>:
 802a260:	b510      	push	{r4, lr}
 802a262:	460c      	mov	r4, r1
 802a264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a268:	f000 f894 	bl	802a394 <_read_r>
 802a26c:	2800      	cmp	r0, #0
 802a26e:	bfab      	itete	ge
 802a270:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802a272:	89a3      	ldrhlt	r3, [r4, #12]
 802a274:	181b      	addge	r3, r3, r0
 802a276:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802a27a:	bfac      	ite	ge
 802a27c:	6563      	strge	r3, [r4, #84]	; 0x54
 802a27e:	81a3      	strhlt	r3, [r4, #12]
 802a280:	bd10      	pop	{r4, pc}

0802a282 <__swrite>:
 802a282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a286:	461f      	mov	r7, r3
 802a288:	898b      	ldrh	r3, [r1, #12]
 802a28a:	4605      	mov	r5, r0
 802a28c:	460c      	mov	r4, r1
 802a28e:	05db      	lsls	r3, r3, #23
 802a290:	4616      	mov	r6, r2
 802a292:	d505      	bpl.n	802a2a0 <__swrite+0x1e>
 802a294:	2302      	movs	r3, #2
 802a296:	2200      	movs	r2, #0
 802a298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a29c:	f000 f868 	bl	802a370 <_lseek_r>
 802a2a0:	89a3      	ldrh	r3, [r4, #12]
 802a2a2:	4632      	mov	r2, r6
 802a2a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802a2a8:	4628      	mov	r0, r5
 802a2aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802a2ae:	81a3      	strh	r3, [r4, #12]
 802a2b0:	463b      	mov	r3, r7
 802a2b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802a2b6:	f000 b817 	b.w	802a2e8 <_write_r>

0802a2ba <__sseek>:
 802a2ba:	b510      	push	{r4, lr}
 802a2bc:	460c      	mov	r4, r1
 802a2be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a2c2:	f000 f855 	bl	802a370 <_lseek_r>
 802a2c6:	1c43      	adds	r3, r0, #1
 802a2c8:	89a3      	ldrh	r3, [r4, #12]
 802a2ca:	bf15      	itete	ne
 802a2cc:	6560      	strne	r0, [r4, #84]	; 0x54
 802a2ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802a2d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802a2d6:	81a3      	strheq	r3, [r4, #12]
 802a2d8:	bf18      	it	ne
 802a2da:	81a3      	strhne	r3, [r4, #12]
 802a2dc:	bd10      	pop	{r4, pc}

0802a2de <__sclose>:
 802a2de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a2e2:	f000 b813 	b.w	802a30c <_close_r>
	...

0802a2e8 <_write_r>:
 802a2e8:	b538      	push	{r3, r4, r5, lr}
 802a2ea:	4604      	mov	r4, r0
 802a2ec:	4d06      	ldr	r5, [pc, #24]	; (802a308 <_write_r+0x20>)
 802a2ee:	4608      	mov	r0, r1
 802a2f0:	4611      	mov	r1, r2
 802a2f2:	2200      	movs	r2, #0
 802a2f4:	602a      	str	r2, [r5, #0]
 802a2f6:	461a      	mov	r2, r3
 802a2f8:	f7d7 fe33 	bl	8001f62 <_write>
 802a2fc:	1c43      	adds	r3, r0, #1
 802a2fe:	d102      	bne.n	802a306 <_write_r+0x1e>
 802a300:	682b      	ldr	r3, [r5, #0]
 802a302:	b103      	cbz	r3, 802a306 <_write_r+0x1e>
 802a304:	6023      	str	r3, [r4, #0]
 802a306:	bd38      	pop	{r3, r4, r5, pc}
 802a308:	20197e20 	.word	0x20197e20

0802a30c <_close_r>:
 802a30c:	b538      	push	{r3, r4, r5, lr}
 802a30e:	2300      	movs	r3, #0
 802a310:	4d05      	ldr	r5, [pc, #20]	; (802a328 <_close_r+0x1c>)
 802a312:	4604      	mov	r4, r0
 802a314:	4608      	mov	r0, r1
 802a316:	602b      	str	r3, [r5, #0]
 802a318:	f7d7 fe3f 	bl	8001f9a <_close>
 802a31c:	1c43      	adds	r3, r0, #1
 802a31e:	d102      	bne.n	802a326 <_close_r+0x1a>
 802a320:	682b      	ldr	r3, [r5, #0]
 802a322:	b103      	cbz	r3, 802a326 <_close_r+0x1a>
 802a324:	6023      	str	r3, [r4, #0]
 802a326:	bd38      	pop	{r3, r4, r5, pc}
 802a328:	20197e20 	.word	0x20197e20

0802a32c <_fstat_r>:
 802a32c:	b538      	push	{r3, r4, r5, lr}
 802a32e:	2300      	movs	r3, #0
 802a330:	4d06      	ldr	r5, [pc, #24]	; (802a34c <_fstat_r+0x20>)
 802a332:	4604      	mov	r4, r0
 802a334:	4608      	mov	r0, r1
 802a336:	4611      	mov	r1, r2
 802a338:	602b      	str	r3, [r5, #0]
 802a33a:	f7d7 fe3a 	bl	8001fb2 <_fstat>
 802a33e:	1c43      	adds	r3, r0, #1
 802a340:	d102      	bne.n	802a348 <_fstat_r+0x1c>
 802a342:	682b      	ldr	r3, [r5, #0]
 802a344:	b103      	cbz	r3, 802a348 <_fstat_r+0x1c>
 802a346:	6023      	str	r3, [r4, #0]
 802a348:	bd38      	pop	{r3, r4, r5, pc}
 802a34a:	bf00      	nop
 802a34c:	20197e20 	.word	0x20197e20

0802a350 <_isatty_r>:
 802a350:	b538      	push	{r3, r4, r5, lr}
 802a352:	2300      	movs	r3, #0
 802a354:	4d05      	ldr	r5, [pc, #20]	; (802a36c <_isatty_r+0x1c>)
 802a356:	4604      	mov	r4, r0
 802a358:	4608      	mov	r0, r1
 802a35a:	602b      	str	r3, [r5, #0]
 802a35c:	f7d7 fe39 	bl	8001fd2 <_isatty>
 802a360:	1c43      	adds	r3, r0, #1
 802a362:	d102      	bne.n	802a36a <_isatty_r+0x1a>
 802a364:	682b      	ldr	r3, [r5, #0]
 802a366:	b103      	cbz	r3, 802a36a <_isatty_r+0x1a>
 802a368:	6023      	str	r3, [r4, #0]
 802a36a:	bd38      	pop	{r3, r4, r5, pc}
 802a36c:	20197e20 	.word	0x20197e20

0802a370 <_lseek_r>:
 802a370:	b538      	push	{r3, r4, r5, lr}
 802a372:	4604      	mov	r4, r0
 802a374:	4d06      	ldr	r5, [pc, #24]	; (802a390 <_lseek_r+0x20>)
 802a376:	4608      	mov	r0, r1
 802a378:	4611      	mov	r1, r2
 802a37a:	2200      	movs	r2, #0
 802a37c:	602a      	str	r2, [r5, #0]
 802a37e:	461a      	mov	r2, r3
 802a380:	f7d7 fe32 	bl	8001fe8 <_lseek>
 802a384:	1c43      	adds	r3, r0, #1
 802a386:	d102      	bne.n	802a38e <_lseek_r+0x1e>
 802a388:	682b      	ldr	r3, [r5, #0]
 802a38a:	b103      	cbz	r3, 802a38e <_lseek_r+0x1e>
 802a38c:	6023      	str	r3, [r4, #0]
 802a38e:	bd38      	pop	{r3, r4, r5, pc}
 802a390:	20197e20 	.word	0x20197e20

0802a394 <_read_r>:
 802a394:	b538      	push	{r3, r4, r5, lr}
 802a396:	4604      	mov	r4, r0
 802a398:	4d06      	ldr	r5, [pc, #24]	; (802a3b4 <_read_r+0x20>)
 802a39a:	4608      	mov	r0, r1
 802a39c:	4611      	mov	r1, r2
 802a39e:	2200      	movs	r2, #0
 802a3a0:	602a      	str	r2, [r5, #0]
 802a3a2:	461a      	mov	r2, r3
 802a3a4:	f7d7 fdc0 	bl	8001f28 <_read>
 802a3a8:	1c43      	adds	r3, r0, #1
 802a3aa:	d102      	bne.n	802a3b2 <_read_r+0x1e>
 802a3ac:	682b      	ldr	r3, [r5, #0]
 802a3ae:	b103      	cbz	r3, 802a3b2 <_read_r+0x1e>
 802a3b0:	6023      	str	r3, [r4, #0]
 802a3b2:	bd38      	pop	{r3, r4, r5, pc}
 802a3b4:	20197e20 	.word	0x20197e20

0802a3b8 <_init>:
 802a3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a3ba:	bf00      	nop
 802a3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a3be:	bc08      	pop	{r3}
 802a3c0:	469e      	mov	lr, r3
 802a3c2:	4770      	bx	lr

0802a3c4 <_fini>:
 802a3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a3c6:	bf00      	nop
 802a3c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a3ca:	bc08      	pop	{r3}
 802a3cc:	469e      	mov	lr, r3
 802a3ce:	4770      	bx	lr
